{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/contracts/GTTMetaTxProcessor.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\npragma experimental ABIEncoderV2;\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\r\\nimport \\\"./SigUtil.sol\\\";\\r\\nimport \\\"./BytesUtil.sol\\\";\\r\\nimport \\\"./gtt.sol\\\";\\r\\n\\r\\ncontract GTTMetaTxProcessor {\\r\\n    //EIP712\u534f\u8bae\u7684\u7c7b\u578b\u63cf\u8ff0\\r\\n    bytes32 constant EIP712DOMAIN_TYPEHASH = keccak256(\\r\\n        \\\"EIP712Domain(string name,string version,address verifyingContract)\\\"\\r\\n    );\\r\\n    //\u5206\u5272\u8bcd,\u4e0e\u524d\u7aef\u7b7e\u540d\u5339\u914d,\u540d\u5b57\u548c\u7248\u672c,\u7136\u540e\u5730\u5740\\r\\n    bytes32 DOMAIN_SEPARATOR;\\r\\n\\r\\n    bytes32 constant ERC20METATRANSACTION_TYPEHASH = keccak256(\\r\\n        \\\"ERC20MetaTransaction(address from,address to,address tokenContract,uint256 amount,uint256 nonce)\\\"\\r\\n    );\\r\\n\\r\\n    // \u534f\u8bae\u9700\u8981\u7684Event\u5bf9\u8c61\\r\\n    event MetaTx(\\r\\n        address indexed from,\\r\\n        uint256 indexed nonce,\\r\\n        bool success\\r\\n    );\\r\\n\\r\\n    // \u72b6\u6001\u5bf9\u8c61\\r\\n    mapping(address => uint256) batches;\\r\\n    bool lock = false;\\r\\n\\r\\n    constructor() {\\r\\n        DOMAIN_SEPARATOR = keccak256(\\r\\n            abi.encode(\\r\\n                EIP712DOMAIN_TYPEHASH,\\r\\n                keccak256(\\\"GTT Meta Transaction\\\"),\\r\\n                keccak256(\\\"1\\\"),\\r\\n                address(this)\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function executeMetaTransaction(\\r\\n        address from,\\r\\n        address to,\\r\\n        bytes memory signature,\\r\\n        address tokenContract,\\r\\n        uint256 amount,\\r\\n        uint256 nonce\\r\\n    ) public returns (bool success) {\\r\\n        require(!lock, \\\"IN_PROGRESS\\\");\\r\\n        lock = true;\\r\\n        _ensureParametersValidity(from, nonce);\\r\\n        _ensureCorrectSigner(from, to,  signature, tokenContract, amount, nonce);\\r\\n        success = _performERC20MetaTx(from, to, tokenContract, amount, nonce);\\r\\n        lock = false;\\r\\n    }\\r\\n\\r\\n    function _ensureParametersValidity(\\r\\n        address from,\\r\\n        uint256 nonce\\r\\n    ) internal view {\\r\\n        require(batches[from] + 1 == nonce, \\\"nonce out of order\\\");\\r\\n    }\\r\\n\\r\\n    function _encodeMessage(\\r\\n        address from,\\r\\n        address to,\\r\\n        address tokenContract,\\r\\n        uint256 amount,\\r\\n        uint256 nonce\\r\\n    ) internal view returns (bytes memory) {\\r\\n        return abi.encodePacked(\\r\\n            \\\"\\\\x19\\\\x01\\\"\\r\\n            ,DOMAIN_SEPARATOR\\r\\n            ,keccak256(messageBytes(from, to, tokenContract, amount, nonce))\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function messageBytes(\\r\\n        address from,\\r\\n        address to,\\r\\n        address tokenContract,\\r\\n        uint256 amount,\\r\\n        uint256 nonce\\r\\n    ) internal pure returns(bytes memory) {\\r\\n        return abi.encode(\\r\\n            ERC20METATRANSACTION_TYPEHASH,\\r\\n            from,\\r\\n            to,\\r\\n            tokenContract,\\r\\n            amount,\\r\\n            nonce\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function _ensureCorrectSigner(\\r\\n        address from,\\r\\n        address to,\\r\\n        bytes memory signature,\\r\\n        address tokenContract,\\r\\n        uint256 amount,\\r\\n        uint256 nonce\\r\\n    ) internal view {\\r\\n        bytes memory dataToHash = _encodeMessage(from, to, tokenContract, amount, nonce);\\r\\n\\r\\n        address signer = SigUtil.recover(keccak256(dataToHash), signature);\\r\\n        require(signer == from, \\\"signer != from\\\");\\r\\n    }\\r\\n\\r\\n    function _performERC20MetaTx(\\r\\n        address from,\\r\\n        address to,\\r\\n        address tokenAddress,\\r\\n        uint256 amount,\\r\\n        uint256 nonce\\r\\n    ) internal returns (bool success) {\\r\\n        batches[from] = nonce;\\r\\n\\r\\n        ERC20 tokenContract = ERC20(tokenAddress);\\r\\n        require(tokenContract.transferFrom(from, to, amount), \\\"ERC20_TRANSFER_FAILED\\\");\\r\\n\\r\\n        success = true;\\r\\n\\r\\n        emit MetaTx(from, nonce, success);\\r\\n    }\\r\\n\\r\\n    function get_nonce(address from) external view returns(uint256) {\\r\\n        return batches[from];\\r\\n    }\\r\\n}\"\r\n    },\r\n    \"/contracts/gtt.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\r\\n\\r\\ncontract GreateTicket is ERC20 {\\r\\n    address internal _metaTxProcessor;\\r\\n\\r\\n    constructor(address metaTxProcessor) ERC20(\\\"Great E Ticket\\\", \\\"GET\\\") {\\r\\n        _mint(msg.sender, 100000000000);\\r\\n\\r\\n        _metaTxProcessor = metaTxProcessor;\\r\\n    }\\r\\n    \\r\\n    function decimals() public view virtual override returns (uint8) {\\r\\n        return 2;\\r\\n    }\\r\\n\\r\\n    function isValidSender(address from) internal view returns(bool) {\\r\\n        return from == address(0) || _msgSender() == from || isMetaTx();\\r\\n    }\\r\\n\\r\\n    function isMetaTx() internal view returns(bool) {\\r\\n        return _msgSender() == _metaTxProcessor;\\r\\n    }\\r\\n\\r\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal override virtual { \\r\\n         // \u5f53mint\u7684\u65f6\u5019from\u662f\u7ed90\u5730\u5740\uff0c\u76ee\u6807\u5730\u5740\u4f1a\u662f\u53d1\u9001\u5730\u5740\\r\\n         require(isValidSender(from), \\\"NOT_AUTHORIZED\\\");\\r\\n         require(from != address(0) || to != address(0), \\\"both from and to were zero address\\\");\\r\\n         require(amount != 0, \\\"amount equal zero\\\");\\r\\n     }\\r\\n\\r\\n     function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\r\\n        _transfer(sender, recipient, amount);\\r\\n\\r\\n        if(!isMetaTx())\\r\\n        {\\r\\n            uint256 allowAmt = allowance(sender, _msgSender());\\r\\n            require(allowAmt >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\r\\n            _approve(sender, _msgSender(), amount);\\r\\n        }\\r\\n        return true;\\r\\n    }\\r\\n}\"\r\n    },\r\n    \"/contracts/SigUtil.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nlibrary SigUtil {\\r\\n    function recover(bytes32 hash, bytes memory sig)\\r\\n        internal\\r\\n        pure\\r\\n        returns (address recovered)\\r\\n    {\\r\\n        require(sig.length == 65);\\r\\n\\r\\n        bytes32 r;\\r\\n        bytes32 s;\\r\\n        uint8 v;\\r\\n        assembly {\\r\\n            r := mload(add(sig, 32))\\r\\n            s := mload(add(sig, 64))\\r\\n            v := byte(0, mload(add(sig, 96)))\\r\\n        }\\r\\n\\r\\n        // Version of signature should be 27 or 28, but 0 and 1 are also possible versions\\r\\n        if (v < 27) {\\r\\n            v += 27;\\r\\n        }\\r\\n        require(v == 27 || v == 28);\\r\\n\\r\\n        recovered = ecrecover(hash, v, r, s);\\r\\n        require(recovered != address(0));\\r\\n    }\\r\\n\\r\\n    function recoverWithZeroOnFailure(bytes32 hash, bytes memory sig)\\r\\n        internal\\r\\n        pure\\r\\n        returns (address)\\r\\n    {\\r\\n        if (sig.length != 65) {\\r\\n            return (address(0));\\r\\n        }\\r\\n\\r\\n        bytes32 r;\\r\\n        bytes32 s;\\r\\n        uint8 v;\\r\\n        assembly {\\r\\n            r := mload(add(sig, 32))\\r\\n            s := mload(add(sig, 64))\\r\\n            v := byte(0, mload(add(sig, 96)))\\r\\n        }\\r\\n\\r\\n        // Version of signature should be 27 or 28, but 0 and 1 are also possible versions\\r\\n        if (v < 27) {\\r\\n            v += 27;\\r\\n        }\\r\\n\\r\\n        if (v != 27 && v != 28) {\\r\\n            return (address(0));\\r\\n        } else {\\r\\n            return ecrecover(hash, v, r, s);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // Builds a prefixed hash to mimic the behavior of eth_sign.\\r\\n    function prefixed(bytes32 hash) internal pure returns (bytes memory) {\\r\\n        return abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash);\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"/contracts/BytesUtil.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nlibrary BytesUtil {\\r\\n    function memcpy(uint256 dest, uint256 src, uint256 len) internal pure {\\r\\n        // Copy word-length chunks while possible\\r\\n        for (; len >= 32; len -= 32) {\\r\\n            assembly {\\r\\n                mstore(dest, mload(src))\\r\\n            }\\r\\n            dest += 32;\\r\\n            src += 32;\\r\\n        }\\r\\n\\r\\n        // Copy remaining bytes\\r\\n        uint256 mask = 256**(32 - len) - 1;\\r\\n        assembly {\\r\\n            let srcpart := and(mload(src), not(mask))\\r\\n            let destpart := and(mload(dest), mask)\\r\\n            mstore(dest, or(destpart, srcpart))\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function pointerToBytes(uint256 src, uint256 len)\\r\\n        internal\\r\\n        pure\\r\\n        returns (bytes memory)\\r\\n    {\\r\\n        bytes memory ret = new bytes(len);\\r\\n        uint256 retptr;\\r\\n        assembly {\\r\\n            retptr := add(ret, 32)\\r\\n        }\\r\\n\\r\\n        memcpy(retptr, src, len);\\r\\n        return ret;\\r\\n    }\\r\\n\\r\\n    function addressToBytes(address a) internal pure returns (bytes memory b) {\\r\\n        assembly {\\r\\n            let m := mload(0x40)\\r\\n            mstore(\\r\\n                add(m, 20),\\r\\n                xor(0x140000000000000000000000000000000000000000, a)\\r\\n            )\\r\\n            mstore(0x40, add(m, 52))\\r\\n            b := m\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function uint256ToBytes(uint256 a) internal pure returns (bytes memory b) {\\r\\n        assembly {\\r\\n            let m := mload(0x40)\\r\\n            mstore(add(m, 32), a)\\r\\n            mstore(0x40, add(m, 64))\\r\\n            b := m\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function doFirstParamEqualsAddress(bytes memory data, address _address)\\r\\n        internal\\r\\n        pure\\r\\n        returns (bool)\\r\\n    {\\r\\n        if (data.length < (36 + 32)) {\\r\\n            return false;\\r\\n        }\\r\\n        uint256 value;\\r\\n        assembly {\\r\\n            value := mload(add(data, 36))\\r\\n        }\\r\\n        return value == uint256(uint160(_address));\\r\\n    }\\r\\n\\r\\n    function doParamEqualsUInt256(bytes memory data, uint256 i, uint256 value)\\r\\n        internal\\r\\n        pure\\r\\n        returns (bool)\\r\\n    {\\r\\n        if (data.length < (36 + (i + 1) * 32)) {\\r\\n            return false;\\r\\n        }\\r\\n        uint256 offset = 36 + i * 32;\\r\\n        uint256 valuePresent;\\r\\n        assembly {\\r\\n            valuePresent := mload(add(data, offset))\\r\\n        }\\r\\n        return valuePresent == value;\\r\\n    }\\r\\n\\r\\n    function overrideFirst32BytesWithAddress(\\r\\n        bytes memory data,\\r\\n        address _address\\r\\n    ) internal pure returns (bytes memory) {\\r\\n        uint256 dest;\\r\\n        assembly {\\r\\n            dest := add(data, 48)\\r\\n        } // 48 = 32 (offset) + 4 (func sig) + 12 (address is only 20 bytes)\\r\\n\\r\\n        bytes memory addressBytes = addressToBytes(_address);\\r\\n        uint256 src;\\r\\n        assembly {\\r\\n            src := add(addressBytes, 32)\\r\\n        }\\r\\n\\r\\n        memcpy(dest, src, 20);\\r\\n        return data;\\r\\n    }\\r\\n\\r\\n    function overrideFirstTwo32BytesWithAddressAndInt(\\r\\n        bytes memory data,\\r\\n        address _address,\\r\\n        uint256 _value\\r\\n    ) internal pure returns (bytes memory) {\\r\\n        uint256 dest;\\r\\n        uint256 src;\\r\\n\\r\\n        assembly {\\r\\n            dest := add(data, 48)\\r\\n        } // 48 = 32 (offset) + 4 (func sig) + 12 (address is only 20 bytes)\\r\\n        bytes memory bbytes = addressToBytes(_address);\\r\\n        assembly {\\r\\n            src := add(bbytes, 32)\\r\\n        }\\r\\n        memcpy(dest, src, 20);\\r\\n\\r\\n        assembly {\\r\\n            dest := add(data, 68)\\r\\n        } // 48 = 32 (offset) + 4 (func sig) + 32 (next slot)\\r\\n        bbytes = uint256ToBytes(_value);\\r\\n        assembly {\\r\\n            src := add(bbytes, 32)\\r\\n        }\\r\\n        memcpy(dest, src, 32);\\r\\n\\r\\n        return data;\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address from, address to, uint256 amount) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"shanghai\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"name\":\"MetaTx\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"tokenContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"name\":\"executeMetaTransaction\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"}],\"name\":\"get_nonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "GTTMetaTxProcessor", "CompilerVersion": "v0.8.21+commit.d9974bed", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "shanghai", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}