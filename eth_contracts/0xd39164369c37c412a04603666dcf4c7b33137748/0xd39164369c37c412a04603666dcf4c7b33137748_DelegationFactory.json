{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"DelegationFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.23;\\n\\nimport \\\"Clones.sol\\\";\\nimport \\\"IBoostCallback.sol\\\";\\nimport \\\"IDelegationFactory.sol\\\";\\nimport \\\"IVault.sol\\\";\\nimport \\\"IForwarder.sol\\\";\\nimport \\\"DelegatedOps.sol\\\";\\n\\ncontract DelegationFactory is IDelegationFactory, DelegatedOps {\\n    using Clones for address;\\n\\n    IPrismaVault public immutable vault;\\n    address public immutable forwarderImplementation;\\n\\n    mapping(address => address) public forwarder;\\n    mapping(address delegate => IBoostCallback) public feeCallback;\\n    mapping(address delegate => IBoostCallback) public delegateCallback;\\n    mapping(address receiver => IBoostCallback) public receiverCallback;\\n\\n    event ForwarderDeployed(address boostDelegate, address forwarder);\\n    event ForwarderConfigured(\\n        address indexed boostDelegate,\\n        address feeCallback,\\n        address delegateCallback,\\n        address receiverCallback\\n    );\\n\\n    constructor(IPrismaVault _vault, address _fwdImplementation) {\\n        vault = _vault;\\n        forwarderImplementation = _fwdImplementation;\\n    }\\n\\n    /**\\n        @notice Configure boost delegate forwarder for the caller\\n        @dev Deploys a new `Forwarder` contract on the first call from a new address.\\n             To activate the forwarder, the caller must set it as their delegate callback\\n             with `Vault.setBoostDelegationParams`.\\n        @param _feeCallback If set, the forwarder calls `IBoostCallback.getFeePct` at this address\\n                            to retrieve the delegation fee percent. You must additionally set the\\n                            `feePct` to `type(uint16).max` when configuring boost delegation params\\n                            in the vault.\\n        @param _delegateCallback If set, the forwarder calls `IBoostCallback.delegateCallback` at this\\n                                address when `msg.sender` is specified as `boostDelegate` during a call\\n                                to `Vault.batchClaimRewards`\\n        @param _receiverCallback If set, the forwarder calls `IBoostCallback.receiverCallback` at this\\n                                address when `msg.sender` is specified as `receiver` during a call\\n                                to `Vault.batchClaimRewards`.\\n     */\\n    function configureForwarder(\\n        address account,\\n        address _feeCallback,\\n        address _delegateCallback,\\n        address _receiverCallback\\n    ) external callerOrDelegated(account) returns (bool) {\\n        if (forwarder[account] == address(0)) {\\n            address fwd = forwarderImplementation.cloneDeterministic(bytes32(bytes20(account)));\\n            IForwarder(fwd).initialize(account);\\n            forwarder[account] = fwd;\\n            emit ForwarderDeployed(account, fwd);\\n        }\\n\\n        feeCallback[account] = IBoostCallback(_feeCallback);\\n        delegateCallback[account] = IBoostCallback(_delegateCallback);\\n        receiverCallback[account] = IBoostCallback(_receiverCallback);\\n\\n        emit ForwarderConfigured(account, _feeCallback, _delegateCallback, _receiverCallback);\\n\\n        return true;\\n    }\\n\\n    /**\\n        @notice Returns `true` if the given `boostDelegate` has set their forwarder\\n                as the callback address within the vault.\\n        @dev Receivers that have configured a callback should only be used in combination\\n             with delegates that have an active forwarder, otherwise the receiver callback\\n             will not occur.\\n     */\\n    function isForwarderActive(address boostDelegate) external view returns (bool) {\\n        if (forwarder[boostDelegate] == address(0)) return false;\\n        (, , address callback) = vault.boostDelegation(boostDelegate);\\n        return callback == forwarder[boostDelegate];\\n    }\\n\\n    /**\\n        @notice Forwards a call to the fee callback set by `boostDelegate`\\n     */\\n    function forwardFeePct(\\n        address claimant,\\n        address receiver,\\n        address boostDelegate,\\n        uint amount,\\n        uint previousAmount,\\n        uint totalWeeklyEmissions\\n    ) external view returns (uint256 feePct) {\\n        return\\n            feeCallback[boostDelegate].getFeePct(\\n                claimant,\\n                receiver,\\n                boostDelegate,\\n                amount,\\n                previousAmount,\\n                totalWeeklyEmissions\\n            );\\n    }\\n\\n    /**\\n        @notice Forwards delegate and receiver callbacks\\n     */\\n    function forwardCallback(\\n        address claimant,\\n        address receiver,\\n        address boostDelegate,\\n        uint amount,\\n        uint adjustedAmount,\\n        uint fee,\\n        uint previousAmount,\\n        uint totalWeeklyEmissions\\n    ) external returns (bool success) {\\n        require(msg.sender == forwarder[boostDelegate], \\\"!forwarder\\\");\\n\\n        IBoostCallback callback = delegateCallback[boostDelegate];\\n        if (address(callback) != address(0)) {\\n            callback.delegateCallback(\\n                claimant,\\n                receiver,\\n                boostDelegate,\\n                amount,\\n                adjustedAmount,\\n                fee,\\n                previousAmount,\\n                totalWeeklyEmissions\\n            );\\n        }\\n\\n        callback = receiverCallback[receiver];\\n        if (address(callback) != address(0)) {\\n            callback.receiverCallback(claimant, receiver, adjustedAmount);\\n        }\\n\\n        return true;\\n    }\\n}\\n\"\r\n    },\r\n    \"Clones.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/Clones.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\\n * deploying minimal proxy contracts, also known as \\\"clones\\\".\\n *\\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\\n *\\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\\n * deterministic method.\\n *\\n * _Available since v3.4._\\n */\\nlibrary Clones {\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create opcode, which should never revert.\\n     */\\n    function clone(address implementation) internal returns (address instance) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Cleans the upper 96 bits of the `implementation` word, then packs the first 3 bytes\\n            // of the `implementation` address with the bytecode before the address.\\n            mstore(0x00, or(shr(0xe8, shl(0x60, implementation)), 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000))\\n            // Packs the remaining 17 bytes of `implementation` with the bytecode after the address.\\n            mstore(0x20, or(shl(0x78, implementation), 0x5af43d82803e903d91602b57fd5bf3))\\n            instance := create(0, 0x09, 0x37)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create failed\\\");\\n    }\\n\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\\n     * the clone. Using the same `implementation` and `salt` multiple time will revert, since\\n     * the clones cannot be deployed twice at the same address.\\n     */\\n    function cloneDeterministic(address implementation, bytes32 salt) internal returns (address instance) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Cleans the upper 96 bits of the `implementation` word, then packs the first 3 bytes\\n            // of the `implementation` address with the bytecode before the address.\\n            mstore(0x00, or(shr(0xe8, shl(0x60, implementation)), 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000))\\n            // Packs the remaining 17 bytes of `implementation` with the bytecode after the address.\\n            mstore(0x20, or(shl(0x78, implementation), 0x5af43d82803e903d91602b57fd5bf3))\\n            instance := create2(0, 0x09, 0x37, salt)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create2 failed\\\");\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(\\n        address implementation,\\n        bytes32 salt,\\n        address deployer\\n    ) internal pure returns (address predicted) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(add(ptr, 0x38), deployer)\\n            mstore(add(ptr, 0x24), 0x5af43d82803e903d91602b57fd5bf3ff)\\n            mstore(add(ptr, 0x14), implementation)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73)\\n            mstore(add(ptr, 0x58), salt)\\n            mstore(add(ptr, 0x78), keccak256(add(ptr, 0x0c), 0x37))\\n            predicted := keccak256(add(ptr, 0x43), 0x55)\\n        }\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(\\n        address implementation,\\n        bytes32 salt\\n    ) internal view returns (address predicted) {\\n        return predictDeterministicAddress(implementation, salt, address(this));\\n    }\\n}\\n\"\r\n    },\r\n    \"IBoostCallback.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n    @title Prisma Boost Forwarder Callback interface\\n    @notice Optional callback functions that can be set within `DelegationFactory`\\n */\\ninterface IBoostCallback {\\n    /**\\n        @notice Get the current fee percent charged to use this boost delegate\\n        @dev Only called if the feePct is set to `type(uint16).max` when\\n             enabling delegation within the vault, and `feeCallback` is set within\\n             `DelegationFactory`.\\n        @param claimant Address that will perform the claim\\n        @param receiver Address that will receive the claimed rewards\\n        @param boostDelegate Address to be used as a boost delegate during the claim\\n        @param amount Amount to be claimed (before applying boost or fee)\\n        @param previousAmount Previous amount claimed this week by this contract\\n        @param totalWeeklyEmissions Total weekly emissions released this week\\n        @return feePct Fee % charged for claims that use this contracts' delegated boost.\\n                      Given as a whole number out of 10000. If a claim would be rejected,\\n                      the preferred return value is `type(uint256).max`.\\n     */\\n    function getFeePct(\\n        address claimant,\\n        address receiver,\\n        address boostDelegate,\\n        uint amount,\\n        uint previousAmount,\\n        uint totalWeeklyEmissions\\n    ) external view returns (uint256 feePct);\\n\\n    /**\\n        @notice Callback function for boost delegators\\n        @dev Only called if `delegateCallback` is set within `DelegationFactory`\\n        @param claimant Address that performed the claim\\n        @param receiver Address that is receiving the claimed rewards\\n        @param boostDelegate Address of the boost delegate used during the claim.\\n                             THIS ADDRESS CAN BE INCORRECT IF THE VAULT DELEGATION\\n                             PARAMS ARE MISCONFIGURED. Logic within the function\\n                             should not rely on it's correctness.\\n        @param amount Amount being claimed (before applying boost or fee)\\n        @param adjustedAmount Actual amount received by `claimant`\\n        @param fee Fee amount paid by `claimant`\\n        @param previousAmount Previous amount claimed this week by this contract\\n        @param totalWeeklyEmissions Total weekly emissions released this week\\n     */\\n    function delegateCallback(\\n        address claimant,\\n        address receiver,\\n        address boostDelegate,\\n        uint amount,\\n        uint adjustedAmount,\\n        uint fee,\\n        uint previousAmount,\\n        uint totalWeeklyEmissions\\n    ) external returns (bool success);\\n\\n    /**\\n        @notice Callback to the reward receiver upon a successful reward claim\\n        @dev Only called if `receiverCallback` is set within `DelegationFactory`.\\n     */\\n    function receiverCallback(address claimant, address receiver, uint amount) external returns (bool success);\\n}\\n\"\r\n    },\r\n    \"IDelegationFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface IDelegationFactory {\\n    function forwardFeePct(\\n        address claimant,\\n        address receiver,\\n        address boostDelegate,\\n        uint amount,\\n        uint previousAmount,\\n        uint totalWeeklyEmissions\\n    ) external view returns (uint256 feePct);\\n\\n    function forwardCallback(\\n        address claimant,\\n        address receiver,\\n        address boostDelegate,\\n        uint amount,\\n        uint adjustedAmount,\\n        uint fee,\\n        uint previousAmount,\\n        uint totalWeeklyEmissions\\n    ) external returns (bool success);\\n}\\n\"\r\n    },\r\n    \"IVault.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface IPrismaVault {\\n    struct InitialAllowance {\\n        address receiver;\\n        uint256 amount;\\n    }\\n\\n    event BoostCalculatorSet(address boostCalculator);\\n    event BoostDelegationSet(address indexed boostDelegate, bool isEnabled, uint256 feePct, address callback);\\n    event EmissionScheduleSet(address emissionScheduler);\\n    event IncreasedAllocation(address indexed receiver, uint256 increasedAmount);\\n    event NewReceiverRegistered(address receiver, uint256 id);\\n    event ReceiverIsActiveStatusModified(uint256 indexed id, bool isActive);\\n    event UnallocatedSupplyIncreased(uint256 increasedAmount, uint256 unallocatedTotal);\\n    event UnallocatedSupplyReduced(uint256 reducedAmount, uint256 unallocatedTotal);\\n\\n    function allocateNewEmissions(uint256 id) external returns (uint256);\\n\\n    function batchClaimRewards(\\n        address receiver,\\n        address boostDelegate,\\n        address[] calldata rewardContracts,\\n        uint256 maxFeePct\\n    ) external returns (bool);\\n\\n    function increaseUnallocatedSupply(uint256 amount) external returns (bool);\\n\\n    function registerReceiver(address receiver, uint256 count) external returns (bool);\\n\\n    function setBoostCalculator(address _boostCalculator) external returns (bool);\\n\\n    function setBoostDelegationParams(bool isEnabled, uint256 feePct, address callback) external returns (bool);\\n\\n    function setEmissionSchedule(address _emissionSchedule) external returns (bool);\\n\\n    function setInitialParameters(\\n        address _emissionSchedule,\\n        address _boostCalculator,\\n        uint256 totalSupply,\\n        uint64 initialLockWeeks,\\n        uint128[] calldata _fixedInitialAmounts,\\n        InitialAllowance[] calldata initialAllowances\\n    ) external;\\n\\n    function setReceiverIsActive(uint256 id, bool isActive) external returns (bool);\\n\\n    function transferAllocatedTokens(address claimant, address receiver, uint256 amount) external returns (bool);\\n\\n    function transferTokens(address token, address receiver, uint256 amount) external returns (bool);\\n\\n    function PRISMA_CORE() external view returns (address);\\n\\n    function allocated(address) external view returns (uint256);\\n\\n    function boostCalculator() external view returns (address);\\n\\n    function boostDelegation(address) external view returns (bool isEnabled, uint16 feePct, address callback);\\n\\n    function claimableRewardAfterBoost(\\n        address account,\\n        address receiver,\\n        address boostDelegate,\\n        address rewardContract\\n    ) external view returns (uint256 adjustedAmount, uint256 feeToDelegate);\\n\\n    function emissionSchedule() external view returns (address);\\n\\n    function getClaimableWithBoost(address claimant) external view returns (uint256 maxBoosted, uint256 boosted);\\n\\n    function getWeek() external view returns (uint256 week);\\n\\n    function guardian() external view returns (address);\\n\\n    function idToReceiver(uint256) external view returns (address account, bool isActive);\\n\\n    function lockWeeks() external view returns (uint64);\\n\\n    function locker() external view returns (address);\\n\\n    function owner() external view returns (address);\\n\\n    function claimableBoostDelegationFees(address claimant) external view returns (uint256 amount);\\n\\n    function prismaToken() external view returns (address);\\n\\n    function receiverUpdatedWeek(uint256) external view returns (uint16);\\n\\n    function totalUpdateWeek() external view returns (uint64);\\n\\n    function unallocatedTotal() external view returns (uint128);\\n\\n    function voter() external view returns (address);\\n\\n    function weeklyEmissions(uint256) external view returns (uint128);\\n}\\n\"\r\n    },\r\n    \"IForwarder.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.23;\\n\\nimport \\\"IBoostDelegate.sol\\\";\\n\\ninterface IForwarder is IBoostDelegate {\\n    function initialize(address _delegate) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"IBoostDelegate.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n    @title Prisma Boost Delegate Interface\\n    @notice When enabling boost delegation via `Vault.setBoostDelegationParams`,\\n            you may optionally set a `callback` contract. If set, it should adhere\\n            to the following interface.\\n */\\ninterface IBoostDelegate {\\n    /**\\n        @notice Get the current fee percent charged to use this boost delegate\\n        @dev Optional. Only called if the feePct is set to `type(uint16).max` when\\n             enabling delegation.\\n        @param claimant Address that will perform the claim\\n        @param amount Amount to be claimed (before applying boost or fee)\\n        @param previousAmount Previous amount claimed this week by this contract\\n        @param totalWeeklyEmissions Total weekly emissions released this week\\n        @return feePct Fee % charged for claims that use this contracts' delegated boost.\\n                      Given as a whole number out of 10000. If a claim would be rejected,\\n                      the preferred return value is `type(uint256).max`.\\n     */\\n    function getFeePct(\\n        address claimant,\\n        address receiver,\\n        uint amount,\\n        uint previousAmount,\\n        uint totalWeeklyEmissions\\n    ) external view returns (uint256 feePct);\\n\\n    /**\\n        @notice Callback function for boost delegators\\n        @dev MUST BE INCLUDED. Called after each successful claim which used\\n             this contract's delegated boost.\\n        @param claimant Address that performed the claim\\n        @param amount Amount that claimed (before applying boost or fee)\\n        @param adjustedAmount Actual amount received by `claimant`\\n        @param fee Fee amount paid by `claimant`\\n        @param previousAmount Previous amount claimed this week by this contract\\n        @param totalWeeklyEmissions Total weekly emissions released this week\\n     */\\n    function delegatedBoostCallback(\\n        address claimant,\\n        address receiver,\\n        uint amount,\\n        uint adjustedAmount,\\n        uint fee,\\n        uint previousAmount,\\n        uint totalWeeklyEmissions\\n    ) external returns (bool success);\\n}\\n\"\r\n    },\r\n    \"DelegatedOps.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n    @title Prisma Delegated Operations\\n    @notice Allows delegation to specific contract functionality. Useful for creating\\n            wrapper contracts to bundle multiple interactions into a single call.\\n\\n            Functions that supports delegation should include an `account` input allowing\\n            the delegated caller to indicate who they are calling on behalf of. In executing\\n            the call, all internal state updates should be applied for `account` and all\\n            value transfers should occur to or from the caller.\\n\\n            For example: a delegated call to `openTrove` should transfer collateral\\n            from the caller, create the debt position for `account`, and send newly\\n            minted tokens to the caller.\\n */\\nabstract contract DelegatedOps {\\n    event DelegateApprovalSet(address indexed caller, address indexed delegate, bool isApproved);\\n\\n    mapping(address owner => mapping(address caller => bool isApproved)) public isApprovedDelegate;\\n\\n    modifier callerOrDelegated(address _account) {\\n        require(msg.sender == _account || isApprovedDelegate[_account][msg.sender], \\\"Delegate not approved\\\");\\n        _;\\n    }\\n\\n    function setDelegateApproval(address _delegate, bool _isApproved) external {\\n        isApprovedDelegate[msg.sender][_delegate] = _isApproved;\\n        emit DelegateApprovalSet(msg.sender, _delegate, _isApproved);\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"evmVersion\": \"paris\",\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"libraries\": {\r\n      \"DelegationFactory.sol\": {}\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract IPrismaVault\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_fwdImplementation\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isApproved\",\"type\":\"bool\"}],\"name\":\"DelegateApprovalSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"boostDelegate\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"feeCallback\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"delegateCallback\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiverCallback\",\"type\":\"address\"}],\"name\":\"ForwarderConfigured\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"boostDelegate\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"ForwarderDeployed\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_feeCallback\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_delegateCallback\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_receiverCallback\",\"type\":\"address\"}],\"name\":\"configureForwarder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"}],\"name\":\"delegateCallback\",\"outputs\":[{\"internalType\":\"contract IBoostCallback\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"}],\"name\":\"feeCallback\",\"outputs\":[{\"internalType\":\"contract IBoostCallback\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"claimant\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"boostDelegate\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"adjustedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"previousAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalWeeklyEmissions\",\"type\":\"uint256\"}],\"name\":\"forwardCallback\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"claimant\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"boostDelegate\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"previousAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalWeeklyEmissions\",\"type\":\"uint256\"}],\"name\":\"forwardFeePct\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"feePct\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"forwarder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"forwarderImplementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"isApprovedDelegate\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isApproved\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"boostDelegate\",\"type\":\"address\"}],\"name\":\"isForwarderActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"receiverCallback\",\"outputs\":[{\"internalType\":\"contract IBoostCallback\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_delegate\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isApproved\",\"type\":\"bool\"}],\"name\":\"setDelegateApproval\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vault\",\"outputs\":[{\"internalType\":\"contract IPrismaVault\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "DelegationFactory", "CompilerVersion": "v0.8.23+commit.f704f362", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000006bdf212c290473dcacea9793890c5024c7eb02c000000000000000000000000b9a3a8735a453b2f8ad375654939cbb08411d9fa", "EVMVersion": "paris", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}