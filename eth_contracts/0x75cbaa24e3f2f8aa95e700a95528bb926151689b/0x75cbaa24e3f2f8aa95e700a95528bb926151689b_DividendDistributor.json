{"SourceCode": "/*\r\nAUDINALS\r\nWebsite: https://www.audinals.io/\r\nTelegram: https://t.me/audinalsofficial\r\nTwitter: https://twitter.com/audinalsmusic\r\n*/\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.21;\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event. C U ON THE MOON\r\n     */\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    constructor() {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(\r\n            newOwner != address(0),\r\n            \"Ownable: new owner is the zero address\"\r\n        );\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\ninterface USDT {\r\n    function balanceOf(address who) external returns (uint);\r\n    function transfer(address to, uint value) external;\r\n    function approve(address spender, uint value) external;\r\n}\r\n\r\ninterface IDividendDistributor {\r\n    function initialize() external;\r\n    function setDistributionCriteria(uint256 _minPeriod, uint256 _minDistribution, uint256 _claimAfter) external;\r\n    function setShare(address shareholder, uint256 amount) external;\r\n    function deposit() external payable;\r\n    function claimDividend(address shareholder) external;\r\n    function getUnpaidEarnings(address shareholder) external view returns (uint256);\r\n    function getPaidDividends(address shareholder) external view returns (uint256);\r\n    function getTotalPaid() external view returns (uint256);\r\n    function getClaimTime(address shareholder) external view returns (uint256);\r\n    function getLostRewards(address shareholder, uint256 amount) external view returns (uint256);\r\n    function getTotalDividends() external view returns (uint256);\r\n    function getTotalDistributed() external view returns (uint256);\r\n    function getTotalSacrificed() external view returns (uint256);\r\n    function countShareholders() external view returns (uint256);\r\n    function migrate(address newDistributor) external;\r\n}\r\n\r\ncontract DividendDistributor is IDividendDistributor, Ownable {\r\n\r\n    address public _token;\r\n    USDT public reward = USDT(0xdAC17F958D2ee523a2206206994597C13D831ec7); //USDT\r\n\r\n    struct Share {\r\n        uint256 amount;\r\n        uint256 totalExcluded;\r\n        uint256 totalRealised;\r\n    }\r\n\r\n    address[] public shareholders;\r\n    mapping (address => uint256) public shareholderIndexes;\r\n    mapping (address => uint256) public shareholderClaims;\r\n    mapping (address => uint256) public shareholderBonus;\r\n\r\n    mapping (address => Share) public shares;\r\n\r\n    uint256 public totalShares;\r\n    uint256 public totalDividends;\r\n    uint256 public totalDistributed;\r\n    uint256 public totalSacrificed;\r\n    uint256 public totalReused;\r\n    uint256 public totalBonus;\r\n    uint256 public dividendsPerShare;\r\n    uint256 public dividendsPerShareAccuracyFactor = 10 ** 36;\r\n\r\n    uint256 public minPeriod = 5 days;\r\n    uint256 public bonusPeriod = 2 days;\r\n    uint256 public minDistribution = 1 * (10 ** 4);\r\n\r\n    address routerAddress = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\r\n    IDexRouter dexRouter = IDexRouter(routerAddress);\r\n    uint256 public slippage = 98;\r\n\r\n    bool public initialized;\r\n    modifier initialization() {\r\n        require(!initialized);\r\n        _;\r\n        initialized = true;\r\n    }\r\n\r\n    modifier onlyToken() {\r\n        require(msg.sender == _token); _;\r\n    }\r\n    \r\n    function getTotalDividends() external view override returns (uint256) {\r\n        return totalDividends;\r\n    }\r\n    function getTotalDistributed() external view override returns (uint256) {\r\n        return totalDistributed;\r\n    }\r\n    function getTotalSacrificed() external view override returns (uint256) {\r\n        return totalSacrificed;\r\n    }\r\n\r\n    constructor () {\r\n        reward.approve(routerAddress, type(uint256).max);\r\n    }\r\n    \r\n    function initialize() external override initialization {\r\n        _token = msg.sender;\r\n    }\r\n    \r\n    function setDistributionCriteria(uint256 _minPeriod, uint256 _minDistribution, uint256 _claimAfter) external override onlyToken {\r\n        minPeriod = _minPeriod;\r\n        minDistribution = _minDistribution;\r\n        _claimAfter;\r\n    }\r\n\r\n    function setBonusPeriod(uint256 _amount) external onlyOwner {\r\n        bonusPeriod = _amount;\r\n    }\r\n\r\n    function setShare(address shareholder, uint256 amount) external override onlyToken {\r\n        if(amount > 0 && shares[shareholder].amount == 0){\r\n            addShareholder(shareholder);\r\n            shares[shareholder].totalExcluded = getCumulativeDividends(amount);\r\n            shareholderClaims[shareholder] = block.timestamp;\r\n        }else if(amount == 0 && shares[shareholder].amount > 0){\r\n            removeShareholder(shareholder);\r\n        }\r\n        \r\n\t    uint256 currentShare = shares[shareholder].amount;\r\n        bool sharesIncreased = currentShare <= amount;\r\n        uint256 unpaid;\r\n        \r\n        if(sharesIncreased){           \r\n            shares[shareholder].totalExcluded += getCumulativeDividends(amount - currentShare);\r\n        } else {\r\n            unpaid = getUnpaidEarnings(shareholder);\r\n        }\r\n        \r\n        totalShares = (totalShares - currentShare) + amount;\r\n        shares[shareholder].amount = amount;\r\n        \r\n        if (!sharesIncreased) {\r\n            if (reward.balanceOf(address(this)) < unpaid) unpaid = reward.balanceOf(address(this));\r\n            totalSacrificed = totalSacrificed + unpaid;\r\n            shares[shareholder].totalExcluded = getCumulativeDividends(amount);\r\n        }\r\n    }\r\n\r\n    function deposit() external payable override {\r\n\t    address[] memory path = new address[](2);\r\n        path[0] = dexRouter.WETH();\r\n        path[1] = address(reward);\r\n\r\n        uint256 spend = address(this).balance;\r\n        uint256[] memory amountsout = dexRouter.getAmountsOut(spend, path);\r\n\r\n\t    uint256 curBal = reward.balanceOf(address(this));\r\n\r\n\t    dexRouter.swapExactETHForTokens{value: spend}(\r\n            amountsout[1] * slippage / 100,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n\r\n\t    uint256 amount = reward.balanceOf(address(this)) - curBal;\r\n        totalDividends += amount;\r\n        if(totalShares > 0)\r\n            if(dividendsPerShare == 0)\r\n                dividendsPerShare = (dividendsPerShareAccuracyFactor * totalDividends) / totalShares;\r\n            else\r\n                dividendsPerShare += ((dividendsPerShareAccuracyFactor * amount) / totalShares);\r\n    }\r\n\r\n    function reinjectSacrificed(uint256 percent) external onlyOwner {\r\n        uint256 amount = (totalSacrificed - totalReused) * percent / 100;\r\n        totalDividends += amount;\r\n        totalReused += amount;\r\n        if(totalShares > 0)\r\n            if(dividendsPerShare == 0)\r\n                dividendsPerShare = (dividendsPerShareAccuracyFactor * totalDividends) / totalShares;\r\n            else\r\n                dividendsPerShare += ((dividendsPerShareAccuracyFactor * amount) / totalShares);\r\n    }\r\n\r\n    function repurposeSacrificed(uint256 percent) external onlyOwner {\r\n        uint256 amount = (totalSacrificed - totalReused) * percent / 100;\r\n        totalReused += amount;\r\n        reward.transfer(msg.sender, amount);\r\n        \r\n    }\r\n\r\n    function extractLostETH() external onlyOwner {\r\n        bool success;\r\n        (success, ) = msg.sender.call{value: address(this).balance}(\"\");\r\n        require(success, \"Transfer failed\");\r\n    }\r\n\r\n    function setSlippage(uint256 _slip) external onlyOwner {\r\n        require(_slip <= 100, \"Min slippage reached\");\r\n        require(_slip >= 80, \"Probably too much slippage\");\r\n        slippage = _slip;\r\n    }\r\n\r\n    function migrate(address newDistributor) external onlyToken {\r\n        DividendDistributor newD = DividendDistributor(newDistributor);\r\n        require(!newD.initialized(), \"Already initialized\");\r\n        bool success;\r\n        (success, ) = newDistributor.call{value: address(this).balance}(\"\");\r\n\t    reward.transfer(newDistributor, reward.balanceOf(address(this)));\r\n        require(success, \"Transfer failed\");\r\n    }\r\n\r\n    function shouldDistribute(address shareholder, uint256 unpaidEarnings) internal view returns (bool) {\r\n\t   return shareholderClaims[shareholder] + minPeriod < block.timestamp\r\n            && unpaidEarnings > minDistribution;        \r\n    }\r\n    \r\n    function getClaimTime(address shareholder) external override view onlyToken returns (uint256) {\r\n        uint256 scp = shareholderClaims[shareholder] + minPeriod;\r\n        if (scp <= block.timestamp) {\r\n            return 0;\r\n        } else {\r\n            return scp - block.timestamp;\r\n        }\r\n    }\r\n\r\n    function distributeDividend(address shareholder, uint256 unpaidEarnings, bool _buyback) internal {\r\n        if(shares[shareholder].amount == 0){ return; }\r\n\r\n        if(unpaidEarnings > 0){\r\n            totalDistributed = totalDistributed + unpaidEarnings;\r\n            shareholderClaims[shareholder] = block.timestamp;\r\n            shares[shareholder].totalRealised = shares[shareholder].totalRealised + unpaidEarnings;\r\n            shares[shareholder].totalExcluded = getCumulativeDividends(shares[shareholder].amount);\r\n            if(_buyback) {\r\n                address[] memory path = new address[](3);\r\n                path[0] = address(reward);\r\n                path[1] = dexRouter.WETH();\r\n                path[2] = _token;\r\n\r\n                uint256[] memory amountsout = dexRouter.getAmountsOut(unpaidEarnings, path);\r\n                uint256 curBal = IERC20(_token).balanceOf(shareholder);\r\n\r\n                dexRouter.swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n                    unpaidEarnings,\r\n                    amountsout[2] * (slippage-5) / 100,\r\n                    path,\r\n                    shareholder,\r\n                    block.timestamp\r\n                );\r\n\r\n                uint256 gained = IERC20(_token).balanceOf(shareholder) - curBal;\r\n                uint256 newTotal = totalBonus + gained / 2;\r\n                require(gained <= amountsout[2] && IERC20(_token).balanceOf(address(this)) >= newTotal, \"Insufficient tokens for bonus\");\r\n                totalBonus = newTotal;\r\n                shareholderBonus[shareholder] += gained / 2;\r\n            } else {\r\n                reward.transfer(shareholder, unpaidEarnings);\r\n            }\r\n        }\r\n    }\r\n\r\n    function claimDividend(address shareholder) external override onlyToken {\r\n        uint256 unpaid = getUnpaidEarnings(shareholder);\r\n        require(shouldDistribute(shareholder, unpaid), \"Dividends not available yet\");\r\n        distributeDividend(shareholder, unpaid, false);\r\n    }\r\n\r\n    function buyback() external {\r\n        uint256 unpaid = getUnpaidEarnings(msg.sender);\r\n        require(shouldDistribute(msg.sender, unpaid), \"Dividends not available yet\");\r\n        distributeDividend(msg.sender, unpaid, true);\r\n    }\r\n\r\n    function claimBonus() external {\r\n        uint256 bonus = shareholderBonus[msg.sender];\r\n        require(bonus > 0 && shareholderClaims[msg.sender] + bonusPeriod < block.timestamp, \"Bonus not ready\");\r\n        shareholderBonus[msg.sender] = 0;\r\n        totalBonus -= bonus;\r\n        IERC20(_token).transfer(msg.sender, bonus);\r\n    }\r\n\r\n    function getUnpaidEarnings(address shareholder) public view override returns (uint256) {\r\n        if(shares[shareholder].amount == 0){ return 0; }\r\n\r\n        uint256 shareholderTotalDividends = getCumulativeDividends(shares[shareholder].amount);\r\n        uint256 shareholderTotalExcluded = shares[shareholder].totalExcluded;\r\n\r\n        if(shareholderTotalDividends <= shareholderTotalExcluded){ return 0; }\r\n\r\n        return shareholderTotalDividends - shareholderTotalExcluded;\r\n    }\r\n    \r\n    function getPaidDividends(address shareholder) external view override onlyToken returns (uint256) {\r\n        return shares[shareholder].totalRealised;\r\n    }\r\n    \r\n    function getTotalPaid() external view override onlyToken returns (uint256) {\r\n        return totalDistributed;\r\n    }\r\n    \r\n    function getLostRewards(address shareholder, uint256 amount) external view override onlyToken returns (uint256) {\r\n        return getCumulativeDividends(amount) - shares[shareholder].totalRealised;\r\n    }\r\n\r\n    function getCumulativeDividends(uint256 share) internal view returns (uint256) {\r\n        if(share == 0){ return 0; }\r\n        return (share * dividendsPerShare) / dividendsPerShareAccuracyFactor;\r\n    }\r\n\r\n    function countShareholders() public view returns(uint256) {\r\n        return shareholders.length;\r\n    }\r\n\r\n    function addShareholder(address shareholder) internal {\r\n        shareholderIndexes[shareholder] = shareholders.length;\r\n        shareholders.push(shareholder);\r\n    }\r\n\r\n    function removeShareholder(address shareholder) internal {\r\n        shareholders[shareholderIndexes[shareholder]] = shareholders[shareholders.length-1];\r\n        shareholderIndexes[shareholders[shareholders.length-1]] = shareholderIndexes[shareholder];\r\n        shareholders.pop();\r\n    }\r\n}\r\n\r\ninterface IDexRouter {\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable;\r\n\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n\r\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint256 amountTokenDesired,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        payable\r\n        returns (\r\n            uint256 amountToken,\r\n            uint256 amountETH,\r\n            uint256 liquidity\r\n        );\r\n\r\n    function getAmountsOut(uint256 amountIn, address[] calldata path)\r\n        external\r\n        view\r\n        returns (uint256[] memory amounts);\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bonusPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimBonus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"shareholder\",\"type\":\"address\"}],\"name\":\"claimDividend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"countShareholders\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dividendsPerShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dividendsPerShareAccuracyFactor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"extractLostETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"shareholder\",\"type\":\"address\"}],\"name\":\"getClaimTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"shareholder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getLostRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"shareholder\",\"type\":\"address\"}],\"name\":\"getPaidDividends\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalDistributed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalDividends\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalPaid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalSacrificed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"shareholder\",\"type\":\"address\"}],\"name\":\"getUnpaidEarnings\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newDistributor\",\"type\":\"address\"}],\"name\":\"migrate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minDistribution\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"percent\",\"type\":\"uint256\"}],\"name\":\"reinjectSacrificed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"percent\",\"type\":\"uint256\"}],\"name\":\"repurposeSacrificed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reward\",\"outputs\":[{\"internalType\":\"contract USDT\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setBonusPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minDistribution\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_claimAfter\",\"type\":\"uint256\"}],\"name\":\"setDistributionCriteria\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"shareholder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setShare\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_slip\",\"type\":\"uint256\"}],\"name\":\"setSlippage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"shareholderBonus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"shareholderClaims\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"shareholderIndexes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"shareholders\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"shares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalExcluded\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalRealised\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"slippage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalBonus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDistributed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDividends\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalReused\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSacrificed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "DividendDistributor", "CompilerVersion": "v0.8.21+commit.d9974bed", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://c1ae77c01cc2eea878d3fa30af16c60028e84ab5ec6a846a77dd234d51aaee7d"}