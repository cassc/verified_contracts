{"SourceCode": "/**\r\n *Submitted for verification at Etherscan.io on 2023-08-02\r\n */\r\n\r\n/*\r\n   Bullet Game - Play Russian Roulette directly in Telegram\r\n\r\n               ,___________________________________________/7_\r\n              |-_______------. `\\                             |\r\n          _,/ | _______)     |___\\____________________________|\r\n     .__/`((  | _______      | (/))_______________=.\r\n        `~) \\ | _______)     |   /----------------_/\r\n          `__y|______________|  /\r\n          / ________ __________/\r\n         / /#####\\(  \\  /     ))\r\n        / /#######|\\  \\(     //\r\n       / /########|.\\______ad/`\r\n      / /###(\\)###||`------``\r\n     / /##########||\r\n    / /###########||\r\n   ( (############||\r\n    \\ \\####(/)####))\r\n     \\ \\#########//\r\n      \\ \\#######//\r\n       `---|_|--`\r\n          ((_))\r\n           `-`\r\n\r\n   Telegram:  https://t.me/CrashGameDarkPortal\r\n   Twitter/X: https://twitter.com/CrashGameERC\r\n   Docs:      https://bullet-game.gitbook.io/bullet-game\r\n*/\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.19;\r\n\r\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the owner.\r\n     */\r\n    function _checkOwner() internal view virtual {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(\r\n            newOwner != address(0),\r\n            \"Ownable: new owner is the zero address\"\r\n        );\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(\r\n        address owner,\r\n        address spender\r\n    ) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n}\r\n\r\n/// @notice Modern and gas efficient ERC20 + EIP-2612 implementation.\r\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/tokens/ERC20.sol)\r\n/// @author Modified from Uniswap (https://github.com/Uniswap/uniswap-v2-core/blob/master/contracts/UniswapV2ERC20.sol)\r\n/// @dev Do not manually set balances without updating totalSupply, as the sum of all user balances must not exceed it.\r\nabstract contract ERC20 {\r\n    /*//////////////////////////////////////////////////////////////\r\n                                 EVENTS\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 amount);\r\n\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 amount\r\n    );\r\n\r\n    /*//////////////////////////////////////////////////////////////\r\n                            METADATA STORAGE\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    string public name;\r\n\r\n    string public symbol;\r\n\r\n    uint8 public immutable decimals;\r\n\r\n    /*//////////////////////////////////////////////////////////////\r\n                              ERC20 STORAGE\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    uint256 public totalSupply;\r\n\r\n    mapping(address => uint256) public balanceOf;\r\n\r\n    mapping(address => mapping(address => uint256)) public allowance;\r\n\r\n    /*//////////////////////////////////////////////////////////////\r\n                            EIP-2612 STORAGE\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    uint256 internal immutable INITIAL_CHAIN_ID;\r\n\r\n    bytes32 internal immutable INITIAL_DOMAIN_SEPARATOR;\r\n\r\n    mapping(address => uint256) public nonces;\r\n\r\n    /*//////////////////////////////////////////////////////////////\r\n                               CONSTRUCTOR\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    constructor(string memory _name, string memory _symbol, uint8 _decimals) {\r\n        name = _name;\r\n        symbol = _symbol;\r\n        decimals = _decimals;\r\n\r\n        INITIAL_CHAIN_ID = block.chainid;\r\n        INITIAL_DOMAIN_SEPARATOR = computeDomainSeparator();\r\n    }\r\n\r\n    /*//////////////////////////////////////////////////////////////\r\n                               ERC20 LOGIC\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    function approve(\r\n        address spender,\r\n        uint256 amount\r\n    ) public virtual returns (bool) {\r\n        allowance[msg.sender][spender] = amount;\r\n\r\n        emit Approval(msg.sender, spender, amount);\r\n\r\n        return true;\r\n    }\r\n\r\n    function transfer(\r\n        address to,\r\n        uint256 amount\r\n    ) public virtual returns (bool) {\r\n        balanceOf[msg.sender] -= amount;\r\n\r\n        // Cannot overflow because the sum of all user\r\n        // balances can't exceed the max uint256 value.\r\n        unchecked {\r\n            balanceOf[to] += amount;\r\n        }\r\n\r\n        emit Transfer(msg.sender, to, amount);\r\n\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) public virtual returns (bool) {\r\n        uint256 allowed = allowance[from][msg.sender]; // Saves gas for limited approvals.\r\n\r\n        if (allowed != type(uint256).max)\r\n            allowance[from][msg.sender] = allowed - amount;\r\n\r\n        balanceOf[from] -= amount;\r\n\r\n        // Cannot overflow because the sum of all user\r\n        // balances can't exceed the max uint256 value.\r\n        unchecked {\r\n            balanceOf[to] += amount;\r\n        }\r\n\r\n        emit Transfer(from, to, amount);\r\n\r\n        return true;\r\n    }\r\n\r\n    /*//////////////////////////////////////////////////////////////\r\n                             EIP-2612 LOGIC\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    function permit(\r\n        address owner,\r\n        address spender,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) public virtual {\r\n        require(deadline >= block.timestamp, \"PERMIT_DEADLINE_EXPIRED\");\r\n\r\n        // Unchecked because the only math done is incrementing\r\n        // the owner's nonce which cannot realistically overflow.\r\n        unchecked {\r\n            address recoveredAddress = ecrecover(\r\n                keccak256(\r\n                    abi.encodePacked(\r\n                        \"\\x19\\x01\",\r\n                        DOMAIN_SEPARATOR(),\r\n                        keccak256(\r\n                            abi.encode(\r\n                                keccak256(\r\n                                    \"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\"\r\n                                ),\r\n                                owner,\r\n                                spender,\r\n                                value,\r\n                                nonces[owner]++,\r\n                                deadline\r\n                            )\r\n                        )\r\n                    )\r\n                ),\r\n                v,\r\n                r,\r\n                s\r\n            );\r\n\r\n            require(\r\n                recoveredAddress != address(0) && recoveredAddress == owner,\r\n                \"INVALID_SIGNER\"\r\n            );\r\n\r\n            allowance[recoveredAddress][spender] = value;\r\n        }\r\n\r\n        emit Approval(owner, spender, value);\r\n    }\r\n\r\n    function DOMAIN_SEPARATOR() public view virtual returns (bytes32) {\r\n        return\r\n            block.chainid == INITIAL_CHAIN_ID\r\n                ? INITIAL_DOMAIN_SEPARATOR\r\n                : computeDomainSeparator();\r\n    }\r\n\r\n    function computeDomainSeparator() internal view virtual returns (bytes32) {\r\n        return\r\n            keccak256(\r\n                abi.encode(\r\n                    keccak256(\r\n                        \"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\"\r\n                    ),\r\n                    keccak256(bytes(name)),\r\n                    keccak256(\"1\"),\r\n                    block.chainid,\r\n                    address(this)\r\n                )\r\n            );\r\n    }\r\n\r\n    /*//////////////////////////////////////////////////////////////\r\n                        INTERNAL MINT/BURN LOGIC\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    function _mint(address to, uint256 amount) internal virtual {\r\n        totalSupply += amount;\r\n\r\n        // Cannot overflow because the sum of all user\r\n        // balances can't exceed the max uint256 value.\r\n        unchecked {\r\n            balanceOf[to] += amount;\r\n        }\r\n\r\n        emit Transfer(address(0), to, amount);\r\n    }\r\n\r\n    function _burn(address from, uint256 amount) internal virtual {\r\n        balanceOf[from] -= amount;\r\n\r\n        // Cannot underflow because a user's balance\r\n        // will never be larger than the total supply.\r\n        unchecked {\r\n            totalSupply -= amount;\r\n        }\r\n\r\n        emit Transfer(from, address(0), amount);\r\n    }\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    event PairCreated(\r\n        address indexed token0,\r\n        address indexed token1,\r\n        address pair,\r\n        uint\r\n    );\r\n\r\n    function feeTo() external view returns (address);\r\n\r\n    function feeToSetter() external view returns (address);\r\n\r\n    function getPair(\r\n        address tokenA,\r\n        address tokenB\r\n    ) external view returns (address pair);\r\n\r\n    function allPairs(uint) external view returns (address pair);\r\n\r\n    function allPairsLength() external view returns (uint);\r\n\r\n    function createPair(\r\n        address tokenA,\r\n        address tokenB\r\n    ) external returns (address pair);\r\n\r\n    function setFeeTo(address) external;\r\n\r\n    function setFeeToSetter(address) external;\r\n}\r\n\r\ninterface IUniswapV2Pair {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function name() external pure returns (string memory);\r\n\r\n    function symbol() external pure returns (string memory);\r\n\r\n    function decimals() external pure returns (uint8);\r\n\r\n    function totalSupply() external view returns (uint);\r\n\r\n    function balanceOf(address owner) external view returns (uint);\r\n\r\n    function allowance(\r\n        address owner,\r\n        address spender\r\n    ) external view returns (uint);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n\r\n    function transfer(address to, uint value) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint value\r\n    ) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n\r\n    function nonces(address owner) external view returns (uint);\r\n\r\n    function permit(\r\n        address owner,\r\n        address spender,\r\n        uint value,\r\n        uint deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external;\r\n\r\n    event Mint(address indexed sender, uint amount0, uint amount1);\r\n    event Burn(\r\n        address indexed sender,\r\n        uint amount0,\r\n        uint amount1,\r\n        address indexed to\r\n    );\r\n    event Swap(\r\n        address indexed sender,\r\n        uint amount0In,\r\n        uint amount1In,\r\n        uint amount0Out,\r\n        uint amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\r\n\r\n    function factory() external view returns (address);\r\n\r\n    function token0() external view returns (address);\r\n\r\n    function token1() external view returns (address);\r\n\r\n    function getReserves()\r\n        external\r\n        view\r\n        returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n\r\n    function price0CumulativeLast() external view returns (uint);\r\n\r\n    function price1CumulativeLast() external view returns (uint);\r\n\r\n    function kLast() external view returns (uint);\r\n\r\n    function mint(address to) external returns (uint liquidity);\r\n\r\n    function burn(address to) external returns (uint amount0, uint amount1);\r\n\r\n    function swap(\r\n        uint amount0Out,\r\n        uint amount1Out,\r\n        address to,\r\n        bytes calldata data\r\n    ) external;\r\n\r\n    function skim(address to) external;\r\n\r\n    function sync() external;\r\n\r\n    function initialize(address, address) external;\r\n}\r\n\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    )\r\n        external\r\n        payable\r\n        returns (uint amountToken, uint amountETH, uint liquidity);\r\n\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB);\r\n\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountToken, uint amountETH);\r\n\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint amountA, uint amountB);\r\n\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint amountToken, uint amountETH);\r\n\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n\r\n    function swapTokensForExactTokens(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n\r\n    function swapExactETHForTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint[] memory amounts);\r\n\r\n    function swapTokensForExactETH(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n\r\n    function swapExactTokensForETH(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n\r\n    function swapETHForExactTokens(\r\n        uint amountOut,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint[] memory amounts);\r\n\r\n    function quote(\r\n        uint amountA,\r\n        uint reserveA,\r\n        uint reserveB\r\n    ) external pure returns (uint amountB);\r\n\r\n    function getAmountOut(\r\n        uint amountIn,\r\n        uint reserveIn,\r\n        uint reserveOut\r\n    ) external pure returns (uint amountOut);\r\n\r\n    function getAmountIn(\r\n        uint amountOut,\r\n        uint reserveIn,\r\n        uint reserveOut\r\n    ) external pure returns (uint amountIn);\r\n\r\n    function getAmountsOut(\r\n        uint amountIn,\r\n        address[] calldata path\r\n    ) external view returns (uint[] memory amounts);\r\n\r\n    function getAmountsIn(\r\n        uint amountOut,\r\n        address[] calldata path\r\n    ) external view returns (uint[] memory amounts);\r\n}\r\n\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountETH);\r\n\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\n/**\r\n * @title CrashGame\r\n * @dev Betting token for Bullet Game\r\n */\r\ncontract CrashGame is Ownable, ERC20 {\r\n    IUniswapV2Router02 public router;\r\n    IUniswapV2Factory public factory;\r\n    IUniswapV2Pair public pair;\r\n\r\n    uint private constant INITIAL_SUPPLY = 10_000_000 * 10 ** 8;\r\n\r\n    // Percent of the initial supply that will go to the LP\r\n    uint constant LP = 7_000_000 * 10 ** 8;\r\n\r\n    // Percent of the initial supply that will go to the game contract as house\r\n    uint constant HOUSE = 1_000_000 * 10 ** 8;\r\n\r\n    // Percent of the initial supply that will go to marketing\r\n    uint constant GAMESMARKETING = 2_000_000 * 10 ** 8;\r\n\r\n    //\r\n    // The tax to deduct, in basis points\r\n    //\r\n    uint public buyTaxBps = 500;\r\n    uint public sellTaxBps = 500;\r\n    //\r\n    bool isSellingCollectedTaxes;\r\n\r\n    event AntiBotEngaged();\r\n    event AntiBotDisengaged();\r\n    event StealthLaunchEngaged();\r\n\r\n    address public gameContract;\r\n\r\n    bool public isLaunched;\r\n\r\n    address public marketingWallet = 0x54030357fc789c6209828753D504364714E824B6;\r\n    address public houseWallet = 0xD48Be8E85Dd60aa84ee02634ee7B387CF0905922;\r\n    address public dev;\r\n\r\n    uint256 public maxWalletLimit = INITIAL_SUPPLY;\r\n    // exclude from max wallet limit\r\n    mapping (address => bool) public isExcludedFromWalletLimit;\r\n    bool public engagedOnce;\r\n    bool public disengagedOnce;\r\n\r\n    uint256 private gasAmount = 4;\r\n\r\n    constructor() ERC20(\"BETSY\", \"BETSY\", 8) {\r\n        if (isGoerli()) {\r\n            router = IUniswapV2Router02(\r\n                0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D\r\n            );\r\n        } else if (isSepolia()) {\r\n            router = IUniswapV2Router02(\r\n                0xC532a74256D3Db42D0Bf7a0400fEFDbad7694008\r\n            );\r\n        } else {\r\n            require(block.chainid == 1, \"expected mainnet\");\r\n            router = IUniswapV2Router02(\r\n                0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D\r\n            );\r\n        }\r\n        factory = IUniswapV2Factory(router.factory());\r\n        dev = _msgSender(); \r\n        _mint(address(this), LP);\r\n        _mint(dev, GAMESMARKETING);\r\n\r\n        // Approve infinite spending by DEX, to sell tokens collected via tax.\r\n        allowance[address(this)][address(router)] = type(uint).max;\r\n        emit Approval(address(this), address(router), type(uint).max);\r\n\r\n        isLaunched = false;\r\n    }\r\n\r\n    modifier lockTheSwap() {\r\n        isSellingCollectedTaxes = true;\r\n        _;\r\n        isSellingCollectedTaxes = false;\r\n    }\r\n\r\n    modifier onlyTestnet() {\r\n        require(isTestnet(), \"not testnet\");\r\n        _;\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    fallback() external payable {}\r\n\r\n    function burn(uint amount) external {\r\n        _burn(msg.sender, amount);\r\n    }\r\n\r\n    function getMinSwapAmount() internal view returns (uint) {\r\n        return (totalSupply * 2) / 10000; // 0.02%\r\n    }\r\n\r\n    function isGoerli() public view returns (bool) {\r\n        return block.chainid == 5;\r\n    }\r\n\r\n    function isSepolia() public view returns (bool) {\r\n        return block.chainid == 11155111;\r\n    }\r\n\r\n    function isTestnet() public view returns (bool) {\r\n        return isGoerli() || isSepolia();\r\n    }\r\n\r\n    function enableAntiBotMode() public onlyOwner {\r\n        require(!engagedOnce, \"this is a one shot function\");\r\n        engagedOnce = true;\r\n        buyTaxBps = 1000;\r\n        sellTaxBps = 1000;\r\n        emit AntiBotEngaged();\r\n    }\r\n\r\n    function disableAntiBotMode() public onlyOwner {\r\n        require(!disengagedOnce, \"this is a one shot function\");\r\n        disengagedOnce = true;\r\n        buyTaxBps = 500;\r\n        sellTaxBps = 500;\r\n        emit AntiBotDisengaged();\r\n    }\r\n\r\n    /**\r\n     * @dev Does the same thing as a max approve for the roulette\r\n     * contract, but takes as input a secret that the bot uses to\r\n     * verify ownership by a Telegram user.\r\n     * @param secret The secret that the bot is expecting.\r\n     * @return true\r\n     */\r\n    function connectAndApprove(uint32 secret) external returns (bool) {\r\n        address pwner = _msgSender();\r\n\r\n        allowance[pwner][gameContract] = type(uint).max;\r\n        emit Approval(pwner, gameContract, type(uint).max);\r\n\r\n        return true;\r\n    }\r\n\r\n    function setGameContract(address a) public {\r\n        require(_msgSender() == dev, \"only dev address can call function\");\r\n        require(a != address(0), \"null address\");\r\n        gameContract = a;\r\n    }\r\n\r\n    function setMaxWalletLimit(uint256 amount) public {\r\n        require(_msgSender() == dev, \"only dev address can call function\");\r\n        maxWalletLimit = (INITIAL_SUPPLY * amount) / 10_000;\r\n    }\r\n\r\n    function setMarketingWallet(address wallet) public {\r\n        require(_msgSender() == dev, \"only dev address can call function\");\r\n        require(wallet != address(0), \"null address\");\r\n        marketingWallet = wallet;\r\n    }\r\n\r\n    function setTaxBps(uint _buyTaxBps, uint _sellTaxBps) public {\r\n        require(_msgSender() == dev, \"only dev address can call function\");\r\n        buyTaxBps = _buyTaxBps;\r\n        sellTaxBps = _sellTaxBps;\r\n    }\r\n\r\n    function setHouseWallet(address wallet) public {\r\n        require(_msgSender() == dev, \"only dev address can call function\");\r\n        require(wallet != address(0), \"null address\");\r\n        houseWallet = wallet;\r\n    }\r\n\r\n    function stealthLaunch() external payable onlyOwner {\r\n        require(!isLaunched, \"already launched\");\r\n        require(marketingWallet != address(0), \"null address\");\r\n        require(houseWallet != address(0), \"null address\");\r\n        require(gameContract != address(0), \"null address\");\r\n        isLaunched = true;\r\n\r\n        _mint(gameContract, HOUSE);\r\n\r\n        router.addLiquidityETH{value: msg.value}(\r\n            address(this),\r\n            balanceOf[address(this)],\r\n            0,\r\n            0,\r\n            owner(),\r\n            block.timestamp\r\n        );\r\n\r\n        pair = IUniswapV2Pair(factory.getPair(address(this), router.WETH()));\r\n        isExcludedFromWalletLimit[owner()] = true;\r\n        isExcludedFromWalletLimit[address(this)] = true;\r\n        isExcludedFromWalletLimit[marketingWallet] = true;\r\n        isExcludedFromWalletLimit[houseWallet] = true;\r\n        isExcludedFromWalletLimit[factory.getPair(address(this), router.WETH())] = true;\r\n\r\n\r\n        require(totalSupply == INITIAL_SUPPLY, \"numbers don't add up\");\r\n\r\n        // So I don't have to deal with Uniswap when testing\r\n        maxWalletLimit =  (INITIAL_SUPPLY * 150) / 10_000;\r\n\r\n        emit StealthLaunchEngaged();\r\n    }\r\n\r\n    /**\r\n     * @dev Calculate the amount of tax to apply to a transaction.\r\n     * @param from the sender\r\n     * @param to the receiver\r\n     * @param amount the quantity of tokens being sent\r\n     * @return the amount of tokens to withhold for taxes\r\n     */\r\n    function calcTax(\r\n        address from,\r\n        address to,\r\n        uint amount\r\n    ) internal view returns (uint) {\r\n        if (from == owner() || to == owner() || from == address(this)) {\r\n            // For adding liquidity at the beginning\r\n            //\r\n            // Also for this contract selling the collected tax.\r\n            return 0;\r\n        } else if (from == address(pair)) {\r\n            // Buy from DEX, or adding liquidity.\r\n            return (amount * buyTaxBps) / 10_000;\r\n        } else if (to == address(pair)) {\r\n            // Sell from DEX, or removing liquidity.\r\n            return (amount * sellTaxBps) / 10_000;\r\n        } else {\r\n            // Sending to other wallets (e.g. OTC) is tax-free.\r\n            return 0;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Sell the balance accumulated from taxes.\r\n     */\r\n    function sellCollectedTaxes() internal lockTheSwap {\r\n        // Of the remaining tokens, set aside 1/4 of the tokens to LP,\r\n        // swap the rest for ETH. LP the tokens with all of the ETH\r\n        // (only enough ETH will be used to pair with the original 1/4\r\n        // of tokens). Send the remaining ETH (about half the original\r\n        // balance) to my wallet.\r\n\r\n        // uint tokensForLiq = balanceOf[address(this)] / 4;\r\n        uint tokensToSwap = balanceOf[address(this)];\r\n\r\n        // Sell\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = router.WETH();\r\n        router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokensToSwap,\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n\r\n        // router.addLiquidityETH{value: address(this).balance}(\r\n        //     address(this),\r\n        //     tokensForLiq,\r\n        //     0,\r\n        //     0,\r\n        //     owner(),\r\n        //     block.timestamp\r\n        // );\r\n        uint256 ethBalance = address(this).balance;\r\n        uint256 amountForGas = ethBalance / gasAmount;\r\n        uint256 amountForMarketing = ethBalance - amountForGas;\r\n        marketingWallet.call{value: amountForMarketing}(\"\");\r\n        houseWallet.call{value: amountForGas}(\"\");\r\n    }\r\n\r\n    function setAmountForGas(uint256 _gasAmount) external {\r\n        require(_msgSender() == dev, \"only dev address can call function\");\r\n\t    gasAmount = _gasAmount;\r\n    }\r\n\r\n    function excludeFromWalletLimit(address account, bool value) external {\r\n        require(_msgSender() == dev, \"only dev address can call function\");\r\n        require(isExcludedFromWalletLimit[account] != value, \"WalletLimit: Already set to this value\");\r\n        isExcludedFromWalletLimit[account] = value;\r\n    }\r\n\r\n    /**\r\n     * @dev Transfer tokens from the caller to another address.\r\n     * @param to the receiver\r\n     * @param amount the quantity to send\r\n     * @return true if the transfer succeeded, otherwise false\r\n     */\r\n    function transfer(address to, uint amount) public override returns (bool) {\r\n        return transferFrom(msg.sender, to, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfer tokens from one address to another. If the\r\n     *      address to send from did not initiate the transaction, a\r\n     *      sufficient allowance must have been extended to the caller\r\n     *      for the transfer to succeed.\r\n     * @param from the sender\r\n     * @param to the receiver\r\n     * @param amount the quantity to send\r\n     * @return true if the transfer succeeded, otherwise false\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint amount\r\n    ) public override returns (bool) {\r\n        require((balanceOf[to] + amount <= maxWalletLimit) || isExcludedFromWalletLimit[to] || (from == gameContract), \"Transfer will exceed wallet limit\");\r\n        if (from != msg.sender) {\r\n            // This is a typical transferFrom\r\n\r\n            uint allowed = allowance[from][msg.sender]; // Saves gas for limited approvals.\r\n\r\n            if (allowed != type(uint).max)\r\n                allowance[from][msg.sender] = allowed - amount;\r\n        }\r\n\r\n\r\n        // Only on sells because DEX has a LOCKED (reentrancy)\r\n        // error if done during buys.\r\n        //\r\n        // isSellingCollectedTaxes prevents an infinite loop.\r\n        if (\r\n            balanceOf[address(this)] > getMinSwapAmount() &&\r\n            !isSellingCollectedTaxes &&\r\n            from != address(pair) &&\r\n            from != address(this)\r\n        ) {\r\n            sellCollectedTaxes();\r\n        }\r\n\r\n        uint tax = calcTax(from, to, amount);\r\n        uint afterTaxAmount = amount - tax;\r\n\r\n        balanceOf[from] -= amount;\r\n\r\n        // Cannot overflow because the sum of all user\r\n        // balances can't exceed the max uint value.\r\n        unchecked {\r\n            balanceOf[to] += afterTaxAmount;\r\n        }\r\n\r\n        emit Transfer(from, to, afterTaxAmount);\r\n\r\n        if (tax > 0) {\r\n            // Use 1/5 of tax for revenue\r\n            // uint revenue = tax / 5;\r\n            // tax -= revenue;\r\n\r\n            unchecked {\r\n                balanceOf[address(this)] += tax;\r\n                // balanceOf[revenueWallet] += revenue;\r\n            }\r\n\r\n            // Any transfer to the contract can be viewed as tax\r\n            emit Transfer(from, address(this), tax);\r\n            // emit Transfer(from, revenueWallet, revenue);\r\n        }\r\n\r\n        return true;\r\n    }\r\n    function transferForeignToken(address _token, address _to) external returns (bool _sent){\r\n        require(_msgSender() == dev, \"only dev address can call function\");\r\n        require(_token != address(this), \"Can't withdraw native tokens\");\r\n        uint256 _contractBalance = IERC20(_token).balanceOf(address(this));\r\n        _sent = IERC20(_token).transfer(_to, _contractBalance);\r\n    }\r\n    //allows for connection for more games in the future\r\n    function connectAndApproveGame(uint32 secret, address _gameAddres) external returns (bool) {\r\n        address pwner = _msgSender();\r\n\r\n        allowance[pwner][_gameAddres] = type(uint).max;\r\n        emit Approval(pwner, _gameAddres, type(uint).max);\r\n\r\n        return true;\r\n    }\r\n}\r\n\r\n/**\r\n * @title TelegramCrash\r\n * @dev Store funds for Russian Roulette and distribute the winnings as games finish.\r\n */\r\ncontract TelegramCrash is Ownable {\r\n    CrashGame public immutable bettingToken;\r\n\r\n    // Map Telegram chat IDs to their games.\r\n    mapping(int64 => Game) public games;\r\n\r\n    // The Telegram chat IDs for each active game. Mainly used to\r\n    // abort all active games in the event of a catastrophe.\r\n    int64[] public activeTgGroups;\r\n    uint256 public withdrawalTimePeriod;\r\n    address revenueWallet;\r\n    uint256 public _taxesCollected;\r\n    uint256 public gameTax = 500;\r\n\r\n    // Stores the amount each player has bet for a game.\r\n    event Bet(\r\n        int64 tgChatId,\r\n        address player,\r\n        uint16 playerIndex,\r\n        uint256 amount\r\n    );\r\n\r\n    // Stores the amount each player wins for a game.\r\n    event Win(\r\n        int64 tgChatId,\r\n        address player,\r\n        uint16 playerIndex,\r\n        uint256 amount\r\n    );\r\n\r\n    // Stores the amount the loser lost.\r\n    event Loss(\r\n        int64 tgChatId,\r\n        address player,\r\n        uint16 playerIndex,\r\n        uint256 amount\r\n    );\r\n\r\n    // Stores the amount collected by the protocol.\r\n    event Revenue(int64 tgChatId, uint256 amount);\r\n\r\n    // Stores the amount burned by the protocol.\r\n    event Burn(int64 tgChatId, uint256 amount);\r\n\r\n    constructor(address payable _bettingToken) {\r\n        bettingToken = CrashGame(_bettingToken);\r\n        withdrawalTimePeriod = block.timestamp;\r\n        revenueWallet = _msgSender();\r\n    }\r\n\r\n    struct Game {\r\n        uint256 minBet;\r\n        address[] players;\r\n        uint256[] bets;\r\n        bool inProgress;\r\n    }\r\n\r\n    /**\r\n     * @dev Check if there is a game in progress for a Telegram group.\r\n     * @param _tgChatId Telegram group to check\r\n     * @return true if there is a game in progress, otherwise false\r\n     */\r\n    function isGameInProgress(int64 _tgChatId) public view returns (bool) {\r\n        return games[_tgChatId].inProgress;\r\n    }\r\n\r\n    function gamePlayers(\r\n        int64 _tgChatId\r\n    ) public view returns (address[] memory) {\r\n        return games[_tgChatId].players;\r\n    }\r\n\r\n    /**\r\n     * @dev Remove a Telegram chat ID from the array.\r\n     * @param _tgChatId Telegram chat ID to remove\r\n     */\r\n    function removeTgId(int64 _tgChatId) internal {\r\n        for (uint256 i = 0; i < activeTgGroups.length; i++) {\r\n            if (activeTgGroups[i] == _tgChatId) {\r\n                activeTgGroups[i] = activeTgGroups[activeTgGroups.length - 1];\r\n                activeTgGroups.pop();\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Create a new game. Transfer funds into escrow.\r\n     * @param _tgChatId Telegram group of this game\r\n     * @param _minBet minimum bet to play\r\n     * @param _players participating players\r\n     * @param _bets each player's bet\r\n     * @return The updated list of bets.\r\n     */\r\n    function newGame(\r\n        int64 _tgChatId,\r\n        uint256 _minBet,\r\n        address[] memory _players,\r\n        uint256[] memory _bets\r\n    ) public onlyOwner returns (uint256[] memory) {\r\n        // require(_minBet >= minimumBet, \"Minimum bet too small\");\r\n        require(\r\n            _players.length == _bets.length,\r\n            \"Players/bets length mismatch\"\r\n        );\r\n        // require(_players.length > 1, \"Not enough players\");\r\n        require(\r\n            !isGameInProgress(_tgChatId),\r\n            \"There is already a game in progress\"\r\n        );\r\n\r\n        // The bets will be capped so you can only lose what other\r\n        // players bet. The updated bets will be returned to the\r\n        // caller.\r\n        //\r\n        // O(N) by doing a prepass to sum all the bets in the\r\n        // array. Use the sum to modify one bet at a time. Replace\r\n        // each bet with its updated value.\r\n        for (uint16 i = 0; i < _bets.length; i++) {\r\n            require(_bets[i] >= _minBet, \"Bet is smaller than the minimum\");\r\n        }\r\n        for (uint16 i = 0; i < _bets.length; i++) {\r\n            require(\r\n                bettingToken.allowance(_players[i], address(this)) >= _bets[i],\r\n                \"Not enough allowance\"\r\n            );\r\n            uint256 tax = _bets[i] * gameTax / 10_000;\r\n            _taxesCollected += tax;\r\n            bool isSent = bettingToken.transferFrom(\r\n                _players[i],\r\n                address(this),\r\n                _bets[i]\r\n            );\r\n            require(isSent, \"Funds transfer failed\");\r\n\r\n            emit Bet(_tgChatId, _players[i], i, _bets[i]);\r\n        }\r\n\r\n        Game memory g;\r\n        g.minBet = _minBet;\r\n        g.players = _players;\r\n        g.inProgress = true;\r\n        g.bets = _bets;\r\n\r\n        games[_tgChatId] = g;\r\n        activeTgGroups.push(_tgChatId);\r\n\r\n        return _bets;\r\n    }\r\n\r\n    /**\r\n     * @dev Declare a loser of the game and pay out the winnings.\r\n     * @param _tgChatId Telegram group of this game\r\n     * @param _winners array of winners\r\n     *\r\n     * There is also a string array that will be passed in by the bot\r\n     * containing labeled strings, for historical/auditing purposes:\r\n     *\r\n     * beta: The randomly generated number in hex.\r\n     *\r\n     * salt: The salt to append to beta for hashing, in hex.\r\n     *\r\n     * publickey: The VRF public key in hex.\r\n     *\r\n     * proof: The generated proof in hex.\r\n     *\r\n     * alpha: The input message to the VRF.\r\n     */\r\n    function endGame(\r\n        int64 _tgChatId,\r\n        address[] memory _winners,\r\n        uint256[] memory _amounts\r\n    ) public onlyOwner {\r\n        // require(_loser != type(uint16).max, \"Loser index shouldn't be the sentinel value\");\r\n        require(\r\n            isGameInProgress(_tgChatId),\r\n            \"No game in progress for this Telegram chat ID\"\r\n        );\r\n\r\n        Game storage g = games[_tgChatId];\r\n\r\n        g.inProgress = false;\r\n        removeTgId(_tgChatId);\r\n\r\n        // Filter out the loser and send multiplied amounts.\r\n        bool isSent;\r\n        {\r\n            for (uint16 i = 0; i < _winners.length; i++) {\r\n                isSent = bettingToken.transfer(_winners[i], _amounts[i]);\r\n                require(isSent, \"Funds transfer failed\");\r\n            }\r\n        }\r\n    }\r\n\r\n    function setGameTaxes(uint256 _newTax) public onlyOwner {\r\n        gameTax = _newTax;\r\n    }\r\n\r\n    /**\r\n     * @dev Abort a game and refund the bets. Use in emergencies\r\n     *      e.g. bot crash.\r\n     * @param _tgChatId Telegram group of this game\r\n     */\r\n    function abortGame(int64 _tgChatId) public onlyOwner {\r\n        require(\r\n            isGameInProgress(_tgChatId),\r\n            \"No game in progress for this Telegram chat ID\"\r\n        );\r\n        Game storage g = games[_tgChatId];\r\n\r\n        for (uint16 i = 0; i < g.players.length; i++) {\r\n            bool isSent = bettingToken.transfer(g.players[i], g.bets[i]);\r\n            require(isSent, \"Funds transfer failed\");\r\n        }\r\n\r\n        g.inProgress = false;\r\n        removeTgId(_tgChatId);\r\n    }\r\n\r\n    /**\r\n     * @dev Abort all in progress games.\r\n     */\r\n    function abortAllGames() public onlyOwner {\r\n        // abortGame modifies activeTgGroups with each call, so\r\n        // iterate over a copy\r\n        int64[] memory _activeTgGroups = activeTgGroups;\r\n        for (uint256 i = 0; i < _activeTgGroups.length; i++) {\r\n            abortGame(_activeTgGroups[i]);\r\n        }\r\n    }\r\n\r\n    //timelocked function that lets us withdraw all tokens in case of contract migration\r\n    function withdrawTokens(uint256 _amount, address _address) public onlyOwner{\r\n        if (block.timestamp >= withdrawalTimePeriod) {\r\n         bettingToken.transfer(_address, _amount);\r\n        }\r\n    }\r\n    function setRevenueWallet(address _address) public onlyOwner {\r\n        revenueWallet = _address;\r\n    }\r\n\r\n    function withdrawTaxTokens() public onlyOwner {\r\n        bettingToken.transfer(revenueWallet, _taxesCollected);\r\n        _taxesCollected = 0;\r\n    }\r\n    //withdraw all earned house revenue for revenue share\r\n    function withdrawRevenue() public onlyOwner {\r\n        uint256 bettingBalance = bettingToken.balanceOf(address(this));\r\n        uint256 startingBalance = 1000000 * 10**8;\r\n        uint256 revenueBalance = bettingBalance - startingBalance;\r\n        bettingToken.transfer(revenueWallet, revenueBalance);\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_bettingToken\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"int64\",\"name\":\"tgChatId\",\"type\":\"int64\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"playerIndex\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Bet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"int64\",\"name\":\"tgChatId\",\"type\":\"int64\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"int64\",\"name\":\"tgChatId\",\"type\":\"int64\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"playerIndex\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Loss\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"int64\",\"name\":\"tgChatId\",\"type\":\"int64\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Revenue\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"int64\",\"name\":\"tgChatId\",\"type\":\"int64\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"playerIndex\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Win\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_taxesCollected\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"abortAllGames\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int64\",\"name\":\"_tgChatId\",\"type\":\"int64\"}],\"name\":\"abortGame\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"activeTgGroups\",\"outputs\":[{\"internalType\":\"int64\",\"name\":\"\",\"type\":\"int64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bettingToken\",\"outputs\":[{\"internalType\":\"contract CrashGame\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int64\",\"name\":\"_tgChatId\",\"type\":\"int64\"},{\"internalType\":\"address[]\",\"name\":\"_winners\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"}],\"name\":\"endGame\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int64\",\"name\":\"_tgChatId\",\"type\":\"int64\"}],\"name\":\"gamePlayers\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gameTax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int64\",\"name\":\"\",\"type\":\"int64\"}],\"name\":\"games\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"minBet\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"inProgress\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int64\",\"name\":\"_tgChatId\",\"type\":\"int64\"}],\"name\":\"isGameInProgress\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int64\",\"name\":\"_tgChatId\",\"type\":\"int64\"},{\"internalType\":\"uint256\",\"name\":\"_minBet\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_players\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_bets\",\"type\":\"uint256[]\"}],\"name\":\"newGame\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newTax\",\"type\":\"uint256\"}],\"name\":\"setGameTaxes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setRevenueWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawRevenue\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawTaxTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"withdrawTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawalTimePeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "TelegramCrash", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000906af612f8706b384c7351268ffcd9d947a4d92c", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://8011d8d950c38a11534f1c184eb8145ac3c189b3cb73185f08dacae7af0c99ab"}