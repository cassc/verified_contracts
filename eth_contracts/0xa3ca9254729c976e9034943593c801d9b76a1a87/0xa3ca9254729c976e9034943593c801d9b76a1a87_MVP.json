{"SourceCode": "//SPDX-License-Identifier: MIT\r\n\r\n// Official token contract for MVP: Most Valuable Protocol, first ever ERC-20 treasury rotation protocol\r\n// Site: https://mvpeth.com\r\n// Telegram: https://t.me/MVPeth\r\n// Twitter: https://twitter.com/MVPERC\r\n// Chart: https://dexscreener.com/ethereum/0x230156068A72C63710f156df4B82dD180b56f84F\r\n// Buy: https://app.uniswap.org/#/swap?outputCurrency=0xa3CA9254729C976E9034943593c801d9b76a1A87\r\n\r\n\r\npragma solidity ^0.8.17;\r\n\r\ninterface ERC20 {\r\n\r\n    function totalSupply() external view returns (uint256);\r\n    function decimals() external view returns (uint8);\r\n    function symbol() external view returns (string memory);\r\n    function name() external view returns (string memory);\r\n    function getOwner() external view returns (address);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address _owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n}\r\n\r\ninterface Engine {\r\n\r\n    function trigger() external returns (bool);\r\n    function log(address, address, uint256, uint256) external returns (bool);\r\n    function totalRewardDue(address user) external view returns(uint256);\r\n\r\n}\r\n\r\nabstract contract Ownable {\r\n\r\n    address internal owner;\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor(address _owner) {\r\n        owner = _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"not owner\"); \r\n        _;\r\n    }\r\n\r\n    function isOwner(address account) public view returns (bool) {\r\n        return account == owner;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n\r\n}\r\n\r\ninterface IDEXFactory {\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n}\r\n\r\ninterface IDEXRouter {\r\n\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n    function addLiquidityETH(address token, uint amountTokenDesired, uint amountTokenMin, uint amountETHMin, address to, uint deadline) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline) external;\r\n}\r\n\r\ncontract MVP is ERC20, Ownable {\r\n\r\n    // Events\r\n    event SetMaxWallet(uint256 maxWalletToken);\r\n    event SetSwapBackSettings(bool enabled, uint256 swapThreshold);\r\n    event SetIsFeeExempt(address holder, bool enabled);\r\n    event SetIsTxLimitExempt(address holder, bool enabled);\r\n    event StuckBalanceSent(uint256 amountETH, address recipient);\r\n    event Triggered(bool result);\r\n    event Logged(bool result);\r\n\r\n    // Mappings\r\n    mapping (address => uint256) _balances;\r\n    mapping (address => mapping (address => uint256)) _allowances;\r\n    mapping (address => bool) public isFeeExempt;\r\n    mapping (address => bool) public isTxLimitExempt;\r\n\r\n    // Token info\r\n    string constant _name = \"Most Valuable Protocol\";\r\n    string constant _symbol = \"MVP\";\r\n    uint8 constant _decimals = 18;\r\n    uint256 _totalSupply = 420000000000 * (10 ** _decimals); \r\n\r\n    // Max wallet\r\n    uint256 public _maxWalletSize = (_totalSupply * 20) / 1000;\r\n    uint256 public _maxTxSize = (_totalSupply * 20) / 1000;\r\n\r\n    // Tax amounts\r\n    uint256 public TreasuryFee = 15;\r\n    uint256 public DevFee = 8;\r\n    uint256 public LiquidityFee = 10;\r\n    uint256 public MarketingFee = 7;\r\n    uint256 public TotalTax = TreasuryFee + DevFee + MarketingFee + LiquidityFee;\r\n\r\n    // Tax wallets\r\n    address DevWallet;\r\n    address MarketingWallet;\r\n    address TreasuryWallet;\r\n\r\n    address Distro;\r\n    address MVPLogger;\r\n\r\n    // Contracts\r\n    IDEXRouter public router;\r\n    address public pair;\r\n    address constant private DEAD = 0x000000000000000000000000000000000000dEaD;\r\n\r\n    bool public swapEnabled = true;\r\n    uint256 public swapThreshold = _totalSupply * 2 / 10000;\r\n\r\n    bool public isTradingEnabled = false;\r\n    uint256 public tradingTimestamp;\r\n    uint256 public cooldown = 1800;\r\n    uint256 public globalMode = 4;\r\n\r\n    bool inSwap;\r\n    modifier swapping() { inSwap = true; _; inSwap = false; }\r\n\r\n    constructor(address _router, address _TreasuryWallet, address _MarketingWallet, address _MVPLogger, address _Distro) Ownable(msg.sender) {\r\n\r\n        router = IDEXRouter(_router);\r\n        _allowances[address(this)][address(router)] = type(uint256).max;\r\n\r\n        address _owner = owner;\r\n        DevWallet = msg.sender;\r\n        TreasuryWallet = _TreasuryWallet;\r\n        MarketingWallet = _MarketingWallet;\r\n        MVPLogger = _MVPLogger;\r\n        Distro = _Distro;\r\n\r\n        isFeeExempt[_owner] = true;\r\n        isTxLimitExempt[_owner] = true;\r\n\r\n        isFeeExempt[TreasuryWallet] = true;\r\n        isTxLimitExempt[TreasuryWallet] = true;\r\n\r\n        isFeeExempt[MarketingWallet] = true;\r\n        isTxLimitExempt[MarketingWallet] = true;\r\n\r\n        isFeeExempt[Distro] = true;\r\n        isTxLimitExempt[Distro] = true;\r\n\r\n        _balances[msg.sender] = _totalSupply * 500 / 1000;\r\n        _balances[MarketingWallet] = _totalSupply * 50 / 1000;\r\n        _balances[Distro] = _totalSupply * 450 / 1000;\r\n\r\n        emit Transfer(address(0), msg.sender, _totalSupply * 500 / 1000);\r\n        emit Transfer(address(0), MarketingWallet, _totalSupply * 50 / 1000);\r\n        emit Transfer(address(0), Distro, _totalSupply * 450 / 1000);\r\n\r\n    }\r\n\r\n    receive() external payable { }\r\n\r\n// Basic Internal Functions\r\n\r\n    function totalSupply() external view override returns (uint256) { return _totalSupply; }\r\n    function decimals() external pure override returns (uint8) { return _decimals; }\r\n    function symbol() external pure override returns (string memory) { return _symbol; }\r\n    function name() external pure override returns (string memory) { return _name; }\r\n    function getOwner() external view override returns (address) { return owner; }\r\n    function balanceOf(address account) public view override returns (uint256) { return _balances[account]; }\r\n    function allowance(address holder, address spender) external view override returns (uint256) { return _allowances[holder][spender]; }\r\n\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _allowances[msg.sender][spender] = amount;\r\n        emit Approval(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function approveMax(address spender) external returns (bool) {\r\n        return approve(spender, type(uint256).max);\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) external override returns (bool) {\r\n        return _transferFrom(msg.sender, recipient, amount);\r\n    }\r\n\r\n    ////////////////////////////////////////////////\r\n    function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool) {\r\n        if(_allowances[sender][msg.sender] != type(uint256).max){\r\n            _allowances[sender][msg.sender] = _allowances[sender][msg.sender] - (amount);\r\n        }\r\n        return _transferFrom(sender, recipient, amount);\r\n    }\r\n\r\n    function getPair() public onlyOwner {\r\n        pair = IDEXFactory(router.factory()).getPair(address(this), router.WETH());\r\n        if (pair == address(0)) {pair = IDEXFactory(router.factory()).createPair(address(this), router.WETH());}\r\n    }\r\n\r\n    function setIsTradingEnabled(bool _isTradingEnabled) public onlyOwner {\r\n        require(!isTradingEnabled);\r\n        isTradingEnabled = _isTradingEnabled;\r\n        tradingTimestamp = block.timestamp;\r\n    }\r\n\r\n    function logger(address sender, address recipient, uint256 amount, uint256 amountReceived) internal {\r\n        if (globalMode > 3) {\r\n            try Engine(MVPLogger).log(sender, recipient, amount, amountReceived) {emit Logged(true);}\r\n            catch {emit Logged(false);}\r\n        }\r\n    }\r\n\r\n    function _transferFrom(address sender, address recipient, uint256 amount) internal returns (bool) {\r\n\r\n        if(inSwap){ return _basicTransfer(sender, recipient, amount);}\r\n        require(isFeeExempt[sender] || isFeeExempt[recipient] || isTradingEnabled, \"trading not live\");\r\n\r\n        if (sender != owner && recipient != owner && recipient != DEAD && recipient != pair && sender != TreasuryWallet) {\r\n            require(isTxLimitExempt[recipient] || (amount <= _maxTxSize && \r\n                _balances[recipient] + amount <= _maxWalletSize), \"tx limit\");\r\n        }\r\n\r\n        if(shouldSwapBack()){swapBack();}\r\n\r\n        _balances[sender] = _balances[sender] - amount;\r\n        uint256 amountReceived = receivedAmount(sender, recipient, amount);\r\n        _balances[recipient] = _balances[recipient] + (amountReceived);\r\n\r\n        logger(sender, recipient, amount, amountReceived);\r\n\r\n        emit Transfer(sender, recipient, amountReceived);\r\n        return true;\r\n    }\r\n    \r\n    function _basicTransfer(address sender, address recipient, uint256 amount) internal returns (bool) {\r\n        _balances[sender] = _balances[sender] - amount;\r\n        _balances[recipient] = _balances[recipient] + amount;\r\n\r\n        logger(sender, recipient, amount, amount);\r\n        \r\n        emit Transfer(sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n// Internal Functions\r\n\r\n    function isFee(address sender) internal view returns (bool) {\r\n        return !isFeeExempt[sender];\r\n    }\r\n\r\n    function getMult() internal view returns(uint256) {\r\n        return block.timestamp <= tradingTimestamp + cooldown ? 11 : 1;\r\n    }\r\n\r\n    function receivedAmount(address sender, address recipient, uint256 amount) internal returns (uint256) {\r\n   \r\n        if (!isFee(sender) || !isFee(recipient)) return amount; \r\n        \r\n        uint256 feeAmount = 0;\r\n        \r\n        if (sender != pair && recipient == pair) {\r\n            feeAmount = amount * (TotalTax * getMult()) / 1000;    \r\n        }\r\n\r\n        if (sender == pair && recipient != pair) {\r\n            feeAmount = amount * TotalTax / 1000;\r\n        }\r\n\r\n        if (feeAmount > 0) {\r\n            _balances[address(this)] = _balances[address(this)] + (feeAmount);\r\n            emit Transfer(sender, address(this), feeAmount);            \r\n        }\r\n\r\n        return amount - (feeAmount);\r\n    }\r\n\r\n    function shouldSwapBack() internal view returns (bool) {\r\n        return msg.sender != pair\r\n        && !inSwap\r\n        && swapEnabled\r\n        && _balances[address(this)] >= swapThreshold;\r\n    }\r\n\r\n    function addLiquidity(uint256 _tokenBalance, uint256 _ETHBalance) private {\r\n        if(_allowances[address(this)][address(router)] < _tokenBalance){_allowances[address(this)][address(router)] = _tokenBalance;}\r\n        router.addLiquidityETH{value: _ETHBalance}(address(this), _tokenBalance, 0, 0, DevWallet, block.timestamp + 5 minutes);\r\n    }\r\n\r\n    function getFeeRates() view internal returns(uint256 devFee, uint256 treasuryFee, uint256 marketingFee) {\r\n\r\n        uint256 currentBalance = address(this).balance;\r\n        uint256 totalFees = TotalTax - LiquidityFee;\r\n        devFee = currentBalance * (DevFee) / totalFees;\r\n        treasuryFee = currentBalance * (TreasuryFee) / totalFees;\r\n        marketingFee = currentBalance * (MarketingFee) / totalFees;\r\n\r\n    }\r\n\r\n    function sendOut() internal {\r\n\r\n        (uint256 devFee, uint256 treasuryFee, uint256 marketingFee) = getFeeRates();\r\n\r\n        payable(DevWallet).transfer(devFee);\r\n        payable(MarketingWallet).transfer(marketingFee);\r\n        if (globalMode == 1) payable(DevWallet).transfer(treasuryFee);\r\n        if (globalMode > 1) payable(TreasuryWallet).transfer(treasuryFee);\r\n        if (globalMode > 2) {\r\n            try Engine(TreasuryWallet).trigger() {emit Triggered(true);}\r\n            catch {emit Triggered(false);}          \r\n        }\r\n\r\n    }\r\n\r\n    function swapBack() internal swapping {\r\n\r\n        uint256 totalTax = TotalTax * getMult();\r\n        uint256 amountToLiq = balanceOf(address(this)) * (LiquidityFee) / (2 * totalTax);\r\n        uint256 amountToSwap = balanceOf(address(this)) - amountToLiq;\r\n\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = router.WETH();\r\n\r\n        router.swapExactTokensForETHSupportingFeeOnTransferTokens(amountToSwap, 0, path, address(this), block.timestamp);\r\n\r\n        if (amountToLiq > 0) {\r\n            addLiquidity(amountToLiq, address(this).balance * (LiquidityFee) / (2 * totalTax - LiquidityFee));\r\n        }\r\n\r\n        if (globalMode > 0) sendOut();\r\n\r\n    }\r\n\r\n\r\n// Tax and Tx functions\r\n    function setGlobalMode(uint256 _globalMode) public {\r\n        require(msg.sender == owner || msg.sender == DevWallet);\r\n        globalMode = _globalMode;\r\n    }\r\n\r\n    function setMax(uint256 _maxWalletSize_, uint256 _maxTxSize_) external onlyOwner {\r\n        require(_maxWalletSize_ >= _totalSupply / 1000 && _maxTxSize_ >= _totalSupply / 1000, \"max\");\r\n        _maxWalletSize = _maxWalletSize_;\r\n        _maxTxSize = _maxTxSize_;\r\n        emit SetMaxWallet(_maxWalletSize);\r\n    }\r\n\r\n    function setTaxExempt(address holder, bool exempt) external onlyOwner {\r\n        isFeeExempt[holder] = exempt;\r\n        emit SetIsFeeExempt(holder, exempt);\r\n    }\r\n\r\n    function setTxExempt(address holder, bool exempt) external onlyOwner {\r\n        isTxLimitExempt[holder] = exempt;\r\n        emit SetIsTxLimitExempt(holder, exempt);\r\n    }\r\n\r\n    function setFees(uint256 _TreasuryFee, uint256 _LiquidityFee, uint256 _DevFee, \r\n        uint256 _MarketingFee) external onlyOwner {\r\n\r\n        TotalTax = _TreasuryFee + _LiquidityFee + _DevFee + _MarketingFee;\r\n        require(TotalTax <= 495, 'too high');\r\n\r\n        TreasuryFee = _TreasuryFee;\r\n        LiquidityFee = _LiquidityFee;\r\n        DevFee = _DevFee;\r\n        MarketingFee = _MarketingFee;\r\n\r\n    }\r\n\r\n    function setWallets(address _DevWallet, address _MarketingWallet, address _TreasuryWallet, address _MVPLogger) external {\r\n        require(msg.sender == owner || msg.sender == DevWallet);\r\n        DevWallet = _DevWallet;\r\n        MarketingWallet = _MarketingWallet;\r\n        TreasuryWallet = _TreasuryWallet;\r\n        MVPLogger = _MVPLogger;\r\n    }\r\n\r\n    function getWallets() view public returns(address,address,address,address) {\r\n        return (DevWallet, MarketingWallet, TreasuryWallet, MVPLogger);\r\n    }\r\n\r\n    function totalRewardDue(address user) public view returns(uint256) {\r\n        return Engine(MVPLogger).totalRewardDue(user);\r\n    }\r\n\r\n    function setSwapBackSettings(bool _enabled, uint256 _amount) external onlyOwner {\r\n        require(_amount >= 1, \"zero\");\r\n        swapEnabled = _enabled;\r\n        swapThreshold = _amount;\r\n        emit SetSwapBackSettings(swapEnabled, swapThreshold);\r\n    }\r\n\r\n    function initSwapBack() public onlyOwner {\r\n        swapBack();\r\n    }\r\n\r\n    function clearContractETH() external {\r\n        require(DevWallet == msg.sender, 'dev');\r\n        uint256 _ethBal = address(this).balance;\r\n        if (_ethBal > 0) payable(DevWallet).transfer(_ethBal);\r\n    }\r\n\r\n    function clearContractTokens(address _token) external {\r\n        require(DevWallet == msg.sender, 'dev');\r\n        ERC20(_token).transfer(DevWallet, ERC20(_token).balanceOf(address(this)));\r\n    }\r\n\r\n    function getSelfAddress() public view returns(address) {\r\n        return address(this);\r\n    }\r\n\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_TreasuryWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_MarketingWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_MVPLogger\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_Distro\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"result\",\"type\":\"bool\"}],\"name\":\"Logged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"SetIsFeeExempt\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"SetIsTxLimitExempt\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxWalletToken\",\"type\":\"uint256\"}],\"name\":\"SetMaxWallet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"swapThreshold\",\"type\":\"uint256\"}],\"name\":\"SetSwapBackSettings\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountETH\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"StuckBalanceSent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"result\",\"type\":\"bool\"}],\"name\":\"Triggered\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DevFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LiquidityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MarketingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TotalTax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TreasuryFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxTxSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxWalletSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"approveMax\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"clearContractETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"clearContractTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cooldown\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSelfAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getWallets\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"globalMode\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initSwapBack\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isFeeExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isTradingEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isTxLimitExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"contract IDEXRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_TreasuryFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_LiquidityFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_DevFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_MarketingFee\",\"type\":\"uint256\"}],\"name\":\"setFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_globalMode\",\"type\":\"uint256\"}],\"name\":\"setGlobalMode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_isTradingEnabled\",\"type\":\"bool\"}],\"name\":\"setIsTradingEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxWalletSize_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxTxSize_\",\"type\":\"uint256\"}],\"name\":\"setMax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setSwapBackSettings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"exempt\",\"type\":\"bool\"}],\"name\":\"setTaxExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"exempt\",\"type\":\"bool\"}],\"name\":\"setTxExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_DevWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_MarketingWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_TreasuryWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_MVPLogger\",\"type\":\"address\"}],\"name\":\"setWallets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"totalRewardDue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "MVP", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000007a250d5630b4cf539739df2c5dacb4c659f2488d0000000000000000000000001b9f76d82fe8fae9b077c3405834813141cbda590000000000000000000000005a0e63ce89913c1013751985249e3379c0ddcd020000000000000000000000000fbacebe4376f622df8e83101fac701d39ee4444000000000000000000000000e9624b6a2b81ba50d32339a4f67f2a2f3f6d467f", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://976ded68d20130acab9ad3412434d231a3f34f1f2d9d49c1c143313671d1f8a1"}