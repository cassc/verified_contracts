{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/Media_flattened.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Unlicense\\n// File: @openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\\n\\n\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\\n// File: contracts/IMarket.sol\\n\\n\\npragma solidity 0.8.5;\\n\\ninterface IMarket {\\n    //Struct for maintaining collaborators of a token\\n    struct Collaborators {\\n        address[] collaborators;\\n        uint256[] percentages;\\n    }\\n\\n    //Struct for maintainig refer details\\n    struct Refer {\\n        address referee;\\n        address referal;\\n    }\\n\\n    //Struct for maintaining details of tokens on auction\\n    struct OnAuction {\\n        address seller;\\n        uint256 basePrice;\\n        uint256 quantity;\\n        uint256 lastBidPrice;\\n        uint256 startTime;\\n        uint256 endTime;\\n        address[] bidders;\\n        uint256[] bidPrices;\\n    }\\n\\n    //Struct for maintaining details of tokens on sale\\n    struct OnSale {\\n        address seller;\\n        uint256 tokenPrice;\\n        uint256 quantity;\\n    }\\n\\n    //Event emitted when a token is put for sale\\n    event ForSale(\\n        address indexed token,\\n        address indexed owner,\\n        uint256 indexed id,\\n        uint256 quantity,\\n        uint256 salePrice\\n    );\\n    //Event emitted when a token is sold\\n    event Sold(\\n        address token,\\n        address indexed seller,\\n        address indexed buyer,\\n        uint256 indexed id,\\n        uint256 quantity,\\n        uint256 price,\\n        uint256 adminCommission\\n    );\\n    //Event emitted when the owner of the withdraws a token from sale\\n    event WithdrawSale(\\n        address indexed token,\\n        address indexed seller,\\n        uint256 indexed id\\n    );\\n    //Event emitted when a token is put on auction\\n    event ForAuction(\\n        address indexed token,\\n        address indexed owner,\\n        uint256 indexed id,\\n        uint256 quantity,\\n        uint256 basePrice,\\n        uint256 startTime,\\n        uint256 endTime\\n    );\\n    //Event emitted when there is a bid on a token\\n    event Bid(\\n        address token,\\n        address indexed bidder,\\n        address indexed owner,\\n        uint256 indexed id,\\n        uint256 bid\\n    );\\n    //Event emitted when a bid is rejected by the token owner or withdrawn by the bidder\\n    event CancelBid(\\n        address token,\\n        address indexed bidder,\\n        address indexed owner,\\n        uint256 indexed id\\n    );\\n    //Event emitted when the token owner accepts the bid of a bidder\\n    event AcceptBid(\\n        address token,\\n        address indexed bidder,\\n        address indexed owner,\\n        uint256 indexed id,\\n        uint256 adminCommission\\n    );\\n    //Event emitted when the token owner withdraws a token on auction\\n    event WithdrawAuction(\\n        address indexed token,\\n        address indexed owner,\\n        uint256 indexed id\\n    );\\n    //Event emitted when the highest bidder claims a token on timed auction after the auction ends\\n    event Claim(\\n        address token,\\n        address indexed bidder,\\n        address indexed owner,\\n        uint256 indexed id,\\n        uint256 adminCommission\\n    );\\n    //Event emitted when a user redeems his points to their wallet\\n    event Redeem(address indexed owner, uint256 indexed pointsRedeemed);\\n\\n    event Earning(\\n        address indexed referal,\\n        address indexed referee,\\n        uint256 referalAmount,\\n        uint256 refereeAmount\\n    );\\n}\\n\\n// File: @openzeppelin/contracts/utils/Context.sol\\n\\n\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\\n// File: @openzeppelin/contracts/access/Ownable.sol\\n\\n\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\\n// File: @openzeppelin/contracts/interfaces/IERC1271.sol\\n\\n\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC1271.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC1271 standard signature validation method for\\n * contracts as defined in https://eips.ethereum.org/EIPS/eip-1271[ERC-1271].\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC1271 {\\n    /**\\n     * @dev Should return whether the signature provided is valid for the provided data\\n     * @param hash      Hash of the data to be signed\\n     * @param signature Signature byte array associated with _data\\n     */\\n    function isValidSignature(bytes32 hash, bytes memory signature) external view returns (bytes4 magicValue);\\n}\\n\\n// File: @openzeppelin/contracts/utils/Address.sol\\n\\n\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\\n// File: @openzeppelin/contracts/utils/math/Math.sol\\n\\n\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\\n// File: @openzeppelin/contracts/utils/Strings.sol\\n\\n\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\\n// File: @openzeppelin/contracts/utils/cryptography/ECDSA.sol\\n\\n\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV // Deprecated in v4.8\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \u00f7 2 + 1, and for v in (302): v \u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\\n// File: @openzeppelin/contracts/utils/cryptography/EIP712.sol\\n\\n\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/EIP712.sol)\\n\\npragma solidity ^0.8.0;\\n\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\\n *\\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\\n *\\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\\n * ({_hashTypedDataV4}).\\n *\\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\\n * the chain id to protect against replay attacks on an eventual fork of the chain.\\n *\\n * NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method\\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\\n *\\n * _Available since v3.4._\\n */\\nabstract contract EIP712 {\\n    /* solhint-disable var-name-mixedcase */\\n    // Cache the domain separator as an immutable value, but also store the chain id that it corresponds to, in order to\\n    // invalidate the cached domain separator if the chain id changes.\\n    bytes32 private immutable _CACHED_DOMAIN_SEPARATOR;\\n    uint256 private immutable _CACHED_CHAIN_ID;\\n    address private immutable _CACHED_THIS;\\n\\n    bytes32 private immutable _HASHED_NAME;\\n    bytes32 private immutable _HASHED_VERSION;\\n    bytes32 private immutable _TYPE_HASH;\\n\\n    /* solhint-enable var-name-mixedcase */\\n\\n    /**\\n     * @dev Initializes the domain separator and parameter caches.\\n     *\\n     * The meaning of `name` and `version` is specified in\\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\\n     *\\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\\n     * - `version`: the current major version of the signing domain.\\n     *\\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\\n     * contract upgrade].\\n     */\\n    constructor(string memory name, string memory version) {\\n        bytes32 hashedName = keccak256(bytes(name));\\n        bytes32 hashedVersion = keccak256(bytes(version));\\n        bytes32 typeHash = keccak256(\\n            \\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"\\n        );\\n        _HASHED_NAME = hashedName;\\n        _HASHED_VERSION = hashedVersion;\\n        _CACHED_CHAIN_ID = block.chainid;\\n        _CACHED_DOMAIN_SEPARATOR = _buildDomainSeparator(typeHash, hashedName, hashedVersion);\\n        _CACHED_THIS = address(this);\\n        _TYPE_HASH = typeHash;\\n    }\\n\\n    /**\\n     * @dev Returns the domain separator for the current chain.\\n     */\\n    function _domainSeparatorV4() internal view returns (bytes32) {\\n        if (address(this) == _CACHED_THIS && block.chainid == _CACHED_CHAIN_ID) {\\n            return _CACHED_DOMAIN_SEPARATOR;\\n        } else {\\n            return _buildDomainSeparator(_TYPE_HASH, _HASHED_NAME, _HASHED_VERSION);\\n        }\\n    }\\n\\n    function _buildDomainSeparator(\\n        bytes32 typeHash,\\n        bytes32 nameHash,\\n        bytes32 versionHash\\n    ) private view returns (bytes32) {\\n        return keccak256(abi.encode(typeHash, nameHash, versionHash, block.chainid, address(this)));\\n    }\\n\\n    /**\\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\\n     * function returns the hash of the fully encoded EIP712 message for this domain.\\n     *\\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\\n     *\\n     * ```solidity\\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\\n     *     keccak256(\\\"Mail(address to,string contents)\\\"),\\n     *     mailTo,\\n     *     keccak256(bytes(mailContents))\\n     * )));\\n     * address signer = ECDSA.recover(digest, signature);\\n     * ```\\n     */\\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\\n        return ECDSA.toTypedDataHash(_domainSeparatorV4(), structHash);\\n    }\\n}\\n\\n// File: @openzeppelin/contracts/utils/cryptography/SignatureChecker.sol\\n\\n\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/SignatureChecker.sol)\\n\\npragma solidity ^0.8.0;\\n\\n\\n\\n\\n/**\\n * @dev Signature verification helper that can be used instead of `ECDSA.recover` to seamlessly support both ECDSA\\n * signatures from externally owned accounts (EOAs) as well as ERC1271 signatures from smart contract wallets like\\n * Argent and Gnosis Safe.\\n *\\n * _Available since v4.1._\\n */\\nlibrary SignatureChecker {\\n    /**\\n     * @dev Checks if a signature is valid for a given signer and data hash. If the signer is a smart contract, the\\n     * signature is validated against that smart contract using ERC1271, otherwise it's validated using `ECDSA.recover`.\\n     *\\n     * NOTE: Unlike ECDSA signatures, contract signatures are revocable, and the outcome of this function can thus\\n     * change through time. It could return true at block N and false at block N+1 (or the opposite).\\n     */\\n    function isValidSignatureNow(\\n        address signer,\\n        bytes32 hash,\\n        bytes memory signature\\n    ) internal view returns (bool) {\\n        (address recovered, ECDSA.RecoverError error) = ECDSA.tryRecover(hash, signature);\\n        if (error == ECDSA.RecoverError.NoError && recovered == signer) {\\n            return true;\\n        }\\n\\n        (bool success, bytes memory result) = signer.staticcall(\\n            abi.encodeWithSelector(IERC1271.isValidSignature.selector, hash, signature)\\n        );\\n        return (success &&\\n            result.length == 32 &&\\n            abi.decode(result, (bytes32)) == bytes32(IERC1271.isValidSignature.selector));\\n    }\\n}\\n\\n// File: contracts/Market.sol\\n\\n\\npragma solidity 0.8.5;\\n\\n\\n\\n\\n\\ncontract Market is IMarket, EIP712, Ownable {\\n    //Address of Media platform\\n    address private _platform;\\n    //Relayer Address\\n    address private relayer;\\n    //Admin Commision percentage\\n    uint256 public commission; //percentage * 100\\n    //Referee reward percentage\\n    uint256 public refereeReward; //percentage * 100\\n    //Referal reward percentage\\n    uint256 public referalReward; //percentage * 100\\n\\n    //TokenContractAddress=>OwnerAddress=>TokenId=>`onAuction`\\n    mapping(address => mapping(address => mapping(uint256 => OnAuction)))\\n        public onAuctions;\\n    //TokenAddress=>OwnerAddress=>TokenId=>BidderAddress=>Boolean\\n    mapping(address => mapping(address => mapping(uint256 => mapping(address => bool))))\\n        private _isBidder;\\n    //TokenAddress=>OwnerAddress=>TokenId=>`onSale`\\n    mapping(address => mapping(address => mapping(uint256 => OnSale)))\\n        public onSales;\\n    //TokenAddress=>TokenId=>`Collaborators`\\n    mapping(address => mapping(uint256 => Collaborators))\\n        private _tokenCollaborators;\\n    //UserAddress=>Balance\\n    mapping(address => uint256) private _redeemablePoints;\\n    //TokenAddress=>TokenId=>RoyaltyPercentage\\n    mapping(address => mapping(uint256 => uint256)) private _royalty;\\n    // adress => Boolean\\n    mapping(address => bool) private _isFirstBuy; // returns false if is first buy\\n\\n    constructor() EIP712(\\\"NFTTalent\\\", \\\"1\\\") {\\n    }\\n\\n    //Modifier to check only media contract can call the functions\\n    modifier onlyPlatform() {\\n        require(\\n            msg.sender == _platform,\\n            \\\"Market: can only be called from platform\\\"\\n        );\\n        _;\\n    }\\n\\n    //receive function to receive ETH to the contract\\n    receive() external payable {}\\n\\n    /**\\n     * @dev Sets the address of media contract as the platform that can call functions in this contract\\n     *\\n     * Requirements:\\n     *\\n     * - The origin caller of this function must be `owner` i.e. the owner or deployer of this smart contract.\\n     * - `nftPlaform` cannot be the zero address.\\n     * - `platform` must not have been initialised. This should be zero address. Therefore this function can be called only once.\\n     */\\n    function setPlatform(address nftPlatform) external {\\n        require(\\n            tx.origin == owner(),\\n            \\\"Market: only contract owner can set platform\\\"\\n        );\\n        require(nftPlatform != address(0), \\\"Market: invalid platform address\\\");\\n        require(\\n            _platform == address(0),\\n            \\\"Market: platform already initialised\\\"\\n        );\\n        _platform = nftPlatform;\\n    }\\n\\n    /**\\n     * @dev Puts `quantity` quantity of `id` token of contract address `tokenAddress` from `tokenOwner` on auction at a price of `price`.\\n     *\\n     *      If the `endTime` is not equal to zero then the auction is a timed auction.\\n     *\\n     * Requirements:\\n     *\\n     * - `id` token of contract address `tokenAddress` from `tokenOwner` must not be on auction already.\\n     * - `id` token of contract address `tokenAddress` from `tokenOwner` must not be on sale already.\\n     * - If on timed auction the timestamp at which the auction starts `startTime` must be more than the current block timestamp.\\n     * - If `startTime` is zero in a timed auction it is assigned the timestamp of current block.\\n     * - If on timed auction the timestamp at which the auction ends `endTime` must be more than the `startTime`.\\n     *\\n     * Emits a {ForAuction} event.\\n     */\\n    function putOnAuction(\\n        address tokenAddress,\\n        uint256 id,\\n        address tokenOwner,\\n        uint256 price,\\n        uint256 quantity,\\n        uint256 startTime,\\n        uint256 endTime\\n    ) external onlyPlatform {\\n        require(\\n            onAuctions[tokenAddress][tokenOwner][id].seller == address(0),\\n            \\\"Market: token already on auction\\\"\\n        );\\n        require(\\n            onSales[tokenAddress][tokenOwner][id].seller == address(0),\\n            \\\"Market: already on sale\\\"\\n        );\\n        if (endTime != 0) {\\n            if (startTime != 0)\\n                require(\\n                    startTime > block.timestamp,\\n                    \\\"Market: auction start time already passed\\\"\\n                );\\n            else startTime = block.timestamp;\\n            require(\\n                endTime > startTime,\\n                \\\"Market: auction end time must be more than start time\\\"\\n            );\\n            onAuctions[tokenAddress][tokenOwner][id].startTime = startTime;\\n            onAuctions[tokenAddress][tokenOwner][id].endTime = endTime;\\n            onAuctions[tokenAddress][tokenOwner][id].bidders.push(address(0));\\n            onAuctions[tokenAddress][tokenOwner][id].bidPrices.push(0);\\n        }\\n        onAuctions[tokenAddress][tokenOwner][id].seller = tokenOwner;\\n        onAuctions[tokenAddress][tokenOwner][id].basePrice = price;\\n        onAuctions[tokenAddress][tokenOwner][id].quantity = quantity;\\n        onAuctions[tokenAddress][tokenOwner][id].lastBidPrice = price;\\n        emit ForAuction(\\n            tokenAddress,\\n            tokenOwner,\\n            id,\\n            quantity,\\n            price,\\n            startTime,\\n            endTime\\n        );\\n    }\\n\\n    /**\\n     * @dev a bid by `bidder` of `bidAmount` on `id` token of contract address `tokenAddress` from `tokenOwner`\\n     *\\n     * Requirements:\\n     *\\n     * - `id` token of contract address `tokenAddress` from `tokenOwner` must be on auction.\\n     * - `bidder` must not be owner of the token.\\n     * - `bidAmount` must be more than the last bid on the token.\\n     * - If timed auction first check if the current time is more than or equal to the start time. If true, the auction has started.\\n     * - If timed auction first check if the current time is less than the end time. If false, the auction has ended.\\n     *\\n     * Emits a {Bid} event.\\n     */\\n    function bid(\\n        address tokenAddress,\\n        uint256 id,\\n        address from,\\n        address bidder,\\n        uint256 bidAmount\\n    ) external onlyPlatform {\\n        OnAuction memory auctions = onAuctions[tokenAddress][from][id];\\n        require(auctions.seller != address(0), \\\"Market: token not on auction\\\");\\n        require(\\n            auctions.seller != bidder,\\n            \\\"Market: owner cannot bid on his token\\\"\\n        );\\n        require(\\n            bidAmount > auctions.lastBidPrice,\\n            \\\"Market: bid must be more than the last bid\\\"\\n        );\\n        if (auctions.endTime == 0) {\\n            if (_isBidder[tokenAddress][from][id][bidder])\\n                _updateBid(tokenAddress, from, id, bidder, bidAmount);\\n            else {\\n                onAuctions[tokenAddress][from][id].bidders.push(bidder);\\n                onAuctions[tokenAddress][from][id].bidPrices.push(bidAmount);\\n            }\\n            _isBidder[tokenAddress][from][id][bidder] = true;\\n        } else {\\n            require(\\n                auctions.startTime <= block.timestamp,\\n                \\\"Market: auction has not started\\\"\\n            );\\n            require(\\n                auctions.endTime > block.timestamp,\\n                \\\"Market: auction has ended\\\"\\n            );\\n            _redeemablePoints[auctions.bidders[0]] += auctions.bidPrices[0];\\n            onAuctions[tokenAddress][from][id].bidders[0] = bidder;\\n            onAuctions[tokenAddress][from][id].bidPrices[0] = bidAmount;\\n        }\\n        onAuctions[tokenAddress][from][id].lastBidPrice = bidAmount;\\n        emit Bid(tokenAddress, bidder, from, id, bidAmount);\\n    }\\n\\n    /**\\n     * @dev a bid from `bidder` on `id` token of contract address `tokenAddress` accepted by `tokenOwner`\\n     *\\n     *      Once accepted, royalty is calculated on the final bid amount. This royalty is then divided\\n     *      among the creator and collaborators (if any) of the token.\\n     *\\n     *      After removing the royalty the remaining amount is added to the points of the `tokenOwner`\\n     *\\n     * Requirements:\\n     *\\n     * - `id` token of contract address `tokenAddress` from `tokenOwner` must be on auction.\\n     * - It must not be on timed auction.\\n     * - `quantity` must be equal to the quantity of tokens on sale.\\n     * - `bidder` must actually have a bid on the said token.\\n     *\\n     * Emits a {AcceptBid} event.\\n     */\\n    function acceptBid(\\n        address tokenAddress,\\n        uint256 id,\\n        address creator,\\n        address tokenOwner,\\n        address bidder,\\n        uint256 quantity,\\n        Refer calldata refer,\\n        bytes memory signature\\n    ) external onlyPlatform {\\n        OnAuction memory auctions = onAuctions[tokenAddress][tokenOwner][id];\\n        require(auctions.seller != address(0), \\\"Market: token not on auction\\\");\\n        require(auctions.endTime == 0, \\\"Market: token is on timed auction\\\");\\n        require(\\n            auctions.quantity == quantity,\\n            \\\"Market: quantity should be equal to total tokens on auction\\\"\\n        );\\n        require(\\n            _isBidder[tokenAddress][tokenOwner][id][bidder],\\n            \\\"Market: bidder did not bid for this token\\\"\\n        );\\n        uint256 bidNumber;\\n        uint256 totalBids = auctions.bidders.length;\\n        uint256 _adminCommission;\\n        for (bidNumber = 0; bidNumber < totalBids; bidNumber++) {\\n            if (auctions.bidders[bidNumber] == bidder) {\\n                if (creator == address(0)) {\\n                    _redeemablePoints[tokenOwner] += auctions.bidPrices[\\n                        bidNumber\\n                    ];\\n                } else {\\n                    uint256 royalty = _calculateRoyalty(\\n                        auctions.bidPrices[bidNumber],\\n                        tokenAddress,\\n                        id\\n                    );\\n\\n                    _adminCommission = _calculatePercentage(\\n                        auctions.bidPrices[bidNumber],\\n                        commission\\n                    );\\n                    _redeemablePoints[tokenOwner] += (auctions.bidPrices[\\n                        bidNumber\\n                    ] -\\n                        royalty -\\n                        _adminCommission);\\n\\n                    if (\\n                        !_isFirstBuy[bidder] &&\\n                        signature.length > 0 &&\\n                        _verifySignature(refer, signature)\\n                    ) {\\n                        _adminCommission = _divideCommission(\\n                            _adminCommission,\\n                            refer\\n                        );\\n                        _isFirstBuy[bidder] = true;\\n                    } else {\\n                        _redeemablePoints[owner()] += (_adminCommission);\\n                    }\\n\\n                    _divideRoyalty(creator, tokenAddress, id, royalty);\\n                }\\n            } else {\\n                _redeemablePoints[auctions.bidders[bidNumber]] += auctions\\n                    .bidPrices[bidNumber];\\n                _isBidder[tokenAddress][tokenOwner][id][\\n                    auctions.bidders[bidNumber]\\n                ] = false;\\n            }\\n        }\\n        delete onAuctions[tokenAddress][tokenOwner][id];\\n        emit AcceptBid(tokenAddress, bidder, tokenOwner, id, _adminCommission);\\n    }\\n\\n    /**\\n     * @dev the `bidder` on `id` token of contract address `tokenAddress` claims the token after the timed auction ends.\\n     *\\n     *      Once claimed, royalty is calculated on the final bid amount. This royalty is then divided\\n     *      among the `creator` and collaborators (if any) of the token.\\n     *\\n     *      After removing the royalty the remaining amount is added to the points of the seller `from`.\\n     *\\n     * Requirements:\\n     *\\n     * - `id` token of contract address `tokenAddress` from `tokenOwner` must be on auction.\\n     * - It must be on timed auction.\\n     * - `quantity` must be equal to the quantity of tokens on sale.\\n     * - The auction should have ended i.e. the current time must be more than the end time of the auction.\\n     * - `bidder` must be the highest bidder before the auction ended.\\n     *\\n     * Emits a {Claim} event.\\n     */\\n    function claim(\\n        address tokenAddress,\\n        address from,\\n        address creator,\\n        address bidder,\\n        uint256 id,\\n        uint256 quantity,\\n        Refer calldata refer,\\n        bytes memory signature\\n    ) external onlyPlatform {\\n        OnAuction memory auctions = onAuctions[tokenAddress][from][id];\\n        require(auctions.seller != address(0), \\\"Market: token not on auction\\\");\\n        require(auctions.endTime != 0, \\\"Market: token is not on timed auction\\\");\\n        require(\\n            auctions.endTime < block.timestamp,\\n            \\\"Market: auction is not over\\\"\\n        );\\n        require(\\n            auctions.bidders[0] == bidder,\\n            \\\"Market: not the winning bidder\\\"\\n        );\\n        require(\\n            auctions.quantity == quantity,\\n            \\\"Market: quantity should be equal to total tokens on auction\\\"\\n        );\\n        uint256 _adminCommission;\\n        if (creator == address(0)) {\\n            _redeemablePoints[from] += auctions.bidPrices[0];\\n        } else {\\n            uint256 royalty = _calculateRoyalty(\\n                auctions.bidPrices[0],\\n                tokenAddress,\\n                id\\n            );\\n            _adminCommission = _calculatePercentage(\\n                auctions.bidPrices[0],\\n                commission\\n            );\\n            _redeemablePoints[from] += (auctions.bidPrices[0] -\\n                royalty -\\n                _adminCommission);\\n\\n            if (\\n                !_isFirstBuy[bidder] &&\\n                signature.length > 0 &&\\n                _verifySignature(refer, signature)\\n            ) {\\n                _adminCommission = _divideCommission(_adminCommission, refer);\\n                _isFirstBuy[bidder] = true;\\n            } else {\\n                _redeemablePoints[owner()] += (_adminCommission);\\n            }\\n            _divideRoyalty(creator, tokenAddress, id, royalty);\\n        }\\n        delete onAuctions[tokenAddress][from][id];\\n        emit Claim(tokenAddress, bidder, from, id, _adminCommission);\\n    }\\n\\n    /**\\n     * @dev the auction on `id` token of contract address `tokenAddress` by `tokenOwner` was withdrawn.\\n     *\\n     *      If timed auction then there must be no bids on the token for it to be withdrawn.\\n     *      If normal auction then all the bids on the token are added back to the points of respective\\n     *      bidders before it is withdrawn.\\n     *\\n     * Requirements:\\n     *\\n     * - `id` token of contract address `tokenAddress` from `tokenOwner` must be on auction.\\n     * - `tokenOwner` must be the auctioner.\\n     * - If timed auction there must be no bidders.\\n     *\\n     * Emits a {WithdrawAuction} event.\\n     */\\n    function withdrawAuction(\\n        address tokenAddress,\\n        uint256 id,\\n        address tokenOwner\\n    ) external onlyPlatform {\\n        OnAuction memory auctions = onAuctions[tokenAddress][tokenOwner][id];\\n        require(\\n            auctions.seller == tokenOwner,\\n            \\\"Market: you did not put the token on auction\\\"\\n        );\\n        if (auctions.endTime != 0)\\n            require(\\n                auctions.bidders[0] == address(0),\\n                \\\"Market: already bid on timed auction exists\\\"\\n            );\\n        else {\\n            uint256 bidNumber;\\n            uint256 totalBids = auctions.bidders.length;\\n            for (bidNumber = 0; bidNumber < totalBids; bidNumber++) {\\n                _redeemablePoints[auctions.bidders[bidNumber]] += auctions\\n                    .bidPrices[bidNumber];\\n                _isBidder[tokenAddress][tokenOwner][id][\\n                    auctions.bidders[bidNumber]\\n                ] = false;\\n            }\\n        }\\n        delete onAuctions[tokenAddress][tokenOwner][id];\\n        emit WithdrawAuction(tokenAddress, tokenOwner, id);\\n    }\\n\\n    /**\\n     * @dev the bid of `bidder` on `id` token of contract address `tokenAddress` is removed.\\n     *\\n     *\\n     * Requirements:\\n     *\\n     * - `id` token of contract address `tokenAddress` from `tokenOwner` must be on auction.\\n     * - It must not be on timed auction.\\n     * - `bidder` must actually have a bid on the said token.\\n     *\\n     * Emits a {CancelBid} event.\\n     */\\n    function removeBid(\\n        address tokenAddress,\\n        address from,\\n        uint256 id,\\n        address bidder\\n    ) public onlyPlatform {\\n        OnAuction memory auctions = onAuctions[tokenAddress][from][id];\\n        require(auctions.endTime == 0, \\\"Market: token is on timed auction\\\");\\n        require(\\n            auctions.seller == from,\\n            \\\"Market: this seller did not put this token on auction\\\"\\n        );\\n        require(\\n            _isBidder[tokenAddress][from][id][bidder],\\n            \\\"Market: no bids from bidder for this token\\\"\\n        );\\n        uint256 bidNumber;\\n        uint256 totalBids = auctions.bidders.length;\\n        for (bidNumber = 0; bidNumber < totalBids; bidNumber++) {\\n            if (auctions.bidders[bidNumber] == bidder) {\\n                _redeemablePoints[bidder] += auctions.bidPrices[bidNumber];\\n                onAuctions[tokenAddress][from][id].bidders[bidNumber] = auctions\\n                    .bidders[totalBids - 1];\\n                onAuctions[tokenAddress][from][id].bidders.pop();\\n                onAuctions[tokenAddress][from][id].bidPrices[\\n                    bidNumber\\n                ] = auctions.bidPrices[totalBids - 1];\\n                onAuctions[tokenAddress][from][id].bidPrices.pop();\\n                _isBidder[tokenAddress][from][id][bidder] = false;\\n                break;\\n            }\\n        }\\n        emit CancelBid(tokenAddress, bidder, from, id);\\n    }\\n\\n    /**\\n     * @dev Puts `quantity` quantity of `id` token of contract address `tokenAddress` from `tokenOwner` on fixed sale at a price of `price`.\\n     *\\n     * Requirements:\\n     *\\n     * - `id` token of contract address `tokenAddress` from `tokenOwner` must not be on sale already.\\n     * - `id` token of contract address `tokenAddress` from `tokenOwner` must not be on auction already.\\n     *\\n     * Emits a {ForSale} event.\\n     */\\n    function listOnSale(\\n        address tokenAddress,\\n        uint256 id,\\n        address tokenOwner,\\n        uint256 price,\\n        uint256 quantity\\n    ) external onlyPlatform {\\n        require(\\n            onSales[tokenAddress][tokenOwner][id].seller == address(0),\\n            \\\"Market: already on sale\\\"\\n        );\\n        require(\\n            onAuctions[tokenAddress][tokenOwner][id].seller == address(0),\\n            \\\"Market: token already on auction\\\"\\n        );\\n        onSales[tokenAddress][tokenOwner][id] = OnSale({\\n            seller: tokenOwner,\\n            tokenPrice: price,\\n            quantity: quantity\\n        });\\n        emit ForSale(tokenAddress, tokenOwner, id, quantity, price);\\n    }\\n\\n    /**\\n     * @dev `buyer` pays `price` for `id` token of contract address `tokenAddress` which was put on sale by `from`.\\n     *\\n     *      `price` is the total sale price depending on the quantity of tokens to be bought.\\n     *\\n     *      Once bought, royalty is calculated on the total sale price. This royalty is then divided\\n     *      among the `creator` and collaborators (if any) of the token.\\n     *\\n     *      After removing the royalty the remaining amount is added to the points of the seller `from`.\\n     *\\n     * Requirements:\\n     *\\n     * - `id` token of contract address `tokenAddress` from `tokenOwner` must be on sale.\\n     * - `price` must be equal to the `quantity` multiplied by price of each token.\\n     * - `quantity` must be less than or equal to the quantity of token put on sale.\\n     *\\n     * Emits a {Sold} event.\\n     */\\n    function directBuy(\\n        address tokenAddress,\\n        uint256 id,\\n        address creator,\\n        address from,\\n        address buyer,\\n        uint256 price,\\n        uint256 quantity,\\n        Refer calldata refer,\\n        bytes memory signature\\n    ) external onlyPlatform {\\n        OnSale memory sale = onSales[tokenAddress][from][id];\\n        require(sale.seller != address(0), \\\"Market: token not on sale\\\");\\n        require(sale.seller != buyer, \\\"Market: can not buy own nft\\\");\\n        require(\\n            price == sale.tokenPrice * quantity,\\n            \\\"Market: amount either more or less than token price\\\"\\n        );\\n        require(\\n            quantity <= sale.quantity,\\n            \\\"Market: not sufficient token on sale\\\"\\n        );\\n        uint256 _adminCommission;\\n        if (creator == address(0)) {\\n            _redeemablePoints[from] += price;\\n        } else {\\n            uint256 royalty = _calculateRoyalty(price, tokenAddress, id);\\n            _adminCommission = _calculatePercentage(price, commission);\\n\\n            _redeemablePoints[from] += (price - _adminCommission - royalty);\\n            if (\\n                !_isFirstBuy[buyer] &&\\n                signature.length > 0 &&\\n                _verifySignature(refer, signature)\\n            ) {\\n                _adminCommission = _divideCommission(_adminCommission, refer);\\n            } else {\\n                _redeemablePoints[owner()] += (_adminCommission);\\n            }\\n\\n            _divideRoyalty(creator, tokenAddress, id, royalty);\\n        }\\n        onSales[tokenAddress][from][id].quantity -= quantity;\\n        _isFirstBuy[buyer] = true;\\n        if (onSales[tokenAddress][from][id].quantity == 0)\\n            delete onSales[tokenAddress][from][id];\\n        emit Sold(\\n            tokenAddress,\\n            from,\\n            buyer,\\n            id,\\n            quantity,\\n            price,\\n            _adminCommission\\n        );\\n    }\\n\\n    /**\\n     * @dev the sale on `id` token of contract address `tokenAddress` by `tokenOwner` was withdrawn.\\n     *\\n     * Requirements:\\n     *\\n     * - `id` token of contract address `tokenAddress` from `tokenOwner` must be on sale.\\n     * - `tokenOwner` must be the auctioner.\\n     *\\n     * Emits a {WithdrawSale} event.\\n     */\\n    function withdrawSale(\\n        address tokenAddress,\\n        uint256 id,\\n        address tokenOwner\\n    ) external {\\n        require(\\n            onSales[tokenAddress][tokenOwner][id].seller == tokenOwner,\\n            \\\"Media: you are not selling the token\\\"\\n        );\\n        delete onSales[tokenAddress][tokenOwner][id];\\n        emit WithdrawSale(tokenAddress, tokenOwner, id);\\n    }\\n\\n    /**\\n     * @dev Sets the collaborators of `tokenID` token of contract address `tokenAddress`.\\n     *      Also sets the percentage of royalty each collaborator will receive.\\n     *\\n     * Requirements:\\n     *\\n     * - The total collaborator percentage must not be more than 100%.\\n     *\\n     */\\n    function setCollaborators(\\n        address tokenAddress,\\n        uint256 tokenID,\\n        address[] calldata collaborator,\\n        uint256[] calldata percentage\\n    ) external onlyPlatform {\\n        uint256 totalPercentage;\\n        for (uint256 index = 0; index < percentage.length; index++) {\\n            totalPercentage += percentage[index];\\n        }\\n        require(\\n            totalPercentage <= 10000,\\n            \\\"Market: percentage cannot be more than 10000\\\"\\n        );\\n        Collaborators memory collaborators = Collaborators(\\n            collaborator,\\n            percentage\\n        );\\n        _tokenCollaborators[tokenAddress][tokenID] = collaborators;\\n    }\\n\\n    /**\\n     * @dev Sets the royalty percentage of `id` token of contract address `tokenAddress`.\\n     *\\n     * Requirements:\\n     *\\n     * - The royalty percentage `royaltyPoints` must not be more than 100%.\\n     *\\n     */\\n    function setRoyaltyPoints(\\n        address tokenAddress,\\n        uint256 id,\\n        uint256 royaltyPoints\\n    ) external onlyPlatform {\\n        require(\\n            royaltyPoints <= 10000,\\n            \\\"Market: percentage cannot be more than 10000\\\"\\n        );\\n        _royalty[tokenAddress][id] = royaltyPoints;\\n    }\\n\\n    /**\\n     * @dev Redeems `points` to the `user` wallet.\\n     *\\n     * Requirements:\\n     *\\n     * - The redeemable points of the `user` must be more than or equal to the requested `points`.\\n     *\\n     */\\n    function redeemPoints(address user, uint256 points) external onlyPlatform {\\n        require(\\n            points <= _redeemablePoints[user],\\n            \\\"Market: not sufficient balance to withdraw\\\"\\n        );\\n        payable(user).transfer(points);\\n        _redeemablePoints[user] -= points;\\n        emit Redeem(user, points);\\n    }\\n\\n    /**\\n     * @dev Shows the total available redeemable points of the `user`.\\n     *\\n     */\\n    function viewPoints(\\n        address user\\n    ) external view onlyPlatform returns (uint256) {\\n        return _redeemablePoints[user];\\n    }\\n\\n    function addPoints(address to, uint256 points) external onlyPlatform {\\n        _redeemablePoints[to] += points;\\n    }\\n\\n    function setCommisionAndReferReward(\\n        uint256 _commission,\\n        uint256 _refereeReward,\\n        uint256 _referalReward\\n    ) external onlyPlatform {\\n        if (commission != _commission) commission = _commission;\\n        if (refereeReward != _refereeReward) refereeReward = _refereeReward;\\n        if (referalReward != _referalReward) referalReward = _referalReward;\\n    }\\n\\n    function setRelayer(address _relayer) external onlyPlatform {\\n        require(_relayer != address(0), \\\"Market: address zero provided\\\");\\n        require(relayer == address(0), \\\"Market: address already set\\\");\\n        relayer = _relayer;\\n    }\\n\\n    //PRIVATE FUNCTIONS\\n\\n    function _updateBid(\\n        address tokenAddress,\\n        address from,\\n        uint256 id,\\n        address bidder,\\n        uint256 bidAmount\\n    ) private {\\n        OnAuction memory auctions = onAuctions[tokenAddress][from][id];\\n        uint256 bidNumber;\\n        uint256 totalBids = auctions.bidders.length;\\n        for (bidNumber = 0; bidNumber < totalBids; bidNumber++) {\\n            if (auctions.bidders[bidNumber] == bidder) {\\n                _redeemablePoints[bidder] += auctions.bidPrices[bidNumber];\\n                onAuctions[tokenAddress][from][id].bidPrices[\\n                    bidNumber\\n                ] = bidAmount;\\n            }\\n        }\\n    }\\n\\n    function _calculateRoyalty(\\n        uint256 salePrice,\\n        address tokenAddress,\\n        uint256 id\\n    ) private view onlyPlatform returns (uint256) {\\n        return (salePrice * _royalty[tokenAddress][id]) / 10000;\\n    }\\n\\n    function _divideRoyalty(\\n        address creator,\\n        address tokenAddress,\\n        uint256 tokenId,\\n        uint256 royalty\\n    ) private onlyPlatform {\\n        uint256 totalCollaborators = _tokenCollaborators[tokenAddress][tokenId]\\n            .collaborators\\n            .length;\\n        uint256 royaltySpent;\\n        for (\\n            uint256 collaboratorsCounter = 0;\\n            collaboratorsCounter < totalCollaborators;\\n            collaboratorsCounter++\\n        ) {\\n            uint256 royaltyShare = (royalty *\\n                _tokenCollaborators[tokenAddress][tokenId].percentages[\\n                    collaboratorsCounter\\n                ]) / 10000;\\n            _redeemablePoints[\\n                _tokenCollaborators[tokenAddress][tokenId].collaborators[\\n                    collaboratorsCounter\\n                ]\\n            ] += royaltyShare;\\n            royaltySpent += royaltyShare;\\n        }\\n        _redeemablePoints[creator] += (royalty - royaltySpent);\\n    }\\n\\n    function _divideCommission(\\n        uint256 _adminCommission,\\n        Refer memory refer\\n    ) private returns (uint256) {\\n        //\\n        uint256 _refereeReward;\\n        uint256 _referalReward;\\n        uint256 _adminReward;\\n        _refereeReward = _calculatePercentage(_adminCommission, refereeReward);\\n        _referalReward = _calculatePercentage(_adminCommission, referalReward);\\n        _redeemablePoints[refer.referee] += _refereeReward;\\n        _redeemablePoints[refer.referal] += _referalReward;\\n        _adminReward = _adminCommission - _refereeReward - _referalReward;\\n        _redeemablePoints[owner()] += _adminReward;\\n\\n        emit Earning(\\n            refer.referal,\\n            refer.referee,\\n            _referalReward,\\n            _refereeReward\\n        );\\n        return _adminReward;\\n    }\\n\\n    function _calculatePercentage(\\n        uint256 price,\\n        uint256 percentage\\n    ) private pure returns (uint256) {\\n        if (price == 0) return 0;\\n        return (price * percentage) / 10000;\\n    }\\n\\n    function _verifySignature(\\n        Refer calldata refer,\\n        bytes memory signature\\n    ) private view returns (bool) {\\n        //\\n        bytes32 hash = _hashTypedDataV4(\\n            keccak256(\\n                abi.encode(\\n                    keccak256(\\\"Refer(address referee,address referal)\\\"),\\n                    refer.referee,\\n                    refer.referal\\n                )\\n            )\\n        );\\n        require(\\n            SignatureChecker.isValidSignatureNow(relayer, hash, signature),\\n            \\\"Market: invalid signature\\\"\\n        );\\n        return true;\\n    }\\n}\\n\\n// File: @openzeppelin/contracts/utils/introspection/IERC165.sol\\n\\n\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\\n// File: @openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\\n\\n\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\\n// File: @openzeppelin/contracts/utils/introspection/ERC165.sol\\n\\n\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\\n// File: @openzeppelin/contracts/token/ERC1155/IERC1155.sol\\n\\n\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\\n// File: @openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\\n\\n\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/IERC1155MetadataURI.sol)\\n\\npragma solidity ^0.8.0;\\n\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155MetadataURI is IERC1155 {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\\n// File: @openzeppelin/contracts/token/ERC1155/ERC1155.sol\\n\\n\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC1155/ERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\n\\n\\n\\n\\n\\n\\n/**\\n * @dev Implementation of the basic standard multi-token.\\n * See https://eips.ethereum.org/EIPS/eip-1155\\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\\n *\\n * _Available since v3.1._\\n */\\ncontract ERC1155 is Context, ERC165, IERC1155, IERC1155MetadataURI {\\n    using Address for address;\\n\\n    // Mapping from token ID to account balances\\n    mapping(uint256 => mapping(address => uint256)) private _balances;\\n\\n    // Mapping from account to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\\n    string private _uri;\\n\\n    /**\\n     * @dev See {_setURI}.\\n     */\\n    constructor(string memory uri_) {\\n        _setURI(uri_);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC1155).interfaceId ||\\n            interfaceId == type(IERC1155MetadataURI).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155MetadataURI-uri}.\\n     *\\n     * This implementation returns the same URI for *all* token types. It relies\\n     * on the token type ID substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * Clients calling this function must replace the `\\\\{id\\\\}` substring with the\\n     * actual token type ID.\\n     */\\n    function uri(uint256) public view virtual override returns (string memory) {\\n        return _uri;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\\n        require(account != address(0), \\\"ERC1155: address zero is not a valid owner\\\");\\n        return _balances[id][account];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOfBatch}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256[] memory)\\n    {\\n        require(accounts.length == ids.length, \\\"ERC1155: accounts and ids length mismatch\\\");\\n\\n        uint256[] memory batchBalances = new uint256[](accounts.length);\\n\\n        for (uint256 i = 0; i < accounts.length; ++i) {\\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\\n        }\\n\\n        return batchBalances;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[account][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not token owner or approved\\\"\\n        );\\n        _safeTransferFrom(from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeBatchTransferFrom}.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not token owner or approved\\\"\\n        );\\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n        _balances[id][to] += amount;\\n\\n        emit TransferSingle(operator, from, to, id, amount);\\n\\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; ++i) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n            _balances[id][to] += amount;\\n        }\\n\\n        emit TransferBatch(operator, from, to, ids, amounts);\\n\\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Sets a new URI for all token types, by relying on the token type ID\\n     * substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * By this mechanism, any occurrence of the `\\\\{id\\\\}` substring in either the\\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\\n     * clients with the token type ID.\\n     *\\n     * For example, the `https://token-cdn-domain/\\\\{id\\\\}.json` URI would be\\n     * interpreted by clients as\\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\\n     * for token type ID 0x4cce0.\\n     *\\n     * See {uri}.\\n     *\\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\\n     * this function emits no events.\\n     */\\n    function _setURI(string memory newuri) internal virtual {\\n        _uri = newuri;\\n    }\\n\\n    /**\\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _mint(\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _balances[id][to] += amount;\\n        emit TransferSingle(operator, address(0), to, id, amount);\\n\\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _doSafeTransferAcceptanceCheck(operator, address(0), to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _mintBatch(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            _balances[ids[i]][to] += amounts[i];\\n        }\\n\\n        emit TransferBatch(operator, address(0), to, ids, amounts);\\n\\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens of token type `id` from `from`\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `from` must have at least `amount` tokens of token type `id`.\\n     */\\n    function _burn(\\n        address from,\\n        uint256 id,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n\\n        emit TransferSingle(operator, from, address(0), id, amount);\\n\\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     */\\n    function _burnBatch(\\n        address from,\\n        uint256[] memory ids,\\n        uint256[] memory amounts\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n        }\\n\\n        emit TransferBatch(operator, from, address(0), ids, amounts);\\n\\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC1155: setting approval status for self\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `ids` and `amounts` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `id` and `amount` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    function _doSafeTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\\n                if (response != IERC1155Receiver.onERC1155Received.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non-ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _doSafeBatchTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\\n                bytes4 response\\n            ) {\\n                if (response != IERC1155Receiver.onERC1155BatchReceived.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non-ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\\n        uint256[] memory array = new uint256[](1);\\n        array[0] = element;\\n\\n        return array;\\n    }\\n}\\n\\n// File: @openzeppelin/contracts/token/ERC1155/extensions/ERC1155URIStorage.sol\\n\\n\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC1155/extensions/ERC1155URIStorage.sol)\\n\\npragma solidity ^0.8.0;\\n\\n\\n\\n/**\\n * @dev ERC1155 token with storage based token URI management.\\n * Inspired by the ERC721URIStorage extension\\n *\\n * _Available since v4.6._\\n */\\nabstract contract ERC1155URIStorage is ERC1155 {\\n    using Strings for uint256;\\n\\n    // Optional base URI\\n    string private _baseURI = \\\"\\\";\\n\\n    // Optional mapping for token URIs\\n    mapping(uint256 => string) private _tokenURIs;\\n\\n    /**\\n     * @dev See {IERC1155MetadataURI-uri}.\\n     *\\n     * This implementation returns the concatenation of the `_baseURI`\\n     * and the token-specific uri if the latter is set\\n     *\\n     * This enables the following behaviors:\\n     *\\n     * - if `_tokenURIs[tokenId]` is set, then the result is the concatenation\\n     *   of `_baseURI` and `_tokenURIs[tokenId]` (keep in mind that `_baseURI`\\n     *   is empty per default);\\n     *\\n     * - if `_tokenURIs[tokenId]` is NOT set then we fallback to `super.uri()`\\n     *   which in most cases will contain `ERC1155._uri`;\\n     *\\n     * - if `_tokenURIs[tokenId]` is NOT set, and if the parents do not have a\\n     *   uri value set, then the result is empty.\\n     */\\n    function uri(uint256 tokenId) public view virtual override returns (string memory) {\\n        string memory tokenURI = _tokenURIs[tokenId];\\n\\n        // If token URI is set, concatenate base URI and tokenURI (via abi.encodePacked).\\n        return bytes(tokenURI).length > 0 ? string(abi.encodePacked(_baseURI, tokenURI)) : super.uri(tokenId);\\n    }\\n\\n    /**\\n     * @dev Sets `tokenURI` as the tokenURI of `tokenId`.\\n     */\\n    function _setURI(uint256 tokenId, string memory tokenURI) internal virtual {\\n        _tokenURIs[tokenId] = tokenURI;\\n        emit URI(uri(tokenId), tokenId);\\n    }\\n\\n    /**\\n     * @dev Sets `baseURI` as the `_baseURI` for all tokens\\n     */\\n    function _setBaseURI(string memory baseURI) internal virtual {\\n        _baseURI = baseURI;\\n    }\\n}\\n\\n// File: contracts/IERC1155Minter.sol\\n\\n\\npragma solidity 0.8.5;\\n\\n\\ninterface IERC1155Minter is IERC1155 {\\n    /**\\n     * @dev Sets the address of media contract as the platform that can call functions in this contract\\n     *\\n     * Requirements:\\n     *\\n     * - The origin caller of this function must be `owner` i.e. the owner or deployer of this smart contract.\\n     * - `nftPlaform` cannot be the zero address.\\n     * - `platform` must not have been initialised. This should be zero address. Therefore this function can be called only once.\\n     */\\n    function setPlatform(address nftPlatform) external;\\n\\n    /**\\n     * @dev Interface function for public variable tokenId which returns the token ID of last token minted.\\n     */\\n    function tokenId() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the address of creator of the given token `id`.\\n     */\\n    function creators(uint256 id) external view returns (address);\\n\\n    /**\\n     * @dev Returns the boolean if the given address of `creator` is the creator of the given token `id`.\\n     */\\n    function checkCreator(uint256 id, address creator)\\n        external\\n        view\\n        returns (bool);\\n\\n    /**\\n     * @dev Mints new tokens.\\n     *      quantity `amount` of a token ID are minted by `creator` with the token URI `tokenUri`.\\n     */\\n    function mint(\\n        address creator,\\n        uint256 amount,\\n        string calldata tokenUri\\n    ) external;\\n\\n    /**\\n     * @dev Burns already minted tokens.\\n     *\\n     * Requirements:\\n     *\\n     * - caller must have quantity of token `id` more or equal to `amount`.\\n     */\\n    function burn(uint256 id, uint256 amount) external;\\n\\n    /**\\n     * @dev approve token for transfer\\n     *\\n     * Requirements:\\n     *\\n     * - caller must be media contract\\n     */\\n     function approveToken(address from, address to, bool approved) external;\\n\\n}\\n\\n// File: contracts/ERC1155Minter.sol\\n\\n\\npragma solidity 0.8.5;\\n\\n\\n\\n\\ncontract ERC1155Minter is IERC1155Minter, ERC1155URIStorage, Ownable {\\n    //Address of admin of the contract.\\n    address public admin;\\n    //Name of the ERC1155 tokens collection.\\n    string public name;\\n    //Symbol of the ERC1155 tokens collection.\\n    string public symbol;\\n\\n    //Token ID of the last token minted in the contract.\\n    uint256 private _tokenId;\\n    //Address of the media contract.\\n    address private _platform;\\n\\n    //Token ID=>Creator Address\\n    mapping(uint256 => address) private _creators;\\n\\n    constructor(string memory _name, string memory _symbol) ERC1155(\\\"\\\") {\\n        name = _name;\\n        symbol = _symbol;\\n        admin = tx.origin;\\n    }\\n\\n\\n    modifier onlyPlatform() {\\n        require(\\n            msg.sender == _platform,\\n            \\\"ERC1155Minter: can only be called from platform\\\"\\n        );\\n        _;\\n    }\\n\\n    function setPlatform(address nftPlatform) external override {\\n        require(\\n            tx.origin == admin,\\n            \\\"ERC1155Minter: only admin can set platform\\\"\\n        );\\n        require(\\n            nftPlatform != address(0),\\n            \\\"ERC1155Minter: invalid platform address\\\"\\n        );\\n        require(\\n            _platform == address(0),\\n            \\\"ERC1155Minter: platform already initialised\\\"\\n        );\\n        _platform = nftPlatform;\\n    }\\n\\n    function tokenId() external view override onlyPlatform returns (uint256) {\\n        return _tokenId;\\n    }\\n\\n    function creators(uint256 id)\\n        external\\n        view\\n        override\\n        onlyPlatform\\n        returns (address)\\n    {\\n        return _creators[id];\\n    }\\n\\n    function checkCreator(uint256 id, address creator)\\n        external\\n        view\\n        override\\n        onlyPlatform\\n        returns (bool)\\n    {\\n        return creator == _creators[id];\\n    }\\n\\n    function mint(\\n        address creator,\\n        uint256 amount,\\n        string calldata tokenUri\\n    ) external override onlyPlatform {\\n        _tokenId++;\\n        _mint(creator, _tokenId, amount, \\\"\\\");\\n        _creators[_tokenId] = creator;\\n        _setURI(_tokenId, tokenUri);\\n    }\\n\\n    function burn(uint256 id, uint256 amount) external override {\\n        require(\\n            amount <= balanceOf(msg.sender, id),\\n            \\\"ERC1155Minter: insufficient amount\\\"\\n        );\\n        _burn(msg.sender, id, amount);\\n    }\\n\\n    function approveToken(address from, address to, bool approved) external override onlyPlatform {\\n        _setApprovalForAll(from, to, approved);\\n    }\\n}\\n\\n// File: @openzeppelin/contracts/token/ERC721/IERC721.sol\\n\\n\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\\n// File: @openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\\n\\n\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\\n// File: @openzeppelin/contracts/token/ERC721/ERC721.sol\\n\\n\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\n\\n\\n\\n\\n\\n\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _ownerOf(tokenId);\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner or approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n     */\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        return _owners[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _ownerOf(tokenId) != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId, 1);\\n\\n        // Check that tokenId was not minted by `_beforeTokenTransfer` hook\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        unchecked {\\n            // Will not overflow unless all 2**256 token ids are minted to the same owner.\\n            // Given that tokens are minted one by one, it is impossible in practice that\\n            // this ever happens. Might change if we allow batch minting.\\n            // The ERC fails to describe this case.\\n            _balances[to] += 1;\\n        }\\n\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId, 1);\\n\\n        // Update ownership in case tokenId was transferred by `_beforeTokenTransfer` hook\\n        owner = ERC721.ownerOf(tokenId);\\n\\n        // Clear approvals\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // Cannot overflow, as that would require more tokens to be burned/transferred\\n            // out than the owner initially received through minting and transferring in.\\n            _balances[owner] -= 1;\\n        }\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId, 1);\\n\\n        // Check that tokenId was not transferred by `_beforeTokenTransfer` hook\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n\\n        // Clear approvals from the previous owner\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // `_balances[from]` cannot overflow for the same reason as described in `_burn`:\\n            // `from`'s balance is the number of token held, which is at least one before the current\\n            // transfer.\\n            // `_balances[to]` could overflow in the conditions described in `_mint`. That would require\\n            // all 2**256 token ids to be minted, which in practice is impossible.\\n            _balances[from] -= 1;\\n            _balances[to] += 1;\\n        }\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.\\n     * - When `from` is zero, the tokens will be minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256, /* firstTokenId */\\n        uint256 batchSize\\n    ) internal virtual {\\n        if (batchSize > 1) {\\n            if (from != address(0)) {\\n                _balances[from] -= batchSize;\\n            }\\n            if (to != address(0)) {\\n                _balances[to] += batchSize;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.\\n     * - When `from` is zero, the tokens were minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens were burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 firstTokenId,\\n        uint256 batchSize\\n    ) internal virtual {}\\n}\\n\\n// File: @openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\\n\\n\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/extensions/ERC721URIStorage.sol)\\n\\npragma solidity ^0.8.0;\\n\\n\\n/**\\n * @dev ERC721 token with storage based token URI management.\\n */\\nabstract contract ERC721URIStorage is ERC721 {\\n    using Strings for uint256;\\n\\n    // Optional mapping for token URIs\\n    mapping(uint256 => string) private _tokenURIs;\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory _tokenURI = _tokenURIs[tokenId];\\n        string memory base = _baseURI();\\n\\n        // If there is no base URI, return the token URI.\\n        if (bytes(base).length == 0) {\\n            return _tokenURI;\\n        }\\n        // If both are set, concatenate the baseURI and tokenURI (via abi.encodePacked).\\n        if (bytes(_tokenURI).length > 0) {\\n            return string(abi.encodePacked(base, _tokenURI));\\n        }\\n\\n        return super.tokenURI(tokenId);\\n    }\\n\\n    /**\\n     * @dev Sets `_tokenURI` as the tokenURI of `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {\\n        require(_exists(tokenId), \\\"ERC721URIStorage: URI set of nonexistent token\\\");\\n        _tokenURIs[tokenId] = _tokenURI;\\n    }\\n\\n    /**\\n     * @dev See {ERC721-_burn}. This override additionally checks to see if a\\n     * token-specific URI was set for the token, and if so, it deletes the token URI from\\n     * the storage mapping.\\n     */\\n    function _burn(uint256 tokenId) internal virtual override {\\n        super._burn(tokenId);\\n\\n        if (bytes(_tokenURIs[tokenId]).length != 0) {\\n            delete _tokenURIs[tokenId];\\n        }\\n    }\\n}\\n\\n// File: contracts/IERC721Minter.sol\\n\\n\\npragma solidity 0.8.5;\\n\\n\\ninterface IERC721Minter is IERC721 {\\n    /**\\n     * @dev Sets the address of media contract as the platform that can call functions in this contract\\n     *\\n     * Requirements:\\n     *\\n     * - The origin caller of this function must be `owner` i.e. the owner or deployer of this smart contract.\\n     * - `nftPlaform` cannot be the zero address.\\n     * - `platform` must not have been initialised. This should be zero address. Therefore this function can be called only once.\\n     */\\n    function setPlatform(address nftPlatform) external;\\n\\n    /**\\n     * @dev Interface function for public variable tokenId which returns the token ID of last token minted.\\n     */\\n    function tokenId() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the address of creator of the given token `id`.\\n     */\\n    function creators(uint256 id) external view returns (address);\\n\\n    /**\\n     * @dev Returns the boolean if the given address of `creator` is the creator of the given token `id`.\\n     */\\n    function checkCreator(uint256 id, address creator)\\n        external\\n        view\\n        returns (bool);\\n\\n    /**\\n     * @dev Returns if token `id` exists or not.\\n     */\\n    function exists(uint256 id) external view returns (bool);\\n\\n    /**\\n     * @dev Mints new tokens.\\n     *      A new unique token is minted by `creator` with the token URI `tokenUri`.\\n     */\\n    function mint(address creator, string calldata tokenUri) external;\\n\\n    /**\\n     * @dev Burns already minted tokens.\\n     *\\n     * Requirements:\\n     *\\n     * - Token `id` must exist.\\n     * - The caller must be the owner of the token `id`.\\n     */\\n    function burn(uint256 id) external;\\n\\n       /**\\n     * @dev approve token for transfer.\\n     *\\n     * Requirements:\\n     *\\n     * - Token `id` must exist.\\n     * - The caller must be the media contract.\\n     */\\n\\n    function approveToken(address to, uint256 id) external;\\n}\\n\\n// File: contracts/ERC721Minter.sol\\n\\n\\npragma solidity 0.8.5;\\n\\n\\n\\n\\ncontract ERC721Minter is IERC721Minter, ERC721URIStorage, Ownable {\\n    //Last token id minted in this contract.\\n    uint256 private _tokenId;\\n    //Address of the media contract.\\n    address private _platform;\\n    //Address of contract admin.\\n    address public admin;\\n\\n    //Token ID=>Creator Address\\n    mapping(uint256 => address) private _creators;\\n\\n    constructor(string memory name, string memory symbol) ERC721(name, symbol) {\\n        admin = tx.origin;\\n    }\\n\\n    modifier onlyPlatform() {\\n        require(\\n            msg.sender == _platform,\\n            \\\"ERC721Minter: can only be called from platform\\\"\\n        );\\n        _;\\n    }\\n\\n    function setPlatform(address nftPlatform) external override {\\n        require(\\n            _platform == address(0),\\n            \\\"ERC721Minter: platform already initialised\\\"\\n        );\\n        require(\\n            tx.origin == admin,\\n            \\\"ERC721Minter: only admin can set platform\\\"\\n        );\\n        require(\\n            nftPlatform != address(0),\\n            \\\"ERC721Minter: invalid platform address\\\"\\n        );\\n        _platform = nftPlatform;\\n    }\\n\\n    function tokenId() external view override onlyPlatform returns (uint256) {\\n        return _tokenId;\\n    }\\n\\n    function creators(uint256 id)\\n        external\\n        view\\n        override\\n        onlyPlatform\\n        returns (address)\\n    {\\n        return _creators[id];\\n    }\\n\\n    function checkCreator(uint256 id, address creator)\\n        external\\n        view\\n        override\\n        onlyPlatform\\n        returns (bool)\\n    {\\n        return creator == _creators[id];\\n    }\\n\\n    function exists(uint256 id)\\n        external\\n        view\\n        override\\n        onlyPlatform\\n        returns (bool)\\n    {\\n        return _exists(id);\\n    }\\n\\n    function mint(address creator, string calldata tokenUri)\\n        external\\n        override\\n        onlyPlatform\\n    {\\n        _tokenId++;\\n        _safeMint(creator, _tokenId);\\n        _creators[_tokenId] = creator;\\n        _setTokenURI(_tokenId, tokenUri);\\n    }\\n\\n    function burn(uint256 id) external override {\\n        _requireMinted(id);\\n        require(\\n            msg.sender == ownerOf(id),\\n            \\\"ERC721Minter: Only Owner can burn the token\\\"\\n        );\\n        _burn(id);\\n    }\\n    \\n    function approveToken(address to, uint256 id) external override onlyPlatform{\\n        _approve(to,id);\\n    }\\n}\\n\\n// File: contracts/Collections.sol\\n\\n\\npragma solidity 0.8.5;\\n\\n\\n\\n\\ncontract Collections is  Ownable {\\n    //Address of the media contract\\n    address private _platform;\\n\\n    //TokenContractAddress=>bool\\n    mapping(address => bool) public isDeployedMinters;\\n\\n    constructor() { \\n    }\\n\\n    modifier onlyPlatform() {\\n        require(\\n            msg.sender == _platform,\\n            \\\"Collections: can only be called from platform\\\"\\n        );\\n        _;\\n    }\\n\\n    function setPlatform(address nftPlatform) external {\\n        require(\\n            _platform == address(0),\\n            \\\"Collections: platform already initialised\\\"\\n        );\\n        require(tx.origin == owner(), \\\"Collections: only owner can set platform\\\");\\n        require(\\n            nftPlatform != address(0),\\n            \\\"Collections: invalid platform address\\\"\\n        );\\n        _platform = nftPlatform;\\n    }\\n\\n    function createERC721(string memory name, string memory symbol)\\n        external\\n        onlyPlatform\\n        returns (address)\\n    {\\n        ERC721Minter newERC721Minter = new ERC721Minter(name, symbol);\\n        ERC721Minter(newERC721Minter).setPlatform(_platform);\\n        isDeployedMinters[address(newERC721Minter)] = true;\\n        return address(newERC721Minter);\\n    }\\n\\n    function createERC1155(string memory name, string memory symbol)\\n        external\\n        onlyPlatform\\n        returns (address)\\n    {\\n        ERC1155Minter newERC1155Minter = new ERC1155Minter(name, symbol);\\n        ERC1155Minter(newERC1155Minter).setPlatform(_platform);\\n        isDeployedMinters[address(newERC1155Minter)] = true;\\n        return address(newERC1155Minter);\\n    }\\n\\n    function checkDeployedMinters(address tokenAddress)\\n        public\\n        view\\n        onlyPlatform\\n        returns (bool)\\n    {\\n        return isDeployedMinters[tokenAddress];\\n    }\\n}\\n\\n// File: contracts/Media.sol\\n\\n\\npragma solidity 0.8.5;\\n\\n\\n\\n\\n\\n\\n\\ncontract Media is IMarket, Ownable {\\n    //Enum for choosing what to do with the tokens after minting.\\n    enum AfterMint {\\n        AUCTION,\\n        FIXED_SALE,\\n        ON_HOLD,\\n        TIMED_AUCTION\\n    }\\n\\n    //Address of the market contract.\\n    address payable private _marketAddress;\\n    //Address of the collection creation contract.\\n    address private _collectionsAddress;\\n    // address private _dropsAddress;\\n    //Address of the nominated owner. This address is nominated by the current contract owner to transfer ownership to.\\n    address private _ownerNominee;\\n\\n    //Address of the initially deployed ERC721Minter contract.\\n    address public immutable defaultERC721Address;\\n    //Address of the initially deployed ERC1155Minter contract.\\n    address public immutable defaultERC1155Address;\\n\\n    //URI string=>Boolean\\n    mapping(string => bool) private _uriExists;\\n\\n    constructor(address collections, address market) {\\n\\n        _marketAddress = payable(market);\\n        _collectionsAddress = collections;\\n\\n        Market(_marketAddress).setPlatform(address(this));\\n        Collections(_collectionsAddress).setPlatform(address(this));\\n\\n        defaultERC721Address = Collections(_collectionsAddress).createERC721(\\n            \\\"YUDIZ\\\",\\n            \\\"YIZ\\\"\\n        );\\n        defaultERC1155Address = Collections(_collectionsAddress).createERC1155(\\n            \\\"YUDIZ\\\",\\n            \\\"YIZ\\\"\\n        );\\n    }\\n\\n\\n    /**\\n     * @dev Owner of the smart contract nominates another address to transfer ownership to.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller of this function must be `owner` i.e. the owner of this smart contract.\\n     * - `nominee` cannot be the zero address.\\n     */\\n    function nominateOwner(address nominee) external onlyOwner {\\n        require(nominee != address(0), \\\"Media: invalid address\\\");\\n        _ownerNominee = nominee;\\n    }\\n\\n    /**\\n     * @dev Crea.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller of this function must be `_ownerNominee` i.e. the address nominated to be the\\n     *   owner of this smart contract.\\n     */\\n    function createNewCollection(\\n        bool isFungible,\\n        string calldata name,\\n        string calldata symbol\\n    ) external returns (address) {\\n        require(bytes(name).length > 0, \\\"Media: name cannot be empty\\\");\\n        require(bytes(symbol).length > 0, \\\"Media: symbol cannot be empty\\\");\\n        if (isFungible) {\\n            return Collections(_collectionsAddress).createERC1155(name, symbol);\\n        } else {\\n            return Collections(_collectionsAddress).createERC721(name, symbol);\\n        }\\n    }\\n\\n    function mintToken(\\n        address tokenAddress,\\n        string memory tokenUri,\\n        uint256 supply,\\n        address[] memory collaborator,\\n        uint256[] memory percentage,\\n        uint256 royalty,\\n        uint256 price,\\n        AfterMint afterMint,\\n        uint256 startTime,\\n        uint256 endTime\\n    ) external {\\n        require(supply != 0, \\\"Media: supply cannot be zero\\\");\\n        require(\\n            !_uriExists[tokenUri],\\n            \\\"Media: token already exists with the given URI\\\"\\n        );\\n        require(\\n            collaborator.length == percentage.length,\\n            \\\"Media: array length mismatch\\\"\\n        );\\n        uint256 tokenId;\\n        if (IERC1155(tokenAddress).supportsInterface(0xd9b67a26)) {\\n            IERC1155Minter(tokenAddress).mint(msg.sender, supply, tokenUri);\\n            tokenId = IERC1155Minter(tokenAddress).tokenId();\\n            IERC1155Minter(tokenAddress).approveToken(\\n                msg.sender,\\n                address(this),\\n                true\\n            );\\n        } else if (IERC721(tokenAddress).supportsInterface(0x80ac58cd)) {\\n            require(\\n                supply == 1,\\n                \\\"Media: only one erc721 non-fungible token can be minted\\\"\\n            );\\n            IERC721Minter(tokenAddress).mint(msg.sender, tokenUri);\\n            tokenId = IERC721Minter(tokenAddress).tokenId();\\n            IERC721Minter(tokenAddress).approveToken(address(this), tokenId);\\n        } else {\\n            revert(\\\"Media: invalid token address for minting\\\");\\n        }\\n        Market(_marketAddress).setCollaborators(\\n            tokenAddress,\\n            tokenId,\\n            collaborator,\\n            percentage\\n        );\\n        Market(_marketAddress).setRoyaltyPoints(tokenAddress, tokenId, royalty);\\n        _uriExists[tokenUri] = true;\\n\\n        if (afterMint == AfterMint.AUCTION) {\\n            Market(_marketAddress).putOnAuction(\\n                tokenAddress,\\n                tokenId,\\n                msg.sender,\\n                price * supply,\\n                supply,\\n                0,\\n                0\\n            );\\n        } else if (afterMint == AfterMint.FIXED_SALE) {\\n            Market(_marketAddress).listOnSale(\\n                tokenAddress,\\n                tokenId,\\n                msg.sender,\\n                price,\\n                supply\\n            );\\n        } else if (afterMint == AfterMint.TIMED_AUCTION) {\\n            Market(_marketAddress).putOnAuction(\\n                tokenAddress,\\n                tokenId,\\n                msg.sender,\\n                price * supply,\\n                supply,\\n                startTime,\\n                endTime\\n            );\\n        }\\n    }\\n\\n    //TODO: call the approve functions for the tokens put on auction\\n    function putOnSell(\\n        address tokenAddress,\\n        uint256 tokenId,\\n        uint256 price,\\n        uint256 quantityOftoken\\n    ) external {\\n        require(quantityOftoken > 0, \\\"Media: quantity can not be zero or less\\\");\\n        if (IERC721(tokenAddress).supportsInterface(0x80ac58cd)) {\\n            require(\\n                IERC721(tokenAddress).ownerOf(tokenId) == msg.sender,\\n                \\\"Media: you are not the owner\\\"\\n            );\\n            require(\\n                quantityOftoken == 1,\\n                \\\"Media: quantity can not be more than 1\\\"\\n            );\\n            require(\\n                IERC721(tokenAddress).getApproved(tokenId) == address(this) ||\\n                    IERC721(tokenAddress).isApprovedForAll(\\n                        msg.sender,\\n                        address(this)\\n                    ),\\n                \\\"Media: not approved\\\"\\n            );\\n            Market(_marketAddress).listOnSale(\\n                tokenAddress,\\n                tokenId,\\n                msg.sender,\\n                price,\\n                1\\n            );\\n        } else if (IERC1155(tokenAddress).supportsInterface(0xd9b67a26)) {\\n            require(\\n                IERC1155(tokenAddress).balanceOf(msg.sender, tokenId) >=\\n                    quantityOftoken,\\n                \\\"Media: not sufficient tokens available\\\"\\n            );\\n            require(\\n                IERC1155(tokenAddress).isApprovedForAll(\\n                    msg.sender,\\n                    address(this)\\n                ),\\n                \\\"Media: not approved\\\"\\n            );\\n            Market(_marketAddress).listOnSale(\\n                tokenAddress,\\n                tokenId,\\n                msg.sender,\\n                price,\\n                quantityOftoken\\n            );\\n        } else {\\n            revert(\\\"Media: invalid token address\\\");\\n        }\\n    }\\n\\n    function directBuy(\\n        address tokenAddress,\\n        uint256 id,\\n        address from,\\n        uint256 quantity,\\n        Refer memory refer,\\n        bytes memory signature\\n    ) external payable {\\n        address creator;\\n        if (IERC721(tokenAddress).supportsInterface(0x80ac58cd)) {\\n            require(quantity == 1, \\\"Media: quantity can not be more than 1\\\");\\n            if (\\n                Collections(_collectionsAddress).checkDeployedMinters(\\n                    tokenAddress\\n                )\\n            ) creator = IERC721Minter(tokenAddress).creators(id);\\n            Market(_marketAddress).directBuy(\\n                tokenAddress,\\n                id,\\n                creator,\\n                from,\\n                msg.sender,\\n                msg.value,\\n                1,\\n                refer,\\n                signature\\n            );\\n            IERC721(tokenAddress).safeTransferFrom(from, msg.sender, id);\\n        } else if (IERC1155(tokenAddress).supportsInterface(0xd9b67a26)) {\\n            if (\\n                Collections(_collectionsAddress).checkDeployedMinters(\\n                    tokenAddress\\n                )\\n            ) creator = IERC1155Minter(tokenAddress).creators(id);\\n            Market(_marketAddress).directBuy(\\n                tokenAddress,\\n                id,\\n                creator,\\n                from,\\n                msg.sender,\\n                msg.value,\\n                quantity,\\n                refer,\\n                signature\\n            );\\n            IERC1155(tokenAddress).safeTransferFrom(\\n                from,\\n                msg.sender,\\n                id,\\n                quantity,\\n                \\\"\\\"\\n            );\\n        } else {\\n            revert(\\\"Media: invalid token address\\\");\\n        }\\n        _marketAddress.transfer(msg.value);\\n    }\\n\\n    function withdrawSale(address tokenAddress, uint256 id) external {\\n        Market(_marketAddress).withdrawSale(tokenAddress, id, msg.sender);\\n    }\\n\\n    function putOnAuction(\\n        address tokenAddress,\\n        uint256 id,\\n        uint256 price,\\n        uint256 quantity,\\n        uint256 startTime,\\n        uint256 endTime\\n    ) external {\\n        if (IERC721(tokenAddress).supportsInterface(0x80ac58cd)) {\\n            require(\\n                IERC721(tokenAddress).ownerOf(id) == msg.sender,\\n                \\\"Media: you are not the owner\\\"\\n            );\\n            require(quantity == 1, \\\"Media: quantity can not be more than 1\\\");\\n            Market(_marketAddress).putOnAuction(\\n                tokenAddress,\\n                id,\\n                msg.sender,\\n                price,\\n                1,\\n                startTime,\\n                endTime\\n            );\\n        } else if (IERC1155(tokenAddress).supportsInterface(0xd9b67a26)) {\\n            require(\\n                IERC1155(tokenAddress).balanceOf(msg.sender, id) >= quantity,\\n                \\\"Media: not sufficient tokens available\\\"\\n            );\\n            Market(_marketAddress).putOnAuction(\\n                tokenAddress,\\n                id,\\n                msg.sender,\\n                price,\\n                quantity,\\n                startTime,\\n                endTime\\n            );\\n        } else {\\n            revert(\\\"Media: invalid token address address\\\");\\n        }\\n    }\\n\\n    function bid(\\n        address tokenAddress,\\n        uint256 id,\\n        address from\\n    ) external payable {\\n        if (IERC721(tokenAddress).supportsInterface(0x80ac58cd)) {\\n            Market(_marketAddress).bid(\\n                tokenAddress,\\n                id,\\n                from,\\n                msg.sender,\\n                msg.value\\n            );\\n        } else if (IERC1155(tokenAddress).supportsInterface(0xd9b67a26)) {\\n            Market(_marketAddress).bid(\\n                tokenAddress,\\n                id,\\n                from,\\n                msg.sender,\\n                msg.value\\n            );\\n        } else {\\n            revert(\\\"Media: invalid token address\\\");\\n        }\\n        _marketAddress.transfer(msg.value);\\n    }\\n\\n    //TODO: approve media contract for transfer\\n    function acceptBid(\\n        address tokenAddress,\\n        uint256 id,\\n        address bidder,\\n        uint256 quantity,\\n        Refer memory refer,\\n        bytes memory signature\\n    ) external {\\n        address creator;\\n        if (IERC721(tokenAddress).supportsInterface(0x80ac58cd)) {\\n            require(\\n                IERC721(tokenAddress).ownerOf(id) == msg.sender,\\n                \\\"Media: you are not the owner of the token\\\"\\n            );\\n            require(quantity == 1, \\\"Media: quantity can not be more than 1\\\");\\n            if (\\n                Collections(_collectionsAddress).checkDeployedMinters(\\n                    tokenAddress\\n                )\\n            ) creator = IERC721Minter(tokenAddress).creators(id);\\n            Market(_marketAddress).acceptBid(\\n                tokenAddress,\\n                id,\\n                creator,\\n                msg.sender,\\n                bidder,\\n                1,\\n                refer,\\n                signature\\n            );\\n            IERC721(tokenAddress).safeTransferFrom(msg.sender, bidder, id);\\n        } else if (IERC1155(tokenAddress).supportsInterface(0xd9b67a26)) {\\n            require(\\n                IERC1155(tokenAddress).balanceOf(msg.sender, id) >= quantity,\\n                \\\"Media: not sufficient tokens available\\\"\\n            );\\n            if (\\n                Collections(_collectionsAddress).checkDeployedMinters(\\n                    tokenAddress\\n                )\\n            ) creator = IERC1155Minter(tokenAddress).creators(id);\\n            Market(_marketAddress).acceptBid(\\n                tokenAddress,\\n                id,\\n                creator,\\n                msg.sender,\\n                bidder,\\n                quantity,\\n                refer,\\n                signature\\n            );\\n            IERC1155(tokenAddress).safeTransferFrom(\\n                msg.sender,\\n                bidder,\\n                id,\\n                quantity,\\n                \\\"\\\"\\n            );\\n        } else {\\n            revert(\\\"Media: invalid token address\\\");\\n        }\\n    }\\n\\n    function claim(\\n        address tokenAddress,\\n        uint256 id,\\n        address from,\\n        uint256 quantity,\\n        Refer memory refer,\\n        bytes memory signature\\n    ) external {\\n        address creator;\\n        if (IERC721(tokenAddress).supportsInterface(0x80ac58cd)) {\\n            require(\\n                IERC721(tokenAddress).ownerOf(id) == from,\\n                \\\"Media: wrong owner address\\\"\\n            );\\n            require(quantity == 1, \\\"Media: quantity can not be more than 1\\\");\\n            if (\\n                Collections(_collectionsAddress).checkDeployedMinters(\\n                    tokenAddress\\n                )\\n            ) creator = IERC721Minter(tokenAddress).creators(id);\\n            Market(_marketAddress).claim(\\n                tokenAddress,\\n                from,\\n                creator,\\n                msg.sender,\\n                id,\\n                1,\\n                refer,\\n                signature\\n            );\\n            IERC721(tokenAddress).safeTransferFrom(from, msg.sender, id);\\n        } else if (IERC1155(tokenAddress).supportsInterface(0xd9b67a26)) {\\n            require(\\n                IERC1155(tokenAddress).balanceOf(from, id) >= quantity,\\n                \\\"Media: owner does not have sufficient tokens\\\"\\n            );\\n            if (\\n                Collections(_collectionsAddress).checkDeployedMinters(\\n                    tokenAddress\\n                )\\n            ) creator = IERC1155Minter(tokenAddress).creators(id);\\n            Market(_marketAddress).claim(\\n                tokenAddress,\\n                from,\\n                creator,\\n                msg.sender,\\n                id,\\n                quantity,\\n                refer,\\n                signature\\n            );\\n            IERC1155(tokenAddress).safeTransferFrom(\\n                from,\\n                msg.sender,\\n                id,\\n                quantity,\\n                \\\"\\\"\\n            );\\n        } else {\\n            revert(\\\"Media: invalid token address\\\");\\n        }\\n    }\\n\\n    function rejectBid(\\n        address tokenAddress,\\n        uint256 id,\\n        address bidder\\n    ) external {\\n        Market(_marketAddress).removeBid(tokenAddress, msg.sender, id, bidder);\\n    }\\n\\n    function withdrawBid(\\n        address tokenAddress,\\n        uint256 id,\\n        address from\\n    ) external {\\n        Market(_marketAddress).removeBid(tokenAddress, from, id, msg.sender);\\n    }\\n\\n    function withdrawAuction(address tokenAddress, uint256 id) external {\\n        Market(_marketAddress).withdrawAuction(tokenAddress, id, msg.sender);\\n    }\\n\\n    function redeem(uint256 points) external {\\n        Market(_marketAddress).redeemPoints(msg.sender, points);\\n    }\\n\\n    function setCommisionAndReferReward(\\n        uint256 _commission,\\n        uint256 _refereeReward,\\n        uint256 _referalReward\\n    ) external onlyOwner {\\n        Market(_marketAddress).setCommisionAndReferReward(\\n            _commission,\\n            _refereeReward,\\n            _referalReward\\n        );\\n    }\\n\\n    function setRelayer(address _relayer) external onlyOwner {\\n        Market(_marketAddress).setRelayer(_relayer);\\n    }\\n\\n    function viewMyPoints() external view returns (uint256) {\\n        return Market(_marketAddress).viewPoints(msg.sender);\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"checkDeployedMinters\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"name\":\"createERC1155\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"name\":\"createERC721\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isDeployedMinters\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftPlatform\",\"type\":\"address\"}],\"name\":\"setPlatform\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Collections", "CompilerVersion": "v0.8.5+commit.a4f2e591", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}