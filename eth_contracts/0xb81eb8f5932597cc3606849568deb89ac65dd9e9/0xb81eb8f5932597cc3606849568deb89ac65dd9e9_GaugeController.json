{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165CheckerUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/introspection/ERC165Checker.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Library used to query support of an interface declared via {IERC165}.\\n *\\n * Note that these functions return the actual result of the query: they do not\\n * `revert` if an interface is not supported. It is up to the caller to decide\\n * what to do in these cases.\\n */\\nlibrary ERC165CheckerUpgradeable {\\n    // As per the EIP-165 spec, no interface should ever match 0xffffffff\\n    bytes4 private constant _INTERFACE_ID_INVALID = 0xffffffff;\\n\\n    /**\\n     * @dev Returns true if `account` supports the {IERC165} interface.\\n     */\\n    function supportsERC165(address account) internal view returns (bool) {\\n        // Any contract that implements ERC165 must explicitly indicate support of\\n        // InterfaceId_ERC165 and explicitly indicate non-support of InterfaceId_Invalid\\n        return\\n            supportsERC165InterfaceUnchecked(account, type(IERC165Upgradeable).interfaceId) &&\\n            !supportsERC165InterfaceUnchecked(account, _INTERFACE_ID_INVALID);\\n    }\\n\\n    /**\\n     * @dev Returns true if `account` supports the interface defined by\\n     * `interfaceId`. Support for {IERC165} itself is queried automatically.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(address account, bytes4 interfaceId) internal view returns (bool) {\\n        // query support of both ERC165 as per the spec and support of _interfaceId\\n        return supportsERC165(account) && supportsERC165InterfaceUnchecked(account, interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns a boolean array where each value corresponds to the\\n     * interfaces passed in and whether they're supported or not. This allows\\n     * you to batch check interfaces for a contract where your expectation\\n     * is that some interfaces may not be supported.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function getSupportedInterfaces(\\n        address account,\\n        bytes4[] memory interfaceIds\\n    ) internal view returns (bool[] memory) {\\n        // an array of booleans corresponding to interfaceIds and whether they're supported or not\\n        bool[] memory interfaceIdsSupported = new bool[](interfaceIds.length);\\n\\n        // query support of ERC165 itself\\n        if (supportsERC165(account)) {\\n            // query support of each interface in interfaceIds\\n            for (uint256 i = 0; i < interfaceIds.length; i++) {\\n                interfaceIdsSupported[i] = supportsERC165InterfaceUnchecked(account, interfaceIds[i]);\\n            }\\n        }\\n\\n        return interfaceIdsSupported;\\n    }\\n\\n    /**\\n     * @dev Returns true if `account` supports all the interfaces defined in\\n     * `interfaceIds`. Support for {IERC165} itself is queried automatically.\\n     *\\n     * Batch-querying can lead to gas savings by skipping repeated checks for\\n     * {IERC165} support.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     */\\n    function supportsAllInterfaces(address account, bytes4[] memory interfaceIds) internal view returns (bool) {\\n        // query support of ERC165 itself\\n        if (!supportsERC165(account)) {\\n            return false;\\n        }\\n\\n        // query support of each interface in interfaceIds\\n        for (uint256 i = 0; i < interfaceIds.length; i++) {\\n            if (!supportsERC165InterfaceUnchecked(account, interfaceIds[i])) {\\n                return false;\\n            }\\n        }\\n\\n        // all interfaces supported\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Query if a contract implements an interface, does not check ERC165 support\\n     * @param account The address of the contract to query for support of an interface\\n     * @param interfaceId The interface identifier, as specified in ERC-165\\n     * @return true if the contract at account indicates support of the interface with\\n     * identifier interfaceId, false otherwise\\n     * @dev Assumes that account contains a contract that supports ERC165, otherwise\\n     * the behavior of this method is undefined. This precondition can be checked\\n     * with {supportsERC165}.\\n     *\\n     * Some precompiled contracts will falsely indicate support for a given interface, so caution\\n     * should be exercised when using this function.\\n     *\\n     * Interface identification is specified in ERC-165.\\n     */\\n    function supportsERC165InterfaceUnchecked(address account, bytes4 interfaceId) internal view returns (bool) {\\n        // prepare call\\n        bytes memory encodedParams = abi.encodeWithSelector(IERC165Upgradeable.supportsInterface.selector, interfaceId);\\n\\n        // perform static call\\n        bool success;\\n        uint256 returnSize;\\n        uint256 returnValue;\\n        assembly {\\n            success := staticcall(30000, account, add(encodedParams, 0x20), mload(encodedParams), 0x00, 0x20)\\n            returnSize := returndatasize()\\n            returnValue := mload(0x00)\\n        }\\n\\n        return success && returnSize >= 0x20 && returnValue > 0;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IAddressProvider.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: Unlicense\\npragma solidity 0.8.19;\\n\\ninterface IAddressProvider {\\n    function setLendingMarket(address market) external;\\n\\n    function getLendingMarket() external view returns (address);\\n\\n    function setTradingPoolFactory(address tradingPoolFactory) external;\\n\\n    function getTradingPoolFactory() external view returns (address);\\n\\n    function setSwapRouter(address swapRouter) external;\\n\\n    function getSwapRouter() external view returns (address);\\n\\n    function setGaugeController(address gaugeController) external;\\n\\n    function getGaugeController() external view returns (address);\\n\\n    function setLoanCenter(address loancenter) external;\\n\\n    function getLoanCenter() external view returns (address);\\n\\n    function setVotingEscrow(address nativeTokenVault) external;\\n\\n    function getVotingEscrow() external view returns (address);\\n\\n    function setNativeToken(address nativeToken) external;\\n\\n    function getNativeToken() external view returns (address);\\n\\n    function getNativeTokenVesting() external view returns (address);\\n\\n    function setInterestRate(address interestRate) external;\\n\\n    function getInterestRate() external view returns (address);\\n\\n    function setNFTOracle(address nftOracle) external;\\n\\n    function getNFTOracle() external view returns (address);\\n\\n    function setTokenOracle(address tokenOracle) external;\\n\\n    function getTokenOracle() external view returns (address);\\n\\n    function setFeeDistributor(address feeDistributor) external;\\n\\n    function getFeeDistributor() external view returns (address);\\n\\n    function setGenesisNFT(address genesisNFT) external;\\n\\n    function getGenesisNFT() external view returns (address);\\n\\n    function setWETH(address weth) external;\\n\\n    function getWETH() external view returns (address);\\n\\n    function setBribes(address bribes) external;\\n\\n    function getBribes() external view returns (address);\\n\\n    function setLiquidityPairMetadata(address liquidityPairMetadata) external;\\n\\n    function getLiquidityPairMetadata() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IGauge.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: Unlicense\\npragma solidity 0.8.19;\\n\\ninterface IGauge {\\n    event Claim(address indexed user, uint256 amount);\\n\\n    function getLPToken() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IGaugeController.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: Unlicense\\npragma solidity 0.8.19;\\n\\nimport {DataTypes} from \\\"../libraries/types/DataTypes.sol\\\";\\n\\ninterface IGaugeController {\\n    event Vote(\\n        address indexed user,\\n        uint256 indexed tokenId,\\n        address indexed gauge,\\n        uint256 weight\\n    );\\n\\n    event AddGauge(address indexed gauge, address indexed liquidityPool);\\n\\n    event RemoveGauge(address indexed gauge, address indexed liquidityPool);\\n\\n    function isGauge(address gauge) external view returns (bool);\\n\\n    function getLockVoteRatio(uint256 tokenId) external view returns (uint256);\\n\\n    function getGaugeWeightAt(\\n        address gauge,\\n        uint256 epoch\\n    ) external returns (uint256);\\n\\n    function getGaugeRewards(\\n        address gauge,\\n        uint256 epoch\\n    ) external returns (uint256 rewards);\\n\\n    function getEpochRewards(uint256 epoch) external returns (uint256 rewards);\\n\\n    function getLockVotePointForGauge(\\n        uint256 tokenId,\\n        address gauge\\n    ) external view returns (DataTypes.Point memory);\\n\\n    function getLPMaturityPeriod() external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IVotingEscrow.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: Unlicense\\npragma solidity 0.8.19;\\n\\nimport {DataTypes} from \\\"../libraries/types/DataTypes.sol\\\";\\nimport {IAddressProvider} from \\\"../interfaces/IAddressProvider.sol\\\";\\n\\ninterface IVotingEscrow {\\n    event CreateLock(\\n        address indexed receiver,\\n        uint256 indexed tokenId,\\n        uint256 amount,\\n        uint256 unlockTime\\n    );\\n    event IncreaseAmount(uint256 indexed tokenId, uint256 amount);\\n\\n    event IncreaseUnlockTime(uint256 indexed tokenId, uint256 unlockTime);\\n\\n    event Withdraw(uint256 indexed tokenId);\\n\\n    event ClaimRebates(\\n        address indexed receiver,\\n        uint256 indexed tokenId,\\n        uint256 amount\\n    );\\n\\n    function getLockHistoryLength(\\n        uint256 tokenId\\n    ) external view returns (uint256);\\n\\n    function getEpochPeriod() external pure returns (uint256);\\n\\n    function getEpoch(uint256 timestamp) external view returns (uint256);\\n\\n    function getEpochTimestamp(uint256 epoch_) external returns (uint256);\\n\\n    function writeTotalWeightHistory() external;\\n\\n    function getLockHistoryPoint(\\n        uint256 tokenId,\\n        uint256 index\\n    ) external view returns (DataTypes.Point memory);\\n\\n    function getLockedRatioAt(uint256 _epoch) external returns (uint256);\\n\\n    function getTotalWeightAt(uint256 epoch_) external returns (uint256);\\n\\n    function getTotalWeight() external returns (uint256);\\n\\n    function getUserWeight(address user) external view returns (uint256);\\n\\n    function createLock(\\n        address receiver,\\n        uint256 amount,\\n        uint256 unlockTime\\n    ) external;\\n\\n    function getLock(\\n        uint256 tokenId\\n    ) external view returns (DataTypes.LockedBalance memory);\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/types/DataTypes.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: Unlicense\\npragma solidity 0.8.19;\\n\\nimport {Trustus} from \\\"../../protocol/Trustus/Trustus.sol\\\";\\n\\n/// @title DataTypes library\\n/// @author leNFT\\n/// @notice Defines the data types used in the protocol\\n/// @dev Library with the data types used in the protocol\\nlibrary DataTypes {\\n    /// @notice Struct to store the price data of an array of assets from the same collection\\n    /// @param collection The address of the collection\\n    /// @param tokenIds The tokenIds of the assets\\n    /// @param amount The price of the assets\\n    struct AssetsPrice {\\n        address collection;\\n        uint256[] tokenIds;\\n        uint256 amount;\\n    }\\n\\n    /// @notice Struct to store the risk parameters for a collection\\n    /// @param maxLTV The maximum loan to value ratio\\n    /// @param liquidationThreshold The threshold at which the loan can be liquidated\\n    struct CollectionRiskParameters {\\n        uint16 maxLTV;\\n        uint16 liquidationThreshold;\\n    }\\n\\n    /// @notice Enum of the liquidity pair types\\n    /// @dev Trade: Can buy and sell and price can increase and decrease\\n    /// @dev TradeUp: Can buy and sell and price can only increase\\n    /// @dev TradeDown: Can buy and sell and price can only decrease\\n    /// @dev Buy: Can only buy (price will only decrease)\\n    /// @dev Sell: Can only sell (price will only increase)\\n    enum LPType {\\n        Trade,\\n        TradeUp,\\n        TradeDown,\\n        Buy,\\n        Sell\\n    }\\n\\n    /// @notice Struct to store the liquidity pair data\\n    /// @param nftIds The tokenIds of the assets\\n    /// @param tokenAmount The amount of tokens in the liquidity pair\\n    /// @param spotPrice The spot price of the liquidity pair\\n    /// @param curve The address of the curve\\n    /// @param delta The delta of the curve\\n    /// @param fee The fee for the buy/sell trades\\n    /// @param lpType The type of liquidity pair\\n    struct LiquidityPair {\\n        uint256[] nftIds;\\n        uint128 tokenAmount;\\n        uint128 spotPrice;\\n        uint128 delta;\\n        address curve;\\n        uint16 fee;\\n        LPType lpType;\\n    }\\n\\n    /// @notice Struct serving as a pointer from an NFT to a liquidity pair\\n    /// @param liquidityPair The index of the liquidity pair\\n    /// @param index The index of the NFT in the liquidity pair\\n    struct NftToLp {\\n        uint128 liquidityPair;\\n        uint128 index;\\n    }\\n\\n    /// @notice Struct to store the working balance in gauges\\n    /// @param amount The amount of tokens\\n    /// @param weight The weight of the tokens\\n    /// @param timestamp The timestamp of the update\\n    struct WorkingBalance {\\n        uint128 amount;\\n        uint128 weight;\\n        uint40 timestamp;\\n    }\\n\\n    /// @notice Struct to store the locked balance in the voting escrow\\n    /// @param amount The amount of tokens\\n    /// @param end The timestamp of the end of the lock\\n    struct LockedBalance {\\n        uint128 amount;\\n        uint40 end;\\n    }\\n\\n    /// @notice Struct to store an abstract point in a weight curve\\n    /// @param bias The bias of the point\\n    /// @param slope The slope of the point\\n    /// @param timestamp The timestamp of the point\\n    struct Point {\\n        uint128 bias;\\n        uint128 slope;\\n        uint40 timestamp;\\n    }\\n\\n    /// @notice Enum of all the states a loan can be in\\n    /// @dev State change flow: None -> Active -> Repaid -> Auction -> Liquidated\\n    /// @dev None (Default Value): We need a default that is not 'Active' - this is the zero value\\n    /// @dev Active: The loan has been initialized; funds have been delivered to the borrower and the collateral is held.\\n    /// @dev Repaid: The loan has been repaid; and the collateral has been returned to the borrower.\\n    /// @dev Auctioned: The loan's collateral has been auctioned off and its in the process of being liquidated.\\n    /// @dev Liquidated: The loan's collateral was claimed by the liquidator.\\n    enum LoanState {\\n        None,\\n        Active,\\n        Repaid,\\n        Auctioned,\\n        Liquidated\\n    }\\n\\n    /// @notice Stores the data for a loan\\n    /// @param owner The owner of the loan\\n    /// @param amount The amount borrowed\\n    /// @param nftTokenIds The tokenIds of the NFT collaterals\\n    /// @param nftAsset The address of the NFT asset\\n    /// @param borrowRate The interest rate at which the loan was written\\n    /// @param initTimestamp The timestamp for the initial creation of the loan\\n    /// @param debtTimestamp The timestamp for debt computation\\n    /// @param pool The address of the lending pool associated with the loan\\n    /// @param genesisNFTId The genesis NFT id for the boost (0 if not used)\\n    /// @param state The current state of the loan\\n    struct LoanData {\\n        address owner;\\n        uint256 amount;\\n        uint256[] nftTokenIds;\\n        address nftAsset;\\n        uint16 borrowRate;\\n        uint40 initTimestamp;\\n        uint40 debtTimestamp;\\n        address pool;\\n        uint16 genesisNFTId;\\n        LoanState state;\\n    }\\n\\n    /// @notice Stores the data for a loan auction\\n    /// @param auctioneer The address of the auctioneer (user who first auctioned the loan)\\n    /// @param liquidator The address of the liquidator (user with the highest bid)\\n    /// @param auctionStartTimestamp The timestamp for the start of the auction\\n    /// @param auctionMaxBid The maximum bid for the auction\\n    struct LoanLiquidationData {\\n        address auctioneer;\\n        address liquidator;\\n        uint40 auctionStartTimestamp;\\n        uint256 auctionMaxBid;\\n    }\\n\\n    /// @notice Struct to store mint details for each Genesis NFT\\n    /// @param timestamp The timestamp of the mint\\n    /// @param locktime The locktime of the mint\\n    /// @param lpAmount The amount of LP tokens minted\\n    struct MintDetails {\\n        uint40 timestamp;\\n        uint40 locktime;\\n        uint128 lpAmount;\\n    }\\n\\n    /// @notice Struct to store the parameters for a borrow call\\n    /// @param caller The caller of the borrow function\\n    /// @param onBehalfOf The address of the user on whose behalf the caller is borrowing\\n    /// @param asset The address of the asset being borrowed\\n    /// @param amount The amount of the asset being borrowed\\n    /// @param nftAddress The address of the NFT asset\\n    /// @param nftTokenIds The tokenIds of the NFT collaterals\\n    /// @param genesisNFTId The genesis NFT id for the boost (0 if not used)\\n    /// @param request The request ID for the borrow\\n    /// @param packet The Trustus packet for the borrow\\n    struct BorrowParams {\\n        address caller;\\n        address onBehalfOf;\\n        address asset;\\n        uint256 amount;\\n        address nftAddress;\\n        uint256[] nftTokenIds;\\n        uint256 genesisNFTId;\\n        bytes32 request;\\n        Trustus.TrustusPacket packet;\\n    }\\n\\n    /// @notice Struct to store the parameters for a repay call\\n    /// @param caller The caller of the repay function\\n    /// @param loanId The ID of the loan being repaid\\n    /// @param amount The amount of debt being repaid\\n    struct RepayParams {\\n        address caller;\\n        uint256 loanId;\\n        uint256 amount;\\n    }\\n\\n    /// @notice Struct to store the parameters for a create auction (liquidate) call\\n    /// @param caller The caller of the create auction function\\n    /// @param onBehalfOf The address of the user on whose behalf the caller is liquidating\\n    /// @param loanId The ID of the loan being liquidated\\n    /// @param bid The bid for the auction\\n    /// @param request The request ID for the liquidation\\n    /// @param packet The Trustus packet for the liquidation\\n    struct CreateAuctionParams {\\n        address caller;\\n        address onBehalfOf;\\n        uint256 loanId;\\n        uint256 bid;\\n        bytes32 request;\\n        Trustus.TrustusPacket packet;\\n    }\\n\\n    /// @notice Struct to store the parameters for an auction bid call\\n    /// @param caller The caller of the auction bid function\\n    /// @param onBehalfOf The address of the user on whose behalf the caller is bidding\\n    /// @param loanId The ID of the loan being liquidated\\n    /// @param bid The bid for the auction\\n    struct BidAuctionParams {\\n        address caller;\\n        address onBehalfOf;\\n        uint256 loanId;\\n        uint256 bid;\\n    }\\n\\n    /// @notice Struct to store the parameters for a claim liquidation call\\n    /// @param loanId The ID of the loan whose liquidation is being claimed\\n    struct ClaimLiquidationParams {\\n        uint256 loanId;\\n    }\\n\\n    /// @notice Struct to store the parameters a user's VestingParams\\n    /// @param timestamp The timestamp of the vesting start\\n    /// @param period The vesting period\\n    /// @param cliff The vesting cliff\\n    /// @param amount The amount of tokens to vest\\n    struct VestingParams {\\n        uint256 timestamp;\\n        uint256 period;\\n        uint256 cliff;\\n        uint256 amount;\\n    }\\n\\n    /// @notice Struct to store the parameters for the Genesis NFT balancer pool\\n    /// @param poolId The ID of the balancer pool\\n    /// @param pool The address of the balancer pool\\n    /// @param vault The address of the balancer vault\\n    /// @param queries The address of the balancer queries contract\\n    struct BalancerDetails {\\n        bytes32 poolId;\\n        address pool;\\n        address vault;\\n        address queries;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/utils/PercentageMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.19;\\n\\n/**\\n * @title PercentageMath library\\n * @author Aave\\n * @notice Provides functions to perform percentage calculations\\n * @dev Percentages are defined by default with 2 decimals of precision (100.00). The precision is indicated by PERCENTAGE_FACTOR\\n * @dev Operations are rounded. If a value is >=.5, will be rounded up, otherwise rounded down.\\n **/\\nlibrary PercentageMath {\\n    // Maximum percentage factor (100.00%)\\n\\n    uint256 internal constant PERCENTAGE_FACTOR = 1e4;\\n\\n    // Half percentage factor (50.00%)\\n    uint256 internal constant HALF_PERCENTAGE_FACTOR = 0.5e4;\\n\\n    /**\\n     * @notice Executes a percentage multiplication\\n     * @dev assembly optimized for improved gas savings, see https://twitter.com/transmissions11/status/1451131036377571328\\n     * @param value The value of which the percentage needs to be calculated\\n     * @param percentage The percentage of the value to be calculated\\n     * @return result value percentmul percentage\\n     **/\\n    function percentMul(\\n        uint256 value,\\n        uint256 percentage\\n    ) internal pure returns (uint256 result) {\\n        // to avoid overflow, value <= (type(uint256).max - HALF_PERCENTAGE_FACTOR) / percentage\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            if iszero(\\n                or(\\n                    iszero(percentage),\\n                    iszero(\\n                        gt(\\n                            value,\\n                            div(sub(not(0), HALF_PERCENTAGE_FACTOR), percentage)\\n                        )\\n                    )\\n                )\\n            ) {\\n                revert(0, 0)\\n            }\\n\\n            result := div(\\n                add(mul(value, percentage), HALF_PERCENTAGE_FACTOR),\\n                PERCENTAGE_FACTOR\\n            )\\n        }\\n    }\\n\\n    /**\\n     * @notice Executes a percentage division\\n     * @dev assembly optimized for improved gas savings, see https://twitter.com/transmissions11/status/1451131036377571328\\n     * @param value The value of which the percentage needs to be calculated\\n     * @param percentage The percentage of the value to be calculated\\n     * @return result value percentdiv percentage\\n     **/\\n    function percentDiv(\\n        uint256 value,\\n        uint256 percentage\\n    ) internal pure returns (uint256 result) {\\n        // to avoid overflow, value <= (type(uint256).max - halfPercentage) / PERCENTAGE_FACTOR\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            if or(\\n                iszero(percentage),\\n                iszero(\\n                    iszero(\\n                        gt(\\n                            value,\\n                            div(\\n                                sub(not(0), div(percentage, 2)),\\n                                PERCENTAGE_FACTOR\\n                            )\\n                        )\\n                    )\\n                )\\n            ) {\\n                revert(0, 0)\\n            }\\n\\n            result := div(\\n                add(mul(value, PERCENTAGE_FACTOR), div(percentage, 2)),\\n                percentage\\n            )\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/utils/SafeCast.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.19;\\n\\n/// @title SafeCast library\\n/// @author leNFT\\n/// @notice Casting utilities\\n/// @dev This library is used to safely cast between uint256 and smaller sized unsigned integers\\nlibrary SafeCast {\\n    /// @notice Cast a uint256 to a uint32, revert on overflow\\n    /// @param value The uint256 value to be casted\\n    /// @return The uint32 value casted from uint256\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        require(value <= type(uint16).max, \\\"SC:CAST16_OVERFLOW\\\");\\n        return uint16(value);\\n    }\\n\\n    /// @notice Cast a uint256 to a uint40, revert on overflow\\n    /// @param value The uint256 value to be casted\\n    /// @return The uint40 value casted from uint256\\n    function toUint40(uint256 value) internal pure returns (uint40) {\\n        require(value <= type(uint40).max, \\\"SC:CAST40_OVERFLOW\\\");\\n        return uint40(value);\\n    }\\n\\n    /// @notice Cast a uint256 to a uint64, revert on overflow\\n    /// @param value The uint256 value to be casted\\n    /// @return The uint64 value casted from uint256\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(value <= type(uint64).max, \\\"SC:CAST64_OVERFLOW\\\");\\n        return uint64(value);\\n    }\\n\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        require(value <= type(uint128).max, \\\"SC:CAST128_OVERFLOW\\\");\\n        return uint128(value);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/protocol/Gauges/GaugeController.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: Unlicense\\npragma solidity 0.8.19;\\n\\nimport {OwnableUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport {PercentageMath} from \\\"../../libraries/utils/PercentageMath.sol\\\";\\nimport {DataTypes} from \\\"../../libraries/types/DataTypes.sol\\\";\\nimport {IVotingEscrow} from \\\"../../interfaces/IVotingEscrow.sol\\\";\\nimport {IERC721Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\\\";\\nimport {IGaugeController} from \\\"../../interfaces/IGaugeController.sol\\\";\\nimport {IAddressProvider} from \\\"../../interfaces/IAddressProvider.sol\\\";\\nimport {ERC165CheckerUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165CheckerUpgradeable.sol\\\";\\nimport {IGauge} from \\\"../../interfaces/IGauge.sol\\\";\\nimport {SafeCast} from \\\"../../libraries/utils/SafeCast.sol\\\";\\n\\n/// @title Gauge Controller\\n/// @author leNFT\\n/// @notice Manages the different gauges\\n/// @dev Contract that manages gauge vote weights, total vote weight, user vote power in each gauge, and user vote ratios.\\ncontract GaugeController is OwnableUpgradeable, IGaugeController {\\n    uint256 private constant INFLATION_PERIOD = 52; // 52 epochs (1 year)\\n    uint256 private constant MAX_INFLATION_PERIODS = 8; // Maximum 8 inflation periods (8 years) and then base emissions\\n    uint256 private constant LOADING_PERIOD = 24; // 24 epochs (6 months)\\n    uint256 private constant INITIAL_REWARDS = 28e23; // 2.8 million tokens per epoch\\n\\n    IAddressProvider private immutable _addressProvider;\\n\\n    // Epoch history of gauge vote weight\\n    mapping(address => uint256[]) private _gaugeWeightHistory;\\n    // Last checkpoint for history of gauge vote weight\\n    mapping(address => DataTypes.Point) private _lastGaugeWeigthCheckpoint;\\n    // Slope changes for total weight of each gauge\\n    mapping(address => mapping(uint256 => uint256))\\n        private _gaugeWeightSlopeChanges;\\n    // Epoch history of total vote weight\\n    uint256[] private _totalWeigthHistory;\\n    // Last checkpoint for the total vote weight\\n    DataTypes.Point private _lastWeightCheckpoint;\\n    // Slope changes for total weight\\n    mapping(uint256 => uint256) private _totalWeightSlopeChanges;\\n    // vote ratio being used by each lock (%), smallest tick is 0.01%\\n    mapping(uint256 => uint256) private _lockVoteRatio;\\n    // User vote ratio used by each lock at each gauge (%), smallest tick is 0.01%\\n    mapping(uint256 => mapping(address => uint256)) private _lockGaugeVoteRatio;\\n    // Weight vote power each lock has in each gauge\\n    mapping(uint256 => mapping(address => DataTypes.Point))\\n        private _lockGaugeVotePoint;\\n    mapping(address => bool) private _isGauge;\\n    mapping(address => address) private _liquidityPoolToGauge;\\n    uint256 private _lpMaturityPeriod; // in seconds\\n\\n    using ERC165CheckerUpgradeable for address;\\n\\n    modifier validGauge(address gauge) {\\n        _requireValidGauge(gauge);\\n        _;\\n    }\\n\\n    modifier noFutureEpoch(uint256 epoch) {\\n        _requireNoFutureEpoch(epoch);\\n        _;\\n    }\\n\\n    modifier lockExists(uint256 lockId) {\\n        _requireLockExists(lockId);\\n        _;\\n    }\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor(IAddressProvider addressProvider) {\\n        _addressProvider = addressProvider;\\n        _disableInitializers();\\n    }\\n\\n    /// @notice Initializes the contract by setting up the owner and the addresses provider contract.\\n    /// @param lpMaturityPeriod The maturity period for the LP tokens\\n    function initialize(uint256 lpMaturityPeriod) external initializer {\\n        __Ownable_init();\\n        _lpMaturityPeriod = lpMaturityPeriod;\\n        _totalWeigthHistory.push(0);\\n        _lastWeightCheckpoint = DataTypes.Point(\\n            0,\\n            0,\\n            SafeCast.toUint40(block.timestamp)\\n        );\\n    }\\n\\n    /// @notice Adds a gauge contract to the list of registered gauges.\\n    /// @dev Only the contract owner can call this method.\\n    /// @param gauge Address of the gauge contract to add.\\n    function addGauge(address gauge) external onlyOwner {\\n        // Check if the gauge is already registered\\n        require(!_isGauge[gauge], \\\"GC:AG:GAUGE_ALREADY_ADDED\\\");\\n\\n        // Check if the gauge is a valid gauge\\n        require(\\n            gauge.supportsInterface(type(IGauge).interfaceId),\\n            \\\"GC:AG:INVALID_GAUGE\\\"\\n        );\\n\\n        address liquidityPool = IGauge(gauge).getLPToken();\\n        _liquidityPoolToGauge[liquidityPool] = gauge;\\n        _isGauge[gauge] = true;\\n\\n        emit AddGauge(gauge, liquidityPool);\\n    }\\n\\n    /// @notice Remove a gauge\\n    /// @dev Only the contract owner can call this method.\\n    /// @param gauge The address of the gauge to be removed\\n    function removeGauge(address gauge) external onlyOwner validGauge(gauge) {\\n        address liquidityPool = IGauge(gauge).getLPToken();\\n        if (_liquidityPoolToGauge[liquidityPool] == gauge) {\\n            delete _liquidityPoolToGauge[liquidityPool];\\n        }\\n\\n        delete _isGauge[gauge];\\n\\n        emit RemoveGauge(gauge, liquidityPool);\\n    }\\n\\n    /// @notice Check if a gauge exists (meaning is registered with the gauge controller)\\n    /// @param gauge The address of the gauge to check\\n    /// @return A boolean indicating whether the gauge exists\\n    function isGauge(address gauge) external view override returns (bool) {\\n        return _isGauge[gauge];\\n    }\\n\\n    /// @notice Get the gauge associated with a given liquidity pool\\n    /// @param liquidityPool The address of the liquidity pool to check\\n    /// @return The address of the gauge associated with the liquidity pool\\n    function getGauge(address liquidityPool) external view returns (address) {\\n        return _liquidityPoolToGauge[liquidityPool];\\n    }\\n\\n    /// @notice Get the current weight of a gauge\\n    /// @param gauge The address of the gauge to check\\n    /// @return The current weight of the gauge\\n    function getGaugeWeight(\\n        address gauge\\n    ) external view validGauge(gauge) returns (uint256) {\\n        DataTypes.Point\\n            memory lastGaugeWeightCheckpoint = _lastGaugeWeigthCheckpoint[\\n                gauge\\n            ];\\n\\n        if (\\n            lastGaugeWeightCheckpoint.bias <\\n            lastGaugeWeightCheckpoint.slope *\\n                (block.timestamp - lastGaugeWeightCheckpoint.timestamp)\\n        ) {\\n            return 0;\\n        }\\n\\n        return\\n            lastGaugeWeightCheckpoint.bias -\\n            lastGaugeWeightCheckpoint.slope *\\n            (block.timestamp - lastGaugeWeightCheckpoint.timestamp);\\n    }\\n\\n    /// @notice Get the weight of a gauge at a specific epoch\\n    /// @param gauge The address of the gauge to check\\n    /// @param epoch The epoch for which to retrieve the gauge weight\\n    /// @return The weight of the gauge at the specified epoch\\n    function getGaugeWeightAt(\\n        address gauge,\\n        uint256 epoch\\n    ) public noFutureEpoch(epoch) validGauge(gauge) returns (uint256) {\\n        // Update gauge weight history\\n        writeGaugeWeightHistory(gauge);\\n\\n        return _gaugeWeightHistory[gauge][epoch];\\n    }\\n\\n    /// @notice Get the total weight sum of all gauges\\n    /// @return The total weight sum of all gauges\\n    function getTotalWeight() external view returns (uint256) {\\n        if (\\n            _lastWeightCheckpoint.bias <\\n            _lastWeightCheckpoint.slope *\\n                (block.timestamp - _lastWeightCheckpoint.timestamp)\\n        ) {\\n            return 0;\\n        }\\n\\n        return\\n            _lastWeightCheckpoint.bias -\\n            _lastWeightCheckpoint.slope *\\n            (block.timestamp - _lastWeightCheckpoint.timestamp);\\n    }\\n\\n    /// @notice Get the total weight of all gauges at a specific epoch\\n    /// @param epoch The epoch for which to retrieve the total weight\\n    /// @return The total weight of all gauges at the specified epoch\\n    function getTotalWeightAt(\\n        uint256 epoch\\n    ) public noFutureEpoch(epoch) returns (uint256) {\\n        // Update total weight history\\n        writeTotalWeightHistory();\\n\\n        return _totalWeigthHistory[epoch];\\n    }\\n\\n    /// @notice Get the current used vote power for a given lock.\\n    /// @param tokenId The tokenId of the lock.\\n    /// @return The current used vote power.\\n    function getLockVoteRatio(\\n        uint256 tokenId\\n    ) external view override lockExists(tokenId) returns (uint256) {\\n        return _lockVoteRatio[tokenId];\\n    }\\n\\n    /// @notice  Get the current used vote power for a given user in a specific gauge.\\n    /// @param tokenId The tokenId of the lock.\\n    /// @param gauge The address of the gauge.\\n    /// @return The current used vote power for the given user in the specified gauge.\\n    function getLockVoteRatioForGauge(\\n        uint256 tokenId,\\n        address gauge\\n    ) external view validGauge(gauge) lockExists(tokenId) returns (uint256) {\\n        return _lockGaugeVoteRatio[tokenId][gauge];\\n    }\\n\\n    /// @notice Get the vote point for a lock in a specific gauge.\\n    /// @param tokenId The tokenId of the lock.\\n    /// @param gauge The address of the gauge.\\n    function getLockVotePointForGauge(\\n        uint256 tokenId,\\n        address gauge\\n    )\\n        external\\n        view\\n        validGauge(gauge)\\n        lockExists(tokenId)\\n        returns (DataTypes.Point memory)\\n    {\\n        return _lockGaugeVotePoint[tokenId][gauge];\\n    }\\n\\n    /// @notice Get the vote weight for a user in a specific gauge.\\n    /// @param tokenId The tokenId of the lock.\\n    /// @param gauge The address of the gauge.\\n    /// @return The vote weight for the user in the specified gauge.\\n    function getLockVoteWeightForGauge(\\n        uint256 tokenId,\\n        address gauge\\n    ) external view validGauge(gauge) lockExists(tokenId) returns (uint256) {\\n        if (\\n            _lockGaugeVotePoint[tokenId][gauge].slope *\\n                (block.timestamp -\\n                    _lockGaugeVotePoint[tokenId][gauge].timestamp) >\\n            _lockGaugeVotePoint[tokenId][gauge].bias\\n        ) {\\n            return 0;\\n        }\\n\\n        return\\n            _lockGaugeVotePoint[tokenId][gauge].bias -\\n            _lockGaugeVotePoint[tokenId][gauge].slope *\\n            (block.timestamp - _lockGaugeVotePoint[tokenId][gauge].timestamp);\\n    }\\n\\n    /// @notice Update the total weight history\\n    function writeTotalWeightHistory() public {\\n        // Update last saved weight checkpoint and record weight for epochs\\n        // Will break if is not used for 128 epochs\\n        IVotingEscrow votingEscrow = IVotingEscrow(\\n            _addressProvider.getVotingEscrow()\\n        );\\n        uint256 epochTimestampPointer = votingEscrow.getEpochTimestamp(\\n            _totalWeigthHistory.length\\n        );\\n        uint256 epochPeriod = votingEscrow.getEpochPeriod();\\n\\n        for (uint256 i = 0; i < 2 ** 7; i++) {\\n            if (epochTimestampPointer > block.timestamp) {\\n                break;\\n            }\\n\\n            // Save epoch total weight\\n            uint256 epochTotalWeight = _lastWeightCheckpoint.bias -\\n                (_lastWeightCheckpoint.slope *\\n                    (epochTimestampPointer - _lastWeightCheckpoint.timestamp));\\n            _totalWeigthHistory.push(epochTotalWeight);\\n\\n            // Update last weight checkpoint\\n            _lastWeightCheckpoint.bias = SafeCast.toUint128(epochTotalWeight);\\n            _lastWeightCheckpoint.timestamp = SafeCast.toUint40(\\n                epochTimestampPointer\\n            );\\n            _lastWeightCheckpoint.slope -= SafeCast.toUint128(\\n                _totalWeightSlopeChanges[epochTimestampPointer]\\n            );\\n\\n            //Increase epoch timestamp\\n            epochTimestampPointer += epochPeriod;\\n        }\\n    }\\n\\n    /// @notice Update the weight history of a gauge\\n    /// @param gauge The address of the gauge to update\\n    function writeGaugeWeightHistory(address gauge) public validGauge(gauge) {\\n        IVotingEscrow votingEscrow = IVotingEscrow(\\n            _addressProvider.getVotingEscrow()\\n        );\\n\\n        // If the gauge weights are empty set the weight for the first epoch\\n        if (_gaugeWeightHistory[gauge].length == 0) {\\n            _gaugeWeightHistory[gauge].push(0);\\n            _lastGaugeWeigthCheckpoint[gauge] = DataTypes.Point(\\n                0,\\n                0,\\n                SafeCast.toUint40(votingEscrow.getEpochTimestamp(0))\\n            );\\n        }\\n\\n        // Update last saved weight checkpoint and record weight for epochs\\n        // Will break if is not used for 128 epochs\\n        uint256 epochPeriod = votingEscrow.getEpochPeriod();\\n        uint256 epochTimestampPointer = votingEscrow.getEpochTimestamp(\\n            _gaugeWeightHistory[gauge].length\\n        );\\n\\n        for (uint256 i = 0; i < 2 ** 7; i++) {\\n            //Increase epoch timestamp\\n            if (epochTimestampPointer > block.timestamp) {\\n                break;\\n            }\\n            // Save epoch total weight\\n            uint256 epochGaugeWeight = _lastGaugeWeigthCheckpoint[gauge].bias -\\n                _lastGaugeWeigthCheckpoint[gauge].slope *\\n                (epochTimestampPointer -\\n                    _lastGaugeWeigthCheckpoint[gauge].timestamp);\\n            _gaugeWeightHistory[gauge].push(epochGaugeWeight);\\n\\n            // Update last weight checkpoint\\n            _lastGaugeWeigthCheckpoint[gauge].bias = SafeCast.toUint128(\\n                epochGaugeWeight\\n            );\\n            _lastGaugeWeigthCheckpoint[gauge].timestamp = SafeCast.toUint40(\\n                epochTimestampPointer\\n            );\\n            _lastGaugeWeigthCheckpoint[gauge].slope -= SafeCast.toUint128(\\n                _gaugeWeightSlopeChanges[gauge][epochTimestampPointer]\\n            );\\n\\n            epochTimestampPointer += epochPeriod;\\n        }\\n    }\\n\\n    /// @notice Vote for a gauge\\n    /// @param tokenId The tokenId of the lock.\\n    /// @param gauge The address of the gauge to vote for\\n    /// @param ratio The ratio of the vote power to use\\n    function vote(\\n        uint256 tokenId,\\n        address gauge,\\n        uint256 ratio\\n    ) external lockExists(tokenId) validGauge(gauge) {\\n        //Must be the owner of the lock to use it to vote\\n        IVotingEscrow votingEscrow = IVotingEscrow(\\n            _addressProvider.getVotingEscrow()\\n        );\\n        require(\\n            IERC721Upgradeable(address(votingEscrow)).ownerOf(tokenId) ==\\n                msg.sender,\\n            \\\"GC:V:NOT_LOCK_OWNER\\\"\\n        );\\n\\n        // Get user locked balance\\n        DataTypes.LockedBalance memory lockedBalance = votingEscrow.getLock(\\n            tokenId\\n        );\\n\\n        require(\\n            ratio +\\n                _lockVoteRatio[tokenId] -\\n                _lockGaugeVoteRatio[tokenId][gauge] <=\\n                PercentageMath.PERCENTAGE_FACTOR, // 100%\\n            \\\"GC:V:INVALID_RATIO\\\"\\n        );\\n\\n        // Lock must not be expired unless the ratio is 0 (we are removing the vote)\\n        require(\\n            lockedBalance.end > block.timestamp || ratio == 0,\\n            \\\"GC:V:LOCK_EXPIRED\\\"\\n        );\\n\\n        require(lockedBalance.amount > 0, \\\"GC:V:LOCKED_BALANCE_ZERO\\\");\\n\\n        require(_isGauge[gauge], \\\"GC:V:INVALID_GAUGE\\\");\\n\\n        // Write weight history to make sure its up to date until this epoch\\n        writeTotalWeightHistory();\\n        writeGaugeWeightHistory(gauge);\\n\\n        // Get lock last action\\n        DataTypes.Point memory lockLastPoint = votingEscrow.getLockHistoryPoint(\\n            tokenId,\\n            votingEscrow.getLockHistoryLength(tokenId) - 1\\n        );\\n        DataTypes.Point memory oldGaugeVoteWeight;\\n        DataTypes.Point memory newGaugeVoteWeight;\\n\\n        // Get the updated gauge vote weight\\n        newGaugeVoteWeight.bias = SafeCast.toUint128(\\n            PercentageMath.percentMul(\\n                lockLastPoint.bias -\\n                    (lockLastPoint.slope *\\n                        (block.timestamp - lockLastPoint.timestamp)),\\n                ratio\\n            )\\n        );\\n        newGaugeVoteWeight.slope = SafeCast.toUint128(\\n            PercentageMath.percentMul(lockLastPoint.slope, ratio)\\n        );\\n\\n        newGaugeVoteWeight.timestamp = SafeCast.toUint40(block.timestamp);\\n\\n        // If we already have valid votes in this gauge\\n        if (\\n            _lockGaugeVoteRatio[tokenId][gauge] > 0 &&\\n            block.timestamp < lockedBalance.end\\n        ) {\\n            // Get the updated old gauge vote weight\\n            oldGaugeVoteWeight.bias = SafeCast.toUint128(\\n                _lockGaugeVotePoint[tokenId][gauge].slope *\\n                    (block.timestamp -\\n                        _lockGaugeVotePoint[tokenId][gauge].timestamp)\\n            );\\n            oldGaugeVoteWeight.slope = SafeCast.toUint128(\\n                _lockGaugeVotePoint[tokenId][gauge].slope\\n            );\\n            oldGaugeVoteWeight.timestamp = SafeCast.toUint40(block.timestamp);\\n\\n            _gaugeWeightSlopeChanges[gauge][\\n                lockedBalance.end\\n            ] -= oldGaugeVoteWeight.slope;\\n\\n            _totalWeightSlopeChanges[lockedBalance.end] -= oldGaugeVoteWeight\\n                .slope;\\n        }\\n\\n        // Add new slope updates\\n        _gaugeWeightSlopeChanges[gauge][lockedBalance.end] += newGaugeVoteWeight\\n            .slope;\\n        _totalWeightSlopeChanges[lockedBalance.end] += newGaugeVoteWeight.slope;\\n\\n        // Update checkpoints\\n        _lastGaugeWeigthCheckpoint[gauge].bias = SafeCast.toUint128(\\n            _lastGaugeWeigthCheckpoint[gauge].bias -\\n                (_lastGaugeWeigthCheckpoint[gauge].slope *\\n                    (block.timestamp -\\n                        _lastGaugeWeigthCheckpoint[gauge].timestamp)) +\\n                newGaugeVoteWeight.bias -\\n                oldGaugeVoteWeight.bias\\n        );\\n        _lastGaugeWeigthCheckpoint[gauge].slope =\\n            _lastGaugeWeigthCheckpoint[gauge].slope +\\n            newGaugeVoteWeight.slope -\\n            oldGaugeVoteWeight.slope;\\n        _lastGaugeWeigthCheckpoint[gauge].timestamp = SafeCast.toUint40(\\n            block.timestamp\\n        );\\n\\n        _lastWeightCheckpoint.bias = SafeCast.toUint128(\\n            _lastWeightCheckpoint.bias -\\n                (_lastWeightCheckpoint.slope *\\n                    (block.timestamp - _lastWeightCheckpoint.timestamp)) +\\n                newGaugeVoteWeight.bias -\\n                oldGaugeVoteWeight.bias\\n        );\\n        _lastWeightCheckpoint.slope =\\n            _lastWeightCheckpoint.slope +\\n            newGaugeVoteWeight.slope -\\n            oldGaugeVoteWeight.slope;\\n        _lastWeightCheckpoint.timestamp = SafeCast.toUint40(block.timestamp);\\n\\n        // Update user vote info\\n        _lockVoteRatio[tokenId] =\\n            ratio +\\n            _lockVoteRatio[tokenId] -\\n            _lockGaugeVoteRatio[tokenId][gauge];\\n        _lockGaugeVoteRatio[tokenId][gauge] = ratio;\\n        _lockGaugeVotePoint[tokenId][gauge] = newGaugeVoteWeight;\\n\\n        emit Vote(msg.sender, tokenId, gauge, ratio);\\n    }\\n\\n    /// @notice Returns the maximum amount of tokens that can be distributed as rewards for the specified epoch.\\n    /// @param epoch The epoch for which to get the rewards.\\n    /// @return The maximum amount of tokens that can be distributed as rewards for the specified epoch.\\n    function getRewardsCeiling(uint256 epoch) public pure returns (uint256) {\\n        uint256 inflationEpoch = epoch / INFLATION_PERIOD;\\n        // If we are in the loading period, return smaller rewards\\n        if (epoch < LOADING_PERIOD) {\\n            return (INITIAL_REWARDS * epoch) / LOADING_PERIOD;\\n        } else if (inflationEpoch > MAX_INFLATION_PERIODS) {\\n            // Cap the inflation epoch = stabilize rewards\\n            inflationEpoch = MAX_INFLATION_PERIODS;\\n        }\\n\\n        return\\n            (INITIAL_REWARDS * (3 ** inflationEpoch)) / (4 ** inflationEpoch);\\n    }\\n\\n    /// @notice Returns the amount of tokens to distribute as rewards for the specified epoch.\\n    /// @dev The amount of tokens to distribute goes down as the number of locked tokens goes up.\\n    /// @param epoch The epoch for which to get the rewards.\\n    /// @return The amount of tokens to distribute as rewards for the specified epoch.\\n    function getEpochRewards(\\n        uint256 epoch\\n    ) public noFutureEpoch(epoch) returns (uint256) {\\n        // If there are no votes in any gauge, return 0\\n        if (getTotalWeightAt(epoch) == 0) {\\n            return 0;\\n        }\\n\\n        return\\n            (((PercentageMath.PERCENTAGE_FACTOR -\\n                (IVotingEscrow(_addressProvider.getVotingEscrow())\\n                    .getLockedRatioAt(epoch) / 5)) ** 3) *\\n                getRewardsCeiling(epoch)) /\\n            (PercentageMath.PERCENTAGE_FACTOR ** 3);\\n    }\\n\\n    /// @notice Get the LE reward for a gauge in a given epoch\\n    /// @param gauge The address of the gauge\\n    /// @param epoch The epoch to get the reward for\\n    /// @return rewards The LE reward for the gauge in the given epoch\\n    function getGaugeRewards(\\n        address gauge,\\n        uint256 epoch\\n    )\\n        external\\n        validGauge(gauge)\\n        noFutureEpoch(epoch)\\n        returns (uint256 rewards)\\n    {\\n        // If there are no votes in any gauge, return 0\\n        uint256 totalWeight = getTotalWeightAt(epoch);\\n        if (totalWeight == 0) {\\n            return 0;\\n        }\\n\\n        return\\n            (getEpochRewards(epoch) * getGaugeWeightAt(gauge, epoch)) /\\n            totalWeight;\\n    }\\n\\n    /// @notice Sets the maturity period for LP tokens\\n    /// @param maturityPeriod The new maturity period in epochs\\n    function setLPMaturityPeriod(uint256 maturityPeriod) external onlyOwner {\\n        require(maturityPeriod > 0, \\\"GC:SLPMP:INVALID_MATURITY_PERIOD\\\");\\n        _lpMaturityPeriod = maturityPeriod;\\n    }\\n\\n    /// @notice Gets the maturity period for LP tokens\\n    /// @return The maturity period in epochs\\n    function getLPMaturityPeriod() external view override returns (uint256) {\\n        return _lpMaturityPeriod;\\n    }\\n\\n    function _requireValidGauge(address gauge) internal view {\\n        require(_isGauge[gauge], \\\"GC:INVALID_GAUGE\\\");\\n    }\\n\\n    function _requireLockExists(uint256 tokenId) internal view {\\n        try\\n            IERC721Upgradeable(_addressProvider.getVotingEscrow()).ownerOf(\\n                tokenId\\n            ) // solhint-disable-next-line no-empty-blocks\\n        {} catch {\\n            revert(\\\"GC:LOCK_NOT_FOUND\\\");\\n        }\\n    }\\n\\n    function _requireNoFutureEpoch(uint256 epoch) internal view {\\n        require(\\n            epoch <=\\n                IVotingEscrow(_addressProvider.getVotingEscrow()).getEpoch(\\n                    block.timestamp\\n                ),\\n            \\\"GC:FUTURE_EPOCH\\\"\\n        );\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/protocol/Trustus/Trustus.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.19;\\n\\n/// @title Trustus\\n/// @author zefram.eth\\n/// @notice Trust-minimized method for accessing offchain data onchain\\nabstract contract Trustus {\\n    /// -----------------------------------------------------------------------\\n    /// Structs\\n    /// -----------------------------------------------------------------------\\n\\n    /// @param v Part of the ECDSA signature\\n    /// @param r Part of the ECDSA signature\\n    /// @param s Part of the ECDSA signature\\n    /// @param request Identifier for verifying the packet is what is desired\\n    /// , rather than a packet for some other function/contract\\n    /// @param deadline The Unix timestamp (in seconds) after which the packet\\n    /// should be rejected by the contract\\n    /// @param payload The payload of the packet\\n    struct TrustusPacket {\\n        uint8 v;\\n        bytes32 r;\\n        bytes32 s;\\n        bytes32 request;\\n        uint256 deadline;\\n        bytes payload;\\n    }\\n\\n    /// -----------------------------------------------------------------------\\n    /// Immutable parameters\\n    /// -----------------------------------------------------------------------\\n\\n    /// @notice The chain ID used by EIP-712\\n    // solhint-disable-next-line var-name-mixedcase\\n    uint256 internal immutable INITIAL_CHAIN_ID;\\n\\n    /// @notice The domain separator used by EIP-712\\n    // solhint-disable-next-line var-name-mixedcase\\n    bytes32 internal immutable INITIAL_DOMAIN_SEPARATOR;\\n\\n    /// -----------------------------------------------------------------------\\n    /// Storage variables\\n    /// -----------------------------------------------------------------------\\n\\n    /// @notice Records whether an address is trusted as a packet provider\\n    /// @dev provider => value\\n    mapping(address => bool) internal isTrusted;\\n\\n    /// -----------------------------------------------------------------------\\n    /// Modifiers\\n    /// -----------------------------------------------------------------------\\n\\n    /// @notice Verifies whether a packet is valid and returns the result.\\n    /// Will revert if the packet is invalid.\\n    /// @dev The deadline, request, and signature are verified.\\n    /// @param request The identifier for the requested payload\\n    /// @param packet The packet provided by the offchain data provider\\n    modifier verifyPacket(bytes32 request, TrustusPacket calldata packet) {\\n        _verifyPacket(request, packet);\\n        _;\\n    }\\n\\n    /// -----------------------------------------------------------------------\\n    /// Constructor\\n    /// -----------------------------------------------------------------------\\n\\n    constructor() {\\n        INITIAL_CHAIN_ID = block.chainid;\\n        INITIAL_DOMAIN_SEPARATOR = _computeDomainSeparator();\\n    }\\n\\n    /// -----------------------------------------------------------------------\\n    /// Packet verification\\n    /// -----------------------------------------------------------------------\\n\\n    /// @notice Verifies whether a packet is valid and returns the result.\\n    /// @dev The deadline, request, and signature are verified.\\n    /// @param request The identifier for the requested payload\\n    /// @param packet The packet provided by the offchain data provider\\n    function _verifyPacket(\\n        bytes32 request,\\n        TrustusPacket calldata packet\\n    ) internal view virtual {\\n        // verify deadline\\n        require(block.timestamp < packet.deadline, \\\"T:V:DEADLINE_EXCEEDED\\\");\\n\\n        // verify request\\n        require(request == packet.request, \\\"T:V:INVALID_REQUEST\\\");\\n\\n        // verify signature\\n        address recoveredAddress = ecrecover(\\n            keccak256(\\n                abi.encodePacked(\\n                    \\\"\\\\x19\\\\x01\\\",\\n                    DOMAIN_SEPARATOR(),\\n                    keccak256(\\n                        abi.encode(\\n                            keccak256(\\n                                \\\"VerifyPacket(bytes32 request,uint256 deadline,bytes payload)\\\"\\n                            ),\\n                            packet.request,\\n                            packet.deadline,\\n                            keccak256(packet.payload)\\n                        )\\n                    )\\n                )\\n            ),\\n            packet.v,\\n            packet.r,\\n            packet.s\\n        );\\n\\n        require(\\n            recoveredAddress != address(0) && isTrusted[recoveredAddress],\\n            \\\"T:V:INVALID_SIGNATURE\\\"\\n        );\\n    }\\n\\n    /// @notice Sets the trusted status of an offchain data provider.\\n    /// @param signer The data provider's ECDSA public key as an Ethereum address\\n    /// @param isTrusted_ The desired trusted status to set\\n    function _setIsTrusted(address signer, bool isTrusted_) internal virtual {\\n        isTrusted[signer] = isTrusted_;\\n    }\\n\\n    function _isTrusted(address signer) internal view virtual returns (bool) {\\n        return (isTrusted[signer]);\\n    }\\n\\n    /// -----------------------------------------------------------------------\\n    /// EIP-712 compliance\\n    /// -----------------------------------------------------------------------\\n\\n    /// @notice The domain separator used by EIP-712\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() public view virtual returns (bytes32) {\\n        return\\n            block.chainid == INITIAL_CHAIN_ID\\n                ? INITIAL_DOMAIN_SEPARATOR\\n                : _computeDomainSeparator();\\n    }\\n\\n    /// @notice Computes the domain separator used by EIP-712\\n    function _computeDomainSeparator() internal view virtual returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encode(\\n                    keccak256(\\n                        \\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"\\n                    ),\\n                    keccak256(\\\"leNFT\\\"),\\n                    keccak256(\\\"1\\\"),\\n                    block.chainid,\\n                    address(this)\\n                )\\n            );\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"viaIR\": false,\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200,\r\n      \"details\": {\r\n        \"yul\": true\r\n      }\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract IAddressProvider\",\"name\":\"addressProvider\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"gauge\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"liquidityPool\",\"type\":\"address\"}],\"name\":\"AddGauge\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"gauge\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"liquidityPool\",\"type\":\"address\"}],\"name\":\"RemoveGauge\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"gauge\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"weight\",\"type\":\"uint256\"}],\"name\":\"Vote\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"gauge\",\"type\":\"address\"}],\"name\":\"addGauge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"}],\"name\":\"getEpochRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquidityPool\",\"type\":\"address\"}],\"name\":\"getGauge\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"gauge\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"}],\"name\":\"getGaugeRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rewards\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"gauge\",\"type\":\"address\"}],\"name\":\"getGaugeWeight\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"gauge\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"}],\"name\":\"getGaugeWeightAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLPMaturityPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"gauge\",\"type\":\"address\"}],\"name\":\"getLockVotePointForGauge\",\"outputs\":[{\"components\":[{\"internalType\":\"uint128\",\"name\":\"bias\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"slope\",\"type\":\"uint128\"},{\"internalType\":\"uint40\",\"name\":\"timestamp\",\"type\":\"uint40\"}],\"internalType\":\"struct DataTypes.Point\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getLockVoteRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"gauge\",\"type\":\"address\"}],\"name\":\"getLockVoteRatioForGauge\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"gauge\",\"type\":\"address\"}],\"name\":\"getLockVoteWeightForGauge\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"}],\"name\":\"getRewardsCeiling\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalWeight\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"}],\"name\":\"getTotalWeightAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lpMaturityPeriod\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"gauge\",\"type\":\"address\"}],\"name\":\"isGauge\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"gauge\",\"type\":\"address\"}],\"name\":\"removeGauge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maturityPeriod\",\"type\":\"uint256\"}],\"name\":\"setLPMaturityPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"gauge\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"}],\"name\":\"vote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"gauge\",\"type\":\"address\"}],\"name\":\"writeGaugeWeightHistory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"writeTotalWeightHistory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "GaugeController", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000004df583e7d80336cb9ee91c381a939aee58404567", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}