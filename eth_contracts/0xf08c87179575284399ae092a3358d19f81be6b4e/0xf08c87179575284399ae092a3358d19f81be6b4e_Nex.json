{"SourceCode": "/*\r\nWebsite: https://www.nexlabs.io\r\nDocs: https://nex-labs.gitbook.io/nex-dex/\r\nX: https://x.com/NEX_Protocol\r\nTelegram : https://t.me/NEX_Labs\r\n*/\r\n\r\n\r\n// SPDX-License-Identifier: Unlicensed\r\n\r\npragma solidity ^0.8.20;\r\n\r\ninterface IUniswapV2Router02 {\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint256 amountTokenDesired,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        payable\r\n        returns (\r\n            uint256 amountToken,\r\n            uint256 amountETH,\r\n            uint256 liquidity\r\n        );\r\n}\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        returns (bool);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    function createPair(address tokenA, address tokenB)\r\n        external\r\n        returns (address pair);\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n    address private _previousOwner;\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    constructor() {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(\r\n            newOwner != address(0),\r\n            \"Ownable: new owner is the zero address\"\r\n        );\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\ncontract Nex is Context, IERC20, Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    mapping(address => uint256) private _rOwned;\r\n\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n    mapping(address => bool) private _isExcludedFromFee;\r\n\r\n    uint8 private constant _decimals = 9;\r\n    string private constant _name = \"Nex\";\r\n    string private constant _symbol = \"Nex\";\r\n\r\n    uint256 private _rTotal = (MAX - (MAX % _totalSupply));\r\n    uint256 private constant MAX = ~uint256(0);\r\n\r\n    uint256 private _buyFee = 5;\r\n    uint256 private _sellFee = 5;\r\n\r\n    uint256 private _tempFeeStorage = _fee;\r\n    uint256 private _fee = _sellFee;\r\n\r\n    address payable private _treasuryAddress =\r\n        payable(0x754c3383E9d69098deEee53cEa7536f2b0aDDD15);\r\n\r\n    bool private _maxTxn = false;\r\n    bool private _maxWallet = false;\r\n\r\n    uint256 private constant _totalSupply = 100_000_000 * 10**9;\r\n\r\n    // Trade contstraints\r\n    uint256 public _maxTradeValue = 1_000_000 * 10**9;\r\n    uint256 public _maxTotalTradeValue = 1_000_000 * 10**9;\r\n\r\n    uint256 public _minValueToSwap = 1000 * 10**9;\r\n\r\n    IUniswapV2Router02 public uniswapV2Router;\r\n    address public uniswapV2Pair;\r\n\r\n    bool private instantFeeSwapEnabled = true;\r\n    bool private swapping = false;\r\n    bool private tradingAllowed;\r\n\r\n    modifier lockTheSwap() {\r\n        swapping = true;\r\n        _;\r\n        swapping = false;\r\n    }\r\n\r\n    constructor() {\r\n        _rOwned[_msgSender()] = _rTotal;\r\n\r\n        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(\r\n            0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D\r\n        );\r\n\r\n        uniswapV2Router = _uniswapV2Router;\r\n        uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory())\r\n            .createPair(address(this), _uniswapV2Router.WETH());\r\n\r\n        _isExcludedFromFee[address(this)] = true;\r\n        _isExcludedFromFee[owner()] = true;\r\n        _isExcludedFromFee[_treasuryAddress] = true;\r\n\r\n        emit Transfer(address(0), _msgSender(), _totalSupply);\r\n    }\r\n\r\n    function totalSupply() public pure override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return tokenFromReflection(_rOwned[account]);\r\n    }\r\n\r\n    function excludeMultipleAccountsFromFees(\r\n        address[] calldata accounts,\r\n        bool excluded\r\n    ) public onlyOwner {\r\n        for (uint256 i = 0; i < accounts.length; i++) {\r\n            _isExcludedFromFee[accounts[i]] = excluded;\r\n        }\r\n    }\r\n\r\n    function decimals() public pure returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function name() public pure returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public pure returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function _getNValues(uint256 tAmount, uint256 fee)\r\n        private\r\n        pure\r\n        returns (uint256, uint256)\r\n    {\r\n        uint256 tTeam = tAmount.mul(fee).div(100);\r\n        uint256 tTransferAmount = tAmount.sub(tTeam);\r\n        return (tTransferAmount, tTeam);\r\n    }\r\n\r\n    function _getCurrentSupply() private view returns (uint256, uint256) {\r\n        return (_rTotal, _totalSupply);\r\n    }\r\n\r\n    function toggleinstantFeeSwapEnabled(bool _instantFeeSwapEnabled)\r\n        public\r\n        onlyOwner\r\n    {\r\n        instantFeeSwapEnabled = _instantFeeSwapEnabled;\r\n    }\r\n\r\n    function allowance(address owner, address spender)\r\n        public\r\n        view\r\n        override\r\n        returns (uint256)\r\n    {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount)\r\n        public\r\n        override\r\n        returns (bool)\r\n    {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function tokenFromReflection(uint256 rAmount)\r\n        private\r\n        view\r\n        returns (uint256)\r\n    {\r\n        require(\r\n            rAmount <= _rTotal,\r\n            \"Amount has to be less than total reflections\"\r\n        );\r\n        uint256 currentrt = _getrt();\r\n        return rAmount.div(currentrt);\r\n    }\r\n\r\n    function setTradingAllowed(bool _tradingAllowed) public onlyOwner {\r\n        tradingAllowed = _tradingAllowed;\r\n    }\r\n\r\n    function reduceFee() private {\r\n        if (_fee == 0) return;\r\n\r\n        _tempFeeStorage = _fee;\r\n\r\n        _fee = 0;\r\n    }\r\n\r\n    function restoreFee() private {\r\n        _fee = _tempFeeStorage;\r\n    }\r\n\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) private {\r\n        require(owner != address(0), \"Can't approve from zero address\");\r\n        require(spender != address(0), \"Can't approve to zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) private {\r\n        require(from != address(0), \"Cant transfer from address zero\");\r\n        require(to != address(0), \"Cant transfer to address zero\");\r\n        require(amount > 0, \"Amount should be above zero\");\r\n\r\n        if (from != owner() && to != owner()) {\r\n            //Trade start check\r\n            if (!tradingAllowed) {\r\n                require(\r\n                    from == owner(),\r\n                    \"Only owner can trade before trading activation\"\r\n                );\r\n            }\r\n\r\n            require(amount <= _maxTradeValue, \"Exceeded max transaction limit\");\r\n\r\n            if (to != uniswapV2Pair) {\r\n                require(\r\n                    balanceOf(to) + amount < _maxTotalTradeValue,\r\n                    \"Exceeds max hold balance\"\r\n                );\r\n            }\r\n\r\n            uint256 contractTokenBalance = balanceOf(address(this));\r\n            bool swapAllowed = contractTokenBalance >= _minValueToSwap;\r\n\r\n            if (contractTokenBalance >= _maxTradeValue) {\r\n                contractTokenBalance = _maxTradeValue;\r\n            }\r\n\r\n            if (\r\n                swapAllowed &&\r\n                !swapping &&\r\n                from != uniswapV2Pair &&\r\n                instantFeeSwapEnabled &&\r\n                !_isExcludedFromFee[from] &&\r\n                !_isExcludedFromFee[to]\r\n            ) {\r\n                swapForEther(contractTokenBalance);\r\n                uint256 contractETHBalance = address(this).balance;\r\n                if (contractETHBalance > 0) {\r\n                    transferEthToDev(address(this).balance);\r\n                }\r\n            }\r\n        }\r\n\r\n        bool takeFee = true;\r\n\r\n        if (\r\n            (_isExcludedFromFee[from] || _isExcludedFromFee[to]) ||\r\n            (from != uniswapV2Pair && to != uniswapV2Pair)\r\n        ) {\r\n            takeFee = false;\r\n        } else {\r\n            if (from == uniswapV2Pair && to != address(uniswapV2Router)) {\r\n                _fee = _buyFee;\r\n            }\r\n\r\n            if (to == uniswapV2Pair && from != address(uniswapV2Router)) {\r\n                _fee = _sellFee;\r\n            }\r\n        }\r\n\r\n        _tokenTransfer(from, to, amount, takeFee);\r\n    }\r\n\r\n    function swapForEther(uint256 tokenAmount) private lockTheSwap {\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = uniswapV2Router.WETH();\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function transferEthToDev(uint256 amount) private {\r\n        _treasuryAddress.transfer(amount);\r\n    }\r\n\r\n    function forceSwap() external {\r\n        require(_msgSender() == _treasuryAddress);\r\n        uint256 contractETHBalance = address(this).balance;\r\n        transferEthToDev(contractETHBalance);\r\n    }\r\n\r\n    function _getrt() private view returns (uint256) {\r\n        (uint256 rSupply, uint256 tSupply) = _getCurrentSupply();\r\n        return rSupply.div(tSupply);\r\n    }\r\n\r\n    function _transferWrapper(\r\n        address sender,\r\n        address recipient,\r\n        uint256 tAmount\r\n    ) private {\r\n        (\r\n            uint256 rAmount,\r\n            uint256 rTransferAmount,\r\n            uint256 tTransferAmount,\r\n            uint256 tTeam\r\n        ) = _getFeeValues(tAmount);\r\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\r\n        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\r\n        _sendFeesToTeam(tTeam);\r\n        emit Transfer(sender, recipient, tTransferAmount);\r\n    }\r\n\r\n    function _sendFeesToTeam(uint256 tTeam) private {\r\n        uint256 currentrt = _getrt();\r\n        uint256 rTeam = tTeam.mul(currentrt);\r\n        _rOwned[address(this)] = _rOwned[address(this)].add(rTeam);\r\n    }\r\n\r\n    function _getFeeValues(uint256 tAmount)\r\n        private\r\n        view\r\n        returns (\r\n            uint256,\r\n            uint256,\r\n            uint256,\r\n            uint256\r\n        )\r\n    {\r\n        (uint256 tTransferAmount, uint256 tTeam) = _getNValues(tAmount, _fee);\r\n        uint256 currentrt = _getrt();\r\n        (uint256 rAmount, uint256 rTransferAmount) = _getNValues(\r\n            tAmount,\r\n            tTeam,\r\n            currentrt\r\n        );\r\n        return (rAmount, rTransferAmount, tTransferAmount, tTeam);\r\n    }\r\n\r\n    function _tokenTransfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount,\r\n        bool takeFee\r\n    ) private {\r\n        if (!takeFee) reduceFee();\r\n        _transferWrapper(sender, recipient, amount);\r\n        if (!takeFee) restoreFee();\r\n    }\r\n\r\n    function manualSwap() external {\r\n        require(_msgSender() == _treasuryAddress);\r\n        uint256 contractBalance = balanceOf(address(this));\r\n        swapForEther(contractBalance);\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount)\r\n        public\r\n        override\r\n        returns (bool)\r\n    {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(\r\n            sender,\r\n            _msgSender(),\r\n            _allowances[sender][_msgSender()].sub(\r\n                amount,\r\n                \"the transfer amount exceeds allowance\"\r\n            )\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function setMinValueToSwap(uint256 minSwappableAmount) public onlyOwner {\r\n        _minValueToSwap = minSwappableAmount;\r\n    }\r\n\r\n    function updateFee(uint256 feeOnBuy, uint256 feeOnSell) public onlyOwner {\r\n        require(\r\n            feeOnBuy >= 0 && feeOnBuy <= 30,\r\n            \"Buy tax must be between 0% and 30%\"\r\n        );\r\n        require(\r\n            feeOnSell >= 0 && feeOnSell <= 30,\r\n            \"Sell tax must be between 0% and 30%\"\r\n        );\r\n\r\n        _buyFee = feeOnBuy;\r\n        _sellFee = feeOnSell;\r\n    }\r\n\r\n    // Set maximum transaction\r\n    function setMaxTxnAmount(uint256 maxTxAmount) public onlyOwner {\r\n        _maxTradeValue = maxTxAmount;\r\n    }\r\n\r\n    // Set maximum holdings\r\n    function setMaxTradeValue(uint256 maxHoldSize) public onlyOwner {\r\n        _maxTotalTradeValue = maxHoldSize;\r\n    }\r\n\r\n    function _getNValues(\r\n        uint256 tAmount,\r\n        uint256 tTeam,\r\n        uint256 currentrt\r\n    ) private pure returns (uint256, uint256) {\r\n        uint256 rAmount = tAmount.mul(currentrt);\r\n        uint256 rTeam = tTeam.mul(currentrt);\r\n        uint256 rTransferAmount = rAmount.sub(rTeam);\r\n        return (rAmount, rTransferAmount);\r\n    }\r\n\r\n    receive() external payable {}\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_maxTotalTradeValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxTradeValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_minValueToSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"excluded\",\"type\":\"bool\"}],\"name\":\"excludeMultipleAccountsFromFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"forceSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manualSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxHoldSize\",\"type\":\"uint256\"}],\"name\":\"setMaxTradeValue\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxTxAmount\",\"type\":\"uint256\"}],\"name\":\"setMaxTxnAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minSwappableAmount\",\"type\":\"uint256\"}],\"name\":\"setMinValueToSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_tradingAllowed\",\"type\":\"bool\"}],\"name\":\"setTradingAllowed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_instantFeeSwapEnabled\",\"type\":\"bool\"}],\"name\":\"toggleinstantFeeSwapEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"feeOnBuy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feeOnSell\",\"type\":\"uint256\"}],\"name\":\"updateFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "Nex", "CompilerVersion": "v0.8.24+commit.e11b9ed9", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://3b5699a97d1cd10c1285fff7795df6813c21525bb216e32ea01220113376bb62"}