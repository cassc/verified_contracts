{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721EnumerableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721Upgradeable.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721EnumerableUpgradeable is IERC721Upgradeable {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721MetadataUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721Upgradeable.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721MetadataUpgradeable is IERC721Upgradeable {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721ReceiverUpgradeable {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary CountersUpgradeable {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/proxy/beacon/IBeacon.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/ERC1967/ERC1967Proxy.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Proxy.sol\\\";\\nimport \\\"./ERC1967Upgrade.sol\\\";\\n\\n/**\\n * @dev This contract implements an upgradeable proxy. It is upgradeable because calls are delegated to an\\n * implementation address that can be changed. This address is stored in storage in the location specified by\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967], so that it doesn't conflict with the storage layout of the\\n * implementation behind the proxy.\\n */\\ncontract ERC1967Proxy is Proxy, ERC1967Upgrade {\\n    /**\\n     * @dev Initializes the upgradeable proxy with an initial implementation specified by `_logic`.\\n     *\\n     * If `_data` is nonempty, it's used as data in a delegate call to `_logic`. This will typically be an encoded\\n     * function call, and allows initializating the storage of the proxy like a Solidity constructor.\\n     */\\n    constructor(address _logic, bytes memory _data) payable {\\n        assert(_IMPLEMENTATION_SLOT == bytes32(uint256(keccak256(\\\"eip1967.proxy.implementation\\\")) - 1));\\n        _upgradeToAndCall(_logic, _data, false);\\n    }\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _implementation() internal view virtual override returns (address impl) {\\n        return ERC1967Upgrade._getImplementation();\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeacon.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/StorageSlot.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n *\\n * @custom:oz-upgrades-unsafe-allow delegatecall\\n */\\nabstract contract ERC1967Upgrade {\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallSecure(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        address oldImplementation = _getImplementation();\\n\\n        // Initial upgrade and setup call\\n        _setImplementation(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        }\\n\\n        // Perform rollback test if not already in progress\\n        StorageSlot.BooleanSlot storage rollbackTesting = StorageSlot.getBooleanSlot(_ROLLBACK_SLOT);\\n        if (!rollbackTesting.value) {\\n            // Trigger rollback using upgradeTo from the new implementation\\n            rollbackTesting.value = true;\\n            Address.functionDelegateCall(\\n                newImplementation,\\n                abi.encodeWithSignature(\\\"upgradeTo(address)\\\", oldImplementation)\\n            );\\n            rollbackTesting.value = false;\\n            // Check rollback was effective\\n            require(oldImplementation == _getImplementation(), \\\"ERC1967Upgrade: upgrade breaks further upgrades\\\");\\n            // Finally reset to the new implementation and log the upgrade\\n            _upgradeTo(newImplementation);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Emitted when the beacon is upgraded.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(Address.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            Address.isContract(IBeacon(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlot.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(\\n        address newBeacon,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/proxy/Proxy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/Proxy.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\\n * be specified by overriding the virtual {_implementation} function.\\n *\\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\\n * different contract through the {_delegate} function.\\n *\\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\\n */\\nabstract contract Proxy {\\n    /**\\n     * @dev Delegates the current call to `implementation`.\\n     *\\n     * This function does not return to its internall call site, it will return directly to the external caller.\\n     */\\n    function _delegate(address implementation) internal virtual {\\n        assembly {\\n            // Copy msg.data. We take full control of memory in this inline assembly\\n            // block because it will not return to Solidity code. We overwrite the\\n            // Solidity scratch pad at memory position 0.\\n            calldatacopy(0, 0, calldatasize())\\n\\n            // Call the implementation.\\n            // out and outsize are 0 because we don't know the size yet.\\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\\n\\n            // Copy the returned data.\\n            returndatacopy(0, 0, returndatasize())\\n\\n            switch result\\n            // delegatecall returns 0 on error.\\n            case 0 {\\n                revert(0, returndatasize())\\n            }\\n            default {\\n                return(0, returndatasize())\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev This is a virtual function that should be overriden so it returns the address to which the fallback function\\n     * and {_fallback} should delegate.\\n     */\\n    function _implementation() internal view virtual returns (address);\\n\\n    /**\\n     * @dev Delegates the current call to the address returned by `_implementation()`.\\n     *\\n     * This function does not return to its internall call site, it will return directly to the external caller.\\n     */\\n    function _fallback() internal virtual {\\n        _beforeFallback();\\n        _delegate(_implementation());\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\\n     * function in the contract matches the call data.\\n     */\\n    fallback() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\\n     * is empty.\\n     */\\n    receive() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\\n     * call, or as part of the Solidity `fallback` or `receive` functions.\\n     *\\n     * If overriden should call `super._beforeFallback()`.\\n     */\\n    function _beforeFallback() internal virtual {}\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/transparent/TransparentUpgradeableProxy.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC1967/ERC1967Proxy.sol\\\";\\n\\n/**\\n * @dev This contract implements a proxy that is upgradeable by an admin.\\n *\\n * To avoid https://medium.com/nomic-labs-blog/malicious-backdoors-in-ethereum-proxies-62629adf3357[proxy selector\\n * clashing], which can potentially be used in an attack, this contract uses the\\n * https://blog.openzeppelin.com/the-transparent-proxy-pattern/[transparent proxy pattern]. This pattern implies two\\n * things that go hand in hand:\\n *\\n * 1. If any account other than the admin calls the proxy, the call will be forwarded to the implementation, even if\\n * that call matches one of the admin functions exposed by the proxy itself.\\n * 2. If the admin calls the proxy, it can access the admin functions, but its calls will never be forwarded to the\\n * implementation. If the admin tries to call a function on the implementation it will fail with an error that says\\n * \\\"admin cannot fallback to proxy target\\\".\\n *\\n * These properties mean that the admin account can only be used for admin actions like upgrading the proxy or changing\\n * the admin, so it's best if it's a dedicated account that is not used for anything else. This will avoid headaches due\\n * to sudden errors when trying to call a function from the proxy implementation.\\n *\\n * Our recommendation is for the dedicated account to be an instance of the {ProxyAdmin} contract. If set up this way,\\n * you should think of the `ProxyAdmin` instance as the real administrative interface of your proxy.\\n */\\ncontract TransparentUpgradeableProxy is ERC1967Proxy {\\n    /**\\n     * @dev Initializes an upgradeable proxy managed by `_admin`, backed by the implementation at `_logic`, and\\n     * optionally initialized with `_data` as explained in {ERC1967Proxy-constructor}.\\n     */\\n    constructor(\\n        address _logic,\\n        address admin_,\\n        bytes memory _data\\n    ) payable ERC1967Proxy(_logic, _data) {\\n        assert(_ADMIN_SLOT == bytes32(uint256(keccak256(\\\"eip1967.proxy.admin\\\")) - 1));\\n        _changeAdmin(admin_);\\n    }\\n\\n    /**\\n     * @dev Modifier used internally that will delegate the call to the implementation unless the sender is the admin.\\n     */\\n    modifier ifAdmin() {\\n        if (msg.sender == _getAdmin()) {\\n            _;\\n        } else {\\n            _fallback();\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the current admin.\\n     *\\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-getProxyAdmin}.\\n     *\\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the\\n     * https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\\n     * `0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103`\\n     */\\n    function admin() external ifAdmin returns (address admin_) {\\n        admin_ = _getAdmin();\\n    }\\n\\n    /**\\n     * @dev Returns the current implementation.\\n     *\\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-getProxyImplementation}.\\n     *\\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the\\n     * https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\\n     * `0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc`\\n     */\\n    function implementation() external ifAdmin returns (address implementation_) {\\n        implementation_ = _implementation();\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     *\\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-changeProxyAdmin}.\\n     */\\n    function changeAdmin(address newAdmin) external virtual ifAdmin {\\n        _changeAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy.\\n     *\\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-upgrade}.\\n     */\\n    function upgradeTo(address newImplementation) external ifAdmin {\\n        _upgradeToAndCall(newImplementation, bytes(\\\"\\\"), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy, and then call a function from the new implementation as specified\\n     * by `data`, which should be an encoded function call. This is useful to initialize new storage variables in the\\n     * proxied contract.\\n     *\\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-upgradeAndCall}.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes calldata data) external payable ifAdmin {\\n        _upgradeToAndCall(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _admin() internal view virtual returns (address) {\\n        return _getAdmin();\\n    }\\n\\n    /**\\n     * @dev Makes sure the admin cannot access the fallback function. See {Proxy-_beforeFallback}.\\n     */\\n    function _beforeFallback() internal virtual override {\\n        require(msg.sender != _getAdmin(), \\\"TransparentUpgradeableProxy: admin cannot fallback to proxy target\\\");\\n        super._beforeFallback();\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/StorageSlot.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IDebtToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\r\\npragma solidity 0.8.4;\\r\\n\\r\\nimport {ILendPoolAddressesProvider} from \\\"../interfaces/ILendPoolAddressesProvider.sol\\\";\\r\\nimport {IIncentivesController} from \\\"./IIncentivesController.sol\\\";\\r\\nimport {IScaledBalanceToken} from \\\"./IScaledBalanceToken.sol\\\";\\r\\n\\r\\nimport {IERC20Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\r\\nimport {IERC20MetadataUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title IDebtToken\\r\\n * @author BendDao; Forked and edited by Unlockd\\r\\n * @notice Defines the basic interface for a debt token.\\r\\n **/\\r\\ninterface IDebtToken is IScaledBalanceToken, IERC20Upgradeable, IERC20MetadataUpgradeable {\\r\\n  /**\\r\\n   * @dev Emitted when a debt token is initialized\\r\\n   * @param underlyingAsset The address of the underlying asset\\r\\n   * @param pool The address of the associated lend pool\\r\\n   * @param incentivesController The address of the incentives controller\\r\\n   * @param debtTokenDecimals the decimals of the debt token\\r\\n   * @param debtTokenName the name of the debt token\\r\\n   * @param debtTokenSymbol the symbol of the debt token\\r\\n   **/\\r\\n  event Initialized(\\r\\n    address indexed underlyingAsset,\\r\\n    address indexed pool,\\r\\n    address incentivesController,\\r\\n    uint8 debtTokenDecimals,\\r\\n    string debtTokenName,\\r\\n    string debtTokenSymbol\\r\\n  );\\r\\n\\r\\n  /**\\r\\n   * @dev Initializes the debt token.\\r\\n   * @param addressProvider The address of the lend pool\\r\\n   * @param underlyingAsset The address of the underlying asset\\r\\n   * @param debtTokenDecimals The decimals of the debtToken, same as the underlying asset's\\r\\n   * @param debtTokenName The name of the token\\r\\n   * @param debtTokenSymbol The symbol of the token\\r\\n   */\\r\\n  function initialize(\\r\\n    ILendPoolAddressesProvider addressProvider,\\r\\n    address underlyingAsset,\\r\\n    uint8 debtTokenDecimals,\\r\\n    string memory debtTokenName,\\r\\n    string memory debtTokenSymbol\\r\\n  ) external;\\r\\n\\r\\n  /**\\r\\n   * @dev Emitted after the mint action\\r\\n   * @param from The address performing the mint\\r\\n   * @param value The amount to be minted\\r\\n   * @param index The last index of the reserve\\r\\n   **/\\r\\n  event Mint(address indexed from, uint256 value, uint256 index);\\r\\n\\r\\n  /**\\r\\n   * @dev Emitted after setting of addresses as debt token managers\\r\\n   * @param debtTokenManagers the addresses to be updated\\r\\n   * @param flag `true` to set addresses as managers, `false` otherwise\\r\\n   **/\\r\\n  event TokenManagersUpdated(address[] indexed debtTokenManagers, bool flag);\\r\\n\\r\\n  /**\\r\\n   * @dev Mints debt token to the `user` address\\r\\n   * @param user The address receiving the borrowed underlying\\r\\n   * @param onBehalfOf The beneficiary of the mint\\r\\n   * @param amount The amount of debt being minted\\r\\n   * @param index The variable debt index of the reserve\\r\\n   * @return `true` if the the previous balance of the user is 0\\r\\n   **/\\r\\n  function mint(address user, address onBehalfOf, uint256 amount, uint256 index) external returns (bool);\\r\\n\\r\\n  /**\\r\\n   * @dev Emitted when variable debt is burnt\\r\\n   * @param user The user which debt has been burned\\r\\n   * @param amount The amount of debt being burned\\r\\n   * @param index The index of the user\\r\\n   **/\\r\\n  event Burn(address indexed user, uint256 amount, uint256 index);\\r\\n\\r\\n  /**\\r\\n   * @dev Burns user variable debt\\r\\n   * @param user The user which debt is burnt\\r\\n   * @param amount The amount to be burnt\\r\\n   * @param index The variable debt index of the reserve\\r\\n   **/\\r\\n  function burn(address user, uint256 amount, uint256 index) external;\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the address of the incentives controller contract\\r\\n   **/\\r\\n  function getIncentivesController() external view returns (IIncentivesController);\\r\\n\\r\\n  /**\\r\\n   * @dev delegates borrowing power to a user on the specific debt token\\r\\n   * @param delegatee the address receiving the delegated borrowing power\\r\\n   * @param amount the maximum amount being delegated. Delegation will still\\r\\n   * respect the liquidation constraints (even if delegated, a delegatee cannot\\r\\n   * force a delegator HF to go below 1)\\r\\n   **/\\r\\n  function approveDelegation(address delegatee, uint256 amount) external;\\r\\n\\r\\n  /**\\r\\n   * @dev returns the borrow allowance of the user\\r\\n   * @param fromUser The user to giving allowance\\r\\n   * @param toUser The user to give allowance to\\r\\n   * @return the current allowance of toUser\\r\\n   **/\\r\\n  function borrowAllowance(address fromUser, address toUser) external view returns (uint256);\\r\\n\\r\\n  /**\\r\\n   * @dev Updates allowed addresses to be debt token managers\\r\\n   * @param debtTokenManagers array with addresses to be updated\\r\\n   * @param flag `true` to set as manager, `false` to unset as manager\\r\\n   **/\\r\\n  function updateTokenManagers(address[] calldata debtTokenManagers, bool flag) external;\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interfaces/IIncentivesController.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.4;\\n\\ninterface IIncentivesController {\\n  /**\\n   * @dev Called by the corresponding asset on any update that affects the rewards distribution\\n   * @param asset The address of the user\\n   * @param totalSupply The total supply of the asset in the lending pool\\n   * @param userBalance The balance of the user of the asset in the lending pool\\n   **/\\n  function handleAction(\\n    address asset,\\n    uint256 totalSupply,\\n    uint256 userBalance\\n  ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ILendPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\r\\npragma solidity 0.8.4;\\r\\n\\r\\nimport {ILendPoolAddressesProvider} from \\\"./ILendPoolAddressesProvider.sol\\\";\\r\\nimport {IUToken} from \\\"./IUToken.sol\\\";\\r\\n\\r\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport {IERC721Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\\\";\\r\\n\\r\\nimport {DataTypes} from \\\"../libraries/types/DataTypes.sol\\\";\\r\\n\\r\\ninterface ILendPool {\\r\\n  /*//////////////////////////////////////////////////////////////\\r\\n                          EVENTS\\r\\n  //////////////////////////////////////////////////////////////*/\\r\\n  /**\\r\\n   * @dev Emitted when _rescuer is modified in the LendPool\\r\\n   * @param newRescuer The address of the new rescuer\\r\\n   **/\\r\\n  event RescuerChanged(address indexed newRescuer);\\r\\n\\r\\n  /**\\r\\n   * @dev Emitted on deposit()\\r\\n   * @param user The address initiating the deposit\\r\\n   * @param amount The amount deposited\\r\\n   * @param reserve The address of the underlying asset of the reserve\\r\\n   * @param onBehalfOf The beneficiary of the deposit, receiving the uTokens\\r\\n   * @param referral The referral code used\\r\\n   **/\\r\\n  event Deposit(\\r\\n    address user,\\r\\n    address indexed reserve,\\r\\n    uint256 amount,\\r\\n    address indexed onBehalfOf,\\r\\n    uint16 indexed referral\\r\\n  );\\r\\n\\r\\n  /**\\r\\n   * @dev Emitted on withdraw()\\r\\n   * @param user The address initiating the withdrawal, owner of uTokens\\r\\n   * @param reserve The address of the underlyng asset being withdrawn\\r\\n   * @param amount The amount to be withdrawn\\r\\n   * @param to Address that will receive the underlying\\r\\n   **/\\r\\n  event Withdraw(address indexed user, address indexed reserve, uint256 amount, address indexed to);\\r\\n\\r\\n  /**\\r\\n   * @dev Emitted on borrow() when loan needs to be opened\\r\\n   * @param user The address of the user initiating the borrow(), receiving the funds\\r\\n   * @param reserve The address of the underlying asset being borrowed\\r\\n   * @param amount The amount borrowed out\\r\\n   * @param nftAsset The address of the underlying NFT used as collateral\\r\\n   * @param nftTokenId The token id of the underlying NFT used as collateral\\r\\n   * @param onBehalfOf The address that will be getting the loan\\r\\n   * @param referral The referral code used\\r\\n   * @param nftConfigFee an estimated gas cost fee for configuring the NFT\\r\\n   **/\\r\\n  event Borrow(\\r\\n    address user,\\r\\n    address indexed reserve,\\r\\n    uint256 amount,\\r\\n    address nftAsset,\\r\\n    uint256 nftTokenId,\\r\\n    address indexed onBehalfOf,\\r\\n    uint256 borrowRate,\\r\\n    uint256 loanId,\\r\\n    uint16 indexed referral,\\r\\n    uint256 nftConfigFee\\r\\n  );\\r\\n\\r\\n  /**\\r\\n   * @dev Emitted on repay()\\r\\n   * @param user The address of the user initiating the repay(), providing the funds\\r\\n   * @param reserve The address of the underlying asset of the reserve\\r\\n   * @param amount The amount repaid\\r\\n   * @param nftAsset The address of the underlying NFT used as collateral\\r\\n   * @param nftTokenId The token id of the underlying NFT used as collateral\\r\\n   * @param borrower The beneficiary of the repayment, getting his debt reduced\\r\\n   * @param loanId The loan ID of the NFT loans\\r\\n   **/\\r\\n  event Repay(\\r\\n    address user,\\r\\n    address indexed reserve,\\r\\n    uint256 amount,\\r\\n    address indexed nftAsset,\\r\\n    uint256 nftTokenId,\\r\\n    address indexed borrower,\\r\\n    uint256 loanId\\r\\n  );\\r\\n\\r\\n  /**\\r\\n   * @dev Emitted when a borrower's loan is auctioned.\\r\\n   * @param user The address of the user initiating the auction\\r\\n   * @param reserve The address of the underlying asset of the reserve\\r\\n   * @param bidPrice The price of the underlying reserve given by the bidder\\r\\n   * @param nftAsset The address of the underlying NFT used as collateral\\r\\n   * @param nftTokenId The token id of the underlying NFT used as collateral\\r\\n   * @param onBehalfOf The address that will be getting the NFT\\r\\n   * @param loanId The loan ID of the NFT loans\\r\\n   **/\\r\\n  event Auction(\\r\\n    address user,\\r\\n    address indexed reserve,\\r\\n    uint256 bidPrice,\\r\\n    address indexed nftAsset,\\r\\n    uint256 nftTokenId,\\r\\n    address onBehalfOf,\\r\\n    address indexed borrower,\\r\\n    uint256 loanId\\r\\n  );\\r\\n\\r\\n  /**\\r\\n   * @dev Emitted on redeem()\\r\\n   * @param user The address of the user initiating the redeem(), providing the funds\\r\\n   * @param reserve The address of the underlying asset of the reserve\\r\\n   * @param borrowAmount The borrow amount repaid\\r\\n   * @param nftAsset The address of the underlying NFT used as collateral\\r\\n   * @param nftTokenId The token id of the underlying NFT used as collateral\\r\\n   * @param loanId The loan ID of the NFT loans\\r\\n   **/\\r\\n  event Redeem(\\r\\n    address user,\\r\\n    address indexed reserve,\\r\\n    uint256 borrowAmount,\\r\\n    uint256 fineAmount,\\r\\n    address indexed nftAsset,\\r\\n    uint256 nftTokenId,\\r\\n    address indexed borrower,\\r\\n    uint256 loanId\\r\\n  );\\r\\n\\r\\n  /**\\r\\n   * @dev Emitted when a borrower's loan is liquidated.\\r\\n   * @param user The address of the user initiating the auction\\r\\n   * @param reserve The address of the underlying asset of the reserve\\r\\n   * @param repayAmount The amount of reserve repaid by the liquidator\\r\\n   * @param remainAmount The amount of reserve received by the borrower\\r\\n   * @param loanId The loan ID of the NFT loans\\r\\n   **/\\r\\n  event Liquidate(\\r\\n    address user,\\r\\n    address indexed reserve,\\r\\n    uint256 repayAmount,\\r\\n    uint256 remainAmount,\\r\\n    address indexed nftAsset,\\r\\n    uint256 nftTokenId,\\r\\n    address indexed borrower,\\r\\n    uint256 loanId\\r\\n  );\\r\\n\\r\\n  /**\\r\\n   * @dev Emitted when an NFT is purchased via Buyout.\\r\\n   * @param user The address of the user initiating the Buyout\\r\\n   * @param reserve The address of the underlying asset of the reserve\\r\\n   * @param buyoutAmount The amount of reserve paid by the buyer\\r\\n   * @param borrowAmount The loan borrowed amount\\r\\n   * @param nftAsset The amount of reserve received by the borrower\\r\\n   * @param nftTokenId The token id of the underlying NFT used as collateral\\r\\n   * @param borrower The loan borrower address\\r\\n   * @param onBehalfOf The receiver of the underlying NFT\\r\\n   * @param loanId The loan ID of the NFT loans\\r\\n   **/\\r\\n  event Buyout(\\r\\n    address user,\\r\\n    address indexed reserve,\\r\\n    uint256 buyoutAmount,\\r\\n    uint256 borrowAmount,\\r\\n    address indexed nftAsset,\\r\\n    uint256 nftTokenId,\\r\\n    address borrower,\\r\\n    address onBehalfOf,\\r\\n    uint256 indexed loanId\\r\\n  );\\r\\n\\r\\n  /**\\r\\n   * @dev Emitted when an NFT configuration is triggered.\\r\\n   * @param user The NFT holder\\r\\n   * @param nftAsset The NFT collection address\\r\\n   * @param nftTokenId The NFT token Id\\r\\n   **/\\r\\n  event ValuationApproved(address indexed user, address indexed nftAsset, uint256 indexed nftTokenId);\\r\\n  /**\\r\\n   * @dev Emitted when the pause is triggered.\\r\\n   */\\r\\n  event Paused();\\r\\n\\r\\n  /**\\r\\n   * @dev Emitted when the pause is lifted.\\r\\n   */\\r\\n  event Unpaused();\\r\\n\\r\\n  /**\\r\\n   * @dev Emitted when the pause time is updated.\\r\\n   */\\r\\n  event PausedTimeUpdated(uint256 startTime, uint256 durationTime);\\r\\n\\r\\n  /**\\r\\n   * @dev Emitted when the state of a reserve is updated. NOTE: This event is actually declared\\r\\n   * in the ReserveLogic library and emitted in the updateInterestRates() function. Since the function is internal,\\r\\n   * the event will actually be fired by the LendPool contract. The event is therefore replicated here so it\\r\\n   * gets added to the LendPool ABI\\r\\n   * @param reserve The address of the underlying asset of the reserve\\r\\n   * @param liquidityRate The new liquidity rate\\r\\n   * @param variableBorrowRate The new variable borrow rate\\r\\n   * @param liquidityIndex The new liquidity index\\r\\n   * @param variableBorrowIndex The new variable borrow index\\r\\n   **/\\r\\n  event ReserveDataUpdated(\\r\\n    address indexed reserve,\\r\\n    uint256 liquidityRate,\\r\\n    uint256 variableBorrowRate,\\r\\n    uint256 liquidityIndex,\\r\\n    uint256 variableBorrowIndex\\r\\n  );\\r\\n\\r\\n  /**\\r\\n  @dev Emitted after the address of the interest rate strategy contract has been updated\\r\\n  */\\r\\n  event ReserveInterestRateAddressChanged(address indexed asset, address indexed rateAddress);\\r\\n\\r\\n  /**\\r\\n  @dev Emitted after setting the configuration bitmap of the reserve as a whole\\r\\n  */\\r\\n  event ReserveConfigurationChanged(address indexed asset, uint256 configuration);\\r\\n\\r\\n  /**\\r\\n  @dev Emitted after setting the configuration bitmap of the NFT collection as a whole\\r\\n  */\\r\\n  event NftConfigurationChanged(address indexed asset, uint256 configuration);\\r\\n\\r\\n  /**\\r\\n  @dev Emitted after setting the configuration bitmap of the NFT as a whole\\r\\n  */\\r\\n  event NftConfigurationByIdChanged(address indexed asset, uint256 indexed nftTokenId, uint256 configuration);\\r\\n\\r\\n  /**\\r\\n  @dev Emitted after setting the new safe health factor value for redeems\\r\\n  */\\r\\n  event SafeHealthFactorUpdated(uint256 indexed newSafeHealthFactor);\\r\\n\\r\\n  /*//////////////////////////////////////////////////////////////\\r\\n                          RESCUERS\\r\\n  //////////////////////////////////////////////////////////////*/\\r\\n  /**\\r\\n   * @notice Returns current rescuer\\r\\n   * @return Rescuer's address\\r\\n   */\\r\\n  function rescuer() external view returns (address);\\r\\n\\r\\n  /**\\r\\n   * @notice Assigns the rescuer role to a given address.\\r\\n   * @param newRescuer New rescuer's address\\r\\n   */\\r\\n  function updateRescuer(address newRescuer) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Rescue tokens or ETH locked up in this contract.\\r\\n   * @param tokenContract ERC20 token contract address\\r\\n   * @param to        Recipient address\\r\\n   * @param amount    Amount to withdraw\\r\\n   * @param rescueETH bool to know if we want to rescue ETH or other token\\r\\n   */\\r\\n  function rescue(IERC20 tokenContract, address to, uint256 amount, bool rescueETH) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Rescue NFTs locked up in this contract.\\r\\n   * @param nftAsset ERC721 asset contract address\\r\\n   * @param tokenId ERC721 token id\\r\\n   * @param to Recipient address\\r\\n   */\\r\\n  function rescueNFT(IERC721Upgradeable nftAsset, uint256 tokenId, address to) external;\\r\\n\\r\\n  /*//////////////////////////////////////////////////////////////\\r\\n                        MAIN LOGIC\\r\\n  //////////////////////////////////////////////////////////////*/\\r\\n  /**\\r\\n   * @dev Deposits an `amount` of underlying asset into the reserve, receiving in return overlying uTokens.\\r\\n   * - E.g. User deposits 100 USDC and gets in return 100 uusdc\\r\\n   * @param reserve The address of the underlying asset to deposit\\r\\n   * @param amount The amount to be deposited\\r\\n   * @param onBehalfOf The address that will receive the uTokens, same as msg.sender if the user\\r\\n   *   wants to receive them on his own wallet, or a different address if the beneficiary of uTokens\\r\\n   *   is a different wallet\\r\\n   * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\r\\n   *   0 if the action is executed directly by the user, without any middle-man\\r\\n   **/\\r\\n  function deposit(address reserve, uint256 amount, address onBehalfOf, uint16 referralCode) external;\\r\\n\\r\\n  /**\\r\\n   * @dev Withdraws an `amount` of underlying asset from the reserve, burning the equivalent uTokens owned\\r\\n   * E.g. User has 100 uusdc, calls withdraw() and receives 100 USDC, burning the 100 uusdc\\r\\n   * @param reserve The address of the underlying asset to withdraw\\r\\n   * @param amount The underlying amount to be withdrawn\\r\\n   *   - Send the value type(uint256).max in order to withdraw the whole uToken balance\\r\\n   * @param to Address that will receive the underlying, same as msg.sender if the user\\r\\n   *   wants to receive it on his own wallet, or a different address if the beneficiary is a\\r\\n   *   different wallet\\r\\n   * @return The final amount withdrawn\\r\\n   **/\\r\\n  function withdraw(address reserve, uint256 amount, address to) external returns (uint256);\\r\\n\\r\\n  /**\\r\\n   * @dev Allows users to borrow a specific `amount` of the reserve underlying asset, provided that the borrower\\r\\n   * already deposited enough collateral\\r\\n   * - E.g. User borrows 100 USDC, receiving the 100 USDC in his wallet\\r\\n   *   and lock collateral asset in contract\\r\\n   * @param reserveAsset The address of the underlying asset to borrow\\r\\n   * @param amount The amount to be borrowed\\r\\n   * @param nftAsset The address of the underlying NFT used as collateral\\r\\n   * @param nftTokenId The token ID of the underlying NFT used as collateral\\r\\n   * @param onBehalfOf Address of the user who will receive the loan. Should be the address of the borrower itself\\r\\n   * calling the function if he wants to borrow against his own collateral, or the address of the credit delegator\\r\\n   * if he has been given credit delegation allowance\\r\\n   * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\r\\n   *   0 if the action is executed directly by the user, without any middle-man\\r\\n   **/\\r\\n  function borrow(\\r\\n    address reserveAsset,\\r\\n    uint256 amount,\\r\\n    address nftAsset,\\r\\n    uint256 nftTokenId,\\r\\n    address onBehalfOf,\\r\\n    uint16 referralCode\\r\\n  ) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Repays a borrowed `amount` on a specific reserve, burning the equivalent loan owned\\r\\n   * - E.g. User repays 100 USDC, burning loan and receives collateral asset\\r\\n   * @param nftAsset The address of the underlying NFT used as collateral\\r\\n   * @param nftTokenId The token ID of the underlying NFT used as collateral\\r\\n   * @param amount The amount to repay\\r\\n   * @return The final amount repaid, loan is burned or not\\r\\n   **/\\r\\n  function repay(address nftAsset, uint256 nftTokenId, uint256 amount) external returns (uint256, bool);\\r\\n\\r\\n  /**\\r\\n   * @dev Function to auction a non-healthy position collateral-wise\\r\\n   * - The caller (liquidator) want to buy collateral asset of the user getting liquidated\\r\\n   * @param nftAsset The address of the underlying NFT used as collateral\\r\\n   * @param nftTokenId The token ID of the underlying NFT used as collateral\\r\\n   * @param bidPrice The bid price of the liquidator want to buy the underlying NFT\\r\\n   * @param onBehalfOf Address of the user who will get the underlying NFT, same as msg.sender if the user\\r\\n   *   wants to receive them on his own wallet, or a different address if the beneficiary of NFT\\r\\n   *   is a different wallet\\r\\n   **/\\r\\n  function auction(address nftAsset, uint256 nftTokenId, uint256 bidPrice, address onBehalfOf) external;\\r\\n\\r\\n  /**\\r\\n   * @dev Function to buyout a non-healthy position collateral-wise\\r\\n   * - The bidder want to buy collateral asset of the user getting liquidated\\r\\n   * @param nftAsset The address of the underlying NFT used as collateral\\r\\n   * @param nftTokenId The token ID of the underlying NFT used as collateral\\r\\n   * @param buyoutAmount The buyout price of the underlying NFT\\r\\n   * @param onBehalfOf Address of the user who will get the underlying NFT, same as msg.sender if the user\\r\\n   *   wants to receive them on his own wallet, or a different address if the beneficiary of NFT\\r\\n   *   is a different wallet\\r\\n   **/\\r\\n  function buyout(address nftAsset, uint256 nftTokenId, uint256 buyoutAmount, address onBehalfOf) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Redeem a NFT loan which state is in Auction\\r\\n   * - E.g. User repays 100 USDC, burning loan and receives collateral asset\\r\\n   * @param nftAsset The address of the underlying NFT used as collateral\\r\\n   * @param nftTokenId The token ID of the underlying NFT used as collateral\\r\\n   * @param amount The amount to repay the debt\\r\\n   * @param bidFine The amount of bid fine\\r\\n   **/\\r\\n  function redeem(address nftAsset, uint256 nftTokenId, uint256 amount, uint256 bidFine) external returns (uint256);\\r\\n\\r\\n  /**\\r\\n   * @dev Function to liquidate a non-healthy position collateral-wise\\r\\n   * - The caller (liquidator) buy collateral asset of the user getting liquidated, and receives\\r\\n   *   the collateral asset\\r\\n   * @param nftAsset The address of the underlying NFT used as collateral\\r\\n   * @param nftTokenId The token ID of the underlying NFT used as collateral\\r\\n   **/\\r\\n  function liquidate(address nftAsset, uint256 nftTokenId, uint256 amount) external returns (uint256);\\r\\n\\r\\n  /**\\r\\n   * @dev Approves valuation of an NFT for a user\\r\\n   * @dev Just the NFT holder can trigger the configuration\\r\\n   * @param nftAsset The address of the underlying NFT used as collateral\\r\\n   * @param nftTokenId The token ID of the underlying NFT used as collateral\\r\\n   **/\\r\\n  function approveValuation(address nftAsset, uint256 nftTokenId) external payable;\\r\\n\\r\\n  /**\\r\\n   * @dev Validates and finalizes an uToken transfer\\r\\n   * - Only callable by the overlying uToken of the `asset`\\r\\n   * @param asset The address of the underlying asset of the uToken\\r\\n   * @param from The user from which the uTokens are transferred\\r\\n   * @param to The user receiving the uTokens\\r\\n   * @param amount The amount being transferred/withdrawn\\r\\n   * @param balanceFromBefore The uToken balance of the `from` user before the transfer\\r\\n   * @param balanceToBefore The uToken balance of the `to` user before the transfer\\r\\n   */\\r\\n  function finalizeTransfer(\\r\\n    address asset,\\r\\n    address from,\\r\\n    address to,\\r\\n    uint256 amount,\\r\\n    uint256 balanceFromBefore,\\r\\n    uint256 balanceToBefore\\r\\n  ) external view;\\r\\n\\r\\n  /**\\r\\n   * @dev Initializes a reserve, activating it, assigning an uToken and nft loan and an\\r\\n   * interest rate strategy\\r\\n   * - Only callable by the LendPoolConfigurator contract\\r\\n   * @param asset The address of the underlying asset of the reserve\\r\\n   * @param uTokenAddress The address of the uToken that will be assigned to the reserve\\r\\n   * @param debtTokenAddress The address of the debtToken that will be assigned to the reserve\\r\\n   * @param interestRateAddress The address of the interest rate strategy contract\\r\\n   **/\\r\\n  function initReserve(\\r\\n    address asset,\\r\\n    address uTokenAddress,\\r\\n    address debtTokenAddress,\\r\\n    address interestRateAddress\\r\\n  ) external;\\r\\n\\r\\n  /**\\r\\n   * @dev Initializes a nft, activating it, assigning nft loan and an\\r\\n   * interest rate strategy\\r\\n   * - Only callable by the LendPoolConfigurator contract\\r\\n   * @param asset The address of the underlying asset of the nft\\r\\n   **/\\r\\n  function initNft(address asset, address uNftAddress) external;\\r\\n\\r\\n  /**\\r\\n   * @dev Transfer the last bid amount to the bidder\\r\\n   * @param reserveAsset address of the reserver asset (WETH)\\r\\n   * @param bidder the bidder address\\r\\n   * @param bidAmount  the bid amount\\r\\n   */\\r\\n  function transferBidAmount(address reserveAsset, address bidder, uint256 bidAmount) external;\\r\\n\\r\\n  /*//////////////////////////////////////////////////////////////\\r\\n                        GETTERS & SETTERS\\r\\n  //////////////////////////////////////////////////////////////*/\\r\\n  /**\\r\\n   * @dev Returns the cached LendPoolAddressesProvider connected to this contract\\r\\n   **/\\r\\n\\r\\n  function getAddressesProvider() external view returns (ILendPoolAddressesProvider);\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the normalized income normalized income of the reserve\\r\\n   * @param asset The address of the underlying asset of the reserve\\r\\n   * @return The reserve's normalized income\\r\\n   */\\r\\n  function getReserveNormalizedIncome(address asset) external view returns (uint256);\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the normalized variable debt per unit of asset\\r\\n   * @param asset The address of the underlying asset of the reserve\\r\\n   * @return The reserve normalized variable debt\\r\\n   */\\r\\n  function getReserveNormalizedVariableDebt(address asset) external view returns (uint256);\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the state and configuration of the reserve\\r\\n   * @param asset The address of the underlying asset of the reserve\\r\\n   * @return The state of the reserve\\r\\n   **/\\r\\n  function getReserveData(address asset) external view returns (DataTypes.ReserveData memory);\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the list of the initialized reserves\\r\\n   * @return the list of initialized reserves\\r\\n   **/\\r\\n  function getReservesList() external view returns (address[] memory);\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the state and configuration of the nft\\r\\n   * @param asset The address of the underlying asset of the nft\\r\\n   * @return The status of the nft\\r\\n   **/\\r\\n  function getNftData(address asset) external view returns (DataTypes.NftData memory);\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the configuration of the nft asset\\r\\n   * @param asset The address of the underlying asset of the nft\\r\\n   * @param tokenId NFT asset ID\\r\\n   * @return The configuration of the nft asset\\r\\n   **/\\r\\n  function getNftAssetConfig(\\r\\n    address asset,\\r\\n    uint256 tokenId\\r\\n  ) external view returns (DataTypes.NftConfigurationMap memory);\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the loan data of the NFT\\r\\n   * @param nftAsset The address of the NFT\\r\\n   * @param reserveAsset The address of the Reserve\\r\\n   * @return totalCollateralInETH the total collateral in ETH of the NFT\\r\\n   * @return totalCollateralInReserve the total collateral in Reserve of the NFT\\r\\n   * @return availableBorrowsInETH the borrowing power in ETH of the NFT\\r\\n   * @return availableBorrowsInReserve the borrowing power in Reserve of the NFT\\r\\n   * @return ltv the loan to value of the user\\r\\n   * @return liquidationThreshold the liquidation threshold of the NFT\\r\\n   * @return liquidationBonus the liquidation bonus of the NFT\\r\\n   **/\\r\\n  function getNftCollateralData(\\r\\n    address nftAsset,\\r\\n    uint256 nftTokenId,\\r\\n    address reserveAsset\\r\\n  )\\r\\n    external\\r\\n    view\\r\\n    returns (\\r\\n      uint256 totalCollateralInETH,\\r\\n      uint256 totalCollateralInReserve,\\r\\n      uint256 availableBorrowsInETH,\\r\\n      uint256 availableBorrowsInReserve,\\r\\n      uint256 ltv,\\r\\n      uint256 liquidationThreshold,\\r\\n      uint256 liquidationBonus\\r\\n    );\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the debt data of the NFT\\r\\n   * @param nftAsset The address of the NFT\\r\\n   * @param nftTokenId The token id of the NFT\\r\\n   * @return loanId the loan id of the NFT\\r\\n   * @return reserveAsset the address of the Reserve\\r\\n   * @return totalCollateral the total power of the NFT\\r\\n   * @return totalDebt the total debt of the NFT\\r\\n   * @return availableBorrows the borrowing power left of the NFT\\r\\n   * @return healthFactor the current health factor of the NFT\\r\\n   **/\\r\\n  function getNftDebtData(\\r\\n    address nftAsset,\\r\\n    uint256 nftTokenId\\r\\n  )\\r\\n    external\\r\\n    view\\r\\n    returns (\\r\\n      uint256 loanId,\\r\\n      address reserveAsset,\\r\\n      uint256 totalCollateral,\\r\\n      uint256 totalDebt,\\r\\n      uint256 availableBorrows,\\r\\n      uint256 healthFactor\\r\\n    );\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the auction data of the NFT\\r\\n   * @param nftAsset The address of the NFT\\r\\n   * @param nftTokenId The token id of the NFT\\r\\n   * @return loanId the loan id of the NFT\\r\\n   * @return bidderAddress the highest bidder address of the loan\\r\\n   * @return bidPrice the highest bid price in Reserve of the loan\\r\\n   * @return bidBorrowAmount the borrow amount in Reserve of the loan\\r\\n   * @return bidFine the penalty fine of the loan\\r\\n   **/\\r\\n  function getNftAuctionData(\\r\\n    address nftAsset,\\r\\n    uint256 nftTokenId\\r\\n  )\\r\\n    external\\r\\n    view\\r\\n    returns (uint256 loanId, address bidderAddress, uint256 bidPrice, uint256 bidBorrowAmount, uint256 bidFine);\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the list of nft addresses in the protocol\\r\\n   **/\\r\\n  function getNftsList() external view returns (address[] memory);\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the configuration of the reserve\\r\\n   * @param asset The address of the underlying asset of the reserve\\r\\n   * @return The configuration of the reserve\\r\\n   **/\\r\\n  function getReserveConfiguration(address asset) external view returns (DataTypes.ReserveConfigurationMap memory);\\r\\n\\r\\n  /**\\r\\n   * @dev Sets the configuration bitmap of the reserve as a whole\\r\\n   * - Only callable by the LendPoolConfigurator contract\\r\\n   * @param asset The address of the underlying asset of the reserve\\r\\n   * @param configuration The new configuration bitmap\\r\\n   **/\\r\\n  function setReserveConfiguration(address asset, uint256 configuration) external;\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the configuration of the NFT\\r\\n   * @param asset The address of the asset of the NFT\\r\\n   * @return The configuration of the NFT\\r\\n   **/\\r\\n  function getNftConfiguration(address asset) external view returns (DataTypes.NftConfigurationMap memory);\\r\\n\\r\\n  /**\\r\\n   * @dev Sets the configuration bitmap of the NFT as a whole\\r\\n   * - Only callable by the LendPoolConfigurator contract\\r\\n   * @param asset The address of the asset of the NFT\\r\\n   * @param configuration The new configuration bitmap\\r\\n   **/\\r\\n  function setNftConfiguration(address asset, uint256 configuration) external;\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the configuration of the NFT\\r\\n   * @param asset The address of the asset of the NFT\\r\\n   * @param tokenId the Token Id of the NFT\\r\\n   * @return The configuration of the NFT\\r\\n   **/\\r\\n  function getNftConfigByTokenId(\\r\\n    address asset,\\r\\n    uint256 tokenId\\r\\n  ) external view returns (DataTypes.NftConfigurationMap memory);\\r\\n\\r\\n  /**\\r\\n   * @dev Sets the configuration bitmap of the NFT as a whole\\r\\n   * - Only callable by the LendPoolConfigurator contract\\r\\n   * @param asset The address of the asset of the NFT\\r\\n   * @param nftTokenId the NFT tokenId\\r\\n   * @param configuration The new configuration bitmap\\r\\n   **/\\r\\n  function setNftConfigByTokenId(address asset, uint256 nftTokenId, uint256 configuration) external;\\r\\n\\r\\n  /**\\r\\n   * @dev Returns if the LendPool is paused\\r\\n   */\\r\\n  function paused() external view returns (bool);\\r\\n\\r\\n  /**\\r\\n   * @dev Set the _pause state of a reserve\\r\\n   * - Only callable by the LendPool contract\\r\\n   * @param val `true` to pause the reserve, `false` to un-pause it\\r\\n   */\\r\\n  function setPause(bool val) external;\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the _pause time of a reserve\\r\\n   */\\r\\n  function getPausedTime() external view returns (uint256, uint256);\\r\\n\\r\\n  /**\\r\\n   * @dev Set the _pause state of the auctions\\r\\n   * @param startTime when it will start to pause\\r\\n   * @param durationTime how long it will pause\\r\\n   */\\r\\n  function setPausedTime(uint256 startTime, uint256 durationTime) external;\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the bidDelta percentage - debt compounded + fees.\\r\\n   **/\\r\\n  function getBidDelta() external view returns (uint256);\\r\\n\\r\\n  /**\\r\\n   * @dev sets the bidDelta percentage - debt compounded + fees.\\r\\n   * @param bidDelta the amount to charge to the user\\r\\n   **/\\r\\n  function setBidDelta(uint256 bidDelta) external;\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the max timeframe between NFT config triggers and borrows\\r\\n   **/\\r\\n  function getTimeframe() external view returns (uint256);\\r\\n\\r\\n  /**\\r\\n   * @dev Sets the max timeframe between NFT config triggers and borrows\\r\\n   * @param timeframe the number of seconds for the timeframe\\r\\n   **/\\r\\n  function setTimeframe(uint256 timeframe) external;\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the configFee amount\\r\\n   **/\\r\\n  function getConfigFee() external view returns (uint256);\\r\\n\\r\\n  /**\\r\\n   * @dev sets the fee for configuringNFTAsCollateral\\r\\n   * @param configFee the amount to charge to the user\\r\\n   **/\\r\\n  function setConfigFee(uint256 configFee) external;\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the auctionDurationConfigFee amount\\r\\n   **/\\r\\n  function getAuctionDurationConfigFee() external view returns (uint256);\\r\\n\\r\\n  /**\\r\\n   * @dev sets the fee to be charged on first bid on nft\\r\\n   * @param auctionDurationConfigFee the amount to charge to the user\\r\\n   **/\\r\\n  function setAuctionDurationConfigFee(uint256 auctionDurationConfigFee) external;\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the maximum number of reserves supported to be listed in this LendPool\\r\\n   */\\r\\n  function getMaxNumberOfReserves() external view returns (uint256);\\r\\n\\r\\n  /**\\r\\n   * @dev Sets the max number of reserves in the protocol\\r\\n   * @param val the value to set the max number of reserves\\r\\n   **/\\r\\n  function setMaxNumberOfReserves(uint256 val) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Returns current safe health factor\\r\\n   * @return The safe health factor value\\r\\n   */\\r\\n  function getSafeHealthFactor() external view returns (uint256);\\r\\n\\r\\n  /**\\r\\n   * @notice Update the safe health factor value for redeems\\r\\n   * @param newSafeHealthFactor New safe health factor value\\r\\n   */\\r\\n  function updateSafeHealthFactor(uint256 newSafeHealthFactor) external;\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the maximum number of nfts supported to be listed in this LendPool\\r\\n   */\\r\\n  function getMaxNumberOfNfts() external view returns (uint256);\\r\\n\\r\\n  /**\\r\\n   * @dev Sets the max number of NFTs in the protocol\\r\\n   * @param val the value to set the max number of NFTs\\r\\n   **/\\r\\n  function setMaxNumberOfNfts(uint256 val) external;\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the fee percentage for liquidations\\r\\n   **/\\r\\n  function getLiquidateFeePercentage() external view returns (uint256);\\r\\n\\r\\n  /**\\r\\n   * @dev Sets the fee percentage for liquidations\\r\\n   * @param percentage the fee percentage to be set\\r\\n   **/\\r\\n  function setLiquidateFeePercentage(uint256 percentage) external;\\r\\n\\r\\n  /**\\r\\n   * @dev Updates the address of the interest rate strategy contract\\r\\n   * - Only callable by the LendPoolConfigurator contract\\r\\n   * @param asset The address of the underlying asset of the reserve\\r\\n   * @param rateAddress The address of the interest rate strategy contract\\r\\n   **/\\r\\n  function setReserveInterestRateAddress(address asset, address rateAddress) external;\\r\\n\\r\\n  /**\\r\\n   * @dev Sets the max supply and token ID for a given asset\\r\\n   * @param asset The address to set the data\\r\\n   * @param maxSupply The max supply value\\r\\n   * @param maxTokenId The max token ID value\\r\\n   **/\\r\\n  function setNftMaxSupplyAndTokenId(address asset, uint256 maxSupply, uint256 maxTokenId) external;\\r\\n\\r\\n  /**\\r\\n   * @dev Updates the liquidity cumulative index and the variable borrow index.\\r\\n   * @param reserve the reserve object\\r\\n   **/\\r\\n  function updateReserveState(address reserve) external;\\r\\n\\r\\n  /**\\r\\n   * @dev Updates the reserve current stable borrow rate, the current variable borrow rate and the current liquidity rate\\r\\n   * @param reserve The address of the reserve to be updated\\r\\n   **/\\r\\n  function updateReserveInterestRates(address reserve) external;\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interfaces/ILendPoolAddressesProvider.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\r\\npragma solidity 0.8.4;\\r\\n\\r\\n/**\\r\\n * @title LendPoolAddressesProvider contract\\r\\n * @dev Main registry of addresses part of or connected to the protocol, including permissioned roles\\r\\n * - Acting also as factory of proxies and admin of those, so with right to change its implementations\\r\\n * - Owned by the Unlockd Governance\\r\\n * @author BendDao; Forked and edited by Unlockd\\r\\n **/\\r\\ninterface ILendPoolAddressesProvider {\\r\\n  event MarketIdSet(string newMarketId);\\r\\n  event LendPoolUpdated(address indexed newAddress, bytes encodedCallData);\\r\\n  event ConfigurationAdminUpdated(address indexed newAddress);\\r\\n  event EmergencyAdminUpdated(address indexed newAddress);\\r\\n  event LendPoolConfiguratorUpdated(address indexed newAddress, bytes encodedCallData);\\r\\n  event ReserveOracleUpdated(address indexed newAddress);\\r\\n  event NftOracleUpdated(address indexed newAddress);\\r\\n  event LendPoolLoanUpdated(address indexed newAddress, bytes encodedCallData);\\r\\n  event ProxyCreated(bytes32 id, address indexed newAddress);\\r\\n  event AddressSet(bytes32 id, address indexed newAddress, bool hasProxy, bytes encodedCallData);\\r\\n  event UNFTRegistryUpdated(address indexed newAddress);\\r\\n  event IncentivesControllerUpdated(address indexed newAddress);\\r\\n  event UIDataProviderUpdated(address indexed newAddress);\\r\\n  event UnlockdDataProviderUpdated(address indexed newAddress);\\r\\n  event WalletBalanceProviderUpdated(address indexed newAddress);\\r\\n  event LendPoolLiquidatorUpdated(address indexed newAddress);\\r\\n  event LtvManagerUpdated(address indexed newAddress);\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the id of the Unlockd market to which this contracts points to\\r\\n   * @return The market id\\r\\n   **/\\r\\n  function getMarketId() external view returns (string memory);\\r\\n\\r\\n  /**\\r\\n   * @dev Allows to set the market which this LendPoolAddressesProvider represents\\r\\n   * @param marketId The market id\\r\\n   */\\r\\n  function setMarketId(string calldata marketId) external;\\r\\n\\r\\n  /**\\r\\n   * @dev Sets an address for an id replacing the address saved in the addresses map\\r\\n   * IMPORTANT Use this function carefully, as it will do a hard replacement\\r\\n   * @param id The id\\r\\n   * @param newAddress The address to set\\r\\n   */\\r\\n  function setAddress(bytes32 id, address newAddress) external;\\r\\n\\r\\n  /**\\r\\n   * @dev General function to update the implementation of a proxy registered with\\r\\n   * certain `id`. If there is no proxy registered, it will instantiate one and\\r\\n   * set as implementation the `implementationAddress`\\r\\n   * IMPORTANT Use this function carefully, only for ids that don't have an explicit\\r\\n   * setter function, in order to avoid unexpected consequences\\r\\n   * @param id The id\\r\\n   * @param impl The address of the new implementation\\r\\n   */\\r\\n  function setAddressAsProxy(bytes32 id, address impl, bytes memory encodedCallData) external;\\r\\n\\r\\n  /**\\r\\n   * @dev Returns an address by id\\r\\n   * @return The address\\r\\n   */\\r\\n  function getAddress(bytes32 id) external view returns (address);\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the address of the LendPool proxy\\r\\n   * @return The LendPool proxy address\\r\\n   **/\\r\\n  function getLendPool() external view returns (address);\\r\\n\\r\\n  /**\\r\\n   * @dev Updates the implementation of the LendPool, or creates the proxy\\r\\n   * setting the new `pool` implementation on the first time calling it\\r\\n   * @param pool The new LendPool implementation\\r\\n   * @param encodedCallData calldata to execute\\r\\n   **/\\r\\n  function setLendPoolImpl(address pool, bytes memory encodedCallData) external;\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the address of the LendPoolConfigurator proxy\\r\\n   * @return The LendPoolConfigurator proxy address\\r\\n   **/\\r\\n  function getLendPoolConfigurator() external view returns (address);\\r\\n\\r\\n  /**\\r\\n   * @dev Updates the implementation of the LendPoolConfigurator, or creates the proxy\\r\\n   * setting the new `configurator` implementation on the first time calling it\\r\\n   * @param configurator The new LendPoolConfigurator implementation\\r\\n   * @param encodedCallData calldata to execute\\r\\n   **/\\r\\n  function setLendPoolConfiguratorImpl(address configurator, bytes memory encodedCallData) external;\\r\\n\\r\\n  /**\\r\\n   * @dev returns the address of the LendPool admin\\r\\n   * @return the LendPoolAdmin address\\r\\n   **/\\r\\n  function getPoolAdmin() external view returns (address);\\r\\n\\r\\n  /**\\r\\n   * @dev sets the address of the LendPool admin\\r\\n   * @param admin the LendPoolAdmin address\\r\\n   **/\\r\\n  function setPoolAdmin(address admin) external;\\r\\n\\r\\n  /**\\r\\n   * @dev returns the address of the emergency admin\\r\\n   * @return the EmergencyAdmin address\\r\\n   **/\\r\\n  function getEmergencyAdmin() external view returns (address);\\r\\n\\r\\n  /**\\r\\n   * @dev sets the address of the emergency admin\\r\\n   * @param admin the EmergencyAdmin address\\r\\n   **/\\r\\n  function setEmergencyAdmin(address admin) external;\\r\\n\\r\\n  /**\\r\\n   * @dev returns the address of the reserve oracle\\r\\n   * @return the ReserveOracle address\\r\\n   **/\\r\\n  function getReserveOracle() external view returns (address);\\r\\n\\r\\n  /**\\r\\n   * @dev sets the address of the reserve oracle\\r\\n   * @param reserveOracle the ReserveOracle address\\r\\n   **/\\r\\n  function setReserveOracle(address reserveOracle) external;\\r\\n\\r\\n  /**\\r\\n   * @dev returns the address of the NFT oracle\\r\\n   * @return the NFTOracle address\\r\\n   **/\\r\\n  function getNFTOracle() external view returns (address);\\r\\n\\r\\n  /**\\r\\n   * @dev sets the address of the NFT oracle\\r\\n   * @param nftOracle the NFTOracle address\\r\\n   **/\\r\\n  function setNFTOracle(address nftOracle) external;\\r\\n\\r\\n  /**\\r\\n   * @dev returns the address of the lendpool loan\\r\\n   * @return the LendPoolLoan address\\r\\n   **/\\r\\n  function getLendPoolLoan() external view returns (address);\\r\\n\\r\\n  /**\\r\\n   * @dev sets the address of the lendpool loan\\r\\n   * @param loan the LendPoolLoan address\\r\\n   * @param encodedCallData calldata to execute\\r\\n   **/\\r\\n  function setLendPoolLoanImpl(address loan, bytes memory encodedCallData) external;\\r\\n\\r\\n  /**\\r\\n   * @dev returns the address of the UNFT Registry\\r\\n   * @return the UNFTRegistry address\\r\\n   **/\\r\\n  function getUNFTRegistry() external view returns (address);\\r\\n\\r\\n  /**\\r\\n   * @dev sets the address of the UNFT registry\\r\\n   * @param factory the UNFTRegistry address\\r\\n   **/\\r\\n  function setUNFTRegistry(address factory) external;\\r\\n\\r\\n  /**\\r\\n   * @dev returns the address of the incentives controller\\r\\n   * @return the IncentivesController address\\r\\n   **/\\r\\n  function getIncentivesController() external view returns (address);\\r\\n\\r\\n  /**\\r\\n   * @dev sets the address of the incentives controller\\r\\n   * @param controller the IncentivesController address\\r\\n   **/\\r\\n  function setIncentivesController(address controller) external;\\r\\n\\r\\n  /**\\r\\n   * @dev returns the address of the UI data provider\\r\\n   * @return the UIDataProvider address\\r\\n   **/\\r\\n  function getUIDataProvider() external view returns (address);\\r\\n\\r\\n  /**\\r\\n   * @dev sets the address of the UI data provider\\r\\n   * @param provider the UIDataProvider address\\r\\n   **/\\r\\n  function setUIDataProvider(address provider) external;\\r\\n\\r\\n  /**\\r\\n   * @dev returns the address of the Unlockd data provider\\r\\n   * @return the UnlockdDataProvider address\\r\\n   **/\\r\\n  function getUnlockdDataProvider() external view returns (address);\\r\\n\\r\\n  /**\\r\\n   * @dev sets the address of the Unlockd data provider\\r\\n   * @param provider the UnlockdDataProvider address\\r\\n   **/\\r\\n  function setUnlockdDataProvider(address provider) external;\\r\\n\\r\\n  /**\\r\\n   * @dev returns the address of the wallet balance provider\\r\\n   * @return the WalletBalanceProvider address\\r\\n   **/\\r\\n  function getWalletBalanceProvider() external view returns (address);\\r\\n\\r\\n  /**\\r\\n   * @dev sets the address of the wallet balance provider\\r\\n   * @param provider the WalletBalanceProvider address\\r\\n   **/\\r\\n  function setWalletBalanceProvider(address provider) external;\\r\\n\\r\\n  /**\\r\\n   * @dev returns the address of the LendPool liquidator contract\\r\\n   **/\\r\\n  function getLendPoolLiquidator() external view returns (address);\\r\\n\\r\\n  /**\\r\\n   * @dev sets the address of the LendPool liquidator contract\\r\\n   * @param liquidator the LendPool liquidator address\\r\\n   **/\\r\\n  function setLendPoolLiquidator(address liquidator) external;\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interfaces/ILendPoolConfigurator.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.4;\\n\\ninterface ILendPoolConfigurator {\\n  struct ConfigReserveInput {\\n    address asset;\\n    uint256 reserveFactor;\\n  }\\n\\n  struct ConfigNftInput {\\n    address asset;\\n    uint256 tokenId;\\n    uint256 baseLTV;\\n    uint256 liquidationThreshold;\\n    uint256 liquidationBonus;\\n    uint256 redeemDuration;\\n    uint256 auctionDuration;\\n    uint256 redeemFine;\\n    uint256 redeemThreshold;\\n    uint256 minBidFine;\\n    uint256 maxSupply;\\n    uint256 maxTokenId;\\n  }\\n\\n  struct ConfigNftAsCollateralInput {\\n    address asset;\\n    uint256 nftTokenId;\\n    uint256 newPrice;\\n    uint256 ltv;\\n    uint256 liquidationThreshold;\\n    uint256 redeemThreshold;\\n    uint256 liquidationBonus;\\n    uint256 redeemDuration;\\n    uint256 auctionDuration;\\n    uint256 redeemFine;\\n    uint256 minBidFine;\\n  }\\n\\n  /**\\n   * @dev Emitted when a reserve is initialized.\\n   * @param asset The address of the underlying asset of the reserve\\n   * @param uToken The address of the associated uToken contract\\n   * @param debtToken The address of the associated debtToken contract\\n   * @param interestRateAddress The address of the interest rate strategy for the reserve\\n   **/\\n  event ReserveInitialized(\\n    address indexed asset,\\n    address indexed uToken,\\n    address debtToken,\\n    address interestRateAddress\\n  );\\n\\n  /**\\n   * @dev Emitted when borrowing is enabled on a reserve\\n   * @param asset The address of the underlying asset of the reserve\\n   **/\\n  event BorrowingEnabledOnReserve(address indexed asset);\\n\\n  /**\\n   * @dev Emitted when borrowing is disabled on a reserve\\n   * @param asset The address of the underlying asset of the reserve\\n   **/\\n  event BorrowingDisabledOnReserve(address indexed asset);\\n\\n  /**\\n   * @dev Emitted when a reserve is activated\\n   * @param asset The address of the underlying asset of the reserve\\n   **/\\n  event ReserveActivated(address indexed asset);\\n\\n  /**\\n   * @dev Emitted when a reserve is deactivated\\n   * @param asset The address of the underlying asset of the reserve\\n   **/\\n  event ReserveDeactivated(address indexed asset);\\n\\n  /**\\n   * @dev Emitted when a reserve is frozen\\n   * @param asset The address of the underlying asset of the reserve\\n   **/\\n  event ReserveFrozen(address indexed asset);\\n\\n  /**\\n   * @dev Emitted when a reserve is unfrozen\\n   * @param asset The address of the underlying asset of the reserve\\n   **/\\n  event ReserveUnfrozen(address indexed asset);\\n\\n  /**\\n   * @dev Emitted when a reserve factor is updated\\n   * @param asset The address of the underlying asset of the reserve\\n   * @param factor The new reserve factor\\n   **/\\n  event ReserveFactorChanged(address indexed asset, uint256 factor);\\n\\n  /**\\n   * @dev Emitted when the reserve decimals are updated\\n   * @param asset The address of the underlying asset of the reserve\\n   * @param decimals The new decimals\\n   **/\\n  event ReserveDecimalsChanged(address indexed asset, uint256 decimals);\\n\\n  /**\\n   * @dev Emitted when a reserve interest strategy contract is updated\\n   * @param asset The address of the underlying asset of the reserve\\n   * @param strategy The new address of the interest strategy contract\\n   **/\\n  event ReserveInterestRateChanged(address indexed asset, address strategy);\\n\\n  /**\\n   * @dev Emitted when a nft is initialized.\\n   * @param asset The address of the underlying asset of the nft\\n   * @param uNft The address of the associated uNFT contract\\n   **/\\n  event NftInitialized(address indexed asset, address indexed uNft);\\n\\n  /**\\n   * @dev Emitted when the collateralization risk parameters for the specified NFT are updated.\\n   * @param asset The address of the underlying asset of the NFT\\n   * @param tokenId token ID\\n   * @param ltv The loan to value of the asset when used as NFT\\n   * @param liquidationThreshold The threshold at which loans using this asset as NFT will be considered undercollateralized\\n   * @param liquidationBonus The bonus liquidators receive to liquidate this asset\\n   **/\\n  event NftConfigurationChanged(\\n    address indexed asset,\\n    uint256 indexed tokenId,\\n    uint256 ltv,\\n    uint256 liquidationThreshold,\\n    uint256 liquidationBonus\\n  );\\n\\n  /**\\n   * @dev Emitted when a NFT is activated\\n   * @param asset The address of the underlying asset of the NFT\\n   **/\\n  event NftActivated(address indexed asset);\\n\\n  /**\\n   * @dev Emitted when a NFT is deactivated\\n   * @param asset The address of the underlying asset of the NFT\\n   **/\\n  event NftDeactivated(address indexed asset);\\n\\n  /**\\n   * @dev Emitted when a NFT token is activated\\n   * @param asset The address of the underlying asset of the NFT\\n   * @param nftTokenId The token id of the underlying asset of the NFT\\n   **/\\n  event NftTokenActivated(address indexed asset, uint256 indexed nftTokenId);\\n\\n  /**\\n   * @dev Emitted when a NFT token is deactivated\\n   * @param asset The address of the underlying asset of the NFT\\n   * @param nftTokenId The token id of the underlying asset of the NFT\\n   **/\\n  event NftTokenDeactivated(address indexed asset, uint256 indexed nftTokenId);\\n\\n  /**\\n   * @dev Emitted when a NFT is frozen\\n   * @param asset The address of the underlying asset of the NFT\\n   **/\\n  event NftFrozen(address indexed asset);\\n\\n  /**\\n   * @dev Emitted when a NFT is unfrozen\\n   * @param asset The address of the underlying asset of the NFT\\n   **/\\n  event NftUnfrozen(address indexed asset);\\n\\n  /**\\n   * @dev Emitted when a NFT is frozen\\n   * @param asset The address of the underlying asset of the NFT\\n   * @param nftTokenId The token id of the underlying asset of the NFT\\n   **/\\n  event NftTokenFrozen(address indexed asset, uint256 indexed nftTokenId);\\n\\n  /**\\n   * @dev Emitted when a NFT is unfrozen\\n   * @param asset The address of the underlying asset of the NFT\\n   * @param nftTokenId The token id of the underlying asset of the NFT\\n   **/\\n  event NftTokenUnfrozen(address indexed asset, uint256 indexed nftTokenId);\\n\\n  /**\\n   * @dev Emitted when a redeem duration is updated\\n   * @param asset The address of the underlying asset of the NFT\\n   * @param tokenId token ID\\n   * @param redeemDuration The new redeem duration\\n   * @param auctionDuration The new redeem duration\\n   * @param redeemFine The new redeem fine\\n   **/\\n  event NftAuctionChanged(\\n    address indexed asset,\\n    uint256 indexed tokenId,\\n    uint256 redeemDuration,\\n    uint256 auctionDuration,\\n    uint256 redeemFine\\n  );\\n  /**\\n   * @dev Emitted when a redeem threshold is modified\\n   * @param asset The address of the underlying asset of the NFT\\n   * @param tokenId token ID\\n   * @param redeemThreshold The new redeem threshold\\n   **/\\n  event NftRedeemThresholdChanged(address indexed asset, uint256 indexed tokenId, uint256 redeemThreshold);\\n  /**\\n   * @dev Emitted when a min bid fine is modified\\n   * @param asset The address of the underlying asset of the NFT\\n   * @param tokenId token ID\\n   * @param minBidFine The new min bid fine\\n   **/\\n  event NftMinBidFineChanged(address indexed asset, uint256 indexed tokenId, uint256 minBidFine);\\n  /**\\n   * @dev Emitted when an asset's max supply and max token Id is modified\\n   * @param asset The address of the underlying asset of the NFT\\n   * @param maxSupply The new max supply\\n   * @param maxTokenId The new max token Id\\n   **/\\n  event NftMaxSupplyAndTokenIdChanged(address indexed asset, uint256 maxSupply, uint256 maxTokenId);\\n\\n  /**\\n   * @dev Emitted when an uToken implementation is upgraded\\n   * @param asset The address of the underlying asset of the reserve\\n   * @param proxy The uToken proxy address\\n   * @param implementation The new uToken implementation\\n   **/\\n  event UTokenUpgraded(address indexed asset, address indexed proxy, address indexed implementation);\\n\\n  /**\\n   * @dev Emitted when the implementation of a debt token is upgraded\\n   * @param asset The address of the underlying asset of the reserve\\n   * @param proxy The debt token proxy address\\n   * @param implementation The new debtToken implementation\\n   **/\\n  event DebtTokenUpgraded(address indexed asset, address indexed proxy, address indexed implementation);\\n\\n  /**\\n   * @dev Emitted when the lend pool rescuer is updated\\n   * @param rescuer the new rescuer address\\n   **/\\n  event RescuerUpdated(address indexed rescuer);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ILendPoolLoan.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\r\\npragma solidity 0.8.4;\\r\\n\\r\\nimport {DataTypes} from \\\"../libraries/types/DataTypes.sol\\\";\\r\\nimport {CountersUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol\\\";\\r\\n\\r\\ninterface ILendPoolLoan {\\r\\n  /**\\r\\n   * @dev Emitted on initialization to share location of dependent notes\\r\\n   * @param pool The address of the associated lend pool\\r\\n   */\\r\\n  event Initialized(address indexed pool);\\r\\n\\r\\n  /**\\r\\n   * @dev Emitted when a loan is created\\r\\n   * @param user The address initiating the action\\r\\n   */\\r\\n  event LoanCreated(\\r\\n    address indexed user,\\r\\n    address indexed onBehalfOf,\\r\\n    uint256 indexed loanId,\\r\\n    address nftAsset,\\r\\n    uint256 nftTokenId,\\r\\n    address reserveAsset,\\r\\n    uint256 amount,\\r\\n    uint256 borrowIndex\\r\\n  );\\r\\n\\r\\n  /**\\r\\n   * @dev Emitted when a loan is updated\\r\\n   * @param user The address initiating the action\\r\\n   */\\r\\n  event LoanUpdated(\\r\\n    address indexed user,\\r\\n    uint256 indexed loanId,\\r\\n    address nftAsset,\\r\\n    uint256 nftTokenId,\\r\\n    address reserveAsset,\\r\\n    uint256 amountAdded,\\r\\n    uint256 amountTaken,\\r\\n    uint256 borrowIndex\\r\\n  );\\r\\n\\r\\n  /**\\r\\n   * @dev Emitted when a loan is repaid by the borrower\\r\\n   * @param user The address initiating the action\\r\\n   */\\r\\n  event LoanRepaid(\\r\\n    address indexed user,\\r\\n    uint256 indexed loanId,\\r\\n    address nftAsset,\\r\\n    uint256 nftTokenId,\\r\\n    address reserveAsset,\\r\\n    uint256 amount,\\r\\n    uint256 borrowIndex\\r\\n  );\\r\\n\\r\\n  /**\\r\\n   * @dev Emitted when a loan is auction by the liquidator\\r\\n   * @param user The address initiating the action\\r\\n   */\\r\\n  event LoanAuctioned(\\r\\n    address indexed user,\\r\\n    uint256 indexed loanId,\\r\\n    address nftAsset,\\r\\n    uint256 nftTokenId,\\r\\n    uint256 amount,\\r\\n    uint256 borrowIndex,\\r\\n    address bidder,\\r\\n    uint256 price,\\r\\n    address previousBidder,\\r\\n    uint256 previousPrice\\r\\n  );\\r\\n\\r\\n  /**\\r\\n   * @dev Emitted when a loan is bought out\\r\\n   * @param loanId The loanId that was bought out\\r\\n   */\\r\\n  event LoanBoughtOut(\\r\\n    address indexed user,\\r\\n    uint256 indexed loanId,\\r\\n    address nftAsset,\\r\\n    uint256 nftTokenId,\\r\\n    uint256 bidBorrowAmount,\\r\\n    uint256 borrowIndex,\\r\\n    uint256 buyoutAmount\\r\\n  );\\r\\n\\r\\n  /**\\r\\n   * @dev Emitted when a loan is redeemed\\r\\n   * @param user The address initiating the action\\r\\n   */\\r\\n  event LoanRedeemed(\\r\\n    address indexed user,\\r\\n    uint256 indexed loanId,\\r\\n    address nftAsset,\\r\\n    uint256 nftTokenId,\\r\\n    address reserveAsset,\\r\\n    uint256 amountTaken,\\r\\n    uint256 borrowIndex\\r\\n  );\\r\\n\\r\\n  /**\\r\\n   * @dev Emitted when a loan is liquidate by the liquidator\\r\\n   * @param user The address initiating the action\\r\\n   */\\r\\n  event LoanLiquidated(\\r\\n    address indexed user,\\r\\n    uint256 indexed loanId,\\r\\n    address nftAsset,\\r\\n    uint256 nftTokenId,\\r\\n    address reserveAsset,\\r\\n    uint256 amount,\\r\\n    uint256 borrowIndex\\r\\n  );\\r\\n\\r\\n  /**\\r\\n   * @dev Emitted when a loan is liquidated in an external market\\r\\n   */\\r\\n  event LoanLiquidatedMarket(\\r\\n    uint256 indexed loanId,\\r\\n    address nftAsset,\\r\\n    uint256 nftTokenId,\\r\\n    address reserveAsset,\\r\\n    uint256 amount,\\r\\n    uint256 borrowIndex\\r\\n  );\\r\\n\\r\\n  function initNft(address nftAsset, address uNftAddress) external;\\r\\n\\r\\n  /**\\r\\n   * @dev Create store a loan object with some params\\r\\n   * @param initiator The address of the user initiating the borrow\\r\\n   * @param onBehalfOf The address receiving the loan\\r\\n   * @param nftAsset The address of the underlying NFT asset\\r\\n   * @param nftTokenId The token Id of the underlying NFT asset\\r\\n   * @param uNftAddress The address of the uNFT token\\r\\n   * @param reserveAsset The address of the underlying reserve asset\\r\\n   * @param amount The loan amount\\r\\n   * @param borrowIndex The index to get the scaled loan amount\\r\\n   */\\r\\n  function createLoan(\\r\\n    address initiator,\\r\\n    address onBehalfOf,\\r\\n    address nftAsset,\\r\\n    uint256 nftTokenId,\\r\\n    address uNftAddress,\\r\\n    address reserveAsset,\\r\\n    uint256 amount,\\r\\n    uint256 borrowIndex\\r\\n  ) external returns (uint256);\\r\\n\\r\\n  /**\\r\\n   * @dev Update the given loan with some params\\r\\n   *\\r\\n   * Requirements:\\r\\n   *  - The caller must be a holder of the loan\\r\\n   *  - The loan must be in state Active\\r\\n   * @param initiator The address of the user updating the loan\\r\\n   * @param loanId The loan ID\\r\\n   * @param amountAdded The amount added to the loan\\r\\n   * @param amountTaken The amount taken from the loan\\r\\n   * @param borrowIndex The index to get the scaled loan amount\\r\\n   */\\r\\n  function updateLoan(\\r\\n    address initiator,\\r\\n    uint256 loanId,\\r\\n    uint256 amountAdded,\\r\\n    uint256 amountTaken,\\r\\n    uint256 borrowIndex\\r\\n  ) external;\\r\\n\\r\\n  /**\\r\\n   * @dev Repay the given loan\\r\\n   *\\r\\n   * Requirements:\\r\\n   *  - The caller must be a holder of the loan\\r\\n   *  - The caller must send in principal + interest\\r\\n   *  - The loan must be in state Active\\r\\n   *\\r\\n   * @param initiator The address of the user initiating the repay\\r\\n   * @param loanId The loan getting burned\\r\\n   * @param uNftAddress The address of uNFT\\r\\n   * @param amount The amount repaid\\r\\n   * @param borrowIndex The index to get the scaled loan amount\\r\\n   */\\r\\n  function repayLoan(\\r\\n    address initiator,\\r\\n    uint256 loanId,\\r\\n    address uNftAddress,\\r\\n    uint256 amount,\\r\\n    uint256 borrowIndex\\r\\n  ) external;\\r\\n\\r\\n  /**\\r\\n   * @dev Auction the given loan\\r\\n   *\\r\\n   * Requirements:\\r\\n   *  - The price must be greater than current highest price\\r\\n   *  - The loan must be in state Active or Auction\\r\\n   *\\r\\n   * @param initiator The address of the user initiating the auction\\r\\n   * @param loanId The loan getting auctioned\\r\\n   * @param bidPrice The bid price of this auction\\r\\n   */\\r\\n  function auctionLoan(\\r\\n    address initiator,\\r\\n    uint256 loanId,\\r\\n    address onBehalfOf,\\r\\n    uint256 bidPrice,\\r\\n    uint256 borrowAmount,\\r\\n    uint256 borrowIndex\\r\\n  ) external;\\r\\n\\r\\n  /**\\r\\n   * @dev Buyout the given loan\\r\\n   *\\r\\n   * Requirements:\\r\\n   *  - The price has to be the valuation price of the nft\\r\\n   *  - The loan must be in state Active or Auction\\r\\n   */\\r\\n  function buyoutLoan(\\r\\n    address initiator,\\r\\n    uint256 loanId,\\r\\n    address uNftAddress,\\r\\n    uint256 borrowAmount,\\r\\n    uint256 borrowIndex,\\r\\n    uint256 buyoutAmount\\r\\n  ) external;\\r\\n\\r\\n  /**\\r\\n   * @dev Redeem the given loan with some params\\r\\n   *\\r\\n   * Requirements:\\r\\n   *  - The caller must be a holder of the loan\\r\\n   *  - The loan must be in state Auction\\r\\n   * @param initiator The address of the user initiating the borrow\\r\\n   * @param loanId The loan getting redeemed\\r\\n   * @param amountTaken The taken amount\\r\\n   * @param borrowIndex The index to get the scaled loan amount\\r\\n   */\\r\\n  function redeemLoan(address initiator, uint256 loanId, uint256 amountTaken, uint256 borrowIndex) external;\\r\\n\\r\\n  /**\\r\\n   * @dev Liquidate the given loan\\r\\n   *\\r\\n   * Requirements:\\r\\n   *  - The caller must send in principal + interest\\r\\n   *  - The loan must be in state Active\\r\\n   *\\r\\n   * @param initiator The address of the user initiating the auction\\r\\n   * @param loanId The loan getting burned\\r\\n   * @param uNftAddress The address of uNFT\\r\\n   * @param borrowAmount The borrow amount\\r\\n   * @param borrowIndex The index to get the scaled loan amount\\r\\n   */\\r\\n  function liquidateLoan(\\r\\n    address initiator,\\r\\n    uint256 loanId,\\r\\n    address uNftAddress,\\r\\n    uint256 borrowAmount,\\r\\n    uint256 borrowIndex\\r\\n  ) external;\\r\\n\\r\\n  /**\\r\\n   * @dev Liquidate the given loan on an external market\\r\\n   * @param loanId The loan getting burned\\r\\n   * @param uNftAddress The address of the underlying uNft\\r\\n   * @param borrowAmount Amount borrowed in the loan\\r\\n   * @param borrowIndex The reserve index\\r\\n   */\\r\\n  function liquidateLoanMarket(uint256 loanId, address uNftAddress, uint256 borrowAmount, uint256 borrowIndex) external;\\r\\n\\r\\n  /**\\r\\n   * @dev Updates the `_marketAdapters` mapping, setting the params to\\r\\n   * valid/unvalid adapters through the `flag` parameter\\r\\n   * @param adapters The adapters addresses to be updated\\r\\n   * @param flag `true` to set addresses as valid adapters, `false` otherwise\\r\\n   */\\r\\n  function updateMarketAdapters(address[] calldata adapters, bool flag) external;\\r\\n\\r\\n  /**\\r\\n   *  @dev returns the borrower of a specific loan\\r\\n   * param loanId the loan to get the borrower from\\r\\n   */\\r\\n  function borrowerOf(uint256 loanId) external view returns (address);\\r\\n\\r\\n  /**\\r\\n   *  @dev returns the loan corresponding to a specific NFT\\r\\n   * param nftAsset the underlying NFT asset\\r\\n   * param tokenId the underlying token ID for the NFT\\r\\n   */\\r\\n  function getCollateralLoanId(address nftAsset, uint256 nftTokenId) external view returns (uint256);\\r\\n\\r\\n  /**\\r\\n   *  @dev returns the loan corresponding to a specific loan Id\\r\\n   * param loanId the loan Id\\r\\n   */\\r\\n  function getLoan(uint256 loanId) external view returns (DataTypes.LoanData memory loanData);\\r\\n\\r\\n  /**\\r\\n   *  @dev returns the collateral and reserve corresponding to a specific loan\\r\\n   * param loanId the loan Id\\r\\n   */\\r\\n  function getLoanCollateralAndReserve(\\r\\n    uint256 loanId\\r\\n  ) external view returns (address nftAsset, uint256 nftTokenId, address reserveAsset, uint256 scaledAmount);\\r\\n\\r\\n  /**\\r\\n   *  @dev returns the reserve and borrow __scaled__ amount corresponding to a specific loan\\r\\n   * param loanId the loan Id\\r\\n   */\\r\\n  function getLoanReserveBorrowScaledAmount(uint256 loanId) external view returns (address, uint256);\\r\\n\\r\\n  /**\\r\\n   *  @dev returns the reserve and borrow  amount corresponding to a specific loan\\r\\n   * param loanId the loan Id\\r\\n   */\\r\\n  function getLoanReserveBorrowAmount(uint256 loanId) external view returns (address, uint256);\\r\\n\\r\\n  function getLoanHighestBid(uint256 loanId) external view returns (address, uint256);\\r\\n\\r\\n  /**\\r\\n   *  @dev returns the collateral amount for a given NFT\\r\\n   * param nftAsset the underlying NFT asset\\r\\n   */\\r\\n  function getNftCollateralAmount(address nftAsset) external view returns (uint256);\\r\\n\\r\\n  /**\\r\\n   *  @dev returns the collateral amount for a given NFT and a specific user\\r\\n   * param user the user\\r\\n   * param nftAsset the underlying NFT asset\\r\\n   */\\r\\n  function getUserNftCollateralAmount(address user, address nftAsset) external view returns (uint256);\\r\\n\\r\\n  /**\\r\\n   *  @dev returns the counter tracker for all the loan ID's in the protocol\\r\\n   */\\r\\n  function getLoanIdTracker() external view returns (CountersUpgradeable.Counter memory);\\r\\n\\r\\n  function reMintUNFT(address nftAsset, uint256 tokenId, address oldOnBehalfOf, address newOnBehalfOf) external;\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interfaces/INFTOracle.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.4;\\n\\n/************\\n@title INFTOracle interface\\n@notice Interface for NFT price oracle.*/\\ninterface INFTOracle {\\n  /* CAUTION: Price uint is ETH based (WEI, 18 decimals) */\\n  /**\\n  @dev returns the NFT price for a given NFT\\n  @param _collection the NFT collection\\n  @param _tokenId the NFT token Id\\n   */\\n  function getNFTPrice(address _collection, uint256 _tokenId) external view returns (uint256);\\n\\n  /**\\n  @dev returns the NFT price for a given array of NFTs\\n  @param _collections the array of NFT collections\\n  @param _tokenIds the array NFT token Id\\n   */\\n  function getMultipleNFTPrices(address[] calldata _collections, uint256[] calldata _tokenIds)\\n    external\\n    view\\n    returns (uint256[] memory);\\n\\n  /**\\n  @dev sets the price for a given NFT \\n  @param _collection the NFT collection\\n  @param _tokenId the NFT token Id\\n  @param _price the price to set to the token\\n  */\\n  function setNFTPrice(\\n    address _collection,\\n    uint256 _tokenId,\\n    uint256 _price\\n  ) external;\\n\\n  /**\\n  @dev sets the price for a given NFT \\n  @param _collections the array of NFT collections\\n  @param _tokenIds the array of  NFT token Ids\\n  @param _prices the array of prices to set to the given tokens\\n   */\\n  function setMultipleNFTPrices(\\n    address[] calldata _collections,\\n    uint256[] calldata _tokenIds,\\n    uint256[] calldata _prices\\n  ) external;\\n\\n  /**\\n  @dev sets the pause status of the NFT oracle\\n  @param _nftContract the of NFT collection\\n  @param val the value to set the pausing status (true for paused, false for unpaused)\\n   */\\n  function setPause(address _nftContract, bool val) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IScaledBalanceToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.4;\\n\\ninterface IScaledBalanceToken {\\n  /**\\n   * @dev Returns the scaled balance of the user. The scaled balance is the sum of all the\\n   * updated stored balance divided by the reserve's liquidity index at the moment of the update\\n   * @param user The user whose balance is calculated\\n   * @return The scaled balance of the user\\n   **/\\n  function scaledBalanceOf(address user) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the scaled balance of the user and the scaled total supply.\\n   * @param user The address of the user\\n   * @return The scaled balance of the user\\n   * @return The scaled balance and the scaled total supply\\n   **/\\n  function getScaledUserBalanceAndSupply(address user) external view returns (uint256, uint256);\\n\\n  /**\\n   * @dev Returns the scaled total supply of the variable debt token. Represents sum(debt/index)\\n   * @return The scaled total supply\\n   **/\\n  function scaledTotalSupply() external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IUNFT.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.4;\\n\\nimport {IERC721EnumerableUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721EnumerableUpgradeable.sol\\\";\\nimport {IERC721MetadataUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721MetadataUpgradeable.sol\\\";\\nimport {IERC721ReceiverUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol\\\";\\n\\ninterface IUNFT is IERC721MetadataUpgradeable, IERC721ReceiverUpgradeable, IERC721EnumerableUpgradeable {\\n  /**\\n   * @dev Emitted when an uNFT is initialized\\n   * @param underlyingAsset The address of the underlying asset\\n   **/\\n  event Initialized(address indexed underlyingAsset);\\n\\n  /**\\n   * @dev Emitted on mint\\n   * @param user The address initiating the burn\\n   * @param nftAsset address of the underlying asset of NFT\\n   * @param nftTokenId token id of the underlying asset of NFT\\n   * @param owner The owner address receive the uNFT token\\n   **/\\n  event Mint(address indexed user, address indexed nftAsset, uint256 nftTokenId, address indexed owner);\\n\\n  /**\\n   * @dev Emitted on burn\\n   * @param user The address initiating the burn\\n   * @param nftAsset address of the underlying asset of NFT\\n   * @param nftTokenId token id of the underlying asset of NFT\\n   * @param owner The owner address of the burned uNFT token\\n   **/\\n  event Burn(address indexed user, address indexed nftAsset, uint256 nftTokenId, address indexed owner);\\n\\n  /**\\n   * @dev Initializes the uNFT\\n   * @param underlyingAsset The address of the underlying asset of this uNFT (E.g. PUNK for bPUNK)\\n   */\\n  function initialize(address underlyingAsset, string calldata uNftName, string calldata uNftSymbol) external;\\n\\n  /**\\n   * @dev Mints uNFT token to the user address\\n   *\\n   * Requirements:\\n   *  - The caller must be contract address.\\n   *  - `nftTokenId` must not exist.\\n   *\\n   * @param to The owner address receive the uNFT token\\n   * @param tokenId token id of the underlying asset of NFT\\n   **/\\n  function mint(address to, uint256 tokenId) external;\\n\\n  /**\\n   * @dev Burns user uNFT token\\n   *\\n   * Requirements:\\n   *  - The caller must be contract address.\\n   *  - `tokenId` must exist.\\n   *\\n   * @param tokenId token id of the underlying asset of NFT\\n   **/\\n  function burn(uint256 tokenId) external;\\n\\n  /**\\n   * @dev Returns the owner of the `nftTokenId` token.\\n   *\\n   * Requirements:\\n   *  - `tokenId` must exist.\\n   *\\n   * @param tokenId token id of the underlying asset of NFT\\n   */\\n  function minterOf(uint256 tokenId) external view returns (address);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IUNFTRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.4;\\n\\ninterface IUNFTRegistry {\\n  event Initialized(address genericImpl, string namePrefix, string symbolPrefix);\\n  event GenericImplementationUpdated(address genericImpl);\\n  event UNFTCreated(address indexed nftAsset, address uNftImpl, address uNftProxy, uint256 totals);\\n  event UNFTUpgraded(address indexed nftAsset, address uNftImpl, address uNftProxy, uint256 totals);\\n\\n  /**\\n   * @dev gets the uNFT address\\n   * @param nftAsset The address of the underlying NFT asset\\n   **/\\n  function getUNFTAddresses(address nftAsset) external view returns (address uNftProxy, address uNftImpl);\\n\\n  /**\\n   * @dev gets the uNFT address by index\\n   * @param index the uNFT index\\n   **/\\n  function getUNFTAddressesByIndex(uint16 index) external view returns (address uNftProxy, address uNftImpl);\\n\\n  /**\\n   * @dev gets the list of uNFTs\\n   **/\\n  function getUNFTAssetList() external view returns (address[] memory);\\n\\n  /**\\n   * @dev gets the length of the list of uNFTs\\n   **/\\n  function allUNFTAssetLength() external view returns (uint256);\\n\\n  /**\\n   * @dev initializes the contract\\n   **/\\n  function initialize(\\n    address genericImpl,\\n    string memory namePrefix_,\\n    string memory symbolPrefix_\\n  ) external;\\n\\n  /**\\n   * @dev sets the uNFT generic implementation\\n   * @dev genericImpl the implementation contract\\n   **/\\n  function setUNFTGenericImpl(address genericImpl) external;\\n\\n  /**\\n   * @dev Create uNFT proxy and implement, then initialize it\\n   * @param nftAsset The address of the underlying asset of the UNFT\\n   **/\\n  function createUNFT(address nftAsset) external returns (address uNftProxy);\\n\\n  /**\\n   * @dev Create uNFT proxy with already deployed implement, then initialize it\\n   * @param nftAsset The address of the underlying asset of the UNFT\\n   * @param uNftImpl The address of the deployed implement of the UNFT\\n   **/\\n  function createUNFTWithImpl(address nftAsset, address uNftImpl) external returns (address uNftProxy);\\n\\n  /**\\n   * @dev Update uNFT proxy to an new deployed implement, then initialize it\\n   * @param nftAsset The address of the underlying asset of the UNFT\\n   * @param uNftImpl The address of the deployed implement of the UNFT\\n   * @param encodedCallData The encoded function call.\\n   **/\\n  function upgradeUNFTWithImpl(\\n    address nftAsset,\\n    address uNftImpl,\\n    bytes memory encodedCallData\\n  ) external;\\n\\n  /**\\n   * @dev Adding custom symbol for some special NFTs like CryptoPunks\\n   * @param nftAssets_ The addresses of the NFTs\\n   * @param symbols_ The custom symbols of the NFTs\\n   **/\\n  function addCustomeSymbols(address[] memory nftAssets_, string[] memory symbols_) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IUToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\r\\npragma solidity 0.8.4;\\r\\n\\r\\nimport {ILendPoolAddressesProvider} from \\\"./ILendPoolAddressesProvider.sol\\\";\\r\\nimport {IIncentivesController} from \\\"./IIncentivesController.sol\\\";\\r\\nimport {IScaledBalanceToken} from \\\"./IScaledBalanceToken.sol\\\";\\r\\n\\r\\nimport {IERC20Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\r\\nimport {IERC20MetadataUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\\\";\\r\\n\\r\\ninterface IUToken is IScaledBalanceToken, IERC20Upgradeable, IERC20MetadataUpgradeable {\\r\\n  /**\\r\\n   * @dev Emitted when an uToken is initialized\\r\\n   * @param underlyingAsset The address of the underlying asset\\r\\n   * @param pool The address of the associated lending pool\\r\\n   * @param treasury The address of the treasury\\r\\n   * @param incentivesController The address of the incentives controller for this uToken\\r\\n   **/\\r\\n  event Initialized(\\r\\n    address indexed underlyingAsset,\\r\\n    address indexed pool,\\r\\n    address treasury,\\r\\n    address incentivesController\\r\\n  );\\r\\n\\r\\n  /**\\r\\n   * @dev Initializes the bToken\\r\\n   * @param addressProvider The address of the address provider where this bToken will be used\\r\\n   * @param treasury The address of the Unlockd treasury, receiving the fees on this bToken\\r\\n   * @param underlyingAsset The address of the underlying asset of this bToken\\r\\n   * @param uTokenDecimals The amount of token decimals\\r\\n   * @param uTokenName The name of the token\\r\\n   * @param uTokenSymbol The token symbol\\r\\n   */\\r\\n  function initialize(\\r\\n    ILendPoolAddressesProvider addressProvider,\\r\\n    address treasury,\\r\\n    address underlyingAsset,\\r\\n    uint8 uTokenDecimals,\\r\\n    string calldata uTokenName,\\r\\n    string calldata uTokenSymbol\\r\\n  ) external;\\r\\n\\r\\n  /**\\r\\n   * @dev Emitted after the mint action\\r\\n   * @param from The address performing the mint\\r\\n   * @param value The amount being\\r\\n   * @param index The new liquidity index of the reserve\\r\\n   **/\\r\\n  event Mint(address indexed from, uint256 value, uint256 index);\\r\\n  /**\\r\\n   * @dev Emitted after setting of addresses as managers\\r\\n   * @param managers the managers to be updated\\r\\n   * @param flag `true` to set addresses as managers, `false` otherwise\\r\\n   **/\\r\\n  event UTokenManagersUpdated(address[] indexed managers, bool flag);\\r\\n\\r\\n  /**\\r\\n   * @dev Mints `amount` uTokens to `user`\\r\\n   * @param user The address receiving the minted tokens\\r\\n   * @param amount The amount of tokens getting minted\\r\\n   * @param index The new liquidity index of the reserve\\r\\n   * @return `true` if the the previous balance of the user was 0\\r\\n   */\\r\\n  function mint(address user, uint256 amount, uint256 index) external returns (bool);\\r\\n\\r\\n  /**\\r\\n   * @dev Emitted after uTokens are burned\\r\\n   * @param from The owner of the uTokens, getting them burned\\r\\n   * @param target The address that will receive the underlying\\r\\n   * @param value The amount being burned\\r\\n   * @param index The new liquidity index of the reserve\\r\\n   **/\\r\\n  event Burn(address indexed from, address indexed target, uint256 value, uint256 index);\\r\\n\\r\\n  /**\\r\\n   * @dev Emitted during the transfer action\\r\\n   * @param from The user whose tokens are being transferred\\r\\n   * @param to The recipient\\r\\n   * @param value The amount being transferred\\r\\n   * @param index The new liquidity index of the reserve\\r\\n   **/\\r\\n  event BalanceTransfer(address indexed from, address indexed to, uint256 value, uint256 index);\\r\\n\\r\\n  /**\\r\\n   * @dev Emitted when treasury address is updated in utoken\\r\\n   * @param _newTreasuryAddress The new treasury address\\r\\n   **/\\r\\n  event TreasuryAddressUpdated(address indexed _newTreasuryAddress);\\r\\n\\r\\n  /**\\r\\n    @dev Emitted after sweeping liquidity from the uToken to deposit it to external lending protocol\\r\\n  * @param uToken The uToken swept\\r\\n  * @param underlyingAsset The underlying asset from the uToken\\r\\n  * @param amount The amount deposited to the lending protocol\\r\\n  */\\r\\n  event UTokenSwept(address indexed uToken, address indexed underlyingAsset, uint256 indexed amount);\\r\\n\\r\\n  /**\\r\\n   * @dev Takes reserve liquidity from uToken and deposits it to external lening protocol\\r\\n   **/\\r\\n  function sweepUToken() external;\\r\\n\\r\\n  /**\\r\\n   * @dev Burns uTokens from `user` and sends the equivalent amount of underlying to `receiverOfUnderlying`\\r\\n   * @param user The owner of the uTokens, getting them burned\\r\\n   * @param receiverOfUnderlying The address that will receive the underlying\\r\\n   * @param amount The amount being burned\\r\\n   * @param index The new liquidity index of the reserve\\r\\n   **/\\r\\n  function burn(address user, address receiverOfUnderlying, uint256 amount, uint256 index) external;\\r\\n\\r\\n  /**\\r\\n   * @dev Mints uTokens to the reserve treasury\\r\\n   * @param amount The amount of tokens getting minted\\r\\n   * @param index The new liquidity index of the reserve\\r\\n   */\\r\\n  function mintToTreasury(uint256 amount, uint256 index) external;\\r\\n\\r\\n  /**\\r\\n   * @dev Deposits `amount` to the lending protocol currently active\\r\\n   * @param amount The amount of tokens to deposit\\r\\n   */\\r\\n  function depositReserves(uint256 amount) external;\\r\\n\\r\\n  /**\\r\\n   * @dev Withdraws `amount` from the lending protocol currently active\\r\\n   * @param amount The amount of tokens to withdraw\\r\\n   */\\r\\n  function withdrawReserves(uint256 amount) external returns (uint256);\\r\\n\\r\\n  /**\\r\\n   * @dev Transfers the underlying asset to `target`. Used by the LendPool to transfer\\r\\n   * assets in borrow() and withdraw()\\r\\n   * @param user The recipient of the underlying\\r\\n   * @param amount The amount getting transferred\\r\\n   * @return The amount transferred\\r\\n   **/\\r\\n  function transferUnderlyingTo(address user, uint256 amount) external returns (uint256);\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the scaled balance of the user and the scaled total supply.\\r\\n   * @return The available liquidity in reserve\\r\\n   **/\\r\\n  function getAvailableLiquidity() external view returns (uint256);\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the address of the incentives controller contract\\r\\n   **/\\r\\n  function getIncentivesController() external view returns (IIncentivesController);\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the address of the underlying asset of this uToken\\r\\n   **/\\r\\n  function UNDERLYING_ASSET_ADDRESS() external view returns (address);\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the address of the treasury set to this uToken\\r\\n   **/\\r\\n  function RESERVE_TREASURY_ADDRESS() external view returns (address);\\r\\n\\r\\n  /**\\r\\n   * @dev Sets the address of the treasury to this uToken\\r\\n   **/\\r\\n  function setTreasuryAddress(address treasury) external;\\r\\n\\r\\n  /**\\r\\n   * @dev Updates the uToken manager addresses\\r\\n   **/\\r\\n  function updateUTokenManagers(address[] calldata managers, bool flag) external;\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/libraries/configuration/NftConfiguration.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\r\\npragma solidity 0.8.4;\\r\\n\\r\\nimport {Errors} from \\\"../helpers/Errors.sol\\\";\\r\\nimport {DataTypes} from \\\"../types/DataTypes.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title NftConfiguration library\\r\\n * @author BendDao; Forked and edited by Unlockd\\r\\n * @notice Implements the bitmap logic to handle the NFT configuration\\r\\n */\\r\\nlibrary NftConfiguration {\\r\\n  uint256 constant LTV_MASK =                   0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0000; // prettier-ignore\\r\\n  uint256 constant LIQUIDATION_THRESHOLD_MASK = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0000FFFF; // prettier-ignore\\r\\n  uint256 constant LIQUIDATION_BONUS_MASK =     0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0000FFFFFFFF; // prettier-ignore\\r\\n  uint256 constant ACTIVE_MASK =                0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFFFFFFFFFF; // prettier-ignore\\r\\n  uint256 constant FROZEN_MASK =                0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFDFFFFFFFFFFFFFF; // prettier-ignore\\r\\n  uint256 constant REDEEM_DURATION_MASK =       0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0000FFFFFFFFFFFFFFFF; // prettier-ignore\\r\\n  uint256 constant AUCTION_DURATION_MASK =      0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0000FFFFFFFFFFFFFFFFFFFF; // prettier-ignore\\r\\n  uint256 constant REDEEM_FINE_MASK =           0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0000FFFFFFFFFFFFFFFFFFFFFFFF; // prettier-ignore\\r\\n  uint256 constant REDEEM_THRESHOLD_MASK =      0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0000FFFFFFFFFFFFFFFFFFFFFFFFFFFF; // prettier-ignore\\r\\n  uint256 constant MIN_BIDFINE_MASK      =      0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF0000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF; // prettier-ignore\\r\\n  uint256 constant CONFIG_TIMESTAMP_MASK =      0xFFFFFFFFFFFFFFFFFFFF00000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF; // prettier-ignore\\r\\n\\r\\n  /// @dev For the LTV, the start bit is 0 (up to 15), hence no bitshifting is needed\\r\\n  uint256 constant LIQUIDATION_THRESHOLD_START_BIT_POSITION = 16;\\r\\n  uint256 constant LIQUIDATION_BONUS_START_BIT_POSITION = 32;\\r\\n  uint256 constant IS_ACTIVE_START_BIT_POSITION = 56;\\r\\n  uint256 constant IS_FROZEN_START_BIT_POSITION = 57;\\r\\n  uint256 constant REDEEM_DURATION_START_BIT_POSITION = 64;\\r\\n  uint256 constant AUCTION_DURATION_START_BIT_POSITION = 80;\\r\\n  uint256 constant REDEEM_FINE_START_BIT_POSITION = 96;\\r\\n  uint256 constant REDEEM_THRESHOLD_START_BIT_POSITION = 112;\\r\\n  uint256 constant MIN_BIDFINE_START_BIT_POSITION = 128;\\r\\n  uint256 constant CONFIG_TIMESTAMP_START_BIT_POSITION = 144;\\r\\n\\r\\n  uint256 constant MAX_VALID_LTV = 65535;\\r\\n  uint256 constant MAX_VALID_LIQUIDATION_THRESHOLD = 65535;\\r\\n  uint256 constant MAX_VALID_LIQUIDATION_BONUS = 65535;\\r\\n  uint256 constant MAX_VALID_REDEEM_DURATION = 65535;\\r\\n  uint256 constant MAX_VALID_AUCTION_DURATION = 65535;\\r\\n  uint256 constant MAX_VALID_REDEEM_FINE = 65535;\\r\\n  uint256 constant MAX_VALID_REDEEM_THRESHOLD = 65535;\\r\\n  uint256 constant MAX_VALID_MIN_BIDFINE = 65535;\\r\\n  uint256 constant MAX_VALID_CONFIG_TIMESTAMP = 4294967295;\\r\\n\\r\\n  /**\\r\\n   * @dev Sets the Loan to Value of the NFT\\r\\n   * @param self The NFT configuration\\r\\n   * @param ltv the new ltv\\r\\n   **/\\r\\n  function setLtv(DataTypes.NftConfigurationMap memory self, uint256 ltv) internal pure {\\r\\n    require(ltv <= MAX_VALID_LTV, Errors.RC_INVALID_LTV);\\r\\n\\r\\n    self.data = (self.data & LTV_MASK) | ltv;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Gets the Loan to Value of the NFT\\r\\n   * @param self The NFT configuration\\r\\n   * @return The loan to value\\r\\n   **/\\r\\n  function getLtv(DataTypes.NftConfigurationMap storage self) internal view returns (uint256) {\\r\\n    return self.data & ~LTV_MASK;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Sets the liquidation threshold of the NFT\\r\\n   * @param self The NFT configuration\\r\\n   * @param threshold The new liquidation threshold\\r\\n   **/\\r\\n  function setLiquidationThreshold(DataTypes.NftConfigurationMap memory self, uint256 threshold) internal pure {\\r\\n    require(threshold <= MAX_VALID_LIQUIDATION_THRESHOLD, Errors.RC_INVALID_LIQ_THRESHOLD);\\r\\n\\r\\n    self.data = (self.data & LIQUIDATION_THRESHOLD_MASK) | (threshold << LIQUIDATION_THRESHOLD_START_BIT_POSITION);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Gets the liquidation threshold of the NFT\\r\\n   * @param self The NFT configuration\\r\\n   * @return The liquidation threshold\\r\\n   **/\\r\\n  function getLiquidationThreshold(DataTypes.NftConfigurationMap storage self) internal view returns (uint256) {\\r\\n    return (self.data & ~LIQUIDATION_THRESHOLD_MASK) >> LIQUIDATION_THRESHOLD_START_BIT_POSITION;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Sets the liquidation bonus of the NFT\\r\\n   * @param self The NFT configuration\\r\\n   * @param bonus The new liquidation bonus\\r\\n   **/\\r\\n  function setLiquidationBonus(DataTypes.NftConfigurationMap memory self, uint256 bonus) internal pure {\\r\\n    require(bonus <= MAX_VALID_LIQUIDATION_BONUS, Errors.RC_INVALID_LIQ_BONUS);\\r\\n\\r\\n    self.data = (self.data & LIQUIDATION_BONUS_MASK) | (bonus << LIQUIDATION_BONUS_START_BIT_POSITION);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Gets the liquidation bonus of the NFT\\r\\n   * @param self The NFT configuration\\r\\n   * @return The liquidation bonus\\r\\n   **/\\r\\n  function getLiquidationBonus(DataTypes.NftConfigurationMap storage self) internal view returns (uint256) {\\r\\n    return (self.data & ~LIQUIDATION_BONUS_MASK) >> LIQUIDATION_BONUS_START_BIT_POSITION;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Sets the active state of the NFT\\r\\n   * @param self The NFT configuration\\r\\n   * @param active The active state\\r\\n   **/\\r\\n  function setActive(DataTypes.NftConfigurationMap memory self, bool active) internal pure {\\r\\n    self.data = (self.data & ACTIVE_MASK) | (uint256(active ? 1 : 0) << IS_ACTIVE_START_BIT_POSITION);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Gets the active state of the NFT\\r\\n   * @param self The NFT configuration\\r\\n   * @return The active state\\r\\n   **/\\r\\n  function getActive(DataTypes.NftConfigurationMap storage self) internal view returns (bool) {\\r\\n    return (self.data & ~ACTIVE_MASK) != 0;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Sets the frozen state of the NFT\\r\\n   * @param self The NFT configuration\\r\\n   * @param frozen The frozen state\\r\\n   **/\\r\\n  function setFrozen(DataTypes.NftConfigurationMap memory self, bool frozen) internal pure {\\r\\n    self.data = (self.data & FROZEN_MASK) | (uint256(frozen ? 1 : 0) << IS_FROZEN_START_BIT_POSITION);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Gets the frozen state of the NFT\\r\\n   * @param self The NFT configuration\\r\\n   * @return The frozen state\\r\\n   **/\\r\\n  function getFrozen(DataTypes.NftConfigurationMap storage self) internal view returns (bool) {\\r\\n    return (self.data & ~FROZEN_MASK) != 0;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Sets the redeem duration of the NFT\\r\\n   * @param self The NFT configuration\\r\\n   * @param redeemDuration The redeem duration\\r\\n   **/\\r\\n  function setRedeemDuration(DataTypes.NftConfigurationMap memory self, uint256 redeemDuration) internal pure {\\r\\n    require(redeemDuration <= MAX_VALID_REDEEM_DURATION, Errors.RC_INVALID_REDEEM_DURATION);\\r\\n\\r\\n    self.data = (self.data & REDEEM_DURATION_MASK) | (redeemDuration << REDEEM_DURATION_START_BIT_POSITION);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Gets the redeem duration of the NFT\\r\\n   * @param self The NFT configuration\\r\\n   * @return The redeem duration\\r\\n   **/\\r\\n  function getRedeemDuration(DataTypes.NftConfigurationMap storage self) internal view returns (uint256) {\\r\\n    return (self.data & ~REDEEM_DURATION_MASK) >> REDEEM_DURATION_START_BIT_POSITION;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Sets the auction duration of the NFT\\r\\n   * @param self The NFT configuration\\r\\n   * @param auctionDuration The auction duration\\r\\n   **/\\r\\n  function setAuctionDuration(DataTypes.NftConfigurationMap memory self, uint256 auctionDuration) internal pure {\\r\\n    require(auctionDuration <= MAX_VALID_AUCTION_DURATION, Errors.RC_INVALID_AUCTION_DURATION);\\r\\n\\r\\n    self.data = (self.data & AUCTION_DURATION_MASK) | (auctionDuration << AUCTION_DURATION_START_BIT_POSITION);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Gets the auction duration of the NFT\\r\\n   * @param self The NFT configuration\\r\\n   * @return The auction duration\\r\\n   **/\\r\\n  function getAuctionDuration(DataTypes.NftConfigurationMap storage self) internal view returns (uint256) {\\r\\n    return (self.data & ~AUCTION_DURATION_MASK) >> AUCTION_DURATION_START_BIT_POSITION;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Sets the redeem fine of the NFT\\r\\n   * @param self The NFT configuration\\r\\n   * @param redeemFine The redeem duration\\r\\n   **/\\r\\n  function setRedeemFine(DataTypes.NftConfigurationMap memory self, uint256 redeemFine) internal pure {\\r\\n    require(redeemFine <= MAX_VALID_REDEEM_FINE, Errors.RC_INVALID_REDEEM_FINE);\\r\\n\\r\\n    self.data = (self.data & REDEEM_FINE_MASK) | (redeemFine << REDEEM_FINE_START_BIT_POSITION);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Gets the redeem fine of the NFT\\r\\n   * @param self The NFT configuration\\r\\n   * @return The redeem fine\\r\\n   **/\\r\\n  function getRedeemFine(DataTypes.NftConfigurationMap storage self) internal view returns (uint256) {\\r\\n    return (self.data & ~REDEEM_FINE_MASK) >> REDEEM_FINE_START_BIT_POSITION;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Sets the redeem threshold of the NFT\\r\\n   * @param self The NFT configuration\\r\\n   * @param redeemThreshold The redeem duration\\r\\n   **/\\r\\n  function setRedeemThreshold(DataTypes.NftConfigurationMap memory self, uint256 redeemThreshold) internal pure {\\r\\n    require(redeemThreshold <= MAX_VALID_REDEEM_THRESHOLD, Errors.RC_INVALID_REDEEM_THRESHOLD);\\r\\n\\r\\n    self.data = (self.data & REDEEM_THRESHOLD_MASK) | (redeemThreshold << REDEEM_THRESHOLD_START_BIT_POSITION);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Gets the redeem threshold of the NFT\\r\\n   * @param self The NFT configuration\\r\\n   * @return The redeem threshold\\r\\n   **/\\r\\n  function getRedeemThreshold(DataTypes.NftConfigurationMap storage self) internal view returns (uint256) {\\r\\n    return (self.data & ~REDEEM_THRESHOLD_MASK) >> REDEEM_THRESHOLD_START_BIT_POSITION;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Sets the min & max threshold of the NFT\\r\\n   * @param self The NFT configuration\\r\\n   * @param minBidFine The min bid fine\\r\\n   **/\\r\\n  function setMinBidFine(DataTypes.NftConfigurationMap memory self, uint256 minBidFine) internal pure {\\r\\n    require(minBidFine <= MAX_VALID_MIN_BIDFINE, Errors.RC_INVALID_MIN_BID_FINE);\\r\\n\\r\\n    self.data = (self.data & MIN_BIDFINE_MASK) | (minBidFine << MIN_BIDFINE_START_BIT_POSITION);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Gets the min bid fine of the NFT\\r\\n   * @param self The NFT configuration\\r\\n   * @return The min bid fine\\r\\n   **/\\r\\n  function getMinBidFine(DataTypes.NftConfigurationMap storage self) internal view returns (uint256) {\\r\\n    return ((self.data & ~MIN_BIDFINE_MASK) >> MIN_BIDFINE_START_BIT_POSITION);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Sets the timestamp when the NFTconfig was triggered\\r\\n   * @param self The NFT configuration\\r\\n   * @param configTimestamp The config timestamp\\r\\n   **/\\r\\n  function setConfigTimestamp(DataTypes.NftConfigurationMap memory self, uint256 configTimestamp) internal pure {\\r\\n    require(configTimestamp <= MAX_VALID_CONFIG_TIMESTAMP, Errors.RC_INVALID_MAX_CONFIG_TIMESTAMP);\\r\\n\\r\\n    self.data = (self.data & CONFIG_TIMESTAMP_MASK) | (configTimestamp << CONFIG_TIMESTAMP_START_BIT_POSITION);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Gets the timestamp when the NFTconfig was triggered\\r\\n   * @param self The NFT configuration\\r\\n   * @return The config timestamp\\r\\n   **/\\r\\n  function getConfigTimestamp(DataTypes.NftConfigurationMap storage self) internal view returns (uint256) {\\r\\n    return ((self.data & ~CONFIG_TIMESTAMP_MASK) >> CONFIG_TIMESTAMP_START_BIT_POSITION);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Gets the configuration flags of the NFT\\r\\n   * @param self The NFT configuration\\r\\n   * @return The state flags representing active, frozen\\r\\n   **/\\r\\n  function getFlags(DataTypes.NftConfigurationMap storage self) internal view returns (bool, bool) {\\r\\n    uint256 dataLocal = self.data;\\r\\n\\r\\n    return ((dataLocal & ~ACTIVE_MASK) != 0, (dataLocal & ~FROZEN_MASK) != 0);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Gets the configuration flags of the NFT from a memory object\\r\\n   * @param self The NFT configuration\\r\\n   * @return The state flags representing active, frozen\\r\\n   **/\\r\\n  function getFlagsMemory(DataTypes.NftConfigurationMap memory self) internal pure returns (bool, bool) {\\r\\n    return ((self.data & ~ACTIVE_MASK) != 0, (self.data & ~FROZEN_MASK) != 0);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Gets the collateral configuration paramters of the NFT\\r\\n   * @param self The NFT configuration\\r\\n   * @return The state params representing ltv, liquidation threshold, liquidation bonus\\r\\n   **/\\r\\n  function getCollateralParams(\\r\\n    DataTypes.NftConfigurationMap storage self\\r\\n  ) internal view returns (uint256, uint256, uint256) {\\r\\n    uint256 dataLocal = self.data;\\r\\n\\r\\n    return (\\r\\n      dataLocal & ~LTV_MASK,\\r\\n      (dataLocal & ~LIQUIDATION_THRESHOLD_MASK) >> LIQUIDATION_THRESHOLD_START_BIT_POSITION,\\r\\n      (dataLocal & ~LIQUIDATION_BONUS_MASK) >> LIQUIDATION_BONUS_START_BIT_POSITION\\r\\n    );\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Gets the auction configuration paramters of the NFT\\r\\n   * @param self The NFT configuration\\r\\n   * @return The state params representing redeem duration, auction duration, redeem fine\\r\\n   **/\\r\\n  function getAuctionParams(\\r\\n    DataTypes.NftConfigurationMap storage self\\r\\n  ) internal view returns (uint256, uint256, uint256, uint256) {\\r\\n    uint256 dataLocal = self.data;\\r\\n\\r\\n    return (\\r\\n      (dataLocal & ~REDEEM_DURATION_MASK) >> REDEEM_DURATION_START_BIT_POSITION,\\r\\n      (dataLocal & ~AUCTION_DURATION_MASK) >> AUCTION_DURATION_START_BIT_POSITION,\\r\\n      (dataLocal & ~REDEEM_FINE_MASK) >> REDEEM_FINE_START_BIT_POSITION,\\r\\n      (dataLocal & ~REDEEM_THRESHOLD_MASK) >> REDEEM_THRESHOLD_START_BIT_POSITION\\r\\n    );\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Gets the collateral configuration paramters of the NFT from a memory object\\r\\n   * @param self The NFT configuration\\r\\n   * @return The state params representing ltv, liquidation threshold, liquidation bonus\\r\\n   **/\\r\\n  function getCollateralParamsMemory(\\r\\n    DataTypes.NftConfigurationMap memory self\\r\\n  ) internal pure returns (uint256, uint256, uint256) {\\r\\n    return (\\r\\n      self.data & ~LTV_MASK,\\r\\n      (self.data & ~LIQUIDATION_THRESHOLD_MASK) >> LIQUIDATION_THRESHOLD_START_BIT_POSITION,\\r\\n      (self.data & ~LIQUIDATION_BONUS_MASK) >> LIQUIDATION_BONUS_START_BIT_POSITION\\r\\n    );\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Gets the auction configuration paramters of the NFT from a memory object\\r\\n   * @param self The NFT configuration\\r\\n   * @return The state params representing redeem duration, auction duration, redeem fine\\r\\n   **/\\r\\n  function getAuctionParamsMemory(\\r\\n    DataTypes.NftConfigurationMap memory self\\r\\n  ) internal pure returns (uint256, uint256, uint256, uint256) {\\r\\n    return (\\r\\n      (self.data & ~REDEEM_DURATION_MASK) >> REDEEM_DURATION_START_BIT_POSITION,\\r\\n      (self.data & ~AUCTION_DURATION_MASK) >> AUCTION_DURATION_START_BIT_POSITION,\\r\\n      (self.data & ~REDEEM_FINE_MASK) >> REDEEM_FINE_START_BIT_POSITION,\\r\\n      (self.data & ~REDEEM_THRESHOLD_MASK) >> REDEEM_THRESHOLD_START_BIT_POSITION\\r\\n    );\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Gets the min & max bid fine of the NFT\\r\\n   * @param self The NFT configuration\\r\\n   * @return The min & max bid fine\\r\\n   **/\\r\\n  function getMinBidFineMemory(DataTypes.NftConfigurationMap memory self) internal pure returns (uint256) {\\r\\n    return ((self.data & ~MIN_BIDFINE_MASK) >> MIN_BIDFINE_START_BIT_POSITION);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Gets the timestamp the NFT was configured\\r\\n   * @param self The NFT configuration\\r\\n   * @return The timestamp value\\r\\n   **/\\r\\n  function getConfigTimestampMemory(DataTypes.NftConfigurationMap memory self) internal pure returns (uint256) {\\r\\n    return ((self.data & ~CONFIG_TIMESTAMP_MASK) >> CONFIG_TIMESTAMP_START_BIT_POSITION);\\r\\n  }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/libraries/configuration/ReserveConfiguration.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\r\\npragma solidity 0.8.4;\\r\\n\\r\\nimport {Errors} from \\\"../helpers/Errors.sol\\\";\\r\\nimport {DataTypes} from \\\"../types/DataTypes.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title ReserveConfiguration library\\r\\n * @author BendDao; Forked and edited by Unlockd\\r\\n * @notice Implements the bitmap logic to handle the reserve configuration\\r\\n */\\r\\nlibrary ReserveConfiguration {\\r\\n  uint256 constant LTV_MASK =                   0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0000; // prettier-ignore\\r\\n  uint256 constant LIQUIDATION_THRESHOLD_MASK = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0000FFFF; // prettier-ignore\\r\\n  uint256 constant LIQUIDATION_BONUS_MASK =     0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0000FFFFFFFF; // prettier-ignore\\r\\n  uint256 constant DECIMALS_MASK =              0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00FFFFFFFFFFFF; // prettier-ignore\\r\\n  uint256 constant ACTIVE_MASK =                0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFFFFFFFFFF; // prettier-ignore\\r\\n  uint256 constant FROZEN_MASK =                0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFDFFFFFFFFFFFFFF; // prettier-ignore\\r\\n  uint256 constant BORROWING_MASK =             0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBFFFFFFFFFFFFFF; // prettier-ignore\\r\\n  uint256 constant STABLE_BORROWING_MASK =      0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF7FFFFFFFFFFFFFF; // prettier-ignore\\r\\n  uint256 constant RESERVE_FACTOR_MASK =        0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0000FFFFFFFFFFFFFFFF; // prettier-ignore\\r\\n\\r\\n  /// @dev For the LTV, the start bit is 0 (up to 15), hence no bitshifting is needed\\r\\n  uint256 constant LIQUIDATION_THRESHOLD_START_BIT_POSITION = 16;\\r\\n  uint256 constant LIQUIDATION_BONUS_START_BIT_POSITION = 32;\\r\\n  uint256 constant RESERVE_DECIMALS_START_BIT_POSITION = 48;\\r\\n  uint256 constant IS_ACTIVE_START_BIT_POSITION = 56;\\r\\n  uint256 constant IS_FROZEN_START_BIT_POSITION = 57;\\r\\n  uint256 constant BORROWING_ENABLED_START_BIT_POSITION = 58;\\r\\n  uint256 constant STABLE_BORROWING_ENABLED_START_BIT_POSITION = 59;\\r\\n  uint256 constant RESERVE_FACTOR_START_BIT_POSITION = 64;\\r\\n\\r\\n  uint256 constant MAX_VALID_LTV = 65535;\\r\\n  uint256 constant MAX_VALID_LIQUIDATION_THRESHOLD = 65535;\\r\\n  uint256 constant MAX_VALID_LIQUIDATION_BONUS = 65535;\\r\\n  uint256 constant MAX_VALID_DECIMALS = 255;\\r\\n  uint256 constant MAX_VALID_RESERVE_FACTOR = 65535;\\r\\n\\r\\n  /**\\r\\n   * @dev Sets the Loan to Value of the reserve\\r\\n   * @param self The reserve configuration\\r\\n   * @param ltv the new ltv\\r\\n   **/\\r\\n  function setLtv(DataTypes.ReserveConfigurationMap memory self, uint256 ltv) internal pure {\\r\\n    require(ltv <= MAX_VALID_LTV, Errors.RC_INVALID_LTV);\\r\\n\\r\\n    self.data = (self.data & LTV_MASK) | ltv;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Gets the Loan to Value of the reserve\\r\\n   * @param self The reserve configuration\\r\\n   * @return The loan to value\\r\\n   **/\\r\\n  function getLtv(DataTypes.ReserveConfigurationMap storage self) internal view returns (uint256) {\\r\\n    return self.data & ~LTV_MASK;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Sets the liquidation threshold of the reserve\\r\\n   * @param self The reserve configuration\\r\\n   * @param threshold The new liquidation threshold\\r\\n   **/\\r\\n  function setLiquidationThreshold(DataTypes.ReserveConfigurationMap memory self, uint256 threshold) internal pure {\\r\\n    require(threshold <= MAX_VALID_LIQUIDATION_THRESHOLD, Errors.RC_INVALID_LIQ_THRESHOLD);\\r\\n\\r\\n    self.data = (self.data & LIQUIDATION_THRESHOLD_MASK) | (threshold << LIQUIDATION_THRESHOLD_START_BIT_POSITION);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Gets the liquidation threshold of the reserve\\r\\n   * @param self The reserve configuration\\r\\n   * @return The liquidation threshold\\r\\n   **/\\r\\n  function getLiquidationThreshold(DataTypes.ReserveConfigurationMap storage self) internal view returns (uint256) {\\r\\n    return (self.data & ~LIQUIDATION_THRESHOLD_MASK) >> LIQUIDATION_THRESHOLD_START_BIT_POSITION;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Sets the liquidation bonus of the reserve\\r\\n   * @param self The reserve configuration\\r\\n   * @param bonus The new liquidation bonus\\r\\n   **/\\r\\n  function setLiquidationBonus(DataTypes.ReserveConfigurationMap memory self, uint256 bonus) internal pure {\\r\\n    require(bonus <= MAX_VALID_LIQUIDATION_BONUS, Errors.RC_INVALID_LIQ_BONUS);\\r\\n\\r\\n    self.data = (self.data & LIQUIDATION_BONUS_MASK) | (bonus << LIQUIDATION_BONUS_START_BIT_POSITION);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Gets the liquidation bonus of the reserve\\r\\n   * @param self The reserve configuration\\r\\n   * @return The liquidation bonus\\r\\n   **/\\r\\n  function getLiquidationBonus(DataTypes.ReserveConfigurationMap storage self) internal view returns (uint256) {\\r\\n    return (self.data & ~LIQUIDATION_BONUS_MASK) >> LIQUIDATION_BONUS_START_BIT_POSITION;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Sets the decimals of the underlying asset of the reserve\\r\\n   * @param self The reserve configuration\\r\\n   * @param decimals The decimals\\r\\n   **/\\r\\n  function setDecimals(DataTypes.ReserveConfigurationMap memory self, uint256 decimals) internal pure {\\r\\n    require(decimals <= MAX_VALID_DECIMALS, Errors.RC_INVALID_DECIMALS);\\r\\n\\r\\n    self.data = (self.data & DECIMALS_MASK) | (decimals << RESERVE_DECIMALS_START_BIT_POSITION);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Gets the decimals of the underlying asset of the reserve\\r\\n   * @param self The reserve configuration\\r\\n   * @return The decimals of the asset\\r\\n   **/\\r\\n  function getDecimals(DataTypes.ReserveConfigurationMap storage self) internal view returns (uint256) {\\r\\n    return (self.data & ~DECIMALS_MASK) >> RESERVE_DECIMALS_START_BIT_POSITION;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Sets the active state of the reserve\\r\\n   * @param self The reserve configuration\\r\\n   * @param active The active state\\r\\n   **/\\r\\n  function setActive(DataTypes.ReserveConfigurationMap memory self, bool active) internal pure {\\r\\n    self.data = (self.data & ACTIVE_MASK) | (uint256(active ? 1 : 0) << IS_ACTIVE_START_BIT_POSITION);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Gets the active state of the reserve\\r\\n   * @param self The reserve configuration\\r\\n   * @return The active state\\r\\n   **/\\r\\n  function getActive(DataTypes.ReserveConfigurationMap storage self) internal view returns (bool) {\\r\\n    return (self.data & ~ACTIVE_MASK) != 0;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Sets the frozen state of the reserve\\r\\n   * @param self The reserve configuration\\r\\n   * @param frozen The frozen state\\r\\n   **/\\r\\n  function setFrozen(DataTypes.ReserveConfigurationMap memory self, bool frozen) internal pure {\\r\\n    self.data = (self.data & FROZEN_MASK) | (uint256(frozen ? 1 : 0) << IS_FROZEN_START_BIT_POSITION);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Gets the frozen state of the reserve\\r\\n   * @param self The reserve configuration\\r\\n   * @return The frozen state\\r\\n   **/\\r\\n  function getFrozen(DataTypes.ReserveConfigurationMap storage self) internal view returns (bool) {\\r\\n    return (self.data & ~FROZEN_MASK) != 0;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Enables or disables borrowing on the reserve\\r\\n   * @param self The reserve configuration\\r\\n   * @param enabled True if the borrowing needs to be enabled, false otherwise\\r\\n   **/\\r\\n  function setBorrowingEnabled(DataTypes.ReserveConfigurationMap memory self, bool enabled) internal pure {\\r\\n    self.data = (self.data & BORROWING_MASK) | (uint256(enabled ? 1 : 0) << BORROWING_ENABLED_START_BIT_POSITION);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Gets the borrowing state of the reserve\\r\\n   * @param self The reserve configuration\\r\\n   * @return The borrowing state\\r\\n   **/\\r\\n  function getBorrowingEnabled(DataTypes.ReserveConfigurationMap storage self) internal view returns (bool) {\\r\\n    return (self.data & ~BORROWING_MASK) != 0;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Enables or disables stable rate borrowing on the reserve\\r\\n   * @param self The reserve configuration\\r\\n   * @param enabled True if the stable rate borrowing needs to be enabled, false otherwise\\r\\n   **/\\r\\n  function setStableRateBorrowingEnabled(DataTypes.ReserveConfigurationMap memory self, bool enabled) internal pure {\\r\\n    self.data =\\r\\n      (self.data & STABLE_BORROWING_MASK) |\\r\\n      (uint256(enabled ? 1 : 0) << STABLE_BORROWING_ENABLED_START_BIT_POSITION);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Gets the stable rate borrowing state of the reserve\\r\\n   * @param self The reserve configuration\\r\\n   * @return The stable rate borrowing state\\r\\n   **/\\r\\n  function getStableRateBorrowingEnabled(DataTypes.ReserveConfigurationMap storage self) internal view returns (bool) {\\r\\n    return (self.data & ~STABLE_BORROWING_MASK) != 0;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Sets the reserve factor of the reserve\\r\\n   * @param self The reserve configuration\\r\\n   * @param reserveFactor The reserve factor\\r\\n   **/\\r\\n  function setReserveFactor(DataTypes.ReserveConfigurationMap memory self, uint256 reserveFactor) internal pure {\\r\\n    require(reserveFactor <= MAX_VALID_RESERVE_FACTOR, Errors.RC_INVALID_RESERVE_FACTOR);\\r\\n\\r\\n    self.data = (self.data & RESERVE_FACTOR_MASK) | (reserveFactor << RESERVE_FACTOR_START_BIT_POSITION);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Gets the reserve factor of the reserve\\r\\n   * @param self The reserve configuration\\r\\n   * @return The reserve factor\\r\\n   **/\\r\\n  function getReserveFactor(DataTypes.ReserveConfigurationMap storage self) internal view returns (uint256) {\\r\\n    return (self.data & ~RESERVE_FACTOR_MASK) >> RESERVE_FACTOR_START_BIT_POSITION;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Gets the configuration flags of the reserve\\r\\n   * @param self The reserve configuration\\r\\n   * @return The state flags representing active, frozen, borrowing enabled, stableRateBorrowing enabled\\r\\n   **/\\r\\n  function getFlags(DataTypes.ReserveConfigurationMap storage self) internal view returns (bool, bool, bool, bool) {\\r\\n    uint256 dataLocal = self.data;\\r\\n\\r\\n    return (\\r\\n      (dataLocal & ~ACTIVE_MASK) != 0,\\r\\n      (dataLocal & ~FROZEN_MASK) != 0,\\r\\n      (dataLocal & ~BORROWING_MASK) != 0,\\r\\n      (dataLocal & ~STABLE_BORROWING_MASK) != 0\\r\\n    );\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Gets the configuration paramters of the reserve\\r\\n   * @param self The reserve configuration\\r\\n   * @return The state params representing ltv, liquidation threshold, liquidation bonus, the reserve decimals\\r\\n   **/\\r\\n  function getParams(\\r\\n    DataTypes.ReserveConfigurationMap storage self\\r\\n  ) internal view returns (uint256, uint256, uint256, uint256, uint256) {\\r\\n    uint256 dataLocal = self.data;\\r\\n\\r\\n    return (\\r\\n      dataLocal & ~LTV_MASK,\\r\\n      (dataLocal & ~LIQUIDATION_THRESHOLD_MASK) >> LIQUIDATION_THRESHOLD_START_BIT_POSITION,\\r\\n      (dataLocal & ~LIQUIDATION_BONUS_MASK) >> LIQUIDATION_BONUS_START_BIT_POSITION,\\r\\n      (dataLocal & ~DECIMALS_MASK) >> RESERVE_DECIMALS_START_BIT_POSITION,\\r\\n      (dataLocal & ~RESERVE_FACTOR_MASK) >> RESERVE_FACTOR_START_BIT_POSITION\\r\\n    );\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Gets the configuration paramters of the reserve from a memory object\\r\\n   * @param self The reserve configuration\\r\\n   * @return The state params representing ltv, liquidation threshold, liquidation bonus, the reserve decimals\\r\\n   **/\\r\\n  function getParamsMemory(\\r\\n    DataTypes.ReserveConfigurationMap memory self\\r\\n  ) internal pure returns (uint256, uint256, uint256, uint256, uint256) {\\r\\n    return (\\r\\n      self.data & ~LTV_MASK,\\r\\n      (self.data & ~LIQUIDATION_THRESHOLD_MASK) >> LIQUIDATION_THRESHOLD_START_BIT_POSITION,\\r\\n      (self.data & ~LIQUIDATION_BONUS_MASK) >> LIQUIDATION_BONUS_START_BIT_POSITION,\\r\\n      (self.data & ~DECIMALS_MASK) >> RESERVE_DECIMALS_START_BIT_POSITION,\\r\\n      (self.data & ~RESERVE_FACTOR_MASK) >> RESERVE_FACTOR_START_BIT_POSITION\\r\\n    );\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Gets the configuration flags of the reserve from a memory object\\r\\n   * @param self The reserve configuration\\r\\n   * @return The state flags representing active, frozen, borrowing enabled, stableRateBorrowing enabled\\r\\n   **/\\r\\n  function getFlagsMemory(\\r\\n    DataTypes.ReserveConfigurationMap memory self\\r\\n  ) internal pure returns (bool, bool, bool, bool) {\\r\\n    return (\\r\\n      (self.data & ~ACTIVE_MASK) != 0,\\r\\n      (self.data & ~FROZEN_MASK) != 0,\\r\\n      (self.data & ~BORROWING_MASK) != 0,\\r\\n      (self.data & ~STABLE_BORROWING_MASK) != 0\\r\\n    );\\r\\n  }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/libraries/helpers/Errors.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\r\\npragma solidity 0.8.4;\\r\\n\\r\\n/**\\r\\n * @title Errors library\\r\\n * @author BendDao; Forked and edited by Unlockd\\r\\n * @notice Defines the error messages emitted by the different contracts of the Unlockd protocol\\r\\n */\\r\\nlibrary Errors {\\r\\n  enum ReturnCode {\\r\\n    SUCCESS,\\r\\n    FAILED\\r\\n  }\\r\\n\\r\\n  string public constant SUCCESS = \\\"0\\\";\\r\\n\\r\\n  //common errors\\r\\n  string public constant CALLER_NOT_POOL_ADMIN = \\\"100\\\"; // 'The caller must be the pool admin'\\r\\n  string public constant CALLER_NOT_ADDRESS_PROVIDER = \\\"101\\\";\\r\\n  string public constant INVALID_FROM_BALANCE_AFTER_TRANSFER = \\\"102\\\";\\r\\n  string public constant INVALID_TO_BALANCE_AFTER_TRANSFER = \\\"103\\\";\\r\\n  string public constant CALLER_NOT_ONBEHALFOF_OR_IN_WHITELIST = \\\"104\\\";\\r\\n  string public constant CALLER_NOT_POOL_LIQUIDATOR = \\\"105\\\";\\r\\n  string public constant INVALID_ZERO_ADDRESS = \\\"106\\\";\\r\\n  string public constant CALLER_NOT_LTV_MANAGER = \\\"107\\\";\\r\\n  string public constant CALLER_NOT_PRICE_MANAGER = \\\"108\\\";\\r\\n  string public constant CALLER_NOT_UTOKEN_MANAGER = \\\"109\\\";\\r\\n\\r\\n  //math library errors\\r\\n  string public constant MATH_MULTIPLICATION_OVERFLOW = \\\"200\\\";\\r\\n  string public constant MATH_ADDITION_OVERFLOW = \\\"201\\\";\\r\\n  string public constant MATH_DIVISION_BY_ZERO = \\\"202\\\";\\r\\n\\r\\n  //validation & check errors\\r\\n  string public constant VL_INVALID_AMOUNT = \\\"301\\\"; // 'Amount must be greater than 0'\\r\\n  string public constant VL_NO_ACTIVE_RESERVE = \\\"302\\\"; // 'Action requires an active reserve'\\r\\n  string public constant VL_RESERVE_FROZEN = \\\"303\\\"; // 'Action cannot be performed because the reserve is frozen'\\r\\n  string public constant VL_NOT_ENOUGH_AVAILABLE_USER_BALANCE = \\\"304\\\"; // 'User cannot withdraw more than the available balance'\\r\\n  string public constant VL_BORROWING_NOT_ENABLED = \\\"305\\\"; // 'Borrowing is not enabled'\\r\\n  string public constant VL_COLLATERAL_BALANCE_IS_0 = \\\"306\\\"; // 'The collateral balance is 0'\\r\\n  string public constant VL_HEALTH_FACTOR_LOWER_THAN_LIQUIDATION_THRESHOLD = \\\"307\\\"; // 'Health factor is lesser than the liquidation threshold'\\r\\n  string public constant VL_COLLATERAL_CANNOT_COVER_NEW_BORROW = \\\"308\\\"; // 'There is not enough collateral to cover a new borrow'\\r\\n  string public constant VL_NO_DEBT_OF_SELECTED_TYPE = \\\"309\\\"; // 'for repayment of stable debt, the user needs to have stable debt, otherwise, he needs to have variable debt'\\r\\n  string public constant VL_NO_ACTIVE_NFT = \\\"310\\\";\\r\\n  string public constant VL_NFT_FROZEN = \\\"311\\\";\\r\\n  string public constant VL_SPECIFIED_CURRENCY_NOT_BORROWED_BY_USER = \\\"312\\\"; // 'User did not borrow the specified currency'\\r\\n  string public constant VL_INVALID_HEALTH_FACTOR = \\\"313\\\";\\r\\n  string public constant VL_INVALID_ONBEHALFOF_ADDRESS = \\\"314\\\";\\r\\n  string public constant VL_INVALID_TARGET_ADDRESS = \\\"315\\\";\\r\\n  string public constant VL_INVALID_RESERVE_ADDRESS = \\\"316\\\";\\r\\n  string public constant VL_SPECIFIED_LOAN_NOT_BORROWED_BY_USER = \\\"317\\\";\\r\\n  string public constant VL_SPECIFIED_RESERVE_NOT_BORROWED_BY_USER = \\\"318\\\";\\r\\n  string public constant VL_HEALTH_FACTOR_HIGHER_THAN_LIQUIDATION_THRESHOLD = \\\"319\\\";\\r\\n  string public constant VL_TIMEFRAME_EXCEEDED = \\\"320\\\";\\r\\n  string public constant VL_VALUE_EXCEED_TREASURY_BALANCE = \\\"321\\\";\\r\\n\\r\\n  //lend pool errors\\r\\n  string public constant LP_CALLER_NOT_LEND_POOL_CONFIGURATOR = \\\"400\\\"; // 'The caller of the function is not the lending pool configurator'\\r\\n  string public constant LP_IS_PAUSED = \\\"401\\\"; // 'Pool is paused'\\r\\n  string public constant LP_NO_MORE_RESERVES_ALLOWED = \\\"402\\\";\\r\\n  string public constant LP_NOT_CONTRACT = \\\"403\\\";\\r\\n  string public constant LP_BORROW_NOT_EXCEED_LIQUIDATION_THRESHOLD = \\\"404\\\";\\r\\n  string public constant LP_BORROW_IS_EXCEED_LIQUIDATION_PRICE = \\\"405\\\";\\r\\n  string public constant LP_NO_MORE_NFTS_ALLOWED = \\\"406\\\";\\r\\n  string public constant LP_INVALID_USER_NFT_AMOUNT = \\\"407\\\";\\r\\n  string public constant LP_INCONSISTENT_PARAMS = \\\"408\\\";\\r\\n  string public constant LP_NFT_IS_NOT_USED_AS_COLLATERAL = \\\"409\\\";\\r\\n  string public constant LP_CALLER_MUST_BE_AN_UTOKEN = \\\"410\\\";\\r\\n  string public constant LP_INVALID_NFT_AMOUNT = \\\"411\\\";\\r\\n  string public constant LP_NFT_HAS_USED_AS_COLLATERAL = \\\"412\\\";\\r\\n  string public constant LP_DELEGATE_CALL_FAILED = \\\"413\\\";\\r\\n  string public constant LP_AMOUNT_LESS_THAN_EXTRA_DEBT = \\\"414\\\";\\r\\n  string public constant LP_AMOUNT_LESS_THAN_REDEEM_THRESHOLD = \\\"415\\\";\\r\\n  string public constant LP_AMOUNT_GREATER_THAN_MAX_REPAY = \\\"416\\\";\\r\\n  string public constant LP_NFT_TOKEN_ID_EXCEED_MAX_LIMIT = \\\"417\\\";\\r\\n  string public constant LP_NFT_SUPPLY_NUM_EXCEED_MAX_LIMIT = \\\"418\\\";\\r\\n  string public constant LP_CALLER_NOT_LEND_POOL_LIQUIDATOR_NOR_GATEWAY = \\\"419\\\";\\r\\n  string public constant LP_CONSECUTIVE_BIDS_NOT_ALLOWED = \\\"420\\\";\\r\\n  string public constant LP_INVALID_OVERFLOW_VALUE = \\\"421\\\";\\r\\n  string public constant LP_CALLER_NOT_NFT_HOLDER = \\\"422\\\";\\r\\n  string public constant LP_NFT_NOT_ALLOWED_TO_SELL = \\\"423\\\";\\r\\n  string public constant LP_RESERVES_WITHOUT_ENOUGH_LIQUIDITY = \\\"424\\\";\\r\\n  string public constant LP_COLLECTION_NOT_SUPPORTED = \\\"425\\\";\\r\\n  string public constant LP_MSG_VALUE_DIFFERENT_FROM_CONFIG_FEE = \\\"426\\\";\\r\\n  string public constant LP_INVALID_SAFE_HEALTH_FACTOR = \\\"427\\\";\\r\\n  string public constant LP_AMOUNT_LESS_THAN_DEBT = \\\"428\\\";\\r\\n  string public constant LP_AMOUNT_DIFFERENT_FROM_REQUIRED_BUYOUT_PRICE = \\\"429\\\";\\r\\n  string public constant LP_CALLER_NOT_DEBT_TOKEN_MANAGER = \\\"430\\\";\\r\\n  string public constant LP_CALLER_NOT_RESERVOIR_OR_DEBT_MARKET = \\\"431\\\";\\r\\n\\r\\n  //lend pool loan errors\\r\\n  string public constant LPL_CLAIM_HASNT_STARTED_YET = \\\"479\\\";\\r\\n  string public constant LPL_INVALID_LOAN_STATE = \\\"480\\\";\\r\\n  string public constant LPL_INVALID_LOAN_AMOUNT = \\\"481\\\";\\r\\n  string public constant LPL_INVALID_TAKEN_AMOUNT = \\\"482\\\";\\r\\n  string public constant LPL_AMOUNT_OVERFLOW = \\\"483\\\";\\r\\n  string public constant LPL_BID_PRICE_LESS_THAN_DEBT_PRICE = \\\"484\\\";\\r\\n  string public constant LPL_BID_PRICE_LESS_THAN_HIGHEST_PRICE = \\\"485\\\";\\r\\n  string public constant LPL_BID_REDEEM_DURATION_HAS_END = \\\"486\\\";\\r\\n  string public constant LPL_BID_USER_NOT_SAME = \\\"487\\\";\\r\\n  string public constant LPL_BID_REPAY_AMOUNT_NOT_ENOUGH = \\\"488\\\";\\r\\n  string public constant LPL_BID_AUCTION_DURATION_HAS_END = \\\"489\\\";\\r\\n  string public constant LPL_BID_AUCTION_DURATION_NOT_END = \\\"490\\\";\\r\\n  string public constant LPL_BID_PRICE_LESS_THAN_BORROW = \\\"491\\\";\\r\\n  string public constant LPL_INVALID_BIDDER_ADDRESS = \\\"492\\\";\\r\\n  string public constant LPL_AMOUNT_LESS_THAN_BID_FINE = \\\"493\\\";\\r\\n  string public constant LPL_INVALID_BID_FINE = \\\"494\\\";\\r\\n  string public constant LPL_BID_PRICE_LESS_THAN_MIN_BID_REQUIRED = \\\"495\\\";\\r\\n  string public constant LPL_BID_NOT_BUYOUT_PRICE = \\\"496\\\";\\r\\n  string public constant LPL_BUYOUT_DURATION_HAS_END = \\\"497\\\";\\r\\n  string public constant LPL_BUYOUT_PRICE_LESS_THAN_BORROW = \\\"498\\\";\\r\\n  string public constant LPL_CALLER_MUST_BE_MARKET_ADAPTER = \\\"499\\\";\\r\\n\\r\\n  //common token errors\\r\\n  string public constant CT_CALLER_MUST_BE_LEND_POOL = \\\"500\\\"; // 'The caller of this function must be a lending pool'\\r\\n  string public constant CT_INVALID_MINT_AMOUNT = \\\"501\\\"; //invalid amount to mint\\r\\n  string public constant CT_INVALID_BURN_AMOUNT = \\\"502\\\"; //invalid amount to burn\\r\\n  string public constant CT_BORROW_ALLOWANCE_NOT_ENOUGH = \\\"503\\\";\\r\\n  string public constant CT_CALLER_MUST_BE_DEBT_MARKET = \\\"504\\\"; // 'The caller of this function must be a debt market'\\r\\n\\r\\n  //reserve logic errors\\r\\n  string public constant RL_RESERVE_ALREADY_INITIALIZED = \\\"601\\\"; // 'Reserve has already been initialized'\\r\\n  string public constant RL_LIQUIDITY_INDEX_OVERFLOW = \\\"602\\\"; //  Liquidity index overflows uint128\\r\\n  string public constant RL_VARIABLE_BORROW_INDEX_OVERFLOW = \\\"603\\\"; //  Variable borrow index overflows uint128\\r\\n  string public constant RL_LIQUIDITY_RATE_OVERFLOW = \\\"604\\\"; //  Liquidity rate overflows uint128\\r\\n  string public constant RL_VARIABLE_BORROW_RATE_OVERFLOW = \\\"605\\\"; //  Variable borrow rate overflows uint128\\r\\n\\r\\n  //configure errors\\r\\n  string public constant LPC_RESERVE_LIQUIDITY_NOT_0 = \\\"700\\\"; // 'The liquidity of the reserve needs to be 0'\\r\\n  string public constant LPC_INVALID_CONFIGURATION = \\\"701\\\"; // 'Invalid risk parameters for the reserve'\\r\\n  string public constant LPC_CALLER_NOT_EMERGENCY_ADMIN = \\\"702\\\"; // 'The caller must be the emergency admin'\\r\\n  string public constant LPC_INVALID_UNFT_ADDRESS = \\\"703\\\";\\r\\n  string public constant LPC_INVALIED_LOAN_ADDRESS = \\\"704\\\";\\r\\n  string public constant LPC_NFT_LIQUIDITY_NOT_0 = \\\"705\\\";\\r\\n  string public constant LPC_PARAMS_MISMATCH = \\\"706\\\"; // NFT assets & token ids mismatch\\r\\n  string public constant LPC_FEE_PERCENTAGE_TOO_HIGH = \\\"707\\\";\\r\\n  string public constant LPC_INVALID_LTVMANAGER_ADDRESS = \\\"708\\\";\\r\\n  string public constant LPC_INCONSISTENT_PARAMS = \\\"709\\\";\\r\\n  string public constant LPC_INVALID_SAFE_HEALTH_FACTOR = \\\"710\\\";\\r\\n  //reserve config errors\\r\\n  string public constant RC_INVALID_LTV = \\\"730\\\";\\r\\n  string public constant RC_INVALID_LIQ_THRESHOLD = \\\"731\\\";\\r\\n  string public constant RC_INVALID_LIQ_BONUS = \\\"732\\\";\\r\\n  string public constant RC_INVALID_DECIMALS = \\\"733\\\";\\r\\n  string public constant RC_INVALID_RESERVE_FACTOR = \\\"734\\\";\\r\\n  string public constant RC_INVALID_REDEEM_DURATION = \\\"735\\\";\\r\\n  string public constant RC_INVALID_AUCTION_DURATION = \\\"736\\\";\\r\\n  string public constant RC_INVALID_REDEEM_FINE = \\\"737\\\";\\r\\n  string public constant RC_INVALID_REDEEM_THRESHOLD = \\\"738\\\";\\r\\n  string public constant RC_INVALID_MIN_BID_FINE = \\\"739\\\";\\r\\n  string public constant RC_INVALID_MAX_BID_FINE = \\\"740\\\";\\r\\n  string public constant RC_INVALID_MAX_CONFIG_TIMESTAMP = \\\"741\\\";\\r\\n\\r\\n  //address provider erros\\r\\n  string public constant LPAPR_PROVIDER_NOT_REGISTERED = \\\"760\\\"; // 'Provider is not registered'\\r\\n  string public constant LPAPR_INVALID_ADDRESSES_PROVIDER_ID = \\\"761\\\";\\r\\n\\r\\n  //NFTOracleErrors\\r\\n  string public constant NFTO_INVALID_PRICEM_ADDRESS = \\\"900\\\";\\r\\n\\r\\n  //Debt Market\\r\\n  string public constant DM_CALLER_NOT_THE_OWNER = \\\"1000\\\";\\r\\n  string public constant DM_DEBT_SHOULD_EXIST = \\\"1001\\\";\\r\\n  string public constant DM_INVALID_AMOUNT = \\\"1002\\\";\\r\\n  string public constant DM_FAIL_ON_SEND_ETH = \\\"1003\\\";\\r\\n  string public constant DM_DEBT_SHOULD_NOT_BE_SOLD = \\\"1004\\\";\\r\\n  string public constant DM_DEBT_ALREADY_EXIST = \\\"1005\\\";\\r\\n  string public constant DM_LOAN_SHOULD_EXIST = \\\"1006\\\";\\r\\n  string public constant DM_AUCTION_ALREADY_ENDED = \\\"1007\\\";\\r\\n  string public constant DM_BID_PRICE_HIGHER_THAN_SELL_PRICE = \\\"1008\\\";\\r\\n  string public constant DM_BID_PRICE_LESS_THAN_PREVIOUS_BID = \\\"1009\\\";\\r\\n  string public constant DM_INVALID_SELL_TYPE = \\\"1010\\\";\\r\\n  string public constant DM_AUCTION_NOT_ALREADY_ENDED = \\\"1011\\\";\\r\\n  string public constant DM_INVALID_CLAIM_RECEIVER = \\\"1012\\\";\\r\\n  string public constant DM_AMOUNT_DIFFERENT_FROM_SELL_PRICE = \\\"1013\\\";\\r\\n  string public constant DM_BID_PRICE_LESS_THAN_MIN_BID_PRICE = \\\"1014\\\";\\r\\n  string public constant DM_BORROWED_AMOUNT_DIVERGED = \\\"1015\\\";\\r\\n  string public constant DM_INVALID_AUTHORIZED_ADDRESS = \\\"1016\\\";\\r\\n  string public constant DM_CALLER_NOT_THE_OWNER_OR_AUTHORIZED = \\\"1017\\\";\\r\\n  string public constant DM_INVALID_DELTA_BID_PERCENT = \\\"1018\\\";\\r\\n  string public constant DM_IS_PAUSED = \\\"1019\\\";\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/libraries/logic/ConfiguratorLogic.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\r\\npragma solidity 0.8.4;\\r\\n\\r\\nimport {IUToken} from \\\"../../interfaces/IUToken.sol\\\";\\r\\nimport {IDebtToken} from \\\"../../interfaces/IDebtToken.sol\\\";\\r\\nimport {ILendPool} from \\\"../../interfaces/ILendPool.sol\\\";\\r\\nimport {ILendPoolAddressesProvider} from \\\"../../interfaces/ILendPoolAddressesProvider.sol\\\";\\r\\n\\r\\nimport {IUNFT} from \\\"../../interfaces/IUNFT.sol\\\";\\r\\nimport {IUNFTRegistry} from \\\"../../interfaces/IUNFTRegistry.sol\\\";\\r\\n\\r\\nimport {UnlockdUpgradeableProxy} from \\\"../../libraries/proxy/UnlockdUpgradeableProxy.sol\\\";\\r\\nimport {ReserveConfiguration} from \\\"../../libraries/configuration/ReserveConfiguration.sol\\\";\\r\\nimport {NftConfiguration} from \\\"../../libraries/configuration/NftConfiguration.sol\\\";\\r\\nimport {DataTypes} from \\\"../../libraries/types/DataTypes.sol\\\";\\r\\nimport {ConfigTypes} from \\\"../../libraries/types/ConfigTypes.sol\\\";\\r\\nimport {Errors} from \\\"../../libraries/helpers/Errors.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title ConfiguratorLogic library\\r\\n * @author BendDao; Forked and edited by Unlockd\\r\\n * @notice Implements the logic to configuration feature\\r\\n */\\r\\nlibrary ConfiguratorLogic {\\r\\n  using ReserveConfiguration for DataTypes.ReserveConfigurationMap;\\r\\n  using NftConfiguration for DataTypes.NftConfigurationMap;\\r\\n  /*//////////////////////////////////////////////////////////////\\r\\n                          EVENTS\\r\\n  //////////////////////////////////////////////////////////////*/\\r\\n  /**\\r\\n   * @dev Emitted when a reserve is initialized.\\r\\n   * @param asset The address of the underlying asset of the reserve\\r\\n   * @param uToken The address of the associated uToken contract\\r\\n   * @param debtToken The address of the associated debtToken contract\\r\\n   * @param interestRateAddress The address of the interest rate strategy for the reserve\\r\\n   **/\\r\\n  event ReserveInitialized(\\r\\n    address indexed asset,\\r\\n    address indexed uToken,\\r\\n    address debtToken,\\r\\n    address interestRateAddress\\r\\n  );\\r\\n\\r\\n  /**\\r\\n   * @dev Emitted when a nft is initialized.\\r\\n   * @param asset The address of the underlying asset of the nft\\r\\n   * @param uNft The address of the associated uNFT contract\\r\\n   **/\\r\\n  event NftInitialized(address indexed asset, address indexed uNft);\\r\\n\\r\\n  /**\\r\\n   * @dev Emitted when an uToken implementation is upgraded\\r\\n   * @param asset The address of the underlying asset of the reserve\\r\\n   * @param proxy The uToken proxy address\\r\\n   * @param implementation The new uToken implementation\\r\\n   **/\\r\\n  event UTokenUpgraded(address indexed asset, address indexed proxy, address indexed implementation);\\r\\n\\r\\n  /**\\r\\n   * @dev Emitted when the implementation of a debt token is upgraded\\r\\n   * @param asset The address of the underlying asset of the reserve\\r\\n   * @param proxy The debt token proxy address\\r\\n   * @param implementation The new debtToken implementation\\r\\n   **/\\r\\n  event DebtTokenUpgraded(address indexed asset, address indexed proxy, address indexed implementation);\\r\\n\\r\\n  /*//////////////////////////////////////////////////////////////\\r\\n                        MAIN LOGIC\\r\\n  //////////////////////////////////////////////////////////////*/\\r\\n  /**\\r\\n   * @notice Initializes a reserve\\r\\n   * @dev Emits the `ReserveInitialized()` event.\\r\\n   * @param addressProvider The addresses provider\\r\\n   * @param cachePool The lend pool\\r\\n   * @param input The data to initialize the reserve\\r\\n   */\\r\\n  function executeInitReserve(\\r\\n    ILendPoolAddressesProvider addressProvider,\\r\\n    ILendPool cachePool,\\r\\n    ConfigTypes.InitReserveInput calldata input\\r\\n  ) external {\\r\\n    address uTokenProxyAddress = _initTokenWithProxy(\\r\\n      input.uTokenImpl,\\r\\n      abi.encodeWithSelector(\\r\\n        IUToken.initialize.selector,\\r\\n        addressProvider,\\r\\n        input.treasury,\\r\\n        input.underlyingAsset,\\r\\n        input.underlyingAssetDecimals,\\r\\n        input.uTokenName,\\r\\n        input.uTokenSymbol\\r\\n      )\\r\\n    );\\r\\n\\r\\n    address debtTokenProxyAddress = _initTokenWithProxy(\\r\\n      input.debtTokenImpl,\\r\\n      abi.encodeWithSelector(\\r\\n        IDebtToken.initialize.selector,\\r\\n        addressProvider,\\r\\n        input.underlyingAsset,\\r\\n        input.underlyingAssetDecimals,\\r\\n        input.debtTokenName,\\r\\n        input.debtTokenSymbol\\r\\n      )\\r\\n    );\\r\\n\\r\\n    cachePool.initReserve(input.underlyingAsset, uTokenProxyAddress, debtTokenProxyAddress, input.interestRateAddress);\\r\\n\\r\\n    DataTypes.ReserveConfigurationMap memory currentConfig = cachePool.getReserveConfiguration(input.underlyingAsset);\\r\\n\\r\\n    currentConfig.setDecimals(input.underlyingAssetDecimals);\\r\\n\\r\\n    currentConfig.setActive(true);\\r\\n    currentConfig.setFrozen(false);\\r\\n\\r\\n    cachePool.setReserveConfiguration(input.underlyingAsset, currentConfig.data);\\r\\n\\r\\n    emit ReserveInitialized(\\r\\n      input.underlyingAsset,\\r\\n      uTokenProxyAddress,\\r\\n      debtTokenProxyAddress,\\r\\n      input.interestRateAddress\\r\\n    );\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Initializes an NFT\\r\\n   * @dev Emits the `NftInitialized()` event.\\r\\n   * @param pool_ The lend pool\\r\\n   * @param registry_ The UNFT Registry\\r\\n   * @param input The data to initialize the NFT\\r\\n   */\\r\\n  function executeInitNft(ILendPool pool_, IUNFTRegistry registry_, ConfigTypes.InitNftInput calldata input) external {\\r\\n    // UNFT proxy and implementation are created in UNFTRegistry\\r\\n    (address uNftProxy, ) = registry_.getUNFTAddresses(input.underlyingAsset);\\r\\n    require(uNftProxy != address(0), Errors.LPC_INVALID_UNFT_ADDRESS);\\r\\n\\r\\n    pool_.initNft(input.underlyingAsset, uNftProxy);\\r\\n\\r\\n    DataTypes.NftConfigurationMap memory currentConfig = pool_.getNftConfiguration(input.underlyingAsset);\\r\\n\\r\\n    currentConfig.setActive(true);\\r\\n    currentConfig.setFrozen(false);\\r\\n\\r\\n    pool_.setNftConfiguration(input.underlyingAsset, currentConfig.data);\\r\\n\\r\\n    emit NftInitialized(input.underlyingAsset, uNftProxy);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Updates the uToken\\r\\n   * @dev Emits the `UTokenUpgraded()` event.\\r\\n   * @param cachedPool The lend pool\\r\\n   * @param input The data to initialize the uToken\\r\\n   */\\r\\n  function executeUpdateUToken(ILendPool cachedPool, ConfigTypes.UpdateUTokenInput calldata input) external {\\r\\n    DataTypes.ReserveData memory reserveData = cachedPool.getReserveData(input.asset);\\r\\n\\r\\n    _upgradeTokenImplementation(reserveData.uTokenAddress, input.implementation, input.encodedCallData);\\r\\n\\r\\n    emit UTokenUpgraded(input.asset, reserveData.uTokenAddress, input.implementation);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Updates the debt token\\r\\n   * @dev Emits the `DebtTokenUpgraded()` event.\\r\\n   * @param cachedPool The lend pool\\r\\n   * @param input The data to initialize the debt token\\r\\n   */\\r\\n  function executeUpdateDebtToken(ILendPool cachedPool, ConfigTypes.UpdateDebtTokenInput calldata input) external {\\r\\n    DataTypes.ReserveData memory reserveData = cachedPool.getReserveData(input.asset);\\r\\n\\r\\n    _upgradeTokenImplementation(reserveData.debtTokenAddress, input.implementation, input.encodedCallData);\\r\\n\\r\\n    emit DebtTokenUpgraded(input.asset, reserveData.debtTokenAddress, input.implementation);\\r\\n  }\\r\\n\\r\\n  /*//////////////////////////////////////////////////////////////\\r\\n                          INTERNALS\\r\\n  //////////////////////////////////////////////////////////////*/\\r\\n  /**\\r\\n   * @notice Initializes the proxy contract\\r\\n   * @param implementation The proxy contract\\r\\n   * @param initParams The initial params to set in the initialization\\r\\n   */\\r\\n  function _initTokenWithProxy(address implementation, bytes memory initParams) internal returns (address) {\\r\\n    UnlockdUpgradeableProxy proxy = new UnlockdUpgradeableProxy(implementation, address(this), initParams);\\r\\n\\r\\n    return address(proxy);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Upgrades the implementation contract for the proxy\\r\\n   * @param proxyAddress The proxy contract\\r\\n   * @param implementation The new implementation contract\\r\\n   * @param encodedCallData calldata to be executed\\r\\n   */\\r\\n  function _upgradeTokenImplementation(\\r\\n    address proxyAddress,\\r\\n    address implementation,\\r\\n    bytes memory encodedCallData\\r\\n  ) internal {\\r\\n    UnlockdUpgradeableProxy proxy = UnlockdUpgradeableProxy(payable(proxyAddress));\\r\\n\\r\\n    if (encodedCallData.length > 0) {\\r\\n      proxy.upgradeToAndCall(implementation, encodedCallData);\\r\\n    } else {\\r\\n      proxy.upgradeTo(implementation);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /*//////////////////////////////////////////////////////////////\\r\\n                      GETTERS & SETTERS\\r\\n  //////////////////////////////////////////////////////////////*/\\r\\n  /**\\r\\n   * @notice Gets the token implementation contract\\r\\n   * @param proxyAddress The proxy contract to fetch the implementation from\\r\\n   */\\r\\n  function getTokenImplementation(address proxyAddress) external view returns (address) {\\r\\n    UnlockdUpgradeableProxy proxy = UnlockdUpgradeableProxy(payable(proxyAddress));\\r\\n    return proxy.getImplementation();\\r\\n  }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/libraries/math/PercentageMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\r\\npragma solidity 0.8.4;\\r\\n\\r\\nimport {Errors} from \\\"../helpers/Errors.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title PercentageMath library\\r\\n * @author BendDao; Forked and edited by Unlockd\\r\\n * @notice Provides functions to perform percentage calculations\\r\\n * @dev Percentages are defined by default with 2 decimals of precision (100.00). The precision is indicated by PERCENTAGE_FACTOR\\r\\n * @dev Operations are rounded half up\\r\\n **/\\r\\n\\r\\nlibrary PercentageMath {\\r\\n  uint256 constant PERCENTAGE_FACTOR = 1e4; //percentage plus two decimals\\r\\n  uint256 constant HALF_PERCENT = PERCENTAGE_FACTOR / 2;\\r\\n  uint256 constant ONE_PERCENT = 1e2; //100, 1%\\r\\n  uint256 constant TEN_PERCENT = 1e3; //1000, 10%\\r\\n  uint256 constant ONE_THOUSANDTH_PERCENT = 1e1; //10, 0.1%\\r\\n  uint256 constant ONE_TEN_THOUSANDTH_PERCENT = 1; //1, 0.01%\\r\\n\\r\\n  /**\\r\\n   * @dev Executes a percentage multiplication\\r\\n   * @param value The value of which the percentage needs to be calculated\\r\\n   * @param percentage The percentage of the value to be calculated\\r\\n   * @return The percentage of value\\r\\n   **/\\r\\n  function percentMul(uint256 value, uint256 percentage) internal pure returns (uint256) {\\r\\n    if (value == 0 || percentage == 0) {\\r\\n      return 0;\\r\\n    }\\r\\n\\r\\n    require(value <= (type(uint256).max - HALF_PERCENT) / percentage, Errors.MATH_MULTIPLICATION_OVERFLOW);\\r\\n\\r\\n    return (value * percentage + HALF_PERCENT) / PERCENTAGE_FACTOR;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Executes a percentage division\\r\\n   * @param value The value of which the percentage needs to be calculated\\r\\n   * @param percentage The percentage of the value to be calculated\\r\\n   * @return The value divided the percentage\\r\\n   **/\\r\\n  function percentDiv(uint256 value, uint256 percentage) internal pure returns (uint256) {\\r\\n    require(percentage != 0, Errors.MATH_DIVISION_BY_ZERO);\\r\\n    uint256 halfPercentage = percentage / 2;\\r\\n\\r\\n    require(value <= (type(uint256).max - halfPercentage) / PERCENTAGE_FACTOR, Errors.MATH_MULTIPLICATION_OVERFLOW);\\r\\n\\r\\n    return (value * PERCENTAGE_FACTOR + halfPercentage) / percentage;\\r\\n  }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/libraries/proxy/UnlockdUpgradeableProxy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.4;\\n\\nimport {TransparentUpgradeableProxy} from \\\"@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol\\\";\\nimport \\\"../helpers/Errors.sol\\\";\\n\\ncontract UnlockdUpgradeableProxy is TransparentUpgradeableProxy {\\n  constructor(\\n    address _logic,\\n    address admin_,\\n    bytes memory _data\\n  ) payable TransparentUpgradeableProxy(_logic, admin_, _data) {}\\n\\n  modifier OnlyAdmin() {\\n    require(msg.sender == _getAdmin(), Errors.CALLER_NOT_POOL_ADMIN);\\n    _;\\n  }\\n\\n  /**\\n  @dev Returns the implementation contract for the proxy\\n   */\\n  function getImplementation() external view OnlyAdmin returns (address) {\\n    return _getImplementation();\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/types/ConfigTypes.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.4;\\n\\nlibrary ConfigTypes {\\n  struct InitReserveInput {\\n    address uTokenImpl;\\n    address debtTokenImpl;\\n    uint8 underlyingAssetDecimals;\\n    address interestRateAddress;\\n    address underlyingAsset;\\n    address treasury;\\n    string underlyingAssetName;\\n    string uTokenName;\\n    string uTokenSymbol;\\n    string debtTokenName;\\n    string debtTokenSymbol;\\n  }\\n\\n  struct InitNftInput {\\n    address underlyingAsset;\\n  }\\n\\n  struct UpdateUTokenInput {\\n    address asset;\\n    address implementation;\\n    bytes encodedCallData;\\n  }\\n\\n  struct UpdateDebtTokenInput {\\n    address asset;\\n    address implementation;\\n    bytes encodedCallData;\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/types/DataTypes.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\r\\npragma solidity 0.8.4;\\r\\n\\r\\nlibrary DataTypes {\\r\\n  struct ReserveData {\\r\\n    //stores the reserve configuration\\r\\n    ReserveConfigurationMap configuration;\\r\\n    //the liquidity index. Expressed in ray\\r\\n    uint128 liquidityIndex;\\r\\n    //variable borrow index. Expressed in ray\\r\\n    uint128 variableBorrowIndex;\\r\\n    //the current supply rate. Expressed in ray\\r\\n    uint128 currentLiquidityRate;\\r\\n    //the current variable borrow rate. Expressed in ray\\r\\n    uint128 currentVariableBorrowRate;\\r\\n    uint40 lastUpdateTimestamp;\\r\\n    //tokens addresses\\r\\n    address uTokenAddress;\\r\\n    address debtTokenAddress;\\r\\n    //address of the interest rate strategy\\r\\n    address interestRateAddress;\\r\\n    //the id of the reserve. Represents the position in the list of the active reserves\\r\\n    uint8 id;\\r\\n  }\\r\\n\\r\\n  struct NftData {\\r\\n    //stores the nft configuration\\r\\n    NftConfigurationMap configuration;\\r\\n    //address of the uNFT contract\\r\\n    address uNftAddress;\\r\\n    //the id of the nft. Represents the position in the list of the active nfts\\r\\n    uint8 id;\\r\\n    uint256 maxSupply;\\r\\n    uint256 maxTokenId;\\r\\n  }\\r\\n\\r\\n  struct ReserveConfigurationMap {\\r\\n    //bit 0-15: LTV\\r\\n    //bit 16-31: Liq. threshold\\r\\n    //bit 32-47: Liq. bonus\\r\\n    //bit 48-55: Decimals\\r\\n    //bit 56: Reserve is active\\r\\n    //bit 57: reserve is frozen\\r\\n    //bit 58: borrowing is enabled\\r\\n    //bit 59: stable rate borrowing enabled\\r\\n    //bit 60-63: reserved\\r\\n    //bit 64-79: reserve factor\\r\\n    uint256 data;\\r\\n  }\\r\\n\\r\\n  struct NftConfigurationMap {\\r\\n    //bit 0-15: LTV\\r\\n    //bit 16-31: Liq. threshold\\r\\n    //bit 32-47: Liq. bonus\\r\\n    //bit 56: NFT is active\\r\\n    //bit 57: NFT is frozen\\r\\n    //bit 64-71: Redeem duration\\r\\n    //bit 72-79: Auction duration\\r\\n    //bit 80-95: Redeem fine\\r\\n    //bit 96-111: Redeem threshold\\r\\n    //bit 112-127: Min bid fine\\r\\n    //bit 128-159: Timestamp Config\\r\\n    uint256 data;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Enum describing the current state of a loan\\r\\n   * State change flow:\\r\\n   *  Created -> Active -> Repaid\\r\\n   *                    -> Auction -> Defaulted\\r\\n   */\\r\\n  enum LoanState {\\r\\n    // We need a default that is not 'Created' - this is the zero value\\r\\n    None,\\r\\n    // The loan data is stored, but not initiated yet.\\r\\n    Created,\\r\\n    // The loan has been initialized, funds have been delivered to the borrower and the collateral is held.\\r\\n    Active,\\r\\n    // The loan is in auction, higest price liquidator will got chance to claim it.\\r\\n    Auction,\\r\\n    // The loan has been repaid, and the collateral has been returned to the borrower. This is a terminal state.\\r\\n    Repaid,\\r\\n    // The loan was delinquent and collateral claimed by the liquidator. This is a terminal state.\\r\\n    Defaulted\\r\\n  }\\r\\n\\r\\n  struct LoanData {\\r\\n    //the id of the nft loan\\r\\n    uint256 loanId;\\r\\n    //the current state of the loan\\r\\n    LoanState state;\\r\\n    //address of borrower\\r\\n    address borrower;\\r\\n    //address of nft asset token\\r\\n    address nftAsset;\\r\\n    //the id of nft token\\r\\n    uint256 nftTokenId;\\r\\n    //address of reserve asset token\\r\\n    address reserveAsset;\\r\\n    //scaled borrow amount. Expressed in ray\\r\\n    uint256 scaledAmount;\\r\\n    //start time of first bid time\\r\\n    uint256 bidStartTimestamp;\\r\\n    //bidder address of higest bid\\r\\n    address bidderAddress;\\r\\n    //price of higest bid\\r\\n    uint256 bidPrice;\\r\\n    //borrow amount of loan\\r\\n    uint256 bidBorrowAmount;\\r\\n    //bidder address of first bid\\r\\n    address firstBidderAddress;\\r\\n  }\\r\\n\\r\\n  struct ExecuteDepositParams {\\r\\n    address initiator;\\r\\n    address asset;\\r\\n    uint256 amount;\\r\\n    address onBehalfOf;\\r\\n    uint16 referralCode;\\r\\n  }\\r\\n\\r\\n  struct ExecuteWithdrawParams {\\r\\n    address initiator;\\r\\n    address asset;\\r\\n    uint256 amount;\\r\\n    address to;\\r\\n  }\\r\\n\\r\\n  struct ExecuteBorrowParams {\\r\\n    address initiator;\\r\\n    address asset;\\r\\n    uint256 amount;\\r\\n    address nftAsset;\\r\\n    uint256 nftTokenId;\\r\\n    address onBehalfOf;\\r\\n    uint16 referralCode;\\r\\n  }\\r\\n\\r\\n  struct ExecuteRepayParams {\\r\\n    address initiator;\\r\\n    address nftAsset;\\r\\n    uint256 nftTokenId;\\r\\n    uint256 amount;\\r\\n  }\\r\\n\\r\\n  struct ExecuteAuctionParams {\\r\\n    address initiator;\\r\\n    address nftAsset;\\r\\n    uint256 nftTokenId;\\r\\n    uint256 bidPrice;\\r\\n    address onBehalfOf;\\r\\n    uint256 auctionDurationConfigFee;\\r\\n    uint256 bidDelta;\\r\\n  }\\r\\n\\r\\n  struct ExecuteRedeemParams {\\r\\n    address initiator;\\r\\n    address nftAsset;\\r\\n    uint256 nftTokenId;\\r\\n    uint256 amount;\\r\\n    uint256 bidFine;\\r\\n    uint256 safeHealthFactor;\\r\\n  }\\r\\n\\r\\n  struct ExecuteLiquidateParams {\\r\\n    address initiator;\\r\\n    address nftAsset;\\r\\n    uint256 nftTokenId;\\r\\n    uint256 amount;\\r\\n  }\\r\\n\\r\\n  struct ExecuteBuyoutParams {\\r\\n    address initiator;\\r\\n    address nftAsset;\\r\\n    uint256 nftTokenId;\\r\\n    uint256 amount;\\r\\n    address onBehalfOf;\\r\\n  }\\r\\n\\r\\n  struct ExecuteLiquidateMarketsParams {\\r\\n    address nftAsset;\\r\\n    uint256 nftTokenId;\\r\\n    uint256 liquidateFeePercentage;\\r\\n    uint256 amountOutMin;\\r\\n  }\\r\\n\\r\\n  struct ExecuteLendPoolStates {\\r\\n    uint256 pauseStartTime;\\r\\n    uint256 pauseDurationTime;\\r\\n  }\\r\\n\\r\\n  struct ExecuteYearnParams {\\r\\n    address underlyingAsset;\\r\\n    uint256 amount;\\r\\n  }\\r\\n\\r\\n  enum DebtMarketType {\\r\\n    FixedPrice, //0\\r\\n    Auction, //1\\r\\n    Mixed //2\\r\\n  }\\r\\n\\r\\n  enum DebtMarketState {\\r\\n    //No bids\\r\\n    New,\\r\\n    //Exist bids\\r\\n    Active,\\r\\n    //Is sold\\r\\n    Sold,\\r\\n    Canceled\\r\\n  }\\r\\n\\r\\n  struct DebtMarketListing {\\r\\n    uint256 debtId;\\r\\n    address debtor;\\r\\n    address nftAsset;\\r\\n    uint256 tokenId;\\r\\n    DebtMarketType sellType;\\r\\n    DebtMarketState state;\\r\\n    uint256 sellPrice;\\r\\n    address reserveAsset;\\r\\n    uint256 scaledAmount;\\r\\n    address bidderAddress;\\r\\n    uint256 bidPrice;\\r\\n    uint256 auctionEndTimestamp;\\r\\n    uint256 startBiddingPrice;\\r\\n  }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/protocol/LendPoolConfigurator.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\r\\npragma solidity 0.8.4;\\r\\n\\r\\nimport {ILendPoolLoan} from \\\"../interfaces/ILendPoolLoan.sol\\\";\\r\\nimport {IUNFTRegistry} from \\\"../interfaces/IUNFTRegistry.sol\\\";\\r\\nimport {ILendPoolConfigurator} from \\\"../interfaces/ILendPoolConfigurator.sol\\\";\\r\\nimport {ILendPoolAddressesProvider} from \\\"../interfaces/ILendPoolAddressesProvider.sol\\\";\\r\\nimport {ILendPool} from \\\"../interfaces/ILendPool.sol\\\";\\r\\nimport {INFTOracle} from \\\"../interfaces/INFTOracle.sol\\\";\\r\\nimport {IUToken} from \\\"../interfaces/IUToken.sol\\\";\\r\\n\\r\\nimport {ReserveConfiguration} from \\\"../libraries/configuration/ReserveConfiguration.sol\\\";\\r\\nimport {NftConfiguration} from \\\"../libraries/configuration/NftConfiguration.sol\\\";\\r\\nimport {ConfiguratorLogic} from \\\"../libraries/logic/ConfiguratorLogic.sol\\\";\\r\\nimport {Errors} from \\\"../libraries/helpers/Errors.sol\\\";\\r\\nimport {PercentageMath} from \\\"../libraries/math/PercentageMath.sol\\\";\\r\\nimport {DataTypes} from \\\"../libraries/types/DataTypes.sol\\\";\\r\\nimport {ConfigTypes} from \\\"../libraries/types/ConfigTypes.sol\\\";\\r\\n\\r\\nimport {IERC20Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\r\\nimport {Initializable} from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title LendPoolConfigurator contract\\r\\n * @author BendDao; Forked and edited by Unlockd\\r\\n * @dev Implements the configuration methods for the Unlockd protocol\\r\\n **/\\r\\n\\r\\ncontract LendPoolConfigurator is Initializable, ILendPoolConfigurator {\\r\\n  using PercentageMath for uint256;\\r\\n  using ReserveConfiguration for DataTypes.ReserveConfigurationMap;\\r\\n  using NftConfiguration for DataTypes.NftConfigurationMap;\\r\\n\\r\\n  /*//////////////////////////////////////////////////////////////\\r\\n                        GENERAL VARIABLES\\r\\n  //////////////////////////////////////////////////////////////*/\\r\\n  ILendPoolAddressesProvider internal _addressesProvider;\\r\\n\\r\\n  mapping(address => bool) public isLtvManager;\\r\\n  /*//////////////////////////////////////////////////////////////\\r\\n                          MODIFIERS\\r\\n  //////////////////////////////////////////////////////////////*/\\r\\n  modifier onlyLtvManager() {\\r\\n    require(isLtvManager[msg.sender], Errors.CALLER_NOT_LTV_MANAGER);\\r\\n    _;\\r\\n  }\\r\\n\\r\\n  modifier onlyPoolAdmin() {\\r\\n    require(_addressesProvider.getPoolAdmin() == msg.sender, Errors.CALLER_NOT_POOL_ADMIN);\\r\\n    _;\\r\\n  }\\r\\n\\r\\n  modifier onlyEmergencyAdmin() {\\r\\n    require(_addressesProvider.getEmergencyAdmin() == msg.sender, Errors.LPC_CALLER_NOT_EMERGENCY_ADMIN);\\r\\n    _;\\r\\n  }\\r\\n\\r\\n  /*//////////////////////////////////////////////////////////////\\r\\n                        INITIALIZERS\\r\\n  //////////////////////////////////////////////////////////////*/\\r\\n\\r\\n  /// @custom:oz-upgrades-unsafe-allow constructor\\r\\n  constructor() initializer {}\\r\\n\\r\\n  /**\\r\\n   * @dev Function is invoked by the proxy contract when the LendPoolConfigurator contract is added to the\\r\\n   * LendPoolAddressesProvider of the market.\\r\\n   * @param provider The address of the LendPoolAddressesProvider\\r\\n   **/\\r\\n  function initialize(ILendPoolAddressesProvider provider) public initializer {\\r\\n    _addressesProvider = provider;\\r\\n  }\\r\\n\\r\\n  /*//////////////////////////////////////////////////////////////\\r\\n                        MAIN LOGIC\\r\\n  //////////////////////////////////////////////////////////////*/\\r\\n  function configureNftsAsCollateral(ConfigNftAsCollateralInput[] calldata collateralData) external onlyLtvManager {\\r\\n    uint256 cachedLength = collateralData.length;\\r\\n    for (uint8 i; i < cachedLength; ) {\\r\\n      _configureNftAsCollateral(collateralData[i]);\\r\\n      unchecked {\\r\\n        ++i;\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Configures the NFT auction parameters\\r\\n   * @param asset The address of the underlying NFT asset\\r\\n   * @param redeemDuration The max duration for the redeem\\r\\n   * @param auctionDuration The auction duration\\r\\n   * @param redeemFine The fine for the redeem\\r\\n   **/\\r\\n  function configureNftAsAuction(\\r\\n    address asset,\\r\\n    uint256 nftTokenId,\\r\\n    uint256 redeemDuration,\\r\\n    uint256 auctionDuration,\\r\\n    uint256 redeemFine\\r\\n  ) external onlyLtvManager {\\r\\n    ILendPool cachedPool = _getLendPool();\\r\\n    DataTypes.NftConfigurationMap memory currentConfig = cachedPool.getNftConfigByTokenId(asset, nftTokenId);\\r\\n\\r\\n    //validation of the parameters: the redeem duration can\\r\\n    //only be lower or equal than the auction duration\\r\\n    require(redeemDuration <= auctionDuration, Errors.LPC_INVALID_CONFIGURATION);\\r\\n\\r\\n    currentConfig.setRedeemDuration(redeemDuration);\\r\\n    currentConfig.setAuctionDuration(auctionDuration);\\r\\n    currentConfig.setRedeemFine(redeemFine);\\r\\n\\r\\n    cachedPool.setNftConfigByTokenId(asset, nftTokenId, currentConfig.data);\\r\\n\\r\\n    emit NftAuctionChanged(asset, nftTokenId, redeemDuration, auctionDuration, redeemFine);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Initializes reserves in batch\\r\\n   * @param input the input array with data to initialize each reserve\\r\\n   **/\\r\\n  function batchInitReserve(ConfigTypes.InitReserveInput[] calldata input) external onlyPoolAdmin {\\r\\n    ILendPool cachedPool = _getLendPool();\\r\\n    uint256 inputLength = input.length;\\r\\n    for (uint256 i; i < inputLength; ) {\\r\\n      ConfiguratorLogic.executeInitReserve(_addressesProvider, cachedPool, input[i]);\\r\\n\\r\\n      unchecked {\\r\\n        i = i + 1;\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Configures reserves in batch\\r\\n   * @param inputs the input array with data to configure each reserve\\r\\n   **/\\r\\n  function batchConfigReserve(ConfigReserveInput[] calldata inputs) external onlyPoolAdmin {\\r\\n    ILendPool cachedPool = _getLendPool();\\r\\n    uint256 inputLength = inputs.length;\\r\\n    for (uint256 i; i < inputLength; ) {\\r\\n      DataTypes.ReserveConfigurationMap memory currentConfig = cachedPool.getReserveConfiguration(inputs[i].asset);\\r\\n\\r\\n      currentConfig.setReserveFactor(inputs[i].reserveFactor);\\r\\n\\r\\n      cachedPool.setReserveConfiguration(inputs[i].asset, currentConfig.data);\\r\\n\\r\\n      emit ReserveFactorChanged(inputs[i].asset, inputs[i].reserveFactor);\\r\\n\\r\\n      unchecked {\\r\\n        i = i + 1;\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Initializes NFTs in batch\\r\\n   * @param input the input array with data to initialize each NFT\\r\\n   **/\\r\\n  function batchInitNft(ConfigTypes.InitNftInput[] calldata input) external onlyPoolAdmin {\\r\\n    ILendPool cachedPool = _getLendPool();\\r\\n    IUNFTRegistry cachedRegistry = _getUNFTRegistry();\\r\\n    uint256 inputLength = input.length;\\r\\n    for (uint256 i; i < inputLength; ) {\\r\\n      ConfiguratorLogic.executeInitNft(cachedPool, cachedRegistry, input[i]);\\r\\n\\r\\n      unchecked {\\r\\n        i = i + 1;\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Configures NFTs in batch\\r\\n   * @param inputs the input array with data to configure each NFT asset\\r\\n   **/\\r\\n\\r\\n  function batchConfigNft(ConfigNftInput[] calldata inputs) external onlyPoolAdmin {\\r\\n    ILendPool cachedPool = _getLendPool();\\r\\n    uint256 inputsLength = inputs.length;\\r\\n    for (uint256 i; i < inputsLength; ) {\\r\\n      DataTypes.NftConfigurationMap memory currentConfig = cachedPool.getNftConfigByTokenId(\\r\\n        inputs[i].asset,\\r\\n        inputs[i].tokenId\\r\\n      );\\r\\n\\r\\n      //validation of the parameters: the LTV can\\r\\n      //only be lower or equal than the liquidation threshold\\r\\n      //(otherwise a loan against the asset would cause instantaneous liquidation)\\r\\n      require(inputs[i].baseLTV <= inputs[i].liquidationThreshold, Errors.LPC_INVALID_CONFIGURATION);\\r\\n\\r\\n      if (inputs[i].liquidationThreshold != 0) {\\r\\n        //liquidation bonus must be smaller than 100.00%\\r\\n        require(inputs[i].liquidationBonus < PercentageMath.PERCENTAGE_FACTOR, Errors.LPC_INVALID_CONFIGURATION);\\r\\n      } else {\\r\\n        require(inputs[i].liquidationBonus == 0, Errors.LPC_INVALID_CONFIGURATION);\\r\\n      }\\r\\n\\r\\n      // Active & Frozen Flag\\r\\n      currentConfig.setActive(true);\\r\\n      currentConfig.setFrozen(false);\\r\\n\\r\\n      // collateral parameters\\r\\n      currentConfig.setLtv(inputs[i].baseLTV);\\r\\n      currentConfig.setLiquidationThreshold(inputs[i].liquidationThreshold);\\r\\n      currentConfig.setLiquidationBonus(inputs[i].liquidationBonus);\\r\\n\\r\\n      // auction parameters\\r\\n      currentConfig.setRedeemDuration(inputs[i].redeemDuration);\\r\\n      currentConfig.setAuctionDuration(inputs[i].auctionDuration);\\r\\n      currentConfig.setRedeemFine(inputs[i].redeemFine);\\r\\n      currentConfig.setRedeemThreshold(inputs[i].redeemThreshold);\\r\\n      currentConfig.setMinBidFine(inputs[i].minBidFine);\\r\\n\\r\\n      cachedPool.setNftConfigByTokenId(inputs[i].asset, inputs[i].tokenId, currentConfig.data);\\r\\n\\r\\n      emit NftConfigurationChanged(\\r\\n        inputs[i].asset,\\r\\n        inputs[i].tokenId,\\r\\n        inputs[i].baseLTV,\\r\\n        inputs[i].liquidationThreshold,\\r\\n        inputs[i].liquidationBonus\\r\\n      );\\r\\n      emit NftAuctionChanged(\\r\\n        inputs[i].asset,\\r\\n        inputs[i].tokenId,\\r\\n        inputs[i].redeemDuration,\\r\\n        inputs[i].auctionDuration,\\r\\n        inputs[i].redeemFine\\r\\n      );\\r\\n      emit NftRedeemThresholdChanged(inputs[i].asset, inputs[i].tokenId, inputs[i].redeemThreshold);\\r\\n      emit NftMinBidFineChanged(inputs[i].asset, inputs[i].tokenId, inputs[i].minBidFine);\\r\\n\\r\\n      // max limit\\r\\n      cachedPool.setNftMaxSupplyAndTokenId(inputs[i].asset, inputs[i].maxSupply, inputs[i].maxTokenId);\\r\\n      emit NftMaxSupplyAndTokenIdChanged(inputs[i].asset, inputs[i].maxSupply, inputs[i].maxTokenId);\\r\\n\\r\\n      unchecked {\\r\\n        i = i + 1;\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Updates the uToken implementation for the reserve\\r\\n   * @param inputs the inputs array with data to update each UToken\\r\\n   **/\\r\\n  function updateUToken(ConfigTypes.UpdateUTokenInput[] calldata inputs) external onlyPoolAdmin {\\r\\n    ILendPool cachedPool = _getLendPool();\\r\\n    uint256 inputLength = inputs.length;\\r\\n    for (uint256 i; i < inputLength; ) {\\r\\n      ConfiguratorLogic.executeUpdateUToken(cachedPool, inputs[i]);\\r\\n\\r\\n      unchecked {\\r\\n        i = i + 1;\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Updates the debt token implementation for the asset\\r\\n   * @param inputs the inputs array with data to update each debt token\\r\\n   **/\\r\\n  function updateDebtToken(ConfigTypes.UpdateDebtTokenInput[] calldata inputs) external onlyPoolAdmin {\\r\\n    ILendPool cachedPool = _getLendPool();\\r\\n    uint256 inputLength = inputs.length;\\r\\n    for (uint256 i; i < inputLength; ) {\\r\\n      ConfiguratorLogic.executeUpdateDebtToken(cachedPool, inputs[i]);\\r\\n\\r\\n      unchecked {\\r\\n        i = i + 1;\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /*//////////////////////////////////////////////////////////////\\r\\n                          INTERNALS\\r\\n  //////////////////////////////////////////////////////////////*/\\r\\n  /**\\r\\n   * @dev Configures the NFT collateralization parameters\\r\\n   * all the values are expressed in percentages with two decimals of precision. A valid value is 10000, which means 100.00%\\r\\n   * @param collateralData The NFT collateral configuration data\\r\\n   **/\\r\\n  function _configureNftAsCollateral(ConfigNftAsCollateralInput calldata collateralData) internal {\\r\\n    {\\r\\n      ILendPool cachedPool = _getLendPool();\\r\\n\\r\\n      DataTypes.NftConfigurationMap memory currentConfig = cachedPool.getNftConfigByTokenId(\\r\\n        collateralData.asset,\\r\\n        collateralData.nftTokenId\\r\\n      );\\r\\n\\r\\n      //validation of the parameters: the LTV can\\r\\n      //only be lower or equal than the liquidation threshold\\r\\n      //(otherwise a loan against the asset would cause instantaneous liquidation)\\r\\n      require(collateralData.ltv < collateralData.liquidationThreshold, Errors.LPC_INVALID_CONFIGURATION);\\r\\n\\r\\n      if (collateralData.liquidationThreshold != 0) {\\r\\n        //liquidation bonus must be smaller than 100.00%\\r\\n        require(collateralData.liquidationBonus < PercentageMath.PERCENTAGE_FACTOR, Errors.LPC_INVALID_CONFIGURATION);\\r\\n      } else {\\r\\n        require(collateralData.liquidationBonus == 0, Errors.LPC_INVALID_CONFIGURATION);\\r\\n      }\\r\\n\\r\\n      currentConfig.setLtv(collateralData.ltv);\\r\\n      currentConfig.setLiquidationThreshold(collateralData.liquidationThreshold);\\r\\n      currentConfig.setRedeemThreshold(collateralData.redeemThreshold);\\r\\n      currentConfig.setLiquidationBonus(collateralData.liquidationBonus);\\r\\n      currentConfig.setActive(true);\\r\\n      currentConfig.setFrozen(false);\\r\\n\\r\\n      //validation of the parameters: the redeem duration can\\r\\n      //only be lower or equal than the auction duration\\r\\n      require(collateralData.redeemDuration <= collateralData.auctionDuration, Errors.LPC_INVALID_CONFIGURATION);\\r\\n\\r\\n      currentConfig.setRedeemDuration(collateralData.redeemDuration);\\r\\n      currentConfig.setAuctionDuration(collateralData.auctionDuration);\\r\\n      currentConfig.setRedeemFine(collateralData.redeemFine);\\r\\n      currentConfig.setMinBidFine(collateralData.minBidFine);\\r\\n      currentConfig.setConfigTimestamp(block.timestamp);\\r\\n\\r\\n      cachedPool.setNftConfigByTokenId(collateralData.asset, collateralData.nftTokenId, currentConfig.data);\\r\\n\\r\\n      INFTOracle(_addressesProvider.getNFTOracle()).setNFTPrice(\\r\\n        collateralData.asset,\\r\\n        collateralData.nftTokenId,\\r\\n        collateralData.newPrice\\r\\n      );\\r\\n    }\\r\\n    emit NftConfigurationChanged(\\r\\n      collateralData.asset,\\r\\n      collateralData.nftTokenId,\\r\\n      collateralData.ltv,\\r\\n      collateralData.liquidationThreshold,\\r\\n      collateralData.liquidationBonus\\r\\n    );\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Checks the liquidity of reserves\\r\\n   * @param asset  The address of the underlying reserve asset\\r\\n   **/\\r\\n  function _checkReserveNoLiquidity(address asset) internal view {\\r\\n    DataTypes.ReserveData memory reserveData = _getLendPool().getReserveData(asset);\\r\\n\\r\\n    uint256 availableLiquidity = IUToken(reserveData.uTokenAddress).getAvailableLiquidity();\\r\\n\\r\\n    require(availableLiquidity == 0 && reserveData.currentLiquidityRate == 0, Errors.LPC_RESERVE_LIQUIDITY_NOT_0);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Checks the liquidity of NFTs\\r\\n   * @param asset  The address of the underlying NFT asset\\r\\n   **/\\r\\n  function _checkNftNoLiquidity(address asset) internal view {\\r\\n    uint256 collateralAmount = _getLendPoolLoan().getNftCollateralAmount(asset);\\r\\n\\r\\n    require(collateralAmount == 0, Errors.LPC_NFT_LIQUIDITY_NOT_0);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the LendPool address stored in the addresses provider\\r\\n   **/\\r\\n  function _getLendPool() internal view returns (ILendPool) {\\r\\n    return ILendPool(_addressesProvider.getLendPool());\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the LendPoolLoan address stored in the addresses provider\\r\\n   **/\\r\\n  function _getLendPoolLoan() internal view returns (ILendPoolLoan) {\\r\\n    return ILendPoolLoan(_addressesProvider.getLendPoolLoan());\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the UNFTRegistry address stored in the addresses provider\\r\\n   **/\\r\\n  function _getUNFTRegistry() internal view returns (IUNFTRegistry) {\\r\\n    return IUNFTRegistry(_addressesProvider.getUNFTRegistry());\\r\\n  }\\r\\n\\r\\n  /*//////////////////////////////////////////////////////////////\\r\\n                        GETTERS & SETTERS\\r\\n  //////////////////////////////////////////////////////////////*/\\r\\n  /**\\r\\n   * @dev Enables or disables borrowing on each reserve\\r\\n   * @param asset the assets to update the flag to\\r\\n   * @param flag the flag to set to the each reserve\\r\\n   **/\\r\\n  function setBorrowingFlagOnReserve(address asset, bool flag) external onlyPoolAdmin {\\r\\n    ILendPool cachedPool = _getLendPool();\\r\\n    DataTypes.ReserveConfigurationMap memory currentConfig = cachedPool.getReserveConfiguration(asset);\\r\\n\\r\\n    if (flag) {\\r\\n      currentConfig.setBorrowingEnabled(true);\\r\\n    } else {\\r\\n      currentConfig.setBorrowingEnabled(false);\\r\\n    }\\r\\n\\r\\n    cachedPool.setReserveConfiguration(asset, currentConfig.data);\\r\\n\\r\\n    if (flag) {\\r\\n      emit BorrowingEnabledOnReserve(asset);\\r\\n    } else {\\r\\n      emit BorrowingDisabledOnReserve(asset);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Activates or deactivates each reserve\\r\\n   * @param asset the assets to update the flag to\\r\\n   * @param flag the flag to set to the each reserve\\r\\n   **/\\r\\n  function setActiveFlagOnReserve(address asset, bool flag) external onlyPoolAdmin {\\r\\n    ILendPool cachedPool = _getLendPool();\\r\\n    DataTypes.ReserveConfigurationMap memory currentConfig = cachedPool.getReserveConfiguration(asset);\\r\\n\\r\\n    if (!flag) {\\r\\n      _checkReserveNoLiquidity(asset);\\r\\n    }\\r\\n\\r\\n    currentConfig.setActive(flag);\\r\\n\\r\\n    cachedPool.setReserveConfiguration(asset, currentConfig.data);\\r\\n\\r\\n    if (flag) {\\r\\n      emit ReserveActivated(asset);\\r\\n    } else {\\r\\n      emit ReserveDeactivated(asset);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Freezes or unfreezes each reserve\\r\\n   * @param asset the assets to update the flag to\\r\\n   * @param flag the flag to set to the each reserve\\r\\n   **/\\r\\n  function setFreezeFlagOnReserve(address asset, bool flag) external onlyPoolAdmin {\\r\\n    ILendPool cachedPool = _getLendPool();\\r\\n    DataTypes.ReserveConfigurationMap memory currentConfig = cachedPool.getReserveConfiguration(asset);\\r\\n\\r\\n    currentConfig.setFrozen(flag);\\r\\n    cachedPool.setReserveConfiguration(asset, currentConfig.data);\\r\\n\\r\\n    if (flag) {\\r\\n      emit ReserveFrozen(asset);\\r\\n    } else {\\r\\n      emit ReserveUnfrozen(asset);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Updates the reserve factor of a reserve\\r\\n   * @param asset The address of the underlying asset of the reserve\\r\\n   * @param reserveFactor The new reserve factor of the reserve\\r\\n   **/\\r\\n  function setReserveFactor(address asset, uint256 reserveFactor) external onlyPoolAdmin {\\r\\n    ILendPool cachedPool = _getLendPool();\\r\\n    DataTypes.ReserveConfigurationMap memory currentConfig = cachedPool.getReserveConfiguration(asset);\\r\\n\\r\\n    currentConfig.setReserveFactor(reserveFactor);\\r\\n\\r\\n    cachedPool.setReserveConfiguration(asset, currentConfig.data);\\r\\n\\r\\n    emit ReserveFactorChanged(asset, reserveFactor);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Sets the interest rate strategy of a reserve\\r\\n   * @param assets The addresses of the underlying asset of the reserve\\r\\n   * @param rateAddress The new address of the interest strategy contract\\r\\n   **/\\r\\n  function setReserveInterestRateAddress(address[] calldata assets, address rateAddress) external onlyPoolAdmin {\\r\\n    ILendPool cachedPool = _getLendPool();\\r\\n    uint256 assetsLength = assets.length;\\r\\n    for (uint256 i; i < assetsLength; ) {\\r\\n      cachedPool.setReserveInterestRateAddress(assets[i], rateAddress);\\r\\n      emit ReserveInterestRateChanged(assets[i], rateAddress);\\r\\n\\r\\n      unchecked {\\r\\n        i = i + 1;\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Activates or deactivates each NFT\\r\\n   * @param asset the NFTs to update the flag to\\r\\n   * @param flag the flag to set to the each NFT\\r\\n   **/\\r\\n  function setActiveFlagOnNft(address asset, bool flag) external onlyPoolAdmin {\\r\\n    ILendPool cachedPool = _getLendPool();\\r\\n    DataTypes.NftConfigurationMap memory currentConfig = cachedPool.getNftConfiguration(asset);\\r\\n\\r\\n    if (!flag) {\\r\\n      _checkNftNoLiquidity(asset);\\r\\n    }\\r\\n    currentConfig.setActive(flag);\\r\\n    cachedPool.setNftConfiguration(asset, currentConfig.data);\\r\\n\\r\\n    if (flag) {\\r\\n      emit NftActivated(asset);\\r\\n    } else {\\r\\n      emit NftDeactivated(asset);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Activates or deactivates each NFT asset\\r\\n   * @param assets the NFTs to update the flag to\\r\\n   * @param tokenIds the NFT token ids to update the flag to\\r\\n   * @param flag the flag to set to the each NFT\\r\\n   **/\\r\\n  function setActiveFlagOnNftByTokenId(\\r\\n    address[] calldata assets,\\r\\n    uint256[] calldata tokenIds,\\r\\n    bool flag\\r\\n  ) external onlyPoolAdmin {\\r\\n    uint256 assetsLength = assets.length;\\r\\n    require(assetsLength == tokenIds.length, Errors.LPC_PARAMS_MISMATCH);\\r\\n\\r\\n    ILendPool cachedPool = _getLendPool();\\r\\n\\r\\n    for (uint256 i; i < assetsLength; ) {\\r\\n      DataTypes.NftConfigurationMap memory currentConfig = cachedPool.getNftConfigByTokenId(assets[i], tokenIds[i]);\\r\\n\\r\\n      currentConfig.setActive(flag);\\r\\n      cachedPool.setNftConfigByTokenId(assets[i], tokenIds[i], currentConfig.data);\\r\\n\\r\\n      if (flag) {\\r\\n        emit NftTokenActivated(assets[i], tokenIds[i]);\\r\\n      } else {\\r\\n        emit NftTokenDeactivated(assets[i], tokenIds[i]);\\r\\n      }\\r\\n\\r\\n      unchecked {\\r\\n        i = i + 1;\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Freezes or unfreezes each NFT\\r\\n   * @param asset the assets to update the flag to\\r\\n   * @param flag the flag to set to the each NFT\\r\\n   **/\\r\\n  function setFreezeFlagOnNft(address asset, bool flag) external onlyPoolAdmin {\\r\\n    ILendPool cachedPool = _getLendPool();\\r\\n    DataTypes.NftConfigurationMap memory currentConfig = cachedPool.getNftConfiguration(asset);\\r\\n    currentConfig.setFrozen(flag);\\r\\n    cachedPool.setNftConfiguration(asset, currentConfig.data);\\r\\n    if (flag) {\\r\\n      emit NftFrozen(asset);\\r\\n    } else {\\r\\n      emit NftUnfrozen(asset);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Freezes or unfreezes each NFT token\\r\\n   * @param assets the assets to update the flag to\\r\\n   * @param tokenIds the NFT token ids to update the flag to\\r\\n   * @param flag the flag to set to the each NFT\\r\\n   **/\\r\\n  function setFreezeFlagOnNftByTokenId(\\r\\n    address[] calldata assets,\\r\\n    uint256[] calldata tokenIds,\\r\\n    bool flag\\r\\n  ) external onlyPoolAdmin {\\r\\n    ILendPool cachedPool = _getLendPool();\\r\\n    uint256 assetsLength = assets.length;\\r\\n    for (uint256 i; i < assetsLength; ) {\\r\\n      DataTypes.NftConfigurationMap memory currentConfig = cachedPool.getNftConfigByTokenId(assets[i], tokenIds[i]);\\r\\n\\r\\n      currentConfig.setFrozen(flag);\\r\\n      cachedPool.setNftConfigByTokenId(assets[i], tokenIds[i], currentConfig.data);\\r\\n\\r\\n      if (flag) {\\r\\n        emit NftTokenFrozen(assets[i], tokenIds[i]);\\r\\n      } else {\\r\\n        emit NftTokenUnfrozen(assets[i], tokenIds[i]);\\r\\n      }\\r\\n\\r\\n      unchecked {\\r\\n        i = i + 1;\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Configures the redeem threshold\\r\\n   * @param asset The address of the underlying NFT asset\\r\\n   * @param nftTokenId the tokenId of the asset\\r\\n   * @param redeemThreshold The threshold for the redeem\\r\\n   **/\\r\\n  function setNftRedeemThreshold(address asset, uint256 nftTokenId, uint256 redeemThreshold) external onlyPoolAdmin {\\r\\n    ILendPool cachedPool = _getLendPool();\\r\\n    DataTypes.NftConfigurationMap memory currentConfig = cachedPool.getNftConfigByTokenId(asset, nftTokenId);\\r\\n\\r\\n    currentConfig.setRedeemThreshold(redeemThreshold);\\r\\n\\r\\n    cachedPool.setNftConfigByTokenId(asset, nftTokenId, currentConfig.data);\\r\\n\\r\\n    emit NftRedeemThresholdChanged(asset, nftTokenId, redeemThreshold);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Configures the minimum fine for the underlying asset\\r\\n   * @param asset The address of the underlying NFT asset\\r\\n   * @param nftTokenId the tokenId of the asset\\r\\n   * @param minBidFine The minimum bid fine value\\r\\n   **/\\r\\n  function setNftMinBidFine(address asset, uint256 nftTokenId, uint256 minBidFine) external onlyPoolAdmin {\\r\\n    ILendPool cachedPool = _getLendPool();\\r\\n    DataTypes.NftConfigurationMap memory currentConfig = cachedPool.getNftConfigByTokenId(asset, nftTokenId);\\r\\n\\r\\n    currentConfig.setMinBidFine(minBidFine);\\r\\n\\r\\n    cachedPool.setNftConfigByTokenId(asset, nftTokenId, currentConfig.data);\\r\\n\\r\\n    emit NftMinBidFineChanged(asset, nftTokenId, minBidFine);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Configures the maximum supply and token Id for the underlying NFT assets\\r\\n   * @param assets The address of the underlying NFT assets\\r\\n   * @param maxSupply The max supply value\\r\\n   * @param maxTokenId The max token Id value\\r\\n   **/\\r\\n  function setNftMaxSupplyAndTokenId(\\r\\n    address[] calldata assets,\\r\\n    uint256 maxSupply,\\r\\n    uint256 maxTokenId\\r\\n  ) external onlyPoolAdmin {\\r\\n    ILendPool cachedPool = _getLendPool();\\r\\n    uint256 assetsLength = assets.length;\\r\\n    for (uint256 i; i < assetsLength; ) {\\r\\n      cachedPool.setNftMaxSupplyAndTokenId(assets[i], maxSupply, maxTokenId);\\r\\n\\r\\n      emit NftMaxSupplyAndTokenIdChanged(assets[i], maxSupply, maxTokenId);\\r\\n\\r\\n      unchecked {\\r\\n        i = i + 1;\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev sets the max amount of reserves\\r\\n   * @param newVal the new value to set as the max reserves\\r\\n   **/\\r\\n  function setMaxNumberOfReserves(uint256 newVal) external onlyPoolAdmin {\\r\\n    ILendPool cachedPool = _getLendPool();\\r\\n    //default value is 32\\r\\n    uint256 curVal = cachedPool.getMaxNumberOfReserves();\\r\\n    require(newVal > curVal, Errors.LPC_INVALID_CONFIGURATION);\\r\\n    cachedPool.setMaxNumberOfReserves(newVal);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev sets the max amount of NFTs\\r\\n   * @param newVal the new value to set as the max NFTs\\r\\n   **/\\r\\n  function setMaxNumberOfNfts(uint256 newVal) external onlyPoolAdmin {\\r\\n    ILendPool cachedPool = _getLendPool();\\r\\n    //default value is 256\\r\\n    uint256 curVal = cachedPool.getMaxNumberOfNfts();\\r\\n    require(newVal > curVal, Errors.LPC_INVALID_CONFIGURATION);\\r\\n    cachedPool.setMaxNumberOfNfts(newVal);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev sets the liquidation fee percentage\\r\\n   * @param newVal the new value to set as the max fee percentage\\r\\n   **/\\r\\n  function setLiquidationFeePercentage(uint256 newVal) external onlyPoolAdmin {\\r\\n    require(newVal < 1000, Errors.LPC_FEE_PERCENTAGE_TOO_HIGH); //prevent setting incorrect values and ensure fee is not too high (10% max)\\r\\n    ILendPool cachedPool = _getLendPool();\\r\\n    cachedPool.setLiquidateFeePercentage(newVal);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev sets the max timeframe between an NFT config trigger and a borrow\\r\\n   * @param newTimeframe the new value to set as the timeframe\\r\\n   **/\\r\\n  function setTimeframe(uint256 newTimeframe) external onlyPoolAdmin {\\r\\n    ILendPool cachedPool = _getLendPool();\\r\\n    cachedPool.setTimeframe(newTimeframe);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Sets configFee amount to be charged for ConfigureNFTAsColleteral\\r\\n   * @param configFee the fee amount\\r\\n   **/\\r\\n  function setConfigFee(uint256 configFee) external onlyPoolAdmin {\\r\\n    ILendPool cachedPool = _getLendPool();\\r\\n    cachedPool.setConfigFee(configFee);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Sets auctionDurationConfigFee amount to be charged for first bids\\r\\n   * @param auctionDurationConfigFee the fee amount\\r\\n   **/\\r\\n  function setAuctionDurationConfigFee(uint256 auctionDurationConfigFee) external onlyLtvManager {\\r\\n    ILendPool cachedPool = _getLendPool();\\r\\n    cachedPool.setAuctionDurationConfigFee(auctionDurationConfigFee);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev sets the bidDelta percentage - debt compounded + fees.\\r\\n   * @param bidDelta the amount to charge to the user\\r\\n   **/\\r\\n  function setBidDelta(uint256 bidDelta) external onlyPoolAdmin {\\r\\n    ILendPool cachedPool = _getLendPool();\\r\\n    cachedPool.setBidDelta(bidDelta);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev pauses or unpauses all the actions of the protocol, including uToken transfers\\r\\n   * @param val true if protocol needs to be paused, false otherwise\\r\\n   **/\\r\\n  function setPoolPause(bool val) external onlyEmergencyAdmin {\\r\\n    ILendPool cachedPool = _getLendPool();\\r\\n    cachedPool.setPause(val);\\r\\n  }\\r\\n\\r\\n  function setLtvManagerStatus(address newLtvManager, bool val) external onlyPoolAdmin {\\r\\n    require(newLtvManager != address(0), Errors.LPC_INVALID_LTVMANAGER_ADDRESS);\\r\\n    isLtvManager[newLtvManager] = val;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Sets new pool rescuer\\r\\n   * @param rescuer the new rescuer address\\r\\n   **/\\r\\n  function setPoolRescuer(address rescuer) external onlyPoolAdmin {\\r\\n    require(rescuer != address(0), Errors.INVALID_ZERO_ADDRESS);\\r\\n    ILendPool cachedPool = _getLendPool();\\r\\n    cachedPool.updateRescuer(rescuer);\\r\\n    emit RescuerUpdated(rescuer);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the token implementation contract address\\r\\n   * @param proxyAddress  The address of the proxy contract\\r\\n   * @return The address of the token implementation contract\\r\\n   **/\\r\\n  function getTokenImplementation(address proxyAddress) external view onlyPoolAdmin returns (address) {\\r\\n    return ConfiguratorLogic.getTokenImplementation(proxyAddress);\\r\\n  }\\r\\n}\\r\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {\r\n      \"contracts/libraries/logic/ConfiguratorLogic.sol\": {\r\n        \"ConfiguratorLogic\": \"0x553c6b0894b6501a10a04660ea2da12cf4299d8d\"\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"BorrowingDisabledOnReserve\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"BorrowingEnabledOnReserve\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"proxy\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"DebtTokenUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"NftActivated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"redeemDuration\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"auctionDuration\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"redeemFine\",\"type\":\"uint256\"}],\"name\":\"NftAuctionChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ltv\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"liquidationThreshold\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"liquidationBonus\",\"type\":\"uint256\"}],\"name\":\"NftConfigurationChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"NftDeactivated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"NftFrozen\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"uNft\",\"type\":\"address\"}],\"name\":\"NftInitialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxSupply\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxTokenId\",\"type\":\"uint256\"}],\"name\":\"NftMaxSupplyAndTokenIdChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minBidFine\",\"type\":\"uint256\"}],\"name\":\"NftMinBidFineChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"redeemThreshold\",\"type\":\"uint256\"}],\"name\":\"NftRedeemThresholdChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"nftTokenId\",\"type\":\"uint256\"}],\"name\":\"NftTokenActivated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"nftTokenId\",\"type\":\"uint256\"}],\"name\":\"NftTokenDeactivated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"nftTokenId\",\"type\":\"uint256\"}],\"name\":\"NftTokenFrozen\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"nftTokenId\",\"type\":\"uint256\"}],\"name\":\"NftTokenUnfrozen\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"NftUnfrozen\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"rescuer\",\"type\":\"address\"}],\"name\":\"RescuerUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"ReserveActivated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"ReserveDeactivated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"}],\"name\":\"ReserveDecimalsChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"factor\",\"type\":\"uint256\"}],\"name\":\"ReserveFactorChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"ReserveFrozen\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"uToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"debtToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"interestRateAddress\",\"type\":\"address\"}],\"name\":\"ReserveInitialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"}],\"name\":\"ReserveInterestRateChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"ReserveUnfrozen\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"proxy\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"UTokenUpgraded\",\"type\":\"event\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"baseLTV\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidationThreshold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidationBonus\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"redeemDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"auctionDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"redeemFine\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"redeemThreshold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minBidFine\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxTokenId\",\"type\":\"uint256\"}],\"internalType\":\"struct ILendPoolConfigurator.ConfigNftInput[]\",\"name\":\"inputs\",\"type\":\"tuple[]\"}],\"name\":\"batchConfigNft\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"reserveFactor\",\"type\":\"uint256\"}],\"internalType\":\"struct ILendPoolConfigurator.ConfigReserveInput[]\",\"name\":\"inputs\",\"type\":\"tuple[]\"}],\"name\":\"batchConfigReserve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"underlyingAsset\",\"type\":\"address\"}],\"internalType\":\"struct ConfigTypes.InitNftInput[]\",\"name\":\"input\",\"type\":\"tuple[]\"}],\"name\":\"batchInitNft\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"uTokenImpl\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"debtTokenImpl\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"underlyingAssetDecimals\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"interestRateAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"underlyingAsset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"treasury\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"underlyingAssetName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"uTokenName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"uTokenSymbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"debtTokenName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"debtTokenSymbol\",\"type\":\"string\"}],\"internalType\":\"struct ConfigTypes.InitReserveInput[]\",\"name\":\"input\",\"type\":\"tuple[]\"}],\"name\":\"batchInitReserve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nftTokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"redeemDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"auctionDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"redeemFine\",\"type\":\"uint256\"}],\"name\":\"configureNftAsAuction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nftTokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ltv\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidationThreshold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"redeemThreshold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidationBonus\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"redeemDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"auctionDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"redeemFine\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minBidFine\",\"type\":\"uint256\"}],\"internalType\":\"struct ILendPoolConfigurator.ConfigNftAsCollateralInput[]\",\"name\":\"collateralData\",\"type\":\"tuple[]\"}],\"name\":\"configureNftsAsCollateral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"proxyAddress\",\"type\":\"address\"}],\"name\":\"getTokenImplementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ILendPoolAddressesProvider\",\"name\":\"provider\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isLtvManager\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"flag\",\"type\":\"bool\"}],\"name\":\"setActiveFlagOnNft\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"assets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"bool\",\"name\":\"flag\",\"type\":\"bool\"}],\"name\":\"setActiveFlagOnNftByTokenId\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"flag\",\"type\":\"bool\"}],\"name\":\"setActiveFlagOnReserve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"auctionDurationConfigFee\",\"type\":\"uint256\"}],\"name\":\"setAuctionDurationConfigFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bidDelta\",\"type\":\"uint256\"}],\"name\":\"setBidDelta\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"flag\",\"type\":\"bool\"}],\"name\":\"setBorrowingFlagOnReserve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"configFee\",\"type\":\"uint256\"}],\"name\":\"setConfigFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"flag\",\"type\":\"bool\"}],\"name\":\"setFreezeFlagOnNft\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"assets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"bool\",\"name\":\"flag\",\"type\":\"bool\"}],\"name\":\"setFreezeFlagOnNftByTokenId\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"flag\",\"type\":\"bool\"}],\"name\":\"setFreezeFlagOnReserve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newVal\",\"type\":\"uint256\"}],\"name\":\"setLiquidationFeePercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newLtvManager\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"val\",\"type\":\"bool\"}],\"name\":\"setLtvManagerStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newVal\",\"type\":\"uint256\"}],\"name\":\"setMaxNumberOfNfts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newVal\",\"type\":\"uint256\"}],\"name\":\"setMaxNumberOfReserves\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"assets\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"maxSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxTokenId\",\"type\":\"uint256\"}],\"name\":\"setNftMaxSupplyAndTokenId\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nftTokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minBidFine\",\"type\":\"uint256\"}],\"name\":\"setNftMinBidFine\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nftTokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"redeemThreshold\",\"type\":\"uint256\"}],\"name\":\"setNftRedeemThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"val\",\"type\":\"bool\"}],\"name\":\"setPoolPause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"rescuer\",\"type\":\"address\"}],\"name\":\"setPoolRescuer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"reserveFactor\",\"type\":\"uint256\"}],\"name\":\"setReserveFactor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"assets\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"rateAddress\",\"type\":\"address\"}],\"name\":\"setReserveInterestRateAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newTimeframe\",\"type\":\"uint256\"}],\"name\":\"setTimeframe\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"encodedCallData\",\"type\":\"bytes\"}],\"internalType\":\"struct ConfigTypes.UpdateDebtTokenInput[]\",\"name\":\"inputs\",\"type\":\"tuple[]\"}],\"name\":\"updateDebtToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"encodedCallData\",\"type\":\"bytes\"}],\"internalType\":\"struct ConfigTypes.UpdateUTokenInput[]\",\"name\":\"inputs\",\"type\":\"tuple[]\"}],\"name\":\"updateUToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "LendPoolConfigurator", "CompilerVersion": "v0.8.4+commit.c7e474f2", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}