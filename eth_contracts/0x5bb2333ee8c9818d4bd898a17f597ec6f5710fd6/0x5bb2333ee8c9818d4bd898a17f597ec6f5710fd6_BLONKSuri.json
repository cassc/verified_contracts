{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/URI.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\r\\npragma solidity ^0.8.7;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\n\\r\\n/// @title BLONKS URI Shapeshifter Contract v3.0.0\\r\\n/// @author Matto AKA MonkMatto\\r\\n/// @notice This contract manages BLONKS token image and metadata generation.\\r\\n/// @dev This contract allows EVM renderer changes.\\r\\n/// @custom:security-contact monkmatto@protonmail.com\\r\\n\\r\\ninterface iBLONKSmain {\\r\\n    function ownerOf(uint256 _tokenId) external view returns (address);\\r\\n\\r\\n    function tokenEntropyMap(uint256 _tokenId) external view returns (uint256);\\r\\n}\\r\\n\\r\\ninterface iBLONKStraits {\\r\\n    function calculateTraitsArray(\\r\\n        uint256 _tokenEntropy\\r\\n    ) external view returns (uint8[11] memory);\\r\\n\\r\\n    function calculateTraitsJSON(\\r\\n        uint8[11] memory _traitsArray\\r\\n    ) external view returns (string memory);\\r\\n}\\r\\n\\r\\ninterface iBLONKSlocations {\\r\\n    function calculateLocatsArray(\\r\\n        uint256 _ownerEntropy,\\r\\n        uint256 _tokenEntropy,\\r\\n        uint8[11] memory _traitsArray\\r\\n    ) external view returns (uint16[110] memory);\\r\\n}\\r\\n\\r\\ninterface iBLONKSsvg {\\r\\n    function assembleSVG(\\r\\n        uint256 _ownerEntropy,\\r\\n        uint256 _tokenEntropy,\\r\\n        uint8[11] memory _traitsArray,\\r\\n        uint16[110] memory _locatsArray\\r\\n    ) external view returns (string memory);\\r\\n}\\r\\n\\r\\ninterface iBLONKSdescriptions {\\r\\n    function buildDynamicDescription(\\r\\n        address _ownerAddy,\\r\\n        uint256 _shapeshiftCount,\\r\\n        string memory _collectionDescription,\\r\\n        string memory _shifterName,\\r\\n        uint256 _shifterActive,\\r\\n        uint256 _shifterMax\\r\\n    ) external view returns (string memory);\\r\\n}\\r\\n\\r\\ninterface iDelegate {\\r\\n    function checkDelegateForContract(\\r\\n        address _delegate,\\r\\n        address _vault,\\r\\n        address _contract\\r\\n    ) external view returns (bool);\\r\\n}\\r\\n\\r\\ncontract BLONKSuri is Ownable {\\r\\n    using Counters for Counters.Counter;\\r\\n    using Strings for string;\\r\\n\\r\\n    address private constant mainContract =\\r\\n        0x7f463b874eC264dC7BD8C780f5790b4Fc371F11f;\\r\\n    address private constant delegateContract =\\r\\n        0x00000000000076A84feF008CDAbe6409d2FE638B;\\r\\n    address private descriptionsContract;\\r\\n\\r\\n    struct Shapeshifter {\\r\\n        address traits;\\r\\n        address locats;\\r\\n        address svg;\\r\\n        string name;\\r\\n        uint16 max;\\r\\n        uint16 active;\\r\\n        bool openToAll;\\r\\n    }\\r\\n\\r\\n    Shapeshifter[] public Shapeshifters;\\r\\n    string public artistNameOverride;\\r\\n    mapping(uint256 => uint256) public shifterStateMap;\\r\\n    mapping(uint256 => uint256) public idMap;\\r\\n    mapping(uint256 => bool) private idSetMap;\\r\\n    mapping(uint256 => bool) public tokenStateLock;\\r\\n    mapping(uint256 => string) public uniqueNameMap;\\r\\n    mapping(uint256 => mapping(uint256 => uint256)) public tokenShiftCounts;\\r\\n    bool public shapeshiftingAllowed;\\r\\n\\r\\n    event Shapeshift(uint256 indexed _tokenId, uint256 _state);\\r\\n\\r\\n    event NewShapeshifter(\\r\\n        address _traits,\\r\\n        address _locations,\\r\\n        address _svg,\\r\\n        string _name,\\r\\n        uint16 _max,\\r\\n        bool _openToAll\\r\\n    );\\r\\n\\r\\n    function SHAPESHIFT(uint256 _tokenId, uint256 _state) external {\\r\\n        address ownerAddy = iBLONKSmain(mainContract).ownerOf(_tokenId);\\r\\n        require(shapeshiftingAllowed == true, \\\"Shapeshifting is paused\\\");\\r\\n        require(\\r\\n            ownerAddy == msg.sender ||\\r\\n                iDelegate(delegateContract).checkDelegateForContract(\\r\\n                    msg.sender,\\r\\n                    ownerAddy,\\r\\n                    mainContract\\r\\n                ) ||\\r\\n                msg.sender == owner(),\\r\\n            \\\"Not authorized\\\"\\r\\n        );\\r\\n        require(_state < Shapeshifters.length, \\\"Shapeshifter out of range\\\");\\r\\n        require(\\r\\n            Shapeshifters[_state].active < Shapeshifters[_state].max,\\r\\n            \\\"Shapeshift max reached\\\"\\r\\n        );\\r\\n        bool isOpenShifter = Shapeshifters[_state].openToAll;\\r\\n        require(isOpenShifter || msg.sender == owner(), \\\"Not authorized\\\");\\r\\n        require(tokenStateLock[_tokenId] == false, \\\"Token is locked\\\");\\r\\n        if (!isOpenShifter) {\\r\\n            tokenStateLock[_tokenId] = true;\\r\\n        }\\r\\n        if (idSetMap[_tokenId] == false) {\\r\\n            idSetMap[_tokenId] = true;\\r\\n            idMap[\\r\\n                iBLONKSmain(mainContract).tokenEntropyMap(_tokenId)\\r\\n            ] = _tokenId;\\r\\n        }\\r\\n        Shapeshifters[shifterStateMap[_tokenId]].active--;\\r\\n        Shapeshifters[_state].active++;\\r\\n        shifterStateMap[_tokenId] = _state;\\r\\n        tokenShiftCounts[_tokenId][_state]++;\\r\\n        emit Shapeshift(_tokenId, _state);\\r\\n    }\\r\\n\\r\\n    function addShapeshifter(\\r\\n        address _traits,\\r\\n        address _locations,\\r\\n        address _svg,\\r\\n        string memory _name,\\r\\n        uint16 _max,\\r\\n        bool _openToAll\\r\\n    ) external onlyOwner {\\r\\n        uint16 _active;\\r\\n        if (Shapeshifters.length == 0) {\\r\\n            _active = 4444;\\r\\n        }\\r\\n        Shapeshifters.push(\\r\\n            Shapeshifter(\\r\\n                _traits,\\r\\n                _locations,\\r\\n                _svg,\\r\\n                _name,\\r\\n                _max,\\r\\n                _active,\\r\\n                _openToAll\\r\\n            )\\r\\n        );\\r\\n        emit NewShapeshifter(\\r\\n            _traits,\\r\\n            _locations,\\r\\n            _svg,\\r\\n            _name,\\r\\n            _max,\\r\\n            _openToAll\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function addUniqueName(\\r\\n        uint256 _tokenId,\\r\\n        string memory _name\\r\\n    ) external onlyOwner {\\r\\n        require(tokenStateLock[_tokenId] == true, \\\"Token is not locked\\\");\\r\\n        uniqueNameMap[_tokenId] = _name;\\r\\n    }\\r\\n\\r\\n    function getShapeshiftAvailability()\\r\\n        external\\r\\n        view\\r\\n        returns (uint256[] memory)\\r\\n    {\\r\\n        uint256[] memory available = new uint256[](Shapeshifters.length);\\r\\n        for (uint256 i = 0; i < available.length; i++) {\\r\\n            available[i] = (Shapeshifters[i].max - Shapeshifters[i].active);\\r\\n        }\\r\\n        return available;\\r\\n    }\\r\\n\\r\\n    function getTokenShapeshiftTotals(\\r\\n        uint256 _tokenId\\r\\n    ) public view returns (uint256) {\\r\\n        uint256 totals;\\r\\n        for (uint256 i = 0; i < Shapeshifters.length; i++) {\\r\\n            totals += tokenShiftCounts[_tokenId][i];\\r\\n        }\\r\\n        return totals;\\r\\n    }\\r\\n\\r\\n    function buildMetaPart(\\r\\n        uint256 _tokenId,\\r\\n        string memory _collectionDescription,\\r\\n        address _artistAddy,\\r\\n        uint256 _royaltyBps,\\r\\n        string memory _collection,\\r\\n        string memory _website,\\r\\n        string memory _externalURL\\r\\n    ) external view virtual returns (string memory) {\\r\\n        string memory _name;\\r\\n        if (tokenStateLock[_tokenId] == false) {\\r\\n            _name = Shapeshifters[shifterStateMap[_tokenId]].name;\\r\\n        } else {\\r\\n            _name = uniqueNameMap[_tokenId];\\r\\n        }\\r\\n\\r\\n        uint256 state = shifterStateMap[_tokenId];\\r\\n        string memory tokenDescription = iBLONKSdescriptions(\\r\\n            descriptionsContract\\r\\n        ).buildDynamicDescription(\\r\\n                iBLONKSmain(mainContract).ownerOf(_tokenId),\\r\\n                getTokenShapeshiftTotals(_tokenId),\\r\\n                _collectionDescription,\\r\\n                Shapeshifters[state].name,\\r\\n                Shapeshifters[state].active,\\r\\n                Shapeshifters[state].max\\r\\n            );\\r\\n\\r\\n        string memory metaP = string(\\r\\n            abi.encodePacked(\\r\\n                '{\\\"name\\\":\\\"',\\r\\n                _name,\\r\\n                ' #',\\r\\n                Strings.toString(_tokenId),\\r\\n                '\\\",\\\"artist\\\":\\\"',\\r\\n                artistNameOverride,\\r\\n                '\\\",\\\"description\\\":\\\"',\\r\\n                tokenDescription,\\r\\n                '\\\",\\\"royaltyInfo\\\":{\\\"artistAddress\\\":\\\"',\\r\\n                Strings.toHexString(uint160(_artistAddy), 20),\\r\\n                '\\\",\\\"royaltyFeeByID\\\":',\\r\\n                Strings.toString(_royaltyBps / 100),\\r\\n                '},\\\"collection_name\\\":\\\"',\\r\\n                _collection,\\r\\n                '\\\",\\\"website\\\":\\\"',\\r\\n                _website,\\r\\n                '\\\",\\\"external_url\\\":\\\"',\\r\\n                _externalURL,\\r\\n                '\\\",\\\"script_type\\\":\\\"Solidity\\\",\\\"image_type\\\":\\\"Generative SVG\\\",\\\"image\\\":\\\"data:image/svg+xml;base64,'\\r\\n            )\\r\\n        );\\r\\n        return metaP;\\r\\n    }\\r\\n\\r\\n    function buildContractURI(\\r\\n        string memory _collectionDescription,\\r\\n        string memory _externalURL,\\r\\n        uint256 _royaltyBps,\\r\\n        address _artistAddy,\\r\\n        string memory _svg\\r\\n    ) external view virtual returns (string memory) {\\r\\n        string memory b64svg = Base64.encode(bytes(_svg));\\r\\n        string memory contractURI = string(\\r\\n            abi.encodePacked(\\r\\n                '{\\\"name\\\":\\\"BLONKS\\\",\\\"description\\\":\\\"',\\r\\n                _collectionDescription,\\r\\n                '\\\",\\\"image\\\":\\\"data:image/svg+xml;base64,',\\r\\n                b64svg,\\r\\n                '\\\",\\\"external_link\\\":\\\"',\\r\\n                _externalURL,\\r\\n                '\\\",\\\"royalty_basis_points\\\":',\\r\\n                Strings.toString(_royaltyBps),\\r\\n                ',\\\"royalty_recipient\\\":\\\"',\\r\\n                Strings.toHexString(uint160(_artistAddy), 20),\\r\\n                '\\\"}'\\r\\n            )\\r\\n        );\\r\\n        return contractURI;\\r\\n    }\\r\\n\\r\\n    function getLegibleTokenURI(\\r\\n        string memory _metaP,\\r\\n        uint256 _tokenEntropy,\\r\\n        uint256 _ownerEntropy\\r\\n    ) external view virtual returns (string memory) {\\r\\n        uint256 _state = shifterStateMap[idMap[_tokenEntropy]];\\r\\n        uint8[11] memory traitsArray = iBLONKStraits(\\r\\n            Shapeshifters[_state].traits\\r\\n        ).calculateTraitsArray(_tokenEntropy);\\r\\n        _tokenEntropy /= 10 ** 18;\\r\\n        string memory traitsJSON = iBLONKStraits(Shapeshifters[_state].traits)\\r\\n            .calculateTraitsJSON(traitsArray);\\r\\n        uint16[110] memory locatsArray = iBLONKSlocations(\\r\\n            Shapeshifters[_state].locats\\r\\n        ).calculateLocatsArray(_ownerEntropy, _tokenEntropy, traitsArray);\\r\\n        _ownerEntropy /= 10 ** 29;\\r\\n        _tokenEntropy /= 10 ** 15;\\r\\n        string memory svg = iBLONKSsvg(Shapeshifters[_state].svg).assembleSVG(\\r\\n            _ownerEntropy,\\r\\n            _tokenEntropy,\\r\\n            traitsArray,\\r\\n            locatsArray\\r\\n        );\\r\\n        string memory legibleURI = string(\\r\\n            abi.encodePacked(\\r\\n                _metaP,\\r\\n                Base64.encode(bytes(svg)),\\r\\n                '\\\",',\\r\\n                traitsJSON,\\r\\n                \\\"}\\\"\\r\\n            )\\r\\n        );\\r\\n        return legibleURI;\\r\\n    }\\r\\n\\r\\n    function buildPreviewSVG(\\r\\n        uint256 _tokenEntropy,\\r\\n        uint256 _addressEntropy\\r\\n    ) external view virtual returns (string memory) {\\r\\n        return\\r\\n            _renderSVG(\\r\\n                _tokenEntropy,\\r\\n                _addressEntropy,\\r\\n                shifterStateMap[idMap[_tokenEntropy]]\\r\\n            );\\r\\n    }\\r\\n\\r\\n    function _renderSVG(\\r\\n        uint256 _tokenEntropy,\\r\\n        uint256 _addressEntropy,\\r\\n        uint256 _state\\r\\n    ) internal view returns (string memory) {\\r\\n        uint8[11] memory traitsArray = iBLONKStraits(\\r\\n            Shapeshifters[_state].traits\\r\\n        ).calculateTraitsArray(_tokenEntropy);\\r\\n        _tokenEntropy /= 10 ** 18;\\r\\n        uint16[110] memory locatsArray = iBLONKSlocations(\\r\\n            Shapeshifters[_state].locats\\r\\n        ).calculateLocatsArray(_addressEntropy, _tokenEntropy, traitsArray);\\r\\n        _addressEntropy /= 10 ** 29;\\r\\n        _tokenEntropy /= 10 ** 15;\\r\\n        string memory svg = iBLONKSsvg(Shapeshifters[_state].svg).assembleSVG(\\r\\n            _addressEntropy,\\r\\n            _tokenEntropy,\\r\\n            traitsArray,\\r\\n            locatsArray\\r\\n        );\\r\\n        return svg;\\r\\n    }\\r\\n\\r\\n    function RANDOM_RENDER_SVG(\\r\\n        uint256 _state\\r\\n    ) public view returns (string memory) {\\r\\n        uint256 _tokenEntropy = uint256(\\r\\n            keccak256(\\r\\n                abi.encodePacked(blockhash(block.number - 1), block.basefee)\\r\\n            )\\r\\n        );\\r\\n        uint256 _addressEntropy = uint256(\\r\\n            uint160(\\r\\n                uint256(\\r\\n                    keccak256(abi.encodePacked(block.coinbase, block.timestamp))\\r\\n                )\\r\\n            )\\r\\n        );\\r\\n        return _renderSVG(_tokenEntropy, _addressEntropy, _state);\\r\\n    }\\r\\n\\r\\n    function RANDOM_RENDER_B64(\\r\\n        uint256 _state\\r\\n    ) external view returns (string memory) {\\r\\n        string memory svg = RANDOM_RENDER_SVG(_state);\\r\\n        return\\r\\n            string(\\r\\n                abi.encodePacked(\\r\\n                    \\\"data:image/svg+xml;base64,\\\",\\r\\n                    Base64.encode(bytes(svg))\\r\\n                )\\r\\n            );\\r\\n    }\\r\\n\\r\\n    function PREVIEW_SHAPESHIFTER_SVG(\\r\\n        uint256 _tokenId,\\r\\n        address _addy,\\r\\n        uint256 _state\\r\\n    ) public view returns (string memory) {\\r\\n        require(_state < Shapeshifters.length, \\\"Shapeshifter out of range\\\");\\r\\n        return\\r\\n            _renderSVG(\\r\\n                iBLONKSmain(mainContract).tokenEntropyMap(_tokenId),\\r\\n                uint256(uint160(_addy)),\\r\\n                _state\\r\\n            );\\r\\n    }\\r\\n\\r\\n    function PREVIEW_SHAPESHIFTER_B64(\\r\\n        uint256 _tokenId,\\r\\n        address _addy,\\r\\n        uint256 _state\\r\\n    ) external view returns (string memory) {\\r\\n        string memory svg = PREVIEW_SHAPESHIFTER_SVG(_tokenId, _addy, _state);\\r\\n        return\\r\\n            string(\\r\\n                abi.encodePacked(\\r\\n                    \\\"data:image/svg+xml;base64,\\\",\\r\\n                    Base64.encode(bytes(svg))\\r\\n                )\\r\\n            );\\r\\n    }\\r\\n\\r\\n    function getBase64TokenURI(\\r\\n        string memory _legibleURI\\r\\n    ) external view virtual returns (string memory) {\\r\\n        string memory URIBase64 = string(\\r\\n            abi.encodePacked(\\r\\n                \\\"data:application/json;base64,\\\",\\r\\n                Base64.encode(bytes(_legibleURI))\\r\\n            )\\r\\n        );\\r\\n        return URIBase64;\\r\\n    }\\r\\n\\r\\n    function setArtistNameOverride(\\r\\n        string memory _artistNameOverride\\r\\n    ) external onlyOwner {\\r\\n        artistNameOverride = _artistNameOverride;\\r\\n    }\\r\\n\\r\\n    function setDescriptionsContract(\\r\\n        address _descriptionsContract\\r\\n    ) external onlyOwner {\\r\\n        descriptionsContract = _descriptionsContract;\\r\\n    }\\r\\n\\r\\n    function updateShapeshifter(\\r\\n        uint256 _state,\\r\\n        address _traits,\\r\\n        address _locats,\\r\\n        address _svg,\\r\\n        string memory _name,\\r\\n        uint16 _max,\\r\\n        uint16 _active,\\r\\n        bool _openToAll\\r\\n    ) external onlyOwner {\\r\\n        require(shapeshiftingAllowed == false, \\\"Shapeshifter setting allowed\\\");\\r\\n        Shapeshifter storage shapeshifter = Shapeshifters[_state];\\r\\n        shapeshifter.traits = _traits;\\r\\n        shapeshifter.locats = _locats;\\r\\n        shapeshifter.svg = _svg;\\r\\n        shapeshifter.name = _name;\\r\\n        shapeshifter.max = _max;\\r\\n        shapeshifter.active = _active;\\r\\n        shapeshifter.openToAll = _openToAll;\\r\\n    }\\r\\n\\r\\n    function toggleShapeshiftingAllowed() external onlyOwner {\\r\\n        shapeshiftingAllowed = !shapeshiftingAllowed;\\r\\n    }\\r\\n}\\r\\n\\r\\n/// [MIT License]\\r\\n/// @title Base64\\r\\n/// @notice Provides a function for encoding some bytes in base64\\r\\n/// @author Brecht Devos <brecht@loopring.org>\\r\\nlibrary Base64 {\\r\\n    bytes internal constant TABLE =\\r\\n        \\\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\\\";\\r\\n\\r\\n    /// @notice Encodes some bytes to the base64 representation\\r\\n    function encode(bytes memory data) internal pure returns (string memory) {\\r\\n        uint256 len = data.length;\\r\\n        if (len == 0) return \\\"\\\";\\r\\n        uint256 encodedLen = 4 * ((len + 2) / 3);\\r\\n        bytes memory result = new bytes(encodedLen + 32);\\r\\n        bytes memory table = TABLE;\\r\\n\\r\\n        assembly {\\r\\n            let tablePtr := add(table, 1)\\r\\n            let resultPtr := add(result, 32)\\r\\n            for {\\r\\n                let i := 0\\r\\n            } lt(i, len) {\\r\\n\\r\\n            } {\\r\\n                i := add(i, 3)\\r\\n                let input := and(mload(add(data, i)), 0xffffff)\\r\\n                let out := mload(add(tablePtr, and(shr(18, input), 0x3F)))\\r\\n                out := shl(8, out)\\r\\n                out := add(\\r\\n                    out,\\r\\n                    and(mload(add(tablePtr, and(shr(12, input), 0x3F))), 0xFF)\\r\\n                )\\r\\n                out := shl(8, out)\\r\\n                out := add(\\r\\n                    out,\\r\\n                    and(mload(add(tablePtr, and(shr(6, input), 0x3F))), 0xFF)\\r\\n                )\\r\\n                out := shl(8, out)\\r\\n                out := add(\\r\\n                    out,\\r\\n                    and(mload(add(tablePtr, and(input, 0x3F))), 0xFF)\\r\\n                )\\r\\n                out := shl(224, out)\\r\\n                mstore(resultPtr, out)\\r\\n                resultPtr := add(resultPtr, 4)\\r\\n            }\\r\\n            switch mod(len, 3)\\r\\n            case 1 {\\r\\n                mstore(sub(resultPtr, 2), shl(240, 0x3d3d))\\r\\n            }\\r\\n            case 2 {\\r\\n                mstore(sub(resultPtr, 1), shl(248, 0x3d))\\r\\n            }\\r\\n            mstore(result, encodedLen)\\r\\n        }\\r\\n        return string(result);\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Counters.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_traits\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_locations\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_svg\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"_max\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_openToAll\",\"type\":\"bool\"}],\"name\":\"NewShapeshifter\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_state\",\"type\":\"uint256\"}],\"name\":\"Shapeshift\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_addy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_state\",\"type\":\"uint256\"}],\"name\":\"PREVIEW_SHAPESHIFTER_B64\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_addy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_state\",\"type\":\"uint256\"}],\"name\":\"PREVIEW_SHAPESHIFTER_SVG\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_state\",\"type\":\"uint256\"}],\"name\":\"RANDOM_RENDER_B64\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_state\",\"type\":\"uint256\"}],\"name\":\"RANDOM_RENDER_SVG\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_state\",\"type\":\"uint256\"}],\"name\":\"SHAPESHIFT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"Shapeshifters\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"traits\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"locats\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"svg\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint16\",\"name\":\"max\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"active\",\"type\":\"uint16\"},{\"internalType\":\"bool\",\"name\":\"openToAll\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_traits\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_locations\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_svg\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"uint16\",\"name\":\"_max\",\"type\":\"uint16\"},{\"internalType\":\"bool\",\"name\":\"_openToAll\",\"type\":\"bool\"}],\"name\":\"addShapeshifter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"addUniqueName\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"artistNameOverride\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_collectionDescription\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_externalURL\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_royaltyBps\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_artistAddy\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_svg\",\"type\":\"string\"}],\"name\":\"buildContractURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_collectionDescription\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_artistAddy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_royaltyBps\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_collection\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_website\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_externalURL\",\"type\":\"string\"}],\"name\":\"buildMetaPart\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenEntropy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_addressEntropy\",\"type\":\"uint256\"}],\"name\":\"buildPreviewSVG\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_legibleURI\",\"type\":\"string\"}],\"name\":\"getBase64TokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_metaP\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_tokenEntropy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_ownerEntropy\",\"type\":\"uint256\"}],\"name\":\"getLegibleTokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getShapeshiftAvailability\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getTokenShapeshiftTotals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"idMap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_artistNameOverride\",\"type\":\"string\"}],\"name\":\"setArtistNameOverride\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_descriptionsContract\",\"type\":\"address\"}],\"name\":\"setDescriptionsContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shapeshiftingAllowed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"shifterStateMap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toggleShapeshiftingAllowed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenShiftCounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenStateLock\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"uniqueNameMap\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_state\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_traits\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_locats\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_svg\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"uint16\",\"name\":\"_max\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"_active\",\"type\":\"uint16\"},{\"internalType\":\"bool\",\"name\":\"_openToAll\",\"type\":\"bool\"}],\"name\":\"updateShapeshifter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "BLONKSuri", "CompilerVersion": "v0.8.21+commit.d9974bed", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}