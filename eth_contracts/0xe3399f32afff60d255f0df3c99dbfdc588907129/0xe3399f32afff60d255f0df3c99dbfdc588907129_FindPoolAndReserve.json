{"SourceCode": "// File: @uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\r\n\r\npragma solidity >=0.5.0;\r\n\r\ninterface IUniswapV2Pair {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function name() external pure returns (string memory);\r\n    function symbol() external pure returns (string memory);\r\n    function decimals() external pure returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n    function nonces(address owner) external view returns (uint);\r\n\r\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n\r\n    event Mint(address indexed sender, uint amount0, uint amount1);\r\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\r\n    event Swap(\r\n        address indexed sender,\r\n        uint amount0In,\r\n        uint amount1In,\r\n        uint amount0Out,\r\n        uint amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\r\n    function factory() external view returns (address);\r\n    function token0() external view returns (address);\r\n    function token1() external view returns (address);\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n    function price0CumulativeLast() external view returns (uint);\r\n    function price1CumulativeLast() external view returns (uint);\r\n    function kLast() external view returns (uint);\r\n\r\n    function mint(address to) external returns (uint liquidity);\r\n    function burn(address to) external returns (uint amount0, uint amount1);\r\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\r\n    function skim(address to) external;\r\n    function sync() external;\r\n\r\n    function initialize(address, address) external;\r\n}\r\n\r\n// File: @uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol\r\n\r\npragma solidity >=0.5.0;\r\n\r\ninterface IUniswapV2Factory {\r\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\r\n\r\n    function feeTo() external view returns (address);\r\n    function feeToSetter() external view returns (address);\r\n\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n    function allPairs(uint) external view returns (address pair);\r\n    function allPairsLength() external view returns (uint);\r\n\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n\r\n    function setFeeTo(address) external;\r\n    function setFeeToSetter(address) external;\r\n}\r\n\r\n// File: back/batchFindPool.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\ninterface IERC20 {\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\ncontract FindPoolAndReserve  {\r\n\r\n    address uniswapFactory; \r\n    constructor(address _addr ){\r\n        uniswapFactory = _addr;\r\n    }\r\n\r\n    function getTokenPairLength() view  public  returns(uint256) {\r\n        return IUniswapV2Factory(uniswapFactory).allPairsLength();\r\n    }\r\n\r\n    function setFactoryAddr(address _addr) public {\r\n        uniswapFactory = _addr;\r\n    }\r\n\r\n    function getTokenPairs(uint256 start ,uint256 end ) view  public  returns (\r\n        address[] memory,address[] memory,address[] memory,\r\n        uint256[] memory,uint256[] memory,uint256[] memory\r\n        ){\r\n        uint256 pairCount = IUniswapV2Factory(uniswapFactory).allPairsLength();\r\n        address[] memory pairs = new address[](pairCount);\r\n        address[] memory toeknAs = new address[](pairCount);\r\n        address[] memory toeknBs = new address[](pairCount);\r\n        uint256[] memory reserveA = new uint256[](pairCount);\r\n        uint256[] memory reserveB = new uint256[](pairCount);\r\n        uint256[] memory blockTimestampLast = new uint256[](pairCount);\r\n\r\n        for (uint256 i = start ; i < end ; i++) {\r\n            pairs[i] = IUniswapV2Factory(uniswapFactory).allPairs(i);\r\n            (toeknAs[i], toeknBs[i]) = IUniswapV2Pair(pairs[i]).token0() < IUniswapV2Pair(pairs[i]).token1()\r\n            ? (IUniswapV2Pair(pairs[i]).token0(), IUniswapV2Pair(pairs[i]).token1())\r\n            : (IUniswapV2Pair(pairs[i]).token1(), IUniswapV2Pair(pairs[i]).token0());\r\n             (reserveA[i], reserveB[i],blockTimestampLast[i] ) = IUniswapV2Pair(pairs[i]).getReserves();\r\n        }\r\n        return (pairs,toeknAs,toeknBs,reserveA,reserveB,blockTimestampLast);\r\n    }\r\n\r\n    function getTokenDecimals(address[] memory addrs) view  public  returns (uint8[] memory){\r\n        uint8[] memory decimals = new uint8[](addrs.length); \r\n        for (uint256 i = 0; i < addrs.length; i++){\r\n            decimals[i] = IERC20(addrs[i]).decimals();\r\n        }\r\n        return decimals;\r\n    }\r\n\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addrs\",\"type\":\"address[]\"}],\"name\":\"getTokenDecimals\",\"outputs\":[{\"internalType\":\"uint8[]\",\"name\":\"\",\"type\":\"uint8[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokenPairLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"}],\"name\":\"getTokenPairs\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"setFactoryAddr\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "FindPoolAndReserve", "CompilerVersion": "v0.8.21+commit.d9974bed", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000005c69bee701ef814a2b6a3edd4b1652cb9cc5aa6f", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://4c8569e794db0c5aa86abbcbd7e8f26223712ce153d16b737185985f44ba6a9c"}