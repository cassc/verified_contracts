{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Counters.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ISSVClusters.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.18;\\n\\nimport \\\"./ISSVNetworkCore.sol\\\";\\n\\ninterface ISSVClusters is ISSVNetworkCore {\\n    /// @notice Registers a new validator on the SSV Network\\n    /// @param publicKey The public key of the new validator\\n    /// @param operatorIds Array of IDs of operators managing this validator\\n    /// @param sharesData Encrypted shares related to the new validator\\n    /// @param amount Amount of SSV tokens to be deposited\\n    /// @param cluster Cluster to be used with the new validator\\n    function registerValidator(\\n        bytes calldata publicKey,\\n        uint64[] memory operatorIds,\\n        bytes calldata sharesData,\\n        uint256 amount,\\n        Cluster memory cluster\\n    ) external;\\n\\n    /// @notice Registers new validators on the SSV Network\\n    /// @param publicKeys The public keys of the new validators\\n    /// @param operatorIds Array of IDs of operators managing this validator\\n    /// @param sharesData Encrypted shares related to the new validators\\n    /// @param amount Amount of SSV tokens to be deposited\\n    /// @param cluster Cluster to be used with the new validator\\n    function bulkRegisterValidator(\\n        bytes[] calldata publicKeys,\\n        uint64[] memory operatorIds,\\n        bytes[] calldata sharesData,\\n        uint256 amount,\\n        Cluster memory cluster\\n    ) external;\\n\\n    /// @notice Removes an existing validator from the SSV Network\\n    /// @param publicKey The public key of the validator to be removed\\n    /// @param operatorIds Array of IDs of operators managing the validator\\n    /// @param cluster Cluster associated with the validator\\n    function removeValidator(bytes calldata publicKey, uint64[] memory operatorIds, Cluster memory cluster) external;\\n\\n    /// @notice Bulk removes a set of existing validators in the same cluster from the SSV Network\\n    /// @notice Reverts if publicKeys contains duplicates or non-existent validators\\n    /// @param publicKeys The public keys of the validators to be removed\\n    /// @param operatorIds Array of IDs of operators managing the validator\\n    /// @param cluster Cluster associated with the validator\\n    function bulkRemoveValidator(\\n        bytes[] calldata publicKeys,\\n        uint64[] memory operatorIds,\\n        Cluster memory cluster\\n    ) external;\\n\\n    /**************************/\\n    /* Cluster External Functions */\\n    /**************************/\\n\\n    /// @notice Liquidates a cluster\\n    /// @param owner The owner of the cluster\\n    /// @param operatorIds Array of IDs of operators managing the cluster\\n    /// @param cluster Cluster to be liquidated\\n    function liquidate(address owner, uint64[] memory operatorIds, Cluster memory cluster) external;\\n\\n    /// @notice Reactivates a cluster\\n    /// @param operatorIds Array of IDs of operators managing the cluster\\n    /// @param amount Amount of SSV tokens to be deposited for reactivation\\n    /// @param cluster Cluster to be reactivated\\n    function reactivate(uint64[] memory operatorIds, uint256 amount, Cluster memory cluster) external;\\n\\n    /******************************/\\n    /* Balance External Functions */\\n    /******************************/\\n\\n    /// @notice Deposits tokens into a cluster\\n    /// @param owner The owner of the cluster\\n    /// @param operatorIds Array of IDs of operators managing the cluster\\n    /// @param amount Amount of SSV tokens to be deposited\\n    /// @param cluster Cluster where the deposit will be made\\n    function deposit(address owner, uint64[] memory operatorIds, uint256 amount, Cluster memory cluster) external;\\n\\n    /// @notice Withdraws tokens from a cluster\\n    /// @param operatorIds Array of IDs of operators managing the cluster\\n    /// @param tokenAmount Amount of SSV tokens to be withdrawn\\n    /// @param cluster Cluster where the withdrawal will be made\\n    function withdraw(uint64[] memory operatorIds, uint256 tokenAmount, Cluster memory cluster) external;\\n\\n    /// @notice Fires the exit event for a validator\\n    /// @param publicKey The public key of the validator to be exited\\n    /// @param operatorIds Array of IDs of operators managing the validator\\n    function exitValidator(bytes calldata publicKey, uint64[] calldata operatorIds) external;\\n\\n    /// @notice Fires the exit event for a set of validators\\n    /// @param publicKeys The public keys of the validators to be exited\\n    /// @param operatorIds Array of IDs of operators managing the validators\\n    function bulkExitValidator(bytes[] calldata publicKeys, uint64[] calldata operatorIds) external;\\n\\n    /**\\n     * @dev Emitted when the validator has been added.\\n     * @param publicKey The public key of a validator.\\n     * @param operatorIds The operator ids list.\\n     * @param shares snappy compressed shares(a set of encrypted and public shares).\\n     * @param cluster All the cluster data.\\n     */\\n    event ValidatorAdded(address indexed owner, uint64[] operatorIds, bytes publicKey, bytes shares, Cluster cluster);\\n\\n    /**\\n     * @dev Emitted when the validator is removed.\\n     * @param publicKey The public key of a validator.\\n     * @param operatorIds The operator ids list.\\n     * @param cluster All the cluster data.\\n     */\\n    event ValidatorRemoved(address indexed owner, uint64[] operatorIds, bytes publicKey, Cluster cluster);\\n\\n    /**\\n     * @dev Emitted when a cluster is liquidated.\\n     * @param owner The owner of the liquidated cluster.\\n     * @param operatorIds The operator IDs managing the cluster.\\n     * @param cluster The liquidated cluster data.\\n     */\\n    event ClusterLiquidated(address indexed owner, uint64[] operatorIds, Cluster cluster);\\n\\n    /**\\n     * @dev Emitted when a cluster is reactivated.\\n     * @param owner The owner of the reactivated cluster.\\n     * @param operatorIds The operator IDs managing the cluster.\\n     * @param cluster The reactivated cluster data.\\n     */\\n    event ClusterReactivated(address indexed owner, uint64[] operatorIds, Cluster cluster);\\n\\n    /**\\n     * @dev Emitted when tokens are withdrawn from a cluster.\\n     * @param owner The owner of the cluster.\\n     * @param operatorIds The operator IDs managing the cluster.\\n     * @param value The amount of tokens withdrawn.\\n     * @param cluster The cluster from which tokens were withdrawn.\\n     */\\n    event ClusterWithdrawn(address indexed owner, uint64[] operatorIds, uint256 value, Cluster cluster);\\n\\n    /**\\n     * @dev Emitted when tokens are deposited into a cluster.\\n     * @param owner The owner of the cluster.\\n     * @param operatorIds The operator IDs managing the cluster.\\n     * @param value The amount of SSV tokens deposited.\\n     * @param cluster The cluster into which SSV tokens were deposited.\\n     */\\n    event ClusterDeposited(address indexed owner, uint64[] operatorIds, uint256 value, Cluster cluster);\\n\\n    /**\\n     * @dev Emitted when a validator begins the exit process.\\n     * @param owner The owner of the exiting validator.\\n     * @param operatorIds The operator IDs managing the validator.\\n     * @param publicKey The public key of the exiting validator.\\n     */\\n    event ValidatorExited(address indexed owner, uint64[] operatorIds, bytes publicKey);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ISSVNetworkCore.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.18;\\n\\ninterface ISSVNetworkCore {\\n    /***********/\\n    /* Structs */\\n    /***********/\\n\\n    /// @notice Represents a snapshot of an operator's or a DAO's state at a certain block\\n    struct Snapshot {\\n        /// @dev The block number when the snapshot was taken\\n        uint32 block;\\n        /// @dev The last index calculated by the formula index += (currentBlock - block) * fee\\n        uint64 index;\\n        /// @dev Total accumulated earnings calculated by the formula accumulated + lastIndex * validatorCount\\n        uint64 balance;\\n    }\\n\\n    /// @notice Represents an SSV operator\\n    struct Operator {\\n        /// @dev The number of validators associated with this operator\\n        uint32 validatorCount;\\n        /// @dev The fee charged by the operator, set to zero for private operators and cannot be increased once set\\n        uint64 fee;\\n        /// @dev The address of the operator's owner\\n        address owner;\\n        /// @dev Whitelisted flag for this operator\\n        bool whitelisted;\\n        /// @dev The state snapshot of the operator\\n        Snapshot snapshot;\\n    }\\n\\n    /// @notice Represents a request to change an operator's fee\\n    struct OperatorFeeChangeRequest {\\n        /// @dev The new fee proposed by the operator\\n        uint64 fee;\\n        /// @dev The time when the approval period for the fee change begins\\n        uint64 approvalBeginTime;\\n        /// @dev The time when the approval period for the fee change ends\\n        uint64 approvalEndTime;\\n    }\\n\\n    /// @notice Represents a cluster of validators\\n    struct Cluster {\\n        /// @dev The number of validators in the cluster\\n        uint32 validatorCount;\\n        /// @dev The index of network fees related to this cluster\\n        uint64 networkFeeIndex;\\n        /// @dev The last index calculated for the cluster\\n        uint64 index;\\n        /// @dev Flag indicating whether the cluster is active\\n        bool active;\\n        /// @dev The balance of the cluster\\n        uint256 balance;\\n    }\\n\\n    /**********/\\n    /* Errors */\\n    /**********/\\n\\n    error CallerNotOwner(); // 0x5cd83192\\n    error CallerNotWhitelisted(); // 0x8c6e5d71\\n    error FeeTooLow(); // 0x732f9413\\n    error FeeExceedsIncreaseLimit(); // 0x958065d9\\n    error NoFeeDeclared(); // 0x1d226c30\\n    error ApprovalNotWithinTimeframe(); // 0x97e4b518\\n    error OperatorDoesNotExist(); // 0x961e3e8c\\n    error InsufficientBalance(); // 0xf4d678b8\\n    error ValidatorDoesNotExist(); // 0xe51315d2\\n    error ClusterNotLiquidatable(); // 0x60300a8d\\n    error InvalidPublicKeyLength(); // 0x637297a4\\n    error InvalidOperatorIdsLength(); // 0x38186224\\n    error ClusterAlreadyEnabled(); // 0x3babafd2\\n    error ClusterIsLiquidated(); // 0x95a0cf33\\n    error ClusterDoesNotExists(); // 0x185e2b16\\n    error IncorrectClusterState(); // 0x12e04c87\\n    error UnsortedOperatorsList(); // 0xdd020e25\\n    error NewBlockPeriodIsBelowMinimum(); // 0x6e6c9cac\\n    error ExceedValidatorLimit(); // 0x6df5ab76\\n    error TokenTransferFailed(); // 0x045c4b02\\n    error SameFeeChangeNotAllowed(); // 0xc81272f8\\n    error FeeIncreaseNotAllowed(); // 0x410a2b6c\\n    error NotAuthorized(); // 0xea8e4eb5\\n    error OperatorsListNotUnique(); // 0xa5a1ff5d\\n    error OperatorAlreadyExists(); // 0x289c9494\\n    error TargetModuleDoesNotExist(); // 0x8f9195fb\\n    error MaxValueExceeded(); // 0x91aa3017\\n    error FeeTooHigh(); // 0xcd4e6167\\n    error PublicKeysSharesLengthMismatch(); // 0x9ad467b8\\n    error IncorrectValidatorStateWithData(bytes publicKey); // 0x89307938\\n    error ValidatorAlreadyExistsWithData(bytes publicKey); // 0x388e7999\\n\\n    // legacy errors\\n    error ValidatorAlreadyExists(); // 0x8d09a73e\\n    error IncorrectValidatorState(); // 0x2feda3c1\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/ClusterLib.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.18;\\n\\nimport \\\"../interfaces/ISSVNetworkCore.sol\\\";\\nimport \\\"./SSVStorage.sol\\\";\\nimport \\\"./SSVStorageProtocol.sol\\\";\\nimport \\\"./OperatorLib.sol\\\";\\nimport \\\"./ProtocolLib.sol\\\";\\nimport \\\"./Types.sol\\\";\\n\\nlibrary ClusterLib {\\n    using Types64 for uint64;\\n    using ProtocolLib for StorageProtocol;\\n\\n    function updateBalance(\\n        ISSVNetworkCore.Cluster memory cluster,\\n        uint64 newIndex,\\n        uint64 currentNetworkFeeIndex\\n    ) internal pure {\\n        uint64 networkFee = uint64(currentNetworkFeeIndex - cluster.networkFeeIndex) * cluster.validatorCount;\\n        uint64 usage = (newIndex - cluster.index) * cluster.validatorCount + networkFee;\\n        cluster.balance = usage.expand() > cluster.balance ? 0 : cluster.balance - usage.expand();\\n    }\\n\\n    function isLiquidatable(\\n        ISSVNetworkCore.Cluster memory cluster,\\n        uint64 burnRate,\\n        uint64 networkFee,\\n        uint64 minimumBlocksBeforeLiquidation,\\n        uint64 minimumLiquidationCollateral\\n    ) internal pure returns (bool liquidatable) {\\n        if (cluster.validatorCount != 0) {\\n            if (cluster.balance < minimumLiquidationCollateral.expand()) return true;\\n            uint64 liquidationThreshold = minimumBlocksBeforeLiquidation *\\n                (burnRate + networkFee) *\\n                cluster.validatorCount;\\n\\n            return cluster.balance < liquidationThreshold.expand();\\n        }\\n    }\\n\\n    function validateClusterIsNotLiquidated(ISSVNetworkCore.Cluster memory cluster) internal pure {\\n        if (!cluster.active) revert ISSVNetworkCore.ClusterIsLiquidated();\\n    }\\n\\n    function validateHashedCluster(\\n        ISSVNetworkCore.Cluster memory cluster,\\n        address owner,\\n        uint64[] memory operatorIds,\\n        StorageData storage s\\n    ) internal view returns (bytes32 hashedCluster) {\\n        hashedCluster = keccak256(abi.encodePacked(owner, operatorIds));\\n        bytes32 hashedClusterData = hashClusterData(cluster);\\n\\n        bytes32 clusterData = s.clusters[hashedCluster];\\n        if (clusterData == bytes32(0)) {\\n            revert ISSVNetworkCore.ClusterDoesNotExists();\\n        } else if (clusterData != hashedClusterData) {\\n            revert ISSVNetworkCore.IncorrectClusterState();\\n        }\\n    }\\n\\n    function updateClusterData(\\n        ISSVNetworkCore.Cluster memory cluster,\\n        uint64 clusterIndex,\\n        uint64 currentNetworkFeeIndex\\n    ) internal pure {\\n        updateBalance(cluster, clusterIndex, currentNetworkFeeIndex);\\n        cluster.index = clusterIndex;\\n        cluster.networkFeeIndex = currentNetworkFeeIndex;\\n    }\\n\\n    function hashClusterData(ISSVNetworkCore.Cluster memory cluster) internal pure returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encodePacked(\\n                    cluster.validatorCount,\\n                    cluster.networkFeeIndex,\\n                    cluster.index,\\n                    cluster.balance,\\n                    cluster.active\\n                )\\n            );\\n    }\\n\\n    function validateClusterOnRegistration(\\n        ISSVNetworkCore.Cluster memory cluster,\\n        uint64[] memory operatorIds,\\n        StorageData storage s\\n    ) internal view returns (bytes32 hashedCluster) {\\n        hashedCluster = keccak256(abi.encodePacked(msg.sender, operatorIds));\\n\\n        bytes32 clusterData = s.clusters[hashedCluster];\\n        if (clusterData == bytes32(0)) {\\n            if (\\n                cluster.validatorCount != 0 ||\\n                cluster.networkFeeIndex != 0 ||\\n                cluster.index != 0 ||\\n                cluster.balance != 0 ||\\n                !cluster.active\\n            ) {\\n                revert ISSVNetworkCore.IncorrectClusterState();\\n            }\\n        } else if (clusterData != hashClusterData(cluster)) {\\n            revert ISSVNetworkCore.IncorrectClusterState();\\n        } else {\\n            validateClusterIsNotLiquidated(cluster);\\n        }\\n    }\\n\\n    function updateClusterOnRegistration(\\n        ISSVNetworkCore.Cluster memory cluster,\\n        uint64[] memory operatorIds,\\n        bytes32 hashedCluster,\\n        uint32 validatorCountDelta,\\n        StorageData storage s,\\n        StorageProtocol storage sp\\n    ) internal {\\n        (uint64 clusterIndex, uint64 burnRate) = OperatorLib.updateClusterOperators(\\n            operatorIds,\\n            true,\\n            true,\\n            validatorCountDelta,\\n            s,\\n            sp\\n        );\\n\\n        updateClusterData(cluster, clusterIndex, sp.currentNetworkFeeIndex());\\n\\n        sp.updateDAO(true, validatorCountDelta);\\n\\n        cluster.validatorCount += validatorCountDelta;\\n\\n        if (\\n            isLiquidatable(\\n                cluster,\\n                burnRate,\\n                sp.networkFee,\\n                sp.minimumBlocksBeforeLiquidation,\\n                sp.minimumLiquidationCollateral\\n            )\\n        ) {\\n            revert ISSVNetworkCore.InsufficientBalance();\\n        }\\n\\n        s.clusters[hashedCluster] = hashClusterData(cluster);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/CoreLib.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.18;\\n\\nimport \\\"./SSVStorage.sol\\\";\\n\\nlibrary CoreLib {\\n    event ModuleUpgraded(SSVModules indexed moduleId, address moduleAddress);\\n\\n    function getVersion() internal pure returns (string memory) {\\n        return \\\"v1.1.0\\\";\\n    }\\n\\n    function transferBalance(address to, uint256 amount) internal {\\n        if (!SSVStorage.load().token.transfer(to, amount)) {\\n            revert ISSVNetworkCore.TokenTransferFailed();\\n        }\\n    }\\n\\n    function deposit(uint256 amount) internal {\\n        if (!SSVStorage.load().token.transferFrom(msg.sender, address(this), amount)) {\\n            revert ISSVNetworkCore.TokenTransferFailed();\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        if (account == address(0)) {\\n            return false;\\n        }\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n\\n    function setModuleContract(SSVModules moduleId, address moduleAddress) internal {\\n        if (!isContract(moduleAddress)) revert ISSVNetworkCore.TargetModuleDoesNotExist();\\n\\n        SSVStorage.load().ssvContracts[moduleId] = moduleAddress;\\n        emit ModuleUpgraded(moduleId, moduleAddress);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/OperatorLib.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.18;\\n\\nimport \\\"../interfaces/ISSVNetworkCore.sol\\\";\\nimport \\\"./SSVStorage.sol\\\";\\nimport \\\"./SSVStorageProtocol.sol\\\";\\nimport \\\"./Types.sol\\\";\\n\\nlibrary OperatorLib {\\n    using Types64 for uint64;\\n\\n    function updateSnapshot(ISSVNetworkCore.Operator memory operator) internal view {\\n        uint64 blockDiffFee = (uint32(block.number) - operator.snapshot.block) * operator.fee;\\n\\n        operator.snapshot.index += blockDiffFee;\\n        operator.snapshot.balance += blockDiffFee * operator.validatorCount;\\n        operator.snapshot.block = uint32(block.number);\\n    }\\n\\n    function updateSnapshotSt(ISSVNetworkCore.Operator storage operator) internal {\\n        uint64 blockDiffFee = (uint32(block.number) - operator.snapshot.block) * operator.fee;\\n\\n        operator.snapshot.index += blockDiffFee;\\n        operator.snapshot.balance += blockDiffFee * operator.validatorCount;\\n        operator.snapshot.block = uint32(block.number);\\n    }\\n\\n    function checkOwner(ISSVNetworkCore.Operator memory operator) internal view {\\n        if (operator.snapshot.block == 0) revert ISSVNetworkCore.OperatorDoesNotExist();\\n        if (operator.owner != msg.sender) revert ISSVNetworkCore.CallerNotOwner();\\n    }\\n\\n    function updateClusterOperators(\\n        uint64[] memory operatorIds,\\n        bool isRegisteringValidator,\\n        bool increaseValidatorCount,\\n        uint32 deltaValidatorCount,\\n        StorageData storage s,\\n        StorageProtocol storage sp\\n    ) internal returns (uint64 cumulativeIndex, uint64 cumulativeFee) {\\n        uint256 operatorsLength = operatorIds.length;\\n\\n        for (uint256 i; i < operatorsLength; ) {\\n            uint64 operatorId = operatorIds[i];\\n\\n            if (!isRegisteringValidator) {\\n                ISSVNetworkCore.Operator storage operator = s.operators[operatorId];\\n\\n                if (operator.snapshot.block != 0) {\\n                    updateSnapshotSt(operator);\\n                    if (!increaseValidatorCount) {\\n                        operator.validatorCount -= deltaValidatorCount;\\n                    } else if ((operator.validatorCount += deltaValidatorCount) > sp.validatorsPerOperatorLimit) {\\n                        revert ISSVNetworkCore.ExceedValidatorLimit();\\n                    }\\n\\n                    cumulativeFee += operator.fee;\\n                }\\n                cumulativeIndex += operator.snapshot.index;\\n            } else {\\n                if (i + 1 < operatorsLength) {\\n                    if (operatorId > operatorIds[i + 1]) {\\n                        revert ISSVNetworkCore.UnsortedOperatorsList();\\n                    } else if (operatorId == operatorIds[i + 1]) {\\n                        revert ISSVNetworkCore.OperatorsListNotUnique();\\n                    }\\n                }\\n                ISSVNetworkCore.Operator memory operator = s.operators[operatorId];\\n\\n                if (operator.snapshot.block == 0) {\\n                    revert ISSVNetworkCore.OperatorDoesNotExist();\\n                }\\n                if (operator.whitelisted) {\\n                    address whitelisted = s.operatorsWhitelist[operatorId];\\n                    if (whitelisted != address(0) && whitelisted != msg.sender) {\\n                        revert ISSVNetworkCore.CallerNotWhitelisted();\\n                    }\\n                }\\n\\n                updateSnapshot(operator);\\n                if ((operator.validatorCount += deltaValidatorCount) > sp.validatorsPerOperatorLimit) {\\n                    revert ISSVNetworkCore.ExceedValidatorLimit();\\n                }\\n\\n                cumulativeFee += operator.fee;\\n                cumulativeIndex += operator.snapshot.index;\\n\\n                s.operators[operatorId] = operator;\\n            }\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/ProtocolLib.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.18;\\n\\nimport \\\"../interfaces/ISSVNetworkCore.sol\\\";\\nimport \\\"./Types.sol\\\";\\nimport \\\"./SSVStorageProtocol.sol\\\";\\n\\nlibrary ProtocolLib {\\n    using Types256 for uint256;\\n\\n    /******************************/\\n    /* Network internal functions */\\n    /******************************/\\n    function currentNetworkFeeIndex(StorageProtocol storage sp) internal view returns (uint64) {\\n        return sp.networkFeeIndex + uint64(block.number - sp.networkFeeIndexBlockNumber) * sp.networkFee;\\n    }\\n\\n    function updateNetworkFee(StorageProtocol storage sp, uint256 fee) internal {\\n        updateDAOEarnings(sp);\\n\\n        sp.networkFeeIndex = currentNetworkFeeIndex(sp);\\n        sp.networkFeeIndexBlockNumber = uint32(block.number);\\n        sp.networkFee = fee.shrink();\\n    }\\n\\n    /**************************/\\n    /* DAO internal functions */\\n    /**************************/\\n    function updateDAOEarnings(StorageProtocol storage sp) internal {\\n        sp.daoBalance = networkTotalEarnings(sp);\\n        sp.daoIndexBlockNumber = uint32(block.number);\\n    }\\n\\n    function networkTotalEarnings(StorageProtocol storage sp) internal view returns (uint64) {\\n        return sp.daoBalance + (uint64(block.number) - sp.daoIndexBlockNumber) * sp.networkFee * sp.daoValidatorCount;\\n    }\\n\\n    function updateDAO(StorageProtocol storage sp, bool increaseValidatorCount, uint32 deltaValidatorCount) internal {\\n        updateDAOEarnings(sp);\\n        if (!increaseValidatorCount) {\\n            sp.daoValidatorCount -= deltaValidatorCount;\\n        } else if ((sp.daoValidatorCount += deltaValidatorCount) > type(uint32).max) {\\n            revert ISSVNetworkCore.MaxValueExceeded();\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/SSVStorage.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.18;\\n\\nimport \\\"../interfaces/ISSVNetworkCore.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nenum SSVModules {\\n    SSV_OPERATORS,\\n    SSV_CLUSTERS,\\n    SSV_DAO,\\n    SSV_VIEWS\\n}\\n\\n/// @title SSV Network Storage Data\\n/// @notice Represents all operational state required by the SSV Network\\nstruct StorageData {\\n    /// @notice Maps each validator's public key to its hashed representation of: operator Ids used by the validator and active / inactive flag (uses LSB)\\n    mapping(bytes32 => bytes32) validatorPKs;\\n    /// @notice Maps each cluster's bytes32 identifier to its hashed representation of ISSVNetworkCore.Cluster\\n    mapping(bytes32 => bytes32) clusters;\\n    /// @notice Maps each operator's public key to its corresponding ID\\n    mapping(bytes32 => uint64) operatorsPKs;\\n    /// @notice Maps each SSVModules' module to its corresponding contract address\\n    mapping(SSVModules => address) ssvContracts;\\n    /// @notice Operators' whitelist: Maps each operator's ID to its corresponding whitelisted Ethereum address\\n    mapping(uint64 => address) operatorsWhitelist;\\n    /// @notice Maps each operator's ID to its corresponding operator fee change request data\\n    mapping(uint64 => ISSVNetworkCore.OperatorFeeChangeRequest) operatorFeeChangeRequests;\\n    /// @notice Maps each operator's ID to its corresponding operator data\\n    mapping(uint64 => ISSVNetworkCore.Operator) operators;\\n    /// @notice The SSV token used within the network (fees, rewards)\\n    IERC20 token;\\n    /// @notice Counter keeping track of the last Operator ID issued\\n    Counters.Counter lastOperatorId;\\n}\\n\\nlibrary SSVStorage {\\n    uint256 constant private SSV_STORAGE_POSITION = uint256(keccak256(\\\"ssv.network.storage.main\\\")) - 1;\\n\\n    function load() internal pure returns (StorageData storage sd) {\\n        uint256 position = SSV_STORAGE_POSITION;\\n        assembly {\\n            sd.slot := position\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/SSVStorageProtocol.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.18;\\n\\n/// @title SSV Network Storage Protocol\\n/// @notice Represents the operational settings and parameters required by the SSV Network\\nstruct StorageProtocol {\\n    /// @notice The block number when the network fee index was last updated\\n    uint32 networkFeeIndexBlockNumber;\\n    /// @notice The count of validators governed by the DAO\\n    uint32 daoValidatorCount;\\n    /// @notice The block number when the DAO index was last updated\\n    uint32 daoIndexBlockNumber;\\n    /// @notice The maximum limit of validators per operator\\n    uint32 validatorsPerOperatorLimit;\\n    /// @notice The current network fee value\\n    uint64 networkFee;\\n    /// @notice The current network fee index value\\n    uint64 networkFeeIndex;\\n    /// @notice The current balance of the DAO\\n    uint64 daoBalance;\\n    /// @notice The minimum number of blocks before a liquidation event can be triggered\\n    uint64 minimumBlocksBeforeLiquidation;\\n    /// @notice The minimum collateral required for liquidation\\n    uint64 minimumLiquidationCollateral;\\n    /// @notice The period in which an operator can declare a fee change\\n    uint64 declareOperatorFeePeriod;\\n    /// @notice The period in which an operator fee change can be executed\\n    uint64 executeOperatorFeePeriod;\\n    /// @notice The maximum increase in operator fee that is allowed (percentage)\\n    uint64 operatorMaxFeeIncrease;\\n    /// @notice The maximum value in operator fee that is allowed (SSV)\\n    uint64 operatorMaxFee;\\n}\\n\\nlibrary SSVStorageProtocol {\\n    uint256 constant private SSV_STORAGE_POSITION = uint256(keccak256(\\\"ssv.network.storage.protocol\\\")) - 1;\\n\\n    function load() internal pure returns (StorageProtocol storage sd) {\\n        uint256 position = SSV_STORAGE_POSITION;\\n        assembly {\\n            sd.slot := position\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/Types.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.18;\\n\\nuint256 constant DEDUCTED_DIGITS = 10_000_000;\\n\\nlibrary Types64 {\\n    function expand(uint64 value) internal pure returns (uint256) {\\n        return value * DEDUCTED_DIGITS;\\n    }\\n}\\n\\nlibrary Types256 {\\n    function shrink(uint256 value) internal pure returns (uint64) {\\n        require(value < (2 ** 64 * DEDUCTED_DIGITS), \\\"Max value exceeded\\\");\\n        return uint64(shrinkable(value) / DEDUCTED_DIGITS);\\n    }\\n\\n    function shrinkable(uint256 value) internal pure returns (uint256) {\\n        require(value % DEDUCTED_DIGITS == 0, \\\"Max precision exceeded\\\");\\n        return value;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/ValidatorLib.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.18;\\n\\nimport \\\"../interfaces/ISSVNetworkCore.sol\\\";\\nimport \\\"./SSVStorage.sol\\\";\\n\\nlibrary ValidatorLib {\\n    uint64 private constant MIN_OPERATORS_LENGTH = 4;\\n    uint64 private constant MAX_OPERATORS_LENGTH = 13;\\n    uint64 private constant MODULO_OPERATORS_LENGTH = 3;\\n    uint64 private constant PUBLIC_KEY_LENGTH = 48;\\n\\n    function validateOperatorsLength(uint64[] memory operatorIds) internal pure {\\n        uint256 operatorsLength = operatorIds.length;\\n\\n        if (\\n            operatorsLength < MIN_OPERATORS_LENGTH ||\\n            operatorsLength > MAX_OPERATORS_LENGTH ||\\n            operatorsLength % MODULO_OPERATORS_LENGTH != 1\\n        ) {\\n            revert ISSVNetworkCore.InvalidOperatorIdsLength();\\n        }\\n    }\\n\\n    function registerPublicKey(bytes memory publicKey, uint64[] memory operatorIds, StorageData storage s) internal {\\n        if (publicKey.length != PUBLIC_KEY_LENGTH) {\\n            revert ISSVNetworkCore.InvalidPublicKeyLength();\\n        }\\n\\n        bytes32 hashedPk = keccak256(abi.encodePacked(publicKey, msg.sender));\\n\\n        if (s.validatorPKs[hashedPk] != bytes32(0)) {\\n            revert ISSVNetworkCore.ValidatorAlreadyExistsWithData(publicKey);\\n        }\\n\\n        s.validatorPKs[hashedPk] = bytes32(uint256(keccak256(abi.encodePacked(operatorIds))) | uint256(0x01)); // set LSB to 1\\n    }\\n\\n    function hashOperatorIds(uint64[] memory operatorIds) internal pure returns (bytes32) {\\n        bytes32 mask = ~bytes32(uint256(1)); // All bits set to 1 except LSB\\n        return keccak256(abi.encodePacked(operatorIds)) & mask; // Clear LSB of provided operator ids\\n    }\\n\\n    function validateCorrectState(bytes32 validatorData, bytes32 hashedOperatorIds) internal pure returns (bool) {\\n            // All bits set to 1 except LSB\\n            // Clear LSB of stored validator data and compare\\n            return (validatorData & ~bytes32(uint256(1))) == hashedOperatorIds;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/modules/SSVClusters.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.18;\\n\\nimport \\\"../interfaces/ISSVClusters.sol\\\";\\nimport \\\"../libraries/ClusterLib.sol\\\";\\nimport \\\"../libraries/OperatorLib.sol\\\";\\nimport \\\"../libraries/ProtocolLib.sol\\\";\\nimport \\\"../libraries/CoreLib.sol\\\";\\nimport \\\"../libraries/ValidatorLib.sol\\\";\\nimport \\\"../libraries/SSVStorage.sol\\\";\\nimport \\\"../libraries/SSVStorageProtocol.sol\\\";\\n\\ncontract SSVClusters is ISSVClusters {\\n    using ClusterLib for Cluster;\\n    using OperatorLib for Operator;\\n    using ProtocolLib for StorageProtocol;\\n\\n    function registerValidator(\\n        bytes calldata publicKey,\\n        uint64[] memory operatorIds,\\n        bytes calldata sharesData,\\n        uint256 amount,\\n        Cluster memory cluster\\n    ) external override {\\n        StorageData storage s = SSVStorage.load();\\n        StorageProtocol storage sp = SSVStorageProtocol.load();\\n\\n        ValidatorLib.validateOperatorsLength(operatorIds);\\n\\n        ValidatorLib.registerPublicKey(publicKey, operatorIds, s);\\n\\n        bytes32 hashedCluster = cluster.validateClusterOnRegistration(operatorIds, s);\\n\\n        cluster.balance += amount;\\n\\n        cluster.updateClusterOnRegistration(operatorIds, hashedCluster, 1, s, sp);\\n\\n        if (amount != 0) {\\n            CoreLib.deposit(amount);\\n        }\\n\\n        emit ValidatorAdded(msg.sender, operatorIds, publicKey, sharesData, cluster);\\n    }\\n\\n    function bulkRegisterValidator(\\n        bytes[] memory publicKeys,\\n        uint64[] memory operatorIds,\\n        bytes[] calldata sharesData,\\n        uint256 amount,\\n        Cluster memory cluster\\n    ) external override {\\n        if (publicKeys.length != sharesData.length) revert PublicKeysSharesLengthMismatch();\\n\\n        StorageData storage s = SSVStorage.load();\\n        StorageProtocol storage sp = SSVStorageProtocol.load();\\n\\n        uint256 validatorsLength = publicKeys.length;\\n\\n        ValidatorLib.validateOperatorsLength(operatorIds);\\n\\n        for (uint i; i < validatorsLength; ++i) {\\n            ValidatorLib.registerPublicKey(publicKeys[i], operatorIds, s);\\n        }\\n        bytes32 hashedCluster = cluster.validateClusterOnRegistration(operatorIds, s);\\n\\n        cluster.balance += amount;\\n\\n        cluster.updateClusterOnRegistration(operatorIds, hashedCluster, uint32(validatorsLength), s, sp);\\n\\n        if (amount != 0) {\\n            CoreLib.deposit(amount);\\n        }\\n\\n        for (uint i; i < validatorsLength; ++i) {\\n            bytes memory pk = publicKeys[i];\\n            bytes memory sh = sharesData[i];\\n\\n            emit ValidatorAdded(msg.sender, operatorIds, pk, sh, cluster);\\n        }\\n    }\\n\\n    function removeValidator(\\n        bytes calldata publicKey,\\n        uint64[] memory operatorIds,\\n        Cluster memory cluster\\n    ) external override {\\n        StorageData storage s = SSVStorage.load();\\n\\n        bytes32 hashedCluster = cluster.validateHashedCluster(msg.sender, operatorIds, s);\\n        bytes32 hashedOperatorIds = ValidatorLib.hashOperatorIds(operatorIds);\\n\\n        bytes32 hashedValidator = keccak256(abi.encodePacked(publicKey, msg.sender));\\n        bytes32 validatorData = s.validatorPKs[hashedValidator];\\n\\n        if (validatorData == bytes32(0)) {\\n            revert ISSVNetworkCore.ValidatorDoesNotExist();\\n        }\\n\\n        if (!ValidatorLib.validateCorrectState(validatorData, hashedOperatorIds))\\n            revert ISSVNetworkCore.IncorrectValidatorStateWithData(publicKey);\\n\\n        delete s.validatorPKs[hashedValidator];\\n\\n        if (cluster.active) {\\n            StorageProtocol storage sp = SSVStorageProtocol.load();\\n            (uint64 clusterIndex, ) = OperatorLib.updateClusterOperators(operatorIds, false, false, 1, s, sp);\\n\\n            cluster.updateClusterData(clusterIndex, sp.currentNetworkFeeIndex());\\n\\n            sp.updateDAO(false, 1);\\n        }\\n\\n        --cluster.validatorCount;\\n\\n        s.clusters[hashedCluster] = cluster.hashClusterData();\\n\\n        emit ValidatorRemoved(msg.sender, operatorIds, publicKey, cluster);\\n    }\\n\\n    function bulkRemoveValidator(\\n        bytes[] calldata publicKeys,\\n        uint64[] memory operatorIds,\\n        Cluster memory cluster\\n    ) external override {\\n        uint256 validatorsLength = publicKeys.length;\\n\\n        if (validatorsLength == 0) {\\n            revert ISSVNetworkCore.ValidatorDoesNotExist();\\n        }\\n        StorageData storage s = SSVStorage.load();\\n\\n        bytes32 hashedCluster = cluster.validateHashedCluster(msg.sender, operatorIds, s);\\n        bytes32 hashedOperatorIds = ValidatorLib.hashOperatorIds(operatorIds);\\n\\n        bytes32 hashedValidator;\\n        bytes32 validatorData;\\n\\n        uint32 validatorsRemoved;\\n\\n        for (uint i; i < validatorsLength; ++i) {\\n            hashedValidator = keccak256(abi.encodePacked(publicKeys[i], msg.sender));\\n            validatorData = s.validatorPKs[hashedValidator];\\n\\n            if (!ValidatorLib.validateCorrectState(validatorData, hashedOperatorIds))\\n                revert ISSVNetworkCore.IncorrectValidatorStateWithData(publicKeys[i]);\\n\\n            delete s.validatorPKs[hashedValidator];\\n            validatorsRemoved++;\\n        }\\n\\n        if (cluster.active) {\\n            StorageProtocol storage sp = SSVStorageProtocol.load();\\n            (uint64 clusterIndex, ) = OperatorLib.updateClusterOperators(\\n                operatorIds,\\n                false,\\n                false,\\n                validatorsRemoved,\\n                s,\\n                sp\\n            );\\n\\n            cluster.updateClusterData(clusterIndex, sp.currentNetworkFeeIndex());\\n\\n            sp.updateDAO(false, validatorsRemoved);\\n        }\\n\\n        cluster.validatorCount -= validatorsRemoved;\\n\\n        s.clusters[hashedCluster] = cluster.hashClusterData();\\n\\n        for (uint i; i < validatorsLength; ++i) {\\n            emit ValidatorRemoved(msg.sender, operatorIds, publicKeys[i], cluster);\\n        }\\n    }\\n\\n    function liquidate(address clusterOwner, uint64[] calldata operatorIds, Cluster memory cluster) external override {\\n        StorageData storage s = SSVStorage.load();\\n\\n        bytes32 hashedCluster = cluster.validateHashedCluster(clusterOwner, operatorIds, s);\\n        cluster.validateClusterIsNotLiquidated();\\n\\n        StorageProtocol storage sp = SSVStorageProtocol.load();\\n\\n        (uint64 clusterIndex, uint64 burnRate) = OperatorLib.updateClusterOperators(\\n            operatorIds,\\n            false,\\n            false,\\n            cluster.validatorCount,\\n            s,\\n            sp\\n        );\\n\\n        cluster.updateBalance(clusterIndex, sp.currentNetworkFeeIndex());\\n\\n        uint256 balanceLiquidatable;\\n\\n        if (\\n            clusterOwner != msg.sender &&\\n            !cluster.isLiquidatable(\\n                burnRate,\\n                sp.networkFee,\\n                sp.minimumBlocksBeforeLiquidation,\\n                sp.minimumLiquidationCollateral\\n            )\\n        ) {\\n            revert ClusterNotLiquidatable();\\n        }\\n\\n        sp.updateDAO(false, cluster.validatorCount);\\n\\n        if (cluster.balance != 0) {\\n            balanceLiquidatable = cluster.balance;\\n            cluster.balance = 0;\\n        }\\n        cluster.index = 0;\\n        cluster.networkFeeIndex = 0;\\n        cluster.active = false;\\n\\n        s.clusters[hashedCluster] = cluster.hashClusterData();\\n\\n        if (balanceLiquidatable != 0) {\\n            CoreLib.transferBalance(msg.sender, balanceLiquidatable);\\n        }\\n\\n        emit ClusterLiquidated(clusterOwner, operatorIds, cluster);\\n    }\\n\\n    function reactivate(uint64[] calldata operatorIds, uint256 amount, Cluster memory cluster) external override {\\n        StorageData storage s = SSVStorage.load();\\n\\n        bytes32 hashedCluster = cluster.validateHashedCluster(msg.sender, operatorIds, s);\\n        if (cluster.active) revert ClusterAlreadyEnabled();\\n\\n        StorageProtocol storage sp = SSVStorageProtocol.load();\\n\\n        (uint64 clusterIndex, uint64 burnRate) = OperatorLib.updateClusterOperators(\\n            operatorIds,\\n            false,\\n            true,\\n            cluster.validatorCount,\\n            s,\\n            sp\\n        );\\n\\n        cluster.balance += amount;\\n        cluster.active = true;\\n        cluster.index = clusterIndex;\\n        cluster.networkFeeIndex = sp.currentNetworkFeeIndex();\\n\\n        sp.updateDAO(true, cluster.validatorCount);\\n\\n        if (\\n            cluster.isLiquidatable(\\n                burnRate,\\n                sp.networkFee,\\n                sp.minimumBlocksBeforeLiquidation,\\n                sp.minimumLiquidationCollateral\\n            )\\n        ) {\\n            revert InsufficientBalance();\\n        }\\n\\n        s.clusters[hashedCluster] = cluster.hashClusterData();\\n\\n        if (amount > 0) {\\n            CoreLib.deposit(amount);\\n        }\\n\\n        emit ClusterReactivated(msg.sender, operatorIds, cluster);\\n    }\\n\\n    function deposit(\\n        address clusterOwner,\\n        uint64[] calldata operatorIds,\\n        uint256 amount,\\n        Cluster memory cluster\\n    ) external override {\\n        StorageData storage s = SSVStorage.load();\\n\\n        bytes32 hashedCluster = cluster.validateHashedCluster(clusterOwner, operatorIds, s);\\n\\n        cluster.balance += amount;\\n\\n        s.clusters[hashedCluster] = cluster.hashClusterData();\\n\\n        CoreLib.deposit(amount);\\n\\n        emit ClusterDeposited(clusterOwner, operatorIds, amount, cluster);\\n    }\\n\\n    function withdraw(uint64[] calldata operatorIds, uint256 amount, Cluster memory cluster) external override {\\n        StorageData storage s = SSVStorage.load();\\n\\n        bytes32 hashedCluster = cluster.validateHashedCluster(msg.sender, operatorIds, s);\\n        cluster.validateClusterIsNotLiquidated();\\n\\n        StorageProtocol storage sp = SSVStorageProtocol.load();\\n\\n        uint64 burnRate;\\n        if (cluster.active) {\\n            uint64 clusterIndex;\\n            {\\n                uint256 operatorsLength = operatorIds.length;\\n                for (uint256 i; i < operatorsLength; ) {\\n                    Operator storage operator = SSVStorage.load().operators[operatorIds[i]];\\n                    clusterIndex +=\\n                        operator.snapshot.index +\\n                        (uint64(block.number) - operator.snapshot.block) *\\n                        operator.fee;\\n                    burnRate += operator.fee;\\n                    unchecked {\\n                        ++i;\\n                    }\\n                }\\n            }\\n\\n            cluster.updateClusterData(clusterIndex, sp.currentNetworkFeeIndex());\\n        }\\n        if (cluster.balance < amount) revert InsufficientBalance();\\n\\n        cluster.balance -= amount;\\n\\n        if (\\n            cluster.active &&\\n            cluster.validatorCount != 0 &&\\n            cluster.isLiquidatable(\\n                burnRate,\\n                sp.networkFee,\\n                sp.minimumBlocksBeforeLiquidation,\\n                sp.minimumLiquidationCollateral\\n            )\\n        ) {\\n            revert InsufficientBalance();\\n        }\\n\\n        s.clusters[hashedCluster] = cluster.hashClusterData();\\n\\n        CoreLib.transferBalance(msg.sender, amount);\\n\\n        emit ClusterWithdrawn(msg.sender, operatorIds, amount, cluster);\\n    }\\n\\n    function exitValidator(bytes calldata publicKey, uint64[] calldata operatorIds) external override {\\n        if (\\n            !ValidatorLib.validateCorrectState(\\n                SSVStorage.load().validatorPKs[keccak256(abi.encodePacked(publicKey, msg.sender))],\\n                ValidatorLib.hashOperatorIds(operatorIds)\\n            )\\n        ) revert ISSVNetworkCore.IncorrectValidatorStateWithData(publicKey);\\n\\n        emit ValidatorExited(msg.sender, operatorIds, publicKey);\\n    }\\n\\n    function bulkExitValidator(bytes[] calldata publicKeys, uint64[] calldata operatorIds) external override {\\n        if (publicKeys.length == 0) {\\n            revert ISSVNetworkCore.ValidatorDoesNotExist();\\n        }\\n        bytes32 hashedOperatorIds = ValidatorLib.hashOperatorIds(operatorIds);\\n\\n        for (uint i; i < publicKeys.length; ++i) {\\n            if (\\n                !ValidatorLib.validateCorrectState(\\n                    SSVStorage.load().validatorPKs[keccak256(abi.encodePacked(publicKeys[i], msg.sender))],\\n                    hashedOperatorIds\\n                )\\n            ) revert ISSVNetworkCore.IncorrectValidatorStateWithData(publicKeys[i]);\\n\\n            emit ValidatorExited(msg.sender, operatorIds, publicKeys[i]);\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 10000\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"name\":\"ApprovalNotWithinTimeframe\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CallerNotOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CallerNotWhitelisted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ClusterAlreadyEnabled\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ClusterDoesNotExists\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ClusterIsLiquidated\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ClusterNotLiquidatable\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ExceedValidatorLimit\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FeeExceedsIncreaseLimit\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FeeIncreaseNotAllowed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FeeTooHigh\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FeeTooLow\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"IncorrectClusterState\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"IncorrectValidatorState\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"publicKey\",\"type\":\"bytes\"}],\"name\":\"IncorrectValidatorStateWithData\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidOperatorIdsLength\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidPublicKeyLength\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MaxValueExceeded\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NewBlockPeriodIsBelowMinimum\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoFeeDeclared\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotAuthorized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OperatorAlreadyExists\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OperatorDoesNotExist\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OperatorsListNotUnique\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PublicKeysSharesLengthMismatch\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SameFeeChangeNotAllowed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TargetModuleDoesNotExist\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TokenTransferFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UnsortedOperatorsList\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ValidatorAlreadyExists\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"publicKey\",\"type\":\"bytes\"}],\"name\":\"ValidatorAlreadyExistsWithData\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ValidatorDoesNotExist\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint64[]\",\"name\":\"operatorIds\",\"type\":\"uint64[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint32\",\"name\":\"validatorCount\",\"type\":\"uint32\"},{\"internalType\":\"uint64\",\"name\":\"networkFeeIndex\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"index\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct ISSVNetworkCore.Cluster\",\"name\":\"cluster\",\"type\":\"tuple\"}],\"name\":\"ClusterDeposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint64[]\",\"name\":\"operatorIds\",\"type\":\"uint64[]\"},{\"components\":[{\"internalType\":\"uint32\",\"name\":\"validatorCount\",\"type\":\"uint32\"},{\"internalType\":\"uint64\",\"name\":\"networkFeeIndex\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"index\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct ISSVNetworkCore.Cluster\",\"name\":\"cluster\",\"type\":\"tuple\"}],\"name\":\"ClusterLiquidated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint64[]\",\"name\":\"operatorIds\",\"type\":\"uint64[]\"},{\"components\":[{\"internalType\":\"uint32\",\"name\":\"validatorCount\",\"type\":\"uint32\"},{\"internalType\":\"uint64\",\"name\":\"networkFeeIndex\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"index\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct ISSVNetworkCore.Cluster\",\"name\":\"cluster\",\"type\":\"tuple\"}],\"name\":\"ClusterReactivated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint64[]\",\"name\":\"operatorIds\",\"type\":\"uint64[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint32\",\"name\":\"validatorCount\",\"type\":\"uint32\"},{\"internalType\":\"uint64\",\"name\":\"networkFeeIndex\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"index\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct ISSVNetworkCore.Cluster\",\"name\":\"cluster\",\"type\":\"tuple\"}],\"name\":\"ClusterWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint64[]\",\"name\":\"operatorIds\",\"type\":\"uint64[]\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"publicKey\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"shares\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"uint32\",\"name\":\"validatorCount\",\"type\":\"uint32\"},{\"internalType\":\"uint64\",\"name\":\"networkFeeIndex\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"index\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct ISSVNetworkCore.Cluster\",\"name\":\"cluster\",\"type\":\"tuple\"}],\"name\":\"ValidatorAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint64[]\",\"name\":\"operatorIds\",\"type\":\"uint64[]\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"publicKey\",\"type\":\"bytes\"}],\"name\":\"ValidatorExited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint64[]\",\"name\":\"operatorIds\",\"type\":\"uint64[]\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"publicKey\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"uint32\",\"name\":\"validatorCount\",\"type\":\"uint32\"},{\"internalType\":\"uint64\",\"name\":\"networkFeeIndex\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"index\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct ISSVNetworkCore.Cluster\",\"name\":\"cluster\",\"type\":\"tuple\"}],\"name\":\"ValidatorRemoved\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"publicKeys\",\"type\":\"bytes[]\"},{\"internalType\":\"uint64[]\",\"name\":\"operatorIds\",\"type\":\"uint64[]\"}],\"name\":\"bulkExitValidator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"publicKeys\",\"type\":\"bytes[]\"},{\"internalType\":\"uint64[]\",\"name\":\"operatorIds\",\"type\":\"uint64[]\"},{\"internalType\":\"bytes[]\",\"name\":\"sharesData\",\"type\":\"bytes[]\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint32\",\"name\":\"validatorCount\",\"type\":\"uint32\"},{\"internalType\":\"uint64\",\"name\":\"networkFeeIndex\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"index\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"internalType\":\"struct ISSVNetworkCore.Cluster\",\"name\":\"cluster\",\"type\":\"tuple\"}],\"name\":\"bulkRegisterValidator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"publicKeys\",\"type\":\"bytes[]\"},{\"internalType\":\"uint64[]\",\"name\":\"operatorIds\",\"type\":\"uint64[]\"},{\"components\":[{\"internalType\":\"uint32\",\"name\":\"validatorCount\",\"type\":\"uint32\"},{\"internalType\":\"uint64\",\"name\":\"networkFeeIndex\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"index\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"internalType\":\"struct ISSVNetworkCore.Cluster\",\"name\":\"cluster\",\"type\":\"tuple\"}],\"name\":\"bulkRemoveValidator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"clusterOwner\",\"type\":\"address\"},{\"internalType\":\"uint64[]\",\"name\":\"operatorIds\",\"type\":\"uint64[]\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint32\",\"name\":\"validatorCount\",\"type\":\"uint32\"},{\"internalType\":\"uint64\",\"name\":\"networkFeeIndex\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"index\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"internalType\":\"struct ISSVNetworkCore.Cluster\",\"name\":\"cluster\",\"type\":\"tuple\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"publicKey\",\"type\":\"bytes\"},{\"internalType\":\"uint64[]\",\"name\":\"operatorIds\",\"type\":\"uint64[]\"}],\"name\":\"exitValidator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"clusterOwner\",\"type\":\"address\"},{\"internalType\":\"uint64[]\",\"name\":\"operatorIds\",\"type\":\"uint64[]\"},{\"components\":[{\"internalType\":\"uint32\",\"name\":\"validatorCount\",\"type\":\"uint32\"},{\"internalType\":\"uint64\",\"name\":\"networkFeeIndex\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"index\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"internalType\":\"struct ISSVNetworkCore.Cluster\",\"name\":\"cluster\",\"type\":\"tuple\"}],\"name\":\"liquidate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64[]\",\"name\":\"operatorIds\",\"type\":\"uint64[]\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint32\",\"name\":\"validatorCount\",\"type\":\"uint32\"},{\"internalType\":\"uint64\",\"name\":\"networkFeeIndex\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"index\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"internalType\":\"struct ISSVNetworkCore.Cluster\",\"name\":\"cluster\",\"type\":\"tuple\"}],\"name\":\"reactivate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"publicKey\",\"type\":\"bytes\"},{\"internalType\":\"uint64[]\",\"name\":\"operatorIds\",\"type\":\"uint64[]\"},{\"internalType\":\"bytes\",\"name\":\"sharesData\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint32\",\"name\":\"validatorCount\",\"type\":\"uint32\"},{\"internalType\":\"uint64\",\"name\":\"networkFeeIndex\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"index\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"internalType\":\"struct ISSVNetworkCore.Cluster\",\"name\":\"cluster\",\"type\":\"tuple\"}],\"name\":\"registerValidator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"publicKey\",\"type\":\"bytes\"},{\"internalType\":\"uint64[]\",\"name\":\"operatorIds\",\"type\":\"uint64[]\"},{\"components\":[{\"internalType\":\"uint32\",\"name\":\"validatorCount\",\"type\":\"uint32\"},{\"internalType\":\"uint64\",\"name\":\"networkFeeIndex\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"index\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"internalType\":\"struct ISSVNetworkCore.Cluster\",\"name\":\"cluster\",\"type\":\"tuple\"}],\"name\":\"removeValidator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64[]\",\"name\":\"operatorIds\",\"type\":\"uint64[]\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint32\",\"name\":\"validatorCount\",\"type\":\"uint32\"},{\"internalType\":\"uint64\",\"name\":\"networkFeeIndex\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"index\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"internalType\":\"struct ISSVNetworkCore.Cluster\",\"name\":\"cluster\",\"type\":\"tuple\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "SSVClusters", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "1", "Runs": "10000", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}