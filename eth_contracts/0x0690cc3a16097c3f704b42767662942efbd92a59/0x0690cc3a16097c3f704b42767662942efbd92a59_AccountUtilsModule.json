{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"lib/openzeppelin-contracts/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Math} from \\\"./math/Math.sol\\\";\\nimport {SignedMath} from \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant HEX_DIGITS = \\\"0123456789abcdef\\\";\\n    uint8 private constant ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev The `value` string doesn't fit in the specified `length`.\\n     */\\n    error StringsInsufficientHexLength(uint256 value, uint256 length);\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), HEX_DIGITS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toStringSigned(int256 value) internal pure returns (string memory) {\\n        return string.concat(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value)));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        uint256 localValue = value;\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = HEX_DIGITS[localValue & 0xf];\\n            localValue >>= 4;\\n        }\\n        if (localValue != 0) {\\n            revert StringsInsufficientHexLength(value, length);\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal\\n     * representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return bytes(a).length == bytes(b).length && keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS\\n    }\\n\\n    /**\\n     * @dev The signature derives the `address(0)`.\\n     */\\n    error ECDSAInvalidSignature();\\n\\n    /**\\n     * @dev The signature has an invalid length.\\n     */\\n    error ECDSAInvalidSignatureLength(uint256 length);\\n\\n    /**\\n     * @dev The signature has an S value that is in the upper half order.\\n     */\\n    error ECDSAInvalidSignatureS(bytes32 s);\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with `signature` or an error. This will not\\n     * return address(0) without also returning an error description. Errors are documented using an enum (error type)\\n     * and a bytes32 providing additional information about the error.\\n     *\\n     * If no error is returned, then the address can be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM precompile allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {MessageHashUtils-toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError, bytes32) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength, bytes32(signature.length));\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM precompile allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {MessageHashUtils-toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, signature);\\n        _throwError(error, errorArg);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     */\\n    function tryRecover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address, RecoverError, bytes32) {\\n        unchecked {\\n            bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n            // We do not check for an overflow here since the shift operation results in 0 or 1.\\n            uint8 v = uint8((uint256(vs) >> 255) + 27);\\n            return tryRecover(hash, v, r, s);\\n        }\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     */\\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, r, vs);\\n        _throwError(error, errorArg);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError, bytes32) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \u00f7 2 + 1, and for v in (302): v \u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS, s);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature, bytes32(0));\\n        }\\n\\n        return (signer, RecoverError.NoError, bytes32(0));\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, v, r, s);\\n        _throwError(error, errorArg);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Optionally reverts with the corresponding custom error according to the `error` argument provided.\\n     */\\n    function _throwError(RecoverError error, bytes32 errorArg) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert ECDSAInvalidSignature();\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert ECDSAInvalidSignatureLength(uint256(errorArg));\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert ECDSAInvalidSignatureS(errorArg);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/cryptography/MessageHashUtils.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/cryptography/MessageHashUtils.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Strings} from \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Signature message hash utilities for producing digests to be consumed by {ECDSA} recovery or signing.\\n *\\n * The library provides methods for generating a hash of a message that conforms to the\\n * https://eips.ethereum.org/EIPS/eip-191[EIP 191] and https://eips.ethereum.org/EIPS/eip-712[EIP 712]\\n * specifications.\\n */\\nlibrary MessageHashUtils {\\n    /**\\n     * @dev Returns the keccak256 digest of an EIP-191 signed data with version\\n     * `0x45` (`personal_sign` messages).\\n     *\\n     * The digest is calculated by prefixing a bytes32 `messageHash` with\\n     * `\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\"` and hashing the result. It corresponds with the\\n     * hash signed when using the https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`] JSON-RPC method.\\n     *\\n     * NOTE: The `messageHash` parameter is intended to be the result of hashing a raw message with\\n     * keccak256, although any bytes32 value can be safely used because the final digest will\\n     * be re-hashed.\\n     *\\n     * See {ECDSA-recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 messageHash) internal pure returns (bytes32 digest) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\") // 32 is the bytes-length of messageHash\\n            mstore(0x1c, messageHash) // 0x1c (28) is the length of the prefix\\n            digest := keccak256(0x00, 0x3c) // 0x3c is the length of the prefix (0x1c) + messageHash (0x20)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the keccak256 digest of an EIP-191 signed data with version\\n     * `0x45` (`personal_sign` messages).\\n     *\\n     * The digest is calculated by prefixing an arbitrary `message` with\\n     * `\\\"\\\\x19Ethereum Signed Message:\\\\n\\\" + len(message)` and hashing the result. It corresponds with the\\n     * hash signed when using the https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`] JSON-RPC method.\\n     *\\n     * See {ECDSA-recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory message) internal pure returns (bytes32) {\\n        return\\n            keccak256(bytes.concat(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", bytes(Strings.toString(message.length)), message));\\n    }\\n\\n    /**\\n     * @dev Returns the keccak256 digest of an EIP-191 signed data with version\\n     * `0x00` (data with intended validator).\\n     *\\n     * The digest is calculated by prefixing an arbitrary `data` with `\\\"\\\\x19\\\\x00\\\"` and the intended\\n     * `validator` address. Then hashing the result.\\n     *\\n     * See {ECDSA-recover}.\\n     */\\n    function toDataWithIntendedValidatorHash(address validator, bytes memory data) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(hex\\\"19_00\\\", validator, data));\\n    }\\n\\n    /**\\n     * @dev Returns the keccak256 digest of an EIP-712 typed data (EIP-191 version `0x01`).\\n     *\\n     * The digest is calculated from a `domainSeparator` and a `structHash`, by prefixing them with\\n     * `\\\\x19\\\\x01` and hashing the result. It corresponds to the hash signed by the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`] JSON-RPC method as part of EIP-712.\\n     *\\n     * See {ECDSA-recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 digest) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, hex\\\"19_01\\\")\\n            mstore(add(ptr, 0x02), domainSeparator)\\n            mstore(add(ptr, 0x22), structHash)\\n            digest := keccak256(ptr, 0x42)\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/math/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Muldiv operation overflow.\\n     */\\n    error MathOverflowedMulDiv();\\n\\n    enum Rounding {\\n        Floor, // Toward negative infinity\\n        Ceil, // Toward positive infinity\\n        Trunc, // Toward zero\\n        Expand // Away from zero\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\n     * of rounding towards zero.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) {\\n            // Guarantee the same behavior as in a regular Solidity division.\\n            return a / b;\\n        }\\n\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\n     * denominator == 0.\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\n     * Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            if (denominator <= prod1) {\\n                revert MathOverflowedMulDiv();\\n            }\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\\n\\n            uint256 twos = denominator & (0 - denominator);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\\n            // works in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\n     * towards zero.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\n     */\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\n        return uint8(rounding) % 2 == 1;\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/structs/EnumerableSet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position is the index of the value in the `values` array plus 1.\\n        // Position 0 is used to mean a value is not in the set.\\n        mapping(bytes32 value => uint256) _positions;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._positions[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We cache the value's position to prevent multiple reads from the same storage slot\\n        uint256 position = set._positions[value];\\n\\n        if (position != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 valueIndex = position - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (valueIndex != lastIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the lastValue to the index where the value to delete is\\n                set._values[valueIndex] = lastValue;\\n                // Update the tracked position of the lastValue (that was just moved)\\n                set._positions[lastValue] = position;\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the tracked position for the deleted slot\\n            delete set._positions[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._positions[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\"\r\n    },\r\n    \"src/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n/**\\n * @title Initializable module\\n */\\nlibrary Initializable {\\n    // ------- Storage -------\\n    struct InitializableStorageData {\\n        bool initialized;\\n    }\\n\\n    error AlreadyInitialized();\\n    error NotInitialized();\\n\\n    /**\\n     * @dev Returns the account stored at the specified account id.\\n     */\\n    function getStorage() internal pure returns (InitializableStorageData storage data) {\\n        bytes32 slot = keccak256(abi.encode(\\\"io.infinex.InitializableStorage\\\"));\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            data.slot := slot\\n        }\\n    }\\n\\n    // ------- Implementation -------\\n    function initialize() internal {\\n        InitializableStorageData storage data = getStorage();\\n\\n        // Note: We don't use onlyUninitialized here to save gas by preventing a double call to load().\\n        if (data.initialized) revert AlreadyInitialized();\\n\\n        data.initialized = true;\\n    }\\n\\n    modifier onlyInitialized() {\\n        if (!getStorage().initialized) revert NotInitialized();\\n        _;\\n    }\\n\\n    modifier onlyUninitialized() {\\n        if (getStorage().initialized) revert AlreadyInitialized();\\n        _;\\n    }\\n}\\n\"\r\n    },\r\n    \"src/accounts/modules/AccountUtilsModule.sol\": {\r\n      \"content\": \"//       c=<\\n//        |\\n//        |   ////\\\\    1@2\\n//    @@  |  /___\\\\**   @@@2\\t\\t\\t@@@@@@@@@@@@@@@@@@@@@@\\n//   @@@  |  |~L~ |*   @@@@@@\\t\\t@@@  @@@@@        @@@@    @@@ @@@@    @@@  @@@@@@@@ @@@@ @@@@    @@@ @@@@@@@@@ @@@@   @@@@\\n//  @@@@@ |   \\\\=_/8    @@@@1@@\\t\\t@@@  @@@@@  @@@@  @@@@    @@@ @@@@@   @@@ @@@@@@@@@ @@@@ @@@@@  @@@@ @@@@@@@@@  @@@@ @@@@\\n// @@@@@@| _ /| |\\\\__ @@@@@@@@2\\t\\t@@@  @@@@@  @@@@  @@@@    @@@ @@@@@@@ @@@ @@@@      @@@@ @@@@@@ @@@@ @@@         @@@@@@@\\n// 1@@@@@@|\\\\  \\\\___/)   @@1@@@@@2\\t~~~  ~~~~~  @@@@  ~~@@    ~~~ ~~~~~~~~~~~ ~~~~      ~~~~ ~~~~~~~~~~~ ~@@          @@@@@\\n// 2@@@@@ |  \\\\ \\\\ / |     @@@@@@2\\t@@@  @@@@@  @@@@  @@@@    @@@ @@@@@@@@@@@ @@@@@@@@@ @@@@ @@@@@@@@@@@ @@@@@@@@@    @@@@@\\n// 2@@@@  |_  >   <|__    @@1@12\\t@@@  @@@@@  @@@@  @@@@    @@@ @@@@ @@@@@@ @@@@      @@@@ @@@@ @@@@@@ @@@         @@@@@@@\\n// @@@@  / _|  / \\\\/    \\\\   @@1@\\t\\t@@@   @@@   @@@@  @@@@    @@@ @@@@  @@@@@ @@@@      @@@@ @@@@  @@@@@ @@@@@@@@@  @@@@ @@@@\\n//  @@ /  |^\\\\/   |      |   @@1\\t\\t@@@         @@@@  @@@@    @@@ @@@@    @@@ @@@@      @@@@ @@@    @@@@ @@@@@@@@@ @@@@   @@@@\\n//   /     / ---- \\\\ \\\\\\\\\\\\=    @@\\t\\t@@@@@@@@@@@@@@@@@@@@@@\\n//   \\\\___/ --------  ~~    @@@\\n//     @@  | |   | |  --   @@\\n// \u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\\n\\n// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport { IAccountUtilsModule } from \\\"src/interfaces/accounts/IAccountUtilsModule.sol\\\";\\nimport { IInfinexProtocolConfigBeacon } from \\\"src/interfaces/beacons/IInfinexProtocolConfigBeacon.sol\\\";\\n\\nimport { SecurityModifiers } from \\\"src/accounts/utils/SecurityModifiers.sol\\\";\\n\\nimport { ERC2771Context } from \\\"src/forwarder/ERC2771Context.sol\\\";\\nimport { Account } from \\\"src/accounts/storage/Account.sol\\\";\\nimport { Bridge } from \\\"src/accounts/storage/Bridge.sol\\\";\\nimport { SecurityKeys } from \\\"src/accounts/storage/SecurityKeys.sol\\\";\\nimport { AccountConstants } from \\\"src/accounts/utils/AccountConstants.sol\\\";\\n\\nimport { Error } from \\\"src/libraries/Error.sol\\\";\\n\\ncontract AccountUtilsModule is IAccountUtilsModule, SecurityModifiers {\\n    /*///////////////////////////////////////////////////////////////\\n                                VIEW FUNCTIONS\\n    ///////////////////////////////////////////////////////////////*/\\n\\n    /**\\n     * @notice Get the Infinex Protocol Config\\n     * @return The Infinex Protocol Config Beacon\\n     */\\n    function infinexProtocolConfigBeacon() external view returns (address) {\\n        return address(Account._infinexProtocolConfig());\\n    }\\n\\n    /**\\n     * @notice Check if the provided operation key is valid\\n     * @param _operationKey The operation key to check\\n     * @return A boolean indicating if the key is valid\\n     */\\n    function isValidOperationKey(address _operationKey) external view returns (bool) {\\n        return SecurityKeys._isValidOperationKey(_operationKey);\\n    }\\n\\n    /**\\n     * @notice Check if the provided sudo key is valid\\n     * @param _sudoKey The sudo key to check\\n     * @return A boolean indicating if the sudo key is valid\\n     */\\n    function isValidSudoKey(address _sudoKey) external view returns (bool) {\\n        return SecurityKeys._isValidSudoKey(_sudoKey);\\n    }\\n\\n    /**\\n     * @notice Check if the provided recovery key is valid\\n     * @param _recoveryKey The recovery key to check\\n     * @return A boolean indicating if the recovery key is valid\\n     */\\n    function isValidRecoveryKey(address _recoveryKey) external view returns (bool) {\\n        return SecurityKeys._isValidRecoveryKey(_recoveryKey);\\n    }\\n\\n    /**\\n     * @notice Checks if the given address is an authorized operations party.\\n     * @param _key The address to check.\\n     * @return A boolean indicating whether the address is an authorized operations party.\\n     * @dev Update this function whenever the logic for requiresAuthorizedOperationsParty\\n     * from SecurityModifiers changes\\n     */\\n    function isAuthorizedOperationsParty(address _key) external view returns (bool) {\\n        return SecurityKeys._isValidSudoKey(_key) || SecurityKeys._isValidOperationKey(_key);\\n    }\\n\\n    /**\\n     * @notice Checks if the given address is an authorized recovery party.\\n     * @param _key The address to check.\\n     * @return A boolean indicating whether the address is an authorized recovery party.\\n     * @dev Update this function whenever the logic for requiresAuthorizedRecoveryParty\\n     * from SecurityModifiers changes\\n     */\\n    function isAuthorizedRecoveryParty(address _key) external view returns (bool) {\\n        return SecurityKeys._isValidSudoKey(_key) || SecurityKeys._isValidRecoveryKey(_key)\\n            || IInfinexProtocolConfigBeacon(Account._infinexProtocolConfig()).isTrustedRecoveryKeeper(_key);\\n    }\\n\\n    /**\\n     * @notice Retrieves the Circle Bridge parameters.\\n     * @return The address of the circleBridge.\\n     * @return The address of the circleMinter.\\n     * @return The default circle bridge destination domain\\n     */\\n    function getCircleBridgeParams() external view returns (address, address, uint32) {\\n        Bridge.Data storage bridgeData = Bridge.getStorage();\\n        return (bridgeData.circleBridge, bridgeData.circleMinter, bridgeData.defaultDestinationCCTPDomain);\\n    }\\n\\n    /**\\n     * @notice Retrieves the Wormhole Circle Bridge parameters.\\n     * @return The address of the wormholeCircleBridge.\\n     */\\n    function getWormholeCircleBridge() external view returns (address) {\\n        Bridge.Data storage bridgeData = Bridge.getStorage();\\n        return bridgeData.wormholeCircleBridge;\\n    }\\n\\n    /**\\n     * @notice Retrieves the Wormhole Circle Bridge parameters.\\n     * @return The address of the wormholeCircleBridge.\\n     * @return The address of the wormholeCircleBridge and the defaultDestinationWormholeChainId\\n     */\\n    function getWormholeCircleBridgeParams() external view returns (address, uint16) {\\n        Bridge.Data storage bridgeData = Bridge.getStorage();\\n        return (bridgeData.wormholeCircleBridge, bridgeData.defaultDestinationWormholeChainId);\\n    }\\n\\n    /**\\n     * @notice Retrieves the USDC address.\\n     * @return The address of USDC.\\n     */\\n    function getUSDCAddress() external view returns (address) {\\n        Bridge.Data storage bridgeData = Bridge.getStorage();\\n        return bridgeData.USDC;\\n    }\\n\\n    /**\\n     * @notice Retrieves the maximum withdrawal fee.\\n     * @return The maximum withdrawal fee.\\n     */\\n    function getMaxWithdrawalFee() external pure returns (uint256) {\\n        return AccountConstants.MAX_WITHDRAWAL_FEE;\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                                MUTATIVE FUNCTIONS\\n    ///////////////////////////////////////////////////////////////*/\\n\\n    /**\\n     * @notice Upgrade to a new beacon implementation and updates any new parameters along with it\\n     * @param _newInfinexProtocolConfigBeacon The address of the new beacon\\n     * @dev requires the sender to be the sudo key\\n     * @dev Requires passing the new beacon address which matches the latest to ensure that the upgrade both\\n     * is as the user intended, and is to the latest beacon implementation. Prevents the user from opting in to a\\n     * specific version and upgrading to a later version that may have been deployed between the opt-in and the upgrade\\n     */\\n    function upgradeProtocolBeaconParameters(address _newInfinexProtocolConfigBeacon) external requiresSudoKeySender {\\n        if (_newInfinexProtocolConfigBeacon == address(0)) revert Error.NullAddress();\\n        Account.Data storage accountData = Account.getStorage();\\n        IInfinexProtocolConfigBeacon protocolConfigBeacon = Account._infinexProtocolConfig();\\n        address latestInfinexProtocolConfigBeacon = protocolConfigBeacon.getLatestInfinexProtocolConfigBeacon();\\n\\n        if (latestInfinexProtocolConfigBeacon == address(protocolConfigBeacon)) {\\n            revert Error.SameAddress();\\n        }\\n        if (latestInfinexProtocolConfigBeacon != _newInfinexProtocolConfigBeacon) {\\n            revert Error.ImplementationMismatch(_newInfinexProtocolConfigBeacon, latestInfinexProtocolConfigBeacon);\\n        }\\n\\n        address beaconForwarder = protocolConfigBeacon.TRUSTED_FORWARDER();\\n        if (ERC2771Context.isTrustedForwarder(beaconForwarder)) {\\n            ERC2771Context._removeTrustedForwarder(beaconForwarder);\\n            ERC2771Context._addTrustedForwarder(IInfinexProtocolConfigBeacon(latestInfinexProtocolConfigBeacon).TRUSTED_FORWARDER());\\n        }\\n\\n        emit AccountInfinexProtocolBeaconImplementationUpgraded(latestInfinexProtocolConfigBeacon);\\n        accountData.infinexProtocolConfigBeacon = latestInfinexProtocolConfigBeacon;\\n    }\\n\\n    /**\\n     * @notice Updates the parameters for the Circle Bridge to the latest from the Infinex Protocol Config Beacon.\\n     * Update is opt in to prevent malicious automatic updates.\\n     * @dev requires the sender to be the sudo key\\n     */\\n    function updateCircleBridgeParams() external requiresSudoKeySender {\\n        Bridge.Data storage bridgeData = Bridge.getStorage();\\n\\n        IInfinexProtocolConfigBeacon protocolConfigBeacon = Account._infinexProtocolConfig();\\n        (address circleBridge, address circleMinter, uint32 defaultDestinationCCTPDomain) =\\n            protocolConfigBeacon.getCircleBridgeParams();\\n\\n        emit AccountCircleBridgeParamsUpgraded(circleBridge, circleMinter, defaultDestinationCCTPDomain);\\n\\n        bridgeData.circleBridge = circleBridge;\\n        bridgeData.circleMinter = circleMinter;\\n        bridgeData.defaultDestinationCCTPDomain = defaultDestinationCCTPDomain;\\n    }\\n\\n    /**\\n     * @notice Updates the parameters for the Wormhole Circle Bridge to the latest from the Infinex Protocol Config Beacon.\\n     * Update is opt in to prevent malicious automatic updates.\\n     * @dev requires the sender to be the sudo key\\n     */\\n    function updateWormholeCircleBridge() external requiresSudoKeySender {\\n        Bridge.Data storage bridgeData = Bridge.getStorage();\\n\\n        IInfinexProtocolConfigBeacon protocolConfigBeacon = Account._infinexProtocolConfig();\\n        (address wormholeCircleBridge, uint16 defaultDestinationWormholeChainId) = protocolConfigBeacon.getWormholeCircleBridgeParams();\\n\\n        emit AccountWormholeCircleBridgeParamsUpgraded(wormholeCircleBridge, defaultDestinationWormholeChainId);\\n\\n        bridgeData.wormholeCircleBridge = wormholeCircleBridge;\\n        bridgeData.defaultDestinationWormholeChainId = defaultDestinationWormholeChainId;\\n    }\\n\\n    /**\\n     * @notice Updates the USDC address from the Infinex Protocol Config Beacon.\\n     * Update is opt in to prevent malicious automatic updates.\\n     * @dev requires the sender to be the sudo key\\n     */\\n    function updateUSDCAddress() external requiresSudoKeySender {\\n        Bridge.Data storage bridgeData = Bridge.getStorage();\\n\\n        IInfinexProtocolConfigBeacon protocolConfigBeacon = Account._infinexProtocolConfig();\\n        address USDC = protocolConfigBeacon.USDC();\\n\\n        emit AccountUSDCAddressUpgraded(USDC);\\n\\n        bridgeData.USDC = USDC;\\n    }\\n}\\n\"\r\n    },\r\n    \"src/accounts/storage/Account.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport { IInfinexProtocolConfigBeacon } from \\\"src/interfaces/beacons/IInfinexProtocolConfigBeacon.sol\\\";\\n\\n/**\\n * @title Account storage struct\\n */\\nlibrary Account {\\n    struct InitializableStorage {\\n        uint64 _initialized;\\n        bool _initializing;\\n    }\\n\\n    struct Data {\\n        address infinexProtocolConfigBeacon; // Address of the Infinex Protocol Config Beacon\\n        uint256 referralTokenId; // ID of the referral token\\n        bool upgrading; // Flag to indicate if the account is upgrading\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                    \\t\\t\\tEVENTS / ERRORS\\n    ///////////////////////////////////////////////////////////////*/\\n\\n    event Initialized(uint64 version);\\n\\n    error InvalidInitialization();\\n\\n    /*///////////////////////////////////////////////////////////////\\n                                VIEW FUNCTIONS\\n    ///////////////////////////////////////////////////////////////*/\\n\\n    /**\\n     * @dev Returns the account stored at the specified account id.\\n     */\\n    function getStorage() internal pure returns (Data storage data) {\\n        bytes32 s = keccak256(abi.encode(\\\"io.infinex.AccountStorage\\\"));\\n        assembly {\\n            data.slot := s\\n        }\\n    }\\n\\n    /**\\n     * @notice Get the Infinex Protocol Config\\n     * @return The Infinex Protocol Config Beacon\\n     */\\n    function _infinexProtocolConfig() internal view returns (IInfinexProtocolConfigBeacon) {\\n        Data storage data = getStorage();\\n        return IInfinexProtocolConfigBeacon(data.infinexProtocolConfigBeacon);\\n    }\\n\\n    /**\\n     * @notice Get the referral token ID\\n     * @return The referral token ID\\n     */\\n    function _referralTokenId() internal view returns (uint256) {\\n        Data storage data = getStorage();\\n        return data.referralTokenId;\\n    }\\n\\n    /**\\n     * @notice Get the upgrading flag\\n     * @return The upgrading flag\\n     */\\n    function _upgrading() internal view returns (bool) {\\n        Data storage data = getStorage();\\n        return data.upgrading;\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                                MUTATIVE FUNCTIONS\\n    ///////////////////////////////////////////////////////////////*/\\n\\n    /**\\n     * @notice Sets the initialized version of the contract.\\n     * @param _version The initialized version as a uint64 value.\\n     */\\n    function _setInitializedVersion(uint64 _version) internal {\\n        InitializableStorage storage initializableStorage;\\n        // storage slot comes from OZ proxy/utils/Initializable.sol\\n        bytes32 INITIALIZABLE_STORAGE = 0xf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00; //#gitleaks:allow\\n        assembly {\\n            initializableStorage.slot := INITIALIZABLE_STORAGE\\n        }\\n        initializableStorage._initialized = _version;\\n\\n        emit Initialized(_version);\\n    }\\n\\n    /**\\n     * @notice Set the upgrading flag for the account.\\n     * @param _isUpgrading The value to set for the upgrading flag.\\n     */\\n    function _setUpgrading(bool _isUpgrading) internal {\\n        Data storage data = getStorage();\\n        data.upgrading = _isUpgrading;\\n    }\\n}\\n\"\r\n    },\r\n    \"src/accounts/storage/Bridge.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n/**\\n * @title Bridging related storage struct and functions\\n */\\nlibrary Bridge {\\n    struct Data {\\n        // Parameters for interacting with USDC and the Circle Bridge\\n        address circleBridge;\\n        address circleMinter;\\n        address USDC;\\n        address wormholeCircleBridge;\\n        uint32 defaultDestinationCCTPDomain;\\n        uint16 defaultDestinationWormholeChainId;\\n    }\\n\\n    /**\\n     * @dev Returns the account stored at the specified account id.\\n     */\\n    function getStorage() internal pure returns (Data storage data) {\\n        bytes32 s = keccak256(abi.encode(\\\"io.infinex.Bridge\\\"));\\n        assembly {\\n            data.slot := s\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address of the USDC token.\\n     */\\n    function _USDC() internal view returns (address) {\\n        return getStorage().USDC;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the Circle Bridge contract.\\n     */\\n    // slither-disable-next-line dead-code\\n    function _circleBridge() internal view returns (address) {\\n        return getStorage().circleBridge;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the Circle Minter contract.\\n     * The minter contract stores the maximum amount of tokens that can be minted or burned.\\n     * The contract is responsible for minting and burning tokens as part of a bridging transaction.\\n     */\\n    // slither-disable-next-line dead-code\\n    function _circleMinter() internal view returns (address) {\\n        return getStorage().circleMinter;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the Wormhole Circle Bridge contract.\\n     */\\n    function _wormholeCircleBridge() internal view returns (address) {\\n        return getStorage().wormholeCircleBridge;\\n    }\\n\\n    /**\\n     * @dev Returns the CCTP domain of the default destination chain.\\n     */\\n    // slither-disable-next-line dead-code\\n    function _defaultDestinationCCTPDomain() internal view returns (uint32) {\\n        return getStorage().defaultDestinationCCTPDomain;\\n    }\\n\\n    /**\\n     * @dev Returns the Wormhole chain id of the default destination chain.\\n     */\\n    // slither-disable-next-line dead-code\\n    function _defaultDestinationWormholeChainId() internal view returns (uint16) {\\n        return getStorage().defaultDestinationWormholeChainId;\\n    }\\n}\\n\"\r\n    },\r\n    \"src/accounts/storage/EIP712.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.21;\\n\\nimport { MessageHashUtils } from \\\"@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol\\\";\\n\\nlibrary EIP712 {\\n    bytes32 private constant TYPE_HASH =\\n        keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\");\\n\\n    /// @custom:storage-location erc7201:openzeppelin.storage.EIP712\\n    struct EIP712Storage {\\n        /// @custom:oz-renamed-from _HASHED_NAME\\n        bytes32 _hashedName;\\n        /// @custom:oz-renamed-from _HASHED_VERSION\\n        bytes32 _hashedVersion;\\n        string _name;\\n        string _version;\\n    }\\n\\n    function _getEIP712Storage() private pure returns (EIP712Storage storage data) {\\n        bytes32 s = keccak256(abi.encode(\\\"io.infinex.EIP712\\\"));\\n        assembly {\\n            data.slot := s\\n        }\\n    }\\n\\n    /**\\n     * @dev Initializes the domain separator and parameter caches.\\n     *\\n     * The meaning of `name` and `version` is specified in\\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\\n     *\\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\\n     * - `version`: the current major version of the signing domain.\\n     *\\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\\n     * contract upgrade].\\n     */\\n    function __EIP712_init(string memory name, string memory version) internal {\\n        __EIP712_init_unchained(name, version);\\n    }\\n\\n    function __EIP712_init_unchained(string memory name, string memory version) internal {\\n        EIP712Storage storage $ = _getEIP712Storage();\\n        $._name = name;\\n        $._version = version;\\n\\n        // Reset prior values in storage if upgrading\\n        $._hashedName = 0;\\n        $._hashedVersion = 0;\\n    }\\n\\n    /**\\n     * @dev Returns the domain separator for the current chain.\\n     */\\n    function _domainSeparatorV4() internal view returns (bytes32) {\\n        return _buildDomainSeparator();\\n    }\\n\\n    function _buildDomainSeparator() private view returns (bytes32) {\\n        return keccak256(abi.encode(TYPE_HASH, _EIP712NameHash(), _EIP712VersionHash(), block.chainid, address(this)));\\n    }\\n\\n    /**\\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\\n     * function returns the hash of the fully encoded EIP712 message for this domain.\\n     *\\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\\n     *\\n     * ```solidity\\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\\n     *     keccak256(\\\"Mail(address to,string contents)\\\"),\\n     *     mailTo,\\n     *     keccak256(bytes(mailContents))\\n     * )));\\n     * address signer = ECDSA.recover(digest, signature);\\n     * ```\\n     */\\n    function _hashTypedDataV4(bytes32 structHash) internal view returns (bytes32) {\\n        return MessageHashUtils.toTypedDataHash(_domainSeparatorV4(), structHash);\\n    }\\n\\n    /**\\n     * @dev See {IERC-5267}.\\n     */\\n    function eip712Domain()\\n        internal\\n        view\\n        returns (\\n            bytes1 fields,\\n            string memory name,\\n            string memory version,\\n            uint256 chainId,\\n            address verifyingContract,\\n            bytes32 salt,\\n            uint256[] memory extensions\\n        )\\n    {\\n        EIP712Storage storage $ = _getEIP712Storage();\\n        // If the hashed name and version in storage are non-zero, the contract hasn't been properly initialized\\n        // and the EIP712 domain is not reliable, as it will be missing name and version.\\n        // solhint-disable-next-line gas-custom-errors\\n        require($._hashedName == 0 && $._hashedVersion == 0, \\\"EIP712: Uninitialized\\\");\\n\\n        return (\\n            hex\\\"0f\\\", // 01111\\n            _EIP712Name(),\\n            _EIP712Version(),\\n            block.chainid,\\n            address(this),\\n            bytes32(0),\\n            new uint256[](0)\\n        );\\n    }\\n\\n    /**\\n     * @dev The name parameter for the EIP712 domain.\\n     *\\n     * NOTE: This function reads from storage by default, but can be redefined to return a constant value if gas costs\\n     * are a concern.\\n     */\\n    function _EIP712Name() internal view returns (string memory) {\\n        EIP712Storage storage $ = _getEIP712Storage();\\n        return $._name;\\n    }\\n\\n    /**\\n     * @dev The version parameter for the EIP712 domain.\\n     *\\n     * NOTE: This function reads from storage by default, but can be redefined to return a constant value if gas costs\\n     * are a concern.\\n     */\\n    function _EIP712Version() internal view returns (string memory) {\\n        EIP712Storage storage $ = _getEIP712Storage();\\n        return $._version;\\n    }\\n\\n    /**\\n     * @dev The hash of the name parameter for the EIP712 domain.\\n     *\\n     * NOTE: In previous versions this function was virtual. In this version you should override `_EIP712Name` instead.\\n     */\\n    function _EIP712NameHash() internal view returns (bytes32) {\\n        EIP712Storage storage $ = _getEIP712Storage();\\n        string memory name = _EIP712Name();\\n        if (bytes(name).length > 0) {\\n            return keccak256(bytes(name));\\n        } else {\\n            // If the name is empty, the contract may have been upgraded without initializing the new storage.\\n            // We return the name hash in storage if non-zero, otherwise we assume the name is empty by design.\\n            bytes32 hashedName = $._hashedName;\\n            if (hashedName != 0) {\\n                return hashedName;\\n            } else {\\n                return keccak256(\\\"\\\");\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev The hash of the version parameter for the EIP712 domain.\\n     *\\n     * NOTE: In previous versions this function was virtual. In this version you should override `_EIP712Version` instead.\\n     */\\n    function _EIP712VersionHash() internal view returns (bytes32) {\\n        EIP712Storage storage $ = _getEIP712Storage();\\n        string memory version = _EIP712Version();\\n        if (bytes(version).length > 0) {\\n            return keccak256(bytes(version));\\n        } else {\\n            // If the version is empty, the contract may have been upgraded without initializing the new storage.\\n            // We return the version hash in storage if non-zero, otherwise we assume the version is empty by design.\\n            bytes32 hashedVersion = $._hashedVersion;\\n            if (hashedVersion != 0) {\\n                return hashedVersion;\\n            } else {\\n                return keccak256(\\\"\\\");\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"src/accounts/storage/SecurityKeys.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport { MessageHashUtils } from \\\"@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol\\\";\\n\\nimport { Error } from \\\"src/libraries/Error.sol\\\";\\n\\n/**\\n * @title Security keys storage and functions\\n */\\nlibrary SecurityKeys {\\n    using MessageHashUtils for bytes32;\\n\\n    // slither-disable-next-line constable-states,unused-state\\n    bytes32 internal constant _SIGNATURE_REQUEST_TYPEHASH = keccak256(\\n        \\\"Request(address _address,address _address2,uint256 _uint256,bytes32 _nonce,uint32 _uint32,bool _bool,bytes4 _selector)\\\"\\n    );\\n\\n    struct Data {\\n        mapping(bytes32 => bool) nonces; // Mapping of nonces\\n        mapping(address => bool) operationKeys;\\n        mapping(address => bool) recoveryKeys;\\n        mapping(address => bool) sudoKeys;\\n        uint16 sudoKeysCounter;\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                    \\t\\t\\tEVENTS / ERRORS\\n    ///////////////////////////////////////////////////////////////*/\\n\\n    event NonceConsumed(bytes32 nonce);\\n    event OperationKeyStatusSet(address operationKey, bool isValid);\\n    event RecoveryKeyStatusSet(address recoveryKey, bool isValid);\\n    event SudoKeyStatusSet(address sudoKey, bool isValid);\\n\\n    /**\\n     * @dev Returns the account stored at the specified account id.\\n     */\\n    function getStorage() internal pure returns (Data storage data) {\\n        bytes32 s = keccak256(abi.encode(\\\"io.infinex.SecurityKeys\\\"));\\n        assembly {\\n            data.slot := s\\n        }\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                                    VIEW FUNCTIONS\\n    ///////////////////////////////////////////////////////////////*/\\n\\n    /**\\n     * @notice Check if the provided operation key is valid\\n     * @param _operationKey The operation key to check\\n     * @return A boolean indicating if the operation key is valid\\n     */\\n    function _isValidOperationKey(address _operationKey) internal view returns (bool) {\\n        Data storage data = getStorage();\\n        return data.operationKeys[_operationKey];\\n    }\\n\\n    /**\\n     * @notice Check if the provided recovery key is valid\\n     * @param _recoveryKey The recovery key to check\\n     * @return A boolean indicating if the recovery key is valid\\n     */\\n    function _isValidRecoveryKey(address _recoveryKey) internal view returns (bool) {\\n        Data storage data = getStorage();\\n        return data.recoveryKeys[_recoveryKey];\\n    }\\n\\n    /**\\n     * @notice Check if the provided sudo key is valid\\n     * @param _sudoKey The sudo key to check\\n     * @return A boolean indicating if the sudo key is valid\\n     */\\n    function _isValidSudoKey(address _sudoKey) internal view returns (bool) {\\n        Data storage data = getStorage();\\n        return data.sudoKeys[_sudoKey];\\n    }\\n\\n    /**\\n     * @notice Check if the provided nonce is valid\\n     * @param _nonce The nonce to check\\n     * @return A boolean indicating if the nonce is valid\\n     */\\n    function _isValidNonce(bytes32 _nonce) internal view returns (bool) {\\n        Data storage data = getStorage();\\n        return !data.nonces[_nonce];\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                                MUTATIVE FUNCTIONS\\n    ///////////////////////////////////////////////////////////////*/\\n\\n    /**\\n     * @notice Set an operation key for the account\\n     * @param _operationKey The operation key address to be set\\n     * @param _isValid Whether the key is to be set as valid or invalid\\n     */\\n    function _setOperationKeyStatus(address _operationKey, bool _isValid) internal {\\n        Data storage data = getStorage();\\n        if (_operationKey == address(0)) revert Error.NullAddress();\\n        if (data.operationKeys[_operationKey]) {\\n            if (_isValid) revert Error.KeyAlreadyValid();\\n        } else {\\n            if (!_isValid) revert Error.KeyAlreadyInvalid();\\n        }\\n        emit OperationKeyStatusSet(_operationKey, _isValid);\\n        data.operationKeys[_operationKey] = _isValid;\\n    }\\n\\n    /**\\n     * @notice Set a new recovery key for the account\\n     * @param _recoveryKey The recovery key address to be set\\n     * @param _isValid Whether the key is to be set as valid or invalid\\n     */\\n    function _setRecoveryKeyStatus(address _recoveryKey, bool _isValid) internal {\\n        Data storage data = getStorage();\\n        if (_recoveryKey == address(0)) revert Error.NullAddress();\\n        if (data.recoveryKeys[_recoveryKey]) {\\n            if (_isValid) revert Error.KeyAlreadyValid();\\n        } else {\\n            if (!_isValid) revert Error.KeyAlreadyInvalid();\\n        }\\n        emit RecoveryKeyStatusSet(_recoveryKey, _isValid);\\n        data.recoveryKeys[_recoveryKey] = _isValid;\\n    }\\n\\n    /**\\n     * @notice Set a sudo key for the account\\n     * @param _sudoKey The sudo key address to be set\\n     * @param _isValid Whether the key is to be set as valid or invalid\\n     */\\n    function _setSudoKeyStatus(address _sudoKey, bool _isValid) internal {\\n        Data storage data = getStorage();\\n        if (_sudoKey == address(0)) revert Error.NullAddress();\\n        if (data.sudoKeys[_sudoKey]) {\\n            if (_isValid) revert Error.KeyAlreadyValid();\\n            if (data.sudoKeysCounter == 1) revert Error.CannotRemoveLastKey();\\n            --data.sudoKeysCounter;\\n        } else {\\n            if (!_isValid) revert Error.KeyAlreadyInvalid();\\n            ++data.sudoKeysCounter;\\n        }\\n        emit SudoKeyStatusSet(_sudoKey, _isValid);\\n        data.sudoKeys[_sudoKey] = _isValid;\\n    }\\n\\n    /**\\n     * @notice Consumes a nonce, marking it as used\\n     * @param _nonce The nonce to consume\\n     * @dev Reverts if nonce has already been consumed.\\n     */\\n    function _consumeNonce(bytes32 _nonce) internal returns (bool) {\\n        Data storage data = getStorage();\\n        if (data.nonces[_nonce]) revert Error.InvalidNonce(_nonce);\\n        emit NonceConsumed(_nonce);\\n        data.nonces[_nonce] = true;\\n        return true;\\n    }\\n}\\n\"\r\n    },\r\n    \"src/accounts/utils/AccountConstants.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nlibrary AccountConstants {\\n    uint256 public constant MAX_WITHDRAWAL_FEE = 50;\\n}\\n\"\r\n    },\r\n    \"src/accounts/utils/RequestTypes.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\ncontract RequestTypes {\\n    struct Request {\\n        address _address;\\n        address _address2;\\n        uint256 _uint256;\\n        bytes32 _nonce;\\n        uint32 _uint32;\\n        bool _bool;\\n        bytes4 _selector;\\n    }\\n}\\n\"\r\n    },\r\n    \"src/accounts/utils/SecurityModifiers.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport { ECDSA } from \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\nimport { MessageHashUtils } from \\\"@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol\\\";\\n\\nimport { RequestTypes } from \\\"src/accounts/utils/RequestTypes.sol\\\";\\n\\nimport { ERC2771Context } from \\\"src/forwarder/ERC2771Context.sol\\\";\\nimport { Account } from \\\"src/accounts/storage/Account.sol\\\";\\nimport { EIP712 } from \\\"src/accounts/storage/EIP712.sol\\\";\\nimport { SecurityKeys } from \\\"src/accounts/storage/SecurityKeys.sol\\\";\\n\\nimport { Error } from \\\"src/libraries/Error.sol\\\";\\n\\ncontract SecurityModifiers {\\n    using MessageHashUtils for bytes32;\\n\\n    /*///////////////////////////////////////////////////////////////\\n                    \\t\\t\\tEVENTS / ERRORS\\n    ///////////////////////////////////////////////////////////////*/\\n\\n    event PayloadProcessed(RequestTypes.Request request, bytes signature);\\n\\n    /*///////////////////////////////////////////////////////////////\\n                            SECURITY CHECK MODIFIERS\\n    ///////////////////////////////////////////////////////////////*/\\n\\n    /**\\n     * @notice Modifier to check if the request requires an sudo key.\\n     * @param _request The request data.\\n     * @param _signature The sudo key signature to process the transaction.\\n     */\\n    modifier requiresSudoKey(RequestTypes.Request calldata _request, bytes calldata _signature) {\\n        if (_request._selector != msg.sig) {\\n            revert Error.InvalidRequest();\\n        }\\n        bytes32 messageHash = EIP712._hashTypedDataV4(keccak256(abi.encode(SecurityKeys._SIGNATURE_REQUEST_TYPEHASH, _request)));\\n\\n        address sudoKey = ECDSA.recover(messageHash, _signature);\\n        if (!SecurityKeys._isValidSudoKey(sudoKey)) {\\n            revert Error.InvalidKeySignature(sudoKey);\\n        }\\n\\n        SecurityKeys._consumeNonce(_request._nonce);\\n        emit PayloadProcessed(_request, _signature);\\n\\n        _;\\n    }\\n\\n    /**\\n     * @notice Modifier to check if the sender is an sudo key.\\n     */\\n    modifier requiresSudoKeySender() {\\n        if (!SecurityKeys._isValidSudoKey(ERC2771Context._msgSender())) {\\n            revert Error.InvalidKeySignature(ERC2771Context._msgSender());\\n        }\\n\\n        _;\\n    }\\n\\n    /**\\n     * @notice Modifier to check if the sender is a sudo or operation key.\\n     * If not, it reverts with an error message.\\n     * @dev Update isAuthorizedOperationsParty() in AccountUtilsModule when\\n     * this modifier is updated.\\n     */\\n    modifier requiresAuthorizedOperationsParty() {\\n        address sender = ERC2771Context._msgSender();\\n        if (!SecurityKeys._isValidSudoKey(sender) && !SecurityKeys._isValidOperationKey(sender)) {\\n            revert Error.InvalidKeySignature(sender);\\n        }\\n        _;\\n    }\\n\\n    /**\\n     * @notice Modifier to check if the sender is an sudo key, a recovery key or a trusted recovery keeper.\\n     * If not, it reverts with an error message.\\n     * @dev Update isAuthorizedRecoveryParty() in AccountUtilsModule when\\n     * this modifier is updated.\\n     */\\n    modifier requiresAuthorizedRecoveryParty() {\\n        address sender = ERC2771Context._msgSender();\\n        if (\\n            !SecurityKeys._isValidSudoKey(sender) && !SecurityKeys._isValidRecoveryKey(sender)\\n                && !Account._infinexProtocolConfig().isTrustedRecoveryKeeper(sender)\\n        ) {\\n            revert Error.InvalidKeySignature(sender);\\n        }\\n        _;\\n    }\\n\\n    /**\\n     * @notice Modifier to check if the sender is a trusted keeper for recovery.\\n     * If not, reverts with an error message.\\n     */\\n    modifier requiresTrustedRecoveryKeeper() {\\n        if (!Account._infinexProtocolConfig().isTrustedRecoveryKeeper(ERC2771Context._msgSender())) {\\n            revert Error.InvalidKeySignature(ERC2771Context._msgSender());\\n        }\\n        _;\\n    }\\n}\\n\"\r\n    },\r\n    \"src/forwarder/ERC2771Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// Originally sourced from OpenZeppelin Contracts (last updated v4.9.3) (metatx/ERC2771Context.sol)\\npragma solidity ^0.8.21;\\n\\nimport { EnumerableSet } from \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport { Initializable } from \\\"src/Initializable.sol\\\";\\n\\nimport { Error } from \\\"src/libraries/Error.sol\\\";\\n\\n/**\\n * @dev Context variant with ERC2771 support.\\n */\\nlibrary ERC2771Context {\\n    event TrustedForwarderAdded(address forwarder);\\n    event TrustedForwarderRemoved(address forwarder);\\n\\n    struct Data {\\n        EnumerableSet.AddressSet trustedForwarders;\\n    }\\n\\n    function getStorage() internal pure returns (Data storage data) {\\n        bytes32 slot = keccak256(abi.encode(\\\"io.infinex.ERC2771Context\\\"));\\n        assembly {\\n            data.slot := slot\\n        }\\n    }\\n\\n    function initialize(address initialTrustedForwarder) internal {\\n        Initializable.initialize();\\n\\n        EnumerableSet.add(getStorage().trustedForwarders, initialTrustedForwarder);\\n    }\\n\\n    function isTrustedForwarder(address forwarder) internal view returns (bool) {\\n        return EnumerableSet.contains(getStorage().trustedForwarders, forwarder);\\n    }\\n\\n    function trustedForwarder() internal view returns (address[] memory) {\\n        return EnumerableSet.values(getStorage().trustedForwarders);\\n    }\\n\\n    function _addTrustedForwarder(address forwarder) internal returns (bool) {\\n        if (EnumerableSet.add(getStorage().trustedForwarders, forwarder)) {\\n            emit TrustedForwarderAdded(forwarder);\\n            return true;\\n        } else {\\n            revert Error.AlreadyExists();\\n        }\\n    }\\n\\n    function _removeTrustedForwarder(address forwarder) internal returns (bool) {\\n        if (EnumerableSet.remove(getStorage().trustedForwarders, forwarder)) {\\n            emit TrustedForwarderRemoved(forwarder);\\n            return true;\\n        } else {\\n            revert Error.DoesNotExist();\\n        }\\n    }\\n\\n    function _msgSender() internal view returns (address) {\\n        uint256 calldataLength = msg.data.length;\\n        uint256 contextSuffixLength = _contextSuffixLength();\\n        if (isTrustedForwarder(msg.sender) && calldataLength >= contextSuffixLength) {\\n            return address(bytes20(msg.data[calldataLength - contextSuffixLength:]));\\n        } else {\\n            return msg.sender;\\n        }\\n    }\\n\\n    // slither-disable-start dead-code\\n    function _msgData() internal view returns (bytes calldata) {\\n        uint256 calldataLength = msg.data.length;\\n        uint256 contextSuffixLength = _contextSuffixLength();\\n        if (isTrustedForwarder(msg.sender) && calldataLength >= contextSuffixLength) {\\n            return msg.data[:calldataLength - contextSuffixLength];\\n        } else {\\n            return msg.data;\\n        }\\n    }\\n\\n    /**\\n     * @dev ERC-2771 specifies the context as being a single address (20 bytes).\\n     */\\n    function _contextSuffixLength() internal pure returns (uint256) {\\n        return 20;\\n    }\\n    // slither-disable-end dead-code\\n}\\n\"\r\n    },\r\n    \"src/interfaces/accounts/IAccountUtilsModule.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\ninterface IAccountUtilsModule {\\n    event AccountInfinexProtocolBeaconImplementationUpgraded(address infinexProtocolConfigBeacon);\\n\\n    event AccountSynthetixInformationBeaconUpgraded(address synthetixInformationBeacon);\\n\\n    event AccountCircleBridgeParamsUpgraded(address circleBridge, address circleMinter, uint32 defaultDestinationCCTPDomain);\\n\\n    event AccountWormholeCircleBridgeParamsUpgraded(address wormholeCircleBridge, uint16 defaultDestinationWormholeChainId);\\n\\n    event AccountUSDCAddressUpgraded(address USDC);\\n\\n    /*///////////////////////////////////////////////////////////////\\n                                    VIEW FUNCTIONS\\n    ///////////////////////////////////////////////////////////////*/\\n\\n    /**\\n     * @notice Get the Infinex Protocol Config\\n     * @return The Infinex Protocol Config Beacon\\n     */\\n    function infinexProtocolConfigBeacon() external view returns (address);\\n\\n    /**\\n     * @notice Check if the provided operation key is valid\\n     * @param _operationKey The operation key to check\\n     * @return A boolean indicating if the key is valid\\n     */\\n    function isValidOperationKey(address _operationKey) external view returns (bool);\\n\\n    /**\\n     * @notice Check if the provided sudo key is valid\\n     * @param _sudoKey The sudo key to check\\n     * @return A boolean indicating if the sudo key is valid\\n     */\\n    function isValidSudoKey(address _sudoKey) external view returns (bool);\\n\\n    /**\\n     * @notice Check if the provided recovery key is valid\\n     * @param _recoveryKey The recovery key to check\\n     * @return A boolean indicating if the recovery key is valid\\n     */\\n    function isValidRecoveryKey(address _recoveryKey) external view returns (bool);\\n\\n    /**\\n     * @notice Checks if the given address is an authorized operations party.\\n     * @param _key The address to check.\\n     * @return A boolean indicating whether the address is an authorized operations party.\\n     * @dev Update this function whenever the logic for requiresAuthorizedOperationsParty\\n     * from SecurityModifiers changes\\n     */\\n    function isAuthorizedOperationsParty(address _key) external view returns (bool);\\n\\n    /**\\n     * @notice Checks if the given address is an authorized recovery party.\\n     * @param _key The address to check.\\n     * @return A boolean indicating whether the address is an authorized recovery party.\\n     * @dev Update this function whenever the logic for requiresAuthorizedRecoveryParty\\n     * from SecurityModifiers changes\\n     */\\n    function isAuthorizedRecoveryParty(address _key) external view returns (bool);\\n\\n    /**\\n     * @notice Retrieves the Circle Bridge parameters.\\n     * @return The address of the circleBridge\\n     * @return The address of the minter.\\n     * @return The default circle bridge destination domain.\\n     */\\n    function getCircleBridgeParams() external view returns (address, address, uint32);\\n\\n    /**\\n     * @notice Retrieves the wormhole circle bridge\\n     * @return The wormhole circle bridge address.\\n     */\\n    function getWormholeCircleBridge() external view returns (address);\\n\\n    /**\\n     * @notice Retrieves the Wormhole Circle Bridge parameters.\\n     * @return The address of the wormholeCircleBridge\\n     * @return The address of the wormholeCircleBridge and the default defaultDestinationWormholeChainId\\n     */\\n    function getWormholeCircleBridgeParams() external view returns (address, uint16);\\n\\n    /**\\n     * @notice Retrieves the USDC address.\\n     * @return The address of USDC\\n     */\\n    function getUSDCAddress() external view returns (address);\\n\\n    /**\\n     * @notice Retrieves the maximum withdrawal fee.\\n     * @return The maximum withdrawal fee.\\n     */\\n    function getMaxWithdrawalFee() external pure returns (uint256);\\n\\n    /*///////////////////////////////////////////////////////////////\\n                                MUTATIVE FUNCTIONS\\n    ///////////////////////////////////////////////////////////////*/\\n\\n    /**\\n     * @notice Upgrade to a new beacon implementation and updates any new parameters along with it\\n     * @param _newInfinexProtocolConfigBeacon The address of the new beacon\\n     * @dev requires the sender to be the sudo key\\n     * @dev Requires passing the new beacon address which matches the latest to ensure that the upgrade both\\n     * is as the user intended, and is to the latest beacon implementation. Prevents the user from opting in to a\\n     * specific version and upgrading to a later version that may have been deployed between the opt-in and the upgrade\\n     */\\n    function upgradeProtocolBeaconParameters(address _newInfinexProtocolConfigBeacon) external;\\n\\n    /**\\n     * @notice Updates the parameters for the Circle Bridge to the latest from the Infinex Protocol Config Beacon.\\n     * Update is opt in to prevent malicious automatic updates.\\n     * @dev requires the sender to be the sudo key\\n     */\\n    function updateCircleBridgeParams() external;\\n\\n    /**\\n     * @notice Updates the parameters for the Wormhole Circle Bridge to the latest from the Infinex Protocol Config Beacon.\\n     * Update is opt in to prevent malicious automatic updates.\\n     * @dev requires the sender to be the sudo key\\n     */\\n    function updateWormholeCircleBridge() external;\\n\\n    /**\\n     * @notice Updates the USDC address from the Infinex Protocol Config Beacon.\\n     * Update is opt in to prevent malicious automatic updates.\\n     * @dev requires the sender to be the sudo key\\n     */\\n    function updateUSDCAddress() external;\\n}\\n\"\r\n    },\r\n    \"src/interfaces/beacons/IInfinexProtocolConfigBeacon.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n/**\\n * @title IInfinexProtocolConfigBeacon\\n * @notice Interface for the Infinex Protocol Config Beacon contract.\\n */\\ninterface IInfinexProtocolConfigBeacon {\\n    /*///////////////////////////////////////////////////////////////\\n    \\t \\t\\t\\t\\t\\t\\t\\t\\t\\t\\tSTRUCTS\\n    ///////////////////////////////////////////////////////////////*/\\n\\n    /**\\n     * @notice Struct containing the constructor arguments for the InfinexProtocolConfigBeacon contract\\n     * @param trustedForwarder Address of the trusted forwarder contract\\n     * @param appRegistry Address of the app registry contract\\n     * @param latestAccountImplementation Address of the latest account implementation contract\\n     * @param initialProxyImplementation Address of the initial proxy implementation contract\\n     * @param revenuePool Address of the revenue pool contract\\n     * @param USDC Address of the USDC token contract\\n     * @param minimumUSDCBridgeAmount Minimum amount of USDC required to bridge\\n     * @param circleBridge Address of the Circle bridge contract\\n     * @param circleMinter Address of the Circle minter contract, used for checking the maximum bridge amount\\n     * @param wormholeCircleBridge Address of the Wormhole Circle bridge contract\\n     * @param defaultDestinationCCTPDomain the CCTP domain of the default destination chain.\\n     * @param defaultDestinationWormholeChainId the Wormhole chain id of the default destination chain.\\n     * @param solanaWalletSeed The salt used to generate the Solana account (fixed seed \\\"wallet\\\")\\n     * @param solanaFixedPDASeed The salt used to generate the PDA (Program Derived Address)\\n     * @param solanaWalletProgramAddress The Solana Wallet Program Address\\n     * @param solanaTokenMintAddress The Solana token mint address\\n     * @param solanaTokenProgramAddress The Solana token program address\\n     * @param solanaAssociatedTokenProgramAddress The Solana ATA program address\\n     */\\n    struct InfinexBeaconConstructorArgs {\\n        address trustedForwarder;\\n        address appRegistry;\\n        address latestAccountImplementation;\\n        address initialProxyImplementation;\\n        address revenuePool;\\n        address USDC;\\n        uint256 minimumUSDCBridgeAmount;\\n        address circleBridge;\\n        address circleMinter;\\n        address wormholeCircleBridge;\\n        uint32 defaultDestinationCCTPDomain;\\n        uint16 defaultDestinationWormholeChainId;\\n        uint16[] supportedWormholeChainIds;\\n        uint32 solanaCCTPDestinationDomain;\\n        bytes solanaWalletSeed;\\n        bytes solanaFixedPDASeed;\\n        bytes32 solanaWalletProgramAddress;\\n        bytes32 solanaTokenMintAddress;\\n        bytes32 solanaTokenProgramAddress;\\n        bytes32 solanaAssociatedTokenProgramAddress;\\n    }\\n\\n    /**\\n     * @notice Struct containing both Circle and Wormhole bridge configuration\\n     * @param minimumUSDCBridgeAmount Minimum amount of USDC required to bridge\\n     * @param circleBridge Address of the Circle bridge contract\\n     * @param circleMinter Address of the Circle minter contract, used for checking the maximum bridge amount\\n     * @param wormholeCircleBridge Address of the Wormhole Circle bridge contract\\n     * @param defaultDestinationCCTPDomain the CCTP domain of the default destination chain.\\n     * @param defaultDestinationWormholeChainId the Wormhole chain id of the default destination chain.\\n     * @dev Chain id is the official chain id for evm chains and documented one for non evm chains.\\n     */\\n    struct BridgeConfiguration {\\n        uint256 minimumUSDCBridgeAmount;\\n        address circleBridge;\\n        address circleMinter;\\n        address wormholeCircleBridge;\\n        uint32 defaultDestinationCCTPDomain;\\n        uint16 defaultDestinationWormholeChainId;\\n    }\\n\\n    /**\\n     * @notice The addresses for implementations referenced by the beacon\\n     * @param initialProxyImplementation The initial proxy implementation address used for account creation to ensure identical cross chain addresses\\n     * @param latestAccountImplementation The latest account implementation address, used for account upgrades and new accounts\\n     * @param latestInfinexProtocolConfigBeacon The latest Infinex Protocol config beacon address, used for pointing account updates to the latest beacon\\n     */\\n    struct ImplementationAddresses {\\n        address initialProxyImplementation;\\n        address latestAccountImplementation;\\n        address latestInfinexProtocolConfigBeacon;\\n    }\\n\\n    /**\\n     * @notice Struct containing the Solana configuration needed to verify addresses\\n     * @param walletSeed The salt used to generate the Solana account (fixed seed \\\"wallet\\\")\\n     * @param fixedPDASeed The salt used to generate the PDA (Program Derived Address)\\n     * @param walletProgramAddress The Solana Wallet Program Address\\n     * @param tokenMintAddress The Solana token mint address\\n     * @param tokenProgramAddress The Solana token address\\n     * @param associatedTokenProgramAddress The Solana ATA program address\\n     */\\n    struct SolanaConfiguration {\\n        bytes walletSeed;\\n        bytes fixedPDASeed;\\n        bytes32 walletProgramAddress;\\n        bytes32 tokenMintAddress;\\n        bytes32 tokenProgramAddress;\\n        bytes32 associatedTokenProgramAddress;\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n    \\t \\t\\t\\t\\t\\t\\t\\t\\t\\t\\tEVENTS\\n    ///////////////////////////////////////////////////////////////*/\\n\\n    event LatestAccountImplementationSet(address latestAccountImplementation);\\n    event InitialProxyImplementationSet(address initialProxyImplementation);\\n    event AppRegistrySet(address appRegistry);\\n    event RevenuePoolSet(address revenuePool);\\n    event USDCAddressSet(address USDC);\\n    event CircleBridgeParamsSet(address circleBridge, address circleMinter, uint32 defaultDestinationCCTPDomain);\\n    event WormholeCircleBridgeParamsSet(address wormholeCircleBridge, uint16 defaultDestinationWormholeChainId);\\n    event LatestInfinexProtocolConfigBeaconSet(address latestInfinexProtocolConfigBeacon);\\n    event WithdrawalFeeUSDCSet(uint256 withdrawalFee);\\n    event FundsRecoveryStatusSet(bool status);\\n    event MinimumUSDCBridgeAmountSet(uint256 amount);\\n    event WormholeDestinationDomainSet(uint256 indexed chainId, uint16 destinationDomain);\\n    event CircleDestinationDomainSet(uint256 indexed chainId, uint32 destinationDomain);\\n    event TrustedRecoveryKeeperSet(address indexed trustedRecoveryKeeper, bool isTrusted);\\n    event SupportedWormholeChainIdSet(uint16 wormholeChainId, bool status);\\n    event SolanaCCTPDestinationDomainSet(uint32 solanaCCTPDestinationDomain);\\n\\n    /*///////////////////////////////////////////////////////////////\\n    \\t \\t\\t\\t\\t\\t\\t\\t\\t\\tVARIABLES\\n    ///////////////////////////////////////////////////////////////*/\\n\\n    /**\\n     * @notice Gets the timestamp the beacon was deployed\\n     * @return The timestamp the beacon was deployed\\n     */\\n    function CREATED_AT() external view returns (uint256);\\n\\n    /**\\n     * @notice Gets the trusted forwarder address\\n     * @return The address of the trusted forwarder\\n     */\\n    function TRUSTED_FORWARDER() external view returns (address);\\n\\n    /**\\n     * @notice Gets the app registry address\\n     * @return The address of the app registry\\n     */\\n    function appRegistry() external view returns (address);\\n\\n    /**\\n     * @notice A platform wide feature flag to enable or disable funds recovery, false by default\\n     * @return True if funds recovery is active\\n     */\\n    function fundsRecoveryActive() external view returns (bool);\\n\\n    /**\\n     * @notice Gets the revenue pool address\\n     * @return The address of the revenue pool\\n     */\\n    function revenuePool() external view returns (address);\\n\\n    /**\\n     * @notice Gets the USDC amount to charge as withdrawal fee\\n     * @return The withdrawal fee in USDC's decimals\\n     */\\n    function withdrawalFeeUSDC() external view returns (uint256);\\n\\n    /**\\n     * @notice Retrieves the USDC address.\\n     * @return The address of the USDC token\\n     */\\n    function USDC() external view returns (address);\\n\\n    /*///////////////////////////////////////////////////////////////\\n    \\t \\t\\t\\t\\t\\t\\t\\t\\tVIEW FUNCTIONS\\n    ///////////////////////////////////////////////////////////////*/\\n\\n    /**\\n     * @notice Retrieves supported wormhole chain ids.\\n     * @param _wormholeChainId the chain id to check\\n     * @return bool if the chain is supported or not.\\n     */\\n    function isSupportedWormholeChainId(uint16 _wormholeChainId) external view returns (bool);\\n\\n    /**\\n     * @notice Retrieves the minimum USDC amount that can be bridged.\\n     * @return The minimum USDC bridge amount.\\n     */\\n    function getMinimumUSDCBridgeAmount() external view returns (uint256);\\n\\n    /**\\n     * @notice Retrieves the Circle Bridge parameters.\\n     * @return circleBridge The address of the Circle Bridge contract.\\n     * @return circleMinter The address of the TokenMinter contract.\\n     * @return defaultDestinationCCTPDomain The CCTP domain of the default destination chain.\\n     */\\n    function getCircleBridgeParams()\\n        external\\n        view\\n        returns (address circleBridge, address circleMinter, uint32 defaultDestinationCCTPDomain);\\n\\n    /**\\n     * @notice Retrieves the Circle Bridge address.\\n     * @return The address of the Circle Bridge contract.\\n     */\\n    function getCircleBridge() external view returns (address);\\n\\n    /**\\n     * @notice Retrieves the Circle TokenMinter address.\\n     * @return The address of the Circle TokenMinter contract.\\n     */\\n    function getCircleMinter() external view returns (address);\\n\\n    /**\\n     * @notice Retrieves the CCTP domain of the destination chain.\\n     * @return The CCTP domain of the default destination chain.\\n     */\\n    function getDefaultDestinationCCTPDomain() external view returns (uint32);\\n\\n    /**\\n     * @notice Retrieves the parameters required for Wormhole bridging.\\n     * @return The address of the Wormhole Circle Bridge contract.\\n     * @return The default wormhole destination domain for the circle bridge contract.\\n     */\\n    function getWormholeCircleBridgeParams() external view returns (address, uint16);\\n\\n    /**\\n     * @notice Retrieves the Wormhole Circle Bridge address.\\n     * @return The address of the Wormhole Circle Bridge contract.\\n     */\\n    function getWormholeCircleBridge() external view returns (address);\\n\\n    /**\\n     * @notice Retrieves the Wormhole chain id for Base, or Ethereum Mainnet if deployed on Base.\\n     * @return The Wormhole chain id of the default destination chain.\\n     */\\n    function getDefaultDestinationWormholeChainId() external view returns (uint16);\\n\\n    /**\\n     * @notice Retrieves the circle CCTP destination domain for solana.\\n     * @return The CCTP destination domain for solana.\\n     */\\n    function getSolanaCCTPDestinationDomain() external view returns (uint32);\\n\\n    /**\\n     * @notice Gets the latest account implementation address.\\n     * @return The address of the latest account implementation.\\n     */\\n    function getLatestAccountImplementation() external view returns (address);\\n\\n    /**\\n     * @notice Gets the initial proxy implementation address.\\n     * @return The address of the initial proxy implementation.\\n     */\\n    function getInitialProxyImplementation() external view returns (address);\\n\\n    /**\\n     * @notice The latest Infinex Protocol config beacon address, used for pointing account updates to the latest beacon.\\n     * @return The address of the latest Infinex Protocol config beacon.\\n     */\\n    function getLatestInfinexProtocolConfigBeacon() external view returns (address);\\n\\n    /**\\n     * @notice Checks if an address is a trusted recovery keeper.\\n     * @param _address The address to check.\\n     * @return True if the address is a trusted recovery keeper, false otherwise.\\n     */\\n    function isTrustedRecoveryKeeper(address _address) external view returns (bool);\\n\\n    /**\\n     * @notice Returns the Solana configuration\\n     * @param walletSeed The salt used to generate the Solana account (fixed seed \\\"wallet\\\")\\n     * @param fixedPDASeed The salt used to generate the PDA (Program Derived Address)\\n     * @param walletProgramAddress The Solana Wallet Program Address\\n     * @param tokenMintAddress The Solana token mint address\\n     * @param tokenProgramAddress The Solana token program address\\n     * @param associatedTokenProgramAddress The Solana ATA program address\\n     */\\n    function getSolanaConfiguration()\\n        external\\n        view\\n        returns (\\n            bytes memory walletSeed,\\n            bytes memory fixedPDASeed,\\n            bytes32 walletProgramAddress,\\n            bytes32 tokenMintAddress,\\n            bytes32 tokenProgramAddress,\\n            bytes32 associatedTokenProgramAddress\\n        );\\n\\n    /*///////////////////////////////////////////////////////////////\\n    \\t \\t\\t\\t\\t\\t\\t\\tMUTATIVE FUNCTIONS\\n    ///////////////////////////////////////////////////////////////*/\\n\\n    /**\\n     * @notice Sets or unsets a supported wormhole chain id.\\n     * @param _wormholeChainId the wormhole chain id to add or remove.\\n     * @param _status the status of the chain id.\\n     */\\n    function setSupportedWormholeChainId(uint16 _wormholeChainId, bool _status) external;\\n\\n    /**\\n     * @notice Sets the solana CCTP destination domain\\n     * @param _solanaCCTPDestinationDomain the destination domain for circles CCTP USDC bridge.\\n     */\\n    function setSolanaCCTPDestinationDomain(uint32 _solanaCCTPDestinationDomain) external;\\n\\n    /**\\n     * @notice Sets the address of the app registry contract.\\n     * @param _appRegistry The address of the app registry contract.\\n     */\\n    function setAppRegistry(address _appRegistry) external;\\n\\n    /**\\n     * @notice Sets or unsets an address as a trusted recovery keeper.\\n     * @param _address The address to set or unset.\\n     * @param _isTrusted Boolean indicating whether to set or unset the address as a trusted recovery keeper.\\n     */\\n    function setTrustedRecoveryKeeper(address _address, bool _isTrusted) external;\\n\\n    /**\\n     * @notice Sets the funds recovery flag to active.\\n     * @dev Initially only the owner can call this. After 90 days, it can be activated by anyone.\\n     */\\n    function setFundsRecoveryActive() external;\\n\\n    /**\\n     * @notice Sets the revenue pool address.\\n     * @param _revenuePool The revenue pool address.\\n     */\\n    function setRevenuePool(address _revenuePool) external;\\n\\n    /**\\n     * @notice Sets the USDC amount to charge as withdrawal fee.\\n     * @param _withdrawalFeeUSDC The withdrawal fee in USDC's decimals.\\n     */\\n    function setWithdrawalFeeUSDC(uint256 _withdrawalFeeUSDC) external;\\n\\n    /**\\n     * @notice Sets the address of the USDC token contract.\\n     * @param _USDC The address of the USDC token contract.\\n     * @dev Only the contract owner can call this function.\\n     * @dev Throws an error if the provided address is the zero address.\\n     */\\n    function setUSDCAddress(address _USDC) external;\\n\\n    /**\\n     * @notice Sets the minimum USDC amount that can be bridged, in 6 decimals.\\n     * @param _amount The minimum USDC bridge amount.\\n     */\\n    function setMinimumUSDCBridgeAmount(uint256 _amount) external;\\n\\n    /**\\n     * @notice Sets the parameters for Circle bridging.\\n     * @param _circleBridge The address of the Circle Bridge contract.\\n     * @param _circleMinter The address of the Circle TokenMinter contract.\\n     * @param _defaultDestinationCCTPDomain The CCTP domain of the default destination chain.\\n     * @dev Circle Destination Domain can be 0 - Ethereum.\\n     */\\n    function setCircleBridgeParams(address _circleBridge, address _circleMinter, uint32 _defaultDestinationCCTPDomain) external;\\n\\n    /**\\n     * @notice Sets the parameters for Wormhole bridging.\\n     * @param _wormholeCircleBridge The address of the Wormhole Circle Bridge contract.\\n     * @param _defaultDestinationWormholeChainId The wormhole domain of the default destination chain.\\n     */\\n    function setWormholeCircleBridgeParams(address _wormholeCircleBridge, uint16 _defaultDestinationWormholeChainId) external;\\n\\n    /**\\n     * @notice Sets the initial proxy implementation address.\\n     * @param _initialProxyImplementation The initial proxy implementation address.\\n     * @dev Throws an error if the provided address is the zero address.\\n     */\\n    function setInitialProxyImplementation(address _initialProxyImplementation) external;\\n\\n    /**\\n     * @notice Sets the latest account implementation address.\\n     * @param _latestAccountImplementation The latest account implementation address.\\n     * @dev Throws an error if the provided address is the zero address.\\n     */\\n    function setLatestAccountImplementation(address _latestAccountImplementation) external;\\n\\n    /**\\n     * @notice Sets the latest Infinex Protocol Config Beacon.\\n     * @param _latestInfinexProtocolConfigBeacon The address of the Infinex Protocol Config Beacon.\\n     * @dev Throws an error if the provided address is the zero address.\\n     */\\n    function setLatestInfinexProtocolConfigBeacon(address _latestInfinexProtocolConfigBeacon) external;\\n}\\n\"\r\n    },\r\n    \"src/libraries/Error.sol\": {\r\n      \"content\": \"//       c=<\\n//        |\\n//        |   ////\\\\    1@2\\n//    @@  |  /___\\\\**   @@@2\\t\\t\\t@@@@@@@@@@@@@@@@@@@@@@\\n//   @@@  |  |~L~ |*   @@@@@@\\t\\t@@@  @@@@@        @@@@    @@@ @@@@    @@@  @@@@@@@@ @@@@ @@@@    @@@ @@@@@@@@@ @@@@   @@@@\\n//  @@@@@ |   \\\\=_/8    @@@@1@@\\t\\t@@@  @@@@@  @@@@  @@@@    @@@ @@@@@   @@@ @@@@@@@@@ @@@@ @@@@@  @@@@ @@@@@@@@@  @@@@ @@@@\\n// @@@@@@| _ /| |\\\\__ @@@@@@@@2\\t\\t@@@  @@@@@  @@@@  @@@@    @@@ @@@@@@@ @@@ @@@@      @@@@ @@@@@@ @@@@ @@@         @@@@@@@\\n// 1@@@@@@|\\\\  \\\\___/)   @@1@@@@@2\\t~~~  ~~~~~  @@@@  ~~@@    ~~~ ~~~~~~~~~~~ ~~~~      ~~~~ ~~~~~~~~~~~ ~@@          @@@@@\\n// 2@@@@@ |  \\\\ \\\\ / |     @@@@@@2\\t@@@  @@@@@  @@@@  @@@@    @@@ @@@@@@@@@@@ @@@@@@@@@ @@@@ @@@@@@@@@@@ @@@@@@@@@    @@@@@\\n// 2@@@@  |_  >   <|__    @@1@12\\t@@@  @@@@@  @@@@  @@@@    @@@ @@@@ @@@@@@ @@@@      @@@@ @@@@ @@@@@@ @@@         @@@@@@@\\n// @@@@  / _|  / \\\\/    \\\\   @@1@\\t\\t@@@   @@@   @@@@  @@@@    @@@ @@@@  @@@@@ @@@@      @@@@ @@@@  @@@@@ @@@@@@@@@  @@@@ @@@@\\n//  @@ /  |^\\\\/   |      |   @@1\\t\\t@@@         @@@@  @@@@    @@@ @@@@    @@@ @@@@      @@@@ @@@    @@@@ @@@@@@@@@ @@@@   @@@@\\n//   /     / ---- \\\\ \\\\\\\\\\\\=    @@\\t\\t@@@@@@@@@@@@@@@@@@@@@@\\n//   \\\\___/ --------  ~~    @@@\\n//     @@  | |   | |  --   @@\\n// \u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\\n\\n// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nlibrary Error {\\n    /*///////////////////////////////////////////////////////////////\\n                                            GENERIC\\n    ///////////////////////////////////////////////////////////////*/\\n\\n    error AlreadyExists();\\n\\n    error DoesNotExist();\\n\\n    error Unauthorized();\\n\\n    error InvalidLength();\\n\\n    error NotOwner();\\n\\n    error InvalidWormholeChainId();\\n\\n    error InvalidCallerContext();\\n\\n    /*///////////////////////////////////////////////////////////////\\n                                            ADDRESS\\n    ///////////////////////////////////////////////////////////////*/\\n\\n    error ImplementationMismatch(address implementation, address latestImplementation);\\n\\n    error InvalidWithdrawalAddress(address to);\\n\\n    error NullAddress();\\n\\n    error SameAddress();\\n\\n    error InvalidSolanaAddress();\\n\\n    error AddressAlreadySet();\\n\\n    error InsufficientAllowlistDelay();\\n\\n    /*///////////////////////////////////////////////////////////////\\n                                    AMOUNT / BALANCE\\n    ///////////////////////////////////////////////////////////////*/\\n\\n    error InsufficientBalance();\\n\\n    error InsufficientWithdrawalAmount(uint256 amount);\\n\\n    error InsufficientBalanceForFee(uint256 balance, uint256 fee);\\n\\n    error InvalidNonce(bytes32 nonce);\\n\\n    error ZeroValue();\\n\\n    error AmountDeltaZeroValue();\\n\\n    error DecimalsMoreThan18(uint256 decimals);\\n\\n    error InsufficientBridgeAmount();\\n\\n    error BridgeMaxAmountExceeded();\\n\\n    error ETHTransferFailed();\\n\\n    error OutOfBounds();\\n\\n    /*///////////////////////////////////////////////////////////////\\n                                            ACCOUNT\\n    ///////////////////////////////////////////////////////////////*/\\n\\n    error CreateAccountDisabled();\\n\\n    error InvalidKeysForSalt();\\n\\n    error PredictAddressDisabled();\\n\\n    error FundsRecoveryActivationDeadlinePending();\\n\\n    error InvalidAppAccount();\\n\\n    error InvalidAppBeacon();\\n\\n    /*///////////////////////////////////////////////////////////////\\n                                        KEY MANAGEMENT\\n    ///////////////////////////////////////////////////////////////*/\\n\\n    error InvalidRequest();\\n\\n    error InvalidKeySignature(address from);\\n\\n    error KeyAlreadyInvalid();\\n\\n    error KeyAlreadyValid();\\n\\n    error KeyNotFound();\\n\\n    error CannotRemoveLastKey();\\n\\n    /*///////////////////////////////////////////////////////////////\\n                                     GAS FEE REBATE\\n    ///////////////////////////////////////////////////////////////*/\\n\\n    error InvalidDeductGasFunction(bytes4 sig);\\n\\n    /*///////////////////////////////////////////////////////////////\\n                                FEATURE FLAGS\\n    ///////////////////////////////////////////////////////////////*/\\n\\n    error FundsRecoveryNotActive();\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"paris\",\r\n    \"remappings\": [\r\n      \"@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/\",\r\n      \"@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\r\n      \"@pythnetwork/entropy-sdk-solidity/=node_modules/@pythnetwork/entropy-sdk-solidity/\",\r\n      \"@synthetixio/core-contracts/=node_modules/@synthetixio/core-contracts/\",\r\n      \"@synthetixio/core-modules/=node_modules/@synthetixio/core-modules/\",\r\n      \"@synthetixio/main/=node_modules/@synthetixio/main/\",\r\n      \"@synthetixio/oracle-manager/=node_modules/@synthetixio/oracle-manager/\",\r\n      \"@synthetixio/perps-market/=node_modules/@synthetixio/perps-market/\",\r\n      \"@synthetixio/spot-market/=node_modules/@synthetixio/spot-market/\",\r\n      \"cannon-std/=lib/cannon-std/src/\",\r\n      \"ds-test/=lib/forge-std/lib/ds-test/src/\",\r\n      \"erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/\",\r\n      \"forge-std/=lib/forge-std/src/\",\r\n      \"openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\r\n      \"openzeppelin-contracts/=lib/openzeppelin-contracts/\",\r\n      \"src/=src/\",\r\n      \"test/=test/\",\r\n      \"wormhole-circle-integration/=lib/wormhole-circle-integration/evm/src/\",\r\n      \"wormhole/=lib/wormhole-circle-integration/evm/src/\"\r\n    ],\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"name\":\"AlreadyExists\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DoesNotExist\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"latestImplementation\",\"type\":\"address\"}],\"name\":\"ImplementationMismatch\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"}],\"name\":\"InvalidKeySignature\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NullAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SameAddress\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"circleBridge\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"circleMinter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"defaultDestinationCCTPDomain\",\"type\":\"uint32\"}],\"name\":\"AccountCircleBridgeParamsUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"infinexProtocolConfigBeacon\",\"type\":\"address\"}],\"name\":\"AccountInfinexProtocolBeaconImplementationUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"synthetixInformationBeacon\",\"type\":\"address\"}],\"name\":\"AccountSynthetixInformationBeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"USDC\",\"type\":\"address\"}],\"name\":\"AccountUSDCAddressUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"wormholeCircleBridge\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"defaultDestinationWormholeChainId\",\"type\":\"uint16\"}],\"name\":\"AccountWormholeCircleBridgeParamsUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_address2\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_uint256\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_nonce\",\"type\":\"bytes32\"},{\"internalType\":\"uint32\",\"name\":\"_uint32\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"_bool\",\"type\":\"bool\"},{\"internalType\":\"bytes4\",\"name\":\"_selector\",\"type\":\"bytes4\"}],\"indexed\":false,\"internalType\":\"struct RequestTypes.Request\",\"name\":\"request\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"PayloadProcessed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"TrustedForwarderAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"TrustedForwarderRemoved\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"getCircleBridgeParams\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMaxWithdrawalFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUSDCAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getWormholeCircleBridge\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getWormholeCircleBridgeParams\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"infinexProtocolConfigBeacon\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_key\",\"type\":\"address\"}],\"name\":\"isAuthorizedOperationsParty\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_key\",\"type\":\"address\"}],\"name\":\"isAuthorizedRecoveryParty\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operationKey\",\"type\":\"address\"}],\"name\":\"isValidOperationKey\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recoveryKey\",\"type\":\"address\"}],\"name\":\"isValidRecoveryKey\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sudoKey\",\"type\":\"address\"}],\"name\":\"isValidSudoKey\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateCircleBridgeParams\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateUSDCAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateWormholeCircleBridge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newInfinexProtocolConfigBeacon\",\"type\":\"address\"}],\"name\":\"upgradeProtocolBeaconParameters\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "AccountUtilsModule", "CompilerVersion": "v0.8.21+commit.d9974bed", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "paris", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}