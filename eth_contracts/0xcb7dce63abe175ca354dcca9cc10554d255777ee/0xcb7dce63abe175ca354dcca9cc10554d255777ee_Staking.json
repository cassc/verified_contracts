{"SourceCode": "# @version 0.3.10\r\n\"\"\"\r\n@title Staking\r\n@author 1up\r\n@license GNU AGPLv3\r\n@notice\r\n    Vault with 1:1 of underlying liquid locker token.\r\n    Vote weight increases linearly over a period of 4 epochs.\r\n    Vote weights are snapshotted at the start of the week.\r\n    Deposits can be locked to receive a larger vote weight up front.\r\n    After unstaking the underlying tokens are streamed out over a week.\r\n\"\"\"\r\n\r\nfrom vyper.interfaces import ERC20\r\nfrom vyper.interfaces import ERC4626\r\nimplements: ERC20\r\nimplements: ERC4626\r\n\r\ninterface Rewards:\r\n    def report(_account: address, _amount: uint256, _supply: uint256): nonpayable\r\n\r\nasset: public(immutable(address))\r\nmanagement: public(address)\r\npending_management: public(address)\r\nrewards: public(Rewards)\r\ntotalSupply: public(uint256)\r\nprevious_packed_balances: public(HashMap[address, uint256]) # week | time | balance\r\npacked_balances: public(HashMap[address, uint256]) # week | time | balance\r\npacked_streams: public(HashMap[address, uint256]) # time | total | claimed\r\nunlock_times: public(HashMap[address, uint256])\r\nallowance: public(HashMap[address, HashMap[address, uint256]])\r\n\r\ndecimals: public(constant(uint8)) = 18\r\nname: public(constant(String[21])) = \"Staked 1UP Locked YFI\"\r\nsymbol: public(constant(String[6])) = \"supYFI\"\r\n\r\nevent Transfer:\r\n    sender: indexed(address)\r\n    receiver: indexed(address)\r\n    value: uint256\r\n\r\nevent Approval:\r\n    owner: indexed(address)\r\n    spender: indexed(address)\r\n    value: uint256\r\n\r\nevent Deposit:\r\n    sender: indexed(address)\r\n    owner: indexed(address)\r\n    assets: uint256\r\n    shares: uint256\r\n\r\nevent Withdraw:\r\n    sender: indexed(address)\r\n    receiver: indexed(address)\r\n    owner: indexed(address)\r\n    assets: uint256\r\n    shares: uint256\r\n\r\nevent Lock:\r\n    owner: indexed(address)\r\n    added: uint256\r\n    duration: uint256\r\n\r\nevent SetRewards:\r\n    rewards: address\r\n\r\nevent PendingManagement:\r\n    management: address\r\n\r\nevent SetManagement:\r\n    management: address\r\n\r\nSMALL_MASK: constant(uint256) = 2**32 - 1\r\nBIG_MASK: constant(uint256) = 2**112 - 1\r\nDAY_LENGTH: constant(uint256) = 24 * 60 * 60\r\nWEEK_LENGTH: constant(uint256) = 7 * DAY_LENGTH\r\nRAMP_LENGTH: constant(uint256) = 8 * WEEK_LENGTH\r\nINCREMENT: constant(bool) = True\r\nDECREMENT: constant(bool) = False\r\n\r\n@external\r\ndef __init__(_asset: address):\r\n    \"\"\"\r\n    @notice Constructor\r\n    @param _asset Underlying liquid locker\r\n    \"\"\"\r\n    asset = _asset\r\n    self.management = msg.sender\r\n\r\n@external\r\n@view\r\ndef balanceOf(_account: address) -> uint256:\r\n    \"\"\"\r\n    @notice Get the staking balance of a user\r\n    @param _account User\r\n    @return Staking balance\r\n    \"\"\"\r\n    return self.packed_balances[_account] & BIG_MASK\r\n\r\n@external\r\ndef transfer(_to: address, _value: uint256) -> bool:\r\n    \"\"\"\r\n    @notice Transfer tokens to another user\r\n    @param _to User to transfer tokens to\r\n    @param _value Amount of tokens to transfer\r\n    @return Always True\r\n    \"\"\"\r\n    assert _to != empty(address) and _to != self\r\n\r\n    if _value > 0:\r\n        self._update_balance(_value, msg.sender, DECREMENT)\r\n        self._update_balance(_value, _to, INCREMENT)\r\n\r\n    log Transfer(msg.sender, _to, _value)\r\n    return True\r\n\r\n@external\r\ndef transferFrom(_from: address, _to: address, _value: uint256) -> bool:\r\n    \"\"\"\r\n    @notice Transfer another user's tokens by spending an allowance\r\n    @param _from User to transfer tokens from\r\n    @param _to User to transfer tokens to\r\n    @param _value Amount of tokens to transfer\r\n    @return Always True\r\n    \"\"\"\r\n    assert _to != empty(address) and _to != self\r\n    \r\n    if _value > 0:\r\n        allowance: uint256 = self.allowance[_from][msg.sender]\r\n        if allowance < max_value(uint256):\r\n            self.allowance[_from][msg.sender] = allowance - _value\r\n\r\n        self._update_balance(_value, _from, DECREMENT)\r\n        self._update_balance(_value, _to, INCREMENT)\r\n\r\n    log Transfer(_from, _to, _value)\r\n    return True\r\n\r\n@external\r\ndef approve(_spender: address, _value: uint256) -> bool:\r\n    \"\"\"\r\n    @notice Approve spending of the caller's gauge tokens\r\n    @param _spender User that is allowed to spend caller's tokens\r\n    @param _value Amount of tokens spender is allowed to spend\r\n    @return Always True\r\n    \"\"\"\r\n    assert _spender != empty(address)\r\n\r\n    self.allowance[msg.sender][_spender] = _value\r\n    log Approval(msg.sender, _spender, _value)\r\n    return True\r\n\r\n@view\r\n@external\r\ndef totalAssets() -> uint256:\r\n    \"\"\"\r\n    @notice Get the total amount of assets in the vault\r\n    @return Total amount of assets\r\n    \"\"\"\r\n    return self.totalSupply\r\n\r\n@view\r\n@external\r\ndef convertToShares(_assets: uint256) -> uint256:\r\n    \"\"\"\r\n    @notice Convert an amount of assets to shares\r\n    @param _assets Amount of assets\r\n    @return Amount of shares\r\n    \"\"\"\r\n    return _assets\r\n\r\n@view\r\n@external\r\ndef convertToAssets(_shares: uint256) -> uint256:\r\n    \"\"\"\r\n    @notice Convert an amount of shares to assets\r\n    @param _shares Amount of shares\r\n    @return Amount of assets\r\n    \"\"\"\r\n    return _shares\r\n\r\n@view\r\n@external\r\ndef maxDeposit(_owner: address) -> uint256:\r\n    \"\"\"\r\n    @notice Get the maximum amount of assets a user can deposit\r\n    @param _owner User depositing\r\n    @return Maximum amount of assets that can be deposited\r\n    \"\"\"\r\n    return max_value(uint256)\r\n\r\n@view\r\n@external\r\ndef previewDeposit(_assets: uint256) -> uint256:\r\n    \"\"\"\r\n    @notice Preview a deposit\r\n    @param _assets Amount of assets to be deposited\r\n    @return Equivalent amount of shares to be minted\r\n    \"\"\"\r\n    return _assets\r\n\r\n@external\r\ndef deposit(_assets: uint256, _receiver: address = msg.sender) -> uint256:\r\n    \"\"\"\r\n    @notice Deposit assets\r\n    @param _assets Amount of assets to deposit\r\n    @param _receiver Recipient of the shares\r\n    @return Amount of shares minted\r\n    \"\"\"\r\n    self._deposit(_assets, _receiver)\r\n    return _assets\r\n\r\n@view\r\n@external\r\ndef maxMint(_owner: address) -> uint256:\r\n    \"\"\"\r\n    @notice Get the maximum amount of shares a user can mint\r\n    @param _owner User minting\r\n    @return Maximum amount of shares that can be minted\r\n    \"\"\"\r\n    return max_value(uint256)\r\n\r\n@view\r\n@external\r\ndef previewMint(_shares: uint256) -> uint256:\r\n    \"\"\"\r\n    @notice Preview a mint\r\n    @param _shares Amount of shares to be minted\r\n    @return Equivalent amount of assets to be deposited\r\n    \"\"\"\r\n    return _shares\r\n\r\n@external\r\ndef mint(_shares: uint256, _receiver: address = msg.sender) -> uint256:\r\n    \"\"\"\r\n    @notice Mint shares\r\n    @param _shares Amount of shares to mint\r\n    @param _receiver Recipient of the shares\r\n    @return Amount of assets deposited\r\n    \"\"\"\r\n    self._deposit(_shares, _receiver)\r\n    return _shares\r\n\r\n@view\r\n@external\r\ndef maxWithdraw(_owner: address) -> uint256:\r\n    \"\"\"\r\n    @notice Get the maximum amount of assets a user can withdraw\r\n    @param _owner User withdrawing\r\n    @return Maximum amount of assets that can be withdrawn\r\n    \"\"\"\r\n    return self._withdrawable(_owner)\r\n\r\n@view\r\n@external\r\ndef previewWithdraw(_assets: uint256) -> uint256:\r\n    \"\"\"\r\n    @notice Preview a withdrawal\r\n    @param _assets Amount of assets to be withdrawn\r\n    @return Equivalent amount of shares to be burned\r\n    \"\"\"\r\n    return _assets\r\n\r\n@external\r\ndef withdraw(_assets: uint256, _receiver: address = msg.sender, _owner: address = msg.sender) -> uint256:\r\n    \"\"\"\r\n    @notice Withdraw assets\r\n    @param _assets Amount of assets to withdraw\r\n    @param _receiver Recipient of the assets\r\n    @param _owner Owner of the shares\r\n    @return Amount of shares redeemed\r\n    @dev Requires unstaking before assets become withdrawable over the next week\r\n    \"\"\"\r\n    self._withdraw(_assets, _receiver, _owner)\r\n    return _assets\r\n\r\n@view\r\n@external\r\ndef maxRedeem(_owner: address) -> uint256:\r\n    \"\"\"\r\n    @notice Get the maximum amount of shares a user can redeem\r\n    @param _owner User redeeming\r\n    @return Maximum amount of shares that can be redeemed\r\n    \"\"\"\r\n    return self._withdrawable(_owner)\r\n\r\n@view\r\n@external\r\ndef previewRedeem(_shares: uint256) -> uint256:\r\n    \"\"\"\r\n    @notice Preview a redemption\r\n    @param _shares Amount of shares to be redeemed\r\n    @return Equivalent amount of assets to be withdrawn\r\n    \"\"\"\r\n    return _shares\r\n\r\n@external\r\ndef redeem(_shares: uint256, _receiver: address = msg.sender, _owner: address = msg.sender) -> uint256:\r\n    \"\"\"\r\n    @notice Redeem shares\r\n    @param _shares Amount of shares to redeem\r\n    @param _receiver Recipient of the assets\r\n    @param _owner Owner of the shares\r\n    @return Amount of assets withdrawn\r\n    @dev Requires unstaking before assets become withdrawable over the next week\r\n    \"\"\"\r\n    self._withdraw(_shares, _receiver, _owner)\r\n    return _shares\r\n\r\n@external\r\ndef lock(_duration: uint256 = max_value(uint256)) -> uint256:\r\n    \"\"\"\r\n    @notice Lock all of caller's assets for a duration\r\n    @param _duration Lock duration in seconds\r\n    @return Unlock timestamp\r\n    @dev Locks are capped at 4 epochs\r\n    @dev Affects entire position, even assets staked after the lock was created\r\n    \"\"\"\r\n    old_duration: uint256 = self.unlock_times[msg.sender]\r\n    if old_duration > block.timestamp:\r\n        old_duration -= block.timestamp\r\n    else:\r\n        old_duration = 0\r\n\r\n    current_week: uint256 = block.timestamp / WEEK_LENGTH\r\n    week: uint256 = 0\r\n    time: uint256 = 0\r\n    balance: uint256 = 0\r\n    week, time, balance = self._unpack(self.packed_balances[msg.sender])\r\n    assert balance > 0\r\n\r\n    # snapshot\r\n    if current_week > week:\r\n        self.previous_packed_balances[msg.sender] = self.packed_balances[msg.sender]\r\n\r\n    # dont lock longer than needed\r\n    additional: uint256 = _duration - old_duration\r\n    max_needed: uint256 = RAMP_LENGTH - min(block.timestamp - time, RAMP_LENGTH)\r\n    additional = min(additional, max_needed)\r\n    assert additional > 0\r\n    \r\n    # calculate new timestamp\r\n    time -= additional\r\n\r\n    self.packed_balances[msg.sender] = self._pack(current_week, time, balance)\r\n\r\n    unlock_time: uint256 = block.timestamp + old_duration + additional\r\n    self.unlock_times[msg.sender] = unlock_time\r\n    log Lock(msg.sender, additional, old_duration + additional)\r\n    return unlock_time\r\n\r\n@external\r\ndef unstake(_assets: uint256):\r\n    \"\"\"\r\n    @notice Unstake assets, streaming them out over a week\r\n    @param _assets Amount of assets to unstake\r\n    @dev Adds existing stream to new stream, if applicable\r\n    \"\"\"\r\n    assert _assets > 0\r\n    self._update_balance(_assets, msg.sender, DECREMENT)\r\n    self.totalSupply -= _assets\r\n\r\n    time: uint256 = 0\r\n    total: uint256 = 0\r\n    claimed: uint256 = 0\r\n    time, total, claimed = self._unpack(self.packed_streams[msg.sender])\r\n    self.packed_streams[msg.sender] = self._pack(block.timestamp, total - claimed + _assets, 0)\r\n    log Transfer(msg.sender, empty(address), _assets)\r\n\r\n@external\r\n@view\r\ndef streams(_account: address) -> (uint256, uint256, uint256):\r\n    \"\"\"\r\n    @notice Get a user's stream details\r\n    @param _account User address\r\n    @return Tuple with stream start time, stream amount, claimed amount\r\n    \"\"\"\r\n    return self._unpack(self.packed_streams[_account])\r\n\r\n@external\r\n@view\r\ndef vote_weight(_account: address) -> uint256:\r\n    \"\"\"\r\n    @notice Get account vote weight\r\n    @param _account Account\r\n    @return Vote weight\r\n    @dev Snapshotted at beginning of the week\r\n    \"\"\"\r\n    last_week: uint256 = block.timestamp / WEEK_LENGTH - 1\r\n\r\n    week: uint256 = 0\r\n    time: uint256 = 0\r\n    balance: uint256 = 0\r\n    week, time, balance = self._unpack(self.packed_balances[_account])\r\n\r\n    # snapshot\r\n    if week > last_week:\r\n        week, time, balance = self._unpack(self.previous_packed_balances[_account])\r\n\r\n    if balance == 0:\r\n        return 0\r\n\r\n    time = block.timestamp / WEEK_LENGTH * WEEK_LENGTH - time\r\n    return balance * min(time, RAMP_LENGTH) / RAMP_LENGTH\r\n\r\n@external\r\ndef set_rewards(_rewards: address):\r\n    \"\"\"\r\n    @notice Set staking rewards contract\r\n    @param _rewards Rewards contract\r\n    @dev Can only be called by management\r\n    \"\"\"\r\n    assert msg.sender == self.management\r\n    assert _rewards != empty(address)\r\n    self.rewards = Rewards(_rewards)\r\n    log SetRewards(_rewards)\r\n\r\n@external\r\ndef set_management(_management: address):\r\n    \"\"\"\r\n    @notice \r\n        Set the pending management address.\r\n        Needs to be accepted by that account separately to transfer management over\r\n    @param _management New pending management address\r\n    \"\"\"\r\n    assert msg.sender == self.management\r\n    self.pending_management = _management\r\n    log PendingManagement(_management)\r\n\r\n@external\r\ndef accept_management():\r\n    \"\"\"\r\n    @notice \r\n        Accept management role.\r\n        Can only be called by account previously marked as pending management by current management\r\n    \"\"\"\r\n    assert msg.sender == self.pending_management\r\n    self.pending_management = empty(address)\r\n    self.management = msg.sender\r\n    log SetManagement(msg.sender)\r\n\r\n@internal\r\ndef _deposit(_assets: uint256, _receiver: address):\r\n    \"\"\"\r\n    @notice Update balance and transfer liquid locker tokens in\r\n    \"\"\"\r\n    assert _receiver != empty(address) and _receiver != self\r\n    self._update_balance(_assets, _receiver, INCREMENT)\r\n    self.totalSupply += _assets\r\n\r\n    assert ERC20(asset).transferFrom(msg.sender, self, _assets, default_return_value=True)\r\n    log Deposit(msg.sender, _receiver, _assets, _assets)\r\n    log Transfer(empty(address), _receiver, _assets)\r\n\r\n@internal\r\n@view\r\ndef _withdrawable(_account: address) -> uint256:\r\n    \"\"\"\r\n    @notice Get amount released from unstaking stream\r\n    \"\"\"\r\n    time: uint256 = 0\r\n    total: uint256 = 0\r\n    claimed: uint256 = 0\r\n    time, total, claimed = self._unpack(self.packed_streams[_account])\r\n    if time == 0:\r\n        return 0\r\n    time = min(block.timestamp - time, WEEK_LENGTH)\r\n    return total * time / WEEK_LENGTH - claimed\r\n\r\n@internal\r\ndef _withdraw(_assets: uint256, _receiver: address, _owner: address):\r\n    \"\"\"\r\n    @notice Withdraw from the stream\r\n    \"\"\"\r\n    assert _receiver != empty(address) and _receiver != self\r\n    if _owner != msg.sender:\r\n        allowance: uint256 = self.allowance[_owner][msg.sender]\r\n        if allowance < max_value(uint256):\r\n            self.allowance[_owner][msg.sender] = allowance - _assets\r\n\r\n    time: uint256 = 0\r\n    total: uint256 = 0\r\n    claimed: uint256 = 0\r\n    time, total, claimed = self._unpack(self.packed_streams[_owner])\r\n    assert time > 0\r\n\r\n    claimed += _assets\r\n    claimable: uint256 = min(block.timestamp - time, WEEK_LENGTH)\r\n    claimable = total * claimable / WEEK_LENGTH\r\n    assert claimed <= claimable\r\n\r\n    if claimed < total:\r\n        self.packed_streams[_owner] = self._pack(time, total, claimed)\r\n    else:\r\n        self.packed_streams[_owner] = 0\r\n\r\n    assert ERC20(asset).transfer(_receiver, _assets, default_return_value=True)\r\n    log Withdraw(_owner, _receiver, _owner, _assets, _assets)\r\n\r\n@internal\r\ndef _update_balance(_amount: uint256, _account: address, _increment: bool):\r\n    \"\"\"\r\n    @notice Update balance and time. Supply should be updated _after_ calling this function\r\n    \"\"\"\r\n    lock_duration: uint256 = self.unlock_times[_account]\r\n    if lock_duration > block.timestamp:\r\n        lock_duration -= block.timestamp\r\n    else:\r\n        lock_duration = 0\r\n\r\n    current_week: uint256 = block.timestamp / WEEK_LENGTH\r\n    week: uint256 = 0\r\n    time: uint256 = 0\r\n    balance: uint256 = 0\r\n    week, time, balance = self._unpack(self.packed_balances[_account])\r\n\r\n    # sync rewards\r\n    self.rewards.report(_account, balance, self.totalSupply)\r\n\r\n    if _increment == INCREMENT:\r\n        if time > 0:\r\n            time = min(block.timestamp - time, RAMP_LENGTH)\r\n        # amount-weighted average time\r\n        time = block.timestamp - (balance * time + _amount * lock_duration) / (balance + _amount)\r\n        balance += _amount\r\n    else:\r\n        assert lock_duration == 0\r\n        balance -= _amount\r\n        if balance == 0:\r\n            time = 0\r\n\r\n    # snapshot\r\n    if current_week > week:\r\n        self.previous_packed_balances[_account] = self.packed_balances[_account]\r\n\r\n    self.packed_balances[_account] = self._pack(current_week, time, balance)\r\n\r\n@internal\r\n@pure\r\ndef _pack(_a: uint256, _b: uint256, _c: uint256) -> uint256:\r\n    \"\"\"\r\n    @notice Pack a small value and two big values into a single storage slot\r\n    \"\"\"\r\n    assert _a <= SMALL_MASK and _b <= BIG_MASK and _c <= BIG_MASK\r\n    return (_a << 224) | (_b << 112) | _c\r\n\r\n@internal\r\n@pure\r\ndef _unpack(_packed: uint256) -> (uint256, uint256, uint256):\r\n    \"\"\"\r\n    @notice Unpack a small value and two big values from a single storage slot\r\n    \"\"\"\r\n    return _packed >> 224, (_packed >> 112) & BIG_MASK, _packed & BIG_MASK", "ABI": "[{\"name\":\"Transfer\",\"inputs\":[{\"name\":\"sender\",\"type\":\"address\",\"indexed\":true},{\"name\":\"receiver\",\"type\":\"address\",\"indexed\":true},{\"name\":\"value\",\"type\":\"uint256\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"Approval\",\"inputs\":[{\"name\":\"owner\",\"type\":\"address\",\"indexed\":true},{\"name\":\"spender\",\"type\":\"address\",\"indexed\":true},{\"name\":\"value\",\"type\":\"uint256\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"Deposit\",\"inputs\":[{\"name\":\"sender\",\"type\":\"address\",\"indexed\":true},{\"name\":\"owner\",\"type\":\"address\",\"indexed\":true},{\"name\":\"assets\",\"type\":\"uint256\",\"indexed\":false},{\"name\":\"shares\",\"type\":\"uint256\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"Withdraw\",\"inputs\":[{\"name\":\"sender\",\"type\":\"address\",\"indexed\":true},{\"name\":\"receiver\",\"type\":\"address\",\"indexed\":true},{\"name\":\"owner\",\"type\":\"address\",\"indexed\":true},{\"name\":\"assets\",\"type\":\"uint256\",\"indexed\":false},{\"name\":\"shares\",\"type\":\"uint256\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"Lock\",\"inputs\":[{\"name\":\"owner\",\"type\":\"address\",\"indexed\":true},{\"name\":\"added\",\"type\":\"uint256\",\"indexed\":false},{\"name\":\"duration\",\"type\":\"uint256\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"SetRewards\",\"inputs\":[{\"name\":\"rewards\",\"type\":\"address\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"PendingManagement\",\"inputs\":[{\"name\":\"management\",\"type\":\"address\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"SetManagement\",\"inputs\":[{\"name\":\"management\",\"type\":\"address\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"stateMutability\":\"nonpayable\",\"type\":\"constructor\",\"inputs\":[{\"name\":\"_asset\",\"type\":\"address\"}],\"outputs\":[]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"balanceOf\",\"inputs\":[{\"name\":\"_account\",\"type\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"transfer\",\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"transferFrom\",\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"approve\",\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"totalAssets\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"convertToShares\",\"inputs\":[{\"name\":\"_assets\",\"type\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"convertToAssets\",\"inputs\":[{\"name\":\"_shares\",\"type\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"maxDeposit\",\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"previewDeposit\",\"inputs\":[{\"name\":\"_assets\",\"type\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"deposit\",\"inputs\":[{\"name\":\"_assets\",\"type\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"deposit\",\"inputs\":[{\"name\":\"_assets\",\"type\":\"uint256\"},{\"name\":\"_receiver\",\"type\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"maxMint\",\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"previewMint\",\"inputs\":[{\"name\":\"_shares\",\"type\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"mint\",\"inputs\":[{\"name\":\"_shares\",\"type\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"mint\",\"inputs\":[{\"name\":\"_shares\",\"type\":\"uint256\"},{\"name\":\"_receiver\",\"type\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"maxWithdraw\",\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"previewWithdraw\",\"inputs\":[{\"name\":\"_assets\",\"type\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"withdraw\",\"inputs\":[{\"name\":\"_assets\",\"type\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"withdraw\",\"inputs\":[{\"name\":\"_assets\",\"type\":\"uint256\"},{\"name\":\"_receiver\",\"type\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"withdraw\",\"inputs\":[{\"name\":\"_assets\",\"type\":\"uint256\"},{\"name\":\"_receiver\",\"type\":\"address\"},{\"name\":\"_owner\",\"type\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"maxRedeem\",\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"previewRedeem\",\"inputs\":[{\"name\":\"_shares\",\"type\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"redeem\",\"inputs\":[{\"name\":\"_shares\",\"type\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"redeem\",\"inputs\":[{\"name\":\"_shares\",\"type\":\"uint256\"},{\"name\":\"_receiver\",\"type\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"redeem\",\"inputs\":[{\"name\":\"_shares\",\"type\":\"uint256\"},{\"name\":\"_receiver\",\"type\":\"address\"},{\"name\":\"_owner\",\"type\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"lock\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"lock\",\"inputs\":[{\"name\":\"_duration\",\"type\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"unstake\",\"inputs\":[{\"name\":\"_assets\",\"type\":\"uint256\"}],\"outputs\":[]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"streams\",\"inputs\":[{\"name\":\"_account\",\"type\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"vote_weight\",\"inputs\":[{\"name\":\"_account\",\"type\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"set_rewards\",\"inputs\":[{\"name\":\"_rewards\",\"type\":\"address\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"set_management\",\"inputs\":[{\"name\":\"_management\",\"type\":\"address\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"accept_management\",\"inputs\":[],\"outputs\":[]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"asset\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"management\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"pending_management\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"rewards\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"totalSupply\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"previous_packed_balances\",\"inputs\":[{\"name\":\"arg0\",\"type\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"packed_balances\",\"inputs\":[{\"name\":\"arg0\",\"type\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"packed_streams\",\"inputs\":[{\"name\":\"arg0\",\"type\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"unlock_times\",\"inputs\":[{\"name\":\"arg0\",\"type\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"allowance\",\"inputs\":[{\"name\":\"arg0\",\"type\":\"address\"},{\"name\":\"arg1\",\"type\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"decimals\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"name\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"string\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"symbol\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"string\"}]}]", "ContractName": "Staking", "CompilerVersion": "vyper:0.3.10", "OptimizationUsed": "0", "Runs": "0", "ConstructorArguments": "00000000000000000000000095710bde45c8d384a976cc58cc7a7e489576b098", "EVMVersion": "Default", "Library": "", "LicenseType": "GNU AGPLv3", "Proxy": "0", "Implementation": "", "SwarmSource": ""}