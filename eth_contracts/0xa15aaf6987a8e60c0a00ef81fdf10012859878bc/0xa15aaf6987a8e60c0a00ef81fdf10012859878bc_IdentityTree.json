{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/identityTree/IdentityTree.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.14;\\n\\nimport \\\"../interfaces/IIdentityTree.sol\\\";\\nimport \\\"../degradable/Degradable.sol\\\";\\nimport \\\"../lib/Bytes32Set.sol\\\";\\n\\n/**\\n @notice This contract holds the history of identity tree merkle roots announced by the aggregator. \\n Each root has an associated birthday that records when it was created. Zero-knowledge proofs rely\\n on these roots. Claims supported by proofs are considered to be of the same age as the roots they\\n rely on for validity. \\n */\\n\\ncontract IdentityTree is IIdentityTree, Degradable { \\n\\n    using Bytes32Set for Bytes32Set.Set;\\n\\n    uint256 private constant INFINITY = ~uint256(0);\\n    address private constant NULL_ADDRESS = address(0);\\n    bytes32 private constant NULL_BYTES32 = bytes32(0);\\n    bytes32 public constant override ROLE_AGGREGATOR = keccak256(\\\"aggregator role\\\");\\n\\n    Bytes32Set.Set merkleRootSet;\\n\\n    modifier onlyAggregator() {\\n        _checkRole(ROLE_AGGREGATOR, _msgSender(), \\\"IdentityTree::onlyAggregator\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @param trustedForwarder_ Contract address that is allowed to relay message signers.\\n     * @param policyManager_ The policy manager contract address.\\n     * @param maximumConsentPeriod_ The maximum allowable user consent period.\\n     */\\n    constructor(\\n        address trustedForwarder_,\\n        address policyManager_,\\n        uint256 maximumConsentPeriod_\\n    ) \\n        Degradable(\\n            trustedForwarder_,\\n            policyManager_,\\n            maximumConsentPeriod_\\n        ) \\n    {\\n        _grantRole(DEFAULT_ADMIN_ROLE, _msgSender());\\n        emit Deployed(_msgSender(), trustedForwarder_, policyManager_, maximumConsentPeriod);\\n    }\\n\\n    /**\\n     * @notice The aggregator can set roots with non-zero birthdays.\\n     * @dev Explicit birthday declaration ensures that root age is not extended by mining delays. \\n     * @param merkleRoot The merkleRoot to set.\\n     * @param birthday The timestamp of the merkleRoot. 0 to invalidate the root.\\n     */\\n    function setMerkleRootBirthday(bytes32 merkleRoot, uint256 birthday) external override onlyAggregator {\\n        if (birthday > block.timestamp)\\n            revert Unacceptable({\\n                reason: \\\"birthday cannot be in the future\\\"\\n            });\\n        if (merkleRoot == NULL_BYTES32)\\n            revert Unacceptable({\\n                reason: \\\"merkle root cannot be empty\\\"\\n            });\\n        if (birthday < lastUpdate) \\n            revert Unacceptable({\\n                reason: \\\"birthday precedes previously recorded birthday\\\"\\n            });\\n        _recordUpdate(merkleRoot, birthday);\\n        merkleRootSet.insert(merkleRoot, \\\"IdentityTree::setMerkleRoot\\\");\\n        emit SetMerkleRootBirthday(merkleRoot, birthday);\\n    }\\n\\n    /**\\n     * @notice Inspect the Identity Tree\\n     * @dev Use static calls to inspect.\\n     * @param observer The observer for degradation mitigation consent. \\n     * @param merkleRoot The merkle root to inspect. \\n     * @param admissionPolicyId The admission policy for the credential to inspect.\\n     * @return passed True if a valid merkle root exists or if mitigation measures are applicable.\\n     */\\n    function checkRoot(\\n        address observer, \\n        bytes32 merkleRoot,\\n        uint32 admissionPolicyId\\n    ) external override returns (bool passed) {\\n        \\n        passed = _checkKey(\\n            observer,\\n            merkleRoot,\\n            admissionPolicyId\\n        );\\n    }\\n\\n    /**\\n     * @return count The number of merkle roots recorded since the beginning\\n     */\\n    function merkleRootCount() public view override returns (uint256 count) {\\n        count = merkleRootSet.count();\\n    }\\n\\n    /**\\n     * @notice Enumerate the recorded merkle roots.\\n     * @param index Row to return.\\n     * @return merkleRoot The root stored at the row.\\n     */\\n    function merkleRootAtIndex(uint256 index) external view override returns (bytes32 merkleRoot) {\\n        if (index >= merkleRootSet.count())\\n            revert Unacceptable({\\n                reason: \\\"index\\\"\\n            });\\n        merkleRoot = merkleRootSet.keyAtIndex(index);\\n    }\\n\\n    /**\\n     * @notice Check for existence in history.\\n     * @param merkleRoot The root to check.\\n     * @return isIndeed True if the root has been recorded.\\n     */\\n    function isMerkleRoot(bytes32 merkleRoot) external view override returns (bool isIndeed) {\\n        isIndeed = merkleRootSet.exists(merkleRoot);\\n    }\\n\\n    /**\\n     @notice Return the lastest merkle root recorded. \\n     @return root The latest merkle root recorded.\\n     */\\n    function latestRoot() external view override returns (bytes32 root) {\\n        if (merkleRootSet.count() > 0) {\\n            root= merkleRootSet.keyAtIndex(merkleRootSet.count() - 1);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IIdentityTree.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.14;\\n\\ninterface IIdentityTree {\\n\\n    event Deployed(\\n        address admin, \\n        address trustedForwarder_, \\n        address policyManager_, \\n        uint256 maximumConsentPeriod);\\n    \\n    event SetMerkleRootBirthday(bytes32 merkleRoot, uint256 birthday);\\n\\n    struct PolicyMitigation {\\n        uint256 mitigationFreshness;\\n        uint256 degradationPeriod;\\n    }\\n\\n    function ROLE_AGGREGATOR() external view returns (bytes32);\\n   \\n    function setMerkleRootBirthday(bytes32 root, uint256 birthday) external;\\n\\n    function checkRoot(\\n        address observer, \\n        bytes32 merkleRoot,\\n        uint32 admissionPolicyId\\n    ) external returns (bool passed);\\n\\n    function merkleRootCount() external view returns (uint256 count);\\n\\n    function merkleRootAtIndex(uint256 index) external view returns (bytes32 merkleRoot);\\n\\n    function isMerkleRoot(bytes32 merkleRoot) external view returns (bool isIndeed);\\n\\n    function latestRoot() external view returns (bytes32 root);\\n}\\n\"\r\n    },\r\n    \"contracts/degradable/Degradable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.14;\\n\\nimport \\\"../interfaces/IDegradable.sol\\\";\\nimport \\\"../interfaces/IPolicyManager.sol\\\";\\nimport \\\"../consent/Consent.sol\\\";\\n\\n/**\\n * @title Degradable\\n * @dev A contract that allows services to specify how to mitigate service interuptions\\n * using policy-specific parameters.\\n */\\n\\ncontract Degradable is IDegradable, Consent {\\n    uint256 private constant FIRST_CONFIGURABLE_POLICY = 1;\\n    uint256 private constant MAX_DEGRATION_PERIOD = 60 days;\\n    uint256 private constant MAX_DEGRATION_FRESHNESS_PERIOD = 365 days * 50;\\n    uint256 private constant MAX_CONSENT_DEADLINE = 10 days;\\n    address private constant NULL_ADDRESS = address(0);\\n\\n    bytes32 public constant override ROLE_SERVICE_SUPERVISOR = keccak256(abi.encodePacked(\\\"supervisor\\\"));\\n    uint256 public constant override defaultDegradationPeriod = 7 days;\\n    uint256 public constant override defaultFreshnessPeriod = 30 days;\\n    address public immutable override policyManager;\\n    uint256 public override lastUpdate;\\n\\n    /**\\n     * @dev Mapping of storage subjects to their associated update timestamps.\\n     */\\n    mapping(bytes32 => uint256) public override subjectUpdates;\\n    \\n    /**\\n     * @dev Mapping of policy IDs to their associated mitigation parameters.\\n     */\\n    mapping(uint32 => MitigationParameters) private _mitigationParameters;\\n\\n    /**\\n     * @dev Modifier that checks if the caller has the policy admin or supervisor role.\\n     * @param policyId The ID of the policy.\\n     */\\n    modifier onlyPolicyAdminOrSupervisor(uint32 policyId) {\\n        if (!hasRole(ROLE_SERVICE_SUPERVISOR, _msgSender())) {\\n            bytes32 role = bytes32(uint256(uint32(policyId)));\\n            if (!IPolicyManager(policyManager).hasRole(role, _msgSender())) {\\n                revert Unauthorized({\\n                    sender: _msgSender(),\\n                    module: \\\"Degradable\\\",\\n                    method: \\\"_checkRole\\\",\\n                    role: role,\\n                    reason: \\\"sender does not have the required role\\\",\\n                    context: \\\"Degradable:onlyPolicyAdminOrSupervisor\\\"\\n                });\\n            }\\n        }\\n        _;\\n    }\\n\\n    /**\\n     * @param trustedForwarder Address of the trusted forwarder contract.\\n     * @param policyManager_ Address of the policy manager contract.\\n     * @param maximumConsentPeriod_ Maximum consent duration a user will be allowed to grant.\\n     */\\n    constructor(\\n        address trustedForwarder,\\n        address policyManager_,\\n        uint256 maximumConsentPeriod_\\n    ) Consent(trustedForwarder, maximumConsentPeriod_) {\\n        if (trustedForwarder == NULL_ADDRESS) revert Unacceptable({ reason: \\\"trustedForwarder cannot be empty\\\" });\\n        if (policyManager_ == NULL_ADDRESS) revert Unacceptable({ reason: \\\"policyManager_ cannot be empty\\\" });\\n        policyManager = policyManager_;\\n    }\\n\\n    /**\\n     * @notice Record the timestamp of the last update to the contract.\\n     * @dev Must be called by derived contracts.\\n     * @param subject The subject to update.\\n     * @param time The time to record.\\n     */\\n    function _recordUpdate(address subject, uint256 time) internal {\\n        _recordUpdate(bytes32(uint256(uint160(subject))), time);\\n    }\\n\\n    /**\\n     * @notice Record the timestamp of the last update to the contract.\\n     * @dev Must be called by derived contracts.\\n     * @param subject The subject to update.\\n     * @param time The time to record.\\n     */\\n    function _recordUpdate(bytes32 subject, uint256 time) internal {\\n        if (time > block.timestamp) revert Unacceptable({ reason: \\\"time must be in the past\\\" });\\n        if (subjectUpdates[subject] > time) revert Unacceptable({ reason: \\\"time is older than existing update\\\" });\\n        if (time > lastUpdate) lastUpdate = time;\\n        subjectUpdates[subject] = time;\\n    }\\n\\n    /**\\n     * @dev Set the mitigation parameters for a policy.\\n     * @param policyId The ID of the policy.\\n     * @param degradationPeriod_ The time period after which the service is considered degraded.\\n     * @param degradationFreshness_ Used by derived service contracts to include or exclude data that was recorded\\n     * before the service fell into the degraded state.\\n     */\\n    function setPolicyParameters(\\n        uint32 policyId,\\n        uint256 degradationPeriod_,\\n        uint256 degradationFreshness_\\n    ) external override onlyPolicyAdminOrSupervisor(policyId) {\\n        if (policyId < FIRST_CONFIGURABLE_POLICY)\\n            revert Unacceptable({ reason: \\\"Cannot configure genesis policies 0 and 1\\\" });\\n        // acceptable range is 0 to very large\\n        if (degradationPeriod_ > MAX_DEGRATION_PERIOD)\\n            revert Unacceptable({ reason: \\\"degradationPeriod cannot exceed 60 days\\\" });\\n        if (degradationFreshness_ > MAX_DEGRATION_FRESHNESS_PERIOD)\\n            revert Unacceptable({ reason: \\\"degradationFreshness cannot exceed 50 years\\\" });\\n        _mitigationParameters[policyId] = MitigationParameters({\\n            degradationPeriod: degradationPeriod_,\\n            degradationFreshness: degradationFreshness_\\n        });\\n        emit SetPolicyParameters(_msgSender(), policyId, degradationPeriod_, degradationFreshness_);\\n    }\\n\\n    /**\\n     * @notice Check the subjects's last recorded update and compare to policy ttl, with mitigation.\\n     * @dev Fallback to mitigation measures if acceptable. Use staticCall to inspect.\\n     * @param observer The user who must consent to reliance on degraded services.\\n     * @param subject The subject to inspect.\\n     * @param policyId PolicyId to consider for possible mitigation.\\n     */\\n    function _checkKey(address observer, address subject, uint32 policyId) internal returns (bool pass) {\\n        pass = _checkKey(observer, bytes32(uint256(uint160(subject))), policyId);\\n    }\\n\\n    /**\\n     * @notice Check the subject's last recorded update and compare to policy ttl, with mitigation.\\n     * @dev Fallback to mitigation measures if acceptable. Use staticCall to inspect.\\n     * @param observer The user who must consent to reliance on degraded services.\\n     * @param subject The subject to inspect.\\n     * @param policyId PolicyId to consider for possible mitigation.\\n     */\\n    function _checkKey(address observer, bytes32 subject, uint32 policyId) internal returns (bool pass) {\\n        uint256 time = block.timestamp;\\n        uint256 lastSubjectUpdate = subjectUpdates[subject];\\n\\n        // normal operations\\n        uint256 ttl = IPolicyManager(policyManager).policyTtl(policyId);\\n        if (time <= lastSubjectUpdate + ttl) return true;\\n\\n        // check for mitigation\\n        pass = _canMitigate(observer, policyId, time, lastSubjectUpdate);\\n    }\\n\\n    /**\\n     * @notice A Degradable service implments a compromised process.\\n     * @dev Must consult user Consent and Policy parameters. Must return false unless degraded.\\n     * Use staticCall to inspect.\\n     * @param observer The user who must consent to reliance on degraded services.\\n     * @param subject The topic to inspect.\\n     * @param policyId The policyId for mitigation parameters.\\n     */\\n    function canMitigate(\\n        address observer,\\n        bytes32 subject,\\n        uint32 policyId\\n    ) public view virtual override returns (bool canIndeed) {\\n        canIndeed = _canMitigate(observer, policyId, block.timestamp, subjectUpdates[subject]);\\n    }\\n\\n    /**\\n     * @notice A Degradable service implments a compromised process.\\n     * @dev Must consult user Consent and Policy parameters. Must return false unless degraded.\\n     * @param observer The user who must consent to reliance on degraded services.\\n     * @param policyId The policyId for mitigation parameters.\\n     * @param time Derived contracts and callers provide current blocktime for comparison.\\n     * @param subjectUpdated Derived contracts and callers provide last subject update.\\n     */\\n    function _canMitigate(\\n        address observer,\\n        uint32 policyId,\\n        uint256 time,\\n        uint256 subjectUpdated\\n    ) internal view returns (bool canIndeed) {\\n        if (!_isDegraded(policyId, time)) return false;\\n        if (!_isMitigationQualified(subjectUpdated, policyId)) return false;\\n        if (userConsentDeadlines[observer] < time) return false;\\n        canIndeed = true;\\n    }\\n\\n    /**\\n     * @notice A service is degraded if there has been no update for longer than the degradation period.\\n     * @param policyId The policyId to inspect.\\n     * @return isIndeed True if the service is considered degraded by the Policy.\\n     */\\n    function isDegraded(uint32 policyId) public view override returns (bool isIndeed) {\\n        isIndeed = _isDegraded(policyId, block.timestamp);\\n    }\\n\\n    /**\\n     * @notice A service is degraded if there has been no update for longer than the degradation period.\\n     * @param policyId The policyId to inspect.\\n     * @param time Time to compare.\\n     * @return isIndeed True if the service is considered degraded by the Policy.\\n     */\\n    function _isDegraded(uint32 policyId, uint256 time) internal view returns (bool isIndeed) {\\n        if (lastUpdate == 0) return false;\\n        uint256 policyDegradationPeriod = _mitigationParameters[policyId].degradationPeriod;\\n        isIndeed = (policyDegradationPeriod == 0)\\n            ? time > lastUpdate + defaultDegradationPeriod\\n            : time > lastUpdate + policyDegradationPeriod;\\n    }\\n\\n    /**\\n     * @notice Evaluate if existing services records can be used for mitigation measures.\\n     * @param subject Key to inspect.\\n     * @param policyId Policy to inspect for mitigation parameters.\\n     * @return qualifies True if the birthday is after the cutoff deadline for the service set by the Policy admin.\\n     */\\n    function isMitigationQualified(bytes32 subject, uint32 policyId) public view override returns (bool qualifies) {\\n        qualifies = _isMitigationQualified(subjectUpdates[subject], policyId);\\n    }\\n\\n    /**\\n     * @notice Evaluate if existing services records can be used for mitigation measures.\\n     * @param lastSubjectUpdate Last recorded update for the subject.\\n     * @param policyId Policy to inspect for mitigation parameters.\\n     * @return qualifies True if the subject update time is after the mitigation cutoff  for the\\n     * service set by the Policy admin.\\n     */\\n    function _isMitigationQualified(uint256 lastSubjectUpdate, uint32 policyId) internal view returns (bool qualifies) {\\n        qualifies = lastSubjectUpdate >= mitigationCutoff(policyId);\\n    }\\n\\n    /**\\n     * @notice The degradation period is maximum interval between updates before the policy considers the\\n     * service degraded.\\n     * @param policyId The policyId to inspect.\\n     * @return inSeconds The degradation period for the policy.\\n     */\\n    function degradationPeriod(uint32 policyId) public view override returns (uint256 inSeconds) {\\n        if(!IPolicyManager(policyManager).isPolicy(policyId)) revert Unacceptable({ reason: \\\"unknown policy\\\" });\\n        uint256 policyDegradationPeriod = _mitigationParameters[policyId].degradationPeriod;\\n        inSeconds = (policyDegradationPeriod == 0) ? defaultDegradationPeriod : policyDegradationPeriod;\\n    }\\n\\n    /**\\n     * @notice A service may implement a mitigation strategy to employ while the service is degraded.\\n     * @dev Service mitigations can use this parameter.\\n     * @param policyId The policyId to inspect.\\n     * @return inSeconds The freshness period for the policy.\\n     */\\n    function degradationFreshness(uint32 policyId) public view override returns (uint256 inSeconds) {\\n        if(!IPolicyManager(policyManager).isPolicy(policyId)) revert Unacceptable({ reason: \\\"unknown policy\\\" });\\n        uint256 policyDegradationFreshness = _mitigationParameters[policyId].degradationFreshness;\\n        inSeconds = (policyDegradationFreshness == 0) ? defaultFreshnessPeriod : policyDegradationFreshness;\\n    }\\n\\n    /**\\n     * @notice Service degradation mitigation measures depend on the oldest acceptable update.\\n     * @param policyId The policyId to consult for a cutoff time.\\n     * @return cutoffTime The oldest update that will be useable for mitigation measures.\\n     */\\n    function mitigationCutoff(uint32 policyId) public view override returns (uint256 cutoffTime) {\\n        uint256 _degradationFreshness = degradationFreshness(policyId);\\n        if (lastUpdate == 0) return block.timestamp;\\n        if (_degradationFreshness > lastUpdate) {\\n            return 0;\\n        } else {\\n            return lastUpdate - _degradationFreshness;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/lib/Bytes32Set.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.14;\\n\\n/**\\n * @notice Key sets with enumeration. Uses mappings for random and existence checks\\n * and dynamic arrays for enumeration. Key uniqueness is enforced.\\n * @dev This implementation has deletion disabled (removed) because doesn't require it. Therefore, keys\\n are organized in order of insertion.\\n */\\n\\nlibrary Bytes32Set {\\n\\n    struct Set {\\n        mapping(bytes32 => uint256) keyPointers;\\n        bytes32[] keyList;\\n    }\\n\\n    string private constant MODULE = \\\"Bytes32Set\\\";\\n\\n    error Bytes32SetConsistency(string module, string method, string reason, string context);\\n\\n    /**\\n     * @notice Insert a key to store.\\n     * @dev Duplicate keys are not permitted.\\n     * @param self A Set struct\\n     * @param key A value in the Set.\\n     * @param context A message string about interpretation of the issue. Normally the calling function.\\n     */\\n    function insert(\\n        Set storage self,\\n        bytes32 key,\\n        string memory context\\n    ) internal {\\n        if (exists(self, key))\\n            revert Bytes32SetConsistency({\\n                module: MODULE,\\n                method: \\\"insert\\\",\\n                reason: \\\"exists\\\",\\n                context: context\\n            });\\n        self.keyPointers[key] = self.keyList.length;\\n        self.keyList.push(key);\\n    }\\n\\n\\n    /**\\n     * @notice Remove a key from the store.\\n     * @dev The key to remove must exist.\\n     * @param self A Set struct\\n     * @param key An address to remove from the Set.\\n     * @param context A message string about interpretation of the issue. Normally the calling function.\\n     */\\n    function remove(\\n        Set storage self,\\n        bytes32 key,\\n        string memory context\\n    ) internal {\\n        if (!exists(self, key))\\n            revert Bytes32SetConsistency({\\n                module: MODULE,\\n                method: \\\"remove\\\",\\n                reason: \\\"does not exist\\\",\\n                context: context\\n            });\\n        bytes32 keyToMove = self.keyList[count(self) - 1];\\n        uint256 rowToReplace = self.keyPointers[key];\\n        self.keyPointers[keyToMove] = rowToReplace;\\n        self.keyList[rowToReplace] = keyToMove;\\n        delete self.keyPointers[key];\\n        self.keyList.pop();\\n    }\\n\\n    /**\\n     * @notice Count the keys.\\n     * @param self A Set struct\\n     * @return uint256 Length of the `keyList` which is the count of keys contained in the Set.\\n     */\\n    function count(Set storage self) internal view returns (uint256) {\\n        return (self.keyList.length);\\n    }\\n\\n    /**\\n     * @notice Check if a key exists in the Set.\\n     * @param self A Set struct\\n     * @param key A key to look for.\\n     * @return bool True if the key exists in the Set, otherwise false.\\n     */\\n    function exists(Set storage self, bytes32 key) internal view returns (bool) {\\n        if (self.keyList.length == 0) return false;\\n        return self.keyList[self.keyPointers[key]] == key;\\n    }\\n\\n    /**\\n     * @notice Retrieve an bytes32 by its position in the Set. Use for enumeration.\\n     * @param self A Set struct\\n     * @param index The position in the Set to inspect.\\n     * @return bytes32 The key stored in the Set at the index position.\\n     */\\n    function keyAtIndex(Set storage self, uint256 index) internal view returns (bytes32) {\\n        return self.keyList[index];\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IDegradable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.14;\\n\\ninterface IDegradable {\\n\\n    event SetPolicyParameters(\\n        address indexed admin, \\n        uint32 indexed policyId, \\n        uint256 degradationPeriod, \\n        uint256 degradationFreshness);\\n\\n    struct MitigationParameters {\\n        uint256 degradationPeriod;\\n        uint256 degradationFreshness;\\n    }\\n\\n    function ROLE_SERVICE_SUPERVISOR() external view returns (bytes32);\\n\\n    function defaultDegradationPeriod() external view returns (uint256);\\n\\n    function defaultFreshnessPeriod() external view returns (uint256);\\n\\n    function policyManager() external view returns (address);\\n\\n    function lastUpdate() external view returns (uint256);\\n\\n    function subjectUpdates(bytes32 subject) external view returns (uint256 timestamp);\\n\\n    function setPolicyParameters(\\n        uint32 policyId,\\n        uint256 degradationPeriod,\\n        uint256 degradationFreshness\\n    ) external;\\n\\n    function canMitigate(\\n        address observer, \\n        bytes32 subject, \\n        uint32 policyId\\n    ) external view returns (bool canIndeed) ;\\n\\n    function isDegraded(uint32 policyId) external view returns (bool isIndeed);\\n\\n    function isMitigationQualified(\\n        bytes32 subject,\\n        uint32 policyId\\n    ) external view returns (bool qualifies);\\n\\n    function degradationPeriod(uint32 policyId) external view returns (uint256 inSeconds);\\n\\n    function degradationFreshness(uint32 policyId) external view returns (uint256 inSeconds);\\n\\n    function mitigationCutoff(uint32 policyId) external view returns (uint256 cutoffTime);\\n}\"\r\n    },\r\n    \"contracts/interfaces/IPolicyManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.14;\\n\\nimport \\\"../lib/PolicyStorage.sol\\\";\\n\\ninterface IPolicyManager {\\n\\n    event PolicyManagerDeployed(\\n        address deployer, \\n        address trustedForwarder, \\n        address ruleRegistry);\\n    \\n    event PolicyManagerInitialized(address admin);\\n\\n    event CreatePolicy(\\n        address indexed owner,\\n        uint32 indexed policyId,\\n        PolicyStorage.PolicyScalar policyScalar,\\n        address[] attestors,\\n        address[] walletChecks,\\n        bytes32 policyOwnerRole,\\n        bytes32 policyUserAdminRole\\n    );\\n\\n    event DisablePolicy(address user, uint32 policyId);\\n\\n    event UpdatePolicyScalar(\\n        address indexed owner,\\n        uint32 indexed policyId,\\n        PolicyStorage.PolicyScalar policyScalar,\\n        uint256 deadline);\\n\\n    event UpdatePolicyDescription(address indexed owner, uint32 indexed policyId, string description, uint256 deadline);\\n    \\n    event UpdatePolicyRuleId(address indexed owner, uint32 indexed policyId, bytes32 indexed ruleId, uint256 deadline);\\n\\n    event UpdatePolicyTtl(address indexed owner, uint32 indexed policyId, uint128 ttl, uint256 deadline);\\n\\n    event UpdatePolicyGracePeriod(\\n        address indexed owner, \\n        uint32 indexed policyId, \\n        uint128 gracePeriod, \\n        uint256 deadline);\\n\\n    event UpdatePolicyLock(address indexed owner, uint32 indexed policyId, bool locked, uint256 deadline);\\n\\n    event UpdatePolicyAllowApprovedCounterparties(\\n        address indexed owner, \\n        uint32 indexed policyId, \\n        bool allowApprovedCounterparties, \\n        uint256 deadline);\\n\\n    event UpdatePolicyDisablementPeriod(\\n        address indexed admin, \\n        uint32 indexed policyId, \\n        uint256 disablementPeriod, \\n        uint256 deadline\\n    );\\n\\n    event PolicyDisabled(address indexed sender, uint32 indexed policyId);\\n\\n    event UpdatePolicyDeadline(address indexed owner, uint32 indexed policyId, uint256 deadline);\\n\\n    event AddPolicyAttestors(\\n        address indexed owner,\\n        uint32 indexed policyId,\\n        address[] attestors,\\n        uint256 deadline\\n    );\\n    \\n    event RemovePolicyAttestors(\\n        address indexed owner,\\n        uint32 indexed policyId,\\n        address[] attestor,\\n        uint256 deadline\\n    );\\n\\n    event AddPolicyWalletChecks(\\n        address indexed owner,\\n        uint32 indexed policyId,\\n        address[] walletChecks,\\n        uint256 deadline\\n    );\\n\\n    event RemovePolicyWalletChecks(\\n        address indexed owner,\\n        uint32 indexed policyId,\\n        address[] walletChecks,\\n        uint256 deadline\\n    );\\n\\n    event AddPolicyBackdoor(\\n        address indexed owner,\\n        uint32 indexed policyId,\\n        bytes32 backdoorId,\\n        uint256 deadline\\n    );\\n\\n    event RemovePolicyBackdoor(\\n        address indexed owner,\\n        uint32 indexed policyId,\\n        bytes32 backdoorId,\\n        uint256 deadline\\n    );  \\n\\n    event AdmitAttestor(address indexed admin, address indexed attestor, string uri);\\n    \\n    event UpdateAttestorUri(address indexed admin, address indexed attestor, string uri);\\n    \\n    event RemoveAttestor(address indexed admin, address indexed attestor);\\n\\n    event AdmitWalletCheck(address indexed admin, address indexed walletCheck);\\n\\n    event RemoveWalletCheck(address indexed admin, address indexed walletCheck);\\n\\n    event AdmitBackdoor(address indexed admin, bytes32 id, uint256[2] pubKey);\\n\\n    event MinimumPolicyDisablementPeriodUpdated(uint256 newPeriod);\\n\\n    function ROLE_POLICY_CREATOR() external view returns (bytes32);\\n\\n    function ROLE_GLOBAL_ATTESTOR_ADMIN() external view returns (bytes32);\\n\\n    function ROLE_GLOBAL_WALLETCHECK_ADMIN() external view returns (bytes32);\\n\\n    function ROLE_GLOBAL_VALIDATION_ADMIN() external view returns (bytes32);\\n\\n    function ROLE_GLOBAL_BACKDOOR_ADMIN() external view returns (bytes32);\\n\\n    function ruleRegistry() external view returns (address);\\n\\n    function init() external;\\n\\n    function createPolicy(\\n        PolicyStorage.PolicyScalar calldata policyScalar,\\n        address[] calldata attestors,\\n        address[] calldata walletChecks\\n    ) external returns (uint32 policyId, bytes32 policyOwnerRoleId, bytes32 policyUserAdminRoleId);\\n\\n    function disablePolicy(uint32 policyId) external;\\n\\n    function updatePolicyScalar(\\n        uint32 policyId,\\n        PolicyStorage.PolicyScalar calldata policyScalar,\\n        uint256 deadline\\n    ) external;\\n\\n    function updatePolicyDescription(uint32 policyId, string memory descriptionUtf8, uint256 deadline) external;\\n\\n    function updatePolicyRuleId(uint32 policyId, bytes32 ruleId, uint256 deadline) external;\\n\\n    function updatePolicyTtl(uint32 policyId, uint32 ttl, uint256 deadline) external;\\n\\n    function updatePolicyGracePeriod(uint32 policyId, uint32 gracePeriod, uint256 deadline) external;\\n\\n    function updatePolicyAllowApprovedCounterparties(\\n        uint32 policyId, \\n        bool allowApprovedCounterparties,uint256 deadline\\n    ) external;\\n    \\n    function updatePolicyLock(uint32 policyId, bool locked, uint256 deadline) external;\\n\\n    function updatePolicyDisablementPeriod(uint32 policyId, uint256 disablementPeriod, uint256 deadline) external;\\n\\n    function setDeadline(uint32 policyId, uint256 deadline) external;\\n\\n    function addPolicyAttestors(uint32 policyId, address[] calldata attestors, uint256 deadline) external;\\n\\n    function removePolicyAttestors(uint32 policyId, address[] calldata attestors, uint256 deadline) external;\\n\\n    function addPolicyWalletChecks(uint32 policyId, address[] calldata walletChecks, uint256 deadline) external;\\n\\n    function removePolicyWalletChecks(uint32 policyId, address[] calldata walletChecks, uint256 deadline) external;\\n\\n    function addPolicyBackdoor(uint32 policyId, bytes32 backdoorId, uint256 deadline) external;\\n\\n    function removePolicyBackdoor(uint32 policyId, bytes32 backdoorId, uint256 deadline) external;\\n\\n    function admitAttestor(address attestor, string calldata uri) external;\\n\\n    function updateAttestorUri(address attestor, string calldata uri) external;\\n\\n    function removeAttestor(address attestor) external;\\n\\n    function admitWalletCheck(address walletCheck) external;\\n\\n    function removeWalletCheck(address walletCheck) external;\\n\\n    function admitBackdoor(uint256[2] memory pubKey) external;\\n\\n    function updateMinimumPolicyDisablementPeriod(uint256 minimumDisablementPeriod) external;\\n\\n    function policyOwnerRole(uint32 policyId) external pure returns (bytes32 ownerRole);\\n\\n    function policy(uint32 policyId)\\n        external\\n        returns (\\n            PolicyStorage.PolicyScalar memory scalar,\\n            address[] memory attestors,\\n            address[] memory walletChecks,\\n            bytes32[] memory backdoorRegimes,\\n            uint256 deadline\\n        );\\n\\n    function policyRawData(uint32 policyId)\\n        external\\n        view\\n        returns(\\n            uint256 deadline,\\n            PolicyStorage.PolicyScalar memory scalarActive,\\n            PolicyStorage.PolicyScalar memory scalarPending,\\n            address[] memory attestorsActive,\\n            address[] memory attestorsPendingAdditions,\\n            address[] memory attestorsPendingRemovals,\\n            address[] memory walletChecksActive,\\n            address[] memory walletChecksPendingAdditions,\\n            address[] memory walletChecksPendingRemovals,\\n            bytes32[] memory backdoorsActive,\\n            bytes32[] memory backdoorsPendingAdditions,\\n            bytes32[] memory backdoorsPendingRemovals);\\n\\n    function policyScalarActive(uint32 policyId) \\n        external \\n        returns (PolicyStorage.PolicyScalar memory scalarActive);\\n\\n    function policyRuleId(uint32 policyId)\\n        external\\n        returns (bytes32 ruleId);\\n\\n    function policyTtl(uint32 policyId) \\n        external\\n        returns (uint32 ttl);\\n\\n    function policyAllowApprovedCounterparties(uint32 policyId) \\n        external\\n        returns (bool isAllowed);\\n\\n    function policyDisabled(uint32 policyId) external view returns (bool isDisabled);\\n\\n    function policyCanBeDisabled(uint32 policyId) \\n        external\\n        returns (bool canIndeed);\\n\\n    function policyAttestorCount(uint32 policyId) external returns (uint256 count);\\n\\n    function policyAttestorAtIndex(uint32 policyId, uint256 index)\\n        external\\n        returns (address attestor);\\n\\n    function policyAttestors(uint32 policyId) external returns (address[] memory attestors);\\n\\n    function isPolicyAttestor(uint32 policyId, address attestor)\\n        external\\n        returns (bool isIndeed);\\n\\n    function policyWalletCheckCount(uint32 policyId) external returns (uint256 count);\\n\\n    function policyWalletCheckAtIndex(uint32 policyId, uint256 index)\\n        external\\n        returns (address walletCheck);\\n\\n    function policyWalletChecks(uint32 policyId) external returns (address[] memory walletChecks);\\n\\n    function isPolicyWalletCheck(uint32 policyId, address walletCheck)\\n        external\\n        returns (bool isIndeed);\\n\\n    function policyBackdoorCount(uint32 policyId) external returns (uint256 count);\\n\\n    function policyBackdoorAtIndex(uint32 policyId, uint256 index) external returns (bytes32 backdoorId);\\n\\n    function policyBackdoors(uint32 policyId) external returns (bytes32[] memory backdoors);\\n\\n    function isPolicyBackdoor(uint32 policyId, bytes32 backdoorId) external returns (bool isIndeed);\\n\\n    function policyCount() external view returns (uint256 count);\\n\\n    function isPolicy(uint32 policyId) external view returns (bool isIndeed);\\n\\n    function globalAttestorCount() external view returns (uint256 count);\\n\\n    function globalAttestorAtIndex(uint256 index) external view returns (address attestor);\\n\\n    function isGlobalAttestor(address attestor) external view returns (bool isIndeed);\\n\\n    function globalWalletCheckCount() external view returns (uint256 count);\\n\\n    function globalWalletCheckAtIndex(uint256 index) external view returns(address walletCheck);\\n\\n    function isGlobalWalletCheck(address walletCheck) external view returns (bool isIndeed);\\n\\n    function globalBackdoorCount() external view returns (uint256 count);\\n\\n    function globalBackdoorAtIndex(uint256 index) external view returns (bytes32 backdoorId);\\n\\n    function isGlobalBackdoor(bytes32 backdoorId) external view returns (bool isIndeed);    \\n\\n    function backdoorPubKey(bytes32 backdoorId) external view returns (uint256[2] memory pubKey);\\n    \\n    function attestorUri(address attestor) external view returns (string memory);\\n\\n    function hasRole(bytes32 role, address user) external view returns (bool);\\n\\n    function minimumPolicyDisablementPeriod()  external view returns (uint256 period);\\n  }\\n\"\r\n    },\r\n    \"contracts/consent/Consent.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.14;\\n\\nimport \\\"../interfaces/IConsent.sol\\\";\\nimport \\\"../access/KeyringAccessControl.sol\\\";\\n\\ncontract Consent is IConsent, KeyringAccessControl {\\n\\n    uint256 private constant MINIMUM_MAX_CONSENT_PERIOD = 1 hours;\\n    uint256 public immutable override maximumConsentPeriod;\\n\\n    /**\\n     * @dev Mapping of Traders to their associated consent deadlines.\\n     */\\n    mapping(address => uint256) public override userConsentDeadlines;\\n\\n    /**\\n     * @param trustedForwarder The address of a trustedForwarder contract.\\n     * @param maximumConsentPeriod_ The upper limit for user consent deadlines. \\n     */\\n    constructor(\\n        address trustedForwarder, \\n        uint256 maximumConsentPeriod_\\n    ) \\n        KeyringAccessControl(trustedForwarder)\\n    {\\n        if (maximumConsentPeriod_ < MINIMUM_MAX_CONSENT_PERIOD)\\n            revert Unacceptable({\\n                reason: \\\"The maximum consent period must be at least 1 hour\\\"\\n            });\\n\\n        maximumConsentPeriod = maximumConsentPeriod_;\\n    }\\n\\n    /**\\n     * @notice A user may grant consent to service mitigation measures. \\n     * @dev The deadline must be no further in the future than the maximumConsentDeadline.\\n     * @param revocationDeadline The consent will automatically expire at the deadline. \\n     */\\n    function grantDegradedServiceConsent(uint256 revocationDeadline) external override {\\n        if(revocationDeadline < block.timestamp)\\n            revert Unacceptable({\\n                reason: \\\"revocation deadline cannot be in the past\\\"\\n            });\\n        if(revocationDeadline > block.timestamp + maximumConsentPeriod)\\n            revert Unacceptable({\\n                reason: \\\"revocation deadline is too far in the future\\\"\\n            });\\n        userConsentDeadlines[_msgSender()] = revocationDeadline;\\n        emit GrantDegradedServiceConsent(_msgSender(), revocationDeadline);\\n    }\\n\\n    /**\\n     * @notice A user may revoke their consent to mitigation measures. \\n     */\\n    function revokeMitigationConsent() external override {\\n        userConsentDeadlines[_msgSender()] = 0;\\n        emit RevokeDegradedServiceConsent(_msgSender());\\n    }\\n\\n    /**\\n     * @param user The user to inspect. \\n     * @return doesIndeed True if the user's consent deadline is in the future.\\n     */\\n    function userConsentsToMitigation(address user) public view override returns (bool doesIndeed) {\\n        doesIndeed = userConsentDeadlines[user] >= block.timestamp;\\n    }\\n\\n}\"\r\n    },\r\n    \"contracts/lib/PolicyStorage.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.14;\\n\\nimport \\\"./AddressSet.sol\\\";\\nimport \\\"../interfaces/IRuleRegistry.sol\\\";\\nimport \\\"../interfaces/IIdentityTree.sol\\\";\\nimport \\\"../interfaces/IDegradable.sol\\\";\\nimport \\\"../interfaces/IKeyringCredentials.sol\\\";\\n\\n/**\\n @notice PolicyStorage attends to state management concerns for the PolicyManager. It establishes the\\n storage layout and is responsible for internal state integrity and managing state transitions. The \\n PolicyManager is responsible for orchestration of the functions implemented here as well as access\\n control. \\n */\\n\\nlibrary PolicyStorage {\\n\\n    using AddressSet for AddressSet.Set;\\n    using Bytes32Set for Bytes32Set.Set;\\n\\n    uint32 private constant MAX_POLICIES = 2 ** 20;\\n    uint32 private constant MAX_TTL = 2 * 365 days;\\n    uint256 public constant MAX_DISABLEMENT_PERIOD = 120 days;\\n    uint256 private constant MAX_BACKDOORS = 1;\\n    uint256 private constant UNIVERSAL_RULE = 0;\\n    address private constant NULL_ADDRESS = address(0);\\n\\n    error Unacceptable(string reason);\\n\\n    /// @dev The App struct contains the essential PolicyManager state including an array of Policies. \\n\\n    struct App {\\n        uint256 minimumPolicyDisablementPeriod;\\n        Policy[] policies;\\n        AddressSet.Set globalWalletCheckSet;\\n        AddressSet.Set globalAttestorSet;        \\n        mapping(address => string) attestorUris;\\n        Bytes32Set.Set backdoorSet;\\n        mapping(bytes32 => uint256[2]) backdoorPubKey;\\n    }\\n\\n    /// @dev PolicyScalar contains the non-indexed values in a policy configuration.\\n\\n    struct PolicyScalar {\\n        bytes32 ruleId;\\n        string descriptionUtf8;\\n        uint32 ttl;\\n        uint32 gracePeriod;\\n        bool allowApprovedCounterparties;\\n        uint256 disablementPeriod;\\n        bool locked;\\n    }\\n\\n    /// @dev PolicyAttestors contains the active policy attestors as well as scheduled changes. \\n\\n    struct PolicyAttestors {\\n        AddressSet.Set activeSet;\\n        AddressSet.Set pendingAdditionSet;\\n        AddressSet.Set pendingRemovalSet;\\n    }\\n\\n    /// @dev PolicyWalletChecks contains the active policy wallet checks as well as scheduled changes.\\n\\n    struct PolicyWalletChecks {\\n        AddressSet.Set activeSet;\\n        AddressSet.Set pendingAdditionSet;\\n        AddressSet.Set pendingRemovalSet;\\n    }\\n\\n    /// @dev PolicyBackdoors contain and active policy backdoors (identifiers) as well as scheduled changes. \\n\\n    struct PolicyBackdoors {\\n        Bytes32Set.Set activeSet;\\n        Bytes32Set.Set pendingAdditionSet;\\n        Bytes32Set.Set pendingRemovalSet;\\n    }\\n\\n    /// @dev Policy contains the active and scheduled changes and the deadline when the changes will\\n    /// take effect.\\n    \\n    struct Policy {\\n        bool disabled;\\n        uint256 deadline;\\n        PolicyScalar scalarActive;\\n        PolicyScalar scalarPending;\\n        PolicyAttestors attestors;\\n        PolicyWalletChecks walletChecks;\\n        PolicyBackdoors backdoors;\\n    }\\n\\n    /** \\n     * @notice A policy can be disabled if the policy is deemed failed. \\n     * @param policyObj The policy to disable.\\n     */\\n    function disablePolicy(\\n        Policy storage policyObj\\n    ) public \\n    {\\n        if (!policyHasFailed(policyObj))\\n            revert Unacceptable({\\n                reason: \\\"only failed policies can be disabled\\\"\\n            });\\n        policyObj.disabled = true;\\n        policyObj.deadline = ~uint(0);\\n    }\\n\\n    /**\\n     * @notice A policy is deemed failed if all attestors or any wallet check is inactive\\n     * over the policyDisablement period. \\n     * @param policyObj The policy to inspect.\\n     * @return hasIndeed True if all attestors have failed or any wallet check has failed, \\n     where \\\"failure\\\" is no updates over the policyDisablement period. \\n     */\\n    function policyHasFailed(\\n        Policy storage policyObj\\n    ) public view returns (bool hasIndeed) \\n    {\\n        if (policyObj.disabled == true) \\n            revert Unacceptable({\\n                reason: \\\"policy is already disabled\\\"\\n            });\\n        \\n        uint256 i;\\n        uint256 disablementPeriod = policyObj.scalarActive.disablementPeriod;\\n\\n        // If all attestors have failed\\n        bool allAttestorsHaveFailed = true;\\n        uint256 policyAttestorsCount = policyObj.attestors.activeSet.count();\\n        for (i=0; i<policyAttestorsCount; i++) {\\n            uint256 lastUpdate = IDegradable(policyObj.attestors.activeSet.keyAtIndex(i)).lastUpdate();\\n            // We ignore unitialized services to prevent interference with new policies.\\n            if (lastUpdate > 0) {\\n               if(block.timestamp < lastUpdate + disablementPeriod) {\\n                    allAttestorsHaveFailed = false;\\n               }\\n            } else {\\n                // No evidence of interrupted activity yet\\n                allAttestorsHaveFailed = false;\\n            }\\n        }\\n\\n        if(!allAttestorsHaveFailed) {\\n            // If any wallet check has failed\\n            uint256 policyWalletChecksCount = policyObj.walletChecks.activeSet.count();\\n            for (i=0; i<policyWalletChecksCount; i++) {\\n                uint256 lastUpdate = IDegradable(policyObj.walletChecks.activeSet.keyAtIndex(i)).lastUpdate();\\n                if (lastUpdate > 0) {\\n                    if(block.timestamp > lastUpdate + disablementPeriod) return true;\\n                }\\n            }\\n        }\\n        hasIndeed = allAttestorsHaveFailed;\\n    }\\n\\n    /**\\n     * @notice Updates the minimumPolicyDisablementPeriod property of the Policy struct.\\n     * @param self A storage reference to the App storage\\n     * @param minimumDisablementPeriod The new value for the minimumPolicyDisablementPeriod property.\\n     */\\n    function updateMinimumPolicyDisablementPeriod(\\n        App storage self, \\n        uint256 minimumDisablementPeriod \\n    ) public \\n    {\\n        if (minimumDisablementPeriod >= MAX_DISABLEMENT_PERIOD) \\n            revert Unacceptable({\\n                reason: \\\"minimum disablement period is too long\\\"\\n            });\\n        self.minimumPolicyDisablementPeriod = minimumDisablementPeriod;\\n    }\\n\\n    /**\\n     * @notice The attestor admin can admit attestors into the global attestor whitelist. \\n     * @param self PolicyManager App state.\\n     * @param attestor Address of the attestor's identity tree contract.\\n     * @param uri The URI refers to detailed information about the attestor.\\n     */\\n    function insertGlobalAttestor(\\n        App storage self,\\n        address attestor,\\n        string memory uri\\n    ) public\\n    {\\n        if (attestor == NULL_ADDRESS)\\n            revert Unacceptable({\\n                reason: \\\"attestor cannot be empty\\\"\\n            });\\n        if (bytes(uri).length == 0) \\n            revert Unacceptable({\\n                reason: \\\"uri cannot be empty\\\"\\n            });        \\n        self.globalAttestorSet.insert(attestor, \\\"PolicyStorage:insertGlobalAttestor\\\");\\n        self.attestorUris[attestor] = uri;\\n    }\\n\\n    /**\\n     * @notice The attestor admin can update the informational URIs for attestors on the whitelist.\\n     * @dev No onchain logic relies on the URI.\\n     * @param self PolicyManager App state.\\n     * @param attestor Address of an attestor's identity tree contract on the whitelist. \\n     * @param uri The URI refers to detailed information about the attestor.\\n     */\\n    function updateGlobalAttestorUri(\\n        App storage self, \\n        address attestor,\\n        string memory uri\\n    ) public\\n    {\\n        if (!self.globalAttestorSet.exists(attestor))\\n            revert Unacceptable({\\n                reason: \\\"attestor not found\\\"\\n            });\\n        if (bytes(uri).length == 0) \\n            revert Unacceptable({\\n                reason: \\\"uri cannot be empty\\\"\\n            });  \\n        self.attestorUris[attestor] = uri;\\n    }\\n\\n    /**\\n     * @notice The attestor admin can remove attestors from the whitelist.\\n     * @dev Does not remove attestors from policies that recognise the attestor to remove. \\n     * @param self PolicyManager App state.\\n     * @param attestor Address of an attestor identity tree to remove from the whitelist. \\n     */\\n    function removeGlobalAttestor(\\n        App storage self,\\n        address attestor\\n    ) public\\n    {\\n        self.globalAttestorSet.remove(attestor, \\\"PolicyStorage:removeGlobalAttestor\\\");\\n    }\\n\\n    /**\\n     * @notice The wallet check admin can admit wallet check contracts into the system.\\n     * @dev Wallet checks implement the IWalletCheck interface.\\n     * @param self PolicyManager App state.\\n     * @param walletCheck The address of a Wallet Check to admit into the global whitelist.\\n     */\\n    function insertGlobalWalletCheck(\\n        App storage self,\\n        address walletCheck\\n    ) public\\n    {\\n        if (walletCheck == NULL_ADDRESS)\\n            revert Unacceptable({\\n                reason: \\\"walletCheck cannot be empty\\\"\\n            });\\n        self.globalWalletCheckSet.insert(walletCheck, \\\"PolicyStorage:insertGlobalWalletCheck\\\");\\n    }\\n\\n    /**\\n     * @notice The wallet check admin can remove a wallet check from the system.\\n     * @dev Does not affect policies that utilize the wallet check. \\n     * @param self PolicyManager App state.\\n     * @param walletCheck The address of a Wallet Check to admit into the global whitelist.\\n     */\\n    function removeGlobalWalletCheck(\\n        App storage self,\\n        address walletCheck\\n    ) public\\n    {\\n        self.globalWalletCheckSet.remove(walletCheck, \\\"PolicyStorage:removeGlobalWalletCheck\\\");\\n    }\\n\\n    /**\\n     * @notice The backdoor admin can add a backdoor.\\n     * @dev pubKey must be unique.\\n     * @param self PolicyManager App state.\\n     * @param pubKey The public key for backdoor encryption. \\n     */\\n    function insertGlobalBackdoor(\\n        App storage self, \\n        uint256[2] calldata pubKey\\n    ) public returns (bytes32 id)\\n    {\\n        id = keccak256(abi.encodePacked(pubKey));\\n        self.backdoorPubKey[id] = pubKey;\\n        self.backdoorSet.insert(\\n                id,\\n                \\\"PolicyStorage:insertGlobalBackdoor\\\"\\n        );\\n    }\\n\\n    /**\\n     * @notice Creates a new policy that is owned by the creator.\\n     * @dev Maximum unique policies is 2 ^ 20. Must be at least 1 attestor.\\n     * @param self PolicyManager App state.\\n     * @param policyScalar The new policy's non-indexed values. \\n     * @param attestors A list of attestor identity tree contracts.\\n     * @param walletChecks The address of one or more Wallet Checks to add to the Policy.\\n     * @param ruleRegistry The address of the deployed RuleRegistry contract.\\n     * @return policyId A PolicyStorage struct.Id The unique identifier of a Policy.\\n     */\\n    function newPolicy(\\n        App storage self,\\n        PolicyScalar calldata policyScalar,\\n        address[] memory attestors,\\n        address[] memory walletChecks,\\n        address ruleRegistry\\n    ) public returns (uint32 policyId) \\n    {\\n        (bytes32 universeRule, bytes32 emptyRule) = IRuleRegistry(ruleRegistry).genesis();\\n        \\n        // Check that there is at least one attestor for the policy\\n        if (\\n            attestors.length < 1 && \\n            policyScalar.ruleId != universeRule &&\\n            policyScalar.ruleId != emptyRule) \\n        {\\n            revert Unacceptable({\\n                reason: \\\"every policy needs at least one attestor\\\"\\n            });\\n        }\\n        \\n        uint256 i;\\n        self.policies.push();\\n        policyId = uint32(self.policies.length - 1);\\n        if (policyId >= MAX_POLICIES)\\n            revert Unacceptable({\\n                reason: \\\"max policies exceeded\\\"\\n            });\\n        Policy storage policyObj = policyRawData(self, policyId);\\n        uint256 deadline = block.timestamp;\\n\\n        writePolicyScalar(\\n            self,\\n            policyId,\\n            policyScalar,\\n            ruleRegistry,\\n            deadline\\n        );\\n\\n        processStaged(policyObj);\\n\\n        for (i=0; i<attestors.length; i++) {\\n            address attestor = attestors[i];\\n            if (!self.globalAttestorSet.exists(attestor))\\n                revert Unacceptable({\\n                    reason: \\\"attestor not found\\\"\\n                });\\n            policyObj.attestors.activeSet.insert(attestor, \\\"PolicyStorage:newPolicy\\\");\\n        }\\n\\n        for (i=0; i<walletChecks.length; i++) {\\n            address walletCheck = walletChecks[i];\\n            if (!self.globalWalletCheckSet.exists(walletCheck))\\n                revert Unacceptable({\\n                    reason: \\\"walletCheck not found\\\"\\n                });\\n            policyObj.walletChecks.activeSet.insert(walletCheck, \\\"PolicyStorage:newPolicy\\\");\\n        }\\n    }\\n\\n    /**\\n     * @notice Returns the internal policy state without processing staged changes. \\n     * @dev Staged changes with deadlines in the past are presented as pending. \\n     * @param self PolicyManager App state.\\n     * @param policyId A PolicyStorage struct.Id The unique identifier of a Policy.\\n     * @return policyInfo Policy info in the internal storage format without processing.\\n     */\\n    function policyRawData(\\n        App storage self, \\n        uint32 policyId\\n    ) public view returns (Policy storage policyInfo) \\n    {\\n        policyInfo = self.policies[policyId];\\n    }\\n\\n    /**\\n     * @param activeSet The active set of addresses.\\n     * @param additionSet The set of pending addresses to add to the active set.\\n     */\\n    function _processAdditions(\\n    AddressSet.Set storage activeSet, \\n    AddressSet.Set storage additionSet\\n    ) private {\\n        uint256 count = additionSet.count();\\n        while (count > 0) {\\n            address entity = additionSet.keyAtIndex(additionSet.count() - 1);\\n            activeSet.insert(entity, \\\"policyStorage:_processAdditions\\\");\\n            additionSet.remove(entity, \\\"policyStorage:_processAdditions\\\");\\n            count--;\\n        }\\n    }\\n\\n    /**\\n     * @param activeSet The active set of bytes32.\\n     * @param additionSet The set of pending bytes32 to add to the active set.\\n     */\\n    function _processAdditions(\\n    Bytes32Set.Set storage activeSet, \\n    Bytes32Set.Set storage additionSet\\n    ) private {\\n        uint256 count = additionSet.count();\\n        while (count > 0) {\\n            bytes32 entity = additionSet.keyAtIndex(additionSet.count() - 1);\\n            activeSet.insert(entity, \\\"policyStorage:_processAdditions\\\");\\n            additionSet.remove(entity, \\\"policyStorage:_processAdditions\\\");\\n            count--;\\n        }\\n    }\\n\\n    /**\\n     * @param activeSet The active set of addresses.\\n     * @param removalSet The set of pending addresses to remove from the active set.\\n     */\\n    function _processRemovals(\\n        AddressSet.Set storage activeSet, \\n        AddressSet.Set storage removalSet\\n    ) private {\\n        uint256 count = removalSet.count();\\n        while (count > 0) {\\n            address entity = removalSet.keyAtIndex(removalSet.count() - 1);\\n            activeSet.remove(entity, \\\"policyStorage:_processRemovals\\\");\\n            removalSet.remove(entity, \\\"policyStorage:_processRemovals\\\");\\n            count--;\\n        }\\n    }\\n\\n    /**\\n     * @param activeSet The active set of bytes32.\\n     * @param removalSet The set of pending bytes32 to remove from the active set.\\n     */\\n    function _processRemovals(\\n        Bytes32Set.Set storage activeSet, \\n        Bytes32Set.Set storage removalSet\\n    ) private {\\n        uint256 count = removalSet.count();\\n        while (count > 0) {\\n            bytes32 entity = removalSet.keyAtIndex(removalSet.count() - 1);\\n            activeSet.remove(entity, \\\"policyStorage:_processRemovals\\\");\\n            removalSet.remove(entity, \\\"policyStorage:_processRemovals\\\");\\n            count--;\\n        }\\n    }\\n\\n    /**\\n     * @notice Processes staged changes to the policy state if the deadline is in the past.\\n     * @dev Always call this before inspecting the the active policy state. .\\n     * @param policyObj A Policy object.\\n     */\\n    function processStaged(Policy storage policyObj) public {\\n        uint256 deadline = policyObj.deadline;\\n        if (deadline > 0 && deadline <= block.timestamp) {\\n            policyObj.scalarActive = policyObj.scalarPending;\\n\\n            _processAdditions(policyObj.attestors.activeSet, policyObj.attestors.pendingAdditionSet);\\n            _processRemovals(policyObj.attestors.activeSet, policyObj.attestors.pendingRemovalSet);\\n\\n            _processAdditions(policyObj.walletChecks.activeSet, policyObj.walletChecks.pendingAdditionSet);\\n            _processRemovals(policyObj.walletChecks.activeSet, policyObj.walletChecks.pendingRemovalSet);\\n\\n            _processAdditions(policyObj.backdoors.activeSet, policyObj.backdoors.pendingAdditionSet);\\n            _processRemovals(policyObj.backdoors.activeSet, policyObj.backdoors.pendingRemovalSet);\\n\\n            policyObj.deadline = 0;\\n        }\\n    }\\n\\n\\n    /**\\n     * @notice Prevents changes to locked and disabled Policies.\\n     * @dev Reverts if the active policy lock is set to true or the Policy is disabled.\\n     * @param policyObj A Policy object.\\n     */\\n    function checkLock(\\n        Policy storage policyObj\\n    ) public view \\n    {\\n        if (isLocked(policyObj) || policyObj.disabled)\\n            revert Unacceptable({\\n                reason: \\\"policy is locked\\\"\\n            });\\n    }\\n\\n    /**\\n     * @notice Inspect the active policy lock.\\n     * @param policyObj A Policy object.\\n     * @return isIndeed True if the active policy locked parameter is set to true. True value if PolicyStorage\\n     is locked, otherwise False.\\n     */\\n    function isLocked(Policy storage policyObj) public view returns(bool isIndeed) {\\n        isIndeed = policyObj.scalarActive.locked;\\n    }\\n\\n    /**\\n     * @notice Processes staged changes if the current deadline has passed and updates the deadline. \\n     * @dev The deadline must be at least as far in the future as the active policy gracePeriod. \\n     * @param policyObj A Policy object.\\n     * @param deadline The timestamp when the staged changes will take effect. Overrides previous deadline.\\n     */\\n    function setDeadline(\\n        Policy storage policyObj, \\n        uint256 deadline\\n    ) public\\n    {\\n        checkLock(policyObj);\\n\\n        // Deadline of 0 allows staging of changes with no implementation schedule.\\n        // Positive deadlines must be at least graceTime seconds in the future.\\n     \\n        if (deadline != 0 && \\n            (deadline < block.timestamp + policyObj.scalarActive.gracePeriod)\\n        )\\n            revert Unacceptable({\\n                reason: \\\"deadline in the past or too soon\\\"\\n        });\\n        policyObj.deadline = deadline;\\n    }\\n\\n    /**\\n     * @notice Non-indexed Policy values can be updated in one step. \\n     * @param self PolicyManager App state.\\n     * @param policyId A PolicyStorage struct.Id The unique identifier of a Policy.\\n     * @param policyScalar The new non-indexed properties. \\n     * @param ruleRegistry The address of the deployed RuleRegistry contract. \\n     * @param deadline The timestamp when the staged changes will take effect. Overrides previous deadline.\\n     */\\n    function writePolicyScalar(\\n        App storage self,\\n        uint32 policyId,\\n        PolicyStorage.PolicyScalar calldata policyScalar,\\n        address ruleRegistry,\\n        uint256 deadline\\n    ) public {\\n        PolicyStorage.Policy storage policyObj = policyRawData(self, policyId);\\n        processStaged(policyObj);\\n        writeRuleId(policyObj, policyScalar.ruleId, ruleRegistry);\\n        writeDescription(policyObj, policyScalar.descriptionUtf8);\\n        writeTtl(policyObj, policyScalar.ttl);\\n        writeGracePeriod(policyObj, policyScalar.gracePeriod);\\n        writeAllowApprovedCounterparties(policyObj, policyScalar.allowApprovedCounterparties);\\n        writePolicyLock(policyObj, policyScalar.locked);\\n        writeDisablementPeriod(self, policyId, policyScalar.disablementPeriod);\\n        setDeadline(policyObj, deadline);\\n    }\\n\\n    /**\\n     * @notice Writes a new RuleId to the pending Policy changes in a Policy.\\n     * @param self A Policy object.\\n     * @param ruleId The unique identifier of a Rule.\\n     * @param ruleRegistry The address of the deployed RuleRegistry contract. \\n     */\\n    function writeRuleId(\\n        Policy storage self, \\n        bytes32 ruleId, \\n        address ruleRegistry\\n    ) public\\n    {\\n        if (!IRuleRegistry(ruleRegistry).isRule(ruleId))\\n            revert Unacceptable({\\n                reason: \\\"rule not found\\\"\\n            });\\n        self.scalarPending.ruleId = ruleId;\\n    }\\n\\n    /**\\n     * @notice Writes a new descriptionUtf8 to the pending Policy changes in a Policy.\\n     * @param self A Policy object.\\n     * @param descriptionUtf8 Policy description in UTF-8 format. \\n     */\\n    function writeDescription(\\n        Policy storage self, \\n        string memory descriptionUtf8\\n    ) public\\n    {\\n        if (bytes(descriptionUtf8).length == 0) \\n            revert Unacceptable({\\n                reason: \\\"descriptionUtf8 cannot be empty\\\"\\n            });\\n        self.scalarPending.descriptionUtf8 = descriptionUtf8;\\n    }\\n\\n    /**\\n     * @notice Writes a new ttl to the pending Policy changes in a Policy.\\n     * @param self A Policy object.\\n     * @param ttl The maximum acceptable credential age in seconds.\\n     */\\n    function writeTtl(\\n        Policy storage self,\\n        uint32 ttl\\n    ) public\\n    {\\n        if (ttl > MAX_TTL) \\n            revert Unacceptable({ reason: \\\"ttl exceeds maximum duration\\\" });\\n        self.scalarPending.ttl = ttl;\\n    }\\n\\n    /**\\n     * @notice Writes a new gracePeriod to the pending Policy changes in a Policy. \\n     * @dev Deadlines must always be >= the active policy grace period. \\n     * @param self A Policy object.\\n     * @param gracePeriod The minimum acceptable deadline.\\n     */\\n    function writeGracePeriod(\\n        Policy storage self,\\n        uint32 gracePeriod\\n    ) public\\n    {\\n        // 0 is acceptable\\n        self.scalarPending.gracePeriod = gracePeriod;\\n    }\\n\\n    /**\\n     * @notice Writes a new allowApprovedCounterparties state in the pending Policy changes in a Policy. \\n     * @param self A Policy object.\\n     * @param allowApprovedCounterparties True if whitelists are allowed, otherwise false.\\n     */\\n    function writeAllowApprovedCounterparties(\\n        Policy storage self,\\n        bool allowApprovedCounterparties\\n    ) public\\n    {\\n        self.scalarPending.allowApprovedCounterparties = allowApprovedCounterparties;\\n    }\\n\\n    /**\\n     * @notice Writes a new locked state in the pending Policy changes in a Policy.\\n     * @param self A Policy object.\\n     * @param setPolicyLocked True if the policy is to be locked, otherwise false.\\n     */\\n    function writePolicyLock(\\n        Policy storage self,\\n        bool setPolicyLocked\\n    ) public\\n    {\\n        self.scalarPending.locked = setPolicyLocked;\\n    }\\n\\n    /**\\n     * @notice Writes a new disablement deadline to the pending Policy changes of a Policy.\\n     * @dev If the provided disablement deadline is in the past, this function will revert. \\n     * @param self A PolicyStorage object.\\n     * @param disablementPeriod The new disablement deadline to set, in seconds since the Unix epoch.\\n     *   If set to 0, the policy can be disabled at any time.\\n     *   If set to a non-zero value, the policy can only be disabled after that time.\\n     */\\n\\n    function writeDisablementPeriod(\\n        App storage self,\\n        uint32 policyId,\\n        uint256 disablementPeriod\\n    ) public {\\n        // Check that the new disablement period is greater than or equal to the minimum\\n        if (disablementPeriod < self.minimumPolicyDisablementPeriod) {\\n            revert Unacceptable({\\n                reason: \\\"disablement period is too short\\\"\\n            });\\n        }\\n        if (disablementPeriod >= MAX_DISABLEMENT_PERIOD) {\\n            revert Unacceptable({\\n                reason: \\\"disablement period is too long\\\"\\n            });\\n        }\\n        Policy storage policyObj = self.policies[policyId];\\n        policyObj.scalarPending.disablementPeriod = disablementPeriod;\\n    }\\n\\n    /**\\n     * @notice Writes attestors to pending Policy attestor additions. \\n     * @param self PolicyManager App state.\\n     * @param policyObj A Policy object.\\n     * @param attestors The address of one or more Attestors to add to the Policy.\\n     */\\n    function writeAttestorAdditions(\\n        App storage self,\\n        Policy storage policyObj,\\n        address[] calldata attestors\\n    ) public\\n    {\\n        for (uint i = 0; i < attestors.length; i++) {\\n            _writeAttestorAddition(self, policyObj, attestors[i]);\\n        }        \\n    }\\n\\n    /**\\n     * @notice Writes an attestor to pending Policy attestor additions. \\n     * @dev If the attestor is scheduled to be remove, unschedules the removal. \\n     * @param self PolicyManager App state.\\n     * @param policyObj A Policy object. \\n     * @param attestor The address of an Attestor to add to the Policy.\\n     */\\n    function _writeAttestorAddition(\\n        App storage self,\\n        Policy storage policyObj,\\n        address attestor\\n    ) private\\n    {\\n        if (!self.globalAttestorSet.exists(attestor))\\n            revert Unacceptable({\\n                reason: \\\"attestor not found\\\"\\n            });\\n        if (policyObj.attestors.pendingRemovalSet.exists(attestor)) {\\n            policyObj.attestors.pendingRemovalSet.remove(attestor, \\\"PolicyStorage:_writeAttestorAddition\\\");\\n        } else {\\n            if (policyObj.attestors.activeSet.exists(attestor)) {\\n                revert Unacceptable({\\n                    reason: \\\"attestor already in policy\\\"\\n                });\\n            }\\n            policyObj.attestors.pendingAdditionSet.insert(attestor, \\\"PolicyStorage:_writeAttestorAddition\\\");\\n        }\\n    }\\n\\n    /**\\n     * @notice Writes attestors to pending Policy attestor removals. \\n     * @param self A Policy object.\\n     * @param attestors The address of one or more Attestors to remove from the Policy.\\n     */\\n    function writeAttestorRemovals(\\n        Policy storage self,\\n        address[] calldata attestors\\n    ) public\\n    {\\n        for (uint i = 0; i < attestors.length; i++) {\\n            _writeAttestorRemoval(self, attestors[i]);\\n        }\\n    }\\n\\n    /**\\n     * @notice Writes an attestor to a Policy's pending attestor removals. \\n     * @dev Cancels the addition if the attestor is scheduled to be added. \\n     * @param self PolicyManager App state.\\n     * @param attestor The address of a Attestor to remove from the Policy.\\n     */\\n    function _writeAttestorRemoval(\\n        Policy storage self,\\n        address attestor\\n    ) private\\n    {\\n        \\n        uint currentAttestorCount = self.attestors.activeSet.count();\\n        uint pendingAdditionsCount = self.attestors.pendingAdditionSet.count();\\n        uint pendingRemovalsCount = self.attestors.pendingRemovalSet.count();\\n\\n        if (currentAttestorCount + pendingAdditionsCount - pendingRemovalsCount < 2) {\\n            revert Unacceptable({\\n                reason: \\\"Cannot remove the last attestor. Add a replacement first\\\"\\n            });\\n        }\\n        \\n        if (self.attestors.pendingAdditionSet.exists(attestor)) {\\n            self.attestors.pendingAdditionSet.remove(attestor, \\\"PolicyStorage:_writeAttestorRemoval\\\");\\n        } else {\\n            if (!self.attestors.activeSet.exists(attestor)) {\\n                revert Unacceptable({\\n                    reason: \\\"attestor not found\\\"\\n                });\\n            }\\n            self.attestors.pendingRemovalSet.insert(attestor, \\\"PolicyStorage:_writeAttestorRemoval\\\");\\n        }\\n    }\\n\\n    /**\\n     * @notice Writes wallet checks to a Policy's pending wallet check additions.\\n     * @param self PolicyManager App state.\\n     * @param policyObj A PolicyStorage object.\\n     * @param walletChecks The address of one or more Wallet Checks to add to the Policy.\\n     */\\n    function writeWalletCheckAdditions(\\n        App storage self,\\n        Policy storage policyObj,\\n        address[] memory walletChecks\\n    ) public\\n    {\\n        for (uint i = 0; i < walletChecks.length; i++) {\\n            _writeWalletCheckAddition(self, policyObj, walletChecks[i]);\\n        }\\n    }\\n\\n    /**\\n     * @notice Writes a wallet check to a Policy's pending wallet check additions. \\n     * @dev Cancels removal if the wallet check is scheduled for removal. \\n     * @param self PolicyManager App state.\\n     * @param policyObj A Policy object. \\n     * @param walletCheck The address of a Wallet Check to admit into the global whitelist.\\n     */\\n    function _writeWalletCheckAddition(\\n        App storage self,\\n        Policy storage policyObj,\\n        address walletCheck\\n    ) private\\n    {\\n        if (!self.globalWalletCheckSet.exists(walletCheck))\\n            revert Unacceptable({\\n                reason: \\\"walletCheck not found\\\"\\n            });\\n        if (policyObj.walletChecks.pendingRemovalSet.exists(walletCheck)) {\\n            policyObj.walletChecks.pendingRemovalSet.remove(walletCheck, \\\"PolicyStorage:_writeWalletCheckAddition\\\");\\n        } else {\\n            if (policyObj.walletChecks.activeSet.exists(walletCheck)) {\\n                revert Unacceptable({\\n                    reason: \\\"walletCheck already in policy\\\"\\n                });\\n            }\\n            if (policyObj.walletChecks.pendingAdditionSet.exists(walletCheck)) {\\n                revert Unacceptable({\\n                    reason: \\\"walletCheck addition already scheduled\\\"\\n                });\\n            }\\n            policyObj.walletChecks.pendingAdditionSet.insert(walletCheck, \\\"PolicyStorage:_writeWalletCheckAddition\\\");\\n        }\\n    }\\n\\n    /**\\n     * @notice Writes wallet checks to a Policy's pending wallet check removals. \\n     * @param self A Policy object.\\n     * @param walletChecks The address of one or more Wallet Checks to add to the Policy.\\n     */\\n    function writeWalletCheckRemovals(\\n        Policy storage self,\\n        address[] memory walletChecks\\n    ) public\\n    {\\n        for (uint i = 0; i < walletChecks.length; i++) {\\n            _writeWalletCheckRemoval(self, walletChecks[i]);\\n        }\\n    }\\n\\n    /**\\n     * @notice Writes a wallet check to a Policy's pending wallet check removals. \\n     * @dev Unschedules addition if the wallet check is present in the Policy's pending wallet check additions. \\n     * @param self A Policy object.\\n     * @param walletCheck The address of a Wallet Check to remove from the Policy. \\n     */\\n    function _writeWalletCheckRemoval(\\n        Policy storage self,\\n        address walletCheck\\n    ) private\\n    {\\n        if (self.walletChecks.pendingAdditionSet.exists(walletCheck)) {\\n            self.walletChecks.pendingAdditionSet.remove(walletCheck, \\\"PolicyStorage:_writeWalletCheckRemoval\\\");\\n        } else {\\n            if (!self.walletChecks.activeSet.exists(walletCheck)) {\\n                revert Unacceptable({\\n                    reason: \\\"walletCheck is not in policy\\\"\\n                });\\n            }\\n            if (self.walletChecks.pendingRemovalSet.exists(walletCheck)) {\\n                revert Unacceptable({\\n                    reason: \\\"walletCheck removal already scheduled\\\"\\n                });\\n            }\\n            self.walletChecks.pendingRemovalSet.insert(walletCheck, \\\"PolicyStorage:_writeWalletCheckRemoval\\\");\\n        }\\n    }\\n\\n    /**\\n     * @notice Add a backdoor to a policy.\\n     * @param self The application state. \\n     * @param policyObj A Policy object.\\n     * @param backdoorId The ID of a backdoor. \\n     */\\n    function writeBackdoorAddition(\\n        App storage self,\\n        Policy storage policyObj,\\n        bytes32 backdoorId\\n    ) public {\\n        if (!self.backdoorSet.exists(backdoorId)) {\\n            revert Unacceptable({\\n                reason: \\\"unknown backdoor\\\"\\n            });\\n        }\\n        if (policyObj.backdoors.pendingRemovalSet.exists(backdoorId)) {\\n            policyObj.backdoors.pendingRemovalSet.remove(backdoorId, \\n            \\\"PolicyStorage:writeBackdoorAddition\\\");\\n        } else {\\n            if (policyObj.backdoors.activeSet.exists(backdoorId)) {\\n                revert Unacceptable({\\n                    reason: \\\"backdoor exists in policy\\\"\\n                });\\n            }\\n            if (policyObj.backdoors.pendingAdditionSet.exists(backdoorId)) {\\n                revert Unacceptable({\\n                    reason: \\\"backdoor addition already scheduled\\\"\\n                });\\n            }\\n            policyObj.backdoors.pendingAdditionSet.insert(backdoorId, \\n            \\\"PolicyStorage:_writeWalletCheckAddition\\\");\\n            _checkBackdoorConfiguration(policyObj);\\n        }\\n    }\\n\\n    /**\\n     * @notice Writes a wallet check to a Policy's pending wallet check removals. \\n     * @dev Unschedules addition if the wallet check is present in the Policy's pending wallet check additions. \\n     * @param self A Policy object.\\n     * @param backdoorId The address of a Wallet Check to remove from the Policy. \\n     */\\n    function writeBackdoorRemoval(\\n        Policy storage self,\\n        bytes32 backdoorId\\n    ) public\\n    {\\n        if (self.backdoors.pendingAdditionSet.exists(backdoorId)) {\\n            self.backdoors.pendingAdditionSet.remove(backdoorId, \\n            \\\"PolicyStorage:writeBackdoorRemoval\\\");\\n        } else {\\n            if (!self.backdoors.activeSet.exists(backdoorId)) {\\n                revert Unacceptable({\\n                    reason: \\\"backdoor is not in policy\\\"\\n                });\\n            }\\n            if (self.backdoors.pendingRemovalSet.exists(backdoorId)) {\\n                revert Unacceptable({\\n                    reason: \\\"backdoor removal already scheduled\\\"\\n                });\\n            }\\n            self.backdoors.pendingRemovalSet.insert(backdoorId, \\n            \\\"PolicyStorage:writeBackdoorRemoval\\\");\\n        }\\n    }\\n\\n    /**\\n     * @notice Checks the net count of backdoors.\\n     * @dev Current zkVerifier supports only one backdoor per policy.\\n     * @param self A policy object.\\n     */\\n    function _checkBackdoorConfiguration(\\n        Policy storage self\\n    ) internal view {\\n        uint256 activeCount = self.backdoors.activeSet.count();\\n        uint256 pendingAdditionsCount = self.backdoors.pendingAdditionSet.count();\\n        uint256 pendingRemovalsCount = self.backdoors.pendingRemovalSet.count();\\n        if(activeCount + pendingAdditionsCount - pendingRemovalsCount > MAX_BACKDOORS) {\\n            revert Unacceptable({ reason: \\\"too many backdoors requested\\\" });\\n        }\\n    }\\n\\n    /**********************************************************\\n     Inspection\\n     **********************************************************/\\n\\n    /**\\n     * @param self Application state.\\n     * @param policyId The unique identifier of a Policy.\\n     * @return policyObj Policy object with staged updates processed.\\n     */\\n    function policy(App storage self, uint32 policyId)\\n        public\\n        returns (Policy storage policyObj)\\n    {\\n        policyObj = self.policies[policyId];\\n        processStaged(policyObj);\\n    }\\n\\n}\\n\"\r\n    },\r\n    \"contracts/lib/AddressSet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.14;\\n\\n/**\\n * @notice Key sets with enumeration and delete. Uses mappings for random access and existence checks,\\n * and dynamic arrays for enumeration. Key uniqueness is enforced.\\n * @dev Sets are unordered. Delete operations reorder keys.\\n */\\n\\nlibrary AddressSet {\\n\\n    struct Set {\\n        mapping(address => uint256) keyPointers;\\n        address[] keyList;\\n    }\\n\\n    string private constant MODULE = \\\"AddressSet\\\";\\n\\n    error AddressSetConsistency(string module, string method, string reason, string context);\\n\\n    /**\\n     * @notice Insert a key to store.\\n     * @dev Duplicate keys are not permitted.\\n     * @param self A Set struct\\n     * @param key A key to insert cast as an address.\\n     * @param context A message string about interpretation of the issue. Normally the calling function.\\n     */\\n    function insert(\\n        Set storage self,\\n        address key,\\n        string memory context\\n    ) internal {\\n        if (exists(self, key))\\n            revert AddressSetConsistency({\\n                module: MODULE,\\n                method: \\\"insert\\\",\\n                reason: \\\"exists\\\",\\n                context: context\\n            });\\n        self.keyList.push(key);\\n        self.keyPointers[key] = self.keyList.length - 1;\\n    }\\n\\n    /**\\n     * @notice Remove a key from the store.\\n     * @dev The key to remove must exist.\\n     * @param self A Set struct\\n     * @param key An address to remove from the Set.\\n     * @param context A message string about interpretation of the issue. Normally the calling function.\\n     */\\n    function remove(\\n        Set storage self,\\n        address key,\\n        string memory context\\n    ) internal {\\n        if (!exists(self, key))\\n            revert AddressSetConsistency({\\n                module: MODULE,\\n                method: \\\"remove\\\",\\n                reason: \\\"does not exist\\\",\\n                context: context\\n            });\\n        address keyToMove = self.keyList[count(self) - 1];\\n        uint256 rowToReplace = self.keyPointers[key];\\n        self.keyPointers[keyToMove] = rowToReplace;\\n        self.keyList[rowToReplace] = keyToMove;\\n        delete self.keyPointers[key];\\n        self.keyList.pop();\\n    }\\n\\n    /**\\n     * @notice Count the keys.\\n     * @param self A Set struct\\n     * @return uint256 Length of the `keyList`, which correspond to the number of elements\\n     * stored in the `keyPointers` mapping.\\n     */\\n    function count(Set storage self) internal view returns (uint256) {\\n        return (self.keyList.length);\\n    }\\n\\n    /**\\n     * @notice Check if a key exists in the Set.\\n     * @param self A Set struct\\n     * @param key An address to look for in the Set.\\n     * @return bool True if the key exists in the Set, otherwise false.\\n     */\\n    function exists(Set storage self, address key) internal view returns (bool) {\\n        if (self.keyList.length == 0) return false;\\n        return self.keyList[self.keyPointers[key]] == key;\\n    }\\n\\n    /**\\n     * @notice Retrieve an address by its position in the set. Use for enumeration.\\n     * @param self A Set struct\\n     * @param index The internal index to inspect.\\n     * @return address Address value stored at the index position in the Set.\\n     */\\n    function keyAtIndex(Set storage self, uint256 index) internal view returns (address) {\\n        return self.keyList[index];\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IRuleRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.14;\\n\\nimport \\\"../lib/Bytes32Set.sol\\\";\\n\\ninterface IRuleRegistry {\\n\\n    enum Operator {\\n        Base,\\n        Union,\\n        Intersection,\\n        Complement\\n    }\\n\\n    struct Rule {\\n        string description;\\n        string uri;\\n        Bytes32Set.Set operandSet;\\n        Operator operator;\\n        bool toxic;\\n    }\\n\\n    event RuleRegistryDeployed(address deployer, address trustedForwarder);\\n\\n    event RuleRegistryInitialized(\\n        address admin,\\n        string universeDescription,\\n        string universeUri,\\n        string emptyDescription,\\n        string emptyUri,\\n        bytes32 universeRule,\\n        bytes32 emptyRule\\n    );\\n\\n    event CreateRule(\\n        address indexed user,\\n        bytes32 indexed ruleId,\\n        string description,\\n        string uri,\\n        bool toxic,\\n        Operator operator,\\n        bytes32[] operands\\n    );\\n\\n    event SetToxic(address admin, bytes32 ruleId, bool isToxic);\\n\\n    function ROLE_RULE_ADMIN() external view returns (bytes32);\\n\\n    function init(\\n        string calldata universeDescription,\\n        string calldata universeUri,\\n        string calldata emptyDescription,\\n        string calldata emptyUri\\n    ) external;\\n\\n    function createRule(\\n        string calldata description,\\n        string calldata uri,\\n        Operator operator,\\n        bytes32[] calldata operands\\n    ) external returns (bytes32 ruleId);\\n\\n    function setToxic(bytes32 ruleId, bool toxic) external;\\n\\n    function genesis() external view returns (bytes32 universeRule, bytes32 emptyRule);\\n\\n    function ruleCount() external view returns (uint256 count);\\n\\n    function ruleAtIndex(uint256 index) external view returns (bytes32 ruleId);\\n\\n    function isRule(bytes32 ruleId) external view returns (bool isIndeed);\\n\\n    function rule(bytes32 ruleId)\\n        external\\n        view\\n        returns (\\n            string memory description,\\n            string memory uri,\\n            Operator operator,\\n            uint256 operandCount\\n        );\\n\\n    function ruleDescription(bytes32 ruleId) external view returns (string memory description);\\n\\n    function ruleUri(bytes32 ruleId) external view returns (string memory uri);\\n\\n    function ruleIsToxic(bytes32 ruleId) external view returns (bool isIndeed);\\n\\n    function ruleOperator(bytes32 ruleId) external view returns (Operator operator);\\n\\n    function ruleOperandCount(bytes32 ruleId) external view returns (uint256 count);\\n\\n    function ruleOperandAtIndex(bytes32 ruleId, uint256 index)\\n        external\\n        view\\n        returns (bytes32 operandId);\\n\\n    function generateRuleId(\\n        string calldata description,\\n        Operator operator,\\n        bytes32[] calldata operands\\n    ) external pure returns (bytes32 ruleId);\\n\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IKeyringCredentials.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.14;\\n\\ninterface IKeyringCredentials {\\n    \\n    event CredentialsDeployed(\\n        address deployer, \\n        address trustedForwarder, \\n        address policyManager, \\n        uint256 maximumConsentPeriod);\\n\\n    event CredentialsInitialized(address admin);\\n\\n    event UpdateCredential(\\n        uint8 version, \\n        address updater, \\n        address indexed trader, \\n        uint32 indexed admissionPolicyId);\\n\\n    function ROLE_CREDENTIAL_UPDATER() external view returns (bytes32);\\n\\n    function init() external;\\n\\n    function setCredential(\\n        address trader,  \\n        uint32 admissionPolicyId,\\n        uint256 timestamp\\n    ) external;\\n\\n    function checkCredential(\\n        address observer,\\n        address subject,\\n        uint32 admissionPolicyId\\n    ) external returns (bool passed);\\n\\n    function keyGen(\\n        address trader,\\n        uint32 admissionPolicyId\\n    ) external pure returns (bytes32 key);\\n\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IConsent.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.14;\\n\\ninterface IConsent {\\n\\n    event GrantDegradedServiceConsent(address indexed user, uint256 revocationDeadline);\\n\\n    event RevokeDegradedServiceConsent(address indexed user);\\n\\n    function maximumConsentPeriod() external view returns (uint256);\\n\\n    function userConsentDeadlines(address user) external view returns (uint256);\\n\\n    function grantDegradedServiceConsent(uint256 revocationDeadline) external;\\n\\n    function revokeMitigationConsent() external;\\n\\n    function userConsentsToMitigation(address user) external view returns (bool doesIndeed);\\n\\n}\\n\"\r\n    },\r\n    \"contracts/access/KeyringAccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.14;\\n\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"@openzeppelin/contracts/metatx/ERC2771Context.sol\\\";\\n\\n/**\\n @notice This contract manages the role-based access control via _checkRole() with meaningful \\n error messages if the user does not have the requested role. This contract is inherited by \\n PolicyManager, RuleRegistry, KeyringCredentials, IdentityTree, WalletCheck and \\n KeyringZkCredentialUpdater.\\n */\\n\\nabstract contract KeyringAccessControl is ERC2771Context, AccessControl {\\n\\n    address private constant NULL_ADDRESS = address(0);\\n\\n    // Reservations hold space in upgradeable contracts for future versions of this module.\\n    bytes32[50] private _reservedSlots;\\n\\n    error Unacceptable(string reason);\\n\\n    error Unauthorized(\\n        address sender,\\n        string module,\\n        string method,\\n        bytes32 role,\\n        string reason,\\n        string context\\n    );\\n\\n    /**\\n     * @param trustedForwarder Contract address that is allowed to relay message signers.\\n     */\\n    constructor(address trustedForwarder) ERC2771Context(trustedForwarder) {\\n        if (trustedForwarder == NULL_ADDRESS)\\n            revert Unacceptable({\\n                reason: \\\"trustedForwarder cannot be empty\\\"\\n            });\\n    }\\n\\n    /**\\n     * @notice Disables incomplete ERC165 support inherited from oz/AccessControl.sol\\n     * @return bool Never returned.\\n     * @dev Always reverts. Do not rely on ERC165 support to interact with this contract.\\n     */\\n    function supportsInterface(bytes4 /*interfaceId */) public view virtual override returns (bool) {\\n        revert Unacceptable ({ reason: \\\"ERC2165 is unsupported\\\" });\\n    }\\n\\n    /**\\n     * @notice Role-based access control.\\n     * @dev Reverts if the account is missing the role.\\n     * @param role The role to check. \\n     * @param account An address to check for the role.\\n     * @param context For reporting purposes. Usually the function that requested the permission check.\\n     */\\n    function _checkRole(\\n        bytes32 role,\\n        address account,\\n        string memory context\\n    ) internal view {\\n        if (!hasRole(role, account))\\n            revert Unauthorized({\\n                sender: account,\\n                module: \\\"KeyringAccessControl\\\",\\n                method: \\\"_checkRole\\\",\\n                role: role,\\n                reason: \\\"sender does not have the required role\\\",\\n                context: context\\n            });\\n    }\\n\\n    /**\\n     * @notice Returns ERC2771 signer if msg.sender is a trusted forwarder, otherwise returns msg.sender.\\n     * @return sender User deemed to have signed the transaction.\\n     */\\n    function _msgSender()\\n        internal\\n        view\\n        virtual\\n        override(Context, ERC2771Context)\\n        returns (address sender)\\n    {\\n        return ERC2771Context._msgSender();\\n    }\\n\\n    /**\\n     * @notice Returns msg.data if not from a trusted forwarder, or truncated msg.data if the signer was \\n     appended to msg.data\\n     * @dev Although not currently used, this function forms part of ERC2771 so is included for completeness.\\n     * @return data Data deemed to be the msg.data\\n     */\\n    function _msgData()\\n        internal\\n        view\\n        virtual\\n        override(Context, ERC2771Context)\\n        returns (bytes calldata)\\n    {\\n        return ERC2771Context._msgData();\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/AccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/metatx/ERC2771Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (metatx/ERC2771Context.sol)\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Context variant with ERC2771 support.\\n */\\nabstract contract ERC2771Context is Context {\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable\\n    address private immutable _trustedForwarder;\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor(address trustedForwarder) {\\n        _trustedForwarder = trustedForwarder;\\n    }\\n\\n    function isTrustedForwarder(address forwarder) public view virtual returns (bool) {\\n        return forwarder == _trustedForwarder;\\n    }\\n\\n    function _msgSender() internal view virtual override returns (address sender) {\\n        if (isTrustedForwarder(msg.sender)) {\\n            // The assembly code is more direct than the Solidity version using `abi.decode`.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                sender := shr(96, calldataload(sub(calldatasize(), 20)))\\n            }\\n        } else {\\n            return super._msgSender();\\n        }\\n    }\\n\\n    function _msgData() internal view virtual override returns (bytes calldata) {\\n        if (isTrustedForwarder(msg.sender)) {\\n            return msg.data[:msg.data.length - 20];\\n        } else {\\n            return super._msgData();\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/IAccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/SignedMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"none\",\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trustedForwarder_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"policyManager_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maximumConsentPeriod_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"module\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"method\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"context\",\"type\":\"string\"}],\"name\":\"Bytes32SetConsistency\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"}],\"name\":\"Unacceptable\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"module\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"method\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"context\",\"type\":\"string\"}],\"name\":\"Unauthorized\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"trustedForwarder_\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"policyManager_\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maximumConsentPeriod\",\"type\":\"uint256\"}],\"name\":\"Deployed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"revocationDeadline\",\"type\":\"uint256\"}],\"name\":\"GrantDegradedServiceConsent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"RevokeDegradedServiceConsent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"merkleRoot\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"birthday\",\"type\":\"uint256\"}],\"name\":\"SetMerkleRootBirthday\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"policyId\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"degradationPeriod\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"degradationFreshness\",\"type\":\"uint256\"}],\"name\":\"SetPolicyParameters\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ROLE_AGGREGATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ROLE_SERVICE_SUPERVISOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"observer\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"subject\",\"type\":\"bytes32\"},{\"internalType\":\"uint32\",\"name\":\"policyId\",\"type\":\"uint32\"}],\"name\":\"canMitigate\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"canIndeed\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"observer\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"merkleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint32\",\"name\":\"admissionPolicyId\",\"type\":\"uint32\"}],\"name\":\"checkRoot\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"passed\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defaultDegradationPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defaultFreshnessPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"policyId\",\"type\":\"uint32\"}],\"name\":\"degradationFreshness\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"inSeconds\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"policyId\",\"type\":\"uint32\"}],\"name\":\"degradationPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"inSeconds\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"revocationDeadline\",\"type\":\"uint256\"}],\"name\":\"grantDegradedServiceConsent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"policyId\",\"type\":\"uint32\"}],\"name\":\"isDegraded\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isIndeed\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"merkleRoot\",\"type\":\"bytes32\"}],\"name\":\"isMerkleRoot\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isIndeed\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"subject\",\"type\":\"bytes32\"},{\"internalType\":\"uint32\",\"name\":\"policyId\",\"type\":\"uint32\"}],\"name\":\"isMitigationQualified\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"qualifies\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"isTrustedForwarder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastUpdate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"root\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maximumConsentPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"merkleRootAtIndex\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"merkleRoot\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"merkleRootCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"policyId\",\"type\":\"uint32\"}],\"name\":\"mitigationCutoff\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"cutoffTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"policyManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"revokeMitigationConsent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"merkleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"birthday\",\"type\":\"uint256\"}],\"name\":\"setMerkleRootBirthday\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"policyId\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"degradationPeriod_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"degradationFreshness_\",\"type\":\"uint256\"}],\"name\":\"setPolicyParameters\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"subjectUpdates\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userConsentDeadlines\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"userConsentsToMitigation\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"doesIndeed\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "IdentityTree", "CompilerVersion": "v0.8.14+commit.80d49f37", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000002f5885a892cff774df6051e70bac6ce552dc7e2a000000000000000000000000685bc814f9ee40fa7bd35588ac6a9e882a2345f300000000000000000000000000000000000000000000000000000000009e3400", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}