{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts-0.8/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-0.8/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-0.8/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-0.8/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-0.8/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    /**\\n     * @notice This function returns the address of the sender of the message.\\n     * @dev This function is an internal view function that returns the address of the sender of the message.\\n     */\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    /**\\n     * @notice _msgData() is an internal view function that returns the calldata of the message.\\n     * @dev This function is used to access the calldata of the message.\\n     */\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IBooster.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.11;\\n\\ninterface IBooster {\\n    struct FeeDistro {\\n        address distro;\\n        address rewards;\\n        bool active;\\n    }\\n\\n    function feeTokens(address _token) external returns (FeeDistro memory);\\n\\n    function earmarkFees(address _feeToken) external returns (bool);\\n\\n    struct PoolInfo {\\n        address lptoken;\\n        address token;\\n        address gauge;\\n        address crvRewards;\\n        address stash;\\n        bool shutdown;\\n    }\\n\\n    function earmarkRewards(uint256 _pid) external returns (bool);\\n\\n    function poolLength() external view returns (uint256);\\n\\n    function lockRewards() external view returns (address);\\n\\n    function poolInfo(uint256 _pid) external view returns (PoolInfo memory poolInfo);\\n\\n    function distributeL2Fees(uint256 _amount) external;\\n\\n    function lockIncentive() external view returns (uint256);\\n\\n    function stakerIncentive() external view returns (uint256);\\n\\n    function earmarkIncentive() external view returns (uint256);\\n\\n    function platformFee() external view returns (uint256);\\n\\n    function FEE_DENOMINATOR() external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IDarkQuestBoard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.11;\\n\\n/** @title Warden Dark Quest Board  */\\n/// @author Paladin\\n/*\\n    Version of Warden Quest Board allowing to blacklist veToken voters\\n    And not account their Bias for rewards distribution\\n*/\\ninterface IDarkQuestBoard {\\n    // Main functions\\n    function createQuest(\\n        address gauge,\\n        address rewardToken,\\n        uint48 duration,\\n        uint256 objective,\\n        uint256 rewardPerVote,\\n        uint256 totalRewardAmount,\\n        uint256 feeAmount,\\n        address[] calldata blacklist\\n    ) external returns (uint256);\\n\\n    function withdrawUnusedRewards(uint256 questID, address recipient) external;\\n\\n    // Manage quest functions\\n    function increaseQuestDuration(\\n        uint256 questID,\\n        uint48 addedDuration,\\n        uint256 addedRewardAmount,\\n        uint256 feeAmount\\n    ) external;\\n\\n    function increaseQuestReward(\\n        uint256 questID,\\n        uint256 newRewardPerVote,\\n        uint256 addedRewardAmount,\\n        uint256 feeAmount\\n    ) external;\\n\\n    function increaseQuestObjective(\\n        uint256 questID,\\n        uint256 newObjective,\\n        uint256 addedRewardAmount,\\n        uint256 feeAmount\\n    ) external;\\n\\n    function emergencyWithdraw(uint256 questID, address recipient) external;\\n\\n    function addToBlacklist(uint256 questID, address account) external;\\n\\n    function addMultipleToBlacklist(uint256 questID, address[] calldata accounts) external;\\n\\n    function removeFromBlacklist(uint256 questID, address account) external;\\n\\n    function closeQuestPeriod(uint256 period) external returns (uint256 closed, uint256 skipped);\\n\\n    function quests(uint256 questID)\\n        external\\n        returns (\\n            address creator,\\n            address rewardToken,\\n            address gauge,\\n            uint48 duration,\\n            uint48 periodStart,\\n            uint256 totalRewardAmount\\n        );\\n\\n    function questBlacklist(uint256 questID, uint256 idx) external view returns (address);\\n\\n    event RemoveVoterBlacklist(uint256 indexed questID, address indexed account);\\n}\\n\"\r\n    },\r\n    \"contracts/peripheral/WardenQuestScheduler.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.11;\\n\\nimport { AuraMath } from \\\"../utils/AuraMath.sol\\\";\\nimport { IERC20 } from \\\"@openzeppelin/contracts-0.8/token/ERC20/IERC20.sol\\\";\\nimport { SafeERC20 } from \\\"@openzeppelin/contracts-0.8/token/ERC20/utils/SafeERC20.sol\\\";\\nimport { Ownable } from \\\"@openzeppelin/contracts-0.8/access/Ownable.sol\\\";\\nimport { IDarkQuestBoard } from \\\"../interfaces/IDarkQuestBoard.sol\\\";\\nimport { IBooster } from \\\"../interfaces/IBooster.sol\\\";\\n\\n/**\\n * @title   WardenQuestScheduler\\n * @author  AuraFinance\\n * @notice   Creates wards Quests  and withdraws incentives from Closed Quests.\\n * @dev  The complete flow from quest to stash takes 4 epochs:\\n *\\n *  1.- Anyone at epoch N creates a quest with duration of 2 epochs.\\n *  2.- Anyone at epoch N+3 withdraws undistributed rewards and queues them for epochs (N+3, N+4).\\n *  3.- Anyone at epoch N+3 forwards queued rewards for a given pid.\\n *  4.- Anyone at epoch N+4 forwards queued rewards for a given pid.\\n */\\ncontract WardenQuestScheduler is Ownable {\\n    using AuraMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    /** @notice Duration of each epoch  */\\n    uint256 public constant epochDuration = 7 days;\\n    /** @notice Total number of epochs for the Quest  */\\n    uint48 public constant duration = 2;\\n    /** @notice Address of booster */\\n    address public immutable booster;\\n    /** @notice Address of the ERC20 used for rewards  */\\n    address public immutable cvx;\\n    /** @notice Address  Ward Dark Quest Board */\\n    address public immutable darkQuestBoard;\\n\\n    /** @notice List of Quest questId => pid */\\n    mapping(uint256 => uint256) public quests;\\n\\n    /** @notice List of queued rewards (epoch => pid => amount) */\\n    mapping(uint256 => mapping(uint256 => uint256)) public rewardsQueue;\\n\\n    /** @notice Event emitted when rewards are queued  */\\n    event QueuedRewards(uint256 epoch, uint256 pid, uint256 rewardAmount);\\n    /** @notice Event emitted when rewards are queued  */\\n    event ForwardedRewards(uint256 epoch, uint256 pid, uint256 rewardAmount);\\n    /** @notice Event emitted when rewards are canceled  */\\n    event CanceledRewards(uint256 epoch, uint256 pid, uint256 rewardAmount);\\n\\n    /**\\n     * @param _booster Address of the booster\\n     * @param _cvx  Cvx token contract\\n     * @param _darkQuestBoard  Dark Quest Board\\n     * @param _owner  Multisig address , the owner of the contract.\\n     */\\n    constructor(\\n        address _booster,\\n        address _cvx,\\n        address _darkQuestBoard,\\n        address _owner\\n    ) Ownable() {\\n        booster = _booster;\\n        cvx = _cvx;\\n        darkQuestBoard = _darkQuestBoard;\\n        _transferOwnership(_owner);\\n    }\\n\\n    /**\\n     * @notice Creates a new Quest at a predefined duration (2 epochs).\\n     * @dev Creates a new Quest struct, and QuestPeriods for the Quest duration\\n     * @param objective Target bias to reach (equivalent to amount of veCRV in wei to reach)\\n     * @param rewardPerVote Amount of reward per veCRV (in wei)\\n     * @param totalRewardAmount Total amount of rewards for the whole Quest (in wei)\\n     * @param feeAmount Paladin platform fees amount (in wei)\\n     * @return questID : ID of the newly created Quest\\n     */\\n    function createQuest(\\n        uint256 pid,\\n        uint256 objective,\\n        uint256 rewardPerVote,\\n        uint256 totalRewardAmount,\\n        uint256 feeAmount,\\n        address[] calldata blacklist\\n    ) external returns (uint256 questID) {\\n        IBooster.PoolInfo memory poolInfo = IBooster(booster).poolInfo(pid);\\n        require(!poolInfo.shutdown, \\\"!shutdown\\\");\\n        require(poolInfo.stash != address(0), \\\"!stash\\\");\\n        // Pull all the rewards + fee in this contract\\n        uint256 totalAmount = totalRewardAmount.add(feeAmount);\\n        IERC20(cvx).safeTransferFrom(msg.sender, address(this), totalAmount);\\n        IERC20(cvx).safeIncreaseAllowance(address(darkQuestBoard), totalAmount);\\n\\n        questID = IDarkQuestBoard(darkQuestBoard).createQuest(\\n            poolInfo.gauge,\\n            cvx,\\n            duration,\\n            objective,\\n            rewardPerVote,\\n            totalRewardAmount,\\n            feeAmount,\\n            blacklist\\n        );\\n        quests[questID] = pid;\\n    }\\n\\n    /**\\n     * @notice Withdraw all undistributed rewards from Closed Quest Periods and queues them to it's linked pid.\\n     * @param questID ID of the Quest\\n     */\\n    function withdrawAndQueueUnusedRewards(uint256 questID) external returns (uint256 amount) {\\n        uint256 pid = quests[questID];\\n        IBooster.PoolInfo memory poolInfo = IBooster(booster).poolInfo(quests[questID]);\\n        require(poolInfo.stash != address(0), \\\"!questID\\\");\\n\\n        // Validate all periods ended.\\n        (, , , , uint48 periodStart, ) = IDarkQuestBoard(darkQuestBoard).quests(questID);\\n        uint256 periodFinish = periodStart + (epochDuration * duration);\\n\\n        require(block.timestamp > periodFinish, \\\"!periodFinish\\\");\\n\\n        uint256 balanceBefore = IERC20(cvx).balanceOf(address(this));\\n        IDarkQuestBoard(darkQuestBoard).withdrawUnusedRewards(questID, address(this));\\n        uint256 balanceAfter = IERC20(cvx).balanceOf(address(this));\\n        amount = balanceAfter.sub(balanceBefore);\\n        require(amount > 0, \\\"!amount\\\");\\n\\n        _queueRewards(pid, duration, amount);\\n    }\\n\\n    /**\\n     * @notice Emergency withdraws all undistributed rewards from Closed Quest Periods & all rewards for Active Periods\\n     * @param questID ID of the Quest\\n     */\\n    function emergencyWithdraw(uint256 questID) external onlyOwner {\\n        IDarkQuestBoard(darkQuestBoard).emergencyWithdraw(questID, owner());\\n    }\\n\\n    //\\n    /**\\n     * @notice allow arbitrary calls to any contract to allow to manage the created quest.\\n     * @param _to Target address\\n     * @param _value Value of the call\\n     * @param _data call data\\n     */\\n    function execute(\\n        address _to,\\n        uint256 _value,\\n        bytes memory _data\\n    ) external onlyOwner returns (bool, bytes memory) {\\n        require(_to == darkQuestBoard, \\\"!invalid target\\\");\\n        bytes4 sig;\\n        assembly {\\n            sig := mload(add(_data, 32))\\n        }\\n\\n        require(\\n            sig != IDarkQuestBoard.createQuest.selector &&\\n                sig != IDarkQuestBoard.withdrawUnusedRewards.selector &&\\n                sig != IDarkQuestBoard.emergencyWithdraw.selector,\\n            \\\"!allowed\\\"\\n        );\\n\\n        (bool success, bytes memory result) = _to.call{ value: _value }(_data);\\n        require(success, \\\"!success\\\");\\n\\n        return (success, result);\\n    }\\n\\n    /**\\n     * @dev Forward rewards available at current epoch\\n     * @param _pid the pool id\\n     */\\n    function forwardRewards(uint256 _pid) external {\\n        _forwardRewards(_getCurrentEpoch(), _pid);\\n    }\\n\\n    /**\\n     * @dev Forward rewards available\\n     * @param _epoch the epoch in which the rewards were queded\\n     * @param _pid the pool id\\n     */\\n    function forwardQueuedRewards(uint256 _epoch, uint256 _pid) external {\\n        _forwardRewards(_epoch, _pid);\\n    }\\n\\n    /**\\n     * @dev Cancels a queued reward an retrieve the queued amount.\\n     * @param _epoch the epoch in which the rewards were queded\\n     * @param _pid the pool id\\n     */\\n    function cancelQueuedRewards(uint256 _epoch, uint256 _pid) external onlyOwner {\\n        uint256 amount = rewardsQueue[_epoch][_pid];\\n        require(amount > 0, \\\"!amount\\\");\\n        rewardsQueue[_epoch][_pid] = 0;\\n\\n        IERC20(cvx).safeTransfer(owner(), amount);\\n        emit CanceledRewards(_epoch, _pid, amount);\\n    }\\n\\n    /**\\n     * @dev Get current epoch\\n     */\\n    function getCurrentEpoch() external view returns (uint256) {\\n        return _getCurrentEpoch();\\n    }\\n\\n    function _getCurrentEpoch() internal view returns (uint256) {\\n        return block.timestamp.div(epochDuration);\\n    }\\n\\n    /**\\n     * @dev Queue rewards to a pid, it splits the rewards evenly by the number of epochs provided.\\n     * It reverts if an epoch already has some queued rewards.\\n     * @param _pid the pool id\\n     * @param _nEpochs Number of epochs to split the rewards\\n     * @param _amount Amount of rewards.\\n     */\\n    function _queueRewards(\\n        uint256 _pid,\\n        uint256 _nEpochs,\\n        uint256 _amount\\n    ) internal {\\n        uint256 rewardAmount = _amount.div(_nEpochs);\\n        uint256 epoch = _getCurrentEpoch();\\n        for (uint256 i = 0; i < _nEpochs; i++) {\\n            rewardsQueue[epoch][_pid] += rewardAmount;\\n            emit QueuedRewards(epoch, _pid, rewardAmount);\\n            epoch++;\\n        }\\n    }\\n\\n    function _forwardRewards(uint256 _epoch, uint256 _pid) internal {\\n        require(_epoch <= _getCurrentEpoch(), \\\"!epoch\\\");\\n        uint256 amount = rewardsQueue[_epoch][_pid];\\n        require(amount > 0, \\\"!amount\\\");\\n        rewardsQueue[_epoch][_pid] = 0;\\n        IBooster.PoolInfo memory poolInfo = IBooster(booster).poolInfo(_pid);\\n\\n        IERC20(cvx).safeTransfer(poolInfo.stash, amount);\\n        emit ForwardedRewards(_epoch, _pid, amount);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/utils/AuraMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.11;\\n\\n/// @notice A library for performing overflow-/underflow-safe math,\\n/// updated with awesomeness from of DappHub (https://github.com/dapphub/ds-math).\\nlibrary AuraMath {\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\\n        c = a + b;\\n    }\\n\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256 c) {\\n        c = a - b;\\n    }\\n\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\\n        c = a * b;\\n    }\\n\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow, so we distribute.\\n        return (a / 2) + (b / 2) + (((a % 2) + (b % 2)) / 2);\\n    }\\n\\n    function to224(uint256 a) internal pure returns (uint224 c) {\\n        require(a <= type(uint224).max, \\\"AuraMath: uint224 Overflow\\\");\\n        c = uint224(a);\\n    }\\n\\n    function to128(uint256 a) internal pure returns (uint128 c) {\\n        require(a <= type(uint128).max, \\\"AuraMath: uint128 Overflow\\\");\\n        c = uint128(a);\\n    }\\n\\n    function to112(uint256 a) internal pure returns (uint112 c) {\\n        require(a <= type(uint112).max, \\\"AuraMath: uint112 Overflow\\\");\\n        c = uint112(a);\\n    }\\n\\n    function to96(uint256 a) internal pure returns (uint96 c) {\\n        require(a <= type(uint96).max, \\\"AuraMath: uint96 Overflow\\\");\\n        c = uint96(a);\\n    }\\n\\n    function to32(uint256 a) internal pure returns (uint32 c) {\\n        require(a <= type(uint32).max, \\\"AuraMath: uint32 Overflow\\\");\\n        c = uint32(a);\\n    }\\n}\\n\\n/// @notice A library for performing overflow-/underflow-safe addition and subtraction on uint32.\\nlibrary AuraMath32 {\\n    function sub(uint32 a, uint32 b) internal pure returns (uint32 c) {\\n        c = a - b;\\n    }\\n}\\n\\n/// @notice A library for performing overflow-/underflow-safe addition and subtraction on uint112.\\nlibrary AuraMath112 {\\n    function add(uint112 a, uint112 b) internal pure returns (uint112 c) {\\n        c = a + b;\\n    }\\n\\n    function sub(uint112 a, uint112 b) internal pure returns (uint112 c) {\\n        c = a - b;\\n    }\\n}\\n\\n/// @notice A library for performing overflow-/underflow-safe addition and subtraction on uint224.\\nlibrary AuraMath224 {\\n    function add(uint224 a, uint224 b) internal pure returns (uint224 c) {\\n        c = a + b;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"none\"\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 800\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_booster\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_cvx\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_darkQuestBoard\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardAmount\",\"type\":\"uint256\"}],\"name\":\"CanceledRewards\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardAmount\",\"type\":\"uint256\"}],\"name\":\"ForwardedRewards\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardAmount\",\"type\":\"uint256\"}],\"name\":\"QueuedRewards\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"booster\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_epoch\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"cancelQueuedRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"objective\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardPerVote\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalRewardAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feeAmount\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"blacklist\",\"type\":\"address[]\"}],\"name\":\"createQuest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"questID\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cvx\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"darkQuestBoard\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"duration\",\"outputs\":[{\"internalType\":\"uint48\",\"name\":\"\",\"type\":\"uint48\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"questID\",\"type\":\"uint256\"}],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"epochDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"execute\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_epoch\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"forwardQueuedRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"forwardRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentEpoch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"quests\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rewardsQueue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"questID\",\"type\":\"uint256\"}],\"name\":\"withdrawAndQueueUnusedRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "WardenQuestScheduler", "CompilerVersion": "v0.8.11+commit.d7f03943", "OptimizationUsed": "1", "Runs": "800", "ConstructorArguments": "000000000000000000000000a57b8d98dae62b26ec3bcc4a365338157060b234000000000000000000000000c0c293ce456ff0ed870add98a0828dd4d2903dbf000000000000000000000000609fb23b9ea7cb3edaf56db5daf07c8e94c155de00000000000000000000000021aed3a7a1c34cd88b8a39dbdae042befbf947ff", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}