{"SourceCode": "//SPDX-License-Identifier:UNLICENSE\r\npragma solidity ^0.8.19;\r\n\r\ncontract VLNDAirdrop{\r\n    address payable public Owner = payable(msg.sender);\r\n    address public DestinationMinter = 0xd195Ad2e69D59154550441C5DA30329512F1E796;\r\n    Hyperlane Mailbox = Hyperlane(0x35231d4c2D8B8ADcB5617A638A0c4548684c7C70);\r\n    Hyperlane GasProcessorContract = Hyperlane(0x56f52c0A1ddcD557285f7CBc782D3d83096CE1Cc);\r\n    \r\n    struct TX{\r\n        address Sender;\r\n        uint256 Payout;\r\n    }\r\n\r\n    function Deposit() public payable returns(bool HyperLaneSendSuccess){\r\n        uint256 GasQuote = GasProcessorContract.quoteGasPayment(137, 100000);\r\n        uint256 payout = ((msg.value - GasQuote) * 100);\r\n\r\n        TX memory MintInfo = TX(msg.sender, payout);\r\n        bool SendToPolygonStatus = SendToGnosis(MintInfo, GasQuote);\r\n\r\n        return(SendToPolygonStatus);\r\n    }\r\n\r\n    function OwnerWithdraw(address payable Destination) public {\r\n        require(msg.sender == Owner);\r\n\r\n        Destination.transfer(address(this).balance);\r\n    }\r\n\r\n    //Hyperlane functions\r\n\r\n    function SendToGnosis(TX memory MintInfo, uint256 GasQuote) internal returns(bool success){\r\n         bytes32 messageId = Mailbox.dispatch(137, addressToBytes32(DestinationMinter), abi.encode(MintInfo));\r\n         GasProcessorContract.payForGas{ value: GasQuote }(messageId, 137, 100000, msg.sender);\r\n\r\n         return(success);\r\n    }\r\n\r\n\r\n    function addressToBytes32(address _addr) public pure returns (bytes32) {\r\n        return bytes32(uint256(uint160(_addr)));\r\n    }   \r\n    function bytes32ToAddress(bytes32 _buf) public pure returns (address) {\r\n        return address(uint160(uint256(_buf)));\r\n    }\r\n\r\n}\r\n\r\ninterface Hyperlane {\r\n    function dispatch(uint32 _destinationDomain, bytes32 _recipientAddress, bytes calldata _messageBody ) external returns (bytes32);\r\n    function process(bytes calldata _metadata, bytes calldata _message) external;\r\n    function payForGas(bytes32 _messageId, uint32 _destinationDomain, uint256 _gasAmount, address _refundAddress) external payable;\r\n    function quoteGasPayment(uint32 _destinationDomain, uint256 _gasAmount) external view returns (uint256);\r\n}", "ABI": "[{\"inputs\":[],\"name\":\"Deposit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"HyperLaneSendSuccess\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DestinationMinter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Owner\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"Destination\",\"type\":\"address\"}],\"name\":\"OwnerWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"addressToBytes32\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_buf\",\"type\":\"bytes32\"}],\"name\":\"bytes32ToAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}]", "ContractName": "VLNDAirdrop", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "Unlicense", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://5cc666ad1b119d60d8db70444e5294035fbda4d7482590a4002bea1ff6012947"}