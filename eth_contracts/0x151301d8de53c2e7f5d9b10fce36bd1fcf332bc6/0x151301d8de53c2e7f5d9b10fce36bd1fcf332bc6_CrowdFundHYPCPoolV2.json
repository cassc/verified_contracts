{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/utils/ERC721Holder.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721Receiver.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC721Receiver} interface.\\n *\\n * Accepts all token transfers.\\n * Make sure the contract is able to use its token with {IERC721-safeTransferFrom}, {IERC721-approve} or {IERC721-setApprovalForAll}.\\n */\\ncontract ERC721Holder is IERC721Receiver {\\n    /**\\n     * @dev See {IERC721Receiver-onERC721Received}.\\n     *\\n     * Always returns `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(address, address, uint256, bytes memory) public virtual override returns (bytes4) {\\n        return this.onERC721Received.selector;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/SignedMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/ethereum/core/CrowdFundHYPCPoolV2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.19;\\n\\nimport '@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol';\\nimport '@openzeppelin/contracts/security/ReentrancyGuard.sol';\\nimport '@openzeppelin/contracts/access/Ownable.sol';\\nimport '../interfaces/ICHYPC.sol';\\nimport '../interfaces/IHYPC.sol';\\nimport '../interfaces/IHYPCSwap.sol';\\n\\nimport '@openzeppelin/contracts/utils/Strings.sol';\\n\\n/**\\n    @title  Crowd Funded HyPC Pool V2\\n    @author Barry Rowe, David Liendo\\n    @notice This contract allows users to pool their HyPC together to swap for c_HyPC (containerized HyPC) that\\n            can be used to back a license in the HyperCycle ecosystem. Unlike HyPC, which is an ERC20, c_HyPC\\n            is a ERC721, with each token corresponding to 2^19 = 524,288 HyPC, and can have a string assigned\\n            to it via its contract. These c_HyPC can be obtained by using the swap contract to deposit 524,288\\n            HyPC for 1 c_HyPC, and can be redeemed for the deposited HyPC again using the same swap contract.\\n\\n            Since swapping HyPC for c_HyPC requires a lot of funds, a pooling contract is useful for users \\n            wanting to have c_HyPC back their license (via the assignment string). In this case, a license \\n            holder can create a proposal in the pool for 1 c_HyPC to back their license. They put up some \\n            backing HyPC as collateral for this loan, that will be used as interest payments for the users\\n            that provide HyPC for the proposal. Unlike in V1 of this pool contract, a license holder can\\n            create a proposal for multiple c_HyPC instead just one.\\n\\n            As an example, a manager wants to borrow a c_HyPC for 18 months (78 weeks). The manager puts up \\n            50,000 HyPC as collateral to act as interest for the user that deposit to this proposal. This means\\n            that the yearly APR for a depositor to the proposal will be: 50,000/524,288 * (26/39) = 0.063578288\\n            or roughly 6.35% (26 being the number of 2 week periods in a year, and 39 the number of 2 week\\n            periods in the proposal's term). The depositors can then claim this interest every period (2 weeks) \\n            until the end of the proposal, at which point they can then withdraw and get back their initial \\n            deposit. While the proposal is active, the c_HyPC is held by the pool contract itself, though the \\n            manager that created the proposal can change the assignement of the swapped for c_HyPC.\\n\\n            All amounts of HyPC follow the token's native 6 decimals of percision. Dimensionless amounts,\\n            like that of the APR calcuation, are also held to 6 decimals of percision. General units are\\n            as follows:\\n\\n            HyPC = 6 decimals, (eg: 1.2 HyPC = 1,200,000)\\n            timestamps = 0 decimals, seconds (eg: startTime = block.timestamp)\\n            periods = 0 decimals, 2 weeks (ie: 1 period = 2*7*24*60*60 seconds, 18 months = 34 periods)\\n            interestRate = 6 decimals, dimensionless ( 10% = 100,000 )\\n            \\n*/\\n\\n/* General Errors (modifiers) */\\n///@dev Error for proposal index being invalid.\\nerror InvalidProposalIndex();\\n///@dev Error for when the sender must be the owner of the proposal.\\nerror MustBeProposalOwner();\\n///@dev Error for user deposit index being invalid.\\nerror InvalidDepositIndex();\\n\\n/* Constructor Errors */\\n///@dev Error if given an invalid HyPC token address on construction\\nerror InvalidToken();\\n///@dev Error if given an invalid CHyPC NFT address on construction\\nerror InvalidNFT();\\n///@dev Error if given an invalid Swap address on construction\\nerror InvalidSwapContract();\\n\\n/* Create Proposal Errors */\\n///@dev Error for when the term number is not < 3 (18, 24, and 36 months respectively)\\nerror InvalidTermNumber();\\n///@dev Error for when the proposal deadline is not later than the current block plus 1 hour buffer.\\nerror DeadlineMustBeInFutureByOneHour();\\n///@dev Error for when the number of NFTs in a proposal is 0.\\nerror NumberNFTsPositive();\\n///@dev Error for when the number of NFTs is way too large (>4096).\\nerror NumberNFTsTooLarge();\\n\\n///@dev Errof for when the poolFee in the request doesn't match.\\nerror PoolFeeDoesntMatch();\\n\\n/* createDeposit Errors */\\n///@dev Error for when the proposal it not pending.\\nerror ProposalIsNotPending();\\n///@dev Error for when the proposal is expired.\\nerror ProposalIsExpired();\\n///@dev Error for when the HyPC deposit amount is 0.\\nerror HYPCDepositMustBePositive();\\n///@dev Error for when the HyPC exceeds the requested amount.\\nerror HYPCDepositExceedsProposalRequest();\\n\\n/* transferDeposit Errors */\\n///@dev Error for when you try to transfer a deposit to yourself\\nerror CantTransferDepositToSelf();\\n///@dev Error for when you try to transfer to an address that is not registered.\\nerror AddressNotRegistered();\\n\\n/* transferProposal Errors */\\n///@dev Error for when trying to transfer a proposal to yourself.\\nerror CantTransferProposalToSelf();\\n\\n/* startProposal Errors */\\n///@dev Error for when trying to start a proposal that hasn't been filled yet.\\nerror ProposalMustBeFilled();\\n\\n/* swapTokens Errors */\\n///@dev Error for when the proposal is not in the started state.\\nerror ProposalMustBeInStartedState();\\n///@dev Error for when trying to swap too many tokens.\\nerror SwappingTooManyTokens();\\n\\n/* redeemTokens Errors */\\n///@dev Error for when the proposal must be in the completed state.\\nerror ProposalMustBeCompleted();\\n///@dev Error for when trying to redeem too many tokens.\\nerror RedeemingTooManyTokens();\\n\\n/* withdrawDeposit Errors */\\n///@dev Error for when the proposal is in the started state\\nerror ProposalMustNotBeInStartedState();\\n///@dev Error for when trying to withdraw a deposit before collecting the interest.\\nerror DepositMustBeUpdatedBeforeWithdrawn();\\n///@dev Error for when trying to withdraw a deposit before redeeming the tokens.\\nerror TokensMustBeRedeemedFirst();\\n\\n/* updateDeposit Errors */\\n///@dev Error for when the proposal is not in the started or completed states.\\nerror ProposalMustBeStartedOrCompleted();\\n///@dev Error for when not enough time has passed since the last interest collection.\\nerror NotEnoughTimeSinceLastInterestCollection();\\n\\n/* completeProposal Errors */\\n///@dev Error for when trying to complete a proposal before it reaches the end of its term.\\nerror ProposalMustReachEndOfTerm();\\n\\n/* finishProposal Errors */\\n///@dev Error for when there are still tokens left to redeem.\\nerror TokensStillNeedToBeRedeemed();\\n///@dev Error for when users still need to withdraw from the proposal.\\nerror UsersMustWithdrawFromProposal();\\n///@dev Error for when backing funds are 0.\\nerror BackingFundsMustBePositive();\\n\\n/* changeAssignment Errors */\\n///@dev Error for when the token index in the proposal is invalid\\nerror InvalidTokenIndex();\\n\\ncontract CrowdFundHYPCPoolV2 is ERC721Holder, Ownable, ReentrancyGuard {\\n    enum Term {\\n        PENDING,\\n        STARTED,\\n        CANCELLED,\\n        COMPLETED\\n    }\\n\\n    struct ContractProposal {\\n        address owner;\\n        uint256 term;\\n        uint256 interestRateAPR;\\n        uint256 deadline;\\n        uint256 startTime;\\n        uint256 depositedAmount;\\n        uint256 backingFunds;\\n        Term status;\\n        uint256[] tokenIds;\\n        uint256 numberNFTs;\\n    }\\n\\n    struct UserDeposit {\\n        uint256 amount;\\n        uint256 proposalIndex;\\n        uint256 interestTime;\\n    }\\n\\n    ContractProposal[] public proposals;\\n    mapping(address => UserDeposit[]) public userDeposits;\\n\\n    mapping(address => bool) public transferRegistry;\\n\\n    /// @notice The HyPC ERC20 contract\\n    IHYPC public immutable hypcToken;\\n\\n    /// @notice The c_HyPC ERC721 contract\\n    ICHYPC public immutable hypcNFT;\\n\\n    /// @notice The HyPC/c_HyPC swapping contract\\n    IHYPCSwap public immutable swapContract;\\n\\n    /** \\n        @notice The pool fee set by the pool owner and is collected for each created proposal. \\n                This is given in HyPC with 6 decimals, and is per c_HyPC requested, so a\\n                proposal for two c_HyPC will collect two times the poolFee.\\n    */\\n    uint256 public poolFee = 0;\\n\\n    uint256 private constant PROPOSAL_CREATION_DEADLINE_BUFFER = 3600; //1 hour\\n    //Timing is done PER WEEK, with the assumption that 1 year = 52 weeks\\n    uint256 private constant _2_WEEKS = 60 * 60 * 24 * 14;\\n    uint256 private constant _18_MONTHS = 60 * 60 * 24 * 7 * 78; //78 weeks\\n    uint256 private constant _24_MONTHS = 60 * 60 * 24 * 7 * 104; //104 weeks\\n    uint256 private constant _36_MONTHS = 60 * 60 * 24 * 7 * 156; //156 weeks\\n\\n    uint256 private constant SIX_DECIMALS = 10 ** 6;\\n    uint256 private constant APR_DECIMALS = 10 ** 6;\\n    uint256 private constant PERIODS_PER_YEAR = 26;\\n    uint256 private constant PERIODS_PER_YEAR_TIMES_APR_DECIMALS = PERIODS_PER_YEAR * APR_DECIMALS;\\n    uint256 private constant HYPC_PER_CHYPC_SIX_DECIMALS = 2 ** 19 * SIX_DECIMALS;\\n\\n    //@dev Rough leeway parameter for the last deposit of a proposal (1 HyPC).\\n    uint256 private constant DEPOSIT_FILL_LEEWAY = SIX_DECIMALS;\\n\\n    //@dev Rough guideline for the maximum number nfts available in the CHYPC contract.\\n    uint256 private constant MAX_NFTS = 4096;\\n\\n    //Events\\n    /// @dev   The event for when a manager creates a proposal.\\n    /// @param proposalIndex: the proposal that was created\\n    /// @param owner: the proposal creator's address\\n    /// @param numberNFTs: the number of NFTs for for this proposal\\n    /// @param deadline: the deadline in blocktime seconds for this proposal to be filled.\\n    event ProposalCreated(uint256 indexed proposalIndex, address indexed owner, uint256 numberNFTs, uint256 deadline);\\n\\n    /// @dev   The event for when a proposal is canceled by its creator\\n    /// @param proposalIndex: the proposal that was canceled\\n    /// @param owner: The creator's address\\n    event ProposalCanceled(uint256 indexed proposalIndex, address indexed owner);\\n\\n    /// @dev   The event for when a proposal is finished by its creator\\n    /// @param proposalIndex: the proposal that was finished\\n    /// @param owner: the creator of the proposal\\n    event ProposalFinished(uint256 indexed proposalIndex, address indexed owner);\\n\\n    /// @dev   The event for when a user submits a deposit towards a proposal\\n    /// @param proposalIndex: the proposal this deposit was made towards\\n    /// @param user: the user address that submitted this deposit\\n    /// @param amount: the amount of HyPC the user deposited to this proposal.\\n    event DepositCreated(uint256 indexed proposalIndex, address indexed user, uint256 amount);\\n\\n    /// @dev   The event for when a user withdraws a previously created deposit\\n    /// @param depositIndex: the user's deposit index that was withdrawn\\n    /// @param user: the user's address\\n    /// @param amount: the amount of HyPC that was withdrawn.\\n    event WithdrawDeposit(uint256 indexed depositIndex, address indexed user, uint256 amount);\\n\\n    /// @dev   The event for when a user updates their deposit and gets interest.\\n    /// @param depositIndex: the deposit index for this user\\n    /// @param user: the address of the user\\n    /// @param interestChange: the amount of HyPC interest given to this user for this update.\\n    event UpdateDeposit(uint256 indexed depositIndex, address indexed user, uint256 interestChange);\\n\\n    /// @dev   The event for when a user transfers their deposit to another user.\\n    /// @param depositIndex: the deposit index for this user\\n    /// @param user: the address of the user\\n    /// @param to: the address that this deposit was sent to\\n    /// @param amount: the amount of HyPC in this deposit.\\n    event TransferDeposit(uint256 indexed depositIndex, address indexed user, address indexed to, uint256 amount);\\n\\n    /// @dev   The event for when a proposal owner transfers their proposal to another user.\\n    /// @param proposalIndex: the proposal index for this\\n    /// @param user: the address of the user\\n    /// @param to: the address that this proposal was sent to\\n    /// @param numberNFTs: the number of c_HyPC requested for this proposal.\\n    event TransferProposal(uint256 indexed proposalIndex, address indexed user, address indexed to, uint256 numberNFTs);\\n\\n    /// @dev   The event for when a manager changes the assigned string of a token in a proposal.\\n    /// @param proposalIndex: Index of the changed proposal.\\n    /// @param owner: the address of the proposal's owner.\\n    /// @param assignment: string that the proposal's assignment was changed to.\\n    /// @param tokenIndex: the index inside the proposal.tokenIds array being changed.\\n    /// @param assignmentRef: string that the proposal's assignment was changed to.\\n    event AssignmentChanged(\\n        uint256 indexed proposalIndex,\\n        address indexed owner,\\n        string indexed assignment,\\n        uint256 tokenIndex,\\n        string assignmentRef\\n    );\\n\\n    /// @dev The event for a token swap.\\n    /// @param user: Address of the user calling the swap function.\\n    /// @param proposalIndex: Proposal whose tokens are being swappped.\\n    /// @param tokensToSwap: Amount of tokens swapped.\\n    event TokensSwapped(address indexed user, uint256 indexed proposalIndex, uint256 tokensToSwap);\\n\\n    /// @dev   The event for when tokens has been redeemed.\\n    /// @param user: Address of the user redeeming the tokens\\n    /// @param proposalIndex: Index of the proposal from where the tokens will be redeemed\\n    /// @param redeemedTokens: Amount of tokens redeemed.\\n    event TokensRedeemed(address indexed user, uint256 indexed proposalIndex, uint256 redeemedTokens);\\n\\n    /// @dev   The event for when a proposal is started.\\n    /// @param user: Address of the user that started the proposal\\n    /// @param proposalIndex: Index of the proposal that was started.\\n    event ProposalStarted(address indexed user, uint256 indexed proposalIndex, uint256 timestamp);\\n\\n    /// @dev   The event for when a proposal is started.\\n    /// @param user: Address of the user that completed the proposal\\n    /// @param proposalIndex: Index of the proposal that was completed.\\n    event ProposalCompleted(address indexed user, uint256 indexed proposalIndex, uint256 timestamp);\\n\\n    /// @dev   The event for when pool fee has been set.\\n    /// @param poolFee: The fee per token to charge for creating a proposal..\\n    event PoolFeeSet(uint256 indexed poolFee);\\n\\n\\n    //Modifiers\\n    /// @dev   Checks that this proposal index has been created.\\n    /// @param proposalIndex: the proposal index to check\\n    modifier validIndex(uint256 proposalIndex) {\\n        if (proposalIndex >= proposals.length) {\\n            revert InvalidProposalIndex();\\n        }\\n        _;\\n    }\\n\\n    /// @dev   Checks that the transaction sender is the proposal owner\\n    /// @param proposalIndex: the proposal index to check ownership of.\\n    modifier proposalOwner(uint256 proposalIndex) {\\n        if (msg.sender != proposals[proposalIndex].owner) {\\n            revert MustBeProposalOwner();\\n        }\\n        _;\\n    }\\n\\n    /// @dev   Checks that the transaction sender's deposit index is valid.\\n    /// @param depositIndex: the sender's index to check.\\n    modifier validDeposit(uint256 depositIndex) {\\n        if (depositIndex >= userDeposits[msg.sender].length) {\\n            revert InvalidDepositIndex();\\n        }\\n        _;\\n    }\\n\\n    /**\\n        @dev   The constructor takes in the HyPC token, c_HyPC token, and Swap contract addresses to populate\\n               the contract interfaces.\\n        @param hypcTokenAddress: the address for the HyPC token contract.\\n        @param hypcNFTAddress: the address for the CHyPC token contract.\\n        @param swapContractAddress: the address of the Swap contract.\\n    */\\n    constructor(address hypcTokenAddress, address hypcNFTAddress, address swapContractAddress, uint256 defaultFee) {\\n        if (hypcTokenAddress == address(0)) {\\n            revert InvalidToken();\\n        } else if (hypcNFTAddress == address(0)) {\\n            revert InvalidNFT();\\n        } else if (swapContractAddress == address(0)) {\\n            revert InvalidSwapContract();\\n        }\\n\\n        hypcToken = IHYPC(hypcTokenAddress);\\n        hypcNFT = ICHYPC(hypcNFTAddress);\\n        swapContract = IHYPCSwap(swapContractAddress);\\n\\n        //pool fee is set to the given default\\n        poolFee = defaultFee;\\n        emit PoolFeeSet(defaultFee);\\n    }\\n\\n    /// @notice Allows the owner of the pool to set the fee on proposal creation.\\n    /// @param  fee: the fee in HyPC, per requested c_HyPC, to charge the proposal creator on creation.\\n    function setPoolFee(uint256 fee) external onlyOwner {\\n        poolFee = fee;\\n        emit PoolFeeSet(fee);\\n    }\\n\\n    /**\\n        @notice Allows someone to create a proposal to have HyPC pooled together to swap for c_HyPC token(s).\\n                The creator specifies the term length for this proposal, the number of c_HyPCs to request,\\n                and then supplies an amount of HyPC to act as interest for the depositors of the\\n                proposal.\\n        @param  termNum: either 0, 1, or 2, corresponding to 18 months, 24 months or 36 months respectively.\\n        @param  backingFunds: the amount of HyPC that the creator puts up to create the proposal, which acts\\n                as the interest to give to the depositors during the course of the proposal's term.\\n        @param  numberNFTs: the number of c_HyPC that this proposal is requesting.\\n        @param  deadline: the block timestamp that this proposal must be filled by in order to be started.\\n        @param  specifiedFee: The fee that the creator expects to pay per token\\n        @dev    The specifiedFee parameter is used to prevent a pool owner from front-running a transaction\\n                to increase the poolFee after a creator has submitted a transaction.\\n        @dev    The interest rate calculation for the variable interestRateAPR is described in the contract's\\n                comment section. The only difference here is that there is an extra term in the numerator of\\n                APR_DECIMALS since we can't have floating point numbers by default in solidity.\\n    */\\n    function createProposal(\\n        uint256 termNum,\\n        uint256 backingFunds,\\n        uint256 numberNFTs,\\n        uint256 deadline,\\n        uint256 specifiedFee\\n    ) external {\\n        if (termNum >= 3) {\\n            revert InvalidTermNumber();\\n        } else if (deadline <= block.timestamp + PROPOSAL_CREATION_DEADLINE_BUFFER) {\\n            revert DeadlineMustBeInFutureByOneHour();\\n        } else if (numberNFTs == 0) {\\n            revert NumberNFTsPositive();\\n        } else if (numberNFTs > MAX_NFTS) {\\n            revert NumberNFTsTooLarge();\\n        } else if (specifiedFee != poolFee) {\\n            revert PoolFeeDoesntMatch();\\n        }\\n\\n        uint256 termLength;\\n        if (termNum == 0) {\\n            termLength = _18_MONTHS;\\n        } else if (termNum == 1) {\\n            termLength = _24_MONTHS;\\n        } else {\\n            termLength = _36_MONTHS;\\n        }\\n\\n        uint256 requiredFunds = HYPC_PER_CHYPC_SIX_DECIMALS * numberNFTs;\\n        uint256 periods = termLength / _2_WEEKS;\\n\\n        uint256 interestRateAPR = (backingFunds * PERIODS_PER_YEAR_TIMES_APR_DECIMALS) / (requiredFunds * periods);\\n\\n        proposals.push(\\n            ContractProposal({\\n                owner: msg.sender,\\n                term: termLength,\\n                interestRateAPR: interestRateAPR,\\n                deadline: deadline,\\n                backingFunds: backingFunds,\\n                tokenIds: new uint256[](0),\\n                numberNFTs: numberNFTs,\\n                startTime: 0,\\n                status: Term.PENDING,\\n                depositedAmount: 0\\n            })\\n        );\\n\\n        hypcToken.transferFrom(msg.sender, address(this), backingFunds);\\n        hypcToken.transferFrom(msg.sender, owner(), poolFee * numberNFTs);\\n        emit ProposalCreated(proposals.length, msg.sender, numberNFTs, deadline);\\n    }\\n\\n    /**\\n        @notice Lets a user creates a deposit for a pending proposal and submit the specified amount of \\n                HyPC to back it.\\n        @param  proposalIndex: the proposal index that the user wants to back.\\n        @param  amount: the amount of HyPC the user wishes to deposit towards this proposal.\\n    */\\n    function createDeposit(uint256 proposalIndex, uint256 amount) external validIndex(proposalIndex) {\\n        ContractProposal memory proposalData = proposals[proposalIndex];\\n\\n        if (proposalData.status != Term.PENDING) {\\n            revert ProposalIsNotPending();\\n        } else if (block.timestamp >= proposalData.deadline) {\\n            revert ProposalIsExpired();\\n        } else if (amount == 0) {\\n            revert HYPCDepositMustBePositive();\\n        }\\n\\n        uint256 total_required_funds = HYPC_PER_CHYPC_SIX_DECIMALS * proposalData.numberNFTs;\\n\\n        //If amount is bigger than the requested amount because of the leeway parameter,\\n        //truncate the amount to just the remaining bit.\\n        uint256 original_amount = amount;\\n        if (proposalData.depositedAmount + amount > total_required_funds) {\\n            amount = total_required_funds - proposalData.depositedAmount;\\n            if (original_amount - amount > DEPOSIT_FILL_LEEWAY) revert HYPCDepositExceedsProposalRequest();\\n        }\\n\\n        //Register deposit into proposal's array\\n        proposals[proposalIndex].depositedAmount += amount;\\n\\n        //Register user's deposit\\n        userDeposits[msg.sender].push(UserDeposit({proposalIndex: proposalIndex, amount: amount, interestTime: 0}));\\n        hypcToken.transferFrom(msg.sender, address(this), amount);\\n        emit DepositCreated(proposalIndex, msg.sender, amount);\\n    }\\n\\n    /**\\n        @notice Lets a user that owns a deposit for a proposal to transfer the ownership of that\\n                deposit to another user. This is useful for liquidity since deposit can be tied up for\\n                fairly long periods of time.\\n        @param  depositIndex: the index of this users deposits array that they wish to transfer.\\n        @param  to: the address of the user to send this deposit to\\n        @dev    Deposit objects are deleted from the deposits array after being transferred. The deposit is \\n                deleted and the last entry of the array is copied to that index so the array can be decreased\\n                in length, so we can avoid iterating through the array.\\n    */\\n    function transferDeposit(uint256 depositIndex, address to) external validDeposit(depositIndex) {\\n        if (to == msg.sender) {\\n            revert CantTransferDepositToSelf();\\n        } else if (transferRegistry[to] != true) {\\n            revert AddressNotRegistered();\\n        }\\n\\n        UserDeposit[] memory depositDataArray = userDeposits[msg.sender];\\n        UserDeposit memory depositData = depositDataArray[depositIndex];\\n\\n        //Copy deposit to the new address\\n        userDeposits[to].push(depositData);\\n        uint256 amount = depositData.amount;\\n\\n        //Delete this user deposit now.\\n        //If the deposit is not the last one, then swap it with the last one.\\n        if (depositDataArray.length > 1 && depositIndex < depositDataArray.length - 1) {\\n            userDeposits[msg.sender][depositIndex] = depositDataArray[depositDataArray.length - 1];\\n        }\\n        userDeposits[msg.sender].pop();\\n        emit TransferDeposit(depositIndex, msg.sender, to, amount);\\n    }\\n\\n    /**\\n        @notice Lets a proposal owner transfer their proposal to another address.\\n        @param  proposalIndex: the index of the proposal that they wish to transfer.\\n        @param  to: the address to send this proposal to\\n    */\\n    function transferProposal(\\n        uint256 proposalIndex,\\n        address to\\n    ) external validIndex(proposalIndex) proposalOwner(proposalIndex) {\\n        if (to == msg.sender) {\\n            revert CantTransferProposalToSelf();\\n        } else if (transferRegistry[to] != true) {\\n            revert AddressNotRegistered();\\n        }\\n\\n        proposals[proposalIndex].owner = to;\\n        emit TransferProposal(proposalIndex, msg.sender, to, proposals[proposalIndex].numberNFTs);\\n    }\\n\\n    /**\\n        @notice Marks a proposal as started after it has received enough HyPC. At this point the proposal\\n                sets the timestamp for the length of the term and interest payments. \\n                periods.\\n        @param  proposalIndex: the proposal to start.\\n    */\\n    function startProposal(uint256 proposalIndex) external validIndex(proposalIndex) {\\n        ContractProposal memory proposalData = proposals[proposalIndex];\\n\\n        if (proposalData.status != Term.PENDING) {\\n            revert ProposalIsNotPending();\\n        } else if (block.timestamp >= proposalData.deadline) {\\n            revert ProposalIsExpired();\\n        } else if (proposalData.depositedAmount != HYPC_PER_CHYPC_SIX_DECIMALS * proposalData.numberNFTs) {\\n            revert ProposalMustBeFilled();\\n        }\\n\\n        //Start the proposal now:\\n        proposals[proposalIndex].status = Term.STARTED;\\n        proposals[proposalIndex].startTime = block.timestamp;\\n        emit ProposalStarted(msg.sender, proposalIndex, block.timestamp);\\n    }\\n\\n    /**\\n        @notice Once a proposal has started, this swaps the deposited HyPC for c_HyPC so that it can\\n                be assigned by the proposal owner.\\n        @param  proposalIndex: the index of the proposal to use.\\n        @param  tokensToSwap: the number of tokens to swap with this call.\\n        @dev    This function is needed to swap HyPC for c_HyPC aftter a proposal has been started.\\n                This is split away from the startProposal function in PoolV1  since potentially there \\n                could be many swaps required.\\n    */\\n    function swapTokens(uint256 proposalIndex, uint256 tokensToSwap) external nonReentrant validIndex(proposalIndex) {\\n        ContractProposal memory proposalData = proposals[proposalIndex];\\n\\n        if (proposalData.status != Term.STARTED) {\\n            revert ProposalMustBeInStartedState();\\n        } else if (tokensToSwap + proposalData.tokenIds.length > proposalData.numberNFTs) {\\n            revert SwappingTooManyTokens();\\n        }\\n\\n        //approve first\\n        hypcToken.approve(address(swapContract), tokensToSwap * HYPC_PER_CHYPC_SIX_DECIMALS);\\n\\n        uint256 _i;\\n        for (_i = 0; _i < tokensToSwap; _i++) {\\n            uint256 tokenId = swapContract.nfts(0);\\n            proposals[proposalIndex].tokenIds.push(tokenId);\\n\\n            //Swap for CHYPC\\n            swapContract.swap();\\n        }\\n        assert(proposals[proposalIndex].tokenIds.length >= tokensToSwap);\\n        emit TokensSwapped(msg.sender, proposalIndex, tokensToSwap);\\n    }\\n\\n    /**\\n        @notice Once a proposal has completed, this redeems the previously swapped c_HyPC back to HyPC\\n                so that it can be withdrawn by the owners of the deposits.\\n        @param  proposalIndex: the index of the proposal to use.\\n        @param  tokensToRedeem: the number of tokens to reedem with this call.\\n        @dev    This function is needed to redeem c_HyPC for HyPC after a proposal has been completed.\\n                This allows a user with a deposit to reclaim their original deposited HyPC.\\n    */\\n    function redeemTokens(\\n        uint256 proposalIndex,\\n        uint256 tokensToRedeem\\n    ) external nonReentrant validIndex(proposalIndex) {\\n        ContractProposal memory proposalData = proposals[proposalIndex];\\n\\n        if (proposalData.status != Term.COMPLETED) {\\n            revert ProposalMustBeCompleted();\\n        } else if (tokensToRedeem > proposalData.tokenIds.length) {\\n            revert RedeemingTooManyTokens();\\n        }\\n\\n        uint256 _i;\\n        for (_i = 0; _i < tokensToRedeem; _i++) {\\n            //unassign token and redeem it.\\n            uint256 tokenId = proposalData.tokenIds[proposalData.tokenIds.length - _i - 1];\\n            proposals[proposalIndex].tokenIds.pop();\\n\\n            hypcNFT.assign(tokenId, '');\\n            hypcNFT.approve(address(swapContract), tokenId);\\n            swapContract.redeem(tokenId);\\n        }\\n\\n        emit TokensRedeemed(msg.sender, proposalIndex, tokensToRedeem);\\n    }\\n\\n    /**\\n        @notice If a proposal hasn't been started yet, then the creator can cancel it and get back their\\n                backing HyPC. Users who have deposited can then withdraw their deposits with the withdrawDeposit\\n                function given below.\\n        @param  proposalIndex: the proposal index to cancel.\\n    */\\n    function cancelProposal(uint256 proposalIndex) external validIndex(proposalIndex) proposalOwner(proposalIndex) {\\n        if (proposals[proposalIndex].status != Term.PENDING) {\\n            revert ProposalIsNotPending();\\n        }\\n\\n        uint256 amount = proposals[proposalIndex].backingFunds;\\n        proposals[proposalIndex].backingFunds = 0;\\n        proposals[proposalIndex].status = Term.CANCELLED;\\n        hypcToken.transfer(msg.sender, amount);\\n\\n        emit ProposalCanceled(proposalIndex, msg.sender);\\n    }\\n\\n    /**\\n        @notice Allows a user to withdraw their deposit from a proposal if that proposal has been canceled,\\n                passed its deadline, has not been started yet, or has come to term. In effect this means that\\n                to withdraw a token, all status states are ok except the STARTED state. For the case of a proposal\\n                that has come to term, then the user has to update their deposit to claim any remaining \\n                interest first, and all of the proposal's c_HyPC need to be redeemed.\\n        @param  depositIndex: the index of this user's deposits array that they wish to withdraw.\\n    */\\n    function withdrawDeposit(uint256 depositIndex) external validDeposit(depositIndex) {\\n        UserDeposit[] memory depositDataArray = userDeposits[msg.sender];\\n        UserDeposit memory depositData = userDeposits[msg.sender][depositIndex];\\n        uint256 proposalIndex = depositData.proposalIndex;\\n        ContractProposal memory proposalData = proposals[proposalIndex];\\n        Term status = proposalData.status;\\n\\n        if (status == Term.STARTED) {\\n            revert ProposalMustNotBeInStartedState();\\n        }\\n\\n        if (status == Term.COMPLETED) {\\n            if (depositData.interestTime != proposalData.startTime + proposalData.term) {\\n                revert DepositMustBeUpdatedBeforeWithdrawn();\\n            }\\n            if (proposalData.tokenIds.length != 0) {\\n                revert TokensMustBeRedeemedFirst();\\n            }\\n        }\\n\\n        uint256 amount = depositData.amount;\\n        proposals[proposalIndex].depositedAmount -= amount;\\n\\n        //Delete this user deposit now.\\n        //If the deposit is not the last one, then swap it with the last one.\\n        if (depositDataArray.length > 1 && depositIndex < depositDataArray.length - 1) {\\n            userDeposits[msg.sender][depositIndex] = depositDataArray[depositDataArray.length - 1];\\n        }\\n        userDeposits[msg.sender].pop();\\n\\n        hypcToken.transfer(msg.sender, amount);\\n\\n        emit WithdrawDeposit(depositIndex, msg.sender, amount);\\n    }\\n\\n    /**\\n        @notice Updates a user's deposit and sends them the accumulated interest from the amount of two week\\n                periods that have passed.\\n        @param  depositIndex: the index of this user's deposits array that they wish to update.\\n        @dev    The interestChange variable takes the user's deposit amount and multiplies it by the \\n                proposal's calculated interestRateAPR to get the the yearly interest for this deposit with\\n                6 extra decimal places. It divides this by the number of periods in a year to get the interest\\n                from one two-week period, and multiplies it by the number of two week periods that have passed\\n                since this function was called to account for periods that were previously skipped. Finally,\\n                it divides the result by APR_DECIMALS to remove the extra decimal places.\\n    */\\n    function updateDeposit(uint256 depositIndex) external validDeposit(depositIndex) {\\n        //get some interest from this deposit\\n        UserDeposit memory deposit = userDeposits[msg.sender][depositIndex];\\n\\n        ContractProposal memory proposalData = proposals[deposit.proposalIndex];\\n\\n        if (proposalData.status != Term.STARTED && proposalData.status != Term.COMPLETED) {\\n            revert ProposalMustBeStartedOrCompleted();\\n        }\\n\\n        if (deposit.interestTime == 0) {\\n            userDeposits[msg.sender][depositIndex].interestTime = proposalData.startTime;\\n        }\\n\\n        uint256 endTime = block.timestamp;\\n        if (endTime > proposalData.startTime + proposalData.term) {\\n            endTime = proposalData.startTime + proposalData.term;\\n        }\\n\\n        //@dev Don't use depositData since the interestTime could have been changed above\\n        uint256 periods = (endTime - userDeposits[msg.sender][depositIndex].interestTime) / _2_WEEKS;\\n        if (periods == 0) {\\n            revert NotEnoughTimeSinceLastInterestCollection();\\n        }\\n\\n        uint256 interestChange = (deposit.amount * periods * proposalData.interestRateAPR) /\\n            (PERIODS_PER_YEAR_TIMES_APR_DECIMALS);\\n\\n        //send this interestChange to the user and update both the backing funds and the interest time;\\n        userDeposits[msg.sender][depositIndex].interestTime += periods * _2_WEEKS;\\n        proposals[deposit.proposalIndex].backingFunds -= interestChange;\\n\\n        hypcToken.transfer(msg.sender, interestChange);\\n        emit UpdateDeposit(depositIndex, msg.sender, interestChange);\\n    }\\n\\n    /**\\n        @notice This completes the proposal after it has come to term, allowing the underlying c_HyPC to be\\n                redeemed by the contract so it can be given back to the depositors.\\n        @param  proposalIndex: the proposal's index to complete.\\n    */\\n    function completeProposal(uint256 proposalIndex) external validIndex(proposalIndex) {\\n        ContractProposal memory proposalData = proposals[proposalIndex];\\n        if (proposalData.status != Term.STARTED) {\\n            revert ProposalMustBeInStartedState();\\n        } else if (block.timestamp < proposalData.startTime + proposalData.term) {\\n            revert ProposalMustReachEndOfTerm();\\n        }\\n\\n        proposals[proposalIndex].status = Term.COMPLETED;\\n        emit ProposalCompleted(msg.sender, proposalIndex, block.timestamp);\\n    }\\n\\n    /**\\n        @notice This allows the creator of a completed proposal to claim any left over backingFunds interest\\n                after all users have withdrawn their deposits from this proposal.\\n        @param  proposalIndex: the proposal's index to be finished.\\n    */\\n    function finishProposal(uint256 proposalIndex) external validIndex(proposalIndex) proposalOwner(proposalIndex) {\\n        ContractProposal memory proposalData = proposals[proposalIndex];\\n\\n        if (proposalData.status != Term.COMPLETED) {\\n            revert ProposalMustBeCompleted();\\n        } else if (proposalData.tokenIds.length != 0) {\\n            revert TokensStillNeedToBeRedeemed();\\n        } else if (proposalData.depositedAmount != 0) {\\n            revert UsersMustWithdrawFromProposal();\\n        } else if (proposalData.backingFunds == 0) {\\n            revert BackingFundsMustBePositive();\\n        }\\n\\n        uint256 amountToSend = proposalData.backingFunds;\\n        proposals[proposalIndex].backingFunds = 0;\\n\\n        hypcToken.transfer(msg.sender, amountToSend);\\n        emit ProposalFinished(proposalIndex, msg.sender);\\n    }\\n\\n    /**\\n        @notice This allows a proposal creator to change the assignment of a c_HyPC token that was swapped for\\n                in a fulfilled proposal.\\n        @param  proposalIndex: the proposal's index to have its c_HyPC assignment changed.\\n        @param  tokenIndex: the index for the token inside the proposal.tokenIds array.\\n    */\\n    function changeAssignment(\\n        uint256 proposalIndex,\\n        uint256 tokenIndex,\\n        string memory assignmentString\\n    ) external validIndex(proposalIndex) proposalOwner(proposalIndex) {\\n        ContractProposal memory proposalData = proposals[proposalIndex];\\n\\n        if (proposalData.status != Term.STARTED) {\\n            revert ProposalMustBeInStartedState();\\n        } else if (tokenIndex >= proposalData.tokenIds.length) {\\n            revert InvalidTokenIndex();\\n        }\\n\\n        uint256 tokenId = proposalData.tokenIds[tokenIndex];\\n        hypcNFT.assign(tokenId, assignmentString);\\n\\n        emit AssignmentChanged(proposalIndex, msg.sender, assignmentString, tokenId, assignmentString);\\n    }\\n\\n    /**\\n        @notice This allows a receving user of a deposit or proposal to first register their address so they \\n                can receive the deposit/proposal. This is a safeguard against the sender from fat-fingering\\n                their address and sending it an invalid address.\\n    */\\n    function addToTransferRegistry() external {\\n        transferRegistry[msg.sender] = true;\\n    }\\n\\n    /**\\n        @notice This deletes a user from the transferRegistry. Mostly not needed, but is here for completeness.\\n    */\\n    function removeFromTransferRegistry() external {\\n        delete transferRegistry[msg.sender];\\n    }\\n\\n    //Getters\\n    /// @notice Returns a user's deposits\\n    /// @param  user: the user's address.\\n    /// @return The UserDeposits array for this user\\n    function getUserDeposits(address user) external view returns (UserDeposit[] memory) {\\n        return userDeposits[user];\\n    }\\n\\n    /// @notice Returns the length of a user's deposits array\\n    /// @param  user: the user's address\\n    /// @return The length of the user deposits array.\\n    function getDepositsLength(address user) external view returns (uint256) {\\n        return userDeposits[user].length;\\n    }\\n\\n    /// @notice Returns the total number of proposals submitted to the contract so far.\\n    /// @return The length of the contract proposals array.\\n    function getProposalsLength() external view returns (uint256) {\\n        return proposals.length;\\n    }\\n\\n    /// @notice Returns the number of tokens swapped for in the given  proposal.\\n    /// @return The length of the proposal's tokenIds array.\\n    function getProposalTokensLength(uint256 proposalIndex) external view returns (uint256) {\\n        return proposals[proposalIndex].tokenIds.length;\\n    }\\n\\n    /// @notice Returns the tokenId for a tokenIndex in the proposal's tokenIds array.\\n    /// @return The tokenId for the tokenIndex index of tokenIds.\\n    function getProposalTokenId(uint256 proposalIndex, uint256 tokenIndex) external view returns (uint256) {\\n        return proposals[proposalIndex].tokenIds[tokenIndex];\\n    }\\n\\n    /// @notice Returns the assignmentString for an tokenIndex in the proposal's tokenIds array.\\n    /// @return The length of the assignmentString for the tokenIndex of tokenIds.\\n    function getProposalAssignmentString(\\n        uint256 proposalIndex,\\n        uint256 tokenIndex\\n    ) external view returns (string memory) {\\n        return hypcNFT.getAssignment(proposals[proposalIndex].tokenIds[tokenIndex]);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/ethereum/interfaces/ICHYPC.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.19;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\r\\n\\r\\n/// @notice Interface for the CHYPC.sol contract.\\r\\ninterface ICHYPC is IERC721 {\\r\\n    /**\\r\\n     * Accesses the assignment function of c_HyPC so the swap can remove \\r\\n     * the assignment data when a token is redeemed or swapped.\\r\\n     */\\r\\n    /// @notice Assigns a string to the given c_HyPC token.\\r\\n    function assign(\\r\\n        uint256 tokenId,\\r\\n        string memory data\\r\\n    ) external;\\r\\n\\r\\n    /// @notice Returns the assigned string for this token.\\r\\n    function getAssignment(\\r\\n        uint256 tokenId\\r\\n    ) external view  returns (string memory);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/ethereum/interfaces/IHYPC.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.19;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\n\\r\\n/// @notice Interface for the HyperCycleToken.sol contract.\\r\\ninterface IHYPC is IERC20 {\\r\\n    /*\\r\\n     * Accesses the ERC20 functions of the HYPC contract. The burn function\\r\\n     * is also exposed for future contracts.\\r\\n    */\\r\\n    /// @notice Burns an amount of the HyPC ERC20.\\r\\n    function burn(uint256 amount) external;\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/ethereum/interfaces/IHYPCSwap.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.19;\\n\\n/// @notice Interface for the HYPCSwap.sol contract.\\ninterface IHYPCSwap {\\n    /**\\n     * Accesses the addNFT function so that the CHYPC contract can\\n     * add the newly created NFT into this contract.\\n     */\\n\\n    /// @notice Returns the nfts array inside the swap contract.\\n    function nfts(uint256 tokenId) external returns (uint256);\\n\\n    /// @notice Adds a c_HyPC token to the swap contract from the c_HyPC contract.\\n    function addNFT(\\n        uint256 tokenId\\n    ) external;\\n\\n    /// @notice Redeems a c_HyPC token for its amount of backing HyPC.\\n    function redeem(uint256 tokenId) external;\\n\\n    /// @notice Swaps 524288 HyPC for 1 c_HyPC.\\n    function swap() external;\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"hypcTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"hypcNFTAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"swapContractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"defaultFee\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AddressNotRegistered\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BackingFundsMustBePositive\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CantTransferDepositToSelf\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CantTransferProposalToSelf\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DeadlineMustBeInFutureByOneHour\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DepositMustBeUpdatedBeforeWithdrawn\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"HYPCDepositExceedsProposalRequest\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"HYPCDepositMustBePositive\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidDepositIndex\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidNFT\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidProposalIndex\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidSwapContract\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidTermNumber\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidTokenIndex\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MustBeProposalOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotEnoughTimeSinceLastInterestCollection\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NumberNFTsPositive\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NumberNFTsTooLarge\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PoolFeeDoesntMatch\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ProposalIsExpired\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ProposalIsNotPending\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ProposalMustBeCompleted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ProposalMustBeFilled\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ProposalMustBeInStartedState\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ProposalMustBeStartedOrCompleted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ProposalMustNotBeInStartedState\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ProposalMustReachEndOfTerm\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RedeemingTooManyTokens\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SwappingTooManyTokens\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TokensMustBeRedeemedFirst\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TokensStillNeedToBeRedeemed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UsersMustWithdrawFromProposal\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"proposalIndex\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"assignment\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"assignmentRef\",\"type\":\"string\"}],\"name\":\"AssignmentChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"proposalIndex\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"DepositCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"poolFee\",\"type\":\"uint256\"}],\"name\":\"PoolFeeSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"proposalIndex\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ProposalCanceled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"proposalIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"ProposalCompleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"proposalIndex\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"numberNFTs\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"ProposalCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"proposalIndex\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ProposalFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"proposalIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"ProposalStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"proposalIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"redeemedTokens\",\"type\":\"uint256\"}],\"name\":\"TokensRedeemed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"proposalIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensToSwap\",\"type\":\"uint256\"}],\"name\":\"TokensSwapped\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"depositIndex\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TransferDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"proposalIndex\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"numberNFTs\",\"type\":\"uint256\"}],\"name\":\"TransferProposal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"depositIndex\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"interestChange\",\"type\":\"uint256\"}],\"name\":\"UpdateDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"depositIndex\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawDeposit\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"addToTransferRegistry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalIndex\",\"type\":\"uint256\"}],\"name\":\"cancelProposal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenIndex\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"assignmentString\",\"type\":\"string\"}],\"name\":\"changeAssignment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalIndex\",\"type\":\"uint256\"}],\"name\":\"completeProposal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"createDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"termNum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"backingFunds\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numberNFTs\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"specifiedFee\",\"type\":\"uint256\"}],\"name\":\"createProposal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalIndex\",\"type\":\"uint256\"}],\"name\":\"finishProposal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getDepositsLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenIndex\",\"type\":\"uint256\"}],\"name\":\"getProposalAssignmentString\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenIndex\",\"type\":\"uint256\"}],\"name\":\"getProposalTokenId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalIndex\",\"type\":\"uint256\"}],\"name\":\"getProposalTokensLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getProposalsLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserDeposits\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"proposalIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"interestTime\",\"type\":\"uint256\"}],\"internalType\":\"struct CrowdFundHYPCPoolV2.UserDeposit[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hypcNFT\",\"outputs\":[{\"internalType\":\"contract ICHYPC\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hypcToken\",\"outputs\":[{\"internalType\":\"contract IHYPC\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"proposals\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"term\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"interestRateAPR\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"depositedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"backingFunds\",\"type\":\"uint256\"},{\"internalType\":\"enum CrowdFundHYPCPoolV2.Term\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"numberNFTs\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokensToRedeem\",\"type\":\"uint256\"}],\"name\":\"redeemTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeFromTransferRegistry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"setPoolFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalIndex\",\"type\":\"uint256\"}],\"name\":\"startProposal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapContract\",\"outputs\":[{\"internalType\":\"contract IHYPCSwap\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokensToSwap\",\"type\":\"uint256\"}],\"name\":\"swapTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"depositIndex\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"transferDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalIndex\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"transferProposal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"transferRegistry\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"depositIndex\",\"type\":\"uint256\"}],\"name\":\"updateDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userDeposits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"proposalIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"interestTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"depositIndex\",\"type\":\"uint256\"}],\"name\":\"withdrawDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "CrowdFundHYPCPoolV2", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000ea7b7dc089c9a4a916b5a7a37617f59fd54e37e40000000000000000000000000b84dcf0d13678c68ba9ca976c02eaaa0a44932b0000000000000000000000004f95846e806f19ba137b6f85f823db44f0483f0c0000000000000000000000000000000000000000000000000000000138800000", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}