{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/PaepaeTheDigitalFrogContract.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\n// \ud83d\udc38 https://p\u00e6p\u00e6.com\\n// \ud83d\udc38 https://t.me/paepaecoin\\n// \ud83d\udc38 https://twitter/paepaecoin \\n\\n// \\n\\npragma solidity 0.8.16;\\n\\n\\nlibrary SafeMath {\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {return a + b;}\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {return a - b;}\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {return a * b;}\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {return a / b;}\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {return a % b;}\\n    \\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {uint256 c = a + b; if(c < a) return(false, 0); return(true, c);}}\\n\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {if(b > a) return(false, 0); return (true, a - b);}}\\n\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {if (a == 0) return(true, 0); uint256 c = a * b;\\n        if(c / a != b) return(false, 0); return(true, c);}}\\n\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {if(b == 0) return(false, 0); return(true, a / b);}}\\n\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {if(b == 0) return(false, 0); return(true, a % b);}}\\n\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked{require(b <= a, errorMessage); return a - b;}}\\n\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked{require(b > 0, errorMessage); return a / b;}}\\n\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked{require(b > 0, errorMessage); return a % b;}}}\\n\\ninterface IERC20 {\\n    function totalSupply() external view returns (uint256);\\n    function decimals() external view returns (uint8);\\n    function symbol() external view returns (string memory);\\n    function name() external view returns (string memory);\\n    function getOwner() external view returns (address);\\n    function balanceOf(address account) external view returns (uint256);\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n    function allowance(address _owner, address spender) external view returns (uint256);\\n    function approve(address spender, uint256 amount) external returns (bool);\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(address indexed owner, address indexed spender, uint256 value);}\\n\\nabstract contract Ownable {\\n\\n    address internal owner;\\n\\n    constructor(address _owner) {owner = _owner;}\\n\\n    modifier onlyOwner() {require(isOwner(msg.sender), \\\"!OWNER\\\"); _;}\\n\\n    function isOwner(address account) public view returns (bool) {return account == owner;}\\n\\n    function transferOwnership(address payable adr) public onlyOwner {owner = adr; emit OwnershipTransferred(adr);}\\n\\n    function renounceOwnership() public onlyOwner {owner = 0x000000000000000000000000000000000000dEaD; emit OwnershipTransferred(0x000000000000000000000000000000000000dEaD);}\\n\\n    event OwnershipTransferred(address owner);\\n}\\n\\ninterface IFactory{\\n        function createPair(address tokenA, address tokenB) external returns (address pair);\\n        function getPair(address tokenA, address tokenB) external view returns (address pair);\\n}\\n\\ninterface IRouter {\\n    function factory() external pure returns (address);\\n    function WETH() external pure returns (address);\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountA, uint amountB);\\n\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable;\\n\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline) external;\\n}\\n\\ncontract PaepaeTheDigitalFrogContract is IERC20, Ownable {\\n    using SafeMath for uint256;\\n\\n    string private constant _name = \\\"Paepae\\\";\\n    string private constant _symbol = \\\"FROIG\\\";\\n\\n    uint8 private constant _decimals = 18;\\n\\n    uint256 private _totalSupply = 420420696969 * (10 ** _decimals);\\n\\n    uint256 private _maxTxAmountPercent = 1; \\n    uint256 private _maxTransferPercent = 1;\\n    uint256 private _maxWalletPercent = 1;\\n\\n\\n    mapping (address => uint256) _balances;\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n    mapping (address => bool) public isExcludedFromFees;\\n\\n    IRouter router;\\n    address public pair;\\n\\n    bool private tradingOpen = true;\\n\\n    uint256 private liqFee = 0;\\n    uint256 private devFee = 24;\\n    uint256 private totalFee = 24;\\n    uint256 private sellFee = 69;\\n    uint256 private transferFee = 100;\\n    uint256 private denominator = 100;\\n\\n\\n    bool private contractSwapEnabled = true;\\n\\n    uint256 private swapTimes;\\n    bool private swapping;\\n    uint256 swapAmount = 3;\\n\\n    uint256 private swapThreshold = ( _totalSupply * 1000 ) / 100000; //1%\\n    uint256 private minSwapTokenAmount = ( _totalSupply * 10 ) / 100000;\\n    modifier lockTheSwap {swapping = true; _; swapping = false;}\\n\\n    address internal constant DEAD = 0x000000000000000000000000000000000000dEaD;\\n    address public devWallet = 0x32b283bAA8D76A06A37C5470D72bC054B0812D80; \\n\\n    constructor() Ownable(msg.sender) {\\n        IRouter _router = IRouter(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\\n        address _pair = IFactory(_router.factory()).createPair(address(this), _router.WETH());\\n        router = _router;\\n        pair = _pair;\\n        isExcludedFromFees[address(this)] = true;\\n        isExcludedFromFees[msg.sender] = true;\\n        _balances[msg.sender] = _totalSupply;\\n        emit Transfer(address(0), msg.sender, _totalSupply);\\n    }\\n\\n    receive() external payable {}\\n\\n    function name() public pure returns (string memory) {\\n        return _name;\\n        \\n    }\\n\\n    function symbol() public pure returns (string memory) {\\n        return _symbol;\\n        \\n    }\\n\\n    function decimals() public pure returns (uint8) {\\n        \\n    return _decimals;\\n    \\n    }\\n\\n    function getOwner() external view override returns (address) { \\n        \\n    return owner; \\n    \\n    }\\n\\n    function balanceOf(address account) public view override returns (uint256) {\\n        return _balances[account];\\n        \\n    }\\n\\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\\n        _transfer(msg.sender, recipient, amount);\\n        return true;\\n    }\\n\\n    function allowance(address owner, address spender) public view override returns (uint256) {\\n\\n        return _allowances[owner][spender];\\n        \\n    }\\n\\n    function isCont(address addr) internal view returns (bool) {\\n        uint size; assembly { size := extcodesize(addr) \\n    } \\n    return size > 0; \\n    \\n    }\\n\\n    function excludeFromFees(address _address, bool _enabled) external onlyOwner {\\n        isExcludedFromFees[_address] = _enabled;\\n        \\n    }\\n\\n    function approve(address spender, uint256 amount) public override returns (bool) {\\n        _approve(msg.sender, spender, amount);return true;\\n    }\\n\\n    function totalSupply() public view override returns (uint256) {\\n        \\n        return _totalSupply.sub(balanceOf(DEAD)).sub(balanceOf(address(0)));\\n        \\n    }\\n\\n    function _maxWalletToken() public view returns (uint256) {\\n        return totalSupply() * _maxWalletPercent / denominator;\\n        \\n    }\\n\\n    function _maxTxAmount() public view returns (uint256) {\\n        return totalSupply() * _maxTxAmountPercent / denominator;\\n    }\\n\\n    function _maxTransferAmount() public view returns (uint256) {\\n        return totalSupply() * _maxTransferPercent / denominator;\\n    }\\n\\n    function preTxCheck(address sender, address recipient, uint256 amount) internal view {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n        require(amount > uint256(0), \\\"Transfer amount must be greater than zero\\\");\\n        require(amount <= balanceOf(sender),\\\"You are trying to transfer more than your balance\\\");\\n    }\\n\\n\\n    function _transfer(address sender, address recipient, uint256 amount) private {\\n        preTxCheck(sender, recipient, amount);\\n        checkIfTradingIsAllowed(sender, recipient);\\n        checkMaxWalletLimit(sender, recipient, amount); \\n        swapbackCounters(sender, recipient);\\n        checkTxLimit(sender, recipient, amount); \\n        swapBack(sender, recipient, amount);\\n        _balances[sender] = _balances[sender].sub(amount);\\n        uint256 amountReceived = shouldTakeFee(sender, recipient) ? takeFee(sender, recipient, amount) : amount;\\n        _balances[recipient] = _balances[recipient].add(amountReceived);\\n        emit Transfer(sender, recipient, amountReceived);\\n    }\\n\\n    function updateFees(uint256 _liq, uint256 _dev, uint256 _total, uint256 _sell, uint256 _trans) external onlyOwner {\\n        liqFee = _liq;\\n        devFee = _dev;\\n        totalFee = _total;\\n        sellFee = _sell;\\n        transferFee = _trans;\\n    \\n    }\\n\\n    function updateLimits(uint256 _buy, uint256 _trans, uint256 _wallet) external onlyOwner {\\n        _maxTxAmountPercent = _buy;\\n        _maxTransferPercent = _trans;\\n        _maxWalletPercent = _wallet;\\n       \\n       \\n    }\\n \\n    function updateDevWallet(address newDevWallet) external onlyOwner{\\n        \\tdevWallet = newDevWallet;\\n\\n    }\\n\\n\\n   \\n\\n    function removeLimits() external onlyOwner {\\n        _maxTxAmountPercent = totalSupply();\\n        _maxTransferPercent = totalSupply();\\n        _maxWalletPercent = totalSupply();\\n    }\\n\\n    function commenceTrade() external onlyOwner {\\n        tradingOpen = true;\\n        \\n        }\\n\\n\\n    function checkIfTradingIsAllowed(address sender, address recipient) internal view {\\n        if(!isExcludedFromFees[sender] && !isExcludedFromFees[recipient]){require(tradingOpen, \\\"tradingAllowed\\\");}\\n    }\\n    \\n    function checkMaxWalletLimit(address sender, address recipient, uint256 amount) internal view {\\n        if(!isExcludedFromFees[sender] && !isExcludedFromFees[recipient] && recipient != address(pair) && recipient != address(DEAD)){\\n            require((_balances[recipient].add(amount)) <= _maxWalletToken(), \\\"Exceeds maximum wallet amount.\\\");}\\n    }\\n\\n    function swapbackCounters(address sender, address recipient) internal {\\n        if(recipient == pair && !isExcludedFromFees[sender]){swapTimes += uint256(1);}\\n    }\\n\\n    function checkTxLimit(address sender, address recipient, uint256 amount) internal view {\\n        if(sender != pair){require(amount <= _maxTransferAmount() || isExcludedFromFees[sender] || isExcludedFromFees[recipient], \\\"TX Limit Exceeded\\\");}\\n        require(amount <= _maxTxAmount() || isExcludedFromFees[sender] || isExcludedFromFees[recipient], \\\"TX Limit Exceeded\\\");\\n    }\\n\\n    function swapAndLiquify(uint256 tokens) private lockTheSwap {\\n\\n        uint256 _denominator = (liqFee.add(1).add(devFee)).mul(2);\\n\\n        uint256 tokensToAddLiquidityWith = tokens.mul(liqFee).div(_denominator);\\n\\n        uint256 toSwap = tokens.sub(tokensToAddLiquidityWith);\\n        uint256 initialBalance = address(this).balance;\\n\\n        swapTokensForETH(toSwap);\\n        uint256 deltaBalance = address(this).balance.sub(initialBalance);\\n        uint256 unitBalance= deltaBalance.div(_denominator.sub(liqFee));\\n        uint256 ETHToAddLiquidityWith = unitBalance.mul(liqFee);\\n\\n        if(ETHToAddLiquidityWith > uint256(0)){addLiquidity(tokensToAddLiquidityWith, ETHToAddLiquidityWith); }\\n        uint256 remainingBalance = address(this).balance;\\n\\n        if(remainingBalance > uint256(0)){payable(devWallet).transfer(remainingBalance);}\\n    }\\n\\n    function addLiquidity(uint256 tokenAmount, uint256 ETHAmount) private {\\n        _approve(address(this), address(router), tokenAmount);\\n        router.addLiquidityETH{value: ETHAmount}(\\n            address(this),\\n            tokenAmount,\\n            0,\\n            0,\\n            devWallet,\\n            block.timestamp);\\n    }\\n\\n    function swapTokensForETH(uint256 tokenAmount) private {\\n        address[] memory path = new address[](2);\\n        path[0] = address(this);\\n        path[1] = router.WETH();\\n        _approve(address(this), address(router), tokenAmount);\\n        router.swapExactTokensForETHSupportingFeeOnTransferTokens(\\n            tokenAmount,\\n            0,\\n            path,\\n            address(this),\\n            block.timestamp);\\n    }\\n\\n    function shouldSwapBack(address sender, address recipient, uint256 amount) internal view returns (bool) {\\n        bool aboveMin = amount >= minSwapTokenAmount;\\n        bool aboveThreshold = balanceOf(address(this)) >= swapThreshold;\\n        return !swapping && contractSwapEnabled && tradingOpen && aboveMin && !isExcludedFromFees[sender] && recipient == pair && swapTimes >= swapAmount && aboveThreshold;\\n    }\\n\\n    function updateSwapTrheshold(uint256 _newSwapTreshold) external onlyOwner{\\n        swapThreshold = _totalSupply.mul(_newSwapTreshold).div(uint256(100000)); \\n    }\\n\\n\\n    function updateMinSwapTokensAmount(uint256 _newMinSwapTokensAtAmount) external onlyOwner{\\n        minSwapTokenAmount = _totalSupply.mul(_newMinSwapTokensAtAmount).div(uint256(100000));\\n    }\\n    \\n\\n    function swapBack(address sender, address recipient, uint256 amount) internal {\\n        if(shouldSwapBack(sender, recipient, amount)){swapAndLiquify(swapThreshold); swapTimes = uint256(0);}\\n    }\\n\\n    function shouldTakeFee(address sender, address recipient) internal view returns (bool) {\\n        return !isExcludedFromFees[sender] && !isExcludedFromFees[recipient];\\n    }\\n\\n    function getTotalFee(address sender, address recipient) internal view returns (uint256) {\\n        if(recipient == pair){return sellFee;}\\n        if(sender == pair){return totalFee;}\\n        return transferFee;\\n    }\\n\\n    function takeFee(address sender, address recipient, uint256 amount) internal returns (uint256) {\\n        if(getTotalFee(sender, recipient) > 0){\\n        uint256 feeAmount = amount.div(denominator).mul(getTotalFee(sender, recipient));\\n        _balances[address(this)] = _balances[address(this)].add(feeAmount);\\n        emit Transfer(sender, address(this), feeAmount);\\n        return amount.sub(feeAmount);} return amount;\\n    }\\n\\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, msg.sender, _allowances[sender][msg.sender].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    function _approve(address owner, address spender, uint256 amount) private {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 42069\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_maxTransferAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxTxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxWalletToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"commenceTrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"excludeFromFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isExcludedFromFees\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newDevWallet\",\"type\":\"address\"}],\"name\":\"updateDevWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_liq\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_dev\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_total\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_sell\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_trans\",\"type\":\"uint256\"}],\"name\":\"updateFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_buy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_trans\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_wallet\",\"type\":\"uint256\"}],\"name\":\"updateLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newMinSwapTokensAtAmount\",\"type\":\"uint256\"}],\"name\":\"updateMinSwapTokensAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newSwapTreshold\",\"type\":\"uint256\"}],\"name\":\"updateSwapTrheshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "PaepaeTheDigitalFrogContract", "CompilerVersion": "v0.8.16+commit.07a7930e", "OptimizationUsed": "1", "Runs": "42069", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}