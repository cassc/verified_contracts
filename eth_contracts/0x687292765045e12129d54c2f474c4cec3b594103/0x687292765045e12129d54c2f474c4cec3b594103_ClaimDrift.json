{"SourceCode": "// File: @openzeppelin/contracts/utils/Context.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\r\n\r\npragma solidity ^0.8.20;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n\r\n    function _contextSuffixLength() internal view virtual returns (uint256) {\r\n        return 0;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/Ownable.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.20;\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * The initial owner is set to the address provided by the deployer. This can\r\n * later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    /**\r\n     * @dev The caller account is not authorized to perform an operation.\r\n     */\r\n    error OwnableUnauthorizedAccount(address account);\r\n\r\n    /**\r\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\r\n     */\r\n    error OwnableInvalidOwner(address owner);\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\r\n     */\r\n    constructor(address initialOwner) {\r\n        if (initialOwner == address(0)) {\r\n            revert OwnableInvalidOwner(address(0));\r\n        }\r\n        _transferOwnership(initialOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the owner.\r\n     */\r\n    function _checkOwner() internal view virtual {\r\n        if (owner() != _msgSender()) {\r\n            revert OwnableUnauthorizedAccount(_msgSender());\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby disabling any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        if (newOwner == address(0)) {\r\n            revert OwnableInvalidOwner(address(0));\r\n        }\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\r\n\r\npragma solidity ^0.8.20;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Returns the value of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the value of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\r\n     * caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\r\n     * allowance mechanism. `value` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n}\r\n\r\n// File: ClaimDrift.sol\r\n\r\n\r\npragma solidity 0.8.20;\r\n\r\n\r\n\r\n// Interface of Presale ICO\r\ninterface PRESALE_ICO {\r\n    function amountOfAddressPerType(address _address, uint8 _type) external view returns (uint256);\r\n}\r\n\r\n// Interface of ERC20\r\ninterface IERC20_EXT is IERC20 {\r\n    function mint(address to, uint256 amount) external;\r\n    function burnFrom(address account, uint256 value) external;\r\n}\r\n\r\ninterface STAKING_DRIFT {\r\n    function stakeOnBehalf(uint256 _amount, address _userAddress) external;\r\n    function isOpenStake() external view returns (bool);\r\n}\r\n\r\ncontract ClaimDrift is Ownable {\r\n    IERC20_EXT public driftToken;\r\n    IERC20_EXT public preDriftToken;\r\n    PRESALE_ICO public presaleICO;\r\n    STAKING_DRIFT public stakingPool;\r\n\r\n    mapping(address => bool) public userClaimed;\r\n    mapping(address => uint256) private userStakeAmount;\r\n    mapping(address => bool) public addressBanned;\r\n\r\n    uint256 claimEndTimestamp = 0;\r\n\r\n    event ClaimEnabled(uint256 endTimestamp);\r\n\r\n    constructor(\r\n        address[] memory _addresses,\r\n        uint256[] memory _amount,\r\n        address _driftToken,\r\n        address _preDriftToken,\r\n        address _presaleICO,\r\n        address _stakingPool\r\n    ) Ownable(msg.sender) {\r\n        if(_addresses.length > 0) {\r\n            addStaker(_addresses, _amount);\r\n        }\r\n        driftToken = IERC20_EXT(_driftToken);\r\n        preDriftToken = IERC20_EXT(_preDriftToken);\r\n        presaleICO = PRESALE_ICO(_presaleICO);\r\n        stakingPool = STAKING_DRIFT(_stakingPool);\r\n    }\r\n\r\n    function updateDriftToken(address _newAddress) external onlyOwner {\r\n        driftToken = IERC20_EXT(_newAddress);\r\n    }\r\n\r\n    function updatePreDriftToken(address _newAddress) external onlyOwner {\r\n        preDriftToken = IERC20_EXT(_newAddress);\r\n    }\r\n\r\n    function updateStakingPool(address _newAddress) external onlyOwner {\r\n        stakingPool = STAKING_DRIFT(_newAddress);\r\n    }\r\n\r\n    function updateUserStakeAmount(address _user, uint256 _amount) external onlyOwner {\r\n        userStakeAmount[_user] = _amount;\r\n    }\r\n\r\n    function addStaker(address[] memory _addresses, uint256[] memory _amount) public onlyOwner {\r\n        require(_addresses.length > 0 && _addresses.length == _amount.length, \"addresses are empty or the count of addresses and amount are mismatched\");\r\n        for (uint256 i = 0; i < _addresses.length; i++) {\r\n            userStakeAmount[_addresses[i]] = _amount[i];\r\n        }\r\n    }\r\n\r\n    function banAddresses(address[] memory _addresses, bool _ban) external onlyOwner {\r\n        require(_addresses.length > 0, \"Addresses is empty\");\r\n        for (uint256 i = 0; i < _addresses.length; i++) {\r\n            addressBanned[_addresses[i]] = _ban;\r\n        }\r\n    }\r\n\r\n    function enableClaim(uint256 _endTimestamp) external onlyOwner {\r\n        claimEndTimestamp = _endTimestamp;\r\n        emit ClaimEnabled(_endTimestamp);\r\n    }\r\n\r\n    function claimTokens() public {\r\n        require(claimEndTimestamp >= block.timestamp, \"Claim closed\");\r\n        require(addressBanned[_msgSender()] == false, \"Address banned\");\r\n        require(userClaimed[_msgSender()] == false, \"Already claimed\"); \r\n\r\n        uint256 _balance = preDriftToken.balanceOf(_msgSender());\r\n        require(_balance > 0, \"Insufficient PreDrift balance\");\r\n        uint256 _dynamicBalance = presaleICO.amountOfAddressPerType(_msgSender(), 0);\r\n        uint256 _stakeBalance = presaleICO.amountOfAddressPerType(_msgSender(), 1);\r\n        uint256 _dynamicToSend = 0;\r\n        uint256 _stakeToSend = 0;\r\n        if (_dynamicBalance > 0) {\r\n            // Check PreDrift Dynamic\r\n            if (userStakeAmount[_msgSender()] == 0) {\r\n                _dynamicToSend += _dynamicBalance;\r\n            } else {\r\n                _stakeToSend += userStakeAmount[_msgSender()];\r\n                _dynamicToSend += _dynamicBalance - _stakeToSend;\r\n                delete userStakeAmount[_msgSender()];\r\n            }\r\n        }\r\n        if (_stakeBalance > 0) {\r\n            // Check PreDrift Stake\r\n            _stakeToSend += _stakeBalance;\r\n        }\r\n\r\n        preDriftToken.burnFrom(_msgSender(), _balance);\r\n\r\n        userClaimed[_msgSender()] = true;\r\n\r\n        if (_dynamicToSend > 0) {\r\n            tokensDynamic(_msgSender(), _dynamicToSend);\r\n        }\r\n        if (_stakeToSend > 0) {\r\n            tokensStake(_msgSender(), _stakeToSend);\r\n        }\r\n    }\r\n\r\n    function tokensDynamic(address _address, uint256 _amount) internal {\r\n        driftToken.transferFrom(owner(), _address, _amount);\r\n    }\r\n\r\n    function tokensStake(address _address, uint256 _amount) internal {\r\n        if(stakingPool.isOpenStake()) {\r\n            driftToken.transferFrom(owner(), address(this), _amount);\r\n            driftToken.approve(address(stakingPool), _amount);\r\n            stakingPool.stakeOnBehalf(_amount, _address);\r\n        } else {\r\n            tokensDynamic(_address, _amount);\r\n        }\r\n    }\r\n\r\n    function getStakeAmountOfDynamicToStake(address _address) public view returns(uint256) {\r\n        return userStakeAmount[_address];\r\n    }\r\n\r\n    function withdrawFunds() public onlyOwner {\r\n        if (address(this).balance > 0) {\r\n            (bool os, ) = payable(owner()).call{value: address(this).balance}(\"\");\r\n            require(os);\r\n        } else {\r\n            revert(\"no funds\");\r\n        }\r\n    }\r\n\r\n    function withdrawTokenFunds(address _tokenAddress) public onlyOwner {\r\n        if (IERC20(_tokenAddress).balanceOf(address(this)) > 0) {\r\n            IERC20(_tokenAddress).transfer(owner(), IERC20(_tokenAddress).balanceOf(address(this)));\r\n        } else {\r\n            revert(\"no funds\");\r\n        }\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_addresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amount\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"_driftToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_preDriftToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_presaleICO\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_stakingPool\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endTimestamp\",\"type\":\"uint256\"}],\"name\":\"ClaimEnabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_addresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amount\",\"type\":\"uint256[]\"}],\"name\":\"addStaker\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"addressBanned\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_addresses\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"_ban\",\"type\":\"bool\"}],\"name\":\"banAddresses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"driftToken\",\"outputs\":[{\"internalType\":\"contract IERC20_EXT\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_endTimestamp\",\"type\":\"uint256\"}],\"name\":\"enableClaim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getStakeAmountOfDynamicToStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"preDriftToken\",\"outputs\":[{\"internalType\":\"contract IERC20_EXT\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"presaleICO\",\"outputs\":[{\"internalType\":\"contract PRESALE_ICO\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingPool\",\"outputs\":[{\"internalType\":\"contract STAKING_DRIFT\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newAddress\",\"type\":\"address\"}],\"name\":\"updateDriftToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newAddress\",\"type\":\"address\"}],\"name\":\"updatePreDriftToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newAddress\",\"type\":\"address\"}],\"name\":\"updateStakingPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"updateUserStakeAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userClaimed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"withdrawTokenFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "ClaimDrift", "CompilerVersion": "v0.8.20+commit.a1b79de6", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "00000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000003a0000000000000000000000000b7cffebb06621287c7850ffefb22c30252e78e6b00000000000000000000000045522fba064b497c5bfe9c6a462bdc9eb0b31b7d000000000000000000000000127a8e43ab4bb879f55841a2ea0e8d0198768aa3000000000000000000000000daf03cd8c18daa40de82fe89dbafb116b4e44eba00000000000000000000000000000000000000000000000000000000000000160000000000000000000000001a8760df2bd7720d6bbfd6c0d1e0b51d4298278d0000000000000000000000001915e6e0988c29806677130441adaa459b2ab2170000000000000000000000004bf3c0d29abcd3dcabee3e5de6720b93f5257ce40000000000000000000000004a4aaa357af3a699cc37c736ab52dc8ec3d542bc000000000000000000000000efc133ce8738b368b5960d00f44d498defbaf2890000000000000000000000000b74a0c15251d7e1d86d46c8114eba44cfdf36a1000000000000000000000000ad4ffbcd69c8116c08ed28db13daafa933c1afaf0000000000000000000000003d4c55352960aff9ac4aa5cea8330654d46e3cb8000000000000000000000000397836ead71c525e5913e3182d537423d9bfdcd2000000000000000000000000852863b5527ce9dfea4b68ca053c24f152d46bc9000000000000000000000000ef6a5ee95120b994c516f0c1ad7716686569e1ea000000000000000000000000bc4fd6063366a662f9622e4e1409bdbaee9d952f000000000000000000000000c2e29154131a5cf0dc75da9525b7fd17674c4f69000000000000000000000000acd186982c34672ed469c9bb8956fa4583867f94000000000000000000000000ab2af912e1a3337fa8e5b2b5b05ceb4495faa43d0000000000000000000000007d2fd30f385d894bcd6ec4fe20fb98f9e058e2de000000000000000000000000ddded90e9286f3e7a8279c1ff2aedac0fea762c100000000000000000000000022bdf29465659067aaae13f553e65b5d1f011717000000000000000000000000c19578a778bf8e3bbd3ceb9c9530b382b91b16b200000000000000000000000086495e0c0e3a81b00ac3ec6d4349c8dd22000ec300000000000000000000000057f98c46cbe94609da0e921dc98fc35abea768540000000000000000000000002668422e12721b2a415db169b31a9464cc171ad7000000000000000000000000000000000000000000000000000000000000001600000000000000000000000000000000000000000001b58b6ae10560033c2858000000000000000000000000000000000000000000005782489367799a3f3b44000000000000000000000000000000000000000000006d62dab8415800cf0a16000000000000000000000000000000000000000000019faad8bc2b819cac598600000000000000000000000000000000000000000003c2991e557239b9593a9b000000000000000000000000000000000000000000006902bd7daf5eb918ad85000000000000000000000000000000000000000000007152f506918527bff6fd00000000000000000000000000000000000000000000d2057afb5ebd72315b0b0000000000000000000000000000000000000000001cb6bfd05df3e69cbf729d00000000000000000000000000000000000000000000a4144814620401368f21000000000000000000000000000000000000000000010686d9ba366ccebdb1cd00000000000000000000000000000000000000000000a64456b1ab00a511bd6800000000000000000000000000000000000000000000bc24e8d684df0ba18c3a000000000000000000000000000000000000000000001340809b4f15a1ef30e000000000000000000000000000000000000000000000afb57d8698092ebcde04000000000000000000000000000000000000000000031a94bbf2c00878900fec000000000000000000000000000000000000000000020d0db3746cd99d7b639c00000000000000000000000000000000000000000000bde4f4878c0f8eb74ad90000000000000000000000000000000000000000000238ced7be20966a9b013f000000000000000000000000000000000000000000030674357eed5a9515ffba0000000000000000000000000000000000000000000189ca469751a3361c8ab50000000000000000000000000000000000000000000189ca469751a3361c8ab4", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://acbb26cbb33f58f68cd14686d9d52f7f7aa9ac37b272be27182ed972618b20e8"}