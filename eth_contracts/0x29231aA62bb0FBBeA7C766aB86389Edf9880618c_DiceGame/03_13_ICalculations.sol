// SPDX-License-Identifier: MIT

pragma solidity 0.8.10;

import "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol";

interface ICalculations {
    /// @notice Returns the biggest multiplier that a user can use based on the bet amount
    /// @param betAmount bet amount to sent in the bet
    /// @param token address of the token to use in the bet
    /// @return multiplier number in the wei units representing the biggest multiplier
    function getBiggestMultiplierFromBet(
        uint256 betAmount,
        IERC20Upgradeable token
    ) external view returns (uint256 multiplier);

    /// @notice Show the numbers produced by chainlink using the randomness
    /// @dev The randomness comes from the chainlink event
    //  @dev RandomWordsFulfilled(requestId, randomness, payment, success)
    /// @param randomness source of randomness used to generate the numbers
    /// @param amountOfNumbers how many numbers were generated
    /// @return chainlinkRawNumbers array of big numbers produced by chanlink
    /// @return parsedNumbers array of raw number formated to be in the range from 1 to 10000
    function getNumberFromRandomness(
        uint256 randomness,
        uint256 amountOfNumbers
    )
        external
        view
        returns (
            uint256[] memory chainlinkRawNumbers,
            uint256[] memory parsedNumbers
        );

    /// @notice It produces the closest possible multipler based to the bet and profit
    function getMultiplierFromBetAndProfit(
        uint256 betAmount,
        uint256 profit,
        IERC20Upgradeable token
    ) external view returns (uint256 multiplier);

    /// @notice Expects the multiplier to be in wei format 2x equals 2e18
    /// @notice Returns the quantity of numbers that can be used in the bet.
    /// @notice It chooses the closest winning chance to the provided multiplier
    /// @notice Example output: winningChance = 10 means 10 different numbers.
    function getWinningChanceFromMultiplier(uint256 multiplier)
        external
        view
        returns (uint256 winningChance);

    /// @notice The function will adjust the provided multiplier to the closest possible multiplier
    /// @notice And then calculate the profit based on that multiplier
    /// @notice The upperNum can be used to get the multiplier used for the obtained profit
    function getProfitFromBetAndMultiplier(
        uint256 betAmount,
        uint256 multiplier,
        IERC20Upgradeable token
    ) external view returns (uint256 profit, uint256 upperNum);

    /// @notice Returns the closest possible multiplier generated by the bet amount and win chance
    function getMultiplierFromBetAndChance(
        uint256 betAmount,
        uint256 winningChance,
        IERC20Upgradeable token
    ) external view returns (uint256 multiplier);

    /// @notice Returns bet amount to be used for the multiplier and profit
    /// @notice The upperNum can be used to calculate the exact multiplier used for the calculation of the bet amount
    function getBetFromMultiplierAndProfit(
        uint256 multiplier,
        uint256 profit,
        IERC20Upgradeable token
    ) external view returns (uint256 betAmount, uint256 upperNum);

    /// @notice The max multiplier comes when a user chooses only one number between 1-10000
    function getMaxMultiplier() external view returns (uint256 maxMultiplier);

    /// @notice Calculates the values that help to visualize the bet with the most accurate numbers
    /// @notice The function will correct values ​​that are not precise, but will throw an error if the values ​​are out of bounds.
    /// @param desiredMultiplier Desired multiplier in wei units
    /// @param desiredWinningChance Win chance the user would like to have numbers from 1 to 10000
    /// @param desiredProfit Amount of profit the user expects to have
    /// @param desiredBetAmount Bet to be used when playing
    /// @param token Address of the token to be used in the bet
    /// @return resultBetAmount Bet amount to be used in the preview of the bet
    /// @return resultProfit Profit to be used in the preview of the bet
    /// @return resultPrize Prize to be used in the preview of the bet
    /// @return resultWinningChance Win chance to be used in the preview of the bet
    /// @return resultMultiplier Multiplier to be used in the preview of the bet
    function getPreviewNumbers(
        uint256 desiredMultiplier,
        uint256 desiredWinningChance,
        uint256 desiredProfit,
        uint256 desiredBetAmount,
        IERC20Upgradeable token
    )
        external
        view
        returns (
            uint256 resultBetAmount,
            uint256 resultProfit,
            uint256 resultPrize,
            uint256 resultWinningChance,
            uint256 resultMultiplier
        );

    /// @notice The min multiplier comes when a user chooses all numbers except for house edge + 1
    function getMinMultiplier() external view returns (uint256 minMultiplier);

    /// @notice It estimates the winning chance to cover all the possible numbers except for the  house edge + 1, so that it can get more than 1x
    function getMaxWinningChance()
        external
        view
        returns (uint256 maxWinningChance);

    /// @notice Calculates the chainlink fee using the current tx gas price
    /// @dev Explain to a developer any extra details
    /// @param currentGasPrice gas price to be used in the tx
    /// @param amountOfBets how many numbers will be requested
    /// @return fee amount in native token - wei format
    function estimateChainlinkFee(
        uint256 currentGasPrice,
        uint256 amountOfBets,
        uint256 linkPremium,
        uint256 maxVerificationGas,
        uint256 callbackGasLimit,
        address linkToNativeTokenPriceFeed
    ) external view returns (uint256);
}