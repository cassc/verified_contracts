{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"node_modules/@gearbox-protocol/core-v3/contracts/pool/PoolV3.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n// Gearbox Protocol. Generalized leverage for DeFi protocols\\n// (c) Gearbox Foundation, 2023.\\npragma solidity ^0.8.17;\\npragma abicoder v1;\\n\\nimport {SafeERC20} from \\\"@1inch/solidity-utils/contracts/libraries/SafeERC20.sol\\\";\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {IERC4626} from \\\"@openzeppelin/contracts/interfaces/IERC4626.sol\\\";\\nimport {IERC20Metadata} from \\\"@openzeppelin/contracts/interfaces/IERC20Metadata.sol\\\";\\nimport {ERC20} from \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport {ERC4626} from \\\"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\\\";\\nimport {ERC20Permit} from \\\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\\\";\\n\\nimport {Math} from \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport {SafeCast} from \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\nimport {EnumerableSet} from \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\n\\n// INTERFACES\\nimport {IAddressProviderV3, AP_TREASURY, NO_VERSION_CONTROL} from \\\"../interfaces/IAddressProviderV3.sol\\\";\\nimport {ICreditManagerV3} from \\\"../interfaces/ICreditManagerV3.sol\\\";\\nimport {ILinearInterestRateModelV3} from \\\"../interfaces/ILinearInterestRateModelV3.sol\\\";\\nimport {IPoolQuotaKeeperV3} from \\\"../interfaces/IPoolQuotaKeeperV3.sol\\\";\\nimport {IPoolV3} from \\\"../interfaces/IPoolV3.sol\\\";\\n\\n// LIBS & TRAITS\\nimport {CreditLogic} from \\\"../libraries/CreditLogic.sol\\\";\\nimport {ACLNonReentrantTrait} from \\\"../traits/ACLNonReentrantTrait.sol\\\";\\nimport {ContractsRegisterTrait} from \\\"../traits/ContractsRegisterTrait.sol\\\";\\n\\n// CONSTANTS\\nimport {\\n    RAY,\\n    MAX_WITHDRAW_FEE,\\n    SECONDS_PER_YEAR,\\n    PERCENTAGE_FACTOR\\n} from \\\"@gearbox-protocol/core-v2/contracts/libraries/Constants.sol\\\";\\n\\n// EXCEPTIONS\\nimport \\\"../interfaces/IExceptions.sol\\\";\\n\\n/// @dev Struct that holds borrowed amount and debt limit\\nstruct DebtParams {\\n    uint128 borrowed;\\n    uint128 limit;\\n}\\n\\n/// @title Pool V3\\n/// @notice Pool contract that implements lending and borrowing logic, compatible with ERC-4626 standard\\n/// @notice Pool shares implement EIP-2612 permits\\ncontract PoolV3 is ERC4626, ERC20Permit, ACLNonReentrantTrait, ContractsRegisterTrait, IPoolV3 {\\n    using Math for uint256;\\n    using SafeCast for int256;\\n    using SafeCast for uint256;\\n    using CreditLogic for uint256;\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    using SafeERC20 for IERC20;\\n\\n    /// @notice Contract version\\n    uint256 public constant override version = 3_00;\\n\\n    /// @notice Address provider contract address\\n    address public immutable override addressProvider;\\n\\n    /// @notice Underlying token address\\n    address public immutable override underlyingToken;\\n\\n    /// @notice Protocol treasury address\\n    address public immutable override treasury;\\n\\n    /// @notice Interest rate model contract address\\n    address public override interestRateModel;\\n    /// @notice Timestamp of the last base interest rate and index update\\n    uint40 public override lastBaseInterestUpdate;\\n    /// @notice Timestamp of the last quota revenue update\\n    uint40 public override lastQuotaRevenueUpdate;\\n    /// @notice Withdrawal fee in bps\\n    uint16 public override withdrawFee;\\n\\n    /// @notice Pool quota keeper contract address\\n    address public override poolQuotaKeeper;\\n    /// @dev Current quota revenue\\n    uint96 internal _quotaRevenue;\\n\\n    /// @dev Current base interest rate in ray\\n    uint128 internal _baseInterestRate;\\n    /// @dev Cumulative base interest index stored as of last update in ray\\n    uint128 internal _baseInterestIndexLU;\\n\\n    /// @dev Expected liquidity stored as of last update\\n    uint128 internal _expectedLiquidityLU;\\n\\n    /// @dev Aggregate debt params\\n    DebtParams internal _totalDebt;\\n\\n    /// @dev Mapping credit manager => debt params\\n    mapping(address => DebtParams) internal _creditManagerDebt;\\n\\n    /// @dev List of all connected credit managers\\n    EnumerableSet.AddressSet internal _creditManagerSet;\\n\\n    /// @dev Ensures that function can only be called by the pool quota keeper\\n    modifier poolQuotaKeeperOnly() {\\n        _revertIfCallerIsNotPoolQuotaKeeper();\\n        _;\\n    }\\n\\n    function _revertIfCallerIsNotPoolQuotaKeeper() internal view {\\n        if (msg.sender != poolQuotaKeeper) revert CallerNotPoolQuotaKeeperException(); // U:[LP-2C]\\n    }\\n\\n    /// @notice Constructor\\n    /// @param addressProvider_ Address provider contract address\\n    /// @param underlyingToken_ Pool underlying token address\\n    /// @param interestRateModel_ Interest rate model contract address\\n    /// @param totalDebtLimit_ Initial total debt limit, `type(uint256).max` for no limit\\n    /// @param name_ Name of the pool\\n    /// @param symbol_ Symbol of the pool's LP token\\n    constructor(\\n        address addressProvider_,\\n        address underlyingToken_,\\n        address interestRateModel_,\\n        uint256 totalDebtLimit_,\\n        string memory name_,\\n        string memory symbol_\\n    )\\n        ACLNonReentrantTrait(addressProvider_) // U:[LP-1A]\\n        ContractsRegisterTrait(addressProvider_)\\n        ERC4626(IERC20(underlyingToken_)) // U:[LP-1B]\\n        ERC20(name_, symbol_) // U:[LP-1B]\\n        ERC20Permit(name_) // U:[LP-1B]\\n        nonZeroAddress(underlyingToken_) // U:[LP-1A]\\n        nonZeroAddress(interestRateModel_) // U:[LP-1A]\\n    {\\n        addressProvider = addressProvider_; // U:[LP-1B]\\n        underlyingToken = underlyingToken_; // U:[LP-1B]\\n\\n        treasury =\\n            IAddressProviderV3(addressProvider_).getAddressOrRevert({key: AP_TREASURY, _version: NO_VERSION_CONTROL}); // U:[LP-1B]\\n\\n        lastBaseInterestUpdate = uint40(block.timestamp); // U:[LP-1B]\\n        _baseInterestIndexLU = uint128(RAY); // U:[LP-1B]\\n\\n        interestRateModel = interestRateModel_; // U:[LP-1B]\\n        emit SetInterestRateModel(interestRateModel_); // U:[LP-1B]\\n\\n        _setTotalDebtLimit(totalDebtLimit_); // U:[LP-1B]\\n    }\\n\\n    /// @notice Pool shares decimals, matches underlying token decimals\\n    function decimals() public view override(ERC20, ERC4626, IERC20Metadata) returns (uint8) {\\n        return ERC4626.decimals();\\n    }\\n\\n    /// @notice Addresses of all connected credit managers\\n    function creditManagers() external view override returns (address[] memory) {\\n        return _creditManagerSet.values();\\n    }\\n\\n    /// @notice Available liquidity in the pool\\n    function availableLiquidity() public view override returns (uint256) {\\n        return IERC20(underlyingToken).balanceOf(address(this)); // U:[LP-3]\\n    }\\n\\n    /// @notice Amount of underlying that would be in the pool if debt principal, base interest\\n    ///         and quota revenue were fully repaid\\n    function expectedLiquidity() public view override returns (uint256) {\\n        return _expectedLiquidityLU + _calcBaseInterestAccrued() + _calcQuotaRevenueAccrued(); // U:[LP-4]\\n    }\\n\\n    /// @notice Expected liquidity stored as of last update\\n    function expectedLiquidityLU() public view override returns (uint256) {\\n        return _expectedLiquidityLU;\\n    }\\n\\n    // ---------------- //\\n    // ERC-4626 LENDING //\\n    // ---------------- //\\n\\n    /// @notice Total amount of underlying tokens managed by the pool, same as `expectedLiquidity`\\n    /// @dev Since `totalAssets` doesn't depend on underlying balance, pool is not vulnerable to the inflation attack\\n    function totalAssets() public view override(ERC4626, IERC4626) returns (uint256 assets) {\\n        return expectedLiquidity();\\n    }\\n\\n    /// @notice Deposits given amount of underlying tokens to the pool in exchange for pool shares\\n    /// @param assets Amount of underlying to deposit\\n    /// @param receiver Account to mint pool shares to\\n    /// @return shares Number of shares minted\\n    function deposit(uint256 assets, address receiver)\\n        public\\n        override(ERC4626, IERC4626)\\n        whenNotPaused // U:[LP-2A]\\n        nonReentrant // U:[LP-2B]\\n        nonZeroAddress(receiver) // U:[LP-5]\\n        returns (uint256 shares)\\n    {\\n        uint256 assetsReceived = _amountMinusFee(assets); // U:[LP-6]\\n        shares = _convertToShares(assetsReceived, Math.Rounding.Down); // U:[LP-6]\\n        _deposit(receiver, assets, assetsReceived, shares); // U:[LP-6]\\n    }\\n\\n    /// @dev Same as `deposit`, but allows to specify the referral code\\n    function depositWithReferral(uint256 assets, address receiver, uint256 referralCode)\\n        external\\n        override\\n        returns (uint256 shares)\\n    {\\n        shares = deposit(assets, receiver); // U:[LP-2A,2B,5,6]\\n        emit Refer(receiver, referralCode, assets); // U:[LP-6]\\n    }\\n\\n    /// @notice Deposits underlying tokens to the pool in exhcange for given number of pool shares\\n    /// @param shares Number of shares to mint\\n    /// @param receiver Account to mint pool shares to\\n    /// @return assets Amount of underlying transferred from caller\\n    function mint(uint256 shares, address receiver)\\n        public\\n        override(ERC4626, IERC4626)\\n        whenNotPaused // U:[LP-2A]\\n        nonReentrant // U:[LP-2B]\\n        nonZeroAddress(receiver) // U:[LP-5]\\n        returns (uint256 assets)\\n    {\\n        uint256 assetsReceived = _convertToAssets(shares, Math.Rounding.Up); // U:[LP-7]\\n        assets = _amountWithFee(assetsReceived); // U:[LP-7]\\n        _deposit(receiver, assets, assetsReceived, shares); // U:[LP-7]\\n    }\\n\\n    /// @dev Same as `mint`, but allows to specify the referral code\\n    function mintWithReferral(uint256 shares, address receiver, uint256 referralCode)\\n        external\\n        override\\n        returns (uint256 assets)\\n    {\\n        assets = mint(shares, receiver); // U:[LP-2A,2B,5,7]\\n        emit Refer(receiver, referralCode, assets); // U:[LP-7]\\n    }\\n\\n    /// @notice Withdraws pool shares for given amount of underlying tokens\\n    /// @param assets Amount of underlying to withdraw\\n    /// @param receiver Account to send underlying to\\n    /// @param owner Account to burn pool shares from\\n    /// @return shares Number of pool shares burned\\n    function withdraw(uint256 assets, address receiver, address owner)\\n        public\\n        override(ERC4626, IERC4626)\\n        whenNotPaused // U:[LP-2A]\\n        nonReentrant // U:[LP-2B]\\n        nonZeroAddress(receiver) // U:[LP-5]\\n        returns (uint256 shares)\\n    {\\n        uint256 assetsToUser = _amountWithFee(assets);\\n        uint256 assetsSent = _amountWithWithdrawalFee(assetsToUser); // U:[LP-8]\\n        shares = _convertToShares(assetsSent, Math.Rounding.Up); // U:[LP-8]\\n        _withdraw(receiver, owner, assetsSent, assets, assetsToUser, shares); // U:[LP-8]\\n    }\\n\\n    /// @notice Redeems given number of pool shares for underlying tokens\\n    /// @param shares Number of pool shares to redeem\\n    /// @param receiver Account to send underlying to\\n    /// @param owner Account to burn pool shares from\\n    /// @return assets Amount of underlying withdrawn\\n    function redeem(uint256 shares, address receiver, address owner)\\n        public\\n        override(ERC4626, IERC4626)\\n        whenNotPaused // U:[LP-2A]\\n        nonReentrant // U:[LP-2B]\\n        nonZeroAddress(receiver) // U:[LP-5]\\n        returns (uint256 assets)\\n    {\\n        uint256 assetsSent = _convertToAssets(shares, Math.Rounding.Down); // U:[LP-9]\\n        uint256 assetsToUser = _amountMinusWithdrawalFee(assetsSent);\\n        assets = _amountMinusFee(assetsToUser); // U:[LP-9]\\n        _withdraw(receiver, owner, assetsSent, assets, assetsToUser, shares); // U:[LP-9]\\n    }\\n\\n    /// @notice Number of pool shares that would be minted on depositing `assets`\\n    function previewDeposit(uint256 assets) public view override(ERC4626, IERC4626) returns (uint256 shares) {\\n        shares = _convertToShares(_amountMinusFee(assets), Math.Rounding.Down); // U:[LP-10]\\n    }\\n\\n    /// @notice Amount of underlying that would be spent to mint `shares`\\n    function previewMint(uint256 shares) public view override(ERC4626, IERC4626) returns (uint256) {\\n        return _amountWithFee(_convertToAssets(shares, Math.Rounding.Up)); // U:[LP-10]\\n    }\\n\\n    /// @notice Number of pool shares that would be burned on withdrawing `assets`\\n    function previewWithdraw(uint256 assets) public view override(ERC4626, IERC4626) returns (uint256) {\\n        return _convertToShares(_amountWithWithdrawalFee(_amountWithFee(assets)), Math.Rounding.Up); // U:[LP-10]\\n    }\\n\\n    /// @notice Amount of underlying that would be received after redeeming `shares`\\n    function previewRedeem(uint256 shares) public view override(ERC4626, IERC4626) returns (uint256) {\\n        return _amountMinusFee(_amountMinusWithdrawalFee(_convertToAssets(shares, Math.Rounding.Down))); // U:[LP-10]\\n    }\\n\\n    /// @notice Maximum amount of underlying that can be deposited to the pool, 0 if pool is on pause\\n    function maxDeposit(address) public view override(ERC4626, IERC4626) returns (uint256) {\\n        return paused() ? 0 : type(uint256).max; // U:[LP-11]\\n    }\\n\\n    /// @notice Maximum number of pool shares that can be minted, 0 if pool is on pause\\n    function maxMint(address) public view override(ERC4626, IERC4626) returns (uint256) {\\n        return paused() ? 0 : type(uint256).max; // U:[LP-11]\\n    }\\n\\n    /// @notice Maximum amount of underlying that can be withdrawn from the pool by `owner`, 0 if pool is on pause\\n    function maxWithdraw(address owner) public view override(ERC4626, IERC4626) returns (uint256) {\\n        return paused()\\n            ? 0\\n            : _amountMinusFee(\\n                _amountMinusWithdrawalFee(\\n                    Math.min(availableLiquidity(), _convertToAssets(balanceOf(owner), Math.Rounding.Down))\\n                )\\n            ); // U:[LP-11]\\n    }\\n\\n    /// @notice Maximum number of shares that can be redeemed for underlying by `owner`, 0 if pool is on pause\\n    function maxRedeem(address owner) public view override(ERC4626, IERC4626) returns (uint256) {\\n        return paused() ? 0 : Math.min(balanceOf(owner), _convertToShares(availableLiquidity(), Math.Rounding.Down)); // U:[LP-11]\\n    }\\n\\n    /// @dev `deposit` / `mint` implementation\\n    ///      - transfers underlying from the caller\\n    ///      - updates base interest rate and index\\n    ///      - mints pool shares to `receiver`\\n    function _deposit(address receiver, uint256 assetsSent, uint256 assetsReceived, uint256 shares) internal {\\n        IERC20(underlyingToken).safeTransferFrom({from: msg.sender, to: address(this), amount: assetsSent}); // U:[LP-6,7]\\n\\n        _updateBaseInterest({\\n            expectedLiquidityDelta: assetsReceived.toInt256(),\\n            availableLiquidityDelta: 0,\\n            checkOptimalBorrowing: false\\n        }); // U:[LP-6,7]\\n\\n        _mint(receiver, shares); // U:[LP-6,7]\\n        emit Deposit(msg.sender, receiver, assetsSent, shares); // U:[LP-6,7]\\n    }\\n\\n    /// @dev `withdraw` / `redeem` implementation\\n    ///      - burns pool shares from `owner`\\n    ///      - updates base interest rate and index\\n    ///      - transfers underlying to `receiver` and, if withdrawal fee is activated, to the treasury\\n    function _withdraw(\\n        address receiver,\\n        address owner,\\n        uint256 assetsSent,\\n        uint256 assetsReceived,\\n        uint256 amountToUser,\\n        uint256 shares\\n    ) internal {\\n        if (msg.sender != owner) _spendAllowance({owner: owner, spender: msg.sender, amount: shares}); // U:[LP-8,9]\\n        _burn(owner, shares); // U:[LP-8,9]\\n\\n        _updateBaseInterest({\\n            expectedLiquidityDelta: -assetsSent.toInt256(),\\n            availableLiquidityDelta: -assetsSent.toInt256(),\\n            checkOptimalBorrowing: false\\n        }); // U:[LP-8,9]\\n\\n        IERC20(underlyingToken).safeTransfer({to: receiver, value: amountToUser}); // U:[LP-8,9]\\n        if (assetsSent > amountToUser) {\\n            unchecked {\\n                IERC20(underlyingToken).safeTransfer({to: treasury, value: assetsSent - amountToUser}); // U:[LP-8,9]\\n            }\\n        }\\n        emit Withdraw(msg.sender, receiver, owner, assetsReceived, shares); // U:[LP-8,9]\\n    }\\n\\n    /// @dev Internal conversion function (from assets to shares) with support for rounding direction\\n    /// @dev Pool is not vulnerable to the inflation attack, so the simplified implementation w/o virtual shares is used\\n    function _convertToShares(uint256 assets, Math.Rounding rounding) internal view override returns (uint256 shares) {\\n        uint256 supply = totalSupply();\\n        return (assets == 0 || supply == 0) ? assets : assets.mulDiv(supply, totalAssets(), rounding);\\n    }\\n\\n    /// @dev Internal conversion function (from shares to assets) with support for rounding direction\\n    /// @dev Pool is not vulnerable to the inflation attack, so the simplified implementation w/o virtual shares is used\\n    function _convertToAssets(uint256 shares, Math.Rounding rounding) internal view override returns (uint256 assets) {\\n        uint256 supply = totalSupply();\\n        return (supply == 0) ? shares : shares.mulDiv(totalAssets(), supply, rounding);\\n    }\\n\\n    // --------- //\\n    // BORROWING //\\n    // --------- //\\n\\n    /// @notice Total borrowed amount (principal only)\\n    function totalBorrowed() external view override returns (uint256) {\\n        return _totalDebt.borrowed;\\n    }\\n\\n    /// @notice Total debt limit, `type(uint256).max` means no limit\\n    function totalDebtLimit() external view override returns (uint256) {\\n        return _convertToU256(_totalDebt.limit);\\n    }\\n\\n    /// @notice Amount borrowed by a given credit manager\\n    function creditManagerBorrowed(address creditManager) external view override returns (uint256) {\\n        return _creditManagerDebt[creditManager].borrowed;\\n    }\\n\\n    /// @notice Debt limit for a given credit manager, `type(uint256).max` means no limit\\n    function creditManagerDebtLimit(address creditManager) external view override returns (uint256) {\\n        return _convertToU256(_creditManagerDebt[creditManager].limit);\\n    }\\n\\n    /// @notice Amount available to borrow for a given credit manager\\n    function creditManagerBorrowable(address creditManager) external view override returns (uint256 borrowable) {\\n        borrowable = _borrowable(_totalDebt); // U:[LP-12]\\n        if (borrowable == 0) return 0; // U:[LP-12]\\n\\n        borrowable = Math.min(borrowable, _borrowable(_creditManagerDebt[creditManager])); // U:[LP-12]\\n        if (borrowable == 0) return 0; // U:[LP-12]\\n\\n        uint256 available = ILinearInterestRateModelV3(interestRateModel).availableToBorrow({\\n            expectedLiquidity: expectedLiquidity(),\\n            availableLiquidity: availableLiquidity()\\n        }); // U:[LP-12]\\n\\n        borrowable = Math.min(borrowable, available); // U:[LP-12]\\n    }\\n\\n    /// @notice Lends funds to a credit account, can only be called by credit managers\\n    /// @param borrowedAmount Amount to borrow\\n    /// @param creditAccount Credit account to send the funds to\\n    function lendCreditAccount(uint256 borrowedAmount, address creditAccount)\\n        external\\n        override\\n        whenNotPaused // U:[LP-2A]\\n        nonReentrant // U:[LP-2B]\\n    {\\n        uint128 borrowedAmountU128 = borrowedAmount.toUint128();\\n\\n        DebtParams storage cmDebt = _creditManagerDebt[msg.sender];\\n        uint128 totalBorrowed_ = _totalDebt.borrowed + borrowedAmountU128;\\n        uint128 cmBorrowed_ = cmDebt.borrowed + borrowedAmountU128;\\n        if (borrowedAmount == 0 || cmBorrowed_ > cmDebt.limit || totalBorrowed_ > _totalDebt.limit) {\\n            revert CreditManagerCantBorrowException(); // U:[LP-2C,13A]\\n        }\\n\\n        _updateBaseInterest({\\n            expectedLiquidityDelta: 0,\\n            availableLiquidityDelta: -borrowedAmount.toInt256(),\\n            checkOptimalBorrowing: true\\n        }); // U:[LP-13B]\\n\\n        cmDebt.borrowed = cmBorrowed_; // U:[LP-13B]\\n        _totalDebt.borrowed = totalBorrowed_; // U:[LP-13B]\\n\\n        IERC20(underlyingToken).safeTransfer({to: creditAccount, value: borrowedAmount}); // U:[LP-13B]\\n        emit Borrow(msg.sender, creditAccount, borrowedAmount); // U:[LP-13B]\\n    }\\n\\n    /// @notice Updates pool state to indicate debt repayment, can only be called by credit managers\\n    ///         after transferring underlying from a credit account to the pool.\\n    ///         - If transferred amount exceeds debt principal + base interest + quota interest,\\n    ///           the difference is deemed protocol's profit and the respective number of shares\\n    ///           is minted to the treasury.\\n    ///         - If, however, transferred amount is insufficient to repay debt and interest,\\n    ///           which may only happen during liquidation, treasury's shares are burned to\\n    ///           cover as much of the loss as possible.\\n    /// @param repaidAmount Amount of debt principal repaid\\n    /// @param profit Pool's profit in underlying after repaying\\n    /// @param loss Pool's loss in underlying after repaying\\n    /// @custom:expects Credit manager transfers underlying from a credit account to the pool before calling this function\\n    /// @custom:expects Profit/loss computed in the credit manager are cosistent with pool's implicit calculations\\n    function repayCreditAccount(uint256 repaidAmount, uint256 profit, uint256 loss)\\n        external\\n        override\\n        whenNotPaused // U:[LP-2A]\\n        nonReentrant // U:[LP-2B]\\n    {\\n        uint128 repaidAmountU128 = repaidAmount.toUint128();\\n\\n        DebtParams storage cmDebt = _creditManagerDebt[msg.sender];\\n        uint128 cmBorrowed = cmDebt.borrowed;\\n        if (cmBorrowed == 0) {\\n            revert CallerNotCreditManagerException(); // U:[LP-2C,14A]\\n        }\\n\\n        if (profit > 0) {\\n            _mint(treasury, convertToShares(profit)); // U:[LP-14B]\\n        } else if (loss > 0) {\\n            address treasury_ = treasury;\\n            uint256 sharesInTreasury = balanceOf(treasury_);\\n            uint256 sharesToBurn = convertToShares(loss);\\n            if (sharesToBurn > sharesInTreasury) {\\n                unchecked {\\n                    emit IncurUncoveredLoss({\\n                        creditManager: msg.sender,\\n                        loss: convertToAssets(sharesToBurn - sharesInTreasury)\\n                    }); // U:[LP-14D]\\n                }\\n                sharesToBurn = sharesInTreasury;\\n            }\\n            _burn(treasury_, sharesToBurn); // U:[LP-14C,14D]\\n        }\\n\\n        _updateBaseInterest({\\n            expectedLiquidityDelta: profit.toInt256() - loss.toInt256(),\\n            availableLiquidityDelta: 0,\\n            checkOptimalBorrowing: false\\n        }); // U:[LP-14B,14C,14D]\\n\\n        _totalDebt.borrowed -= repaidAmountU128; // U:[LP-14B,14C,14D]\\n        cmDebt.borrowed = cmBorrowed - repaidAmountU128; // U:[LP-14B,14C,14D]\\n\\n        emit Repay(msg.sender, repaidAmount, profit, loss); // U:[LP-14B,14C,14D]\\n    }\\n\\n    /// @dev Returns borrowable amount based on debt limit and current borrowed amount\\n    function _borrowable(DebtParams storage debt) internal view returns (uint256) {\\n        uint256 limit = debt.limit;\\n        if (limit == type(uint128).max) {\\n            return type(uint256).max;\\n        }\\n        uint256 borrowed = debt.borrowed;\\n        if (borrowed >= limit) return 0;\\n        unchecked {\\n            return limit - borrowed;\\n        }\\n    }\\n\\n    // ------------- //\\n    // INTEREST RATE //\\n    // ------------- //\\n\\n    /// @notice Annual interest rate in ray that credit account owners pay per unit of borrowed capital\\n    function baseInterestRate() public view override returns (uint256) {\\n        return _baseInterestRate;\\n    }\\n\\n    /// @notice Annual interest rate in ray that liquidity providers receive per unit of deposited capital,\\n    ///         consists of base interest and quota revenue\\n    function supplyRate() external view override returns (uint256) {\\n        uint256 assets = expectedLiquidity();\\n        uint256 baseInterestRate_ = baseInterestRate();\\n        if (assets == 0) return baseInterestRate_;\\n        return (baseInterestRate_ * _totalDebt.borrowed + quotaRevenue() * RAY) * (PERCENTAGE_FACTOR - withdrawFee)\\n            / PERCENTAGE_FACTOR / assets; // U:[LP-15]\\n    }\\n\\n    /// @notice Current cumulative base interest index in ray\\n    function baseInterestIndex() public view override returns (uint256) {\\n        uint256 timestampLU = lastBaseInterestUpdate;\\n        if (block.timestamp == timestampLU) return _baseInterestIndexLU; // U:[LP-16]\\n        return _calcBaseInterestIndex(timestampLU); // U:[LP-16]\\n    }\\n\\n    /// @notice Cumulative base interest index stored as of last update in ray\\n    function baseInterestIndexLU() external view override returns (uint256) {\\n        return _baseInterestIndexLU;\\n    }\\n\\n    /// @dev Computes base interest accrued since the last update\\n    function _calcBaseInterestAccrued() internal view returns (uint256) {\\n        uint256 timestampLU = lastBaseInterestUpdate;\\n        if (block.timestamp == timestampLU) return 0; // U:[LP-17]\\n        return _calcBaseInterestAccrued(timestampLU); // U:[LP-17]\\n    }\\n\\n    /// @dev Updates base interest rate based on expected and available liquidity deltas\\n    ///      - Adds expected liquidity delta to stored expected liquidity\\n    ///      - If time has passed since the last base interest update, adds accrued interest\\n    ///        to stored expected liquidity, updates interest index and last update timestamp\\n    ///      - If time has passed since the last quota revenue update, adds accrued revenue\\n    ///        to stored expected liquidity and updates last update timestamp\\n    function _updateBaseInterest(\\n        int256 expectedLiquidityDelta,\\n        int256 availableLiquidityDelta,\\n        bool checkOptimalBorrowing\\n    ) internal {\\n        uint256 expectedLiquidity_ = (expectedLiquidity().toInt256() + expectedLiquidityDelta).toUint256();\\n        uint256 availableLiquidity_ = (availableLiquidity().toInt256() + availableLiquidityDelta).toUint256();\\n\\n        uint256 lastBaseInterestUpdate_ = lastBaseInterestUpdate;\\n        if (block.timestamp != lastBaseInterestUpdate_) {\\n            _baseInterestIndexLU = _calcBaseInterestIndex(lastBaseInterestUpdate_).toUint128(); // U:[LP-18]\\n            lastBaseInterestUpdate = uint40(block.timestamp); // U:[LP-18]\\n        }\\n\\n        if (block.timestamp != lastQuotaRevenueUpdate) {\\n            lastQuotaRevenueUpdate = uint40(block.timestamp); // U:[LP-18]\\n        }\\n\\n        _expectedLiquidityLU = expectedLiquidity_.toUint128(); // U:[LP-18]\\n        _baseInterestRate = ILinearInterestRateModelV3(interestRateModel).calcBorrowRate({\\n            expectedLiquidity: expectedLiquidity_,\\n            availableLiquidity: availableLiquidity_,\\n            checkOptimalBorrowing: checkOptimalBorrowing\\n        }).toUint128(); // U:[LP-18]\\n    }\\n\\n    /// @dev Computes base interest accrued since given timestamp\\n    function _calcBaseInterestAccrued(uint256 timestamp) private view returns (uint256) {\\n        return _totalDebt.borrowed * baseInterestRate().calcLinearGrowth(timestamp) / RAY;\\n    }\\n\\n    /// @dev Computes current value of base interest index\\n    function _calcBaseInterestIndex(uint256 timestamp) private view returns (uint256) {\\n        return _baseInterestIndexLU * (RAY + baseInterestRate().calcLinearGrowth(timestamp)) / RAY;\\n    }\\n\\n    // ------ //\\n    // QUOTAS //\\n    // ------ //\\n\\n    /// @notice Current annual quota revenue in underlying tokens\\n    function quotaRevenue() public view override returns (uint256) {\\n        return _quotaRevenue;\\n    }\\n\\n    /// @notice Updates quota revenue value by given delta\\n    /// @param quotaRevenueDelta Quota revenue delta\\n    function updateQuotaRevenue(int256 quotaRevenueDelta)\\n        external\\n        override\\n        nonReentrant // U:[LP-2B]\\n        poolQuotaKeeperOnly // U:[LP-2C]\\n    {\\n        _setQuotaRevenue((quotaRevenue().toInt256() + quotaRevenueDelta).toUint256()); // U:[LP-19]\\n    }\\n\\n    /// @notice Sets new quota revenue value\\n    /// @param newQuotaRevenue New quota revenue value\\n    function setQuotaRevenue(uint256 newQuotaRevenue)\\n        external\\n        override\\n        nonReentrant // U:[LP-2B]\\n        poolQuotaKeeperOnly // U:[LP-2C]\\n    {\\n        _setQuotaRevenue(newQuotaRevenue); // U:[LP-20]\\n    }\\n\\n    /// @dev Computes quota revenue accrued since the last update\\n    function _calcQuotaRevenueAccrued() internal view returns (uint256) {\\n        uint256 timestampLU = lastQuotaRevenueUpdate;\\n        if (block.timestamp == timestampLU) return 0; // U:[LP-21]\\n        return _calcQuotaRevenueAccrued(timestampLU); // U:[LP-21]\\n    }\\n\\n    /// @dev Sets new quota revenue value\\n    ///      - If time has passed since the last quota revenue update, adds accrued revenue\\n    ///        to stored expected liquidity and updates last update timestamp\\n    function _setQuotaRevenue(uint256 newQuotaRevenue) internal {\\n        uint256 timestampLU = lastQuotaRevenueUpdate;\\n        if (block.timestamp != timestampLU) {\\n            _expectedLiquidityLU += _calcQuotaRevenueAccrued(timestampLU).toUint128(); // U:[LP-20]\\n            lastQuotaRevenueUpdate = uint40(block.timestamp); // U:[LP-20]\\n        }\\n        _quotaRevenue = newQuotaRevenue.toUint96(); // U:[LP-20]\\n    }\\n\\n    /// @dev Computes quota revenue accrued since given timestamp\\n    function _calcQuotaRevenueAccrued(uint256 timestamp) private view returns (uint256) {\\n        return quotaRevenue().calcLinearGrowth(timestamp);\\n    }\\n\\n    // ------------- //\\n    // CONFIGURATION //\\n    // ------------- //\\n\\n    /// @notice Sets new interest rate model, can only be called by configurator\\n    /// @param newInterestRateModel Address of the new interest rate model contract\\n    function setInterestRateModel(address newInterestRateModel)\\n        external\\n        override\\n        configuratorOnly // U:[LP-2C]\\n        nonZeroAddress(newInterestRateModel) // U:[LP-22A]\\n    {\\n        interestRateModel = newInterestRateModel; // U:[LP-22B]\\n        _updateBaseInterest(0, 0, false); // U:[LP-22B]\\n        emit SetInterestRateModel(newInterestRateModel); // U:[LP-22B]\\n    }\\n\\n    /// @notice Sets new pool quota keeper, can only be called by configurator\\n    /// @param newPoolQuotaKeeper Address of the new pool quota keeper contract\\n    function setPoolQuotaKeeper(address newPoolQuotaKeeper)\\n        external\\n        override\\n        configuratorOnly // U:[LP-2C]\\n        nonZeroAddress(newPoolQuotaKeeper) // U:[LP-23A]\\n    {\\n        if (IPoolQuotaKeeperV3(newPoolQuotaKeeper).pool() != address(this)) {\\n            revert IncompatiblePoolQuotaKeeperException(); // U:[LP-23C]\\n        }\\n\\n        poolQuotaKeeper = newPoolQuotaKeeper; // U:[LP-23D]\\n\\n        uint256 newQuotaRevenue = IPoolQuotaKeeperV3(poolQuotaKeeper).poolQuotaRevenue();\\n        _setQuotaRevenue(newQuotaRevenue); // U:[LP-23D]\\n\\n        emit SetPoolQuotaKeeper(newPoolQuotaKeeper); // U:[LP-23D]\\n    }\\n\\n    /// @notice Sets new total debt limit, can only be called by controller\\n    /// @param newLimit New debt limit, `type(uint256).max` for no limit\\n    function setTotalDebtLimit(uint256 newLimit)\\n        external\\n        override\\n        controllerOnly // U:[LP-2C]\\n    {\\n        _setTotalDebtLimit(newLimit); // U:[LP-24]\\n    }\\n\\n    /// @notice Sets new debt limit for a given credit manager, can only be called by controller\\n    ///         Adds credit manager to the list of connected managers when called for the first time\\n    /// @param creditManager Credit manager to set the limit for\\n    /// @param newLimit New debt limit, `type(uint256).max` for no limit (has smaller priority than total debt limit)\\n    function setCreditManagerDebtLimit(address creditManager, uint256 newLimit)\\n        external\\n        override\\n        controllerOnly // U:[LP-2C]\\n        nonZeroAddress(creditManager) // U:[LP-25A]\\n        registeredCreditManagerOnly(creditManager) // U:[LP-25B]\\n    {\\n        if (!_creditManagerSet.contains(creditManager)) {\\n            if (address(this) != ICreditManagerV3(creditManager).pool()) {\\n                revert IncompatibleCreditManagerException(); // U:[LP-25C]\\n            }\\n            _creditManagerSet.add(creditManager); // U:[LP-25D]\\n            emit AddCreditManager(creditManager); // U:[LP-25D]\\n        }\\n        _creditManagerDebt[creditManager].limit = _convertToU128(newLimit); // U:[LP-25D]\\n        emit SetCreditManagerDebtLimit(creditManager, newLimit); // U:[LP-25D]\\n    }\\n\\n    /// @notice Sets new withdrawal fee, can only be called by controller\\n    /// @param newWithdrawFee New withdrawal fee in bps\\n    function setWithdrawFee(uint256 newWithdrawFee)\\n        external\\n        override\\n        controllerOnly // U:[LP-2C]\\n    {\\n        if (newWithdrawFee > MAX_WITHDRAW_FEE) {\\n            revert IncorrectParameterException(); // U:[LP-26A]\\n        }\\n        if (newWithdrawFee == withdrawFee) return;\\n\\n        withdrawFee = newWithdrawFee.toUint16(); // U:[LP-26B]\\n        emit SetWithdrawFee(newWithdrawFee); // U:[LP-26B]\\n    }\\n\\n    /// @dev Sets new total debt limit\\n    function _setTotalDebtLimit(uint256 limit) internal {\\n        uint128 newLimit = _convertToU128(limit);\\n        if (newLimit == _totalDebt.limit) return;\\n\\n        _totalDebt.limit = newLimit; // U:[LP-1B,24]\\n        emit SetTotalDebtLimit(limit); // U:[LP-1B,24]\\n    }\\n\\n    // --------- //\\n    // INTERNALS //\\n    // --------- //\\n\\n    /// @dev Returns amount of token that should be transferred to receive `amount`\\n    ///      Pools with fee-on-transfer underlying should override this method\\n    function _amountWithFee(uint256 amount) internal view virtual returns (uint256) {\\n        return amount;\\n    }\\n\\n    /// @dev Returns amount of token that will be received if `amount` is transferred\\n    ///      Pools with fee-on-transfer underlying should override this method\\n    function _amountMinusFee(uint256 amount) internal view virtual returns (uint256) {\\n        return amount;\\n    }\\n\\n    /// @dev Returns amount of token that should be withdrawn so that `amount` is actually sent to the receiver\\n    function _amountWithWithdrawalFee(uint256 amount) internal view returns (uint256) {\\n        return amount * PERCENTAGE_FACTOR / (PERCENTAGE_FACTOR - withdrawFee);\\n    }\\n\\n    /// @dev Returns amount of token that would actually be sent to the receiver when withdrawing `amount`\\n    function _amountMinusWithdrawalFee(uint256 amount) internal view returns (uint256) {\\n        return amount * (PERCENTAGE_FACTOR - withdrawFee) / PERCENTAGE_FACTOR;\\n    }\\n\\n    /// @dev Converts `uint128` to `uint256`, preserves maximum value\\n    function _convertToU256(uint128 limit) internal pure returns (uint256) {\\n        return (limit == type(uint128).max) ? type(uint256).max : limit;\\n    }\\n\\n    /// @dev Converts `uint256` to `uint128`, preserves maximum value\\n    function _convertToU128(uint256 limit) internal pure returns (uint128) {\\n        return (limit == type(uint256).max) ? type(uint128).max : limit.toUint128();\\n    }\\n}\\n\"\r\n    },\r\n    \"node_modules/@1inch/solidity-utils/contracts/libraries/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../interfaces/IDaiLikePermit.sol\\\";\\nimport \\\"../interfaces/IPermit2.sol\\\";\\nimport \\\"../interfaces/IWETH.sol\\\";\\nimport \\\"../libraries/RevertReasonForwarder.sol\\\";\\n\\n/// @title Implements efficient safe methods for ERC20 interface.\\nlibrary SafeERC20 {\\n    error SafeTransferFailed();\\n    error SafeTransferFromFailed();\\n    error ForceApproveFailed();\\n    error SafeIncreaseAllowanceFailed();\\n    error SafeDecreaseAllowanceFailed();\\n    error SafePermitBadLength();\\n    error Permit2TransferAmountTooHigh();\\n\\n    address private constant _PERMIT2 = 0x000000000022D473030F116dDEE9F6B43aC78BA3;\\n    bytes4 private constant _PERMIT_LENGTH_ERROR = 0x68275857;  // SafePermitBadLength.selector\\n    uint256 private constant _RAW_CALL_GAS_LIMIT = 5000;\\n\\n    function safeBalanceOf(\\n        IERC20 token,\\n        address account\\n    ) internal view returns(uint256 tokenBalance) {\\n        bytes4 selector = IERC20.balanceOf.selector;\\n        assembly (\\\"memory-safe\\\") { // solhint-disable-line no-inline-assembly\\n            mstore(0x00, selector)\\n            mstore(0x04, account)\\n            let success := staticcall(gas(), token, 0x00, 0x24, 0x00, 0x20)\\n            tokenBalance := mload(0)\\n\\n            if or(iszero(success), lt(returndatasize(), 0x20)) {\\n                let ptr := mload(0x40)\\n                returndatacopy(ptr, 0, returndatasize())\\n                revert(ptr, returndatasize())\\n            }\\n        }\\n    }\\n\\n    /// @dev Ensures method do not revert or return boolean `true`, admits call to non-smart-contract.\\n    function safeTransferFromUniversal(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        bool permit2\\n    ) internal {\\n        if (permit2) {\\n            safeTransferFromPermit2(token, from, to, amount);\\n        } else {\\n            safeTransferFrom(token, from, to, amount);\\n        }\\n    }\\n\\n    /// @dev Ensures method do not revert or return boolean `true`, admits call to non-smart-contract.\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        bytes4 selector = token.transferFrom.selector;\\n        bool success;\\n        assembly (\\\"memory-safe\\\") { // solhint-disable-line no-inline-assembly\\n            let data := mload(0x40)\\n\\n            mstore(data, selector)\\n            mstore(add(data, 0x04), from)\\n            mstore(add(data, 0x24), to)\\n            mstore(add(data, 0x44), amount)\\n            success := call(gas(), token, 0, data, 100, 0x0, 0x20)\\n            if success {\\n                switch returndatasize()\\n                case 0 {\\n                    success := gt(extcodesize(token), 0)\\n                }\\n                default {\\n                    success := and(gt(returndatasize(), 31), eq(mload(0), 1))\\n                }\\n            }\\n        }\\n        if (!success) revert SafeTransferFromFailed();\\n    }\\n\\n    /// @dev Permit2 version of safeTransferFrom above.\\n    function safeTransferFromPermit2(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        if (amount > type(uint160).max) revert Permit2TransferAmountTooHigh();\\n        bytes4 selector = IPermit2.transferFrom.selector;\\n        bool success;\\n        assembly (\\\"memory-safe\\\") { // solhint-disable-line no-inline-assembly\\n            let data := mload(0x40)\\n\\n            mstore(data, selector)\\n            mstore(add(data, 0x04), from)\\n            mstore(add(data, 0x24), to)\\n            mstore(add(data, 0x44), amount)\\n            mstore(add(data, 0x64), token)\\n            success := call(gas(), _PERMIT2, 0, data, 0x84, 0x0, 0x0)\\n            if success {\\n                success := gt(extcodesize(_PERMIT2), 0)\\n            }\\n        }\\n        if (!success) revert SafeTransferFromFailed();\\n    }\\n\\n    /// @dev Ensures method do not revert or return boolean `true`, admits call to non-smart-contract.\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        if (!_makeCall(token, token.transfer.selector, to, value)) {\\n            revert SafeTransferFailed();\\n        }\\n    }\\n\\n    /// @dev If `approve(from, to, amount)` fails, try to `approve(from, to, 0)` before retry.\\n    function forceApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        if (!_makeCall(token, token.approve.selector, spender, value)) {\\n            if (\\n                !_makeCall(token, token.approve.selector, spender, 0) ||\\n                !_makeCall(token, token.approve.selector, spender, value)\\n            ) {\\n                revert ForceApproveFailed();\\n            }\\n        }\\n    }\\n\\n    /// @dev Allowance increase with safe math check.\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 allowance = token.allowance(address(this), spender);\\n        if (value > type(uint256).max - allowance) revert SafeIncreaseAllowanceFailed();\\n        forceApprove(token, spender, allowance + value);\\n    }\\n\\n    /// @dev Allowance decrease with safe math check.\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 allowance = token.allowance(address(this), spender);\\n        if (value > allowance) revert SafeDecreaseAllowanceFailed();\\n        forceApprove(token, spender, allowance - value);\\n    }\\n\\n    function safePermit(IERC20 token, bytes calldata permit) internal {\\n        if (!tryPermit(token, msg.sender, address(this), permit)) RevertReasonForwarder.reRevert();\\n    }\\n\\n    function safePermit(IERC20 token, address owner, address spender, bytes calldata permit) internal {\\n        if (!tryPermit(token, owner, spender, permit)) RevertReasonForwarder.reRevert();\\n    }\\n\\n    function tryPermit(IERC20 token, bytes calldata permit) internal returns(bool success) {\\n        return tryPermit(token, msg.sender, address(this), permit);\\n    }\\n\\n    function tryPermit(IERC20 token, address owner, address spender, bytes calldata permit) internal returns(bool success) {\\n        bytes4 permitSelector = IERC20Permit.permit.selector;\\n        bytes4 daiPermitSelector = IDaiLikePermit.permit.selector;\\n        bytes4 permit2Selector = IPermit2.permit.selector;\\n        assembly (\\\"memory-safe\\\") { // solhint-disable-line no-inline-assembly\\n            let ptr := mload(0x40)\\n            switch permit.length\\n            case 100 {\\n                mstore(ptr, permitSelector)\\n                mstore(add(ptr, 0x04), owner)\\n                mstore(add(ptr, 0x24), spender)\\n\\n                // Compact IERC20Permit.permit(uint256 value, uint32 deadline, uint256 r, uint256 vs)\\n                {  // stack too deep\\n                    let deadline := shr(224, calldataload(add(permit.offset, 0x20)))\\n                    let vs := calldataload(add(permit.offset, 0x44))\\n\\n                    calldatacopy(add(ptr, 0x44), permit.offset, 0x20) // value\\n                    mstore(add(ptr, 0x64), sub(deadline, 1))\\n                    mstore(add(ptr, 0x84), add(27, shr(255, vs)))\\n                    calldatacopy(add(ptr, 0xa4), add(permit.offset, 0x24), 0x20) // r\\n                    mstore(add(ptr, 0xc4), shr(1, shl(1, vs)))\\n                }\\n                // IERC20Permit.permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s)\\n                success := call(gas(), token, 0, ptr, 0xe4, 0, 0)\\n            }\\n            case 72 {\\n                mstore(ptr, daiPermitSelector)\\n                mstore(add(ptr, 0x04), owner)\\n                mstore(add(ptr, 0x24), spender)\\n\\n                // Compact IDaiLikePermit.permit(uint32 nonce, uint32 expiry, uint256 r, uint256 vs)\\n                {  // stack too deep\\n                    let expiry := shr(224, calldataload(add(permit.offset, 0x04)))\\n                    let vs := calldataload(add(permit.offset, 0x28))\\n\\n                    mstore(add(ptr, 0x44), shr(224, calldataload(permit.offset)))\\n                    mstore(add(ptr, 0x64), sub(expiry, 1))\\n                    mstore(add(ptr, 0x84), true)\\n                    mstore(add(ptr, 0xa4), add(27, shr(255, vs)))\\n                    calldatacopy(add(ptr, 0xc4), add(permit.offset, 0x08), 0x20) // r\\n                    mstore(add(ptr, 0xe4), shr(1, shl(1, vs)))\\n                }\\n                // IDaiLikePermit.permit(address holder, address spender, uint256 nonce, uint256 expiry, bool allowed, uint8 v, bytes32 r, bytes32 s)\\n                success := call(gas(), token, 0, ptr, 0x104, 0, 0)\\n            }\\n            case 224 {\\n                mstore(ptr, permitSelector)\\n                calldatacopy(add(ptr, 0x04), permit.offset, permit.length)\\n                // IERC20Permit.permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s)\\n                success := call(gas(), token, 0, ptr, 0xe4, 0, 0)\\n            }\\n            case 256 {\\n                mstore(ptr, daiPermitSelector)\\n                calldatacopy(add(ptr, 0x04), permit.offset, permit.length)\\n                // IDaiLikePermit.permit(address holder, address spender, uint256 nonce, uint256 expiry, bool allowed, uint8 v, bytes32 r, bytes32 s)\\n                success := call(gas(), token, 0, ptr, 0x104, 0, 0)\\n            }\\n            case 96 {\\n                // Compact IPermit2.permit(uint160 amount, uint32 expiration, uint32 nonce, uint32 sigDeadline, uint256 r, uint256 vs)\\n                mstore(ptr, permit2Selector)\\n                mstore(add(ptr, 0x04), owner)\\n                mstore(add(ptr, 0x24), token)\\n                calldatacopy(add(ptr, 0x50), permit.offset, 0x14) // amount\\n                mstore(add(ptr, 0x64), and(0xffffffffffff, sub(shr(224, calldataload(add(permit.offset, 0x14))), 1))) // expiration\\n                mstore(add(ptr, 0x84), shr(224, calldataload(add(permit.offset, 0x18)))) // nonce\\n                mstore(add(ptr, 0xa4), spender)\\n                mstore(add(ptr, 0xc4), and(0xffffffffffff, sub(shr(224, calldataload(add(permit.offset, 0x1c))), 1))) // sigDeadline\\n                mstore(add(ptr, 0xe4), 0x100)\\n                mstore(add(ptr, 0x104), 0x40)\\n                calldatacopy(add(ptr, 0x124), add(permit.offset, 0x20), 0x20) // r\\n                calldatacopy(add(ptr, 0x144), add(permit.offset, 0x40), 0x20) // vs\\n                // IPermit2.permit(address owner, PermitSingle calldata permitSingle, bytes calldata signature)\\n                success := call(gas(), _PERMIT2, 0, ptr, 0x164, 0, 0)\\n            }\\n            case 352 {\\n                mstore(ptr, permit2Selector)\\n                calldatacopy(add(ptr, 0x04), permit.offset, permit.length)\\n                // IPermit2.permit(address owner, PermitSingle calldata permitSingle, bytes calldata signature)\\n                success := call(gas(), _PERMIT2, 0, ptr, 0x164, 0, 0)\\n            }\\n            default {\\n                mstore(ptr, _PERMIT_LENGTH_ERROR)\\n                revert(ptr, 4)\\n            }\\n        }\\n    }\\n\\n    function _makeCall(\\n        IERC20 token,\\n        bytes4 selector,\\n        address to,\\n        uint256 amount\\n    ) private returns (bool success) {\\n        assembly (\\\"memory-safe\\\") { // solhint-disable-line no-inline-assembly\\n            let data := mload(0x40)\\n\\n            mstore(data, selector)\\n            mstore(add(data, 0x04), to)\\n            mstore(add(data, 0x24), amount)\\n            success := call(gas(), token, 0, data, 0x44, 0x0, 0x20)\\n            if success {\\n                switch returndatasize()\\n                case 0 {\\n                    success := gt(extcodesize(token), 0)\\n                }\\n                default {\\n                    success := and(gt(returndatasize(), 31), eq(mload(0), 1))\\n                }\\n            }\\n        }\\n    }\\n\\n    function safeDeposit(IWETH weth, uint256 amount) internal {\\n        if (amount > 0) {\\n            bytes4 selector = IWETH.deposit.selector;\\n            assembly (\\\"memory-safe\\\") { // solhint-disable-line no-inline-assembly\\n                mstore(0, selector)\\n                if iszero(call(gas(), weth, amount, 0, 4, 0, 0)) {\\n                    returndatacopy(0, 0, returndatasize())\\n                    revert(0, returndatasize())\\n                }\\n            }\\n        }\\n    }\\n\\n    function safeWithdraw(IWETH weth, uint256 amount) internal {\\n        bytes4 selector = IWETH.withdraw.selector;\\n        assembly (\\\"memory-safe\\\") {  // solhint-disable-line no-inline-assembly\\n            mstore(0, selector)\\n            mstore(4, amount)\\n            if iszero(call(gas(), weth, 0, 0, 0x24, 0, 0)) {\\n                let ptr := mload(0x40)\\n                returndatacopy(ptr, 0, returndatasize())\\n                revert(ptr, returndatasize())\\n            }\\n        }\\n    }\\n\\n    function safeWithdrawTo(IWETH weth, uint256 amount, address to) internal {\\n        safeWithdraw(weth, amount);\\n        if (to != address(this)) {\\n            assembly (\\\"memory-safe\\\") {  // solhint-disable-line no-inline-assembly\\n                if iszero(call(_RAW_CALL_GAS_LIMIT, to, amount, 0, 0, 0, 0)) {\\n                    let ptr := mload(0x40)\\n                    returndatacopy(ptr, 0, returndatasize())\\n                    revert(ptr, returndatasize())\\n                }\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts/interfaces/IERC4626.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC4626.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/IERC20.sol\\\";\\nimport \\\"../token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\\n/**\\n * @dev Interface of the ERC4626 \\\"Tokenized Vault Standard\\\", as defined in\\n * https://eips.ethereum.org/EIPS/eip-4626[ERC-4626].\\n *\\n * _Available since v4.7._\\n */\\ninterface IERC4626 is IERC20, IERC20Metadata {\\n    event Deposit(address indexed sender, address indexed owner, uint256 assets, uint256 shares);\\n\\n    event Withdraw(\\n        address indexed sender,\\n        address indexed receiver,\\n        address indexed owner,\\n        uint256 assets,\\n        uint256 shares\\n    );\\n\\n    /**\\n     * @dev Returns the address of the underlying token used for the Vault for accounting, depositing, and withdrawing.\\n     *\\n     * - MUST be an ERC-20 token contract.\\n     * - MUST NOT revert.\\n     */\\n    function asset() external view returns (address assetTokenAddress);\\n\\n    /**\\n     * @dev Returns the total amount of the underlying asset that is \u201cmanaged\u201d by Vault.\\n     *\\n     * - SHOULD include any compounding that occurs from yield.\\n     * - MUST be inclusive of any fees that are charged against assets in the Vault.\\n     * - MUST NOT revert.\\n     */\\n    function totalAssets() external view returns (uint256 totalManagedAssets);\\n\\n    /**\\n     * @dev Returns the amount of shares that the Vault would exchange for the amount of assets provided, in an ideal\\n     * scenario where all the conditions are met.\\n     *\\n     * - MUST NOT be inclusive of any fees that are charged against assets in the Vault.\\n     * - MUST NOT show any variations depending on the caller.\\n     * - MUST NOT reflect slippage or other on-chain conditions, when performing the actual exchange.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: This calculation MAY NOT reflect the \u201cper-user\u201d price-per-share, and instead should reflect the\\n     * \u201caverage-user\u2019s\u201d price-per-share, meaning what the average user should expect to see when exchanging to and\\n     * from.\\n     */\\n    function convertToShares(uint256 assets) external view returns (uint256 shares);\\n\\n    /**\\n     * @dev Returns the amount of assets that the Vault would exchange for the amount of shares provided, in an ideal\\n     * scenario where all the conditions are met.\\n     *\\n     * - MUST NOT be inclusive of any fees that are charged against assets in the Vault.\\n     * - MUST NOT show any variations depending on the caller.\\n     * - MUST NOT reflect slippage or other on-chain conditions, when performing the actual exchange.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: This calculation MAY NOT reflect the \u201cper-user\u201d price-per-share, and instead should reflect the\\n     * \u201caverage-user\u2019s\u201d price-per-share, meaning what the average user should expect to see when exchanging to and\\n     * from.\\n     */\\n    function convertToAssets(uint256 shares) external view returns (uint256 assets);\\n\\n    /**\\n     * @dev Returns the maximum amount of the underlying asset that can be deposited into the Vault for the receiver,\\n     * through a deposit call.\\n     *\\n     * - MUST return a limited value if receiver is subject to some deposit limit.\\n     * - MUST return 2 ** 256 - 1 if there is no limit on the maximum amount of assets that may be deposited.\\n     * - MUST NOT revert.\\n     */\\n    function maxDeposit(address receiver) external view returns (uint256 maxAssets);\\n\\n    /**\\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their deposit at the current block, given\\n     * current on-chain conditions.\\n     *\\n     * - MUST return as close to and no more than the exact amount of Vault shares that would be minted in a deposit\\n     *   call in the same transaction. I.e. deposit should return the same or more shares as previewDeposit if called\\n     *   in the same transaction.\\n     * - MUST NOT account for deposit limits like those returned from maxDeposit and should always act as though the\\n     *   deposit would be accepted, regardless if the user has enough tokens approved, etc.\\n     * - MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: any unfavorable discrepancy between convertToShares and previewDeposit SHOULD be considered slippage in\\n     * share price or some other type of condition, meaning the depositor will lose assets by depositing.\\n     */\\n    function previewDeposit(uint256 assets) external view returns (uint256 shares);\\n\\n    /**\\n     * @dev Mints shares Vault shares to receiver by depositing exactly amount of underlying tokens.\\n     *\\n     * - MUST emit the Deposit event.\\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\\n     *   deposit execution, and are accounted for during deposit.\\n     * - MUST revert if all of assets cannot be deposited (due to deposit limit being reached, slippage, the user not\\n     *   approving enough underlying tokens to the Vault contract, etc).\\n     *\\n     * NOTE: most implementations will require pre-approval of the Vault with the Vault\u2019s underlying asset token.\\n     */\\n    function deposit(uint256 assets, address receiver) external returns (uint256 shares);\\n\\n    /**\\n     * @dev Returns the maximum amount of the Vault shares that can be minted for the receiver, through a mint call.\\n     * - MUST return a limited value if receiver is subject to some mint limit.\\n     * - MUST return 2 ** 256 - 1 if there is no limit on the maximum amount of shares that may be minted.\\n     * - MUST NOT revert.\\n     */\\n    function maxMint(address receiver) external view returns (uint256 maxShares);\\n\\n    /**\\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their mint at the current block, given\\n     * current on-chain conditions.\\n     *\\n     * - MUST return as close to and no fewer than the exact amount of assets that would be deposited in a mint call\\n     *   in the same transaction. I.e. mint should return the same or fewer assets as previewMint if called in the\\n     *   same transaction.\\n     * - MUST NOT account for mint limits like those returned from maxMint and should always act as though the mint\\n     *   would be accepted, regardless if the user has enough tokens approved, etc.\\n     * - MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: any unfavorable discrepancy between convertToAssets and previewMint SHOULD be considered slippage in\\n     * share price or some other type of condition, meaning the depositor will lose assets by minting.\\n     */\\n    function previewMint(uint256 shares) external view returns (uint256 assets);\\n\\n    /**\\n     * @dev Mints exactly shares Vault shares to receiver by depositing amount of underlying tokens.\\n     *\\n     * - MUST emit the Deposit event.\\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the mint\\n     *   execution, and are accounted for during mint.\\n     * - MUST revert if all of shares cannot be minted (due to deposit limit being reached, slippage, the user not\\n     *   approving enough underlying tokens to the Vault contract, etc).\\n     *\\n     * NOTE: most implementations will require pre-approval of the Vault with the Vault\u2019s underlying asset token.\\n     */\\n    function mint(uint256 shares, address receiver) external returns (uint256 assets);\\n\\n    /**\\n     * @dev Returns the maximum amount of the underlying asset that can be withdrawn from the owner balance in the\\n     * Vault, through a withdraw call.\\n     *\\n     * - MUST return a limited value if owner is subject to some withdrawal limit or timelock.\\n     * - MUST NOT revert.\\n     */\\n    function maxWithdraw(address owner) external view returns (uint256 maxAssets);\\n\\n    /**\\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their withdrawal at the current block,\\n     * given current on-chain conditions.\\n     *\\n     * - MUST return as close to and no fewer than the exact amount of Vault shares that would be burned in a withdraw\\n     *   call in the same transaction. I.e. withdraw should return the same or fewer shares as previewWithdraw if\\n     *   called\\n     *   in the same transaction.\\n     * - MUST NOT account for withdrawal limits like those returned from maxWithdraw and should always act as though\\n     *   the withdrawal would be accepted, regardless if the user has enough shares, etc.\\n     * - MUST be inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: any unfavorable discrepancy between convertToShares and previewWithdraw SHOULD be considered slippage in\\n     * share price or some other type of condition, meaning the depositor will lose assets by depositing.\\n     */\\n    function previewWithdraw(uint256 assets) external view returns (uint256 shares);\\n\\n    /**\\n     * @dev Burns shares from owner and sends exactly assets of underlying tokens to receiver.\\n     *\\n     * - MUST emit the Withdraw event.\\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\\n     *   withdraw execution, and are accounted for during withdraw.\\n     * - MUST revert if all of assets cannot be withdrawn (due to withdrawal limit being reached, slippage, the owner\\n     *   not having enough shares, etc).\\n     *\\n     * Note that some implementations will require pre-requesting to the Vault before a withdrawal may be performed.\\n     * Those methods should be performed separately.\\n     */\\n    function withdraw(uint256 assets, address receiver, address owner) external returns (uint256 shares);\\n\\n    /**\\n     * @dev Returns the maximum amount of Vault shares that can be redeemed from the owner balance in the Vault,\\n     * through a redeem call.\\n     *\\n     * - MUST return a limited value if owner is subject to some withdrawal limit or timelock.\\n     * - MUST return balanceOf(owner) if owner is not subject to any withdrawal limit or timelock.\\n     * - MUST NOT revert.\\n     */\\n    function maxRedeem(address owner) external view returns (uint256 maxShares);\\n\\n    /**\\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their redeemption at the current block,\\n     * given current on-chain conditions.\\n     *\\n     * - MUST return as close to and no more than the exact amount of assets that would be withdrawn in a redeem call\\n     *   in the same transaction. I.e. redeem should return the same or more assets as previewRedeem if called in the\\n     *   same transaction.\\n     * - MUST NOT account for redemption limits like those returned from maxRedeem and should always act as though the\\n     *   redemption would be accepted, regardless if the user has enough shares, etc.\\n     * - MUST be inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: any unfavorable discrepancy between convertToAssets and previewRedeem SHOULD be considered slippage in\\n     * share price or some other type of condition, meaning the depositor will lose assets by redeeming.\\n     */\\n    function previewRedeem(uint256 shares) external view returns (uint256 assets);\\n\\n    /**\\n     * @dev Burns exactly shares from owner and sends assets of underlying tokens to receiver.\\n     *\\n     * - MUST emit the Withdraw event.\\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\\n     *   redeem execution, and are accounted for during redeem.\\n     * - MUST revert if all of shares cannot be redeemed (due to withdrawal limit being reached, slippage, the owner\\n     *   not having enough shares, etc).\\n     *\\n     * NOTE: some implementations will require pre-requesting to the Vault before a withdrawal may be performed.\\n     * Those methods should be performed separately.\\n     */\\n    function redeem(uint256 shares, address receiver, address owner) external returns (uint256 assets);\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts/interfaces/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address from, address to, uint256 amount) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/ERC4626.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC20.sol\\\";\\nimport \\\"../utils/SafeERC20.sol\\\";\\nimport \\\"../../../interfaces/IERC4626.sol\\\";\\nimport \\\"../../../utils/math/Math.sol\\\";\\n\\n/**\\n * @dev Implementation of the ERC4626 \\\"Tokenized Vault Standard\\\" as defined in\\n * https://eips.ethereum.org/EIPS/eip-4626[EIP-4626].\\n *\\n * This extension allows the minting and burning of \\\"shares\\\" (represented using the ERC20 inheritance) in exchange for\\n * underlying \\\"assets\\\" through standardized {deposit}, {mint}, {redeem} and {burn} workflows. This contract extends\\n * the ERC20 standard. Any additional extensions included along it would affect the \\\"shares\\\" token represented by this\\n * contract and not the \\\"assets\\\" token which is an independent contract.\\n *\\n * [CAUTION]\\n * ====\\n * In empty (or nearly empty) ERC-4626 vaults, deposits are at high risk of being stolen through frontrunning\\n * with a \\\"donation\\\" to the vault that inflates the price of a share. This is variously known as a donation or inflation\\n * attack and is essentially a problem of slippage. Vault deployers can protect against this attack by making an initial\\n * deposit of a non-trivial amount of the asset, such that price manipulation becomes infeasible. Withdrawals may\\n * similarly be affected by slippage. Users can protect against this attack as well as unexpected slippage in general by\\n * verifying the amount received is as expected, using a wrapper that performs these checks such as\\n * https://github.com/fei-protocol/ERC4626#erc4626router-and-base[ERC4626Router].\\n *\\n * Since v4.9, this implementation uses virtual assets and shares to mitigate that risk. The `_decimalsOffset()`\\n * corresponds to an offset in the decimal representation between the underlying asset's decimals and the vault\\n * decimals. This offset also determines the rate of virtual shares to virtual assets in the vault, which itself\\n * determines the initial exchange rate. While not fully preventing the attack, analysis shows that the default offset\\n * (0) makes it non-profitable, as a result of the value being captured by the virtual shares (out of the attacker's\\n * donation) matching the attacker's expected gains. With a larger offset, the attack becomes orders of magnitude more\\n * expensive than it is profitable. More details about the underlying math can be found\\n * xref:erc4626.adoc#inflation-attack[here].\\n *\\n * The drawback of this approach is that the virtual shares do capture (a very small) part of the value being accrued\\n * to the vault. Also, if the vault experiences losses, the users try to exit the vault, the virtual shares and assets\\n * will cause the first user to exit to experience reduced losses in detriment to the last users that will experience\\n * bigger losses. Developers willing to revert back to the pre-v4.9 behavior just need to override the\\n * `_convertToShares` and `_convertToAssets` functions.\\n *\\n * To learn more, check out our xref:ROOT:erc4626.adoc[ERC-4626 guide].\\n * ====\\n *\\n * _Available since v4.7._\\n */\\nabstract contract ERC4626 is ERC20, IERC4626 {\\n    using Math for uint256;\\n\\n    IERC20 private immutable _asset;\\n    uint8 private immutable _underlyingDecimals;\\n\\n    /**\\n     * @dev Set the underlying asset contract. This must be an ERC20-compatible contract (ERC20 or ERC777).\\n     */\\n    constructor(IERC20 asset_) {\\n        (bool success, uint8 assetDecimals) = _tryGetAssetDecimals(asset_);\\n        _underlyingDecimals = success ? assetDecimals : 18;\\n        _asset = asset_;\\n    }\\n\\n    /**\\n     * @dev Attempts to fetch the asset decimals. A return value of false indicates that the attempt failed in some way.\\n     */\\n    function _tryGetAssetDecimals(IERC20 asset_) private view returns (bool, uint8) {\\n        (bool success, bytes memory encodedDecimals) = address(asset_).staticcall(\\n            abi.encodeWithSelector(IERC20Metadata.decimals.selector)\\n        );\\n        if (success && encodedDecimals.length >= 32) {\\n            uint256 returnedDecimals = abi.decode(encodedDecimals, (uint256));\\n            if (returnedDecimals <= type(uint8).max) {\\n                return (true, uint8(returnedDecimals));\\n            }\\n        }\\n        return (false, 0);\\n    }\\n\\n    /**\\n     * @dev Decimals are computed by adding the decimal offset on top of the underlying asset's decimals. This\\n     * \\\"original\\\" value is cached during construction of the vault contract. If this read operation fails (e.g., the\\n     * asset has not been created yet), a default of 18 is used to represent the underlying asset's decimals.\\n     *\\n     * See {IERC20Metadata-decimals}.\\n     */\\n    function decimals() public view virtual override(IERC20Metadata, ERC20) returns (uint8) {\\n        return _underlyingDecimals + _decimalsOffset();\\n    }\\n\\n    /** @dev See {IERC4626-asset}. */\\n    function asset() public view virtual override returns (address) {\\n        return address(_asset);\\n    }\\n\\n    /** @dev See {IERC4626-totalAssets}. */\\n    function totalAssets() public view virtual override returns (uint256) {\\n        return _asset.balanceOf(address(this));\\n    }\\n\\n    /** @dev See {IERC4626-convertToShares}. */\\n    function convertToShares(uint256 assets) public view virtual override returns (uint256) {\\n        return _convertToShares(assets, Math.Rounding.Down);\\n    }\\n\\n    /** @dev See {IERC4626-convertToAssets}. */\\n    function convertToAssets(uint256 shares) public view virtual override returns (uint256) {\\n        return _convertToAssets(shares, Math.Rounding.Down);\\n    }\\n\\n    /** @dev See {IERC4626-maxDeposit}. */\\n    function maxDeposit(address) public view virtual override returns (uint256) {\\n        return type(uint256).max;\\n    }\\n\\n    /** @dev See {IERC4626-maxMint}. */\\n    function maxMint(address) public view virtual override returns (uint256) {\\n        return type(uint256).max;\\n    }\\n\\n    /** @dev See {IERC4626-maxWithdraw}. */\\n    function maxWithdraw(address owner) public view virtual override returns (uint256) {\\n        return _convertToAssets(balanceOf(owner), Math.Rounding.Down);\\n    }\\n\\n    /** @dev See {IERC4626-maxRedeem}. */\\n    function maxRedeem(address owner) public view virtual override returns (uint256) {\\n        return balanceOf(owner);\\n    }\\n\\n    /** @dev See {IERC4626-previewDeposit}. */\\n    function previewDeposit(uint256 assets) public view virtual override returns (uint256) {\\n        return _convertToShares(assets, Math.Rounding.Down);\\n    }\\n\\n    /** @dev See {IERC4626-previewMint}. */\\n    function previewMint(uint256 shares) public view virtual override returns (uint256) {\\n        return _convertToAssets(shares, Math.Rounding.Up);\\n    }\\n\\n    /** @dev See {IERC4626-previewWithdraw}. */\\n    function previewWithdraw(uint256 assets) public view virtual override returns (uint256) {\\n        return _convertToShares(assets, Math.Rounding.Up);\\n    }\\n\\n    /** @dev See {IERC4626-previewRedeem}. */\\n    function previewRedeem(uint256 shares) public view virtual override returns (uint256) {\\n        return _convertToAssets(shares, Math.Rounding.Down);\\n    }\\n\\n    /** @dev See {IERC4626-deposit}. */\\n    function deposit(uint256 assets, address receiver) public virtual override returns (uint256) {\\n        require(assets <= maxDeposit(receiver), \\\"ERC4626: deposit more than max\\\");\\n\\n        uint256 shares = previewDeposit(assets);\\n        _deposit(_msgSender(), receiver, assets, shares);\\n\\n        return shares;\\n    }\\n\\n    /** @dev See {IERC4626-mint}.\\n     *\\n     * As opposed to {deposit}, minting is allowed even if the vault is in a state where the price of a share is zero.\\n     * In this case, the shares will be minted without requiring any assets to be deposited.\\n     */\\n    function mint(uint256 shares, address receiver) public virtual override returns (uint256) {\\n        require(shares <= maxMint(receiver), \\\"ERC4626: mint more than max\\\");\\n\\n        uint256 assets = previewMint(shares);\\n        _deposit(_msgSender(), receiver, assets, shares);\\n\\n        return assets;\\n    }\\n\\n    /** @dev See {IERC4626-withdraw}. */\\n    function withdraw(uint256 assets, address receiver, address owner) public virtual override returns (uint256) {\\n        require(assets <= maxWithdraw(owner), \\\"ERC4626: withdraw more than max\\\");\\n\\n        uint256 shares = previewWithdraw(assets);\\n        _withdraw(_msgSender(), receiver, owner, assets, shares);\\n\\n        return shares;\\n    }\\n\\n    /** @dev See {IERC4626-redeem}. */\\n    function redeem(uint256 shares, address receiver, address owner) public virtual override returns (uint256) {\\n        require(shares <= maxRedeem(owner), \\\"ERC4626: redeem more than max\\\");\\n\\n        uint256 assets = previewRedeem(shares);\\n        _withdraw(_msgSender(), receiver, owner, assets, shares);\\n\\n        return assets;\\n    }\\n\\n    /**\\n     * @dev Internal conversion function (from assets to shares) with support for rounding direction.\\n     */\\n    function _convertToShares(uint256 assets, Math.Rounding rounding) internal view virtual returns (uint256) {\\n        return assets.mulDiv(totalSupply() + 10 ** _decimalsOffset(), totalAssets() + 1, rounding);\\n    }\\n\\n    /**\\n     * @dev Internal conversion function (from shares to assets) with support for rounding direction.\\n     */\\n    function _convertToAssets(uint256 shares, Math.Rounding rounding) internal view virtual returns (uint256) {\\n        return shares.mulDiv(totalAssets() + 1, totalSupply() + 10 ** _decimalsOffset(), rounding);\\n    }\\n\\n    /**\\n     * @dev Deposit/mint common workflow.\\n     */\\n    function _deposit(address caller, address receiver, uint256 assets, uint256 shares) internal virtual {\\n        // If _asset is ERC777, `transferFrom` can trigger a reentrancy BEFORE the transfer happens through the\\n        // `tokensToSend` hook. On the other hand, the `tokenReceived` hook, that is triggered after the transfer,\\n        // calls the vault, which is assumed not malicious.\\n        //\\n        // Conclusion: we need to do the transfer before we mint so that any reentrancy would happen before the\\n        // assets are transferred and before the shares are minted, which is a valid state.\\n        // slither-disable-next-line reentrancy-no-eth\\n        SafeERC20.safeTransferFrom(_asset, caller, address(this), assets);\\n        _mint(receiver, shares);\\n\\n        emit Deposit(caller, receiver, assets, shares);\\n    }\\n\\n    /**\\n     * @dev Withdraw/redeem common workflow.\\n     */\\n    function _withdraw(\\n        address caller,\\n        address receiver,\\n        address owner,\\n        uint256 assets,\\n        uint256 shares\\n    ) internal virtual {\\n        if (caller != owner) {\\n            _spendAllowance(owner, caller, shares);\\n        }\\n\\n        // If _asset is ERC777, `transfer` can trigger a reentrancy AFTER the transfer happens through the\\n        // `tokensReceived` hook. On the other hand, the `tokensToSend` hook, that is triggered before the transfer,\\n        // calls the vault, which is assumed not malicious.\\n        //\\n        // Conclusion: we need to do the transfer after the burn so that any reentrancy would happen after the\\n        // shares are burned and after the assets are transferred, which is a valid state.\\n        _burn(owner, shares);\\n        SafeERC20.safeTransfer(_asset, receiver, assets);\\n\\n        emit Withdraw(caller, receiver, owner, assets, shares);\\n    }\\n\\n    function _decimalsOffset() internal view virtual returns (uint8) {\\n        return 0;\\n    }\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/ERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20Permit.sol\\\";\\nimport \\\"../ERC20.sol\\\";\\nimport \\\"../../../utils/cryptography/ECDSA.sol\\\";\\nimport \\\"../../../utils/cryptography/EIP712.sol\\\";\\nimport \\\"../../../utils/Counters.sol\\\";\\n\\n/**\\n * @dev Implementation of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on `{IERC20-approve}`, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * _Available since v3.4._\\n */\\nabstract contract ERC20Permit is ERC20, IERC20Permit, EIP712 {\\n    using Counters for Counters.Counter;\\n\\n    mapping(address => Counters.Counter) private _nonces;\\n\\n    // solhint-disable-next-line var-name-mixedcase\\n    bytes32 private constant _PERMIT_TYPEHASH =\\n        keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\");\\n    /**\\n     * @dev In previous versions `_PERMIT_TYPEHASH` was declared as `immutable`.\\n     * However, to ensure consistency with the upgradeable transpiler, we will continue\\n     * to reserve a slot.\\n     * @custom:oz-renamed-from _PERMIT_TYPEHASH\\n     */\\n    // solhint-disable-next-line var-name-mixedcase\\n    bytes32 private _PERMIT_TYPEHASH_DEPRECATED_SLOT;\\n\\n    /**\\n     * @dev Initializes the {EIP712} domain separator using the `name` parameter, and setting `version` to `\\\"1\\\"`.\\n     *\\n     * It's a good idea to use the same `name` that is defined as the ERC20 token name.\\n     */\\n    constructor(string memory name) EIP712(name, \\\"1\\\") {}\\n\\n    /**\\n     * @dev See {IERC20Permit-permit}.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public virtual override {\\n        require(block.timestamp <= deadline, \\\"ERC20Permit: expired deadline\\\");\\n\\n        bytes32 structHash = keccak256(abi.encode(_PERMIT_TYPEHASH, owner, spender, value, _useNonce(owner), deadline));\\n\\n        bytes32 hash = _hashTypedDataV4(structHash);\\n\\n        address signer = ECDSA.recover(hash, v, r, s);\\n        require(signer == owner, \\\"ERC20Permit: invalid signature\\\");\\n\\n        _approve(owner, spender, value);\\n    }\\n\\n    /**\\n     * @dev See {IERC20Permit-nonces}.\\n     */\\n    function nonces(address owner) public view virtual override returns (uint256) {\\n        return _nonces[owner].current();\\n    }\\n\\n    /**\\n     * @dev See {IERC20Permit-DOMAIN_SEPARATOR}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view override returns (bytes32) {\\n        return _domainSeparatorV4();\\n    }\\n\\n    /**\\n     * @dev \\\"Consume a nonce\\\": return the current value and increment.\\n     *\\n     * _Available since v4.1._\\n     */\\n    function _useNonce(address owner) internal virtual returns (uint256 current) {\\n        Counters.Counter storage nonce = _nonces[owner];\\n        current = nonce.current();\\n        nonce.increment();\\n    }\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts/utils/math/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts/utils/math/SafeCast.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SafeCast.sol)\\n// This file was procedurally generated from scripts/generate/templates/SafeCast.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Returns the downcasted uint248 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint248).\\n     *\\n     * Counterpart to Solidity's `uint248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint248(uint256 value) internal pure returns (uint248) {\\n        require(value <= type(uint248).max, \\\"SafeCast: value doesn't fit in 248 bits\\\");\\n        return uint248(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint240 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint240).\\n     *\\n     * Counterpart to Solidity's `uint240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint240(uint256 value) internal pure returns (uint240) {\\n        require(value <= type(uint240).max, \\\"SafeCast: value doesn't fit in 240 bits\\\");\\n        return uint240(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint232 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint232).\\n     *\\n     * Counterpart to Solidity's `uint232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint232(uint256 value) internal pure returns (uint232) {\\n        require(value <= type(uint232).max, \\\"SafeCast: value doesn't fit in 232 bits\\\");\\n        return uint232(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     *\\n     * _Available since v4.2._\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        require(value <= type(uint224).max, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint216 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint216).\\n     *\\n     * Counterpart to Solidity's `uint216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint216(uint256 value) internal pure returns (uint216) {\\n        require(value <= type(uint216).max, \\\"SafeCast: value doesn't fit in 216 bits\\\");\\n        return uint216(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint208 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint208).\\n     *\\n     * Counterpart to Solidity's `uint208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint208(uint256 value) internal pure returns (uint208) {\\n        require(value <= type(uint208).max, \\\"SafeCast: value doesn't fit in 208 bits\\\");\\n        return uint208(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint200 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint200).\\n     *\\n     * Counterpart to Solidity's `uint200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint200(uint256 value) internal pure returns (uint200) {\\n        require(value <= type(uint200).max, \\\"SafeCast: value doesn't fit in 200 bits\\\");\\n        return uint200(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint192 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint192).\\n     *\\n     * Counterpart to Solidity's `uint192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint192(uint256 value) internal pure returns (uint192) {\\n        require(value <= type(uint192).max, \\\"SafeCast: value doesn't fit in 192 bits\\\");\\n        return uint192(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint184 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint184).\\n     *\\n     * Counterpart to Solidity's `uint184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint184(uint256 value) internal pure returns (uint184) {\\n        require(value <= type(uint184).max, \\\"SafeCast: value doesn't fit in 184 bits\\\");\\n        return uint184(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint176 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint176).\\n     *\\n     * Counterpart to Solidity's `uint176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint176(uint256 value) internal pure returns (uint176) {\\n        require(value <= type(uint176).max, \\\"SafeCast: value doesn't fit in 176 bits\\\");\\n        return uint176(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint168 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint168).\\n     *\\n     * Counterpart to Solidity's `uint168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint168(uint256 value) internal pure returns (uint168) {\\n        require(value <= type(uint168).max, \\\"SafeCast: value doesn't fit in 168 bits\\\");\\n        return uint168(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint160 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint160).\\n     *\\n     * Counterpart to Solidity's `uint160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint160(uint256 value) internal pure returns (uint160) {\\n        require(value <= type(uint160).max, \\\"SafeCast: value doesn't fit in 160 bits\\\");\\n        return uint160(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint152 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint152).\\n     *\\n     * Counterpart to Solidity's `uint152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint152(uint256 value) internal pure returns (uint152) {\\n        require(value <= type(uint152).max, \\\"SafeCast: value doesn't fit in 152 bits\\\");\\n        return uint152(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint144 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint144).\\n     *\\n     * Counterpart to Solidity's `uint144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint144(uint256 value) internal pure returns (uint144) {\\n        require(value <= type(uint144).max, \\\"SafeCast: value doesn't fit in 144 bits\\\");\\n        return uint144(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint136 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint136).\\n     *\\n     * Counterpart to Solidity's `uint136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint136(uint256 value) internal pure returns (uint136) {\\n        require(value <= type(uint136).max, \\\"SafeCast: value doesn't fit in 136 bits\\\");\\n        return uint136(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        require(value <= type(uint128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint120 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint120).\\n     *\\n     * Counterpart to Solidity's `uint120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint120(uint256 value) internal pure returns (uint120) {\\n        require(value <= type(uint120).max, \\\"SafeCast: value doesn't fit in 120 bits\\\");\\n        return uint120(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint112 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint112).\\n     *\\n     * Counterpart to Solidity's `uint112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint112(uint256 value) internal pure returns (uint112) {\\n        require(value <= type(uint112).max, \\\"SafeCast: value doesn't fit in 112 bits\\\");\\n        return uint112(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint104 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint104).\\n     *\\n     * Counterpart to Solidity's `uint104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint104(uint256 value) internal pure returns (uint104) {\\n        require(value <= type(uint104).max, \\\"SafeCast: value doesn't fit in 104 bits\\\");\\n        return uint104(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     *\\n     * _Available since v4.2._\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        require(value <= type(uint96).max, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint88 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint88).\\n     *\\n     * Counterpart to Solidity's `uint88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint88(uint256 value) internal pure returns (uint88) {\\n        require(value <= type(uint88).max, \\\"SafeCast: value doesn't fit in 88 bits\\\");\\n        return uint88(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint80 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint80).\\n     *\\n     * Counterpart to Solidity's `uint80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint80(uint256 value) internal pure returns (uint80) {\\n        require(value <= type(uint80).max, \\\"SafeCast: value doesn't fit in 80 bits\\\");\\n        return uint80(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint72 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint72).\\n     *\\n     * Counterpart to Solidity's `uint72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint72(uint256 value) internal pure returns (uint72) {\\n        require(value <= type(uint72).max, \\\"SafeCast: value doesn't fit in 72 bits\\\");\\n        return uint72(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(value <= type(uint64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint56 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint56).\\n     *\\n     * Counterpart to Solidity's `uint56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint56(uint256 value) internal pure returns (uint56) {\\n        require(value <= type(uint56).max, \\\"SafeCast: value doesn't fit in 56 bits\\\");\\n        return uint56(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint48 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint48).\\n     *\\n     * Counterpart to Solidity's `uint48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint48(uint256 value) internal pure returns (uint48) {\\n        require(value <= type(uint48).max, \\\"SafeCast: value doesn't fit in 48 bits\\\");\\n        return uint48(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint40 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint40).\\n     *\\n     * Counterpart to Solidity's `uint40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint40(uint256 value) internal pure returns (uint40) {\\n        require(value <= type(uint40).max, \\\"SafeCast: value doesn't fit in 40 bits\\\");\\n        return uint40(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        require(value <= type(uint32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint24 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint24).\\n     *\\n     * Counterpart to Solidity's `uint24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint24(uint256 value) internal pure returns (uint24) {\\n        require(value <= type(uint24).max, \\\"SafeCast: value doesn't fit in 24 bits\\\");\\n        return uint24(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        require(value <= type(uint16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        require(value <= type(uint8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     *\\n     * _Available since v3.0._\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int248 from int256, reverting on\\n     * overflow (when the input is less than smallest int248 or\\n     * greater than largest int248).\\n     *\\n     * Counterpart to Solidity's `int248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt248(int256 value) internal pure returns (int248 downcasted) {\\n        downcasted = int248(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 248 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int240 from int256, reverting on\\n     * overflow (when the input is less than smallest int240 or\\n     * greater than largest int240).\\n     *\\n     * Counterpart to Solidity's `int240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt240(int256 value) internal pure returns (int240 downcasted) {\\n        downcasted = int240(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 240 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int232 from int256, reverting on\\n     * overflow (when the input is less than smallest int232 or\\n     * greater than largest int232).\\n     *\\n     * Counterpart to Solidity's `int232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt232(int256 value) internal pure returns (int232 downcasted) {\\n        downcasted = int232(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 232 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int224 from int256, reverting on\\n     * overflow (when the input is less than smallest int224 or\\n     * greater than largest int224).\\n     *\\n     * Counterpart to Solidity's `int224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt224(int256 value) internal pure returns (int224 downcasted) {\\n        downcasted = int224(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int216 from int256, reverting on\\n     * overflow (when the input is less than smallest int216 or\\n     * greater than largest int216).\\n     *\\n     * Counterpart to Solidity's `int216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt216(int256 value) internal pure returns (int216 downcasted) {\\n        downcasted = int216(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 216 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int208 from int256, reverting on\\n     * overflow (when the input is less than smallest int208 or\\n     * greater than largest int208).\\n     *\\n     * Counterpart to Solidity's `int208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt208(int256 value) internal pure returns (int208 downcasted) {\\n        downcasted = int208(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 208 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int200 from int256, reverting on\\n     * overflow (when the input is less than smallest int200 or\\n     * greater than largest int200).\\n     *\\n     * Counterpart to Solidity's `int200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt200(int256 value) internal pure returns (int200 downcasted) {\\n        downcasted = int200(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 200 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int192 from int256, reverting on\\n     * overflow (when the input is less than smallest int192 or\\n     * greater than largest int192).\\n     *\\n     * Counterpart to Solidity's `int192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt192(int256 value) internal pure returns (int192 downcasted) {\\n        downcasted = int192(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 192 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int184 from int256, reverting on\\n     * overflow (when the input is less than smallest int184 or\\n     * greater than largest int184).\\n     *\\n     * Counterpart to Solidity's `int184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt184(int256 value) internal pure returns (int184 downcasted) {\\n        downcasted = int184(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 184 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int176 from int256, reverting on\\n     * overflow (when the input is less than smallest int176 or\\n     * greater than largest int176).\\n     *\\n     * Counterpart to Solidity's `int176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt176(int256 value) internal pure returns (int176 downcasted) {\\n        downcasted = int176(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 176 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int168 from int256, reverting on\\n     * overflow (when the input is less than smallest int168 or\\n     * greater than largest int168).\\n     *\\n     * Counterpart to Solidity's `int168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt168(int256 value) internal pure returns (int168 downcasted) {\\n        downcasted = int168(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 168 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int160 from int256, reverting on\\n     * overflow (when the input is less than smallest int160 or\\n     * greater than largest int160).\\n     *\\n     * Counterpart to Solidity's `int160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt160(int256 value) internal pure returns (int160 downcasted) {\\n        downcasted = int160(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 160 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int152 from int256, reverting on\\n     * overflow (when the input is less than smallest int152 or\\n     * greater than largest int152).\\n     *\\n     * Counterpart to Solidity's `int152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt152(int256 value) internal pure returns (int152 downcasted) {\\n        downcasted = int152(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 152 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int144 from int256, reverting on\\n     * overflow (when the input is less than smallest int144 or\\n     * greater than largest int144).\\n     *\\n     * Counterpart to Solidity's `int144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt144(int256 value) internal pure returns (int144 downcasted) {\\n        downcasted = int144(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 144 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int136 from int256, reverting on\\n     * overflow (when the input is less than smallest int136 or\\n     * greater than largest int136).\\n     *\\n     * Counterpart to Solidity's `int136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt136(int256 value) internal pure returns (int136 downcasted) {\\n        downcasted = int136(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 136 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt128(int256 value) internal pure returns (int128 downcasted) {\\n        downcasted = int128(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int120 from int256, reverting on\\n     * overflow (when the input is less than smallest int120 or\\n     * greater than largest int120).\\n     *\\n     * Counterpart to Solidity's `int120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt120(int256 value) internal pure returns (int120 downcasted) {\\n        downcasted = int120(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 120 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int112 from int256, reverting on\\n     * overflow (when the input is less than smallest int112 or\\n     * greater than largest int112).\\n     *\\n     * Counterpart to Solidity's `int112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt112(int256 value) internal pure returns (int112 downcasted) {\\n        downcasted = int112(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 112 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int104 from int256, reverting on\\n     * overflow (when the input is less than smallest int104 or\\n     * greater than largest int104).\\n     *\\n     * Counterpart to Solidity's `int104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt104(int256 value) internal pure returns (int104 downcasted) {\\n        downcasted = int104(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 104 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int96 from int256, reverting on\\n     * overflow (when the input is less than smallest int96 or\\n     * greater than largest int96).\\n     *\\n     * Counterpart to Solidity's `int96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt96(int256 value) internal pure returns (int96 downcasted) {\\n        downcasted = int96(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int88 from int256, reverting on\\n     * overflow (when the input is less than smallest int88 or\\n     * greater than largest int88).\\n     *\\n     * Counterpart to Solidity's `int88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt88(int256 value) internal pure returns (int88 downcasted) {\\n        downcasted = int88(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 88 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int80 from int256, reverting on\\n     * overflow (when the input is less than smallest int80 or\\n     * greater than largest int80).\\n     *\\n     * Counterpart to Solidity's `int80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt80(int256 value) internal pure returns (int80 downcasted) {\\n        downcasted = int80(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 80 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int72 from int256, reverting on\\n     * overflow (when the input is less than smallest int72 or\\n     * greater than largest int72).\\n     *\\n     * Counterpart to Solidity's `int72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt72(int256 value) internal pure returns (int72 downcasted) {\\n        downcasted = int72(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 72 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt64(int256 value) internal pure returns (int64 downcasted) {\\n        downcasted = int64(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int56 from int256, reverting on\\n     * overflow (when the input is less than smallest int56 or\\n     * greater than largest int56).\\n     *\\n     * Counterpart to Solidity's `int56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt56(int256 value) internal pure returns (int56 downcasted) {\\n        downcasted = int56(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 56 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int48 from int256, reverting on\\n     * overflow (when the input is less than smallest int48 or\\n     * greater than largest int48).\\n     *\\n     * Counterpart to Solidity's `int48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt48(int256 value) internal pure returns (int48 downcasted) {\\n        downcasted = int48(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 48 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int40 from int256, reverting on\\n     * overflow (when the input is less than smallest int40 or\\n     * greater than largest int40).\\n     *\\n     * Counterpart to Solidity's `int40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt40(int256 value) internal pure returns (int40 downcasted) {\\n        downcasted = int40(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 40 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt32(int256 value) internal pure returns (int32 downcasted) {\\n        downcasted = int32(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int24 from int256, reverting on\\n     * overflow (when the input is less than smallest int24 or\\n     * greater than largest int24).\\n     *\\n     * Counterpart to Solidity's `int24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt24(int256 value) internal pure returns (int24 downcasted) {\\n        downcasted = int24(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 24 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt16(int256 value) internal pure returns (int16 downcasted) {\\n        downcasted = int16(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt8(int256 value) internal pure returns (int8 downcasted) {\\n        downcasted = int8(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     *\\n     * _Available since v3.0._\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        require(value <= uint256(type(int256).max), \\\"SafeCast: value doesn't fit in an int256\\\");\\n        return int256(value);\\n    }\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts/utils/structs/EnumerableSet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\"\r\n    },\r\n    \"node_modules/@gearbox-protocol/core-v3/contracts/interfaces/IAddressProviderV3.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// Gearbox Protocol. Generalized leverage for DeFi protocols\\n// (c) Gearbox Foundation, 2023.\\npragma solidity ^0.8.17;\\n\\nimport {IVersion} from \\\"@gearbox-protocol/core-v2/contracts/interfaces/IVersion.sol\\\";\\n\\nuint256 constant NO_VERSION_CONTROL = 0;\\n\\nbytes32 constant AP_CONTRACTS_REGISTER = \\\"CONTRACTS_REGISTER\\\";\\nbytes32 constant AP_ACL = \\\"ACL\\\";\\nbytes32 constant AP_PRICE_ORACLE = \\\"PRICE_ORACLE\\\";\\nbytes32 constant AP_ACCOUNT_FACTORY = \\\"ACCOUNT_FACTORY\\\";\\nbytes32 constant AP_DATA_COMPRESSOR = \\\"DATA_COMPRESSOR\\\";\\nbytes32 constant AP_TREASURY = \\\"TREASURY\\\";\\nbytes32 constant AP_GEAR_TOKEN = \\\"GEAR_TOKEN\\\";\\nbytes32 constant AP_WETH_TOKEN = \\\"WETH_TOKEN\\\";\\nbytes32 constant AP_WETH_GATEWAY = \\\"WETH_GATEWAY\\\";\\nbytes32 constant AP_ROUTER = \\\"ROUTER\\\";\\nbytes32 constant AP_BOT_LIST = \\\"BOT_LIST\\\";\\nbytes32 constant AP_GEAR_STAKING = \\\"GEAR_STAKING\\\";\\nbytes32 constant AP_ZAPPER_REGISTER = \\\"ZAPPER_REGISTER\\\";\\n\\ninterface IAddressProviderV3Events {\\n    /// @notice Emitted when an address is set for a contract key\\n    event SetAddress(bytes32 indexed key, address indexed value, uint256 indexed version);\\n}\\n\\n/// @title Address provider V3 interface\\ninterface IAddressProviderV3 is IAddressProviderV3Events, IVersion {\\n    function addresses(bytes32 key, uint256 _version) external view returns (address);\\n\\n    function getAddressOrRevert(bytes32 key, uint256 _version) external view returns (address result);\\n\\n    function setAddress(bytes32 key, address value, bool saveVersion) external;\\n}\\n\"\r\n    },\r\n    \"node_modules/@gearbox-protocol/core-v3/contracts/interfaces/ICreditManagerV3.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// Gearbox Protocol. Generalized leverage for DeFi protocols\\n// (c) Gearbox Foundation, 2023.\\npragma solidity ^0.8.17;\\n\\nimport {IVersion} from \\\"@gearbox-protocol/core-v2/contracts/interfaces/IVersion.sol\\\";\\n\\nuint8 constant BOT_PERMISSIONS_SET_FLAG = 1;\\n\\nuint8 constant DEFAULT_MAX_ENABLED_TOKENS = 4;\\naddress constant INACTIVE_CREDIT_ACCOUNT_ADDRESS = address(1);\\n\\n/// @notice Debt management type\\n///         - `INCREASE_DEBT` borrows additional funds from the pool, updates account's debt and cumulative interest index\\n///         - `DECREASE_DEBT` repays debt components (quota interest and fees -> base interest and fees -> debt principal)\\n///           and updates all corresponding state varibles (base interest index, quota interest and fees, debt).\\n///           When repaying all the debt, ensures that account has no enabled quotas.\\nenum ManageDebtAction {\\n    INCREASE_DEBT,\\n    DECREASE_DEBT\\n}\\n\\n/// @notice Collateral/debt calculation mode\\n///         - `GENERIC_PARAMS` returns generic data like account debt and cumulative indexes\\n///         - `DEBT_ONLY` is same as `GENERIC_PARAMS` but includes more detailed debt info, like accrued base/quota\\n///           interest and fees\\n///         - `FULL_COLLATERAL_CHECK_LAZY` checks whether account is sufficiently collateralized in a lazy fashion,\\n///           i.e. it stops iterating over collateral tokens once TWV reaches the desired target.\\n///           Since it may return underestimated TWV, it's only available for internal use.\\n///         - `DEBT_COLLATERAL` is same as `DEBT_ONLY` but also returns total value and total LT-weighted value of\\n///           account's tokens, this mode is used during account liquidation\\n///         - `DEBT_COLLATERAL_SAFE_PRICES` is same as `DEBT_COLLATERAL` but uses safe prices from price oracle\\nenum CollateralCalcTask {\\n    GENERIC_PARAMS,\\n    DEBT_ONLY,\\n    FULL_COLLATERAL_CHECK_LAZY,\\n    DEBT_COLLATERAL,\\n    DEBT_COLLATERAL_SAFE_PRICES\\n}\\n\\nstruct CreditAccountInfo {\\n    uint256 debt;\\n    uint256 cumulativeIndexLastUpdate;\\n    uint128 cumulativeQuotaInterest;\\n    uint128 quotaFees;\\n    uint256 enabledTokensMask;\\n    uint16 flags;\\n    uint64 lastDebtUpdate;\\n    address borrower;\\n}\\n\\nstruct CollateralDebtData {\\n    uint256 debt;\\n    uint256 cumulativeIndexNow;\\n    uint256 cumulativeIndexLastUpdate;\\n    uint128 cumulativeQuotaInterest;\\n    uint256 accruedInterest;\\n    uint256 accruedFees;\\n    uint256 totalDebtUSD;\\n    uint256 totalValue;\\n    uint256 totalValueUSD;\\n    uint256 twvUSD;\\n    uint256 enabledTokensMask;\\n    uint256 quotedTokensMask;\\n    address[] quotedTokens;\\n    address _poolQuotaKeeper;\\n}\\n\\nstruct CollateralTokenData {\\n    address token;\\n    uint16 ltInitial;\\n    uint16 ltFinal;\\n    uint40 timestampRampStart;\\n    uint24 rampDuration;\\n}\\n\\nstruct RevocationPair {\\n    address spender;\\n    address token;\\n}\\n\\ninterface ICreditManagerV3Events {\\n    /// @notice Emitted when new credit configurator is set\\n    event SetCreditConfigurator(address indexed newConfigurator);\\n}\\n\\n/// @title Credit manager V3 interface\\ninterface ICreditManagerV3 is IVersion, ICreditManagerV3Events {\\n    function pool() external view returns (address);\\n\\n    function underlying() external view returns (address);\\n\\n    function creditFacade() external view returns (address);\\n\\n    function creditConfigurator() external view returns (address);\\n\\n    function addressProvider() external view returns (address);\\n\\n    function accountFactory() external view returns (address);\\n\\n    function name() external view returns (string memory);\\n\\n    // ------------------ //\\n    // ACCOUNT MANAGEMENT //\\n    // ------------------ //\\n\\n    function openCreditAccount(address onBehalfOf) external returns (address);\\n\\n    function closeCreditAccount(address creditAccount) external;\\n\\n    function liquidateCreditAccount(\\n        address creditAccount,\\n        CollateralDebtData calldata collateralDebtData,\\n        address to,\\n        bool isExpired\\n    ) external returns (uint256 remainingFunds, uint256 loss);\\n\\n    function manageDebt(address creditAccount, uint256 amount, uint256 enabledTokensMask, ManageDebtAction action)\\n        external\\n        returns (uint256 newDebt, uint256 tokensToEnable, uint256 tokensToDisable);\\n\\n    function addCollateral(address payer, address creditAccount, address token, uint256 amount)\\n        external\\n        returns (uint256 tokensToEnable);\\n\\n    function withdrawCollateral(address creditAccount, address token, uint256 amount, address to)\\n        external\\n        returns (uint256 tokensToDisable);\\n\\n    function externalCall(address creditAccount, address target, bytes calldata callData)\\n        external\\n        returns (bytes memory result);\\n\\n    function approveToken(address creditAccount, address token, address spender, uint256 amount) external;\\n\\n    function revokeAdapterAllowances(address creditAccount, RevocationPair[] calldata revocations) external;\\n\\n    // -------- //\\n    // ADAPTERS //\\n    // -------- //\\n\\n    function adapterToContract(address adapter) external view returns (address targetContract);\\n\\n    function contractToAdapter(address targetContract) external view returns (address adapter);\\n\\n    function execute(bytes calldata data) external returns (bytes memory result);\\n\\n    function approveCreditAccount(address token, uint256 amount) external;\\n\\n    function setActiveCreditAccount(address creditAccount) external;\\n\\n    function getActiveCreditAccountOrRevert() external view returns (address creditAccount);\\n\\n    // ----------------- //\\n    // COLLATERAL CHECKS //\\n    // ----------------- //\\n\\n    function priceOracle() external view returns (address);\\n\\n    function fullCollateralCheck(\\n        address creditAccount,\\n        uint256 enabledTokensMask,\\n        uint256[] calldata collateralHints,\\n        uint16 minHealthFactor,\\n        bool useSafePrices\\n    ) external returns (uint256 enabledTokensMaskAfter);\\n\\n    function isLiquidatable(address creditAccount, uint16 minHealthFactor) external view returns (bool);\\n\\n    function calcDebtAndCollateral(address creditAccount, CollateralCalcTask task)\\n        external\\n        view\\n        returns (CollateralDebtData memory cdd);\\n\\n    // ------ //\\n    // QUOTAS //\\n    // ------ //\\n\\n    function poolQuotaKeeper() external view returns (address);\\n\\n    function quotedTokensMask() external view returns (uint256);\\n\\n    function updateQuota(address creditAccount, address token, int96 quotaChange, uint96 minQuota, uint96 maxQuota)\\n        external\\n        returns (uint256 tokensToEnable, uint256 tokensToDisable);\\n\\n    // --------------------- //\\n    // CREDIT MANAGER PARAMS //\\n    // --------------------- //\\n\\n    function maxEnabledTokens() external view returns (uint8);\\n\\n    function fees()\\n        external\\n        view\\n        returns (\\n            uint16 feeInterest,\\n            uint16 feeLiquidation,\\n            uint16 liquidationDiscount,\\n            uint16 feeLiquidationExpired,\\n            uint16 liquidationDiscountExpired\\n        );\\n\\n    function collateralTokensCount() external view returns (uint8);\\n\\n    function getTokenMaskOrRevert(address token) external view returns (uint256 tokenMask);\\n\\n    function getTokenByMask(uint256 tokenMask) external view returns (address token);\\n\\n    function liquidationThresholds(address token) external view returns (uint16 lt);\\n\\n    function ltParams(address token)\\n        external\\n        view\\n        returns (uint16 ltInitial, uint16 ltFinal, uint40 timestampRampStart, uint24 rampDuration);\\n\\n    function collateralTokenByMask(uint256 tokenMask)\\n        external\\n        view\\n        returns (address token, uint16 liquidationThreshold);\\n\\n    // ------------ //\\n    // ACCOUNT INFO //\\n    // ------------ //\\n\\n    function creditAccountInfo(address creditAccount)\\n        external\\n        view\\n        returns (\\n            uint256 debt,\\n            uint256 cumulativeIndexLastUpdate,\\n            uint128 cumulativeQuotaInterest,\\n            uint128 quotaFees,\\n            uint256 enabledTokensMask,\\n            uint16 flags,\\n            uint64 lastDebtUpdate,\\n            address borrower\\n        );\\n\\n    function getBorrowerOrRevert(address creditAccount) external view returns (address borrower);\\n\\n    function flagsOf(address creditAccount) external view returns (uint16);\\n\\n    function setFlagFor(address creditAccount, uint16 flag, bool value) external;\\n\\n    function enabledTokensMaskOf(address creditAccount) external view returns (uint256);\\n\\n    function creditAccounts() external view returns (address[] memory);\\n\\n    function creditAccounts(uint256 offset, uint256 limit) external view returns (address[] memory);\\n\\n    function creditAccountsLen() external view returns (uint256);\\n\\n    // ------------- //\\n    // CONFIGURATION //\\n    // ------------- //\\n\\n    function addToken(address token) external;\\n\\n    function setCollateralTokenData(\\n        address token,\\n        uint16 ltInitial,\\n        uint16 ltFinal,\\n        uint40 timestampRampStart,\\n        uint24 rampDuration\\n    ) external;\\n\\n    function setFees(\\n        uint16 feeInterest,\\n        uint16 feeLiquidation,\\n        uint16 liquidationDiscount,\\n        uint16 feeLiquidationExpired,\\n        uint16 liquidationDiscountExpired\\n    ) external;\\n\\n    function setQuotedMask(uint256 quotedTokensMask) external;\\n\\n    function setMaxEnabledTokens(uint8 maxEnabledTokens) external;\\n\\n    function setContractAllowance(address adapter, address targetContract) external;\\n\\n    function setCreditFacade(address creditFacade) external;\\n\\n    function setPriceOracle(address priceOracle) external;\\n\\n    function setCreditConfigurator(address creditConfigurator) external;\\n}\\n\"\r\n    },\r\n    \"node_modules/@gearbox-protocol/core-v3/contracts/interfaces/ILinearInterestRateModelV3.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// Gearbox Protocol. Generalized leverage for DeFi protocols\\n// (c) Gearbox Foundation, 2023.\\npragma solidity ^0.8.17;\\n\\nimport {IVersion} from \\\"@gearbox-protocol/core-v2/contracts/interfaces/IVersion.sol\\\";\\n\\n/// @title Linear interest rate model V3 interface\\ninterface ILinearInterestRateModelV3 is IVersion {\\n    function calcBorrowRate(uint256 expectedLiquidity, uint256 availableLiquidity, bool checkOptimalBorrowing)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function availableToBorrow(uint256 expectedLiquidity, uint256 availableLiquidity) external view returns (uint256);\\n\\n    function isBorrowingMoreU2Forbidden() external view returns (bool);\\n\\n    function getModelParameters()\\n        external\\n        view\\n        returns (uint16 U_1, uint16 U_2, uint16 R_base, uint16 R_slope1, uint16 R_slope2, uint16 R_slope3);\\n}\\n\"\r\n    },\r\n    \"node_modules/@gearbox-protocol/core-v3/contracts/interfaces/IPoolQuotaKeeperV3.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// Gearbox Protocol. Generalized leverage for DeFi protocols\\n// (c) Gearbox Foundation, 2023.\\npragma solidity ^0.8.17;\\n\\nimport {IVersion} from \\\"@gearbox-protocol/core-v2/contracts/interfaces/IVersion.sol\\\";\\n\\nstruct TokenQuotaParams {\\n    uint16 rate;\\n    uint192 cumulativeIndexLU;\\n    uint16 quotaIncreaseFee;\\n    uint96 totalQuoted;\\n    uint96 limit;\\n}\\n\\nstruct AccountQuota {\\n    uint96 quota;\\n    uint192 cumulativeIndexLU;\\n}\\n\\ninterface IPoolQuotaKeeperV3Events {\\n    /// @notice Emitted when account's quota for a token is updated\\n    event UpdateQuota(address indexed creditAccount, address indexed token, int96 quotaChange);\\n\\n    /// @notice Emitted when token's quota rate is updated\\n    event UpdateTokenQuotaRate(address indexed token, uint16 rate);\\n\\n    /// @notice Emitted when the gauge is updated\\n    event SetGauge(address indexed newGauge);\\n\\n    /// @notice Emitted when a new credit manager is allowed\\n    event AddCreditManager(address indexed creditManager);\\n\\n    /// @notice Emitted when a new token is added as quoted\\n    event AddQuotaToken(address indexed token);\\n\\n    /// @notice Emitted when a new total quota limit is set for a token\\n    event SetTokenLimit(address indexed token, uint96 limit);\\n\\n    /// @notice Emitted when a new one-time quota increase fee is set for a token\\n    event SetQuotaIncreaseFee(address indexed token, uint16 fee);\\n}\\n\\n/// @title Pool quota keeper V3 interface\\ninterface IPoolQuotaKeeperV3 is IPoolQuotaKeeperV3Events, IVersion {\\n    function pool() external view returns (address);\\n\\n    function underlying() external view returns (address);\\n\\n    // ----------------- //\\n    // QUOTAS MANAGEMENT //\\n    // ----------------- //\\n\\n    function updateQuota(address creditAccount, address token, int96 requestedChange, uint96 minQuota, uint96 maxQuota)\\n        external\\n        returns (uint128 caQuotaInterestChange, uint128 fees, bool enableToken, bool disableToken);\\n\\n    function removeQuotas(address creditAccount, address[] calldata tokens, bool setLimitsToZero) external;\\n\\n    function accrueQuotaInterest(address creditAccount, address[] calldata tokens) external;\\n\\n    function getQuotaRate(address) external view returns (uint16);\\n\\n    function cumulativeIndex(address token) external view returns (uint192);\\n\\n    function isQuotedToken(address token) external view returns (bool);\\n\\n    function getQuota(address creditAccount, address token)\\n        external\\n        view\\n        returns (uint96 quota, uint192 cumulativeIndexLU);\\n\\n    function getTokenQuotaParams(address token)\\n        external\\n        view\\n        returns (\\n            uint16 rate,\\n            uint192 cumulativeIndexLU,\\n            uint16 quotaIncreaseFee,\\n            uint96 totalQuoted,\\n            uint96 limit,\\n            bool isActive\\n        );\\n\\n    function getQuotaAndOutstandingInterest(address creditAccount, address token)\\n        external\\n        view\\n        returns (uint96 quoted, uint128 outstandingInterest);\\n\\n    function poolQuotaRevenue() external view returns (uint256);\\n\\n    function lastQuotaRateUpdate() external view returns (uint40);\\n\\n    // ------------- //\\n    // CONFIGURATION //\\n    // ------------- //\\n\\n    function gauge() external view returns (address);\\n\\n    function setGauge(address _gauge) external;\\n\\n    function creditManagers() external view returns (address[] memory);\\n\\n    function addCreditManager(address _creditManager) external;\\n\\n    function quotedTokens() external view returns (address[] memory);\\n\\n    function addQuotaToken(address token) external;\\n\\n    function updateRates() external;\\n\\n    function setTokenLimit(address token, uint96 limit) external;\\n\\n    function setTokenQuotaIncreaseFee(address token, uint16 fee) external;\\n}\\n\"\r\n    },\r\n    \"node_modules/@gearbox-protocol/core-v3/contracts/interfaces/IPoolV3.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// Gearbox Protocol. Generalized leverage for DeFi protocols\\n// (c) Gearbox Foundation, 2023.\\npragma solidity ^0.8.17;\\npragma abicoder v1;\\n\\nimport {IERC4626} from \\\"@openzeppelin/contracts/interfaces/IERC4626.sol\\\";\\nimport {IERC20Permit} from \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\\\";\\nimport {IVersion} from \\\"@gearbox-protocol/core-v2/contracts/interfaces/IVersion.sol\\\";\\n\\ninterface IPoolV3Events {\\n    /// @notice Emitted when depositing liquidity with referral code\\n    event Refer(address indexed onBehalfOf, uint256 indexed referralCode, uint256 amount);\\n\\n    /// @notice Emitted when credit account borrows funds from the pool\\n    event Borrow(address indexed creditManager, address indexed creditAccount, uint256 amount);\\n\\n    /// @notice Emitted when credit account's debt is repaid to the pool\\n    event Repay(address indexed creditManager, uint256 borrowedAmount, uint256 profit, uint256 loss);\\n\\n    /// @notice Emitted when incurred loss can't be fully covered by burning treasury's shares\\n    event IncurUncoveredLoss(address indexed creditManager, uint256 loss);\\n\\n    /// @notice Emitted when new interest rate model contract is set\\n    event SetInterestRateModel(address indexed newInterestRateModel);\\n\\n    /// @notice Emitted when new pool quota keeper contract is set\\n    event SetPoolQuotaKeeper(address indexed newPoolQuotaKeeper);\\n\\n    /// @notice Emitted when new total debt limit is set\\n    event SetTotalDebtLimit(uint256 limit);\\n\\n    /// @notice Emitted when new credit manager is connected to the pool\\n    event AddCreditManager(address indexed creditManager);\\n\\n    /// @notice Emitted when new debt limit is set for a credit manager\\n    event SetCreditManagerDebtLimit(address indexed creditManager, uint256 newLimit);\\n\\n    /// @notice Emitted when new withdrawal fee is set\\n    event SetWithdrawFee(uint256 fee);\\n}\\n\\n/// @title Pool V3 interface\\ninterface IPoolV3 is IVersion, IPoolV3Events, IERC4626, IERC20Permit {\\n    function addressProvider() external view returns (address);\\n\\n    function underlyingToken() external view returns (address);\\n\\n    function treasury() external view returns (address);\\n\\n    function withdrawFee() external view returns (uint16);\\n\\n    function creditManagers() external view returns (address[] memory);\\n\\n    function availableLiquidity() external view returns (uint256);\\n\\n    function expectedLiquidity() external view returns (uint256);\\n\\n    function expectedLiquidityLU() external view returns (uint256);\\n\\n    // ---------------- //\\n    // ERC-4626 LENDING //\\n    // ---------------- //\\n\\n    function depositWithReferral(uint256 assets, address receiver, uint256 referralCode)\\n        external\\n        returns (uint256 shares);\\n\\n    function mintWithReferral(uint256 shares, address receiver, uint256 referralCode)\\n        external\\n        returns (uint256 assets);\\n\\n    // --------- //\\n    // BORROWING //\\n    // --------- //\\n\\n    function totalBorrowed() external view returns (uint256);\\n\\n    function totalDebtLimit() external view returns (uint256);\\n\\n    function creditManagerBorrowed(address creditManager) external view returns (uint256);\\n\\n    function creditManagerDebtLimit(address creditManager) external view returns (uint256);\\n\\n    function creditManagerBorrowable(address creditManager) external view returns (uint256 borrowable);\\n\\n    function lendCreditAccount(uint256 borrowedAmount, address creditAccount) external;\\n\\n    function repayCreditAccount(uint256 repaidAmount, uint256 profit, uint256 loss) external;\\n\\n    // ------------- //\\n    // INTEREST RATE //\\n    // ------------- //\\n\\n    function interestRateModel() external view returns (address);\\n\\n    function baseInterestRate() external view returns (uint256);\\n\\n    function supplyRate() external view returns (uint256);\\n\\n    function baseInterestIndex() external view returns (uint256);\\n\\n    function baseInterestIndexLU() external view returns (uint256);\\n\\n    function lastBaseInterestUpdate() external view returns (uint40);\\n\\n    // ------ //\\n    // QUOTAS //\\n    // ------ //\\n\\n    function poolQuotaKeeper() external view returns (address);\\n\\n    function quotaRevenue() external view returns (uint256);\\n\\n    function lastQuotaRevenueUpdate() external view returns (uint40);\\n\\n    function updateQuotaRevenue(int256 quotaRevenueDelta) external;\\n\\n    function setQuotaRevenue(uint256 newQuotaRevenue) external;\\n\\n    // ------------- //\\n    // CONFIGURATION //\\n    // ------------- //\\n\\n    function setInterestRateModel(address newInterestRateModel) external;\\n\\n    function setPoolQuotaKeeper(address newPoolQuotaKeeper) external;\\n\\n    function setTotalDebtLimit(uint256 newLimit) external;\\n\\n    function setCreditManagerDebtLimit(address creditManager, uint256 newLimit) external;\\n\\n    function setWithdrawFee(uint256 newWithdrawFee) external;\\n}\\n\"\r\n    },\r\n    \"node_modules/@gearbox-protocol/core-v3/contracts/libraries/CreditLogic.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n// Gearbox Protocol. Generalized leverage for DeFi protocols\\n// (c) Gearbox Foundation, 2023.\\npragma solidity ^0.8.17;\\n\\nimport {SafeCast} from \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\n\\nimport {CollateralDebtData, CollateralTokenData} from \\\"../interfaces/ICreditManagerV3.sol\\\";\\nimport {SECONDS_PER_YEAR, PERCENTAGE_FACTOR} from \\\"@gearbox-protocol/core-v2/contracts/libraries/Constants.sol\\\";\\n\\nimport {BitMask} from \\\"./BitMask.sol\\\";\\n\\nuint256 constant INDEX_PRECISION = 10 ** 9;\\n\\n/// @title Credit logic library\\n/// @notice Implements functions used for debt and repayment calculations\\nlibrary CreditLogic {\\n    using BitMask for uint256;\\n    using SafeCast for uint256;\\n\\n    // ----------------- //\\n    // DEBT AND INTEREST //\\n    // ----------------- //\\n\\n    /// @dev Computes growth since last update given yearly growth\\n    function calcLinearGrowth(uint256 value, uint256 timestampLastUpdate) internal view returns (uint256) {\\n        return value * (block.timestamp - timestampLastUpdate) / SECONDS_PER_YEAR;\\n    }\\n\\n    /// @dev Computes interest accrued since the last update\\n    function calcAccruedInterest(uint256 amount, uint256 cumulativeIndexLastUpdate, uint256 cumulativeIndexNow)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        if (amount == 0) return 0;\\n        return (amount * cumulativeIndexNow) / cumulativeIndexLastUpdate - amount; // U:[CL-1]\\n    }\\n\\n    /// @dev Computes total debt, given raw debt data\\n    /// @param collateralDebtData See `CollateralDebtData` (must have debt data filled)\\n    function calcTotalDebt(CollateralDebtData memory collateralDebtData) internal pure returns (uint256) {\\n        return collateralDebtData.debt + collateralDebtData.accruedInterest + collateralDebtData.accruedFees;\\n    }\\n\\n    // ----------- //\\n    // LIQUIDATION //\\n    // ----------- //\\n\\n    /// @dev Computes the amount of underlying tokens to send to the pool on credit account liquidation\\n    ///      - First, liquidation premium and fee are subtracted from account's total value\\n    ///      - The resulting value is then used to repay the debt to the pool, and any remaining fudns\\n    ///        are send back to the account owner\\n    ///      - If, however, funds are insufficient to fully repay the debt, the function will first reduce\\n    ///        protocol profits before finally reporting a bad debt liquidation with loss\\n    /// @param collateralDebtData See `CollateralDebtData` (must have both collateral and debt data filled)\\n    /// @param feeLiquidation Liquidation fee charged by the DAO on the account collateral\\n    /// @param liquidationDiscount Percentage to discount account collateral by (equals 1 - liquidation premium)\\n    /// @param amountWithFeeFn Function that, given the exact amount of underlying tokens to receive,\\n    ///        returns the amount that needs to be sent\\n    /// @param amountWithFeeFn Function that, given the exact amount of underlying tokens to send,\\n    ///        returns the amount that will be received\\n    /// @return amountToPool Amount of underlying tokens to send to the pool\\n    /// @return remainingFunds Amount of underlying tokens to send to the credit account owner\\n    /// @return profit Amount of underlying tokens received as fees by the DAO\\n    /// @return loss Portion of account's debt that can't be repaid\\n    function calcLiquidationPayments(\\n        CollateralDebtData memory collateralDebtData,\\n        uint16 feeLiquidation,\\n        uint16 liquidationDiscount,\\n        function (uint256) view returns (uint256) amountWithFeeFn,\\n        function (uint256) view returns (uint256) amountMinusFeeFn\\n    ) internal view returns (uint256 amountToPool, uint256 remainingFunds, uint256 profit, uint256 loss) {\\n        amountToPool = calcTotalDebt(collateralDebtData); // U:[CL-4]\\n\\n        uint256 debtWithInterest = collateralDebtData.debt + collateralDebtData.accruedInterest;\\n\\n        uint256 totalValue = collateralDebtData.totalValue;\\n\\n        uint256 totalFunds = totalValue * liquidationDiscount / PERCENTAGE_FACTOR;\\n\\n        amountToPool += totalValue * feeLiquidation / PERCENTAGE_FACTOR; // U:[CL-4]\\n\\n        uint256 amountToPoolWithFee = amountWithFeeFn(amountToPool);\\n        unchecked {\\n            if (totalFunds > amountToPoolWithFee) {\\n                remainingFunds = totalFunds - amountToPoolWithFee; // U:[CL-4]\\n            } else {\\n                amountToPoolWithFee = totalFunds;\\n                amountToPool = amountMinusFeeFn(totalFunds); // U:[CL-4]\\n            }\\n\\n            if (amountToPool >= debtWithInterest) {\\n                profit = amountToPool - debtWithInterest; // U:[CL-4]\\n            } else {\\n                loss = debtWithInterest - amountToPool; // U:[CL-4]\\n            }\\n        }\\n\\n        amountToPool = amountToPoolWithFee; // U:[CL-4]\\n    }\\n\\n    // --------------------- //\\n    // LIQUIDATION THRESHOLD //\\n    // --------------------- //\\n\\n    /// @dev Returns the current liquidation threshold based on token data\\n    /// @dev GearboxV3 supports liquidation threshold ramping, which means that the LT can be set to change dynamically\\n    ///      from one value to another over time. LT changes linearly, starting at `ltInitial` and ending at `ltFinal`.\\n    ///      To make LT static, the value can be written to `ltInitial` with ramp start set far in the future.\\n    function getLiquidationThreshold(uint16 ltInitial, uint16 ltFinal, uint40 timestampRampStart, uint24 rampDuration)\\n        internal\\n        view\\n        returns (uint16)\\n    {\\n        uint40 timestampRampEnd = timestampRampStart + rampDuration;\\n        if (block.timestamp <= timestampRampStart) {\\n            return ltInitial; // U:[CL-5]\\n        } else if (block.timestamp < timestampRampEnd) {\\n            return _getRampingLiquidationThreshold(ltInitial, ltFinal, timestampRampStart, timestampRampEnd); // U:[CL-5]\\n        } else {\\n            return ltFinal; // U:[CL-5]\\n        }\\n    }\\n\\n    /// @dev Computes the LT during the ramping process\\n    function _getRampingLiquidationThreshold(\\n        uint16 ltInitial,\\n        uint16 ltFinal,\\n        uint40 timestampRampStart,\\n        uint40 timestampRampEnd\\n    ) internal view returns (uint16) {\\n        return uint16(\\n            (ltInitial * (timestampRampEnd - block.timestamp) + ltFinal * (block.timestamp - timestampRampStart))\\n                / (timestampRampEnd - timestampRampStart)\\n        ); // U:[CL-5]\\n    }\\n\\n    // ----------- //\\n    // MANAGE DEBT //\\n    // ----------- //\\n\\n    /// @dev Computes new debt principal and interest index after increasing debt\\n    ///      - The new debt principal is simply `debt + amount`\\n    ///      - The new credit account's interest index is a solution to the equation\\n    ///        `debt * (indexNow / indexLastUpdate - 1) = (debt + amount) * (indexNow / indexNew - 1)`,\\n    ///        which essentially writes that interest accrued since last update remains the same\\n    /// @param amount Amount to increase debt by\\n    /// @param debt Debt principal before increase\\n    /// @param cumulativeIndexNow The current interest index\\n    /// @param cumulativeIndexLastUpdate Credit account's interest index as of last update\\n    /// @return newDebt Debt principal after increase\\n    /// @return newCumulativeIndex New credit account's interest index\\n    function calcIncrease(uint256 amount, uint256 debt, uint256 cumulativeIndexNow, uint256 cumulativeIndexLastUpdate)\\n        internal\\n        pure\\n        returns (uint256 newDebt, uint256 newCumulativeIndex)\\n    {\\n        if (debt == 0) return (amount, cumulativeIndexNow);\\n        newDebt = debt + amount; // U:[CL-2]\\n        newCumulativeIndex = (\\n            (cumulativeIndexNow * newDebt * INDEX_PRECISION)\\n                / ((INDEX_PRECISION * cumulativeIndexNow * debt) / cumulativeIndexLastUpdate + INDEX_PRECISION * amount)\\n        ); // U:[CL-2]\\n    }\\n\\n    /// @dev Computes new debt principal and interest index (and other values) after decreasing debt\\n    ///      - Debt comprises of multiple components which are repaid in the following order:\\n    ///        quota update fees => quota interest => base interest => debt principal.\\n    ///        New values for all these components depend on what portion of each was repaid.\\n    ///      - Debt principal, for example, only decreases if all previous components were fully repaid\\n    ///      - The new credit account's interest index stays the same if base interest was not repaid at all,\\n    ///        is set to the current interest index if base interest was repaid fully, and is a solution to\\n    ///        the equation `debt * (indexNow / indexLastUpdate - 1) - delta = debt * (indexNow / indexNew - 1)`\\n    ///        when only `delta` of accrued interest was repaid\\n    /// @param amount Amount of debt to repay\\n    /// @param debt Debt principal before repayment\\n    /// @param cumulativeIndexNow The current interest index\\n    /// @param cumulativeIndexLastUpdate Credit account's interest index as of last update\\n    /// @param cumulativeQuotaInterest Credit account's quota interest before repayment\\n    /// @param quotaFees Accrued quota fees\\n    /// @param feeInterest Fee on accrued interest (both base and quota) charged by the DAO\\n    /// @return newDebt Debt principal after repayment\\n    /// @return newCumulativeIndex Credit account's quota interest after repayment\\n    /// @return profit Amount of underlying tokens received as fees by the DAO\\n    /// @return newCumulativeQuotaInterest Credit account's accrued quota interest after repayment\\n    /// @return newQuotaFees Amount of unpaid quota fees left after repayment\\n    function calcDecrease(\\n        uint256 amount,\\n        uint256 debt,\\n        uint256 cumulativeIndexNow,\\n        uint256 cumulativeIndexLastUpdate,\\n        uint128 cumulativeQuotaInterest,\\n        uint128 quotaFees,\\n        uint16 feeInterest\\n    )\\n        internal\\n        pure\\n        returns (\\n            uint256 newDebt,\\n            uint256 newCumulativeIndex,\\n            uint256 profit,\\n            uint128 newCumulativeQuotaInterest,\\n            uint128 newQuotaFees\\n        )\\n    {\\n        uint256 amountToRepay = amount;\\n\\n        unchecked {\\n            if (quotaFees != 0) {\\n                if (amountToRepay > quotaFees) {\\n                    newQuotaFees = 0;\\n                    amountToRepay -= quotaFees;\\n                    profit = quotaFees;\\n                } else {\\n                    newQuotaFees = quotaFees - uint128(amountToRepay);\\n                    profit = amountToRepay;\\n                    amountToRepay = 0;\\n                }\\n            }\\n        }\\n\\n        if (cumulativeQuotaInterest != 0 && amountToRepay != 0) {\\n            uint256 quotaProfit = (cumulativeQuotaInterest * feeInterest) / PERCENTAGE_FACTOR;\\n\\n            if (amountToRepay >= cumulativeQuotaInterest + quotaProfit) {\\n                amountToRepay -= cumulativeQuotaInterest + quotaProfit; // U:[CL-3B]\\n                profit += quotaProfit; // U:[CL-3B]\\n\\n                newCumulativeQuotaInterest = 0; // U:[CL-3A]\\n            } else {\\n                // If amount is not enough to repay quota interest + DAO fee, then it is split pro-rata between them\\n                uint256 amountToPool = (amountToRepay * PERCENTAGE_FACTOR) / (PERCENTAGE_FACTOR + feeInterest);\\n\\n                profit += amountToRepay - amountToPool; // U:[CL-3B]\\n                amountToRepay = 0; // U:[CL-3B]\\n\\n                newCumulativeQuotaInterest = uint128(cumulativeQuotaInterest - amountToPool); // U:[CL-3A]\\n            }\\n        } else {\\n            newCumulativeQuotaInterest = cumulativeQuotaInterest;\\n        }\\n\\n        if (amountToRepay != 0) {\\n            uint256 interestAccrued = calcAccruedInterest({\\n                amount: debt,\\n                cumulativeIndexLastUpdate: cumulativeIndexLastUpdate,\\n                cumulativeIndexNow: cumulativeIndexNow\\n            }); // U:[CL-3A]\\n            uint256 profitFromInterest = (interestAccrued * feeInterest) / PERCENTAGE_FACTOR; // U:[CL-3A]\\n\\n            if (amountToRepay >= interestAccrued + profitFromInterest) {\\n                amountToRepay -= interestAccrued + profitFromInterest;\\n\\n                profit += profitFromInterest; // U:[CL-3B]\\n\\n                newCumulativeIndex = cumulativeIndexNow; // U:[CL-3A]\\n            } else {\\n                // If amount is not enough to repay base interest + DAO fee, then it is split pro-rata between them\\n                uint256 amountToPool = (amountToRepay * PERCENTAGE_FACTOR) / (PERCENTAGE_FACTOR + feeInterest);\\n\\n                profit += amountToRepay - amountToPool; // U:[CL-3B]\\n                amountToRepay = 0; // U:[CL-3B]\\n\\n                newCumulativeIndex = (INDEX_PRECISION * cumulativeIndexNow * cumulativeIndexLastUpdate)\\n                    / (\\n                        INDEX_PRECISION * cumulativeIndexNow\\n                            - (INDEX_PRECISION * amountToPool * cumulativeIndexLastUpdate) / debt\\n                    ); // U:[CL-3A]\\n            }\\n        } else {\\n            newCumulativeIndex = cumulativeIndexLastUpdate; // U:[CL-3A]\\n        }\\n        newDebt = debt - amountToRepay; // U:[CL-3A]\\n    }\\n}\\n\"\r\n    },\r\n    \"node_modules/@gearbox-protocol/core-v3/contracts/traits/ACLNonReentrantTrait.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n// Gearbox Protocol. Generalized leverage for DeFi protocols\\n// (c) Gearbox Foundation, 2023.\\npragma solidity ^0.8.17;\\n\\nimport {Pausable} from \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\n\\nimport {IACL} from \\\"@gearbox-protocol/core-v2/contracts/interfaces/IACL.sol\\\";\\nimport {\\n    CallerNotControllerException,\\n    CallerNotPausableAdminException,\\n    CallerNotUnpausableAdminException\\n} from \\\"../interfaces/IExceptions.sol\\\";\\n\\nimport {ACLTrait} from \\\"./ACLTrait.sol\\\";\\nimport {ReentrancyGuardTrait} from \\\"./ReentrancyGuardTrait.sol\\\";\\n\\n/// @title ACL non-reentrant trait\\n/// @notice Extended version of `ACLTrait` that implements pausable functionality,\\n///         reentrancy protection and external controller role\\nabstract contract ACLNonReentrantTrait is ACLTrait, Pausable, ReentrancyGuardTrait {\\n    /// @notice Emitted when new external controller is set\\n    event NewController(address indexed newController);\\n\\n    /// @notice External controller address\\n    address public controller;\\n\\n    /// @dev Ensures that function caller is external controller or configurator\\n    modifier controllerOnly() {\\n        _ensureCallerIsControllerOrConfigurator();\\n        _;\\n    }\\n\\n    /// @dev Reverts if the caller is not controller or configurator\\n    /// @dev Used to cut contract size on modifiers\\n    function _ensureCallerIsControllerOrConfigurator() internal view {\\n        if (msg.sender != controller && !_isConfigurator({account: msg.sender})) {\\n            revert CallerNotControllerException();\\n        }\\n    }\\n\\n    /// @dev Ensures that function caller has pausable admin role\\n    modifier pausableAdminsOnly() {\\n        _ensureCallerIsPausableAdmin();\\n        _;\\n    }\\n\\n    /// @dev Reverts if the caller is not pausable admin\\n    /// @dev Used to cut contract size on modifiers\\n    function _ensureCallerIsPausableAdmin() internal view {\\n        if (!_isPausableAdmin({account: msg.sender})) {\\n            revert CallerNotPausableAdminException();\\n        }\\n    }\\n\\n    /// @dev Ensures that function caller has unpausable admin role\\n    modifier unpausableAdminsOnly() {\\n        _ensureCallerIsUnpausableAdmin();\\n        _;\\n    }\\n\\n    /// @dev Reverts if the caller is not unpausable admin\\n    /// @dev Used to cut contract size on modifiers\\n    function _ensureCallerIsUnpausableAdmin() internal view {\\n        if (!_isUnpausableAdmin({account: msg.sender})) {\\n            revert CallerNotUnpausableAdminException();\\n        }\\n    }\\n\\n    /// @notice Constructor\\n    /// @param addressProvider Address provider contract address\\n    constructor(address addressProvider) ACLTrait(addressProvider) {\\n        controller = IACL(acl).owner();\\n    }\\n\\n    /// @notice Pauses contract, can only be called by an account with pausable admin role\\n    function pause() external virtual pausableAdminsOnly {\\n        _pause();\\n    }\\n\\n    /// @notice Unpauses contract, can only be called by an account with unpausable admin role\\n    function unpause() external virtual unpausableAdminsOnly {\\n        _unpause();\\n    }\\n\\n    /// @notice Sets new external controller, can only be called by configurator\\n    function setController(address newController) external configuratorOnly {\\n        if (controller == newController) return;\\n        controller = newController;\\n        emit NewController(newController);\\n    }\\n\\n    /// @dev Checks whether given account has pausable admin role\\n    function _isPausableAdmin(address account) internal view returns (bool) {\\n        return IACL(acl).isPausableAdmin(account);\\n    }\\n\\n    /// @dev Checks whether given account has unpausable admin role\\n    function _isUnpausableAdmin(address account) internal view returns (bool) {\\n        return IACL(acl).isUnpausableAdmin(account);\\n    }\\n}\\n\"\r\n    },\r\n    \"node_modules/@gearbox-protocol/core-v3/contracts/traits/ContractsRegisterTrait.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n// Gearbox Protocol. Generalized leverage for DeFi protocols\\n// (c) Gearbox Foundation, 2023.\\npragma solidity ^0.8.17;\\n\\nimport {IContractsRegister} from \\\"@gearbox-protocol/core-v2/contracts/interfaces/IContractsRegister.sol\\\";\\n\\nimport {AP_CONTRACTS_REGISTER, IAddressProviderV3, NO_VERSION_CONTROL} from \\\"../interfaces/IAddressProviderV3.sol\\\";\\nimport {RegisteredCreditManagerOnlyException, RegisteredPoolOnlyException} from \\\"../interfaces/IExceptions.sol\\\";\\n\\nimport {SanityCheckTrait} from \\\"./SanityCheckTrait.sol\\\";\\n\\n/// @title Contracts register trait\\n/// @notice Trait that simplifies validation of pools and credit managers\\nabstract contract ContractsRegisterTrait is SanityCheckTrait {\\n    /// @notice Contracts register contract address\\n    address public immutable contractsRegister;\\n\\n    /// @dev Ensures that given address is a registered credit manager\\n    modifier registeredPoolOnly(address addr) {\\n        _ensureRegisteredPool(addr);\\n        _;\\n    }\\n\\n    /// @dev Ensures that given address is a registered pool\\n    modifier registeredCreditManagerOnly(address addr) {\\n        _ensureRegisteredCreditManager(addr);\\n        _;\\n    }\\n\\n    /// @notice Constructor\\n    /// @param addressProvider Address provider contract address\\n    constructor(address addressProvider) nonZeroAddress(addressProvider) {\\n        contractsRegister =\\n            IAddressProviderV3(addressProvider).getAddressOrRevert(AP_CONTRACTS_REGISTER, NO_VERSION_CONTROL);\\n    }\\n\\n    /// @dev Ensures that given address is a registered pool\\n    function _ensureRegisteredPool(address addr) internal view {\\n        if (!_isRegisteredPool(addr)) revert RegisteredPoolOnlyException();\\n    }\\n\\n    /// @dev Ensures that given address is a registered credit manager\\n    function _ensureRegisteredCreditManager(address addr) internal view {\\n        if (!_isRegisteredCreditManager(addr)) revert RegisteredCreditManagerOnlyException();\\n    }\\n\\n    /// @dev Whether given address is a registered pool\\n    function _isRegisteredPool(address addr) internal view returns (bool) {\\n        return IContractsRegister(contractsRegister).isPool(addr);\\n    }\\n\\n    /// @dev Whether given address is a registered credit manager\\n    function _isRegisteredCreditManager(address addr) internal view returns (bool) {\\n        return IContractsRegister(contractsRegister).isCreditManager(addr);\\n    }\\n}\\n\"\r\n    },\r\n    \"node_modules/@gearbox-protocol/core-v2/contracts/libraries/Constants.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// Gearbox Protocol. Generalized leverage for DeFi protocols\\n// (c) Gearbox Holdings, 2022\\npragma solidity ^0.8.10;\\n\\n// Denominations\\n\\nuint256 constant WAD = 1e18;\\nuint256 constant RAY = 1e27;\\nuint16 constant PERCENTAGE_FACTOR = 1e4; //percentage plus two decimals\\n\\n// 25% of type(uint256).max\\nuint256 constant ALLOWANCE_THRESHOLD = type(uint96).max >> 3;\\n\\n// FEE = 50%\\nuint16 constant DEFAULT_FEE_INTEREST = 50_00; // 50%\\n\\n// LIQUIDATION_FEE 1.5%\\nuint16 constant DEFAULT_FEE_LIQUIDATION = 1_50; // 1.5%\\n\\n// LIQUIDATION PREMIUM 4%\\nuint16 constant DEFAULT_LIQUIDATION_PREMIUM = 4_00; // 4%\\n\\n// LIQUIDATION_FEE_EXPIRED 2%\\nuint16 constant DEFAULT_FEE_LIQUIDATION_EXPIRED = 1_00; // 2%\\n\\n// LIQUIDATION PREMIUM EXPIRED 2%\\nuint16 constant DEFAULT_LIQUIDATION_PREMIUM_EXPIRED = 2_00; // 2%\\n\\n// DEFAULT PROPORTION OF MAX BORROWED PER BLOCK TO MAX BORROWED PER ACCOUNT\\nuint16 constant DEFAULT_LIMIT_PER_BLOCK_MULTIPLIER = 2;\\n\\n// Seconds in a year\\nuint256 constant SECONDS_PER_YEAR = 365 days;\\nuint256 constant SECONDS_PER_ONE_AND_HALF_YEAR = (SECONDS_PER_YEAR * 3) / 2;\\n\\n// OPERATIONS\\n\\n// Leverage decimals - 100 is equal to 2x leverage (100% * collateral amount + 100% * borrowed amount)\\nuint8 constant LEVERAGE_DECIMALS = 100;\\n\\n// Maximum withdraw fee for pool in PERCENTAGE_FACTOR format\\nuint8 constant MAX_WITHDRAW_FEE = 100;\\n\\nuint256 constant EXACT_INPUT = 1;\\nuint256 constant EXACT_OUTPUT = 2;\\n\\naddress constant UNIVERSAL_CONTRACT = 0xCcCCccccCCCCcCCCCCCcCcCccCcCCCcCcccccccC;\\n\"\r\n    },\r\n    \"node_modules/@gearbox-protocol/core-v3/contracts/interfaces/IExceptions.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// Gearbox Protocol. Generalized leverage for DeFi protocols\\n// (c) Gearbox Foundation, 2023.\\npragma solidity ^0.8.17;\\n\\n// ------- //\\n// GENERAL //\\n// ------- //\\n\\n/// @notice Thrown on attempting to set an important address to zero address\\nerror ZeroAddressException();\\n\\n/// @notice Thrown when attempting to pass a zero amount to a funding-related operation\\nerror AmountCantBeZeroException();\\n\\n/// @notice Thrown on incorrect input parameter\\nerror IncorrectParameterException();\\n\\n/// @notice Thrown when balance is insufficient to perform an operation\\nerror InsufficientBalanceException();\\n\\n/// @notice Thrown if parameter is out of range\\nerror ValueOutOfRangeException();\\n\\n/// @notice Thrown when trying to send ETH to a contract that is not allowed to receive ETH directly\\nerror ReceiveIsNotAllowedException();\\n\\n/// @notice Thrown on attempting to set an EOA as an important contract in the system\\nerror AddressIsNotContractException(address);\\n\\n/// @notice Thrown on attempting to receive a token that is not a collateral token or was forbidden\\nerror TokenNotAllowedException();\\n\\n/// @notice Thrown on attempting to add a token that is already in a collateral list\\nerror TokenAlreadyAddedException();\\n\\n/// @notice Thrown when attempting to use quota-related logic for a token that is not quoted in quota keeper\\nerror TokenIsNotQuotedException();\\n\\n/// @notice Thrown on attempting to interact with an address that is not a valid target contract\\nerror TargetContractNotAllowedException();\\n\\n/// @notice Thrown if function is not implemented\\nerror NotImplementedException();\\n\\n// ------------------ //\\n// CONTRACTS REGISTER //\\n// ------------------ //\\n\\n/// @notice Thrown when an address is expected to be a registered credit manager, but is not\\nerror RegisteredCreditManagerOnlyException();\\n\\n/// @notice Thrown when an address is expected to be a registered pool, but is not\\nerror RegisteredPoolOnlyException();\\n\\n// ---------------- //\\n// ADDRESS PROVIDER //\\n// ---------------- //\\n\\n/// @notice Reverts if address key isn't found in address provider\\nerror AddressNotFoundException();\\n\\n// ----------------- //\\n// POOL, PQK, GAUGES //\\n// ----------------- //\\n\\n/// @notice Thrown by pool-adjacent contracts when a credit manager being connected has a wrong pool address\\nerror IncompatibleCreditManagerException();\\n\\n/// @notice Thrown when attempting to set an incompatible successor staking contract\\nerror IncompatibleSuccessorException();\\n\\n/// @notice Thrown when attempting to vote in a non-approved contract\\nerror VotingContractNotAllowedException();\\n\\n/// @notice Thrown when attempting to unvote more votes than there are\\nerror InsufficientVotesException();\\n\\n/// @notice Thrown when attempting to borrow more than the second point on a two-point curve\\nerror BorrowingMoreThanU2ForbiddenException();\\n\\n/// @notice Thrown when a credit manager attempts to borrow more than its limit in the current block, or in general\\nerror CreditManagerCantBorrowException();\\n\\n/// @notice Thrown when attempting to connect a quota keeper to an incompatible pool\\nerror IncompatiblePoolQuotaKeeperException();\\n\\n/// @notice Thrown when the quota is outside of min/max bounds\\nerror QuotaIsOutOfBoundsException();\\n\\n// -------------- //\\n// CREDIT MANAGER //\\n// -------------- //\\n\\n/// @notice Thrown on failing a full collateral check after multicall\\nerror NotEnoughCollateralException();\\n\\n/// @notice Thrown if an attempt to approve a collateral token to adapter's target contract fails\\nerror AllowanceFailedException();\\n\\n/// @notice Thrown on attempting to perform an action for a credit account that does not exist\\nerror CreditAccountDoesNotExistException();\\n\\n/// @notice Thrown on configurator attempting to add more than 255 collateral tokens\\nerror TooManyTokensException();\\n\\n/// @notice Thrown if more than the maximum number of tokens were enabled on a credit account\\nerror TooManyEnabledTokensException();\\n\\n/// @notice Thrown when attempting to execute a protocol interaction without active credit account set\\nerror ActiveCreditAccountNotSetException();\\n\\n/// @notice Thrown when trying to update credit account's debt more than once in the same block\\nerror DebtUpdatedTwiceInOneBlockException();\\n\\n/// @notice Thrown when trying to repay all debt while having active quotas\\nerror DebtToZeroWithActiveQuotasException();\\n\\n/// @notice Thrown when a zero-debt account attempts to update quota\\nerror UpdateQuotaOnZeroDebtAccountException();\\n\\n/// @notice Thrown when attempting to close an account with non-zero debt\\nerror CloseAccountWithNonZeroDebtException();\\n\\n/// @notice Thrown when value of funds remaining on the account after liquidation is insufficient\\nerror InsufficientRemainingFundsException();\\n\\n/// @notice Thrown when Credit Facade tries to write over a non-zero active Credit Account\\nerror ActiveCreditAccountOverridenException();\\n\\n// ------------------- //\\n// CREDIT CONFIGURATOR //\\n// ------------------- //\\n\\n/// @notice Thrown on attempting to use a non-ERC20 contract or an EOA as a token\\nerror IncorrectTokenContractException();\\n\\n/// @notice Thrown if the newly set LT if zero or greater than the underlying's LT\\nerror IncorrectLiquidationThresholdException();\\n\\n/// @notice Thrown if borrowing limits are incorrect: minLimit > maxLimit or maxLimit > blockLimit\\nerror IncorrectLimitsException();\\n\\n/// @notice Thrown if the new expiration date is less than the current expiration date or current timestamp\\nerror IncorrectExpirationDateException();\\n\\n/// @notice Thrown if a contract returns a wrong credit manager or reverts when trying to retrieve it\\nerror IncompatibleContractException();\\n\\n/// @notice Thrown if attempting to forbid an adapter that is not registered in the credit manager\\nerror AdapterIsNotRegisteredException();\\n\\n/// @notice Thrown when trying to manually set total debt parameters in a credit facade that doesn't track them\\nerror TotalDebtNotTrackedException();\\n\\n// ------------- //\\n// CREDIT FACADE //\\n// ------------- //\\n\\n/// @notice Thrown when attempting to perform an action that is forbidden in whitelisted mode\\nerror ForbiddenInWhitelistedModeException();\\n\\n/// @notice Thrown if credit facade is not expirable, and attempted aciton requires expirability\\nerror NotAllowedWhenNotExpirableException();\\n\\n/// @notice Thrown if a selector that doesn't match any allowed function is passed to the credit facade in a multicall\\nerror UnknownMethodException();\\n\\n/// @notice Thrown when trying to close an account with enabled tokens\\nerror CloseAccountWithEnabledTokensException();\\n\\n/// @notice Thrown if a liquidator tries to liquidate an account with a health factor above 1\\nerror CreditAccountNotLiquidatableException();\\n\\n/// @notice Thrown if too much new debt was taken within a single block\\nerror BorrowedBlockLimitException();\\n\\n/// @notice Thrown if the new debt principal for a credit account falls outside of borrowing limits\\nerror BorrowAmountOutOfLimitsException();\\n\\n/// @notice Thrown if a user attempts to open an account via an expired credit facade\\nerror NotAllowedAfterExpirationException();\\n\\n/// @notice Thrown if expected balances are attempted to be set twice without performing a slippage check\\nerror ExpectedBalancesAlreadySetException();\\n\\n/// @notice Thrown if attempting to perform a slippage check when excepted balances are not set\\nerror ExpectedBalancesNotSetException();\\n\\n/// @notice Thrown if balance of at least one token is less than expected during a slippage check\\nerror BalanceLessThanExpectedException();\\n\\n/// @notice Thrown when trying to perform an action that is forbidden when credit account has enabled forbidden tokens\\nerror ForbiddenTokensException();\\n\\n/// @notice Thrown when new forbidden tokens are enabled during the multicall\\nerror ForbiddenTokenEnabledException();\\n\\n/// @notice Thrown when enabled forbidden token balance is increased during the multicall\\nerror ForbiddenTokenBalanceIncreasedException();\\n\\n/// @notice Thrown when the remaining token balance is increased during the liquidation\\nerror RemainingTokenBalanceIncreasedException();\\n\\n/// @notice Thrown if `botMulticall` is called by an address that is not approved by account owner or is forbidden\\nerror NotApprovedBotException();\\n\\n/// @notice Thrown when attempting to perform a multicall action with no permission for it\\nerror NoPermissionException(uint256 permission);\\n\\n/// @notice Thrown when attempting to give a bot unexpected permissions\\nerror UnexpectedPermissionsException();\\n\\n/// @notice Thrown when a custom HF parameter lower than 10000 is passed into the full collateral check\\nerror CustomHealthFactorTooLowException();\\n\\n/// @notice Thrown when submitted collateral hint is not a valid token mask\\nerror InvalidCollateralHintException();\\n\\n// ------ //\\n// ACCESS //\\n// ------ //\\n\\n/// @notice Thrown on attempting to call an access restricted function not as credit account owner\\nerror CallerNotCreditAccountOwnerException();\\n\\n/// @notice Thrown on attempting to call an access restricted function not as configurator\\nerror CallerNotConfiguratorException();\\n\\n/// @notice Thrown on attempting to call an access-restructed function not as account factory\\nerror CallerNotAccountFactoryException();\\n\\n/// @notice Thrown on attempting to call an access restricted function not as credit manager\\nerror CallerNotCreditManagerException();\\n\\n/// @notice Thrown on attempting to call an access restricted function not as credit facade\\nerror CallerNotCreditFacadeException();\\n\\n/// @notice Thrown on attempting to call an access restricted function not as controller or configurator\\nerror CallerNotControllerException();\\n\\n/// @notice Thrown on attempting to pause a contract without pausable admin rights\\nerror CallerNotPausableAdminException();\\n\\n/// @notice Thrown on attempting to unpause a contract without unpausable admin rights\\nerror CallerNotUnpausableAdminException();\\n\\n/// @notice Thrown on attempting to call an access restricted function not as gauge\\nerror CallerNotGaugeException();\\n\\n/// @notice Thrown on attempting to call an access restricted function not as quota keeper\\nerror CallerNotPoolQuotaKeeperException();\\n\\n/// @notice Thrown on attempting to call an access restricted function not as voter\\nerror CallerNotVoterException();\\n\\n/// @notice Thrown on attempting to call an access restricted function not as allowed adapter\\nerror CallerNotAdapterException();\\n\\n/// @notice Thrown on attempting to call an access restricted function not as migrator\\nerror CallerNotMigratorException();\\n\\n/// @notice Thrown when an address that is not the designated executor attempts to execute a transaction\\nerror CallerNotExecutorException();\\n\\n/// @notice Thrown on attempting to call an access restricted function not as veto admin\\nerror CallerNotVetoAdminException();\\n\\n// ------------------- //\\n// CONTROLLER TIMELOCK //\\n// ------------------- //\\n\\n/// @notice Thrown when the new parameter values do not satisfy required conditions\\nerror ParameterChecksFailedException();\\n\\n/// @notice Thrown when attempting to execute a non-queued transaction\\nerror TxNotQueuedException();\\n\\n/// @notice Thrown when attempting to execute a transaction that is either immature or stale\\nerror TxExecutedOutsideTimeWindowException();\\n\\n/// @notice Thrown when execution of a transaction fails\\nerror TxExecutionRevertedException();\\n\\n/// @notice Thrown when the value of a parameter on execution is different from the value on queue\\nerror ParameterChangedAfterQueuedTxException();\\n\\n// -------- //\\n// BOT LIST //\\n// -------- //\\n\\n/// @notice Thrown when attempting to set non-zero permissions for a forbidden or special bot\\nerror InvalidBotException();\\n\\n// --------------- //\\n// ACCOUNT FACTORY //\\n// --------------- //\\n\\n/// @notice Thrown when trying to deploy second master credit account for a credit manager\\nerror MasterCreditAccountAlreadyDeployedException();\\n\\n/// @notice Thrown when trying to rescue funds from a credit account that is currently in use\\nerror CreditAccountIsInUseException();\\n\\n// ------------ //\\n// PRICE ORACLE //\\n// ------------ //\\n\\n/// @notice Thrown on attempting to set a token price feed to an address that is not a correct price feed\\nerror IncorrectPriceFeedException();\\n\\n/// @notice Thrown on attempting to interact with a price feed for a token not added to the price oracle\\nerror PriceFeedDoesNotExistException();\\n\\n/// @notice Thrown when price feed returns incorrect price for a token\\nerror IncorrectPriceException();\\n\\n/// @notice Thrown when token's price feed becomes stale\\nerror StalePriceException();\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// EIP-2612 is Final as of 2022-11-01. This file is deprecated.\\n\\nimport \\\"./IERC20Permit.sol\\\";\\n\"\r\n    },\r\n    \"node_modules/@1inch/solidity-utils/contracts/interfaces/IDaiLikePermit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface IDaiLikePermit {\\n    function permit(\\n        address holder,\\n        address spender,\\n        uint256 nonce,\\n        uint256 expiry,\\n        bool allowed,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"node_modules/@1inch/solidity-utils/contracts/interfaces/IPermit2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface IPermit2 {\\n    struct PermitDetails {\\n        // ERC20 token address\\n        address token;\\n        // the maximum amount allowed to spend\\n        uint160 amount;\\n        // timestamp at which a spender's token allowances become invalid\\n        uint48 expiration;\\n        // an incrementing value indexed per owner,token,and spender for each signature\\n        uint48 nonce;\\n    }\\n    /// @notice The permit message signed for a single token allownce\\n    struct PermitSingle {\\n        // the permit data for a single token alownce\\n        PermitDetails details;\\n        // address permissioned on the allowed tokens\\n        address spender;\\n        // deadline on the permit signature\\n        uint256 sigDeadline;\\n    }\\n    /// @notice Packed allowance\\n    struct PackedAllowance {\\n        // amount allowed\\n        uint160 amount;\\n        // permission expiry\\n        uint48 expiration;\\n        // an incrementing value indexed per owner,token,and spender for each signature\\n        uint48 nonce;\\n    }\\n\\n    function transferFrom(address user, address spender, uint160 amount, address token) external;\\n\\n    function permit(address owner, PermitSingle memory permitSingle, bytes calldata signature) external;\\n\\n    function allowance(address user, address token, address spender) external view returns (PackedAllowance memory);\\n}\\n\"\r\n    },\r\n    \"node_modules/@1inch/solidity-utils/contracts/interfaces/IWETH.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IWETH is IERC20 {\\n    function deposit() external payable;\\n\\n    function withdraw(uint256 amount) external;\\n}\\n\"\r\n    },\r\n    \"node_modules/@1inch/solidity-utils/contracts/libraries/RevertReasonForwarder.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/// @title Revert reason forwarder.\\nlibrary RevertReasonForwarder {\\n    /// @dev Forwards latest externall call revert.\\n    function reRevert() internal pure {\\n        // bubble up revert reason from latest external call\\n        assembly (\\\"memory-safe\\\") { // solhint-disable-line no-inline-assembly\\n            let ptr := mload(0x40)\\n            returndatacopy(ptr, 0, returndatasize())\\n            revert(ptr, returndatasize())\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts/utils/cryptography/ECDSA.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV // Deprecated in v4.8\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \u00f7 2 + 1, and for v in (302): v \u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32 message) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\")\\n            mstore(0x1c, hash)\\n            message := keccak256(0x00, 0x3c)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 data) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, \\\"\\\\x19\\\\x01\\\")\\n            mstore(add(ptr, 0x02), domainSeparator)\\n            mstore(add(ptr, 0x22), structHash)\\n            data := keccak256(ptr, 0x42)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Data with intended validator, created from a\\n     * `validator` and `data` according to the version 0 of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toDataWithIntendedValidatorHash(address validator, bytes memory data) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x00\\\", validator, data));\\n    }\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts/utils/cryptography/EIP712.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/cryptography/EIP712.sol)\\n\\npragma solidity ^0.8.8;\\n\\nimport \\\"./ECDSA.sol\\\";\\nimport \\\"../ShortStrings.sol\\\";\\nimport \\\"../../interfaces/IERC5267.sol\\\";\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\\n *\\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\\n *\\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\\n * ({_hashTypedDataV4}).\\n *\\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\\n * the chain id to protect against replay attacks on an eventual fork of the chain.\\n *\\n * NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method\\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\\n *\\n * NOTE: In the upgradeable version of this contract, the cached values will correspond to the address, and the domain\\n * separator of the implementation contract. This will cause the `_domainSeparatorV4` function to always rebuild the\\n * separator from the immutable values, which is cheaper than accessing a cached version in cold storage.\\n *\\n * _Available since v3.4._\\n *\\n * @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\\n */\\nabstract contract EIP712 is IERC5267 {\\n    using ShortStrings for *;\\n\\n    bytes32 private constant _TYPE_HASH =\\n        keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\");\\n\\n    // Cache the domain separator as an immutable value, but also store the chain id that it corresponds to, in order to\\n    // invalidate the cached domain separator if the chain id changes.\\n    bytes32 private immutable _cachedDomainSeparator;\\n    uint256 private immutable _cachedChainId;\\n    address private immutable _cachedThis;\\n\\n    bytes32 private immutable _hashedName;\\n    bytes32 private immutable _hashedVersion;\\n\\n    ShortString private immutable _name;\\n    ShortString private immutable _version;\\n    string private _nameFallback;\\n    string private _versionFallback;\\n\\n    /**\\n     * @dev Initializes the domain separator and parameter caches.\\n     *\\n     * The meaning of `name` and `version` is specified in\\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\\n     *\\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\\n     * - `version`: the current major version of the signing domain.\\n     *\\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\\n     * contract upgrade].\\n     */\\n    constructor(string memory name, string memory version) {\\n        _name = name.toShortStringWithFallback(_nameFallback);\\n        _version = version.toShortStringWithFallback(_versionFallback);\\n        _hashedName = keccak256(bytes(name));\\n        _hashedVersion = keccak256(bytes(version));\\n\\n        _cachedChainId = block.chainid;\\n        _cachedDomainSeparator = _buildDomainSeparator();\\n        _cachedThis = address(this);\\n    }\\n\\n    /**\\n     * @dev Returns the domain separator for the current chain.\\n     */\\n    function _domainSeparatorV4() internal view returns (bytes32) {\\n        if (address(this) == _cachedThis && block.chainid == _cachedChainId) {\\n            return _cachedDomainSeparator;\\n        } else {\\n            return _buildDomainSeparator();\\n        }\\n    }\\n\\n    function _buildDomainSeparator() private view returns (bytes32) {\\n        return keccak256(abi.encode(_TYPE_HASH, _hashedName, _hashedVersion, block.chainid, address(this)));\\n    }\\n\\n    /**\\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\\n     * function returns the hash of the fully encoded EIP712 message for this domain.\\n     *\\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\\n     *\\n     * ```solidity\\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\\n     *     keccak256(\\\"Mail(address to,string contents)\\\"),\\n     *     mailTo,\\n     *     keccak256(bytes(mailContents))\\n     * )));\\n     * address signer = ECDSA.recover(digest, signature);\\n     * ```\\n     */\\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\\n        return ECDSA.toTypedDataHash(_domainSeparatorV4(), structHash);\\n    }\\n\\n    /**\\n     * @dev See {EIP-5267}.\\n     *\\n     * _Available since v4.9._\\n     */\\n    function eip712Domain()\\n        public\\n        view\\n        virtual\\n        override\\n        returns (\\n            bytes1 fields,\\n            string memory name,\\n            string memory version,\\n            uint256 chainId,\\n            address verifyingContract,\\n            bytes32 salt,\\n            uint256[] memory extensions\\n        )\\n    {\\n        return (\\n            hex\\\"0f\\\", // 01111\\n            _name.toStringWithFallback(_nameFallback),\\n            _version.toStringWithFallback(_versionFallback),\\n            block.chainid,\\n            address(this),\\n            bytes32(0),\\n            new uint256[](0)\\n        );\\n    }\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts/utils/Counters.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\"\r\n    },\r\n    \"node_modules/@gearbox-protocol/core-v2/contracts/interfaces/IVersion.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// Gearbox Protocol. Generalized leverage for DeFi protocols\\n// (c) Gearbox Holdings, 2022\\npragma solidity ^0.8.10;\\n\\n/// @title Version interface\\n/// @notice Defines contract version\\ninterface IVersion {\\n    /// @notice Contract version\\n    function version() external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"node_modules/@gearbox-protocol/core-v3/contracts/libraries/BitMask.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n// Gearbox Protocol. Generalized leverage for DeFi protocols\\n// (c) Gearbox Foundation, 2023.\\npragma solidity ^0.8.17;\\n\\nimport {IncorrectParameterException} from \\\"../interfaces/IExceptions.sol\\\";\\n\\nuint256 constant UNDERLYING_TOKEN_MASK = 1;\\n\\n/// @title Bit mask library\\n/// @notice Implements functions that manipulate bit masks\\n///         Bit masks are utilized extensively by Gearbox to efficiently store token sets (enabled tokens on accounts\\n///         or forbidden tokens) and check for set inclusion. A mask is a uint256 number that has its i-th bit set to\\n///         1 if i-th item is included into the set. For example, each token has a mask equal to 2**i, so set inclusion\\n///         can be checked by checking tokenMask & setMask != 0.\\nlibrary BitMask {\\n    /// @dev Calculates an index of an item based on its mask (using a binary search)\\n    /// @dev The input should always have only 1 bit set, otherwise the result may be unpredictable\\n    function calcIndex(uint256 mask) internal pure returns (uint8 index) {\\n        if (mask == 0) revert IncorrectParameterException(); // U:[BM-1]\\n        uint16 lb = 0; // U:[BM-2]\\n        uint16 ub = 256; // U:[BM-2]\\n        uint16 mid = 128; // U:[BM-2]\\n\\n        unchecked {\\n            while (true) {\\n                uint256 newMask = 1 << mid;\\n                if (newMask & mask != 0) return uint8(mid); // U:[BM-2]\\n\\n                if (newMask > mask) ub = mid; // U:[BM-2]\\n\\n                else lb = mid; // U:[BM-2]\\n                mid = (lb + ub) >> 1; // U:[BM-2]\\n            }\\n        }\\n    }\\n\\n    /// @dev Calculates the number of `1` bits\\n    /// @param enabledTokensMask Bit mask to compute the number of `1` bits in\\n    function calcEnabledTokens(uint256 enabledTokensMask) internal pure returns (uint256 totalTokensEnabled) {\\n        unchecked {\\n            while (enabledTokensMask > 0) {\\n                enabledTokensMask &= enabledTokensMask - 1; // U:[BM-3]\\n                ++totalTokensEnabled; // U:[BM-3]\\n            }\\n        }\\n    }\\n\\n    /// @dev Enables bits from the second mask in the first mask\\n    /// @param enabledTokenMask The initial mask\\n    /// @param bitsToEnable Mask of bits to enable\\n    function enable(uint256 enabledTokenMask, uint256 bitsToEnable) internal pure returns (uint256) {\\n        return enabledTokenMask | bitsToEnable; // U:[BM-4]\\n    }\\n\\n    /// @dev Disables bits from the second mask in the first mask\\n    /// @param enabledTokenMask The initial mask\\n    /// @param bitsToDisable Mask of bits to disable\\n    function disable(uint256 enabledTokenMask, uint256 bitsToDisable) internal pure returns (uint256) {\\n        return enabledTokenMask & ~bitsToDisable; // U:[BM-4]\\n    }\\n\\n    /// @dev Computes a new mask with sets of new enabled and disabled bits\\n    /// @dev bitsToEnable and bitsToDisable are applied sequentially to original mask\\n    /// @param enabledTokensMask The initial mask\\n    /// @param bitsToEnable Mask with bits to enable\\n    /// @param bitsToDisable Mask with bits to disable\\n    function enableDisable(uint256 enabledTokensMask, uint256 bitsToEnable, uint256 bitsToDisable)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        return (enabledTokensMask | bitsToEnable) & (~bitsToDisable); // U:[BM-5]\\n    }\\n\\n    /// @dev Enables bits from the second mask in the first mask, skipping specified bits\\n    /// @param enabledTokenMask The initial mask\\n    /// @param bitsToEnable Mask with bits to enable\\n    /// @param invertedSkipMask An inversion of mask of immutable bits\\n    function enable(uint256 enabledTokenMask, uint256 bitsToEnable, uint256 invertedSkipMask)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        return enabledTokenMask | (bitsToEnable & invertedSkipMask); // U:[BM-6]\\n    }\\n\\n    /// @dev Disables bits from the second mask in the first mask, skipping specified bits\\n    /// @param enabledTokenMask The initial mask\\n    /// @param bitsToDisable Mask with bits to disable\\n    /// @param invertedSkipMask An inversion of mask of immutable bits\\n    function disable(uint256 enabledTokenMask, uint256 bitsToDisable, uint256 invertedSkipMask)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        return enabledTokenMask & (~(bitsToDisable & invertedSkipMask)); // U:[BM-6]\\n    }\\n\\n    /// @dev Computes a new mask with sets of new enabled and disabled bits, skipping some bits\\n    /// @dev bitsToEnable and bitsToDisable are applied sequentially to original mask. Skipmask is applied in both cases.\\n    /// @param enabledTokensMask The initial mask\\n    /// @param bitsToEnable Mask with bits to enable\\n    /// @param bitsToDisable Mask with bits to disable\\n    /// @param invertedSkipMask An inversion of mask of immutable bits\\n    function enableDisable(\\n        uint256 enabledTokensMask,\\n        uint256 bitsToEnable,\\n        uint256 bitsToDisable,\\n        uint256 invertedSkipMask\\n    ) internal pure returns (uint256) {\\n        return (enabledTokensMask | (bitsToEnable & invertedSkipMask)) & (~(bitsToDisable & invertedSkipMask)); // U:[BM-7]\\n    }\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts/security/Pausable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\"\r\n    },\r\n    \"node_modules/@gearbox-protocol/core-v2/contracts/interfaces/IACL.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// Gearbox Protocol. Generalized leverage for DeFi protocols\\n// (c) Gearbox Holdings, 2022\\npragma solidity ^0.8.10;\\nimport { IVersion } from \\\"./IVersion.sol\\\";\\n\\ninterface IACLExceptions {\\n    /// @dev Thrown when attempting to delete an address from a set that is not a pausable admin\\n    error AddressNotPausableAdminException(address addr);\\n\\n    /// @dev Thrown when attempting to delete an address from a set that is not a unpausable admin\\n    error AddressNotUnpausableAdminException(address addr);\\n}\\n\\ninterface IACLEvents {\\n    /// @dev Emits when a new admin is added that can pause contracts\\n    event PausableAdminAdded(address indexed newAdmin);\\n\\n    /// @dev Emits when a Pausable admin is removed\\n    event PausableAdminRemoved(address indexed admin);\\n\\n    /// @dev Emits when a new admin is added that can unpause contracts\\n    event UnpausableAdminAdded(address indexed newAdmin);\\n\\n    /// @dev Emits when an Unpausable admin is removed\\n    event UnpausableAdminRemoved(address indexed admin);\\n}\\n\\n/// @title ACL interface\\ninterface IACL is IACLEvents, IACLExceptions, IVersion {\\n    /// @dev Returns true if the address is a pausable admin and false if not\\n    /// @param addr Address to check\\n    function isPausableAdmin(address addr) external view returns (bool);\\n\\n    /// @dev Returns true if the address is unpausable admin and false if not\\n    /// @param addr Address to check\\n    function isUnpausableAdmin(address addr) external view returns (bool);\\n\\n    /// @dev Returns true if an address has configurator rights\\n    /// @param account Address to check\\n    function isConfigurator(address account) external view returns (bool);\\n\\n    /// @dev Returns address of configurator\\n    function owner() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"node_modules/@gearbox-protocol/core-v3/contracts/traits/ACLTrait.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n// Gearbox Protocol. Generalized leverage for DeFi protocols\\n// (c) Gearbox Foundation, 2023.\\npragma solidity ^0.8.17;\\n\\nimport {IACL} from \\\"@gearbox-protocol/core-v2/contracts/interfaces/IACL.sol\\\";\\n\\nimport {AP_ACL, IAddressProviderV3, NO_VERSION_CONTROL} from \\\"../interfaces/IAddressProviderV3.sol\\\";\\nimport {CallerNotConfiguratorException} from \\\"../interfaces/IExceptions.sol\\\";\\n\\nimport {SanityCheckTrait} from \\\"./SanityCheckTrait.sol\\\";\\n\\n/// @title ACL trait\\n/// @notice Utility class for ACL (access-control list) consumers\\nabstract contract ACLTrait is SanityCheckTrait {\\n    /// @notice ACL contract address\\n    address public immutable acl;\\n\\n    /// @notice Constructor\\n    /// @param addressProvider Address provider contract address\\n    constructor(address addressProvider) nonZeroAddress(addressProvider) {\\n        acl = IAddressProviderV3(addressProvider).getAddressOrRevert(AP_ACL, NO_VERSION_CONTROL);\\n    }\\n\\n    /// @dev Ensures that function caller has configurator role\\n    modifier configuratorOnly() {\\n        _ensureCallerIsConfigurator();\\n        _;\\n    }\\n\\n    /// @dev Reverts if the caller is not the configurator\\n    /// @dev Used to cut contract size on modifiers\\n    function _ensureCallerIsConfigurator() internal view {\\n        if (!_isConfigurator({account: msg.sender})) {\\n            revert CallerNotConfiguratorException();\\n        }\\n    }\\n\\n    /// @dev Checks whether given account has configurator role\\n    function _isConfigurator(address account) internal view returns (bool) {\\n        return IACL(acl).isConfigurator(account);\\n    }\\n}\\n\"\r\n    },\r\n    \"node_modules/@gearbox-protocol/core-v3/contracts/traits/ReentrancyGuardTrait.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n// Gearbox Protocol. Generalized leverage for DeFi protocols\\n// (c) Gearbox Foundation, 2023.\\npragma solidity ^0.8.17;\\n\\nuint8 constant NOT_ENTERED = 1;\\nuint8 constant ENTERED = 2;\\n\\n/// @title Reentrancy guard trait\\n/// @notice Same as OpenZeppelin's `ReentrancyGuard` but only uses 1 byte of storage instead of 32\\nabstract contract ReentrancyGuardTrait {\\n    uint8 internal _reentrancyStatus = NOT_ENTERED;\\n\\n    /// @dev Prevents a contract from calling itself, directly or indirectly.\\n    /// Calling a `nonReentrant` function from another `nonReentrant`\\n    /// function is not supported. It is possible to prevent this from happening\\n    /// by making the `nonReentrant` function external, and making it call a\\n    /// `private` function that does the actual work.\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        _ensureNotEntered();\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _reentrancyStatus = ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _reentrancyStatus = NOT_ENTERED;\\n    }\\n\\n    /// @dev Reverts if the contract is currently entered\\n    /// @dev Used to cut contract size on modifiers\\n    function _ensureNotEntered() internal view {\\n        require(_reentrancyStatus != ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n    }\\n}\\n\"\r\n    },\r\n    \"node_modules/@gearbox-protocol/core-v2/contracts/interfaces/IContractsRegister.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// Gearbox Protocol. Generalized leverage for DeFi protocols\\n// (c) Gearbox Holdings, 2022\\npragma solidity ^0.8.10;\\nimport { IVersion } from \\\"./IVersion.sol\\\";\\n\\ninterface IContractsRegisterEvents {\\n    /// @dev Emits when a new pool is registered in the system\\n    event NewPoolAdded(address indexed pool);\\n\\n    /// @dev Emits when a new Credit Manager is registered in the system\\n    event NewCreditManagerAdded(address indexed creditManager);\\n}\\n\\ninterface IContractsRegister is IContractsRegisterEvents, IVersion {\\n    //\\n    // POOLS\\n    //\\n\\n    /// @dev Returns the array of registered pools\\n    function getPools() external view returns (address[] memory);\\n\\n    /// @dev Returns a pool address from the list under the passed index\\n    /// @param i Index of the pool to retrieve\\n    function pools(uint256 i) external view returns (address);\\n\\n    /// @return Returns the number of registered pools\\n    function getPoolsCount() external view returns (uint256);\\n\\n    /// @dev Returns true if the passed address is a pool\\n    function isPool(address) external view returns (bool);\\n\\n    //\\n    // CREDIT MANAGERS\\n    //\\n\\n    /// @dev Returns the array of registered Credit Managers\\n    function getCreditManagers() external view returns (address[] memory);\\n\\n    /// @dev Returns a Credit Manager's address from the list under the passed index\\n    /// @param i Index of the Credit Manager to retrieve\\n    function creditManagers(uint256 i) external view returns (address);\\n\\n    /// @return Returns the number of registered Credit Managers\\n    function getCreditManagersCount() external view returns (uint256);\\n\\n    /// @dev Returns true if the passed address is a Credit Manager\\n    function isCreditManager(address) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"node_modules/@gearbox-protocol/core-v3/contracts/traits/SanityCheckTrait.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n// Gearbox Protocol. Generalized leverage for DeFi protocols\\n// (c) Gearbox Foundation, 2023.\\npragma solidity ^0.8.17;\\n\\nimport {ZeroAddressException} from \\\"../interfaces/IExceptions.sol\\\";\\n\\n/// @title Sanity check trait\\nabstract contract SanityCheckTrait {\\n    /// @dev Ensures that passed address is non-zero\\n    modifier nonZeroAddress(address addr) {\\n        _revertIfZeroAddress(addr);\\n        _;\\n    }\\n\\n    /// @dev Reverts if address is zero\\n    function _revertIfZeroAddress(address addr) private pure {\\n        if (addr == address(0)) revert ZeroAddressException();\\n    }\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts/utils/ShortStrings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/ShortStrings.sol)\\n\\npragma solidity ^0.8.8;\\n\\nimport \\\"./StorageSlot.sol\\\";\\n\\n// | string  | 0xAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA   |\\n// | length  | 0x                                                              BB |\\ntype ShortString is bytes32;\\n\\n/**\\n * @dev This library provides functions to convert short memory strings\\n * into a `ShortString` type that can be used as an immutable variable.\\n *\\n * Strings of arbitrary length can be optimized using this library if\\n * they are short enough (up to 31 bytes) by packing them with their\\n * length (1 byte) in a single EVM word (32 bytes). Additionally, a\\n * fallback mechanism can be used for every other case.\\n *\\n * Usage example:\\n *\\n * ```solidity\\n * contract Named {\\n *     using ShortStrings for *;\\n *\\n *     ShortString private immutable _name;\\n *     string private _nameFallback;\\n *\\n *     constructor(string memory contractName) {\\n *         _name = contractName.toShortStringWithFallback(_nameFallback);\\n *     }\\n *\\n *     function name() external view returns (string memory) {\\n *         return _name.toStringWithFallback(_nameFallback);\\n *     }\\n * }\\n * ```\\n */\\nlibrary ShortStrings {\\n    // Used as an identifier for strings longer than 31 bytes.\\n    bytes32 private constant _FALLBACK_SENTINEL = 0x00000000000000000000000000000000000000000000000000000000000000FF;\\n\\n    error StringTooLong(string str);\\n    error InvalidShortString();\\n\\n    /**\\n     * @dev Encode a string of at most 31 chars into a `ShortString`.\\n     *\\n     * This will trigger a `StringTooLong` error is the input string is too long.\\n     */\\n    function toShortString(string memory str) internal pure returns (ShortString) {\\n        bytes memory bstr = bytes(str);\\n        if (bstr.length > 31) {\\n            revert StringTooLong(str);\\n        }\\n        return ShortString.wrap(bytes32(uint256(bytes32(bstr)) | bstr.length));\\n    }\\n\\n    /**\\n     * @dev Decode a `ShortString` back to a \\\"normal\\\" string.\\n     */\\n    function toString(ShortString sstr) internal pure returns (string memory) {\\n        uint256 len = byteLength(sstr);\\n        // using `new string(len)` would work locally but is not memory safe.\\n        string memory str = new string(32);\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(str, len)\\n            mstore(add(str, 0x20), sstr)\\n        }\\n        return str;\\n    }\\n\\n    /**\\n     * @dev Return the length of a `ShortString`.\\n     */\\n    function byteLength(ShortString sstr) internal pure returns (uint256) {\\n        uint256 result = uint256(ShortString.unwrap(sstr)) & 0xFF;\\n        if (result > 31) {\\n            revert InvalidShortString();\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Encode a string into a `ShortString`, or write it to storage if it is too long.\\n     */\\n    function toShortStringWithFallback(string memory value, string storage store) internal returns (ShortString) {\\n        if (bytes(value).length < 32) {\\n            return toShortString(value);\\n        } else {\\n            StorageSlot.getStringSlot(store).value = value;\\n            return ShortString.wrap(_FALLBACK_SENTINEL);\\n        }\\n    }\\n\\n    /**\\n     * @dev Decode a string that was encoded to `ShortString` or written to storage using {setWithFallback}.\\n     */\\n    function toStringWithFallback(ShortString value, string storage store) internal pure returns (string memory) {\\n        if (ShortString.unwrap(value) != _FALLBACK_SENTINEL) {\\n            return toString(value);\\n        } else {\\n            return store;\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the length of a string that was encoded to `ShortString` or written to storage using {setWithFallback}.\\n     *\\n     * WARNING: This will return the \\\"byte length\\\" of the string. This may not reflect the actual length in terms of\\n     * actual characters as the UTF-8 encoding of a single character can span over multiple bytes.\\n     */\\n    function byteLengthWithFallback(ShortString value, string storage store) internal view returns (uint256) {\\n        if (ShortString.unwrap(value) != _FALLBACK_SENTINEL) {\\n            return byteLength(value);\\n        } else {\\n            return bytes(store).length;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts/interfaces/IERC5267.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC5267.sol)\\n\\npragma solidity ^0.8.0;\\n\\ninterface IERC5267 {\\n    /**\\n     * @dev MAY be emitted to signal that the domain could have changed.\\n     */\\n    event EIP712DomainChanged();\\n\\n    /**\\n     * @dev returns the fields and values that describe the domain separator used by this contract for EIP-712\\n     * signature.\\n     */\\n    function eip712Domain()\\n        external\\n        view\\n        returns (\\n            bytes1 fields,\\n            string memory name,\\n            string memory version,\\n            uint256 chainId,\\n            address verifyingContract,\\n            bytes32 salt,\\n            uint256[] memory extensions\\n        );\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts/utils/math/SignedMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts/utils/StorageSlot.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [\r\n      \"@1inch/=node_modules/@1inch/\",\r\n      \"@chainlink/=node_modules/@chainlink/\",\r\n      \"@eth-optimism/=node_modules/@eth-optimism/\",\r\n      \"@gearbox-protocol/=node_modules/@gearbox-protocol/\",\r\n      \"@openzeppelin/=node_modules/@openzeppelin/\",\r\n      \"@redstone-finance/=node_modules/@redstone-finance/\",\r\n      \"ds-test/=lib/forge-std/lib/ds-test/src/\",\r\n      \"eth-gas-reporter/=node_modules/eth-gas-reporter/\",\r\n      \"forge-std/=lib/forge-std/src/\"\r\n    ],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1000\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": false,\r\n      \"bytecodeHash\": \"ipfs\"\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addressProvider_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"underlyingToken_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"interestRateModel_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalDebtLimit_\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"CallerNotConfiguratorException\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CallerNotControllerException\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CallerNotCreditManagerException\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CallerNotPausableAdminException\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CallerNotPoolQuotaKeeperException\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CallerNotUnpausableAdminException\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CreditManagerCantBorrowException\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"IncompatibleCreditManagerException\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"IncompatiblePoolQuotaKeeperException\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"IncorrectParameterException\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidShortString\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RegisteredCreditManagerOnlyException\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SafeTransferFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SafeTransferFromFailed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"str\",\"type\":\"string\"}],\"name\":\"StringTooLong\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAddressException\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"creditManager\",\"type\":\"address\"}],\"name\":\"AddCreditManager\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"creditManager\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"creditAccount\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Borrow\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"EIP712DomainChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"creditManager\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"loss\",\"type\":\"uint256\"}],\"name\":\"IncurUncoveredLoss\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newController\",\"type\":\"address\"}],\"name\":\"NewController\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"onBehalfOf\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"referralCode\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Refer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"creditManager\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"borrowedAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"profit\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"loss\",\"type\":\"uint256\"}],\"name\":\"Repay\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"creditManager\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newLimit\",\"type\":\"uint256\"}],\"name\":\"SetCreditManagerDebtLimit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newInterestRateModel\",\"type\":\"address\"}],\"name\":\"SetInterestRateModel\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newPoolQuotaKeeper\",\"type\":\"address\"}],\"name\":\"SetPoolQuotaKeeper\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"}],\"name\":\"SetTotalDebtLimit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"SetWithdrawFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acl\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"addressProvider\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"asset\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"availableLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseInterestIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseInterestIndexLU\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseInterestRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractsRegister\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"controller\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"convertToAssets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"}],\"name\":\"convertToShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"creditManager\",\"type\":\"address\"}],\"name\":\"creditManagerBorrowable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"borrowable\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"creditManager\",\"type\":\"address\"}],\"name\":\"creditManagerBorrowed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"creditManager\",\"type\":\"address\"}],\"name\":\"creditManagerDebtLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"creditManagers\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"referralCode\",\"type\":\"uint256\"}],\"name\":\"depositWithReferral\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"eip712Domain\",\"outputs\":[{\"internalType\":\"bytes1\",\"name\":\"fields\",\"type\":\"bytes1\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"version\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"verifyingContract\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"},{\"internalType\":\"uint256[]\",\"name\":\"extensions\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"expectedLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"expectedLiquidityLU\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"interestRateModel\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastBaseInterestUpdate\",\"outputs\":[{\"internalType\":\"uint40\",\"name\":\"\",\"type\":\"uint40\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastQuotaRevenueUpdate\",\"outputs\":[{\"internalType\":\"uint40\",\"name\":\"\",\"type\":\"uint40\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"borrowedAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"creditAccount\",\"type\":\"address\"}],\"name\":\"lendCreditAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"maxDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"maxMint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"maxRedeem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"maxWithdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"referralCode\",\"type\":\"uint256\"}],\"name\":\"mintWithReferral\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolQuotaKeeper\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"}],\"name\":\"previewDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"previewMint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"previewRedeem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"}],\"name\":\"previewWithdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"quotaRevenue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"redeem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"repaidAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"profit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"loss\",\"type\":\"uint256\"}],\"name\":\"repayCreditAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newController\",\"type\":\"address\"}],\"name\":\"setController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"creditManager\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"newLimit\",\"type\":\"uint256\"}],\"name\":\"setCreditManagerDebtLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newInterestRateModel\",\"type\":\"address\"}],\"name\":\"setInterestRateModel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newPoolQuotaKeeper\",\"type\":\"address\"}],\"name\":\"setPoolQuotaKeeper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newQuotaRevenue\",\"type\":\"uint256\"}],\"name\":\"setQuotaRevenue\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newLimit\",\"type\":\"uint256\"}],\"name\":\"setTotalDebtLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newWithdrawFee\",\"type\":\"uint256\"}],\"name\":\"setWithdrawFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"supplyRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAssets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalBorrowed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDebtLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"underlyingToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"quotaRevenueDelta\",\"type\":\"int256\"}],\"name\":\"updateQuotaRevenue\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawFee\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "PoolV3", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "1000", "ConstructorArguments": "0000000000000000000000009ea7b04da02a5373317d745c1571c84aad03321d000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb48000000000000000000000000ff767bdcd76f6e5af75957e15d5b2a8bfc43b4bf00000000000000000000000000000000000000000000000000005af3107a400000000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000d547261646520555344432076330000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000076455534443563300000000000000000000000000000000000000000000000000", "EVMVersion": "london", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}