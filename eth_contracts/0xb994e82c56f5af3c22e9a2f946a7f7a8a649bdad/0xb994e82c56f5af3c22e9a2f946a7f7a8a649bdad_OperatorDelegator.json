{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/proxy/beacon/IBeacon.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Delegation/IOperatorDelegator.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.19;\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"../EigenLayer/interfaces/IStrategyManager.sol\\\";\\nimport \\\"../EigenLayer/interfaces/IDelegationManager.sol\\\";\\nimport \\\"../EigenLayer/interfaces/IEigenPod.sol\\\";\\n\\ninterface IOperatorDelegator {\\n    function getTokenBalanceFromStrategy(IERC20 token) external view returns (uint256);\\n\\n    function deposit(IERC20 _token, uint256 _tokenAmount) external returns (uint256 shares);\\n\\n    // Note: Withdraws disabled for this release\\n    // function startWithdrawal(IERC20 _token, uint256 _tokenAmount) external returns (bytes32);\\n\\n    // function completeWithdrawal(\\n    //     IStrategyManager.DeprecatedStruct_QueuedWithdrawal calldata _withdrawal,\\n    //     IERC20 _token,\\n    //     uint256 _middlewareTimesIndex,\\n    //     address _sendToAddress\\n    // ) external;\\n\\n    function getStakedETHBalance() external view returns (uint256);\\n\\n    function stakeEth(\\n        bytes calldata pubkey,\\n        bytes calldata signature,\\n        bytes32 depositDataRoot\\n    ) external payable;\\n\\n    function eigenPod() external view returns (IEigenPod);\\n\\n    function pendingUnstakedDelayedWithdrawalAmount() external view returns (uint256);\\n\\n    function delegateAddress() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"contracts/Delegation/OperatorDelegator.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.19;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\nimport \\\"../Permissions/IRoleManager.sol\\\";\\nimport \\\"./OperatorDelegatorStorage.sol\\\";\\nimport \\\"../EigenLayer/interfaces/IDelegationManager.sol\\\";\\nimport \\\"../EigenLayer/interfaces/ISignatureUtils.sol\\\";\\nimport \\\"../EigenLayer/libraries/BeaconChainProofs.sol\\\";\\nimport \\\"../Errors/Errors.sol\\\";\\n\\n/// @dev This contract will be responsible for interacting with Eigenlayer\\n/// Each of these contracts deployed will be delegated to one specific operator\\n/// This contract can handle multiple ERC20 tokens, all of which will be delegated to the same operator\\n/// Each supported ERC20 token will be pointed at a single Strategy contract in EL\\n/// Only the RestakeManager should be interacting with this contract for EL interactions.\\ncontract OperatorDelegator is\\n    Initializable,\\n    ReentrancyGuardUpgradeable,\\n    OperatorDelegatorStorageV4\\n{\\n    using SafeERC20 for IERC20;\\n    using BeaconChainProofs for *;\\n\\n    uint256 internal constant GWEI_TO_WEI = 1e9;\\n\\n    address public constant IS_NATIVE = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n\\n    /// @dev Max stakedButNotVerifiedEth amount cap per validator\\n    uint256 public constant MAX_STAKE_BUT_NOT_VERIFIED_AMOUNT = 32 ether;\\n\\n    /// @dev Nominal base gas spent value by admin\\n    uint256 internal constant NOMINAL_BASE_GAS_SPENT = 50_000;\\n\\n    event TokenStrategyUpdated(IERC20 token, IStrategy strategy);\\n    event DelegationAddressUpdated(address delegateAddress);\\n    event RewardsForwarded(address rewardDestination, uint256 amount);\\n\\n    event WithdrawStarted(\\n        bytes32 withdrawRoot,\\n        address staker,\\n        address delegatedTo,\\n        address withdrawer,\\n        uint nonce,\\n        uint startBlock,\\n        IStrategy[] strategies,\\n        uint256[] shares\\n    );\\n\\n    event WithdrawCompleted(bytes32 withdrawalRoot, IStrategy[] strategies, uint256[] shares);\\n\\n    event GasSpent(address admin, uint256 gasSpent);\\n    event GasRefunded(address admin, uint256 gasRefunded);\\n    event BaseGasAmountSpentUpdated(uint256 oldBaseGasAmountSpent, uint256 newBaseGasAmountSpent);\\n\\n    /// @dev Allows only a whitelisted address to configure the contract\\n    modifier onlyOperatorDelegatorAdmin() {\\n        if (!roleManager.isOperatorDelegatorAdmin(msg.sender)) revert NotOperatorDelegatorAdmin();\\n        _;\\n    }\\n\\n    /// @dev Allows only the RestakeManager address to call functions\\n    modifier onlyRestakeManager() {\\n        if (msg.sender != address(restakeManager)) revert NotRestakeManager();\\n        _;\\n    }\\n\\n    /// @dev Allows only a whitelisted address to configure the contract\\n    modifier onlyNativeEthRestakeAdmin() {\\n        if (!roleManager.isNativeEthRestakeAdmin(msg.sender)) revert NotNativeEthRestakeAdmin();\\n        _;\\n    }\\n\\n    modifier onlyEmergencyWithdrawTrackingAdmin() {\\n        if (!roleManager.isEmergencyWithdrawTrackingAdmin(msg.sender))\\n            revert NotEmergencyWithdrawTrackingAdmin();\\n        _;\\n    }\\n\\n    /// @dev Prevents implementation contract from being initialized.\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    /// @dev Initializes the contract with initial vars\\n    function initialize(\\n        IRoleManager _roleManager,\\n        IStrategyManager _strategyManager,\\n        IRestakeManager _restakeManager,\\n        IDelegationManager _delegationManager,\\n        IEigenPodManager _eigenPodManager\\n    ) external initializer {\\n        if (address(_roleManager) == address(0x0)) revert InvalidZeroInput();\\n        if (address(_strategyManager) == address(0x0)) revert InvalidZeroInput();\\n        if (address(_restakeManager) == address(0x0)) revert InvalidZeroInput();\\n        if (address(_delegationManager) == address(0x0)) revert InvalidZeroInput();\\n        if (address(_eigenPodManager) == address(0x0)) revert InvalidZeroInput();\\n\\n        __ReentrancyGuard_init();\\n\\n        roleManager = _roleManager;\\n        strategyManager = _strategyManager;\\n        restakeManager = _restakeManager;\\n        delegationManager = _delegationManager;\\n        eigenPodManager = _eigenPodManager;\\n\\n        // Deploy new EigenPod\\n        eigenPod = IEigenPod(eigenPodManager.createPod());\\n    }\\n\\n    /// @dev Migrates the M1 pods to M2 pods by calling activateRestaking on eigenPod\\n    /// @dev Should be a permissioned call by onlyNativeEthRestakeAdmin\\n    function activateRestaking() external nonReentrant onlyNativeEthRestakeAdmin {\\n        eigenPod.activateRestaking();\\n    }\\n\\n    /// @dev Sets the strategy for a given token - setting strategy to 0x0 removes the ability to deposit and withdraw token\\n    function setTokenStrategy(\\n        IERC20 _token,\\n        IStrategy _strategy\\n    ) external nonReentrant onlyOperatorDelegatorAdmin {\\n        if (address(_token) == address(0x0)) revert InvalidZeroInput();\\n\\n        // check revert if strategy underlying does not match\\n        if (\\n            address(_strategy) != address(0x0) &&\\n            ((_strategy.underlyingToken() != _token) ||\\n                !strategyManager.strategyIsWhitelistedForDeposit(_strategy))\\n        ) revert InvalidStrategy();\\n\\n        // check revert if strategy already set and shares greater than 0\\n        if (\\n            address(tokenStrategyMapping[_token]) != address(0x0) &&\\n            tokenStrategyMapping[_token].userUnderlyingView(address(this)) > 0\\n        ) revert NonZeroUnderlyingStrategyExist();\\n\\n        tokenStrategyMapping[_token] = _strategy;\\n        emit TokenStrategyUpdated(_token, _strategy);\\n    }\\n\\n    /// @dev Sets the address to delegate tokens to in EigenLayer -- THIS CAN ONLY BE SET ONCE\\n    function setDelegateAddress(\\n        address _delegateAddress,\\n        ISignatureUtils.SignatureWithExpiry memory approverSignatureAndExpiry,\\n        bytes32 approverSalt\\n    ) external nonReentrant onlyOperatorDelegatorAdmin {\\n        if (address(_delegateAddress) == address(0x0)) revert InvalidZeroInput();\\n        if (address(delegateAddress) != address(0x0)) revert DelegateAddressAlreadySet();\\n\\n        delegateAddress = _delegateAddress;\\n\\n        delegationManager.delegateTo(delegateAddress, approverSignatureAndExpiry, approverSalt);\\n\\n        emit DelegationAddressUpdated(_delegateAddress);\\n    }\\n\\n    function setBaseGasAmountSpent(\\n        uint256 _baseGasAmountSpent\\n    ) external nonReentrant onlyOperatorDelegatorAdmin {\\n        if (_baseGasAmountSpent == 0) revert InvalidZeroInput();\\n        emit BaseGasAmountSpentUpdated(baseGasAmountSpent, _baseGasAmountSpent);\\n        baseGasAmountSpent = _baseGasAmountSpent;\\n    }\\n\\n    /// @dev Deposit tokens into the EigenLayer.  This call assumes any balance of tokens in this contract will be delegated\\n    /// so do not directly send tokens here or they will be delegated and attributed to the next caller.\\n    /// @return shares The amount of new shares in the `strategy` created as part of the action.\\n    function deposit(\\n        IERC20 token,\\n        uint256 tokenAmount\\n    ) external nonReentrant onlyRestakeManager returns (uint256 shares) {\\n        if (address(tokenStrategyMapping[token]) == address(0x0) || tokenAmount == 0)\\n            revert InvalidZeroInput();\\n\\n        // Move the tokens into this contract\\n        token.safeTransferFrom(msg.sender, address(this), tokenAmount);\\n\\n        return _deposit(token, tokenAmount);\\n    }\\n\\n    /**\\n     * @notice  Perform necessary checks on input data and deposits into EigenLayer\\n     * @param   _token  token interface to deposit\\n     * @param   _tokenAmount  amount of given token to deposit\\n     * @return  shares  shares for deposited amount\\n     */\\n    function _deposit(IERC20 _token, uint256 _tokenAmount) internal returns (uint256 shares) {\\n        // Approve the strategy manager to spend the tokens\\n        _token.safeIncreaseAllowance(address(strategyManager), _tokenAmount);\\n\\n        // Deposit the tokens via the strategy manager\\n        return\\n            strategyManager.depositIntoStrategy(tokenStrategyMapping[_token], _token, _tokenAmount);\\n    }\\n\\n    /// @dev Gets the index of the specific strategy in EigenLayer in the staker's strategy list\\n    function getStrategyIndex(IStrategy _strategy) public view returns (uint256) {\\n        // Get the length of the strategy list for this contract\\n        uint256 strategyLength = strategyManager.stakerStrategyListLength(address(this));\\n\\n        for (uint256 i = 0; i < strategyLength; i++) {\\n            if (strategyManager.stakerStrategyList(address(this), i) == _strategy) {\\n                return i;\\n            }\\n        }\\n\\n        // Not found\\n        revert NotFound();\\n    }\\n\\n    /**\\n     * @notice  Tracks the pending queued withdrawal shares cause by Operator force undelegating the OperatorDelegator\\n     * @dev     permissioned call (onlyEmergencyWithdrawTrackingAdmin),\\n     *          each withdrawal will contain single strategy and respective shares in case of 'ForceUndelegation'.\\n     *          EigenLayer link - https://github.com/Layr-Labs/eigenlayer-contracts/blob/dev/src/contracts/core/DelegationManager.sol#L242\\n     * @param   withdrawals  Withdrawals struct list needs to be tracked\\n     * @param   tokens  list of Tokens undelegated by Operator\\n     */\\n    function emergencyTrackQueuedWithdrawals(\\n        IDelegationManager.Withdrawal[] calldata withdrawals,\\n        IERC20[] calldata tokens\\n    ) external nonReentrant onlyEmergencyWithdrawTrackingAdmin {\\n        // verify array lengths\\n        if (tokens.length != withdrawals.length) revert MismatchedArrayLengths();\\n        for (uint256 i = 0; i < withdrawals.length; ) {\\n            if (address(tokens[i]) == address(0)) revert InvalidZeroInput();\\n            // calculate withdrawalRoot\\n            bytes32 withdrawalRoot = delegationManager.calculateWithdrawalRoot(withdrawals[i]);\\n\\n            // verify withdrawal is not tracked\\n            if (queuedWithdrawal[withdrawalRoot]) revert WithdrawalAlreadyTracked();\\n\\n            // verify withdrawal is pending and protocol not double counting\\n            if (!delegationManager.pendingWithdrawals(withdrawalRoot))\\n                revert WithdrawalAlreadyCompleted();\\n\\n            // verify LST token is not provided if beaconChainETHStrategy in Withdraw Request\\n            if (\\n                address(tokens[i]) != IS_NATIVE &&\\n                withdrawals[i].strategies[0] == delegationManager.beaconChainETHStrategy()\\n            ) revert IncorrectStrategy();\\n\\n            // track queued shares for the token\\n            queuedShares[address(tokens[i])] += withdrawals[i].shares[0];\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice  Starts a withdrawal from specified tokens strategies for given amounts\\n     * @dev     permissioned call (onlyNativeEthRestakeAdmin)\\n     * @param   tokens  list of tokens to withdraw from. For ETH -> 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE\\n     * @param   tokenAmounts  list of token amounts i'th index token in tokens\\n     * @return  bytes32  withdrawal root\\n     */\\n    function queueWithdrawals(\\n        IERC20[] calldata tokens,\\n        uint256[] calldata tokenAmounts\\n    ) external nonReentrant onlyNativeEthRestakeAdmin returns (bytes32) {\\n        // record gas spent\\n        uint256 gasBefore = gasleft();\\n        if (tokens.length != tokenAmounts.length) revert MismatchedArrayLengths();\\n        IDelegationManager.QueuedWithdrawalParams[]\\n            memory queuedWithdrawalParams = new IDelegationManager.QueuedWithdrawalParams[](1);\\n\\n        // set strategies legth for 0th index only\\n        queuedWithdrawalParams[0].strategies = new IStrategy[](tokens.length);\\n        queuedWithdrawalParams[0].shares = new uint256[](tokens.length);\\n\\n        // Save the nonce before starting the withdrawal\\n        uint96 nonce = uint96(delegationManager.cumulativeWithdrawalsQueued(address(this)));\\n\\n        for (uint256 i; i < tokens.length; ) {\\n            if (address(tokens[i]) == IS_NATIVE) {\\n                // set beaconChainEthStrategy for ETH\\n                queuedWithdrawalParams[0].strategies[i] = eigenPodManager.beaconChainETHStrategy();\\n\\n                // set shares for ETH\\n                queuedWithdrawalParams[0].shares[i] = tokenAmounts[i];\\n            } else {\\n                if (address(tokenStrategyMapping[tokens[i]]) == address(0))\\n                    revert InvalidZeroInput();\\n\\n                // set the strategy of the token\\n                queuedWithdrawalParams[0].strategies[i] = tokenStrategyMapping[tokens[i]];\\n\\n                // set the equivalent shares for tokenAmount\\n                queuedWithdrawalParams[0].shares[i] = tokenStrategyMapping[tokens[i]]\\n                    .underlyingToSharesView(tokenAmounts[i]);\\n            }\\n\\n            // set withdrawer as this contract address\\n            queuedWithdrawalParams[0].withdrawer = address(this);\\n\\n            // track shares of tokens withdraw for TVL\\n            queuedShares[address(tokens[i])] += queuedWithdrawalParams[0].shares[i];\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        // queue withdrawal in EigenLayer\\n        bytes32 withdrawalRoot = delegationManager.queueWithdrawals(queuedWithdrawalParams)[0];\\n\\n        // track protocol queued withdrawals\\n        queuedWithdrawal[withdrawalRoot] = true;\\n\\n        // Emit the withdrawal started event\\n        emit WithdrawStarted(\\n            withdrawalRoot,\\n            address(this),\\n            delegateAddress,\\n            address(this),\\n            nonce,\\n            block.number,\\n            queuedWithdrawalParams[0].strategies,\\n            queuedWithdrawalParams[0].shares\\n        );\\n\\n        // update the gas spent for RestakeAdmin\\n        _recordGas(gasBefore, NOMINAL_BASE_GAS_SPENT);\\n\\n        return withdrawalRoot;\\n    }\\n\\n    /**\\n     * @notice  Complete the specified withdrawal,\\n     * @dev     permissioned call (onlyNativeEthRestakeAdmin)\\n     * @param   withdrawal  Withdrawal struct\\n     * @param   tokens  list of tokens to withdraw\\n     * @param   middlewareTimesIndex  is the index in the operator that the staker who triggered the withdrawal was delegated to's middleware times array\\n     */\\n    function completeQueuedWithdrawal(\\n        IDelegationManager.Withdrawal calldata withdrawal,\\n        IERC20[] calldata tokens,\\n        uint256 middlewareTimesIndex\\n    ) external nonReentrant onlyNativeEthRestakeAdmin {\\n        uint256 gasBefore = gasleft();\\n        if (tokens.length != withdrawal.strategies.length) revert MismatchedArrayLengths();\\n\\n        // complete the queued withdrawal from EigenLayer with receiveAsToken set to true\\n        delegationManager.completeQueuedWithdrawal(withdrawal, tokens, middlewareTimesIndex, true);\\n\\n        IWithdrawQueue withdrawQueue = restakeManager.depositQueue().withdrawQueue();\\n        for (uint256 i; i < tokens.length; ) {\\n            if (address(tokens[i]) == address(0)) revert InvalidZeroInput();\\n            if (\\n                address(tokens[i]) != IS_NATIVE &&\\n                withdrawal.strategies[i] == delegationManager.beaconChainETHStrategy()\\n            ) revert IncorrectStrategy();\\n            // deduct queued shares for tracking TVL\\n            queuedShares[address(tokens[i])] -= withdrawal.shares[i];\\n\\n            // check if token is not Native ETH\\n            if (address(tokens[i]) != IS_NATIVE) {\\n                // Check the withdraw buffer and fill if below buffer target\\n                uint256 bufferToFill = withdrawQueue.getBufferDeficit(address(tokens[i]));\\n\\n                // get balance of this contract\\n                uint256 balanceOfToken = tokens[i].balanceOf(address(this));\\n                if (bufferToFill > 0) {\\n                    bufferToFill = (balanceOfToken <= bufferToFill) ? balanceOfToken : bufferToFill;\\n\\n                    // update amount to send to the operator Delegator\\n                    balanceOfToken -= bufferToFill;\\n\\n                    // safe Approve for depositQueue\\n                    tokens[i].safeIncreaseAllowance(\\n                        address(restakeManager.depositQueue()),\\n                        bufferToFill\\n                    );\\n\\n                    // fill Withdraw Buffer via depositQueue\\n                    restakeManager.depositQueue().fillERC20withdrawBuffer(\\n                        address(tokens[i]),\\n                        bufferToFill\\n                    );\\n                }\\n\\n                // Deposit remaining tokens back to eigenLayer\\n                if (balanceOfToken > 0) {\\n                    _deposit(tokens[i], balanceOfToken);\\n                }\\n            }\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        // emits the Withdraw Completed event with withdrawalRoot\\n        emit WithdrawCompleted(\\n            delegationManager.calculateWithdrawalRoot(withdrawal),\\n            withdrawal.strategies,\\n            withdrawal.shares\\n        );\\n        // record current spent gas\\n        _recordGas(gasBefore, NOMINAL_BASE_GAS_SPENT);\\n    }\\n\\n    /// @dev Gets the underlying token amount from the amount of shares + queued withdrawal shares\\n    function getTokenBalanceFromStrategy(IERC20 token) external view returns (uint256) {\\n        return\\n            queuedShares[address(token)] == 0\\n                ? tokenStrategyMapping[token].userUnderlyingView(address(this))\\n                : tokenStrategyMapping[token].userUnderlyingView(address(this)) +\\n                    tokenStrategyMapping[token].sharesToUnderlyingView(\\n                        queuedShares[address(token)]\\n                    );\\n    }\\n\\n    /// @dev Gets the amount of ETH staked in the EigenLayer\\n    function getStakedETHBalance() external view returns (uint256) {\\n        // accounts for current podOwner shares + stakedButNotVerified ETH + queued withdraw shares\\n        int256 podOwnerShares = eigenPodManager.podOwnerShares(address(this));\\n        return\\n            podOwnerShares < 0\\n                ? queuedShares[IS_NATIVE] + stakedButNotVerifiedEth - uint256(-podOwnerShares)\\n                : queuedShares[IS_NATIVE] + stakedButNotVerifiedEth + uint256(podOwnerShares);\\n    }\\n\\n    /// @dev Stake ETH in the EigenLayer\\n    /// Only the Restake Manager should call this function\\n    function stakeEth(\\n        bytes calldata pubkey,\\n        bytes calldata signature,\\n        bytes32 depositDataRoot\\n    ) external payable onlyRestakeManager {\\n        // if validator withdraw credentials is verified\\n        if (eigenPod.validatorStatus(pubkey) == IEigenPod.VALIDATOR_STATUS.INACTIVE) {\\n            bytes32 validatorPubKeyHash = _calculateValidatorPubkeyHash(pubkey);\\n            uint256 validatorCurrentStakedButNotVerifiedEth = validatorStakedButNotVerifiedEth[\\n                validatorPubKeyHash\\n            ];\\n            uint256 _stakedButNotVerifiedEth = msg.value;\\n            uint256 _validatorStakedButNotVerifiedEth = validatorCurrentStakedButNotVerifiedEth +\\n                msg.value;\\n            // check if new value addition is greater than MAX_STAKE_BUT_NOT_VERIFIED_AMOUNT\\n            if (\\n                validatorCurrentStakedButNotVerifiedEth + msg.value >\\n                MAX_STAKE_BUT_NOT_VERIFIED_AMOUNT\\n            ) {\\n                // stakedButNotVerifiedETH per validator max capped to MAX_STAKE_BUT_NOT_VERIFIED_AMOUNT\\n                _stakedButNotVerifiedEth =\\n                    MAX_STAKE_BUT_NOT_VERIFIED_AMOUNT -\\n                    validatorCurrentStakedButNotVerifiedEth;\\n\\n                // validatorStakedButNotVerifiedEth max cap to MAX_STAKE_BUT_NOT_VERIFIED_AMOUNT per validator\\n                _validatorStakedButNotVerifiedEth = MAX_STAKE_BUT_NOT_VERIFIED_AMOUNT;\\n            }\\n            validatorStakedButNotVerifiedEth[\\n                validatorPubKeyHash\\n            ] = _validatorStakedButNotVerifiedEth;\\n            // Increment the staked but not verified ETH\\n            stakedButNotVerifiedEth += _stakedButNotVerifiedEth;\\n        }\\n\\n        // Call the stake function in the EigenPodManager\\n        eigenPodManager.stake{ value: msg.value }(pubkey, signature, depositDataRoot);\\n    }\\n\\n    /// @dev Verifies the withdrawal credentials for a withdrawal\\n    /// This will allow the EigenPodManager to verify the withdrawal credentials and credit the OD with shares\\n    /// Only the native eth restake admin should call this function\\n    function verifyWithdrawalCredentials(\\n        uint64 oracleTimestamp,\\n        BeaconChainProofs.StateRootProof calldata stateRootProof,\\n        uint40[] calldata validatorIndices,\\n        bytes[] calldata withdrawalCredentialProofs,\\n        bytes32[][] calldata validatorFields\\n    ) external onlyNativeEthRestakeAdmin {\\n        uint256 gasBefore = gasleft();\\n\\n        eigenPod.verifyWithdrawalCredentials(\\n            oracleTimestamp,\\n            stateRootProof,\\n            validatorIndices,\\n            withdrawalCredentialProofs,\\n            validatorFields\\n        );\\n\\n        // Decrement the staked but not verified ETH\\n        for (uint256 i = 0; i < validatorFields.length; ) {\\n            bytes32 validatorPubkeyHash = validatorFields[i].getPubkeyHash();\\n            // decrement total stakedButNotVerifiedEth by validatorStakedButNotVerifiedEth\\n            if (validatorStakedButNotVerifiedEth[validatorPubkeyHash] != 0) {\\n                stakedButNotVerifiedEth -= validatorStakedButNotVerifiedEth[validatorPubkeyHash];\\n            } else {\\n                // fallback to decrement total stakedButNotVerifiedEth by MAX_STAKE_BUT_NOT_VERIFIED_AMOUNT\\n                stakedButNotVerifiedEth -= MAX_STAKE_BUT_NOT_VERIFIED_AMOUNT;\\n            }\\n\\n            // set validatorStakedButNotVerifiedEth value to 0\\n            validatorStakedButNotVerifiedEth[validatorPubkeyHash] = 0;\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n        // update the gas spent for RestakeAdmin\\n        _recordGas(gasBefore, baseGasAmountSpent);\\n    }\\n\\n    /**\\n     * @notice  Verify many Withdrawals and process them in the EigenPod\\n     * @dev     For each withdrawal (partial or full), verify it in the EigenPod\\n     *          Only callable by admin.\\n     * @param   oracleTimestamp  .\\n     * @param   stateRootProof  .\\n     * @param   withdrawalProofs  .\\n     * @param   validatorFieldsProofs  .\\n     * @param   validatorFields  .\\n     * @param   withdrawalFields  .\\n     */\\n    function verifyAndProcessWithdrawals(\\n        uint64 oracleTimestamp,\\n        BeaconChainProofs.StateRootProof calldata stateRootProof,\\n        BeaconChainProofs.WithdrawalProof[] calldata withdrawalProofs,\\n        bytes[] calldata validatorFieldsProofs,\\n        bytes32[][] calldata validatorFields,\\n        bytes32[][] calldata withdrawalFields\\n    ) external onlyNativeEthRestakeAdmin {\\n        uint256 gasBefore = gasleft();\\n        eigenPod.verifyAndProcessWithdrawals(\\n            oracleTimestamp,\\n            stateRootProof,\\n            withdrawalProofs,\\n            validatorFieldsProofs,\\n            validatorFields,\\n            withdrawalFields\\n        );\\n        // update the gas spent for RestakeAdmin\\n        _recordGas(gasBefore, baseGasAmountSpent);\\n    }\\n\\n    /**\\n     * @notice  Pull out any ETH in the EigenPod that is not from the beacon chain\\n     * @dev     Only callable by admin\\n     * @param   recipient  Where to send the ETH\\n     * @param   amountToWithdraw  Amount to pull out\\n     */\\n    function withdrawNonBeaconChainETHBalanceWei(\\n        address recipient,\\n        uint256 amountToWithdraw\\n    ) external onlyNativeEthRestakeAdmin {\\n        eigenPod.withdrawNonBeaconChainETHBalanceWei(recipient, amountToWithdraw);\\n    }\\n\\n    /**\\n     * @notice  Recover tokens accidentally sent to EigenPod\\n     * @dev     Only callable by admin\\n     * @param   tokenList  .\\n     * @param   amountsToWithdraw  .\\n     * @param   recipient  .\\n     */\\n    function recoverTokens(\\n        IERC20[] memory tokenList,\\n        uint256[] memory amountsToWithdraw,\\n        address recipient\\n    ) external onlyNativeEthRestakeAdmin {\\n        eigenPod.recoverTokens(tokenList, amountsToWithdraw, recipient);\\n    }\\n\\n    /**\\n     * @notice  Starts a delayed withdraw of the ETH from the EigenPodManager\\n     * @dev     Before the eigenpod is verified, we can sweep out any accumulated ETH from the Consensus layer validator rewards\\n     *         We also want to track the amount in the delayed withdrawal router so we can track the TVL and reward amount accurately\\n     */\\n    function startDelayedWithdrawUnstakedETH() external onlyNativeEthRestakeAdmin {\\n        // Call the start delayed withdraw function in the EigenPodManager\\n        // This will queue up a delayed withdrawal that will be sent back to this address after the timeout\\n        eigenPod.withdrawBeforeRestaking();\\n    }\\n\\n    /**\\n     * @notice  Adds the amount of gas spent for an account\\n     * @dev     Tracks for later redemption from rewards coming from the DWR\\n     * @param   initialGas  .\\n     */\\n    function _recordGas(uint256 initialGas, uint256 baseGasAmount) internal {\\n        uint256 gasSpent = (initialGas - gasleft() + baseGasAmount) * block.basefee;\\n        adminGasSpentInWei[msg.sender] += gasSpent;\\n        emit GasSpent(msg.sender, gasSpent);\\n    }\\n\\n    ///@notice Calculates the pubkey hash of a validator's pubkey as per SSZ spec\\n    /// @dev using same calculation as EigenPod _calculateValidatorPubkeyHash\\n    function _calculateValidatorPubkeyHash(\\n        bytes memory validatorPubkey\\n    ) internal pure returns (bytes32) {\\n        return sha256(abi.encodePacked(validatorPubkey, bytes16(0)));\\n    }\\n\\n    /**\\n     * @notice  Send owed refunds to the admin\\n     * @dev     .\\n     * @return  uint256  .\\n     */\\n    function _refundGas() internal returns (uint256) {\\n        uint256 gasRefund = address(this).balance >= adminGasSpentInWei[tx.origin]\\n            ? adminGasSpentInWei[tx.origin]\\n            : address(this).balance;\\n        bool success = payable(tx.origin).send(gasRefund);\\n        if (!success) revert TransferFailed();\\n\\n        // reset gas spent by admin\\n        adminGasSpentInWei[tx.origin] -= gasRefund;\\n\\n        emit GasRefunded(tx.origin, gasRefund);\\n        return gasRefund;\\n    }\\n\\n    /**\\n     * @notice Users should NOT send ETH directly to this contract unless they want to donate to existing ezETH holders.\\n     *        This is an internal protocol function.\\n     * @dev Handle ETH sent to this contract - will get forwarded to the deposit queue for restaking as a protocol reward\\n     * @dev If msg.sender is eigenPod then forward ETH to deposit queue without taking cut (i.e. full withdrawal from beacon chain)\\n     */\\n    receive() external payable {\\n        // check if sender contract is EigenPod. forward full withdrawal eth received\\n        if (msg.sender == address(eigenPod)) {\\n            restakeManager.depositQueue().forwardFullWithdrawalETH{ value: msg.value }();\\n        } else {\\n            // considered as protocol reward\\n            uint256 gasRefunded = 0;\\n            uint256 remainingAmount = address(this).balance;\\n            if (adminGasSpentInWei[tx.origin] > 0) {\\n                gasRefunded = _refundGas();\\n                // update the remaining amount\\n                remainingAmount -= gasRefunded;\\n                // If no funds left, return\\n                if (remainingAmount == 0) {\\n                    return;\\n                }\\n            }\\n            // Forward remaining balance to the deposit queue\\n            address destination = address(restakeManager.depositQueue());\\n            (bool success, ) = destination.call{ value: remainingAmount }(\\\"\\\");\\n            if (!success) revert TransferFailed();\\n\\n            emit RewardsForwarded(destination, remainingAmount);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Delegation/OperatorDelegatorStorage.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.19;\\nimport \\\"../Permissions/IRoleManager.sol\\\";\\nimport \\\"../EigenLayer/interfaces/IStrategy.sol\\\";\\nimport \\\"../EigenLayer/interfaces/IStrategyManager.sol\\\";\\nimport \\\"../EigenLayer/interfaces/IDelegationManager.sol\\\";\\nimport \\\"../EigenLayer/interfaces/IEigenPod.sol\\\";\\nimport \\\"./IOperatorDelegator.sol\\\";\\nimport \\\"../IRestakeManager.sol\\\";\\n\\n/// @title OperatorDelegatorStorage\\n/// @dev This contract will hold all local variables for the  Contract\\n/// When upgrading the protocol, inherit from this contract on the V2 version and change the\\n/// StorageManager to inherit from the later version.  This ensures there are no storage layout\\n/// corruptions when upgrading.\\nabstract contract OperatorDelegatorStorageV1 is IOperatorDelegator {\\n    /// @dev reference to the RoleManager contract\\n    IRoleManager public roleManager;\\n\\n    /// @dev The main strategy manager contract in EigenLayer\\n    IStrategyManager public strategyManager;\\n\\n    /// @dev the restake manager contract\\n    IRestakeManager public restakeManager;\\n\\n    /// @dev The mapping of supported token addresses to their respective strategy addresses\\n    /// This will control which tokens are supported by the protocol\\n    mapping(IERC20 => IStrategy) public tokenStrategyMapping;\\n\\n    /// @dev The address to delegate tokens to in EigenLayer\\n    address public delegateAddress;\\n\\n    /// @dev the delegation manager contract\\n    IDelegationManager public delegationManager;\\n\\n    /// @dev the EigenLayer EigenPodManager contract\\n    IEigenPodManager public eigenPodManager;\\n\\n    /// @dev The EigenPod owned by this contract\\n    IEigenPod public eigenPod;\\n\\n    /// @dev Tracks the balance that was staked to validators but hasn't been restaked to EL yet\\n    uint256 public stakedButNotVerifiedEth;\\n}\\n\\nabstract contract OperatorDelegatorStorageV2 is OperatorDelegatorStorageV1 {\\n    /// @dev - DEPRECATED - This variable is no longer used\\n    uint256 public pendingUnstakedDelayedWithdrawalAmount;\\n}\\n\\nabstract contract OperatorDelegatorStorageV3 is OperatorDelegatorStorageV2 {\\n    /// @dev A base tx gas amount for a transaction to be added for redemption later - in gas units\\n    uint256 public baseGasAmountSpent;\\n\\n    /// @dev A mapping to track how much gas was spent by an address\\n    mapping(address => uint256) public adminGasSpentInWei;\\n}\\n\\nabstract contract OperatorDelegatorStorageV4 is OperatorDelegatorStorageV3 {\\n    /// @dev mapping of token shares in withdraw queue of EigenLayer\\n    mapping(address => uint256) public queuedShares;\\n\\n    /// @dev bool mapping to track if withdrawal is already queued by withdrawalRoot\\n    mapping(bytes32 => bool) public queuedWithdrawal;\\n\\n    /// @dev mapping of validatorStakedButNotVerifiedEth with the key as validatorPubkeyHash\\n    mapping(bytes32 => uint256) public validatorStakedButNotVerifiedEth;\\n}\\n\\n/// On the next version of the protocol, if new variables are added, put them in the below\\n/// contract and use this as the inheritance chain.\\n// abstract contract OperatorDelegatorStorageV4 is OperatorDelegatorStorageV3 {\\n// }\\n\"\r\n    },\r\n    \"contracts/Deposits/IDepositQueue.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.19;\\n\\nimport \\\"../Withdraw/IWithdrawQueue.sol\\\";\\n\\ninterface IDepositQueue {\\n    function depositETHFromProtocol() external payable;\\n    function totalEarned(address tokenAddress) external view returns (uint256);\\n    function forwardFullWithdrawalETH() external payable;\\n    function withdrawQueue() external view returns (IWithdrawQueue);\\n    function fillERC20withdrawBuffer(address _asset, uint256 _amount) external;\\n}\\n\"\r\n    },\r\n    \"contracts/EigenLayer/interfaces/IBeaconChainOracle.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.5.0;\\n\\n/**\\n * @title Interface for the BeaconStateOracle contract.\\n * @author Layr Labs, Inc.\\n * @notice Terms of Service: https://docs.eigenlayer.xyz/overview/terms-of-service\\n */\\ninterface IBeaconChainOracle {\\n    /// @notice The block number to state root mapping.\\n    function timestampToBlockRoot(uint256 timestamp) external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"contracts/EigenLayer/interfaces/IDelayedWithdrawalRouter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.5.0;\\n\\ninterface IDelayedWithdrawalRouter {\\n    // struct used to pack data into a single storage slot\\n    struct DelayedWithdrawal {\\n        uint224 amount;\\n        uint32 blockCreated;\\n    }\\n\\n    // struct used to store a single users delayedWithdrawal data\\n    struct UserDelayedWithdrawals {\\n        uint256 delayedWithdrawalsCompleted;\\n        DelayedWithdrawal[] delayedWithdrawals;\\n    }\\n\\n    /// @notice event for delayedWithdrawal creation\\n    event DelayedWithdrawalCreated(\\n        address podOwner,\\n        address recipient,\\n        uint256 amount,\\n        uint256 index\\n    );\\n\\n    /// @notice event for the claiming of delayedWithdrawals\\n    event DelayedWithdrawalsClaimed(\\n        address recipient,\\n        uint256 amountClaimed,\\n        uint256 delayedWithdrawalsCompleted\\n    );\\n\\n    /// @notice Emitted when the `withdrawalDelayBlocks` variable is modified from `previousValue` to `newValue`.\\n    event WithdrawalDelayBlocksSet(uint256 previousValue, uint256 newValue);\\n\\n    /**\\n     * @notice Creates an delayed withdrawal for `msg.value` to the `recipient`.\\n     * @dev Only callable by the `podOwner`'s EigenPod contract.\\n     */\\n    function createDelayedWithdrawal(address podOwner, address recipient) external payable;\\n\\n    /**\\n     * @notice Called in order to withdraw delayed withdrawals made to the `recipient` that have passed the `withdrawalDelayBlocks` period.\\n     * @param recipient The address to claim delayedWithdrawals for.\\n     * @param maxNumberOfWithdrawalsToClaim Used to limit the maximum number of withdrawals to loop through claiming.\\n     */\\n    function claimDelayedWithdrawals(\\n        address recipient,\\n        uint256 maxNumberOfWithdrawalsToClaim\\n    ) external;\\n\\n    /**\\n     * @notice Called in order to withdraw delayed withdrawals made to the caller that have passed the `withdrawalDelayBlocks` period.\\n     * @param maxNumberOfWithdrawalsToClaim Used to limit the maximum number of withdrawals to loop through claiming.\\n     */\\n    function claimDelayedWithdrawals(uint256 maxNumberOfWithdrawalsToClaim) external;\\n\\n    /// @notice Owner-only function for modifying the value of the `withdrawalDelayBlocks` variable.\\n    function setWithdrawalDelayBlocks(uint256 newValue) external;\\n\\n    /// @notice Getter function for the mapping `_userWithdrawals`\\n    function userWithdrawals(address user) external view returns (UserDelayedWithdrawals memory);\\n\\n    /// @notice Getter function to get all delayedWithdrawals of the `user`\\n    function getUserDelayedWithdrawals(\\n        address user\\n    ) external view returns (DelayedWithdrawal[] memory);\\n\\n    /// @notice Getter function to get all delayedWithdrawals that are currently claimable by the `user`\\n    function getClaimableUserDelayedWithdrawals(\\n        address user\\n    ) external view returns (DelayedWithdrawal[] memory);\\n\\n    /// @notice Getter function for fetching the delayedWithdrawal at the `index`th entry from the `_userWithdrawals[user].delayedWithdrawals` array\\n    function userDelayedWithdrawalByIndex(\\n        address user,\\n        uint256 index\\n    ) external view returns (DelayedWithdrawal memory);\\n\\n    /// @notice Getter function for fetching the length of the delayedWithdrawals array of a specific user\\n    function userWithdrawalsLength(address user) external view returns (uint256);\\n\\n    /// @notice Convenience function for checking whether or not the delayedWithdrawal at the `index`th entry from the `_userWithdrawals[user].delayedWithdrawals` array is currently claimable\\n    function canClaimDelayedWithdrawal(address user, uint256 index) external view returns (bool);\\n\\n    /**\\n     * @notice Delay enforced by this contract for completing any delayedWithdrawal. Measured in blocks, and adjustable by this contract's owner,\\n     * up to a maximum of `MAX_WITHDRAWAL_DELAY_BLOCKS`. Minimum value is 0 (i.e. no delay enforced).\\n     */\\n    function withdrawalDelayBlocks() external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/EigenLayer/interfaces/IDelegationManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.5.0;\\n\\nimport \\\"./IStrategy.sol\\\";\\nimport \\\"./ISignatureUtils.sol\\\";\\nimport \\\"./IStrategyManager.sol\\\";\\n\\n/**\\n * @title DelegationManager\\n * @author Layr Labs, Inc.\\n * @notice Terms of Service: https://docs.eigenlayer.xyz/overview/terms-of-service\\n * @notice  This is the contract for delegation in EigenLayer. The main functionalities of this contract are\\n * - enabling anyone to register as an operator in EigenLayer\\n * - allowing operators to specify parameters related to stakers who delegate to them\\n * - enabling any staker to delegate its stake to the operator of its choice (a given staker can only delegate to a single operator at a time)\\n * - enabling a staker to undelegate its assets from the operator it is delegated to (performed as part of the withdrawal process, initiated through the StrategyManager)\\n */\\ninterface IDelegationManager is ISignatureUtils {\\n    // Access to public vars - hack locally\\n    function beaconChainETHStrategy() external returns (IStrategy);\\n    function pendingWithdrawals(bytes32 withdrawalRoot) external view returns (bool);\\n    function getDelegatableShares(\\n        address staker\\n    ) external view returns (IStrategy[] memory, uint256[] memory);\\n\\n    // @notice Struct used for storing information about a single operator who has registered with EigenLayer\\n    struct OperatorDetails {\\n        // @notice address to receive the rewards that the operator earns via serving applications built on EigenLayer.\\n        address earningsReceiver;\\n        /**\\n         * @notice Address to verify signatures when a staker wishes to delegate to the operator, as well as controlling \\\"forced undelegations\\\".\\n         * @dev Signature verification follows these rules:\\n         * 1) If this address is left as address(0), then any staker will be free to delegate to the operator, i.e. no signature verification will be performed.\\n         * 2) If this address is an EOA (i.e. it has no code), then we follow standard ECDSA signature verification for delegations to the operator.\\n         * 3) If this address is a contract (i.e. it has code) then we forward a call to the contract and verify that it returns the correct EIP-1271 \\\"magic value\\\".\\n         */\\n        address delegationApprover;\\n        /**\\n         * @notice A minimum delay -- measured in blocks -- enforced between:\\n         * 1) the operator signalling their intent to register for a service, via calling `Slasher.optIntoSlashing`\\n         * and\\n         * 2) the operator completing registration for the service, via the service ultimately calling `Slasher.recordFirstStakeUpdate`\\n         * @dev note that for a specific operator, this value *cannot decrease*, i.e. if the operator wishes to modify their OperatorDetails,\\n         * then they are only allowed to either increase this value or keep it the same.\\n         */\\n        uint32 stakerOptOutWindowBlocks;\\n    }\\n\\n    /**\\n     * @notice Abstract struct used in calculating an EIP712 signature for a staker to approve that they (the staker themselves) delegate to a specific operator.\\n     * @dev Used in computing the `STAKER_DELEGATION_TYPEHASH` and as a reference in the computation of the stakerDigestHash in the `delegateToBySignature` function.\\n     */\\n    struct StakerDelegation {\\n        // the staker who is delegating\\n        address staker;\\n        // the operator being delegated to\\n        address operator;\\n        // the staker's nonce\\n        uint256 nonce;\\n        // the expiration timestamp (UTC) of the signature\\n        uint256 expiry;\\n    }\\n\\n    /**\\n     * @notice Abstract struct used in calculating an EIP712 signature for an operator's delegationApprover to approve that a specific staker delegate to the operator.\\n     * @dev Used in computing the `DELEGATION_APPROVAL_TYPEHASH` and as a reference in the computation of the approverDigestHash in the `_delegate` function.\\n     */\\n    struct DelegationApproval {\\n        // the staker who is delegating\\n        address staker;\\n        // the operator being delegated to\\n        address operator;\\n        // the operator's provided salt\\n        bytes32 salt;\\n        // the expiration timestamp (UTC) of the signature\\n        uint256 expiry;\\n    }\\n\\n    /**\\n     * Struct type used to specify an existing queued withdrawal. Rather than storing the entire struct, only a hash is stored.\\n     * In functions that operate on existing queued withdrawals -- e.g. completeQueuedWithdrawal`, the data is resubmitted and the hash of the submitted\\n     * data is computed by `calculateWithdrawalRoot` and checked against the stored hash in order to confirm the integrity of the submitted data.\\n     */\\n    struct Withdrawal {\\n        // The address that originated the Withdrawal\\n        address staker;\\n        // The address that the staker was delegated to at the time that the Withdrawal was created\\n        address delegatedTo;\\n        // The address that can complete the Withdrawal + will receive funds when completing the withdrawal\\n        address withdrawer;\\n        // Nonce used to guarantee that otherwise identical withdrawals have unique hashes\\n        uint256 nonce;\\n        // Block number when the Withdrawal was created\\n        uint32 startBlock;\\n        // Array of strategies that the Withdrawal contains\\n        IStrategy[] strategies;\\n        // Array containing the amount of shares in each Strategy in the `strategies` array\\n        uint256[] shares;\\n    }\\n\\n    struct QueuedWithdrawalParams {\\n        // Array of strategies that the QueuedWithdrawal contains\\n        IStrategy[] strategies;\\n        // Array containing the amount of shares in each Strategy in the `strategies` array\\n        uint256[] shares;\\n        // The address of the withdrawer\\n        address withdrawer;\\n    }\\n\\n    // @notice Emitted when a new operator registers in EigenLayer and provides their OperatorDetails.\\n    event OperatorRegistered(address indexed operator, OperatorDetails operatorDetails);\\n\\n    /// @notice Emitted when an operator updates their OperatorDetails to @param newOperatorDetails\\n    event OperatorDetailsModified(address indexed operator, OperatorDetails newOperatorDetails);\\n\\n    /**\\n     * @notice Emitted when @param operator indicates that they are updating their MetadataURI string\\n     * @dev Note that these strings are *never stored in storage* and are instead purely emitted in events for off-chain indexing\\n     */\\n    event OperatorMetadataURIUpdated(address indexed operator, string metadataURI);\\n\\n    /// @notice Emitted whenever an operator's shares are increased for a given strategy. Note that shares is the delta in the operator's shares.\\n    event OperatorSharesIncreased(\\n        address indexed operator,\\n        address staker,\\n        IStrategy strategy,\\n        uint256 shares\\n    );\\n\\n    /// @notice Emitted whenever an operator's shares are decreased for a given strategy. Note that shares is the delta in the operator's shares.\\n    event OperatorSharesDecreased(\\n        address indexed operator,\\n        address staker,\\n        IStrategy strategy,\\n        uint256 shares\\n    );\\n\\n    /// @notice Emitted when @param staker delegates to @param operator.\\n    event StakerDelegated(address indexed staker, address indexed operator);\\n\\n    /// @notice Emitted when @param staker undelegates from @param operator.\\n    event StakerUndelegated(address indexed staker, address indexed operator);\\n\\n    /// @notice Emitted when @param staker is undelegated via a call not originating from the staker themself\\n    event StakerForceUndelegated(address indexed staker, address indexed operator);\\n\\n    /**\\n     * @notice Emitted when a new withdrawal is queued.\\n     * @param withdrawalRoot Is the hash of the `withdrawal`.\\n     * @param withdrawal Is the withdrawal itself.\\n     */\\n    event WithdrawalQueued(bytes32 withdrawalRoot, Withdrawal withdrawal);\\n\\n    /// @notice Emitted when a queued withdrawal is completed\\n    event WithdrawalCompleted(bytes32 withdrawalRoot);\\n\\n    /// @notice Emitted when a queued withdrawal is *migrated* from the StrategyManager to the DelegationManager\\n    event WithdrawalMigrated(bytes32 oldWithdrawalRoot, bytes32 newWithdrawalRoot);\\n\\n    /// @notice Emitted when the `minWithdrawalDelayBlocks` variable is modified from `previousValue` to `newValue`.\\n    event MinWithdrawalDelayBlocksSet(uint256 previousValue, uint256 newValue);\\n\\n    /// @notice Emitted when the `strategyWithdrawalDelayBlocks` variable is modified from `previousValue` to `newValue`.\\n    event StrategyWithdrawalDelayBlocksSet(\\n        IStrategy strategy,\\n        uint256 previousValue,\\n        uint256 newValue\\n    );\\n\\n    /**\\n     * @notice Registers the caller as an operator in EigenLayer.\\n     * @param registeringOperatorDetails is the `OperatorDetails` for the operator.\\n     * @param metadataURI is a URI for the operator's metadata, i.e. a link providing more details on the operator.\\n     *\\n     * @dev Once an operator is registered, they cannot 'deregister' as an operator, and they will forever be considered \\\"delegated to themself\\\".\\n     * @dev This function will revert if the caller attempts to set their `earningsReceiver` to address(0).\\n     * @dev Note that the `metadataURI` is *never stored * and is only emitted in the `OperatorMetadataURIUpdated` event\\n     */\\n    function registerAsOperator(\\n        OperatorDetails calldata registeringOperatorDetails,\\n        string calldata metadataURI\\n    ) external;\\n\\n    /**\\n     * @notice Updates an operator's stored `OperatorDetails`.\\n     * @param newOperatorDetails is the updated `OperatorDetails` for the operator, to replace their current OperatorDetails`.\\n     *\\n     * @dev The caller must have previously registered as an operator in EigenLayer.\\n     * @dev This function will revert if the caller attempts to set their `earningsReceiver` to address(0).\\n     */\\n    function modifyOperatorDetails(OperatorDetails calldata newOperatorDetails) external;\\n\\n    /**\\n     * @notice Called by an operator to emit an `OperatorMetadataURIUpdated` event indicating the information has updated.\\n     * @param metadataURI The URI for metadata associated with an operator\\n     * @dev Note that the `metadataURI` is *never stored * and is only emitted in the `OperatorMetadataURIUpdated` event\\n     */\\n    function updateOperatorMetadataURI(string calldata metadataURI) external;\\n\\n    /**\\n     * @notice Caller delegates their stake to an operator.\\n     * @param operator The account (`msg.sender`) is delegating its assets to for use in serving applications built on EigenLayer.\\n     * @param approverSignatureAndExpiry Verifies the operator approves of this delegation\\n     * @param approverSalt A unique single use value tied to an individual signature.\\n     * @dev The approverSignatureAndExpiry is used in the event that:\\n     *          1) the operator's `delegationApprover` address is set to a non-zero value.\\n     *                  AND\\n     *          2) neither the operator nor their `delegationApprover` is the `msg.sender`, since in the event that the operator\\n     *             or their delegationApprover is the `msg.sender`, then approval is assumed.\\n     * @dev In the event that `approverSignatureAndExpiry` is not checked, its content is ignored entirely; it's recommended to use an empty input\\n     * in this case to save on complexity + gas costs\\n     */\\n    function delegateTo(\\n        address operator,\\n        SignatureWithExpiry memory approverSignatureAndExpiry,\\n        bytes32 approverSalt\\n    ) external;\\n\\n    /**\\n     * @notice Caller delegates a staker's stake to an operator with valid signatures from both parties.\\n     * @param staker The account delegating stake to an `operator` account\\n     * @param operator The account (`staker`) is delegating its assets to for use in serving applications built on EigenLayer.\\n     * @param stakerSignatureAndExpiry Signed data from the staker authorizing delegating stake to an operator\\n     * @param approverSignatureAndExpiry is a parameter that will be used for verifying that the operator approves of this delegation action in the event that:\\n     * @param approverSalt Is a salt used to help guarantee signature uniqueness. Each salt can only be used once by a given approver.\\n     *\\n     * @dev If `staker` is an EOA, then `stakerSignature` is verified to be a valid ECDSA stakerSignature from `staker`, indicating their intention for this action.\\n     * @dev If `staker` is a contract, then `stakerSignature` will be checked according to EIP-1271.\\n     * @dev the operator's `delegationApprover` address is set to a non-zero value.\\n     * @dev neither the operator nor their `delegationApprover` is the `msg.sender`, since in the event that the operator or their delegationApprover\\n     * is the `msg.sender`, then approval is assumed.\\n     * @dev This function will revert if the current `block.timestamp` is equal to or exceeds the expiry\\n     * @dev In the case that `approverSignatureAndExpiry` is not checked, its content is ignored entirely; it's recommended to use an empty input\\n     * in this case to save on complexity + gas costs\\n     */\\n    function delegateToBySignature(\\n        address staker,\\n        address operator,\\n        SignatureWithExpiry memory stakerSignatureAndExpiry,\\n        SignatureWithExpiry memory approverSignatureAndExpiry,\\n        bytes32 approverSalt\\n    ) external;\\n\\n    /**\\n     * @notice Undelegates the staker from the operator who they are delegated to. Puts the staker into the \\\"undelegation limbo\\\" mode of the EigenPodManager\\n     * and queues a withdrawal of all of the staker's shares in the StrategyManager (to the staker), if necessary.\\n     * @param staker The account to be undelegated.\\n     * @return withdrawalRoot The root of the newly queued withdrawal, if a withdrawal was queued. Otherwise just bytes32(0).\\n     *\\n     * @dev Reverts if the `staker` is also an operator, since operators are not allowed to undelegate from themselves.\\n     * @dev Reverts if the caller is not the staker, nor the operator who the staker is delegated to, nor the operator's specified \\\"delegationApprover\\\"\\n     * @dev Reverts if the `staker` is already undelegated.\\n     */\\n    function undelegate(address staker) external returns (bytes32[] memory withdrawalRoot);\\n\\n    /**\\n     * Allows a staker to withdraw some shares. Withdrawn shares/strategies are immediately removed\\n     * from the staker. If the staker is delegated, withdrawn shares/strategies are also removed from\\n     * their operator.\\n     *\\n     * All withdrawn shares/strategies are placed in a queue and can be fully withdrawn after a delay.\\n     */\\n    function queueWithdrawals(\\n        QueuedWithdrawalParams[] calldata queuedWithdrawalParams\\n    ) external returns (bytes32[] memory);\\n\\n    /**\\n     * @notice Used to complete the specified `withdrawal`. The caller must match `withdrawal.withdrawer`\\n     * @param withdrawal The Withdrawal to complete.\\n     * @param tokens Array in which the i-th entry specifies the `token` input to the 'withdraw' function of the i-th Strategy in the `withdrawal.strategies` array.\\n     * This input can be provided with zero length if `receiveAsTokens` is set to 'false' (since in that case, this input will be unused)\\n     * @param middlewareTimesIndex is the index in the operator that the staker who triggered the withdrawal was delegated to's middleware times array\\n     * @param receiveAsTokens If true, the shares specified in the withdrawal will be withdrawn from the specified strategies themselves\\n     * and sent to the caller, through calls to `withdrawal.strategies[i].withdraw`. If false, then the shares in the specified strategies\\n     * will simply be transferred to the caller directly.\\n     * @dev middlewareTimesIndex should be calculated off chain before calling this function by finding the first index that satisfies `slasher.canWithdraw`\\n     * @dev beaconChainETHStrategy shares are non-transferrable, so if `receiveAsTokens = false` and `withdrawal.withdrawer != withdrawal.staker`, note that\\n     * any beaconChainETHStrategy shares in the `withdrawal` will be _returned to the staker_, rather than transferred to the withdrawer, unlike shares in\\n     * any other strategies, which will be transferred to the withdrawer.\\n     */\\n    function completeQueuedWithdrawal(\\n        Withdrawal calldata withdrawal,\\n        IERC20[] calldata tokens,\\n        uint256 middlewareTimesIndex,\\n        bool receiveAsTokens\\n    ) external;\\n\\n    /**\\n     * @notice Array-ified version of `completeQueuedWithdrawal`.\\n     * Used to complete the specified `withdrawals`. The function caller must match `withdrawals[...].withdrawer`\\n     * @param withdrawals The Withdrawals to complete.\\n     * @param tokens Array of tokens for each Withdrawal. See `completeQueuedWithdrawal` for the usage of a single array.\\n     * @param middlewareTimesIndexes One index to reference per Withdrawal. See `completeQueuedWithdrawal` for the usage of a single index.\\n     * @param receiveAsTokens Whether or not to complete each withdrawal as tokens. See `completeQueuedWithdrawal` for the usage of a single boolean.\\n     * @dev See `completeQueuedWithdrawal` for relevant dev tags\\n     */\\n    function completeQueuedWithdrawals(\\n        Withdrawal[] calldata withdrawals,\\n        IERC20[][] calldata tokens,\\n        uint256[] calldata middlewareTimesIndexes,\\n        bool[] calldata receiveAsTokens\\n    ) external;\\n\\n    /**\\n     * @notice Increases a staker's delegated share balance in a strategy.\\n     * @param staker The address to increase the delegated shares for their operator.\\n     * @param strategy The strategy in which to increase the delegated shares.\\n     * @param shares The number of shares to increase.\\n     *\\n     * @dev *If the staker is actively delegated*, then increases the `staker`'s delegated shares in `strategy` by `shares`. Otherwise does nothing.\\n     * @dev Callable only by the StrategyManager or EigenPodManager.\\n     */\\n    function increaseDelegatedShares(address staker, IStrategy strategy, uint256 shares) external;\\n\\n    /**\\n     * @notice Decreases a staker's delegated share balance in a strategy.\\n     * @param staker The address to increase the delegated shares for their operator.\\n     * @param strategy The strategy in which to decrease the delegated shares.\\n     * @param shares The number of shares to decrease.\\n     *\\n     * @dev *If the staker is actively delegated*, then decreases the `staker`'s delegated shares in `strategy` by `shares`. Otherwise does nothing.\\n     * @dev Callable only by the StrategyManager or EigenPodManager.\\n     */\\n    function decreaseDelegatedShares(address staker, IStrategy strategy, uint256 shares) external;\\n\\n    /**\\n     * @notice returns the address of the operator that `staker` is delegated to.\\n     * @notice Mapping: staker => operator whom the staker is currently delegated to.\\n     * @dev Note that returning address(0) indicates that the staker is not actively delegated to any operator.\\n     */\\n    function delegatedTo(address staker) external view returns (address);\\n\\n    /**\\n     * @notice Returns the OperatorDetails struct associated with an `operator`.\\n     */\\n    function operatorDetails(address operator) external view returns (OperatorDetails memory);\\n\\n    /*\\n     * @notice Returns the earnings receiver address for an operator\\n     */\\n    function earningsReceiver(address operator) external view returns (address);\\n\\n    /**\\n     * @notice Returns the delegationApprover account for an operator\\n     */\\n    function delegationApprover(address operator) external view returns (address);\\n\\n    /**\\n     * @notice Returns the stakerOptOutWindowBlocks for an operator\\n     */\\n    function stakerOptOutWindowBlocks(address operator) external view returns (uint256);\\n\\n    /**\\n     * @notice Given array of strategies, returns array of shares for the operator\\n     */\\n    function getOperatorShares(\\n        address operator,\\n        IStrategy[] memory strategies\\n    ) external view returns (uint256[] memory);\\n\\n    /**\\n     * @notice Given a list of strategies, return the minimum number of blocks that must pass to withdraw\\n     * from all the inputted strategies. Return value is >= minWithdrawalDelayBlocks as this is the global min withdrawal delay.\\n     * @param strategies The strategies to check withdrawal delays for\\n     */\\n    function getWithdrawalDelay(IStrategy[] calldata strategies) external view returns (uint256);\\n\\n    /**\\n     * @notice returns the total number of shares in `strategy` that are delegated to `operator`.\\n     * @notice Mapping: operator => strategy => total number of shares in the strategy delegated to the operator.\\n     * @dev By design, the following invariant should hold for each Strategy:\\n     * (operator's shares in delegation manager) = sum (shares above zero of all stakers delegated to operator)\\n     * = sum (delegateable shares of all stakers delegated to the operator)\\n     */\\n    function operatorShares(address operator, IStrategy strategy) external view returns (uint256);\\n\\n    /**\\n     * @notice Returns 'true' if `staker` *is* actively delegated, and 'false' otherwise.\\n     */\\n    function isDelegated(address staker) external view returns (bool);\\n\\n    /**\\n     * @notice Returns true is an operator has previously registered for delegation.\\n     */\\n    function isOperator(address operator) external view returns (bool);\\n\\n    /// @notice Mapping: staker => number of signed delegation nonces (used in `delegateToBySignature`) from the staker that the contract has already checked\\n    function stakerNonce(address staker) external view returns (uint256);\\n\\n    /**\\n     * @notice Mapping: delegationApprover => 32-byte salt => whether or not the salt has already been used by the delegationApprover.\\n     * @dev Salts are used in the `delegateTo` and `delegateToBySignature` functions. Note that these functions only process the delegationApprover's\\n     * signature + the provided salt if the operator being delegated to has specified a nonzero address as their `delegationApprover`.\\n     */\\n    function delegationApproverSaltIsSpent(\\n        address _delegationApprover,\\n        bytes32 salt\\n    ) external view returns (bool);\\n\\n    /**\\n     * @notice Minimum delay enforced by this contract for completing queued withdrawals. Measured in blocks, and adjustable by this contract's owner,\\n     * up to a maximum of `MAX_WITHDRAWAL_DELAY_BLOCKS`. Minimum value is 0 (i.e. no delay enforced).\\n     * Note that strategies each have a separate withdrawal delay, which can be greater than this value. So the minimum number of blocks that must pass\\n     * to withdraw a strategy is MAX(minWithdrawalDelayBlocks, strategyWithdrawalDelayBlocks[strategy])\\n     */\\n    function minWithdrawalDelayBlocks() external view returns (uint256);\\n\\n    /**\\n     * @notice Minimum delay enforced by this contract per Strategy for completing queued withdrawals. Measured in blocks, and adjustable by this contract's owner,\\n     * up to a maximum of `MAX_WITHDRAWAL_DELAY_BLOCKS`. Minimum value is 0 (i.e. no delay enforced).\\n     */\\n    function strategyWithdrawalDelayBlocks(IStrategy strategy) external view returns (uint256);\\n\\n    /**\\n     * @notice Calculates the digestHash for a `staker` to sign to delegate to an `operator`\\n     * @param staker The signing staker\\n     * @param operator The operator who is being delegated to\\n     * @param expiry The desired expiry time of the staker's signature\\n     */\\n    function calculateCurrentStakerDelegationDigestHash(\\n        address staker,\\n        address operator,\\n        uint256 expiry\\n    ) external view returns (bytes32);\\n\\n    /**\\n     * @notice Calculates the digest hash to be signed and used in the `delegateToBySignature` function\\n     * @param staker The signing staker\\n     * @param _stakerNonce The nonce of the staker. In practice we use the staker's current nonce, stored at `stakerNonce[staker]`\\n     * @param operator The operator who is being delegated to\\n     * @param expiry The desired expiry time of the staker's signature\\n     */\\n    function calculateStakerDelegationDigestHash(\\n        address staker,\\n        uint256 _stakerNonce,\\n        address operator,\\n        uint256 expiry\\n    ) external view returns (bytes32);\\n\\n    /**\\n     * @notice Calculates the digest hash to be signed by the operator's delegationApprove and used in the `delegateTo` and `delegateToBySignature` functions.\\n     * @param staker The account delegating their stake\\n     * @param operator The account receiving delegated stake\\n     * @param _delegationApprover the operator's `delegationApprover` who will be signing the delegationHash (in general)\\n     * @param approverSalt A unique and single use value associated with the approver signature.\\n     * @param expiry Time after which the approver's signature becomes invalid\\n     */\\n    function calculateDelegationApprovalDigestHash(\\n        address staker,\\n        address operator,\\n        address _delegationApprover,\\n        bytes32 approverSalt,\\n        uint256 expiry\\n    ) external view returns (bytes32);\\n\\n    /// @notice The EIP-712 typehash for the contract's domain\\n    function DOMAIN_TYPEHASH() external view returns (bytes32);\\n\\n    /// @notice The EIP-712 typehash for the StakerDelegation struct used by the contract\\n    function STAKER_DELEGATION_TYPEHASH() external view returns (bytes32);\\n\\n    /// @notice The EIP-712 typehash for the DelegationApproval struct used by the contract\\n    function DELEGATION_APPROVAL_TYPEHASH() external view returns (bytes32);\\n\\n    /**\\n     * @notice Getter function for the current EIP-712 domain separator for this contract.\\n     *\\n     * @dev The domain separator will change in the event of a fork that changes the ChainID.\\n     * @dev By introducing a domain separator the DApp developers are guaranteed that there can be no signature collision.\\n     * for more detailed information please read EIP-712.\\n     */\\n    function domainSeparator() external view returns (bytes32);\\n\\n    /// @notice Mapping: staker => cumulative number of queued withdrawals they have ever initiated.\\n    /// @dev This only increments (doesn't decrement), and is used to help ensure that otherwise identical withdrawals have unique hashes.\\n    function cumulativeWithdrawalsQueued(address staker) external view returns (uint256);\\n\\n    /// @notice Returns the keccak256 hash of `withdrawal`.\\n    function calculateWithdrawalRoot(Withdrawal memory withdrawal) external pure returns (bytes32);\\n\\n    function migrateQueuedWithdrawals(\\n        IStrategyManager.DeprecatedStruct_QueuedWithdrawal[] memory withdrawalsToQueue\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/EigenLayer/interfaces/IEigenPod.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.5.0;\\n\\nimport \\\"../libraries/BeaconChainProofs.sol\\\";\\nimport \\\"./IEigenPodManager.sol\\\";\\nimport \\\"./IBeaconChainOracle.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./IDelayedWithdrawalRouter.sol\\\";\\n\\n/**\\n * @title The implementation contract used for restaking beacon chain ETH on EigenLayer\\n * @author Layr Labs, Inc.\\n * @notice Terms of Service: https://docs.eigenlayer.xyz/overview/terms-of-service\\n * @notice The main functionalities are:\\n * - creating new ETH validators with their withdrawal credentials pointed to this contract\\n * - proving from beacon chain state roots that withdrawal credentials are pointed to this contract\\n * - proving from beacon chain state roots the balances of ETH validators with their withdrawal credentials\\n *   pointed to this contract\\n * - updating aggregate balances in the EigenPodManager\\n * - withdrawing eth when withdrawals are initiated\\n * @dev Note that all beacon chain balances are stored as gwei within the beacon chain datastructures. We choose\\n *   to account balances in terms of gwei in the EigenPod contract and convert to wei when making calls to other contracts\\n */\\ninterface IEigenPod {\\n    // Hack to allow the external visibility of the public variable for default getter in EigenPod\\n    function delayedWithdrawalRouter() external returns (IDelayedWithdrawalRouter);\\n\\n    enum VALIDATOR_STATUS {\\n        INACTIVE, // doesnt exist\\n        ACTIVE, // staked on ethpos and withdrawal credentials are pointed to the EigenPod\\n        WITHDRAWN // withdrawn from the Beacon Chain\\n    }\\n\\n    struct ValidatorInfo {\\n        // index of the validator in the beacon chain\\n        uint64 validatorIndex;\\n        // amount of beacon chain ETH restaked on EigenLayer in gwei\\n        uint64 restakedBalanceGwei;\\n        //timestamp of the validator's most recent balance update\\n        uint64 mostRecentBalanceUpdateTimestamp;\\n        // status of the validator\\n        VALIDATOR_STATUS status;\\n    }\\n\\n    /**\\n     * @notice struct used to store amounts related to proven withdrawals in memory. Used to help\\n     * manage stack depth and optimize the number of external calls, when batching withdrawal operations.\\n     */\\n    struct VerifiedWithdrawal {\\n        // amount to send to a podOwner from a proven withdrawal\\n        uint256 amountToSendGwei;\\n        // difference in shares to be recorded in the eigenPodManager, as a result of the withdrawal\\n        int256 sharesDeltaGwei;\\n    }\\n\\n    enum PARTIAL_WITHDRAWAL_CLAIM_STATUS {\\n        REDEEMED,\\n        PENDING,\\n        FAILED\\n    }\\n\\n    /// @notice Emitted when an ETH validator stakes via this eigenPod\\n    event EigenPodStaked(bytes pubkey);\\n\\n    /// @notice Emitted when an ETH validator's withdrawal credentials are successfully verified to be pointed to this eigenPod\\n    event ValidatorRestaked(uint40 validatorIndex);\\n\\n    /// @notice Emitted when an ETH validator's  balance is proven to be updated.  Here newValidatorBalanceGwei\\n    //  is the validator's balance that is credited on EigenLayer.\\n    event ValidatorBalanceUpdated(\\n        uint40 validatorIndex,\\n        uint64 balanceTimestamp,\\n        uint64 newValidatorBalanceGwei\\n    );\\n\\n    /// @notice Emitted when an ETH validator is prove to have withdrawn from the beacon chain\\n    event FullWithdrawalRedeemed(\\n        uint40 validatorIndex,\\n        uint64 withdrawalTimestamp,\\n        address indexed recipient,\\n        uint64 withdrawalAmountGwei\\n    );\\n\\n    /// @notice Emitted when a partial withdrawal claim is successfully redeemed\\n    event PartialWithdrawalRedeemed(\\n        uint40 validatorIndex,\\n        uint64 withdrawalTimestamp,\\n        address indexed recipient,\\n        uint64 partialWithdrawalAmountGwei\\n    );\\n\\n    /// @notice Emitted when restaked beacon chain ETH is withdrawn from the eigenPod.\\n    event RestakedBeaconChainETHWithdrawn(address indexed recipient, uint256 amount);\\n\\n    /// @notice Emitted when podOwner enables restaking\\n    event RestakingActivated(address indexed podOwner);\\n\\n    /// @notice Emitted when ETH is received via the `receive` fallback\\n    event NonBeaconChainETHReceived(uint256 amountReceived);\\n\\n    /// @notice Emitted when ETH that was previously received via the `receive` fallback is withdrawn\\n    event NonBeaconChainETHWithdrawn(address indexed recipient, uint256 amountWithdrawn);\\n\\n    /// @notice The max amount of eth, in gwei, that can be restaked per validator\\n    function MAX_RESTAKED_BALANCE_GWEI_PER_VALIDATOR() external view returns (uint64);\\n\\n    /// @notice the amount of execution layer ETH in this contract that is staked in EigenLayer (i.e. withdrawn from beaconchain but not EigenLayer),\\n    function withdrawableRestakedExecutionLayerGwei() external view returns (uint64);\\n\\n    /// @notice any ETH deposited into the EigenPod contract via the `receive` fallback function\\n    function nonBeaconChainETHBalanceWei() external view returns (uint256);\\n\\n    /// @notice Used to initialize the pointers to contracts crucial to the pod's functionality, in beacon proxy construction from EigenPodManager\\n    function initialize(address owner) external;\\n\\n    /// @notice Called by EigenPodManager when the owner wants to create another ETH validator.\\n    function stake(\\n        bytes calldata pubkey,\\n        bytes calldata signature,\\n        bytes32 depositDataRoot\\n    ) external payable;\\n\\n    /**\\n     * @notice Transfers `amountWei` in ether from this contract to the specified `recipient` address\\n     * @notice Called by EigenPodManager to withdrawBeaconChainETH that has been added to the EigenPod's balance due to a withdrawal from the beacon chain.\\n     * @dev The podOwner must have already proved sufficient withdrawals, so that this pod's `withdrawableRestakedExecutionLayerGwei` exceeds the\\n     * `amountWei` input (when converted to GWEI).\\n     * @dev Reverts if `amountWei` is not a whole Gwei amount\\n     */\\n    function withdrawRestakedBeaconChainETH(address recipient, uint256 amount) external;\\n\\n    /// @notice The single EigenPodManager for EigenLayer\\n    function eigenPodManager() external view returns (IEigenPodManager);\\n\\n    /// @notice The owner of this EigenPod\\n    function podOwner() external view returns (address);\\n\\n    /// @notice an indicator of whether or not the podOwner has ever \\\"fully restaked\\\" by successfully calling `verifyCorrectWithdrawalCredentials`.\\n    function hasRestaked() external view returns (bool);\\n\\n    /**\\n     * @notice The latest timestamp at which the pod owner withdrew the balance of the pod, via calling `withdrawBeforeRestaking`.\\n     * @dev This variable is only updated when the `withdrawBeforeRestaking` function is called, which can only occur before `hasRestaked` is set to true for this pod.\\n     * Proofs for this pod are only valid against Beacon Chain state roots corresponding to timestamps after the stored `mostRecentWithdrawalTimestamp`.\\n     */\\n    function mostRecentWithdrawalTimestamp() external view returns (uint64);\\n\\n    /// @notice Returns the validatorInfo struct for the provided pubkeyHash\\n    function validatorPubkeyHashToInfo(\\n        bytes32 validatorPubkeyHash\\n    ) external view returns (ValidatorInfo memory);\\n\\n    /// @notice Returns the validatorInfo struct for the provided pubkey\\n    function validatorPubkeyToInfo(\\n        bytes calldata validatorPubkey\\n    ) external view returns (ValidatorInfo memory);\\n\\n    ///@notice mapping that tracks proven withdrawals\\n    function provenWithdrawal(\\n        bytes32 validatorPubkeyHash,\\n        uint64 slot\\n    ) external view returns (bool);\\n\\n    /// @notice This returns the status of a given validator\\n    function validatorStatus(bytes32 pubkeyHash) external view returns (VALIDATOR_STATUS);\\n\\n    /// @notice This returns the status of a given validator pubkey\\n    function validatorStatus(\\n        bytes calldata validatorPubkey\\n    ) external view returns (VALIDATOR_STATUS);\\n\\n    /**\\n     * @notice This function verifies that the withdrawal credentials of validator(s) owned by the podOwner are pointed to\\n     * this contract. It also verifies the effective balance  of the validator.  It verifies the provided proof of the ETH validator against the beacon chain state\\n     * root, marks the validator as 'active' in EigenLayer, and credits the restaked ETH in Eigenlayer.\\n     * @param oracleTimestamp is the Beacon Chain timestamp whose state root the `proof` will be proven against.\\n     * @param validatorIndices is the list of indices of the validators being proven, refer to consensus specs\\n     * @param withdrawalCredentialProofs is an array of proofs, where each proof proves each ETH validator's balance and withdrawal credentials\\n     * against a beacon chain state root\\n     * @param validatorFields are the fields of the \\\"Validator Container\\\", refer to consensus specs\\n     * for details: https://github.com/ethereum/consensus-specs/blob/dev/specs/phase0/beacon-chain.md#validator\\n     */\\n    function verifyWithdrawalCredentials(\\n        uint64 oracleTimestamp,\\n        BeaconChainProofs.StateRootProof calldata stateRootProof,\\n        uint40[] calldata validatorIndices,\\n        bytes[] calldata withdrawalCredentialProofs,\\n        bytes32[][] calldata validatorFields\\n    ) external;\\n\\n    /**\\n     * @notice This function records an update (either increase or decrease) in the pod's balance in the StrategyManager.  \\n               It also verifies a merkle proof of the validator's current beacon chain balance.  \\n     * @param oracleTimestamp The oracleTimestamp whose state root the `proof` will be proven against.\\n     *        Must be within `VERIFY_BALANCE_UPDATE_WINDOW_SECONDS` of the current block.\\n     * @param validatorIndices is the list of indices of the validators being proven, refer to consensus specs \\n     * @param validatorFieldsProofs proofs against the `beaconStateRoot` for each validator in `validatorFields`\\n     * @param validatorFields are the fields of the \\\"Validator Container\\\", refer to consensus specs\\n     * @dev For more details on the Beacon Chain spec, see: https://github.com/ethereum/consensus-specs/blob/dev/specs/phase0/beacon-chain.md#validator\\n     */\\n    function verifyBalanceUpdates(\\n        uint64 oracleTimestamp,\\n        uint40[] calldata validatorIndices,\\n        BeaconChainProofs.StateRootProof calldata stateRootProof,\\n        bytes[] calldata validatorFieldsProofs,\\n        bytes32[][] calldata validatorFields\\n    ) external;\\n\\n    /**\\n     * @notice This function records full and partial withdrawals on behalf of one of the Ethereum validators for this EigenPod\\n     * @param oracleTimestamp is the timestamp of the oracle slot that the withdrawal is being proven against\\n     * @param withdrawalProofs is the information needed to check the veracity of the block numbers and withdrawals being proven\\n     * @param validatorFieldsProofs is the proof of the validator's fields' in the validator tree\\n     * @param withdrawalFields are the fields of the withdrawals being proven\\n     * @param validatorFields are the fields of the validators being proven\\n     */\\n    function verifyAndProcessWithdrawals(\\n        uint64 oracleTimestamp,\\n        BeaconChainProofs.StateRootProof calldata stateRootProof,\\n        BeaconChainProofs.WithdrawalProof[] calldata withdrawalProofs,\\n        bytes[] calldata validatorFieldsProofs,\\n        bytes32[][] calldata validatorFields,\\n        bytes32[][] calldata withdrawalFields\\n    ) external;\\n\\n    /**\\n     * @notice Called by the pod owner to activate restaking by withdrawing\\n     * all existing ETH from the pod and preventing further withdrawals via\\n     * \\\"withdrawBeforeRestaking()\\\"\\n     */\\n    function activateRestaking() external;\\n\\n    /// @notice Called by the pod owner to withdraw the balance of the pod when `hasRestaked` is set to false\\n    function withdrawBeforeRestaking() external;\\n\\n    /// @notice Called by the pod owner to withdraw the nonBeaconChainETHBalanceWei\\n    function withdrawNonBeaconChainETHBalanceWei(\\n        address recipient,\\n        uint256 amountToWithdraw\\n    ) external;\\n\\n    /// @notice called by owner of a pod to remove any ERC20s deposited in the pod\\n    function recoverTokens(\\n        IERC20[] memory tokenList,\\n        uint256[] memory amountsToWithdraw,\\n        address recipient\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/EigenLayer/interfaces/IEigenPodManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.5.0;\\n\\nimport \\\"@openzeppelin/contracts/proxy/beacon/IBeacon.sol\\\";\\nimport \\\"./IETHPOSDeposit.sol\\\";\\nimport \\\"./IStrategyManager.sol\\\";\\nimport \\\"./IEigenPod.sol\\\";\\nimport \\\"./IBeaconChainOracle.sol\\\";\\nimport \\\"./IPausable.sol\\\";\\nimport \\\"./ISlasher.sol\\\";\\nimport \\\"./IStrategy.sol\\\";\\n\\n/**\\n * @title Interface for factory that creates and manages solo staking pods that have their withdrawal credentials pointed to EigenLayer.\\n * @author Layr Labs, Inc.\\n * @notice Terms of Service: https://docs.eigenlayer.xyz/overview/terms-of-service\\n */\\n\\ninterface IEigenPodManager is IPausable {\\n    /// @notice Emitted to notify the update of the beaconChainOracle address\\n    event BeaconOracleUpdated(address indexed newOracleAddress);\\n\\n    /// @notice Emitted to notify the deployment of an EigenPod\\n    event PodDeployed(address indexed eigenPod, address indexed podOwner);\\n\\n    /// @notice Emitted to notify a deposit of beacon chain ETH recorded in the strategy manager\\n    event BeaconChainETHDeposited(address indexed podOwner, uint256 amount);\\n\\n    /// @notice Emitted when the balance of an EigenPod is updated\\n    event PodSharesUpdated(address indexed podOwner, int256 sharesDelta);\\n\\n    /// @notice Emitted when a withdrawal of beacon chain ETH is completed\\n    event BeaconChainETHWithdrawalCompleted(\\n        address indexed podOwner,\\n        uint256 shares,\\n        uint96 nonce,\\n        address delegatedAddress,\\n        address withdrawer,\\n        bytes32 withdrawalRoot\\n    );\\n\\n    event DenebForkTimestampUpdated(uint64 newValue);\\n\\n    /**\\n     * @notice Creates an EigenPod for the sender.\\n     * @dev Function will revert if the `msg.sender` already has an EigenPod.\\n     * @dev Returns EigenPod address\\n     */\\n    function createPod() external returns (address);\\n\\n    /**\\n     * @notice Stakes for a new beacon chain validator on the sender's EigenPod.\\n     * Also creates an EigenPod for the sender if they don't have one already.\\n     * @param pubkey The 48 bytes public key of the beacon chain validator.\\n     * @param signature The validator's signature of the deposit data.\\n     * @param depositDataRoot The root/hash of the deposit data for the validator's deposit.\\n     */\\n    function stake(\\n        bytes calldata pubkey,\\n        bytes calldata signature,\\n        bytes32 depositDataRoot\\n    ) external payable;\\n\\n    /**\\n     * @notice Changes the `podOwner`'s shares by `sharesDelta` and performs a call to the DelegationManager\\n     * to ensure that delegated shares are also tracked correctly\\n     * @param podOwner is the pod owner whose balance is being updated.\\n     * @param sharesDelta is the change in podOwner's beaconChainETHStrategy shares\\n     * @dev Callable only by the podOwner's EigenPod contract.\\n     * @dev Reverts if `sharesDelta` is not a whole Gwei amount\\n     */\\n    function recordBeaconChainETHBalanceUpdate(address podOwner, int256 sharesDelta) external;\\n\\n    /**\\n     * @notice Updates the oracle contract that provides the beacon chain state root\\n     * @param newBeaconChainOracle is the new oracle contract being pointed to\\n     * @dev Callable only by the owner of this contract (i.e. governance)\\n     */\\n    function updateBeaconChainOracle(IBeaconChainOracle newBeaconChainOracle) external;\\n\\n    /// @notice Returns the address of the `podOwner`'s EigenPod if it has been deployed.\\n    function ownerToPod(address podOwner) external view returns (IEigenPod);\\n\\n    /// @notice Returns the address of the `podOwner`'s EigenPod (whether it is deployed yet or not).\\n    function getPod(address podOwner) external view returns (IEigenPod);\\n\\n    /// @notice The ETH2 Deposit Contract\\n    function ethPOS() external view returns (IETHPOSDeposit);\\n\\n    /// @notice Beacon proxy to which the EigenPods point\\n    function eigenPodBeacon() external view returns (IBeacon);\\n\\n    /// @notice Oracle contract that provides updates to the beacon chain's state\\n    function beaconChainOracle() external view returns (IBeaconChainOracle);\\n\\n    /// @notice Returns the beacon block root at `timestamp`. Reverts if the Beacon block root at `timestamp` has not yet been finalized.\\n    function getBlockRootAtTimestamp(uint64 timestamp) external view returns (bytes32);\\n\\n    /// @notice EigenLayer's StrategyManager contract\\n    function strategyManager() external view returns (IStrategyManager);\\n\\n    /// @notice EigenLayer's Slasher contract\\n    function slasher() external view returns (ISlasher);\\n\\n    /// @notice Returns 'true' if the `podOwner` has created an EigenPod, and 'false' otherwise.\\n    function hasPod(address podOwner) external view returns (bool);\\n\\n    /// @notice Returns the number of EigenPods that have been created\\n    function numPods() external view returns (uint256);\\n\\n    /**\\n     * @notice Mapping from Pod owner owner to the number of shares they have in the virtual beacon chain ETH strategy.\\n     * @dev The share amount can become negative. This is necessary to accommodate the fact that a pod owner's virtual beacon chain ETH shares can\\n     * decrease between the pod owner queuing and completing a withdrawal.\\n     * When the pod owner's shares would otherwise increase, this \\\"deficit\\\" is decreased first _instead_.\\n     * Likewise, when a withdrawal is completed, this \\\"deficit\\\" is decreased and the withdrawal amount is decreased; We can think of this\\n     * as the withdrawal \\\"paying off the deficit\\\".\\n     */\\n    function podOwnerShares(address podOwner) external view returns (int256);\\n\\n    /// @notice returns canonical, virtual beaconChainETH strategy\\n    function beaconChainETHStrategy() external view returns (IStrategy);\\n\\n    /**\\n     * @notice Used by the DelegationManager to remove a pod owner's shares while they're in the withdrawal queue.\\n     * Simply decreases the `podOwner`'s shares by `shares`, down to a minimum of zero.\\n     * @dev This function reverts if it would result in `podOwnerShares[podOwner]` being less than zero, i.e. it is forbidden for this function to\\n     * result in the `podOwner` incurring a \\\"share deficit\\\". This behavior prevents a Staker from queuing a withdrawal which improperly removes excessive\\n     * shares from the operator to whom the staker is delegated.\\n     * @dev Reverts if `shares` is not a whole Gwei amount\\n     */\\n    function removeShares(address podOwner, uint256 shares) external;\\n\\n    /**\\n     * @notice Increases the `podOwner`'s shares by `shares`, paying off deficit if possible.\\n     * Used by the DelegationManager to award a pod owner shares on exiting the withdrawal queue\\n     * @dev Returns the number of shares added to `podOwnerShares[podOwner]` above zero, which will be less than the `shares` input\\n     * in the event that the podOwner has an existing shares deficit (i.e. `podOwnerShares[podOwner]` starts below zero)\\n     * @dev Reverts if `shares` is not a whole Gwei amount\\n     */\\n    function addShares(address podOwner, uint256 shares) external returns (uint256);\\n\\n    /**\\n     * @notice Used by the DelegationManager to complete a withdrawal, sending tokens to some destination address\\n     * @dev Prioritizes decreasing the podOwner's share deficit, if they have one\\n     * @dev Reverts if `shares` is not a whole Gwei amount\\n     */\\n    function withdrawSharesAsTokens(address podOwner, address destination, uint256 shares) external;\\n\\n    /**\\n     * @notice the deneb hard fork timestamp used to determine which proof path to use for proving a withdrawal\\n     */\\n    function denebForkTimestamp() external view returns (uint64);\\n\\n    /**\\n     * setting the deneb hard fork timestamp by the eigenPodManager owner\\n     * @dev this function is designed to be called twice.  Once, it is set to type(uint64).max\\n     * prior to the actual deneb fork timestamp being set, and then the second time it is set\\n     * to the actual deneb fork timestamp.\\n     */\\n    function setDenebForkTimestamp(uint64 newDenebForkTimestamp) external;\\n}\\n\"\r\n    },\r\n    \"contracts/EigenLayer/interfaces/IETHPOSDeposit.sol\": {\r\n      \"content\": \"// \u250f\u2501\u2501\u2501\u2513\u2501\u250f\u2513\u2501\u250f\u2513\u2501\u2501\u250f\u2501\u2501\u2501\u2513\u2501\u2501\u250f\u2501\u2501\u2501\u2513\u2501\u2501\u2501\u2501\u250f\u2501\u2501\u2501\u2513\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u250f\u2513\u2501\u2501\u2501\u2501\u2501\u250f\u2501\u2501\u2501\u2513\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u250f\u2513\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u250f\u2513\u2501\\n// \u2503\u250f\u2501\u2501\u251b\u250f\u251b\u2517\u2513\u2503\u2503\u2501\u2501\u2503\u250f\u2501\u2513\u2503\u2501\u2501\u2503\u250f\u2501\u2513\u2503\u2501\u2501\u2501\u2501\u2517\u2513\u250f\u2513\u2503\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u250f\u251b\u2517\u2513\u2501\u2501\u2501\u2501\u2503\u250f\u2501\u2513\u2503\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u250f\u251b\u2517\u2513\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u250f\u251b\u2517\u2513\\n// \u2503\u2517\u2501\u2501\u2513\u2517\u2513\u250f\u251b\u2503\u2517\u2501\u2513\u2517\u251b\u250f\u251b\u2503\u2501\u2501\u2503\u2503\u2501\u2503\u2503\u2501\u2501\u2501\u2501\u2501\u2503\u2503\u2503\u2503\u250f\u2501\u2501\u2513\u250f\u2501\u2501\u2513\u250f\u2501\u2501\u2513\u250f\u2501\u2501\u2513\u250f\u2513\u2517\u2513\u250f\u251b\u2501\u2501\u2501\u2501\u2503\u2503\u2501\u2517\u251b\u250f\u2501\u2501\u2513\u250f\u2501\u2513\u2501\u2517\u2513\u250f\u251b\u250f\u2501\u2513\u250f\u2501\u2501\u2513\u2501\u250f\u2501\u2501\u2513\u2517\u2513\u250f\u251b\\n// \u2503\u250f\u2501\u2501\u251b\u2501\u2503\u2503\u2501\u2503\u250f\u2513\u2503\u250f\u2501\u251b\u250f\u251b\u2501\u2501\u2503\u2503\u2501\u2503\u2503\u2501\u2501\u2501\u2501\u2501\u2503\u2503\u2503\u2503\u2503\u250f\u2513\u2503\u2503\u250f\u2513\u2503\u2503\u250f\u2513\u2503\u2503\u2501\u2501\u252b\u2523\u252b\u2501\u2503\u2503\u2501\u2501\u2501\u2501\u2501\u2503\u2503\u2501\u250f\u2513\u2503\u250f\u2513\u2503\u2503\u250f\u2513\u2513\u2501\u2503\u2503\u2501\u2503\u250f\u251b\u2517\u2501\u2513\u2503\u2501\u2503\u250f\u2501\u251b\u2501\u2503\u2503\u2501\\n// \u2503\u2517\u2501\u2501\u2513\u2501\u2503\u2517\u2513\u2503\u2503\u2503\u2503\u2503\u2503\u2517\u2501\u2513\u250f\u2513\u2503\u2517\u2501\u251b\u2503\u2501\u2501\u2501\u2501\u250f\u251b\u2517\u251b\u2503\u2503\u2503\u2501\u252b\u2503\u2517\u251b\u2503\u2503\u2517\u251b\u2503\u2523\u2501\u2501\u2503\u2503\u2503\u2501\u2503\u2517\u2513\u2501\u2501\u2501\u2501\u2503\u2517\u2501\u251b\u2503\u2503\u2517\u251b\u2503\u2503\u2503\u2503\u2503\u2501\u2503\u2517\u2513\u2503\u2503\u2501\u2503\u2517\u251b\u2517\u2513\u2503\u2517\u2501\u2513\u2501\u2503\u2517\u2513\\n// \u2517\u2501\u2501\u2501\u251b\u2501\u2517\u2501\u251b\u2517\u251b\u2517\u251b\u2517\u2501\u2501\u2501\u251b\u2517\u251b\u2517\u2501\u2501\u2501\u251b\u2501\u2501\u2501\u2501\u2517\u2501\u2501\u2501\u251b\u2517\u2501\u2501\u251b\u2503\u250f\u2501\u251b\u2517\u2501\u2501\u251b\u2517\u2501\u2501\u251b\u2517\u251b\u2501\u2517\u2501\u251b\u2501\u2501\u2501\u2501\u2517\u2501\u2501\u2501\u251b\u2517\u2501\u2501\u251b\u2517\u251b\u2517\u251b\u2501\u2517\u2501\u251b\u2517\u251b\u2501\u2517\u2501\u2501\u2501\u251b\u2517\u2501\u2501\u251b\u2501\u2517\u2501\u251b\\n// \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2503\u2503\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\\n// \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2517\u251b\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\\n\\n// SPDX-License-Identifier: CC0-1.0\\n\\npragma solidity >=0.5.0;\\n\\n// This interface is designed to be compatible with the Vyper version.\\n/// @notice This is the Ethereum 2.0 deposit contract interface.\\n/// For more information see the Phase 0 specification under https://github.com/ethereum/eth2.0-specs\\ninterface IETHPOSDeposit {\\n    /// @notice A processed deposit event.\\n    event DepositEvent(\\n        bytes pubkey,\\n        bytes withdrawal_credentials,\\n        bytes amount,\\n        bytes signature,\\n        bytes index\\n    );\\n\\n    /// @notice Submit a Phase 0 DepositData object.\\n    /// @param pubkey A BLS12-381 public key.\\n    /// @param withdrawal_credentials Commitment to a public key for withdrawals.\\n    /// @param signature A BLS12-381 signature.\\n    /// @param deposit_data_root The SHA-256 hash of the SSZ-encoded DepositData object.\\n    /// Used as a protection against malformed input.\\n    function deposit(\\n        bytes calldata pubkey,\\n        bytes calldata withdrawal_credentials,\\n        bytes calldata signature,\\n        bytes32 deposit_data_root\\n    ) external payable;\\n\\n    /// @notice Query the current deposit root hash.\\n    /// @return The deposit root hash.\\n    function get_deposit_root() external view returns (bytes32);\\n\\n    /// @notice Query the current deposit count.\\n    /// @return The deposit count encoded as a little endian 64-bit number.\\n    function get_deposit_count() external view returns (bytes memory);\\n}\\n\"\r\n    },\r\n    \"contracts/EigenLayer/interfaces/IPausable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.5.0;\\n\\nimport \\\"../interfaces/IPauserRegistry.sol\\\";\\n\\n/**\\n * @title Adds pausability to a contract, with pausing & unpausing controlled by the `pauser` and `unpauser` of a PauserRegistry contract.\\n * @author Layr Labs, Inc.\\n * @notice Terms of Service: https://docs.eigenlayer.xyz/overview/terms-of-service\\n * @notice Contracts that inherit from this contract may define their own `pause` and `unpause` (and/or related) functions.\\n * These functions should be permissioned as \\\"onlyPauser\\\" which defers to a `PauserRegistry` for determining access control.\\n * @dev Pausability is implemented using a uint256, which allows up to 256 different single bit-flags; each bit can potentially pause different functionality.\\n * Inspiration for this was taken from the NearBridge design here https://etherscan.io/address/0x3FEFc5A4B1c02f21cBc8D3613643ba0635b9a873#code.\\n * For the `pause` and `unpause` functions we've implemented, if you pause, you can only flip (any number of) switches to on/1 (aka \\\"paused\\\"), and if you unpause,\\n * you can only flip (any number of) switches to off/0 (aka \\\"paused\\\").\\n * If you want a pauseXYZ function that just flips a single bit / \\\"pausing flag\\\", it will:\\n * 1) 'bit-wise and' (aka `&`) a flag with the current paused state (as a uint256)\\n * 2) update the paused state to this new value\\n * @dev We note as well that we have chosen to identify flags by their *bit index* as opposed to their numerical value, so, e.g. defining `DEPOSITS_PAUSED = 3`\\n * indicates specifically that if the *third bit* of `_paused` is flipped -- i.e. it is a '1' -- then deposits should be paused\\n */\\n\\ninterface IPausable {\\n    /// @notice Emitted when the `pauserRegistry` is set to `newPauserRegistry`.\\n    event PauserRegistrySet(IPauserRegistry pauserRegistry, IPauserRegistry newPauserRegistry);\\n\\n    /// @notice Emitted when the pause is triggered by `account`, and changed to `newPausedStatus`.\\n    event Paused(address indexed account, uint256 newPausedStatus);\\n\\n    /// @notice Emitted when the pause is lifted by `account`, and changed to `newPausedStatus`.\\n    event Unpaused(address indexed account, uint256 newPausedStatus);\\n\\n    /// @notice Address of the `PauserRegistry` contract that this contract defers to for determining access control (for pausing).\\n    function pauserRegistry() external view returns (IPauserRegistry);\\n\\n    /**\\n     * @notice This function is used to pause an EigenLayer contract's functionality.\\n     * It is permissioned to the `pauser` address, which is expected to be a low threshold multisig.\\n     * @param newPausedStatus represents the new value for `_paused` to take, which means it may flip several bits at once.\\n     * @dev This function can only pause functionality, and thus cannot 'unflip' any bit in `_paused` from 1 to 0.\\n     */\\n    function pause(uint256 newPausedStatus) external;\\n\\n    /**\\n     * @notice Alias for `pause(type(uint256).max)`.\\n     */\\n    function pauseAll() external;\\n\\n    /**\\n     * @notice This function is used to unpause an EigenLayer contract's functionality.\\n     * It is permissioned to the `unpauser` address, which is expected to be a high threshold multisig or governance contract.\\n     * @param newPausedStatus represents the new value for `_paused` to take, which means it may flip several bits at once.\\n     * @dev This function can only unpause functionality, and thus cannot 'flip' any bit in `_paused` from 0 to 1.\\n     */\\n    function unpause(uint256 newPausedStatus) external;\\n\\n    /// @notice Returns the current paused status as a uint256.\\n    function paused() external view returns (uint256);\\n\\n    /// @notice Returns 'true' if the `indexed`th bit of `_paused` is 1, and 'false' otherwise\\n    function paused(uint8 index) external view returns (bool);\\n\\n    /// @notice Allows the unpauser to set a new pauser registry\\n    function setPauserRegistry(IPauserRegistry newPauserRegistry) external;\\n}\\n\"\r\n    },\r\n    \"contracts/EigenLayer/interfaces/IPauserRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.5.0;\\n\\n/**\\n * @title Interface for the `PauserRegistry` contract.\\n * @author Layr Labs, Inc.\\n * @notice Terms of Service: https://docs.eigenlayer.xyz/overview/terms-of-service\\n */\\ninterface IPauserRegistry {\\n    event PauserStatusChanged(address pauser, bool canPause);\\n\\n    event UnpauserChanged(address previousUnpauser, address newUnpauser);\\n\\n    /// @notice Mapping of addresses to whether they hold the pauser role.\\n    function isPauser(address pauser) external view returns (bool);\\n\\n    /// @notice Unique address that holds the unpauser role. Capable of changing *both* the pauser and unpauser addresses.\\n    function unpauser() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"contracts/EigenLayer/interfaces/ISignatureUtils.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.5.0;\\n\\n/**\\n * @title The interface for common signature utilities.\\n * @author Layr Labs, Inc.\\n * @notice Terms of Service: https://docs.eigenlayer.xyz/overview/terms-of-service\\n */\\ninterface ISignatureUtils {\\n    // @notice Struct that bundles together a signature and an expiration time for the signature. Used primarily for stack management.\\n    struct SignatureWithExpiry {\\n        // the signature itself, formatted as a single bytes object\\n        bytes signature;\\n        // the expiration timestamp (UTC) of the signature\\n        uint256 expiry;\\n    }\\n\\n    // @notice Struct that bundles together a signature, a salt for uniqueness, and an expiration time for the signature. Used primarily for stack management.\\n    struct SignatureWithSaltAndExpiry {\\n        // the signature itself, formatted as a single bytes object\\n        bytes signature;\\n        // the salt used to generate the signature\\n        bytes32 salt;\\n        // the expiration timestamp (UTC) of the signature\\n        uint256 expiry;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/EigenLayer/interfaces/ISlasher.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.5.0;\\n\\nimport \\\"./IStrategyManager.sol\\\";\\nimport \\\"./IDelegationManager.sol\\\";\\n\\n/**\\n * @title Interface for the primary 'slashing' contract for EigenLayer.\\n * @author Layr Labs, Inc.\\n * @notice Terms of Service: https://docs.eigenlayer.xyz/overview/terms-of-service\\n * @notice See the `Slasher` contract itself for implementation details.\\n */\\ninterface ISlasher {\\n    // struct used to store information about the current state of an operator's obligations to middlewares they are serving\\n    struct MiddlewareTimes {\\n        // The update block for the middleware whose most recent update was earliest, i.e. the 'stalest' update out of all middlewares the operator is serving\\n        uint32 stalestUpdateBlock;\\n        // The latest 'serveUntilBlock' from all of the middleware that the operator is serving\\n        uint32 latestServeUntilBlock;\\n    }\\n\\n    // struct used to store details relevant to a single middleware that an operator has opted-in to serving\\n    struct MiddlewareDetails {\\n        // the block at which the contract begins being able to finalize the operator's registration with the service via calling `recordFirstStakeUpdate`\\n        uint32 registrationMayBeginAtBlock;\\n        // the block before which the contract is allowed to slash the user\\n        uint32 contractCanSlashOperatorUntilBlock;\\n        // the block at which the middleware's view of the operator's stake was most recently updated\\n        uint32 latestUpdateBlock;\\n    }\\n\\n    /// @notice Emitted when a middleware times is added to `operator`'s array.\\n    event MiddlewareTimesAdded(\\n        address operator,\\n        uint256 index,\\n        uint32 stalestUpdateBlock,\\n        uint32 latestServeUntilBlock\\n    );\\n\\n    /// @notice Emitted when `operator` begins to allow `contractAddress` to slash them.\\n    event OptedIntoSlashing(address indexed operator, address indexed contractAddress);\\n\\n    /// @notice Emitted when `contractAddress` signals that it will no longer be able to slash `operator` after the `contractCanSlashOperatorUntilBlock`.\\n    event SlashingAbilityRevoked(\\n        address indexed operator,\\n        address indexed contractAddress,\\n        uint32 contractCanSlashOperatorUntilBlock\\n    );\\n\\n    /**\\n     * @notice Emitted when `slashingContract` 'freezes' the `slashedOperator`.\\n     * @dev The `slashingContract` must have permission to slash the `slashedOperator`, i.e. `canSlash(slasherOperator, slashingContract)` must return 'true'.\\n     */\\n    event OperatorFrozen(address indexed slashedOperator, address indexed slashingContract);\\n\\n    /// @notice Emitted when `previouslySlashedAddress` is 'unfrozen', allowing them to again move deposited funds within EigenLayer.\\n    event FrozenStatusReset(address indexed previouslySlashedAddress);\\n\\n    /**\\n     * @notice Gives the `contractAddress` permission to slash the funds of the caller.\\n     * @dev Typically, this function must be called prior to registering for a middleware.\\n     */\\n    function optIntoSlashing(address contractAddress) external;\\n\\n    /**\\n     * @notice Used for 'slashing' a certain operator.\\n     * @param toBeFrozen The operator to be frozen.\\n     * @dev Technically the operator is 'frozen' (hence the name of this function), and then subject to slashing pending a decision by a human-in-the-loop.\\n     * @dev The operator must have previously given the caller (which should be a contract) the ability to slash them, through a call to `optIntoSlashing`.\\n     */\\n    function freezeOperator(address toBeFrozen) external;\\n\\n    /**\\n     * @notice Removes the 'frozen' status from each of the `frozenAddresses`\\n     * @dev Callable only by the contract owner (i.e. governance).\\n     */\\n    function resetFrozenStatus(address[] calldata frozenAddresses) external;\\n\\n    /**\\n     * @notice this function is a called by middlewares during an operator's registration to make sure the operator's stake at registration\\n     *         is slashable until serveUntil\\n     * @param operator the operator whose stake update is being recorded\\n     * @param serveUntilBlock the block until which the operator's stake at the current block is slashable\\n     * @dev adds the middleware's slashing contract to the operator's linked list\\n     */\\n    function recordFirstStakeUpdate(address operator, uint32 serveUntilBlock) external;\\n\\n    /**\\n     * @notice this function is a called by middlewares during a stake update for an operator (perhaps to free pending withdrawals)\\n     *         to make sure the operator's stake at updateBlock is slashable until serveUntil\\n     * @param operator the operator whose stake update is being recorded\\n     * @param updateBlock the block for which the stake update is being recorded\\n     * @param serveUntilBlock the block until which the operator's stake at updateBlock is slashable\\n     * @param insertAfter the element of the operators linked list that the currently updating middleware should be inserted after\\n     * @dev insertAfter should be calculated offchain before making the transaction that calls this. this is subject to race conditions,\\n     *      but it is anticipated to be rare and not detrimental.\\n     */\\n    function recordStakeUpdate(\\n        address operator,\\n        uint32 updateBlock,\\n        uint32 serveUntilBlock,\\n        uint256 insertAfter\\n    ) external;\\n\\n    /**\\n     * @notice this function is a called by middlewares during an operator's deregistration to make sure the operator's stake at deregistration\\n     *         is slashable until serveUntil\\n     * @param operator the operator whose stake update is being recorded\\n     * @param serveUntilBlock the block until which the operator's stake at the current block is slashable\\n     * @dev removes the middleware's slashing contract to the operator's linked list and revokes the middleware's (i.e. caller's) ability to\\n     * slash `operator` once `serveUntil` is reached\\n     */\\n    function recordLastStakeUpdateAndRevokeSlashingAbility(\\n        address operator,\\n        uint32 serveUntilBlock\\n    ) external;\\n\\n    /// @notice The StrategyManager contract of EigenLayer\\n    function strategyManager() external view returns (IStrategyManager);\\n\\n    /// @notice The DelegationManager contract of EigenLayer\\n    function delegation() external view returns (IDelegationManager);\\n\\n    /**\\n     * @notice Used to determine whether `staker` is actively 'frozen'. If a staker is frozen, then they are potentially subject to\\n     * slashing of their funds, and cannot cannot deposit or withdraw from the strategyManager until the slashing process is completed\\n     * and the staker's status is reset (to 'unfrozen').\\n     * @param staker The staker of interest.\\n     * @return Returns 'true' if `staker` themselves has their status set to frozen, OR if the staker is delegated\\n     * to an operator who has their status set to frozen. Otherwise returns 'false'.\\n     */\\n    function isFrozen(address staker) external view returns (bool);\\n\\n    /// @notice Returns true if `slashingContract` is currently allowed to slash `toBeSlashed`.\\n    function canSlash(address toBeSlashed, address slashingContract) external view returns (bool);\\n\\n    /// @notice Returns the block until which `serviceContract` is allowed to slash the `operator`.\\n    function contractCanSlashOperatorUntilBlock(\\n        address operator,\\n        address serviceContract\\n    ) external view returns (uint32);\\n\\n    /// @notice Returns the block at which the `serviceContract` last updated its view of the `operator`'s stake\\n    function latestUpdateBlock(\\n        address operator,\\n        address serviceContract\\n    ) external view returns (uint32);\\n\\n    /// @notice A search routine for finding the correct input value of `insertAfter` to `recordStakeUpdate` / `_updateMiddlewareList`.\\n    function getCorrectValueForInsertAfter(\\n        address operator,\\n        uint32 updateBlock\\n    ) external view returns (uint256);\\n\\n    /**\\n     * @notice Returns 'true' if `operator` can currently complete a withdrawal started at the `withdrawalStartBlock`, with `middlewareTimesIndex` used\\n     * to specify the index of a `MiddlewareTimes` struct in the operator's list (i.e. an index in `operatorToMiddlewareTimes[operator]`). The specified\\n     * struct is consulted as proof of the `operator`'s ability (or lack thereof) to complete the withdrawal.\\n     * This function will return 'false' if the operator cannot currently complete a withdrawal started at the `withdrawalStartBlock`, *or* in the event\\n     * that an incorrect `middlewareTimesIndex` is supplied, even if one or more correct inputs exist.\\n     * @param operator Either the operator who queued the withdrawal themselves, or if the withdrawing party is a staker who delegated to an operator,\\n     * this address is the operator *who the staker was delegated to* at the time of the `withdrawalStartBlock`.\\n     * @param withdrawalStartBlock The block number at which the withdrawal was initiated.\\n     * @param middlewareTimesIndex Indicates an index in `operatorToMiddlewareTimes[operator]` to consult as proof of the `operator`'s ability to withdraw\\n     * @dev The correct `middlewareTimesIndex` input should be computable off-chain.\\n     */\\n    function canWithdraw(\\n        address operator,\\n        uint32 withdrawalStartBlock,\\n        uint256 middlewareTimesIndex\\n    ) external returns (bool);\\n\\n    /**\\n     * operator =>\\n     *  [\\n     *      (\\n     *          the least recent update block of all of the middlewares it's serving/served,\\n     *          latest time that the stake bonded at that update needed to serve until\\n     *      )\\n     *  ]\\n     */\\n    function operatorToMiddlewareTimes(\\n        address operator,\\n        uint256 arrayIndex\\n    ) external view returns (MiddlewareTimes memory);\\n\\n    /// @notice Getter function for fetching `operatorToMiddlewareTimes[operator].length`\\n    function middlewareTimesLength(address operator) external view returns (uint256);\\n\\n    /// @notice Getter function for fetching `operatorToMiddlewareTimes[operator][index].stalestUpdateBlock`.\\n    function getMiddlewareTimesIndexStalestUpdateBlock(\\n        address operator,\\n        uint32 index\\n    ) external view returns (uint32);\\n\\n    /// @notice Getter function for fetching `operatorToMiddlewareTimes[operator][index].latestServeUntil`.\\n    function getMiddlewareTimesIndexServeUntilBlock(\\n        address operator,\\n        uint32 index\\n    ) external view returns (uint32);\\n\\n    /// @notice Getter function for fetching `_operatorToWhitelistedContractsByUpdate[operator].size`.\\n    function operatorWhitelistedContractsLinkedListSize(\\n        address operator\\n    ) external view returns (uint256);\\n\\n    /// @notice Getter function for fetching a single node in the operator's linked list (`_operatorToWhitelistedContractsByUpdate[operator]`).\\n    function operatorWhitelistedContractsLinkedListEntry(\\n        address operator,\\n        address node\\n    ) external view returns (bool, uint256, uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/EigenLayer/interfaces/IStrategy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.5.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/**\\n * @title Minimal interface for an `Strategy` contract.\\n * @author Layr Labs, Inc.\\n * @notice Terms of Service: https://docs.eigenlayer.xyz/overview/terms-of-service\\n * @notice Custom `Strategy` implementations may expand extensively on this interface.\\n */\\ninterface IStrategy {\\n    /**\\n     * @notice Used to deposit tokens into this Strategy\\n     * @param token is the ERC20 token being deposited\\n     * @param amount is the amount of token being deposited\\n     * @dev This function is only callable by the strategyManager contract. It is invoked inside of the strategyManager's\\n     * `depositIntoStrategy` function, and individual share balances are recorded in the strategyManager as well.\\n     * @return newShares is the number of new shares issued at the current exchange ratio.\\n     */\\n    function deposit(IERC20 token, uint256 amount) external returns (uint256);\\n\\n    /**\\n     * @notice Used to withdraw tokens from this Strategy, to the `recipient`'s address\\n     * @param recipient is the address to receive the withdrawn funds\\n     * @param token is the ERC20 token being transferred out\\n     * @param amountShares is the amount of shares being withdrawn\\n     * @dev This function is only callable by the strategyManager contract. It is invoked inside of the strategyManager's\\n     * other functions, and individual share balances are recorded in the strategyManager as well.\\n     */\\n    function withdraw(address recipient, IERC20 token, uint256 amountShares) external;\\n\\n    /**\\n     * @notice Used to convert a number of shares to the equivalent amount of underlying tokens for this strategy.\\n     * @notice In contrast to `sharesToUnderlyingView`, this function **may** make state modifications\\n     * @param amountShares is the amount of shares to calculate its conversion into the underlying token\\n     * @return The amount of underlying tokens corresponding to the input `amountShares`\\n     * @dev Implementation for these functions in particular may vary significantly for different strategies\\n     */\\n    function sharesToUnderlying(uint256 amountShares) external returns (uint256);\\n\\n    /**\\n     * @notice Used to convert an amount of underlying tokens to the equivalent amount of shares in this strategy.\\n     * @notice In contrast to `underlyingToSharesView`, this function **may** make state modifications\\n     * @param amountUnderlying is the amount of `underlyingToken` to calculate its conversion into strategy shares\\n     * @return The amount of underlying tokens corresponding to the input `amountShares`\\n     * @dev Implementation for these functions in particular may vary significantly for different strategies\\n     */\\n    function underlyingToShares(uint256 amountUnderlying) external returns (uint256);\\n\\n    /**\\n     * @notice convenience function for fetching the current underlying value of all of the `user`'s shares in\\n     * this strategy. In contrast to `userUnderlyingView`, this function **may** make state modifications\\n     */\\n    function userUnderlying(address user) external returns (uint256);\\n\\n    /**\\n     * @notice convenience function for fetching the current total shares of `user` in this strategy, by\\n     * querying the `strategyManager` contract\\n     */\\n    function shares(address user) external view returns (uint256);\\n\\n    /**\\n     * @notice Used to convert a number of shares to the equivalent amount of underlying tokens for this strategy.\\n     * @notice In contrast to `sharesToUnderlying`, this function guarantees no state modifications\\n     * @param amountShares is the amount of shares to calculate its conversion into the underlying token\\n     * @return The amount of shares corresponding to the input `amountUnderlying`\\n     * @dev Implementation for these functions in particular may vary significantly for different strategies\\n     */\\n    function sharesToUnderlyingView(uint256 amountShares) external view returns (uint256);\\n\\n    /**\\n     * @notice Used to convert an amount of underlying tokens to the equivalent amount of shares in this strategy.\\n     * @notice In contrast to `underlyingToShares`, this function guarantees no state modifications\\n     * @param amountUnderlying is the amount of `underlyingToken` to calculate its conversion into strategy shares\\n     * @return The amount of shares corresponding to the input `amountUnderlying`\\n     * @dev Implementation for these functions in particular may vary significantly for different strategies\\n     */\\n    function underlyingToSharesView(uint256 amountUnderlying) external view returns (uint256);\\n\\n    /**\\n     * @notice convenience function for fetching the current underlying value of all of the `user`'s shares in\\n     * this strategy. In contrast to `userUnderlying`, this function guarantees no state modifications\\n     */\\n    function userUnderlyingView(address user) external view returns (uint256);\\n\\n    /// @notice The underlying token for shares in this Strategy\\n    function underlyingToken() external view returns (IERC20);\\n\\n    /// @notice The total number of extant shares in this Strategy\\n    function totalShares() external view returns (uint256);\\n\\n    /// @notice Returns either a brief string explaining the strategy's goal & purpose, or a link to metadata that explains in more detail.\\n    function explanation() external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"contracts/EigenLayer/interfaces/IStrategyManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.5.0;\\n\\nimport \\\"./IStrategy.sol\\\";\\nimport \\\"./ISlasher.sol\\\";\\nimport \\\"./IDelegationManager.sol\\\";\\nimport \\\"./IEigenPodManager.sol\\\";\\n\\n/**\\n * @title Interface for the primary entrypoint for funds into EigenLayer.\\n * @author Layr Labs, Inc.\\n * @notice Terms of Service: https://docs.eigenlayer.xyz/overview/terms-of-service\\n * @notice See the `StrategyManager` contract itself for implementation details.\\n */\\ninterface IStrategyManager {\\n    // Access to public vars - hack locally\\n    function stakerStrategyList(address staker, uint256 index) external view returns (IStrategy);\\n    function strategyIsWhitelistedForDeposit(IStrategy _strategy) external view returns (bool);\\n\\n    /**\\n     * @notice Emitted when a new deposit occurs on behalf of `staker`.\\n     * @param staker Is the staker who is depositing funds into EigenLayer.\\n     * @param strategy Is the strategy that `staker` has deposited into.\\n     * @param token Is the token that `staker` deposited.\\n     * @param shares Is the number of new shares `staker` has been granted in `strategy`.\\n     */\\n    event Deposit(address staker, IERC20 token, IStrategy strategy, uint256 shares);\\n\\n    /// @notice Emitted when `thirdPartyTransfersForbidden` is updated for a strategy and value by the owner\\n    event UpdatedThirdPartyTransfersForbidden(IStrategy strategy, bool value);\\n\\n    /// @notice Emitted when the `strategyWhitelister` is changed\\n    event StrategyWhitelisterChanged(address previousAddress, address newAddress);\\n\\n    /// @notice Emitted when a strategy is added to the approved list of strategies for deposit\\n    event StrategyAddedToDepositWhitelist(IStrategy strategy);\\n\\n    /// @notice Emitted when a strategy is removed from the approved list of strategies for deposit\\n    event StrategyRemovedFromDepositWhitelist(IStrategy strategy);\\n\\n    /**\\n     * @notice Deposits `amount` of `token` into the specified `strategy`, with the resultant shares credited to `msg.sender`\\n     * @param strategy is the specified strategy where deposit is to be made,\\n     * @param token is the denomination in which the deposit is to be made,\\n     * @param amount is the amount of token to be deposited in the strategy by the staker\\n     * @return shares The amount of new shares in the `strategy` created as part of the action.\\n     * @dev The `msg.sender` must have previously approved this contract to transfer at least `amount` of `token` on their behalf.\\n     * @dev Cannot be called by an address that is 'frozen' (this function will revert if the `msg.sender` is frozen).\\n     *\\n     * WARNING: Depositing tokens that allow reentrancy (eg. ERC-777) into a strategy is not recommended.  This can lead to attack vectors\\n     *          where the token balance and corresponding strategy shares are not in sync upon reentrancy.\\n     */\\n    function depositIntoStrategy(\\n        IStrategy strategy,\\n        IERC20 token,\\n        uint256 amount\\n    ) external returns (uint256 shares);\\n\\n    /**\\n     * @notice Used for depositing an asset into the specified strategy with the resultant shares credited to `staker`,\\n     * who must sign off on the action.\\n     * Note that the assets are transferred out/from the `msg.sender`, not from the `staker`; this function is explicitly designed\\n     * purely to help one address deposit 'for' another.\\n     * @param strategy is the specified strategy where deposit is to be made,\\n     * @param token is the denomination in which the deposit is to be made,\\n     * @param amount is the amount of token to be deposited in the strategy by the staker\\n     * @param staker the staker that the deposited assets will be credited to\\n     * @param expiry the timestamp at which the signature expires\\n     * @param signature is a valid signature from the `staker`. either an ECDSA signature if the `staker` is an EOA, or data to forward\\n     * following EIP-1271 if the `staker` is a contract\\n     * @return shares The amount of new shares in the `strategy` created as part of the action.\\n     * @dev The `msg.sender` must have previously approved this contract to transfer at least `amount` of `token` on their behalf.\\n     * @dev A signature is required for this function to eliminate the possibility of griefing attacks, specifically those\\n     * targeting stakers who may be attempting to undelegate.\\n     * @dev Cannot be called if thirdPartyTransfersForbidden is set to true for this strategy\\n     *\\n     *  WARNING: Depositing tokens that allow reentrancy (eg. ERC-777) into a strategy is not recommended.  This can lead to attack vectors\\n     *          where the token balance and corresponding strategy shares are not in sync upon reentrancy\\n     */\\n    function depositIntoStrategyWithSignature(\\n        IStrategy strategy,\\n        IERC20 token,\\n        uint256 amount,\\n        address staker,\\n        uint256 expiry,\\n        bytes memory signature\\n    ) external returns (uint256 shares);\\n\\n    /// @notice Used by the DelegationManager to remove a Staker's shares from a particular strategy when entering the withdrawal queue\\n    function removeShares(address staker, IStrategy strategy, uint256 shares) external;\\n\\n    /// @notice Used by the DelegationManager to award a Staker some shares that have passed through the withdrawal queue\\n    function addShares(address staker, IERC20 token, IStrategy strategy, uint256 shares) external;\\n\\n    /// @notice Used by the DelegationManager to convert withdrawn shares to tokens and send them to a recipient\\n    function withdrawSharesAsTokens(\\n        address recipient,\\n        IStrategy strategy,\\n        uint256 shares,\\n        IERC20 token\\n    ) external;\\n\\n    /// @notice Returns the current shares of `user` in `strategy`\\n    function stakerStrategyShares(\\n        address user,\\n        IStrategy strategy\\n    ) external view returns (uint256 shares);\\n\\n    /**\\n     * @notice Get all details on the staker's deposits and corresponding shares\\n     * @return (staker's strategies, shares in these strategies)\\n     */\\n    function getDeposits(\\n        address staker\\n    ) external view returns (IStrategy[] memory, uint256[] memory);\\n\\n    /// @notice Simple getter function that returns `stakerStrategyList[staker].length`.\\n    function stakerStrategyListLength(address staker) external view returns (uint256);\\n\\n    /**\\n     * @notice Owner-only function that adds the provided Strategies to the 'whitelist' of strategies that stakers can deposit into\\n     * @param strategiesToWhitelist Strategies that will be added to the `strategyIsWhitelistedForDeposit` mapping (if they aren't in it already)\\n     * @param thirdPartyTransfersForbiddenValues bool values to set `thirdPartyTransfersForbidden` to for each strategy\\n     */\\n    function addStrategiesToDepositWhitelist(\\n        IStrategy[] calldata strategiesToWhitelist,\\n        bool[] calldata thirdPartyTransfersForbiddenValues\\n    ) external;\\n\\n    /**\\n     * @notice Owner-only function that removes the provided Strategies from the 'whitelist' of strategies that stakers can deposit into\\n     * @param strategiesToRemoveFromWhitelist Strategies that will be removed to the `strategyIsWhitelistedForDeposit` mapping (if they are in it)\\n     */\\n    function removeStrategiesFromDepositWhitelist(\\n        IStrategy[] calldata strategiesToRemoveFromWhitelist\\n    ) external;\\n\\n    /// @notice Returns the single, central Delegation contract of EigenLayer\\n    function delegation() external view returns (IDelegationManager);\\n\\n    /// @notice Returns the single, central Slasher contract of EigenLayer\\n    function slasher() external view returns (ISlasher);\\n\\n    /// @notice Returns the EigenPodManager contract of EigenLayer\\n    function eigenPodManager() external view returns (IEigenPodManager);\\n\\n    /// @notice Returns the address of the `strategyWhitelister`\\n    function strategyWhitelister() external view returns (address);\\n\\n    /**\\n     * @notice Returns bool for whether or not `strategy` enables credit transfers. i.e enabling\\n     * depositIntoStrategyWithSignature calls or queueing withdrawals to a different address than the staker.\\n     */\\n    function thirdPartyTransfersForbidden(IStrategy strategy) external view returns (bool);\\n\\n    // LIMITED BACKWARDS-COMPATIBILITY FOR DEPRECATED FUNCTIONALITY\\n    // packed struct for queued withdrawals; helps deal with stack-too-deep errors\\n    struct DeprecatedStruct_WithdrawerAndNonce {\\n        address withdrawer;\\n        uint96 nonce;\\n    }\\n\\n    /**\\n     * Struct type used to specify an existing queued withdrawal. Rather than storing the entire struct, only a hash is stored.\\n     * In functions that operate on existing queued withdrawals -- e.g. `startQueuedWithdrawalWaitingPeriod` or `completeQueuedWithdrawal`,\\n     * the data is resubmitted and the hash of the submitted data is computed by `calculateWithdrawalRoot` and checked against the\\n     * stored hash in order to confirm the integrity of the submitted data.\\n     */\\n    struct DeprecatedStruct_QueuedWithdrawal {\\n        IStrategy[] strategies;\\n        uint256[] shares;\\n        address staker;\\n        DeprecatedStruct_WithdrawerAndNonce withdrawerAndNonce;\\n        uint32 withdrawalStartBlock;\\n        address delegatedAddress;\\n    }\\n\\n    function migrateQueuedWithdrawal(\\n        DeprecatedStruct_QueuedWithdrawal memory queuedWithdrawal\\n    ) external returns (bool, bytes32);\\n\\n    function calculateWithdrawalRoot(\\n        DeprecatedStruct_QueuedWithdrawal memory queuedWithdrawal\\n    ) external pure returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"contracts/EigenLayer/libraries/BeaconChainProofs.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity =0.8.19;\\n\\nimport \\\"./Merkle.sol\\\";\\nimport \\\"../libraries/Endian.sol\\\";\\n\\n//Utility library for parsing and PHASE0 beacon chain block headers\\n//SSZ Spec: https://github.com/ethereum/consensus-specs/blob/dev/ssz/simple-serialize.md#merkleization\\n//BeaconBlockHeader Spec: https://github.com/ethereum/consensus-specs/blob/dev/specs/phase0/beacon-chain.md#beaconblockheader\\n//BeaconState Spec: https://github.com/ethereum/consensus-specs/blob/dev/specs/phase0/beacon-chain.md#beaconstate\\nlibrary BeaconChainProofs {\\n    // constants are the number of fields and the heights of the different merkle trees used in merkleizing beacon chain containers\\n    uint256 internal constant BEACON_BLOCK_HEADER_FIELD_TREE_HEIGHT = 3;\\n\\n    uint256 internal constant BEACON_BLOCK_BODY_FIELD_TREE_HEIGHT = 4;\\n\\n    uint256 internal constant BEACON_STATE_FIELD_TREE_HEIGHT = 5;\\n\\n    uint256 internal constant VALIDATOR_FIELD_TREE_HEIGHT = 3;\\n\\n    //Note: changed in the deneb hard fork from 4->5\\n    uint256 internal constant EXECUTION_PAYLOAD_HEADER_FIELD_TREE_HEIGHT_DENEB = 5;\\n    uint256 internal constant EXECUTION_PAYLOAD_HEADER_FIELD_TREE_HEIGHT_CAPELLA = 4;\\n\\n    // SLOTS_PER_HISTORICAL_ROOT = 2**13, so tree height is 13\\n    uint256 internal constant BLOCK_ROOTS_TREE_HEIGHT = 13;\\n\\n    //HISTORICAL_ROOTS_LIMIT = 2**24, so tree height is 24\\n    uint256 internal constant HISTORICAL_SUMMARIES_TREE_HEIGHT = 24;\\n\\n    //Index of block_summary_root in historical_summary container\\n    uint256 internal constant BLOCK_SUMMARY_ROOT_INDEX = 0;\\n\\n    // tree height for hash tree of an individual withdrawal container\\n    uint256 internal constant WITHDRAWAL_FIELD_TREE_HEIGHT = 2;\\n\\n    uint256 internal constant VALIDATOR_TREE_HEIGHT = 40;\\n\\n    // MAX_WITHDRAWALS_PER_PAYLOAD = 2**4, making tree height = 4\\n    uint256 internal constant WITHDRAWALS_TREE_HEIGHT = 4;\\n\\n    //in beacon block body https://github.com/ethereum/consensus-specs/blob/dev/specs/capella/beacon-chain.md#beaconblockbody\\n    uint256 internal constant EXECUTION_PAYLOAD_INDEX = 9;\\n\\n    // in beacon block header https://github.com/ethereum/consensus-specs/blob/dev/specs/phase0/beacon-chain.md#beaconblockheader\\n    uint256 internal constant SLOT_INDEX = 0;\\n    uint256 internal constant STATE_ROOT_INDEX = 3;\\n    uint256 internal constant BODY_ROOT_INDEX = 4;\\n    // in beacon state https://github.com/ethereum/consensus-specs/blob/dev/specs/capella/beacon-chain.md#beaconstate\\n    uint256 internal constant VALIDATOR_TREE_ROOT_INDEX = 11;\\n    uint256 internal constant HISTORICAL_SUMMARIES_INDEX = 27;\\n\\n    // in validator https://github.com/ethereum/consensus-specs/blob/dev/specs/phase0/beacon-chain.md#validator\\n    uint256 internal constant VALIDATOR_PUBKEY_INDEX = 0;\\n    uint256 internal constant VALIDATOR_WITHDRAWAL_CREDENTIALS_INDEX = 1;\\n    uint256 internal constant VALIDATOR_BALANCE_INDEX = 2;\\n    uint256 internal constant VALIDATOR_WITHDRAWABLE_EPOCH_INDEX = 7;\\n\\n    // in execution payload header\\n    uint256 internal constant TIMESTAMP_INDEX = 9;\\n\\n    //in execution payload\\n    uint256 internal constant WITHDRAWALS_INDEX = 14;\\n\\n    // in withdrawal\\n    uint256 internal constant WITHDRAWAL_VALIDATOR_INDEX_INDEX = 1;\\n    uint256 internal constant WITHDRAWAL_VALIDATOR_AMOUNT_INDEX = 3;\\n\\n    //Misc Constants\\n\\n    /// @notice The number of slots each epoch in the beacon chain\\n    uint64 internal constant SLOTS_PER_EPOCH = 32;\\n\\n    /// @notice The number of seconds in a slot in the beacon chain\\n    uint64 internal constant SECONDS_PER_SLOT = 12;\\n\\n    /// @notice Number of seconds per epoch: 384 == 32 slots/epoch * 12 seconds/slot\\n    uint64 internal constant SECONDS_PER_EPOCH = SLOTS_PER_EPOCH * SECONDS_PER_SLOT;\\n\\n    bytes8 internal constant UINT64_MASK = 0xffffffffffffffff;\\n\\n    /// @notice This struct contains the merkle proofs and leaves needed to verify a partial/full withdrawal\\n    struct WithdrawalProof {\\n        bytes withdrawalProof;\\n        bytes slotProof;\\n        bytes executionPayloadProof;\\n        bytes timestampProof;\\n        bytes historicalSummaryBlockRootProof;\\n        uint64 blockRootIndex;\\n        uint64 historicalSummaryIndex;\\n        uint64 withdrawalIndex;\\n        bytes32 blockRoot;\\n        bytes32 slotRoot;\\n        bytes32 timestampRoot;\\n        bytes32 executionPayloadRoot;\\n    }\\n\\n    /// @notice This struct contains the root and proof for verifying the state root against the oracle block root\\n    struct StateRootProof {\\n        bytes32 beaconStateRoot;\\n        bytes proof;\\n    }\\n\\n    /**\\n     * @notice This function verifies merkle proofs of the fields of a certain validator against a beacon chain state root\\n     * @param validatorIndex the index of the proven validator\\n     * @param beaconStateRoot is the beacon chain state root to be proven against.\\n     * @param validatorFieldsProof is the data used in proving the validator's fields\\n     * @param validatorFields the claimed fields of the validator\\n     */\\n    function verifyValidatorFields(\\n        bytes32 beaconStateRoot,\\n        bytes32[] calldata validatorFields,\\n        bytes calldata validatorFieldsProof,\\n        uint40 validatorIndex\\n    ) internal view {\\n        require(\\n            validatorFields.length == 2 ** VALIDATOR_FIELD_TREE_HEIGHT,\\n            \\\"BeaconChainProofs.verifyValidatorFields: Validator fields has incorrect length\\\"\\n        );\\n\\n        /**\\n         * Note: the length of the validator merkle proof is BeaconChainProofs.VALIDATOR_TREE_HEIGHT + 1.\\n         * There is an additional layer added by hashing the root with the length of the validator list\\n         */\\n        require(\\n            validatorFieldsProof.length ==\\n                32 * ((VALIDATOR_TREE_HEIGHT + 1) + BEACON_STATE_FIELD_TREE_HEIGHT),\\n            \\\"BeaconChainProofs.verifyValidatorFields: Proof has incorrect length\\\"\\n        );\\n        uint256 index = (VALIDATOR_TREE_ROOT_INDEX << (VALIDATOR_TREE_HEIGHT + 1)) |\\n            uint256(validatorIndex);\\n        // merkleize the validatorFields to get the leaf to prove\\n        bytes32 validatorRoot = Merkle.merkleizeSha256(validatorFields);\\n\\n        // verify the proof of the validatorRoot against the beaconStateRoot\\n        require(\\n            Merkle.verifyInclusionSha256({\\n                proof: validatorFieldsProof,\\n                root: beaconStateRoot,\\n                leaf: validatorRoot,\\n                index: index\\n            }),\\n            \\\"BeaconChainProofs.verifyValidatorFields: Invalid merkle proof\\\"\\n        );\\n    }\\n\\n    /**\\n     * @notice This function verifies the latestBlockHeader against the state root. the latestBlockHeader is\\n     * a tracked in the beacon state.\\n     * @param beaconStateRoot is the beacon chain state root to be proven against.\\n     * @param stateRootProof is the provided merkle proof\\n     * @param latestBlockRoot is hashtree root of the latest block header in the beacon state\\n     */\\n    function verifyStateRootAgainstLatestBlockRoot(\\n        bytes32 latestBlockRoot,\\n        bytes32 beaconStateRoot,\\n        bytes calldata stateRootProof\\n    ) internal view {\\n        require(\\n            stateRootProof.length == 32 * (BEACON_BLOCK_HEADER_FIELD_TREE_HEIGHT),\\n            \\\"BeaconChainProofs.verifyStateRootAgainstLatestBlockRoot: Proof has incorrect length\\\"\\n        );\\n        //Next we verify the slot against the blockRoot\\n        require(\\n            Merkle.verifyInclusionSha256({\\n                proof: stateRootProof,\\n                root: latestBlockRoot,\\n                leaf: beaconStateRoot,\\n                index: STATE_ROOT_INDEX\\n            }),\\n            \\\"BeaconChainProofs.verifyStateRootAgainstLatestBlockRoot: Invalid latest block header root merkle proof\\\"\\n        );\\n    }\\n\\n    /**\\n     * @notice This function verifies the slot and the withdrawal fields for a given withdrawal\\n     * @param withdrawalProof is the provided set of merkle proofs\\n     * @param withdrawalFields is the serialized withdrawal container to be proven\\n     */\\n    function verifyWithdrawal(\\n        bytes32 beaconStateRoot,\\n        bytes32[] calldata withdrawalFields,\\n        WithdrawalProof calldata withdrawalProof,\\n        uint64 denebForkTimestamp\\n    ) internal view {\\n        require(\\n            withdrawalFields.length == 2 ** WITHDRAWAL_FIELD_TREE_HEIGHT,\\n            \\\"BeaconChainProofs.verifyWithdrawal: withdrawalFields has incorrect length\\\"\\n        );\\n\\n        require(\\n            withdrawalProof.blockRootIndex < 2 ** BLOCK_ROOTS_TREE_HEIGHT,\\n            \\\"BeaconChainProofs.verifyWithdrawal: blockRootIndex is too large\\\"\\n        );\\n        require(\\n            withdrawalProof.withdrawalIndex < 2 ** WITHDRAWALS_TREE_HEIGHT,\\n            \\\"BeaconChainProofs.verifyWithdrawal: withdrawalIndex is too large\\\"\\n        );\\n\\n        require(\\n            withdrawalProof.historicalSummaryIndex < 2 ** HISTORICAL_SUMMARIES_TREE_HEIGHT,\\n            \\\"BeaconChainProofs.verifyWithdrawal: historicalSummaryIndex is too large\\\"\\n        );\\n\\n        //Note: post deneb hard fork, the number of exection payload header fields increased from 15->17, adding an extra level to the tree height\\n        uint256 executionPayloadHeaderFieldTreeHeight = (getWithdrawalTimestamp(withdrawalProof) <\\n            denebForkTimestamp)\\n            ? EXECUTION_PAYLOAD_HEADER_FIELD_TREE_HEIGHT_CAPELLA\\n            : EXECUTION_PAYLOAD_HEADER_FIELD_TREE_HEIGHT_DENEB;\\n        require(\\n            withdrawalProof.withdrawalProof.length ==\\n                32 * (executionPayloadHeaderFieldTreeHeight + WITHDRAWALS_TREE_HEIGHT + 1),\\n            \\\"BeaconChainProofs.verifyWithdrawal: withdrawalProof has incorrect length\\\"\\n        );\\n        require(\\n            withdrawalProof.executionPayloadProof.length ==\\n                32 * (BEACON_BLOCK_HEADER_FIELD_TREE_HEIGHT + BEACON_BLOCK_BODY_FIELD_TREE_HEIGHT),\\n            \\\"BeaconChainProofs.verifyWithdrawal: executionPayloadProof has incorrect length\\\"\\n        );\\n        require(\\n            withdrawalProof.slotProof.length == 32 * (BEACON_BLOCK_HEADER_FIELD_TREE_HEIGHT),\\n            \\\"BeaconChainProofs.verifyWithdrawal: slotProof has incorrect length\\\"\\n        );\\n        require(\\n            withdrawalProof.timestampProof.length == 32 * (executionPayloadHeaderFieldTreeHeight),\\n            \\\"BeaconChainProofs.verifyWithdrawal: timestampProof has incorrect length\\\"\\n        );\\n\\n        require(\\n            withdrawalProof.historicalSummaryBlockRootProof.length ==\\n                32 *\\n                    (BEACON_STATE_FIELD_TREE_HEIGHT +\\n                        (HISTORICAL_SUMMARIES_TREE_HEIGHT + 1) +\\n                        1 +\\n                        (BLOCK_ROOTS_TREE_HEIGHT)),\\n            \\\"BeaconChainProofs.verifyWithdrawal: historicalSummaryBlockRootProof has incorrect length\\\"\\n        );\\n        /**\\n         * Note: Here, the \\\"1\\\" in \\\"1 + (BLOCK_ROOTS_TREE_HEIGHT)\\\" signifies that extra step of choosing the \\\"block_root_summary\\\" within the individual\\n         * \\\"historical_summary\\\". Everywhere else it signifies merkelize_with_mixin, where the length of an array is hashed with the root of the array,\\n         * but not here.\\n         */\\n        uint256 historicalBlockHeaderIndex = (HISTORICAL_SUMMARIES_INDEX <<\\n            ((HISTORICAL_SUMMARIES_TREE_HEIGHT + 1) + 1 + (BLOCK_ROOTS_TREE_HEIGHT))) |\\n            (uint256(withdrawalProof.historicalSummaryIndex) << (1 + (BLOCK_ROOTS_TREE_HEIGHT))) |\\n            (BLOCK_SUMMARY_ROOT_INDEX << (BLOCK_ROOTS_TREE_HEIGHT)) |\\n            uint256(withdrawalProof.blockRootIndex);\\n\\n        require(\\n            Merkle.verifyInclusionSha256({\\n                proof: withdrawalProof.historicalSummaryBlockRootProof,\\n                root: beaconStateRoot,\\n                leaf: withdrawalProof.blockRoot,\\n                index: historicalBlockHeaderIndex\\n            }),\\n            \\\"BeaconChainProofs.verifyWithdrawal: Invalid historicalsummary merkle proof\\\"\\n        );\\n\\n        //Next we verify the slot against the blockRoot\\n        require(\\n            Merkle.verifyInclusionSha256({\\n                proof: withdrawalProof.slotProof,\\n                root: withdrawalProof.blockRoot,\\n                leaf: withdrawalProof.slotRoot,\\n                index: SLOT_INDEX\\n            }),\\n            \\\"BeaconChainProofs.verifyWithdrawal: Invalid slot merkle proof\\\"\\n        );\\n\\n        {\\n            // Next we verify the executionPayloadRoot against the blockRoot\\n            uint256 executionPayloadIndex = (BODY_ROOT_INDEX <<\\n                (BEACON_BLOCK_BODY_FIELD_TREE_HEIGHT)) | EXECUTION_PAYLOAD_INDEX;\\n            require(\\n                Merkle.verifyInclusionSha256({\\n                    proof: withdrawalProof.executionPayloadProof,\\n                    root: withdrawalProof.blockRoot,\\n                    leaf: withdrawalProof.executionPayloadRoot,\\n                    index: executionPayloadIndex\\n                }),\\n                \\\"BeaconChainProofs.verifyWithdrawal: Invalid executionPayload merkle proof\\\"\\n            );\\n        }\\n\\n        // Next we verify the timestampRoot against the executionPayload root\\n        require(\\n            Merkle.verifyInclusionSha256({\\n                proof: withdrawalProof.timestampProof,\\n                root: withdrawalProof.executionPayloadRoot,\\n                leaf: withdrawalProof.timestampRoot,\\n                index: TIMESTAMP_INDEX\\n            }),\\n            \\\"BeaconChainProofs.verifyWithdrawal: Invalid timestamp merkle proof\\\"\\n        );\\n\\n        {\\n            /**\\n             * Next we verify the withdrawal fields against the executionPayloadRoot:\\n             * First we compute the withdrawal_index, then we merkleize the\\n             * withdrawalFields container to calculate the withdrawalRoot.\\n             *\\n             * Note: Merkleization of the withdrawals root tree uses MerkleizeWithMixin, i.e., the length of the array is hashed with the root of\\n             * the array.  Thus we shift the WITHDRAWALS_INDEX over by WITHDRAWALS_TREE_HEIGHT + 1 and not just WITHDRAWALS_TREE_HEIGHT.\\n             */\\n            uint256 withdrawalIndex = (WITHDRAWALS_INDEX << (WITHDRAWALS_TREE_HEIGHT + 1)) |\\n                uint256(withdrawalProof.withdrawalIndex);\\n            bytes32 withdrawalRoot = Merkle.merkleizeSha256(withdrawalFields);\\n            require(\\n                Merkle.verifyInclusionSha256({\\n                    proof: withdrawalProof.withdrawalProof,\\n                    root: withdrawalProof.executionPayloadRoot,\\n                    leaf: withdrawalRoot,\\n                    index: withdrawalIndex\\n                }),\\n                \\\"BeaconChainProofs.verifyWithdrawal: Invalid withdrawal merkle proof\\\"\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @notice This function replicates the ssz hashing of a validator's pubkey, outlined below:\\n     *  hh := ssz.NewHasher()\\n     *  hh.PutBytes(validatorPubkey[:])\\n     *  validatorPubkeyHash := hh.Hash()\\n     *  hh.Reset()\\n     */\\n    function hashValidatorBLSPubkey(\\n        bytes memory validatorPubkey\\n    ) internal pure returns (bytes32 pubkeyHash) {\\n        require(validatorPubkey.length == 48, \\\"Input should be 48 bytes in length\\\");\\n        return sha256(abi.encodePacked(validatorPubkey, bytes16(0)));\\n    }\\n\\n    /**\\n     * @dev Retrieve the withdrawal timestamp\\n     */\\n    function getWithdrawalTimestamp(\\n        WithdrawalProof memory withdrawalProof\\n    ) internal pure returns (uint64) {\\n        return Endian.fromLittleEndianUint64(withdrawalProof.timestampRoot);\\n    }\\n\\n    /**\\n     * @dev Converts the withdrawal's slot to an epoch\\n     */\\n    function getWithdrawalEpoch(\\n        WithdrawalProof memory withdrawalProof\\n    ) internal pure returns (uint64) {\\n        return Endian.fromLittleEndianUint64(withdrawalProof.slotRoot) / SLOTS_PER_EPOCH;\\n    }\\n\\n    /**\\n     * Indices for validator fields (refer to consensus specs):\\n     * 0: pubkey\\n     * 1: withdrawal credentials\\n     * 2: effective balance\\n     * 3: slashed?\\n     * 4: activation elligibility epoch\\n     * 5: activation epoch\\n     * 6: exit epoch\\n     * 7: withdrawable epoch\\n     */\\n\\n    /**\\n     * @dev Retrieves a validator's pubkey hash\\n     */\\n    function getPubkeyHash(bytes32[] memory validatorFields) internal pure returns (bytes32) {\\n        return validatorFields[VALIDATOR_PUBKEY_INDEX];\\n    }\\n\\n    function getWithdrawalCredentials(\\n        bytes32[] memory validatorFields\\n    ) internal pure returns (bytes32) {\\n        return validatorFields[VALIDATOR_WITHDRAWAL_CREDENTIALS_INDEX];\\n    }\\n\\n    /**\\n     * @dev Retrieves a validator's effective balance (in gwei)\\n     */\\n    function getEffectiveBalanceGwei(\\n        bytes32[] memory validatorFields\\n    ) internal pure returns (uint64) {\\n        return Endian.fromLittleEndianUint64(validatorFields[VALIDATOR_BALANCE_INDEX]);\\n    }\\n\\n    /**\\n     * @dev Retrieves a validator's withdrawable epoch\\n     */\\n    function getWithdrawableEpoch(bytes32[] memory validatorFields) internal pure returns (uint64) {\\n        return Endian.fromLittleEndianUint64(validatorFields[VALIDATOR_WITHDRAWABLE_EPOCH_INDEX]);\\n    }\\n\\n    /**\\n     * Indices for withdrawal fields (refer to consensus specs):\\n     * 0: withdrawal index\\n     * 1: validator index\\n     * 2: execution address\\n     * 3: withdrawal amount\\n     */\\n\\n    /**\\n     * @dev Retrieves a withdrawal's validator index\\n     */\\n    function getValidatorIndex(bytes32[] memory withdrawalFields) internal pure returns (uint40) {\\n        return\\n            uint40(\\n                Endian.fromLittleEndianUint64(withdrawalFields[WITHDRAWAL_VALIDATOR_INDEX_INDEX])\\n            );\\n    }\\n\\n    /**\\n     * @dev Retrieves a withdrawal's withdrawal amount (in gwei)\\n     */\\n    function getWithdrawalAmountGwei(\\n        bytes32[] memory withdrawalFields\\n    ) internal pure returns (uint64) {\\n        return Endian.fromLittleEndianUint64(withdrawalFields[WITHDRAWAL_VALIDATOR_AMOUNT_INDEX]);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/EigenLayer/libraries/Endian.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nlibrary Endian {\\n    /**\\n     * @notice Converts a little endian-formatted uint64 to a big endian-formatted uint64\\n     * @param lenum little endian-formatted uint64 input, provided as 'bytes32' type\\n     * @return n The big endian-formatted uint64\\n     * @dev Note that the input is formatted as a 'bytes32' type (i.e. 256 bits), but it is immediately truncated to a uint64 (i.e. 64 bits)\\n     * through a right-shift/shr operation.\\n     */\\n    function fromLittleEndianUint64(bytes32 lenum) internal pure returns (uint64 n) {\\n        // the number needs to be stored in little-endian encoding (ie in bytes 0-8)\\n        n = uint64(uint256(lenum >> 192));\\n        return\\n            (n >> 56) |\\n            ((0x00FF000000000000 & n) >> 40) |\\n            ((0x0000FF0000000000 & n) >> 24) |\\n            ((0x000000FF00000000 & n) >> 8) |\\n            ((0x00000000FF000000 & n) << 8) |\\n            ((0x0000000000FF0000 & n) << 24) |\\n            ((0x000000000000FF00 & n) << 40) |\\n            ((0x00000000000000FF & n) << 56);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/EigenLayer/libraries/Merkle.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// Adapted from OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/MerkleProof.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev These functions deal with verification of Merkle Tree proofs.\\n *\\n * The tree and the proofs can be generated using our\\n * https://github.com/OpenZeppelin/merkle-tree[JavaScript library].\\n * You will find a quickstart guide in the readme.\\n *\\n * WARNING: You should avoid using leaf values that are 64 bytes long prior to\\n * hashing, or use a hash function other than keccak256 for hashing leaves.\\n * This is because the concatenation of a sorted pair of internal nodes in\\n * the merkle tree could be reinterpreted as a leaf value.\\n * OpenZeppelin's JavaScript library generates merkle trees that are safe\\n * against this attack out of the box.\\n */\\nlibrary Merkle {\\n    /**\\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\\n     * hash matches the root of the tree. The tree is built assuming `leaf` is\\n     * the 0 indexed `index`'th leaf from the bottom left of the tree.\\n     *\\n     * Note this is for a Merkle tree using the keccak/sha3 hash function\\n     */\\n    function verifyInclusionKeccak(\\n        bytes memory proof,\\n        bytes32 root,\\n        bytes32 leaf,\\n        uint256 index\\n    ) internal pure returns (bool) {\\n        return processInclusionProofKeccak(proof, leaf, index) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\\n     * hash matches the root of the tree. The tree is built assuming `leaf` is\\n     * the 0 indexed `index`'th leaf from the bottom left of the tree.\\n     *\\n     * _Available since v4.4._\\n     *\\n     * Note this is for a Merkle tree using the keccak/sha3 hash function\\n     */\\n    function processInclusionProofKeccak(\\n        bytes memory proof,\\n        bytes32 leaf,\\n        uint256 index\\n    ) internal pure returns (bytes32) {\\n        require(\\n            proof.length != 0 && proof.length % 32 == 0,\\n            \\\"Merkle.processInclusionProofKeccak: proof length should be a non-zero multiple of 32\\\"\\n        );\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 32; i <= proof.length; i += 32) {\\n            if (index % 2 == 0) {\\n                // if ith bit of index is 0, then computedHash is a left sibling\\n                assembly {\\n                    mstore(0x00, computedHash)\\n                    mstore(0x20, mload(add(proof, i)))\\n                    computedHash := keccak256(0x00, 0x40)\\n                    index := div(index, 2)\\n                }\\n            } else {\\n                // if ith bit of index is 1, then computedHash is a right sibling\\n                assembly {\\n                    mstore(0x00, mload(add(proof, i)))\\n                    mstore(0x20, computedHash)\\n                    computedHash := keccak256(0x00, 0x40)\\n                    index := div(index, 2)\\n                }\\n            }\\n        }\\n        return computedHash;\\n    }\\n\\n    /**\\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\\n     * hash matches the root of the tree. The tree is built assuming `leaf` is\\n     * the 0 indexed `index`'th leaf from the bottom left of the tree.\\n     *\\n     * Note this is for a Merkle tree using the sha256 hash function\\n     */\\n    function verifyInclusionSha256(\\n        bytes memory proof,\\n        bytes32 root,\\n        bytes32 leaf,\\n        uint256 index\\n    ) internal view returns (bool) {\\n        return processInclusionProofSha256(proof, leaf, index) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\\n     * hash matches the root of the tree. The tree is built assuming `leaf` is\\n     * the 0 indexed `index`'th leaf from the bottom left of the tree.\\n     *\\n     * _Available since v4.4._\\n     *\\n     * Note this is for a Merkle tree using the sha256 hash function\\n     */\\n    function processInclusionProofSha256(\\n        bytes memory proof,\\n        bytes32 leaf,\\n        uint256 index\\n    ) internal view returns (bytes32) {\\n        require(\\n            proof.length != 0 && proof.length % 32 == 0,\\n            \\\"Merkle.processInclusionProofSha256: proof length should be a non-zero multiple of 32\\\"\\n        );\\n        bytes32[1] memory computedHash = [leaf];\\n        for (uint256 i = 32; i <= proof.length; i += 32) {\\n            if (index % 2 == 0) {\\n                // if ith bit of index is 0, then computedHash is a left sibling\\n                assembly {\\n                    mstore(0x00, mload(computedHash))\\n                    mstore(0x20, mload(add(proof, i)))\\n                    if iszero(staticcall(sub(gas(), 2000), 2, 0x00, 0x40, computedHash, 0x20)) {\\n                        revert(0, 0)\\n                    }\\n                    index := div(index, 2)\\n                }\\n            } else {\\n                // if ith bit of index is 1, then computedHash is a right sibling\\n                assembly {\\n                    mstore(0x00, mload(add(proof, i)))\\n                    mstore(0x20, mload(computedHash))\\n                    if iszero(staticcall(sub(gas(), 2000), 2, 0x00, 0x40, computedHash, 0x20)) {\\n                        revert(0, 0)\\n                    }\\n                    index := div(index, 2)\\n                }\\n            }\\n        }\\n        return computedHash[0];\\n    }\\n\\n    /**\\n     @notice this function returns the merkle root of a tree created from a set of leaves using sha256 as its hash function\\n     @param leaves the leaves of the merkle tree\\n     @return The computed Merkle root of the tree.\\n     @dev A pre-condition to this function is that leaves.length is a power of two.  If not, the function will merkleize the inputs incorrectly.\\n     */\\n    function merkleizeSha256(bytes32[] memory leaves) internal pure returns (bytes32) {\\n        //there are half as many nodes in the layer above the leaves\\n        uint256 numNodesInLayer = leaves.length / 2;\\n        //create a layer to store the internal nodes\\n        bytes32[] memory layer = new bytes32[](numNodesInLayer);\\n        //fill the layer with the pairwise hashes of the leaves\\n        for (uint256 i = 0; i < numNodesInLayer; i++) {\\n            layer[i] = sha256(abi.encodePacked(leaves[2 * i], leaves[2 * i + 1]));\\n        }\\n        //the next layer above has half as many nodes\\n        numNodesInLayer /= 2;\\n        //while we haven't computed the root\\n        while (numNodesInLayer != 0) {\\n            //overwrite the first numNodesInLayer nodes in layer with the pairwise hashes of their children\\n            for (uint256 i = 0; i < numNodesInLayer; i++) {\\n                layer[i] = sha256(abi.encodePacked(layer[2 * i], layer[2 * i + 1]));\\n            }\\n            //the next layer above has half as many nodes\\n            numNodesInLayer /= 2;\\n        }\\n        //the first node in the layer is the root\\n        return layer[0];\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Errors/Errors.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.19;\\n\\n/// @dev Error for 0x0 address inputs\\nerror InvalidZeroInput();\\n\\n/// @dev Error for already added items to a list\\nerror AlreadyAdded();\\n\\n/// @dev Error for not found items in a list\\nerror NotFound();\\n\\n/// @dev Error for hitting max TVL\\nerror MaxTVLReached();\\n\\n/// @dev Error for caller not having permissions\\nerror NotRestakeManagerAdmin();\\n\\n/// @dev Error for call not coming from deposit queue contract\\nerror NotDepositQueue();\\n\\n/// @dev Error for contract being paused\\nerror ContractPaused();\\n\\n/// @dev Error for exceeding max basis points (100%)\\nerror OverMaxBasisPoints();\\n\\n/// @dev Error for invalid token decimals for collateral tokens (must be 18)\\nerror InvalidTokenDecimals(uint8 expected, uint8 actual);\\n\\n/// @dev Error when withdraw is already completed\\nerror WithdrawAlreadyCompleted();\\n\\n/// @dev Error when a different address tries to complete withdraw\\nerror NotOriginalWithdrawCaller(address expectedCaller);\\n\\n/// @dev Error when caller does not have OD admin role\\nerror NotOperatorDelegatorAdmin();\\n\\n/// @dev Error when caller does not have Oracle Admin role\\nerror NotOracleAdmin();\\n\\n/// @dev Error when caller is not RestakeManager contract\\nerror NotRestakeManager();\\n\\n/// @dev Errror when caller does not have ETH Restake Admin role\\nerror NotNativeEthRestakeAdmin();\\n\\n/// @dev Error when delegation address was already set - cannot be set again\\nerror DelegateAddressAlreadySet();\\n\\n/// @dev Error when caller does not have ERC20 Rewards Admin role\\nerror NotERC20RewardsAdmin();\\n\\n/// @dev Error when sending ETH fails\\nerror TransferFailed();\\n\\n/// @dev Error when caller does not have ETH Minter Burner Admin role\\nerror NotEzETHMinterBurner();\\n\\n/// @dev Error when caller does not have Token Admin role\\nerror NotTokenAdmin();\\n\\n/// @dev Error when price oracle is not configured\\nerror OracleNotFound();\\n\\n/// @dev Error when price oracle data is stale\\nerror OraclePriceExpired();\\n\\n/// @dev Error when array lengths do not match\\nerror MismatchedArrayLengths();\\n\\n/// @dev Error when caller does not have Deposit Withdraw Pauser role\\nerror NotDepositWithdrawPauser();\\n\\n/// @dev Error when an individual token TVL is over the max\\nerror MaxTokenTVLReached();\\n\\n/// @dev Error when Oracle price is invalid\\nerror InvalidOraclePrice();\\n\\n/// @dev Error when calling an invalid function\\nerror NotImplemented();\\n\\n/// @dev Error when calculating token amounts is invalid\\nerror InvalidTokenAmount();\\n\\n/// @dev Error when timestamp is invalid - likely in the past\\nerror InvalidTimestamp(uint256 timestamp);\\n\\n/// @dev Error when trade does not meet minimum output amount\\nerror InsufficientOutputAmount();\\n\\n/// @dev Error when the token received over the bridge is not the one expected\\nerror InvalidTokenReceived();\\n\\n/// @dev Error when the origin address is not whitelisted\\nerror InvalidOrigin();\\n\\n/// @dev Error when the sender is not expected\\nerror InvalidSender(address expectedSender, address actualSender);\\n\\n/// @dev error when function returns 0 amount\\nerror InvalidZeroOutput();\\n\\n/// @dev error when xRenzoBridge does not have enough balance to pay for fee\\nerror NotEnoughBalance(uint256 currentBalance, uint256 calculatedFees);\\n\\n/// @dev error when source chain is not expected\\nerror InvalidSourceChain(uint64 expectedCCIPChainSelector, uint64 actualCCIPChainSelector);\\n\\n/// @dev Error when an unauthorized address tries to call the bridge function on the L2\\nerror UnauthorizedBridgeSweeper();\\n\\n/// @dev Error when caller does not have BRIDGE_ADMIN role\\nerror NotBridgeAdmin();\\n\\n/// @dev Error when caller does not have PRICE_FEED_SENDER role\\nerror NotPriceFeedSender();\\n\\n/// @dev Error for connext price Feed unauthorised call\\nerror UnAuthorisedCall();\\n\\n/// @dev Error for no price feed configured on L2\\nerror PriceFeedNotAvailable();\\n\\n/// @dev Error for invalid bridge fee share configuration\\nerror InvalidBridgeFeeShare(uint256 bridgeFee);\\n\\n/// @dev Error for invalid sweep batch size\\nerror InvalidSweepBatchSize(uint256 batchSize);\\n\\n/// @dev Error when caller does not have Withdraw Queue admin role\\nerror NotWithdrawQueueAdmin();\\n\\n/// @dev Error when caller try to withdraw more than Buffer\\nerror NotEnoughWithdrawBuffer();\\n\\n/// @dev Error when caller try to claim withdraw before cooldown period\\nerror EarlyClaim();\\n\\n/// @dev Error when caller try to withdraw for unsupported asset\\nerror UnsupportedWithdrawAsset();\\n\\n/// @dev Error when caller try to claim invalidWithdrawIndex\\nerror InvalidWithdrawIndex();\\n\\n/// @dev Error when TVL was expected to be 0\\nerror InvalidTVL();\\n\\n/// @dev Error when incorrect BeaconChainStrategy is set for LST in completeQueuedWithdrawal\\nerror IncorrectStrategy();\\n\\n/// @dev Error when adding new OperatorDelegator which is not delegated\\nerror OperatoDelegatorNotDelegated();\\n\\n/// @dev Error when emergency tracking already tracked withdrawal\\nerror WithdrawalAlreadyTracked();\\n\\n/// @dev Error when emergency tracking already completed withdrawal\\nerror WithdrawalAlreadyCompleted();\\n\\n/// @dev Error when caller does not have Emergency Withdraw Tracking Admin role\\nerror NotEmergencyWithdrawTrackingAdmin();\\n\\n/// @dev Error when strategy does not have specified underlying\\nerror InvalidStrategy();\\n\\n/// @dev Error when strategy already set and hold non zero token balance\\nerror NonZeroUnderlyingStrategyExist();\\n\"\r\n    },\r\n    \"contracts/IRestakeManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.19;\\n\\nimport \\\"./Delegation/IOperatorDelegator.sol\\\";\\nimport \\\"./Deposits/IDepositQueue.sol\\\";\\n\\ninterface IRestakeManager {\\n    function stakeEthInOperatorDelegator(\\n        IOperatorDelegator operatorDelegator,\\n        bytes calldata pubkey,\\n        bytes calldata signature,\\n        bytes32 depositDataRoot\\n    ) external payable;\\n    function depositTokenRewardsFromProtocol(IERC20 _token, uint256 _amount) external;\\n    function depositQueue() external view returns (IDepositQueue);\\n\\n    function calculateTVLs() external view returns (uint256[][] memory, uint256[] memory, uint256);\\n\\n    function depositETH() external payable;\\n}\\n\"\r\n    },\r\n    \"contracts/Permissions/IRoleManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.19;\\n\\ninterface IRoleManager {\\n    /// @dev Determines if the specified address has permissions to manage RoleManager\\n    /// @param potentialAddress Address to check\\n    function isRoleManagerAdmin(address potentialAddress) external view returns (bool);\\n\\n    /// @dev Determines if the specified address has permission to mint or burn ezETH tokens\\n    /// @param potentialAddress Address to check\\n    function isEzETHMinterBurner(address potentialAddress) external view returns (bool);\\n\\n    /// @dev Determines if the specified address has permission to update config on the OperatorDelgator Contracts\\n    /// @param potentialAddress Address to check\\n    function isOperatorDelegatorAdmin(address potentialAddress) external view returns (bool);\\n\\n    /// @dev Determines if the specified address has permission to update config on the Oracle Contract config\\n    /// @param potentialAddress Address to check\\n    function isOracleAdmin(address potentialAddress) external view returns (bool);\\n\\n    /// @dev Determines if the specified address has permission to update config on the Restake Manager\\n    /// @param potentialAddress Address to check\\n    function isRestakeManagerAdmin(address potentialAddress) external view returns (bool);\\n\\n    /// @dev Determines if the specified address has permission to update config on the Token Contract\\n    /// @param potentialAddress Address to check\\n    function isTokenAdmin(address potentialAddress) external view returns (bool);\\n\\n    /// @dev Determines if the specified address has permission to trigger restaking of native ETH\\n    /// @param potentialAddress Address to check\\n    function isNativeEthRestakeAdmin(address potentialAddress) external view returns (bool);\\n\\n    /// @dev Determines if the specified address has permission to sweep and deposit ERC20 Rewards\\n    /// @param potentialAddress Address to check\\n    function isERC20RewardsAdmin(address potentialAddress) external view returns (bool);\\n\\n    /// @dev Determines if the specified address has permission to pause deposits and withdraws\\n    /// @param potentialAddress Address to check\\n    function isDepositWithdrawPauser(address potentialAddress) external view returns (bool);\\n\\n    /// @dev Determines if the specified address has permission to set whitelisted origin in xRenzoBridge\\n    /// @param potentialAddress Address to check\\n    function isBridgeAdmin(address potentialAddress) external view returns (bool);\\n\\n    /// @dev Determined if the specified address has permission to send price feed of ezETH to L2\\n    /// @param potentialAddress Address to check\\n    function isPriceFeedSender(address potentialAddress) external view returns (bool);\\n\\n    /// @dev Determine if the specified address haas permission to update Withdraw Queue params\\n    /// @param potentialAddress Address to check\\n    function isWithdrawQueueAdmin(address potentialAddress) external view returns (bool);\\n\\n    /// @dev Determine if the specified address has permission to track emergency pending queued withdrawals\\n    /// @param potentialAddress Address to check\\n    function isEmergencyWithdrawTrackingAdmin(\\n        address potentialAddress\\n    ) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/Withdraw/IWithdrawQueue.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.19;\\n\\ninterface IWithdrawQueue {\\n    /// @dev To get available value to withdraw from buffer\\n    /// @param _asset address of token\\n    function getAvailableToWithdraw(address _asset) external view returns (uint256);\\n\\n    /// @dev To get the withdraw buffer target of given asset\\n    /// @param _asset address of token\\n    function withdrawalBufferTarget(address _asset) external view returns (uint256);\\n\\n    /// @dev To get the current Target Buffer Deficit\\n    /// @param _asset address of token\\n    function getBufferDeficit(address _asset) external view returns (uint256);\\n\\n    /// @dev Fill ERC20 Withdraw Buffer\\n    /// @param _asset the token address to fill the respective buffer\\n    /// @param _amount  amount of token to fill with\\n    function fillERC20WithdrawBuffer(address _asset, uint256 _amount) external;\\n\\n    /// @dev to get the withdrawRequests for particular user\\n    /// @param _user address of the user\\n    function withdrawRequests(address _user) external view returns (uint256[] memory);\\n\\n    /// @dev Fill ETH Withdraw buffer\\n    function fillEthWithdrawBuffer() external payable;\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"DelegateAddressAlreadySet\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"IncorrectStrategy\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidStrategy\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidZeroInput\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MismatchedArrayLengths\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NonZeroUnderlyingStrategyExist\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotEmergencyWithdrawTrackingAdmin\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotFound\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotNativeEthRestakeAdmin\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotOperatorDelegatorAdmin\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotRestakeManager\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WithdrawalAlreadyCompleted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WithdrawalAlreadyTracked\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldBaseGasAmountSpent\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newBaseGasAmountSpent\",\"type\":\"uint256\"}],\"name\":\"BaseGasAmountSpentUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"delegateAddress\",\"type\":\"address\"}],\"name\":\"DelegationAddressUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gasRefunded\",\"type\":\"uint256\"}],\"name\":\"GasRefunded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gasSpent\",\"type\":\"uint256\"}],\"name\":\"GasSpent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"rewardDestination\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RewardsForwarded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contract IStrategy\",\"name\":\"strategy\",\"type\":\"address\"}],\"name\":\"TokenStrategyUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"withdrawalRoot\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"contract IStrategy[]\",\"name\":\"strategies\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"shares\",\"type\":\"uint256[]\"}],\"name\":\"WithdrawCompleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"withdrawRoot\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"delegatedTo\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"withdrawer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startBlock\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"contract IStrategy[]\",\"name\":\"strategies\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"shares\",\"type\":\"uint256[]\"}],\"name\":\"WithdrawStarted\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"IS_NATIVE\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_STAKE_BUT_NOT_VERIFIED_AMOUNT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"activateRestaking\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"adminGasSpentInWei\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseGasAmountSpent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"delegatedTo\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"withdrawer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"startBlock\",\"type\":\"uint32\"},{\"internalType\":\"contract IStrategy[]\",\"name\":\"strategies\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"shares\",\"type\":\"uint256[]\"}],\"internalType\":\"struct IDelegationManager.Withdrawal\",\"name\":\"withdrawal\",\"type\":\"tuple\"},{\"internalType\":\"contract IERC20[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"middlewareTimesIndex\",\"type\":\"uint256\"}],\"name\":\"completeQueuedWithdrawal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"delegateAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"delegationManager\",\"outputs\":[{\"internalType\":\"contract IDelegationManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"eigenPod\",\"outputs\":[{\"internalType\":\"contract IEigenPod\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"eigenPodManager\",\"outputs\":[{\"internalType\":\"contract IEigenPodManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"delegatedTo\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"withdrawer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"startBlock\",\"type\":\"uint32\"},{\"internalType\":\"contract IStrategy[]\",\"name\":\"strategies\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"shares\",\"type\":\"uint256[]\"}],\"internalType\":\"struct IDelegationManager.Withdrawal[]\",\"name\":\"withdrawals\",\"type\":\"tuple[]\"},{\"internalType\":\"contract IERC20[]\",\"name\":\"tokens\",\"type\":\"address[]\"}],\"name\":\"emergencyTrackQueuedWithdrawals\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStakedETHBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IStrategy\",\"name\":\"_strategy\",\"type\":\"address\"}],\"name\":\"getStrategyIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getTokenBalanceFromStrategy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IRoleManager\",\"name\":\"_roleManager\",\"type\":\"address\"},{\"internalType\":\"contract IStrategyManager\",\"name\":\"_strategyManager\",\"type\":\"address\"},{\"internalType\":\"contract IRestakeManager\",\"name\":\"_restakeManager\",\"type\":\"address\"},{\"internalType\":\"contract IDelegationManager\",\"name\":\"_delegationManager\",\"type\":\"address\"},{\"internalType\":\"contract IEigenPodManager\",\"name\":\"_eigenPodManager\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingUnstakedDelayedWithdrawalAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenAmounts\",\"type\":\"uint256[]\"}],\"name\":\"queueWithdrawals\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"queuedShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"queuedWithdrawal\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20[]\",\"name\":\"tokenList\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amountsToWithdraw\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"recoverTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"restakeManager\",\"outputs\":[{\"internalType\":\"contract IRestakeManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"roleManager\",\"outputs\":[{\"internalType\":\"contract IRoleManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_baseGasAmountSpent\",\"type\":\"uint256\"}],\"name\":\"setBaseGasAmountSpent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_delegateAddress\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"}],\"internalType\":\"struct ISignatureUtils.SignatureWithExpiry\",\"name\":\"approverSignatureAndExpiry\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"approverSalt\",\"type\":\"bytes32\"}],\"name\":\"setDelegateAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"contract IStrategy\",\"name\":\"_strategy\",\"type\":\"address\"}],\"name\":\"setTokenStrategy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"pubkey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"depositDataRoot\",\"type\":\"bytes32\"}],\"name\":\"stakeEth\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakedButNotVerifiedEth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startDelayedWithdrawUnstakedETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"strategyManager\",\"outputs\":[{\"internalType\":\"contract IStrategyManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenStrategyMapping\",\"outputs\":[{\"internalType\":\"contract IStrategy\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"validatorStakedButNotVerifiedEth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"oracleTimestamp\",\"type\":\"uint64\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"beaconStateRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"proof\",\"type\":\"bytes\"}],\"internalType\":\"struct BeaconChainProofs.StateRootProof\",\"name\":\"stateRootProof\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"withdrawalProof\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"slotProof\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"executionPayloadProof\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"timestampProof\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"historicalSummaryBlockRootProof\",\"type\":\"bytes\"},{\"internalType\":\"uint64\",\"name\":\"blockRootIndex\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"historicalSummaryIndex\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"withdrawalIndex\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"blockRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"slotRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"timestampRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"executionPayloadRoot\",\"type\":\"bytes32\"}],\"internalType\":\"struct BeaconChainProofs.WithdrawalProof[]\",\"name\":\"withdrawalProofs\",\"type\":\"tuple[]\"},{\"internalType\":\"bytes[]\",\"name\":\"validatorFieldsProofs\",\"type\":\"bytes[]\"},{\"internalType\":\"bytes32[][]\",\"name\":\"validatorFields\",\"type\":\"bytes32[][]\"},{\"internalType\":\"bytes32[][]\",\"name\":\"withdrawalFields\",\"type\":\"bytes32[][]\"}],\"name\":\"verifyAndProcessWithdrawals\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"oracleTimestamp\",\"type\":\"uint64\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"beaconStateRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"proof\",\"type\":\"bytes\"}],\"internalType\":\"struct BeaconChainProofs.StateRootProof\",\"name\":\"stateRootProof\",\"type\":\"tuple\"},{\"internalType\":\"uint40[]\",\"name\":\"validatorIndices\",\"type\":\"uint40[]\"},{\"internalType\":\"bytes[]\",\"name\":\"withdrawalCredentialProofs\",\"type\":\"bytes[]\"},{\"internalType\":\"bytes32[][]\",\"name\":\"validatorFields\",\"type\":\"bytes32[][]\"}],\"name\":\"verifyWithdrawalCredentials\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountToWithdraw\",\"type\":\"uint256\"}],\"name\":\"withdrawNonBeaconChainETHBalanceWei\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "OperatorDelegator", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}