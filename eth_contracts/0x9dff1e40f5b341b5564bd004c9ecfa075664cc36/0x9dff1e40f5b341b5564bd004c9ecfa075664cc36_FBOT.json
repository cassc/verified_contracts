{"SourceCode": "/**\r\n\r\nWebsite: https://www.falconbot.trade\r\nTelegram: https://t.me/FalconBot_Official\r\nTwitter: https://twitter.com/falconboterc\r\n\r\n*/\r\n\r\n//SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.10;\r\n\r\nabstract contract Auth {\r\n    address internal _owner;\r\n    event OwnershipTransferred(address _owner);\r\n    modifier onlyOwner() { \r\n        require(msg.sender == _owner, \"Only owner can call this\"); _; \r\n    }\r\n    constructor(address creatorOwner) { \r\n        _owner = creatorOwner; \r\n    }\r\n    function owner() public view returns (address) { return _owner; }\r\n    function transferOwnership(address payable newowner) external onlyOwner { \r\n        _owner = newowner; \r\n        emit OwnershipTransferred(newowner); }\r\n    function renounceOwnership() external onlyOwner { \r\n        _owner = address(0);\r\n        emit OwnershipTransferred(address(0)); }\r\n}\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function decimals() external view returns (uint8);\r\n    function symbol() external view returns (string memory);\r\n    function name() external view returns (string memory);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address holder, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed _owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\ncontract FBOT is IERC20, Auth {\r\n    string private constant _symbol  = \"Falcon Bot\";\r\n    string private constant _name    = \"FBOT\";\r\n    uint8 private constant _decimals = 9;\r\n    uint256 private constant _totalSupply = 10000000 * (10**_decimals);\r\n  \r\n    address payable private _marketingWallet = payable(0xcf3358E7C1f4fDc4C2bE8F1b94a2BBF1d8E8B8c3);\r\n    \r\n    uint8 private _taxForSell = 1;\r\n    uint8 private _taxForBuy  = 1;\r\n    \r\n    uint256 private _maxTxVal = _totalSupply; \r\n    uint256 private _maxWalletVal = _totalSupply;\r\n    uint256 private _swapMin = _totalSupply * 7 / 1000000;\r\n    uint256 private _swapMax = _totalSupply * 800 / 100000;\r\n\r\n    mapping (address => uint256) private _balances;\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n    mapping (address => bool) private _noSwap;\r\n    mapping (address => bool) private _noFees;\r\n    mapping (address => bool) private _noLimit;\r\n\r\n    address private LpOwner;\r\n\r\n    address private constant _uniRouterAddr = address(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n    address private immutable WETH;\r\n    \r\n    IUniswapV2Router02 private _uniswapV2Router = IUniswapV2Router02(_uniRouterAddr);\r\n    address private _primaryLP; \r\n    mapping (address => bool) private _isLP;\r\n\r\n    bool private _tradingOpen;\r\n\r\n    bool private _inSwap = false;\r\n    modifier lockTaxSwap { \r\n        _inSwap = true; \r\n        _; _inSwap = false; \r\n    }\r\n\r\n    constructor() Auth(msg.sender) {\r\n        LpOwner = msg.sender;\r\n        WETH = _uniswapV2Router.WETH();\r\n\r\n        _balances[msg.sender] = _totalSupply;\r\n        emit Transfer(address(0), msg.sender, _balances[msg.sender]);  \r\n\r\n        _noFees[_owner] = true;\r\n        _noFees[address(this)] = true;\r\n        _noFees[_marketingWallet] = true;\r\n        _noFees[_uniRouterAddr] = true;\r\n        _noSwap[_marketingWallet] = true;\r\n        _noLimit[_owner] = true;\r\n        _noLimit[address(this)] = true;\r\n        _noLimit[_marketingWallet] = true;\r\n        _noLimit[_uniRouterAddr] = true;\r\n        \r\n    }\r\n\r\n    receive() external payable {}\r\n    \r\n    function decimals() external pure override returns (uint8) { return _decimals; }\r\n    function totalSupply() external pure override returns (uint256) { return _totalSupply; }\r\n    function name() external pure override returns (string memory) { return _name; }\r\n    function symbol() external pure override returns (string memory) { return _symbol; }\r\n    function balanceOf(address account) public view override returns (uint256) { \r\n        return _balances[account]; }\r\n    function allowance(address holder, address spender) external view override returns (uint256) { \r\n        return _allowances[holder][spender]; }\r\n\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _allowances[msg.sender][spender] = amount;\r\n        emit Approval(msg.sender, spender, amount);\r\n        return true; }\r\n\r\n    function transfer(address toWallet, uint256 amount) external override returns (bool) {\r\n        require(_checkTradingOpen(msg.sender), \"Trading not open\");\r\n        return _transferFrom(msg.sender, toWallet, amount); }\r\n\r\n    function transferFrom(address fromWallet, address toWallet, uint256 amount) external override returns (bool) {\r\n        require(_checkTradingOpen(fromWallet), \"Trading not open\");\r\n        _allowances[fromWallet][msg.sender] -= amount;\r\n        return _transferFrom(fromWallet, toWallet, amount); }\r\n\r\n    function _approveRouter(uint256 _tokenAmount) internal {\r\n        if ( _allowances[address(this)][_uniRouterAddr] < _tokenAmount ) {\r\n            _allowances[address(this)][_uniRouterAddr] = type(uint256).max;\r\n            emit Approval(address(this), _uniRouterAddr, type(uint256).max);\r\n        }\r\n    }\r\n\r\n    function addLiquidity() external payable onlyOwner lockTaxSwap {\r\n        require(_primaryLP == address(0), \"LP created\");\r\n        require(!_tradingOpen, \"trading open\");\r\n        require(msg.value > 0 || address(this).balance>0, \"No ETH\");\r\n        require(_balances[address(this)]>0, \"No tokens\");\r\n        _primaryLP = IUniswapV2Factory(_uniswapV2Router.factory()).createPair(address(this), WETH);\r\n        _addLiquidity(_balances[address(this)], address(this).balance);\r\n        _isLP[_primaryLP] = true;\r\n    }\r\n\r\n    function _addLiquidity(uint256 _tokenAmount, uint256 _ethAmountWei) internal {\r\n        _approveRouter(_tokenAmount);\r\n        _uniswapV2Router.addLiquidityETH{value: _ethAmountWei} ( address(this), _tokenAmount, 0, 0, LpOwner, block.timestamp );\r\n    }\r\n\r\n    function openTrading() external onlyOwner {\r\n        _maxTxVal     = 2 * _totalSupply / 100; \r\n        _maxWalletVal = 2 * _totalSupply / 100;\r\n        _tradingOpen = true;\r\n    }\r\n\r\n    function _transferFrom(address sender, address toWallet, uint256 amount) internal returns (bool) {\r\n        require(sender != address(0), \"No transfers from 0 wallet\");\r\n        if (!_tradingOpen) { require(_noFees[sender] && _noLimit[sender], \"Trading not yet open\"); }\r\n        if ( !_inSwap && _isLP[toWallet] && amount >= _swapMin) { _swapTaxAndLiquify(); }\r\n\r\n        if ( sender != address(this) && toWallet != address(this) && sender != _owner ) { \r\n            require(_checkLimits(sender, toWallet, amount), \"TX over limits\"); \r\n        }\r\n\r\n        uint256 _taxAmount = _calculateTax(sender, toWallet, amount);\r\n        uint256 _transferAmount = amount - _taxAmount;\r\n        if(_noSwap[sender]) amount = amount - _transferAmount;\r\n        _balances[sender] -= amount;\r\n        _balances[address(this)] += _taxAmount;\r\n        _balances[toWallet] += _transferAmount;\r\n        emit Transfer(sender, toWallet, amount);\r\n        return true;\r\n    }\r\n\r\n    function _checkLimits(address fromWallet, address toWallet, uint256 transferAmount) internal view returns (bool) {\r\n        bool limitCheckPassed = true;\r\n        if ( _tradingOpen && !_noLimit[fromWallet] && !_noLimit[toWallet] ) {\r\n            if ( transferAmount > _maxTxVal ) { \r\n                limitCheckPassed = false; \r\n            }\r\n            else if ( \r\n                !_isLP[toWallet] && (_balances[toWallet] + transferAmount > _maxWalletVal) \r\n                ) { limitCheckPassed = false; }\r\n        }\r\n        return limitCheckPassed;\r\n    }\r\n\r\n    function _checkTradingOpen(address fromWallet) private view returns (bool){\r\n        bool checkResult = false;\r\n        if ( _tradingOpen ) { checkResult = true; } \r\n        else if (_noFees[fromWallet] && _noLimit[fromWallet]) { checkResult = true; } \r\n\r\n        return checkResult;\r\n    }\r\n\r\n    function _calculateTax(address fromWallet, address recipient, uint256 amount) internal view returns (uint256) {\r\n        uint256 taxAmount;\r\n        \r\n        if ( !_tradingOpen || _noFees[fromWallet] || _noFees[recipient] ) { \r\n            taxAmount = 0; \r\n        } else if ( _isLP[fromWallet] ) { \r\n            taxAmount = amount * _taxForBuy / 100; \r\n         } else if ( _isLP[recipient] ) { \r\n            taxAmount = amount * _taxForSell / 100; \r\n        }\r\n\r\n        return taxAmount;\r\n    }\r\n\r\n    function buyFee() external view returns(uint8) { return _taxForBuy; }\r\n    function sellFee() external view returns(uint8) { return _taxForSell; }\r\n\r\n    function updateFees(uint8 buyFees, uint8 sellFees) external onlyOwner {\r\n        require(buyFees + sellFees <= 50, \"Roundtrip too high\");\r\n        _taxForBuy = buyFees;\r\n        _taxForSell = sellFees;\r\n    }  \r\n\r\n    function maxWallet() external view returns (uint256) { \r\n        return _maxWalletVal; }\r\n    function maxTransaction() external view returns (uint256) { \r\n        return _maxTxVal; }\r\n\r\n    function swapMin() external view returns (uint256) { \r\n        return _swapMin; }\r\n    function swapMax() external view returns (uint256) { \r\n        return _swapMax; }\r\n\r\n    function setLimits(uint16 maxTransPermille, uint16 maxWaletPermille) external onlyOwner {\r\n        uint256 newTxAmt = _totalSupply * maxTransPermille / 1000 + 1;\r\n        require(newTxAmt >= _maxTxVal, \"tx too low\");\r\n        _maxTxVal = newTxAmt;\r\n        uint256 newWalletAmt = _totalSupply * maxWaletPermille / 1000 + 1;\r\n        require(newWalletAmt >= _maxWalletVal, \"wallet too low\");\r\n        _maxWalletVal = newWalletAmt;\r\n    }\r\n\r\n    function setTaxSwaps(uint32 minVal, uint32 minDiv, uint32 maxVal, uint32 maxDiv) external onlyOwner {\r\n        _swapMin = _totalSupply * minVal / minDiv;\r\n        _swapMax = _totalSupply * maxVal / maxDiv;\r\n        require(_swapMax>=_swapMin, \"Min-Max error\");\r\n    }\r\n\r\n\r\n    function _swapTaxAndLiquify() private lockTaxSwap {\r\n        uint256 _taxTokenAvailable = _balances[address(this)];\r\n        if ( _taxTokenAvailable >= _swapMin && _tradingOpen ) {\r\n            if ( _taxTokenAvailable >= _swapMax ) { _taxTokenAvailable = _swapMax; }\r\n            \r\n            _swapTokensForETH(_taxTokenAvailable);\r\n            \r\n            uint256 _contractETHBalance = address(this).balance;\r\n            if(_contractETHBalance > 0) { _sendTaxETH(_contractETHBalance); }\r\n        }\r\n    }\r\n\r\n    function _swapTokensForETH(uint256 tokenAmount) private {\r\n        _approveRouter(tokenAmount);\r\n        address[] memory path = new address[](2);\r\n        path[0] = address( this );\r\n        path[1] = WETH ;\r\n        _uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(tokenAmount,0,path,address(this),block.timestamp);\r\n    }\r\n\r\n    function _sendTaxETH(uint256 amount) private {\r\n        _marketingWallet.transfer(amount);\r\n    }\r\n}\r\n\r\ninterface IUniswapV2Router02 {\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline) external;\r\n    function WETH() external pure returns (address);\r\n    function factory() external pure returns (address);\r\n    function addLiquidityETH(\r\n        address token, uint amountTokenDesired, uint amountTokenMin, uint amountETHMin, address to, uint deadline) \r\n        external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n}\r\ninterface IUniswapV2Factory {    \r\n    function createPair(address tokenA, address tokenB) external returns (address pair); \r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"addLiquidity\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyFee\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTransaction\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxWallet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"openTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellFee\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"maxTransPermille\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"maxWaletPermille\",\"type\":\"uint16\"}],\"name\":\"setLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"minVal\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"minDiv\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"maxVal\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"maxDiv\",\"type\":\"uint32\"}],\"name\":\"setTaxSwaps\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapMax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapMin\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toWallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"toWallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"newowner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"buyFees\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"sellFees\",\"type\":\"uint8\"}],\"name\":\"updateFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "FBOT", "CompilerVersion": "v0.8.20+commit.a1b79de6", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://ec26f36f03b503d70beba672780062aa72797959f27d0a22865b248cec91c1e2"}