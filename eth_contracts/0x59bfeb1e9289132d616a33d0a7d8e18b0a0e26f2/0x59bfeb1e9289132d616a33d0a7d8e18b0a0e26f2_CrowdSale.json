{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/contracts/CrowdSale.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n/**\\n * @author Madhumitha Rathinasamy \\n */\\npragma solidity ^0.8.16;\\n\\nimport \\\"./Vesting.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\n\\n/**\\n * @title Crowdsale\\n * @dev Crowdsale is a base contract for managing a token crowdsale,\\n * allowing investors to purchase tokens with ether. This contract implements\\n * such functionality in its most fundamental form and can be extended to provide additional\\n * functionality and/or custom behavior.\\n * The external interface represents the basic interface for purchasing tokens, and conform\\n * the base architecture for crowdsales. They are *not* intended to be modified / overriden.\\n * The internal interface conforms the extensible and modifiable surface of crowdsales. Override\\n * the methods to add functionality. Consider using 'super' where appropiate to concatenate\\n * behavior.\\n */\\nabstract contract Crowdsale is Initializable {\\n    using SafeERC20Upgradeable for IERC20Upgradeable;\\n\\n    // The token being sold\\n    IERC20Upgradeable public token;\\n\\n    // Address where funds are collected\\n    address public wallet;\\n\\n    // How many token units a buyer gets per wei\\n    uint256 public rate;\\n\\n    // Amount of wei raised\\n    uint256 public weiRaised;\\n\\n    /**\\n     * Event for token purchase logging\\n     * @param purchaser who paid for the tokens\\n     * @param beneficiary who got the tokens\\n     * @param value weis paid for purchase\\n     * @param amount amount of tokens purchased\\n     */\\n    event TokenPurchase(\\n        address indexed purchaser,\\n        address indexed beneficiary,\\n        uint256 value,\\n        uint256 amount\\n    );\\n\\n    /**\\n     * @param _rate Number of token units a buyer gets per wei\\n     * @param _wallet Address where collected funds will be forwarded to\\n     * @param _token Address of the token being sold\\n     */\\n    function _Crowdsale_init_unchained(\\n        uint256 _rate,\\n        address _wallet,\\n        IERC20Upgradeable _token\\n    ) internal onlyInitializing {\\n        require(_rate > 0, \\\"Rate cant be 0\\\");\\n        require(_wallet != address(0), \\\"Address cant be zero address\\\");\\n\\n        rate = _rate;\\n        wallet = _wallet;\\n        token = _token;\\n    }\\n\\n    // -----------------------------------------\\n    // Crowdsale external interface\\n    // -----------------------------------------\\n\\n    /**\\n     * @dev fallback function ***DO NOT OVERRIDE***\\n     */\\n    receive() external payable {\\n        buyTokens(msg.sender);\\n    }\\n\\n    /**\\n     * @dev low level token purchase ***DO NOT OVERRIDE***\\n     * @param _beneficiary Address performing the token purchase\\n     */\\n    function buyTokens(address _beneficiary) internal {\\n        uint256 weiAmount = msg.value;\\n        _preValidatePurchase(_beneficiary, weiAmount);\\n        weiRaised = weiRaised + weiAmount;\\n        _forwardFunds();\\n    }\\n\\n    // -----------------------------------------\\n    // Internal interface (extensible)\\n    // -----------------------------------------\\n\\n    /**\\n     * @dev Validation of an incoming purchase. Use require statements to revert state when conditions are not met. Use super to concatenate validations.\\n     * @param _beneficiary Address performing the token purchase\\n     * @param _weiAmount Value in wei involved in the purchase\\n     */\\n    function _preValidatePurchase(\\n        address _beneficiary,\\n        uint256 _weiAmount\\n    ) internal virtual {\\n        require(_beneficiary != address(0), \\\"Address cant be zero address\\\");\\n        require(_weiAmount != 0, \\\"Amount cant be 0\\\");\\n    }\\n\\n    /**\\n     * @dev Source of tokens. Override this method to modify the way in which the crowdsale ultimately gets and sends its tokens.\\n     * @param _beneficiary Address performing the token purchase\\n     * @param _tokenAmount Number of tokens to be emitted\\n     */\\n    function _deliverTokens(\\n        address _beneficiary,\\n        uint256 _tokenAmount\\n    ) internal {\\n        token.safeTransfer(_beneficiary, _tokenAmount);\\n    }\\n\\n    /**\\n     * @dev Executed when a purchase has been validated and is ready to be executed. Not necessarily emits/sends tokens.\\n     * @param _beneficiary Address receiving the tokens\\n     * @param _tokenAmount Number of tokens to be purchased\\n     */\\n    function _processPurchase(\\n        address _beneficiary,\\n        uint256 _tokenAmount\\n    ) internal {\\n        _deliverTokens(_beneficiary, _tokenAmount);\\n    }\\n\\n    /**\\n     * @dev Override to extend the way in which ether is converted to tokens.\\n     * @param _weiAmount Value in wei to be converted into tokens\\n     * @return Number of tokens that can be purchased with the specified _weiAmount\\n     */\\n    function _getTokenAmount(\\n        uint256 _weiAmount\\n    ) internal view returns (uint256) {\\n        return _weiAmount * rate;\\n    }\\n\\n    /**\\n     * @dev Determines how ETH is stored/forwarded on purchases.\\n     */\\n    function _forwardFunds() internal {\\n        payable(wallet).transfer(msg.value);\\n    }\\n\\n    /**\\n     * @dev Change Rate.\\n     * @param newRate Crowdsale rate\\n     */\\n    function _changeRate(uint256 newRate) internal virtual {\\n        rate = newRate;\\n    }\\n\\n    /**\\n     * @dev Change Token.\\n     * @param newToken Crowdsale token\\n     */\\n    function _changeToken(IERC20Upgradeable newToken) internal virtual {\\n        token = newToken;\\n    }\\n\\n    /**\\n     * @dev Change Wallet.\\n     * @param newWallet Crowdsale wallet\\n     */\\n    function _changeWallet(address newWallet) internal virtual {\\n        wallet = newWallet;\\n    }\\n}\\n\\n/**\\n * @title TimedCrowdsale\\n * @dev Crowdsale accepting contributions only within a time frame.\\n */\\nabstract contract TimedCrowdsale is Crowdsale {\\n    uint256 public openingTime;\\n    uint256 public closingTime;\\n\\n    event TimedCrowdsaleExtended(\\n        uint256 prevClosingTime,\\n        uint256 newClosingTime\\n    );\\n    event TimedNewCrowdsaleExtended(\\n        uint256 roundOpeningTime,\\n        uint256 roundClosingTime,\\n        uint256 roundRate\\n    );\\n\\n    /**\\n     * @dev Reverts if not in crowdsale time range.\\n     */\\n    modifier onlyWhileOpen() {\\n        // solium-disable-next-line security/no-block-members\\n        require(\\n            block.timestamp >= openingTime && block.timestamp <= closingTime,\\n            \\\"Crowdsale has not started or has been ended\\\"\\n        );\\n        _;\\n    }\\n\\n    /**\\n     * @dev Constructor, takes crowdsale opening and closing times.\\n     * @param _openingTime Crowdsale opening time\\n     * @param _closingTime Crowdsale closing time\\n     */\\n    function _TimedCrowdsale_init_unchained(\\n        uint256 _openingTime,\\n        uint256 _closingTime\\n    ) internal onlyInitializing {\\n        // solium-disable-next-line security/no-block-members\\n        require(\\n            _openingTime >= block.timestamp,\\n            \\\"OpeningTime must be greater than current timestamp\\\"\\n        );\\n        require(\\n            _closingTime >= _openingTime,\\n            \\\"Closing time cant be before opening time\\\"\\n        );\\n\\n        openingTime = _openingTime;\\n        closingTime = _closingTime;\\n    }\\n\\n    /**\\n     * @dev Checks whether the period in which the crowdsale is open has already elapsed.\\n     * @return Whether crowdsale period has elapsed\\n     */\\n    function hasClosed() public view returns (bool) {\\n        // solium-disable-next-line security/no-block-members\\n        return block.timestamp > closingTime;\\n    }\\n\\n    /**\\n     * @dev Extend crowdsale.\\n     * @param newClosingTime Crowdsale closing time\\n     */\\n    function _extendTime(uint256 newClosingTime) internal {\\n        require(\\n            newClosingTime >= block.timestamp,\\n            \\\"Closing Time must be greater than current timestamp\\\"\\n        );\\n        closingTime = newClosingTime;\\n        emit TimedCrowdsaleExtended(closingTime, newClosingTime);\\n    }\\n\\n    /**\\n     * @dev new round crowdsale.\\n     * @param roundOpeningTime Crowdsale opening time\\n     * @param roundClosingTime Crowdsale closing time\\n     */\\n    function _createNewRound(\\n        uint256 roundOpeningTime,\\n        uint256 roundClosingTime,\\n        uint256 roundRate\\n    ) internal {\\n        require(\\n            roundOpeningTime >= block.timestamp,\\n            \\\"opening Time must be greater than current timestamp\\\"\\n        );\\n        require(\\n            roundClosingTime >= block.timestamp,\\n            \\\"closing Time must be greater than current timestamp\\\"\\n        );\\n        openingTime = roundOpeningTime;\\n        closingTime = roundClosingTime;\\n        rate = roundRate;\\n        emit TimedNewCrowdsaleExtended(openingTime, closingTime, rate);\\n    }\\n}\\n\\n/**\\n * @title FinalizableCrowdsale\\n * @dev Extension of Crowdsale where an owner can do extra work\\n * after finishing.\\n */\\nabstract contract FinalizableCrowdsale is\\n    TimedCrowdsale,\\n    OwnableUpgradeable,\\n    PausableUpgradeable\\n{\\n    bool public isFinalized;\\n\\n    event Finalized();\\n\\n    /**\\n     * @dev Must be called after crowdsale ends, to do some extra finalization\\n     * work. Calls the contract's finalization function.\\n     */\\n    function finalize(bool _withdrawToken) public onlyOwner whenNotPaused {\\n        require(!isFinalized, \\\"Already Finalized\\\");\\n        require(hasClosed(), \\\"Crowdsale is not yet closed\\\");\\n\\n        if (_withdrawToken) {\\n            finalization();\\n        }\\n        emit Finalized();\\n\\n        isFinalized = true;\\n    }\\n\\n    /**\\n     * @dev Can be overridden to add finalization logic. The overriding function\\n     * should call super.finalization() to ensure the chain of finalization is\\n     * executed entirely.\\n     */\\n    function finalization() internal virtual {}\\n\\n    function _updateFinalization() internal {\\n        isFinalized = false;\\n    }\\n}\\n\\ncontract CrowdSale is Crowdsale, FinalizableCrowdsale, UUPSUpgradeable {\\n    using SafeERC20Upgradeable for IERC20Upgradeable;\\n    mapping(address => bool) private _whitelist;\\n    mapping(address => bool) private _blacklist;\\n    mapping(address => bool) public isReferredBy;\\n    mapping(address => address) public _referredBy;\\n    mapping(address => uint256) public totalPurchaseAmount;\\n    mapping(address => uint256) public totalReferralAmount;\\n\\n    // uint256 public purchaseLimitInWei;\\n    uint256 public vestingMonths;\\n    uint256 public _tier1;\\n    uint256 public _tier2;\\n    uint256 public _tier3;\\n    uint256 public minPurchaseAmount;\\n    uint256 public bonusPercentage;\\n    uint256 public round;\\n    uint256 public tier1MinPurchaseLimit;\\n    uint256 public tier2MinPurchaseLimit;\\n    uint256 public tier3MinPurchaseLimit;\\n\\n    VestingVault vestingToken;\\n    address public vestingAddress;\\n    address public adminWallet;\\n\\n    bool public whiteListingStatus;\\n    bool public referralStatus;\\n\\n    // event SetPurchaseLimitInWei(uint256 amount);\\n    event SetVestingAddress(address vestingAddress);\\n    event UpdateWhitelistingStatus(bool enable);\\n    event UpdateVestingMonths(uint256 months);\\n    event NewTierPercentage(uint256 tier1, uint256 tier2, uint256 tier3);\\n    event AddReferral(address indexed _beneficiary, address indexed referredTo);\\n    event UpdateReferralStatus(bool isReferralStatusOn);\\n    event MinimumPurchaseAmountForReferral(uint256 _minimumPurchaseAmount);\\n    event UpdateBonusPercentage(uint256 _bonusPercentage);\\n    event Bonus(uint256 bonus);\\n    event TierPurchaseLimitForReferral(\\n        uint256 _tier1MinPurchaseLimit,\\n        uint256 _tier2MinPurchaseLimit,\\n        uint256 _tier3MinPurchaseLimit\\n    );\\n    event UpdateAdminWallet(address admin);\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The defaut value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() initializer {}\\n\\n    function initialize(\\n        uint256 rate, // rate, in TKNbits\\n        address payable wallet, // wallet to send Ether\\n        IERC20Upgradeable token, // the token\\n        VestingVault vesting, // the token\\n        uint256 openingTime, // opening time in unix epoch seconds\\n        uint256 closingTime, // closing time in unix epoch seconds\\n        address vestingVaultAddress // vesting Contract Address\\n    ) public initializer {\\n        vestingToken = vesting;\\n        // purchaseLimitInWei = 1500000000000000000000;\\n        minPurchaseAmount = 15750000000000000;\\n        vestingAddress = vestingVaultAddress;\\n        whiteListingStatus = false;\\n        vestingMonths = 4;\\n        round = 1;\\n        _tier1 = 10;\\n        _tier2 = 12;\\n        _tier3 = 15;\\n        bonusPercentage = 1;\\n        referralStatus = true;\\n        tier1MinPurchaseLimit = 10000;\\n        tier2MinPurchaseLimit = 20000;\\n        tier3MinPurchaseLimit = 500000;\\n        adminWallet = msg.sender;\\n\\n        _TimedCrowdsale_init_unchained(openingTime, closingTime);\\n        _Crowdsale_init_unchained(rate, wallet, token);\\n        __Pausable_init_unchained();\\n        __Ownable_init_unchained();\\n        __Context_init_unchained();\\n    }\\n\\n    function _authorizeUpgrade(address) internal override onlyOwner {}\\n\\n    /**\\n     * @dev Addding a account to Whitelisting\\n     * @param _beneficiary address of the account.\\n     */\\n    function addToWhitelist(address _beneficiary) external onlyOwner {\\n        _whitelist[_beneficiary] = true;\\n    }\\n\\n    /**\\n     * @dev Addding multiple account to Whitelisting\\n     * @param _beneficiers address of the account.\\n     */\\n    function addMultipleAccountToWhitelist(\\n        address[] calldata _beneficiers\\n    ) external onlyOwner {\\n        for (uint256 i = 0; i < _beneficiers.length; i++) {\\n            _whitelist[_beneficiers[i]] = true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removing account to Whitelisting\\n     * @param _beneficiary address of the account.\\n     */\\n    function removeFromWhitelist(address _beneficiary) external onlyOwner {\\n        _whitelist[_beneficiary] = false;\\n    }\\n\\n    /**\\n     * @dev Check weather account to Whitelisted or not.\\n     * @param _beneficiary address of the account.\\n     */\\n    function checkWhitelisted(\\n        address _beneficiary\\n    ) external view returns (bool) {\\n        return _whitelist[_beneficiary];\\n    }\\n\\n    /**\\n     * @dev Addding a account to Whitelisting\\n     * @param _beneficiary address of the account.\\n     */\\n    function addToBlacklist(address _beneficiary) external onlyOwner {\\n        _blacklist[_beneficiary] = true;\\n    }\\n\\n    /**\\n     * @dev Addding multiple account to blacklisting\\n     * @param _beneficiers address of the account.\\n     */\\n    function addMultipleAccountToBlacklist(\\n        address[] calldata _beneficiers\\n    ) external onlyOwner {\\n        for (uint256 i = 0; i < _beneficiers.length; i++) {\\n            _blacklist[_beneficiers[i]] = true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removing account to blacklisting\\n     * @param _beneficiary address of the account.\\n     */\\n    function removeFromBlacklist(address _beneficiary) external onlyOwner {\\n        _blacklist[_beneficiary] = false;\\n    }\\n\\n    /**\\n     * @dev Check weather account to blacklisted or not.\\n     * @param _beneficiary address of the account.\\n     */\\n    function checkBlacklisted(\\n        address _beneficiary\\n    ) external view returns (bool) {\\n        return _blacklist[_beneficiary];\\n    }\\n\\n    /**\\n     * @dev Pause `contract` - pause events.\\n     *\\n     * See {ERC20Pausable-_pause}.\\n     */\\n    function pauseContract() external virtual onlyOwner {\\n        _pause();\\n    }\\n\\n    /**\\n     * @dev Pause `contract` - pause events.\\n     *\\n     * See {ERC20Pausable-_pause}.\\n     */\\n    function unPauseContract() external virtual onlyOwner {\\n        _unpause();\\n    }\\n\\n    /**\\n     * @dev user can buy the token\\n     */\\n    function buyToken() external payable onlyWhileOpen whenNotPaused {\\n        address _beneficiary = msg.sender;\\n        require(\\n            !_blacklist[_beneficiary],\\n            \\\"blacklist: Your Account has been blacklisted\\\"\\n        );\\n        if (whiteListingStatus) {\\n            require(\\n                _whitelist[_beneficiary],\\n                \\\"whitelist: Your Account has not been whitelisted\\\"\\n            );\\n        }\\n\\n        // require(\\n        //     msg.value <= purchaseLimitInWei,\\n        //     \\\"Maximum purchase Limit exceed\\\"\\n        // );\\n        buyTokens(_beneficiary);\\n        // calculate token amount to be created\\n        uint256 token_amount = _getTokenAmount(msg.value);\\n\\n        address referredBy = _referredBy[_beneficiary];\\n\\n        totalPurchaseAmount[_beneficiary] += token_amount;\\n\\n        require(\\n            referredBy != 0x0000000000000000000000000000000000000000,\\n            \\\"You cannot buy without referral address\\\"\\n        );\\n        uint256 tokens = token_amount / 5;\\n        uint256 balanceAmount = token_amount - tokens;\\n\\n        vestingToken.addTokenGrant(\\n            _beneficiary,\\n            balanceAmount,\\n            vestingMonths,\\n            1,\\n            round\\n        );\\n        token.safeTransfer(_beneficiary, tokens);\\n        token.safeTransfer(vestingAddress, balanceAmount);\\n    }\\n\\n    /**\\n     * @dev buy token for referral users\\n     * @param referredTo the user type\\n     */\\n    function buyToken(\\n        address referredTo\\n    ) external payable onlyWhileOpen whenNotPaused {\\n        if (msg.sender != adminWallet) {\\n            addReferral(referredTo);\\n        }\\n\\n        address _beneficiary = msg.sender;\\n        require(\\n            !_blacklist[_beneficiary],\\n            \\\"blacklist: Your Account has been blacklisted\\\"\\n        );\\n        if (whiteListingStatus) {\\n            require(\\n                _whitelist[_beneficiary],\\n                \\\"whitelist: Your Account has not been whitelisted\\\"\\n            );\\n        }\\n        // require(\\n        //     msg.value <= purchaseLimitInWei,\\n        //     \\\"Maximum purchase Limit exceed\\\"\\n        // );\\n        buyTokens(_beneficiary);\\n        // calculate token amount to be created\\n        uint256 token_amount = _getTokenAmount(msg.value);\\n\\n        address referredBy = _referredBy[_beneficiary];\\n\\n        uint256 referralAmount = 0;\\n\\n        uint256 bonus = 0;\\n\\n        if (\\n            totalPurchaseAmount[_beneficiary] == 0 &&\\n            referralStatus &&\\n            referredBy != adminWallet\\n        ) {\\n            bonus = calculateBonus(token_amount);\\n            emit Bonus(bonus);\\n        }\\n\\n        if (\\n            referralStatus &&\\n            referredBy != 0x0000000000000000000000000000000000000000\\n        ) {\\n            referralAmount = calculateReferral(token_amount, referredBy);\\n            totalReferralAmount[referredBy] += referralAmount;\\n            token.safeTransfer(referredBy, referralAmount);\\n        }\\n\\n        totalPurchaseAmount[_beneficiary] += token_amount;\\n\\n        uint256 tokens = token_amount / 5;\\n        uint256 balanceAmount = token_amount - tokens;\\n\\n        tokens += bonus;\\n\\n        vestingToken.addTokenGrant(\\n            _beneficiary,\\n            balanceAmount,\\n            vestingMonths,\\n            1,\\n            round\\n        );\\n\\n        token.safeTransfer(_beneficiary, tokens);\\n        token.safeTransfer(vestingAddress, balanceAmount);\\n    }\\n\\n    /**\\n     * @dev crowd Sale has been completed and balance token has sent back to owner account\\n     */\\n    function finalization() internal virtual override {\\n        uint256 balance = token.balanceOf(address(this));\\n        require(balance > 0, \\\"Finalization: Insufficient token balance\\\");\\n        token.transfer(owner(), balance);\\n    }\\n\\n    /**\\n     * @dev extending the crowd Sale closing time\\n     * @param newClosingTime closing time in unix format.\\n     */\\n    function extendSale(\\n        uint256 newClosingTime\\n    ) external virtual onlyOwner whenNotPaused {\\n        _extendTime(newClosingTime);\\n        _updateFinalization();\\n    }\\n\\n    /**\\n     * @dev create a new round for crowd Sale with new timing\\n     * @param roundOpeningTime opening time in unix format.\\n     * @param roundClosingTime closing time in unix format.\\n     * @param roundRate rate for round.\\n     */\\n    function newCrowdSaleRound(\\n        uint256 roundOpeningTime,\\n        uint256 roundClosingTime,\\n        uint256 roundRate\\n    ) external virtual onlyOwner whenNotPaused {\\n        require(isFinalized, \\\"Crowdsale is not yet closed\\\");\\n        require(hasClosed(), \\\"Crowdsale is not yet closed\\\");\\n        require(roundRate > 0, \\\"Rate: Amount cannot be 0\\\");\\n        _createNewRound(roundOpeningTime, roundClosingTime, roundRate);\\n        _updateFinalization();\\n        round += 1;\\n    }\\n\\n    /**\\n     * @dev Change the rate of the token\\n     * @param newRate number of token.\\n     */\\n    function changeRate(\\n        uint256 newRate\\n    ) external virtual onlyOwner onlyWhileOpen whenNotPaused {\\n        require(newRate > 0, \\\"Rate: Amount cannot be 0\\\");\\n        _changeRate(newRate);\\n    }\\n\\n    /**\\n     * @dev Change the base token address of the token\\n     * @param newToken address of the token.\\n     */\\n    function changeToken(\\n        IERC20Upgradeable newToken\\n    ) external virtual onlyOwner onlyWhileOpen whenNotPaused {\\n        require(\\n            address(newToken) != address(0),\\n            \\\"Token: Address cant be zero address\\\"\\n        );\\n        _changeToken(newToken);\\n    }\\n\\n    /**\\n     * @dev Change the rate of the token\\n     * @param newWallet number of token.\\n     */\\n    function changeWallet(\\n        address newWallet\\n    ) external virtual onlyOwner onlyWhileOpen whenNotPaused {\\n        require(\\n            newWallet != address(0),\\n            \\\"Wallet: Address cant be zero address\\\"\\n        );\\n        _changeWallet(newWallet);\\n    }\\n\\n    // /**\\n    //  * @dev set the purchase limit for buy\\n    //  * @param amount  Amount in Wei.\\n    //  */\\n    // function setPurchaseLimitInWei(\\n    //     uint256 amount\\n    // ) external onlyOwner onlyWhileOpen whenNotPaused {\\n    //     purchaseLimitInWei = amount;\\n    //     emit SetPurchaseLimitInWei(purchaseLimitInWei);\\n    // }\\n\\n    /**\\n     * @dev set the vesting Address to trnsfer the token\\n     * @param _vestingAddress address of the vesting concept\\n     */\\n    function setVestingAddress(\\n        VestingVault _vestingToken,\\n        address _vestingAddress\\n    ) external onlyOwner onlyWhileOpen whenNotPaused {\\n        vestingAddress = _vestingAddress;\\n        vestingToken = _vestingToken;\\n        emit SetVestingAddress(vestingAddress);\\n    }\\n\\n    /**\\n     * @dev withdraw tokens from the contract\\n     * @param to address to receive tokens\\n     * @param amount amount of token to withdraw\\n     */\\n    function withdrawToken(\\n        address to,\\n        uint256 amount\\n    ) external onlyOwner onlyWhileOpen whenNotPaused {\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n        token.safeTransfer(to, amount);\\n    }\\n\\n    /**\\n     * @dev update the status of the Whitelisting\\n     * @param enable update the status of enable/Disable\\n     */\\n    function updateWhitelistingStatus(\\n        bool enable\\n    ) external onlyOwner onlyWhileOpen whenNotPaused {\\n        whiteListingStatus = enable;\\n        emit UpdateWhitelistingStatus(whiteListingStatus);\\n    }\\n\\n    /**\\n     * @dev Vesting Months to get the values\\n     * @param months update the status of enable/Disable\\n     */\\n    function updateVestingMonths(\\n        uint256 months\\n    ) external onlyOwner onlyWhileOpen whenNotPaused {\\n        vestingMonths = months;\\n        emit UpdateVestingMonths(vestingMonths);\\n    }\\n\\n    /**\\n     * @dev Owner can update the tier values\\n     * @param tier1, tier2, tier3 - updating values\\n     */\\n\\n    function updateTierPercentage(\\n        uint256 tier1,\\n        uint256 tier2,\\n        uint256 tier3\\n    ) external onlyOwner {\\n        _tier1 = tier1;\\n        _tier2 = tier2;\\n        _tier3 = tier3;\\n        emit NewTierPercentage(tier1, tier2, tier3);\\n    }\\n\\n    /**\\n     * @dev calculate referral values\\n     * @param tokens - token to calculate the referral value\\n     */\\n\\n    function calculateReferral(\\n        uint256 tokens,\\n        address referredBy\\n    ) internal view returns (uint256) {\\n        if (\\n            totalPurchaseAmount[referredBy] >=\\n            (tier1MinPurchaseLimit * 10 ** 18) &&\\n            totalPurchaseAmount[referredBy] < (tier2MinPurchaseLimit * 10 ** 18)\\n        ) {\\n            // uint256 referralAmount =\\n            return (tokens * _tier1) / 100;\\n        } else if (\\n            totalPurchaseAmount[referredBy] >=\\n            (tier2MinPurchaseLimit * 10 ** 18) &&\\n            totalPurchaseAmount[referredBy] < (tier3MinPurchaseLimit * 10 ** 18)\\n        ) {\\n            return (tokens * _tier2) / 100;\\n        } else if (\\n            totalPurchaseAmount[referredBy] >=\\n            (tier3MinPurchaseLimit * 10 ** 18)\\n        ) {\\n            return (tokens * _tier3) / 100;\\n        } else {\\n            return 0;\\n        }\\n    }\\n\\n    /**\\n     * @dev add referral\\n     * @param _beneficiary, referred the msg.sender\\n     */\\n\\n    function addReferral(address _beneficiary) internal {\\n        require(\\n            totalPurchaseAmount[_beneficiary] >= minPurchaseAmount,\\n            \\\"The person cannot refer\\\"\\n        );\\n        require(\\n            _referredBy[msg.sender] ==\\n                0x0000000000000000000000000000000000000000,\\n            \\\"Already referred\\\"\\n        );\\n        require(\\n            totalPurchaseAmount[msg.sender] == 0,\\n            \\\"User cannot add referral\\\"\\n        );\\n        _referredBy[msg.sender] = _beneficiary;\\n        isReferredBy[msg.sender] = true;\\n        emit AddReferral(_beneficiary, msg.sender);\\n    }\\n\\n    /**\\n     * @dev owner can update the referral status\\n     * @param isReferralStatusOn - get the boolean value\\n     */\\n\\n    function updateReferralStatus(bool isReferralStatusOn) external onlyOwner {\\n        referralStatus = isReferralStatusOn;\\n        emit UpdateReferralStatus(isReferralStatusOn);\\n    }\\n\\n    /* *\\n     * @dev owner can update minimum purchase amount for referral\\n     * @param minPurchaseAmount minimum purchase amount\\n     */\\n\\n    function updateMinPurchaseAmountForReferral(\\n        uint256 _minPurchaseAmount\\n    ) external onlyOwner {\\n        minPurchaseAmount = _minPurchaseAmount;\\n        emit MinimumPurchaseAmountForReferral(_minPurchaseAmount);\\n    }\\n\\n    /**\\n     * @dev to calculateUserBonus\\n     * @param amount to calculate the bonus\\n     */\\n\\n    function calculateBonus(uint256 amount) internal view returns (uint256) {\\n        uint256 bonus = (amount * bonusPercentage) / 100;\\n        return bonus;\\n    }\\n\\n    /**\\n     @dev to update bonus percentage\\n     @param _bonusPercentage changing value\\n     */\\n\\n    function updateBonusPercentage(\\n        uint256 _bonusPercentage\\n    ) external onlyOwner {\\n        bonusPercentage = _bonusPercentage;\\n        emit UpdateBonusPercentage(_bonusPercentage);\\n    }\\n\\n    /**\\n    * @dev to update the minimum to maxmum purchase limit for calculating referral percentage\\n    * @param _tier1MinPurchaseLimit and _tier2MinPurchaseLimit and _tier3MinPurchaseLimit\\n     */\\n\\n    function updateTierEligibleAmount(\\n        uint256 _tier1MinPurchaseLimit,\\n        uint256 _tier2MinPurchaseLimit,\\n        uint256 _tier3MinPurchaseLimit\\n    ) external onlyOwner {\\n        tier1MinPurchaseLimit = _tier1MinPurchaseLimit;\\n        tier2MinPurchaseLimit = _tier2MinPurchaseLimit;\\n        tier3MinPurchaseLimit = _tier3MinPurchaseLimit;\\n        emit TierPurchaseLimitForReferral(\\n            _tier1MinPurchaseLimit,\\n            _tier2MinPurchaseLimit,\\n            _tier3MinPurchaseLimit\\n        );\\n    }\\n\\n    /**\\n     * update admin wallet\\n     */\\n    function updateAdminWallet(address admin) external onlyOwner {\\n        adminWallet = admin;\\n        emit UpdateAdminWallet(admin);\\n    }\\n}\\n\"\r\n    },\r\n    \"/contracts/Vesting.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.16;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(\\n        uint256 a,\\n        uint256 b\\n    ) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(\\n        uint256 a,\\n        uint256 b\\n    ) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(\\n        uint256 a,\\n        uint256 b\\n    ) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(\\n        uint256 a,\\n        uint256 b\\n    ) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(\\n        uint256 a,\\n        uint256 b\\n    ) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\\ncontract VestingVault is Initializable, OwnableUpgradeable, UUPSUpgradeable {\\n    using SafeMath for uint256;\\n\\n    struct Grant {\\n        uint256 startTime;\\n        uint256 amount;\\n        uint256 vestingDuration;\\n        uint256 monthsClaimed;\\n        uint256 totalClaimed;\\n        address recipient;\\n    }\\n\\n    event GrantAdded(address indexed recipient);\\n    event GrantTokensClaimed(address indexed recipient, uint256 amountClaimed);\\n    event GrantRevoked(\\n        address recipient,\\n        uint256 amountVested,\\n        uint256 amountNotVested\\n    );\\n    event GrantUpdateAmount(\\n        address recipient,\\n        uint256 tokenAmount,\\n        uint256 amount\\n    );\\n    event UpdateIntervalTime(uint256 _intervalTime);\\n\\n    IERC20Upgradeable public token;\\n\\n    mapping(address => mapping(uint256 => Grant)) private tokenGrants;\\n\\n    address public crowdsale_address;\\n    uint256 public intervalTime;\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() initializer {}\\n\\n    function initialize(IERC20Upgradeable _token) public initializer {\\n        require(address(_token) != address(0));\\n        token = _token;\\n        intervalTime = 2628003;\\n        __Ownable_init_unchained();\\n        __Context_init_unchained();\\n    }\\n\\n    function _authorizeUpgrade(address) internal override onlyOwner {}\\n\\n    function addCrowdsaleAddress(address crowdsaleAddress) external onlyOwner {\\n        require(\\n            crowdsaleAddress != address(0),\\n            \\\"ERC20: transfer from the zero address\\\"\\n        );\\n        crowdsale_address = crowdsaleAddress;\\n    }\\n\\n    function addTokenGrant(\\n        address _recipient,\\n        uint256 _amount,\\n        uint256 _vestingDurationInMonths, //9\\n        uint256 _lockDurationInMonths, //1\\n        uint256 crowdsaleRound //1\\n    ) external {\\n        // require(tokenGrants[_recipient].amount == 0, \\\"Grant already exists, must revoke first.\\\");\\n        require(\\n            _vestingDurationInMonths <= 25 * 12,\\n            \\\"Duration greater than 25 years\\\"\\n        );\\n        require(_lockDurationInMonths <= 10 * 12, \\\"Lock greater than 10 years\\\");\\n        require(_amount != 0, \\\"Grant amount cannot be 0\\\");\\n        uint256 amountVestedPerMonth = _amount.div(_vestingDurationInMonths);\\n        require(amountVestedPerMonth > 0, \\\"amountVestedPerMonth < 0\\\");\\n\\n        if (tokenGrants[_recipient][crowdsaleRound].amount == 0) {\\n            Grant memory grant = Grant({\\n                startTime: currentTime().add(\\n                    (_lockDurationInMonths).mul(intervalTime)\\n                ),\\n                amount: _amount,\\n                vestingDuration: _vestingDurationInMonths,\\n                monthsClaimed: 0,\\n                totalClaimed: 0,\\n                recipient: _recipient\\n            });\\n            tokenGrants[_recipient][crowdsaleRound] = grant;\\n            emit GrantAdded(_recipient);\\n        } else {\\n            Grant storage tokenGrant = tokenGrants[_recipient][crowdsaleRound];\\n            require(\\n                tokenGrant.monthsClaimed < tokenGrant.vestingDuration,\\n                \\\"Grant fully claimed\\\"\\n            );\\n            tokenGrant.amount = uint256(tokenGrant.amount.add(_amount));\\n            emit GrantUpdateAmount(_recipient, tokenGrant.amount, _amount);\\n        }\\n\\n        // token.approve(_recipient, address(this), _amount);\\n        // Transfer the grant tokens under the control of the vesting contract\\n        // token.transferFrom(_recipient, address(this), _amount);\\n    }\\n\\n    /// @notice Allows a grant recipient to claim their vested tokens. Errors if no tokens have vested\\n    function claimVestedTokens(uint256 crowdsaleRound) external {\\n        uint256 monthsVested;\\n        uint256 amountVested;\\n        (monthsVested, amountVested) = calculateGrantClaim(\\n            msg.sender,\\n            crowdsaleRound\\n        );\\n        require(amountVested > 0, \\\"Vested is 0\\\");\\n\\n        Grant storage tokenGrant = tokenGrants[msg.sender][crowdsaleRound];\\n        tokenGrant.monthsClaimed = uint256(\\n            tokenGrant.monthsClaimed.add(monthsVested)\\n        );\\n        tokenGrant.totalClaimed = uint256(\\n            tokenGrant.totalClaimed.add(amountVested)\\n        );\\n\\n        emit GrantTokensClaimed(tokenGrant.recipient, amountVested);\\n        token.transfer(tokenGrant.recipient, amountVested);\\n    }\\n\\n    function getTotalGrantClaimed(\\n        address _recipient,\\n        uint256 crodsaleRound\\n    ) external view returns (uint256, uint256) {\\n        Grant storage tokenGrant = tokenGrants[_recipient][crodsaleRound];\\n        return (tokenGrant.monthsClaimed, tokenGrant.totalClaimed);\\n    }\\n\\n    /// @notice Terminate token grant transferring all vested tokens to the `_recipient`\\n    /// and returning all non-vested tokens to the contract owner\\n    /// Secured to the contract owner only\\n    /// @param _recipient address of the token grant recipient\\n    function revokeTokenGrant(\\n        address _recipient,\\n        uint256 crowdsaleRound\\n    ) external {\\n        Grant storage tokenGrant = tokenGrants[_recipient][crowdsaleRound];\\n        uint256 monthsVested;\\n        uint256 amountVested;\\n        (monthsVested, amountVested) = calculateGrantClaim(\\n            _recipient,\\n            crowdsaleRound\\n        );\\n\\n        uint256 amountNotVested = (\\n            tokenGrant.amount.sub(tokenGrant.totalClaimed)\\n        ).sub(amountVested);\\n\\n        delete tokenGrants[_recipient][crowdsaleRound];\\n\\n        emit GrantRevoked(_recipient, amountVested, amountNotVested);\\n\\n        // only transfer tokens if amounts are non-zero.\\n        // Negative cases are covered by upperbound check in addTokenGrant and overflow protection using SafeMath\\n        if (amountNotVested > 0) {\\n            token.transfer(crowdsale_address, amountNotVested);\\n        }\\n        if (amountVested > 0) {\\n            token.transfer(_recipient, amountVested);\\n        }\\n    }\\n\\n    function getGrantStartTime(\\n        address _recipient,\\n        uint256 crowdsaleRound\\n    ) external view returns (uint256) {\\n        Grant storage tokenGrant = tokenGrants[_recipient][crowdsaleRound];\\n        return tokenGrant.startTime;\\n    }\\n\\n    function getGrantAmount(\\n        address _recipient,\\n        uint256 crowdsaleRound\\n    ) external view returns (uint256) {\\n        Grant storage tokenGrant = tokenGrants[_recipient][crowdsaleRound];\\n        return tokenGrant.amount;\\n    }\\n\\n    /// @notice Calculate the vested and unclaimed months and tokens available for `_grantId` to claim\\n    /// Due to rounding errors once grant duration is reached, returns the entire left grant amount\\n    /// Returns (0, 0) if lock duration has not been reached\\n    function calculateGrantClaim(\\n        address _recipient,\\n        uint256 crowdsaleRound\\n    ) public view returns (uint256, uint256) {\\n        Grant storage tokenGrant = tokenGrants[_recipient][crowdsaleRound];\\n\\n        require(\\n            tokenGrant.totalClaimed < tokenGrant.amount,\\n            \\\"Grant fully claimed\\\"\\n        );\\n\\n        // Check if lock duration was reached by comparing the current time with the startTime. If lock duration hasn't been reached, return 0, 0\\n        if (currentTime() < tokenGrant.startTime) {\\n            return (0, 0);\\n        }\\n\\n        // Elapsed months is the number of months since the startTime (after lock duration is complete)\\n        // We add 1 to the calculation as any time after the unlock timestamp counts as the first elapsed month.\\n        // For example: lock duration of 0 and current time at day 1, counts as elapsed month of 1\\n        // Lock duration of 1 month and current time at day 31, counts as elapsed month of 2\\n        // This is to accomplish the design that the first batch of vested tokens are claimable immediately after unlock.\\n        uint256 elapsedMonths = currentTime()\\n            .sub(tokenGrant.startTime)\\n            .div(intervalTime)\\n            .add(1);\\n        // If over vesting duration, all tokens vested\\n        if (elapsedMonths > tokenGrant.vestingDuration) {\\n            uint256 remainingGrant = tokenGrant.amount.sub(\\n                tokenGrant.totalClaimed\\n            );\\n            uint256 balanceMonth = tokenGrant.vestingDuration.sub(\\n                tokenGrant.monthsClaimed\\n            );\\n            return (balanceMonth, remainingGrant);\\n        } else {\\n            uint256 monthsVested = uint256(\\n                elapsedMonths.sub(tokenGrant.monthsClaimed)\\n            );\\n            uint256 amountVestedPerMonth = (\\n                tokenGrant.amount.sub(tokenGrant.totalClaimed)\\n            ).div(\\n                    uint256(\\n                        tokenGrant.vestingDuration.sub(tokenGrant.monthsClaimed)\\n                    )\\n                );\\n            uint256 amountVested = uint256(\\n                monthsVested.mul(amountVestedPerMonth)\\n            );\\n            return (monthsVested, amountVested);\\n        }\\n    }\\n\\n    /**\\n     * @dev update the time gap between the distribution\\n     * @param _intervalTime update the time in seconds\\n     */\\n    function updateIntervalTime(uint256 _intervalTime) external onlyOwner {\\n        intervalTime = _intervalTime;\\n        emit UpdateIntervalTime(intervalTime);\\n    }\\n\\n    function currentTime() private view returns (uint256) {\\n        return block.timestamp;\\n    }\\n\\n    function remainingToken(\\n        address _recipient,\\n        uint256 crowdsaleRound\\n    ) external view returns (uint256) {\\n        Grant storage tokenGrant = tokenGrants[_recipient][crowdsaleRound];\\n        return tokenGrant.amount.sub(tokenGrant.totalClaimed);\\n    }\\n    \\n    /**\\n    @dev - To find the next claim date for the user\\n    @param - _recipient - to whom we need to find next claim date\\n     */\\n\\n    function nextClaimDate(\\n        address _recipient,\\n        uint256 crowdsaleRound\\n    ) external view returns (uint256) {\\n        Grant storage tokenGrant = tokenGrants[_recipient][crowdsaleRound];\\n        if (tokenGrant.startTime == 0) {\\n            return 0;\\n        }\\n        uint256 startTimeOfUser = tokenGrant.startTime;\\n        uint256 finalDate = startTimeOfUser +\\n            ((tokenGrant.vestingDuration - 1) * intervalTime);\\n        if (block.timestamp > finalDate) {\\n            return finalDate;\\n        }\\n        if(block.timestamp < startTimeOfUser){\\n            return startTimeOfUser;\\n        }\\n        uint256 j = 1;\\n        for (uint i = 0; i < j; i++) {\\n            startTimeOfUser += intervalTime;\\n            if (startTimeOfUser > block.timestamp) {\\n                return startTimeOfUser;\\n            } else {\\n                j++;\\n            }\\n        }\\n        return 0;\\n    }\\n      /**\\n     * @dev Change the base token address of the token\\n     * @param newToken address of the token.\\n     */\\n    function changeToken(\\n        IERC20Upgradeable newToken\\n    ) external virtual onlyOwner {\\n        require(\\n            address(newToken) != address(0),\\n            \\\"Token: Address cant be zero address\\\"\\n        );\\n        token = newToken;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlotUpgradeable {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../extensions/IERC20PermitUpgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20Upgradeable token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20Upgradeable token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20PermitUpgradeable token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20Upgradeable token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && AddressUpgradeable.isContract(address(token));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20PermitUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20PermitUpgradeable {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../ERC1967/ERC1967UpgradeUpgradeable.sol\\\";\\nimport \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract UUPSUpgradeable is Initializable, IERC1822ProxiableUpgradeable, ERC1967UpgradeUpgradeable {\\n    function __UUPSUpgradeable_init() internal onlyInitializing {\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\\n    }\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        require(address(this) != __self, \\\"Function must be called through delegatecall\\\");\\n        require(_getImplementation() == __self, \\\"Function must be called through active proxy\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\n     * callable on the implementing contract but not through proxies.\\n     */\\n    modifier notDelegated() {\\n        require(address(this) == __self, \\\"UUPSUpgradeable: must not be called through delegatecall\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\\n     * implementation. It is used to validate the implementation's compatibility when performing an upgrade.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\n     */\\n    function proxiableUUID() external view virtual override notDelegated returns (bytes32) {\\n        return _IMPLEMENTATION_SLOT;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     *\\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\\n     */\\n    function upgradeTo(address newImplementation) public virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, new bytes(0), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     *\\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) public payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeTo} and {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeaconUpgradeable {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeaconUpgradeable.sol\\\";\\nimport \\\"../../interfaces/IERC1967Upgradeable.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/StorageSlotUpgradeable.sol\\\";\\nimport \\\"../utils/Initializable.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract ERC1967UpgradeUpgradeable is Initializable, IERC1967Upgradeable {\\n    function __ERC1967Upgrade_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC1967Upgrade_init_unchained() internal onlyInitializing {\\n    }\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(AddressUpgradeable.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(address newImplementation, bytes memory data, bool forceCall) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            AddressUpgradeable.functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(address newImplementation, bytes memory data, bool forceCall) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822ProxiableUpgradeable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(AddressUpgradeable.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(address newBeacon, bytes memory data, bool forceCall) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            AddressUpgradeable.functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822ProxiableUpgradeable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/interfaces/IERC1967Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC1967.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC-1967: Proxy Storage Slots. This interface contains the events defined in the ERC.\\n *\\n * _Available since v4.8.3._\\n */\\ninterface IERC1967Upgradeable {\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Emitted when the beacon is changed.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"byzantium\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"referredTo\",\"type\":\"address\"}],\"name\":\"AddReferral\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bonus\",\"type\":\"uint256\"}],\"name\":\"Bonus\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Finalized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_minimumPurchaseAmount\",\"type\":\"uint256\"}],\"name\":\"MinimumPurchaseAmountForReferral\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tier1\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tier2\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tier3\",\"type\":\"uint256\"}],\"name\":\"NewTierPercentage\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"vestingAddress\",\"type\":\"address\"}],\"name\":\"SetVestingAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tier1MinPurchaseLimit\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tier2MinPurchaseLimit\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tier3MinPurchaseLimit\",\"type\":\"uint256\"}],\"name\":\"TierPurchaseLimitForReferral\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"prevClosingTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newClosingTime\",\"type\":\"uint256\"}],\"name\":\"TimedCrowdsaleExtended\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"roundOpeningTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"roundClosingTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"roundRate\",\"type\":\"uint256\"}],\"name\":\"TimedNewCrowdsaleExtended\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenPurchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"UpdateAdminWallet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_bonusPercentage\",\"type\":\"uint256\"}],\"name\":\"UpdateBonusPercentage\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isReferralStatusOn\",\"type\":\"bool\"}],\"name\":\"UpdateReferralStatus\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"months\",\"type\":\"uint256\"}],\"name\":\"UpdateVestingMonths\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"UpdateWhitelistingStatus\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_referredBy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_tier1\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_tier2\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_tier3\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_beneficiers\",\"type\":\"address[]\"}],\"name\":\"addMultipleAccountToBlacklist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_beneficiers\",\"type\":\"address[]\"}],\"name\":\"addMultipleAccountToWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"addToBlacklist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"addToWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"adminWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bonusPercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"referredTo\",\"type\":\"address\"}],\"name\":\"buyToken\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyToken\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newRate\",\"type\":\"uint256\"}],\"name\":\"changeRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"newToken\",\"type\":\"address\"}],\"name\":\"changeToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newWallet\",\"type\":\"address\"}],\"name\":\"changeWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"checkBlacklisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"checkWhitelisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"closingTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newClosingTime\",\"type\":\"uint256\"}],\"name\":\"extendSale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_withdrawToken\",\"type\":\"bool\"}],\"name\":\"finalize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hasClosed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"wallet\",\"type\":\"address\"},{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"contract VestingVault\",\"name\":\"vesting\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"openingTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"closingTime\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"vestingVaultAddress\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isFinalized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isReferredBy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minPurchaseAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"roundOpeningTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"roundClosingTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"roundRate\",\"type\":\"uint256\"}],\"name\":\"newCrowdSaleRound\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"openingTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pauseContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"referralStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"removeFromBlacklist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"removeFromWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"round\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract VestingVault\",\"name\":\"_vestingToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_vestingAddress\",\"type\":\"address\"}],\"name\":\"setVestingAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tier1MinPurchaseLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tier2MinPurchaseLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tier3MinPurchaseLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalPurchaseAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalReferralAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unPauseContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"updateAdminWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_bonusPercentage\",\"type\":\"uint256\"}],\"name\":\"updateBonusPercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minPurchaseAmount\",\"type\":\"uint256\"}],\"name\":\"updateMinPurchaseAmountForReferral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"isReferralStatusOn\",\"type\":\"bool\"}],\"name\":\"updateReferralStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tier1MinPurchaseLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tier2MinPurchaseLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tier3MinPurchaseLimit\",\"type\":\"uint256\"}],\"name\":\"updateTierEligibleAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tier1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tier2\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tier3\",\"type\":\"uint256\"}],\"name\":\"updateTierPercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"months\",\"type\":\"uint256\"}],\"name\":\"updateVestingMonths\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"updateWhitelistingStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vestingAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vestingMonths\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"weiRaised\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"whiteListingStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "CrowdSale", "CompilerVersion": "v0.8.21+commit.d9974bed", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "byzantium", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}