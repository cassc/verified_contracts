{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/PLSBLockBulk.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.18;\\n\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\n\\ninterface iPLSB {\\n\\n  function approve(address spender, uint amount) external returns (bool);\\n  function transfer(address to, uint amount) external returns (bool);\\n  function transferFrom(address sender, address recipient, uint amount) external returns(bool);\\n\\n}\\n\\n\\ninterface iPLSBLock {\\n\\n  function lockUpAndMint(\\n    uint lockupAmount,\\n    uint tipAmount,\\n    uint _lockTimeInterval,\\n    bool transferable,\\n    address mintTo,\\n    string memory uri\\n  ) external;\\n\\n}\\n\\n\\ncontract PLSBLockBulk is ReentrancyGuard {\\n  iPLSBLock public plsbLock;\\n  iPLSB public plsb;\\n\\n  address public txnFeeSendTo;\\n  uint public baseTxnFee;\\n\\n  error InputsDoNotMatch(uint lockupAmtsLength, uint lockTimesLength);\\n\\n  constructor(address _plsb, address _plsbLock, address _txnFeeSendTo) {\\n    plsbLock = iPLSBLock(_plsbLock);\\n    plsb = iPLSB(_plsb);\\n\\n    txnFeeSendTo = _txnFeeSendTo;\\n    baseTxnFee = 0.001 ether;\\n\\n    plsb.approve(address(plsbLock), type(uint).max);\\n  }\\n\\n  receive() payable external {\\n    payable(txnFeeSendTo).transfer(msg.value);\\n  }\\n\\n  function _txnFee(uint numToCreate) internal view returns(uint) {\\n    uint txnFee = baseTxnFee * numToCreate;\\n    return txnFee;\\n  }\\n\\n  function bulkLockUpAndMint(\\n    uint[] calldata lockupAmounts,\\n    uint[] calldata lockTimeIntervals,\\n    bool transferable,\\n    address mintTo,\\n    string[] calldata uris\\n  ) public payable nonReentrant {\\n    uint loopLength = lockupAmounts.length;\\n    uint txnFee = _txnFee(loopLength);\\n\\n    if(loopLength != lockTimeIntervals.length) {\\n      revert InputsDoNotMatch(loopLength, lockTimeIntervals.length);\\n    }\\n    if(loopLength != uris.length) {\\n      revert InputsDoNotMatch(loopLength, uris.length);\\n    }\\n\\n    if(msg.value != txnFee) {\\n      revert(\\\"Txn Fee invalid\\\");\\n    }\\n\\n    payable(txnFeeSendTo).transfer(txnFee);\\n\\n    uint totalLockupAmount;\\n    for(uint i; i < loopLength;) {\\n      totalLockupAmount += lockupAmounts[i];\\n\\n      unchecked {\\n        i++;\\n      }\\n    }\\n\\n    plsb.transferFrom(msg.sender, address(this), totalLockupAmount);\\n\\n    for(uint i; i < loopLength;) {\\n\\n      plsbLock.lockUpAndMint(\\n        lockupAmounts[i],\\n        0,\\n        lockTimeIntervals[i],\\n        transferable,\\n        mintTo,\\n        uris[i]\\n      );\\n\\n      unchecked {\\n        i++;\\n      }\\n    }\\n\\n  }\\n\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_plsb\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_plsbLock\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_txnFeeSendTo\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lockupAmtsLength\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockTimesLength\",\"type\":\"uint256\"}],\"name\":\"InputsDoNotMatch\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"baseTxnFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"lockupAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"lockTimeIntervals\",\"type\":\"uint256[]\"},{\"internalType\":\"bool\",\"name\":\"transferable\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"mintTo\",\"type\":\"address\"},{\"internalType\":\"string[]\",\"name\":\"uris\",\"type\":\"string[]\"}],\"name\":\"bulkLockUpAndMint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"plsb\",\"outputs\":[{\"internalType\":\"contract iPLSB\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"plsbLock\",\"outputs\":[{\"internalType\":\"contract iPLSBLock\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"txnFeeSendTo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "PLSBLockBulk", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "0000000000000000000000005ee84583f67d5ecea5420dbb42b462896e7f8d060000000000000000000000001f06e2bb54d4d08b0ebd01be66db2f7ccb9c814b000000000000000000000000aee6586af05ef9f944b8619276599c375a7a5ed2", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}