{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@prb/math/src/Common.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.19;\\n\\n// Common.sol\\n//\\n// Common mathematical functions needed by both SD59x18 and UD60x18. Note that these global functions do not\\n// always operate with SD59x18 and UD60x18 numbers.\\n\\n/*//////////////////////////////////////////////////////////////////////////\\n                                CUSTOM ERRORS\\n//////////////////////////////////////////////////////////////////////////*/\\n\\n/// @notice Thrown when the resultant value in {mulDiv} overflows uint256.\\nerror PRBMath_MulDiv_Overflow(uint256 x, uint256 y, uint256 denominator);\\n\\n/// @notice Thrown when the resultant value in {mulDiv18} overflows uint256.\\nerror PRBMath_MulDiv18_Overflow(uint256 x, uint256 y);\\n\\n/// @notice Thrown when one of the inputs passed to {mulDivSigned} is `type(int256).min`.\\nerror PRBMath_MulDivSigned_InputTooSmall();\\n\\n/// @notice Thrown when the resultant value in {mulDivSigned} overflows int256.\\nerror PRBMath_MulDivSigned_Overflow(int256 x, int256 y);\\n\\n/*//////////////////////////////////////////////////////////////////////////\\n                                    CONSTANTS\\n//////////////////////////////////////////////////////////////////////////*/\\n\\n/// @dev The maximum value a uint128 number can have.\\nuint128 constant MAX_UINT128 = type(uint128).max;\\n\\n/// @dev The maximum value a uint40 number can have.\\nuint40 constant MAX_UINT40 = type(uint40).max;\\n\\n/// @dev The unit number, which the decimal precision of the fixed-point types.\\nuint256 constant UNIT = 1e18;\\n\\n/// @dev The unit number inverted mod 2^256.\\nuint256 constant UNIT_INVERSE = 78156646155174841979727994598816262306175212592076161876661_508869554232690281;\\n\\n/// @dev The the largest power of two that divides the decimal value of `UNIT`. The logarithm of this value is the least significant\\n/// bit in the binary representation of `UNIT`.\\nuint256 constant UNIT_LPOTD = 262144;\\n\\n/*//////////////////////////////////////////////////////////////////////////\\n                                    FUNCTIONS\\n//////////////////////////////////////////////////////////////////////////*/\\n\\n/// @notice Calculates the binary exponent of x using the binary fraction method.\\n/// @dev Has to use 192.64-bit fixed-point numbers. See https://ethereum.stackexchange.com/a/96594/24693.\\n/// @param x The exponent as an unsigned 192.64-bit fixed-point number.\\n/// @return result The result as an unsigned 60.18-decimal fixed-point number.\\n/// @custom:smtchecker abstract-function-nondet\\nfunction exp2(uint256 x) pure returns (uint256 result) {\\n    unchecked {\\n        // Start from 0.5 in the 192.64-bit fixed-point format.\\n        result = 0x800000000000000000000000000000000000000000000000;\\n\\n        // The following logic multiplies the result by $\\\\sqrt{2^{-i}}$ when the bit at position i is 1. Key points:\\n        //\\n        // 1. Intermediate results will not overflow, as the starting point is 2^191 and all magic factors are under 2^65.\\n        // 2. The rationale for organizing the if statements into groups of 8 is gas savings. If the result of performing\\n        // a bitwise AND operation between x and any value in the array [0x80; 0x40; 0x20; 0x10; 0x08; 0x04; 0x02; 0x01] is 1,\\n        // we know that `x & 0xFF` is also 1.\\n        if (x & 0xFF00000000000000 > 0) {\\n            if (x & 0x8000000000000000 > 0) {\\n                result = (result * 0x16A09E667F3BCC909) >> 64;\\n            }\\n            if (x & 0x4000000000000000 > 0) {\\n                result = (result * 0x1306FE0A31B7152DF) >> 64;\\n            }\\n            if (x & 0x2000000000000000 > 0) {\\n                result = (result * 0x1172B83C7D517ADCE) >> 64;\\n            }\\n            if (x & 0x1000000000000000 > 0) {\\n                result = (result * 0x10B5586CF9890F62A) >> 64;\\n            }\\n            if (x & 0x800000000000000 > 0) {\\n                result = (result * 0x1059B0D31585743AE) >> 64;\\n            }\\n            if (x & 0x400000000000000 > 0) {\\n                result = (result * 0x102C9A3E778060EE7) >> 64;\\n            }\\n            if (x & 0x200000000000000 > 0) {\\n                result = (result * 0x10163DA9FB33356D8) >> 64;\\n            }\\n            if (x & 0x100000000000000 > 0) {\\n                result = (result * 0x100B1AFA5ABCBED61) >> 64;\\n            }\\n        }\\n\\n        if (x & 0xFF000000000000 > 0) {\\n            if (x & 0x80000000000000 > 0) {\\n                result = (result * 0x10058C86DA1C09EA2) >> 64;\\n            }\\n            if (x & 0x40000000000000 > 0) {\\n                result = (result * 0x1002C605E2E8CEC50) >> 64;\\n            }\\n            if (x & 0x20000000000000 > 0) {\\n                result = (result * 0x100162F3904051FA1) >> 64;\\n            }\\n            if (x & 0x10000000000000 > 0) {\\n                result = (result * 0x1000B175EFFDC76BA) >> 64;\\n            }\\n            if (x & 0x8000000000000 > 0) {\\n                result = (result * 0x100058BA01FB9F96D) >> 64;\\n            }\\n            if (x & 0x4000000000000 > 0) {\\n                result = (result * 0x10002C5CC37DA9492) >> 64;\\n            }\\n            if (x & 0x2000000000000 > 0) {\\n                result = (result * 0x1000162E525EE0547) >> 64;\\n            }\\n            if (x & 0x1000000000000 > 0) {\\n                result = (result * 0x10000B17255775C04) >> 64;\\n            }\\n        }\\n\\n        if (x & 0xFF0000000000 > 0) {\\n            if (x & 0x800000000000 > 0) {\\n                result = (result * 0x1000058B91B5BC9AE) >> 64;\\n            }\\n            if (x & 0x400000000000 > 0) {\\n                result = (result * 0x100002C5C89D5EC6D) >> 64;\\n            }\\n            if (x & 0x200000000000 > 0) {\\n                result = (result * 0x10000162E43F4F831) >> 64;\\n            }\\n            if (x & 0x100000000000 > 0) {\\n                result = (result * 0x100000B1721BCFC9A) >> 64;\\n            }\\n            if (x & 0x80000000000 > 0) {\\n                result = (result * 0x10000058B90CF1E6E) >> 64;\\n            }\\n            if (x & 0x40000000000 > 0) {\\n                result = (result * 0x1000002C5C863B73F) >> 64;\\n            }\\n            if (x & 0x20000000000 > 0) {\\n                result = (result * 0x100000162E430E5A2) >> 64;\\n            }\\n            if (x & 0x10000000000 > 0) {\\n                result = (result * 0x1000000B172183551) >> 64;\\n            }\\n        }\\n\\n        if (x & 0xFF00000000 > 0) {\\n            if (x & 0x8000000000 > 0) {\\n                result = (result * 0x100000058B90C0B49) >> 64;\\n            }\\n            if (x & 0x4000000000 > 0) {\\n                result = (result * 0x10000002C5C8601CC) >> 64;\\n            }\\n            if (x & 0x2000000000 > 0) {\\n                result = (result * 0x1000000162E42FFF0) >> 64;\\n            }\\n            if (x & 0x1000000000 > 0) {\\n                result = (result * 0x10000000B17217FBB) >> 64;\\n            }\\n            if (x & 0x800000000 > 0) {\\n                result = (result * 0x1000000058B90BFCE) >> 64;\\n            }\\n            if (x & 0x400000000 > 0) {\\n                result = (result * 0x100000002C5C85FE3) >> 64;\\n            }\\n            if (x & 0x200000000 > 0) {\\n                result = (result * 0x10000000162E42FF1) >> 64;\\n            }\\n            if (x & 0x100000000 > 0) {\\n                result = (result * 0x100000000B17217F8) >> 64;\\n            }\\n        }\\n\\n        if (x & 0xFF000000 > 0) {\\n            if (x & 0x80000000 > 0) {\\n                result = (result * 0x10000000058B90BFC) >> 64;\\n            }\\n            if (x & 0x40000000 > 0) {\\n                result = (result * 0x1000000002C5C85FE) >> 64;\\n            }\\n            if (x & 0x20000000 > 0) {\\n                result = (result * 0x100000000162E42FF) >> 64;\\n            }\\n            if (x & 0x10000000 > 0) {\\n                result = (result * 0x1000000000B17217F) >> 64;\\n            }\\n            if (x & 0x8000000 > 0) {\\n                result = (result * 0x100000000058B90C0) >> 64;\\n            }\\n            if (x & 0x4000000 > 0) {\\n                result = (result * 0x10000000002C5C860) >> 64;\\n            }\\n            if (x & 0x2000000 > 0) {\\n                result = (result * 0x1000000000162E430) >> 64;\\n            }\\n            if (x & 0x1000000 > 0) {\\n                result = (result * 0x10000000000B17218) >> 64;\\n            }\\n        }\\n\\n        if (x & 0xFF0000 > 0) {\\n            if (x & 0x800000 > 0) {\\n                result = (result * 0x1000000000058B90C) >> 64;\\n            }\\n            if (x & 0x400000 > 0) {\\n                result = (result * 0x100000000002C5C86) >> 64;\\n            }\\n            if (x & 0x200000 > 0) {\\n                result = (result * 0x10000000000162E43) >> 64;\\n            }\\n            if (x & 0x100000 > 0) {\\n                result = (result * 0x100000000000B1721) >> 64;\\n            }\\n            if (x & 0x80000 > 0) {\\n                result = (result * 0x10000000000058B91) >> 64;\\n            }\\n            if (x & 0x40000 > 0) {\\n                result = (result * 0x1000000000002C5C8) >> 64;\\n            }\\n            if (x & 0x20000 > 0) {\\n                result = (result * 0x100000000000162E4) >> 64;\\n            }\\n            if (x & 0x10000 > 0) {\\n                result = (result * 0x1000000000000B172) >> 64;\\n            }\\n        }\\n\\n        if (x & 0xFF00 > 0) {\\n            if (x & 0x8000 > 0) {\\n                result = (result * 0x100000000000058B9) >> 64;\\n            }\\n            if (x & 0x4000 > 0) {\\n                result = (result * 0x10000000000002C5D) >> 64;\\n            }\\n            if (x & 0x2000 > 0) {\\n                result = (result * 0x1000000000000162E) >> 64;\\n            }\\n            if (x & 0x1000 > 0) {\\n                result = (result * 0x10000000000000B17) >> 64;\\n            }\\n            if (x & 0x800 > 0) {\\n                result = (result * 0x1000000000000058C) >> 64;\\n            }\\n            if (x & 0x400 > 0) {\\n                result = (result * 0x100000000000002C6) >> 64;\\n            }\\n            if (x & 0x200 > 0) {\\n                result = (result * 0x10000000000000163) >> 64;\\n            }\\n            if (x & 0x100 > 0) {\\n                result = (result * 0x100000000000000B1) >> 64;\\n            }\\n        }\\n\\n        if (x & 0xFF > 0) {\\n            if (x & 0x80 > 0) {\\n                result = (result * 0x10000000000000059) >> 64;\\n            }\\n            if (x & 0x40 > 0) {\\n                result = (result * 0x1000000000000002C) >> 64;\\n            }\\n            if (x & 0x20 > 0) {\\n                result = (result * 0x10000000000000016) >> 64;\\n            }\\n            if (x & 0x10 > 0) {\\n                result = (result * 0x1000000000000000B) >> 64;\\n            }\\n            if (x & 0x8 > 0) {\\n                result = (result * 0x10000000000000006) >> 64;\\n            }\\n            if (x & 0x4 > 0) {\\n                result = (result * 0x10000000000000003) >> 64;\\n            }\\n            if (x & 0x2 > 0) {\\n                result = (result * 0x10000000000000001) >> 64;\\n            }\\n            if (x & 0x1 > 0) {\\n                result = (result * 0x10000000000000001) >> 64;\\n            }\\n        }\\n\\n        // In the code snippet below, two operations are executed simultaneously:\\n        //\\n        // 1. The result is multiplied by $(2^n + 1)$, where $2^n$ represents the integer part, and the additional 1\\n        // accounts for the initial guess of 0.5. This is achieved by subtracting from 191 instead of 192.\\n        // 2. The result is then converted to an unsigned 60.18-decimal fixed-point format.\\n        //\\n        // The underlying logic is based on the relationship $2^{191-ip} = 2^{ip} / 2^{191}$, where $ip$ denotes the,\\n        // integer part, $2^n$.\\n        result *= UNIT;\\n        result >>= (191 - (x >> 64));\\n    }\\n}\\n\\n/// @notice Finds the zero-based index of the first 1 in the binary representation of x.\\n///\\n/// @dev See the note on \\\"msb\\\" in this Wikipedia article: https://en.wikipedia.org/wiki/Find_first_set\\n///\\n/// Each step in this implementation is equivalent to this high-level code:\\n///\\n/// ```solidity\\n/// if (x >= 2 ** 128) {\\n///     x >>= 128;\\n///     result += 128;\\n/// }\\n/// ```\\n///\\n/// Where 128 is replaced with each respective power of two factor. See the full high-level implementation here:\\n/// https://gist.github.com/PaulRBerg/f932f8693f2733e30c4d479e8e980948\\n///\\n/// The Yul instructions used below are:\\n///\\n/// - \\\"gt\\\" is \\\"greater than\\\"\\n/// - \\\"or\\\" is the OR bitwise operator\\n/// - \\\"shl\\\" is \\\"shift left\\\"\\n/// - \\\"shr\\\" is \\\"shift right\\\"\\n///\\n/// @param x The uint256 number for which to find the index of the most significant bit.\\n/// @return result The index of the most significant bit as a uint256.\\n/// @custom:smtchecker abstract-function-nondet\\nfunction msb(uint256 x) pure returns (uint256 result) {\\n    // 2^128\\n    assembly (\\\"memory-safe\\\") {\\n        let factor := shl(7, gt(x, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF))\\n        x := shr(factor, x)\\n        result := or(result, factor)\\n    }\\n    // 2^64\\n    assembly (\\\"memory-safe\\\") {\\n        let factor := shl(6, gt(x, 0xFFFFFFFFFFFFFFFF))\\n        x := shr(factor, x)\\n        result := or(result, factor)\\n    }\\n    // 2^32\\n    assembly (\\\"memory-safe\\\") {\\n        let factor := shl(5, gt(x, 0xFFFFFFFF))\\n        x := shr(factor, x)\\n        result := or(result, factor)\\n    }\\n    // 2^16\\n    assembly (\\\"memory-safe\\\") {\\n        let factor := shl(4, gt(x, 0xFFFF))\\n        x := shr(factor, x)\\n        result := or(result, factor)\\n    }\\n    // 2^8\\n    assembly (\\\"memory-safe\\\") {\\n        let factor := shl(3, gt(x, 0xFF))\\n        x := shr(factor, x)\\n        result := or(result, factor)\\n    }\\n    // 2^4\\n    assembly (\\\"memory-safe\\\") {\\n        let factor := shl(2, gt(x, 0xF))\\n        x := shr(factor, x)\\n        result := or(result, factor)\\n    }\\n    // 2^2\\n    assembly (\\\"memory-safe\\\") {\\n        let factor := shl(1, gt(x, 0x3))\\n        x := shr(factor, x)\\n        result := or(result, factor)\\n    }\\n    // 2^1\\n    // No need to shift x any more.\\n    assembly (\\\"memory-safe\\\") {\\n        let factor := gt(x, 0x1)\\n        result := or(result, factor)\\n    }\\n}\\n\\n/// @notice Calculates x*y\u00f7denominator with 512-bit precision.\\n///\\n/// @dev Credits to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv.\\n///\\n/// Notes:\\n/// - The result is rounded toward zero.\\n///\\n/// Requirements:\\n/// - The denominator must not be zero.\\n/// - The result must fit in uint256.\\n///\\n/// @param x The multiplicand as a uint256.\\n/// @param y The multiplier as a uint256.\\n/// @param denominator The divisor as a uint256.\\n/// @return result The result as a uint256.\\n/// @custom:smtchecker abstract-function-nondet\\nfunction mulDiv(uint256 x, uint256 y, uint256 denominator) pure returns (uint256 result) {\\n    // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n    // use the Chinese Remainder Theorem to reconstruct the 512-bit result. The result is stored in two 256\\n    // variables such that product = prod1 * 2^256 + prod0.\\n    uint256 prod0; // Least significant 256 bits of the product\\n    uint256 prod1; // Most significant 256 bits of the product\\n    assembly (\\\"memory-safe\\\") {\\n        let mm := mulmod(x, y, not(0))\\n        prod0 := mul(x, y)\\n        prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n    }\\n\\n    // Handle non-overflow cases, 256 by 256 division.\\n    if (prod1 == 0) {\\n        unchecked {\\n            return prod0 / denominator;\\n        }\\n    }\\n\\n    // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n    if (prod1 >= denominator) {\\n        revert PRBMath_MulDiv_Overflow(x, y, denominator);\\n    }\\n\\n    ////////////////////////////////////////////////////////////////////////////\\n    // 512 by 256 division\\n    ////////////////////////////////////////////////////////////////////////////\\n\\n    // Make division exact by subtracting the remainder from [prod1 prod0].\\n    uint256 remainder;\\n    assembly (\\\"memory-safe\\\") {\\n        // Compute remainder using the mulmod Yul instruction.\\n        remainder := mulmod(x, y, denominator)\\n\\n        // Subtract 256 bit number from 512-bit number.\\n        prod1 := sub(prod1, gt(remainder, prod0))\\n        prod0 := sub(prod0, remainder)\\n    }\\n\\n    unchecked {\\n        // Calculate the largest power of two divisor of the denominator using the unary operator ~. This operation cannot overflow\\n        // because the denominator cannot be zero at this point in the function execution. The result is always >= 1.\\n        // For more detail, see https://cs.stackexchange.com/q/138556/92363.\\n        uint256 lpotdod = denominator & (~denominator + 1);\\n        uint256 flippedLpotdod;\\n\\n        assembly (\\\"memory-safe\\\") {\\n            // Factor powers of two out of denominator.\\n            denominator := div(denominator, lpotdod)\\n\\n            // Divide [prod1 prod0] by lpotdod.\\n            prod0 := div(prod0, lpotdod)\\n\\n            // Get the flipped value `2^256 / lpotdod`. If the `lpotdod` is zero, the flipped value is one.\\n            // `sub(0, lpotdod)` produces the two's complement version of `lpotdod`, which is equivalent to flipping all the bits.\\n            // However, `div` interprets this value as an unsigned value: https://ethereum.stackexchange.com/q/147168/24693\\n            flippedLpotdod := add(div(sub(0, lpotdod), lpotdod), 1)\\n        }\\n\\n        // Shift in bits from prod1 into prod0.\\n        prod0 |= prod1 * flippedLpotdod;\\n\\n        // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n        // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n        // four bits. That is, denominator * inv = 1 mod 2^4.\\n        uint256 inverse = (3 * denominator) ^ 2;\\n\\n        // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n        // in modular arithmetic, doubling the correct bits in each step.\\n        inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n        inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n        inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n        inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n        inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n        inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n        // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n        // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n        // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n        // is no longer required.\\n        result = prod0 * inverse;\\n    }\\n}\\n\\n/// @notice Calculates x*y\u00f71e18 with 512-bit precision.\\n///\\n/// @dev A variant of {mulDiv} with constant folding, i.e. in which the denominator is hard coded to 1e18.\\n///\\n/// Notes:\\n/// - The body is purposely left uncommented; to understand how this works, see the documentation in {mulDiv}.\\n/// - The result is rounded toward zero.\\n/// - We take as an axiom that the result cannot be `MAX_UINT256` when x and y solve the following system of equations:\\n///\\n/// $$\\n/// \\\\begin{cases}\\n///     x * y = MAX\\\\_UINT256 * UNIT \\\\\\\\\\n///     (x * y) \\\\% UNIT \\\\geq \\\\frac{UNIT}{2}\\n/// \\\\end{cases}\\n/// $$\\n///\\n/// Requirements:\\n/// - Refer to the requirements in {mulDiv}.\\n/// - The result must fit in uint256.\\n///\\n/// @param x The multiplicand as an unsigned 60.18-decimal fixed-point number.\\n/// @param y The multiplier as an unsigned 60.18-decimal fixed-point number.\\n/// @return result The result as an unsigned 60.18-decimal fixed-point number.\\n/// @custom:smtchecker abstract-function-nondet\\nfunction mulDiv18(uint256 x, uint256 y) pure returns (uint256 result) {\\n    uint256 prod0;\\n    uint256 prod1;\\n    assembly (\\\"memory-safe\\\") {\\n        let mm := mulmod(x, y, not(0))\\n        prod0 := mul(x, y)\\n        prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n    }\\n\\n    if (prod1 == 0) {\\n        unchecked {\\n            return prod0 / UNIT;\\n        }\\n    }\\n\\n    if (prod1 >= UNIT) {\\n        revert PRBMath_MulDiv18_Overflow(x, y);\\n    }\\n\\n    uint256 remainder;\\n    assembly (\\\"memory-safe\\\") {\\n        remainder := mulmod(x, y, UNIT)\\n        result :=\\n            mul(\\n                or(\\n                    div(sub(prod0, remainder), UNIT_LPOTD),\\n                    mul(sub(prod1, gt(remainder, prod0)), add(div(sub(0, UNIT_LPOTD), UNIT_LPOTD), 1))\\n                ),\\n                UNIT_INVERSE\\n            )\\n    }\\n}\\n\\n/// @notice Calculates x*y\u00f7denominator with 512-bit precision.\\n///\\n/// @dev This is an extension of {mulDiv} for signed numbers, which works by computing the signs and the absolute values separately.\\n///\\n/// Notes:\\n/// - The result is rounded toward zero.\\n///\\n/// Requirements:\\n/// - Refer to the requirements in {mulDiv}.\\n/// - None of the inputs can be `type(int256).min`.\\n/// - The result must fit in int256.\\n///\\n/// @param x The multiplicand as an int256.\\n/// @param y The multiplier as an int256.\\n/// @param denominator The divisor as an int256.\\n/// @return result The result as an int256.\\n/// @custom:smtchecker abstract-function-nondet\\nfunction mulDivSigned(int256 x, int256 y, int256 denominator) pure returns (int256 result) {\\n    if (x == type(int256).min || y == type(int256).min || denominator == type(int256).min) {\\n        revert PRBMath_MulDivSigned_InputTooSmall();\\n    }\\n\\n    // Get hold of the absolute values of x, y and the denominator.\\n    uint256 xAbs;\\n    uint256 yAbs;\\n    uint256 dAbs;\\n    unchecked {\\n        xAbs = x < 0 ? uint256(-x) : uint256(x);\\n        yAbs = y < 0 ? uint256(-y) : uint256(y);\\n        dAbs = denominator < 0 ? uint256(-denominator) : uint256(denominator);\\n    }\\n\\n    // Compute the absolute value of x*y\u00f7denominator. The result must fit in int256.\\n    uint256 resultAbs = mulDiv(xAbs, yAbs, dAbs);\\n    if (resultAbs > uint256(type(int256).max)) {\\n        revert PRBMath_MulDivSigned_Overflow(x, y);\\n    }\\n\\n    // Get the signs of x, y and the denominator.\\n    uint256 sx;\\n    uint256 sy;\\n    uint256 sd;\\n    assembly (\\\"memory-safe\\\") {\\n        // \\\"sgt\\\" is the \\\"signed greater than\\\" assembly instruction and \\\"sub(0,1)\\\" is -1 in two's complement.\\n        sx := sgt(x, sub(0, 1))\\n        sy := sgt(y, sub(0, 1))\\n        sd := sgt(denominator, sub(0, 1))\\n    }\\n\\n    // XOR over sx, sy and sd. What this does is to check whether there are 1 or 3 negative signs in the inputs.\\n    // If there are, the result should be negative. Otherwise, it should be positive.\\n    unchecked {\\n        result = sx ^ sy ^ sd == 0 ? -int256(resultAbs) : int256(resultAbs);\\n    }\\n}\\n\\n/// @notice Calculates the square root of x using the Babylonian method.\\n///\\n/// @dev See https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method.\\n///\\n/// Notes:\\n/// - If x is not a perfect square, the result is rounded down.\\n/// - Credits to OpenZeppelin for the explanations in comments below.\\n///\\n/// @param x The uint256 number for which to calculate the square root.\\n/// @return result The result as a uint256.\\n/// @custom:smtchecker abstract-function-nondet\\nfunction sqrt(uint256 x) pure returns (uint256 result) {\\n    if (x == 0) {\\n        return 0;\\n    }\\n\\n    // For our first guess, we calculate the biggest power of 2 which is smaller than the square root of x.\\n    //\\n    // We know that the \\\"msb\\\" (most significant bit) of x is a power of 2 such that we have:\\n    //\\n    // $$\\n    // msb(x) <= x <= 2*msb(x)$\\n    // $$\\n    //\\n    // We write $msb(x)$ as $2^k$, and we get:\\n    //\\n    // $$\\n    // k = log_2(x)\\n    // $$\\n    //\\n    // Thus, we can write the initial inequality as:\\n    //\\n    // $$\\n    // 2^{log_2(x)} <= x <= 2*2^{log_2(x)+1} \\\\\\\\\\n    // sqrt(2^k) <= sqrt(x) < sqrt(2^{k+1}) \\\\\\\\\\n    // 2^{k/2} <= sqrt(x) < 2^{(k+1)/2} <= 2^{(k/2)+1}\\n    // $$\\n    //\\n    // Consequently, $2^{log_2(x) /2} is a good first approximation of sqrt(x) with at least one correct bit.\\n    uint256 xAux = uint256(x);\\n    result = 1;\\n    if (xAux >= 2 ** 128) {\\n        xAux >>= 128;\\n        result <<= 64;\\n    }\\n    if (xAux >= 2 ** 64) {\\n        xAux >>= 64;\\n        result <<= 32;\\n    }\\n    if (xAux >= 2 ** 32) {\\n        xAux >>= 32;\\n        result <<= 16;\\n    }\\n    if (xAux >= 2 ** 16) {\\n        xAux >>= 16;\\n        result <<= 8;\\n    }\\n    if (xAux >= 2 ** 8) {\\n        xAux >>= 8;\\n        result <<= 4;\\n    }\\n    if (xAux >= 2 ** 4) {\\n        xAux >>= 4;\\n        result <<= 2;\\n    }\\n    if (xAux >= 2 ** 2) {\\n        result <<= 1;\\n    }\\n\\n    // At this point, `result` is an estimation with at least one bit of precision. We know the true value has at\\n    // most 128 bits, since it is the square root of a uint256. Newton's method converges quadratically (precision\\n    // doubles at every iteration). We thus need at most 7 iteration to turn our partial result with one bit of\\n    // precision into the expected uint128 result.\\n    unchecked {\\n        result = (result + x / result) >> 1;\\n        result = (result + x / result) >> 1;\\n        result = (result + x / result) >> 1;\\n        result = (result + x / result) >> 1;\\n        result = (result + x / result) >> 1;\\n        result = (result + x / result) >> 1;\\n        result = (result + x / result) >> 1;\\n\\n        // If x is not a perfect square, round the result toward zero.\\n        uint256 roundedResult = x / result;\\n        if (result >= roundedResult) {\\n            result = roundedResult;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@prb/math/src/sd1x18/Casting.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.19;\\n\\nimport \\\"../Common.sol\\\" as Common;\\nimport \\\"./Errors.sol\\\" as CastingErrors;\\nimport { SD59x18 } from \\\"../sd59x18/ValueType.sol\\\";\\nimport { UD2x18 } from \\\"../ud2x18/ValueType.sol\\\";\\nimport { UD60x18 } from \\\"../ud60x18/ValueType.sol\\\";\\nimport { SD1x18 } from \\\"./ValueType.sol\\\";\\n\\n/// @notice Casts an SD1x18 number into SD59x18.\\n/// @dev There is no overflow check because the domain of SD1x18 is a subset of SD59x18.\\nfunction intoSD59x18(SD1x18 x) pure returns (SD59x18 result) {\\n    result = SD59x18.wrap(int256(SD1x18.unwrap(x)));\\n}\\n\\n/// @notice Casts an SD1x18 number into UD2x18.\\n/// - x must be positive.\\nfunction intoUD2x18(SD1x18 x) pure returns (UD2x18 result) {\\n    int64 xInt = SD1x18.unwrap(x);\\n    if (xInt < 0) {\\n        revert CastingErrors.PRBMath_SD1x18_ToUD2x18_Underflow(x);\\n    }\\n    result = UD2x18.wrap(uint64(xInt));\\n}\\n\\n/// @notice Casts an SD1x18 number into UD60x18.\\n/// @dev Requirements:\\n/// - x must be positive.\\nfunction intoUD60x18(SD1x18 x) pure returns (UD60x18 result) {\\n    int64 xInt = SD1x18.unwrap(x);\\n    if (xInt < 0) {\\n        revert CastingErrors.PRBMath_SD1x18_ToUD60x18_Underflow(x);\\n    }\\n    result = UD60x18.wrap(uint64(xInt));\\n}\\n\\n/// @notice Casts an SD1x18 number into uint256.\\n/// @dev Requirements:\\n/// - x must be positive.\\nfunction intoUint256(SD1x18 x) pure returns (uint256 result) {\\n    int64 xInt = SD1x18.unwrap(x);\\n    if (xInt < 0) {\\n        revert CastingErrors.PRBMath_SD1x18_ToUint256_Underflow(x);\\n    }\\n    result = uint256(uint64(xInt));\\n}\\n\\n/// @notice Casts an SD1x18 number into uint128.\\n/// @dev Requirements:\\n/// - x must be positive.\\nfunction intoUint128(SD1x18 x) pure returns (uint128 result) {\\n    int64 xInt = SD1x18.unwrap(x);\\n    if (xInt < 0) {\\n        revert CastingErrors.PRBMath_SD1x18_ToUint128_Underflow(x);\\n    }\\n    result = uint128(uint64(xInt));\\n}\\n\\n/// @notice Casts an SD1x18 number into uint40.\\n/// @dev Requirements:\\n/// - x must be positive.\\n/// - x must be less than or equal to `MAX_UINT40`.\\nfunction intoUint40(SD1x18 x) pure returns (uint40 result) {\\n    int64 xInt = SD1x18.unwrap(x);\\n    if (xInt < 0) {\\n        revert CastingErrors.PRBMath_SD1x18_ToUint40_Underflow(x);\\n    }\\n    if (xInt > int64(uint64(Common.MAX_UINT40))) {\\n        revert CastingErrors.PRBMath_SD1x18_ToUint40_Overflow(x);\\n    }\\n    result = uint40(uint64(xInt));\\n}\\n\\n/// @notice Alias for {wrap}.\\nfunction sd1x18(int64 x) pure returns (SD1x18 result) {\\n    result = SD1x18.wrap(x);\\n}\\n\\n/// @notice Unwraps an SD1x18 number into int64.\\nfunction unwrap(SD1x18 x) pure returns (int64 result) {\\n    result = SD1x18.unwrap(x);\\n}\\n\\n/// @notice Wraps an int64 number into SD1x18.\\nfunction wrap(int64 x) pure returns (SD1x18 result) {\\n    result = SD1x18.wrap(x);\\n}\\n\"\r\n    },\r\n    \"@prb/math/src/sd1x18/Constants.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.19;\\n\\nimport { SD1x18 } from \\\"./ValueType.sol\\\";\\n\\n/// @dev Euler's number as an SD1x18 number.\\nSD1x18 constant E = SD1x18.wrap(2_718281828459045235);\\n\\n/// @dev The maximum value an SD1x18 number can have.\\nint64 constant uMAX_SD1x18 = 9_223372036854775807;\\nSD1x18 constant MAX_SD1x18 = SD1x18.wrap(uMAX_SD1x18);\\n\\n/// @dev The maximum value an SD1x18 number can have.\\nint64 constant uMIN_SD1x18 = -9_223372036854775808;\\nSD1x18 constant MIN_SD1x18 = SD1x18.wrap(uMIN_SD1x18);\\n\\n/// @dev PI as an SD1x18 number.\\nSD1x18 constant PI = SD1x18.wrap(3_141592653589793238);\\n\\n/// @dev The unit number, which gives the decimal precision of SD1x18.\\nSD1x18 constant UNIT = SD1x18.wrap(1e18);\\nint256 constant uUNIT = 1e18;\\n\"\r\n    },\r\n    \"@prb/math/src/sd1x18/Errors.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.19;\\n\\nimport { SD1x18 } from \\\"./ValueType.sol\\\";\\n\\n/// @notice Thrown when trying to cast a SD1x18 number that doesn't fit in UD2x18.\\nerror PRBMath_SD1x18_ToUD2x18_Underflow(SD1x18 x);\\n\\n/// @notice Thrown when trying to cast a SD1x18 number that doesn't fit in UD60x18.\\nerror PRBMath_SD1x18_ToUD60x18_Underflow(SD1x18 x);\\n\\n/// @notice Thrown when trying to cast a SD1x18 number that doesn't fit in uint128.\\nerror PRBMath_SD1x18_ToUint128_Underflow(SD1x18 x);\\n\\n/// @notice Thrown when trying to cast a SD1x18 number that doesn't fit in uint256.\\nerror PRBMath_SD1x18_ToUint256_Underflow(SD1x18 x);\\n\\n/// @notice Thrown when trying to cast a SD1x18 number that doesn't fit in uint40.\\nerror PRBMath_SD1x18_ToUint40_Overflow(SD1x18 x);\\n\\n/// @notice Thrown when trying to cast a SD1x18 number that doesn't fit in uint40.\\nerror PRBMath_SD1x18_ToUint40_Underflow(SD1x18 x);\\n\"\r\n    },\r\n    \"@prb/math/src/sd1x18/ValueType.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.19;\\n\\nimport \\\"./Casting.sol\\\" as Casting;\\n\\n/// @notice The signed 1.18-decimal fixed-point number representation, which can have up to 1 digit and up to 18\\n/// decimals. The values of this are bound by the minimum and the maximum values permitted by the underlying Solidity\\n/// type int64. This is useful when end users want to use int64 to save gas, e.g. with tight variable packing in contract\\n/// storage.\\ntype SD1x18 is int64;\\n\\n/*//////////////////////////////////////////////////////////////////////////\\n                                    CASTING\\n//////////////////////////////////////////////////////////////////////////*/\\n\\nusing {\\n    Casting.intoSD59x18,\\n    Casting.intoUD2x18,\\n    Casting.intoUD60x18,\\n    Casting.intoUint256,\\n    Casting.intoUint128,\\n    Casting.intoUint40,\\n    Casting.unwrap\\n} for SD1x18 global;\\n\"\r\n    },\r\n    \"@prb/math/src/sd59x18/Casting.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.19;\\n\\nimport \\\"./Errors.sol\\\" as CastingErrors;\\nimport { MAX_UINT128, MAX_UINT40 } from \\\"../Common.sol\\\";\\nimport { uMAX_SD1x18, uMIN_SD1x18 } from \\\"../sd1x18/Constants.sol\\\";\\nimport { SD1x18 } from \\\"../sd1x18/ValueType.sol\\\";\\nimport { uMAX_UD2x18 } from \\\"../ud2x18/Constants.sol\\\";\\nimport { UD2x18 } from \\\"../ud2x18/ValueType.sol\\\";\\nimport { UD60x18 } from \\\"../ud60x18/ValueType.sol\\\";\\nimport { SD59x18 } from \\\"./ValueType.sol\\\";\\n\\n/// @notice Casts an SD59x18 number into int256.\\n/// @dev This is basically a functional alias for {unwrap}.\\nfunction intoInt256(SD59x18 x) pure returns (int256 result) {\\n    result = SD59x18.unwrap(x);\\n}\\n\\n/// @notice Casts an SD59x18 number into SD1x18.\\n/// @dev Requirements:\\n/// - x must be greater than or equal to `uMIN_SD1x18`.\\n/// - x must be less than or equal to `uMAX_SD1x18`.\\nfunction intoSD1x18(SD59x18 x) pure returns (SD1x18 result) {\\n    int256 xInt = SD59x18.unwrap(x);\\n    if (xInt < uMIN_SD1x18) {\\n        revert CastingErrors.PRBMath_SD59x18_IntoSD1x18_Underflow(x);\\n    }\\n    if (xInt > uMAX_SD1x18) {\\n        revert CastingErrors.PRBMath_SD59x18_IntoSD1x18_Overflow(x);\\n    }\\n    result = SD1x18.wrap(int64(xInt));\\n}\\n\\n/// @notice Casts an SD59x18 number into UD2x18.\\n/// @dev Requirements:\\n/// - x must be positive.\\n/// - x must be less than or equal to `uMAX_UD2x18`.\\nfunction intoUD2x18(SD59x18 x) pure returns (UD2x18 result) {\\n    int256 xInt = SD59x18.unwrap(x);\\n    if (xInt < 0) {\\n        revert CastingErrors.PRBMath_SD59x18_IntoUD2x18_Underflow(x);\\n    }\\n    if (xInt > int256(uint256(uMAX_UD2x18))) {\\n        revert CastingErrors.PRBMath_SD59x18_IntoUD2x18_Overflow(x);\\n    }\\n    result = UD2x18.wrap(uint64(uint256(xInt)));\\n}\\n\\n/// @notice Casts an SD59x18 number into UD60x18.\\n/// @dev Requirements:\\n/// - x must be positive.\\nfunction intoUD60x18(SD59x18 x) pure returns (UD60x18 result) {\\n    int256 xInt = SD59x18.unwrap(x);\\n    if (xInt < 0) {\\n        revert CastingErrors.PRBMath_SD59x18_IntoUD60x18_Underflow(x);\\n    }\\n    result = UD60x18.wrap(uint256(xInt));\\n}\\n\\n/// @notice Casts an SD59x18 number into uint256.\\n/// @dev Requirements:\\n/// - x must be positive.\\nfunction intoUint256(SD59x18 x) pure returns (uint256 result) {\\n    int256 xInt = SD59x18.unwrap(x);\\n    if (xInt < 0) {\\n        revert CastingErrors.PRBMath_SD59x18_IntoUint256_Underflow(x);\\n    }\\n    result = uint256(xInt);\\n}\\n\\n/// @notice Casts an SD59x18 number into uint128.\\n/// @dev Requirements:\\n/// - x must be positive.\\n/// - x must be less than or equal to `uMAX_UINT128`.\\nfunction intoUint128(SD59x18 x) pure returns (uint128 result) {\\n    int256 xInt = SD59x18.unwrap(x);\\n    if (xInt < 0) {\\n        revert CastingErrors.PRBMath_SD59x18_IntoUint128_Underflow(x);\\n    }\\n    if (xInt > int256(uint256(MAX_UINT128))) {\\n        revert CastingErrors.PRBMath_SD59x18_IntoUint128_Overflow(x);\\n    }\\n    result = uint128(uint256(xInt));\\n}\\n\\n/// @notice Casts an SD59x18 number into uint40.\\n/// @dev Requirements:\\n/// - x must be positive.\\n/// - x must be less than or equal to `MAX_UINT40`.\\nfunction intoUint40(SD59x18 x) pure returns (uint40 result) {\\n    int256 xInt = SD59x18.unwrap(x);\\n    if (xInt < 0) {\\n        revert CastingErrors.PRBMath_SD59x18_IntoUint40_Underflow(x);\\n    }\\n    if (xInt > int256(uint256(MAX_UINT40))) {\\n        revert CastingErrors.PRBMath_SD59x18_IntoUint40_Overflow(x);\\n    }\\n    result = uint40(uint256(xInt));\\n}\\n\\n/// @notice Alias for {wrap}.\\nfunction sd(int256 x) pure returns (SD59x18 result) {\\n    result = SD59x18.wrap(x);\\n}\\n\\n/// @notice Alias for {wrap}.\\nfunction sd59x18(int256 x) pure returns (SD59x18 result) {\\n    result = SD59x18.wrap(x);\\n}\\n\\n/// @notice Unwraps an SD59x18 number into int256.\\nfunction unwrap(SD59x18 x) pure returns (int256 result) {\\n    result = SD59x18.unwrap(x);\\n}\\n\\n/// @notice Wraps an int256 number into SD59x18.\\nfunction wrap(int256 x) pure returns (SD59x18 result) {\\n    result = SD59x18.wrap(x);\\n}\\n\"\r\n    },\r\n    \"@prb/math/src/sd59x18/Constants.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.19;\\n\\nimport { SD59x18 } from \\\"./ValueType.sol\\\";\\n\\n// NOTICE: the \\\"u\\\" prefix stands for \\\"unwrapped\\\".\\n\\n/// @dev Euler's number as an SD59x18 number.\\nSD59x18 constant E = SD59x18.wrap(2_718281828459045235);\\n\\n/// @dev The maximum input permitted in {exp}.\\nint256 constant uEXP_MAX_INPUT = 133_084258667509499440;\\nSD59x18 constant EXP_MAX_INPUT = SD59x18.wrap(uEXP_MAX_INPUT);\\n\\n/// @dev The maximum input permitted in {exp2}.\\nint256 constant uEXP2_MAX_INPUT = 192e18 - 1;\\nSD59x18 constant EXP2_MAX_INPUT = SD59x18.wrap(uEXP2_MAX_INPUT);\\n\\n/// @dev Half the UNIT number.\\nint256 constant uHALF_UNIT = 0.5e18;\\nSD59x18 constant HALF_UNIT = SD59x18.wrap(uHALF_UNIT);\\n\\n/// @dev $log_2(10)$ as an SD59x18 number.\\nint256 constant uLOG2_10 = 3_321928094887362347;\\nSD59x18 constant LOG2_10 = SD59x18.wrap(uLOG2_10);\\n\\n/// @dev $log_2(e)$ as an SD59x18 number.\\nint256 constant uLOG2_E = 1_442695040888963407;\\nSD59x18 constant LOG2_E = SD59x18.wrap(uLOG2_E);\\n\\n/// @dev The maximum value an SD59x18 number can have.\\nint256 constant uMAX_SD59x18 = 57896044618658097711785492504343953926634992332820282019728_792003956564819967;\\nSD59x18 constant MAX_SD59x18 = SD59x18.wrap(uMAX_SD59x18);\\n\\n/// @dev The maximum whole value an SD59x18 number can have.\\nint256 constant uMAX_WHOLE_SD59x18 = 57896044618658097711785492504343953926634992332820282019728_000000000000000000;\\nSD59x18 constant MAX_WHOLE_SD59x18 = SD59x18.wrap(uMAX_WHOLE_SD59x18);\\n\\n/// @dev The minimum value an SD59x18 number can have.\\nint256 constant uMIN_SD59x18 = -57896044618658097711785492504343953926634992332820282019728_792003956564819968;\\nSD59x18 constant MIN_SD59x18 = SD59x18.wrap(uMIN_SD59x18);\\n\\n/// @dev The minimum whole value an SD59x18 number can have.\\nint256 constant uMIN_WHOLE_SD59x18 = -57896044618658097711785492504343953926634992332820282019728_000000000000000000;\\nSD59x18 constant MIN_WHOLE_SD59x18 = SD59x18.wrap(uMIN_WHOLE_SD59x18);\\n\\n/// @dev PI as an SD59x18 number.\\nSD59x18 constant PI = SD59x18.wrap(3_141592653589793238);\\n\\n/// @dev The unit number, which gives the decimal precision of SD59x18.\\nint256 constant uUNIT = 1e18;\\nSD59x18 constant UNIT = SD59x18.wrap(1e18);\\n\\n/// @dev The unit number squared.\\nint256 constant uUNIT_SQUARED = 1e36;\\nSD59x18 constant UNIT_SQUARED = SD59x18.wrap(uUNIT_SQUARED);\\n\\n/// @dev Zero as an SD59x18 number.\\nSD59x18 constant ZERO = SD59x18.wrap(0);\\n\"\r\n    },\r\n    \"@prb/math/src/sd59x18/Errors.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.19;\\n\\nimport { SD59x18 } from \\\"./ValueType.sol\\\";\\n\\n/// @notice Thrown when taking the absolute value of `MIN_SD59x18`.\\nerror PRBMath_SD59x18_Abs_MinSD59x18();\\n\\n/// @notice Thrown when ceiling a number overflows SD59x18.\\nerror PRBMath_SD59x18_Ceil_Overflow(SD59x18 x);\\n\\n/// @notice Thrown when converting a basic integer to the fixed-point format overflows SD59x18.\\nerror PRBMath_SD59x18_Convert_Overflow(int256 x);\\n\\n/// @notice Thrown when converting a basic integer to the fixed-point format underflows SD59x18.\\nerror PRBMath_SD59x18_Convert_Underflow(int256 x);\\n\\n/// @notice Thrown when dividing two numbers and one of them is `MIN_SD59x18`.\\nerror PRBMath_SD59x18_Div_InputTooSmall();\\n\\n/// @notice Thrown when dividing two numbers and one of the intermediary unsigned results overflows SD59x18.\\nerror PRBMath_SD59x18_Div_Overflow(SD59x18 x, SD59x18 y);\\n\\n/// @notice Thrown when taking the natural exponent of a base greater than 133_084258667509499441.\\nerror PRBMath_SD59x18_Exp_InputTooBig(SD59x18 x);\\n\\n/// @notice Thrown when taking the binary exponent of a base greater than 192e18.\\nerror PRBMath_SD59x18_Exp2_InputTooBig(SD59x18 x);\\n\\n/// @notice Thrown when flooring a number underflows SD59x18.\\nerror PRBMath_SD59x18_Floor_Underflow(SD59x18 x);\\n\\n/// @notice Thrown when taking the geometric mean of two numbers and their product is negative.\\nerror PRBMath_SD59x18_Gm_NegativeProduct(SD59x18 x, SD59x18 y);\\n\\n/// @notice Thrown when taking the geometric mean of two numbers and multiplying them overflows SD59x18.\\nerror PRBMath_SD59x18_Gm_Overflow(SD59x18 x, SD59x18 y);\\n\\n/// @notice Thrown when trying to cast a UD60x18 number that doesn't fit in SD1x18.\\nerror PRBMath_SD59x18_IntoSD1x18_Overflow(SD59x18 x);\\n\\n/// @notice Thrown when trying to cast a UD60x18 number that doesn't fit in SD1x18.\\nerror PRBMath_SD59x18_IntoSD1x18_Underflow(SD59x18 x);\\n\\n/// @notice Thrown when trying to cast a UD60x18 number that doesn't fit in UD2x18.\\nerror PRBMath_SD59x18_IntoUD2x18_Overflow(SD59x18 x);\\n\\n/// @notice Thrown when trying to cast a UD60x18 number that doesn't fit in UD2x18.\\nerror PRBMath_SD59x18_IntoUD2x18_Underflow(SD59x18 x);\\n\\n/// @notice Thrown when trying to cast a UD60x18 number that doesn't fit in UD60x18.\\nerror PRBMath_SD59x18_IntoUD60x18_Underflow(SD59x18 x);\\n\\n/// @notice Thrown when trying to cast a UD60x18 number that doesn't fit in uint128.\\nerror PRBMath_SD59x18_IntoUint128_Overflow(SD59x18 x);\\n\\n/// @notice Thrown when trying to cast a UD60x18 number that doesn't fit in uint128.\\nerror PRBMath_SD59x18_IntoUint128_Underflow(SD59x18 x);\\n\\n/// @notice Thrown when trying to cast a UD60x18 number that doesn't fit in uint256.\\nerror PRBMath_SD59x18_IntoUint256_Underflow(SD59x18 x);\\n\\n/// @notice Thrown when trying to cast a UD60x18 number that doesn't fit in uint40.\\nerror PRBMath_SD59x18_IntoUint40_Overflow(SD59x18 x);\\n\\n/// @notice Thrown when trying to cast a UD60x18 number that doesn't fit in uint40.\\nerror PRBMath_SD59x18_IntoUint40_Underflow(SD59x18 x);\\n\\n/// @notice Thrown when taking the logarithm of a number less than or equal to zero.\\nerror PRBMath_SD59x18_Log_InputTooSmall(SD59x18 x);\\n\\n/// @notice Thrown when multiplying two numbers and one of the inputs is `MIN_SD59x18`.\\nerror PRBMath_SD59x18_Mul_InputTooSmall();\\n\\n/// @notice Thrown when multiplying two numbers and the intermediary absolute result overflows SD59x18.\\nerror PRBMath_SD59x18_Mul_Overflow(SD59x18 x, SD59x18 y);\\n\\n/// @notice Thrown when raising a number to a power and hte intermediary absolute result overflows SD59x18.\\nerror PRBMath_SD59x18_Powu_Overflow(SD59x18 x, uint256 y);\\n\\n/// @notice Thrown when taking the square root of a negative number.\\nerror PRBMath_SD59x18_Sqrt_NegativeInput(SD59x18 x);\\n\\n/// @notice Thrown when the calculating the square root overflows SD59x18.\\nerror PRBMath_SD59x18_Sqrt_Overflow(SD59x18 x);\\n\"\r\n    },\r\n    \"@prb/math/src/sd59x18/Helpers.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.19;\\n\\nimport { wrap } from \\\"./Casting.sol\\\";\\nimport { SD59x18 } from \\\"./ValueType.sol\\\";\\n\\n/// @notice Implements the checked addition operation (+) in the SD59x18 type.\\nfunction add(SD59x18 x, SD59x18 y) pure returns (SD59x18 result) {\\n    return wrap(x.unwrap() + y.unwrap());\\n}\\n\\n/// @notice Implements the AND (&) bitwise operation in the SD59x18 type.\\nfunction and(SD59x18 x, int256 bits) pure returns (SD59x18 result) {\\n    return wrap(x.unwrap() & bits);\\n}\\n\\n/// @notice Implements the AND (&) bitwise operation in the SD59x18 type.\\nfunction and2(SD59x18 x, SD59x18 y) pure returns (SD59x18 result) {\\n    return wrap(x.unwrap() & y.unwrap());\\n}\\n\\n/// @notice Implements the equal (=) operation in the SD59x18 type.\\nfunction eq(SD59x18 x, SD59x18 y) pure returns (bool result) {\\n    result = x.unwrap() == y.unwrap();\\n}\\n\\n/// @notice Implements the greater than operation (>) in the SD59x18 type.\\nfunction gt(SD59x18 x, SD59x18 y) pure returns (bool result) {\\n    result = x.unwrap() > y.unwrap();\\n}\\n\\n/// @notice Implements the greater than or equal to operation (>=) in the SD59x18 type.\\nfunction gte(SD59x18 x, SD59x18 y) pure returns (bool result) {\\n    result = x.unwrap() >= y.unwrap();\\n}\\n\\n/// @notice Implements a zero comparison check function in the SD59x18 type.\\nfunction isZero(SD59x18 x) pure returns (bool result) {\\n    result = x.unwrap() == 0;\\n}\\n\\n/// @notice Implements the left shift operation (<<) in the SD59x18 type.\\nfunction lshift(SD59x18 x, uint256 bits) pure returns (SD59x18 result) {\\n    result = wrap(x.unwrap() << bits);\\n}\\n\\n/// @notice Implements the lower than operation (<) in the SD59x18 type.\\nfunction lt(SD59x18 x, SD59x18 y) pure returns (bool result) {\\n    result = x.unwrap() < y.unwrap();\\n}\\n\\n/// @notice Implements the lower than or equal to operation (<=) in the SD59x18 type.\\nfunction lte(SD59x18 x, SD59x18 y) pure returns (bool result) {\\n    result = x.unwrap() <= y.unwrap();\\n}\\n\\n/// @notice Implements the unchecked modulo operation (%) in the SD59x18 type.\\nfunction mod(SD59x18 x, SD59x18 y) pure returns (SD59x18 result) {\\n    result = wrap(x.unwrap() % y.unwrap());\\n}\\n\\n/// @notice Implements the not equal operation (!=) in the SD59x18 type.\\nfunction neq(SD59x18 x, SD59x18 y) pure returns (bool result) {\\n    result = x.unwrap() != y.unwrap();\\n}\\n\\n/// @notice Implements the NOT (~) bitwise operation in the SD59x18 type.\\nfunction not(SD59x18 x) pure returns (SD59x18 result) {\\n    result = wrap(~x.unwrap());\\n}\\n\\n/// @notice Implements the OR (|) bitwise operation in the SD59x18 type.\\nfunction or(SD59x18 x, SD59x18 y) pure returns (SD59x18 result) {\\n    result = wrap(x.unwrap() | y.unwrap());\\n}\\n\\n/// @notice Implements the right shift operation (>>) in the SD59x18 type.\\nfunction rshift(SD59x18 x, uint256 bits) pure returns (SD59x18 result) {\\n    result = wrap(x.unwrap() >> bits);\\n}\\n\\n/// @notice Implements the checked subtraction operation (-) in the SD59x18 type.\\nfunction sub(SD59x18 x, SD59x18 y) pure returns (SD59x18 result) {\\n    result = wrap(x.unwrap() - y.unwrap());\\n}\\n\\n/// @notice Implements the checked unary minus operation (-) in the SD59x18 type.\\nfunction unary(SD59x18 x) pure returns (SD59x18 result) {\\n    result = wrap(-x.unwrap());\\n}\\n\\n/// @notice Implements the unchecked addition operation (+) in the SD59x18 type.\\nfunction uncheckedAdd(SD59x18 x, SD59x18 y) pure returns (SD59x18 result) {\\n    unchecked {\\n        result = wrap(x.unwrap() + y.unwrap());\\n    }\\n}\\n\\n/// @notice Implements the unchecked subtraction operation (-) in the SD59x18 type.\\nfunction uncheckedSub(SD59x18 x, SD59x18 y) pure returns (SD59x18 result) {\\n    unchecked {\\n        result = wrap(x.unwrap() - y.unwrap());\\n    }\\n}\\n\\n/// @notice Implements the unchecked unary minus operation (-) in the SD59x18 type.\\nfunction uncheckedUnary(SD59x18 x) pure returns (SD59x18 result) {\\n    unchecked {\\n        result = wrap(-x.unwrap());\\n    }\\n}\\n\\n/// @notice Implements the XOR (^) bitwise operation in the SD59x18 type.\\nfunction xor(SD59x18 x, SD59x18 y) pure returns (SD59x18 result) {\\n    result = wrap(x.unwrap() ^ y.unwrap());\\n}\\n\"\r\n    },\r\n    \"@prb/math/src/sd59x18/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.19;\\n\\nimport \\\"../Common.sol\\\" as Common;\\nimport \\\"./Errors.sol\\\" as Errors;\\nimport {\\n    uEXP_MAX_INPUT,\\n    uEXP2_MAX_INPUT,\\n    uHALF_UNIT,\\n    uLOG2_10,\\n    uLOG2_E,\\n    uMAX_SD59x18,\\n    uMAX_WHOLE_SD59x18,\\n    uMIN_SD59x18,\\n    uMIN_WHOLE_SD59x18,\\n    UNIT,\\n    uUNIT,\\n    uUNIT_SQUARED,\\n    ZERO\\n} from \\\"./Constants.sol\\\";\\nimport { wrap } from \\\"./Helpers.sol\\\";\\nimport { SD59x18 } from \\\"./ValueType.sol\\\";\\n\\n/// @notice Calculates the absolute value of x.\\n///\\n/// @dev Requirements:\\n/// - x must be greater than `MIN_SD59x18`.\\n///\\n/// @param x The SD59x18 number for which to calculate the absolute value.\\n/// @param result The absolute value of x as an SD59x18 number.\\n/// @custom:smtchecker abstract-function-nondet\\nfunction abs(SD59x18 x) pure returns (SD59x18 result) {\\n    int256 xInt = x.unwrap();\\n    if (xInt == uMIN_SD59x18) {\\n        revert Errors.PRBMath_SD59x18_Abs_MinSD59x18();\\n    }\\n    result = xInt < 0 ? wrap(-xInt) : x;\\n}\\n\\n/// @notice Calculates the arithmetic average of x and y.\\n///\\n/// @dev Notes:\\n/// - The result is rounded toward zero.\\n///\\n/// @param x The first operand as an SD59x18 number.\\n/// @param y The second operand as an SD59x18 number.\\n/// @return result The arithmetic average as an SD59x18 number.\\n/// @custom:smtchecker abstract-function-nondet\\nfunction avg(SD59x18 x, SD59x18 y) pure returns (SD59x18 result) {\\n    int256 xInt = x.unwrap();\\n    int256 yInt = y.unwrap();\\n\\n    unchecked {\\n        // This operation is equivalent to `x / 2 +  y / 2`, and it can never overflow.\\n        int256 sum = (xInt >> 1) + (yInt >> 1);\\n\\n        if (sum < 0) {\\n            // If at least one of x and y is odd, add 1 to the result, because shifting negative numbers to the right\\n            // rounds toward negative infinity. The right part is equivalent to `sum + (x % 2 == 1 || y % 2 == 1)`.\\n            assembly (\\\"memory-safe\\\") {\\n                result := add(sum, and(or(xInt, yInt), 1))\\n            }\\n        } else {\\n            // Add 1 if both x and y are odd to account for the double 0.5 remainder truncated after shifting.\\n            result = wrap(sum + (xInt & yInt & 1));\\n        }\\n    }\\n}\\n\\n/// @notice Yields the smallest whole number greater than or equal to x.\\n///\\n/// @dev Optimized for fractional value inputs, because every whole value has (1e18 - 1) fractional counterparts.\\n/// See https://en.wikipedia.org/wiki/Floor_and_ceiling_functions.\\n///\\n/// Requirements:\\n/// - x must be less than or equal to `MAX_WHOLE_SD59x18`.\\n///\\n/// @param x The SD59x18 number to ceil.\\n/// @param result The smallest whole number greater than or equal to x, as an SD59x18 number.\\n/// @custom:smtchecker abstract-function-nondet\\nfunction ceil(SD59x18 x) pure returns (SD59x18 result) {\\n    int256 xInt = x.unwrap();\\n    if (xInt > uMAX_WHOLE_SD59x18) {\\n        revert Errors.PRBMath_SD59x18_Ceil_Overflow(x);\\n    }\\n\\n    int256 remainder = xInt % uUNIT;\\n    if (remainder == 0) {\\n        result = x;\\n    } else {\\n        unchecked {\\n            // Solidity uses C fmod style, which returns a modulus with the same sign as x.\\n            int256 resultInt = xInt - remainder;\\n            if (xInt > 0) {\\n                resultInt += uUNIT;\\n            }\\n            result = wrap(resultInt);\\n        }\\n    }\\n}\\n\\n/// @notice Divides two SD59x18 numbers, returning a new SD59x18 number.\\n///\\n/// @dev This is an extension of {Common.mulDiv} for signed numbers, which works by computing the signs and the absolute\\n/// values separately.\\n///\\n/// Notes:\\n/// - Refer to the notes in {Common.mulDiv}.\\n/// - The result is rounded toward zero.\\n///\\n/// Requirements:\\n/// - Refer to the requirements in {Common.mulDiv}.\\n/// - None of the inputs can be `MIN_SD59x18`.\\n/// - The denominator must not be zero.\\n/// - The result must fit in SD59x18.\\n///\\n/// @param x The numerator as an SD59x18 number.\\n/// @param y The denominator as an SD59x18 number.\\n/// @param result The quotient as an SD59x18 number.\\n/// @custom:smtchecker abstract-function-nondet\\nfunction div(SD59x18 x, SD59x18 y) pure returns (SD59x18 result) {\\n    int256 xInt = x.unwrap();\\n    int256 yInt = y.unwrap();\\n    if (xInt == uMIN_SD59x18 || yInt == uMIN_SD59x18) {\\n        revert Errors.PRBMath_SD59x18_Div_InputTooSmall();\\n    }\\n\\n    // Get hold of the absolute values of x and y.\\n    uint256 xAbs;\\n    uint256 yAbs;\\n    unchecked {\\n        xAbs = xInt < 0 ? uint256(-xInt) : uint256(xInt);\\n        yAbs = yInt < 0 ? uint256(-yInt) : uint256(yInt);\\n    }\\n\\n    // Compute the absolute value (x*UNIT\u00f7y). The resulting value must fit in SD59x18.\\n    uint256 resultAbs = Common.mulDiv(xAbs, uint256(uUNIT), yAbs);\\n    if (resultAbs > uint256(uMAX_SD59x18)) {\\n        revert Errors.PRBMath_SD59x18_Div_Overflow(x, y);\\n    }\\n\\n    // Check if x and y have the same sign using two's complement representation. The left-most bit represents the sign (1 for\\n    // negative, 0 for positive or zero).\\n    bool sameSign = (xInt ^ yInt) > -1;\\n\\n    // If the inputs have the same sign, the result should be positive. Otherwise, it should be negative.\\n    unchecked {\\n        result = wrap(sameSign ? int256(resultAbs) : -int256(resultAbs));\\n    }\\n}\\n\\n/// @notice Calculates the natural exponent of x using the following formula:\\n///\\n/// $$\\n/// e^x = 2^{x * log_2{e}}\\n/// $$\\n///\\n/// @dev Notes:\\n/// - Refer to the notes in {exp2}.\\n///\\n/// Requirements:\\n/// - Refer to the requirements in {exp2}.\\n/// - x must be less than 133_084258667509499441.\\n///\\n/// @param x The exponent as an SD59x18 number.\\n/// @return result The result as an SD59x18 number.\\n/// @custom:smtchecker abstract-function-nondet\\nfunction exp(SD59x18 x) pure returns (SD59x18 result) {\\n    int256 xInt = x.unwrap();\\n\\n    // This check prevents values greater than 192e18 from being passed to {exp2}.\\n    if (xInt > uEXP_MAX_INPUT) {\\n        revert Errors.PRBMath_SD59x18_Exp_InputTooBig(x);\\n    }\\n\\n    unchecked {\\n        // Inline the fixed-point multiplication to save gas.\\n        int256 doubleUnitProduct = xInt * uLOG2_E;\\n        result = exp2(wrap(doubleUnitProduct / uUNIT));\\n    }\\n}\\n\\n/// @notice Calculates the binary exponent of x using the binary fraction method using the following formula:\\n///\\n/// $$\\n/// 2^{-x} = \\\\frac{1}{2^x}\\n/// $$\\n///\\n/// @dev See https://ethereum.stackexchange.com/q/79903/24693.\\n///\\n/// Notes:\\n/// - If x is less than -59_794705707972522261, the result is zero.\\n///\\n/// Requirements:\\n/// - x must be less than 192e18.\\n/// - The result must fit in SD59x18.\\n///\\n/// @param x The exponent as an SD59x18 number.\\n/// @return result The result as an SD59x18 number.\\n/// @custom:smtchecker abstract-function-nondet\\nfunction exp2(SD59x18 x) pure returns (SD59x18 result) {\\n    int256 xInt = x.unwrap();\\n    if (xInt < 0) {\\n        // The inverse of any number less than this is truncated to zero.\\n        if (xInt < -59_794705707972522261) {\\n            return ZERO;\\n        }\\n\\n        unchecked {\\n            // Inline the fixed-point inversion to save gas.\\n            result = wrap(uUNIT_SQUARED / exp2(wrap(-xInt)).unwrap());\\n        }\\n    } else {\\n        // Numbers greater than or equal to 192e18 don't fit in the 192.64-bit format.\\n        if (xInt > uEXP2_MAX_INPUT) {\\n            revert Errors.PRBMath_SD59x18_Exp2_InputTooBig(x);\\n        }\\n\\n        unchecked {\\n            // Convert x to the 192.64-bit fixed-point format.\\n            uint256 x_192x64 = uint256((xInt << 64) / uUNIT);\\n\\n            // It is safe to cast the result to int256 due to the checks above.\\n            result = wrap(int256(Common.exp2(x_192x64)));\\n        }\\n    }\\n}\\n\\n/// @notice Yields the greatest whole number less than or equal to x.\\n///\\n/// @dev Optimized for fractional value inputs, because for every whole value there are (1e18 - 1) fractional\\n/// counterparts. See https://en.wikipedia.org/wiki/Floor_and_ceiling_functions.\\n///\\n/// Requirements:\\n/// - x must be greater than or equal to `MIN_WHOLE_SD59x18`.\\n///\\n/// @param x The SD59x18 number to floor.\\n/// @param result The greatest whole number less than or equal to x, as an SD59x18 number.\\n/// @custom:smtchecker abstract-function-nondet\\nfunction floor(SD59x18 x) pure returns (SD59x18 result) {\\n    int256 xInt = x.unwrap();\\n    if (xInt < uMIN_WHOLE_SD59x18) {\\n        revert Errors.PRBMath_SD59x18_Floor_Underflow(x);\\n    }\\n\\n    int256 remainder = xInt % uUNIT;\\n    if (remainder == 0) {\\n        result = x;\\n    } else {\\n        unchecked {\\n            // Solidity uses C fmod style, which returns a modulus with the same sign as x.\\n            int256 resultInt = xInt - remainder;\\n            if (xInt < 0) {\\n                resultInt -= uUNIT;\\n            }\\n            result = wrap(resultInt);\\n        }\\n    }\\n}\\n\\n/// @notice Yields the excess beyond the floor of x for positive numbers and the part of the number to the right.\\n/// of the radix point for negative numbers.\\n/// @dev Based on the odd function definition. https://en.wikipedia.org/wiki/Fractional_part\\n/// @param x The SD59x18 number to get the fractional part of.\\n/// @param result The fractional part of x as an SD59x18 number.\\nfunction frac(SD59x18 x) pure returns (SD59x18 result) {\\n    result = wrap(x.unwrap() % uUNIT);\\n}\\n\\n/// @notice Calculates the geometric mean of x and y, i.e. $\\\\sqrt{x * y}$.\\n///\\n/// @dev Notes:\\n/// - The result is rounded toward zero.\\n///\\n/// Requirements:\\n/// - x * y must fit in SD59x18.\\n/// - x * y must not be negative, since complex numbers are not supported.\\n///\\n/// @param x The first operand as an SD59x18 number.\\n/// @param y The second operand as an SD59x18 number.\\n/// @return result The result as an SD59x18 number.\\n/// @custom:smtchecker abstract-function-nondet\\nfunction gm(SD59x18 x, SD59x18 y) pure returns (SD59x18 result) {\\n    int256 xInt = x.unwrap();\\n    int256 yInt = y.unwrap();\\n    if (xInt == 0 || yInt == 0) {\\n        return ZERO;\\n    }\\n\\n    unchecked {\\n        // Equivalent to `xy / x != y`. Checking for overflow this way is faster than letting Solidity do it.\\n        int256 xyInt = xInt * yInt;\\n        if (xyInt / xInt != yInt) {\\n            revert Errors.PRBMath_SD59x18_Gm_Overflow(x, y);\\n        }\\n\\n        // The product must not be negative, since complex numbers are not supported.\\n        if (xyInt < 0) {\\n            revert Errors.PRBMath_SD59x18_Gm_NegativeProduct(x, y);\\n        }\\n\\n        // We don't need to multiply the result by `UNIT` here because the x*y product picked up a factor of `UNIT`\\n        // during multiplication. See the comments in {Common.sqrt}.\\n        uint256 resultUint = Common.sqrt(uint256(xyInt));\\n        result = wrap(int256(resultUint));\\n    }\\n}\\n\\n/// @notice Calculates the inverse of x.\\n///\\n/// @dev Notes:\\n/// - The result is rounded toward zero.\\n///\\n/// Requirements:\\n/// - x must not be zero.\\n///\\n/// @param x The SD59x18 number for which to calculate the inverse.\\n/// @return result The inverse as an SD59x18 number.\\n/// @custom:smtchecker abstract-function-nondet\\nfunction inv(SD59x18 x) pure returns (SD59x18 result) {\\n    result = wrap(uUNIT_SQUARED / x.unwrap());\\n}\\n\\n/// @notice Calculates the natural logarithm of x using the following formula:\\n///\\n/// $$\\n/// ln{x} = log_2{x} / log_2{e}\\n/// $$\\n///\\n/// @dev Notes:\\n/// - Refer to the notes in {log2}.\\n/// - The precision isn't sufficiently fine-grained to return exactly `UNIT` when the input is `E`.\\n///\\n/// Requirements:\\n/// - Refer to the requirements in {log2}.\\n///\\n/// @param x The SD59x18 number for which to calculate the natural logarithm.\\n/// @return result The natural logarithm as an SD59x18 number.\\n/// @custom:smtchecker abstract-function-nondet\\nfunction ln(SD59x18 x) pure returns (SD59x18 result) {\\n    // Inline the fixed-point multiplication to save gas. This is overflow-safe because the maximum value that\\n    // {log2} can return is ~195_205294292027477728.\\n    result = wrap(log2(x).unwrap() * uUNIT / uLOG2_E);\\n}\\n\\n/// @notice Calculates the common logarithm of x using the following formula:\\n///\\n/// $$\\n/// log_{10}{x} = log_2{x} / log_2{10}\\n/// $$\\n///\\n/// However, if x is an exact power of ten, a hard coded value is returned.\\n///\\n/// @dev Notes:\\n/// - Refer to the notes in {log2}.\\n///\\n/// Requirements:\\n/// - Refer to the requirements in {log2}.\\n///\\n/// @param x The SD59x18 number for which to calculate the common logarithm.\\n/// @return result The common logarithm as an SD59x18 number.\\n/// @custom:smtchecker abstract-function-nondet\\nfunction log10(SD59x18 x) pure returns (SD59x18 result) {\\n    int256 xInt = x.unwrap();\\n    if (xInt < 0) {\\n        revert Errors.PRBMath_SD59x18_Log_InputTooSmall(x);\\n    }\\n\\n    // Note that the `mul` in this block is the standard multiplication operation, not {SD59x18.mul}.\\n    // prettier-ignore\\n    assembly (\\\"memory-safe\\\") {\\n        switch x\\n        case 1 { result := mul(uUNIT, sub(0, 18)) }\\n        case 10 { result := mul(uUNIT, sub(1, 18)) }\\n        case 100 { result := mul(uUNIT, sub(2, 18)) }\\n        case 1000 { result := mul(uUNIT, sub(3, 18)) }\\n        case 10000 { result := mul(uUNIT, sub(4, 18)) }\\n        case 100000 { result := mul(uUNIT, sub(5, 18)) }\\n        case 1000000 { result := mul(uUNIT, sub(6, 18)) }\\n        case 10000000 { result := mul(uUNIT, sub(7, 18)) }\\n        case 100000000 { result := mul(uUNIT, sub(8, 18)) }\\n        case 1000000000 { result := mul(uUNIT, sub(9, 18)) }\\n        case 10000000000 { result := mul(uUNIT, sub(10, 18)) }\\n        case 100000000000 { result := mul(uUNIT, sub(11, 18)) }\\n        case 1000000000000 { result := mul(uUNIT, sub(12, 18)) }\\n        case 10000000000000 { result := mul(uUNIT, sub(13, 18)) }\\n        case 100000000000000 { result := mul(uUNIT, sub(14, 18)) }\\n        case 1000000000000000 { result := mul(uUNIT, sub(15, 18)) }\\n        case 10000000000000000 { result := mul(uUNIT, sub(16, 18)) }\\n        case 100000000000000000 { result := mul(uUNIT, sub(17, 18)) }\\n        case 1000000000000000000 { result := 0 }\\n        case 10000000000000000000 { result := uUNIT }\\n        case 100000000000000000000 { result := mul(uUNIT, 2) }\\n        case 1000000000000000000000 { result := mul(uUNIT, 3) }\\n        case 10000000000000000000000 { result := mul(uUNIT, 4) }\\n        case 100000000000000000000000 { result := mul(uUNIT, 5) }\\n        case 1000000000000000000000000 { result := mul(uUNIT, 6) }\\n        case 10000000000000000000000000 { result := mul(uUNIT, 7) }\\n        case 100000000000000000000000000 { result := mul(uUNIT, 8) }\\n        case 1000000000000000000000000000 { result := mul(uUNIT, 9) }\\n        case 10000000000000000000000000000 { result := mul(uUNIT, 10) }\\n        case 100000000000000000000000000000 { result := mul(uUNIT, 11) }\\n        case 1000000000000000000000000000000 { result := mul(uUNIT, 12) }\\n        case 10000000000000000000000000000000 { result := mul(uUNIT, 13) }\\n        case 100000000000000000000000000000000 { result := mul(uUNIT, 14) }\\n        case 1000000000000000000000000000000000 { result := mul(uUNIT, 15) }\\n        case 10000000000000000000000000000000000 { result := mul(uUNIT, 16) }\\n        case 100000000000000000000000000000000000 { result := mul(uUNIT, 17) }\\n        case 1000000000000000000000000000000000000 { result := mul(uUNIT, 18) }\\n        case 10000000000000000000000000000000000000 { result := mul(uUNIT, 19) }\\n        case 100000000000000000000000000000000000000 { result := mul(uUNIT, 20) }\\n        case 1000000000000000000000000000000000000000 { result := mul(uUNIT, 21) }\\n        case 10000000000000000000000000000000000000000 { result := mul(uUNIT, 22) }\\n        case 100000000000000000000000000000000000000000 { result := mul(uUNIT, 23) }\\n        case 1000000000000000000000000000000000000000000 { result := mul(uUNIT, 24) }\\n        case 10000000000000000000000000000000000000000000 { result := mul(uUNIT, 25) }\\n        case 100000000000000000000000000000000000000000000 { result := mul(uUNIT, 26) }\\n        case 1000000000000000000000000000000000000000000000 { result := mul(uUNIT, 27) }\\n        case 10000000000000000000000000000000000000000000000 { result := mul(uUNIT, 28) }\\n        case 100000000000000000000000000000000000000000000000 { result := mul(uUNIT, 29) }\\n        case 1000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 30) }\\n        case 10000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 31) }\\n        case 100000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 32) }\\n        case 1000000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 33) }\\n        case 10000000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 34) }\\n        case 100000000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 35) }\\n        case 1000000000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 36) }\\n        case 10000000000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 37) }\\n        case 100000000000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 38) }\\n        case 1000000000000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 39) }\\n        case 10000000000000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 40) }\\n        case 100000000000000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 41) }\\n        case 1000000000000000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 42) }\\n        case 10000000000000000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 43) }\\n        case 100000000000000000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 44) }\\n        case 1000000000000000000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 45) }\\n        case 10000000000000000000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 46) }\\n        case 100000000000000000000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 47) }\\n        case 1000000000000000000000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 48) }\\n        case 10000000000000000000000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 49) }\\n        case 100000000000000000000000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 50) }\\n        case 1000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 51) }\\n        case 10000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 52) }\\n        case 100000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 53) }\\n        case 1000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 54) }\\n        case 10000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 55) }\\n        case 100000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 56) }\\n        case 1000000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 57) }\\n        case 10000000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 58) }\\n        default { result := uMAX_SD59x18 }\\n    }\\n\\n    if (result.unwrap() == uMAX_SD59x18) {\\n        unchecked {\\n            // Inline the fixed-point division to save gas.\\n            result = wrap(log2(x).unwrap() * uUNIT / uLOG2_10);\\n        }\\n    }\\n}\\n\\n/// @notice Calculates the binary logarithm of x using the iterative approximation algorithm:\\n///\\n/// $$\\n/// log_2{x} = n + log_2{y}, \\\\text{ where } y = x*2^{-n}, \\\\ y \\\\in [1, 2)\\n/// $$\\n///\\n/// For $0 \\\\leq x \\\\lt 1$, the input is inverted:\\n///\\n/// $$\\n/// log_2{x} = -log_2{\\\\frac{1}{x}}\\n/// $$\\n///\\n/// @dev See https://en.wikipedia.org/wiki/Binary_logarithm#Iterative_approximation.\\n///\\n/// Notes:\\n/// - Due to the lossy precision of the iterative approximation, the results are not perfectly accurate to the last decimal.\\n///\\n/// Requirements:\\n/// - x must be greater than zero.\\n///\\n/// @param x The SD59x18 number for which to calculate the binary logarithm.\\n/// @return result The binary logarithm as an SD59x18 number.\\n/// @custom:smtchecker abstract-function-nondet\\nfunction log2(SD59x18 x) pure returns (SD59x18 result) {\\n    int256 xInt = x.unwrap();\\n    if (xInt <= 0) {\\n        revert Errors.PRBMath_SD59x18_Log_InputTooSmall(x);\\n    }\\n\\n    unchecked {\\n        int256 sign;\\n        if (xInt >= uUNIT) {\\n            sign = 1;\\n        } else {\\n            sign = -1;\\n            // Inline the fixed-point inversion to save gas.\\n            xInt = uUNIT_SQUARED / xInt;\\n        }\\n\\n        // Calculate the integer part of the logarithm.\\n        uint256 n = Common.msb(uint256(xInt / uUNIT));\\n\\n        // This is the integer part of the logarithm as an SD59x18 number. The operation can't overflow\\n        // because n is at most 255, `UNIT` is 1e18, and the sign is either 1 or -1.\\n        int256 resultInt = int256(n) * uUNIT;\\n\\n        // Calculate $y = x * 2^{-n}$.\\n        int256 y = xInt >> n;\\n\\n        // If y is the unit number, the fractional part is zero.\\n        if (y == uUNIT) {\\n            return wrap(resultInt * sign);\\n        }\\n\\n        // Calculate the fractional part via the iterative approximation.\\n        // The `delta >>= 1` part is equivalent to `delta /= 2`, but shifting bits is more gas efficient.\\n        int256 DOUBLE_UNIT = 2e18;\\n        for (int256 delta = uHALF_UNIT; delta > 0; delta >>= 1) {\\n            y = (y * y) / uUNIT;\\n\\n            // Is y^2 >= 2e18 and so in the range [2e18, 4e18)?\\n            if (y >= DOUBLE_UNIT) {\\n                // Add the 2^{-m} factor to the logarithm.\\n                resultInt = resultInt + delta;\\n\\n                // Halve y, which corresponds to z/2 in the Wikipedia article.\\n                y >>= 1;\\n            }\\n        }\\n        resultInt *= sign;\\n        result = wrap(resultInt);\\n    }\\n}\\n\\n/// @notice Multiplies two SD59x18 numbers together, returning a new SD59x18 number.\\n///\\n/// @dev Notes:\\n/// - Refer to the notes in {Common.mulDiv18}.\\n///\\n/// Requirements:\\n/// - Refer to the requirements in {Common.mulDiv18}.\\n/// - None of the inputs can be `MIN_SD59x18`.\\n/// - The result must fit in SD59x18.\\n///\\n/// @param x The multiplicand as an SD59x18 number.\\n/// @param y The multiplier as an SD59x18 number.\\n/// @return result The product as an SD59x18 number.\\n/// @custom:smtchecker abstract-function-nondet\\nfunction mul(SD59x18 x, SD59x18 y) pure returns (SD59x18 result) {\\n    int256 xInt = x.unwrap();\\n    int256 yInt = y.unwrap();\\n    if (xInt == uMIN_SD59x18 || yInt == uMIN_SD59x18) {\\n        revert Errors.PRBMath_SD59x18_Mul_InputTooSmall();\\n    }\\n\\n    // Get hold of the absolute values of x and y.\\n    uint256 xAbs;\\n    uint256 yAbs;\\n    unchecked {\\n        xAbs = xInt < 0 ? uint256(-xInt) : uint256(xInt);\\n        yAbs = yInt < 0 ? uint256(-yInt) : uint256(yInt);\\n    }\\n\\n    // Compute the absolute value (x*y\u00f7UNIT). The resulting value must fit in SD59x18.\\n    uint256 resultAbs = Common.mulDiv18(xAbs, yAbs);\\n    if (resultAbs > uint256(uMAX_SD59x18)) {\\n        revert Errors.PRBMath_SD59x18_Mul_Overflow(x, y);\\n    }\\n\\n    // Check if x and y have the same sign using two's complement representation. The left-most bit represents the sign (1 for\\n    // negative, 0 for positive or zero).\\n    bool sameSign = (xInt ^ yInt) > -1;\\n\\n    // If the inputs have the same sign, the result should be positive. Otherwise, it should be negative.\\n    unchecked {\\n        result = wrap(sameSign ? int256(resultAbs) : -int256(resultAbs));\\n    }\\n}\\n\\n/// @notice Raises x to the power of y using the following formula:\\n///\\n/// $$\\n/// x^y = 2^{log_2{x} * y}\\n/// $$\\n///\\n/// @dev Notes:\\n/// - Refer to the notes in {exp2}, {log2}, and {mul}.\\n/// - Returns `UNIT` for 0^0.\\n///\\n/// Requirements:\\n/// - Refer to the requirements in {exp2}, {log2}, and {mul}.\\n///\\n/// @param x The base as an SD59x18 number.\\n/// @param y Exponent to raise x to, as an SD59x18 number\\n/// @return result x raised to power y, as an SD59x18 number.\\n/// @custom:smtchecker abstract-function-nondet\\nfunction pow(SD59x18 x, SD59x18 y) pure returns (SD59x18 result) {\\n    int256 xInt = x.unwrap();\\n    int256 yInt = y.unwrap();\\n\\n    // If both x and y are zero, the result is `UNIT`. If just x is zero, the result is always zero.\\n    if (xInt == 0) {\\n        return yInt == 0 ? UNIT : ZERO;\\n    }\\n    // If x is `UNIT`, the result is always `UNIT`.\\n    else if (xInt == uUNIT) {\\n        return UNIT;\\n    }\\n\\n    // If y is zero, the result is always `UNIT`.\\n    if (yInt == 0) {\\n        return UNIT;\\n    }\\n    // If y is `UNIT`, the result is always x.\\n    else if (yInt == uUNIT) {\\n        return x;\\n    }\\n\\n    // Calculate the result using the formula.\\n    result = exp2(mul(log2(x), y));\\n}\\n\\n/// @notice Raises x (an SD59x18 number) to the power y (an unsigned basic integer) using the well-known\\n/// algorithm \\\"exponentiation by squaring\\\".\\n///\\n/// @dev See https://en.wikipedia.org/wiki/Exponentiation_by_squaring.\\n///\\n/// Notes:\\n/// - Refer to the notes in {Common.mulDiv18}.\\n/// - Returns `UNIT` for 0^0.\\n///\\n/// Requirements:\\n/// - Refer to the requirements in {abs} and {Common.mulDiv18}.\\n/// - The result must fit in SD59x18.\\n///\\n/// @param x The base as an SD59x18 number.\\n/// @param y The exponent as a uint256.\\n/// @return result The result as an SD59x18 number.\\n/// @custom:smtchecker abstract-function-nondet\\nfunction powu(SD59x18 x, uint256 y) pure returns (SD59x18 result) {\\n    uint256 xAbs = uint256(abs(x).unwrap());\\n\\n    // Calculate the first iteration of the loop in advance.\\n    uint256 resultAbs = y & 1 > 0 ? xAbs : uint256(uUNIT);\\n\\n    // Equivalent to `for(y /= 2; y > 0; y /= 2)`.\\n    uint256 yAux = y;\\n    for (yAux >>= 1; yAux > 0; yAux >>= 1) {\\n        xAbs = Common.mulDiv18(xAbs, xAbs);\\n\\n        // Equivalent to `y % 2 == 1`.\\n        if (yAux & 1 > 0) {\\n            resultAbs = Common.mulDiv18(resultAbs, xAbs);\\n        }\\n    }\\n\\n    // The result must fit in SD59x18.\\n    if (resultAbs > uint256(uMAX_SD59x18)) {\\n        revert Errors.PRBMath_SD59x18_Powu_Overflow(x, y);\\n    }\\n\\n    unchecked {\\n        // Is the base negative and the exponent odd? If yes, the result should be negative.\\n        int256 resultInt = int256(resultAbs);\\n        bool isNegative = x.unwrap() < 0 && y & 1 == 1;\\n        if (isNegative) {\\n            resultInt = -resultInt;\\n        }\\n        result = wrap(resultInt);\\n    }\\n}\\n\\n/// @notice Calculates the square root of x using the Babylonian method.\\n///\\n/// @dev See https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method.\\n///\\n/// Notes:\\n/// - Only the positive root is returned.\\n/// - The result is rounded toward zero.\\n///\\n/// Requirements:\\n/// - x cannot be negative, since complex numbers are not supported.\\n/// - x must be less than `MAX_SD59x18 / UNIT`.\\n///\\n/// @param x The SD59x18 number for which to calculate the square root.\\n/// @return result The result as an SD59x18 number.\\n/// @custom:smtchecker abstract-function-nondet\\nfunction sqrt(SD59x18 x) pure returns (SD59x18 result) {\\n    int256 xInt = x.unwrap();\\n    if (xInt < 0) {\\n        revert Errors.PRBMath_SD59x18_Sqrt_NegativeInput(x);\\n    }\\n    if (xInt > uMAX_SD59x18 / uUNIT) {\\n        revert Errors.PRBMath_SD59x18_Sqrt_Overflow(x);\\n    }\\n\\n    unchecked {\\n        // Multiply x by `UNIT` to account for the factor of `UNIT` picked up when multiplying two SD59x18 numbers.\\n        // In this case, the two numbers are both the square root.\\n        uint256 resultUint = Common.sqrt(uint256(xInt * uUNIT));\\n        result = wrap(int256(resultUint));\\n    }\\n}\\n\"\r\n    },\r\n    \"@prb/math/src/sd59x18/ValueType.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.19;\\n\\nimport \\\"./Casting.sol\\\" as Casting;\\nimport \\\"./Helpers.sol\\\" as Helpers;\\nimport \\\"./Math.sol\\\" as Math;\\n\\n/// @notice The signed 59.18-decimal fixed-point number representation, which can have up to 59 digits and up to 18\\n/// decimals. The values of this are bound by the minimum and the maximum values permitted by the underlying Solidity\\n/// type int256.\\ntype SD59x18 is int256;\\n\\n/*//////////////////////////////////////////////////////////////////////////\\n                                    CASTING\\n//////////////////////////////////////////////////////////////////////////*/\\n\\nusing {\\n    Casting.intoInt256,\\n    Casting.intoSD1x18,\\n    Casting.intoUD2x18,\\n    Casting.intoUD60x18,\\n    Casting.intoUint256,\\n    Casting.intoUint128,\\n    Casting.intoUint40,\\n    Casting.unwrap\\n} for SD59x18 global;\\n\\n/*//////////////////////////////////////////////////////////////////////////\\n                            MATHEMATICAL FUNCTIONS\\n//////////////////////////////////////////////////////////////////////////*/\\n\\nusing {\\n    Math.abs,\\n    Math.avg,\\n    Math.ceil,\\n    Math.div,\\n    Math.exp,\\n    Math.exp2,\\n    Math.floor,\\n    Math.frac,\\n    Math.gm,\\n    Math.inv,\\n    Math.log10,\\n    Math.log2,\\n    Math.ln,\\n    Math.mul,\\n    Math.pow,\\n    Math.powu,\\n    Math.sqrt\\n} for SD59x18 global;\\n\\n/*//////////////////////////////////////////////////////////////////////////\\n                                HELPER FUNCTIONS\\n//////////////////////////////////////////////////////////////////////////*/\\n\\nusing {\\n    Helpers.add,\\n    Helpers.and,\\n    Helpers.eq,\\n    Helpers.gt,\\n    Helpers.gte,\\n    Helpers.isZero,\\n    Helpers.lshift,\\n    Helpers.lt,\\n    Helpers.lte,\\n    Helpers.mod,\\n    Helpers.neq,\\n    Helpers.not,\\n    Helpers.or,\\n    Helpers.rshift,\\n    Helpers.sub,\\n    Helpers.uncheckedAdd,\\n    Helpers.uncheckedSub,\\n    Helpers.uncheckedUnary,\\n    Helpers.xor\\n} for SD59x18 global;\\n\\n/*//////////////////////////////////////////////////////////////////////////\\n                                    OPERATORS\\n//////////////////////////////////////////////////////////////////////////*/\\n\\n// The global \\\"using for\\\" directive makes it possible to use these operators on the SD59x18 type.\\nusing {\\n    Helpers.add as +,\\n    Helpers.and2 as &,\\n    Math.div as /,\\n    Helpers.eq as ==,\\n    Helpers.gt as >,\\n    Helpers.gte as >=,\\n    Helpers.lt as <,\\n    Helpers.lte as <=,\\n    Helpers.mod as %,\\n    Math.mul as *,\\n    Helpers.neq as !=,\\n    Helpers.not as ~,\\n    Helpers.or as |,\\n    Helpers.sub as -,\\n    Helpers.unary as -,\\n    Helpers.xor as ^\\n} for SD59x18 global;\\n\"\r\n    },\r\n    \"@prb/math/src/ud2x18/Casting.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.19;\\n\\nimport \\\"../Common.sol\\\" as Common;\\nimport \\\"./Errors.sol\\\" as Errors;\\nimport { uMAX_SD1x18 } from \\\"../sd1x18/Constants.sol\\\";\\nimport { SD1x18 } from \\\"../sd1x18/ValueType.sol\\\";\\nimport { SD59x18 } from \\\"../sd59x18/ValueType.sol\\\";\\nimport { UD2x18 } from \\\"../ud2x18/ValueType.sol\\\";\\nimport { UD60x18 } from \\\"../ud60x18/ValueType.sol\\\";\\nimport { UD2x18 } from \\\"./ValueType.sol\\\";\\n\\n/// @notice Casts a UD2x18 number into SD1x18.\\n/// - x must be less than or equal to `uMAX_SD1x18`.\\nfunction intoSD1x18(UD2x18 x) pure returns (SD1x18 result) {\\n    uint64 xUint = UD2x18.unwrap(x);\\n    if (xUint > uint64(uMAX_SD1x18)) {\\n        revert Errors.PRBMath_UD2x18_IntoSD1x18_Overflow(x);\\n    }\\n    result = SD1x18.wrap(int64(xUint));\\n}\\n\\n/// @notice Casts a UD2x18 number into SD59x18.\\n/// @dev There is no overflow check because the domain of UD2x18 is a subset of SD59x18.\\nfunction intoSD59x18(UD2x18 x) pure returns (SD59x18 result) {\\n    result = SD59x18.wrap(int256(uint256(UD2x18.unwrap(x))));\\n}\\n\\n/// @notice Casts a UD2x18 number into UD60x18.\\n/// @dev There is no overflow check because the domain of UD2x18 is a subset of UD60x18.\\nfunction intoUD60x18(UD2x18 x) pure returns (UD60x18 result) {\\n    result = UD60x18.wrap(UD2x18.unwrap(x));\\n}\\n\\n/// @notice Casts a UD2x18 number into uint128.\\n/// @dev There is no overflow check because the domain of UD2x18 is a subset of uint128.\\nfunction intoUint128(UD2x18 x) pure returns (uint128 result) {\\n    result = uint128(UD2x18.unwrap(x));\\n}\\n\\n/// @notice Casts a UD2x18 number into uint256.\\n/// @dev There is no overflow check because the domain of UD2x18 is a subset of uint256.\\nfunction intoUint256(UD2x18 x) pure returns (uint256 result) {\\n    result = uint256(UD2x18.unwrap(x));\\n}\\n\\n/// @notice Casts a UD2x18 number into uint40.\\n/// @dev Requirements:\\n/// - x must be less than or equal to `MAX_UINT40`.\\nfunction intoUint40(UD2x18 x) pure returns (uint40 result) {\\n    uint64 xUint = UD2x18.unwrap(x);\\n    if (xUint > uint64(Common.MAX_UINT40)) {\\n        revert Errors.PRBMath_UD2x18_IntoUint40_Overflow(x);\\n    }\\n    result = uint40(xUint);\\n}\\n\\n/// @notice Alias for {wrap}.\\nfunction ud2x18(uint64 x) pure returns (UD2x18 result) {\\n    result = UD2x18.wrap(x);\\n}\\n\\n/// @notice Unwrap a UD2x18 number into uint64.\\nfunction unwrap(UD2x18 x) pure returns (uint64 result) {\\n    result = UD2x18.unwrap(x);\\n}\\n\\n/// @notice Wraps a uint64 number into UD2x18.\\nfunction wrap(uint64 x) pure returns (UD2x18 result) {\\n    result = UD2x18.wrap(x);\\n}\\n\"\r\n    },\r\n    \"@prb/math/src/ud2x18/Constants.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.19;\\n\\nimport { UD2x18 } from \\\"./ValueType.sol\\\";\\n\\n/// @dev Euler's number as a UD2x18 number.\\nUD2x18 constant E = UD2x18.wrap(2_718281828459045235);\\n\\n/// @dev The maximum value a UD2x18 number can have.\\nuint64 constant uMAX_UD2x18 = 18_446744073709551615;\\nUD2x18 constant MAX_UD2x18 = UD2x18.wrap(uMAX_UD2x18);\\n\\n/// @dev PI as a UD2x18 number.\\nUD2x18 constant PI = UD2x18.wrap(3_141592653589793238);\\n\\n/// @dev The unit number, which gives the decimal precision of UD2x18.\\nuint256 constant uUNIT = 1e18;\\nUD2x18 constant UNIT = UD2x18.wrap(1e18);\\n\"\r\n    },\r\n    \"@prb/math/src/ud2x18/Errors.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.19;\\n\\nimport { UD2x18 } from \\\"./ValueType.sol\\\";\\n\\n/// @notice Thrown when trying to cast a UD2x18 number that doesn't fit in SD1x18.\\nerror PRBMath_UD2x18_IntoSD1x18_Overflow(UD2x18 x);\\n\\n/// @notice Thrown when trying to cast a UD2x18 number that doesn't fit in uint40.\\nerror PRBMath_UD2x18_IntoUint40_Overflow(UD2x18 x);\\n\"\r\n    },\r\n    \"@prb/math/src/ud2x18/ValueType.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.19;\\n\\nimport \\\"./Casting.sol\\\" as Casting;\\n\\n/// @notice The unsigned 2.18-decimal fixed-point number representation, which can have up to 2 digits and up to 18\\n/// decimals. The values of this are bound by the minimum and the maximum values permitted by the underlying Solidity\\n/// type uint64. This is useful when end users want to use uint64 to save gas, e.g. with tight variable packing in contract\\n/// storage.\\ntype UD2x18 is uint64;\\n\\n/*//////////////////////////////////////////////////////////////////////////\\n                                    CASTING\\n//////////////////////////////////////////////////////////////////////////*/\\n\\nusing {\\n    Casting.intoSD1x18,\\n    Casting.intoSD59x18,\\n    Casting.intoUD60x18,\\n    Casting.intoUint256,\\n    Casting.intoUint128,\\n    Casting.intoUint40,\\n    Casting.unwrap\\n} for UD2x18 global;\\n\"\r\n    },\r\n    \"@prb/math/src/UD60x18.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.19;\\n\\n/*\\n\\n\u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2557   \u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2557  \u2588\u2588\u2557\\n\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u255a\u2550\u2550\u2588\u2588\u2554\u2550\u2550\u255d\u2588\u2588\u2551  \u2588\u2588\u2551\\n\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2554\u2588\u2588\u2588\u2588\u2554\u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2551   \u2588\u2588\u2551   \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2551\\n\u2588\u2588\u2554\u2550\u2550\u2550\u255d \u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2551\u255a\u2588\u2588\u2554\u255d\u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2551   \u2588\u2588\u2551   \u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2551\\n\u2588\u2588\u2551     \u2588\u2588\u2551  \u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2551 \u255a\u2550\u255d \u2588\u2588\u2551\u2588\u2588\u2551  \u2588\u2588\u2551   \u2588\u2588\u2551   \u2588\u2588\u2551  \u2588\u2588\u2551\\n\u255a\u2550\u255d     \u255a\u2550\u255d  \u255a\u2550\u255d\u255a\u2550\u2550\u2550\u2550\u2550\u255d \u255a\u2550\u255d     \u255a\u2550\u255d\u255a\u2550\u255d  \u255a\u2550\u255d   \u255a\u2550\u255d   \u255a\u2550\u255d  \u255a\u2550\u255d\\n\\n\u2588\u2588\u2557   \u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2557  \u2588\u2588\u2588\u2588\u2588\u2588\u2557  \u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2557  \u2588\u2588\u2557 \u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2588\u2557\\n\u2588\u2588\u2551   \u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d \u2588\u2588\u2554\u2550\u2588\u2588\u2588\u2588\u2557\u255a\u2588\u2588\u2557\u2588\u2588\u2554\u255d\u2588\u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\\n\u2588\u2588\u2551   \u2588\u2588\u2551\u2588\u2588\u2551  \u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2551\u2588\u2588\u2554\u2588\u2588\u2551 \u255a\u2588\u2588\u2588\u2554\u255d \u255a\u2588\u2588\u2551\u255a\u2588\u2588\u2588\u2588\u2588\u2554\u255d\\n\u2588\u2588\u2551   \u2588\u2588\u2551\u2588\u2588\u2551  \u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2551 \u2588\u2588\u2554\u2588\u2588\u2557  \u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\\n\u255a\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u255a\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u255a\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2554\u255d \u2588\u2588\u2557 \u2588\u2588\u2551\u255a\u2588\u2588\u2588\u2588\u2588\u2554\u255d\\n \u255a\u2550\u2550\u2550\u2550\u2550\u255d \u255a\u2550\u2550\u2550\u2550\u2550\u255d  \u255a\u2550\u2550\u2550\u2550\u2550\u255d  \u255a\u2550\u2550\u2550\u2550\u2550\u255d \u255a\u2550\u255d  \u255a\u2550\u255d \u255a\u2550\u255d \u255a\u2550\u2550\u2550\u2550\u255d\\n\\n*/\\n\\nimport \\\"./ud60x18/Casting.sol\\\";\\nimport \\\"./ud60x18/Constants.sol\\\";\\nimport \\\"./ud60x18/Conversions.sol\\\";\\nimport \\\"./ud60x18/Errors.sol\\\";\\nimport \\\"./ud60x18/Helpers.sol\\\";\\nimport \\\"./ud60x18/Math.sol\\\";\\nimport \\\"./ud60x18/ValueType.sol\\\";\\n\"\r\n    },\r\n    \"@prb/math/src/ud60x18/Casting.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.19;\\n\\nimport \\\"./Errors.sol\\\" as CastingErrors;\\nimport { MAX_UINT128, MAX_UINT40 } from \\\"../Common.sol\\\";\\nimport { uMAX_SD1x18 } from \\\"../sd1x18/Constants.sol\\\";\\nimport { SD1x18 } from \\\"../sd1x18/ValueType.sol\\\";\\nimport { uMAX_SD59x18 } from \\\"../sd59x18/Constants.sol\\\";\\nimport { SD59x18 } from \\\"../sd59x18/ValueType.sol\\\";\\nimport { uMAX_UD2x18 } from \\\"../ud2x18/Constants.sol\\\";\\nimport { UD2x18 } from \\\"../ud2x18/ValueType.sol\\\";\\nimport { UD60x18 } from \\\"./ValueType.sol\\\";\\n\\n/// @notice Casts a UD60x18 number into SD1x18.\\n/// @dev Requirements:\\n/// - x must be less than or equal to `uMAX_SD1x18`.\\nfunction intoSD1x18(UD60x18 x) pure returns (SD1x18 result) {\\n    uint256 xUint = UD60x18.unwrap(x);\\n    if (xUint > uint256(int256(uMAX_SD1x18))) {\\n        revert CastingErrors.PRBMath_UD60x18_IntoSD1x18_Overflow(x);\\n    }\\n    result = SD1x18.wrap(int64(uint64(xUint)));\\n}\\n\\n/// @notice Casts a UD60x18 number into UD2x18.\\n/// @dev Requirements:\\n/// - x must be less than or equal to `uMAX_UD2x18`.\\nfunction intoUD2x18(UD60x18 x) pure returns (UD2x18 result) {\\n    uint256 xUint = UD60x18.unwrap(x);\\n    if (xUint > uMAX_UD2x18) {\\n        revert CastingErrors.PRBMath_UD60x18_IntoUD2x18_Overflow(x);\\n    }\\n    result = UD2x18.wrap(uint64(xUint));\\n}\\n\\n/// @notice Casts a UD60x18 number into SD59x18.\\n/// @dev Requirements:\\n/// - x must be less than or equal to `uMAX_SD59x18`.\\nfunction intoSD59x18(UD60x18 x) pure returns (SD59x18 result) {\\n    uint256 xUint = UD60x18.unwrap(x);\\n    if (xUint > uint256(uMAX_SD59x18)) {\\n        revert CastingErrors.PRBMath_UD60x18_IntoSD59x18_Overflow(x);\\n    }\\n    result = SD59x18.wrap(int256(xUint));\\n}\\n\\n/// @notice Casts a UD60x18 number into uint128.\\n/// @dev This is basically an alias for {unwrap}.\\nfunction intoUint256(UD60x18 x) pure returns (uint256 result) {\\n    result = UD60x18.unwrap(x);\\n}\\n\\n/// @notice Casts a UD60x18 number into uint128.\\n/// @dev Requirements:\\n/// - x must be less than or equal to `MAX_UINT128`.\\nfunction intoUint128(UD60x18 x) pure returns (uint128 result) {\\n    uint256 xUint = UD60x18.unwrap(x);\\n    if (xUint > MAX_UINT128) {\\n        revert CastingErrors.PRBMath_UD60x18_IntoUint128_Overflow(x);\\n    }\\n    result = uint128(xUint);\\n}\\n\\n/// @notice Casts a UD60x18 number into uint40.\\n/// @dev Requirements:\\n/// - x must be less than or equal to `MAX_UINT40`.\\nfunction intoUint40(UD60x18 x) pure returns (uint40 result) {\\n    uint256 xUint = UD60x18.unwrap(x);\\n    if (xUint > MAX_UINT40) {\\n        revert CastingErrors.PRBMath_UD60x18_IntoUint40_Overflow(x);\\n    }\\n    result = uint40(xUint);\\n}\\n\\n/// @notice Alias for {wrap}.\\nfunction ud(uint256 x) pure returns (UD60x18 result) {\\n    result = UD60x18.wrap(x);\\n}\\n\\n/// @notice Alias for {wrap}.\\nfunction ud60x18(uint256 x) pure returns (UD60x18 result) {\\n    result = UD60x18.wrap(x);\\n}\\n\\n/// @notice Unwraps a UD60x18 number into uint256.\\nfunction unwrap(UD60x18 x) pure returns (uint256 result) {\\n    result = UD60x18.unwrap(x);\\n}\\n\\n/// @notice Wraps a uint256 number into the UD60x18 value type.\\nfunction wrap(uint256 x) pure returns (UD60x18 result) {\\n    result = UD60x18.wrap(x);\\n}\\n\"\r\n    },\r\n    \"@prb/math/src/ud60x18/Constants.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.19;\\n\\nimport { UD60x18 } from \\\"./ValueType.sol\\\";\\n\\n// NOTICE: the \\\"u\\\" prefix stands for \\\"unwrapped\\\".\\n\\n/// @dev Euler's number as a UD60x18 number.\\nUD60x18 constant E = UD60x18.wrap(2_718281828459045235);\\n\\n/// @dev The maximum input permitted in {exp}.\\nuint256 constant uEXP_MAX_INPUT = 133_084258667509499440;\\nUD60x18 constant EXP_MAX_INPUT = UD60x18.wrap(uEXP_MAX_INPUT);\\n\\n/// @dev The maximum input permitted in {exp2}.\\nuint256 constant uEXP2_MAX_INPUT = 192e18 - 1;\\nUD60x18 constant EXP2_MAX_INPUT = UD60x18.wrap(uEXP2_MAX_INPUT);\\n\\n/// @dev Half the UNIT number.\\nuint256 constant uHALF_UNIT = 0.5e18;\\nUD60x18 constant HALF_UNIT = UD60x18.wrap(uHALF_UNIT);\\n\\n/// @dev $log_2(10)$ as a UD60x18 number.\\nuint256 constant uLOG2_10 = 3_321928094887362347;\\nUD60x18 constant LOG2_10 = UD60x18.wrap(uLOG2_10);\\n\\n/// @dev $log_2(e)$ as a UD60x18 number.\\nuint256 constant uLOG2_E = 1_442695040888963407;\\nUD60x18 constant LOG2_E = UD60x18.wrap(uLOG2_E);\\n\\n/// @dev The maximum value a UD60x18 number can have.\\nuint256 constant uMAX_UD60x18 = 115792089237316195423570985008687907853269984665640564039457_584007913129639935;\\nUD60x18 constant MAX_UD60x18 = UD60x18.wrap(uMAX_UD60x18);\\n\\n/// @dev The maximum whole value a UD60x18 number can have.\\nuint256 constant uMAX_WHOLE_UD60x18 = 115792089237316195423570985008687907853269984665640564039457_000000000000000000;\\nUD60x18 constant MAX_WHOLE_UD60x18 = UD60x18.wrap(uMAX_WHOLE_UD60x18);\\n\\n/// @dev PI as a UD60x18 number.\\nUD60x18 constant PI = UD60x18.wrap(3_141592653589793238);\\n\\n/// @dev The unit number, which gives the decimal precision of UD60x18.\\nuint256 constant uUNIT = 1e18;\\nUD60x18 constant UNIT = UD60x18.wrap(uUNIT);\\n\\n/// @dev The unit number squared.\\nuint256 constant uUNIT_SQUARED = 1e36;\\nUD60x18 constant UNIT_SQUARED = UD60x18.wrap(uUNIT_SQUARED);\\n\\n/// @dev Zero as a UD60x18 number.\\nUD60x18 constant ZERO = UD60x18.wrap(0);\\n\"\r\n    },\r\n    \"@prb/math/src/ud60x18/Conversions.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.19;\\n\\nimport { uMAX_UD60x18, uUNIT } from \\\"./Constants.sol\\\";\\nimport { PRBMath_UD60x18_Convert_Overflow } from \\\"./Errors.sol\\\";\\nimport { UD60x18 } from \\\"./ValueType.sol\\\";\\n\\n/// @notice Converts a UD60x18 number to a simple integer by dividing it by `UNIT`.\\n/// @dev The result is rounded toward zero.\\n/// @param x The UD60x18 number to convert.\\n/// @return result The same number in basic integer form.\\nfunction convert(UD60x18 x) pure returns (uint256 result) {\\n    result = UD60x18.unwrap(x) / uUNIT;\\n}\\n\\n/// @notice Converts a simple integer to UD60x18 by multiplying it by `UNIT`.\\n///\\n/// @dev Requirements:\\n/// - x must be less than or equal to `MAX_UD60x18 / UNIT`.\\n///\\n/// @param x The basic integer to convert.\\n/// @param result The same number converted to UD60x18.\\nfunction convert(uint256 x) pure returns (UD60x18 result) {\\n    if (x > uMAX_UD60x18 / uUNIT) {\\n        revert PRBMath_UD60x18_Convert_Overflow(x);\\n    }\\n    unchecked {\\n        result = UD60x18.wrap(x * uUNIT);\\n    }\\n}\\n\"\r\n    },\r\n    \"@prb/math/src/ud60x18/Errors.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.19;\\n\\nimport { UD60x18 } from \\\"./ValueType.sol\\\";\\n\\n/// @notice Thrown when ceiling a number overflows UD60x18.\\nerror PRBMath_UD60x18_Ceil_Overflow(UD60x18 x);\\n\\n/// @notice Thrown when converting a basic integer to the fixed-point format overflows UD60x18.\\nerror PRBMath_UD60x18_Convert_Overflow(uint256 x);\\n\\n/// @notice Thrown when taking the natural exponent of a base greater than 133_084258667509499441.\\nerror PRBMath_UD60x18_Exp_InputTooBig(UD60x18 x);\\n\\n/// @notice Thrown when taking the binary exponent of a base greater than 192e18.\\nerror PRBMath_UD60x18_Exp2_InputTooBig(UD60x18 x);\\n\\n/// @notice Thrown when taking the geometric mean of two numbers and multiplying them overflows UD60x18.\\nerror PRBMath_UD60x18_Gm_Overflow(UD60x18 x, UD60x18 y);\\n\\n/// @notice Thrown when trying to cast a UD60x18 number that doesn't fit in SD1x18.\\nerror PRBMath_UD60x18_IntoSD1x18_Overflow(UD60x18 x);\\n\\n/// @notice Thrown when trying to cast a UD60x18 number that doesn't fit in SD59x18.\\nerror PRBMath_UD60x18_IntoSD59x18_Overflow(UD60x18 x);\\n\\n/// @notice Thrown when trying to cast a UD60x18 number that doesn't fit in UD2x18.\\nerror PRBMath_UD60x18_IntoUD2x18_Overflow(UD60x18 x);\\n\\n/// @notice Thrown when trying to cast a UD60x18 number that doesn't fit in uint128.\\nerror PRBMath_UD60x18_IntoUint128_Overflow(UD60x18 x);\\n\\n/// @notice Thrown when trying to cast a UD60x18 number that doesn't fit in uint40.\\nerror PRBMath_UD60x18_IntoUint40_Overflow(UD60x18 x);\\n\\n/// @notice Thrown when taking the logarithm of a number less than 1.\\nerror PRBMath_UD60x18_Log_InputTooSmall(UD60x18 x);\\n\\n/// @notice Thrown when calculating the square root overflows UD60x18.\\nerror PRBMath_UD60x18_Sqrt_Overflow(UD60x18 x);\\n\"\r\n    },\r\n    \"@prb/math/src/ud60x18/Helpers.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.19;\\n\\nimport { wrap } from \\\"./Casting.sol\\\";\\nimport { UD60x18 } from \\\"./ValueType.sol\\\";\\n\\n/// @notice Implements the checked addition operation (+) in the UD60x18 type.\\nfunction add(UD60x18 x, UD60x18 y) pure returns (UD60x18 result) {\\n    result = wrap(x.unwrap() + y.unwrap());\\n}\\n\\n/// @notice Implements the AND (&) bitwise operation in the UD60x18 type.\\nfunction and(UD60x18 x, uint256 bits) pure returns (UD60x18 result) {\\n    result = wrap(x.unwrap() & bits);\\n}\\n\\n/// @notice Implements the AND (&) bitwise operation in the UD60x18 type.\\nfunction and2(UD60x18 x, UD60x18 y) pure returns (UD60x18 result) {\\n    result = wrap(x.unwrap() & y.unwrap());\\n}\\n\\n/// @notice Implements the equal operation (==) in the UD60x18 type.\\nfunction eq(UD60x18 x, UD60x18 y) pure returns (bool result) {\\n    result = x.unwrap() == y.unwrap();\\n}\\n\\n/// @notice Implements the greater than operation (>) in the UD60x18 type.\\nfunction gt(UD60x18 x, UD60x18 y) pure returns (bool result) {\\n    result = x.unwrap() > y.unwrap();\\n}\\n\\n/// @notice Implements the greater than or equal to operation (>=) in the UD60x18 type.\\nfunction gte(UD60x18 x, UD60x18 y) pure returns (bool result) {\\n    result = x.unwrap() >= y.unwrap();\\n}\\n\\n/// @notice Implements a zero comparison check function in the UD60x18 type.\\nfunction isZero(UD60x18 x) pure returns (bool result) {\\n    // This wouldn't work if x could be negative.\\n    result = x.unwrap() == 0;\\n}\\n\\n/// @notice Implements the left shift operation (<<) in the UD60x18 type.\\nfunction lshift(UD60x18 x, uint256 bits) pure returns (UD60x18 result) {\\n    result = wrap(x.unwrap() << bits);\\n}\\n\\n/// @notice Implements the lower than operation (<) in the UD60x18 type.\\nfunction lt(UD60x18 x, UD60x18 y) pure returns (bool result) {\\n    result = x.unwrap() < y.unwrap();\\n}\\n\\n/// @notice Implements the lower than or equal to operation (<=) in the UD60x18 type.\\nfunction lte(UD60x18 x, UD60x18 y) pure returns (bool result) {\\n    result = x.unwrap() <= y.unwrap();\\n}\\n\\n/// @notice Implements the checked modulo operation (%) in the UD60x18 type.\\nfunction mod(UD60x18 x, UD60x18 y) pure returns (UD60x18 result) {\\n    result = wrap(x.unwrap() % y.unwrap());\\n}\\n\\n/// @notice Implements the not equal operation (!=) in the UD60x18 type.\\nfunction neq(UD60x18 x, UD60x18 y) pure returns (bool result) {\\n    result = x.unwrap() != y.unwrap();\\n}\\n\\n/// @notice Implements the NOT (~) bitwise operation in the UD60x18 type.\\nfunction not(UD60x18 x) pure returns (UD60x18 result) {\\n    result = wrap(~x.unwrap());\\n}\\n\\n/// @notice Implements the OR (|) bitwise operation in the UD60x18 type.\\nfunction or(UD60x18 x, UD60x18 y) pure returns (UD60x18 result) {\\n    result = wrap(x.unwrap() | y.unwrap());\\n}\\n\\n/// @notice Implements the right shift operation (>>) in the UD60x18 type.\\nfunction rshift(UD60x18 x, uint256 bits) pure returns (UD60x18 result) {\\n    result = wrap(x.unwrap() >> bits);\\n}\\n\\n/// @notice Implements the checked subtraction operation (-) in the UD60x18 type.\\nfunction sub(UD60x18 x, UD60x18 y) pure returns (UD60x18 result) {\\n    result = wrap(x.unwrap() - y.unwrap());\\n}\\n\\n/// @notice Implements the unchecked addition operation (+) in the UD60x18 type.\\nfunction uncheckedAdd(UD60x18 x, UD60x18 y) pure returns (UD60x18 result) {\\n    unchecked {\\n        result = wrap(x.unwrap() + y.unwrap());\\n    }\\n}\\n\\n/// @notice Implements the unchecked subtraction operation (-) in the UD60x18 type.\\nfunction uncheckedSub(UD60x18 x, UD60x18 y) pure returns (UD60x18 result) {\\n    unchecked {\\n        result = wrap(x.unwrap() - y.unwrap());\\n    }\\n}\\n\\n/// @notice Implements the XOR (^) bitwise operation in the UD60x18 type.\\nfunction xor(UD60x18 x, UD60x18 y) pure returns (UD60x18 result) {\\n    result = wrap(x.unwrap() ^ y.unwrap());\\n}\\n\"\r\n    },\r\n    \"@prb/math/src/ud60x18/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.19;\\n\\nimport \\\"../Common.sol\\\" as Common;\\nimport \\\"./Errors.sol\\\" as Errors;\\nimport { wrap } from \\\"./Casting.sol\\\";\\nimport {\\n    uEXP_MAX_INPUT,\\n    uEXP2_MAX_INPUT,\\n    uHALF_UNIT,\\n    uLOG2_10,\\n    uLOG2_E,\\n    uMAX_UD60x18,\\n    uMAX_WHOLE_UD60x18,\\n    UNIT,\\n    uUNIT,\\n    uUNIT_SQUARED,\\n    ZERO\\n} from \\\"./Constants.sol\\\";\\nimport { UD60x18 } from \\\"./ValueType.sol\\\";\\n\\n/*//////////////////////////////////////////////////////////////////////////\\n                            MATHEMATICAL FUNCTIONS\\n//////////////////////////////////////////////////////////////////////////*/\\n\\n/// @notice Calculates the arithmetic average of x and y using the following formula:\\n///\\n/// $$\\n/// avg(x, y) = (x & y) + ((xUint ^ yUint) / 2)\\n/// $$\\n//\\n/// In English, this is what this formula does:\\n///\\n/// 1. AND x and y.\\n/// 2. Calculate half of XOR x and y.\\n/// 3. Add the two results together.\\n///\\n/// This technique is known as SWAR, which stands for \\\"SIMD within a register\\\". You can read more about it here:\\n/// https://devblogs.microsoft.com/oldnewthing/20220207-00/?p=106223\\n///\\n/// @dev Notes:\\n/// - The result is rounded toward zero.\\n///\\n/// @param x The first operand as a UD60x18 number.\\n/// @param y The second operand as a UD60x18 number.\\n/// @return result The arithmetic average as a UD60x18 number.\\n/// @custom:smtchecker abstract-function-nondet\\nfunction avg(UD60x18 x, UD60x18 y) pure returns (UD60x18 result) {\\n    uint256 xUint = x.unwrap();\\n    uint256 yUint = y.unwrap();\\n    unchecked {\\n        result = wrap((xUint & yUint) + ((xUint ^ yUint) >> 1));\\n    }\\n}\\n\\n/// @notice Yields the smallest whole number greater than or equal to x.\\n///\\n/// @dev This is optimized for fractional value inputs, because for every whole value there are (1e18 - 1) fractional\\n/// counterparts. See https://en.wikipedia.org/wiki/Floor_and_ceiling_functions.\\n///\\n/// Requirements:\\n/// - x must be less than or equal to `MAX_WHOLE_UD60x18`.\\n///\\n/// @param x The UD60x18 number to ceil.\\n/// @param result The smallest whole number greater than or equal to x, as a UD60x18 number.\\n/// @custom:smtchecker abstract-function-nondet\\nfunction ceil(UD60x18 x) pure returns (UD60x18 result) {\\n    uint256 xUint = x.unwrap();\\n    if (xUint > uMAX_WHOLE_UD60x18) {\\n        revert Errors.PRBMath_UD60x18_Ceil_Overflow(x);\\n    }\\n\\n    assembly (\\\"memory-safe\\\") {\\n        // Equivalent to `x % UNIT`.\\n        let remainder := mod(x, uUNIT)\\n\\n        // Equivalent to `UNIT - remainder`.\\n        let delta := sub(uUNIT, remainder)\\n\\n        // Equivalent to `x + remainder > 0 ? delta : 0`.\\n        result := add(x, mul(delta, gt(remainder, 0)))\\n    }\\n}\\n\\n/// @notice Divides two UD60x18 numbers, returning a new UD60x18 number.\\n///\\n/// @dev Uses {Common.mulDiv} to enable overflow-safe multiplication and division.\\n///\\n/// Notes:\\n/// - Refer to the notes in {Common.mulDiv}.\\n///\\n/// Requirements:\\n/// - Refer to the requirements in {Common.mulDiv}.\\n///\\n/// @param x The numerator as a UD60x18 number.\\n/// @param y The denominator as a UD60x18 number.\\n/// @param result The quotient as a UD60x18 number.\\n/// @custom:smtchecker abstract-function-nondet\\nfunction div(UD60x18 x, UD60x18 y) pure returns (UD60x18 result) {\\n    result = wrap(Common.mulDiv(x.unwrap(), uUNIT, y.unwrap()));\\n}\\n\\n/// @notice Calculates the natural exponent of x using the following formula:\\n///\\n/// $$\\n/// e^x = 2^{x * log_2{e}}\\n/// $$\\n///\\n/// @dev Requirements:\\n/// - x must be less than 133_084258667509499441.\\n///\\n/// @param x The exponent as a UD60x18 number.\\n/// @return result The result as a UD60x18 number.\\n/// @custom:smtchecker abstract-function-nondet\\nfunction exp(UD60x18 x) pure returns (UD60x18 result) {\\n    uint256 xUint = x.unwrap();\\n\\n    // This check prevents values greater than 192e18 from being passed to {exp2}.\\n    if (xUint > uEXP_MAX_INPUT) {\\n        revert Errors.PRBMath_UD60x18_Exp_InputTooBig(x);\\n    }\\n\\n    unchecked {\\n        // Inline the fixed-point multiplication to save gas.\\n        uint256 doubleUnitProduct = xUint * uLOG2_E;\\n        result = exp2(wrap(doubleUnitProduct / uUNIT));\\n    }\\n}\\n\\n/// @notice Calculates the binary exponent of x using the binary fraction method.\\n///\\n/// @dev See https://ethereum.stackexchange.com/q/79903/24693\\n///\\n/// Requirements:\\n/// - x must be less than 192e18.\\n/// - The result must fit in UD60x18.\\n///\\n/// @param x The exponent as a UD60x18 number.\\n/// @return result The result as a UD60x18 number.\\n/// @custom:smtchecker abstract-function-nondet\\nfunction exp2(UD60x18 x) pure returns (UD60x18 result) {\\n    uint256 xUint = x.unwrap();\\n\\n    // Numbers greater than or equal to 192e18 don't fit in the 192.64-bit format.\\n    if (xUint > uEXP2_MAX_INPUT) {\\n        revert Errors.PRBMath_UD60x18_Exp2_InputTooBig(x);\\n    }\\n\\n    // Convert x to the 192.64-bit fixed-point format.\\n    uint256 x_192x64 = (xUint << 64) / uUNIT;\\n\\n    // Pass x to the {Common.exp2} function, which uses the 192.64-bit fixed-point number representation.\\n    result = wrap(Common.exp2(x_192x64));\\n}\\n\\n/// @notice Yields the greatest whole number less than or equal to x.\\n/// @dev Optimized for fractional value inputs, because every whole value has (1e18 - 1) fractional counterparts.\\n/// See https://en.wikipedia.org/wiki/Floor_and_ceiling_functions.\\n/// @param x The UD60x18 number to floor.\\n/// @param result The greatest whole number less than or equal to x, as a UD60x18 number.\\n/// @custom:smtchecker abstract-function-nondet\\nfunction floor(UD60x18 x) pure returns (UD60x18 result) {\\n    assembly (\\\"memory-safe\\\") {\\n        // Equivalent to `x % UNIT`.\\n        let remainder := mod(x, uUNIT)\\n\\n        // Equivalent to `x - remainder > 0 ? remainder : 0)`.\\n        result := sub(x, mul(remainder, gt(remainder, 0)))\\n    }\\n}\\n\\n/// @notice Yields the excess beyond the floor of x using the odd function definition.\\n/// @dev See https://en.wikipedia.org/wiki/Fractional_part.\\n/// @param x The UD60x18 number to get the fractional part of.\\n/// @param result The fractional part of x as a UD60x18 number.\\n/// @custom:smtchecker abstract-function-nondet\\nfunction frac(UD60x18 x) pure returns (UD60x18 result) {\\n    assembly (\\\"memory-safe\\\") {\\n        result := mod(x, uUNIT)\\n    }\\n}\\n\\n/// @notice Calculates the geometric mean of x and y, i.e. $\\\\sqrt{x * y}$, rounding down.\\n///\\n/// @dev Requirements:\\n/// - x * y must fit in UD60x18.\\n///\\n/// @param x The first operand as a UD60x18 number.\\n/// @param y The second operand as a UD60x18 number.\\n/// @return result The result as a UD60x18 number.\\n/// @custom:smtchecker abstract-function-nondet\\nfunction gm(UD60x18 x, UD60x18 y) pure returns (UD60x18 result) {\\n    uint256 xUint = x.unwrap();\\n    uint256 yUint = y.unwrap();\\n    if (xUint == 0 || yUint == 0) {\\n        return ZERO;\\n    }\\n\\n    unchecked {\\n        // Checking for overflow this way is faster than letting Solidity do it.\\n        uint256 xyUint = xUint * yUint;\\n        if (xyUint / xUint != yUint) {\\n            revert Errors.PRBMath_UD60x18_Gm_Overflow(x, y);\\n        }\\n\\n        // We don't need to multiply the result by `UNIT` here because the x*y product picked up a factor of `UNIT`\\n        // during multiplication. See the comments in {Common.sqrt}.\\n        result = wrap(Common.sqrt(xyUint));\\n    }\\n}\\n\\n/// @notice Calculates the inverse of x.\\n///\\n/// @dev Notes:\\n/// - The result is rounded toward zero.\\n///\\n/// Requirements:\\n/// - x must not be zero.\\n///\\n/// @param x The UD60x18 number for which to calculate the inverse.\\n/// @return result The inverse as a UD60x18 number.\\n/// @custom:smtchecker abstract-function-nondet\\nfunction inv(UD60x18 x) pure returns (UD60x18 result) {\\n    unchecked {\\n        result = wrap(uUNIT_SQUARED / x.unwrap());\\n    }\\n}\\n\\n/// @notice Calculates the natural logarithm of x using the following formula:\\n///\\n/// $$\\n/// ln{x} = log_2{x} / log_2{e}\\n/// $$\\n///\\n/// @dev Notes:\\n/// - Refer to the notes in {log2}.\\n/// - The precision isn't sufficiently fine-grained to return exactly `UNIT` when the input is `E`.\\n///\\n/// Requirements:\\n/// - Refer to the requirements in {log2}.\\n///\\n/// @param x The UD60x18 number for which to calculate the natural logarithm.\\n/// @return result The natural logarithm as a UD60x18 number.\\n/// @custom:smtchecker abstract-function-nondet\\nfunction ln(UD60x18 x) pure returns (UD60x18 result) {\\n    unchecked {\\n        // Inline the fixed-point multiplication to save gas. This is overflow-safe because the maximum value that\\n        // {log2} can return is ~196_205294292027477728.\\n        result = wrap(log2(x).unwrap() * uUNIT / uLOG2_E);\\n    }\\n}\\n\\n/// @notice Calculates the common logarithm of x using the following formula:\\n///\\n/// $$\\n/// log_{10}{x} = log_2{x} / log_2{10}\\n/// $$\\n///\\n/// However, if x is an exact power of ten, a hard coded value is returned.\\n///\\n/// @dev Notes:\\n/// - Refer to the notes in {log2}.\\n///\\n/// Requirements:\\n/// - Refer to the requirements in {log2}.\\n///\\n/// @param x The UD60x18 number for which to calculate the common logarithm.\\n/// @return result The common logarithm as a UD60x18 number.\\n/// @custom:smtchecker abstract-function-nondet\\nfunction log10(UD60x18 x) pure returns (UD60x18 result) {\\n    uint256 xUint = x.unwrap();\\n    if (xUint < uUNIT) {\\n        revert Errors.PRBMath_UD60x18_Log_InputTooSmall(x);\\n    }\\n\\n    // Note that the `mul` in this assembly block is the standard multiplication operation, not {UD60x18.mul}.\\n    // prettier-ignore\\n    assembly (\\\"memory-safe\\\") {\\n        switch x\\n        case 1 { result := mul(uUNIT, sub(0, 18)) }\\n        case 10 { result := mul(uUNIT, sub(1, 18)) }\\n        case 100 { result := mul(uUNIT, sub(2, 18)) }\\n        case 1000 { result := mul(uUNIT, sub(3, 18)) }\\n        case 10000 { result := mul(uUNIT, sub(4, 18)) }\\n        case 100000 { result := mul(uUNIT, sub(5, 18)) }\\n        case 1000000 { result := mul(uUNIT, sub(6, 18)) }\\n        case 10000000 { result := mul(uUNIT, sub(7, 18)) }\\n        case 100000000 { result := mul(uUNIT, sub(8, 18)) }\\n        case 1000000000 { result := mul(uUNIT, sub(9, 18)) }\\n        case 10000000000 { result := mul(uUNIT, sub(10, 18)) }\\n        case 100000000000 { result := mul(uUNIT, sub(11, 18)) }\\n        case 1000000000000 { result := mul(uUNIT, sub(12, 18)) }\\n        case 10000000000000 { result := mul(uUNIT, sub(13, 18)) }\\n        case 100000000000000 { result := mul(uUNIT, sub(14, 18)) }\\n        case 1000000000000000 { result := mul(uUNIT, sub(15, 18)) }\\n        case 10000000000000000 { result := mul(uUNIT, sub(16, 18)) }\\n        case 100000000000000000 { result := mul(uUNIT, sub(17, 18)) }\\n        case 1000000000000000000 { result := 0 }\\n        case 10000000000000000000 { result := uUNIT }\\n        case 100000000000000000000 { result := mul(uUNIT, 2) }\\n        case 1000000000000000000000 { result := mul(uUNIT, 3) }\\n        case 10000000000000000000000 { result := mul(uUNIT, 4) }\\n        case 100000000000000000000000 { result := mul(uUNIT, 5) }\\n        case 1000000000000000000000000 { result := mul(uUNIT, 6) }\\n        case 10000000000000000000000000 { result := mul(uUNIT, 7) }\\n        case 100000000000000000000000000 { result := mul(uUNIT, 8) }\\n        case 1000000000000000000000000000 { result := mul(uUNIT, 9) }\\n        case 10000000000000000000000000000 { result := mul(uUNIT, 10) }\\n        case 100000000000000000000000000000 { result := mul(uUNIT, 11) }\\n        case 1000000000000000000000000000000 { result := mul(uUNIT, 12) }\\n        case 10000000000000000000000000000000 { result := mul(uUNIT, 13) }\\n        case 100000000000000000000000000000000 { result := mul(uUNIT, 14) }\\n        case 1000000000000000000000000000000000 { result := mul(uUNIT, 15) }\\n        case 10000000000000000000000000000000000 { result := mul(uUNIT, 16) }\\n        case 100000000000000000000000000000000000 { result := mul(uUNIT, 17) }\\n        case 1000000000000000000000000000000000000 { result := mul(uUNIT, 18) }\\n        case 10000000000000000000000000000000000000 { result := mul(uUNIT, 19) }\\n        case 100000000000000000000000000000000000000 { result := mul(uUNIT, 20) }\\n        case 1000000000000000000000000000000000000000 { result := mul(uUNIT, 21) }\\n        case 10000000000000000000000000000000000000000 { result := mul(uUNIT, 22) }\\n        case 100000000000000000000000000000000000000000 { result := mul(uUNIT, 23) }\\n        case 1000000000000000000000000000000000000000000 { result := mul(uUNIT, 24) }\\n        case 10000000000000000000000000000000000000000000 { result := mul(uUNIT, 25) }\\n        case 100000000000000000000000000000000000000000000 { result := mul(uUNIT, 26) }\\n        case 1000000000000000000000000000000000000000000000 { result := mul(uUNIT, 27) }\\n        case 10000000000000000000000000000000000000000000000 { result := mul(uUNIT, 28) }\\n        case 100000000000000000000000000000000000000000000000 { result := mul(uUNIT, 29) }\\n        case 1000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 30) }\\n        case 10000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 31) }\\n        case 100000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 32) }\\n        case 1000000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 33) }\\n        case 10000000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 34) }\\n        case 100000000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 35) }\\n        case 1000000000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 36) }\\n        case 10000000000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 37) }\\n        case 100000000000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 38) }\\n        case 1000000000000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 39) }\\n        case 10000000000000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 40) }\\n        case 100000000000000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 41) }\\n        case 1000000000000000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 42) }\\n        case 10000000000000000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 43) }\\n        case 100000000000000000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 44) }\\n        case 1000000000000000000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 45) }\\n        case 10000000000000000000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 46) }\\n        case 100000000000000000000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 47) }\\n        case 1000000000000000000000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 48) }\\n        case 10000000000000000000000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 49) }\\n        case 100000000000000000000000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 50) }\\n        case 1000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 51) }\\n        case 10000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 52) }\\n        case 100000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 53) }\\n        case 1000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 54) }\\n        case 10000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 55) }\\n        case 100000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 56) }\\n        case 1000000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 57) }\\n        case 10000000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 58) }\\n        case 100000000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 59) }\\n        default { result := uMAX_UD60x18 }\\n    }\\n\\n    if (result.unwrap() == uMAX_UD60x18) {\\n        unchecked {\\n            // Inline the fixed-point division to save gas.\\n            result = wrap(log2(x).unwrap() * uUNIT / uLOG2_10);\\n        }\\n    }\\n}\\n\\n/// @notice Calculates the binary logarithm of x using the iterative approximation algorithm:\\n///\\n/// $$\\n/// log_2{x} = n + log_2{y}, \\\\text{ where } y = x*2^{-n}, \\\\ y \\\\in [1, 2)\\n/// $$\\n///\\n/// For $0 \\\\leq x \\\\lt 1$, the input is inverted:\\n///\\n/// $$\\n/// log_2{x} = -log_2{\\\\frac{1}{x}}\\n/// $$\\n///\\n/// @dev See https://en.wikipedia.org/wiki/Binary_logarithm#Iterative_approximation\\n///\\n/// Notes:\\n/// - Due to the lossy precision of the iterative approximation, the results are not perfectly accurate to the last decimal.\\n///\\n/// Requirements:\\n/// - x must be greater than zero.\\n///\\n/// @param x The UD60x18 number for which to calculate the binary logarithm.\\n/// @return result The binary logarithm as a UD60x18 number.\\n/// @custom:smtchecker abstract-function-nondet\\nfunction log2(UD60x18 x) pure returns (UD60x18 result) {\\n    uint256 xUint = x.unwrap();\\n\\n    if (xUint < uUNIT) {\\n        revert Errors.PRBMath_UD60x18_Log_InputTooSmall(x);\\n    }\\n\\n    unchecked {\\n        // Calculate the integer part of the logarithm.\\n        uint256 n = Common.msb(xUint / uUNIT);\\n\\n        // This is the integer part of the logarithm as a UD60x18 number. The operation can't overflow because n\\n        // n is at most 255 and UNIT is 1e18.\\n        uint256 resultUint = n * uUNIT;\\n\\n        // Calculate $y = x * 2^{-n}$.\\n        uint256 y = xUint >> n;\\n\\n        // If y is the unit number, the fractional part is zero.\\n        if (y == uUNIT) {\\n            return wrap(resultUint);\\n        }\\n\\n        // Calculate the fractional part via the iterative approximation.\\n        // The `delta >>= 1` part is equivalent to `delta /= 2`, but shifting bits is more gas efficient.\\n        uint256 DOUBLE_UNIT = 2e18;\\n        for (uint256 delta = uHALF_UNIT; delta > 0; delta >>= 1) {\\n            y = (y * y) / uUNIT;\\n\\n            // Is y^2 >= 2e18 and so in the range [2e18, 4e18)?\\n            if (y >= DOUBLE_UNIT) {\\n                // Add the 2^{-m} factor to the logarithm.\\n                resultUint += delta;\\n\\n                // Halve y, which corresponds to z/2 in the Wikipedia article.\\n                y >>= 1;\\n            }\\n        }\\n        result = wrap(resultUint);\\n    }\\n}\\n\\n/// @notice Multiplies two UD60x18 numbers together, returning a new UD60x18 number.\\n///\\n/// @dev Uses {Common.mulDiv} to enable overflow-safe multiplication and division.\\n///\\n/// Notes:\\n/// - Refer to the notes in {Common.mulDiv}.\\n///\\n/// Requirements:\\n/// - Refer to the requirements in {Common.mulDiv}.\\n///\\n/// @dev See the documentation in {Common.mulDiv18}.\\n/// @param x The multiplicand as a UD60x18 number.\\n/// @param y The multiplier as a UD60x18 number.\\n/// @return result The product as a UD60x18 number.\\n/// @custom:smtchecker abstract-function-nondet\\nfunction mul(UD60x18 x, UD60x18 y) pure returns (UD60x18 result) {\\n    result = wrap(Common.mulDiv18(x.unwrap(), y.unwrap()));\\n}\\n\\n/// @notice Raises x to the power of y.\\n///\\n/// For $1 \\\\leq x \\\\leq \\\\infty$, the following standard formula is used:\\n///\\n/// $$\\n/// x^y = 2^{log_2{x} * y}\\n/// $$\\n///\\n/// For $0 \\\\leq x \\\\lt 1$, since the unsigned {log2} is undefined, an equivalent formula is used:\\n///\\n/// $$\\n/// i = \\\\frac{1}{x}\\n/// w = 2^{log_2{i} * y}\\n/// x^y = \\\\frac{1}{w}\\n/// $$\\n///\\n/// @dev Notes:\\n/// - Refer to the notes in {log2} and {mul}.\\n/// - Returns `UNIT` for 0^0.\\n/// - It may not perform well with very small values of x. Consider using SD59x18 as an alternative.\\n///\\n/// Requirements:\\n/// - Refer to the requirements in {exp2}, {log2}, and {mul}.\\n///\\n/// @param x The base as a UD60x18 number.\\n/// @param y The exponent as a UD60x18 number.\\n/// @return result The result as a UD60x18 number.\\n/// @custom:smtchecker abstract-function-nondet\\nfunction pow(UD60x18 x, UD60x18 y) pure returns (UD60x18 result) {\\n    uint256 xUint = x.unwrap();\\n    uint256 yUint = y.unwrap();\\n\\n    // If both x and y are zero, the result is `UNIT`. If just x is zero, the result is always zero.\\n    if (xUint == 0) {\\n        return yUint == 0 ? UNIT : ZERO;\\n    }\\n    // If x is `UNIT`, the result is always `UNIT`.\\n    else if (xUint == uUNIT) {\\n        return UNIT;\\n    }\\n\\n    // If y is zero, the result is always `UNIT`.\\n    if (yUint == 0) {\\n        return UNIT;\\n    }\\n    // If y is `UNIT`, the result is always x.\\n    else if (yUint == uUNIT) {\\n        return x;\\n    }\\n\\n    // If x is greater than `UNIT`, use the standard formula.\\n    if (xUint > uUNIT) {\\n        result = exp2(mul(log2(x), y));\\n    }\\n    // Conversely, if x is less than `UNIT`, use the equivalent formula.\\n    else {\\n        UD60x18 i = wrap(uUNIT_SQUARED / xUint);\\n        UD60x18 w = exp2(mul(log2(i), y));\\n        result = wrap(uUNIT_SQUARED / w.unwrap());\\n    }\\n}\\n\\n/// @notice Raises x (a UD60x18 number) to the power y (an unsigned basic integer) using the well-known\\n/// algorithm \\\"exponentiation by squaring\\\".\\n///\\n/// @dev See https://en.wikipedia.org/wiki/Exponentiation_by_squaring.\\n///\\n/// Notes:\\n/// - Refer to the notes in {Common.mulDiv18}.\\n/// - Returns `UNIT` for 0^0.\\n///\\n/// Requirements:\\n/// - The result must fit in UD60x18.\\n///\\n/// @param x The base as a UD60x18 number.\\n/// @param y The exponent as a uint256.\\n/// @return result The result as a UD60x18 number.\\n/// @custom:smtchecker abstract-function-nondet\\nfunction powu(UD60x18 x, uint256 y) pure returns (UD60x18 result) {\\n    // Calculate the first iteration of the loop in advance.\\n    uint256 xUint = x.unwrap();\\n    uint256 resultUint = y & 1 > 0 ? xUint : uUNIT;\\n\\n    // Equivalent to `for(y /= 2; y > 0; y /= 2)`.\\n    for (y >>= 1; y > 0; y >>= 1) {\\n        xUint = Common.mulDiv18(xUint, xUint);\\n\\n        // Equivalent to `y % 2 == 1`.\\n        if (y & 1 > 0) {\\n            resultUint = Common.mulDiv18(resultUint, xUint);\\n        }\\n    }\\n    result = wrap(resultUint);\\n}\\n\\n/// @notice Calculates the square root of x using the Babylonian method.\\n///\\n/// @dev See https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method.\\n///\\n/// Notes:\\n/// - The result is rounded toward zero.\\n///\\n/// Requirements:\\n/// - x must be less than `MAX_UD60x18 / UNIT`.\\n///\\n/// @param x The UD60x18 number for which to calculate the square root.\\n/// @return result The result as a UD60x18 number.\\n/// @custom:smtchecker abstract-function-nondet\\nfunction sqrt(UD60x18 x) pure returns (UD60x18 result) {\\n    uint256 xUint = x.unwrap();\\n\\n    unchecked {\\n        if (xUint > uMAX_UD60x18 / uUNIT) {\\n            revert Errors.PRBMath_UD60x18_Sqrt_Overflow(x);\\n        }\\n        // Multiply x by `UNIT` to account for the factor of `UNIT` picked up when multiplying two UD60x18 numbers.\\n        // In this case, the two numbers are both the square root.\\n        result = wrap(Common.sqrt(xUint * uUNIT));\\n    }\\n}\\n\"\r\n    },\r\n    \"@prb/math/src/ud60x18/ValueType.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.19;\\n\\nimport \\\"./Casting.sol\\\" as Casting;\\nimport \\\"./Helpers.sol\\\" as Helpers;\\nimport \\\"./Math.sol\\\" as Math;\\n\\n/// @notice The unsigned 60.18-decimal fixed-point number representation, which can have up to 60 digits and up to 18\\n/// decimals. The values of this are bound by the minimum and the maximum values permitted by the Solidity type uint256.\\n/// @dev The value type is defined here so it can be imported in all other files.\\ntype UD60x18 is uint256;\\n\\n/*//////////////////////////////////////////////////////////////////////////\\n                                    CASTING\\n//////////////////////////////////////////////////////////////////////////*/\\n\\nusing {\\n    Casting.intoSD1x18,\\n    Casting.intoUD2x18,\\n    Casting.intoSD59x18,\\n    Casting.intoUint128,\\n    Casting.intoUint256,\\n    Casting.intoUint40,\\n    Casting.unwrap\\n} for UD60x18 global;\\n\\n/*//////////////////////////////////////////////////////////////////////////\\n                            MATHEMATICAL FUNCTIONS\\n//////////////////////////////////////////////////////////////////////////*/\\n\\n// The global \\\"using for\\\" directive makes the functions in this library callable on the UD60x18 type.\\nusing {\\n    Math.avg,\\n    Math.ceil,\\n    Math.div,\\n    Math.exp,\\n    Math.exp2,\\n    Math.floor,\\n    Math.frac,\\n    Math.gm,\\n    Math.inv,\\n    Math.ln,\\n    Math.log10,\\n    Math.log2,\\n    Math.mul,\\n    Math.pow,\\n    Math.powu,\\n    Math.sqrt\\n} for UD60x18 global;\\n\\n/*//////////////////////////////////////////////////////////////////////////\\n                                HELPER FUNCTIONS\\n//////////////////////////////////////////////////////////////////////////*/\\n\\n// The global \\\"using for\\\" directive makes the functions in this library callable on the UD60x18 type.\\nusing {\\n    Helpers.add,\\n    Helpers.and,\\n    Helpers.eq,\\n    Helpers.gt,\\n    Helpers.gte,\\n    Helpers.isZero,\\n    Helpers.lshift,\\n    Helpers.lt,\\n    Helpers.lte,\\n    Helpers.mod,\\n    Helpers.neq,\\n    Helpers.not,\\n    Helpers.or,\\n    Helpers.rshift,\\n    Helpers.sub,\\n    Helpers.uncheckedAdd,\\n    Helpers.uncheckedSub,\\n    Helpers.xor\\n} for UD60x18 global;\\n\\n/*//////////////////////////////////////////////////////////////////////////\\n                                    OPERATORS\\n//////////////////////////////////////////////////////////////////////////*/\\n\\n// The global \\\"using for\\\" directive makes it possible to use these operators on the UD60x18 type.\\nusing {\\n    Helpers.add as +,\\n    Helpers.and2 as &,\\n    Math.div as /,\\n    Helpers.eq as ==,\\n    Helpers.gt as >,\\n    Helpers.gte as >=,\\n    Helpers.lt as <,\\n    Helpers.lte as <=,\\n    Helpers.or as |,\\n    Helpers.mod as %,\\n    Math.mul as *,\\n    Helpers.neq as !=,\\n    Helpers.not as ~,\\n    Helpers.sub as -,\\n    Helpers.xor as ^\\n} for UD60x18 global;\\n\"\r\n    },\r\n    \"contracts/common/CommonEventsAndErrors.sol\": {\r\n      \"content\": \"pragma solidity 0.8.19;\\n// SPDX-License-Identifier: AGPL-3.0-or-later\\n// Temple (common/CommonEventsAndErrors.sol)\\n\\n/// @notice A collection of common errors thrown within the Temple contracts\\nlibrary CommonEventsAndErrors {\\n    error InsufficientBalance(address token, uint256 required, uint256 balance);\\n    error InvalidParam();\\n    error InvalidAddress();\\n    error InvalidAccess();\\n    error InvalidAmount(address token, uint256 amount);\\n    error ExpectedNonZero();\\n    error Unimplemented();\\n    event TokenRecovered(address indexed to, address indexed token, uint256 amount);\\n}\\n\"\r\n    },\r\n    \"contracts/common/SafeCast.sol\": {\r\n      \"content\": \"pragma solidity 0.8.19;\\n// SPDX-License-Identifier: AGPL-3.0-or-later\\n// Temple (common/SafeCast.sol)\\n\\nlibrary SafeCast {\\n    error Overflow(uint256 amount);\\n\\n    function encodeUInt128(uint256 amount) internal pure returns (uint128) {\\n        if (amount > type(uint128).max) {\\n            revert Overflow(amount);\\n        }\\n        return uint128(amount);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/v2/access/ITempleElevatedAccess.sol\": {\r\n      \"content\": \"pragma solidity 0.8.19;\\n// SPDX-License-Identifier: AGPL-3.0-or-later\\n// Temple (interfaces/v2/access/ITempleElevatedAccess.sol)\\n\\n/**\\n * @notice Inherit to add Executor and Rescuer roles for DAO elevated access.\\n */ \\ninterface ITempleElevatedAccess {\\n    event ExplicitAccessSet(address indexed account, bytes4 indexed fnSelector, bool indexed value);\\n    event RescueModeSet(bool indexed value);\\n\\n    event NewRescuerProposed(address indexed oldRescuer, address indexed oldProposedRescuer, address indexed newProposedRescuer);\\n    event NewRescuerAccepted(address indexed oldRescuer, address indexed newRescuer);\\n\\n    event NewExecutorProposed(address indexed oldExecutor, address indexed oldProposedExecutor, address indexed newProposedExecutor);\\n    event NewExecutorAccepted(address indexed oldExecutor, address indexed newExecutor);\\n\\n    struct ExplicitAccess {\\n        bytes4 fnSelector;\\n        bool allowed;\\n    }\\n\\n    /**\\n     * @notice A set of addresses which are approved to execute emergency operations.\\n     */ \\n    function rescuer() external returns (address);\\n\\n    /**\\n     * @notice A set of addresses which are approved to execute normal operations on behalf of the DAO.\\n     */ \\n    function executor() external returns (address);\\n\\n    /**\\n     * @notice Explicit approval for an address to execute a function.\\n     * allowedCaller => function selector => true/false\\n     */\\n    function explicitFunctionAccess(address contractAddr, bytes4 functionSelector) external returns (bool);\\n\\n    /**\\n     * @notice Under normal circumstances, rescuers don't have access to admin/operational functions.\\n     * However when rescue mode is enabled (by rescuers or executors), they claim the access rights.\\n     */\\n    function inRescueMode() external returns (bool);\\n    \\n    /**\\n     * @notice Set the contract into or out of rescue mode.\\n     * Only the rescuers or executors are allowed to set.\\n     */\\n    function setRescueMode(bool value) external;\\n\\n    /**\\n     * @notice Proposes a new Rescuer.\\n     * Can only be called by the current rescuer.\\n     */\\n    function proposeNewRescuer(address account) external;\\n\\n    /**\\n     * @notice Caller accepts the role as new Rescuer.\\n     * Can only be called by the proposed rescuer\\n     */\\n    function acceptRescuer() external;\\n\\n    /**\\n     * @notice Proposes a new Executor.\\n     * Can only be called by the current executor or resucer (if in resuce mode)\\n     */\\n    function proposeNewExecutor(address account) external;\\n\\n    /**\\n     * @notice Caller accepts the role as new Executor.\\n     * Can only be called by the proposed executor\\n     */\\n    function acceptExecutor() external;\\n\\n    /**\\n     * @notice Grant `allowedCaller` the rights to call the function selectors in the access list.\\n     * @dev fnSelector == bytes4(keccak256(\\\"fn(argType1,argType2,...)\\\"))\\n     */\\n    function setExplicitAccess(address allowedCaller, ExplicitAccess[] calldata access) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/v2/circuitBreaker/ITempleCircuitBreaker.sol\": {\r\n      \"content\": \"pragma solidity 0.8.19;\\n// SPDX-License-Identifier: AGPL-3.0-or-later\\n// Temple (interfaces/v2/circuitBreaker/ITempleCircuitBreaker.sol)\\n\\nimport { ITempleElevatedAccess } from \\\"contracts/interfaces/v2/access/ITempleElevatedAccess.sol\\\";\\n\\n/**\\n * @title Temple Circuit Breaker\\n * \\n * @notice A circuit breaker can perform checks and record state for transactions which have\\n * already happened cumulative totals, totals within a rolling period window,\\n * sender specific totals, etc.\\n */\\ninterface ITempleCircuitBreaker is ITempleElevatedAccess {\\n\\n    /**\\n     * @notice Verify the new amount requested for the sender does not breach the\\n     * cap in this rolling period.\\n     */\\n    function preCheck(address onBehalfOf, uint256 amount) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/v2/circuitBreaker/ITempleCircuitBreakerProxy.sol\": {\r\n      \"content\": \"pragma solidity 0.8.19;\\n// SPDX-License-Identifier: AGPL-3.0-or-later\\n// Temple (interfaces/v2/circuitBreaker/ITempleCircuitBreakerProxy.sol)\\n\\nimport { ITempleElevatedAccess } from \\\"contracts/interfaces/v2/access/ITempleElevatedAccess.sol\\\";\\nimport { ITempleCircuitBreaker } from \\\"contracts/interfaces/v2/circuitBreaker/ITempleCircuitBreaker.sol\\\";\\n\\n/**\\n * @title Temple Circuit Breaker Proxy\\n * \\n * @notice Direct circuit breaker requests to the correct underlying implementation,\\n * based on a pre-defined bytes32 identifier, and a token.\\n */\\ninterface ITempleCircuitBreakerProxy is ITempleElevatedAccess {\\n    event CircuitBreakerSet(bytes32 indexed identifier, address indexed token, address circuitBreaker);\\n    event IdentifierForCallerSet(address indexed caller, string identifierString, bytes32 identifier);\\n\\n    /**\\n     * @notice A calling contract of the circuit breaker (eg TLC) is mapped to an identifier\\n     * which means circuit breaker caps can be shared across multiple callers.\\n     */\\n    function callerToIdentifier(address) external view returns (bytes32);\\n\\n    /**\\n     * @notice The mapping of a (identifier, tokenAddress) tuple to the underlying circuit breaker contract\\n     */\\n    function circuitBreakers(\\n        bytes32 identifier, \\n        address token\\n    ) external view returns (ITempleCircuitBreaker);\\n\\n    /**\\n     * @notice Set the identifier for a given caller of the circuit breaker. These identifiers\\n     * can be shared, such that multiple contracts share the same cap limits for a given token.\\n     */\\n    function setIdentifierForCaller(\\n        address caller, \\n        string memory identifierString\\n    ) external;\\n\\n    /**\\n     * @notice Set the address of the circuit breaker for a particular identifier and token\\n     */\\n    function setCircuitBreaker(\\n        bytes32 identifier,\\n        address token,\\n        address circuitBreaker\\n    ) external;\\n\\n    /**\\n     * @notice For a given identifier & token, verify the new amount requested for the sender does not breach the\\n     * cap in this rolling period.\\n     */\\n    function preCheck(\\n        address token,\\n        address onBehalfOf,\\n        uint256 amount\\n    ) external;\\n\\n    /**\\n     * @notice The set of all identifiers registered\\n     */\\n    function identifiers() external view returns (bytes32[] memory);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/v2/interestRate/IInterestRateModel.sol\": {\r\n      \"content\": \"pragma solidity 0.8.19;\\n// SPDX-License-Identifier: AGPL-3.0-or-later\\n// Temple (interfaces/v2/interestRate/IInterestRateModel.sol)\\n\\ninterface IInterestRateModel {\\n    /**\\n     * @notice Calculates the current interest rate based on a utilization ratio\\n     * @param utilizationRatio The utilization ratio scaled to `PRECISION`\\n     * @return interestRate The interest rate (scaled by PRECISION). 0.05e18 == 5%\\n     */\\n    function calculateInterestRate(\\n        uint256 utilizationRatio\\n    ) external view returns (uint96 interestRate);\\n}\"\r\n    },\r\n    \"contracts/interfaces/v2/ITempleDebtToken.sol\": {\r\n      \"content\": \"pragma solidity 0.8.19;\\n// SPDX-License-Identifier: AGPL-3.0-or-later\\n// Temple (interfaces/v2/ITempleDebtToken.sol)\\n\\nimport { IERC20, IERC20Metadata } from \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport { ITempleElevatedAccess } from \\\"contracts/interfaces/v2/access/ITempleElevatedAccess.sol\\\";\\n\\ninterface ITempleDebtToken is IERC20, IERC20Metadata, ITempleElevatedAccess {\\n    error NonTransferrable();\\n    error CannotMintOrBurn(address caller);\\n\\n    event BaseInterestRateSet(uint96 rate);\\n    event RiskPremiumInterestRateSet(address indexed debtor, uint96 rate);\\n    event AddedMinter(address indexed account);\\n    event RemovedMinter(address indexed account);\\n    event DebtorBalance(address indexed debtor, uint128 principal, uint128 baseInterest, uint128 riskPremiumInterest);\\n\\n    /**\\n     * @notice Track the deployed version of this contract. \\n     */\\n    function version() external view returns (string memory);\\n\\n    /**\\n     * @notice The current (base rate) interest common for all users. This can be updated by governance\\n     * @dev 1e18 format, where 0.01e18 = 1%\\n     */\\n    function baseRate() external view returns (uint96);\\n\\n    /**\\n     * @notice The last checkpoint time of the (base rate) principal and interest checkpoint\\n     */\\n    function baseCheckpointTime() external view returns (uint32);\\n\\n    /**\\n     * @notice The (base rate) total principal and interest owed across all debtors as of the latest checkpoint\\n     */\\n    function baseCheckpoint() external view returns (uint128);\\n\\n    /**\\n     * @notice The (base rate) total number of shares allocated out to users for internal book keeping\\n     */\\n    function baseShares() external view returns (uint128);\\n\\n    /**\\n     * @notice The net amount of principal amount of debt minted across all users.\\n     */\\n    function totalPrincipal() external view returns (uint128);\\n\\n    /**\\n     * @notice The latest estimate of the (risk premium) interest (no principal) owed.\\n     * @dev Indicative only. This total is only updated on a per strategy basis when that strategy gets \\n     * checkpointed (on borrow/repay rate change).\\n     * So it is generally always going to be out of date as each strategy will accrue interest independently \\n     * on different rates.\\n     */\\n    function estimatedTotalRiskPremiumInterest() external view returns (uint128);\\n\\n    /// @dev byte packed into two slots.\\n    struct Debtor {\\n        /// @notice The current principal owed by this debtor\\n        uint128 principal;\\n\\n        /// @notice The number of this shares this debtor is allocated of the base interest.\\n        uint128 baseShares;\\n\\n        /// @notice The current (risk premium) interest rate specific to this debtor. This can be updated by governance\\n        /// @dev 1e18 format, where 0.01e18 = 1%\\n        uint96 rate;\\n\\n        /// @notice The debtor's (risk premium only) interest (no principal or base interest) owed as of the last checkpoint\\n        uint128 checkpoint;\\n\\n        /// @notice The last checkpoint time of this debtor's (risk premium) interest\\n        /// @dev uint32 => max time of Feb 7 2106\\n        uint32 checkpointTime;\\n    }\\n\\n    /**\\n     * @notice Per address status of debt\\n     */\\n    function debtors(address account) external view returns (\\n        /// @notice The current principal owed by this debtor\\n        uint128 principal,\\n\\n        /// @notice The number of this shares this debtor is allocated of the base interest.\\n        uint128 baseShares,\\n\\n        /// @notice The current (risk premium) interest rate specific to this debtor. This can be updated by governance\\n        /// @dev 1e18 format, where 0.01e18 = 1%\\n        uint96 rate,\\n\\n        /// @notice The debtor's (risk premium only) interest (no principal or base interest) owed as of the last checkpoint\\n        uint128 checkpoint,\\n\\n        /// @notice The last checkpoint time of this debtor's (risk premium) interest\\n        uint32 checkpointTime\\n    );\\n\\n    /// @notice A set of addresses which are approved to mint/burn\\n    function minters(address account) external view returns (bool);\\n\\n    /**\\n     * @notice Governance can add an address which is able to mint or burn debt\\n     * positions on behalf of users.\\n     */\\n    function addMinter(address account) external;\\n\\n    /**\\n     * @notice Governance can remove an address which is able to mint or burn debt\\n     * positions on behalf of users.\\n     */\\n    function removeMinter(address account) external;\\n\\n    /**\\n     * @notice Governance can update the continuously compounding (base) interest rate of all debtors, from this block onwards.\\n     */\\n    function setBaseInterestRate(uint96 _rate) external;\\n\\n    /**\\n     * @notice Governance can update the continuously compounding (risk premium) interest rate for a given debtor, from this block onwards\\n     */\\n    function setRiskPremiumInterestRate(address _debtor, uint96 _rate) external;\\n\\n    /**\\n     * @notice Approved Minters can add a new debt position on behalf of a user.\\n     * @param _debtor The address of the debtor who is issued new debt\\n     * @param _mintAmount The notional amount of debt tokens to issue.\\n     */\\n    function mint(address _debtor, uint256 _mintAmount) external;\\n\\n    /**\\n     * @notice Approved Minters can burn debt on behalf of a user.\\n     * @dev Interest is repaid in preference:\\n     *   1/ Firstly to the higher interest rate of (baseRate, debtor risk premium rate)\\n     *   2/ Any remaining of the repayment is then paid of the other interest amount.\\n     *   3/ Finally if there is still some repayment amount unallocated, \\n     *      then the principal will be paid down. This is like a new debt is issued for the lower balance,\\n     *      where interest accrual starts fresh.\\n     * More debt than the user has cannot be burned - it is capped. The actual amount burned is returned\\n     * @param _debtor The address of the debtor\\n     * @param _burnAmount The notional amount of debt tokens to repay.\\n     */\\n    function burn(address _debtor, uint256 _burnAmount) external returns (uint256 burnedAmount);\\n\\n    /**\\n     * @notice Approved Minters can burn the entire debt on behalf of a user.\\n     * @param _debtor The address of the debtor\\n     */\\n    function burnAll(address _debtor) external returns (uint256 burnedAmount);\\n\\n    /**\\n     * @notice Checkpoint the base interest owed by all debtors up to this block.\\n     */\\n    function checkpointBaseInterest() external returns (uint256);\\n\\n    /**\\n     * @notice Checkpoint a debtor's (risk premium) interest (no principal) owed up to this block.\\n     */\\n    function checkpointDebtorInterest(address debtor) external returns (uint256);\\n\\n    /**\\n     * @notice Checkpoint multiple accounts (risk premium) interest (no principal) owed up to this block.\\n     * @dev Provided in case there needs to be block synchronisation on the total debt.\\n     */\\n    function checkpointDebtorsInterest(address[] calldata _debtors) external;\\n\\n    struct DebtOwed {\\n        uint256 principal;\\n        uint256 baseInterest;\\n        uint256 riskPremiumInterest;\\n    }\\n\\n    /**\\n     * @notice The current debt for a given user split out by\\n     * principal, base interest, risk premium (per debtor) interest\\n     */\\n    function currentDebtOf(address _debtor) external view returns (\\n        DebtOwed memory debtOwed\\n    );\\n\\n    /**\\n     * @notice The current debt for a given set of users split out by\\n     * principal, base interest, risk premium (per debtor) interest\\n     */\\n    function currentDebtsOf(address[] calldata _debtors) external view returns (\\n        DebtOwed[] memory debtsOwed\\n    );\\n\\n    /**\\n      * @notice The current total principal + total base interest, total (estimate) debtor specific risk premium interest owed by all debtors.\\n      * @dev Note the (total principal + total base interest) portion is up to date.\\n      * However the (debtor specific risk premium interest) portion is likely stale.\\n      * The `estimatedTotalDebtorInterest` is only updated when each debtor checkpoints, so it's going to be out of date.\\n      * For more up to date current totals, off-chain aggregation of balanceOf() will be required - eg via subgraph.\\n      */\\n    function currentTotalDebt() external view returns (\\n        DebtOwed memory debtOwed\\n    );\\n\\n    /**\\n     * @notice Convert a (base interest) debt amount into proportional amount of shares\\n     */\\n    function baseDebtToShares(uint128 debt) external view returns (uint128);\\n\\n    /**\\n     * @notice Convert a number of (base interest) shares into proportional amount of debt\\n     */\\n    function baseSharesToDebt(uint128 shares) external view returns (uint128);\\n}\"\r\n    },\r\n    \"contracts/interfaces/v2/ITreasuryPriceIndexOracle.sol\": {\r\n      \"content\": \"pragma solidity 0.8.19;\\n// SPDX-License-Identifier: AGPL-3.0-or-later\\n// Temple (interfaces/v2/ITreasuryPriceIndexOracle.sol)\\n\\nimport { ITempleElevatedAccess } from \\\"contracts/interfaces/v2/access/ITempleElevatedAccess.sol\\\";\\n\\n/**\\n * @title Treasury Price Index Oracle\\n * @notice The custom oracle (not dependant on external markets/AMMs/dependencies) to give the\\n * Treasury Price Index, representing the target Treasury Value per token.\\n * This rate is updated manually with elevated permissions. The new TPI doesn't take effect until after a cooldown.\\n */\\ninterface ITreasuryPriceIndexOracle is ITempleElevatedAccess {\\n    event TreasuryPriceIndexSet(uint96 oldTpi, uint96 newTpi);\\n    event TpiCooldownSet(uint32 cooldownSecs);\\n    event MaxTreasuryPriceIndexDeltaSet(uint256 maxDelta);\\n\\n    error BreachedMaxTpiDelta(uint96 oldTpi, uint96 newTpi, uint256 maxDelta);\\n\\n    /**\\n     * @notice The current Treasury Price Index (TPI) value\\n     * @dev If the TPI has just been updated, the old TPI will be used until `cooldownSecs` has elapsed\\n     */\\n    function treasuryPriceIndex() external view returns (uint96);\\n\\n    /**\\n     * @notice The maximum allowed TPI change on any single `setTreasuryPriceIndex()`, in absolute terms.\\n     * @dev Used as a bound to avoid unintended/fat fingering when updating TPI\\n     */\\n    function maxTreasuryPriceIndexDelta() external view returns (uint256);\\n\\n    /**\\n     * @notice The current internal TPI data along with when it was last reset, and the prior value\\n     */\\n    function tpiData() external view returns (\\n        uint96 currentTpi,\\n        uint96 previousTpi,\\n        uint32 lastUpdatedAt,\\n        uint32 cooldownSecs\\n    );\\n\\n    /**\\n     * @notice Set the Treasury Price Index (TPI)\\n     */\\n    function setTreasuryPriceIndex(uint96 value) external;\\n\\n    /**\\n     * @notice Set the number of seconds to elapse before a new TPI will take effect.\\n     */\\n    function setTpiCooldown(uint32 cooldownSecs) external;\\n\\n    /**\\n     * @notice Set the maximum allowed TPI change on any single `setTreasuryPriceIndex()`, in absolute terms.\\n     * @dev 18 decimal places, 0.20e18 == $0.20\\n     */\\n    function setMaxTreasuryPriceIndexDelta(uint256 maxDelta) external;\\n\\n    /**\\n     * @notice The decimal precision of Temple Price Index (TPI)\\n     * @dev 18 decimals, so 1.02e18 == $1.02\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function TPI_DECIMALS() external view returns (uint256);\\n}\"\r\n    },\r\n    \"contracts/interfaces/v2/ITreasuryReservesVault.sol\": {\r\n      \"content\": \"pragma solidity 0.8.19;\\n// SPDX-License-Identifier: AGPL-3.0-or-later\\n// Temple (interfaces/v2/ITreasuryReservesVault.sol)\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport { ITempleDebtToken } from \\\"contracts/interfaces/v2/ITempleDebtToken.sol\\\";\\nimport { ITempleStrategy } from \\\"contracts/interfaces/v2/strategies/ITempleStrategy.sol\\\";\\nimport { ITempleBaseStrategy } from \\\"contracts/interfaces/v2/strategies/ITempleBaseStrategy.sol\\\";\\nimport { ITempleElevatedAccess } from \\\"contracts/interfaces/v2/access/ITempleElevatedAccess.sol\\\";\\nimport { ITreasuryPriceIndexOracle } from \\\"contracts/interfaces/v2/ITreasuryPriceIndexOracle.sol\\\";\\n\\n/**\\n * @title Treasury Reserves Vault (TRV)\\n *\\n * @notice Temple has various strategies which utilise the treasury funds to generate \\n * gains for token holders.\\n * \\n * The maximum amount of funds allocated to each strategy is determined by governance, \\n * and then each strategy can borrow/repay as required (up to the cap).\\n * \\n * When strategies borrow funds, they are issued `dToken`, an accruing debt token representing\\n * the debt to the temple treasury. This is used to compare strategies performance, where\\n * we can determine an equity value (assets - debt).\\n *\\n *    Strategies can borrow different types of tokens from the TRV, and are minted equivalent internal debt tokens eg:\\n *      DAI => minted dUSD\\n *      TEMPLE => minted dTEMPLE\\n *      ETH => minted dETH\\n *   \\n *   Each of the dTokens are compounding at different risk free rates, eg:\\n *      dUSD: At DAIs Savings Rate (DSR)\\n *      dTEMPLE: 0% interest (no opportunity cost)\\n *      dETH: ~avg LST rate\\n *   \\n *   And so each token which can be borrowed has separate config on how to pull/deposit idle funds.\\n *   For example, this may be:\\n *      DAI => DSR base strategy\\n *      TEMPLE => direct Temple mint/burn \\n *      ETH => just hold in a vault\\n */\\ninterface ITreasuryReservesVault is ITempleElevatedAccess {\\n    event GlobalPausedSet(bool borrow, bool repay);\\n    event StrategyPausedSet(address indexed strategy, bool borrow, bool repay);\\n\\n    event StrategyAdded(address indexed strategy, int256 underperformingEquityThreshold);\\n    event StrategyRemoved(address indexed strategy);\\n    event DebtCeilingUpdated(address indexed strategy, address indexed token, uint256 oldDebtCeiling, uint256 newDebtCeiling);\\n    event UnderperformingEquityThresholdUpdated(address indexed strategy, int256 oldThreshold, int256 newThreshold);\\n    event StrategyIsShuttingDownSet(address indexed strategy, bool isShuttingDown);\\n    event StrategyShutdownCreditAndDebt(address indexed strategy, address indexed token, uint256 outstandingCredit, uint256 outstandingDebt);\\n    event StrategyCreditAndDebtBalance(address indexed strategy, address indexed token, uint256 credit, uint256 debt);\\n\\n    event BorrowTokenSet(address indexed token, address baseStrategy, uint256 baseStrategyWithdrawalBuffer, uint256 baseStrategyDepositThreshold, address dToken);\\n    event BorrowTokenRemoved(address indexed token);\\n\\n    event Borrow(address indexed strategy, address indexed token, address indexed recipient, uint256 amount);\\n    event Repay(address indexed strategy, address indexed token, address indexed from, uint256 amount);\\n\\n    event TpiOracleSet(address indexed tpiOracle);\\n\\n    error BorrowTokenNotEnabled();\\n    error StrategyNotEnabled();\\n\\n    error AlreadyEnabled();\\n    error BorrowPaused();\\n    error RepaysPaused();\\n    error StrategyIsShutdown();\\n    error DebtCeilingBreached(uint256 available, uint256 borrowAmount);\\n    error NotShuttingDown();\\n\\n    struct BorrowTokenConfig {\\n        /**\\n         * @notice The base strategy used to hold idle treasury funds\\n         */\\n        ITempleBaseStrategy baseStrategy;\\n\\n        /**\\n         * @notice A buffer of tokens are maintained in the TRV such that it doesn't have to churn through small base strategy\\n         * deposits/withdrawals. \\n         * On a borrow if tokens need to be pulled from the base strategy, more than the requested amount is withdrawn such that\\n         * this extra buffer of tokens ends up in the TRV\\n         */\\n        uint256 baseStrategyWithdrawalBuffer;\\n\\n        /**\\n         * @notice When repayments are made to the TRV, tokens are only deposited into the base strategy once this threshold is met.\\n         * The amount deposited will ensure that the `baseStrategyWithdrawalBuffer` amount remains in the TRV\\n         */\\n        uint256 baseStrategyDepositThreshold;\\n\\n        /**\\n         * @notice The address of the internal debt token for this borrow token\\n         * @dev eg Temple => dTEMPLE, DAI => dUSD\\n         */\\n        ITempleDebtToken dToken;\\n    }\\n    \\n    struct StrategyConfig {\\n        /**\\n         * @notice Pause borrows\\n         */\\n        bool borrowPaused;\\n\\n        /**\\n         * @notice Pause repayments\\n         */\\n        bool repaysPaused;\\n\\n        /**\\n         * @notice Governance nominates this strategy to be shutdown.\\n         * The strategy executor then needs to unwind (may be manual) \\n         * and the strategy needs to then call shutdown() when ready.\\n         */\\n        bool isShuttingDown;\\n\\n        /**\\n         * @notice Each strategy will have a different threshold of expected performance.\\n         * This underperforming threshold is used for reporting to determine if the strategy is underperforming.\\n         */\\n        int256 underperformingEquityThreshold;\\n\\n        /**\\n         * @notice The strategy can borrow up to this limit of accrued debt for each token.\\n         * The `dToken` is minted on any borrows 1:1 (which then accrues interest)\\n         * When a strategy repays, the `dToken` is burned 1:1\\n         */\\n        mapping(IERC20 => uint256) debtCeiling;\\n\\n        /**\\n         * @notice The tokens that this strategy is allowed to borrow from TRV\\n         * @dev This must be one of the configured Borrow Tokens\\n         */\\n        mapping(IERC20 => bool) enabledBorrowTokens;\\n    }\\n\\n    /**\\n     * @notice True if all borrows are paused for all strategies.\\n     */\\n    function globalBorrowPaused() external view returns (bool);\\n\\n    /**\\n     * @notice True if all repayments are paused for all strategies.\\n     */\\n    function globalRepaysPaused() external view returns (bool);\\n\\n    /**\\n     * @notice The configuration for a given strategy\\n     */\\n    function strategies(address strategy) external view returns (\\n        bool borrowPaused,\\n        bool repaysPaused,\\n        bool isShuttingDown,\\n        int256 underperformingEquityThreshold\\n    );\\n\\n    /**\\n     * @notice The list of all strategies currently added to the TRV\\n     */\\n    function strategiesList() external view returns (address[] memory);\\n\\n    /**\\n     * @notice The configuration for a given token which can be borrowed by strategies\\n     */\\n    function borrowTokens(IERC20 token) external view returns (\\n        ITempleBaseStrategy baseStrategy,\\n        uint256 baseStrategyWithdrawalBuffer,\\n        uint256 baseStrategyDepositThreshold,\\n        ITempleDebtToken dToken\\n    );\\n\\n    /**\\n     * @notice The list of all tokens which can be borrowed by the TRV\\n     */\\n    function borrowTokensList() external view returns (address[] memory);\\n\\n    /**\\n     * @notice When strategies repay a token which covers more than their dToken debt for the token\\n     * They receive credits. When they next need to borrow tokens this credit is used prior to\\n     * issuing more dTokens\\n     */\\n    function strategyTokenCredits(address strategy, IERC20 token) external view returns (uint256);\\n\\n    /**\\n     * @notice The Treasury Price Index Oracle\\n     */\\n    function tpiOracle() external view returns (ITreasuryPriceIndexOracle);\\n\\n    /**\\n     * @notice Set the Treasury Price Index (TPI) Oracle\\n     */\\n    function setTpiOracle(address tpiOracleAddress) external;\\n\\n    /**\\n     * @notice The Treasury Price Index - the target price of the Treasury, in `stableToken` terms.\\n     */\\n    function treasuryPriceIndex() external view returns (uint96);\\n\\n    /**\\n     * @notice API version to help with future integrations/migrations\\n     */\\n    function apiVersion() external pure returns (string memory);\\n\\n    /**\\n     * @notice Set the borrow token configuration. \\n     * @dev This can either add a new token or update an existing token.\\n     */\\n    function setBorrowToken(\\n        IERC20 token, \\n        address baseStrategy,\\n        uint256 baseStrategyWithdrawalBuffer,\\n        uint256 baseStrategyDepositThreshold,\\n        address dToken\\n    ) external;\\n\\n    /**\\n     * @notice Enable and/or disable tokens which a strategy can borrow from the (configured) TRV borrow tokens\\n     */\\n    function updateStrategyEnabledBorrowTokens(\\n        address strategy, \\n        IERC20[] calldata enableBorrowTokens, \\n        IERC20[] calldata disableBorrowTokens\\n    ) external;\\n\\n    /**\\n     * @notice Remove the borrow token configuration. \\n     */\\n    function removeBorrowToken(\\n        IERC20 token\\n    ) external;\\n\\n    /**\\n     * @notice A helper to collate information about a given strategy for reporting purposes.\\n     * @dev Note the current assets may not be 100% up to date, as some strategies may need to checkpoint based\\n     * on the underlying strategy protocols (eg DSR for DAI would need to checkpoint to get the latest valuation).\\n     */\\n    function strategyDetails(address strategy) external view returns (\\n        string memory name,\\n        string memory version,\\n        bool borrowPaused,\\n        bool repaysPaused,\\n        bool isShuttingDown,\\n        int256 underperformingEquityThreshold,\\n        ITempleStrategy.AssetBalance[] memory debtCeiling\\n    );\\n\\n    /**\\n     * @notice A strategy's current asset balances, any manual adjustments and the current debt\\n     * of the strategy.\\n     * \\n     * This will be used to report equity performance: `sum($assetValue +- $manualAdj) - debt`\\n     * The conversion of each asset price into the stable token (eg DAI) will be done off-chain\\n     * along with formulating the union of asset balances and manual adjustments\\n     */\\n    function strategyBalanceSheet(address strategyAddr) external view returns (\\n        ITempleStrategy.AssetBalance[] memory assetBalances,\\n        ITempleStrategy.AssetBalanceDelta[] memory manualAdjustments, \\n        ITempleStrategy.AssetBalance[] memory dTokenBalances,\\n        ITempleStrategy.AssetBalance[] memory dTokenCreditBalances\\n    );\\n\\n    /**\\n     * @notice The current max debt ceiling that a strategy is allowed to borrow up to.\\n     */\\n    function strategyDebtCeiling(address strategy, IERC20 token) external view returns (uint256);\\n    \\n    /**\\n     * @notice Whether a token is enabled to be borrowed for a given strategy\\n     */\\n    function strategyEnabledBorrowTokens(address strategy, IERC20 token) external view returns (bool);\\n\\n    /**\\n     * @notice The total available stables, both as a balance in this contract and\\n     * any available to withdraw from the baseStrategy\\n     */\\n    function totalAvailable(IERC20 token) external view returns (uint256);\\n\\n    /**\\n     * @notice The amount remaining that a strategy can borrow for a given token\\n     * taking into account: the approved debt ceiling, current dToken debt, and any credits\\n     * @dev available == min(ceiling - debt + credit, 0)\\n     */\\n    function availableForStrategyToBorrow(\\n        address strategy, \\n        IERC20 token\\n    ) external view returns (uint256);\\n\\n    /**\\n     * @notice Pause all strategy borrow and repays\\n     */\\n    function setGlobalPaused(bool borrow, bool repays) external;\\n\\n    /**\\n     * @notice Set whether borrows and repayments are paused for a given strategy.\\n     */\\n    function setStrategyPaused(address strategy, bool borrow, bool repays) external;\\n\\n    /**\\n     * @notice Register a new strategy which can borrow tokens from Treasury Reserves\\n     */\\n    function addStrategy(\\n        address strategy, \\n        int256 underperformingEquityThreshold,\\n        ITempleStrategy.AssetBalance[] calldata debtCeiling\\n    ) external;\\n\\n    /**\\n     * @notice Update the debt ceiling for a given strategy\\n     */\\n    function setStrategyDebtCeiling(address strategy, IERC20 token, uint256 newDebtCeiling) external;\\n\\n    /**\\n     * @notice Update the underperforming equity threshold.\\n     */\\n    function setStrategyUnderperformingThreshold(address strategy, int256 underperformingEquityThreshold) external;\\n\\n    /**\\n     * @notice The first step in a two-phase shutdown. Executor first sets whether a strategy is slated for shutdown.\\n     * The strategy then needs to call shutdown as a separate call once ready.\\n     */\\n    function setStrategyIsShuttingDown(address strategy, bool isShuttingDown) external;\\n\\n    /**\\n     * @notice The second step in a two-phase shutdown. A strategy (automated) or executor (manual) calls\\n     * to effect the shutdown. isShuttingDown must be true for the strategy first.\\n     * The strategy executor is responsible for unwinding all it's positions first and repaying the debt to the TRV.\\n     * All outstanding dToken debt is burned, leaving a net gain/loss of equity for the shutdown strategy.\\n     */\\n    function shutdown(address strategy) external;   \\n\\n    /**\\n     * @notice A strategy calls to request more funding.\\n     * @dev This will revert if the strategy requests more stables than it's able to borrow.\\n     * `dToken` will be minted 1:1 for the amount of stables borrowed\\n     */\\n    function borrow(IERC20 token, uint256 borrowAmount, address recipient) external;\\n\\n    /**\\n     * @notice A strategy calls to request the most funding it can.\\n     * @dev This will revert if the strategy requests more stables than it's able to borrow.\\n     * `dToken` will be minted 1:1 for the amount of stables borrowed\\n     */\\n    function borrowMax(IERC20 token, address recipient) external returns (uint256);\\n\\n    /**\\n     * @notice A strategy calls to paydown it's debt\\n     * This will pull the stables, and will burn the equivalent amount of dToken from the strategy.\\n     */\\n    function repay(IERC20 token, uint256 repayAmount, address strategy) external;\\n\\n    /**\\n     * @notice A strategy calls to paydown all of it's debt\\n     * This will pull the stables for the entire dToken balance of the strategy, and burn the dToken.\\n     */\\n    function repayAll(IERC20 token, address strategy) external returns (uint256 amountRepaid);\\n}\"\r\n    },\r\n    \"contracts/interfaces/v2/strategies/ITempleBaseStrategy.sol\": {\r\n      \"content\": \"pragma solidity 0.8.19;\\n// SPDX-License-Identifier: AGPL-3.0-or-later\\n// Temple (interfaces/v2/strategies/ITempleBaseStrategy.sol)\\n\\nimport { ITempleStrategy } from \\\"contracts/interfaces/v2/strategies/ITempleStrategy.sol\\\";\\n\\n/**\\n * @title Temple Base Strategy\\n * @notice A special Temple Strategy which is eligable to transiently apply capital\\n * into a very safe yield bearing protocol (eg DAI Savings Rate).\\n * \\n * The Treasury Reserves Vault will have permission to pull back funds from this strategy\\n * at any time, for example when another strategy wants to borrow funds.\\n */\\ninterface ITempleBaseStrategy {\\n    /**\\n     * @notice The latest checkpoint of each asset balance this strategy holds.\\n     *\\n     * @dev The asset value may be stale at any point in time, depending on the strategy. \\n     * It may optionally implement `checkpointAssetBalances()` in order to update those balances.\\n     */\\n    function latestAssetBalances() external view returns (ITempleStrategy.AssetBalance[] memory assetBalances);\\n\\n    /**\\n     * @notice The same as `borrowMax()` but for a pre-determined amount to borrow,\\n     * such that something upstream/off-chain can determine the amount.\\n     */\\n    function borrowAndDeposit(uint256 amount) external;\\n\\n    /**\\n     * @notice When the TRV has a surplus of funds (over the configured buffer threshold)\\n     * it will transfer tokens to the base strategy, and call this function to apply\\n     * the new captial.\\n     */\\n    function trvDeposit(uint256 amount) external;\\n\\n    /**\\n     * @notice The TRV is able to withdraw on demand in order to fund other strategies which \\n     * wish to borrow from the TRV.\\n     * @dev It may withdraw less than requested if there isn't enough balance in the DSR.\\n     */\\n    function trvWithdraw(uint256 requestedAmount) external returns (uint256 amountWithdrawn);\\n\\n}\"\r\n    },\r\n    \"contracts/interfaces/v2/strategies/ITempleStrategy.sol\": {\r\n      \"content\": \"pragma solidity 0.8.19;\\n// SPDX-License-Identifier: AGPL-3.0-or-later\\n// Temple (interfaces/v2/strategies/ITempleStrategy.sol)\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport { ITreasuryReservesVault } from \\\"contracts/interfaces/v2/ITreasuryReservesVault.sol\\\";\\nimport { ITempleElevatedAccess } from \\\"contracts/interfaces/v2/access/ITempleElevatedAccess.sol\\\";\\n\\n/**\\n * @title Temple Strategy\\n * @notice The Temple Strategy is responsible for borrowing funds from the Treasury Reserve Vault\\n * and generating positive equity from that capital.\\n * \\n * When it borrows funds it is issued systematic debt (`dToken`) which accrues interest at a common base rate\\n * plus a risk premium rate specific to this strategy, agreed and set by governance.\\n *\\n * The strategy reports it's assets (total available funds in investments)\\n * in order to report the equity of the strategy -- ie a comparable performance metric across all strategy's.\\n *\\n * The Strategy Executor role is responsible for applying the capital within the strategy, and can borrow funds from\\n * the TRV up to a cap (set by governance). Similarly the Executor is responsible for operations - borrow/repay/liquidate/etc.\\n *\\n * The strategy can be shutdown - first by Executors giving the go-ahead by setting it to `isShuttingDown` in the TRV\\n * and then the Executor can either:\\n *   a/ Graceful shutdown, where any liquidation can happen automatically\\n *   b/ Force shutdown, where the Executor needs to handle any liquidations manually and send funds back to Treasury first.\\n */\\ninterface ITempleStrategy is ITempleElevatedAccess {\\n    struct AssetBalance {\\n        address asset;\\n        uint256 balance;\\n    }\\n\\n    struct AssetBalanceDelta {\\n        address asset;\\n        int256 delta;\\n    }\\n\\n    event TreasuryReservesVaultSet(address indexed trv);\\n    event Shutdown();\\n    event AssetBalancesCheckpoint(AssetBalance[] assetBalances);\\n    event ManualAdjustmentsSet(AssetBalanceDelta[] adjustments);\\n    event TokenAllowanceSet(address token, address spender, uint256 amount);\\n    \\n    error InvalidVersion(string expected, string actual);\\n    error OnlyTreasuryReserveVault(address caller);\\n\\n    /**\\n     * @notice API version to help with future integrations/migrations\\n     */\\n    function apiVersion() external view returns (string memory);\\n\\n    /**\\n     * @notice A human readable name of the strategy\\n     */\\n    function strategyName() external view returns (string memory);\\n\\n    /**\\n     * @notice The version of this particular strategy\\n     */\\n    function strategyVersion() external view returns (string memory);\\n\\n    /**\\n     * @notice The address of the treasury reserves vault.\\n     */\\n    function treasuryReservesVault() external view returns (ITreasuryReservesVault);\\n\\n    /**\\n     * @notice Executors can set the address of the treasury reserves vault.\\n     */\\n    function setTreasuryReservesVault(address _trv) external;\\n\\n    /**\\n     * @notice The Strategy Executor may set manual adjustments to asset balances\\n     * if they cannot be reported automatically - eg a staked position with no receipt token.\\n     */\\n    function setManualAdjustments(AssetBalanceDelta[] calldata adjustments) external;\\n\\n    /**\\n     * @notice Get the set of manual asset balance deltas, set by the Strategy Executor.\\n     */\\n    function manualAdjustments() external view returns (AssetBalanceDelta[] memory adjustments);\\n\\n    /**\\n     * @notice The latest checkpoint of each asset balance this strategy holds.\\n     *\\n     * @dev The asset value may be stale at any point in time, depending on the strategy. \\n     * It may optionally implement `checkpointAssetBalances()` in order to update those balances.\\n     */\\n    function latestAssetBalances() external view returns (AssetBalance[] memory assetBalances);\\n\\n    /**\\n     * @notice By default, we assume there is no checkpoint required for a strategy\\n     * In which case it would be identical to just calling `latestAssetBalances()`\\n     *\\n     * A strategy can override this if on-chain functions are required to run to force balance\\n     * updates first - eg checkpoint DSR\\n     */\\n    function checkpointAssetBalances() external returns (AssetBalance[] memory assetBalances);\\n\\n    /**\\n     * @notice populate data required for shutdown - for example quote data.\\n     * This may/may not be required in order to do a shutdown. For example to avoid frontrunning/MEV\\n     * quotes to exit an LP position may need to be obtained off-chain prior to the actual shutdown.\\n     * Each strategy can abi encode params that it requires.\\n     * @dev Intentionally not a view - as some quotes require a non-view (eg Balancer)\\n     * The intention is for clients to call as 'static', like a view\\n     */\\n    function populateShutdownData(bytes calldata populateParamsData) external returns (bytes memory shutdownParamsData);\\n\\n    /**\\n     * @notice The strategy executor can shutdown this strategy, only after Executors have\\n     * marked the strategy as `isShuttingDown` in the TRV.\\n     * This should handle all liquidations and send all funds back to the TRV, and will then call `TRV.shutdown()`\\n     * to apply the shutdown.\\n     * @dev Each strategy may require a different set of params to do the shutdown. It can abi encode/decode\\n     * that data off chain, or by first calling populateShutdownData()\\n     */\\n    function automatedShutdown(bytes calldata shutdownParamsData) external;\\n\\n    /**\\n     * @notice Executors can recover any token from the strategy.\\n     */\\n    function recoverToken(address token, address to, uint256 amount) external;\\n\\n    /**\\n     * @notice Executors can set the allowance of any token spend from the strategy\\n     */\\n    function setTokenAllowance(IERC20 token, address spender, uint256 amount) external;\\n\\n    /**\\n     * @notice A hook which is called by the Treasury Reserves Vault when the debt ceiling\\n     * for this strategy is updated\\n     * @dev by default it's a no-op unless the strategy implements `_debtCeilingUpdated()`\\n     */\\n    function debtCeilingUpdated(IERC20 token, uint256 newDebtCeiling) external;\\n}\"\r\n    },\r\n    \"contracts/interfaces/v2/strategies/ITlcStrategy.sol\": {\r\n      \"content\": \"pragma solidity 0.8.19;\\n// SPDX-License-Identifier: AGPL-3.0-or-later\\n// Temple (interfaces/v2/strategies/ITlcStrategy.sol)\\n\\nimport { ITempleStrategy } from \\\"contracts/interfaces/v2/strategies/ITempleStrategy.sol\\\";\\n\\n/**\\n * @title Temple Line of Credit Strategy\\n * @notice A simple wrapper strategy over TLC, where\\n * the assets is the current total user debt.\\n */\\ninterface ITlcStrategy is ITempleStrategy {\\n    /**\\n     * @notice TLC (only) will call on this to fund user borrows of DAI\\n     */\\n    function fundFromTrv(uint256 amount, address recipient) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/v2/templeLineOfCredit/ITempleLineOfCredit.sol\": {\r\n      \"content\": \"pragma solidity 0.8.19;\\n// SPDX-License-Identifier: AGPL-3.0-or-later\\n// Temple (interfaces/v2/templeLineOfCredit/ITempleLineOfCredit.sol)\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport { ITlcEventsAndErrors } from \\\"contracts/interfaces/v2/templeLineOfCredit/ITlcEventsAndErrors.sol\\\";\\nimport { ITlcDataTypes } from \\\"contracts/interfaces/v2/templeLineOfCredit/ITlcDataTypes.sol\\\";\\nimport { ITreasuryReservesVault } from \\\"contracts/interfaces/v2/ITreasuryReservesVault.sol\\\";\\nimport { ITlcStrategy } from \\\"contracts/interfaces/v2/strategies/ITlcStrategy.sol\\\";\\nimport { ITempleCircuitBreakerProxy } from \\\"contracts/interfaces/v2/circuitBreaker/ITempleCircuitBreakerProxy.sol\\\";\\n\\n/**\\n * @title Temple Line of Credit (TLC)\\n * @notice Users supply Temple as collateral, and can then borrow DAI.\\n * \\n * Temple is valued at the Temple Treasury Price Index (TPI)\\n * User debt increases at a continuously compounding rate.\\n * Liquidations occur when users LTV exceeds the maximum allowed.\\n */\\ninterface ITempleLineOfCredit is ITlcDataTypes, ITlcEventsAndErrors {\\n    /**\\n     * @notice Deposit Temple as collateral\\n     * @param collateralAmount The amount to deposit\\n     * @param onBehalfOf An account can add collateral on behalf of another address.\\n     */\\n    function addCollateral(uint128 collateralAmount, address onBehalfOf) external;\\n\\n    /**\\n     * @notice Remove Temple collateral. (active borrow positions are not allowed to go above the max LTV)\\n     * @param amount The amount of collateral to remove\\n     * @param recipient Send the Temple collateral to a specified recipient address.\\n     */\\n    function removeCollateral(uint128 amount, address recipient) external;\\n\\n    /**\\n     * @notice Borrow DAI (not allowed to borrow over the max LTV)\\n     * @param amount The amount to borrow\\n     * @param recipient Send the borrowed token to a specified recipient address.\\n     */\\n    function borrow(uint128 amount, address recipient) external;\\n\\n    /**\\n     * @notice An account repays some of its DAI debt\\n     * @param repayAmount The amount to repay. Cannot be more than the current debt.\\n     * @param onBehalfOf Another address can repay the debt on behalf of someone else\\n     */\\n    function repay(uint128 repayAmount, address onBehalfOf) external;\\n    \\n    /**\\n     * @notice An account repays all of its DAI debt\\n     * @dev The amount of debt is calculated as of this block.\\n     * @param onBehalfOf Another address can repay the debt on behalf of someone else\\n     */\\n    function repayAll(address onBehalfOf) external;\\n\\n    /**\\n     * @notice Liquidate one or more accounts which have exceeded the \\n     * maximum allowed LTV.\\n     * The Temple collateral is seized, and the accounts debt wiped.\\n     * @dev If one of the accounts in the batch hasn't exceeded the max LTV\\n     * then no action is performed for that account.\\n     */\\n    function batchLiquidate(\\n        address[] calldata accounts\\n    ) external returns (\\n        uint128 totalCollateralClaimed,\\n        uint128 totalDaiDebtWiped\\n    );\\n\\n    /**\\n     * @notice New borrows of DAI may be paused in an emergency to protect user funds\\n     */\\n    function setBorrowPaused(bool isPaused) external;\\n\\n    /**\\n     * @notice Liquidations may be paused in order for users to recover/repay debt after emergency\\n     * actions\\n     */\\n    function setLiquidationsPaused(bool isPaused) external;\\n\\n    /**\\n     * @notice Set the minimum amount of Temple which must be borrowed on each call.\\n     */\\n    function setMinBorrowAmount(uint128 amount) external;\\n\\n    /**\\n     * @notice Update the TLC Strategy contract, and Treasury Reserves Vault (TRV)\\n     * @dev The TRV is granted access to spend DAI, in order to repay debt.\\n     */\\n    function setTlcStrategy(address _tlcStrategy) external;\\n    \\n    /**\\n     * @notice Update the interest rate model contract for DAI borrows\\n     * @param interestRateModel The contract address of the new model\\n     */\\n    function setInterestRateModel(address interestRateModel) external;\\n    \\n    /**\\n     * @notice Set the maximum Loan To Value Ratio allowed for DAI borrows before the position is liquidated\\n     * @param maxLtvRatio The max LTV ratio (18 decimal places)\\n     */\\n    function setMaxLtvRatio(uint256 maxLtvRatio) external;\\n    \\n    /**\\n     * @notice Elevated access can recover tokens accidentally sent to this contract\\n     * No user Temple collateral can be taken.\\n     */\\n    function recoverToken(address token, address to, uint256 amount) external;\\n\\n    /**\\n     * @notice Update and checkpoint the total debt up until now\\n     * Then recalculate the interest rate based on the updated utilisation ratio.\\n     */\\n    function refreshInterestRates() external;\\n    \\n    /**\\n     * @notice The collateral token supplied by users/accounts\\n     */\\n    function templeToken() external view returns (IERC20);\\n    \\n    /**\\n     * @notice DAI token -- the debt token which can be borrowed\\n     */\\n    function daiToken() external view returns (IERC20);\\n\\n    /**\\n     * @notice The Treasury Reserve Vault (TRV) which funds the DAI borrows to users/accounts.\\n     * - When users borrow, the DAI is pulled from the TRV\\n     *      (via the TlcStrategy, increasing the dUSD debt)\\n     * - When users repay, the DAI is repaid to the TRV \\n     *      (reducing the dUSD debt of the TlcStrategy)\\n     * - When there is a liquidation, the seized Temple collateral is paid to the TRV\\n     *      (reducing the dTEMPLE debt of the TlcStrategy)\\n     */\\n    function treasuryReservesVault() external view returns (ITreasuryReservesVault);\\n\\n    /**\\n     * @notice The Strategy contract managing the TRV borrows and equity positions of TLC.\\n     */\\n    function tlcStrategy() external view returns (ITlcStrategy);\\n\\n    /**\\n     * @notice A record of the total amount of collateral deposited by users/accounts.\\n     */\\n    function totalCollateral() external view returns (uint256);\\n\\n    /**\\n     * @notice Liquidations may be paused in order for users to recover/repay debt after emergency\\n     * actions\\n     */\\n    function liquidationsPaused() external view returns (bool);\\n\\n    /**\\n     * @notice The minimum borrow amount per transaction\\n     * @dev It costs gas to liquidate users, so we don't want dust amounts.\\n     */\\n    function minBorrowAmount() external view returns (uint128);\\n\\n    /**\\n     * @notice An view of an accounts current and up to date position as of this block\\n     * @param account The account to get a position for\\n     */\\n    function accountPosition(\\n        address account\\n    ) external view returns (\\n        AccountPosition memory position\\n    );\\n\\n    /**\\n     * @notice Get the current total DAI debt position across all accounts\\n     * as of this block.\\n     */\\n    function totalDebtPosition() external view returns (\\n        TotalDebtPosition memory daiPosition\\n    );\\n\\n    /**\\n     * @notice Compute the liquidity status for a set of accounts.\\n     * @dev This can be used to verify if accounts can be liquidated or not.\\n     * @param accounts The accounts to get the status for.\\n     */\\n    function computeLiquidity(\\n        address[] calldata accounts\\n    ) external view returns (LiquidationStatus[] memory status);\\n\\n    /**\\n     * @notice A view of the last checkpoint of account data (not as of this block)\\n     */\\n    function accountData(\\n        address account\\n    ) external view returns (AccountData memory data);\\n\\n    /**\\n     * @notice Configuration and latest data snapshot of the DAI debt token\\n     */\\n    function debtTokenDetails() external view returns (\\n        DebtTokenConfig memory config, \\n        DebtTokenData memory data\\n    );\\n\\n    /**\\n     * @notice New borrows and collateral withdrawals are checked against a circuit breaker\\n     * to ensure no more than a cap is withdrawn in a given period\\n     */\\n    function circuitBreakerProxy() external view returns (ITempleCircuitBreakerProxy);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/v2/templeLineOfCredit/ITlcDataTypes.sol\": {\r\n      \"content\": \"pragma solidity 0.8.19;\\n// SPDX-License-Identifier: AGPL-3.0-or-later\\n// Temple (interfaces/v2/templeLineOfCredit/ITlcDataTypes.sol)\\n\\nimport { IInterestRateModel } from \\\"contracts/interfaces/v2/interestRate/IInterestRateModel.sol\\\";\\n\\ninterface ITlcDataTypes {\\n    /// @notice Configuration of the DAI Debt Token\\n    struct DebtTokenConfig {\\n        /// @notice Maximum Loan To Value (LTV) ratio an account can have before being liquidated\\n        uint96 maxLtvRatio;\\n\\n        /// @notice The borrow interest rate model contract\\n        IInterestRateModel interestRateModel;\\n\\n        /// @notice Pause new borrows\\n        bool borrowsPaused;\\n    }\\n\\n    /// @notice The latest checkpoint of Debt Token data\\n    /// @dev Packed slot: 32 + 128 + 96 = 256\\n    struct DebtTokenData {\\n        /// @notice The last time the debt was updated for this token\\n        uint32 interestAccumulatorUpdatedAt;\\n\\n        /// @notice Total amount of debt which has been borrowed across all users\\n        uint128 totalDebt;\\n\\n        /// @notice The last calculated borrow interest rate\\n        uint96 interestRate;\\n\\n        /// @notice The accumulator index used to track the compounding of debt.\\n        uint256 interestAccumulator;\\n    }\\n\\n    /// @notice The record of an account's collateral, requests\\n    /// and DAI debt data\\n    /// @dev Packed slots: (128 + 128), (128 + 128), (128 +  64 + 64)\\n    struct AccountData {\\n        /// @notice The amount of collateral the account has posted\\n        uint128 collateral;\\n        \\n        /** \\n         * @notice A checkpoint of user debt, updated after a borrow/repay/liquidation\\n         * @dev Debt as of now =  (\\n         *    `account.debtCheckpoint` *\\n         *    `debtTokenData.interestAccumulator` / \\n         *    `account.interestAccumulator`\\n         * )\\n         */\\n        uint128 debtCheckpoint;\\n\\n        /// @notice The account's last interest accumulator checkpoint\\n        uint256 interestAccumulator;\\n    }\\n\\n    /// @notice The status for whether an account can be liquidated or not\\n    struct LiquidationStatus {\\n        /// @notice True if the DAI borrow position has exceeded the max LTV\\n        /// in which case it can be liquidated\\n        bool hasExceededMaxLtv;\\n\\n        /// @notice The amount of collateral which has been provided by the user\\n        uint128 collateral;\\n\\n        /// @notice The value of collateral (amount * TPI) which has been provided by the user\\n        uint256 collateralValue;\\n\\n        /// @notice The amount of DAI debt as of this block\\n        uint128 currentDebt;\\n    }\\n    \\n    /// @notice An account's collateral and DAI debt position\\n    struct AccountPosition {\\n        /// @notice The amount (not the value) of collateral which has been provided by the user\\n        uint128 collateral;\\n\\n        /// @notice The amount of DAI debt as of this block\\n        uint128 currentDebt;\\n\\n        /// @notice The maximum amount this account can borrow given the collateral posted.\\n        /// @dev Note if this max is actually borrowed then it will immediately be liquidated as 1 block\\n        /// of interest will tip it over the max allowed LTV\\n        uint128 maxBorrow;\\n\\n        /// @notice The health factor of this accounts position. Anything less than 1 can be liquidated.\\n        uint256 healthFactor;\\n\\n        /// @notice The current LTV ratio of this account\\n        uint256 loanToValueRatio;\\n    }\\n\\n    /// @notice The total DAI debt position metrics across all accounts\\n    struct TotalDebtPosition {\\n        /// @notice The utilization rate as of the last checkpoint\\n        uint256 utilizationRatio;\\n\\n        // @notice The borrow interest rate as of the last checkpoint\\n        uint256 borrowRate;\\n\\n        // @notice The total debt across all accounts as of this block\\n        uint256 totalDebt;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/v2/templeLineOfCredit/ITlcEventsAndErrors.sol\": {\r\n      \"content\": \"pragma solidity 0.8.19;\\n// SPDX-License-Identifier: AGPL-3.0-or-later\\n// Temple (interfaces/v2/templeLineOfCredit/ITlcEventsAndErrors.sol)\\n\\ninterface ITlcEventsAndErrors {\\n    error ExceededMaxLtv(uint256 collateralAmount, uint256 collateralValue, uint256 currentDaiDebt);\\n    error ExceededBorrowedAmount(uint256 totalDebtAmount, uint256 repayAmount);\\n    error InsufficientAmount(uint256 required, uint256 provided);\\n    error Paused();\\n\\n    event TlcStrategySet(address indexed strategy, address indexed treasuryReservesVault);\\n    event InterestRateModelSet(address indexed interestRateModel);\\n    event MaxLtvRatioSet(uint256 maxLtvRatio);\\n    event CollateralAdded(address indexed fundedBy, address indexed onBehalfOf, uint128 collateralAmount);\\n    event CollateralRemoved(address indexed account, address indexed recipient, uint128 collateralAmount);\\n    event Borrow(address indexed account, address indexed recipient, uint128 amount);\\n    event Repay(address indexed fundedBy, address indexed onBehalfOf, uint128 repayAmount);\\n    event Liquidated(address indexed account, uint128 collateralSeized, uint256 collateralValue, uint128 daiDebtWiped);\\n    event InterestRateUpdate(uint96 newInterestRate);\\n    event BorrowPausedSet(bool isPaused);\\n    event LiquidationsPausedSet(bool isPaused);\\n    event MinBorrowAmountSet(uint128 amount);\\n}\\n\"\r\n    },\r\n    \"contracts/v2/access/TempleElevatedAccess.sol\": {\r\n      \"content\": \"pragma solidity 0.8.19;\\n// SPDX-License-Identifier: AGPL-3.0-or-later\\n// Temple (v2/access/TempleElevatedAccess.sol)\\n\\nimport { ITempleElevatedAccess } from \\\"contracts/interfaces/v2/access/ITempleElevatedAccess.sol\\\";\\nimport { CommonEventsAndErrors } from \\\"contracts/common/CommonEventsAndErrors.sol\\\";\\n\\n/**\\n * @notice Inherit to add Executor and Rescuer roles for DAO elevated access.\\n */ \\nabstract contract TempleElevatedAccess is ITempleElevatedAccess {\\n    /**\\n     * @notice The address which is approved to execute emergency operations.\\n     */ \\n    address public override rescuer;\\n\\n    /**\\n     * @notice The address which is approved to execute normal operations on behalf of the DAO.\\n     */ \\n    address public override executor;\\n\\n    /**\\n     * @notice Explicit approval for an address to execute a function.\\n     * allowedCaller => function selector => true/false\\n     */\\n    mapping(address => mapping(bytes4 => bool)) public override explicitFunctionAccess;\\n\\n    /**\\n     * @notice Under normal circumstances, rescuers don't have access to admin/operational functions.\\n     * However when rescue mode is enabled (by rescuers or executors), they claim the access rights.\\n     */\\n    bool public override inRescueMode;\\n\\n    /// @dev Track proposed rescuer/executor\\n    address private _proposedNewRescuer;\\n    address private _proposedNewExecutor;\\n\\n    constructor(address initialRescuer, address initialExecutor) {\\n        if (initialRescuer == address(0)) revert CommonEventsAndErrors.InvalidAddress();\\n        if (initialExecutor == address(0)) revert CommonEventsAndErrors.InvalidAddress();\\n        if (initialExecutor == initialRescuer) revert CommonEventsAndErrors.InvalidAddress();\\n\\n        rescuer = initialRescuer;\\n        executor = initialExecutor;\\n    }\\n\\n    /**\\n     * @notice Set the contract into or out of rescue mode.\\n     * Only the rescuers are allowed to set.\\n     */\\n    function setRescueMode(bool value) external override {\\n        if (msg.sender != rescuer) revert CommonEventsAndErrors.InvalidAccess();\\n        emit RescueModeSet(value);\\n        inRescueMode = value;\\n    }\\n\\n    /**\\n     * @notice Proposes a new Rescuer.\\n     * Can only be called by the current rescuer.\\n     */\\n    function proposeNewRescuer(address account) external override {\\n        if (msg.sender != rescuer) revert CommonEventsAndErrors.InvalidAccess();\\n        if (account == address(0)) revert CommonEventsAndErrors.InvalidAddress();\\n        emit NewRescuerProposed(msg.sender, _proposedNewRescuer, account);\\n        _proposedNewRescuer = account;\\n    }\\n\\n    /**\\n     * @notice Caller accepts the role as new Rescuer.\\n     * Can only be called by the proposed rescuer\\n     */\\n    function acceptRescuer() external override {\\n        if (msg.sender != _proposedNewRescuer) revert CommonEventsAndErrors.InvalidAccess();\\n        if (msg.sender == executor) revert CommonEventsAndErrors.InvalidAddress();\\n\\n        emit NewRescuerAccepted(rescuer, msg.sender);\\n        rescuer = msg.sender;\\n        delete _proposedNewRescuer;\\n    }\\n\\n    /**\\n     * @notice Proposes a new Executor.\\n     * Can only be called by the current executor or rescuer (if in resuce mode)\\n     */\\n    function proposeNewExecutor(address account) external override onlyElevatedAccess {\\n        if (account == address(0)) revert CommonEventsAndErrors.InvalidAddress();\\n        emit NewExecutorProposed(executor, _proposedNewExecutor, account);\\n        _proposedNewExecutor = account;\\n    }\\n\\n    /**\\n     * @notice Caller accepts the role as new Executor.\\n     * Can only be called by the proposed executor\\n     */\\n    function acceptExecutor() external override {\\n        if (msg.sender != _proposedNewExecutor) revert CommonEventsAndErrors.InvalidAccess();\\n        if (msg.sender == rescuer) revert CommonEventsAndErrors.InvalidAddress();\\n\\n        emit NewExecutorAccepted(executor, msg.sender);\\n        executor = msg.sender;\\n        delete _proposedNewExecutor;\\n    }\\n\\n    /**\\n     * @notice Grant `allowedCaller` the rights to call the function selectors in the access list.\\n     * @dev fnSelector == bytes4(keccak256(\\\"fn(argType1,argType2,...)\\\"))\\n     */\\n    function setExplicitAccess(address allowedCaller, ExplicitAccess[] calldata access) external override onlyElevatedAccess {\\n        if (allowedCaller == address(0)) revert CommonEventsAndErrors.InvalidAddress();\\n        uint256 _length = access.length;\\n        ExplicitAccess memory _access;\\n        for (uint256 i; i < _length; ++i) {\\n            _access = access[i];\\n            emit ExplicitAccessSet(allowedCaller, _access.fnSelector, _access.allowed);\\n            explicitFunctionAccess[allowedCaller][_access.fnSelector] = _access.allowed;\\n        }\\n    }\\n\\n    function isElevatedAccess(address caller, bytes4 fnSelector) internal view returns (bool) {\\n        if (inRescueMode) {\\n            // If we're in rescue mode, then only the rescuers can call\\n            return caller == rescuer;\\n        } else if (caller == executor || explicitFunctionAccess[caller][fnSelector]) {\\n            // If we're not in rescue mode, the executor can call all functions\\n            // or the caller has been given explicit access on this function\\n            return true;\\n        }\\n        return false;\\n    }\\n\\n    /**\\n     * @notice Under normal operations, only the executors are allowed to call.\\n     * If 'rescue mode' has been enabled, then only the rescuers are allowed to call.\\n     * @dev Important: Only for use when called from an *external* contract. \\n     * If a function with this modifier is called internally then the `msg.sig` \\n     * will still refer to the top level externally called function.\\n     */\\n    modifier onlyElevatedAccess() {\\n        if (!isElevatedAccess(msg.sender, msg.sig)) revert CommonEventsAndErrors.InvalidAccess();\\n        _;\\n    }\\n\\n    /**\\n     * @notice Only the executors or rescuers can call.\\n     */\\n    modifier onlyInRescueMode() {\\n        if (!(inRescueMode && msg.sender == rescuer)) revert CommonEventsAndErrors.InvalidAccess();\\n        _;\\n    }\\n\\n    modifier notInRescueMode() {\\n        if (inRescueMode) revert CommonEventsAndErrors.InvalidAccess();\\n        _;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/v2/interestRate/CompoundedInterest.sol\": {\r\n      \"content\": \"pragma solidity 0.8.19;\\n// SPDX-License-Identifier: AGPL-3.0-or-later\\n// Temple (v2/interestRate/CompoundedInterest.sol)\\n\\nimport { ud } from \\\"@prb/math/src/UD60x18.sol\\\";\\n\\n/**\\n * @notice A maths library to calculate compounded interest\\n */\\nlibrary CompoundedInterest {\\n    uint256 public constant ONE_YEAR = 365 days;\\n\\n    /// @notice FV = P*e^(r*t)\\n    /// @param principal Initial principal amount, 1e18 precision\\n    /// @param elapsed Number of seconds elapsed\\n    /// @param interestRate The interest rate per annum, 1e18 precision. eg 5% = 0.05e18\\n    function continuouslyCompounded(\\n        uint256 principal, \\n        uint256 elapsed, \\n        uint96 interestRate\\n    ) internal pure returns (uint256) {\\n        uint256 exponent = elapsed * interestRate / ONE_YEAR;\\n        return ud(principal).mul(\\n            ud(exponent).exp()\\n        ).unwrap();\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/v2/templeLineOfCredit/TempleLineOfCredit.sol\": {\r\n      \"content\": \"pragma solidity 0.8.19;\\n// SPDX-License-Identifier: AGPL-3.0-or-later\\n// Temple (v2/templeLineOfCredit/TempleLineOfCredit.sol)\\n\\nimport { SafeERC20, IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport { mulDiv } from \\\"@prb/math/src/Common.sol\\\";\\n\\nimport { ITreasuryReservesVault } from \\\"contracts/interfaces/v2/ITreasuryReservesVault.sol\\\";\\nimport { IInterestRateModel } from \\\"contracts/interfaces/v2/interestRate/IInterestRateModel.sol\\\";\\nimport { ITempleLineOfCredit } from \\\"contracts/interfaces/v2/templeLineOfCredit/ITempleLineOfCredit.sol\\\";\\nimport { ITlcStrategy } from \\\"contracts/interfaces/v2/strategies/ITlcStrategy.sol\\\";\\nimport { CompoundedInterest } from \\\"contracts/v2/interestRate/CompoundedInterest.sol\\\";\\nimport { ITempleCircuitBreakerProxy } from \\\"contracts/interfaces/v2/circuitBreaker/ITempleCircuitBreakerProxy.sol\\\";\\n\\nimport { SafeCast } from \\\"contracts/common/SafeCast.sol\\\";\\nimport { CommonEventsAndErrors } from \\\"contracts/common/CommonEventsAndErrors.sol\\\";\\nimport { TempleElevatedAccess } from \\\"contracts/v2/access/TempleElevatedAccess.sol\\\";\\n\\n/* solhint-disable not-rely-on-time */\\n\\n/**\\n * @title Temple Line of Credit (TLC)\\n * @notice Users supply Temple as collateral, and can then borrow DAI.\\n * \\n * Temple is valued at the Temple Treasury Price Index (TPI)\\n * User debt increases at a continuously compounding rate.\\n * Liquidations occur when users LTV exceeds the maximum allowed.\\n */\\ncontract TempleLineOfCredit is ITempleLineOfCredit, TempleElevatedAccess {\\n    using SafeERC20 for IERC20;\\n    using SafeCast for uint256;\\n    using CompoundedInterest for uint256;\\n\\n    /**\\n     * @notice The collateral token supplied by users/accounts\\n     */\\n    IERC20 public immutable override templeToken;\\n\\n    /**\\n     * @notice DAI token -- the debt token which can be borrowed\\n     */\\n    IERC20 public immutable override daiToken;\\n\\n    /**\\n     * @notice The Treasury Reserve Vault (TRV) which funds the DAI borrows to users/accounts.\\n     * - When users borrow, the DAI is pulled from the TRV\\n     *      (via the TlcStrategy, increasing the dUSD debt)\\n     * - When users repay, the DAI is repaid to the TRV \\n     *      (reducing the dUSD debt of the TlcStrategy)\\n     * - When there is a liquidation, the seized Temple collateral is paid to the TRV\\n     *      (reducing the dTEMPLE debt of the TlcStrategy)\\n     */\\n    ITreasuryReservesVault public override treasuryReservesVault;\\n\\n    /**\\n     * @notice The Strategy contract managing the TRV borrows and equity positions of TLC.\\n     */\\n    ITlcStrategy public override tlcStrategy;\\n    \\n    /**\\n     * @notice A record of the total amount of collateral deposited by users/accounts.\\n     */\\n    uint256 public override totalCollateral;\\n\\n    /**\\n     * @notice A per user/account mapping to the data to track active collateral/debt positions.\\n     */\\n    mapping(address => AccountData) internal allAccountsData;\\n\\n    /**\\n     * @notice Configuration and latest data snapshot of the debt tokens\\n     */\\n    DebtTokenConfig internal debtTokenConfig;\\n    DebtTokenData internal debtTokenData;\\n\\n    /**\\n     * @notice Liquidations may be paused in order for users to recover/repay debt after emergency\\n     * actions\\n     */\\n    bool public override liquidationsPaused;\\n\\n    /**\\n     * @notice The minimum borrow amount per transaction\\n     * @dev It costs gas to liquidate users, so we don't want dust amounts.\\n     */\\n    uint128 public override minBorrowAmount = 1000e18;\\n\\n    /**\\n     * @notice New borrows and collateral withdrawals are checked against a circuit breaker\\n     * to ensure no more than a cap is withdrawn in a given period\\n     */\\n    ITempleCircuitBreakerProxy public immutable override circuitBreakerProxy;\\n\\n    /**\\n     * @notice An internal state tracking how interest has accumulated.\\n     */\\n    uint256 internal constant INITIAL_INTEREST_ACCUMULATOR = 1e27;\\n\\n    /**\\n     * @notice The precision used for Price, LTV, notional\\n     */\\n    uint256 internal constant PRECISION = 1e18;\\n    uint256 internal constant DOUBLE_PRECISION = 1e36;\\n\\n    constructor(\\n        address _initialRescuer,\\n        address _initialExecutor,\\n        address _circuitBreakerProxy,\\n        address _templeToken,\\n        address _daiToken, \\n        uint256 _maxLtvRatio,\\n        address _interestRateModel\\n    ) \\n        TempleElevatedAccess(_initialRescuer, _initialExecutor)\\n    {\\n        circuitBreakerProxy = ITempleCircuitBreakerProxy(_circuitBreakerProxy);\\n        templeToken = IERC20(_templeToken);\\n        daiToken = IERC20(_daiToken);\\n\\n        if (_maxLtvRatio > PRECISION) revert CommonEventsAndErrors.InvalidParam();\\n        if (_interestRateModel == address(0)) revert CommonEventsAndErrors.ExpectedNonZero();\\n\\n        debtTokenConfig = DebtTokenConfig(\\n            uint96(_maxLtvRatio), \\n            IInterestRateModel(_interestRateModel),\\n            false\\n        );\\n        debtTokenData = DebtTokenData({\\n            interestAccumulatorUpdatedAt: uint32(block.timestamp),\\n            totalDebt: 0,\\n            interestRate: 0,\\n            interestAccumulator: INITIAL_INTEREST_ACCUMULATOR\\n        });\\n    }\\n\\n    /*\u00b4:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0\u2022.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:*/\\n    /*                         COLLATERAL                         */\\n    /*.\u2022\u00b0:\u00b0.\u00b4+\u02da.*\u00b0.\u02da:*.\u00b4\u2022*.+\u00b0.\u2022\u00b0:\u00b4*.\u00b4\u2022*.\u2022\u00b0.\u2022\u00b0:\u00b0.\u00b4:\u2022\u02da\u00b0.*\u00b0.\u02da:*.\u00b4+\u00b0.\u2022*/\\n\\n    /**\\n     * @notice Deposit Temple as collateral\\n     * @param collateralAmount The amount to deposit\\n     * @param onBehalfOf An account can add collateral on behalf of another address.\\n     */\\n    function addCollateral(uint128 collateralAmount, address onBehalfOf) external override notInRescueMode {\\n        if (collateralAmount == 0) revert CommonEventsAndErrors.ExpectedNonZero();\\n        emit CollateralAdded(msg.sender, onBehalfOf, collateralAmount);\\n\\n        allAccountsData[onBehalfOf].collateral += collateralAmount;\\n        totalCollateral += collateralAmount;\\n\\n        // No need to check liquidity when adding collateral as it \\n        // only improves the liquidity.\\n        templeToken.safeTransferFrom(\\n            msg.sender,\\n            address(this),\\n            collateralAmount \\n        );\\n    }\\n\\n    /**\\n     * @notice Remove Temple collateral. (active borrow positions are not allowed to go above the max LTV)\\n     * @param amount The amount of collateral to remove\\n     * @param recipient Send the Temple collateral to a specified recipient address.\\n     */\\n    function removeCollateral(uint128 amount, address recipient) external override notInRescueMode {\\n        if (amount == 0) revert CommonEventsAndErrors.ExpectedNonZero();\\n        AccountData storage _accountData = allAccountsData[msg.sender];\\n        uint128 _collateral =  _accountData.collateral;\\n        if (amount > _collateral) revert CommonEventsAndErrors.InvalidAmount(address(templeToken), amount);\\n\\n        // Ensure that this withdrawal doesn't break the circuit breaker limits (across all users)\\n        circuitBreakerProxy.preCheck(\\n            address(templeToken), \\n            msg.sender, \\n            amount\\n        );\\n\\n        // Update the collateral, and then verify that it doesn't make the debt unsafe.\\n        _accountData.collateral = _collateral - amount;\\n        totalCollateral -= amount;\\n        emit CollateralRemoved(msg.sender, recipient, amount);\\n\\n        _checkLiquidity(_accountData, _debtTokenCacheRO());\\n\\n        templeToken.safeTransfer(\\n            recipient,\\n            amount\\n        );\\n    }\\n\\n    /*\u00b4:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0\u2022.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:*/\\n    /*                           BORROW                           */\\n    /*.\u2022\u00b0:\u00b0.\u00b4+\u02da.*\u00b0.\u02da:*.\u00b4\u2022*.+\u00b0.\u2022\u00b0:\u00b4*.\u00b4\u2022*.\u2022\u00b0.\u2022\u00b0:\u00b0.\u00b4:\u2022\u02da\u00b0.*\u00b0.\u02da:*.\u00b4+\u00b0.\u2022*/\\n\\n    /**\\n     * @notice Borrow DAI (not allowed to borrow over the max LTV)\\n     * @dev NOTICE: There is no buffer between the maximum the user is able to borrow \\n     * (based on their collateral and the maxLTV), and the point where the user can get liquidated.\\n     * Therefore do not borrow the max amount possible or the position will instantly be eligable to be\\n     * liquidated in the next block.\\n     * @param amount The amount to borrow\\n     * @param recipient Send the borrowed token to a specified recipient address.\\n     */\\n    function borrow(uint128 amount, address recipient) external override notInRescueMode {\\n        if (amount < minBorrowAmount) revert InsufficientAmount(minBorrowAmount, amount);\\n\\n        AccountData storage _accountData = allAccountsData[msg.sender];\\n        DebtTokenCache memory _cache = _debtTokenCache();\\n        if (_cache.config.borrowsPaused) revert Paused();\\n\\n        // Ensure that this new borrow doesn't break the circuit breaker limits (across all users)\\n        circuitBreakerProxy.preCheck(\\n            address(daiToken), \\n            msg.sender, \\n            amount\\n        );\\n\\n        // Apply the new borrow\\n        {\\n            uint128 _totalDebt = _currentAccountDebt(\\n                _cache, \\n                _accountData.debtCheckpoint, \\n                _accountData.interestAccumulator,\\n                false // don't round up on the way in\\n            ) + amount;\\n\\n            // Update the state\\n            _accountData.debtCheckpoint = _totalDebt;\\n            _accountData.interestAccumulator = _cache.interestAccumulator;\\n            debtTokenData.totalDebt = _cache.totalDebt = _cache.totalDebt + amount;\\n\\n            // Update the borrow interest rates based on the now increased utilization ratio\\n            _updateInterestRates(_cache);\\n        }\\n\\n        emit Borrow(msg.sender, recipient, amount);\\n        _checkLiquidity(_accountData, _cache);\\n\\n        // Finally, borrow the funds from the TRV and send the tokens to the recipient.\\n        tlcStrategy.fundFromTrv(amount, recipient);\\n    }\\n\\n    /*\u00b4:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0\u2022.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:*/\\n    /*                            REPAY                           */\\n    /*.\u2022\u00b0:\u00b0.\u00b4+\u02da.*\u00b0.\u02da:*.\u00b4\u2022*.+\u00b0.\u2022\u00b0:\u00b4*.\u00b4\u2022*.\u2022\u00b0.\u2022\u00b0:\u00b0.\u00b4:\u2022\u02da\u00b0.*\u00b0.\u02da:*.\u00b4+\u00b0.\u2022*/\\n\\n    /**\\n     * @notice An account repays some of its borrowed DAI debt\\n     * @param repayAmount The amount to repay. Cannot be more than the current debt.\\n     * @param onBehalfOf Another address can repay the debt on behalf of someone else\\n     */\\n    function repay(uint128 repayAmount, address onBehalfOf) external override notInRescueMode {\\n        if (repayAmount == 0) revert CommonEventsAndErrors.ExpectedNonZero();\\n\\n        AccountData storage _accountData = allAccountsData[onBehalfOf];\\n        DebtTokenCache memory _cache = _debtTokenCache();\\n\\n        // Update the account's latest debt\\n        uint128 _newDebt = _currentAccountDebt(\\n            _cache, \\n            _accountData.debtCheckpoint,\\n            _accountData.interestAccumulator,\\n            true // round up for repay balance\\n        );\\n\\n        // They cannot repay more than this debt\\n        if (repayAmount > _newDebt) {\\n            revert ExceededBorrowedAmount(_newDebt, repayAmount);\\n        }\\n        unchecked {\\n            _newDebt -= repayAmount;\\n        }\\n\\n        // Update storage\\n        _accountData.debtCheckpoint = _newDebt;\\n        _accountData.interestAccumulator = _cache.interestAccumulator;\\n\\n        _repayToken(_cache, repayAmount, msg.sender, onBehalfOf);\\n    }\\n\\n    /**\\n     * @notice An account repays all of its DAI debt\\n     * @dev The amount of debt is calculated as of this block.\\n     * @param onBehalfOf Another address can repay the debt on behalf of someone else\\n     */\\n    function repayAll(address onBehalfOf) external override notInRescueMode {\\n        DebtTokenCache memory _cache = _debtTokenCache();\\n        AccountData storage _accountData = allAccountsData[onBehalfOf];\\n\\n        // Get the outstanding debt for Stable\\n        uint128 repayAmount = _currentAccountDebt(\\n            _cache,\\n            _accountData.debtCheckpoint,\\n            _accountData.interestAccumulator,\\n            true // use the rounded up amount\\n        );\\n        if (repayAmount == 0) revert CommonEventsAndErrors.ExpectedNonZero();\\n\\n        // Update storage\\n        _accountData.debtCheckpoint = 0;\\n        _accountData.interestAccumulator = _cache.interestAccumulator;\\n\\n        _repayToken(_cache, repayAmount, msg.sender, onBehalfOf);\\n    }\\n\\n    /*\u00b4:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0\u2022.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:*/\\n    /*                       LIQUIDATIONS                         */\\n    /*.\u2022\u00b0:\u00b0.\u00b4+\u02da.*\u00b0.\u02da:*.\u00b4\u2022*.+\u00b0.\u2022\u00b0:\u00b4*.\u00b4\u2022*.\u2022\u00b0.\u2022\u00b0:\u00b0.\u00b4:\u2022\u02da\u00b0.*\u00b0.\u02da:*.\u00b4+\u00b0.\u2022*/\\n\\n    /**\\n     * @notice Liquidate one or more accounts which have exceeded the \\n     * maximum allowed LTV.\\n     * The Temple collateral is seized, and the accounts debt wiped.\\n     * @dev If one of the accounts in the batch hasn't exceeded the max LTV\\n     * then no action is performed for that account.\\n     */\\n    function batchLiquidate(\\n        address[] calldata accounts\\n    ) external override notInRescueMode returns (\\n        uint128 totalCollateralClaimed,\\n        uint128 totalDebtWiped\\n    ) {\\n        if (liquidationsPaused) revert Paused();\\n\\n        LiquidationStatus memory _status;\\n        DebtTokenCache memory _cache = _debtTokenCache();\\n        address _account;\\n        uint256 _numAccounts = accounts.length;\\n        for (uint256 i; i < _numAccounts; ++i) {\\n            _account = accounts[i];\\n            _status = _computeLiquidity(\\n                allAccountsData[_account], \\n                _cache\\n            );\\n\\n            // Skip if this account is still under the maxLTV\\n            if (_status.hasExceededMaxLtv) {\\n                emit Liquidated(_account, _status.collateral, _status.collateralValue, _status.currentDebt);\\n                totalCollateralClaimed += _status.collateral;\\n                totalDebtWiped += _status.currentDebt;\\n\\n                // Clear the account data\\n                delete allAccountsData[_account];\\n            }\\n        }\\n\\n        // burn the temple collateral by repaying to TRV. This will burn the equivalent dTemple debt too.\\n        if (totalCollateralClaimed > 0) {\\n            templeToken.safeIncreaseAllowance(address(treasuryReservesVault), totalCollateralClaimed);\\n            treasuryReservesVault.repay(templeToken, totalCollateralClaimed, address(tlcStrategy));\\n            totalCollateral -= totalCollateralClaimed;\\n        }\\n\\n        // Remove debt from the totals\\n        if (totalDebtWiped > 0) {\\n            _repayTotalDebt(_cache, totalDebtWiped);\\n        }\\n    }\\n    \\n    /*\u00b4:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0\u2022.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:*/\\n    /*                            ADMIN                           */\\n    /*.\u2022\u00b0:\u00b0.\u00b4+\u02da.*\u00b0.\u02da:*.\u00b4\u2022*.+\u00b0.\u2022\u00b0:\u00b4*.\u00b4\u2022*.\u2022\u00b0.\u2022\u00b0:\u00b0.\u00b4:\u2022\u02da\u00b0.*\u00b0.\u02da:*.\u00b4+\u00b0.\u2022*/\\n\\n    /**\\n     * @notice Liquidation may be paused in order for users to recover/repay debt after emergency\\n     * actions\\n     */\\n    function setLiquidationsPaused(bool isPaused) external override onlyElevatedAccess {\\n        liquidationsPaused = isPaused;\\n        emit LiquidationsPausedSet(isPaused);\\n    }\\n\\n    /**\\n     * @notice Set the minimum amount of Temple which must be borrowed on each call.\\n     */\\n    function setMinBorrowAmount(uint128 amount) external override onlyElevatedAccess {\\n        minBorrowAmount = amount;\\n        emit MinBorrowAmountSet(amount);\\n    }\\n\\n    /**\\n     * @notice Update the TLC Strategy contract, and Treasury Reserves Vault (TRV)\\n     * @dev The TRV is granted access to spend DAI, in order to repay debt.\\n     */\\n    function setTlcStrategy(\\n        address newTlcStrategy\\n    ) external override onlyElevatedAccess {\\n        tlcStrategy = ITlcStrategy(newTlcStrategy);\\n\\n        // Remove allowance from the old TRV\\n        address previousTrv = address(treasuryReservesVault);\\n        if (previousTrv != address(0)) {\\n            daiToken.safeApprove(previousTrv, 0);\\n        }\\n\\n        address _trv = address(tlcStrategy.treasuryReservesVault());\\n        treasuryReservesVault = ITreasuryReservesVault(_trv);\\n\\n        // Set max allowance on the new TRV\\n        {\\n            daiToken.safeApprove(_trv, 0);\\n            daiToken.safeIncreaseAllowance(_trv, type(uint256).max);\\n        }\\n\\n        emit TlcStrategySet(newTlcStrategy, _trv);\\n\\n        // The new TRV may have a different debt ceiling. Force an update to the interest rates.\\n        _updateInterestRates(_debtTokenCache());\\n    }\\n\\n    /**\\n     * @notice Update the interest rate model contract for DAI borrows\\n     * @param interestRateModel The contract address of the new model\\n     */\\n    function setInterestRateModel(\\n        address interestRateModel\\n    ) external override onlyElevatedAccess {\\n        emit InterestRateModelSet(interestRateModel);\\n        DebtTokenCache memory _cache = _debtTokenCache();\\n\\n        // Update the cache entry and calculate the new interest rate based off this model.\\n        debtTokenConfig.interestRateModel = _cache.config.interestRateModel = IInterestRateModel(interestRateModel);\\n        _updateInterestRates(_cache);\\n    }\\n\\n    /**\\n     * @notice Set the maximum Loan To Value Ratio allowed for DAI borrows before the position is liquidated\\n     * @param maxLtvRatio The max LTV ratio (18 decimal places)\\n     */\\n    function setMaxLtvRatio(\\n        uint256 maxLtvRatio\\n    ) external override onlyElevatedAccess {\\n        if (maxLtvRatio > PRECISION) revert CommonEventsAndErrors.InvalidParam();\\n\\n        emit MaxLtvRatioSet(maxLtvRatio);\\n        debtTokenConfig.maxLtvRatio = uint96(maxLtvRatio);\\n    }\\n\\n    /**\\n     * @notice New borrows of DAI may be paused, for example if shutting down.\\n     */\\n    function setBorrowPaused(bool isPaused) external override onlyElevatedAccess {\\n        emit BorrowPausedSet(isPaused);\\n        debtTokenConfig.borrowsPaused = isPaused;\\n    }\\n\\n    /**\\n     * @notice Elevated access can recover tokens accidentally sent to this contract\\n     * No user Temple collateral can be taken.\\n     */\\n    function recoverToken(\\n        address token, \\n        address to, \\n        uint256 amount\\n    ) external override onlyElevatedAccess {\\n        // Can't pull any of the user collateral.\\n        if (token == address(templeToken)) {\\n            uint256 bal = templeToken.balanceOf(address(this));\\n            if (amount > (bal - totalCollateral)) revert CommonEventsAndErrors.InvalidAmount(token, amount);\\n        }\\n\\n        emit CommonEventsAndErrors.TokenRecovered(to, token, amount);\\n        IERC20(token).safeTransfer(to, amount);\\n    }\\n\\n    /**\\n     * @notice Update and checkpoint the total debt up until now\\n     * Then recalculate the interest rate based on the updated utilisation ratio.\\n     */\\n    function refreshInterestRates(\\n    ) external override {\\n        _updateInterestRates(_debtTokenCache());\\n    }\\n\\n    /*\u00b4:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0\u2022.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:*/\\n    /*                           VIEWS                            */\\n    /*.\u2022\u00b0:\u00b0.\u00b4+\u02da.*\u00b0.\u02da:*.\u00b4\u2022*.+\u00b0.\u2022\u00b0:\u00b4*.\u00b4\u2022*.\u2022\u00b0.\u2022\u00b0:\u00b0.\u00b4:\u2022\u02da\u00b0.*\u00b0.\u02da:*.\u00b4+\u00b0.\u2022*/\\n\\n    /**\\n     * @notice An view of an accounts current and up to date position as of this block\\n     * @param account The account to get a position for\\n     */\\n    function accountPosition(\\n        address account\\n    ) external override view returns (\\n        AccountPosition memory position\\n    ) {\\n        AccountData storage _accountData = allAccountsData[account];\\n        DebtTokenCache memory _cache = _debtTokenCacheRO();\\n\\n        position.collateral = _accountData.collateral;\\n        position.currentDebt = _currentAccountDebt(\\n            _cache, \\n            _accountData.debtCheckpoint,\\n            _accountData.interestAccumulator,\\n            true\\n        );\\n\\n        position.maxBorrow = _maxBorrowLimit(_cache, position.collateral);\\n        position.healthFactor = _healthFactor(_cache, position.collateral, position.currentDebt);\\n        position.loanToValueRatio = _loanToValueRatio(_cache, position.collateral, position.currentDebt);\\n    }\\n\\n    /**\\n     * @notice Get the current total DAI debt position across all accounts\\n     * as of this block.\\n     */\\n    function totalDebtPosition() external override view returns (\\n        TotalDebtPosition memory position\\n    ) {\\n        DebtTokenCache memory _cache = _debtTokenCacheRO();\\n        position.utilizationRatio = _utilizationRatio(_cache);\\n        position.borrowRate = _cache.interestRate;\\n        position.totalDebt = _cache.totalDebt;\\n    }\\n\\n    /**\\n     * @notice Compute the liquidity status for a set of accounts.\\n     * @dev This can be used to verify if accounts can be liquidated or not.\\n     * @param accounts The accounts to get the status for.\\n     */\\n    function computeLiquidity(\\n        address[] calldata accounts\\n    ) external override view returns (LiquidationStatus[] memory status) {\\n        uint256 _numAccounts = accounts.length;\\n        status = new LiquidationStatus[](_numAccounts);\\n        DebtTokenCache memory _cache = _debtTokenCacheRO();\\n        for (uint256 i; i < _numAccounts; ++i) {\\n            status[i] = _computeLiquidity(\\n                allAccountsData[accounts[i]], \\n                _cache\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @notice A view of the last checkpoint of account data (not as of this block)\\n     */\\n    function accountData(\\n        address account\\n    ) external view override returns (\\n        AccountData memory\\n    ) {\\n        return allAccountsData[account];\\n    }\\n    \\n    /**\\n     * @notice Configuration and latest data snapshot of the DAI debt token\\n     */\\n    function debtTokenDetails() external view returns (\\n        DebtTokenConfig memory,\\n        DebtTokenData memory\\n    ) {\\n        return (debtTokenConfig, debtTokenData);\\n    }\\n\\n    /**\\n     * @notice A view of the derived/internal cache data.\\n     */\\n    function getDebtTokenCache() external view returns (DebtTokenCache memory) {\\n        return _debtTokenCacheRO();\\n    }\\n\\n    /*\u00b4:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0\u2022.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:*/\\n    /*                          INTERNALS                         */\\n    /*.\u2022\u00b0:\u00b0.\u00b4+\u02da.*\u00b0.\u02da:*.\u00b4\u2022*.+\u00b0.\u2022\u00b0:\u00b4*.\u00b4\u2022*.\u2022\u00b0.\u2022\u00b0:\u00b0.\u00b4:\u2022\u02da\u00b0.*\u00b0.\u02da:*.\u00b4+\u00b0.\u2022*/\\n\\n    /**\\n     * @dev An internal struct used to track the latest storage data (and new updates)\\n     * for a given debt token.\\n     * This is setup once from storage, and then reads/writes are cheap.\\n     */\\n    struct DebtTokenCache {\\n        /**\\n         * @notice This debt token's configuration.\\n         */\\n        DebtTokenConfig config;\\n\\n        /**\\n         * @notice The total amount that has already been borrowed by all accounts.\\n         * This increases as interest accrues or new borrows. \\n         * Decreases on repays or liquidations.\\n         */\\n        uint128 totalDebt;\\n\\n        /**\\n         * @notice The interest rate as of the last borrow/repay/liquidation.\\n         * This last rate is used to accrue interest from that last action time\\n         * until the current block.\\n         */\\n        uint96 interestRate;\\n\\n        /**\\n         * @notice Internal tracking of the accumulated interest as an index starting from 1.0e27\\n         * When this accumulator is compunded by the interest rate, the total debt can be calculated as\\n         * `updatedTotalDebt = prevTotalDebt * latestInterestAccumulator / prevInterestAccumulator\\n         */\\n        uint256 interestAccumulator;\\n\\n        /**\\n         * @dev The price of this token as of this block. \\n         * No external price oracles - only dependant on TPI\\n         */\\n        uint256 price;\\n        \\n        /**\\n         * @notice The maximum amount that the TLC Strategy is allowed to borrow from the TRV\\n         * @dev This puts a ceiling on the total amount allowed to be borrowed\\n         * by users from TLC. This is used as the denominator in the Utilisation Ratio\\n         * (the interest rate calcs are dependant on the UR)\\n         */\\n        uint256 trvDebtCeiling;\\n    }\\n    \\n    /**\\n     * @dev Initialize the DebtTokenCache from storage to this block, for a given token.\\n     */\\n    function _initDebtTokenCache(DebtTokenCache memory _cache) private view returns (bool dirty) {\\n\\n        // Copies from storage (once)\\n        _cache.config = debtTokenConfig;\\n\\n        _cache.interestAccumulator = debtTokenData.interestAccumulator;\\n        _cache.totalDebt = debtTokenData.totalDebt;\\n        _cache.interestRate = debtTokenData.interestRate;\\n\\n        // Set the debt ceiling and price.\\n        {\\n            ITreasuryReservesVault _trv = treasuryReservesVault;\\n            _cache.trvDebtCeiling = _trv.strategyDebtCeiling(address(tlcStrategy), daiToken);\\n            _cache.price = _trv.treasuryPriceIndex();\\n        }\\n        \\n        // Only compound if we're on a new block\\n        uint32 _timeElapsed;\\n        unchecked {\\n            _timeElapsed = uint32(block.timestamp) - debtTokenData.interestAccumulatorUpdatedAt;\\n        }\\n\\n        if (_timeElapsed > 0) {\\n            dirty = true;\\n\\n            // Compound the accumulator\\n            uint256 newInterestAccumulator = _cache.interestAccumulator.continuouslyCompounded(\\n                _timeElapsed,\\n                _cache.interestRate\\n            );\\n\\n            // Calculate the latest totalDebt from this\\n            _cache.totalDebt = mulDiv(\\n                newInterestAccumulator,\\n                _cache.totalDebt,\\n                _cache.interestAccumulator\\n            ).encodeUInt128();\\n            _cache.interestAccumulator = newInterestAccumulator;\\n        }\\n    }\\n\\n    /**\\n     * @dev Setup the DebtTokenCache for a given token\\n     * Update storage if and only if the timestamp has changed since last time.\\n     */\\n    function _debtTokenCache() internal returns (\\n        DebtTokenCache memory cache\\n    ) {\\n        if (_initDebtTokenCache(cache)) {\\n            debtTokenData.interestAccumulatorUpdatedAt = uint32(block.timestamp);\\n            debtTokenData.totalDebt = cache.totalDebt;\\n            debtTokenData.interestAccumulator = cache.interestAccumulator;\\n        }\\n    }\\n\\n    /**\\n     * @dev Setup the DebtTokenCache for a given token\\n     * read only -- storage isn't updated.\\n     */\\n    function _debtTokenCacheRO() internal view returns (\\n        DebtTokenCache memory cache\\n    ) {\\n        _initDebtTokenCache(cache);\\n    }\\n\\n    /**\\n     * @dev Calculate the borrow interest rate, given the utilization ratio of the token.\\n     * If the rate has changed, then update storage and emit an event.\\n     */\\n    function _updateInterestRates(\\n        DebtTokenCache memory _cache\\n    ) internal {\\n        uint96 newInterestRate = _cache.config.interestRateModel.calculateInterestRate(\\n            _utilizationRatio(_cache)\\n        );\\n\\n        // Update storage if the new rate differs from the old rate.\\n        if (_cache.interestRate != newInterestRate) {\\n            emit InterestRateUpdate(newInterestRate);\\n            debtTokenData.interestRate = _cache.interestRate = newInterestRate;\\n        }\\n    }\\n\\n    /**\\n     * @dev The implementation of the debt token repayment, used by repay() and repayAll()\\n     */\\n    function _repayToken(\\n        DebtTokenCache memory _cache,\\n        uint128 _repayAmount,\\n        address _fromAccount,\\n        address _onBehalfOf\\n    ) internal {\\n        _repayTotalDebt(_cache, _repayAmount);\\n\\n        emit Repay(_fromAccount, _onBehalfOf, _repayAmount);\\n        // NB: Liquidity doesn't need to be checked after a repay, as that only improves the health.\\n\\n        // Pull the stables, and repay the TRV debt on behalf of the strategy.\\n        {\\n            daiToken.safeTransferFrom(_fromAccount, address(this), _repayAmount);\\n            treasuryReservesVault.repay(daiToken, _repayAmount, address(tlcStrategy));\\n        }\\n    }\\n\\n    /**\\n     * @dev Generate the LiquidationStatus struct with current details \\n     * for this account.\\n     */\\n    function _computeLiquidity(\\n        AccountData storage _accountData,\\n        DebtTokenCache memory _cache\\n    ) internal view returns (LiquidationStatus memory status) {\\n        status.collateral = _accountData.collateral;\\n\\n        status.currentDebt = _currentAccountDebt(\\n            _cache, \\n            _accountData.debtCheckpoint, \\n            _accountData.interestAccumulator,\\n            true // round up for user reported debt\\n        );\\n\\n        status.collateralValue = status.collateral * _cache.price / PRECISION;\\n\\n        status.hasExceededMaxLtv = status.currentDebt > _maxBorrowLimit(\\n            _cache,\\n            status.collateral\\n        );\\n    }\\n\\n    /**\\n     * @dev Check if this account is to be liquidated given the current\\n     * account, debt token and market conditions.\\n     * Revert if the account has exceeded the maximum LTV\\n     */\\n    function _checkLiquidity(AccountData storage _accountData, DebtTokenCache memory _cache) internal view {\\n        LiquidationStatus memory _status = _computeLiquidity(\\n            _accountData,\\n            _cache\\n        );\\n        if (_status.hasExceededMaxLtv) {\\n            revert ExceededMaxLtv(_status.collateral, _status.collateralValue, _status.currentDebt);\\n        }\\n    }\\n\\n    /**\\n     * @dev Reduce the total debt in storage by a repayment amount.\\n     * The sum each users debt may be slightly more than the recorded total debt\\n     * because users debt is rounded up for dust.\\n     * The Total debt is floored at 0.\\n     */\\n    function _repayTotalDebt(\\n        DebtTokenCache memory _cache,\\n        uint128 _repayAmount\\n    ) internal {\\n        if (_repayAmount == 0) return;\\n\\n        unchecked {\\n            uint128 _newDebt = (_repayAmount > _cache.totalDebt)\\n                ? 0\\n                : _cache.totalDebt - _repayAmount;\\n\\n            debtTokenData.totalDebt = _cache.totalDebt = _newDebt;\\n        }\\n\\n        // Update interest rates now the total debt has been updated.\\n        _updateInterestRates(_cache);\\n    }\\n\\n    /**\\n     * @dev Calculate the Utilization Ratio. \\n     * It is only relevant for DAI, where there is a debt ceiling set in the cache.\\n     * Numerator = The total debt across all users for this token\\n     * Denominator = The max amount which TLC can borrow from the Treasury Reserves Vault\\n     */\\n    function _utilizationRatio(\\n        DebtTokenCache memory _cache\\n    ) internal pure returns (uint256) {\\n        return _cache.trvDebtCeiling == 0\\n            ? 0\\n            : mulDiv(_cache.totalDebt, PRECISION, _cache.trvDebtCeiling);\\n    }\\n    \\n    /**\\n     * @dev mulDiv with an option to round the result up or down to the nearest wei\\n     */\\n    function _mulDivRound(uint256 x, uint256 y, uint256 denominator, bool roundUp) internal pure returns (uint256 result) {\\n        result = mulDiv(x, y, denominator);\\n        // See OZ Math.sol for the equivalent mulDiv() with rounding.\\n        if (roundUp && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n    }\\n\\n    /**\\n     * @dev Calculate the latest debt for a given account & token.\\n     * Derived from the prior debt checkpoint, and the interest accumulator.\\n     */\\n    function _currentAccountDebt(\\n        DebtTokenCache memory _cache,\\n        uint128 _accountDebtCheckpoint,\\n        uint256 _accountInterestAccumulator,\\n        bool roundUp\\n    ) internal pure returns (uint128 result) {\\n        return (_accountDebtCheckpoint == 0) \\n            ? 0\\n            : _mulDivRound(\\n                _accountDebtCheckpoint, \\n                _cache.interestAccumulator, \\n                _accountInterestAccumulator, \\n                roundUp\\n            ).encodeUInt128();\\n    }\\n\\n    /**\\n     * @dev What is the max borrow liit for a given token and \\n     * amount of collateral\\n     */\\n    function _maxBorrowLimit(\\n        DebtTokenCache memory _cache,\\n        uint128 _collateral\\n    ) internal pure returns (uint128) {\\n        return mulDiv(\\n            _collateral * _cache.price,\\n            _cache.config.maxLtvRatio,\\n            DOUBLE_PRECISION\\n        ).encodeUInt128();\\n    }\\n\\n    /**\\n     * @dev What is the health factor, given an amount of \\n     * collateral and debt.\\n     * health = (collateral value / debt value) * max LTV Limit\\n     */\\n    function _healthFactor(\\n        DebtTokenCache memory _cache,\\n        uint256 _collateral,\\n        uint256 _debt\\n    ) internal pure returns (uint256) {\\n        return _debt == 0\\n            ? type(uint256).max\\n            : mulDiv(\\n                _collateral * _cache.price,\\n                _cache.config.maxLtvRatio,\\n                _debt * PRECISION\\n            );\\n    }\\n\\n    /**\\n     * @dev What is the Loan To Value (LTV), given an amount of \\n     * collateral and debt.\\n     * LTV = debt value / collateral value\\n     */\\n    function _loanToValueRatio(\\n        DebtTokenCache memory _cache,\\n        uint256 _collateral,\\n        uint256 _debt\\n    ) internal pure returns (uint256) {\\n        return _collateral == 0\\n            ? type(uint256).max\\n            : mulDiv(\\n                _debt,\\n                DOUBLE_PRECISION,\\n                _collateral * _cache.price\\n            );\\n    }\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 999999\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_initialRescuer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_initialExecutor\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_circuitBreakerProxy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_templeToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_daiToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_maxLtvRatio\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_interestRateModel\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"totalDebtAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"repayAmount\",\"type\":\"uint256\"}],\"name\":\"ExceededBorrowedAmount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"collateralAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateralValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentDaiDebt\",\"type\":\"uint256\"}],\"name\":\"ExceededMaxLtv\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ExpectedNonZero\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"required\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"provided\",\"type\":\"uint256\"}],\"name\":\"InsufficientAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidAccess\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidAddress\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"InvalidAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidParam\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Overflow\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"name\":\"PRBMath_MulDiv18_Overflow\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"denominator\",\"type\":\"uint256\"}],\"name\":\"PRBMath_MulDiv_Overflow\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"UD60x18\",\"name\":\"x\",\"type\":\"uint256\"}],\"name\":\"PRBMath_UD60x18_Exp2_InputTooBig\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"UD60x18\",\"name\":\"x\",\"type\":\"uint256\"}],\"name\":\"PRBMath_UD60x18_Exp_InputTooBig\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Paused\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"}],\"name\":\"Borrow\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isPaused\",\"type\":\"bool\"}],\"name\":\"BorrowPausedSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fundedBy\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"onBehalfOf\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"collateralAmount\",\"type\":\"uint128\"}],\"name\":\"CollateralAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"collateralAmount\",\"type\":\"uint128\"}],\"name\":\"CollateralRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes4\",\"name\":\"fnSelector\",\"type\":\"bytes4\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"ExplicitAccessSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"interestRateModel\",\"type\":\"address\"}],\"name\":\"InterestRateModelSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"newInterestRate\",\"type\":\"uint96\"}],\"name\":\"InterestRateUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"collateralSeized\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"collateralValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"daiDebtWiped\",\"type\":\"uint128\"}],\"name\":\"Liquidated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isPaused\",\"type\":\"bool\"}],\"name\":\"LiquidationsPausedSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxLtvRatio\",\"type\":\"uint256\"}],\"name\":\"MaxLtvRatioSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"}],\"name\":\"MinBorrowAmountSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldExecutor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newExecutor\",\"type\":\"address\"}],\"name\":\"NewExecutorAccepted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldExecutor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldProposedExecutor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newProposedExecutor\",\"type\":\"address\"}],\"name\":\"NewExecutorProposed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldRescuer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newRescuer\",\"type\":\"address\"}],\"name\":\"NewRescuerAccepted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldRescuer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldProposedRescuer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newProposedRescuer\",\"type\":\"address\"}],\"name\":\"NewRescuerProposed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fundedBy\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"onBehalfOf\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"repayAmount\",\"type\":\"uint128\"}],\"name\":\"Repay\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"RescueModeSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"treasuryReservesVault\",\"type\":\"address\"}],\"name\":\"TlcStrategySet\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptExecutor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptRescuer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"accountData\",\"outputs\":[{\"components\":[{\"internalType\":\"uint128\",\"name\":\"collateral\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"debtCheckpoint\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"interestAccumulator\",\"type\":\"uint256\"}],\"internalType\":\"struct ITlcDataTypes.AccountData\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"accountPosition\",\"outputs\":[{\"components\":[{\"internalType\":\"uint128\",\"name\":\"collateral\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"currentDebt\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"maxBorrow\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"healthFactor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"loanToValueRatio\",\"type\":\"uint256\"}],\"internalType\":\"struct ITlcDataTypes.AccountPosition\",\"name\":\"position\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"collateralAmount\",\"type\":\"uint128\"},{\"internalType\":\"address\",\"name\":\"onBehalfOf\",\"type\":\"address\"}],\"name\":\"addCollateral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"}],\"name\":\"batchLiquidate\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"totalCollateralClaimed\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"totalDebtWiped\",\"type\":\"uint128\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"borrow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"circuitBreakerProxy\",\"outputs\":[{\"internalType\":\"contract ITempleCircuitBreakerProxy\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"}],\"name\":\"computeLiquidity\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"hasExceededMaxLtv\",\"type\":\"bool\"},{\"internalType\":\"uint128\",\"name\":\"collateral\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"collateralValue\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"currentDebt\",\"type\":\"uint128\"}],\"internalType\":\"struct ITlcDataTypes.LiquidationStatus[]\",\"name\":\"status\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"daiToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"debtTokenDetails\",\"outputs\":[{\"components\":[{\"internalType\":\"uint96\",\"name\":\"maxLtvRatio\",\"type\":\"uint96\"},{\"internalType\":\"contract IInterestRateModel\",\"name\":\"interestRateModel\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"borrowsPaused\",\"type\":\"bool\"}],\"internalType\":\"struct ITlcDataTypes.DebtTokenConfig\",\"name\":\"\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint32\",\"name\":\"interestAccumulatorUpdatedAt\",\"type\":\"uint32\"},{\"internalType\":\"uint128\",\"name\":\"totalDebt\",\"type\":\"uint128\"},{\"internalType\":\"uint96\",\"name\":\"interestRate\",\"type\":\"uint96\"},{\"internalType\":\"uint256\",\"name\":\"interestAccumulator\",\"type\":\"uint256\"}],\"internalType\":\"struct ITlcDataTypes.DebtTokenData\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"executor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"name\":\"explicitFunctionAccess\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDebtTokenCache\",\"outputs\":[{\"components\":[{\"components\":[{\"internalType\":\"uint96\",\"name\":\"maxLtvRatio\",\"type\":\"uint96\"},{\"internalType\":\"contract IInterestRateModel\",\"name\":\"interestRateModel\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"borrowsPaused\",\"type\":\"bool\"}],\"internalType\":\"struct ITlcDataTypes.DebtTokenConfig\",\"name\":\"config\",\"type\":\"tuple\"},{\"internalType\":\"uint128\",\"name\":\"totalDebt\",\"type\":\"uint128\"},{\"internalType\":\"uint96\",\"name\":\"interestRate\",\"type\":\"uint96\"},{\"internalType\":\"uint256\",\"name\":\"interestAccumulator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"trvDebtCeiling\",\"type\":\"uint256\"}],\"internalType\":\"struct TempleLineOfCredit.DebtTokenCache\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"inRescueMode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidationsPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minBorrowAmount\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"proposeNewExecutor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"proposeNewRescuer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"recoverToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"refreshInterestRates\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"removeCollateral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"repayAmount\",\"type\":\"uint128\"},{\"internalType\":\"address\",\"name\":\"onBehalfOf\",\"type\":\"address\"}],\"name\":\"repay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"onBehalfOf\",\"type\":\"address\"}],\"name\":\"repayAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rescuer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"isPaused\",\"type\":\"bool\"}],\"name\":\"setBorrowPaused\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"allowedCaller\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"bytes4\",\"name\":\"fnSelector\",\"type\":\"bytes4\"},{\"internalType\":\"bool\",\"name\":\"allowed\",\"type\":\"bool\"}],\"internalType\":\"struct ITempleElevatedAccess.ExplicitAccess[]\",\"name\":\"access\",\"type\":\"tuple[]\"}],\"name\":\"setExplicitAccess\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"interestRateModel\",\"type\":\"address\"}],\"name\":\"setInterestRateModel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"isPaused\",\"type\":\"bool\"}],\"name\":\"setLiquidationsPaused\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxLtvRatio\",\"type\":\"uint256\"}],\"name\":\"setMaxLtvRatio\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"}],\"name\":\"setMinBorrowAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setRescueMode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newTlcStrategy\",\"type\":\"address\"}],\"name\":\"setTlcStrategy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"templeToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tlcStrategy\",\"outputs\":[{\"internalType\":\"contract ITlcStrategy\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalCollateral\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDebtPosition\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"utilizationRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrowRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalDebt\",\"type\":\"uint256\"}],\"internalType\":\"struct ITlcDataTypes.TotalDebtPosition\",\"name\":\"position\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasuryReservesVault\",\"outputs\":[{\"internalType\":\"contract ITreasuryReservesVault\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "TempleLineOfCredit", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "999999", "ConstructorArguments": "0000000000000000000000009f90430179d9b67341bfa50559bc7b8e35629f1b000000000000000000000000b1e8ab0a81aadf632a653e46caeda1593d71d14300000000000000000000000087b8d213177fb132e508b5d7018f7b590e00a480000000000000000000000000470ebf5f030ed85fc1ed4c2d36b9dd02e77cf1b70000000000000000000000006b175474e89094c44da98b954eedeac495271d0f0000000000000000000000000000000000000000000000000b1a2bc2ec5000000000000000000000000000009498ab765beed8292938937079ac56080b8a179d", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}