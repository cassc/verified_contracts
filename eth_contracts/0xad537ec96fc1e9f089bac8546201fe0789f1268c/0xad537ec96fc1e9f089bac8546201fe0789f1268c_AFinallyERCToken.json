{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.19;\r\n\r\n\r\n\r\nabstract contract Context {\r\n\r\n    function _msgSender() internal view virtual returns (address) {\r\n\r\n        return msg.sender;\r\n\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\ninterface IERC20 {\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n\r\n\r\n    function transfer(address recipient, uint256 amount)\r\n\r\n        external\r\n\r\n        returns (bool);\r\n\r\n\r\n\r\n    function allowance(address owner, address spender)\r\n\r\n        external\r\n\r\n        view\r\n\r\n        returns (uint256);\r\n\r\n\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n\r\n\r\n    function transferFrom(\r\n\r\n        address sender,\r\n\r\n        address recipient,\r\n\r\n        uint256 amount\r\n\r\n    ) external returns (bool);\r\n\r\n\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(\r\n\r\n        address indexed owner,\r\n\r\n        address indexed spender,\r\n\r\n        uint256 value\r\n\r\n    );\r\n\r\n}\r\n\r\n\r\n\r\ncontract Ownable is Context {\r\n\r\n    address private _owner;\r\n\r\n    address private _previousOwner;\r\n\r\n    event OwnershipTransferred(\r\n\r\n        address indexed previousOwner,\r\n\r\n        address indexed newOwner\r\n\r\n    );\r\n\r\n\r\n\r\n    constructor() {\r\n\r\n        address msgSender = _msgSender();\r\n\r\n        _owner = msgSender;\r\n\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n\r\n    }\r\n\r\n\r\n\r\n    function owner() public view returns (address) {\r\n\r\n        return _owner;\r\n\r\n    }\r\n\r\n\r\n\r\n    modifier onlyOwner() {\r\n\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n\r\n        _;\r\n\r\n    }\r\n\r\n\r\n\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n\r\n        _transferOwnership(newOwner);\r\n\r\n    }\r\n\r\n\r\n\r\n    function _transferOwnership(address newOwner) internal {\r\n\r\n        require(\r\n\r\n            newOwner != address(0),\r\n\r\n            \"Ownable: new owner is the zero address\"\r\n\r\n        );\r\n\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n\r\n        _owner = newOwner;\r\n\r\n    }\r\n\r\n\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n\r\n        emit OwnershipTransferred(_owner, address(0));\r\n\r\n        _owner = address(0);\r\n\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\ninterface IUniswapV2Factory {\r\n\r\n    function createPair(address tokenA, address tokenB)\r\n\r\n        external\r\n\r\n        returns (address pair);\r\n\r\n}\r\n\r\n\r\n\r\ninterface IUniswapV2Router02 {\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n\r\n        uint256 amountIn,\r\n\r\n        uint256 amountOutMin,\r\n\r\n        address[] calldata path,\r\n\r\n        address to,\r\n\r\n        uint256 deadline\r\n\r\n    ) external;\r\n\r\n\r\n\r\n    function factory() external pure returns (address);\r\n\r\n\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n}\r\n\r\n\r\n\r\ncontract AFinallyERCToken is Context, IERC20, Ownable {\r\n\r\n    \r\n\r\n    string private constant _name = \"Finally ERC\";\r\n\r\n    string private constant _symbol = \"Finally\";\r\n\r\n    uint256 private constant _totalSupply = 500_000_000 * 10**18;\r\n\r\n    uint256 public minSwap = 250_000 * 10**18;\r\n\r\n    uint8 private constant _decimals = 18;\r\n\r\n\r\n\r\n    IUniswapV2Router02 immutable uniswapV2Router;\r\n\r\n    address public immutable uniswapV2Pair;\r\n\r\n    address immutable WETH;\r\n\r\n    address payable public marketingWallet;\r\n\r\n\r\n\r\n    uint256 public BuyMarketingTax;\r\n\r\n    uint256 public SellMarketingTax;\r\n\r\n    uint256 public BuyburnTax;\r\n\r\n    uint256 public SellburnTax;\r\n\r\n    address private deadWallet = 0x000000000000000000000000000000000000dEaD; \r\n\r\n    uint8 private inSwapAndLiquify;\r\n\r\n\r\n\r\n    mapping(address => uint256) private _balance;\r\n\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    mapping(address => bool) public _isExcludedFromFees;\r\n\r\n\r\n\r\n    constructor() {\r\n\r\n        uniswapV2Router = IUniswapV2Router02(\r\n\r\n            0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D\r\n\r\n        );\r\n\r\n        WETH = uniswapV2Router.WETH();\r\n\r\n        BuyMarketingTax = 1;\r\n\r\n        SellMarketingTax = 1;\r\n\r\n        BuyburnTax = 1;\r\n\r\n        SellburnTax = 1;\r\n\r\n\r\n\r\n\r\n\r\n        uniswapV2Pair = IUniswapV2Factory(uniswapV2Router.factory()).createPair(\r\n\r\n            address(this),\r\n\r\n            WETH\r\n\r\n        );\r\n\r\n\r\n\r\n        marketingWallet = payable(0xDb327E2b9Fa6E160B0Ed3e6627186d9e84CEeCAb);\r\n\r\n        _balance[msg.sender] = _totalSupply;\r\n\r\n        _isExcludedFromFees[marketingWallet] = true;\r\n\r\n        _isExcludedFromFees[msg.sender] = true;\r\n\r\n        _isExcludedFromFees[address(this)] = true;\r\n\r\n        _isExcludedFromFees[address(uniswapV2Router)] = true;\r\n\r\n        _allowances[address(this)][address(uniswapV2Router)] = type(uint256)\r\n\r\n            .max;\r\n\r\n        _allowances[msg.sender][address(uniswapV2Router)] = type(uint256).max;\r\n\r\n        _allowances[marketingWallet][address(uniswapV2Router)] = type(uint256)\r\n\r\n            .max;\r\n\r\n\r\n\r\n        emit Transfer(address(0), _msgSender(), _totalSupply);\r\n\r\n    }\r\n\r\n\r\n\r\n    function name() public pure returns (string memory) {\r\n\r\n        return _name;\r\n\r\n    }\r\n\r\n\r\n\r\n    function symbol() public pure returns (string memory) {\r\n\r\n        return _symbol;\r\n\r\n    }\r\n\r\n\r\n\r\n    function decimals() public pure returns (uint8) {\r\n\r\n        return _decimals;\r\n\r\n    }\r\n\r\n\r\n\r\n    function totalSupply() public pure override returns (uint256) {\r\n\r\n        return _totalSupply;\r\n\r\n    }\r\n\r\n\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n\r\n        return _balance[account];\r\n\r\n    }\r\n\r\n\r\n\r\n    function transfer(address recipient, uint256 amount)\r\n\r\n        public\r\n\r\n        override\r\n\r\n        returns (bool)\r\n\r\n    {\r\n\r\n        _transfer(_msgSender(), recipient, amount);\r\n\r\n        return true;\r\n\r\n    }\r\n\r\n\r\n\r\n    function allowance(address owner, address spender)\r\n\r\n        public\r\n\r\n        view\r\n\r\n        override\r\n\r\n        returns (uint256)\r\n\r\n    {\r\n\r\n        return _allowances[owner][spender];\r\n\r\n    }\r\n\r\n\r\n\r\n    function approve(address spender, uint256 amount)\r\n\r\n        public\r\n\r\n        override\r\n\r\n        returns (bool)\r\n\r\n    {\r\n\r\n        _approve(_msgSender(), spender, amount);\r\n\r\n        return true;\r\n\r\n    }\r\n\r\n\r\n\r\n    function transferFrom(\r\n\r\n        address sender,\r\n\r\n        address recipient,\r\n\r\n        uint256 amount\r\n\r\n    ) public override returns (bool) {\r\n\r\n        _transfer(sender, recipient, amount);\r\n\r\n        _approve(\r\n\r\n            sender,\r\n\r\n            _msgSender(),\r\n\r\n            _allowances[sender][_msgSender()] - amount\r\n\r\n        );\r\n\r\n        return true;\r\n\r\n    }\r\n\r\n\r\n\r\n    function _approve(\r\n\r\n        address owner,\r\n\r\n        address spender,\r\n\r\n        uint256 amount\r\n\r\n    ) private {\r\n\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n\r\n        emit Approval(owner, spender, amount);\r\n\r\n    }\r\n\r\n    \r\n\r\n    function ExcludeFromFees(address holder, bool exempt) external onlyOwner {\r\n\r\n        _isExcludedFromFees[holder] = exempt;\r\n\r\n    }\r\n\r\n\r\n\r\n    function ChangeTax(uint256 NewBuyMarketingTax, uint256 NewSellMarketingTax, uint256 newBuyBurnTax,  uint256 newSellBurnTax ) external onlyOwner {\r\n\r\n        BuyMarketingTax = NewBuyMarketingTax;\r\n\r\n        SellMarketingTax = NewSellMarketingTax;\r\n\r\n        BuyburnTax = newBuyBurnTax;\r\n\r\n        SellburnTax = newSellBurnTax;\r\n\r\n    }\r\n\r\n    \r\n\r\n    function ChangeMinSwap(uint256 NewMinSwapAmount) external onlyOwner {\r\n\r\n        minSwap = NewMinSwapAmount;\r\n\r\n    }\r\n\r\n\r\n\r\n    function ChangeMarketingWalletAddress(address newAddress) external onlyOwner() {\r\n\r\n        marketingWallet = payable(newAddress);\r\n\r\n    }\r\n\r\n\r\n\r\n    // Contract Coded by @Hassanrazaxv on Fiverr and Telegram\r\n\r\n\r\n\r\n    function _transfer(\r\n\r\n        address from,\r\n\r\n        address to,\r\n\r\n        uint256 amount\r\n\r\n    ) private {\r\n\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n\r\n        require(amount > 1e9, \"Min transfer amt\");\r\n\r\n\r\n\r\n        uint256 _tax;\r\n\r\n        uint256 _burnTax;\r\n\r\n        if (_isExcludedFromFees[from] || _isExcludedFromFees[to]) {\r\n\r\n            _tax = 0;\r\n\r\n            _burnTax = 0;\r\n\r\n        } else {\r\n\r\n\r\n\r\n            if (inSwapAndLiquify == 1) {\r\n\r\n                //No tax transfer\r\n\r\n                _balance[from] -= amount;\r\n\r\n                _balance[to] += amount;\r\n\r\n\r\n\r\n                emit Transfer(from, to, amount);\r\n\r\n                return;\r\n\r\n            }\r\n\r\n\r\n\r\n            if (from == uniswapV2Pair) {\r\n\r\n                _tax = BuyMarketingTax;\r\n\r\n                _burnTax = BuyburnTax;\r\n\r\n            } else if (to == uniswapV2Pair) {\r\n\r\n                uint256 tokensToSwap = _balance[address(this)];\r\n\r\n                if (tokensToSwap > minSwap && inSwapAndLiquify == 0) {\r\n\r\n                    inSwapAndLiquify = 1;\r\n\r\n                    address[] memory path = new address[](2);\r\n\r\n                    path[0] = address(this);\r\n\r\n                    path[1] = WETH;\r\n\r\n                    uniswapV2Router\r\n\r\n                        .swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n\r\n                            tokensToSwap,\r\n\r\n                            0,\r\n\r\n                            path,\r\n\r\n                            marketingWallet,\r\n\r\n                            block.timestamp\r\n\r\n                        );\r\n\r\n                    inSwapAndLiquify = 0;\r\n\r\n                }\r\n\r\n                _tax = SellMarketingTax;\r\n\r\n                _burnTax = SellburnTax;\r\n\r\n            } else {\r\n\r\n                _tax = 0;\r\n\r\n                _burnTax = 0;\r\n\r\n            }\r\n\r\n        }\r\n\r\n        \r\n\r\n    // Contract Coded by @Hassanrazaxv on Fiverr and Telegram\r\n\r\n\r\n\r\n        //Is there tax for sender|receiver?\r\n\r\n        if (_tax != 0 && _burnTax != 0) {\r\n\r\n            //Tax transfer\r\n\r\n            uint256 taxTokens = (amount * _tax) / 100;\r\n\r\n            uint256 burnTokens = (amount * _burnTax) / 100;\r\n\r\n            uint256 transferAmount = amount - taxTokens - burnTokens;\r\n\r\n\r\n\r\n            _balance[from] -= amount;\r\n\r\n            _balance[to] += transferAmount;\r\n\r\n            _balance[address(this)] += taxTokens;\r\n\r\n            _balance[deadWallet] += burnTokens;\r\n\r\n            emit Transfer(from, deadWallet, burnTokens);\r\n\r\n            emit Transfer(from, address(this), taxTokens);\r\n\r\n            emit Transfer(from, to, transferAmount);\r\n\r\n        } else {\r\n\r\n            //No tax transfer\r\n\r\n            _balance[from] -= amount;\r\n\r\n            _balance[to] += amount;\r\n\r\n\r\n\r\n            emit Transfer(from, to, amount);\r\n\r\n        }\r\n\r\n    }\r\n\r\n\r\n\r\n    receive() external payable {}\r\n\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BuyMarketingTax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BuyburnTax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"ChangeMarketingWalletAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"NewMinSwapAmount\",\"type\":\"uint256\"}],\"name\":\"ChangeMinSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"NewBuyMarketingTax\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"NewSellMarketingTax\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newBuyBurnTax\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newSellBurnTax\",\"type\":\"uint256\"}],\"name\":\"ChangeTax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"exempt\",\"type\":\"bool\"}],\"name\":\"ExcludeFromFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SellMarketingTax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SellburnTax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_isExcludedFromFees\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingWallet\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "AFinallyERCToken", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://685bee55cfeb268f3b3f7fa300b6f93ff5d98f2525c25ece0c0221a10b27c045"}