{"SourceCode": "// Sources flattened with hardhat v2.19.5 https://hardhat.org\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\n// File contracts/interfaces/IERC20.sol\r\n\r\n// Original license: SPDX_License_Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\r\n\r\npragma solidity 0.8.24;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Returns the value of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the value of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\r\n     * caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\r\n     * allowance mechanism. `value` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n}\r\n\r\n\r\n// File contracts/interfaces/IERC20Metadata.sol\r\n\r\n// Original license: SPDX_License_Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Metadata.sol)\r\n\r\npragma solidity 0.8.24;\r\n/**\r\n * @dev Interface for the optional metadata functions from the ERC20 standard.\r\n */\r\ninterface IERC20Metadata is IERC20 {\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the decimals places of the token.\r\n     */\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\n\r\n// File contracts/interfaces/IUniswapV2Router01.sol\r\n\r\npragma solidity >=0.6.2;\r\n\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapTokensForExactTokens(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n\r\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n\r\n\r\n// File contracts/interfaces/IUniswapV2Router02.sol\r\n\r\npragma solidity >=0.6.2;\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountETH);\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\n\r\n// File contracts/interfaces/draft-IERC6093.sol\r\n\r\n// Original license: SPDX_License_Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\r\npragma solidity 0.8.24;\r\n\r\n/**\r\n * @dev Standard ERC20 Errors\r\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\r\n */\r\ninterface IERC20Errors {\r\n    /**\r\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\r\n     * @param sender Address whose tokens are being transferred.\r\n     * @param balance Current balance for the interacting account.\r\n     * @param needed Minimum amount required to perform a transfer.\r\n     */\r\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\r\n\r\n    /**\r\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\r\n     * @param sender Address whose tokens are being transferred.\r\n     */\r\n    error ERC20InvalidSender(address sender);\r\n\r\n    /**\r\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\r\n     * @param receiver Address to which tokens are being transferred.\r\n     */\r\n    error ERC20InvalidReceiver(address receiver);\r\n\r\n    /**\r\n     * @dev Indicates a failure with the `spender`\u0393\u00c7\u00d6s `allowance`. Used in transfers.\r\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\r\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\r\n     * @param needed Minimum amount required to perform a transfer.\r\n     */\r\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\r\n\r\n    /**\r\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\r\n     * @param approver Address initiating an approval operation.\r\n     */\r\n    error ERC20InvalidApprover(address approver);\r\n\r\n    /**\r\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\r\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\r\n     */\r\n    error ERC20InvalidSpender(address spender);\r\n}\r\n\r\n/**\r\n * @dev Standard ERC721 Errors\r\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\r\n */\r\ninterface IERC721Errors {\r\n    /**\r\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\r\n     * Used in balance queries.\r\n     * @param owner Address of the current owner of a token.\r\n     */\r\n    error ERC721InvalidOwner(address owner);\r\n\r\n    /**\r\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\r\n     * @param tokenId Identifier number of a token.\r\n     */\r\n    error ERC721NonexistentToken(uint256 tokenId);\r\n\r\n    /**\r\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\r\n     * @param sender Address whose tokens are being transferred.\r\n     * @param tokenId Identifier number of a token.\r\n     * @param owner Address of the current owner of a token.\r\n     */\r\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\r\n\r\n    /**\r\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\r\n     * @param sender Address whose tokens are being transferred.\r\n     */\r\n    error ERC721InvalidSender(address sender);\r\n\r\n    /**\r\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\r\n     * @param receiver Address to which tokens are being transferred.\r\n     */\r\n    error ERC721InvalidReceiver(address receiver);\r\n\r\n    /**\r\n     * @dev Indicates a failure with the `operator`\u0393\u00c7\u00d6s approval. Used in transfers.\r\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\r\n     * @param tokenId Identifier number of a token.\r\n     */\r\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\r\n\r\n    /**\r\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\r\n     * @param approver Address initiating an approval operation.\r\n     */\r\n    error ERC721InvalidApprover(address approver);\r\n\r\n    /**\r\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\r\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\r\n     */\r\n    error ERC721InvalidOperator(address operator);\r\n}\r\n\r\n/**\r\n * @dev Standard ERC1155 Errors\r\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\r\n */\r\ninterface IERC1155Errors {\r\n    /**\r\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\r\n     * @param sender Address whose tokens are being transferred.\r\n     * @param balance Current balance for the interacting account.\r\n     * @param needed Minimum amount required to perform a transfer.\r\n     * @param tokenId Identifier number of a token.\r\n     */\r\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\r\n\r\n    /**\r\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\r\n     * @param sender Address whose tokens are being transferred.\r\n     */\r\n    error ERC1155InvalidSender(address sender);\r\n\r\n    /**\r\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\r\n     * @param receiver Address to which tokens are being transferred.\r\n     */\r\n    error ERC1155InvalidReceiver(address receiver);\r\n\r\n    /**\r\n     * @dev Indicates a failure with the `operator`\u0393\u00c7\u00d6s approval. Used in transfers.\r\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\r\n     * @param owner Address of the current owner of a token.\r\n     */\r\n    error ERC1155MissingApprovalForAll(address operator, address owner);\r\n\r\n    /**\r\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\r\n     * @param approver Address initiating an approval operation.\r\n     */\r\n    error ERC1155InvalidApprover(address approver);\r\n\r\n    /**\r\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\r\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\r\n     */\r\n    error ERC1155InvalidOperator(address operator);\r\n\r\n    /**\r\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\r\n     * Used in batch transfers.\r\n     * @param idsLength Length of the array of token identifiers\r\n     * @param valuesLength Length of the array of token amounts\r\n     */\r\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\r\n}\r\n\r\n\r\n// File contracts/libraries/Context.sol\r\n\r\n// Original license: SPDX_License_Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\r\n\r\npragma solidity 0.8.24;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n\r\n    function _contextSuffixLength() internal view virtual returns (uint256) {\r\n        return 0;\r\n    }\r\n}\r\n\r\n\r\n// File contracts/libraries/ERC20.sol\r\n\r\n// Original license: SPDX_License_Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/ERC20.sol)\r\n\r\npragma solidity 0.8.24;\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * The default value of {decimals} is 18. To change this, you should override\r\n * this function so it returns a different value.\r\n *\r\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\r\n * instead returning `false` on failure. This behavior is nonetheless\r\n * conventional and does not conflict with the expectations of ERC20\r\n * applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n */\r\nabstract contract ERC20 is Context, IERC20, IERC20Metadata, IERC20Errors {\r\n    mapping(address account => uint256) private _balances;\r\n\r\n    mapping(address account => mapping(address spender => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n\r\n    /**\r\n     * @dev Sets the values for {name} and {symbol}.\r\n     *\r\n     * All two of these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor(string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view virtual returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view virtual returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the default value returned by this function, unless\r\n     * it's overridden.\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view virtual returns (uint8) {\r\n        return 18;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view virtual returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view virtual returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     * - the caller must have a balance of at least `value`.\r\n     */\r\n    function transfer(address to, uint256 value) public virtual returns (bool) {\r\n        address owner = _msgSender();\r\n        _transfer(owner, to, value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view virtual returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\r\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 value) public virtual returns (bool) {\r\n        address owner = _msgSender();\r\n        _approve(owner, spender, value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20}.\r\n     *\r\n     * NOTE: Does not update the allowance if the current allowance\r\n     * is the maximum `uint256`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` and `to` cannot be the zero address.\r\n     * - `from` must have a balance of at least `value`.\r\n     * - the caller must have allowance for ``from``'s tokens of at least\r\n     * `value`.\r\n     */\r\n    function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {\r\n        address spender = _msgSender();\r\n        _spendAllowance(from, spender, value);\r\n        _transfer(from, to, value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves a `value` amount of tokens from `from` to `to`.\r\n     *\r\n     * This internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\r\n     */\r\n    function _transfer(address from, address to, uint256 value) internal {\r\n        if (from == address(0)) {\r\n            revert ERC20InvalidSender(address(0));\r\n        }\r\n        if (to == address(0)) {\r\n            revert ERC20InvalidReceiver(address(0));\r\n        }\r\n        _update(from, to, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\r\n     * (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\r\n     * this function.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _update(address from, address to, uint256 value) internal virtual {\r\n        if (from == address(0)) {\r\n            // Overflow check required: The rest of the code assumes that totalSupply never overflows\r\n            _totalSupply += value;\r\n        } else {\r\n            uint256 fromBalance = _balances[from];\r\n            if (fromBalance < value) {\r\n                revert ERC20InsufficientBalance(from, fromBalance, value);\r\n            }\r\n            unchecked {\r\n                // Overflow not possible: value <= fromBalance <= totalSupply.\r\n                _balances[from] = fromBalance - value;\r\n            }\r\n        }\r\n\r\n        if (to == address(0)) {\r\n            unchecked {\r\n                // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.\r\n                _totalSupply -= value;\r\n            }\r\n        } else {\r\n            unchecked {\r\n                // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.\r\n                _balances[to] += value;\r\n            }\r\n        }\r\n\r\n        emit Transfer(from, to, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\r\n     * Relies on the `_update` mechanism\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\r\n     */\r\n    function _mint(address account, uint256 value) internal {\r\n        if (account == address(0)) {\r\n            revert ERC20InvalidReceiver(address(0));\r\n        }\r\n        _update(address(0), account, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\r\n     * Relies on the `_update` mechanism.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * NOTE: This function is not virtual, {_update} should be overridden instead\r\n     */\r\n    function _burn(address account, uint256 value) internal {\r\n        if (account == address(0)) {\r\n            revert ERC20InvalidSender(address(0));\r\n        }\r\n        _update(account, address(0), value);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `value` as the allowance of `spender` over the `owner` s tokens.\r\n     *\r\n     * This internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     *\r\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\r\n     */\r\n    function _approve(address owner, address spender, uint256 value) internal {\r\n        _approve(owner, spender, value, true);\r\n    }\r\n\r\n    /**\r\n     * @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\r\n     *\r\n     * By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\r\n     * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\r\n     * `Approval` event during `transferFrom` operations.\r\n     *\r\n     * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\r\n     * true using the following override:\r\n     * ```\r\n     * function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\r\n     *     super._approve(owner, spender, value, true);\r\n     * }\r\n     * ```\r\n     *\r\n     * Requirements are the same as {_approve}.\r\n     */\r\n    function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {\r\n        if (owner == address(0)) {\r\n            revert ERC20InvalidApprover(address(0));\r\n        }\r\n        if (spender == address(0)) {\r\n            revert ERC20InvalidSpender(address(0));\r\n        }\r\n        _allowances[owner][spender] = value;\r\n        if (emitEvent) {\r\n            emit Approval(owner, spender, value);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Updates `owner` s allowance for `spender` based on spent `value`.\r\n     *\r\n     * Does not update the allowance value in case of infinite allowance.\r\n     * Revert if not enough allowance is available.\r\n     *\r\n     * Does not emit an {Approval} event.\r\n     */\r\n    function _spendAllowance(address owner, address spender, uint256 value) internal virtual {\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n        if (currentAllowance != type(uint256).max) {\r\n            if (currentAllowance < value) {\r\n                revert ERC20InsufficientAllowance(spender, currentAllowance, value);\r\n            }\r\n            unchecked {\r\n                _approve(owner, spender, currentAllowance - value, false);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// File contracts/libraries/Ownable.sol\r\n\r\n// Original license: SPDX_License_Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\r\n\r\npragma solidity 0.8.24;\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * The initial owner is set to the address provided by the deployer. This can\r\n * later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    /**\r\n     * @dev The caller account is not authorized to perform an operation.\r\n     */\r\n    error OwnableUnauthorizedAccount(address account);\r\n\r\n    /**\r\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\r\n     */\r\n    error OwnableInvalidOwner(address owner);\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\r\n     */\r\n    constructor(address initialOwner) {\r\n        if (initialOwner == address(0)) {\r\n            revert OwnableInvalidOwner(address(0));\r\n        }\r\n        _transferOwnership(initialOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the owner.\r\n     */\r\n    function _checkOwner() internal view virtual {\r\n        if (owner() != _msgSender()) {\r\n            revert OwnableUnauthorizedAccount(_msgSender());\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby disabling any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        if (newOwner == address(0)) {\r\n            revert OwnableInvalidOwner(address(0));\r\n        }\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n\r\n// File contracts/TaxHelper.sol\r\n\r\n// Original license: SPDX_License_Identifier: MIT\r\npragma solidity 0.8.24;\r\n/// @title TaxHelperUniswapV2\r\n/// @author Boka\r\n/// @notice Contract to convert tokens to ETH and divide among tax wallets using UniswapV2\r\n/// @dev Can be used with multiple tokens\r\ncontract TaxHelperUniswapV2 is Ownable {\r\n    address public routerAddress;\r\n    mapping (address => bool) public approvedTokens;\r\n\r\n    event ApproveToken(address token, bool value);\r\n    event RouterAddressSet(address routerAddress);\r\n    event ConvertedToEth(address token, uint256 amount, address[] walletsWithTax, uint256[] percentages, uint256 DENOMINATOR, uint256 ethBalance);\r\n    event SentEth(address wallet, uint256 amount);\r\n\r\n    error TokenNotApproved(address sender);\r\n    error ZeroAddress();\r\n\r\n    constructor(address initialOwner, address _routerAddress)\r\n        Ownable(initialOwner)\r\n    {\r\n        setRouterAddress(_routerAddress);\r\n    }\r\n\r\n    /// @notice Approve a token to use this contract\r\n    /// @param token the token to approve\r\n    /// @param value true or false\r\n    function approveToken(address token, bool value) public onlyOwner {\r\n        approvedTokens[token] = value;\r\n        emit ApproveToken(token, value);\r\n    }\r\n\r\n    /// @notice Convert a token to ETH and divide among tax wallets\r\n    /// @dev only approve tokens or the owner may call this function\r\n    /// @param token the token to convert\r\n    /// @param walletsWithTax the wallets to divide the ETH among\r\n    /// @param percentages the percentages to divide the ETH among\r\n    /// @param DENOMINATOR the denominator to divide the percentages by\r\n    function convertToEthAndSend(address token, address[] memory walletsWithTax, uint256[] memory percentages, uint256 DENOMINATOR, uint256 maxThresholdSell) external {   \r\n        if(!approvedTokens[msg.sender] && msg.sender != owner()) revert TokenNotApproved(msg.sender);\r\n        \r\n        IERC20 tokenContract = IERC20(token);\r\n        uint256 balance = tokenContract.balanceOf(address(this));\r\n        if(balance > maxThresholdSell) {\r\n            balance = maxThresholdSell;\r\n        }\r\n        IUniswapV2Router02 uniswapRouter = IUniswapV2Router02(routerAddress);\r\n        tokenContract.approve(address(uniswapRouter), balance);\r\n        address[] memory path = new address[](2);\r\n        path[0] = token;\r\n        path[1] = uniswapRouter.WETH();\r\n        if(balance > 0) {\r\n            uniswapRouter.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n                balance,\r\n                0, // accept any amount of ETH\r\n                path,\r\n                address(this),\r\n                block.timestamp\r\n            ); \r\n\r\n            uint256 ethBalance = address(this).balance;\r\n            emit ConvertedToEth(token, balance, walletsWithTax, percentages, DENOMINATOR, ethBalance);\r\n            for(uint256 i = 0; i < walletsWithTax.length; ++i) {\r\n                uint256 amountToSend = ethBalance * percentages[i] / DENOMINATOR;\r\n                payable(walletsWithTax[i]).call{value: amountToSend, gas: 5000}(\"\");\r\n                emit SentEth(walletsWithTax[i], amountToSend);\r\n            }\r\n        }\r\n        \r\n    } \r\n\r\n    /// @notice Set the router address\r\n    /// @param _routerAddress the address of the UniswapV2Router02\r\n    function setRouterAddress(address _routerAddress) public onlyOwner {\r\n        if(_routerAddress == address(0)) revert ZeroAddress();\r\n        routerAddress = _routerAddress;\r\n        emit RouterAddressSet(_routerAddress);\r\n    }\r\n\r\n    /// @notice Withdraw the ETH from the contract\r\n    function withdraw() public onlyOwner {\r\n        payable(owner()).transfer(address(this).balance);\r\n    }\r\n\r\n    /// @notice Receive ETH\r\n    receive() payable external {\r\n    }\r\n}\r\n\r\n\r\n// File contracts/interfaces/ITaxHelper.sol\r\n\r\n// Original license: SPDX_License_Identifier: MIT\r\npragma solidity 0.8.24;\r\n\r\ninterface ITaxHelper {\r\n    function convertToEthAndSend(address token, address[] memory walletsWithTax, uint256[] memory percentages, uint256 DENOMINATOR, uint256 maxThresholdSell) external;\r\n}\r\n\r\n\r\n// File contracts/Token.sol\r\n\r\n// Original license: SPDX_License_Identifier: MIT\r\n\r\n// Website: https://strike-protocol.com/\r\n// Twitter: https://twitter.com/StrikeProtocol1\r\n// TG: https://t.me/StrikeProtocol\r\n\r\npragma solidity 0.8.24;\r\n\r\n\r\n\r\n/// @title Token\r\n/// @author Boka\r\n/// @notice ERC20 token with tax functionality\r\ncontract Token is ERC20, Ownable {\r\n\r\n    Tax[] public taxes;\r\n    uint256 public taxLength;\r\n    Settings public settings;\r\n\r\n    struct Settings {\r\n        uint256 threshold;\r\n        uint256 maxThresholdSell;\r\n        uint256 maxTax;\r\n        uint256 maxTxAmount;\r\n        uint256 minMaxTxAmount;\r\n        uint256 maxWalletAmount;\r\n        uint256 minMaxWalletAmount;\r\n        bool taxEnabled;\r\n        bool maxTxAmountEnabled;\r\n        bool maxWalletAmountEnabled;\r\n    }\r\n \r\n    struct Fee {\r\n        uint256 buy;\r\n        uint256 sell;\r\n        uint256 transfer;\r\n    }\r\n\r\n    struct Tax {\r\n        string name;\r\n        Fee fee;\r\n        address wallet;\r\n        bool withdrawAsGas;\r\n    }\r\n\r\n    uint256 public DENOMINATOR = 10000;\r\n\r\n    uint8 internal taxReentrancy = 1;\r\n\r\n    mapping (address => bool) public taxWhitelist;\r\n    mapping (address => bool) public maxWalletWhitelist;\r\n    mapping (address => bool) public maxTxWhitelist;\r\n    mapping (address => bool) public lpTokens;\r\n    mapping (address => bool) public taxesWithBalance;\r\n    mapping (address => uint256) public taxBalances;\r\n    address[] public walletsWithTax;\r\n\r\n    address public taxHelper;\r\n\r\n    event UpdatedTaxes(Tax[] _taxes, bool cleanWallets);\r\n    event TaxTransferred(address indexed sender, uint256 fee, address indexed wallet, bool isBuy, bool isSell, bool isTransfer, bool withdrawAsGas);\r\n    event TaxWithdrawn(uint256 amount, address[] walletsWithTax, uint256[] percentages);\r\n    event SetTaxHelper(address _taxHelper);\r\n    event SetDenominator(uint256 _denominator);\r\n    event SetTaxWhitelist(address _address, bool _value);\r\n    event SetLPToken(address _address, bool _value);\r\n    event SetTaxEnabled(bool _value);\r\n    event SetThreshold(uint256 _threshold);\r\n    event SetMaxTxAmount(uint256 _maxTxAmount);\r\n    event SetMaxWalletAmount(uint256 _maxWalletAmount);\r\n    event SetMaxWalletWhitelist(address _address, bool _value);\r\n    event SetMaxTxWhitelist(address _address, bool _value);\r\n    event SetMaxTxEnabled(bool _value);\r\n    event SetMaxWalletEnabled(bool _value);\r\n    event SetMaxThresholdSell(uint256 _maxThresholdSell);\r\n\r\n    error ExceedsMaxTax();\r\n    error ZeroAddressWallet();\r\n    error ZeroAddress();\r\n    error ExceedsMaxTxAmount();\r\n    error ExceedsMaxWalletAmount();\r\n    error UnderMinMaxTxAmount();\r\n    error UnderMinMaxWalletAmount();\r\n\r\n\r\n    constructor(\r\n        string memory name_, \r\n        string memory symbol_, \r\n        uint256 totalSupply_, \r\n        address initialOwner,\r\n        uint256 _maxTax,\r\n        uint256 _minMaxTxAmount,\r\n        uint256 _minMaxWalletAmount\r\n        ) payable\r\n        ERC20(name_, symbol_)\r\n        Ownable(initialOwner)\r\n    {\r\n        _mint(initialOwner, totalSupply_);\r\n        settings.taxEnabled = false;\r\n        settings.maxTxAmountEnabled = false;\r\n        settings.maxWalletAmountEnabled = false;\r\n        settings.maxTax = _maxTax;\r\n        settings.minMaxTxAmount = _minMaxTxAmount;\r\n        settings.minMaxWalletAmount = _minMaxWalletAmount;\r\n    }\r\n\r\n    /// @notice enable the maximum transaction amount\r\n    /// @param _value true or false\r\n    function setMaxTxEnabled(bool _value) payable public onlyOwner {\r\n        settings.maxTxAmountEnabled = _value;\r\n        emit SetMaxTxEnabled(_value);\r\n    }\r\n\r\n    /// @notice enable the maximum wallet amount\r\n    /// @param _value true or false\r\n    function setMaxWalletEnabled(bool _value) payable public onlyOwner {\r\n        settings.maxWalletAmountEnabled = _value;\r\n        emit SetMaxWalletEnabled(_value);\r\n    }\r\n\r\n    /// @notice set the maximum transaction amount\r\n    /// @param _maxTxAmount the maximum transaction amount\r\n    function setMaxTxAmount(uint256 _maxTxAmount) payable public onlyOwner {\r\n        if(_maxTxAmount < settings.minMaxTxAmount) revert UnderMinMaxTxAmount();\r\n        settings.maxTxAmount = _maxTxAmount;\r\n        emit SetMaxTxAmount(_maxTxAmount);\r\n    }\r\n\r\n    /// @notice set the maximum wallet amount\r\n    /// @param _maxWalletAmount the maximum wallet amount\r\n    function setMaxWalletAmount(uint256 _maxWalletAmount) payable public onlyOwner {\r\n        if(_maxWalletAmount < settings.minMaxWalletAmount) revert UnderMinMaxWalletAmount();\r\n        settings.maxWalletAmount = _maxWalletAmount;\r\n        emit SetMaxWalletAmount(_maxWalletAmount);\r\n    }\r\n\r\n    /// @notice set the minimum balance to trigger the tax conversion\r\n    /// @param _threshold the minimum balance to trigger the tax conversion\r\n    function setThreshold(uint256 _threshold) payable public onlyOwner {\r\n        settings.threshold = _threshold;\r\n        emit SetThreshold(_threshold);\r\n    }\r\n\r\n    /// @notice set the maximum sell amount when the threshold is triggered to convert the tax\r\n    /// @param _maxThresholdSell the maximum sell amount\r\n    function setMaxThresholdSell(uint256 _maxThresholdSell) payable public onlyOwner {\r\n        settings.maxThresholdSell = _maxThresholdSell;\r\n        emit SetMaxThresholdSell(_maxThresholdSell);\r\n    }\r\n\r\n    /// @notice set the taxEnabled flag\r\n    /// @param _value sets the taxEnabled flag to true or false\r\n    function setTaxEnabled(bool _value) payable public onlyOwner {\r\n        settings.taxEnabled = _value;\r\n        emit SetTaxEnabled(_value);\r\n    }\r\n\r\n    /// @notice set the maxWalletWhitelist flag\r\n    /// @param _address the address to adjust the maxWalletWhitelist\r\n    /// @param _value true or false\r\n    function setMaxWalletWhitelist(address _address, bool _value) payable public onlyOwner {\r\n        maxWalletWhitelist[_address] = _value;\r\n        emit SetMaxWalletWhitelist(_address, _value);\r\n    }\r\n\r\n    /// @notice set the maxTxWhitelist flag\r\n    /// @param _address the address to adjust the maxTxWhitelist\r\n    /// @param _value true or false\r\n    function setMaxTxWhitelist(address _address, bool _value) payable public onlyOwner {\r\n        maxTxWhitelist[_address] = _value;\r\n        emit SetMaxTxWhitelist(_address, _value);\r\n    }\r\n\r\n    /// @notice set the taxWhitelist flag\r\n    /// @param _address the address to adjust the taxWhitelist\r\n    /// @param _value true or false \r\n    function setTaxWhitelist(address _address, bool _value) payable public onlyOwner {\r\n        taxWhitelist[_address] = _value;\r\n        emit SetTaxWhitelist(_address, _value);\r\n    }\r\n\r\n    /// @notice set whether an LP token is used to trigger the tax\r\n    /// @param _address the address of the LP token\r\n    /// @param _value true or false\r\n    function setLPToken(address _address, bool _value) payable public onlyOwner {\r\n        if(_address == address(0)) revert ZeroAddress();\r\n        lpTokens[_address] = _value;\r\n        emit SetLPToken(_address, _value);\r\n    }\r\n\r\n    /// @notice set the taxHelper address\r\n    /// @param _taxHelper the address of the taxHelper contract\r\n    function setTaxHelper(address _taxHelper) payable public onlyOwner {\r\n        if(_taxHelper == address(0)) revert ZeroAddress();\r\n        taxHelper = _taxHelper;\r\n        emit SetTaxHelper(_taxHelper);\r\n    }\r\n\r\n    /// @notice set the denominator to use for the tax calculation\r\n    /// @param _denominator the denominator to use for the tax calculation\r\n    function setDenominator(uint256 _denominator) payable public onlyOwner {\r\n        DENOMINATOR = _denominator;\r\n        emit SetDenominator(_denominator);\r\n    }\r\n\r\n    /// @notice update the taxes for the token\r\n    /// @dev if cleanWallets is true, the tax balances will be converted to ETH. This is useful if the taxes are updated and have different wallet addresses\r\n    /// @param _taxes the new taxes to apply\r\n    /// @param cleanWallets if true, the tax balances will be converted to ETH\r\n    function updateTaxes(Tax[] calldata _taxes, bool cleanWallets) payable public onlyOwner {\r\n        if(cleanWallets) {\r\n            _convertTaxToEth();\r\n        }\r\n        delete taxes;\r\n\r\n        uint256 totalTaxBuy;\r\n        uint256 totalTaxSell;\r\n        uint256 totalTaxTransfer;\r\n        for(uint i = 0; i < _taxes.length; ++i) {\r\n            if(_taxes[i].wallet == address(0)) revert ZeroAddressWallet();\r\n            taxes.push(_taxes[i]);\r\n            totalTaxBuy += _taxes[i].fee.buy;\r\n            totalTaxSell += _taxes[i].fee.sell;\r\n            totalTaxTransfer += _taxes[i].fee.transfer;\r\n        }\r\n        taxLength = _taxes.length;\r\n        if(totalTaxBuy > settings.maxTax || totalTaxSell > settings.maxTax || totalTaxTransfer > settings.maxTax) {\r\n            revert ExceedsMaxTax();\r\n        }\r\n\r\n        emit UpdatedTaxes(_taxes, cleanWallets);\r\n    }\r\n\r\n    /// @notice check the maximum transaction amount\r\n    /// @param from the address the tokens are being transferred from\r\n    /// @param to the address the tokens are being transferred to\r\n    /// @param value the amount of tokens being transferred\r\n    /// @param isBuy true if the transaction is a buy\r\n    /// @param isSell true if the transaction is a sell\r\n    function checkMaxTxAmount(address from, address to, uint256 value, bool isBuy, bool isSell) internal view {\r\n        if(settings.maxTxAmountEnabled == false) {\r\n            return;\r\n        }\r\n        if(isBuy) {\r\n            if(maxTxWhitelist[to]) {\r\n                return;\r\n            }\r\n        }\r\n        if(isSell) {\r\n            if(maxTxWhitelist[from]) {\r\n                return;\r\n            }\r\n        }\r\n        if(!isSell && !isBuy) {\r\n            return;\r\n        }\r\n        if(value > settings.maxTxAmount) {\r\n            revert ExceedsMaxTxAmount();\r\n        }\r\n    }\r\n\r\n    /// @notice check the maximum wallet amount\r\n    /// @param to the address the tokens are being transferred to\r\n    /// @param value the amount of tokens being transferred\r\n    function checkMaxWalletAmount(address to, uint256 value) internal view {\r\n        if(settings.maxWalletAmountEnabled == false) {\r\n            return;\r\n        }\r\n        if(maxWalletWhitelist[to]) {\r\n            return;\r\n        }\r\n        if(balanceOf(to) + value > settings.maxWalletAmount) {\r\n            revert ExceedsMaxWalletAmount();\r\n        }\r\n    }\r\n\r\n    /// @notice handle the tax for a transfer\r\n    /// @dev if the transaction is a sell, the tax will be converted to ETH if the taxHelper balance is above the threshold\r\n    /// @param from the address the tokens are being transferred from\r\n    /// @param to the address the tokens are being transferred to\r\n    /// @param value the amount of tokens being transferred\r\n    /// @return totalFeeAmount the total fee amount\r\n    function handleTax(address from, address to, uint256 value) internal returns (uint256) {\r\n\r\n        bool isBuy = false;\r\n        bool isSell = false;\r\n        bool isTransfer = false;\r\n\r\n        if(lpTokens[from]) {\r\n            isBuy = true;\r\n        }\r\n        if(lpTokens[to]) {\r\n            isSell = true;\r\n        }\r\n        if(!isBuy && !isSell) {\r\n            isTransfer = true;\r\n        }\r\n\r\n        checkMaxTxAmount(from, to, value, isBuy, isSell);\r\n        checkMaxWalletAmount(to, value);\r\n\r\n        if(isBuy && taxWhitelist[to]) {\r\n            return 0;\r\n        }\r\n\r\n        if(isSell && taxWhitelist[from]) {\r\n            return 0;\r\n        }\r\n\r\n        if(isTransfer) {\r\n            if(taxWhitelist[from] || taxWhitelist[to]) {\r\n                return 0;\r\n            }\r\n        }\r\n\r\n        if(!settings.taxEnabled) {\r\n            return 0;\r\n        }\r\n\r\n        ITaxHelper TaxHelper = ITaxHelper(taxHelper);\r\n        if(from == address(TaxHelper) || to == address(TaxHelper)) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 totalFeeAmount;\r\n\r\n        if(taxes.length > 0) {\r\n            for(uint8 i = 0; i < taxes.length; ++i) {\r\n                uint256 fee;\r\n                if(isBuy) {\r\n                    if(taxes[i].fee.buy > 0) {\r\n                        fee = value * taxes[i].fee.buy / DENOMINATOR;\r\n                    }\r\n                } else if(isSell) {\r\n                    if(taxes[i].fee.sell > 0) {\r\n                        fee = value * taxes[i].fee.sell / DENOMINATOR;\r\n                    }\r\n                } else if(isTransfer) {\r\n                    if(taxes[i].fee.transfer > 0) {\r\n                        fee = value * taxes[i].fee.transfer / DENOMINATOR;\r\n                    }\r\n                } \r\n                totalFeeAmount += fee;\r\n                if(fee != 0) {\r\n                    if(!taxes[i].withdrawAsGas) {\r\n                        _update(from, taxes[i].wallet, fee);\r\n                        emit TaxTransferred(from, fee, taxes[i].wallet, isBuy, isSell, isTransfer, taxes[i].withdrawAsGas);\r\n                    } else { \r\n                        taxBalances[taxes[i].wallet] += fee;\r\n                        if(!taxesWithBalance[taxes[i].wallet]) {\r\n                            walletsWithTax.push(taxes[i].wallet);\r\n                            taxesWithBalance[taxes[i].wallet] = true;\r\n                        }\r\n                        _update(from, address(TaxHelper), fee);\r\n                        emit TaxTransferred(from, fee, address(TaxHelper), isBuy, isSell, isTransfer, taxes[i].withdrawAsGas);\r\n                    }\r\n                } \r\n            }\r\n            if(isSell && balanceOf(address(TaxHelper)) > settings.threshold ){\r\n                _convertTaxToEth();\r\n            }\r\n            return totalFeeAmount;\r\n        }    \r\n    }\r\n\r\n    /// @notice convert the tax balances to ETH\r\n    /// @dev this is a manual function call to be used to convert the tax balances to ETH if necessary\r\n    function convertTaxToEth() payable public onlyOwner {\r\n        _convertTaxToEth();\r\n    }\r\n\r\n    /// @notice convert the tax balances to ETH\r\n    function _convertTaxToEth() internal {\r\n        ITaxHelper TaxHelper = ITaxHelper(taxHelper);\r\n        // calculate percentages from taxHelper balance for each tax wallet\r\n        uint256 totalBalance = balanceOf(address(TaxHelper));\r\n        if(totalBalance > 0) {\r\n            uint256[] memory percentages = new uint256[](walletsWithTax.length);\r\n            for(uint i = 0; i < walletsWithTax.length; ++i) {\r\n                // calculate percentage of totalBalance for each wallet\r\n                uint256 balance = taxBalances[walletsWithTax[i]];\r\n                if(balance > 0) {\r\n                    percentages[i] = balance * DENOMINATOR / totalBalance;\r\n                    if(totalBalance <= settings.maxThresholdSell) {\r\n                        taxBalances[walletsWithTax[i]] = 0;\r\n                        taxesWithBalance[walletsWithTax[i]] = false;\r\n                    } else {\r\n                        taxBalances[walletsWithTax[i]] = balance - (settings.maxThresholdSell * percentages[i] / DENOMINATOR);\r\n                    }\r\n                }\r\n            }\r\n            TaxHelper.convertToEthAndSend(address(this), walletsWithTax, percentages, DENOMINATOR, settings.maxThresholdSell);\r\n            emit TaxWithdrawn(totalBalance, walletsWithTax, percentages);\r\n            if(totalBalance <= settings.maxThresholdSell) {\r\n                delete walletsWithTax;\r\n            }\r\n                \r\n        }\r\n    }\r\n\r\n    /// @notice ERC20 transfer function\r\n    /// @dev overriden to handle the tax\r\n    /// @param to the address to transfer to\r\n    /// @param value the amount to transfer\r\n    /// @return true if the transfer is successful\r\n    function transfer(address to, uint256 value) override public virtual returns (bool) {\r\n        address owner = _msgSender();\r\n        uint256 fee = 0;\r\n        if(taxReentrancy == 1) {\r\n            taxReentrancy = 2;\r\n            fee = handleTax(owner, to, value);\r\n            taxReentrancy = 1;\r\n        }\r\n        _transfer(owner, to, value - fee);\r\n        return true;\r\n    }\r\n\r\n    /// @notice ERC20 transferFrom function\r\n    /// @dev overriden to handle the tax\r\n    /// @param from the address to transfer from\r\n    /// @param to the address to transfer to\r\n    /// @param value the amount to transfer\r\n    /// @return true if the transfer is successful\r\n    function transferFrom(address from, address to, uint256 value) override public virtual returns (bool) {\r\n        address spender = _msgSender();\r\n        _spendAllowance(from, spender, value);\r\n        uint256 fee = 0;\r\n        if(taxReentrancy == 1) {\r\n            taxReentrancy = 2;\r\n            fee = handleTax(from, to, value);\r\n            taxReentrancy = 1;\r\n        }\r\n        _transfer(from, to, value - fee);\r\n        return true;\r\n    }\r\n}\r\n\r\n\r\n// File contracts/interfaces/IUniswapV2Pair.sol\r\n\r\npragma solidity >=0.5.0;\r\n\r\ninterface IUniswapV2Pair {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function name() external pure returns (string memory);\r\n    function symbol() external pure returns (string memory);\r\n    function decimals() external pure returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n    function nonces(address owner) external view returns (uint);\r\n\r\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n\r\n    event Mint(address indexed sender, uint amount0, uint amount1);\r\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\r\n    event Swap(\r\n        address indexed sender,\r\n        uint amount0In,\r\n        uint amount1In,\r\n        uint amount0Out,\r\n        uint amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\r\n    function factory() external view returns (address);\r\n    function token0() external view returns (address);\r\n    function token1() external view returns (address);\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n    function price0CumulativeLast() external view returns (uint);\r\n    function price1CumulativeLast() external view returns (uint);\r\n    function kLast() external view returns (uint);\r\n\r\n    function mint(address to) external returns (uint liquidity);\r\n    function burn(address to) external returns (uint amount0, uint amount1);\r\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\r\n    function skim(address to) external;\r\n    function sync() external;\r\n\r\n    function initialize(address, address) external;\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"initialOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_routerAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"TokenNotApproved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAddress\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"ApproveToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"walletsWithTax\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"percentages\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"DENOMINATOR\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethBalance\",\"type\":\"uint256\"}],\"name\":\"ConvertedToEth\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"routerAddress\",\"type\":\"address\"}],\"name\":\"RouterAddressSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"SentEth\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"approveToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"approvedTokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"walletsWithTax\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"percentages\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"DENOMINATOR\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxThresholdSell\",\"type\":\"uint256\"}],\"name\":\"convertToEthAndSend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"routerAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_routerAddress\",\"type\":\"address\"}],\"name\":\"setRouterAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "TaxHelperUniswapV2", "CompilerVersion": "v0.8.24+commit.e11b9ed9", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000000afb5adb1dd4a34c576fd2c6e055bf3bfd697c40000000000000000000000007a250d5630b4cf539739df2c5dacb4c659f2488d", "EVMVersion": "paris", "Library": "", "LicenseType": "Unlicense", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://c15ccb144889d358cc57d4325ac9bc70f0666773eb11f560074c002c9273b1f9"}