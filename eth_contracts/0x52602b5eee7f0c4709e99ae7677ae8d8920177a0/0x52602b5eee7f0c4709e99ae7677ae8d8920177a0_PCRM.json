{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/contracts/PCRM.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.4;\\n\\n// @openzeppelin/contracts\\\": \\\"^4.8.0\\\", @openzeppelin/contracts/utils/Context.sol\\nabstract contract Context {\\n\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n}\\n\\n//@openzeppelin/contracts\\\": \\\"^4.8.0\\\", @openzeppelin/contracts/access/Ownable.sol\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\\ninterface EIP1132Interface {\\n    function lock(bytes32 _reason, uint256 _amount, uint256 _time) external returns (bool);\\n    function tokensLocked(address _of, bytes32 _reason) external view returns (uint256 amount);\\n    function tokensLockedAtTime(address _of, bytes32 _reason, uint256 _time) external view returns (uint256 amount);\\n    function totalBalanceOf(address _of)  external view returns (uint256 amount);\\n    function extendLock(bytes32 _reason, uint256 _time)  external returns (bool);\\n    function increaseLockAmount(bytes32 _reason, uint256 _amount) external returns (bool);\\n    function tokensUnlockable(address _of, bytes32 _reason) external view returns (uint256 amount);\\n    function getUnlockableTokens(address _of) external view returns (uint256 unlockableTokens);\\n    function unlock(address _of) external returns (uint256 unlockableTokens);\\n    event Locked(address indexed _of, uint256 indexed _reason, uint256 _amount, uint256 _validity);\\n    event Unlocked(address indexed _of, uint256 indexed _reason, uint256 _amount);\\n}\\n\\ninterface ITOKENLOCK {\\n    event    UpdateTokenBolt(address tokenHolder, uint256 amountLocked);\\n    function boltUnlocked(address tokenHolder) external view returns (uint256 amount);\\n    function boltLocked(address tokenHolder) external view returns (uint256 amount);\\n}\\n\\n//@openzeppelin/contracts\\\": \\\"^4.8.0\\\", @openzeppelin/contracts/interfaces/IERC20.sol\\ninterface IERC20 {\\n    function totalSupply() external view returns (uint256);\\n    function balanceOf(address account) external view returns (uint256);\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    function allowance(address owner, address spender) external view returns (uint256);\\n    function approve(address spender, uint256 amount) external returns (bool);\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    event    Transfer(address indexed from, address indexed to, uint256 value);\\n    event    Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\\n\\n//@openzeppelin/contracts\\\": \\\"^4.8.0\\\", @openzeppelin/contracts/interfaces/IERC20Metadata.sol\\n//interface IERC20Metadata is IERC20 {\\ninterface IERC20Metadata is IERC20 {\\n    function name() external view returns (string memory);\\n    function symbol() external view returns (string memory);\\n    function decimals() external view returns (uint8);\\n}\\n\\n//@openzeppelin/contracts\\\": \\\"^4.8.0\\\", @openzeppelin/contracts/token/ERC20/ERC20.sol\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping (address => uint256) private _balances;\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    constructor (string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        _approve(sender, _msgSender(), currentAllowance - amount);\\n\\n        return true;\\n    }\\n\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n\\n        return true;\\n    }\\n\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[sender] = senderBalance - amount;\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n}\\n\\ncontract PCRM is ERC20, Ownable, ITOKENLOCK {\\n\\n    string private  constant ERROR_INSUFFICIENT_UNLOCKED = \\\"Not enough unlocked(locked) tokens for transfer\\\";\\n    string private  constant ERROR_LOCK_EXISTS           = \\\"Token lock already exists\\\";\\n    string private  constant ERROR_INSUFFICIENT_TOKENS   = \\\"Not enough tokens to lock\\\";\\n    string private  constant ERROR_NO_LOCKED_TOKENS      = \\\"No tokens are locked, create new lock first\\\";\\n    string private  constant ERROR_BAD_NEW_LOCKED_AMT    = \\\"New amount locked(unlocked) must be greater than current\\\";\\n    string private  constant ERROR_NOT_ENOUGH\\t\\t\\t   = \\\"Not enough tokens to lock or unlock\\\";\\n    string internal constant AMOUNT_ZERO                 = 'Amount can not be 0';\\n\\t\\t\\n    mapping (address => uint256) public baseTokensLocked; // the number of tokens locked up by HOLDER\\n\\n\\n\\tevent ExpireJournal(bytes32 indexed _CreditOwner, bytes32 _Verifier, address _from, uint256 amount, uint256 indexed txId);\\n\\n    constructor(string memory name_, string memory symbol_, uint256 amount_, address deployer_) ERC20(name_, symbol_){\\n        amount_ = amount_ * (10 ** 18);\\n        _mint(deployer_, amount_);\\n    }\\n\\n    function _beforeTokenTransfer(address from, address /*to*/, uint256 amount) internal  virtual override {\\n        require(from == address(0x0) || amount <= boltUnlocked(from), ERROR_INSUFFICIENT_UNLOCKED);\\n    }\\n\\n\\t// WEB3.0 API corresponding signature transfe\\n    function EXTransferSign(uint256 _amount, address _to, bytes memory signature) public {\\n\\n        uint8 v;\\n        bytes32 r;\\n        bytes32 s;\\n\\n        bytes32 Hash = keccak256(abi.encode(this, _amount, _to));\\n        bytes32 hash = keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", Hash));\\n\\n        require(signature.length == 65);\\n        assembly {\\n             r := mload(add(signature, 32))\\n             s := mload(add(signature, 64))\\n             v := byte(0, mload(add(signature, 96)))\\n        }\\n\\t    address singer = ecrecover(hash, v, r, s);\\n        require(msg.sender ==  singer);\\t\\t\\n        require(_amount != 0, AMOUNT_ZERO);\\n\\n        transfer(_to, _amount);\\n    }\\n\\n\\t// To offset carbon credits, additional PCRMs are issued once the quantity in a PCRM mining area is exhausted.\\n\\t// However, if there is a request to incinerate PCRM in response to a request to offset carbon emissions, \\n\\t// the corresponding quantity will be incinerated to balance the total issuance.\\n    function CarbonCredits(uint256 _amount, address _to, bytes memory signature) external onlyOwner {\\n\\t\\t\\n        uint8 v;\\n        bytes32 r;\\n        bytes32 s;\\n\\n        bytes32 Hash = keccak256(abi.encode(this, _amount, _to));\\n        bytes32 hash = keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", Hash));\\n\\n        assembly {\\n             r := mload(add(signature, 32))\\n             s := mload(add(signature, 64))\\n             v := byte(0, mload(add(signature, 96)))\\n        }\\n\\t    address singer = ecrecover(hash, v, r, s);\\n        require(msg.sender ==  singer);\\t\\t\\n\\t\\n        _mint(_to, _amount);\\n\\t\\t\\n    }\\n\\n\\t// Carbon Credit GET(PCRM) -> Carbon Credit CERs -> Carbon Credits Offset -> Carbon Credits Incineration\\n\\t//                                              (Transfer PCRM to Offset Wallet)\\n\\t// WEB3.0 API for carbon credit offset is provided separately to the carbon credit exchange or voluntary carbon market.\\n    function CarbonCreditsExpire(bytes32 _CreditOwner, bytes32 _Verifier, address _from, uint256 _amount, bytes memory signature) external onlyOwner {\\n\\n        uint8 v;\\n        bytes32 r;\\n        bytes32 s;\\n\\n        bytes32 Hash = keccak256(abi.encode(this, _amount, _from));\\n        bytes32 hash = keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", Hash));\\n\\n        assembly {\\n             r := mload(add(signature, 32))\\n             s := mload(add(signature, 64))\\n             v := byte(0, mload(add(signature, 96)))\\n        }\\n\\t    address singer = ecrecover(hash, v, r, s);\\n        require(msg.sender ==  singer);\\t\\t\\n\\t\\t\\n        _burn(msg.sender, _amount);\\n\\t\\t\\n\\t\\temit ExpireJournal(_CreditOwner, _Verifier, _from, _amount, block.number);\\n\\t\\t\\n    }\\n\\n    function bolt(address _to, uint256 _amount) public onlyOwner returns (bool) {\\n        require(boltLocked(_to) == 0,\\tERROR_LOCK_EXISTS);\\n        require(balanceOf(_to) >= _amount, ERROR_NOT_ENOUGH);\\n        require(_amount > 0, ERROR_NOT_ENOUGH);\\n\\n        baseTokensLocked[_to] = _amount;\\n\\n        emitUpdateTokenBolt(_to);\\n        return true;\\n    }\\n\\n    function clearBolt(address _to) public onlyOwner returns (uint256 unlockableTokens) {\\n        require(balanceOf(_to) > 0, ERROR_INSUFFICIENT_TOKENS);\\n        unlockableTokens = boltLocked(_to);\\n        baseTokensLocked[_to] = 0;\\n\\n        emitUpdateTokenBolt(_to);\\n        return unlockableTokens;\\n    }\\n\\n    function boltUnlocked(address _to) public virtual override view returns (uint256 amount) {\\n        require(balanceOf(_to) > 0, ERROR_NOT_ENOUGH);\\n        amount = balanceOf(_to)- boltLocked(_to);\\n        return amount;\\n\\n    }\\n\\n    function boltLocked(address _to) public virtual override view returns (uint256 amount){\\n        if(baseTokensLocked[_to] == 0){\\n            return 0;\\n        }\\n        amount = baseTokensLocked[_to];\\n        return amount;\\n    }\\n\\n    function emitUpdateTokenBolt(address _to) internal {\\n        emit UpdateTokenBolt(_to, baseTokensLocked[_to]);\\n\\n    }\\n\\n    function decBolt(address _to, uint256 _amount) public virtual onlyOwner {\\n        require(boltLocked(_to) > 0, ERROR_NO_LOCKED_TOKENS);\\n        baseTokensLocked[_to] = boltLocked(_to) - _amount;\\n        emitUpdateTokenBolt(_to);\\n    }\\n\\n    function incBolt(address _to, uint256 _amount) public virtual onlyOwner  {\\n        require(_amount > 0, ERROR_NOT_ENOUGH);\\n        require(boltLocked(_to) > 0, ERROR_NO_LOCKED_TOKENS);\\n        require(_amount <= boltUnlocked(_to), ERROR_NOT_ENOUGH);\\n        baseTokensLocked[_to] = (_amount + boltLocked(_to));\\n        emitUpdateTokenBolt(_to);\\n    }\\n\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"deployer_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"_CreditOwner\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"_Verifier\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"txId\",\"type\":\"uint256\"}],\"name\":\"ExpireJournal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenHolder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountLocked\",\"type\":\"uint256\"}],\"name\":\"UpdateTokenBolt\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"CarbonCredits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_CreditOwner\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_Verifier\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"CarbonCreditsExpire\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"EXTransferSign\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"baseTokensLocked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"bolt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"boltLocked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"boltUnlocked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"clearBolt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"unlockableTokens\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"decBolt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"incBolt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "PCRM", "CompilerVersion": "v0.8.4+commit.c7e474f2", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000d09dc3000000000000000000000000009a7d040530e955389bc26eafe02694be3d2b346c000000000000000000000000000000000000000000000000000000000000000e436c696d61746520416374696f6e00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000045043524d00000000000000000000000000000000000000000000000000000000", "EVMVersion": "istanbul", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}