{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/nft/Blocks404.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: BUSL-1.1\\r\\n\\r\\npragma solidity >= 0.8.0;\\r\\n\\r\\nimport {IERC165} from \\\"@openzeppelin/contracts/interfaces/IERC165.sol\\\";\\r\\nimport {IERC721Receiver} from \\\"@openzeppelin/contracts/interfaces/IERC721Receiver.sol\\\";\\r\\nimport {IERC2981} from \\\"@openzeppelin/contracts/interfaces/IERC2981.sol\\\";\\r\\nimport {Strings} from \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\r\\nimport {IERC404} from \\\"./../interfaces/IERC404.sol\\\";\\r\\nimport {IUniswapV2Factory} from \\\"./../interfaces/dex/IUniswapV2Factory.sol\\\";\\r\\nimport {IUniswapV2Router02} from \\\"./../interfaces/dex/IUniswapV2Router02.sol\\\";\\r\\n\\r\\n/**\\r\\n * This contract allows the minting and burning of ERC404 tokens\\r\\n * each time 1 token is bought from lp, it is minted,\\r\\n * each time 1 token is sold to lp, it is burned\\r\\n * this overrides the storing of NFT into a bank in ERC404, since it will be impossible to mint all the supply\\r\\n * this allows infinite possible rerolls to try and mint a desired NFT\\r\\n * NFTs are spent on ERC20 functions in a FILO queue\\r\\n * to save a NFT you want to keep, safeTransfer it to another wallet\\r\\n *\\r\\n * We plan to add staking features at a future date.\\r\\n * Please check our marketplace and the collection on our website\\r\\n * https://blocks404.com\\r\\n */\\r\\ncontract Blocks404 is IERC404, IERC2981 {\\r\\n    uint256 internal constant MAX_METADATA_ID = 10000;\\r\\n    uint256 internal constant INITIAL_TOTAL_SUPPLY = 10000 * 1e18;\\r\\n    /// @dev Token name\\r\\n    string public name;\\r\\n    /// @dev Token symbol\\r\\n    string public symbol;\\r\\n    /// @dev Decimals for ERC-20 representation\\r\\n    uint8 internal constant DECIMALS = 18;\\r\\n    /// @dev Units for ERC-20 representation\\r\\n    uint256 internal constant UNITS = 1e18;\\r\\n    /// @dev Total supply in ERC-20 representation\\r\\n    uint256 public totalSupply;\\r\\n    /// @dev Current mint counter which also represents the highest\\r\\n    ///      minted id, monotonically increasing to ensure accurate ownership\\r\\n    uint256 public minted;\\r\\n    /// @dev Burned EC721 tokens counter\\r\\n    uint256 public burned;\\r\\n    /// @dev Initial chain id for EIP-2612 support\\r\\n    uint256 internal immutable INITIAL_CHAIN_ID;\\r\\n    /// @dev Initial domain separator for EIP-2612 support\\r\\n    bytes32 internal immutable INITIAL_DOMAIN_SEPARATOR;\\r\\n    bytes32 private constant PERMIT_TYPEHASH = keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\");\\r\\n    bytes32 private constant TYPE_HASH = keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\");\\r\\n    /// @dev Balance of user in ERC-20 representation\\r\\n    mapping(address => uint256) public balanceOf;\\r\\n    /// @dev Allowance of user in ERC-20 representation\\r\\n    mapping(address => mapping(address => uint256)) public allowance;\\r\\n    /// @dev Approval in ERC-721 representation\\r\\n    mapping(uint256 => address) public getApproved;\\r\\n    /// @dev Approval for all in ERC-721 representation\\r\\n    mapping(address => mapping(address => bool)) public isApprovedForAll;\\r\\n    /// @dev Packed representation of ownerOf and owned indices\\r\\n    mapping(uint256 => uint256) internal _ownedData;\\r\\n    /// @dev Array of owned ids in ERC-721 representation\\r\\n    mapping(address => uint256[]) internal _owned;\\r\\n    /// @dev Tracks indices for the _owned mapping\\r\\n    mapping(uint256 => uint256) internal _ownedIndex;\\r\\n    /// @dev Addresses that are exempt from ERC-721 transfer, typically for gas savings (pairs, routers, etc)\\r\\n    mapping(address => bool) public erc721TransferExempt;\\r\\n    /// @dev EIP-2612 nonces\\r\\n    mapping(address => uint256) public nonces;\\r\\n    /// @dev Address bitmask for packed ownership data\\r\\n    uint256 private constant _BITMASK_ADDRESS = (1 << 160) - 1;\\r\\n    /// @dev Owned index bitmask for packed ownership data\\r\\n    uint256 private constant _BITMASK_OWNED_INDEX = ((1 << 96) - 1) << 160;\\r\\n\\r\\n    /// @dev Royalty fee denominator in basis points\\r\\n    uint256 internal constant ROYALTY_FEE_DENOMINATOR = 10000;\\r\\n    /// @dev Default royalty fee\\r\\n    uint96 internal constant DEFAULT_ROYALTY_FEE = 500;\\r\\n    string public baseURI;\\r\\n    /// @dev mapping of token id to metadata id\\r\\n    mapping(uint256 => uint256) public tokenMetadataId;\\r\\n    /// @dev Optional mapping for metadata id URIs\\r\\n    mapping(uint256 => string) internal _metadataIdURIs;\\r\\n    RoyaltyInfo internal _royaltyInfo;\\r\\n    IUniswapV2Router02 public immutable uniswapV2Router;\\r\\n    address public immutable uniswapV2Pair;\\r\\n    address constant ROUTER = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\\r\\n    // change for mainnet\\r\\n    address constant WETH = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\\r\\n    address public feeWallet;\\r\\n    uint256 constant MAX_BUY_FEE_PERCENT = 11;\\r\\n    uint256 constant MAX_SELL_FEE_PERCENT = 11;\\r\\n    uint256 constant SWAP_TOKENS_AT_PERCENT = 5;\\r\\n    uint256 public swapTokensAtAmount;\\r\\n    bool private _swapping;\\r\\n    bool public swapEnabled;\\r\\n    /// @dev These must be in %\\r\\n    uint256 public buyFee = 1;\\r\\n    uint256 public sellFee = 1;\\r\\n    uint256 public tokensForFee;\\r\\n    /// @dev These should include lp, farms, authorized, smart contracts\\r\\n    mapping(address => bool) private _isExcludedFromFees;\\r\\n    mapping(address => bool) public automatedMarketMakerPairs;\\r\\n    mapping(address => bool) public operators;\\r\\n\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\\r\\n    event Transfer(address indexed from, address indexed to, uint256 indexed id);\\r\\n    event ExcludeFromFees(address indexed account, bool isExcluded);\\r\\n    event SetAutomatedMarketMakerPair(address indexed pair, bool indexed value);\\r\\n    event FeeWalletUpdated(address indexed newWallet, address indexed oldWallet);\\r\\n    event SetOperator(address operator, bool access);\\r\\n\\r\\n    error FeeTooHigh();\\r\\n    error InvalidParameters();\\r\\n    error NotOperator();\\r\\n    error PairNotAllowed();\\r\\n    error SwapAmountTooLow();\\r\\n    error SwapAmountTooHigh();\\r\\n\\r\\n    struct RoyaltyInfo {\\r\\n        address receiver;\\r\\n        uint96 royaltyFraction;\\r\\n    }\\r\\n\\r\\n    receive() external payable {}\\r\\n\\r\\n    modifier onlyOperator() {\\r\\n        if(!operators[msg.sender]) revert NotOperator();\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    constructor(string memory name_, string memory symbol_, address feeWallet_) {\\r\\n        name = name_;\\r\\n        symbol = symbol_;\\r\\n        feeWallet = feeWallet_;\\r\\n        _mintERC20(msg.sender, INITIAL_TOTAL_SUPPLY, false);\\r\\n        operators[msg.sender] = true;\\r\\n\\r\\n        // EIP-2612 initialization\\r\\n        INITIAL_CHAIN_ID = block.chainid;\\r\\n        INITIAL_DOMAIN_SEPARATOR = _computeDomainSeparator();\\r\\n\\r\\n        // router for swap fees\\r\\n        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(ROUTER);\\r\\n        uniswapV2Router = _uniswapV2Router;\\r\\n        address _uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory()).createPair(address(this), WETH);\\r\\n        uniswapV2Pair = _uniswapV2Pair;\\r\\n        _setAutomatedMarketMakerPair(_uniswapV2Pair, true);\\r\\n        erc721TransferExempt[_uniswapV2Pair] = true;\\r\\n        erc721TransferExempt[ROUTER] = true;\\r\\n        erc721TransferExempt[msg.sender] = true;\\r\\n        erc721TransferExempt[address(this)] = true;\\r\\n        swapTokensAtAmount = (INITIAL_TOTAL_SUPPLY * SWAP_TOKENS_AT_PERCENT) / 10000;\\r\\n        excludeFromFees(msg.sender, true);\\r\\n        excludeFromFees(address(this), true);\\r\\n        excludeFromFees(address(0), true);\\r\\n        swapEnabled = true;\\r\\n\\r\\n        // royalty\\r\\n        _royaltyInfo = RoyaltyInfo(feeWallet_, DEFAULT_ROYALTY_FEE);\\r\\n    }\\r\\n\\r\\n    /// @dev See {IERC165-supportsInterface}.\\r\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\r\\n        return interfaceId == type(IERC2981).interfaceId ||\\r\\n        interfaceId == type(IERC404).interfaceId ||\\r\\n        interfaceId == type(IERC165).interfaceId;\\r\\n    }\\r\\n\\r\\n    function decimals() external pure returns (uint8) {\\r\\n        return DECIMALS;\\r\\n    }\\r\\n\\r\\n    /// @notice Function to find owner of a given ERC-721 token\\r\\n    function ownerOf(uint256 id_) public view virtual returns (address erc721Owner) {\\r\\n        erc721Owner = _getOwnerOf(id_);\\r\\n\\r\\n        // If the id_ is beyond the range of minted tokens, is 0, or the token is not owned by anyone, revert.\\r\\n        if (id_ > minted || id_ == 0 || erc721Owner == address(0)) {\\r\\n            revert NotFound();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function owned(address owner_) public view virtual returns (uint256[] memory) {\\r\\n        return _owned[owner_];\\r\\n    }\\r\\n\\r\\n    function erc721BalanceOf(address owner_) public view virtual returns (uint256) {\\r\\n        return _owned[owner_].length;\\r\\n    }\\r\\n\\r\\n    function erc20BalanceOf(address owner_) public view virtual returns (uint256) {\\r\\n        return balanceOf[owner_];\\r\\n    }\\r\\n\\r\\n    function erc20TotalSupply() external view virtual returns (uint256) {\\r\\n        return totalSupply;\\r\\n    }\\r\\n\\r\\n    function erc721TotalSupply() external view virtual returns (uint256) {\\r\\n        return minted - burned;\\r\\n    }\\r\\n\\r\\n    function erc721TokensBankedInQueue() external pure virtual returns (uint256) {\\r\\n        return 0;\\r\\n    }\\r\\n\\r\\n    function tokenURI(uint256 tokenId) public view override returns (string memory) {\\r\\n        // reverts if not found\\r\\n        ownerOf(tokenId);\\r\\n        string memory metadataIdURI = _metadataIdURIs[tokenId];\\r\\n\\r\\n        if (bytes(baseURI).length == 0) {\\r\\n            return metadataIdURI;\\r\\n        }\\r\\n\\r\\n        if (bytes(metadataIdURI).length > 0) {\\r\\n            return string(abi.encodePacked(baseURI, metadataIdURI));\\r\\n        }\\r\\n\\r\\n        return string(abi.encodePacked(baseURI, Strings.toString(tokenMetadataId[tokenId]), \\\".json\\\"));\\r\\n    }\\r\\n\\r\\n    function royaltyInfo(uint256, uint256 salePrice) external override view returns (address receiver, uint256 royaltyAmount) {\\r\\n        royaltyAmount = (salePrice * _royaltyInfo.royaltyFraction) / ROYALTY_FEE_DENOMINATOR;\\r\\n        return (_royaltyInfo.receiver, royaltyAmount);\\r\\n    }\\r\\n\\r\\n    function isExcludedFromFees(address account) public view returns (bool) {\\r\\n        return _isExcludedFromFees[account];\\r\\n    }\\r\\n\\r\\n    /// @notice Function for token approvals\\r\\n    /// @dev This function assumes the operator is attempting to approve an ERC-721\\r\\n    ///      if valueOrId is less than the minted count. Note: Unlike setApprovalForAll,\\r\\n    ///      spender_ must be allowed to be 0x0 so that approval can be revoked.\\r\\n    function approve(address spender_, uint256 valueOrId_) public virtual returns (bool) {\\r\\n        // The ERC-721 tokens are 1-indexed, so 0 is not a valid id and indicates that\\r\\n        // operator is attempting to set the ERC-20 allowance to 0.\\r\\n        if (valueOrId_ <= minted && valueOrId_ > 0) {\\r\\n            // Intention is to approve as ERC-721 token (id).\\r\\n            uint256 id = valueOrId_;\\r\\n            address erc721Owner = _getOwnerOf(id);\\r\\n\\r\\n            if (msg.sender != erc721Owner && !isApprovedForAll[erc721Owner][msg.sender]) {\\r\\n                revert Unauthorized();\\r\\n            }\\r\\n\\r\\n            getApproved[id] = spender_;\\r\\n\\r\\n            emit ERC721Approval(erc721Owner, spender_, id);\\r\\n            emit Approval(erc721Owner, spender_, id);\\r\\n        } else {\\r\\n            // Prevent granting 0x0 an ERC-20 allowance.\\r\\n            if (spender_ == address(0)) {\\r\\n                revert InvalidSpender();\\r\\n            }\\r\\n\\r\\n            // Intention is to approve as ERC-20 token (value).\\r\\n            uint256 value = valueOrId_;\\r\\n            allowance[msg.sender][spender_] = value;\\r\\n\\r\\n            emit ERC20Approval(msg.sender, spender_, value);\\r\\n            emit Approval(msg.sender, spender_, value);\\r\\n        }\\r\\n\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /// @notice Metamask has a bug which thinks this should be normal approve and crash due to decimals in a NFT contract\\r\\n    ///         this is an alternative setApprovalForAll function\\r\\n    function erc404SetApprovalForAll(address operator_, bool approved_) public virtual {\\r\\n        setApprovalForAll(operator_, approved_);\\r\\n    }\\r\\n\\r\\n    /// @notice Function for ERC-721 approvals\\r\\n    function setApprovalForAll(address operator_, bool approved_) public virtual {\\r\\n        // Prevent approvals to 0x0.\\r\\n        if (operator_ == address(0)) {\\r\\n            revert InvalidOperator();\\r\\n        }\\r\\n        isApprovedForAll[msg.sender][operator_] = approved_;\\r\\n        emit ApprovalForAll(msg.sender, operator_, approved_);\\r\\n    }\\r\\n\\r\\n    /// @notice Function for mixed transfers from an operator that may be different than 'from'.\\r\\n    /// @dev This function assumes the operator is attempting to transfer an ERC-721\\r\\n    ///      if valueOrId is less than or equal to current max id.\\r\\n    function transferFrom(address from_, address to_, uint256 valueOrId_) public virtual returns (bool) {\\r\\n        // Prevent transferring tokens from 0x0.\\r\\n        if (from_ == address(0)) {\\r\\n            revert InvalidSender();\\r\\n        }\\r\\n\\r\\n        // Prevent burning tokens to 0x0.\\r\\n        if (to_ == address(0)) {\\r\\n            revert InvalidRecipient();\\r\\n        }\\r\\n\\r\\n        if (valueOrId_ <= minted) {\\r\\n            // Intention is to transfer as ERC-721 token (id).\\r\\n            uint256 id = valueOrId_;\\r\\n\\r\\n            if (from_ != _getOwnerOf(id)) {\\r\\n                revert Unauthorized();\\r\\n            }\\r\\n\\r\\n            // Check that the operator is either the sender or approved for the transfer.\\r\\n            if (msg.sender != from_ && !isApprovedForAll[from_][msg.sender] && msg.sender != getApproved[id]) {\\r\\n                revert Unauthorized();\\r\\n            }\\r\\n\\r\\n            // Transfer 1 * units ERC-20 and 1 ERC-721 token.\\r\\n            _transferERC20(from_, to_, UNITS);\\r\\n            _transferERC721(from_, to_, id);\\r\\n        } else {\\r\\n            // Intention is to transfer as ERC-20 token (value).\\r\\n            uint256 value = valueOrId_;\\r\\n            uint256 allowed = allowance[from_][msg.sender];\\r\\n\\r\\n            // Check that the operator has sufficient allowance.\\r\\n            if (allowed != type(uint256).max) {\\r\\n                allowance[from_][msg.sender] = allowed - value;\\r\\n            }\\r\\n\\r\\n            // Transferring ERC-20s directly requires the _transfer function.\\r\\n            _transferERC20WithERC721(from_, to_, value);\\r\\n        }\\r\\n\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /// @notice Function for ERC-20 transfers.\\r\\n    /// @dev This function assumes the operator is attempting to transfer as ERC-20\\r\\n    ///      given this function is only supported on the ERC-20 interface\\r\\n    function transfer(address to_, uint256 value_) public virtual returns (bool) {\\r\\n        // Prevent burning tokens to 0x0.\\r\\n        if (to_ == address(0)) {\\r\\n            revert InvalidRecipient();\\r\\n        }\\r\\n\\r\\n        // Transferring ERC-20s directly requires the _transfer function.\\r\\n        return _transferERC20WithERC721(msg.sender, to_, value_);\\r\\n    }\\r\\n\\r\\n    /// @notice Function for ERC-721 transfers with contract support.\\r\\n    function safeTransferFrom(address from_, address to_, uint256 id_) public virtual {\\r\\n        safeTransferFrom(from_, to_, id_, \\\"\\\");\\r\\n    }\\r\\n\\r\\n    /// @notice Function for ERC-721 transfers with contract support and callback data.\\r\\n    function safeTransferFrom(address from_, address to_, uint256 id_, bytes memory data_) public virtual {\\r\\n        transferFrom(from_, to_, id_);\\r\\n\\r\\n        if (to_.code.length != 0 && IERC721Receiver(to_).onERC721Received(msg.sender, from_, id_, data_) != IERC721Receiver.onERC721Received.selector) {\\r\\n            revert UnsafeRecipient();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice Function for EIP-2612 permits\\r\\n    function permit(\\r\\n        address owner_,\\r\\n        address spender_,\\r\\n        uint256 value_,\\r\\n        uint256 deadline_,\\r\\n        uint8 v_,\\r\\n        bytes32 r_,\\r\\n        bytes32 s_\\r\\n    ) public virtual {\\r\\n        if (deadline_ < block.timestamp) {\\r\\n            revert PermitDeadlineExpired();\\r\\n        }\\r\\n\\r\\n        if (value_ <= minted && value_ > 0) {\\r\\n            revert InvalidApproval();\\r\\n        }\\r\\n\\r\\n        if (spender_ == address(0)) {\\r\\n            revert InvalidSpender();\\r\\n        }\\r\\n\\r\\n        unchecked {\\r\\n            address recoveredAddress = ecrecover(\\r\\n                keccak256(\\r\\n                    abi.encodePacked(\\r\\n                        \\\"\\\\x19\\\\x01\\\",\\r\\n                        DOMAIN_SEPARATOR(),\\r\\n                        keccak256(abi.encode(PERMIT_TYPEHASH, owner_, spender_, value_, nonces[owner_]++, deadline_))\\r\\n                    )\\r\\n                ),\\r\\n                v_,\\r\\n                r_,\\r\\n                s_\\r\\n            );\\r\\n\\r\\n            if (recoveredAddress == address(0) || recoveredAddress != owner_) {\\r\\n                revert InvalidSigner();\\r\\n            }\\r\\n\\r\\n            allowance[recoveredAddress][spender_] = value_;\\r\\n        }\\r\\n\\r\\n        emit ERC20Approval(owner_, spender_, value_);\\r\\n        emit Approval(owner_, spender_, value_);\\r\\n    }\\r\\n\\r\\n    /// @notice Returns domain initial domain separator, or recomputes if chain id is not equal to initial chain id\\r\\n    function DOMAIN_SEPARATOR() public view virtual returns (bytes32) {\\r\\n        return block.chainid == INITIAL_CHAIN_ID ? INITIAL_DOMAIN_SEPARATOR : _computeDomainSeparator();\\r\\n    }\\r\\n\\r\\n    function setOperator(address operator, bool access) external onlyOperator {\\r\\n        operators[operator] = access;\\r\\n        emit SetOperator(operator, access);\\r\\n    }\\r\\n\\r\\n    /// @notice Initialization function to set pairs / etc\\r\\n    ///         saving gas by avoiding mint / burn on unnecessary targets\\r\\n    function setErc721TransferExempt(address target, bool state) external onlyOperator {\\r\\n        erc721TransferExempt[target] = state;\\r\\n    }\\r\\n\\r\\n    function setBaseURI(string calldata uri_) external onlyOperator {\\r\\n        baseURI = uri_;\\r\\n    }\\r\\n\\r\\n    function setMetadataIdURI(uint256 metadataId, string calldata uri_) external onlyOperator {\\r\\n        _metadataIdURIs[metadataId] = uri_;\\r\\n    }\\r\\n\\r\\n    function setRoyaltyInfo(address receiver, uint96 feeNumerator) external onlyOperator {\\r\\n        if(feeNumerator > ROYALTY_FEE_DENOMINATOR || receiver == address(0)) revert InvalidParameters();\\r\\n        _royaltyInfo = RoyaltyInfo(receiver, feeNumerator);\\r\\n    }\\r\\n\\r\\n    function updateSwapTokensAtAmount(uint256 newAmount) external onlyOperator {\\r\\n        // Swap amount cannot be lower than 0.001% total supply.\\r\\n        if(newAmount < totalSupply / 100000) revert SwapAmountTooLow();\\r\\n        // Swap amount cannot be higher than 0.5% total supply.\\r\\n        if(newAmount > (totalSupply * 5) / 1000) revert SwapAmountTooHigh();\\r\\n        swapTokensAtAmount = newAmount;\\r\\n    }\\r\\n\\r\\n    /// @notice Enables fees sent to fee wallet. Does not affect transfers or selling/buying\\r\\n    function updateSwapEnabled(bool enabled) external onlyOperator {\\r\\n        swapEnabled = enabled;\\r\\n    }\\r\\n\\r\\n    function updateBuyFee(uint256 _fee) external onlyOperator {\\r\\n        buyFee = _fee;\\r\\n        if(buyFee > MAX_BUY_FEE_PERCENT) revert FeeTooHigh();\\r\\n    }\\r\\n\\r\\n    function updateSellFees(uint256 _fee) external onlyOperator {\\r\\n        sellFee = _fee;\\r\\n        if(sellFee > MAX_SELL_FEE_PERCENT) revert FeeTooHigh();\\r\\n    }\\r\\n\\r\\n    function excludeFromFees(address account, bool excluded) public onlyOperator {\\r\\n        _isExcludedFromFees[account] = excluded;\\r\\n        emit ExcludeFromFees(account, excluded);\\r\\n    }\\r\\n\\r\\n    function setAutomatedMarketMakerPair(address pair, bool value) external onlyOperator {\\r\\n        // The pair cannot be removed from automatedMarketMakerPairs\\r\\n        if(pair == uniswapV2Pair) revert PairNotAllowed();\\r\\n        _setAutomatedMarketMakerPair(pair, value);\\r\\n    }\\r\\n\\r\\n    function updateFeeWallet(address newWallet) external onlyOperator {\\r\\n        emit FeeWalletUpdated(newWallet, feeWallet);\\r\\n        feeWallet = newWallet;\\r\\n    }\\r\\n\\r\\n    /// @notice Internal function to compute domain separator for EIP-2612 permits\\r\\n    function _computeDomainSeparator() internal view virtual returns (bytes32) {\\r\\n        return\\r\\n        keccak256(\\r\\n            abi.encode(\\r\\n                TYPE_HASH,\\r\\n                keccak256(bytes(name)),\\r\\n                keccak256(\\\"1\\\"),\\r\\n                block.chainid,\\r\\n                address(this)\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /// @notice This is the lowest level ERC-20 transfer function, which\\r\\n    ///         should be used for both normal ERC-20 transfers as well as minting.\\r\\n    /// Note that this function allows transfers to and from 0x0.\\r\\n    function _transferERC20(address from_, address to_, uint256 value_) internal virtual {\\r\\n        // Minting is a special case for which we should not check the balance of\\r\\n        // the sender, and we should increase the total supply.\\r\\n        if (from_ == address(0)) {\\r\\n            totalSupply += value_;\\r\\n        } else {\\r\\n            // Deduct value from sender's balance.\\r\\n            balanceOf[from_] -= value_;\\r\\n        }\\r\\n\\r\\n        // Update the recipient's balance.\\r\\n        // Can be unchecked because on mint, adding to totalSupply is checked, and on transfer balance deduction is checked.\\r\\n        unchecked {\\r\\n            balanceOf[to_] += value_;\\r\\n        }\\r\\n\\r\\n        emit ERC20Transfer(from_, to_, value_);\\r\\n    }\\r\\n\\r\\n    /// @notice Consolidated record keeping function for transferring ERC-721s.\\r\\n    /// @dev Assign the token to the new owner, and remove from the old owner.\\r\\n    /// Note that this function allows transfers to and from 0x0.\\r\\n    function _transferERC721(address from_, address to_, uint256 id_) internal virtual {\\r\\n        // If this is not a mint, handle record keeping for transfer from previous owner.\\r\\n        if (from_ != address(0)) {\\r\\n            // On transfer of an NFT, any previous approval is reset.\\r\\n            delete getApproved[id_];\\r\\n\\r\\n            uint256 updatedId = _owned[from_][_owned[from_].length - 1];\\r\\n\\r\\n            if (updatedId != id_) {\\r\\n                uint256 updatedIndex = _getOwnedIndex(id_);\\r\\n                // update _owned for sender\\r\\n                _owned[from_][updatedIndex] = updatedId;\\r\\n                // update index for the moved id\\r\\n                _setOwnedIndex(updatedId, updatedIndex);\\r\\n            }\\r\\n\\r\\n            // pop\\r\\n            _owned[from_].pop();\\r\\n        }\\r\\n\\r\\n        if (to_ != address(0)) {\\r\\n            // Update owner of the token to the new owner.\\r\\n            _setOwnerOf(id_, to_);\\r\\n            // Push token onto the new owner's stack.\\r\\n            _owned[to_].push(id_);\\r\\n            // Update index for new owner's stack.\\r\\n            _setOwnedIndex(id_, _owned[to_].length - 1);\\r\\n        } else {\\r\\n            delete _ownedData[id_];\\r\\n        }\\r\\n\\r\\n        emit ERC721Transfer(from_, to_, id_);\\r\\n        emit Transfer(from_, to_, id_);\\r\\n    }\\r\\n\\r\\n    /// @notice Internal function for fractional transfers\\r\\n    function _transferERC20WithERC721(address from_, address to_, uint256 amount_) internal returns (bool) {\\r\\n        uint256 erc20BalanceOfSenderBefore = erc20BalanceOf(from_);\\r\\n        uint256 erc20BalanceOfReceiverBefore = erc20BalanceOf(to_);\\r\\n\\r\\n        uint256 amountReceiver = _handleFee(from_, to_, amount_);\\r\\n        balanceOf[from_] -= amount_;\\r\\n        unchecked {\\r\\n            balanceOf[to_] += amountReceiver;\\r\\n        }\\r\\n\\r\\n        if (!erc721TransferExempt[from_]) {\\r\\n            if(amount_ != 0) {\\r\\n                uint256 tokensToBurn = (erc20BalanceOfSenderBefore / UNITS) - (balanceOf[from_] / UNITS);\\r\\n                for (uint256 i = 0; i < tokensToBurn;) {\\r\\n                    _burnERC721(from_);\\r\\n                    unchecked {\\r\\n                        i++;\\r\\n                    }\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n\\r\\n        // Any claiming of tokens needs to be low in quantity otherwise it may cost too much gas.\\r\\n        if(!erc721TransferExempt[to_]) {\\r\\n            if(amountReceiver != 0) {\\r\\n                uint256 tokensToMint = (balanceOf[to_] / UNITS) - (erc20BalanceOfReceiverBefore / UNITS);\\r\\n                for (uint256 i = 0; i < tokensToMint;) {\\r\\n                    _mintERC721(to_);\\r\\n                    unchecked {\\r\\n                        i++;\\r\\n                    }\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n\\r\\n        emit ERC20Transfer(from_, to_, amountReceiver);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function _handleFee(address from_, address to_, uint256 amount_) internal returns (uint256 amountReceiver) {\\r\\n        uint256 contractTokenBalance = balanceOf[address(this)];\\r\\n        bool canSwap = contractTokenBalance >= swapTokensAtAmount;\\r\\n        if (canSwap && swapEnabled && !_swapping && !automatedMarketMakerPairs[from_] && !_isExcludedFromFees[from_] && !_isExcludedFromFees[to_]) {\\r\\n            _swapping = true;\\r\\n            _swapBack();\\r\\n            _swapping = false;\\r\\n        }\\r\\n        bool takeFee = !_swapping;\\r\\n        if (_isExcludedFromFees[from_] || _isExcludedFromFees[to_]) {\\r\\n            takeFee = false;\\r\\n        }\\r\\n        uint256 fees;\\r\\n        amountReceiver = amount_;\\r\\n        if (takeFee) {\\r\\n            if (automatedMarketMakerPairs[to_] && sellFee > 0) {\\r\\n                fees = (amount_ * sellFee) / 100;\\r\\n                tokensForFee += fees;\\r\\n            } else if (automatedMarketMakerPairs[from_] && buyFee > 0) {\\r\\n                fees = (amount_ * buyFee) / 100;\\r\\n                tokensForFee += fees;\\r\\n            }\\r\\n            if (fees > 0) {\\r\\n                // transfer to this contract without minting\\r\\n                balanceOf[address(this)] += fees;\\r\\n                emit ERC20Transfer(from_, address(this), fees);\\r\\n            }\\r\\n            amountReceiver -= fees;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice Internal function for ERC20 minting\\r\\n    /// @dev This function will allow minting of new ERC20s.\\r\\n    ///      If mintCorrespondingERC721s_ is true, it will also mint the corresponding ERC721s.\\r\\n    function _mintERC20(address to_, uint256 value_, bool mintCorrespondingERC721s_) internal virtual {\\r\\n        /// You cannot mint to the zero address (you can't mint and immediately burn in the same transfer).\\r\\n        if (to_ == address(0)) {\\r\\n            revert InvalidRecipient();\\r\\n        }\\r\\n\\r\\n        _transferERC20(address(0), to_, value_);\\r\\n\\r\\n        // If mintCorrespondingERC721s_ is true, mint the corresponding ERC721s.\\r\\n        if (mintCorrespondingERC721s_) {\\r\\n            uint256 nftsToMint = value_ / UNITS;\\r\\n            for (uint256 i = 0; i < nftsToMint;) {\\r\\n                _mintERC721(to_);\\r\\n                unchecked {\\r\\n                    i++;\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _mintERC721(address to_) internal virtual {\\r\\n        if (to_ == address(0)) revert InvalidRecipient();\\r\\n\\r\\n        minted++;\\r\\n        uint256 id = minted;\\r\\n\\r\\n        address erc721Owner = _getOwnerOf(id);\\r\\n\\r\\n        // The token should not already belong to anyone besides 0x0 or this contract.\\r\\n        // If it does, something is wrong, as this should never happen.\\r\\n        if (erc721Owner != address(0)) {\\r\\n            revert AlreadyExists();\\r\\n        }\\r\\n\\r\\n        // Generate a random metadata id based on the current block timestamp. Index range is from 0 to MAX_METADATA_ID - 1\\r\\n        uint256 metadataId = uint256(keccak256(abi.encodePacked(block.timestamp, msg.sender, id))) % MAX_METADATA_ID;\\r\\n        tokenMetadataId[id] = metadataId;\\r\\n\\r\\n        // Transfer the token to the recipient, either transferring from the contract's bank or minting.\\r\\n        _transferERC721(erc721Owner, to_, id);\\r\\n    }\\r\\n\\r\\n    function _burnERC721(address from_) internal virtual {\\r\\n        if (from_ == address(0)) revert InvalidSender();\\r\\n\\r\\n        uint256 id = _owned[from_][_owned[from_].length - 1];\\r\\n        _owned[from_].pop();\\r\\n        delete _ownedIndex[id];\\r\\n        delete _ownedData[id];\\r\\n        delete getApproved[id];\\r\\n        burned++;\\r\\n\\r\\n        emit ERC721Transfer(from_, address(0), id);\\r\\n        emit Transfer(from_, address(0), id);\\r\\n    }\\r\\n\\r\\n    /// @notice Initialization function to set pairs / etc, saving gas by avoiding mint / burn on unnecessary targets\\r\\n    function _setERC721TransferExempt(address target_, bool state_) internal virtual {\\r\\n        // If the target has at least 1 full ERC-20 token, they should not be removed from the exempt list\\r\\n        // because if they were and then they attempted to transfer, it would revert as they would not\\r\\n        // necessarily have enough ERC-721s to bank.\\r\\n        if (erc20BalanceOf(target_) >= UNITS && !state_) {\\r\\n            revert CannotRemoveFromERC721TransferExempt();\\r\\n        }\\r\\n        erc721TransferExempt[target_] = state_;\\r\\n    }\\r\\n\\r\\n    function _getOwnerOf(uint256 id_) internal view virtual returns (address ownerOf_) {\\r\\n        uint256 data = _ownedData[id_];\\r\\n\\r\\n        assembly {\\r\\n            ownerOf_ := and(data, _BITMASK_ADDRESS)\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _setOwnerOf(uint256 id_, address owner_) internal virtual {\\r\\n        uint256 data = _ownedData[id_];\\r\\n\\r\\n        assembly {\\r\\n            data := add(\\r\\n            and(data, _BITMASK_OWNED_INDEX),\\r\\n            and(owner_, _BITMASK_ADDRESS)\\r\\n            )\\r\\n        }\\r\\n\\r\\n        _ownedData[id_] = data;\\r\\n    }\\r\\n\\r\\n    function _getOwnedIndex(uint256 id_) internal view virtual returns (uint256 ownedIndex_) {\\r\\n        uint256 data = _ownedData[id_];\\r\\n\\r\\n        assembly {\\r\\n            ownedIndex_ := shr(160, data)\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _setOwnedIndex(uint256 id_, uint256 index_) internal virtual {\\r\\n        uint256 data = _ownedData[id_];\\r\\n\\r\\n        if (index_ > _BITMASK_OWNED_INDEX >> 160) {\\r\\n            revert OwnedIndexOverflow();\\r\\n        }\\r\\n\\r\\n        assembly {\\r\\n            data := add(\\r\\n            and(data, _BITMASK_ADDRESS),\\r\\n            and(shl(160, index_), _BITMASK_OWNED_INDEX)\\r\\n            )\\r\\n        }\\r\\n\\r\\n        _ownedData[id_] = data;\\r\\n    }\\r\\n\\r\\n    function _setAutomatedMarketMakerPair(address pair, bool value) private {\\r\\n        automatedMarketMakerPairs[pair] = value;\\r\\n        emit SetAutomatedMarketMakerPair(pair, value);\\r\\n    }\\r\\n\\r\\n    function _swapBack() private {\\r\\n        uint256 contractBalance = balanceOf[address(this)];\\r\\n        uint256 totalTokensToSwap = tokensForFee;\\r\\n        bool success;\\r\\n        if (contractBalance == 0 || totalTokensToSwap == 0) {\\r\\n            return;\\r\\n        }\\r\\n        if (contractBalance > swapTokensAtAmount * 20) {\\r\\n            contractBalance = swapTokensAtAmount * 20;\\r\\n        }\\r\\n        uint256 amountToSwapForETH = contractBalance;\\r\\n        uint256 initialETHBalance = address(this).balance;\\r\\n        _swapTokensForEth(amountToSwapForETH);\\r\\n        uint256 ethBalance = address(this).balance - initialETHBalance;\\r\\n        tokensForFee = 0;\\r\\n        (success, ) = address(feeWallet).call{value: ethBalance}(\\\"\\\");\\r\\n    }\\r\\n\\r\\n    function _swapTokensForEth(uint256 tokenAmount) private {\\r\\n        address[] memory path = new address[](2);\\r\\n        path[0] = address(this);\\r\\n        path[1] = WETH;\\r\\n        allowance[address(this)][ROUTER] = tokenAmount;\\r\\n        emit ERC20Approval(address(this), ROUTER, tokenAmount);\\r\\n        emit Approval(address(this), ROUTER, tokenAmount);\\r\\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\\r\\n            tokenAmount,\\r\\n            0,\\r\\n            path,\\r\\n            address(this),\\r\\n            block.timestamp\\r\\n        );\\r\\n    }\\r\\n}\"\r\n    },\r\n    \"contracts/interfaces/dex/IUniswapV2Router02.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./IUniswapV2Router01.sol\\\";\\r\\n\\r\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\r\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\r\\n        address token,\\r\\n        uint liquidity,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint amountETH);\\r\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\r\\n        address token,\\r\\n        uint liquidity,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline,\\r\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\r\\n    ) external returns (uint amountETH);\\r\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\r\\n        uint amountIn,\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external;\\r\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external payable;\\r\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\r\\n        uint amountIn,\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external;\\r\\n}\"\r\n    },\r\n    \"contracts/interfaces/dex/IUniswapV2Factory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface IUniswapV2Factory {\\r\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint256);\\r\\n\\r\\n    function feeTo() external view returns (address);\\r\\n    function feeToSetter() external view returns (address);\\r\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\r\\n    function allPairs(uint256) external view returns (address pair);\\r\\n    function allPairsLength() external view returns (uint256);\\r\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\r\\n    function setFeeTo(address) external;\\r\\n    function setFeeToSetter(address) external;\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interfaces/IERC404.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.20;\\r\\n\\r\\nimport {IERC165} from \\\"@openzeppelin/contracts/interfaces/IERC165.sol\\\";\\r\\n\\r\\ninterface IERC404 is IERC165 {\\r\\n    event ERC20Approval(address owner, address spender, uint256 value);\\r\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\r\\n    event ERC721Approval(address indexed owner, address indexed spender, uint256 indexed id);\\r\\n    event ERC20Transfer(address indexed from, address indexed to, uint256 amount);\\r\\n    event ERC721Transfer(address indexed from, address indexed to, uint256 indexed id);\\r\\n\\r\\n    error NotFound();\\r\\n    error InvalidId();\\r\\n    error AlreadyExists();\\r\\n    error InvalidRecipient();\\r\\n    error InvalidSender();\\r\\n    error InvalidSpender();\\r\\n    error InvalidOperator();\\r\\n    error UnsafeRecipient();\\r\\n    error RecipientIsERC721TransferExempt();\\r\\n    error SenderIsERC721TransferExempt();\\r\\n    error Unauthorized();\\r\\n    error InsufficientAllowance();\\r\\n    error DecimalsTooLow();\\r\\n    error CannotRemoveFromERC721TransferExempt();\\r\\n    error PermitDeadlineExpired();\\r\\n    error InvalidSigner();\\r\\n    error InvalidApproval();\\r\\n    error OwnedIndexOverflow();\\r\\n\\r\\n    function name() external view returns (string memory);\\r\\n    function symbol() external view returns (string memory);\\r\\n    function decimals() external view returns (uint8);\\r\\n    function totalSupply() external view returns (uint256);\\r\\n    function erc20TotalSupply() external view returns (uint256);\\r\\n    function erc721TotalSupply() external view returns (uint256);\\r\\n    function balanceOf(address owner_) external view returns (uint256);\\r\\n    function erc721BalanceOf(address owner_) external view returns (uint256);\\r\\n    function erc20BalanceOf(address owner_) external view returns (uint256);\\r\\n    function erc721TransferExempt(address account_) external view returns (bool);\\r\\n    function isApprovedForAll(address owner_, address operator_) external view returns (bool);\\r\\n    function allowance(address owner_, address spender_) external view returns (uint256);\\r\\n    function owned(address owner_) external view returns (uint256[] memory);\\r\\n    function ownerOf(uint256 id_) external view returns (address erc721Owner);\\r\\n    function tokenURI(uint256 id_) external view returns (string memory);\\r\\n    function approve(address spender_, uint256 valueOrId_) external returns (bool);\\r\\n    function setApprovalForAll(address operator_, bool approved_) external;\\r\\n    function transferFrom(address from_, address to_, uint256 valueOrId_) external returns (bool);\\r\\n    function transfer(address to_, uint256 amount_) external returns (bool);\\r\\n    function erc721TokensBankedInQueue() external view returns (uint256);\\r\\n    function safeTransferFrom(address from_, address to_, uint256 id_) external;\\r\\n    function safeTransferFrom(address from_, address to_, uint256 id_, bytes calldata data_) external;\\r\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\r\\n    function permit(address owner_, address spender_, uint256 value_, uint256 deadline_, uint8 v_, bytes32 r_, bytes32 s_) external;\\r\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Math} from \\\"./math/Math.sol\\\";\\nimport {SignedMath} from \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant HEX_DIGITS = \\\"0123456789abcdef\\\";\\n    uint8 private constant ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev The `value` string doesn't fit in the specified `length`.\\n     */\\n    error StringsInsufficientHexLength(uint256 value, uint256 length);\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), HEX_DIGITS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toStringSigned(int256 value) internal pure returns (string memory) {\\n        return string.concat(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value)));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        uint256 localValue = value;\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = HEX_DIGITS[localValue & 0xf];\\n            localValue >>= 4;\\n        }\\n        if (localValue != 0) {\\n            revert StringsInsufficientHexLength(value, length);\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal\\n     * representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return bytes(a).length == bytes(b).length && keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/interfaces/IERC2981.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC2981.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Interface for the NFT Royalty Standard.\\n *\\n * A standardized way to retrieve royalty payment information for non-fungible tokens (NFTs) to enable universal\\n * support for royalty payments across all NFT marketplaces and ecosystem participants.\\n */\\ninterface IERC2981 is IERC165 {\\n    /**\\n     * @dev Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of\\n     * exchange. The royalty amount is denominated and should be paid in that same unit of exchange.\\n     */\\n    function royaltyInfo(\\n        uint256 tokenId,\\n        uint256 salePrice\\n    ) external view returns (address receiver, uint256 royaltyAmount);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/interfaces/IERC721Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC721Receiver} from \\\"../token/ERC721/IERC721Receiver.sol\\\";\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/interfaces/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../utils/introspection/IERC165.sol\\\";\\n\"\r\n    },\r\n    \"contracts/interfaces/dex/IUniswapV2Router01.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface IUniswapV2Router01 {\\r\\n    function factory() external pure returns (address);\\r\\n    function WETH() external pure returns (address);\\r\\n    function addLiquidity(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint amountADesired,\\r\\n        uint amountBDesired,\\r\\n        uint amountAMin,\\r\\n        uint amountBMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\r\\n    function addLiquidityETH(\\r\\n        address token,\\r\\n        uint amountTokenDesired,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\r\\n    function removeLiquidity(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint liquidity,\\r\\n        uint amountAMin,\\r\\n        uint amountBMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint amountA, uint amountB);\\r\\n    function removeLiquidityETH(\\r\\n        address token,\\r\\n        uint liquidity,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint amountToken, uint amountETH);\\r\\n    function removeLiquidityWithPermit(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint liquidity,\\r\\n        uint amountAMin,\\r\\n        uint amountBMin,\\r\\n        address to,\\r\\n        uint deadline,\\r\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\r\\n    ) external returns (uint amountA, uint amountB);\\r\\n    function removeLiquidityETHWithPermit(\\r\\n        address token,\\r\\n        uint liquidity,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline,\\r\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\r\\n    ) external returns (uint amountToken, uint amountETH);\\r\\n    function swapExactTokensForTokens(\\r\\n        uint amountIn,\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint[] memory amounts);\\r\\n    function swapTokensForExactTokens(\\r\\n        uint amountOut,\\r\\n        uint amountInMax,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint[] memory amounts);\\r\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\r\\n    external\\r\\n    payable\\r\\n    returns (uint[] memory amounts);\\r\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\r\\n    external\\r\\n    returns (uint[] memory amounts);\\r\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\r\\n    external\\r\\n    returns (uint[] memory amounts);\\r\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\r\\n    external\\r\\n    payable\\r\\n    returns (uint[] memory amounts);\\r\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\r\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\r\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\r\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\r\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\r\\n}\\r\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/SignedMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Muldiv operation overflow.\\n     */\\n    error MathOverflowedMulDiv();\\n\\n    enum Rounding {\\n        Floor, // Toward negative infinity\\n        Ceil, // Toward positive infinity\\n        Trunc, // Toward zero\\n        Expand // Away from zero\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\n     * of rounding towards zero.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) {\\n            // Guarantee the same behavior as in a regular Solidity division.\\n            return a / b;\\n        }\\n\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\n     * denominator == 0.\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\n     * Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            if (denominator <= prod1) {\\n                revert MathOverflowedMulDiv();\\n            }\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\\n\\n            uint256 twos = denominator & (0 - denominator);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\\n            // works in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\n     * towards zero.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\n     */\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\n        return uint8(rounding) % 2 == 1;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be\\n     * reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"feeWallet_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AlreadyExists\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CannotRemoveFromERC721TransferExempt\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DecimalsTooLow\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FeeTooHigh\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientAllowance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidApproval\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidId\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidOperator\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidParameters\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidRecipient\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidSender\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidSigner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidSpender\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotFound\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotOperator\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OwnedIndexOverflow\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PairNotAllowed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PermitDeadlineExpired\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RecipientIsERC721TransferExempt\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SenderIsERC721TransferExempt\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SwapAmountTooHigh\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SwapAmountTooLow\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Unauthorized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UnsafeRecipient\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"ERC20Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ERC20Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"ERC721Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"ERC721Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isExcluded\",\"type\":\"bool\"}],\"name\":\"ExcludeFromFees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newWallet\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldWallet\",\"type\":\"address\"}],\"name\":\"FeeWalletUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"SetAutomatedMarketMakerPair\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"access\",\"type\":\"bool\"}],\"name\":\"SetOperator\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"valueOrId_\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"automatedMarketMakerPairs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"}],\"name\":\"erc20BalanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"erc20TotalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator_\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved_\",\"type\":\"bool\"}],\"name\":\"erc404SetApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"}],\"name\":\"erc721BalanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"erc721TokensBankedInQueue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"erc721TotalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"erc721TransferExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"excluded\",\"type\":\"bool\"}],\"name\":\"excludeFromFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromFees\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minted\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"operators\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"}],\"name\":\"owned\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id_\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"erc721Owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline_\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v_\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r_\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s_\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"salePrice\",\"type\":\"uint256\"}],\"name\":\"royaltyInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"royaltyAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id_\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id_\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data_\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator_\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved_\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setAutomatedMarketMakerPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"uri_\",\"type\":\"string\"}],\"name\":\"setBaseURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"setErc721TransferExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"metadataId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"uri_\",\"type\":\"string\"}],\"name\":\"setMetadataIdURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"access\",\"type\":\"bool\"}],\"name\":\"setOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"feeNumerator\",\"type\":\"uint96\"}],\"name\":\"setRoyaltyInfo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapTokensAtAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenMetadataId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokensForFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value_\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"valueOrId_\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"updateBuyFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newWallet\",\"type\":\"address\"}],\"name\":\"updateFeeWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"updateSellFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"updateSwapEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newAmount\",\"type\":\"uint256\"}],\"name\":\"updateSwapTokensAtAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "Blocks404", "CompilerVersion": "v0.8.22+commit.4fc1097e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000032982782593093a7aaa83aa6e441f58a25bb4d90000000000000000000000000000000000000000000000000000000000000000a426c6f636b73203430340000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000044234303400000000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}