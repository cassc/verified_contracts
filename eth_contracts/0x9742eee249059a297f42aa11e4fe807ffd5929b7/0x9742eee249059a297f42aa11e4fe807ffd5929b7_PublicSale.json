{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\ncontract PublicSale {\r\n    uint256 public constant TOTAL_SALE_AMOUNT = 141_305_000_000 * 10 ** 18;\r\n    uint256 public constant PRICE = HARD_CAP * 1e18 / TOTAL_SALE_AMOUNT;\r\n    uint256 public constant HARD_CAP = 30 ether;\r\n    \r\n\r\n    /**\r\n     * @notice The address of the recipient, which will receive the raised ETH.\r\n     */\r\n    address public immutable recipient = 0xe9F777e5c0Eceada0042633f058Ea6C28937D7E8;\r\n\r\n\r\n \r\n\r\n    /**\r\n     * @notice Whether the sale has ended.\r\n     */\r\n    bool public saleEnded;\r\n\r\n    /**\r\n     * @notice The total amount of tokens bought.\r\n     */\r\n    uint256 public totalTokensBought;\r\n\r\n    /**\r\n     * @notice The start date of the sale in unix timestamp.\r\n     */\r\n    uint256 public start;\r\n\r\n    /**\r\n     * @notice The end date of the sale in unix timestamp.\r\n     */\r\n    uint256 public end;\r\n\r\n    \r\n\r\n    /**\r\n     * @notice The amount of tokens bought by each address.\r\n     */\r\n    mapping(address => uint256) public amountBought;\r\n\r\n    /**\r\n     * @notice Emits when tokens are bought.\r\n     * @param buyer The address of the buyer.\r\n     * @param amount The amount of tokens bought.\r\n     */\r\n\r\n    event TokensBought(address indexed buyer, uint256 amount);\r\n\r\n\r\n    \r\n    /**\r\n     * @notice Emits when the sale is ended.\r\n     * @param totalAmountBought The total amount of tokens bought.\r\n     * @param recipient The address of the recipient.\r\n     */\r\n    event SaleEnded(uint256 totalAmountBought, address indexed recipient);\r\n\r\n    constructor( uint256 _start, uint256 _end) {\r\n        start = _start;\r\n        end = _end;\r\n    }\r\n\r\n\r\n    /**\r\n     * @notice Buys tokens with ETH.\r\n     */\r\n    function buy() external payable {\r\n        require(block.timestamp >= start, \"Sale has not started yet\");\r\n        require(block.timestamp <= end, \"Sale has ended\");\r\n        require(msg.value > 0, \"Amount must be greater than 0\");\r\n        require(!saleEnded, \"Sale has ended\"); \r\n\r\n        // Compute the amount of tokens bought\r\n        uint256 tokensBought = msg.value * 10 ** 18 / PRICE;\r\n\r\n\r\n        // Update the storage variables\r\n        amountBought[msg.sender] += tokensBought;\r\n        totalTokensBought += tokensBought;\r\n        emit TokensBought(msg.sender, tokensBought);\r\n    }\r\n\r\n    /**\r\n     * @notice Ends the sale.\r\n     */\r\n    function endSale() external {\r\n        require(block.timestamp > end, \"Sale has not ended yet\");\r\n        require(!saleEnded, \"Sale has already ended\");\r\n\r\n        // Mark the sale as ended\r\n        saleEnded = true;   \r\n\r\n         // Send the raised ETH to the recipient\r\n        (bool sc,) = payable(recipient).call{value: address(this).balance}(\"\");\r\n        require(sc, \"Transfer failed\");\r\n    \r\n        emit SaleEnded(totalTokensBought, recipient);\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_end\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalAmountBought\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"SaleEnded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokensBought\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"HARD_CAP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PRICE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TOTAL_SALE_AMOUNT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"amountBought\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buy\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"end\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endSale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"recipient\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"saleEnded\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"start\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalTokensBought\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "PublicSale", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "0000000000000000000000000000000000000000000000000000000064a828700000000000000000000000000000000000000000000000000000000064ac1cf0", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://412e5c0dc4a34726372cc1746914808f62e3d636accc93e26814e04ab83fed91"}