// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.6;

/*░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░▒▒▓▓██████████████▓▓▒▒▒░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░
░░░░░░░░░░░░░░░░░░░░░░░░░░░░▒▓███████████▓▓▓▓▓▓▓▓███████████▓▒░░░░░░░░░░░░░░░░░░░░░░░░░░░░
░░░░░░░░░░░░░░░░░░░░░░░░▒▓██████▓▓▓▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▓▓▓███████▓▒░░░░░░░░░░░░░░░░░░░░░░░
░░░░░░░░░░░░░░░░░░░░▒▓█████▓▓▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▓▓█████▓▒░░░░░░░░░░░░░░░░░░░░
░░░░░░░░░░░░░░░░░▒▓████▓▓▒▒▒▒▒▒▒▒▒░░░░░░▒▒▒▒▒▒▒▒▒▒░░░░░░▒▒▒▒▒▒▒▒▒▓▓████▓▒░░░░░░░░░░░░░░░░░
░░░░░░░░░░░░░░░▒████▓▓▒▒▒▒▒▒▒░░░▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒░░░▒▒▒▒▒▒▒▓▓████▒░░░░░░░░░░░░░░░
░░░░░░░░░░░░░▓████▓▒▒▒▒▒▒░░░▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒░░░▒▒▒▒▒▒▓████▓░░░░░░░░░░░░░
░░░░░░░░░░░▒███▓▓▒▒▒▒▒░░▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒░░▒▒▒▒▒▓▓███▓░░░░░░░░░░░
░░░░░░░░░▒████▓▒▒▒▒▒░░▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒░░▒▒▒▒▒▓▓███▒░░░░░░░░░
░░░░░░░░▓███▓▒▒▒▒▒░▒▒▒▒▒▒▒▒▒▓▓▒░▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒░▒▓▓▒▒▒▒▒▒▒▒▒░▒▒▒▒▒▓███▓░░░░░░░░
░░░░░░░███▓▒▒▒▒▒░░▒▒▒▒▒▒▒███████▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▓██████▓▒▒▒▒▒▒▒░░▒▒▒▒▒▓███░░░░░░░
░░░░░▒███▓▒▒▒▒░░▒▒▒▒▒▓█████████████████████████████████████████████▓▒▒▒▒▒▒░░▒▒▒▒▓███▒░░░░░
░░░░▒███▓▒▒▒▒░░▒▒▒▓█████████████████▓▓▓▓██████████▓▓▓██████████████████▒▒▒▒░░▒▒▒▒▓███▒░░░░
░░░░███▓▒▒▒▒░░▒▓████████████████████████▒███████▓▒████████████████████████▒▒░░▒▒▒▒▓███▒░░░
░░░███▓▒▒▒▒▒▓████████████████████████████▓██████▒████████████████████████████▓░▒▒▒▒▓███░░░
░░▓██▓▒▒▒▒██████████████████████████████████████████████████████████████████████░▒▒▒▓███░░
░▒███▒▒▒▒▒█████████████████████████▓██████████████████▓█████████████████████████░▒▒▒▒███▒░
░███▓▒▒▒▒░▒████████████████▓███▓▓████████████████████▓███▓▒███▓████████████████░░▒▒▒▒▓███░
▒███▒▒▒▒░▒▒░██████████████▓██████▓▓▓██████████████████▓▓▓██████▓█████████████▓░▒▒░▒▒▒▒███▒
▓██▓▒▒▒▒░▒▒▒░████████████▓██████████████████████████████████████▓███████████▓░▒▒▒░▒▒▒▒▓██▓
███▓▒▒▒▒░▒▒▒▒░██████████▒███████████▓███████████████▓▓███████████▓█████████▓░▒▒▒▒░░▒▒▒▒███
███▒▒▒▒░░▒▒▒▒▒░▓███████▒█████▓█████▓██████████████████▓████▓▓█████▓███████▒░▒▒▒▒▒░░▒▒▒▒███
███▒▒▒▒░░▒▒▒▒▒▒░▓█████▒███████▒██▓▓████▓▓▓▓████▓▓▓▓████▓▓██▒██████▓▓█████▒▒▒▒▒▒▒▒░░▒▒▒▒███
███▒▒▒▒░░▒▒▒▒▒▒▒░▓███▒▓█████████▒█████▓▓██████████▒██████▒█████████▓▓███▒▒▒▒▒▒▒▒▒░░▒▒▒▒███
███▓▒▒▒▒░▒▒▒▒▒▒▒▒░▒▓▒▒█████████▒███████▒█▓█▓██▓█▓█▒███████▒█████████░▒▓▒▒▒▒▒▒▒▒▒▒░░▒▒▒▒███
▓██▓▒▒▒▒░▒▒▒▒▒▒▒▒▒▒▒▒░▓████████▒████████▓▓▓▒██▒▓▓▓████████▒████████▒▒▒▒▒▒▒▒▒▒▒▒▒▒░▒▒▒▒▓██▓
▒███▒▒▒▒░▒▒▒▒▒▒▒▒▒▒▒▒▒░████████░████████████▒▓████████████▒███████▒░▒▒▒▒▒▒▒▒▒▒▒▒▒░▒▒▒▒███▒
░███▓▒▒▒▒░▒▒▒▒▒▒▒▒▒▒▒▒▒░███████▓▓███████████▓▓███████████▒███████▓░▒▒▒▒▒▒▒▒▒▒▒▒▒░▒▒▒▒▓███░
░▒███▒▒▒▒░░▒▒▒▒▒▒▒▒▒▒▒▒▒▒███████▒▓██████████▒▓██████████▓▓███████░▒▒▒▒▒▒▒▒▒▒▒▒▒░░▒▒▒▒███▒░
░░███▓▒▒▒▒░▒▒▒▒▒▒▒▒▒▒▒▒▒░████████▒▓████████▓▓▓▓████████▓▒████████░▒▒▒▒▒▒▒▒▒▒▒▒▒░▒▒▒▒▓███░░
░░░███▓▒▒▒▒░▒▒▒▒▒▒▒▒▒▒▒░▓█████████▓▓█████▓▒████▒▓█████▒▓█████████░▒▒▒▒▒▒▒▒▒▒▒▒░▒▒▒▒▓███░░░
░░░▒███▓▒▒▒▒░▒▒▒▒▒▒▒▒▒░░████████████▒▓▓▒▒████████▒▒▓▓▒███████████▒░░▒▒▒▒▒▒▒▒▒░▒▒▒▒▓███▒░░░
░░░░▒███▓▒▒▒▒░░▒▒▒▒▒▒░░▒▒▒▓██████████▓██▓▓▓▓▓▓▓▓▓▓██▓█████████▓▓▒▒▒░▒▒▒▒▒▒▒░░▒▒▒▒▓███▒░░░░
░░░░░▒███▓▒▒▒▒░░▒▒▒▒▒░▒▒▒▒▒▒▒▒▓████████████████████████████▓▒▒▒▒▒▒▒░░▒▒▒▒▒░░▒▒▒▒▓███▒░░░░░
░░░░░░░███▓▒▒▒▒▒░░▒▒▒░▒▒▒▒▒▒▒▒▒▒▒▒▓▓██████████████████▓▓▒▒▒▒▒▒▒▒▒▒▒▒░▒▒▒░░▒▒▒▒▒▓███░░░░░░░
░░░░░░░░▓███▓▒▒▒▒▒░▒▒░▓▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒░░░░░░░░░░▒░▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▓▒▒▒▒░▒▒▒▒▒▓███▓░░░░░░░░
░░░░░░░░░▒████▓▒▒▒▒▒░░████▓▒▒▒▒▒▒▒▒▒▒▒▒▒░▒▒▒▒▒▒▒▒░░▒▒▒▒▒▒▒▒▒▒▒▒▓████░░▒▒▒▒▒▓▓███▒░░░░░░░░░
░░░░░░░░░░░▓███▓▓▒▒▒▒▒░▒▓████▓▓▒▒▒▒▒▒▒▒▒░▒▒▒▒▒▒▒▒░░▒▒▒▒▒▒▒▒▓█████▓▒░▒▒▒▒▒▓▓███▓░░░░░░░░░░░
░░░░░░░░░░░░░▓████▓▒▒▒▒▒▒░▒▓███████▓▓▒▒▒░▒▒▒▒▒▒▒▒▒░▒▓▓▓███████▓▒░▒▒▒▒▒▒▓▓███▓░░░░░░░░░░░░░
░░░░░░░░░░░░░░░▒████▓▓▒▒▒▒▒▒░░▒▓███████▓▓▓▓▓▓▓▓▓▓▓████████▓▒▒░▒▒▒▒▒▒▒▓████▓░░░░░░░░░░░░░░░
░░░░░░░░░░░░░░░░░▒▓████▓▓▒▒▒▒▒▒▒▒░▒▒▒▒▓▓▓████████▓▓▓▒▒▒▒░▒▒▒▒▒▒▒▒▓▓████▓▒░░░░░░░░░░░░░░░░░
░░░░░░░░░░░░░░░░░░░░▒▓█████▓▓▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▓▓█████▓▒░░░░░░░░░░░░░░░░░░░░
░░░░░░░░░░░░░░░░░░░░░░░▒▓███████▓▓▓▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▓▓▓▓██████▓▒░░░░░░░░░░░░░░░░░░░░░░░
░░░░░░░░░░░░░░░░░░░░░░░░░░░▒▒▓███████████▓▓▓▓▓▓▓▓███████████▓▒▒░░░░░░░░░░░░░░░░░░░░░░░░░░░
░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░▒▒▓▓▓██████████████▓▓▓▒▒░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░*/

import "@openzeppelin/contracts/token/ERC721/ERC721.sol";
import "@openzeppelin/contracts/access/Ownable.sol";
import "@openzeppelin/contracts/finance/PaymentSplitter.sol";
import "@openzeppelin/contracts/security/Pausable.sol";

contract DoggoMintooor is ERC721, Ownable, Pausable, PaymentSplitter {
    struct metadata {
        string url;
    }

    mapping(uint256 => metadata) public _metadata;
    uint256 public nextTokenId = 0;

    // TODO: @yahzman to decide fee, default to free
    uint256 public mintingFee = 0 ether;

    constructor(address[] memory _payees, uint256[] memory _shares)
        ERC721("DoggoMintooor", "DMR")
        PaymentSplitter(_payees, _shares)
    {}

    function mint(string memory _url) external payable whenNotPaused {
        require(bytes(_url).length > 0, "Empty URL");

        // Check minting fee sent
        require(msg.value >= mintingFee, "Incorrect minting fee");

        // // Distribute minting fee
        // payable(splitter).transfer(mintingFee);

        // Mint NFT to caller
        _metadata[nextTokenId].url = _url;
        _mint(msg.sender, nextTokenId);

        // Track token ID
        nextTokenId++;
    }

    function tokenURI(uint256 tokenId)
        public
        view
        override
        returns (string memory)
    {
        _requireMinted(tokenId);

        // Read custom tokenURI from metadata
        return _metadata[tokenId].url;
    }

    function setMintingFee(uint256 _mintingFee) external onlyOwner {
        mintingFee = _mintingFee;
    }

    function forceTokenURIChange(uint256 tokenId, string memory url)
        external
        onlyOwner
    {
        _metadata[tokenId].url = url;
    }

    function forceTokenBurn(uint256 tokenId) external onlyOwner {
        _burn(tokenId);
    }

    function pause() external onlyOwner {
        _pause();
    }

    function unpause() external onlyOwner {
        _unpause();
    }

    function withdraw() external onlyOwner {
        payable(owner()).transfer(address(this).balance);
    }
}