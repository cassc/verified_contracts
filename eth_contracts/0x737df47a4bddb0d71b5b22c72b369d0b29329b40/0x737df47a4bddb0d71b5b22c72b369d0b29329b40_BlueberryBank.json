{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"lib/blueberry-core/contracts/BlueberryBank.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n/*\\n\u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2557     \u2588\u2588\u2557   \u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2557   \u2588\u2588\u2557\\n\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2551     \u2588\u2588\u2551   \u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u255a\u2588\u2588\u2557 \u2588\u2588\u2554\u255d\\n\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2551     \u2588\u2588\u2551   \u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2588\u2557  \u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2588\u2588\u2588\u2557  \u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d \u255a\u2588\u2588\u2588\u2588\u2554\u255d\\n\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2551     \u2588\u2588\u2551   \u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u255d  \u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u255d  \u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557  \u255a\u2588\u2588\u2554\u255d\\n\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u255a\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2551  \u2588\u2588\u2551\u2588\u2588\u2551  \u2588\u2588\u2551   \u2588\u2588\u2551\\n\u255a\u2550\u2550\u2550\u2550\u2550\u255d \u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d \u255a\u2550\u2550\u2550\u2550\u2550\u255d \u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d\u255a\u2550\u2550\u2550\u2550\u2550\u255d \u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d\u255a\u2550\u255d  \u255a\u2550\u255d\u255a\u2550\u255d  \u255a\u2550\u255d   \u255a\u2550\u255d\\n*/\\n\\npragma solidity 0.8.22;\\n\\nimport { SafeERC20Upgradeable } from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\nimport { IERC20Upgradeable } from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport { IERC1155Upgradeable } from \\\"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155Upgradeable.sol\\\";\\nimport { Ownable2StepUpgradeable } from \\\"@openzeppelin/contracts-upgradeable/access/Ownable2StepUpgradeable.sol\\\";\\n\\nimport { BBMath } from \\\"./libraries/BBMath.sol\\\";\\nimport { UniversalERC20, IERC20 } from \\\"./libraries/UniversalERC20.sol\\\";\\n\\nimport { ERC1155NaiveReceiver } from \\\"./utils/ERC1155NaiveReceiver.sol\\\";\\nimport \\\"./utils/BlueberryConst.sol\\\" as Constants;\\nimport \\\"./utils/BlueberryErrors.sol\\\" as Errors;\\n\\nimport { IBank } from \\\"./interfaces/IBank.sol\\\";\\nimport { IBErc20 } from \\\"./interfaces/money-market/IBErc20.sol\\\";\\nimport { ICoreOracle } from \\\"./interfaces/ICoreOracle.sol\\\";\\nimport { IERC20Wrapper } from \\\"./interfaces/IERC20Wrapper.sol\\\";\\nimport { IFeeManager } from \\\"./interfaces/IFeeManager.sol\\\";\\nimport { IHardVault } from \\\"./interfaces/IHardVault.sol\\\";\\nimport { IProtocolConfig } from \\\"./interfaces/IProtocolConfig.sol\\\";\\nimport { ISoftVault } from \\\"./interfaces/ISoftVault.sol\\\";\\n\\n/**\\n * @title BlueberryBank\\n * @author BlueberryProtocol\\n * @notice Blueberry Bank is the main contract that stores user's positions and track the borrowing of tokens\\n */\\ncontract BlueberryBank is IBank, Ownable2StepUpgradeable, ERC1155NaiveReceiver {\\n    using BBMath for uint256;\\n    using SafeERC20Upgradeable for IERC20Upgradeable;\\n    using UniversalERC20 for IERC20;\\n\\n    /*//////////////////////////////////////////////////////////////////////////\\n                                     STORAGE\\n    //////////////////////////////////////////////////////////////////////////*/\\n\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n    uint256 private constant _NO_ID = type(uint256).max;\\n    address private constant _NO_ADDRESS = address(1);\\n\\n    /* solhint-disable var-name-mixedcase */\\n    uint256 private _GENERAL_LOCK; /// @dev TEMPORARY: re-entrancy lock guard.\\n    uint256 private _IN_EXEC_LOCK; /// @dev TEMPORARY: exec lock guard.\\n    uint256 private _POSITION_ID; /// @dev TEMPORARY: position ID currently under execution.\\n    address private _SPELL; /// @dev TEMPORARY: spell currently under execution.\\n    /* solhint-enable var-name-mixedcase */\\n\\n    IProtocolConfig private _config; /// @dev The protocol _config address.\\n    ICoreOracle private _oracle; /// @dev The main _oracle address.\\n\\n    uint256 internal _nextPositionId; /// @dev Next available position ID, starting from 1 (see initialize).\\n    uint256 internal _bankStatus; /// @dev Each bit stores certain bank status, e.g. borrow allowed, repay allowed\\n    uint256 internal _repayResumedTimestamp; /// @dev Timestamp that repay is allowed or resumed\\n\\n    address[] internal _allBanks; /// @dev The list of all listed banks.\\n    mapping(address => Bank) internal _banks; /// @dev Mapping from token to bank data.\\n    mapping(address => bool) internal _bTokenInBank; /// @dev Mapping from bToken to its existence in bank.\\n    mapping(uint256 => Position) internal _positions; /// @dev Mapping from position ID to position data.\\n\\n    mapping(address => bool) private _whitelistedTokens; /// @dev Mapping from token to whitelist status\\n    mapping(address => bool) private _whitelistedWrappedTokens; /// @dev Mapping from token to whitelist status\\n    mapping(address => bool) private _whitelistedSpells; /// @dev Mapping from spell to whitelist status\\n\\n    /*//////////////////////////////////////////////////////////////////////////\\n                                      MODIFIERS\\n    //////////////////////////////////////////////////////////////////////////*/\\n\\n    /// @dev Ensure that the token is already whitelisted\\n    modifier onlyWhitelistedToken(address token) {\\n        if (!_whitelistedTokens[token]) revert Errors.TOKEN_NOT_WHITELISTED(token);\\n        _;\\n    }\\n\\n    /// @dev Ensure that the wrapped ERC1155 is already whitelisted\\n    modifier onlyWhitelistedERC1155(address token) {\\n        if (!_whitelistedWrappedTokens[token]) revert Errors.TOKEN_NOT_WHITELISTED(token);\\n        _;\\n    }\\n\\n    /// @dev Reentrancy lock guard.\\n    modifier lock() {\\n        if (_GENERAL_LOCK != _NOT_ENTERED) revert Errors.LOCKED();\\n        _GENERAL_LOCK = _ENTERED;\\n        _;\\n        _GENERAL_LOCK = _NOT_ENTERED;\\n    }\\n\\n    /// @dev Ensure that the function is called from within the execution scope.\\n    modifier inExec() {\\n        if (_POSITION_ID == _NO_ID) revert Errors.NOT_IN_EXEC();\\n        if (_SPELL != msg.sender) revert Errors.NOT_FROM_SPELL(msg.sender);\\n        if (_IN_EXEC_LOCK != _NOT_ENTERED) revert Errors.LOCKED();\\n        _IN_EXEC_LOCK = _ENTERED;\\n        _;\\n        _IN_EXEC_LOCK = _NOT_ENTERED;\\n    }\\n\\n    /// @dev Ensure that the interest rate of the given token is accrued.\\n    modifier poke(address token) {\\n        accrue(token);\\n        _;\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////////////////\\n                                     CONSTRUCTOR\\n    //////////////////////////////////////////////////////////////////////////*/\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////////////////\\n                                      FUNCTIONS\\n    //////////////////////////////////////////////////////////////////////////*/\\n    /**\\n     * @notice Initializes the Blueberry Bank contract.\\n     * @param oracle The address of the Core Oracle contract.\\n     * @param config The address of the config contract.\\n     * @param owner The address of the owner.\\n     */\\n    function initialize(ICoreOracle oracle, IProtocolConfig config, address owner) external initializer {\\n        __Ownable2Step_init();\\n        _transferOwnership(owner);\\n        if (address(oracle) == address(0) || address(config) == address(0)) {\\n            revert Errors.ZERO_ADDRESS();\\n        }\\n        _GENERAL_LOCK = _NOT_ENTERED;\\n        _IN_EXEC_LOCK = _NOT_ENTERED;\\n        _POSITION_ID = _NO_ID;\\n        _SPELL = _NO_ADDRESS;\\n\\n        _config = config;\\n        _oracle = oracle;\\n\\n        _nextPositionId = 1;\\n        _bankStatus = 15; // 0x1111: allow borrow, repay, lend, withdrawLend as default\\n\\n        emit SetOracle(address(oracle));\\n    }\\n\\n    /// @inheritdoc IBank\\n    function liquidate(\\n        uint256 positionId,\\n        address debtToken,\\n        uint256 amountCall\\n    ) external override lock poke(debtToken) {\\n        /// Ensures repayments are allowed at the moment of calling this function.\\n        if (!isRepayAllowed()) revert Errors.REPAY_NOT_ALLOWED();\\n        /// Ensures a non-zero repayment amount is specified.\\n        if (amountCall == 0) revert Errors.ZERO_AMOUNT();\\n        /// Ensures the position is liquidatable.\\n        if (!isLiquidatable(positionId)) revert Errors.NOT_LIQUIDATABLE(positionId);\\n\\n        /// Retrieve the position and associated bank data.\\n        Position storage pos = _positions[positionId];\\n        Bank memory bank = _banks[pos.underlyingToken];\\n        /// Ensure the position has valid collateral.\\n        if (pos.collToken == address(0)) revert Errors.BAD_COLLATERAL(positionId);\\n\\n        /// Revert liquidation if the repayment hasn't been warmed up\\n        /// following the last state where repayments were paused.\\n        if (block.timestamp < _repayResumedTimestamp + Constants.LIQUIDATION_REPAY_WARM_UP_PERIOD) {\\n            revert Errors.REPAY_ALLOW_NOT_WARMED_UP();\\n        }\\n\\n        /// Repay the debt and get details of repayment.\\n        uint256 oldShare = pos.debtShare;\\n        (uint256 amountPaid, uint256 share) = _repay(positionId, debtToken, amountCall);\\n\\n        /// Calculate the size of collateral and underlying vault share that the liquidator will get.\\n        uint256 liqSize = (pos.collateralSize * share) / oldShare;\\n        uint256 uVaultShare = (pos.underlyingVaultShare * share) / oldShare;\\n\\n        /// Adjust the position's debt and collateral after liquidation.\\n        pos.collateralSize -= liqSize;\\n        pos.underlyingVaultShare -= uVaultShare;\\n\\n        /// Transfer the liquidated collateral (Wrapped LP Tokens) to the liquidator.\\n        IERC1155Upgradeable(pos.collToken).safeTransferFrom(address(this), msg.sender, pos.collId, liqSize, \\\"\\\");\\n        /// Transfer underlying collaterals(vault share tokens) to liquidator\\n        if (_isSoftVault(pos.underlyingToken)) {\\n            IERC20Upgradeable(bank.softVault).safeTransfer(msg.sender, uVaultShare);\\n        } else {\\n            IERC1155Upgradeable(bank.hardVault).safeTransferFrom(\\n                address(this),\\n                msg.sender,\\n                uint256(uint160(pos.underlyingToken)),\\n                uVaultShare,\\n                \\\"\\\"\\n            );\\n        }\\n\\n        /// Emit an event capturing details of the liquidation process.\\n        emit Liquidate(positionId, msg.sender, debtToken, amountPaid, share, liqSize, uVaultShare);\\n    }\\n\\n    /// @inheritdoc IBank\\n    function execute(uint256 positionId, address spell, bytes memory data) external lock returns (uint256) {\\n        if (!_whitelistedSpells[spell]) revert Errors.SPELL_NOT_WHITELISTED(spell);\\n        if (positionId == 0) {\\n            positionId = _nextPositionId++;\\n            _positions[positionId].owner = msg.sender;\\n        } else {\\n            if (positionId >= _nextPositionId) revert Errors.BAD_POSITION(positionId);\\n            if (msg.sender != _positions[positionId].owner) revert Errors.NOT_FROM_OWNER(positionId, msg.sender);\\n        }\\n        _POSITION_ID = positionId;\\n        _SPELL = spell;\\n\\n        (bool ok, bytes memory returndata) = spell.call(data);\\n        if (!ok) {\\n            if (returndata.length > 0) {\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(\\\"bad cast call\\\");\\n            }\\n        }\\n\\n        if (isLiquidatable(positionId)) revert Errors.INSUFFICIENT_COLLATERAL();\\n\\n        _POSITION_ID = _NO_ID;\\n        _SPELL = _NO_ADDRESS;\\n\\n        emit Execute(positionId, msg.sender);\\n\\n        return positionId;\\n    }\\n\\n    /// @inheritdoc IBank\\n    function lend(address token, uint256 amount) external override inExec poke(token) onlyWhitelistedToken(token) {\\n        if (!isLendAllowed()) revert Errors.LEND_NOT_ALLOWED();\\n\\n        Position storage pos = _positions[_POSITION_ID];\\n        Bank storage bank = _banks[token];\\n        if (pos.underlyingToken != address(0)) {\\n            /// already have isolated collateral, allow same isolated collateral\\n            if (pos.underlyingToken != token) revert Errors.INCORRECT_UNDERLYING(token);\\n        } else {\\n            pos.underlyingToken = token;\\n        }\\n\\n        IFeeManager feeManager = getFeeManager();\\n\\n        IERC20Upgradeable(token).safeTransferFrom(pos.owner, address(this), amount);\\n        IERC20(token).universalApprove(address(feeManager), amount);\\n        amount = feeManager.doCutDepositFee(token, amount);\\n\\n        if (_isSoftVault(token)) {\\n            IERC20(token).universalApprove(bank.softVault, amount);\\n            pos.underlyingVaultShare += ISoftVault(bank.softVault).deposit(amount);\\n        } else {\\n            IERC20(token).universalApprove(bank.hardVault, amount);\\n            pos.underlyingVaultShare += IHardVault(bank.hardVault).deposit(token, amount);\\n        }\\n\\n        emit Lend(_POSITION_ID, msg.sender, token, amount);\\n    }\\n\\n    /// @inheritdoc IBank\\n    function withdrawLend(address token, uint256 shareAmount) external override inExec poke(token) {\\n        if (!isWithdrawLendAllowed()) revert Errors.WITHDRAW_LEND_NOT_ALLOWED();\\n        Position storage pos = _positions[_POSITION_ID];\\n        Bank memory bank = _banks[token];\\n        if (token != pos.underlyingToken) revert Errors.INVALID_UTOKEN(token);\\n        if (shareAmount == type(uint256).max) {\\n            shareAmount = pos.underlyingVaultShare;\\n        }\\n        uint256 wAmount;\\n        if (_isSoftVault(token)) {\\n            IERC20(bank.softVault).universalApprove(bank.softVault, shareAmount);\\n            wAmount = ISoftVault(bank.softVault).withdraw(shareAmount);\\n        } else {\\n            wAmount = IHardVault(bank.hardVault).withdraw(token, shareAmount);\\n        }\\n\\n        IFeeManager feeManager = getFeeManager();\\n\\n        pos.underlyingVaultShare -= shareAmount;\\n        IERC20(token).universalApprove(address(feeManager), wAmount);\\n        wAmount = feeManager.doCutWithdrawFee(token, wAmount);\\n        IERC20Upgradeable(token).safeTransfer(msg.sender, wAmount);\\n        emit WithdrawLend(_POSITION_ID, msg.sender, token, wAmount);\\n    }\\n\\n    /// @inheritdoc IBank\\n    function borrow(\\n        address token,\\n        uint256 amount\\n    ) external override inExec poke(token) onlyWhitelistedToken(token) returns (uint256 borrowedAmount) {\\n        if (!isBorrowAllowed()) revert Errors.BORROW_NOT_ALLOWED();\\n        Bank storage bank = _banks[token];\\n        Position storage pos = _positions[_POSITION_ID];\\n        if (pos.debtToken != address(0)) {\\n            /// already have some debts, allow same debt token\\n            if (pos.debtToken != token) revert Errors.INCORRECT_DEBT(token);\\n        } else {\\n            pos.debtToken = token;\\n        }\\n\\n        uint256 totalShare = bank.totalShare;\\n        uint256 totalDebt = _borrowBalanceStored(token);\\n        uint256 share = totalShare == 0 ? amount : (amount * totalShare).divCeil(totalDebt);\\n        if (share == 0) revert Errors.BORROW_ZERO_SHARE(amount);\\n        bank.totalShare += share;\\n        pos.debtShare += share;\\n\\n        borrowedAmount = _doBorrow(token, amount);\\n        IERC20Upgradeable(token).safeTransfer(msg.sender, borrowedAmount);\\n\\n        emit Borrow(_POSITION_ID, msg.sender, token, amount, share);\\n    }\\n\\n    /// @inheritdoc IBank\\n    function repay(address token, uint256 amountCall) external override inExec poke(token) onlyWhitelistedToken(token) {\\n        if (!isRepayAllowed()) revert Errors.REPAY_NOT_ALLOWED();\\n        (uint256 amount, uint256 share) = _repay(_POSITION_ID, token, amountCall);\\n        emit Repay(_POSITION_ID, msg.sender, token, amount, share);\\n    }\\n\\n    /// @inheritdoc IBank\\n    function putCollateral(\\n        address collToken,\\n        uint256 collId,\\n        uint256 amountCall\\n    ) external override inExec onlyWhitelistedERC1155(collToken) {\\n        Position storage pos = _positions[_POSITION_ID];\\n        if (pos.collToken != collToken || pos.collId != collId) {\\n            if (!_oracle.isWrappedTokenSupported(collToken, collId)) {\\n                revert Errors.ORACLE_NOT_SUPPORT_WTOKEN(collToken);\\n            }\\n\\n            if (pos.collateralSize > 0) revert Errors.DIFF_COL_EXIST(pos.collToken);\\n\\n            pos.collToken = collToken;\\n            pos.collId = collId;\\n        }\\n        uint256 amount = _doERC1155TransferIn(collToken, collId, amountCall);\\n        pos.collateralSize += amount;\\n        emit PutCollateral(_POSITION_ID, pos.owner, msg.sender, collToken, collId, amount);\\n    }\\n\\n    /// @inheritdoc IBank\\n    function takeCollateral(uint256 amount) external override inExec returns (uint256) {\\n        Position storage pos = _positions[_POSITION_ID];\\n\\n        if (amount == type(uint256).max) {\\n            amount = pos.collateralSize;\\n        }\\n\\n        pos.collateralSize -= amount;\\n        IERC1155Upgradeable(pos.collToken).safeTransferFrom(address(this), msg.sender, pos.collId, amount, \\\"\\\");\\n\\n        emit TakeCollateral(_POSITION_ID, msg.sender, pos.collToken, pos.collId, amount);\\n        return amount;\\n    }\\n\\n    /// @inheritdoc IBank\\n    function currentPositionDebt(\\n        uint256 positionId\\n    ) external override poke(_positions[positionId].debtToken) returns (uint256) {\\n        return getPositionDebt(positionId);\\n    }\\n\\n    /// @inheritdoc IBank\\n    function accrue(address token) public override {\\n        Bank storage bank = _banks[token];\\n        if (!bank.isListed) revert Errors.BANK_NOT_LISTED(token);\\n        IBErc20(bank.bToken).borrowBalanceCurrent(address(this));\\n    }\\n\\n    /// @inheritdoc IBank\\n    function accrueAll(address[] memory tokens) external {\\n        for (uint256 i = 0; i < tokens.length; ++i) {\\n            accrue(tokens[i]);\\n        }\\n    }\\n\\n    function whitelistSpells(address[] calldata spells, bool[] calldata statuses) external onlyOwner {\\n        if (spells.length != statuses.length) {\\n            revert Errors.INPUT_ARRAY_MISMATCH();\\n        }\\n        for (uint256 i = 0; i < spells.length; ++i) {\\n            if (spells[i] == address(0)) {\\n                revert Errors.ZERO_ADDRESS();\\n            }\\n            _whitelistedSpells[spells[i]] = statuses[i];\\n        }\\n    }\\n\\n    function whitelistTokens(address[] calldata tokens, bool[] calldata statuses) external onlyOwner {\\n        if (tokens.length != statuses.length) {\\n            revert Errors.INPUT_ARRAY_MISMATCH();\\n        }\\n        for (uint256 i = 0; i < tokens.length; ++i) {\\n            if (statuses[i] && !_oracle.isTokenSupported(tokens[i])) revert Errors.ORACLE_NOT_SUPPORT(tokens[i]);\\n            _whitelistedTokens[tokens[i]] = statuses[i];\\n            emit SetWhitelistToken(tokens[i], statuses[i]);\\n        }\\n    }\\n\\n    function whitelistERC1155(address[] memory tokens, bool ok) external onlyOwner {\\n        for (uint256 i = 0; i < tokens.length; ++i) {\\n            address token = tokens[i];\\n            if (token == address(0)) revert Errors.ZERO_ADDRESS();\\n            _whitelistedWrappedTokens[token] = ok;\\n            emit SetWhitelistERC1155(token, ok);\\n        }\\n    }\\n\\n    function addBank(\\n        address token,\\n        address softVault,\\n        address hardVault,\\n        uint256 liqThreshold\\n    ) external onlyOwner onlyWhitelistedToken(token) {\\n        if (softVault == address(0) || hardVault == address(0)) revert Errors.ZERO_ADDRESS();\\n        if (liqThreshold > Constants.DENOMINATOR) revert Errors.LIQ_THRESHOLD_TOO_HIGH(liqThreshold);\\n        if (liqThreshold < Constants.MIN_LIQ_THRESHOLD) revert Errors.LIQ_THRESHOLD_TOO_LOW(liqThreshold);\\n\\n        Bank storage bank = _banks[token];\\n        address bToken = address(ISoftVault(softVault).getBToken());\\n\\n        if (_bTokenInBank[bToken]) revert Errors.BTOKEN_ALREADY_ADDED();\\n        if (bank.isListed) revert Errors.BANK_ALREADY_LISTED();\\n\\n        uint256 _allBanksLength = _allBanks.length;\\n\\n        if (_allBanksLength >= 256) revert Errors.BANK_LIMIT();\\n\\n        _bTokenInBank[bToken] = true;\\n        bank.isListed = true;\\n        bank.index = uint8(_allBanksLength);\\n        bank.bToken = bToken;\\n        bank.softVault = softVault;\\n        bank.hardVault = hardVault;\\n        bank.liqThreshold = liqThreshold;\\n\\n        IHardVault(hardVault).setApprovalForAll(hardVault, true);\\n        _allBanks.push(token);\\n\\n        emit AddBank(token, bToken, softVault, hardVault);\\n    }\\n\\n    function modifyBank(\\n        uint8 bankIndex,\\n        address token,\\n        address softVault,\\n        address hardVault,\\n        uint256 liqThreshold\\n    ) external onlyOwner onlyWhitelistedToken(token) {\\n        if (softVault == address(0) || hardVault == address(0)) revert Errors.ZERO_ADDRESS();\\n        if (liqThreshold > Constants.DENOMINATOR) revert Errors.LIQ_THRESHOLD_TOO_HIGH(liqThreshold);\\n        if (liqThreshold < Constants.MIN_LIQ_THRESHOLD) revert Errors.LIQ_THRESHOLD_TOO_LOW(liqThreshold);\\n        if (bankIndex >= _allBanks.length) revert Errors.BANK_NOT_EXIST(bankIndex);\\n\\n        address bankToken = _allBanks[bankIndex];\\n        Bank storage bank = _banks[bankToken];\\n        address bToken = address(ISoftVault(softVault).getBToken());\\n\\n        bank.bToken = bToken;\\n        bank.softVault = softVault;\\n        bank.hardVault = hardVault;\\n        bank.liqThreshold = liqThreshold;\\n\\n        IHardVault(hardVault).setApprovalForAll(hardVault, true);\\n\\n        emit ModifyBank(token, bToken, softVault, hardVault);\\n    }\\n\\n    function setBankStatus(uint256 bankStatus) external onlyOwner {\\n        bool repayAllowedStatusBefore = isRepayAllowed();\\n        _bankStatus = bankStatus;\\n        bool repayAllowedStatusAfter = isRepayAllowed();\\n\\n        /// If the repayAllowed status changes from \\\"off\\\" to \\\"on\\\", update the timestamp.\\n        if (!repayAllowedStatusBefore && repayAllowedStatusAfter) {\\n            _repayResumedTimestamp = block.timestamp;\\n        }\\n    }\\n\\n    /// @inheritdoc IBank\\n    function isBorrowAllowed() public view override returns (bool) {\\n        return (_bankStatus & 0x01) > 0;\\n    }\\n\\n    /// @inheritdoc IBank\\n    function isRepayAllowed() public view override returns (bool) {\\n        return (_bankStatus & 0x02) > 0;\\n    }\\n\\n    /// @inheritdoc IBank\\n    function isLendAllowed() public view override returns (bool) {\\n        return (_bankStatus & 0x04) > 0;\\n    }\\n\\n    /// @inheritdoc IBank\\n    function isWithdrawLendAllowed() public view override returns (bool) {\\n        return (_bankStatus & 0x08) > 0;\\n    }\\n\\n    /// @inheritdoc IBank\\n    function getFeeManager() public view override returns (IFeeManager) {\\n        return _config.getFeeManager();\\n    }\\n\\n    /// @inheritdoc IBank\\n    function getBankStatus() external view returns (uint256) {\\n        return _bankStatus;\\n    }\\n\\n    /// @inheritdoc IBank\\n    function getRepayResumedTimestamp() external view returns (uint256) {\\n        return _repayResumedTimestamp;\\n    }\\n\\n    /// @inheritdoc IBank\\n    function isTokenWhitelisted(address token) external view returns (bool) {\\n        return _whitelistedTokens[token];\\n    }\\n\\n    /// @inheritdoc IBank\\n    function isWrappedTokenWhitelisted(address token) external view returns (bool) {\\n        return _whitelistedWrappedTokens[token];\\n    }\\n\\n    /// @inheritdoc IBank\\n    function isSpellWhitelisted(address spell) external view returns (bool) {\\n        return _whitelistedSpells[spell];\\n    }\\n\\n    /// @inheritdoc IBank\\n    function getNextPositionId() external view override returns (uint256) {\\n        return _nextPositionId;\\n    }\\n\\n    /// @inheritdoc IBank\\n    function getConfig() external view override returns (IProtocolConfig) {\\n        return _config;\\n    }\\n\\n    /// @inheritdoc IBank\\n    function getOracle() external view override returns (ICoreOracle) {\\n        return _oracle;\\n    }\\n\\n    /// @inheritdoc IBank\\n    function getAllBanks() external view override returns (address[] memory) {\\n        return _allBanks;\\n    }\\n\\n    /// @inheritdoc IBank\\n    function getPositionDebt(uint256 positionId) public view override returns (uint256 debt) {\\n        Position memory pos = _positions[positionId];\\n        Bank memory bank = _banks[pos.debtToken];\\n        if (pos.debtShare == 0 || bank.totalShare == 0) {\\n            return 0;\\n        }\\n        debt = (pos.debtShare * _borrowBalanceStored(pos.debtToken)).divCeil(bank.totalShare);\\n    }\\n\\n    /// @inheritdoc IBank\\n    function getBankInfo(address token) external view override returns (Bank memory bank) {\\n        bank = _banks[token];\\n    }\\n\\n    /// @inheritdoc IBank\\n    function getPositionInfo(uint256 positionId) external view override returns (Position memory) {\\n        return _positions[positionId];\\n    }\\n\\n    /// @inheritdoc IBank\\n    function getCurrentPositionInfo() external view override returns (Position memory) {\\n        if (_POSITION_ID == _NO_ID) revert Errors.BAD_POSITION(_POSITION_ID);\\n        return _positions[_POSITION_ID];\\n    }\\n\\n    /// @inheritdoc IBank\\n    function getPositionValue(uint256 positionId) public view override returns (uint256 positionValue) {\\n        Position memory pos = _positions[positionId];\\n        if (pos.collateralSize == 0) {\\n            return 0;\\n        } else {\\n            if (pos.collToken == address(0)) revert Errors.BAD_COLLATERAL(positionId);\\n            uint256 collValue = _oracle.getWrappedTokenValue(pos.collToken, pos.collId, pos.collateralSize);\\n\\n            uint256 rewardsValue;\\n            (address[] memory tokens, uint256[] memory rewards) = IERC20Wrapper(pos.collToken).pendingRewards(\\n                pos.collId,\\n                pos.collateralSize\\n            );\\n\\n            for (uint256 i; i < tokens.length; ++i) {\\n                if (_oracle.isTokenSupported(tokens[i])) {\\n                    rewardsValue += _oracle.getTokenValue(tokens[i], rewards[i]);\\n                }\\n            }\\n\\n            return collValue + rewardsValue;\\n        }\\n    }\\n\\n    /// @inheritdoc IBank\\n    function getDebtValue(uint256 positionId) public view override returns (uint256 debtValue) {\\n        Position memory pos = _positions[positionId];\\n        uint256 debt = getPositionDebt(positionId);\\n        debtValue = _oracle.getTokenValue(pos.debtToken, debt);\\n    }\\n\\n    /// @inheritdoc IBank\\n    function getIsolatedCollateralValue(uint256 positionId) public view override returns (uint256 icollValue) {\\n        Position memory pos = _positions[positionId];\\n        /// NOTE: exchangeRateStored has 18 decimals.\\n        uint256 underlyingAmount;\\n        if (_isSoftVault(pos.underlyingToken)) {\\n            underlyingAmount =\\n                (IBErc20(_banks[pos.underlyingToken].bToken).exchangeRateStored() * pos.underlyingVaultShare) /\\n                Constants.PRICE_PRECISION;\\n        } else {\\n            underlyingAmount = pos.underlyingVaultShare;\\n        }\\n        icollValue = _oracle.getTokenValue(pos.underlyingToken, underlyingAmount);\\n    }\\n\\n    /// @inheritdoc IBank\\n    function getPositionRisk(uint256 positionId) public view override returns (uint256 risk) {\\n        uint256 pv = getPositionValue(positionId);\\n        uint256 ov = getDebtValue(positionId);\\n        uint256 cv = getIsolatedCollateralValue(positionId);\\n\\n        if (\\n            (cv == 0 && pv == 0 && ov == 0) || pv >= ov /// Closed position or Overcollateralized position\\n        ) {\\n            risk = 0;\\n        } else if (cv == 0) {\\n            /// Sth bad happened to isolated underlying token\\n            risk = Constants.DENOMINATOR;\\n        } else {\\n            risk = ((ov - pv) * Constants.DENOMINATOR) / cv;\\n        }\\n    }\\n\\n    /// @inheritdoc IBank\\n    function isLiquidatable(uint256 positionId) public view override returns (bool) {\\n        return getPositionRisk(positionId) >= _banks[_positions[positionId].underlyingToken].liqThreshold;\\n    }\\n\\n    /**\\n     * @notice Internal function that handles the logic for repaying tokens.\\n     * @param positionId The position ID which determines the debt to be repaid.\\n     * @param token The bank token used to repay the debt.\\n     * @param amountCall The amount specified by the caller to repay by calling `transferFrom`, or -1 for debt size.\\n     * @return Returns the actual repaid amount and the reduced debt share.\\n     */\\n    function _repay(uint256 positionId, address token, uint256 amountCall) internal returns (uint256, uint256) {\\n        Bank storage bank = _banks[token];\\n        Position storage pos = _positions[positionId];\\n\\n        if (pos.debtToken != token) revert Errors.INCORRECT_DEBT(token);\\n\\n        uint256 totalShare = bank.totalShare;\\n        uint256 totalDebt = _borrowBalanceStored(token);\\n        uint256 oldShare = pos.debtShare;\\n        uint256 oldDebt = (oldShare * totalDebt).divCeil(totalShare);\\n\\n        if (amountCall > oldDebt) {\\n            amountCall = oldDebt;\\n        }\\n\\n        amountCall = _doERC20TransferIn(token, amountCall);\\n        uint256 paid = _doRepay(token, amountCall);\\n\\n        if (paid > oldDebt) revert Errors.REPAY_EXCEEDS_DEBT(paid, oldDebt); /// prevent share overflow attack\\n\\n        uint256 lessShare = paid == oldDebt ? oldShare : (paid * totalShare) / totalDebt;\\n        bank.totalShare -= lessShare;\\n        pos.debtShare -= lessShare;\\n\\n        return (paid, lessShare);\\n    }\\n\\n    /**\\n     * @dev Internal function to return the current borrow balance of the given token.\\n     * @param token The token address to query for borrow balance.\\n     */\\n    function _borrowBalanceStored(address token) internal view returns (uint256) {\\n        return IBErc20(_banks[token].bToken).borrowBalanceStored(address(this));\\n    }\\n\\n    /**\\n     * @notice Internal function that handles the borrowing logic.\\n     * @dev Borrows the specified amount of tokens and returns the actual borrowed amount.\\n     * NOTE: Caller must ensure that bToken interest was already accrued up to this block.\\n     * @param token The token to borrow.\\n     * @param amountCall The amount of tokens to be borrowed.\\n     * @return borrowAmount The actual amount borrowed.\\n     */\\n    function _doBorrow(address token, uint256 amountCall) internal returns (uint256 borrowAmount) {\\n        address bToken = _banks[token].bToken;\\n\\n        IERC20Upgradeable uToken = IERC20Upgradeable(token);\\n        uint256 uBalanceBefore = uToken.balanceOf(address(this));\\n        if (IBErc20(bToken).borrow(amountCall) != 0) revert Errors.BORROW_FAILED(amountCall);\\n        uint256 uBalanceAfter = uToken.balanceOf(address(this));\\n\\n        borrowAmount = uBalanceAfter - uBalanceBefore;\\n    }\\n\\n    /**\\n     * @dev Internal function to handle repayment to the bank. Returns the actual repaid amount.\\n     * @param token The token used for the repayment.\\n     * @param amountCall The specified amount for the repay action.\\n     * NOTE: The caller should ensure that the bToken's interest is updated up to the current block.\\n     */\\n    function _doRepay(address token, uint256 amountCall) internal returns (uint256 repaidAmount) {\\n        address bToken = _banks[token].bToken;\\n\\n        IERC20(token).universalApprove(bToken, amountCall);\\n        uint256 beforeDebt = _borrowBalanceStored(token);\\n\\n        if (IBErc20(bToken).repayBorrow(amountCall) != 0) {\\n            revert Errors.REPAY_FAILED(amountCall);\\n        }\\n\\n        uint256 newDebt = _borrowBalanceStored(token);\\n        repaidAmount = beforeDebt - newDebt;\\n    }\\n\\n    /**\\n     * @dev Internal function to handle the transfer of ERC20 tokens into the contract.\\n     * @param token The ERC20 token to perform transferFrom action.\\n     * @param amountCall The amount use in the transferFrom call.\\n     * @return The actual received amount.\\n     */\\n    function _doERC20TransferIn(address token, uint256 amountCall) internal returns (uint256) {\\n        uint256 balanceBefore = IERC20Upgradeable(token).balanceOf(address(this));\\n        IERC20Upgradeable(token).safeTransferFrom(msg.sender, address(this), amountCall);\\n        uint256 balanceAfter = IERC20Upgradeable(token).balanceOf(address(this));\\n\\n        return balanceAfter - balanceBefore;\\n    }\\n\\n    /**\\n     * @dev Internal function to handle the transfer of ERC1155 tokens into the contract.\\n     * @param token The ERC1155 token contract address.\\n     * @param id The specific token ID to be transferred within the ERC1155 contract.\\n     * @param amountCall The expected amount of the specific token ID to be transferred.\\n     * @return The amount of tokens received.\\n     */\\n    function _doERC1155TransferIn(address token, uint256 id, uint256 amountCall) internal returns (uint256) {\\n        uint256 balanceBefore = IERC1155Upgradeable(token).balanceOf(address(this), id);\\n        IERC1155Upgradeable(token).safeTransferFrom(msg.sender, address(this), id, amountCall, \\\"\\\");\\n        uint256 balanceAfter = IERC1155Upgradeable(token).balanceOf(address(this), id);\\n\\n        return balanceAfter - balanceBefore;\\n    }\\n\\n    /**\\n     * @dev Internal function to check if the given vault token is a soft vault or hard vault.\\n     * @param token The underlying token of the vault to be checked.\\n     * @return True if it's a Soft Vault, False if it's a Hard Vault.\\n     */\\n    function _isSoftVault(address token) internal view returns (bool) {\\n        return address(ISoftVault(_banks[token].softVault).getUnderlyingToken()) == token;\\n    }\\n\\n    /* solhint-disable func-name-mixedcase */\\n    /// @inheritdoc IBank\\n    function EXECUTOR() external view returns (address) {\\n        uint256 positionId = _POSITION_ID;\\n        if (positionId == _NO_ID) {\\n            revert Errors.NOT_UNDER_EXECUTION();\\n        }\\n        return _positions[positionId].owner;\\n    }\\n\\n    /// @inheritdoc IBank\\n    function POSITION_ID() external view returns (uint256) {\\n        return _POSITION_ID;\\n    }\\n\\n    /// @inheritdoc IBank\\n    function SPELL() external view returns (address) {\\n        return _SPELL;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     *      variables without shifting down storage in the inheritance chain.\\n     *      See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[30] private __gap;\\n    /* solhint-enable func-name-mixedcase */\\n}\\n\"\r\n    },\r\n    \"lib/blueberry-core/node_modules/@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../extensions/IERC20PermitUpgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20Upgradeable token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20Upgradeable token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20PermitUpgradeable token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20Upgradeable token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && AddressUpgradeable.isContract(address(token));\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/blueberry-core/node_modules/@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"lib/blueberry-core/node_modules/@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(\\n        address[] calldata accounts,\\n        uint256[] calldata ids\\n    ) external view returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes calldata data) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"lib/blueberry-core/node_modules/@openzeppelin/contracts-upgradeable/access/Ownable2StepUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable2Step.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./OwnableUpgradeable.sol\\\";\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership} and {acceptOwnership}.\\n *\\n * This module is used through inheritance. It will make available all functions\\n * from parent (Ownable).\\n */\\nabstract contract Ownable2StepUpgradeable is Initializable, OwnableUpgradeable {\\n    address private _pendingOwner;\\n\\n    event OwnershipTransferStarted(address indexed previousOwner, address indexed newOwner);\\n\\n    function __Ownable2Step_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable2Step_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev Returns the address of the pending owner.\\n     */\\n    function pendingOwner() public view virtual returns (address) {\\n        return _pendingOwner;\\n    }\\n\\n    /**\\n     * @dev Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one.\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual override onlyOwner {\\n        _pendingOwner = newOwner;\\n        emit OwnershipTransferStarted(owner(), newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`) and deletes any pending owner.\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual override {\\n        delete _pendingOwner;\\n        super._transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev The new owner accepts the ownership transfer.\\n     */\\n    function acceptOwnership() public virtual {\\n        address sender = _msgSender();\\n        require(pendingOwner() == sender, \\\"Ownable2Step: caller is not the new owner\\\");\\n        _transferOwnership(sender);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"lib/blueberry-core/contracts/libraries/BBMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n/*\\n\u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2557     \u2588\u2588\u2557   \u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2557   \u2588\u2588\u2557\\n\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2551     \u2588\u2588\u2551   \u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u255a\u2588\u2588\u2557 \u2588\u2588\u2554\u255d\\n\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2551     \u2588\u2588\u2551   \u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2588\u2557  \u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2588\u2588\u2588\u2557  \u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d \u255a\u2588\u2588\u2588\u2588\u2554\u255d\\n\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2551     \u2588\u2588\u2551   \u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u255d  \u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u255d  \u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557  \u255a\u2588\u2588\u2554\u255d\\n\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u255a\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2551  \u2588\u2588\u2551\u2588\u2588\u2551  \u2588\u2588\u2551   \u2588\u2588\u2551\\n\u255a\u2550\u2550\u2550\u2550\u2550\u255d \u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d \u255a\u2550\u2550\u2550\u2550\u2550\u255d \u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d\u255a\u2550\u2550\u2550\u2550\u2550\u255d \u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d\u255a\u2550\u255d  \u255a\u2550\u255d\u255a\u2550\u255d  \u255a\u2550\u255d   \u255a\u2550\u255d\\n*/\\n\\npragma solidity 0.8.22;\\n/**\\n * @title BBMath\\n * @author BlueberryProtocol\\n * @dev The BBMath library provides functions for calculating common mathematical operations.\\n    */\\nlibrary BBMath {\\n    /// @notice Rounds up the result of division between two numbers.\\n    /// @param a Numerator.\\n    /// @param b Denominator.\\n    /// @return The result of the division, rounded up.\\n    function divCeil(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return (a + b - 1) / b;\\n    }\\n\\n    /// @notice Calculates the square root of a number using the Babylonian method.\\n    /// @dev This function uses bit manipulation to efficiently estimate square roots.\\n    ///      The function iteratively refines the approximation, and after seven iterations,\\n    ///      the result is very close to the actual square root.\\n    /// @param x The number to compute the square root of.\\n    /// @return The estimated square root of x.\\n    function sqrt(uint256 x) internal pure returns (uint256) {\\n        if (x == 0) return 0;\\n        uint256 xx = x;\\n        uint256 r = 1;\\n\\n        /// Bitwise operations to determine the magnitude of the input\\n        /// and position our initial approximation (r) near the actual square root.\\n        if (xx >= 0x100000000000000000000000000000000) {\\n            xx >>= 128;\\n            r <<= 64;\\n        }\\n\\n        if (xx >= 0x10000000000000000) {\\n            xx >>= 64;\\n            r <<= 32;\\n        }\\n        if (xx >= 0x100000000) {\\n            xx >>= 32;\\n            r <<= 16;\\n        }\\n        if (xx >= 0x10000) {\\n            xx >>= 16;\\n            r <<= 8;\\n        }\\n        if (xx >= 0x100) {\\n            xx >>= 8;\\n            r <<= 4;\\n        }\\n        if (xx >= 0x10) {\\n            xx >>= 4;\\n            r <<= 2;\\n        }\\n        if (xx >= 0x8) {\\n            r <<= 1;\\n        }\\n\\n        /// Refinement using Babylonian method\\n        /// This iterative approach refines our approximation with every iteration.\\n        r = (r + x / r) >> 1;\\n        r = (r + x / r) >> 1;\\n        r = (r + x / r) >> 1;\\n        r = (r + x / r) >> 1;\\n        r = (r + x / r) >> 1;\\n        r = (r + x / r) >> 1;\\n        r = (r + x / r) >> 1; /// Seven iterations should be enough\\n\\n        /// Determine the closest approximation by comparing r and r1.\\n        uint256 r1 = x / r;\\n        return (r < r1 ? r : r1);\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/blueberry-core/contracts/libraries/UniversalERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n/*\\n\u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2557     \u2588\u2588\u2557   \u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2557   \u2588\u2588\u2557\\n\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2551     \u2588\u2588\u2551   \u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u255a\u2588\u2588\u2557 \u2588\u2588\u2554\u255d\\n\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2551     \u2588\u2588\u2551   \u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2588\u2557  \u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2588\u2588\u2588\u2557  \u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d \u255a\u2588\u2588\u2588\u2588\u2554\u255d\\n\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2551     \u2588\u2588\u2551   \u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u255d  \u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u255d  \u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557  \u255a\u2588\u2588\u2554\u255d\\n\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u255a\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2551  \u2588\u2588\u2551\u2588\u2588\u2551  \u2588\u2588\u2551   \u2588\u2588\u2551\\n\u255a\u2550\u2550\u2550\u2550\u2550\u255d \u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d \u255a\u2550\u2550\u2550\u2550\u2550\u255d \u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d\u255a\u2550\u2550\u2550\u2550\u2550\u255d \u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d\u255a\u2550\u255d  \u255a\u2550\u255d\u255a\u2550\u255d  \u255a\u2550\u255d   \u255a\u2550\u255d\\n*/\\n\\npragma solidity 0.8.22;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\n/**\\n * @title UniversalERC20\\n * @dev UniversalERC20 is a helper contract that allows to work around ERC20\\n *      limitations when dealing with missing return values.\\n *      UniversalERC20 executes a low level call to the token contract.\\n *      If it fails, it assumes that the token does not implement the method.\\n *      If it succeeds, it returns the value returned by the method.\\n *      Also supports if the token address is native ETH.\\n */\\nlibrary UniversalERC20 {\\n    using SafeERC20 for IERC20;\\n\\n    address private constant _ZERO_ADDRESS = address(0);\\n    address private constant _ETH_ADDRESS = address(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE);\\n\\n    /// @notice UniversalERC20's safeTransfer function that is similar to ERC20's transfer function.\\n    /// @dev Works around non-standard ERC20's that throw on 0 transfer and supports Native ETH.\\n    function universalTransfer(IERC20 token, address to, uint256 amount) internal returns (bool) {\\n        if (amount == 0) {\\n            return true;\\n        }\\n        if (isETH(token)) {\\n            (bool success, ) = to.call{ value: amount }(\\\"\\\");\\n            require(success, \\\"ETH transfer failed\\\");\\n            return true;\\n        } else {\\n            token.safeTransfer(to, amount);\\n            return true;\\n        }\\n    }\\n\\n    /// @notice UniversalERC20's safeTransferFrom function that is similar to ERC20's transferFrom function.\\n    /// @dev Works around non-standard ERC20's that throw on 0 transfer and supports native ETH.\\n    function universalTransferFrom(IERC20 token, address from, address to, uint256 amount) internal {\\n        if (amount == 0) {\\n            return;\\n        }\\n\\n        if (isETH(token)) {\\n            require(from == msg.sender && msg.value == amount, \\\"Wrong useage of ETH.universalTransferFrom()\\\");\\n            if (to != address(this)) {\\n                (bool success, ) = to.call{ value: amount }(\\\"\\\");\\n                require(success, \\\"ETH transfer failed\\\");\\n            }\\n        } else {\\n            token.safeTransferFrom(from, to, amount);\\n        }\\n    }\\n\\n    function universalApprove(IERC20 token, address to, uint256 amount) internal {\\n        if (!isETH(token)) {\\n            token.forceApprove(to, amount);\\n        }\\n    }\\n\\n    /// @notice UniversalBalanceOf returns the balance of a token for an address.\\n    /// @dev Is able to tell the balance of a token or natie ETH.\\n    function universalBalanceOf(IERC20 token, address who) internal view returns (uint256) {\\n        if (isETH(token)) {\\n            return who.balance;\\n        } else {\\n            return token.balanceOf(who);\\n        }\\n    }\\n\\n    /// @notice returns if the token is ETH or not.\\n    function isETH(IERC20 token) internal pure returns (bool) {\\n        return (address(token) == address(_ZERO_ADDRESS) || address(token) == address(_ETH_ADDRESS));\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/blueberry-core/contracts/utils/ERC1155NaiveReceiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n/*\\n\u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2557     \u2588\u2588\u2557   \u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2557   \u2588\u2588\u2557\\n\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2551     \u2588\u2588\u2551   \u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u255a\u2588\u2588\u2557 \u2588\u2588\u2554\u255d\\n\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2551     \u2588\u2588\u2551   \u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2588\u2557  \u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2588\u2588\u2588\u2557  \u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d \u255a\u2588\u2588\u2588\u2588\u2554\u255d\\n\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2551     \u2588\u2588\u2551   \u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u255d  \u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u255d  \u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557  \u255a\u2588\u2588\u2554\u255d\\n\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u255a\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2551  \u2588\u2588\u2551\u2588\u2588\u2551  \u2588\u2588\u2551   \u2588\u2588\u2551\\n\u255a\u2550\u2550\u2550\u2550\u2550\u255d \u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d \u255a\u2550\u2550\u2550\u2550\u2550\u255d \u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d\u255a\u2550\u2550\u2550\u2550\u2550\u255d \u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d\u255a\u2550\u255d  \u255a\u2550\u255d\u255a\u2550\u255d  \u255a\u2550\u255d   \u255a\u2550\u255d\\n*/\\n\\npragma solidity 0.8.22;\\n\\nimport { IERC1155Receiver } from \\\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\\\";\\n\\n/**\\n * @title ERC1155NaiveReceiver\\n * @author BlueberryProtocol\\n * @notice A receiver contract that naively accepts all ERC1155 transfers.\\n */\\ncontract ERC1155NaiveReceiver is IERC1155Receiver {\\n    /// @notice Handle the receipt of a single ERC1155 token type.\\n    /// @dev This function is called at the end of a\\n    /// `safeTransferFrom` after the balance has been updated.\\n    function onERC1155Received(\\n        address /* operator */,\\n        address /* from */,\\n        uint256 /* id */,\\n        uint256 /* value */,\\n        bytes calldata /* data */\\n    ) external pure override returns (bytes4) {\\n        return this.onERC1155Received.selector;\\n    }\\n\\n    /// @notice Handle the receipt of multiple ERC1155 token types.\\n    /// @dev This function is called at the end of a\\n    /// `safeBatchTransferFrom` after the balances have been updated.\\n    function onERC1155BatchReceived(\\n        address /* operator */,\\n        address /* from */,\\n        uint256[] calldata /* ids */,\\n        uint256[] calldata /* values */,\\n        bytes calldata /* data */\\n    ) external pure override returns (bytes4) {\\n        return this.onERC1155BatchReceived.selector;\\n    }\\n\\n    /// @notice Checks if the contract supports a given interface.\\n    /// @dev Returns true if the interfaceId is 0x01ffc9a7 (IERC1155Receiver).\\n    function supportsInterface(bytes4 interfaceId) external view virtual override returns (bool) {\\n        return interfaceId == type(IERC1155Receiver).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/blueberry-core/contracts/utils/BlueberryConst.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n/*\\n\u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2557     \u2588\u2588\u2557   \u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2557   \u2588\u2588\u2557\\n\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2551     \u2588\u2588\u2551   \u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u255a\u2588\u2588\u2557 \u2588\u2588\u2554\u255d\\n\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2551     \u2588\u2588\u2551   \u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2588\u2557  \u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2588\u2588\u2588\u2557  \u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d \u255a\u2588\u2588\u2588\u2588\u2554\u255d\\n\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2551     \u2588\u2588\u2551   \u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u255d  \u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u255d  \u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557  \u255a\u2588\u2588\u2554\u255d\\n\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u255a\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2551  \u2588\u2588\u2551\u2588\u2588\u2551  \u2588\u2588\u2551   \u2588\u2588\u2551\\n\u255a\u2550\u2550\u2550\u2550\u2550\u255d \u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d \u255a\u2550\u2550\u2550\u2550\u2550\u255d \u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d\u255a\u2550\u2550\u2550\u2550\u2550\u255d \u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d\u255a\u2550\u255d  \u255a\u2550\u255d\u255a\u2550\u255d  \u255a\u2550\u255d   \u255a\u2550\u255d\\n*/\\n\\n/**\\n * @title BlueberryErrors\\n * @author BlueberryProtocol\\n * @notice This contract contains the error messages for Blueberry Protocol.\\n */\\npragma solidity 0.8.22;\\n\\n/// @dev Common denominator for percentage-based calculations.\\nuint256 constant DENOMINATOR = 10000;\\n\\n/// @dev Minimum threshold for liquidity operations, represented as a fraction of the DENOMINATOR.\\nuint256 constant MIN_LIQ_THRESHOLD = 8000; // represent 80%\\n\\n/// @dev Precision factor to maintain price accuracy.\\nuint256 constant PRICE_PRECISION = 1e18;\\n\\n/// @dev Maximum allowed price deviation, represented as a fraction of the DENOMINATOR.\\nuint256 constant MAX_PRICE_DEVIATION = 1000; // represent 10%\\n\\n/// @dev Minimum time interval for specific time-dependent operations.\\nuint32 constant MIN_TIME_GAP = 1 hours;\\n\\n/// @dev Maximum time interval for specific time-dependent operations.\\nuint32 constant MAX_TIME_GAP = 2 days;\\n\\n/// @dev Maximum allowed fee rate, represented as a fraction of the DENOMINATOR.\\nuint256 constant MAX_FEE_RATE = 2000; // represent 20%\\n\\n/// @dev Maximum allowed time for vault withdrawal fee calculations.\\nuint256 constant MAX_WITHDRAW_VAULT_FEE_WINDOW = 60 days;\\n\\n/// @dev Maximum delay permitted for swap operations.\\nuint32 constant MAX_DELAY_ON_SWAP = 2 hours;\\n\\n/// @dev Allowed grace period time for sequencer operations.\\nuint32 constant SEQUENCER_GRACE_PERIOD_TIME = 3600;\\n\\n/// @dev Precision factor for Chainlink price feed values.\\nuint256 constant CHAINLINK_PRICE_FEED_PRECISION = 1e8;\\n\\n/// @dev Warm-up period before a liquidation repayment can be initiated.\\nuint256 constant LIQUIDATION_REPAY_WARM_UP_PERIOD = 4 hours;\\n\"\r\n    },\r\n    \"lib/blueberry-core/contracts/utils/BlueberryErrors.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n/*\\n\u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2557     \u2588\u2588\u2557   \u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2557   \u2588\u2588\u2557\\n\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2551     \u2588\u2588\u2551   \u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u255a\u2588\u2588\u2557 \u2588\u2588\u2554\u255d\\n\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2551     \u2588\u2588\u2551   \u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2588\u2557  \u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2588\u2588\u2588\u2557  \u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d \u255a\u2588\u2588\u2588\u2588\u2554\u255d\\n\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2551     \u2588\u2588\u2551   \u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u255d  \u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u255d  \u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557  \u255a\u2588\u2588\u2554\u255d\\n\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u255a\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2551  \u2588\u2588\u2551\u2588\u2588\u2551  \u2588\u2588\u2551   \u2588\u2588\u2551\\n\u255a\u2550\u2550\u2550\u2550\u2550\u255d \u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d \u255a\u2550\u2550\u2550\u2550\u2550\u255d \u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d\u255a\u2550\u2550\u2550\u2550\u2550\u255d \u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d\u255a\u2550\u255d  \u255a\u2550\u255d\u255a\u2550\u255d  \u255a\u2550\u255d   \u255a\u2550\u255d\\n*/\\n/**\\n * @title BlueberryErrors\\n * @author BlueberryProtocol\\n * @notice containing all errors used in Blueberry protocol\\n */\\n/// title BlueberryErrors\\n/// @notice containing all errors used in Blueberry protocol\\npragma solidity 0.8.22;\\n\\n/*//////////////////////////////////////////////////////////////////////////\\n                                COMMON ERRORS\\n//////////////////////////////////////////////////////////////////////////*/\\n\\n/// @notice Thrown when an action involves zero amount of tokens.\\nerror ZERO_AMOUNT();\\n\\n/// @notice Thrown when the address provided is the zero address.\\nerror ZERO_ADDRESS();\\n\\n/// @notice Thrown when the lengths of input arrays do not match.\\nerror INPUT_ARRAY_MISMATCH();\\n\\n/// @notice Thrown when the caller is not authorized to call the function.\\nerror UNAUTHORIZED();\\n\\n/*//////////////////////////////////////////////////////////////////////////\\n                                ORACLE ERRORS\\n//////////////////////////////////////////////////////////////////////////*/\\n\\n/// @notice Thrown when the delay time exceeds allowed limits.\\nerror TOO_LONG_DELAY(uint256 delayTime);\\n\\n/// @notice Thrown when there's no maximum delay set for a token.\\nerror NO_MAX_DELAY(address token);\\n\\n/// @notice Thrown when the price information for a token is outdated.\\nerror PRICE_OUTDATED(address token);\\n\\n/// @notice Thrown when the price obtained is negative.\\nerror PRICE_NEGATIVE(address token);\\n\\n/// @notice Thrown when the sequencer is offline\\nerror SEQUENCER_DOWN(address sequencer);\\n\\n/// @notice Thrown when the grace period for a sequencer is not over yet.\\nerror SEQUENCER_GRACE_PERIOD_NOT_OVER(address sequencer);\\n\\n/// @notice Thrown when the price deviation exceeds allowed limits.\\nerror OUT_OF_DEVIATION_CAP(uint256 deviation);\\n\\n/// @notice Thrown when the number of sources exceeds the allowed length.\\nerror EXCEED_SOURCE_LEN(uint256 length);\\n\\n/// @notice Thrown when no primary source is available for the token.\\nerror NO_PRIMARY_SOURCE(address token);\\n\\n/// @notice Thrown when no valid price source is available for the token.\\nerror NO_VALID_SOURCE(address token);\\n\\n/// @notice Thrown when the deviation value exceeds the threshold.\\nerror EXCEED_DEVIATION();\\n\\n/// @notice Thrown when the mean price is below the acceptable threshold.\\nerror TOO_LOW_MEAN(uint256 mean);\\n\\n/// @notice Thrown when no mean price is set for the token.\\nerror NO_MEAN(address token);\\n\\n/// @notice Thrown when no stable pool exists for the token.\\nerror NO_STABLEPOOL(address token);\\n\\n/// @notice Thrown when the price fetch process fails for a token.\\nerror PRICE_FAILED(address token);\\n\\n/// @notice Thrown when the liquidation threshold is set too high.\\nerror LIQ_THRESHOLD_TOO_HIGH(uint256 threshold);\\n\\n/// @notice Thrown when the liquidation threshold is set too low.\\nerror LIQ_THRESHOLD_TOO_LOW(uint256 threshold);\\n\\n/// @notice Thrown when the oracle doesn't support a specific token.\\nerror ORACLE_NOT_SUPPORT(address token);\\n\\n/// @notice Thrown when the oracle doesn't support a specific LP pair token.\\nerror ORACLE_NOT_SUPPORT_LP(address lp);\\n\\n/// @notice Thrown when the oracle doesn't support a specific wToken.\\nerror ORACLE_NOT_SUPPORT_WTOKEN(address wToken);\\n\\n/// @notice Thrown when there is no route to fetch data for the oracle\\nerror NO_ORACLE_ROUTE(address token);\\n\\n/// @notice Thrown when a value is out of an acceptable range.\\nerror VALUE_OUT_OF_RANGE();\\n\\n/// @notice Thrown when specified limits are incorrect.\\nerror INCORRECT_LIMITS();\\n\\n/// @notice Thrown when Curve LP is already registered.\\nerror CRV_LP_ALREADY_REGISTERED(address lp);\\n\\n/// @notice Thrown when a pool is subject to read-only reentrancy manipulation.\\nerror REENTRANCY_RISK(address pool);\\n\\n/*//////////////////////////////////////////////////////////////////////////\\n                            GENERAL SPELL ERRORS\\n//////////////////////////////////////////////////////////////////////////*/\\n\\n/// @notice Thrown when the caller isn't recognized as a bank.\\nerror NOT_BANK(address caller);\\n\\n/// @notice Thrown when the collateral doesn't exist for a strategy.\\nerror COLLATERAL_NOT_EXIST(uint256 strategyId, address colToken);\\n\\n/// @notice Thrown when the strategy ID doesn't correspond to an existing strategy.\\nerror STRATEGY_NOT_EXIST(address spell, uint256 strategyId);\\n\\n/// @notice Thrown when the position size exceeds maximum limits.\\nerror EXCEED_MAX_POS_SIZE(uint256 strategyId);\\n\\n/// @notice Thrown when the position size is below minimum requirements.\\nerror EXCEED_MIN_POS_SIZE(uint256 strategyId);\\n\\n/// @notice Thrown when the loan-to-value ratio exceeds allowed maximum.\\nerror EXCEED_MAX_LTV();\\n\\n/// @notice Thrown when the strategy ID provided is incorrect.\\nerror INCORRECT_STRATEGY_ID(uint256 strategyId);\\n\\n/// @notice Thrown when the position size is invalid.\\nerror INVALID_POS_SIZE();\\n\\n/// @notice Thrown when an incorrect liquidity pool token is provided.\\nerror INCORRECT_LP(address lpToken);\\n\\n/// @notice Thrown when an incorrect pool ID is provided.\\nerror INCORRECT_PID(uint256 pid);\\n\\n/// @notice Thrown when an incorrect collateral token is provided.\\nerror INCORRECT_COLTOKEN(address colToken);\\n\\n/// @notice Thrown when an incorrect underlying token is provided.\\nerror INCORRECT_UNDERLYING(address uToken);\\n\\n/// @notice Thrown when an incorrect debt token is provided.\\nerror INCORRECT_DEBT(address debtToken);\\n\\n/// @notice Thrown when a swap fails.\\nerror SWAP_FAILED(address swapToken);\\n\\n/*//////////////////////////////////////////////////////////////////////////\\n                                VAULT ERRORS\\n//////////////////////////////////////////////////////////////////////////*/\\n\\n/// @notice Thrown when borrowing from the vault fails.\\nerror BORROW_FAILED(uint256 amount);\\n\\n/// @notice Thrown when repaying to the vault fails.\\nerror REPAY_FAILED(uint256 amount);\\n\\n/// @notice Thrown when lending to the vault fails.\\nerror LEND_FAILED(uint256 amount);\\n\\n/// @notice Thrown when redeeming from the vault fails.\\nerror REDEEM_FAILED(uint256 amount);\\n\\n/*//////////////////////////////////////////////////////////////////////////\\n                                WRAPPER ERRORS\\n//////////////////////////////////////////////////////////////////////////*/\\n\\n/// @notice Thrown when a duplicate tokenId is added.\\nerror DUPLICATE_TOKEN_ID(uint256 tokenId);\\n\\n/// @notice Thrown when an invalid token ID is provided.\\nerror INVALID_TOKEN_ID(uint256 tokenId);\\n\\n/// @notice Thrown when an incorrect pool ID is provided.\\nerror BAD_PID(uint256 pid);\\n\\n/// @notice Thrown when a mismatch in reward per share is detected.\\nerror BAD_REWARD_PER_SHARE(uint256 rewardPerShare);\\n\\n/*//////////////////////////////////////////////////////////////////////////\\n                                BANK ERRORS\\n//////////////////////////////////////////////////////////////////////////*/\\n\\n/// @notice Thrown when a function is called without a required execution flag.\\nerror NOT_UNDER_EXECUTION();\\n\\n/// @notice Thrown when a transaction isn't initiated by the expected spell.\\nerror NOT_FROM_SPELL(address from);\\n\\n/// @notice Thrown when the sender is not the owner of a given position ID.\\nerror NOT_FROM_OWNER(uint256 positionId, address sender);\\n\\n/// @notice Thrown when a spell address isn't whitelisted.\\nerror SPELL_NOT_WHITELISTED(address spell);\\n\\n/// @notice Thrown when a token isn't whitelisted.\\nerror TOKEN_NOT_WHITELISTED(address token);\\n\\n/// @notice Thrown when a bank isn't listed for a given token.\\nerror BANK_NOT_LISTED(address token);\\n\\n/// @notice Thrown when a bank doesn't exist for an index.\\nerror BANK_NOT_EXIST(uint8 index);\\n\\n/// @notice Thrown when a bank is already listed for a given token.\\nerror BANK_ALREADY_LISTED();\\n\\n/// @notice Thrown when the bank limit is reached.\\nerror BANK_LIMIT();\\n\\n/// @notice Thrown when the BTOKEN is already added.\\nerror BTOKEN_ALREADY_ADDED();\\n\\n/// @notice Thrown when the lending action isn't allowed.\\nerror LEND_NOT_ALLOWED();\\n\\n/// @notice Thrown when the borrowing action isn't allowed.\\nerror BORROW_NOT_ALLOWED();\\n\\n/// @notice Thrown when the repaying action isn't allowed.\\nerror REPAY_NOT_ALLOWED();\\n\\n/// @notice Thrown when the redeeming action isn't allowed.\\nerror WITHDRAW_LEND_NOT_ALLOWED();\\n\\n/// @notice Thrown when certain actions are locked.\\nerror LOCKED();\\n\\n/// @notice Thrown when an action isn't executed.\\nerror NOT_IN_EXEC();\\n\\n/// @notice Thrown when the repayment allowance hasn't been warmed up.\\nerror REPAY_ALLOW_NOT_WARMED_UP();\\n\\n/// @notice Thrown when a different collateral type exists.\\nerror DIFF_COL_EXIST(address collToken);\\n\\n/// @notice Thrown when a position is not eligible for liquidation.\\nerror NOT_LIQUIDATABLE(uint256 positionId);\\n\\n/// @notice Thrown when a position is flagged as bad or invalid.\\nerror BAD_POSITION(uint256 posId);\\n\\n/// @notice Thrown when collateral for a specific position is flagged as bad or invalid.\\nerror BAD_COLLATERAL(uint256 positionId);\\n\\n/// @notice Thrown when there's insufficient collateral for an operation.\\nerror INSUFFICIENT_COLLATERAL();\\n\\n/// @notice Thrown when an attempted repayment exceeds the actual debt.\\nerror REPAY_EXCEEDS_DEBT(uint256 repay, uint256 debt);\\n\\n/// @notice Thrown when an invalid utility token is provided.\\nerror INVALID_UTOKEN(address uToken);\\n\\n/// @notice Thrown when a borrow operation results in zero shares.\\nerror BORROW_ZERO_SHARE(uint256 borrowAmount);\\n\\n/*//////////////////////////////////////////////////////////////////////////\\n                            CONFIGURATION ERRORS\\n//////////////////////////////////////////////////////////////////////////*/\\n\\n/// @notice Thrown when a certain ratio is too high for an operation.\\nerror RATIO_TOO_HIGH(uint256 ratio);\\n\\n/// @notice Thrown when an invalid fee distribution is detected.\\nerror INVALID_FEE_DISTRIBUTION();\\n\\n/// @notice Thrown when no treasury is set for fee distribution.\\nerror NO_TREASURY_SET();\\n\\n/// @notice Thrown when a fee window has already started.\\nerror FEE_WINDOW_ALREADY_STARTED();\\n\\n/// @notice Thrown when a fee window duration is too long.\\nerror FEE_WINDOW_TOO_LONG(uint256 windowTime);\\n\\n/*//////////////////////////////////////////////////////////////////////////\\n                                UTILITY ERRORS\\n//////////////////////////////////////////////////////////////////////////*/\\n\\n/// @notice Thrown when an operation has surpassed its deadline.\\nerror EXPIRED(uint256 deadline);\\n\"\r\n    },\r\n    \"lib/blueberry-core/contracts/interfaces/IBank.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.22;\\n\\nimport { IProtocolConfig } from \\\"./IProtocolConfig.sol\\\";\\nimport { IFeeManager } from \\\"./IFeeManager.sol\\\";\\nimport { ICoreOracle } from \\\"./ICoreOracle.sol\\\";\\n\\n/**\\n * @title IBank\\n * @notice Interface for the bank operations, including lending, borrowing, and management of collateral positions.\\n */\\ninterface IBank {\\n    /*//////////////////////////////////////////////////////////////////////////\\n                                       STRUCTS\\n    //////////////////////////////////////////////////////////////////////////*/\\n\\n    /// @notice Represents the configuration and current state of a bank.\\n    struct Bank {\\n        bool isListed; /// @dev Indicates if this bank is active.\\n        uint8 index; /// @dev Index for reverse lookups.\\n        address hardVault; /// @dev Address of the hard vault.\\n        address softVault; /// @dev Address of the soft vault.\\n        address bToken; /// @dev Address of the bToken associated with the bank.\\n        uint256 totalShare; /// @dev Total shares of debt across all open positions.\\n        uint256 liqThreshold; /// @dev Liquidation threshold (e.g., 85% for volatile tokens,\\n        /// 90% for stablecoins). Base: 1e4\\n    }\\n\\n    /// @notice Represents a position in the bank, including both debt and collateral.\\n    struct Position {\\n        address owner; /// @dev Address of the position's owner.\\n        address collToken; /// @dev Address of the ERC1155 token used as collateral.\\n        address underlyingToken; /// @dev Address of the isolated underlying collateral token.\\n        address debtToken; /// @dev Address of the debt token.\\n        uint256 underlyingVaultShare; /// @dev Amount of vault share for isolated underlying collateral.\\n        uint256 collId; /// @dev Token ID of the ERC1155 collateral.\\n        uint256 collateralSize; /// @dev Amount of wrapped token used as collateral.\\n        uint256 debtShare; /// @dev Debt share of the given debt token for the bank.\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////////////////\\n                                       EVENTS\\n    //////////////////////////////////////////////////////////////////////////*/\\n\\n    /// @notice Emitted when a new bank is added by the owner.\\n    event AddBank(\\n        address token, /// @dev The primary token associated with the bank.\\n        address bToken, /// @dev The corresponding bToken for the bank.\\n        address softVault, /// @dev Address of the soft vault.\\n        address hardVault /// @dev Address of the hard vault.\\n    );\\n\\n    /// @notice Emitted when a bank is modified by the owner.\\n    event ModifyBank(\\n        address token, /// @dev The primary token associated with the bank.\\n        address bToken, /// @dev The corresponding bToken for the bank.\\n        address softVault, /// @dev Address of the soft vault.\\n        address hardVault /// @dev Address of the hard vault.\\n    );\\n\\n    /// @notice Emitted when the oracle's address is updated by the owner.\\n    event SetOracle(address oracle); /// New address of the oracle.\\n\\n    /// @notice Emitted when a Wrapped ERC1155 token is whitelisted or removed by the owner.\\n    event SetWhitelistERC1155(\\n        address indexed token, /// Address of the Wrapped ERC1155 token.\\n        bool isWhitelisted /// True if whitelisted, false otherwise.\\n    );\\n\\n    /// @notice Emitted when a token is whitelisted or removed by the owner.\\n    event SetWhitelistToken(\\n        address indexed token, /// Address of the token.\\n        bool isWhitelisted /// True if whitelisted, false otherwise.\\n    );\\n\\n    /// @notice Emitted when tokens are lent to the bank.\\n    event Lend(\\n        uint256 positionId, /// Position ID associated with the lending.\\n        address caller, /// Address of the spell caller.\\n        address token, /// Address of the lent token.\\n        uint256 amount /// Amount of tokens lent.\\n    );\\n\\n    /// @notice Emitted when lent tokens are withdrawn from the bank.\\n    event WithdrawLend(\\n        uint256 positionId, /// Position ID associated with the withdrawal.\\n        address caller, /// Address of the spell caller.\\n        address token, ///Address of the token being withdrawn.\\n        uint256 amount /// Amount of tokens withdrawn.\\n    );\\n\\n    /// @notice Emitted when a user borrows tokens from a bank.\\n    event Borrow(\\n        uint256 positionId, /// Position ID associated with the borrowing.\\n        address caller, /// Address of the spell caller that initiates the borrowing.\\n        address token, /// Token being borrowed.\\n        uint256 amount, /// Amount of tokens borrowed.\\n        uint256 share /// Debt share associated with the borrowed amount.\\n    );\\n\\n    /// @notice Emitted when a user repays borrowed tokens to a bank.\\n    event Repay(\\n        uint256 positionId, /// Position ID associated with the repayment.\\n        address caller, /// Address of the spell caller initiating the repayment.\\n        address token, /// Token being repaid.\\n        uint256 amount, /// Amount of tokens repaid.\\n        uint256 share /// Debt share associated with the repaid amount.\\n    );\\n\\n    /// @notice Emitted when a user adds tokens as collateral.\\n    event PutCollateral(\\n        uint256 positionId, /// Position ID associated with the collateral.\\n        address owner, /// Owner of the collateral position.\\n        address caller, /// Address of the spell caller adding the collateral.\\n        address token, /// Token used as collateral.\\n        uint256 id, /// ID of the wrapped token.\\n        uint256 amount /// Amount of tokens put as collateral.\\n    );\\n\\n    /// @notice Emitted when a user retrieves tokens from their collateral.\\n    event TakeCollateral(\\n        uint256 positionId, /// Position ID associated with the collateral.\\n        address caller, /// Address of the spell caller retrieving the collateral.\\n        address token, /// Token taken from the collateral.\\n        uint256 id, /// ID of the wrapped token.\\n        uint256 amount /// Amount of tokens taken from collateral.\\n    );\\n\\n    /// @notice Emitted when a position is liquidated.\\n    event Liquidate(\\n        uint256 positionId, /// Position ID being liquidated.\\n        address liquidator, /// Address of the user performing the liquidation.\\n        address debtToken, /// Debt token associated with the position.\\n        uint256 amount, /// Amount used for liquidation.\\n        uint256 share, /// Debt share associated with the liquidation.\\n        uint256 positionSize, /// Size of the position being liquidated.\\n        uint256 underlyingVaultSize /// Vault size underlying the liquidated position.\\n    );\\n\\n    /// @notice Emitted when a position is executed.\\n    event Execute(\\n        uint256 positionId, /// Position ID being executed.\\n        address owner /// Owner of the position.\\n    );\\n\\n    /*//////////////////////////////////////////////////////////////////////////\\n                                      FUNCTIONS\\n    //////////////////////////////////////////////////////////////////////////*/\\n\\n    /**\\n     * @dev Returns the next available position ID.\\n     * @return Next position ID.\\n     */\\n    function getNextPositionId() external view returns (uint256);\\n\\n    /// @notice Provides the protocol configuration settings.\\n    function getConfig() external view returns (IProtocolConfig);\\n\\n    /// @notice Provides the current oracle responsible for price feeds.\\n    function getOracle() external view returns (ICoreOracle);\\n\\n    /// @notice Provides all banks in the Blueberry Bank.\\n    function getAllBanks() external view returns (address[] memory);\\n\\n    /**\\n     * @dev Get the current FeeManager interface from the configuration.\\n     * @return An interface representing the current FeeManager.\\n     */\\n    function getFeeManager() external view returns (IFeeManager);\\n\\n    /**\\n     * @notice Returns whitelist status of a given token.\\n     * @param token Address of the token.\\n     */\\n    function isTokenWhitelisted(address token) external view returns (bool);\\n\\n    /**\\n     * @notice Returns whitelist status of a given wrapped token.\\n     * @param token Address of the wrapped token.\\n     */\\n    function isWrappedTokenWhitelisted(address token) external view returns (bool);\\n\\n    /**\\n     * @notice Returns whitelist status of a given spell.\\n     * @param spell Address of the spell.\\n     */\\n    function isSpellWhitelisted(address spell) external view returns (bool);\\n\\n    /**\\n     * @dev Determine if lending is currently allowed based on the bank's status flags.\\n     * @notice Check the third-to-last bit of _bankStatus.\\n     * @return A boolean indicating whether lending is permitted.\\n     */\\n    function isLendAllowed() external view returns (bool);\\n\\n    /**\\n     * @dev Determine if withdrawing from lending is currently allowed based on the bank's status flags.\\n     * @notice Check the fourth-to-last bit of _bankStatus.\\n     * @return A boolean indicating whether withdrawing from lending is permitted.\\n     */\\n    function isWithdrawLendAllowed() external view returns (bool);\\n\\n    /**\\n     * @dev Determine if repayments are currently allowed based on the bank's status flags.\\n     * @notice Check the second-to-last bit of _bankStatus.\\n     * @return A boolean indicating whether repayments are permitted.\\n     */\\n    function isRepayAllowed() external view returns (bool);\\n\\n    /**\\n     * @dev Determine if borrowing is currently allowed based on the bank's status flags.\\n     * @notice Check the last bit of _bankStatus.\\n     * @return A boolean indicating whether borrowing is permitted.\\n     */\\n    function isBorrowAllowed() external view returns (bool);\\n\\n    /// @notice Fetches details of a bank given its token.\\n    function getBankInfo(address token) external view returns (Bank memory bank);\\n\\n    /**\\n     * @notice Gets the status of the bank\\n     * @return The status of the bank\\n     * @dev 1: Borrow is allowed\\n     *      2: Repay is allowed\\n     *      4: Lend is allowed\\n     *      8: WithdrawLend is allowed\\n     */\\n    function getBankStatus() external view returns (uint256);\\n\\n    /**\\n     * @dev Computes the total USD value of the debt of a given position.\\n     * @notice Ensure to call `accrue` beforehand to account for any interest changes.\\n     * @param positionId ID of the position to compute the debt value for.\\n     * @return debtValue Total USD value of the position's debt.\\n     */\\n    function getDebtValue(uint256 positionId) external view returns (uint256 debtValue);\\n\\n    /**\\n     * @notice Gets the repay resumed timestamp of the bank\\n     * @return The timestamp when repay is resumed\\n     */\\n    function getRepayResumedTimestamp() external view returns (uint256);\\n\\n    /**\\n     * @dev Computes the risk ratio of a specified position.\\n     * @notice A higher risk ratio implies greater risk associated with the position.\\n     * @dev    when:  riskRatio = (ov - pv) / cv\\n     *         where: riskRatio = (debt - positionValue) / isolatedCollateralValue\\n     * @param positionId ID of the position to assess risk for.\\n     * @return risk The risk ratio of the position (based on a scale of 1e4).\\n     */\\n    function getPositionRisk(uint256 positionId) external view returns (uint256 risk);\\n\\n    /**\\n     * @notice Retrieve the debt of a given position, considering the stored debt interest.\\n     * @dev Should call accrue first to obtain the current debt.\\n     * @param positionId The ID of the position to query.\\n     */\\n    function getPositionDebt(uint256 positionId) external view returns (uint256 debt);\\n\\n    /**\\n     * @notice Determines if a given position can be liquidated based on its risk ratio.\\n     * @param positionId ID of the position to check.\\n     * @return True if the position can be liquidated; otherwise, false.\\n     */\\n    function isLiquidatable(uint256 positionId) external view returns (bool);\\n\\n    /**\\n     * @notice Computes the total USD value of the collateral of a given position.\\n     * @dev The returned value includes both the collateral and any pending rewards.\\n     * @param positionId ID of the position to compute the value for.\\n     * @return positionValue Total USD value of the collateral and pending rewards.\\n     */\\n    function getPositionValue(uint256 positionId) external view returns (uint256);\\n\\n    /**\\n     * @notice Computes the isolated collateral value for a particular position.\\n     * @dev Should call accrue first to get current debt.\\n     * @param positionId The unique ID of the position.\\n     * @return icollValue The value of the isolated collateral in USD.\\n     */\\n    function getIsolatedCollateralValue(uint256 positionId) external view returns (uint256 icollValue);\\n\\n    /**\\n     * @notice Provides comprehensive details about a position using its ID.\\n     * @param positionId The unique ID of the position.\\n     * @return A Position struct containing details of the position.\\n     */\\n    function getPositionInfo(uint256 positionId) external view returns (Position memory);\\n\\n    /**\\n     * @notice Fetches information about the currently active position.\\n     * @return A Position struct with details of the current position.\\n     */\\n    function getCurrentPositionInfo() external view returns (Position memory);\\n\\n    /**\\n     * @notice Triggers interest accumulation and fetches the updated borrow balance.\\n     * @param positionId The unique ID of the position.\\n     * @return The updated debt balance after accruing interest.\\n     */\\n    function currentPositionDebt(uint256 positionId) external returns (uint256);\\n\\n    /**\\n     * @dev Lend tokens to the bank as isolated collateral.\\n     * @dev Emit a {Lend} event.\\n     * @notice The tokens lent will be used as collateral in the bank and might earn interest or other rewards.\\n     * @param token The address of the token to lend.\\n     * @param amount The number of tokens to lend.\\n     */\\n    function lend(address token, uint256 amount) external;\\n\\n    /**\\n     * @dev Withdraw isolated collateral tokens previously lent to the bank.\\n     * @dev Emit a {WithdrawLend} event.\\n     * @notice This will reduce the isolated collateral and might also reduce the position's overall health.\\n     * @param token The address of the isolated collateral token to withdraw.\\n     * @param shareAmount The number of vault share tokens to withdraw.\\n     */\\n    function withdrawLend(address token, uint256 shareAmount) external;\\n\\n    /**\\n     * @notice Allows users to borrow tokens from the specified bank.\\n     * @dev This function must only be called from a spell while under execution.\\n     * @dev Emit a {Borrow} event.\\n     * @param token The token to borrow from the bank.\\n     * @param amount The amount of tokens the user wishes to borrow.\\n     * @return borrowedAmount Returns the actual amount borrowed from the bank.\\n     */\\n    function borrow(address token, uint256 amount) external returns (uint256);\\n\\n    /**\\n     * @dev Executes a specific action on a position.\\n     * @dev Emit an {Execute} event.\\n     * @notice This can be used for various operations like adjusting collateral, repaying debt, etc.\\n     * @param positionId Unique identifier of the position, or zero for a new position.\\n     * @param spell Address of the contract (\\\"spell\\\") that contains the logic for the action to be executed.\\n     * @param data Data payload to pass to the spell for execution.\\n     */\\n    function execute(uint256 positionId, address spell, bytes memory data) external returns (uint256);\\n\\n    /**\\n     * @notice Allows users to repay their borrowed tokens to the bank.\\n     * @dev This function must only be called while under execution.\\n     * @dev Emit a {Repay} event.\\n     * @param token The token to repay to the bank.\\n     * @param amountCall The amount of tokens to be repaid.\\n     */\\n    function repay(address token, uint256 amountCall) external;\\n\\n    /**\\n     * @notice Allows users to provide additional collateral.\\n     * @dev Must only be called during execution.\\n     * @param collToken The ERC1155 token wrapped for collateral (i.e., Wrapped token of LP).\\n     * @param collId The token ID for collateral (i.e., uint256 format of LP address).\\n     * @param amountCall The amount of tokens to add as collateral.\\n     */\\n    function putCollateral(address collToken, uint256 collId, uint256 amountCall) external;\\n\\n    /**\\n     * @notice Allows users to withdraw a portion of their collateral.\\n     * @dev Must only be called during execution.\\n     * @param amount The amount of tokens to be withdrawn as collateral.\\n     * @return Returns the amount of collateral withdrawn.\\n     */\\n    function takeCollateral(uint256 amount) external returns (uint256);\\n\\n    /**\\n     * @dev Liquidates a position by repaying its debt and taking the collateral.\\n     * @dev Emit a {Liquidate} event.\\n     * @notice Liquidation can only be triggered if the position is deemed liquidatable\\n     *         and other conditions are met.\\n     * @param positionId The unique identifier of the position to liquidate.\\n     * @param debtToken The token in which the debt is denominated.\\n     * @param amountCall The amount of debt to be repaid when calling transferFrom.\\n     */\\n    function liquidate(uint256 positionId, address debtToken, uint256 amountCall) external;\\n\\n    /**\\n     * @notice Accrues interest for a given token.\\n     * @param token Address of the token to accrue interest for.\\n     */\\n    function accrue(address token) external;\\n\\n    /**\\n     * @notice Accrues interest for a given list of tokens.\\n     * @param tokens An array of token addresses to accrue interest for.\\n     */\\n    function accrueAll(address[] memory tokens) external;\\n\\n    /* solhint-disable func-name-mixedcase */\\n\\n    /**\\n     * @notice Returns the current executor's address, which is the owner of the current position.\\n     * @return Address of the current executor.\\n     */\\n    function EXECUTOR() external view returns (address);\\n\\n    /**\\n     * @notice Returns the ID of the currently executed position.\\n     * @return Current position ID.\\n     */\\n    function POSITION_ID() external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the address of the currently executed bank.\\n     * @return Current bank address.\\n     */\\n    function SPELL() external view returns (address);\\n\\n    /* solhint-enable func-name-mixedcase */\\n}\\n\"\r\n    },\r\n    \"lib/blueberry-core/contracts/interfaces/money-market/IBErc20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.22;\\n\\ninterface IBErc20 {\\n    function decimals() external view returns (uint8);\\n\\n    function underlying() external view returns (address);\\n\\n    function balanceOf(address user) external view returns (uint256);\\n\\n    function borrowBalanceStored(address account) external view returns (uint256);\\n\\n    function exchangeRateStored() external view returns (uint256);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    function mint(uint256 mintAmount) external returns (uint256);\\n\\n    function redeem(uint256 redeemTokens) external returns (uint256);\\n\\n    function borrowBalanceCurrent(address account) external returns (uint256);\\n\\n    function borrow(uint256 borrowAmount) external returns (uint256);\\n\\n    function repayBorrow(uint256 repayAmount) external returns (uint256);\\n}\\n\"\r\n    },\r\n    \"lib/blueberry-core/contracts/interfaces/ICoreOracle.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.22;\\n\\nimport { IBaseOracle } from \\\"./IBaseOracle.sol\\\";\\n\\n/**\\n *  @title ICoreOracle\\n *  @notice Interface for the CoreOracle contract which provides price feed data for assets in the Blueberry protocol.\\n */\\ninterface ICoreOracle is IBaseOracle {\\n    /*//////////////////////////////////////////////////////////////////////////\\n                                       EVENTS\\n    //////////////////////////////////////////////////////////////////////////*/\\n\\n    /**\\n     * @notice Event emitted when the owner sets a new oracle route for a given token.\\n     * @param token The ERC20 token for which the oracle route is set.\\n     * @param route The address of the oracle route.\\n     */\\n    event SetRoute(address indexed token, address route);\\n\\n    /*//////////////////////////////////////////////////////////////////////////\\n                                      FUNCTIONS\\n    //////////////////////////////////////////////////////////////////////////*/\\n\\n    /**\\n     * @notice Check if the given ERC20 token is supported by the oracle.\\n     * @param token The ERC20 token to check support for.\\n     * @return A boolean indicating whether the token is supported or not.\\n     */\\n    function isTokenSupported(address token) external view returns (bool);\\n\\n    /**\\n     * @notice Check if the oracle supports the underlying token of a given ERC1155 wrapper.\\n     * @dev Only meant to validate wrappers of the Blueberry protocol, such as WERC20.\\n     * @param token ERC1155 token address to check support for.\\n     * @param tokenId ERC1155 token id to check support for.\\n     * @return A boolean indicating whether the wrapped token is supported or not.\\n     */\\n    function isWrappedTokenSupported(address token, uint256 tokenId) external view returns (bool);\\n\\n    /**\\n     * @notice Returns the USD value of a specific wrapped ERC1155 token.\\n     * @param token ERC1155 token address.\\n     * @param id ERC1155 token id.\\n     * @param amount Amount of the token for which to get the USD value, normalized to 1e18 decimals.\\n     * @return The USD value of the given wrapped token amount.\\n     */\\n    function getWrappedTokenValue(address token, uint256 id, uint256 amount) external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the USD value of a given amount of a specific ERC20 token.\\n     * @param token ERC20 token address.\\n     * @param amount Amount of the ERC20 token for which to get the USD value.\\n     * @return The USD value of the given token amount.\\n     */\\n    function getTokenValue(address token, uint256 amount) external view returns (uint256);\\n\\n    /**\\n     * @notice Fetches the oracle route for the given token.\\n     * @param token Address of the token to get the route for.\\n     * @return The address of the oracle route for the given token.\\n     */\\n    function getRoute(address token) external view returns (address);\\n}\\n\"\r\n    },\r\n    \"lib/blueberry-core/contracts/interfaces/IERC20Wrapper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.22;\\n\\n/**\\n * @title IERC20Wrapper\\n * @author BlueberryProtocol\\n * @notice Interface for the ERC20Wrapper contract which allows the wrapping\\n *         of ERC-20 tokens with associated ERC-1155 token IDs.\\n */\\ninterface IERC20Wrapper {\\n    /**\\n     * @notice Fetches the underlying ERC-20 token address associated with the provided ERC-1155 token ID.\\n     * @param tokenId The ERC-1155 token ID for which the underlying ERC-20 token address is to be fetched.\\n     * @return The address of the underlying ERC-20 token.\\n     */\\n    function getUnderlyingToken(uint256 tokenId) external view returns (address);\\n\\n    /**\\n     * @notice Fetches pending rewards for a particular ERC-1155 token ID and given amount.\\n     * @param id The ERC-1155 token ID for which the pending rewards are to be fetched.\\n     * @param amount The amount for which pending rewards are to be calculated.\\n     * @return tokens A list of addresses representing reward tokens.\\n     * @return amounts A list of amounts corresponding to each reward token in the `tokens` list.\\n     */\\n    function pendingRewards(uint256 id, uint256 amount) external view returns (address[] memory, uint256[] memory);\\n}\\n\"\r\n    },\r\n    \"lib/blueberry-core/contracts/interfaces/IFeeManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.22;\\n\\nimport { IProtocolConfig } from \\\"./IProtocolConfig.sol\\\";\\n\\n/**\\n * @title IFeeManager\\n * @notice Interface for FeeManager, the central fee management contract in the Blueberry Protocol.\\n * @dev FeeManager is responsible for cutting various fees in the protocol and sending them to the treasury.\\n */\\ninterface IFeeManager {\\n    /**\\n     * @notice Calculates and deducts the deposit fee when lending\\n     *         isolated underlying assets to Blueberry Money Market.\\n     * @param token The address of the underlying token for which the deposit fee is to be calculated.\\n     * @param amount The gross deposit amount before fees.\\n     * @return The net deposit amount after the fee deduction.\\n     */\\n    function doCutDepositFee(address token, uint256 amount) external returns (uint256);\\n\\n    /**\\n     * @notice Calculates and deducts the withdrawal fee when redeeming\\n     *         isolated underlying tokens from Blueberry Money Market.\\n     * @param token The address of the underlying token for which the withdrawal fee is to be calculated.\\n     * @param amount The gross withdrawal amount before fees.\\n     * @return The net withdrawal amount after the fee deduction.\\n     */\\n    function doCutWithdrawFee(address token, uint256 amount) external returns (uint256);\\n\\n    /**\\n     * @notice Calculates and deducts the performance fee from the\\n     *         rewards generated due to the leveraged position.\\n     * @param token The address of the reward token for which the reward fee is to be calculated.\\n     * @param amount The gross reward amount before fees.\\n     * @return The net reward amount after the fee deduction.\\n     */\\n    function doCutRewardsFee(address token, uint256 amount) external returns (uint256);\\n\\n    /**\\n     * @notice Calculates and deducts the vault withdrawal fee if\\n     *         the withdrawal occurs within the specified fee window in the Blueberry Money Market.\\n     * @param token The address of the underlying token for which the vault withdrawal fee is to be calculated.\\n     * @param amount The gross vault withdrawal amount before fees.\\n     * @return The net vault withdrawal amount after the fee deduction.\\n     */\\n    function doCutVaultWithdrawFee(address token, uint256 amount) external returns (uint256);\\n\\n    /**\\n     * @notice Gets the protocol config contract address.\\n     */\\n    function getConfig() external view returns (IProtocolConfig);\\n}\\n\"\r\n    },\r\n    \"lib/blueberry-core/contracts/interfaces/IHardVault.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.22;\\n\\nimport { IERC1155Upgradeable } from \\\"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155Upgradeable.sol\\\";\\n\\nimport { IProtocolConfig } from \\\"./IProtocolConfig.sol\\\";\\n\\n/**\\n * @title IHardVault\\n * @notice Interface for the HardVault, which integrates ERC1155 tokens with the protocol's underlying assets.\\n * @dev This interface facilitates the conversion between underlying ERC-20\\n *      tokens and corresponding ERC-1155 representations within the protocol.\\n */\\ninterface IHardVault is IERC1155Upgradeable {\\n    /*//////////////////////////////////////////////////////////////////////////\\n                                       EVENTS\\n    //////////////////////////////////////////////////////////////////////////*/\\n\\n    /**\\n     * @dev Emitted when a user deposits ERC20 tokens into the vault.\\n     * @param account Address of the user.\\n     * @param amount Amount of ERC20 tokens deposited.\\n     * @param shareAmount Amount of ERC1155 tokens minted.\\n     */\\n    event Deposited(address indexed account, uint256 amount, uint256 shareAmount);\\n\\n    /**\\n     * @dev Emitted when a user withdraws ERC20 tokens from the vault.\\n     * @param account Address of the user.\\n     * @param amount Amount of ERC20 tokens withdrawn.\\n     * @param shareAmount Amount of ERC1155 tokens burned.\\n     */\\n    event Withdrawn(address indexed account, uint256 amount, uint256 shareAmount);\\n\\n    /*//////////////////////////////////////////////////////////////////////////\\n                                      FUNCTIONS\\n    //////////////////////////////////////////////////////////////////////////*/\\n\\n    /**\\n     * @notice Retrieves the underlying ERC-20 token address corresponding to a specific ERC-1155 token ID.\\n     * @param tokenId The ERC-1155 token ID to fetch the underlying ERC-20 token for.\\n     * @return Address of the underlying ERC-20 token associated with the provided token ID.\\n     */\\n    function getUnderlyingToken(uint256 tokenId) external view returns (address);\\n\\n    /**\\n     * @notice Returns the balance of the underlying ERC-20 token for a specific user.\\n     * @param uToken Address of the ERC-20 token to query.\\n     * @param user Address of the user to query the balance for.\\n     * @return Balance of the underlying ERC-20 token for the given user.\\n     */\\n    function balanceOfToken(address uToken, address user) external view returns (uint256);\\n\\n    /**\\n     * @notice Deposit a certain amount of ERC-20 tokens to receive an equivalent amount of ERC-1155 representations.\\n     * @param uToken The address of the ERC-20 token to be deposited.\\n     * @param amount The quantity of ERC-20 tokens to be deposited.\\n     * @return shareAmount The amount of ERC-1155 tokens minted in exchange for the deposited ERC-20 tokens.\\n     */\\n    function deposit(address uToken, uint256 amount) external returns (uint256 shareAmount);\\n\\n    /**\\n     * @notice Withdraw a certain amount of ERC-1155 tokens to\\n     *         receive an equivalent amount of underlying ERC-20 tokens.\\n     * @param uToken The address of the underlying ERC-20 token to be withdrawn.\\n     * @param shareAmount The quantity of ERC-1155 tokens to be withdrawn.\\n     * @return withdrawAmount The amount of ERC-20 tokens returned in exchange for the withdrawn ERC-1155 tokens.\\n     */\\n    function withdraw(address uToken, uint256 shareAmount) external returns (uint256 withdrawAmount);\\n\\n    /**\\n     * @notice Retrieves the protocol configuration for this vault.\\n     * @return Address of the protocol configuration.\\n     */\\n    function getConfig() external view returns (IProtocolConfig);\\n}\\n\"\r\n    },\r\n    \"lib/blueberry-core/contracts/interfaces/IProtocolConfig.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.22;\\n\\nimport { IFeeManager } from \\\"./IFeeManager.sol\\\";\\n\\n/**\\n * @title IProtocolConfig\\n * @author BlueberryProtocol\\n * @notice Interface for the Protocol Configuration,\\n *         encapsulating various fees and related configuration parameters.\\n * @dev This interface defines methods to retrieve fees\\n *      and related parameters that govern the behavior of the protocol.\\n */\\ninterface IProtocolConfig {\\n    /**\\n     * @notice Retrieve the deposit fee rate applied when users deposit into the protocol.\\n     * @return The deposit fee rate.\\n     */\\n    function getDepositFee() external view returns (uint256);\\n\\n    /**\\n     * @notice Retrieve the withdrawal fee rate applied when users withdraw from the protocol.\\n     * @return The withdrawal fee rate.\\n     */\\n    function getWithdrawFee() external view returns (uint256);\\n\\n    /**\\n     * @notice Retrieve the reward fee rate applied when users claim rewards from the protocol.\\n     * @return The reward fee rate.\\n     */\\n    function getRewardFee() external view returns (uint256);\\n\\n    /**\\n     * @notice Get the address where protocol's collected fees are stored and managed.\\n     * @return The treasury address of the protocol.\\n     */\\n    function getTreasury() external view returns (address);\\n\\n    /**\\n     * @notice Retrieve the fee rate applied for withdrawals from vaults.\\n     * @return The fee rate for vault withdrawals.\\n     */\\n    function getTreasuryFeeRate() external view returns (uint256);\\n\\n    /**\\n     * @notice Retrieve the fee rate applied for withdrawals from vaults.\\n     * @return The fee rate for vault withdrawals.\\n     */\\n    function getWithdrawVaultFee() external view returns (uint256);\\n\\n    /**\\n     * @notice Retrieve the window of time where the vault withdrawal fee is applied.\\n     * @return The window of time where the vault withdrawal fee is applied.\\n     */\\n    function getWithdrawVaultFeeWindow() external view returns (uint256);\\n\\n    /**\\n     * @notice Retrieve the start time of the window of time where the vault withdrawal fee is applied.\\n     * @return The start time of the window of time where the vault withdrawal fee is applied.\\n     */\\n    function getWithdrawVaultFeeWindowStartTime() external view returns (uint256);\\n\\n    /**\\n     * @notice Get the fee manager that handles fee calculations and distributions.\\n     * @return An instance of the IFeeManager interface that manages fees within the protocol.\\n     */\\n    function getFeeManager() external view returns (IFeeManager);\\n\\n    /**\\n     * @notice Get the address of the $BLB-ICHI vault.\\n     * @return The address of the $BLB-ICHI vault.\\n     */\\n    function getBlbUsdcIchiVault() external view returns (address);\\n\\n    /**\\n     * @notice Get the address of the $BLB stability pool.\\n     * @return The address of the $BLB stability pool.\\n     */\\n    function getBlbStabilityPool() external view returns (address);\\n\\n    /**\\n     * @notice Get the fee rate applied for withdrawals from the $BLB-ICHI vault.\\n     * @return The fee rate for $BLB-ICHI vault withdrawals.\\n     */\\n    function getBlbIchiVaultFeeRate() external view returns (uint256);\\n\\n    /**\\n     * @notice Get the fee rate applied for withdrawals from the $BLB-ICHI vault.\\n     * @return The fee rate for $BLB-ICHI vault withdrawals.\\n     */\\n    function getBlbStablePoolFeeRate() external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"lib/blueberry-core/contracts/interfaces/ISoftVault.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.22;\\n\\nimport { IERC20Upgradeable } from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport { IBErc20 } from \\\"./money-market/IBErc20.sol\\\";\\n\\nimport { IProtocolConfig } from \\\"./IProtocolConfig.sol\\\";\\n\\n/**\\n * @title ISoftVault\\n * @notice Interface for the SoftVault, allowing deposits and withdrawals of assets.\\n * @dev The SoftVault is responsible for handling user deposits,\\n *      withdrawals, and interactions with underlying Blueberry Money Market bTokens.\\n */\\ninterface ISoftVault is IERC20Upgradeable {\\n    /*//////////////////////////////////////////////////////////////////////////\\n                                       EVENTS\\n    //////////////////////////////////////////////////////////////////////////*/\\n\\n    /**\\n     * @notice Event emitted when an account deposits assets.\\n     * @param account Address of the account that deposited.\\n     * @param amount The amount of underlying assets deposited.\\n     * @param shareAmount The corresponding amount of vault shares minted.\\n     */\\n    event Deposited(address indexed account, uint256 amount, uint256 shareAmount);\\n\\n    /**\\n     * @notice Event emitted when an account withdraws assets.\\n     * @param account Address of the account that withdrew.\\n     * @param amount The amount of underlying assets withdrawn.\\n     * @param shareAmount The corresponding amount of vault shares burned.\\n     */\\n    event Withdrawn(address indexed account, uint256 amount, uint256 shareAmount);\\n\\n    /*//////////////////////////////////////////////////////////////////////////\\n                                      FUNCTIONS\\n    //////////////////////////////////////////////////////////////////////////*/\\n\\n    /**\\n     * @notice Get the corresponding Blueberry Money Market bToken for this vault.\\n     * @return A Blueberry Money Market bToken interface.\\n     */\\n    function getBToken() external view returns (IBErc20);\\n\\n    /**\\n     * @notice Get the underlying ERC20 token for this vault.\\n     * @return An ERC20 interface of the underlying token.\\n     */\\n    function getUnderlyingToken() external view returns (IERC20Upgradeable);\\n\\n    /**\\n     * @notice Retrieves the protocol configuration for this vault.\\n     * @return Address of the protocol configuration.\\n     */\\n    function getConfig() external view returns (IProtocolConfig);\\n\\n    /**\\n     * @notice Deposit a specified amount of the underlying asset into the vault.\\n     * @dev This function will convert the deposited assets into the corresponding bToken.\\n     * @param amount The amount of the underlying asset to deposit.\\n     * @return shareAmount The amount of vault shares minted for the deposit.\\n     */\\n    function deposit(uint256 amount) external returns (uint256 shareAmount);\\n\\n    /**\\n     * @notice Withdraw a specified amount of the underlying asset from the vault.\\n     * @dev This function will convert the corresponding bToken back into the underlying asset.\\n     * @param amount The amount of vault shares to redeem.\\n     * @return withdrawAmount The amount of the underlying asset withdrawn.\\n     */\\n    function withdraw(uint256 amount) external returns (uint256 withdrawAmount);\\n}\\n\"\r\n    },\r\n    \"lib/blueberry-core/node_modules/@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20PermitUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20PermitUpgradeable {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"lib/blueberry-core/node_modules/@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/blueberry-core/node_modules/@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"lib/blueberry-core/node_modules/@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"lib/blueberry-core/node_modules/@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC-20 standard as defined in the ERC.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\nimport {IERC1363} from \\\"../../../interfaces/IERC1363.sol\\\";\\nimport {Address} from \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC-20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev An operation with an ERC-20 token failed.\\n     */\\n    error SafeERC20FailedOperation(address token);\\n\\n    /**\\n     * @dev Indicates a failed `decreaseAllowance` request.\\n     */\\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        forceApprove(token, spender, oldAllowance + value);\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\\n     * value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\\n        unchecked {\\n            uint256 currentAllowance = token.allowance(address(this), spender);\\n            if (currentAllowance < requestedDecrease) {\\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\\n            }\\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} transferAndCall, with a fallback to the simple {ERC20} transfer if the target has no\\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function transferAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\\n        if (to.code.length == 0) {\\n            safeTransfer(token, to, value);\\n        } else if (!token.transferAndCall(to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} transferFromAndCall, with a fallback to the simple {ERC20} transferFrom if the target\\n     * has no code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function transferFromAndCallRelaxed(\\n        IERC1363 token,\\n        address from,\\n        address to,\\n        uint256 value,\\n        bytes memory data\\n    ) internal {\\n        if (to.code.length == 0) {\\n            safeTransferFrom(token, from, to, value);\\n        } else if (!token.transferFromAndCall(from, to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} approveAndCall, with a fallback to the simple {ERC20} approve if the target has no\\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * NOTE: When the recipient address (`to`) has no code (i.e. is an EOA), this function behaves as {forceApprove}.\\n     * Opposedly, when the recipient address (`to`) has code, this function only attempts to call {ERC1363-approveAndCall}\\n     * once without retrying, and relies on the returned value to be true.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function approveAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\\n        if (to.code.length == 0) {\\n            forceApprove(token, to, value);\\n        } else if (!token.approveAndCall(to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data);\\n        if (returndata.length != 0 && !abi.decode(returndata, (bool))) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return success && (returndata.length == 0 || abi.decode(returndata, (bool))) && address(token).code.length > 0;\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/token/ERC1155/IERC1155Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Interface that must be implemented by smart contracts in order to receive\\n * ERC-1155 token transfers.\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n     * @dev Handles the receipt of a single ERC-1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC-1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"lib/blueberry-core/contracts/interfaces/IBaseOracle.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.22;\\n\\n/**\\n * @title IBaseOracle\\n * @author BlueberryProtocol\\n * @notice Interface for a basic oracle that provides price data for assets.\\n */\\ninterface IBaseOracle {\\n    /**\\n     * @notice Event emitted when a new LP token is registered within its respective implementation.\\n     * @param token Address of the LP token being registered\\n     */\\n    event RegisterLpToken(address token);\\n\\n    /**\\n     * @notice Fetches the price of the given token in USD with 18 decimals precision.\\n     * @param token Address of the ERC-20 token for which the price is requested.\\n     * @return The USD price of the given token, multiplied by 10**18.\\n     */\\n    function getPrice(address token) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"lib/blueberry-core/node_modules/@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/interfaces/IERC1363.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC1363.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"./IERC20.sol\\\";\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @title IERC1363\\n * @dev Interface of the ERC-1363 standard as defined in the https://eips.ethereum.org/EIPS/eip-1363[ERC-1363].\\n *\\n * Defines an extension interface for ERC-20 tokens that supports executing code on a recipient contract\\n * after `transfer` or `transferFrom`, or code on a spender contract after `approve`, in a single transaction.\\n */\\ninterface IERC1363 is IERC20, IERC165 {\\n    /*\\n     * Note: the ERC-165 identifier for this interface is 0xb0202a11.\\n     * 0xb0202a11 ===\\n     *   bytes4(keccak256('transferAndCall(address,uint256)')) ^\\n     *   bytes4(keccak256('transferAndCall(address,uint256,bytes)')) ^\\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256)')) ^\\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256,bytes)')) ^\\n     *   bytes4(keccak256('approveAndCall(address,uint256)')) ^\\n     *   bytes4(keccak256('approveAndCall(address,uint256,bytes)'))\\n     */\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferAndCall(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @param data Additional data with no specified format, sent in call to `to`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferAndCall(address to, uint256 value, bytes calldata data) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param from The address which you want to send tokens from.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferFromAndCall(address from, address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param from The address which you want to send tokens from.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @param data Additional data with no specified format, sent in call to `to`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferFromAndCall(address from, address to, uint256 value, bytes calldata data) external returns (bool);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\\n     * @param spender The address which will spend the funds.\\n     * @param value The amount of tokens to be spent.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function approveAndCall(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\\n     * @param spender The address which will spend the funds.\\n     * @param value The amount of tokens to be spent.\\n     * @param data Additional data with no specified format, sent in call to `spender`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function approveAndCall(address spender, uint256 value, bytes calldata data) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error AddressInsufficientBalance(address account);\\n\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedInnerCall();\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            revert FailedInnerCall();\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {FailedInnerCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\\n     * unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {FailedInnerCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert FailedInnerCall();\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC-165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[ERC].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/interfaces/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../token/ERC20/IERC20.sol\\\";\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/interfaces/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../utils/introspection/IERC165.sol\\\";\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [\r\n      \"@blueberry/=lib/blueberry-core/contracts/\",\r\n      \"@blueberry-stakevest/=lib/blueberry-stakevest/src/\",\r\n      \"@openzeppelin/contracts/=lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/\",\r\n      \"@openzeppelin/contracts-upgradeable/=lib/blueberry-core/node_modules/@openzeppelin/contracts-upgradeable/\",\r\n      \"src/=src/BlueberryContracts/\",\r\n      \"openzeppelin-contracts-upgradeable/contracts/=lib/blueberry-stakevest/lib/openzeppelin-contracts-upgradeable/contracts/\",\r\n      \"solady/=lib/blueberry-stakevest/lib/solady/\",\r\n      \"@chainlink/=lib/blueberry-core/node_modules/@chainlink/\",\r\n      \"@eth-optimism/=lib/blueberry-core/node_modules/@eth-optimism/contracts/\",\r\n      \"@uniswap/=lib/blueberry-core/node_modules/@uniswap/\",\r\n      \"base64-sol/=lib/blueberry-core/node_modules/base64-sol/\",\r\n      \"blueberry-core/=lib/blueberry-core/contracts/\",\r\n      \"blueberry-stakevest/=lib/blueberry-stakevest/\",\r\n      \"ds-test/=lib/forge-std/lib/ds-test/src/\",\r\n      \"erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/\",\r\n      \"eth-gas-reporter/=lib/blueberry-core/node_modules/eth-gas-reporter/\",\r\n      \"forge-std/=lib/forge-std/src/\",\r\n      \"hardhat-deploy/=lib/blueberry-core/node_modules/hardhat-deploy/\",\r\n      \"hardhat/=lib/blueberry-core/node_modules/hardhat/\",\r\n      \"openzeppelin-contracts/=lib/openzeppelin-contracts/\",\r\n      \"openzeppelin-foundry-upgrades/=lib/openzeppelin-foundry-upgrades/src/\",\r\n      \"openzeppelin/=lib/blueberry-stakevest/lib/openzeppelin-contracts-upgradeable/contracts/\",\r\n      \"solidity-stringutils/=lib/openzeppelin-foundry-upgrades/lib/solidity-stringutils/\",\r\n      \"v3-core/=lib/blueberry-stakevest/lib/v3-core/contracts/\"\r\n    ],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": false,\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"appendCBOR\": true\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"paris\",\r\n    \"libraries\": {\r\n      \"lib/blueberry-core/contracts/libraries/UniV3/UniV3WrappedLibContainer.sol\": {\r\n        \"UniV3WrappedLibContainer\": \"0xae4cf39daa90c0ad830afbe8098f548c84ee0f92\"\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"AddressEmptyCode\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AddressInsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"positionId\",\"type\":\"uint256\"}],\"name\":\"BAD_COLLATERAL\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"posId\",\"type\":\"uint256\"}],\"name\":\"BAD_POSITION\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BANK_ALREADY_LISTED\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BANK_LIMIT\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"index\",\"type\":\"uint8\"}],\"name\":\"BANK_NOT_EXIST\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"BANK_NOT_LISTED\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"BORROW_FAILED\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BORROW_NOT_ALLOWED\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"borrowAmount\",\"type\":\"uint256\"}],\"name\":\"BORROW_ZERO_SHARE\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BTOKEN_ALREADY_ADDED\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collToken\",\"type\":\"address\"}],\"name\":\"DIFF_COL_EXIST\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedInnerCall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"debtToken\",\"type\":\"address\"}],\"name\":\"INCORRECT_DEBT\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"uToken\",\"type\":\"address\"}],\"name\":\"INCORRECT_UNDERLYING\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"INPUT_ARRAY_MISMATCH\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"INSUFFICIENT_COLLATERAL\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"uToken\",\"type\":\"address\"}],\"name\":\"INVALID_UTOKEN\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LEND_NOT_ALLOWED\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"threshold\",\"type\":\"uint256\"}],\"name\":\"LIQ_THRESHOLD_TOO_HIGH\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"threshold\",\"type\":\"uint256\"}],\"name\":\"LIQ_THRESHOLD_TOO_LOW\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LOCKED\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"positionId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"NOT_FROM_OWNER\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"}],\"name\":\"NOT_FROM_SPELL\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NOT_IN_EXEC\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"positionId\",\"type\":\"uint256\"}],\"name\":\"NOT_LIQUIDATABLE\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NOT_UNDER_EXECUTION\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"ORACLE_NOT_SUPPORT\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wToken\",\"type\":\"address\"}],\"name\":\"ORACLE_NOT_SUPPORT_WTOKEN\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"REPAY_ALLOW_NOT_WARMED_UP\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"repay\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"debt\",\"type\":\"uint256\"}],\"name\":\"REPAY_EXCEEDS_DEBT\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"REPAY_FAILED\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"REPAY_NOT_ALLOWED\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spell\",\"type\":\"address\"}],\"name\":\"SPELL_NOT_WHITELISTED\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"SafeERC20FailedOperation\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"TOKEN_NOT_WHITELISTED\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WITHDRAW_LEND_NOT_ALLOWED\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZERO_ADDRESS\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZERO_AMOUNT\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"bToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"softVault\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"hardVault\",\"type\":\"address\"}],\"name\":\"AddBank\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"positionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"share\",\"type\":\"uint256\"}],\"name\":\"Borrow\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"positionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"Execute\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"positionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Lend\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"positionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"liquidator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"debtToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"share\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"positionSize\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"underlyingVaultSize\",\"type\":\"uint256\"}],\"name\":\"Liquidate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"bToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"softVault\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"hardVault\",\"type\":\"address\"}],\"name\":\"ModifyBank\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"positionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PutCollateral\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"positionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"share\",\"type\":\"uint256\"}],\"name\":\"Repay\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"}],\"name\":\"SetOracle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isWhitelisted\",\"type\":\"bool\"}],\"name\":\"SetWhitelistERC1155\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isWhitelisted\",\"type\":\"bool\"}],\"name\":\"SetWhitelistToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"positionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TakeCollateral\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"positionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawLend\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"EXECUTOR\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"POSITION_ID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SPELL\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"accrue\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"}],\"name\":\"accrueAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"softVault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"hardVault\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liqThreshold\",\"type\":\"uint256\"}],\"name\":\"addBank\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"borrow\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"borrowedAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"positionId\",\"type\":\"uint256\"}],\"name\":\"currentPositionDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"positionId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"spell\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"execute\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllBanks\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getBankInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"isListed\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"index\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"hardVault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"softVault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"bToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liqThreshold\",\"type\":\"uint256\"}],\"internalType\":\"struct IBank.Bank\",\"name\":\"bank\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBankStatus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getConfig\",\"outputs\":[{\"internalType\":\"contract IProtocolConfig\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentPositionInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"underlyingToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"debtToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"underlyingVaultShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateralSize\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"debtShare\",\"type\":\"uint256\"}],\"internalType\":\"struct IBank.Position\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"positionId\",\"type\":\"uint256\"}],\"name\":\"getDebtValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"debtValue\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFeeManager\",\"outputs\":[{\"internalType\":\"contract IFeeManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"positionId\",\"type\":\"uint256\"}],\"name\":\"getIsolatedCollateralValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"icollValue\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNextPositionId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOracle\",\"outputs\":[{\"internalType\":\"contract ICoreOracle\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"positionId\",\"type\":\"uint256\"}],\"name\":\"getPositionDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"debt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"positionId\",\"type\":\"uint256\"}],\"name\":\"getPositionInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"underlyingToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"debtToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"underlyingVaultShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateralSize\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"debtShare\",\"type\":\"uint256\"}],\"internalType\":\"struct IBank.Position\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"positionId\",\"type\":\"uint256\"}],\"name\":\"getPositionRisk\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"risk\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"positionId\",\"type\":\"uint256\"}],\"name\":\"getPositionValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"positionValue\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRepayResumedTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ICoreOracle\",\"name\":\"oracle\",\"type\":\"address\"},{\"internalType\":\"contract IProtocolConfig\",\"name\":\"config\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isBorrowAllowed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isLendAllowed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"positionId\",\"type\":\"uint256\"}],\"name\":\"isLiquidatable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isRepayAllowed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spell\",\"type\":\"address\"}],\"name\":\"isSpellWhitelisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"isTokenWhitelisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isWithdrawLendAllowed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"isWrappedTokenWhitelisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"lend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"positionId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"debtToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountCall\",\"type\":\"uint256\"}],\"name\":\"liquidate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"bankIndex\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"softVault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"hardVault\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liqThreshold\",\"type\":\"uint256\"}],\"name\":\"modifyBank\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"collId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountCall\",\"type\":\"uint256\"}],\"name\":\"putCollateral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountCall\",\"type\":\"uint256\"}],\"name\":\"repay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bankStatus\",\"type\":\"uint256\"}],\"name\":\"setBankStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"takeCollateral\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"ok\",\"type\":\"bool\"}],\"name\":\"whitelistERC1155\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"spells\",\"type\":\"address[]\"},{\"internalType\":\"bool[]\",\"name\":\"statuses\",\"type\":\"bool[]\"}],\"name\":\"whitelistSpells\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"bool[]\",\"name\":\"statuses\",\"type\":\"bool[]\"}],\"name\":\"whitelistTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"shareAmount\",\"type\":\"uint256\"}],\"name\":\"withdrawLend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "BlueberryBank", "CompilerVersion": "v0.8.22+commit.4fc1097e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "paris", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}