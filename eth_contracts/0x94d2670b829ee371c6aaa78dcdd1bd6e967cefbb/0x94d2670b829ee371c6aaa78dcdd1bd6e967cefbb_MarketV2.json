{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts-upgradeable-v4/access/AccessControlUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\\n    function __AccessControl_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControl_init_unchained() internal onlyInitializing {\\n    }\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        StringsUpgradeable.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        StringsUpgradeable.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable-v4/access/IAccessControlUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable-v4/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable-v4/security/ReentrancyGuardUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable-v4/token/ERC20/extensions/IERC20PermitUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20PermitUpgradeable {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable-v4/token/ERC20/IERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable-v4/token/ERC20/utils/SafeERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../extensions/IERC20PermitUpgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20Upgradeable token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20Upgradeable token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20PermitUpgradeable token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20Upgradeable token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && AddressUpgradeable.isContract(address(token));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable-v4/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable-v4/utils/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable-v4/utils/introspection/ERC165Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable-v4/utils/introspection/IERC165Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable-v4/utils/math/MathUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUpgradeable {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable-v4/utils/math/SignedMathUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMathUpgradeable {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable-v4/utils/StringsUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/MathUpgradeable.sol\\\";\\nimport \\\"./math/SignedMathUpgradeable.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = MathUpgradeable.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMathUpgradeable.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, MathUpgradeable.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/common/codec/WordCodec.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// solhint-disable no-inline-assembly\\n\\n/// @dev A subset copied from the following contracts:\\n///\\n/// + `balancer-labs/v2-solidity-utils/contracts/helpers/WordCodec.sol`\\n/// + `balancer-labs/v2-solidity-utils/contracts/helpers/WordCodecHelpers.sol`\\nlibrary WordCodec {\\n  /// @dev Inserts an unsigned integer of bitLength, shifted by an offset, into a 256 bit word,\\n  /// replacing the old value. Returns the new word.\\n  function insertUint(\\n    bytes32 word,\\n    uint256 value,\\n    uint256 offset,\\n    uint256 bitLength\\n  ) internal pure returns (bytes32 result) {\\n    // Equivalent to:\\n    // uint256 mask = (1 << bitLength) - 1;\\n    // bytes32 clearedWord = bytes32(uint256(word) & ~(mask << offset));\\n    // result = clearedWord | bytes32(value << offset);\\n    assembly {\\n      let mask := sub(shl(bitLength, 1), 1)\\n      let clearedWord := and(word, not(shl(offset, mask)))\\n      result := or(clearedWord, shl(offset, value))\\n    }\\n  }\\n\\n  /// @dev Decodes and returns an unsigned integer with `bitLength` bits, shifted by an offset, from a 256 bit word.\\n  function decodeUint(\\n    bytes32 word,\\n    uint256 offset,\\n    uint256 bitLength\\n  ) internal pure returns (uint256 result) {\\n    // Equivalent to:\\n    // result = uint256(word >> offset) & ((1 << bitLength) - 1);\\n    assembly {\\n      result := and(shr(offset, word), sub(shl(bitLength, 1), 1))\\n    }\\n  }\\n\\n  /// @dev Inserts a signed integer shifted by an offset into a 256 bit word, replacing the old value. Returns\\n  /// the new word.\\n  ///\\n  /// Assumes `value` can be represented using `bitLength` bits.\\n  function insertInt(\\n    bytes32 word,\\n    int256 value,\\n    uint256 offset,\\n    uint256 bitLength\\n  ) internal pure returns (bytes32) {\\n    unchecked {\\n      uint256 mask = (1 << bitLength) - 1;\\n      bytes32 clearedWord = bytes32(uint256(word) & ~(mask << offset));\\n      // Integer values need masking to remove the upper bits of negative values.\\n      return clearedWord | bytes32((uint256(value) & mask) << offset);\\n    }\\n  }\\n\\n  /// @dev Decodes and returns a signed integer with `bitLength` bits, shifted by an offset, from a 256 bit word.\\n  function decodeInt(\\n    bytes32 word,\\n    uint256 offset,\\n    uint256 bitLength\\n  ) internal pure returns (int256 result) {\\n    unchecked {\\n      int256 maxInt = int256((1 << (bitLength - 1)) - 1);\\n      uint256 mask = (1 << bitLength) - 1;\\n\\n      int256 value = int256(uint256(word >> offset) & mask);\\n      // In case the decoded value is greater than the max positive integer that can be represented with bitLength\\n      // bits, we know it was originally a negative integer. Therefore, we mask it to restore the sign in the 256 bit\\n      // representation.\\n      //\\n      // Equivalent to:\\n      // result = value > maxInt ? (value | int256(~mask)) : value;\\n      assembly {\\n        result := or(mul(gt(value, maxInt), not(mask)), value)\\n      }\\n    }\\n  }\\n\\n  /// @dev Decodes and returns a boolean shifted by an offset from a 256 bit word.\\n  function decodeBool(bytes32 word, uint256 offset) internal pure returns (bool result) {\\n    // Equivalent to:\\n    // result = (uint256(word >> offset) & 1) == 1;\\n    assembly {\\n      result := and(shr(offset, word), 1)\\n    }\\n  }\\n\\n  /// @dev Inserts a boolean value shifted by an offset into a 256 bit word, replacing the old value. Returns the new\\n  /// word.\\n  function insertBool(\\n    bytes32 word,\\n    bool value,\\n    uint256 offset\\n  ) internal pure returns (bytes32 result) {\\n    // Equivalent to:\\n    // bytes32 clearedWord = bytes32(uint256(word) & ~(1 << offset));\\n    // bytes32 referenceInsertBool = clearedWord | bytes32(uint256(value ? 1 : 0) << offset);\\n    assembly {\\n      let clearedWord := and(word, not(shl(offset, 1)))\\n      result := or(clearedWord, shl(offset, value))\\n    }\\n  }\\n\\n  function clearWordAtPosition(\\n    bytes32 word,\\n    uint256 offset,\\n    uint256 bitLength\\n  ) internal pure returns (bytes32 clearedWord) {\\n    unchecked {\\n      uint256 mask = (1 << bitLength) - 1;\\n      clearedWord = bytes32(uint256(word) & ~(mask << offset));\\n    }\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/f(x)/v2/MarketV2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity =0.8.20;\\n\\nimport { AccessControlUpgradeable } from \\\"@openzeppelin/contracts-upgradeable-v4/access/AccessControlUpgradeable.sol\\\";\\nimport { ReentrancyGuardUpgradeable } from \\\"@openzeppelin/contracts-upgradeable-v4/security/ReentrancyGuardUpgradeable.sol\\\";\\nimport { IERC20Upgradeable } from \\\"@openzeppelin/contracts-upgradeable-v4/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport { SafeERC20Upgradeable } from \\\"@openzeppelin/contracts-upgradeable-v4/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\n\\nimport { WordCodec } from \\\"../../common/codec/WordCodec.sol\\\";\\n\\nimport { IFxMarketV2 } from \\\"../../interfaces/f(x)/IFxMarketV2.sol\\\";\\nimport { IFxRebalancePoolRegistry } from \\\"../../interfaces/f(x)/IFxRebalancePoolRegistry.sol\\\";\\nimport { IFxReservePool } from \\\"../../interfaces/f(x)/IFxReservePool.sol\\\";\\nimport { IFxTreasuryV2 } from \\\"../../interfaces/f(x)/IFxTreasuryV2.sol\\\";\\n\\n// solhint-disable max-states-count\\n\\ncontract MarketV2 is AccessControlUpgradeable, ReentrancyGuardUpgradeable, IFxMarketV2 {\\n  using SafeERC20Upgradeable for IERC20Upgradeable;\\n\\n  using WordCodec for bytes32;\\n\\n  /*************\\n   * Constants *\\n   *************/\\n\\n  /// @notice The role for emergency dao.\\n  bytes32 public constant EMERGENCY_DAO_ROLE = keccak256(\\\"EMERGENCY_DAO_ROLE\\\");\\n\\n  /// @dev The precision used to compute nav.\\n  uint256 private constant FEE_PRECISION = 1e18;\\n\\n  /// @dev The offset of mint flag in `marketConfigData`.\\n  uint256 private constant MINT_FLAG_OFFSET = 0;\\n\\n  /// @dev The offset of redeem flag in `marketConfigData`.\\n  uint256 private constant REDEEM_FLAG_OFFSET = 1;\\n\\n  /// @dev The offset of stability mode mint flag in `marketConfigData`.\\n  uint256 private constant MINT_FLAG_STABILITY_OFFSET = 2;\\n\\n  /// @dev The offset of stability mode redeem flag in `marketConfigData`.\\n  uint256 private constant REDEEM_FLAG_STABILITY_OFFSET = 3;\\n\\n  /// @dev The offset of stability ratio in `marketConfigData`.\\n  uint256 private constant STABILITY_RATIO_OFFSET = 34;\\n\\n  /// @dev The offset of default fToken fee ratio in `mintFeeData` and `redeemFeeData`.\\n  uint256 private constant FTOKEN_DEFAULT_FEE_OFFSET = 0;\\n\\n  /// @dev The offset of delta fToken fee ratio in `mintFeeData` and `redeemFeeData`.\\n  uint256 private constant FTOKEN_DELTA_FEE_OFFSET = 64;\\n\\n  /// @dev The offset of default xToken fee ratio in `mintFeeData` and `redeemFeeData`.\\n  uint256 private constant XTOKEN_DEFAULT_FEE_OFFSET = 128;\\n\\n  /// @dev The offset of delta xToken fee ratio in `mintFeeData` and `redeemFeeData`.\\n  uint256 private constant XTOKEN_DELTA_FEE_OFFSET = 192;\\n\\n  /// @inheritdoc IFxMarketV2\\n  address public immutable override treasury;\\n\\n  /// @inheritdoc IFxMarketV2\\n  address public immutable override baseToken;\\n\\n  /// @inheritdoc IFxMarketV2\\n  address public immutable override fToken;\\n\\n  /// @inheritdoc IFxMarketV2\\n  address public immutable override xToken;\\n\\n  /*************\\n   * Variables *\\n   *************/\\n\\n  /// @dev `marketConfigData` is a storage slot that can be used to store market configuration.\\n  ///\\n  /// - The *mint flag* indicate whether the token mint is paused (both fToken and xToken).\\n  /// - The *redeem flag* indicate whether the token redeem is paused (both fToken and xToken).\\n  /// - The *mint flag stability* indicate whether the fToken mint is paused in stability mode.\\n  /// - The *redeem flag stability* indicate whether the xToken redeem is paused in stability mode.\\n  /// - The *stability ratio* is the collateral ratio to enter stability mode, multiplied by 1e18.\\n  ///\\n  /// [ mint flag | redeem flag | mint flag stability | redeem flag stability | stability ratio | available ]\\n  /// [   1 bit   |    1 bit    |        1 bit        |         1 bit         |     64 bits     |  188 bits ]\\n  /// [ MSB                                                                                             LSB ]\\n  bytes32 private marketConfigData;\\n\\n  /// @dev `mintFeeData` is a storage slot that can be used to store mint fee ratio.\\n  ///\\n  /// [ default fToken | delta fToken | default xToken | delta xToken |\\n  /// [     64 bit     |    64 bit    |     64 bit     |    64 bit    ]\\n  /// [ MSB                                                       LSB ]\\n  bytes32 private mintFeeData;\\n\\n  /// @dev `redeemFeeData` is a storage slot that can be used to store redeem fee ratio.\\n  ///\\n  /// [ default fToken | delta fToken | default xToken | delta xToken |\\n  /// [     64 bit     |    64 bit    |     64 bit     |    64 bit    ]\\n  /// [ MSB                                                       LSB ]\\n  bytes32 private redeemFeeData;\\n\\n  /// @notice The address of platform contract;\\n  address public platform;\\n\\n  /// @notice The address of ReservePool contract.\\n  address public reservePool;\\n\\n  /// @notice The address of RebalancePoolRegistry contract.\\n  address public registry;\\n\\n  /// @notice The address of fxUSD token.\\n  address public fxUSD;\\n\\n  /***************\\n   * Constructor *\\n   ***************/\\n\\n  constructor(address _treasury) {\\n    treasury = _treasury;\\n\\n    baseToken = IFxTreasuryV2(_treasury).baseToken();\\n    fToken = IFxTreasuryV2(_treasury).fToken();\\n    xToken = IFxTreasuryV2(_treasury).xToken();\\n  }\\n\\n  function initialize(\\n    address _platform,\\n    address _reservePool,\\n    address _registry\\n  ) external initializer {\\n    __Context_init();\\n    __ERC165_init();\\n    __AccessControl_init();\\n    __ReentrancyGuard_init();\\n\\n    _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());\\n\\n    _updatePlatform(_platform);\\n    _updateReservePool(_reservePool);\\n    _updateRebalancePoolRegistry(_registry);\\n  }\\n\\n  /*************************\\n   * Public View Functions *\\n   *************************/\\n\\n  /// @notice Return whether token mint is paused.\\n  function mintPaused() public view returns (bool) {\\n    return marketConfigData.decodeBool(MINT_FLAG_OFFSET);\\n  }\\n\\n  /// @notice Return whether token redeem is paused.\\n  function redeemPaused() public view returns (bool) {\\n    return marketConfigData.decodeBool(REDEEM_FLAG_OFFSET);\\n  }\\n\\n  /// @notice Return whether fToken mint is paused in stability mode.\\n  function fTokenMintPausedInStabilityMode() public view returns (bool) {\\n    return marketConfigData.decodeBool(MINT_FLAG_STABILITY_OFFSET);\\n  }\\n\\n  /// @notice Return whether xToken redeem is paused in stability mode.\\n  function xTokenRedeemPausedInStabilityMode() public view returns (bool) {\\n    return marketConfigData.decodeBool(REDEEM_FLAG_STABILITY_OFFSET);\\n  }\\n\\n  /// @inheritdoc IFxMarketV2\\n  function stabilityRatio() public view returns (uint256) {\\n    return marketConfigData.decodeUint(STABILITY_RATIO_OFFSET, 64);\\n  }\\n\\n  /// @notice The mint fee ratio for fToken.\\n  function fTokenMintFeeRatio() public view returns (uint256 defaultFee, int256 deltaFee) {\\n    bytes32 _mintFeeData = mintFeeData;\\n    defaultFee = _mintFeeData.decodeUint(FTOKEN_DEFAULT_FEE_OFFSET, 64);\\n    deltaFee = _mintFeeData.decodeInt(FTOKEN_DELTA_FEE_OFFSET, 64);\\n  }\\n\\n  /// @notice The mint fee ratio for xToken.\\n  function xTokenMintFeeRatio() public view returns (uint256 defaultFee, int256 deltaFee) {\\n    bytes32 _mintFeeData = mintFeeData;\\n    defaultFee = _mintFeeData.decodeUint(XTOKEN_DEFAULT_FEE_OFFSET, 64);\\n    deltaFee = _mintFeeData.decodeInt(XTOKEN_DELTA_FEE_OFFSET, 64);\\n  }\\n\\n  /// @notice The redeem fee ratio for fToken.\\n  function fTokenRedeemFeeRatio() public view returns (uint256 defaultFee, int256 deltaFee) {\\n    bytes32 _redeemFeeData = redeemFeeData;\\n    defaultFee = _redeemFeeData.decodeUint(FTOKEN_DEFAULT_FEE_OFFSET, 64);\\n    deltaFee = _redeemFeeData.decodeInt(FTOKEN_DELTA_FEE_OFFSET, 64);\\n  }\\n\\n  /// @notice The redeem fee ratio for xToken.\\n  function xTokenRedeemFeeRatio() public view returns (uint256 defaultFee, int256 deltaFee) {\\n    bytes32 _redeemFeeData = redeemFeeData;\\n    defaultFee = _redeemFeeData.decodeUint(XTOKEN_DEFAULT_FEE_OFFSET, 64);\\n    deltaFee = _redeemFeeData.decodeInt(XTOKEN_DELTA_FEE_OFFSET, 64);\\n  }\\n\\n  /****************************\\n   * Public Mutated Functions *\\n   ****************************/\\n\\n  /// @inheritdoc IFxMarketV2\\n  function mintFToken(\\n    uint256 _baseIn,\\n    address _recipient,\\n    uint256 _minFTokenMinted\\n  ) external override nonReentrant returns (uint256 _fTokenMinted) {\\n    if (mintPaused()) revert ErrorMintPaused();\\n\\n    // make sure caller is fxUSD, when fxUSD is enabled\\n    {\\n      address _fxUSD = fxUSD;\\n      if (_fxUSD != address(0) && _fxUSD != _msgSender()) revert ErrorCallerNotFUSD();\\n    }\\n\\n    if (_baseIn == type(uint256).max) {\\n      _baseIn = IERC20Upgradeable(baseToken).balanceOf(_msgSender());\\n    }\\n    if (_baseIn == 0) revert ErrorMintZeroAmount();\\n\\n    uint256 _stabilityRatio = stabilityRatio();\\n    (uint256 _maxBaseInBeforeSystemStabilityMode, ) = IFxTreasuryV2(treasury).maxMintableFToken(_stabilityRatio);\\n    if (_maxBaseInBeforeSystemStabilityMode > 0) {\\n      _maxBaseInBeforeSystemStabilityMode = IFxTreasuryV2(treasury).getWrapppedValue(\\n        _maxBaseInBeforeSystemStabilityMode\\n      );\\n    }\\n\\n    if (fTokenMintPausedInStabilityMode()) {\\n      uint256 _collateralRatio = IFxTreasuryV2(treasury).collateralRatio();\\n      if (_collateralRatio <= _stabilityRatio) revert ErrorFTokenMintPausedInStabilityMode();\\n\\n      // bound maximum amount of base token to mint fToken.\\n      if (_baseIn > _maxBaseInBeforeSystemStabilityMode) {\\n        _baseIn = _maxBaseInBeforeSystemStabilityMode;\\n      }\\n    }\\n\\n    uint256 _amountWithoutFee = _deductFTokenMintFee(_baseIn, _maxBaseInBeforeSystemStabilityMode);\\n    IERC20Upgradeable(baseToken).safeTransferFrom(_msgSender(), treasury, _amountWithoutFee);\\n\\n    _fTokenMinted = IFxTreasuryV2(treasury).mintFToken(\\n      IFxTreasuryV2(treasury).getUnderlyingValue(_amountWithoutFee),\\n      _recipient\\n    );\\n    if (_fTokenMinted < _minFTokenMinted) revert ErrorInsufficientFTokenOutput();\\n\\n    emit MintFToken(_msgSender(), _recipient, _baseIn, _fTokenMinted, _baseIn - _amountWithoutFee);\\n  }\\n\\n  /// @inheritdoc IFxMarketV2\\n  function mintXToken(\\n    uint256 _baseIn,\\n    address _recipient,\\n    uint256 _minXTokenMinted\\n  ) external override nonReentrant returns (uint256 _xTokenMinted, uint256 _bonus) {\\n    if (mintPaused()) revert ErrorMintPaused();\\n\\n    if (_baseIn == type(uint256).max) {\\n      _baseIn = IERC20Upgradeable(baseToken).balanceOf(_msgSender());\\n    }\\n    if (_baseIn == 0) revert ErrorMintZeroAmount();\\n\\n    uint256 _stabilityRatio = stabilityRatio();\\n    (uint256 _maxBaseInBeforeSystemStabilityMode, ) = IFxTreasuryV2(treasury).maxMintableXToken(_stabilityRatio);\\n    if (_maxBaseInBeforeSystemStabilityMode > 0) {\\n      _maxBaseInBeforeSystemStabilityMode = IFxTreasuryV2(treasury).getWrapppedValue(\\n        _maxBaseInBeforeSystemStabilityMode\\n      );\\n    }\\n\\n    uint256 _amountWithoutFee = _deductXTokenMintFee(_baseIn, _maxBaseInBeforeSystemStabilityMode);\\n    IERC20Upgradeable(baseToken).safeTransferFrom(_msgSender(), treasury, _amountWithoutFee);\\n\\n    _xTokenMinted = IFxTreasuryV2(treasury).mintXToken(\\n      IFxTreasuryV2(treasury).getUnderlyingValue(_amountWithoutFee),\\n      _recipient\\n    );\\n    if (_xTokenMinted < _minXTokenMinted) revert ErrorInsufficientXTokenOutput();\\n\\n    // give bnous\\n    if (_amountWithoutFee < _maxBaseInBeforeSystemStabilityMode) {\\n      _bonus = _amountWithoutFee;\\n    } else {\\n      _bonus = _maxBaseInBeforeSystemStabilityMode;\\n    }\\n    if (_bonus > 0 && IFxRebalancePoolRegistry(registry).totalSupply() == 0) {\\n      _bonus = IFxReservePool(reservePool).requestBonus(baseToken, _recipient, _bonus);\\n    } else {\\n      _bonus = 0;\\n    }\\n\\n    emit MintXToken(_msgSender(), _recipient, _baseIn, _xTokenMinted, _bonus, _baseIn - _amountWithoutFee);\\n  }\\n\\n  /// @inheritdoc IFxMarketV2\\n  function redeemFToken(\\n    uint256 _fTokenIn,\\n    address _recipient,\\n    uint256 _minBaseOut\\n  ) external override nonReentrant returns (uint256 _baseOut, uint256 _bonus) {\\n    if (redeemPaused()) revert ErrorRedeemPaused();\\n\\n    if (_fTokenIn == type(uint256).max) {\\n      _fTokenIn = IERC20Upgradeable(fToken).balanceOf(_msgSender());\\n    }\\n    if (_fTokenIn == 0) revert ErrorRedeemZeroAmount();\\n\\n    uint256 _stabilityRatio = stabilityRatio();\\n    (uint256 _maxBaseOut, uint256 _maxFTokenInBeforeSystemStabilityMode) = IFxTreasuryV2(treasury).maxRedeemableFToken(\\n      _stabilityRatio\\n    );\\n    uint256 _feeRatio = _computeFTokenRedeemFeeRatio(_fTokenIn, _maxFTokenInBeforeSystemStabilityMode);\\n\\n    _baseOut = IFxTreasuryV2(treasury).redeem(_fTokenIn, 0, _msgSender());\\n    // give bonus when redeem fToken\\n    if (_baseOut < _maxBaseOut) {\\n      _bonus = _baseOut;\\n    } else {\\n      _bonus = _maxBaseOut;\\n    }\\n\\n    // request bonus\\n    if (_bonus > 0 && IFxRebalancePoolRegistry(registry).totalSupply() == 0) {\\n      (uint256 _defaultRatio, int256 _deltaRatio) = fTokenMintFeeRatio();\\n      _bonus -= (_bonus * uint256(int256(_defaultRatio) + _deltaRatio)) / FEE_PRECISION; // deduct fee\\n      _bonus = IFxReservePool(reservePool).requestBonus(\\n        baseToken,\\n        _recipient,\\n        IFxTreasuryV2(treasury).getWrapppedValue(_bonus)\\n      );\\n    } else {\\n      _bonus = 0;\\n    }\\n\\n    _baseOut = IFxTreasuryV2(treasury).getWrapppedValue(_baseOut);\\n    uint256 _balance = IERC20Upgradeable(baseToken).balanceOf(address(this));\\n    // consider possible slippage\\n    if (_balance < _baseOut) {\\n      _baseOut = _balance;\\n    }\\n\\n    uint256 _fee = (_baseOut * _feeRatio) / FEE_PRECISION;\\n    if (_fee > 0) {\\n      IERC20Upgradeable(baseToken).safeTransfer(platform, _fee);\\n      _baseOut = _baseOut - _fee;\\n    }\\n    if (_baseOut < _minBaseOut) revert ErrorInsufficientBaseOutput();\\n\\n    IERC20Upgradeable(baseToken).safeTransfer(_recipient, _baseOut);\\n\\n    emit RedeemFToken(_msgSender(), _recipient, _fTokenIn, _baseOut, _bonus, _fee);\\n  }\\n\\n  /// @inheritdoc IFxMarketV2\\n  function redeemXToken(\\n    uint256 _xTokenIn,\\n    address _recipient,\\n    uint256 _minBaseOut\\n  ) external override nonReentrant returns (uint256 _baseOut) {\\n    if (redeemPaused()) revert ErrorRedeemPaused();\\n\\n    if (_xTokenIn == type(uint256).max) {\\n      _xTokenIn = IERC20Upgradeable(xToken).balanceOf(_msgSender());\\n    }\\n    if (_xTokenIn == 0) revert ErrorRedeemZeroAmount();\\n\\n    uint256 _stabilityRatio = stabilityRatio();\\n    uint256 _feeRatio;\\n    (, uint256 _maxXTokenInBeforeSystemStabilityMode) = IFxTreasuryV2(treasury).maxRedeemableXToken(_stabilityRatio);\\n\\n    if (xTokenRedeemPausedInStabilityMode()) {\\n      uint256 _collateralRatio = IFxTreasuryV2(treasury).collateralRatio();\\n      if (_collateralRatio <= _stabilityRatio) revert ErrorXTokenRedeemPausedInStabilityMode();\\n\\n      // bound maximum amount of xToken to redeem.\\n      if (_xTokenIn > _maxXTokenInBeforeSystemStabilityMode) {\\n        _xTokenIn = _maxXTokenInBeforeSystemStabilityMode;\\n      }\\n    }\\n\\n    _feeRatio = _computeXTokenRedeemFeeRatio(_xTokenIn, _maxXTokenInBeforeSystemStabilityMode);\\n\\n    _baseOut = IFxTreasuryV2(treasury).redeem(0, _xTokenIn, _msgSender());\\n    _baseOut = IFxTreasuryV2(treasury).getWrapppedValue(_baseOut);\\n    uint256 _balance = IERC20Upgradeable(baseToken).balanceOf(address(this));\\n    // consider possible slippage\\n    if (_balance < _baseOut) {\\n      _baseOut = _balance;\\n    }\\n\\n    uint256 _fee = (_baseOut * _feeRatio) / FEE_PRECISION;\\n    if (_fee > 0) {\\n      IERC20Upgradeable(baseToken).safeTransfer(platform, _fee);\\n      _baseOut = _baseOut - _fee;\\n    }\\n    if (_baseOut < _minBaseOut) revert ErrorInsufficientBaseOutput();\\n\\n    IERC20Upgradeable(baseToken).safeTransfer(_recipient, _baseOut);\\n\\n    emit RedeemXToken(_msgSender(), _recipient, _xTokenIn, _baseOut, _fee);\\n  }\\n\\n  /*******************************\\n   * Public Restricted Functions *\\n   *******************************/\\n\\n  /// @notice Update the fee ratio for redeeming.\\n  /// @param _defaultFeeRatio The new default fee ratio, multipled by 1e18.\\n  /// @param _extraFeeRatio The new extra fee ratio, multipled by 1e18.\\n  /// @param _isFToken Whether we are updating for fToken.\\n  function updateRedeemFeeRatio(\\n    uint256 _defaultFeeRatio,\\n    int256 _extraFeeRatio,\\n    bool _isFToken\\n  ) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n    _validateFeeRatio(_defaultFeeRatio, _extraFeeRatio);\\n\\n    bytes32 _redeemFeeData = redeemFeeData;\\n    if (_isFToken) {\\n      _redeemFeeData = _redeemFeeData.insertUint(_defaultFeeRatio, FTOKEN_DEFAULT_FEE_OFFSET, 64);\\n      _redeemFeeData = _redeemFeeData.insertInt(_extraFeeRatio, FTOKEN_DELTA_FEE_OFFSET, 64);\\n      emit UpdateRedeemFeeRatioFToken(_defaultFeeRatio, _extraFeeRatio);\\n    } else {\\n      _redeemFeeData = _redeemFeeData.insertUint(_defaultFeeRatio, XTOKEN_DEFAULT_FEE_OFFSET, 64);\\n      _redeemFeeData = _redeemFeeData.insertInt(_extraFeeRatio, XTOKEN_DELTA_FEE_OFFSET, 64);\\n      emit UpdateRedeemFeeRatioXToken(_defaultFeeRatio, _extraFeeRatio);\\n    }\\n    redeemFeeData = _redeemFeeData;\\n  }\\n\\n  /// @notice Update the fee ratio for minting.\\n  /// @param _defaultFeeRatio The new default fee ratio, multipled by 1e18.\\n  /// @param _extraFeeRatio The new extra fee ratio, multipled by 1e18.\\n  /// @param _isFToken Whether we are updating for fToken.\\n  function updateMintFeeRatio(\\n    uint128 _defaultFeeRatio,\\n    int128 _extraFeeRatio,\\n    bool _isFToken\\n  ) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n    _validateFeeRatio(_defaultFeeRatio, _extraFeeRatio);\\n\\n    bytes32 _mintFeeData = mintFeeData;\\n    if (_isFToken) {\\n      _mintFeeData = _mintFeeData.insertUint(_defaultFeeRatio, FTOKEN_DEFAULT_FEE_OFFSET, 64);\\n      _mintFeeData = _mintFeeData.insertInt(_extraFeeRatio, FTOKEN_DELTA_FEE_OFFSET, 64);\\n      emit UpdateMintFeeRatioFToken(_defaultFeeRatio, _extraFeeRatio);\\n    } else {\\n      _mintFeeData = _mintFeeData.insertUint(_defaultFeeRatio, XTOKEN_DEFAULT_FEE_OFFSET, 64);\\n      _mintFeeData = _mintFeeData.insertInt(_extraFeeRatio, XTOKEN_DELTA_FEE_OFFSET, 64);\\n      emit UpdateMintFeeRatioXToken(_defaultFeeRatio, _extraFeeRatio);\\n    }\\n    mintFeeData = _mintFeeData;\\n  }\\n\\n  /// @notice Update the stability ratio.\\n  /// @param _newRatio The new collateral ratio to enter stability mode, multiplied by 1e18.\\n  function updateStabilityRatio(uint256 _newRatio) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n    _updateStabilityRatio(_newRatio);\\n  }\\n\\n  /// @notice Update mint pause status.\\n  /// @param _newStatus The new mint pause status.\\n  function updateMintStatus(bool _newStatus) external onlyRole(EMERGENCY_DAO_ROLE) {\\n    bool _oldStatus = _updateBoolInMarketConfigData(MINT_FLAG_OFFSET, _newStatus);\\n\\n    emit UpdateMintStatus(_oldStatus, _newStatus);\\n  }\\n\\n  /// @notice Update redeem pause status.\\n  /// @param _newStatus The new redeem pause status.\\n  function updateRedeemStatus(bool _newStatus) external onlyRole(EMERGENCY_DAO_ROLE) {\\n    bool _oldStatus = _updateBoolInMarketConfigData(REDEEM_FLAG_OFFSET, _newStatus);\\n\\n    emit UpdateRedeemStatus(_oldStatus, _newStatus);\\n  }\\n\\n  /// @notice Update fToken mint pause status in stability mode.\\n  /// @param _newStatus The new mint pause status.\\n  function updateFTokenMintStatusInStabilityMode(bool _newStatus) external onlyRole(EMERGENCY_DAO_ROLE) {\\n    bool _oldStatus = _updateBoolInMarketConfigData(MINT_FLAG_STABILITY_OFFSET, _newStatus);\\n\\n    emit UpdateFTokenMintStatusInStabilityMode(_oldStatus, _newStatus);\\n  }\\n\\n  /// @notice Update xToken redeem status in stability mode\\n  /// @param _newStatus The new redeem pause status.\\n  function updateXTokenRedeemStatusInStabilityMode(bool _newStatus) external onlyRole(EMERGENCY_DAO_ROLE) {\\n    bool _oldStatus = _updateBoolInMarketConfigData(REDEEM_FLAG_STABILITY_OFFSET, _newStatus);\\n\\n    emit UpdateXTokenRedeemStatusInStabilityMode(_oldStatus, _newStatus);\\n  }\\n\\n  /// @notice Change address of platform contract.\\n  /// @param _newPlatform The new address of platform contract.\\n  function updatePlatform(address _newPlatform) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n    _updatePlatform(_newPlatform);\\n  }\\n\\n  /// @notice Change address of reserve pool contract.\\n  /// @param _newReservePool The new address of reserve pool contract.\\n  function updateReservePool(address _newReservePool) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n    _updateReservePool(_newReservePool);\\n  }\\n\\n  /// @notice Change address of RebalancePoolRegistry contract.\\n  /// @param _newRegistry The new address of RebalancePoolRegistry contract.\\n  function updateRebalancePoolRegistry(address _newRegistry) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n    _updateRebalancePoolRegistry(_newRegistry);\\n  }\\n\\n  /// @notice Enable fxUSD mint.\\n  /// @param _fxUSD The address of fxUSD token.\\n  function enableFxUSD(address _fxUSD) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n    if (_fxUSD == address(0)) revert ErrorZeroAddress();\\n\\n    if (fxUSD == address(0)) fxUSD = _fxUSD;\\n  }\\n\\n  /**********************\\n   * Internal Functions *\\n   **********************/\\n\\n  /// @dev Internal function to validate fee ratio.\\n  function _validateFeeRatio(uint256 _defaultFeeRatio, int256 _extraFeeRatio) internal pure {\\n    if (_defaultFeeRatio > FEE_PRECISION) revert ErrorDefaultFeeTooLarge();\\n    if (_extraFeeRatio < 0) {\\n      if (uint256(-_extraFeeRatio) > _defaultFeeRatio) revert ErrorDeltaFeeTooSmall();\\n    } else {\\n      if (uint256(_extraFeeRatio) > FEE_PRECISION - _defaultFeeRatio) revert ErrorTotalFeeTooLarge();\\n    }\\n  }\\n\\n  /// @dev Internal function to update bool value in `marketConfigData`.\\n  /// @param offset The offset of the value in `marketConfigData`.\\n  /// @param newValue The value to update.\\n  /// @return oldValue The original value in the `offset`.\\n  function _updateBoolInMarketConfigData(uint256 offset, bool newValue) private returns (bool oldValue) {\\n    bytes32 _data = marketConfigData;\\n    oldValue = _data.decodeBool(offset);\\n    marketConfigData = _data.insertBool(newValue, offset);\\n  }\\n\\n  /// @dev Internal function to update stability ratio.\\n  /// @param _newRatio The new collateral ratio to enter stability mode, multiplied by 1e18.\\n  function _updateStabilityRatio(uint256 _newRatio) private {\\n    if (_newRatio > type(uint64).max) revert ErrorStabilityRatioTooLarge();\\n\\n    bytes32 _data = marketConfigData;\\n    uint256 _oldRatio = _data.decodeUint(STABILITY_RATIO_OFFSET, 64);\\n    marketConfigData = _data.insertUint(_newRatio, STABILITY_RATIO_OFFSET, 64);\\n\\n    emit UpdateStabilityRatio(_oldRatio, _newRatio);\\n  }\\n\\n  /// @notice Change address of platform contract.\\n  /// @param _newPlatform The new address of platform contract.\\n  function _updatePlatform(address _newPlatform) private {\\n    if (_newPlatform == address(0)) revert ErrorZeroAddress();\\n\\n    address _oldPlatform = platform;\\n    platform = _newPlatform;\\n\\n    emit UpdatePlatform(_oldPlatform, _newPlatform);\\n  }\\n\\n  /// @notice Change address of reserve pool contract.\\n  /// @param _newReservePool The new address of reserve pool contract.\\n  function _updateReservePool(address _newReservePool) private {\\n    if (_newReservePool == address(0)) revert ErrorZeroAddress();\\n\\n    address _oldReservePool = reservePool;\\n    reservePool = _newReservePool;\\n\\n    emit UpdateReservePool(_oldReservePool, _newReservePool);\\n  }\\n\\n  /// @notice Change address of RebalancePoolRegistry contract.\\n  /// @param _newRegistry The new address of RebalancePoolRegistry contract.\\n  function _updateRebalancePoolRegistry(address _newRegistry) private {\\n    if (_newRegistry == address(0)) revert ErrorZeroAddress();\\n\\n    address _oldRegistry = registry;\\n    registry = _newRegistry;\\n\\n    emit UpdateRebalancePoolRegistry(_oldRegistry, _newRegistry);\\n  }\\n\\n  /// @dev Internal function to deduct fToken mint fee for base token.\\n  /// @param _baseIn The amount of base token.\\n  /// @param _maxBaseInBeforeSystemStabilityMode The maximum amount of base token can be deposit before entering system stability mode.\\n  /// @return _baseInWithoutFee The amount of base token without fee.\\n  function _deductFTokenMintFee(uint256 _baseIn, uint256 _maxBaseInBeforeSystemStabilityMode)\\n    private\\n    returns (uint256 _baseInWithoutFee)\\n  {\\n    // [0, _maxBaseInBeforeSystemStabilityMode) => default = fee_ratio_0\\n    // [_maxBaseInBeforeSystemStabilityMode, infinity) => default + extra = fee_ratio_1\\n\\n    (uint256 _defaultRatio, int256 _deltaRatio) = fTokenMintFeeRatio();\\n    uint256 _feeRatio0 = _defaultRatio;\\n    uint256 _feeRatio1 = uint256(int256(_defaultRatio) + _deltaRatio);\\n\\n    _baseInWithoutFee = _deductMintFee(_baseIn, _feeRatio0, _feeRatio1, _maxBaseInBeforeSystemStabilityMode);\\n  }\\n\\n  /// @dev Internal function to deduct fToken mint fee for base token.\\n  /// @param _baseIn The amount of base token.\\n  /// @param _maxBaseInBeforeSystemStabilityMode The maximum amount of base token can be deposit before entering system stability mode.\\n  /// @return _baseInWithoutFee The amount of base token without fee.\\n  function _deductXTokenMintFee(uint256 _baseIn, uint256 _maxBaseInBeforeSystemStabilityMode)\\n    private\\n    returns (uint256 _baseInWithoutFee)\\n  {\\n    // [0, _maxBaseInBeforeSystemStabilityMode) => default + extra = fee_ratio_0\\n    // [_maxBaseInBeforeSystemStabilityMode, infinity) => default = fee_ratio_1\\n\\n    (uint256 _defaultRatio, int256 _deltaRatio) = xTokenMintFeeRatio();\\n    uint256 _feeRatio0 = uint256(int256(_defaultRatio) + _deltaRatio);\\n    uint256 _feeRatio1 = _defaultRatio;\\n\\n    _baseInWithoutFee = _deductMintFee(_baseIn, _feeRatio0, _feeRatio1, _maxBaseInBeforeSystemStabilityMode);\\n  }\\n\\n  function _deductMintFee(\\n    uint256 _baseIn,\\n    uint256 _feeRatio0,\\n    uint256 _feeRatio1,\\n    uint256 _maxBaseInBeforeSystemStabilityMode\\n  ) private returns (uint256 _baseInWithoutFee) {\\n    uint256 _maxBaseIn = (_maxBaseInBeforeSystemStabilityMode * FEE_PRECISION) / (FEE_PRECISION - _feeRatio0);\\n\\n    // compute fee\\n    uint256 _fee;\\n    if (_baseIn <= _maxBaseIn) {\\n      _fee = (_baseIn * _feeRatio0) / FEE_PRECISION;\\n    } else {\\n      _fee = (_maxBaseIn * _feeRatio0) / FEE_PRECISION;\\n      _fee += ((_baseIn - _maxBaseIn) * _feeRatio1) / FEE_PRECISION;\\n    }\\n\\n    _baseInWithoutFee = _baseIn - _fee;\\n    // take fee to platform\\n    if (_fee > 0) {\\n      IERC20Upgradeable(baseToken).safeTransferFrom(_msgSender(), platform, _fee);\\n    }\\n  }\\n\\n  /// @dev Internal function to deduct mint fee for base token.\\n  /// @param _amountIn The amount of fToken.\\n  /// @param _maxInBeforeSystemStabilityMode The maximum amount of fToken can be redeemed before leaving system stability mode.\\n  /// @return _feeRatio The computed fee ratio for base token redeemed.\\n  function _computeFTokenRedeemFeeRatio(uint256 _amountIn, uint256 _maxInBeforeSystemStabilityMode)\\n    private\\n    view\\n    returns (uint256 _feeRatio)\\n  {\\n    // [0, _maxBaseInBeforeSystemStabilityMode) => default + extra = fee_ratio_0\\n    // [_maxBaseInBeforeSystemStabilityMode, infinity) => default = fee_ratio_1\\n\\n    (uint256 _defaultRatio, int256 _deltaRatio) = fTokenRedeemFeeRatio();\\n    uint256 _feeRatio0 = uint256(int256(_defaultRatio) + _deltaRatio);\\n    uint256 _feeRatio1 = _defaultRatio;\\n\\n    _feeRatio = _computeRedeemFeeRatio(_amountIn, _feeRatio0, _feeRatio1, _maxInBeforeSystemStabilityMode);\\n  }\\n\\n  /// @dev Internal function to deduct mint fee for base token.\\n  /// @param _amountIn The amount of xToken.\\n  /// @param _maxInBeforeSystemStabilityMode The maximum amount of xToken can be redeemed before entering system stability mode.\\n  /// @return _feeRatio The computed fee ratio for base token redeemed.\\n  function _computeXTokenRedeemFeeRatio(uint256 _amountIn, uint256 _maxInBeforeSystemStabilityMode)\\n    private\\n    view\\n    returns (uint256 _feeRatio)\\n  {\\n    // [0, _maxBaseInBeforeSystemStabilityMode) => default = fee_ratio_0\\n    // [_maxBaseInBeforeSystemStabilityMode, infinity) => default + extra = fee_ratio_1\\n\\n    (uint256 _defaultRatio, int256 _deltaRatio) = xTokenRedeemFeeRatio();\\n    uint256 _feeRatio0 = _defaultRatio;\\n    uint256 _feeRatio1 = uint256(int256(_defaultRatio) + _deltaRatio);\\n\\n    _feeRatio = _computeRedeemFeeRatio(_amountIn, _feeRatio0, _feeRatio1, _maxInBeforeSystemStabilityMode);\\n  }\\n\\n  /// @dev Internal function to deduct mint fee for base token.\\n  /// @param _amountIn The amount of fToken or xToken.\\n  /// @param _feeRatio0 The default fee ratio.\\n  /// @param _feeRatio1 The second fee ratio.\\n  /// @param _maxInBeforeSystemStabilityMode The maximum amount of fToken/xToken can be redeemed before entering/leaving system stability mode.\\n  /// @return _feeRatio The computed fee ratio for base token redeemed.\\n  function _computeRedeemFeeRatio(\\n    uint256 _amountIn,\\n    uint256 _feeRatio0,\\n    uint256 _feeRatio1,\\n    uint256 _maxInBeforeSystemStabilityMode\\n  ) private pure returns (uint256 _feeRatio) {\\n    if (_amountIn <= _maxInBeforeSystemStabilityMode) {\\n      return _feeRatio0;\\n    }\\n    uint256 _fee = _maxInBeforeSystemStabilityMode * _feeRatio0;\\n    _fee += (_amountIn - _maxInBeforeSystemStabilityMode) * _feeRatio1;\\n    return _fee / _amountIn;\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/f(x)/IFxMarketV2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface IFxMarketV2 {\\n  /**********\\n   * Events *\\n   **********/\\n\\n  /// @notice Emitted when fToken is minted.\\n  /// @param owner The address of base token owner.\\n  /// @param recipient The address of receiver for fToken or xToken.\\n  /// @param baseTokenIn The amount of base token deposited.\\n  /// @param fTokenOut The amount of fToken minted.\\n  /// @param mintFee The amount of mint fee charged.\\n  event MintFToken(\\n    address indexed owner,\\n    address indexed recipient,\\n    uint256 baseTokenIn,\\n    uint256 fTokenOut,\\n    uint256 mintFee\\n  );\\n\\n  /// @notice Emitted when xToken is minted.\\n  /// @param owner The address of base token owner.\\n  /// @param recipient The address of receiver for fToken or xToken.\\n  /// @param baseTokenIn The amount of base token deposited.\\n  /// @param xTokenOut The amount of xToken minted.\\n  /// @param bonus The amount of base token as bonus.\\n  /// @param mintFee The amount of mint fee charged.\\n  event MintXToken(\\n    address indexed owner,\\n    address indexed recipient,\\n    uint256 baseTokenIn,\\n    uint256 xTokenOut,\\n    uint256 bonus,\\n    uint256 mintFee\\n  );\\n\\n  /// @notice Emitted when someone redeem base token with fToken or xToken.\\n  /// @param owner The address of fToken and xToken owner.\\n  /// @param recipient The address of receiver for base token.\\n  /// @param fTokenBurned The amount of fToken burned.\\n  /// @param baseTokenOut The amount of base token redeemed.\\n  /// @param bonus The amount of base token as bonus.\\n  /// @param redeemFee The amount of redeem fee charged.\\n  event RedeemFToken(\\n    address indexed owner,\\n    address indexed recipient,\\n    uint256 fTokenBurned,\\n    uint256 baseTokenOut,\\n    uint256 bonus,\\n    uint256 redeemFee\\n  );\\n\\n  /// @notice Emitted when someone redeem base token with fToken or xToken.\\n  /// @param owner The address of fToken and xToken owner.\\n  /// @param recipient The address of receiver for base token.\\n  /// @param xTokenBurned The amount of xToken burned.\\n  /// @param baseTokenOut The amount of base token redeemed.\\n  /// @param redeemFee The amount of redeem fee charged.\\n  event RedeemXToken(\\n    address indexed owner,\\n    address indexed recipient,\\n    uint256 xTokenBurned,\\n    uint256 baseTokenOut,\\n    uint256 redeemFee\\n  );\\n\\n  /// @notice Emitted when the fee ratio for minting fToken is updated.\\n  /// @param defaultFeeRatio The new default fee ratio, multipled by 1e18.\\n  /// @param extraFeeRatio The new extra fee ratio, multipled by 1e18.\\n  event UpdateMintFeeRatioFToken(uint256 defaultFeeRatio, int256 extraFeeRatio);\\n\\n  /// @notice Emitted when the fee ratio for minting xToken is updated.\\n  /// @param defaultFeeRatio The new default fee ratio, multipled by 1e18.\\n  /// @param extraFeeRatio The new extra fee ratio, multipled by 1e18.\\n  event UpdateMintFeeRatioXToken(uint256 defaultFeeRatio, int256 extraFeeRatio);\\n\\n  /// @notice Emitted when the fee ratio for redeeming fToken is updated.\\n  /// @param defaultFeeRatio The new default fee ratio, multipled by 1e18.\\n  /// @param extraFeeRatio The new extra fee ratio, multipled by 1e18.\\n  event UpdateRedeemFeeRatioFToken(uint256 defaultFeeRatio, int256 extraFeeRatio);\\n\\n  /// @notice Emitted when the fee ratio for redeeming xToken is updated.\\n  /// @param defaultFeeRatio The new default fee ratio, multipled by 1e18.\\n  /// @param extraFeeRatio The new extra fee ratio, multipled by 1e18.\\n  event UpdateRedeemFeeRatioXToken(uint256 defaultFeeRatio, int256 extraFeeRatio);\\n\\n  /// @notice Emitted when the stability ratio is updated.\\n  /// @param oldRatio The previous collateral ratio to enter stability mode, multiplied by 1e18.\\n  /// @param newRatio The current collateral ratio to enter stability mode, multiplied by 1e18.\\n  event UpdateStabilityRatio(uint256 oldRatio, uint256 newRatio);\\n\\n  /// @notice Emitted when the platform contract is updated.\\n  /// @param oldPlatform The address of previous platform contract.\\n  /// @param newPlatform The address of current platform contract.\\n  event UpdatePlatform(address indexed oldPlatform, address indexed newPlatform);\\n\\n  /// @notice Emitted when the  reserve pool contract is updated.\\n  /// @param oldReservePool The address of previous reserve pool contract.\\n  /// @param newReservePool The address of current reserve pool contract.\\n  event UpdateReservePool(address indexed oldReservePool, address indexed newReservePool);\\n\\n  /// @notice Emitted when the RebalancePoolRegistry contract is updated.\\n  /// @param oldRegistry The address of previous RebalancePoolRegistry contract.\\n  /// @param newRegistry The address of current RebalancePoolRegistry contract.\\n  event UpdateRebalancePoolRegistry(address indexed oldRegistry, address indexed newRegistry);\\n\\n  /// @notice Pause or unpause mint.\\n  /// @param oldStatus The previous status for mint.\\n  /// @param newStatus The current status for mint.\\n  event UpdateMintStatus(bool oldStatus, bool newStatus);\\n\\n  /// @notice Pause or unpause redeem.\\n  /// @param oldStatus The previous status for redeem.\\n  /// @param newStatus The current status for redeem.\\n  event UpdateRedeemStatus(bool oldStatus, bool newStatus);\\n\\n  /// @notice Pause or unpause fToken mint in stability mode.\\n  /// @param oldStatus The previous status for mint.\\n  /// @param newStatus The current status for mint.\\n  event UpdateFTokenMintStatusInStabilityMode(bool oldStatus, bool newStatus);\\n\\n  /// @notice Pause or unpause xToken redeem in stability mode.\\n  /// @param oldStatus The previous status for redeem.\\n  /// @param newStatus The current status for redeem.\\n  event UpdateXTokenRedeemStatusInStabilityMode(bool oldStatus, bool newStatus);\\n\\n  /**********\\n   * Errors *\\n   **********/\\n\\n  /// @dev Thrown when the caller if not fUSD contract.\\n  error ErrorCallerNotFUSD();\\n\\n  /// @dev Thrown when token mint is paused.\\n  error ErrorMintPaused();\\n\\n  /// @dev Thrown when fToken mint is paused in stability mode.\\n  error ErrorFTokenMintPausedInStabilityMode();\\n\\n  /// @dev Thrown when mint with zero amount base token.\\n  error ErrorMintZeroAmount();\\n\\n  /// @dev Thrown when the amount of fToken is not enough.\\n  error ErrorInsufficientFTokenOutput();\\n\\n  /// @dev Thrown when the amount of xToken is not enough.\\n  error ErrorInsufficientXTokenOutput();\\n\\n  /// @dev Thrown when token redeem is paused.\\n  error ErrorRedeemPaused();\\n\\n  /// @dev Thrown when xToken redeem is paused in stability mode.\\n  error ErrorXTokenRedeemPausedInStabilityMode();\\n\\n  /// @dev Thrown when redeem with zero amount fToken or xToken.\\n  error ErrorRedeemZeroAmount();\\n\\n  /// @dev Thrown when the amount of base token is not enough.\\n  error ErrorInsufficientBaseOutput();\\n\\n  /// @dev Thrown when the stability ratio is too large.\\n  error ErrorStabilityRatioTooLarge();\\n\\n  /// @dev Thrown when the default fee is too large.\\n  error ErrorDefaultFeeTooLarge();\\n\\n  /// @dev Thrown when the delta fee is too small.\\n  error ErrorDeltaFeeTooSmall();\\n\\n  /// @dev Thrown when the sum of default fee and delta fee is too large.\\n  error ErrorTotalFeeTooLarge();\\n\\n  /// @dev Thrown when the given address is zero.\\n  error ErrorZeroAddress();\\n\\n  /*************************\\n   * Public View Functions *\\n   *************************/\\n\\n  /// @notice The address of Treasury contract.\\n  function treasury() external view returns (address);\\n\\n  /// @notice Return the address of base token.\\n  function baseToken() external view returns (address);\\n\\n  /// @notice Return the address fractional base token.\\n  function fToken() external view returns (address);\\n\\n  /// @notice Return the address leveraged base token.\\n  function xToken() external view returns (address);\\n\\n  /// @notice Return the collateral ratio to enter stability mode, multiplied by 1e18.\\n  function stabilityRatio() external view returns (uint256);\\n\\n  /****************************\\n   * Public Mutated Functions *\\n   ****************************/\\n\\n  /// @notice Mint some fToken with some base token.\\n  /// @param baseIn The amount of wrapped value of base token supplied, use `uint256(-1)` to supply all base token.\\n  /// @param recipient The address of receiver for fToken.\\n  /// @param minFTokenMinted The minimum amount of fToken should be received.\\n  /// @return fTokenMinted The amount of fToken should be received.\\n  function mintFToken(\\n    uint256 baseIn,\\n    address recipient,\\n    uint256 minFTokenMinted\\n  ) external returns (uint256 fTokenMinted);\\n\\n  /// @notice Mint some xToken with some base token.\\n  /// @param baseIn The amount of wrapped value of base token supplied, use `uint256(-1)` to supply all base token.\\n  /// @param recipient The address of receiver for xToken.\\n  /// @param minXTokenMinted The minimum amount of xToken should be received.\\n  /// @return xTokenMinted The amount of xToken should be received.\\n  /// @return bonus The amount of wrapped value of base token as bonus.\\n  function mintXToken(\\n    uint256 baseIn,\\n    address recipient,\\n    uint256 minXTokenMinted\\n  ) external returns (uint256 xTokenMinted, uint256 bonus);\\n\\n  /// @notice Redeem base token with fToken.\\n  /// @param fTokenIn the amount of fToken to redeem, use `uint256(-1)` to redeem all fToken.\\n  /// @param recipient The address of receiver for base token.\\n  /// @param minBaseOut The minimum amount of wrapped value of base token should be received.\\n  /// @return baseOut The amount of wrapped value of base token should be received.\\n  /// @return bonus The amount of wrapped value of base token as bonus.\\n  function redeemFToken(\\n    uint256 fTokenIn,\\n    address recipient,\\n    uint256 minBaseOut\\n  ) external returns (uint256 baseOut, uint256 bonus);\\n\\n  /// @notice Redeem base token with xToken.\\n  /// @param xTokenIn the amount of xToken to redeem, use `uint256(-1)` to redeem all xToken.\\n  /// @param recipient The address of receiver for base token.\\n  /// @param minBaseOut The minimum amount of wrapped value of base token should be received.\\n  /// @return baseOut The amount of wrapped value of base token should be received.\\n  function redeemXToken(\\n    uint256 xTokenIn,\\n    address recipient,\\n    uint256 minBaseOut\\n  ) external returns (uint256 baseOut);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/f(x)/IFxRebalancePoolRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0 || ^0.8.0;\\n\\ninterface IFxRebalancePoolRegistry {\\n  /**********\\n   * Events *\\n   **********/\\n\\n  /// @notice Emitted when a new rebalance pool is added.\\n  /// @param pool The address of the rebalance pool.\\n  event RegisterPool(address indexed pool);\\n\\n  /// @notice Emitted when an exsited rebalance pool is removed.\\n  /// @param pool The address of the rebalance pool.\\n  event DeregisterPool(address indexed pool);\\n\\n  /*************************\\n   * Public View Functions *\\n   *************************/\\n\\n  /// @notice Return the address list of all registered RebalancePool.\\n  function getPools() external view returns (address[] memory pools);\\n\\n  /// @notice Return the total amount of asset managed by all registered RebalancePool.\\n  function totalSupply() external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/f(x)/IFxReservePool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0 || ^0.8.0;\\n\\ninterface IFxReservePool {\\n  /// @notice Request bonus token from Reserve Pool.\\n  /// @param token The address of token to request.\\n  /// @param receiver The address recipient for the bonus token.\\n  /// @param originalAmount The original amount of token used.\\n  /// @param bonus The amount of bonus token received.\\n  function requestBonus(\\n    address token,\\n    address receiver,\\n    uint256 originalAmount\\n  ) external returns (uint256 bonus);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/f(x)/IFxTreasuryV2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface IFxTreasuryV2 {\\n  /**********\\n   * Events *\\n   **********/\\n\\n  /// @notice Emitted when the platform contract is updated.\\n  /// @param oldPlatform The address of previous platform contract.\\n  /// @param newPlatform The address of current platform contract.\\n  event UpdatePlatform(address indexed oldPlatform, address indexed newPlatform);\\n\\n  /// @notice Emitted when the RebalancePoolSplitter contract is updated.\\n  /// @param oldRebalancePoolSplitter The address of previous RebalancePoolSplitter contract.\\n  /// @param newRebalancePoolSplitter The address of current RebalancePoolSplitter.\\n  event UpdateRebalancePoolSplitter(address indexed oldRebalancePoolSplitter, address indexed newRebalancePoolSplitter);\\n\\n  /// @notice Emitted when the price oracle contract is updated.\\n  /// @param oldPriceOracle The address of previous price oracle.\\n  /// @param newPriceOracle The address of current price oracle.\\n  event UpdatePriceOracle(address indexed oldPriceOracle, address indexed newPriceOracle);\\n\\n  /// @notice Emitted when the strategy contract is updated.\\n  /// @param oldStrategy The address of previous strategy.\\n  /// @param newStrategy The address of current strategy.\\n  event UpdateStrategy(address indexed oldStrategy, address indexed newStrategy);\\n\\n  /// @notice Emitted when the base token cap is updated.\\n  /// @param oldBaseTokenCap The value of previous base token cap.\\n  /// @param newBaseTokenCap The value of current base token cap.\\n  event UpdateBaseTokenCap(uint256 oldBaseTokenCap, uint256 newBaseTokenCap);\\n\\n  /// @notice Emitted when the EMA sample interval is updated.\\n  /// @param oldSampleInterval The value of previous EMA sample interval.\\n  /// @param newSampleInterval The value of current EMA sample interval.\\n  event UpdateEMASampleInterval(uint256 oldSampleInterval, uint256 newSampleInterval);\\n\\n  /// @notice Emitted when the reference price is updated.\\n  /// @param oldPrice The value of previous reference price.\\n  /// @param newPrice The value of current reference price.\\n  event Settle(uint256 oldPrice, uint256 newPrice);\\n\\n  /// @notice Emitted when the ratio for rebalance pool is updated.\\n  /// @param oldRatio The value of the previous ratio, multipled by 1e9.\\n  /// @param newRatio The value of the current ratio, multipled by 1e9.\\n  event UpdateRebalancePoolRatio(uint256 oldRatio, uint256 newRatio);\\n\\n  /// @notice Emitted when the ratio for harvester is updated.\\n  /// @param oldRatio The value of the previous ratio, multipled by 1e9.\\n  /// @param newRatio The value of the current ratio, multipled by 1e9.\\n  event UpdateHarvesterRatio(uint256 oldRatio, uint256 newRatio);\\n\\n  /// @notice Emitted when someone harvest pending stETH rewards.\\n  /// @param caller The address of caller.\\n  /// @param totalRewards The amount of total harvested rewards.\\n  /// @param rebalancePoolRewards The amount of harvested rewards distributed to stability pool.\\n  /// @param harvestBounty The amount of harvested rewards distributed to caller as harvest bounty.\\n  event Harvest(address indexed caller, uint256 totalRewards, uint256 rebalancePoolRewards, uint256 harvestBounty);\\n\\n  /**********\\n   * Errors *\\n   **********/\\n\\n  /// @dev Thrown when the collateral ratio is smaller than 100%.\\n  error ErrorCollateralRatioTooSmall();\\n\\n  /// @dev Thrown when mint exceed total capacity.\\n  error ErrorExceedTotalCap();\\n\\n  /// @dev Thrown when the oracle price is invalid.\\n  error ErrorInvalidOraclePrice();\\n\\n  /// @dev Thrown when the twap price is invalid.\\n  error ErrorInvalidTwapPrice();\\n\\n  /// @dev Thrown when initialize protocol twice.\\n  error ErrorProtocolInitialized();\\n\\n  /// @dev Thrown when the initial amount of base token is not enough.\\n  error ErrorInsufficientInitialBaseToken();\\n\\n  /// @dev Thrown when current is under collateral.\\n  error ErrorUnderCollateral();\\n\\n  /// @dev Thrown when the sample internal for EMA is too small.\\n  error ErrorEMASampleIntervalTooSmall();\\n\\n  /// @dev Thrown when the expense ratio exceeds `MAX_REBALANCE_POOL_RATIO`.\\n  error ErrorRebalancePoolRatioTooLarge();\\n\\n  /// @dev Thrown when the harvester ratio exceeds `MAX_HARVESTER_RATIO`.\\n  error ErrorHarvesterRatioTooLarge();\\n\\n  /// @dev Thrown when the given address is zero.\\n  error ErrorZeroAddress();\\n\\n  /*********\\n   * Enums *\\n   *********/\\n\\n  enum Action {\\n    None,\\n    MintFToken,\\n    MintXToken,\\n    RedeemFToken,\\n    RedeemXToken\\n  }\\n\\n  /*************************\\n   * Public View Functions *\\n   *************************/\\n\\n  /// @notice Return the address of base token.\\n  function baseToken() external view returns (address);\\n\\n  /// @notice Return the address fractional base token.\\n  function fToken() external view returns (address);\\n\\n  /// @notice Return the address leveraged base token.\\n  function xToken() external view returns (address);\\n\\n  /// @notice The reference base token price.\\n  function referenceBaseTokenPrice() external view returns (uint256);\\n\\n  /// @notice The current base token price.\\n  function currentBaseTokenPrice() external view returns (uint256);\\n\\n  /// @notice Return whether the price is valid.\\n  function isBaseTokenPriceValid() external view returns (bool);\\n\\n  /// @notice Return the total amount of underlying value of base token deposited.\\n  function totalBaseToken() external view returns (uint256);\\n\\n  /// @notice Return the address of strategy contract.\\n  function strategy() external view returns (address);\\n\\n  /// @notice Return the total amount of base token managed by strategy.\\n  function strategyUnderlying() external view returns (uint256);\\n\\n  /// @notice Return the current collateral ratio of fToken, multipled by 1e18.\\n  function collateralRatio() external view returns (uint256);\\n\\n  /// @notice Return whether the system is under collateral.\\n  function isUnderCollateral() external view returns (bool);\\n\\n  /// @notice Compute the amount of base token needed to reach the new collateral ratio.\\n  /// @param newCollateralRatio The target collateral ratio, multipled by 1e18.\\n  /// @return maxBaseIn The amount of underlying value of base token needed.\\n  /// @return maxFTokenMintable The amount of fToken can be minted.\\n  function maxMintableFToken(uint256 newCollateralRatio)\\n    external\\n    view\\n    returns (uint256 maxBaseIn, uint256 maxFTokenMintable);\\n\\n  /// @notice Compute the amount of base token needed to reach the new collateral ratio.\\n  /// @param newCollateralRatio The target collateral ratio, multipled by 1e18.\\n  /// @return maxBaseIn The amount of underlying value of base token needed.\\n  /// @return maxXTokenMintable The amount of xToken can be minted.\\n  function maxMintableXToken(uint256 newCollateralRatio)\\n    external\\n    view\\n    returns (uint256 maxBaseIn, uint256 maxXTokenMintable);\\n\\n  /// @notice Compute the amount of fToken needed to reach the new collateral ratio.\\n  /// @param newCollateralRatio The target collateral ratio, multipled by 1e18.\\n  /// @return maxBaseOut The amount of underlying value of base token redeemed.\\n  /// @return maxFTokenRedeemable The amount of fToken needed.\\n  function maxRedeemableFToken(uint256 newCollateralRatio)\\n    external\\n    view\\n    returns (uint256 maxBaseOut, uint256 maxFTokenRedeemable);\\n\\n  /// @notice Compute the amount of xToken needed to reach the new collateral ratio.\\n  /// @param newCollateralRatio The target collateral ratio, multipled by 1e18.\\n  /// @return maxBaseOut The amount of underlying value of base token redeemed.\\n  /// @return maxXTokenRedeemable The amount of xToken needed.\\n  function maxRedeemableXToken(uint256 newCollateralRatio)\\n    external\\n    view\\n    returns (uint256 maxBaseOut, uint256 maxXTokenRedeemable);\\n\\n  /// @notice Return the exponential moving average of the leverage ratio.\\n  function leverageRatio() external view returns (uint256);\\n\\n  /// @notice Convert underlying token amount to wrapped token amount.\\n  /// @param amount The underlying token amount.\\n  function getWrapppedValue(uint256 amount) external view returns (uint256);\\n\\n  /// @notice Convert wrapped token amount to underlying token amount.\\n  /// @param amount The wrapped token amount.\\n  function getUnderlyingValue(uint256 amount) external view returns (uint256);\\n\\n  /// @notice Return the fee ratio distributed to rebalance pool, multipled by 1e9.\\n  function getRebalancePoolRatio() external view returns (uint256);\\n\\n  /// @notice Return the fee ratio distributed to harvester, multipled by 1e9.\\n  function getHarvesterRatio() external view returns (uint256);\\n\\n  /****************************\\n   * Public Mutated Functions *\\n   ****************************/\\n\\n  /// @notice Initialize the protocol.\\n  /// @param baseIn The amount of underlying value of the base token used to initialize.\\n  function initializeProtocol(uint256 baseIn) external returns (uint256 fTokenOut, uint256 xTokenOut);\\n\\n  /// @notice Mint fToken with some base token.\\n  /// @param baseIn The amount of underlying value of base token deposited.\\n  /// @param recipient The address of receiver.\\n  /// @return fTokenOut The amount of fToken minted.\\n  function mintFToken(uint256 baseIn, address recipient) external returns (uint256 fTokenOut);\\n\\n  /// @notice Mint xToken with some base token.\\n  /// @param baseIn The amount of underlying value of base token deposited.\\n  /// @param recipient The address of receiver.\\n  /// @return xTokenOut The amount of xToken minted.\\n  function mintXToken(uint256 baseIn, address recipient) external returns (uint256 xTokenOut);\\n\\n  /// @notice Redeem fToken and xToken to base tokne.\\n  /// @param fTokenIn The amount of fToken to redeem.\\n  /// @param xTokenIn The amount of xToken to redeem.\\n  /// @param owner The owner of the fToken or xToken.\\n  /// @param baseOut The amount of underlying value of base token redeemed.\\n  function redeem(\\n    uint256 fTokenIn,\\n    uint256 xTokenIn,\\n    address owner\\n  ) external returns (uint256 baseOut);\\n\\n  /// @notice Settle the nav of base token, fToken and xToken.\\n  function settle() external;\\n\\n  /// @notice Transfer some base token to strategy contract.\\n  /// @param amount The amount of token to transfer.\\n  function transferToStrategy(uint256 amount) external;\\n\\n  /// @notice Notify base token profit from strategy contract.\\n  /// @param amount The amount of base token.\\n  function notifyStrategyProfit(uint256 amount) external;\\n\\n  /// @notice Harvest pending rewards to stability pool.\\n  function harvest() external;\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"shanghai\",\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ErrorCallerNotFUSD\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrorDefaultFeeTooLarge\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrorDeltaFeeTooSmall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrorFTokenMintPausedInStabilityMode\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrorInsufficientBaseOutput\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrorInsufficientFTokenOutput\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrorInsufficientXTokenOutput\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrorMintPaused\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrorMintZeroAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrorRedeemPaused\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrorRedeemZeroAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrorStabilityRatioTooLarge\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrorTotalFeeTooLarge\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrorXTokenRedeemPausedInStabilityMode\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrorZeroAddress\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"baseTokenIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fTokenOut\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"mintFee\",\"type\":\"uint256\"}],\"name\":\"MintFToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"baseTokenIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"xTokenOut\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bonus\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"mintFee\",\"type\":\"uint256\"}],\"name\":\"MintXToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fTokenBurned\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"baseTokenOut\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bonus\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"redeemFee\",\"type\":\"uint256\"}],\"name\":\"RedeemFToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"xTokenBurned\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"baseTokenOut\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"redeemFee\",\"type\":\"uint256\"}],\"name\":\"RedeemXToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"oldStatus\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"newStatus\",\"type\":\"bool\"}],\"name\":\"UpdateFTokenMintStatusInStabilityMode\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"defaultFeeRatio\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"extraFeeRatio\",\"type\":\"int256\"}],\"name\":\"UpdateMintFeeRatioFToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"defaultFeeRatio\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"extraFeeRatio\",\"type\":\"int256\"}],\"name\":\"UpdateMintFeeRatioXToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"oldStatus\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"newStatus\",\"type\":\"bool\"}],\"name\":\"UpdateMintStatus\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldPlatform\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newPlatform\",\"type\":\"address\"}],\"name\":\"UpdatePlatform\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldRegistry\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newRegistry\",\"type\":\"address\"}],\"name\":\"UpdateRebalancePoolRegistry\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"defaultFeeRatio\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"extraFeeRatio\",\"type\":\"int256\"}],\"name\":\"UpdateRedeemFeeRatioFToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"defaultFeeRatio\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"extraFeeRatio\",\"type\":\"int256\"}],\"name\":\"UpdateRedeemFeeRatioXToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"oldStatus\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"newStatus\",\"type\":\"bool\"}],\"name\":\"UpdateRedeemStatus\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldReservePool\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newReservePool\",\"type\":\"address\"}],\"name\":\"UpdateReservePool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldRatio\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newRatio\",\"type\":\"uint256\"}],\"name\":\"UpdateStabilityRatio\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"oldStatus\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"newStatus\",\"type\":\"bool\"}],\"name\":\"UpdateXTokenRedeemStatusInStabilityMode\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"EMERGENCY_DAO_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_fxUSD\",\"type\":\"address\"}],\"name\":\"enableFxUSD\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fTokenMintFeeRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"defaultFee\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"deltaFee\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fTokenMintPausedInStabilityMode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fTokenRedeemFeeRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"defaultFee\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"deltaFee\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fxUSD\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_platform\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_reservePool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_registry\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_baseIn\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_minFTokenMinted\",\"type\":\"uint256\"}],\"name\":\"mintFToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_fTokenMinted\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_baseIn\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_minXTokenMinted\",\"type\":\"uint256\"}],\"name\":\"mintXToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_xTokenMinted\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_bonus\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"platform\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fTokenIn\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_minBaseOut\",\"type\":\"uint256\"}],\"name\":\"redeemFToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_baseOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_bonus\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"redeemPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_xTokenIn\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_minBaseOut\",\"type\":\"uint256\"}],\"name\":\"redeemXToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_baseOut\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"registry\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reservePool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stabilityRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_newStatus\",\"type\":\"bool\"}],\"name\":\"updateFTokenMintStatusInStabilityMode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"_defaultFeeRatio\",\"type\":\"uint128\"},{\"internalType\":\"int128\",\"name\":\"_extraFeeRatio\",\"type\":\"int128\"},{\"internalType\":\"bool\",\"name\":\"_isFToken\",\"type\":\"bool\"}],\"name\":\"updateMintFeeRatio\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_newStatus\",\"type\":\"bool\"}],\"name\":\"updateMintStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newPlatform\",\"type\":\"address\"}],\"name\":\"updatePlatform\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newRegistry\",\"type\":\"address\"}],\"name\":\"updateRebalancePoolRegistry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_defaultFeeRatio\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"_extraFeeRatio\",\"type\":\"int256\"},{\"internalType\":\"bool\",\"name\":\"_isFToken\",\"type\":\"bool\"}],\"name\":\"updateRedeemFeeRatio\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_newStatus\",\"type\":\"bool\"}],\"name\":\"updateRedeemStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newReservePool\",\"type\":\"address\"}],\"name\":\"updateReservePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newRatio\",\"type\":\"uint256\"}],\"name\":\"updateStabilityRatio\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_newStatus\",\"type\":\"bool\"}],\"name\":\"updateXTokenRedeemStatusInStabilityMode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"xToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"xTokenMintFeeRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"defaultFee\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"deltaFee\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"xTokenRedeemFeeRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"defaultFee\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"deltaFee\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"xTokenRedeemPausedInStabilityMode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "MarketV2", "CompilerVersion": "v0.8.20+commit.a1b79de6", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000ed803540037b0ae069c93420f89cd653b6e3df1f", "EVMVersion": "shanghai", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}