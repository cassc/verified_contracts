{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/contracts/smartCoin/SmartCoin.sol\": {\r\n      \"content\": \"pragma solidity 0.8.17;\\n\\nimport \\\"./Whitelist.sol\\\";\\nimport \\\"./ISmartCoin.sol\\\";\\nimport \\\"../openzepplin/ERC20.sol\\\";\\nimport \\\"../libraries/EncodingUtils.sol\\\";\\n\\ncontract SmartCoin is Whitelist, ERC20, ISmartCoin {\\n    mapping(bytes32 => TransferRequest) private _transfers;\\n    uint256 private _requestCounter;\\n\\n    mapping(address => mapping(address => bool)) private _hasOngoingApprove;\\n    mapping(bytes32 => ApproveRequest) private _approves;\\n\\n    mapping(address => uint256) private _engagedAmount; // _engagedAmount amount in transfer or approve\\n\\n    constructor(address registrar)\\n        ERC20(\\\"EUR Coinvertible\\\", \\\"EURCV\\\")\\n        Whitelist(registrar)\\n    {}\\n\\n    function validateTransfer(bytes32 transferHash)\\n        external\\n        onlyRegistrar\\n        returns (bool)\\n    {\\n        TransferRequest memory _transferRequest = _transfers[transferHash];\\n        if (_transferRequest.isTransferFrom) {\\n            if(!whitelist[_transferRequest.spender]){\\n                revert(\\\"Whitelist: address must be whitelisted\\\");\\n            }\\n        }\\n        require(\\n            _transferRequest.status != TransferStatus.Undefined,\\n            \\\"SmartCoin: transferHash does not exist\\\"\\n        );\\n        require(\\n            _transferRequest.status == TransferStatus.Created,\\n            \\\"SmartCoin: Invalid transfer status\\\"\\n        );\\n        _transfers[transferHash].status = TransferStatus.Validated;\\n        unchecked {\\n            _engagedAmount[_transferRequest.from] -= _transferRequest.value;\\n        }\\n        _safeTransfer(\\n            _transferRequest.from,\\n            _transferRequest.to,\\n            _transferRequest.value\\n        );\\n        emit TransferValidated(transferHash);\\n        return true;\\n    }\\n\\n    function _safeApprove(\\n        address _from,\\n        address _to,\\n        uint256 _value\\n    ) internal onlyWhitelisted(_from) onlyWhitelisted(_to) {\\n        super._approve(_from, _to, _value);\\n    }\\n\\n    function _safeTransfer(\\n        address _from,\\n        address _to,\\n        uint256 _value\\n    ) internal onlyWhitelisted(_from) onlyWhitelisted(_to) {\\n        super._transfer(_from, _to, _value);\\n    }\\n\\n    function rejectTransfer(bytes32 transferHash)\\n        external\\n        onlyRegistrar\\n        returns (bool)\\n    {\\n        TransferRequest memory transferRequest = _transfers[transferHash];\\n        if (transferRequest.isTransferFrom) {\\n\\n            uint256 allowance = allowance(\\n                transferRequest.from,\\n                transferRequest.to\\n            );\\n            if (allowance != type(uint256).max) {\\n                _approve(\\n                    transferRequest.from,\\n                    transferRequest.to,\\n                    allowance + transferRequest.value\\n                );\\n            }\\n        }\\n        _engagedAmount[transferRequest.from] -= transferRequest.value;\\n        _transfers[transferHash].status = TransferStatus.Rejected;\\n        emit TransferRejected(transferHash);\\n        return true;\\n    }\\n\\n    function approve(address _to, uint256 _value)\\n        public\\n        override(ERC20, ISmartCoin)\\n        onlyWhitelisted(_msgSender())\\n        onlyWhitelisted(_to)\\n        returns (bool)\\n    {\\n        \\n        require(\\n            _to != address(0),\\n            \\\"SmartCoin:  approve spender is the zero address\\\"\\n        );\\n        require(\\n            !_hasOngoingApprove[_msgSender()][_to],\\n            \\\"SmartCoin: owner has ongoing approve request\\\"\\n        );\\n        uint256 currentAllowedAmount = super.allowance(_msgSender(), _to);\\n        if (currentAllowedAmount > 0) super._approve(_msgSender(), _to, 0);\\n        bytes32 approveHash = EncodingUtils.encodeRequest(\\n            _msgSender(),\\n            _to,\\n            _value,\\n            _requestCounter\\n        );\\n        _approves[approveHash] = ApproveRequest(\\n            _msgSender(),\\n            _to,\\n            _value,\\n            ApproveStatus.Created\\n        );\\n        _hasOngoingApprove[_msgSender()][_to] = true;\\n        _requestCounter += 1;\\n        emit ApproveRequested(approveHash, _msgSender(), _to, _value);\\n        return true;\\n    }\\n\\n    function validateApprove(bytes32 approveHash)\\n        external\\n        onlyRegistrar\\n        returns (bool)\\n    {\\n        ApproveRequest memory _approveRequest = _approves[approveHash];\\n        require(\\n            _approveRequest.status != ApproveStatus.Undefined,\\n            \\\"SmartCoin: approveHash does not exist\\\"\\n        );\\n        require(\\n            _approveRequest.status == ApproveStatus.Created,\\n            \\\"SmartCoin: Invalid approve status\\\"\\n        );\\n        _safeApprove(\\n            _approveRequest.from,\\n            _approveRequest.to,\\n            _approveRequest.value\\n        );\\n        _hasOngoingApprove[_approveRequest.from][_approveRequest.to] = false;\\n        _approves[approveHash].status = ApproveStatus.Validated;\\n        emit ApproveValidated(approveHash);\\n        return true;\\n    }\\n\\n    function transferFrom(\\n        address _from,\\n        address _to,\\n        uint256 _value\\n    )\\n        public\\n        override(ERC20, ISmartCoin)\\n        onlyWhitelisted(_msgSender())\\n        onlyWhitelisted(_from)\\n        onlyWhitelisted(_to)\\n        returns (bool)\\n    {\\n        unchecked {\\n            super._spendAllowance(_from, _msgSender(), _value); // we know that allowance is bigger then _value\\n        }\\n        _initiateTransfer(\\n            _from,\\n            _to,\\n            _value,\\n            true, // isTransferFrom\\n            _msgSender()\\n        );\\n        return true;\\n    }\\n\\n    function rejectApprove(bytes32 _approveHash)\\n        external\\n        onlyRegistrar\\n        returns (bool)\\n    {\\n        ApproveRequest memory approveRequest = _approves[_approveHash];\\n        require(\\n            approveRequest.status != ApproveStatus.Undefined,\\n            \\\"SmartCoin: approveHash does not exist\\\"\\n        );\\n        require(\\n            approveRequest.status == ApproveStatus.Created,\\n            \\\"SmartCoin: Invalid approve status\\\"\\n        );\\n        _hasOngoingApprove[approveRequest.from][approveRequest.to] = false;\\n        _approves[_approveHash].status = ApproveStatus.Rejected;\\n        emit ApproveRejected(_approveHash);\\n        return true;\\n    }\\n\\n    function transfer(address _to, uint256 _value)\\n        public\\n        override(ISmartCoin, ERC20)\\n        onlyWhitelisted(_msgSender())\\n        onlyWhitelisted(_to)\\n        returns (bool)\\n    {\\n        _initiateTransfer(_msgSender(), _to, _value, false, address(0));\\n        return true;\\n    }\\n\\n    function _initiateTransfer(\\n        address _from,\\n        address _to,\\n        uint256 _value,\\n        bool _isTransferFrom,\\n        address _spender\\n    ) internal {\\n        require(\\n            _from != address(0),\\n            \\\"SmartCoin: transfer from the zero address\\\"\\n        );\\n        require(_to != address(0), \\\"SmartCoin: transfer to the zero address\\\");\\n        require(\\n            _availableBalance(_from) >= _value,\\n            \\\"SmartCoin: Insufficient balance\\\"\\n        );\\n        unchecked {\\n            _engagedAmount[_from] += _value; // Overflow not possible, engagedAmount amount <= balance\\n        }\\n        bytes32 transferHash = EncodingUtils.encodeRequest(\\n            _from,\\n            _to,\\n            _value,\\n            _requestCounter\\n        );\\n        _transfers[transferHash] = TransferRequest(\\n            _from,\\n            _to,\\n            _value,\\n            TransferStatus.Created,\\n            _isTransferFrom,\\n            _spender\\n        );\\n        _requestCounter += 1;\\n        emit TransferRequested(transferHash, _from, _to, _spender, _value);\\n    }\\n\\n    function recall(address _from, uint256 _amount)\\n        external\\n        override\\n        onlyRegistrar\\n        returns (bool)\\n    {\\n        require(\\n            _availableBalance(_from) >= _amount, // _amount should not exceed balance minus engagedAmount amount\\n            \\\"SmartCoin: transfer amount exceeds balance\\\"\\n        );\\n        super._transfer(_from, registrar, _amount);\\n        return true;\\n    }\\n\\n    function burn(uint256 _amount)\\n        external\\n        override\\n        onlyRegistrar\\n        returns (bool)\\n    {\\n        require(\\n            _availableBalance(registrar) >= _amount, // _amount should not exceed balance minus engagedAmount amount\\n            \\\"SmartCoin: burn amount exceeds balance\\\"\\n        );\\n        super._burn(registrar, _amount);\\n        return true;\\n    }\\n\\n    function mint(address _to, uint256 _amount)\\n        external\\n        override\\n        onlyRegistrar\\n        onlyWhitelisted(_to)\\n        returns (bool)\\n    {\\n        super._mint(_to, _amount);\\n        return true;\\n    }\\n\\n    function balanceOf(address _addr)\\n        public\\n        view\\n        override(ERC20, ISmartCoin)\\n        returns (uint256)\\n    {\\n        return _availableBalance(_addr); // Overflow not possible: balance >= engagedAmount amount.\\n    }\\n\\n    function _availableBalance(address _addr) internal view returns (uint256) {\\n        unchecked {\\n            return super.balanceOf(_addr) - _engagedAmount[_addr];\\n        }\\n    }\\n\\n    function engagedAmount(address _addr) public view returns (uint256) {\\n        return _engagedAmount[_addr];\\n    }\\n}\\n\"\r\n    },\r\n    \"/contracts/smartCoin/Whitelist.sol\": {\r\n      \"content\": \"pragma solidity 0.8.17;\\n\\nimport \\\"./IWhitelist.sol\\\";\\n\\nabstract contract Whitelist is IWhitelist {\\n    mapping(address => bool) public whitelist;\\n    address public registrar;\\n\\n    constructor(address registrarAddress) {\\n        registrar = registrarAddress;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account that's not whitelisted.\\n     */\\n    modifier onlyWhitelisted(address _addr) {\\n        require(whitelist[_addr], \\\"Whitelist: address must be whitelisted\\\");\\n        _;\\n    }\\n    /**\\n     * @dev Throws if called by any account other than the registrar.\\n     */\\n    modifier onlyRegistrar() {\\n        require(\\n            msg.sender == registrar,\\n            \\\"Whitelist: Only registrar could perform that action\\\"\\n        );\\n        _;\\n    }\\n\\n    /**\\n     * @dev Allows the current registrar to transfer control of the contract to a newRegistrar.\\n     * @param _newRegistrar The address to transfer registrarship to.\\n     */\\n    function updateRegistrar(address _newRegistrar)\\n        external\\n        onlyRegistrar\\n        returns (bool)\\n    {\\n        require(\\n            _newRegistrar != address(0),\\n            \\\"Whitelist: new registrar is the zero address\\\"\\n        );\\n        return _transferRegistrarship(_newRegistrar);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newRegistrar`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferRegistrarship(address _newRegistrar)\\n        internal\\n        virtual\\n        returns (bool)\\n    {\\n        address oldRegistrar = registrar;\\n        registrar = _newRegistrar;\\n        emit RegistrarUpdated(oldRegistrar, _newRegistrar);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev add an address to the whitelist\\n     * @param _addr address\\n     * @return true if the address was added to the whitelist, false if the address was already in the whitelist\\n     */\\n    function addAddressToWhitelist(address _addr)\\n        external\\n        onlyRegistrar\\n        returns (bool)\\n    {\\n        require(!whitelist[_addr], \\\"Whitelist: Address already whitelisted\\\");\\n        whitelist[_addr] = true;\\n        emit WhitelistedAddressAdded(_addr);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev remove an address from the whitelist\\n     * @param _addr address\\n     * @return true if the address was removed from the whitelist,\\n     * false if the address wasn't in the whitelist in the first place\\n     */\\n    function removeAddressFromWhitelist(address _addr)\\n        external\\n        onlyRegistrar\\n        returns (bool)\\n    {\\n        require(whitelist[_addr], \\\"Whitelist: Address not whitelisted\\\");\\n        whitelist[_addr] = false;\\n        emit WhitelistedAddressRemoved(_addr);\\n        return true;\\n    }\\n}\\n\"\r\n    },\r\n    \"/contracts/smartCoin/IWhitelist.sol\": {\r\n      \"content\": \"pragma solidity 0.8.17;\\n\\ninterface IWhitelist {\\n    event WhitelistedAddressAdded(address addr);\\n    event WhitelistedAddressRemoved(address addr);\\n    event RegistrarUpdated(\\n        address indexed previousRegistrar,\\n        address indexed newRegistrar\\n    );\\n\\n    function updateRegistrar(address newRegistrar) external returns (bool);\\n\\n    function addAddressToWhitelist(address holder) external returns (bool);\\n\\n    function removeAddressFromWhitelist(address holder) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"/contracts/smartCoin/ISmartCoin.sol\": {\r\n      \"content\": \"pragma solidity 0.8.17;\\n\\ninterface ISmartCoin {\\n    enum TransferStatus {\\n        Undefined,\\n        Created,\\n        Validated,\\n        Rejected\\n    }\\n    enum ApproveStatus {\\n        Undefined,\\n        Created,\\n        Validated,\\n        Rejected\\n    }\\n    struct TransferRequest {\\n        address from;\\n        address to;\\n        uint256 value;\\n        TransferStatus status;\\n        bool isTransferFrom;\\n        address spender;\\n    }\\n    struct ApproveRequest {\\n        address from;\\n        address to;\\n        uint256 value;\\n        ApproveStatus status;\\n    }\\n\\n    event TransferRequested(\\n        bytes32 transferHash,\\n        address indexed from,\\n        address indexed to,\\n        address indexed spender,\\n        uint256 value\\n    );\\n    event TransferRejected(bytes32 transferHash);\\n    event TransferValidated(bytes32 transferHash);\\n\\n    event ApproveRequested(\\n        bytes32 approveHash,\\n        address indexed from,\\n        address indexed to,\\n        uint256 value\\n    );\\n    event ApproveRejected(bytes32 approveHash);\\n    event ApproveValidated(bytes32 approveHash);\\n\\n    function burn(uint256 amount) external returns (bool);\\n\\n    function mint(address to, uint256 amount) external returns (bool);\\n\\n    function recall(address from, uint256 amount) external returns (bool);\\n\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 value\\n    ) external returns (bool);\\n\\n    function validateTransfer(bytes32 transferHash) external returns (bool);\\n\\n    function rejectTransfer(bytes32 transferHash) external returns (bool);\\n\\n    function balanceOf(address) external view returns (uint256);\\n\\n    function engagedAmount(address addr) external view returns (uint256);\\n\\n    function validateApprove(bytes32 approveHash) external returns (bool);\\n\\n    function rejectApprove(bytes32 approveHash) external returns (bool);\\n\\n    /* start performed by openzepplin ERC20 \\n     * function allowance(address owner, address spender)                            \\n     *        external                                                               \\n     *        view                                                                   \\n     *        returns (uint256);                                                     \\n     * function balanceOf(address) external view returns (uint256);                  \\n     * function totalSupply(address) external view returns (uint256);                \\n     * event Transfer(address indexed from, address indexed to, uint256 value);      \\n     * event Approval(                                                               \\n     *   address indexed owner,                                                      \\n     *   address indexed spender,                                                    \\n     *   uint256 value                                                               \\n     * );                                                                            \\n    end performed by openzepplin ERC20 */\\n}\\n\"\r\n    },\r\n    \"/contracts/openzepplin/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity 0.8.17;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"/contracts/openzepplin/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity 0.8.17;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"/contracts/openzepplin/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/IERC20.sol)\\n\\npragma solidity 0.8.17;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount)\\n        external\\n        returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n}\\n\"\r\n    },\r\n    \"/contracts/openzepplin/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity 0.8.17;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"./utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256)\\n    {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount)\\n        public\\n        virtual\\n        override\\n        returns (bool)\\n    {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256)\\n    {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount)\\n        public\\n        virtual\\n        override\\n        returns (bool)\\n    {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(\\n            fromBalance >= amount,\\n            \\\"ERC20: transfer amount exceeds balance\\\"\\n        );\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(\\n                currentAllowance >= amount,\\n                \\\"ERC20: insufficient allowance\\\"\\n            );\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"/contracts/libraries/EncodingUtils.sol\": {\r\n      \"content\": \"pragma solidity 0.8.17;\\n\\nlibrary EncodingUtils {\\n    function encodeRequest(\\n        address _from,\\n        address _to,\\n        uint256 _value,\\n        uint256 counter\\n    ) internal view returns (bytes32) {\\n        return\\n            keccak256(abi.encode(block.timestamp, _from, _to, _value, counter));\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"registrar\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"approveHash\",\"type\":\"bytes32\"}],\"name\":\"ApproveRejected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"approveHash\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"ApproveRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"approveHash\",\"type\":\"bytes32\"}],\"name\":\"ApproveValidated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousRegistrar\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newRegistrar\",\"type\":\"address\"}],\"name\":\"RegistrarUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"transferHash\",\"type\":\"bytes32\"}],\"name\":\"TransferRejected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"transferHash\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"transferHash\",\"type\":\"bytes32\"}],\"name\":\"TransferValidated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"WhitelistedAddressAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"WhitelistedAddressRemoved\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"addAddressToWhitelist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"engagedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"recall\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"registrar\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_approveHash\",\"type\":\"bytes32\"}],\"name\":\"rejectApprove\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"transferHash\",\"type\":\"bytes32\"}],\"name\":\"rejectTransfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"removeAddressFromWhitelist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newRegistrar\",\"type\":\"address\"}],\"name\":\"updateRegistrar\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"approveHash\",\"type\":\"bytes32\"}],\"name\":\"validateApprove\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"transferHash\",\"type\":\"bytes32\"}],\"name\":\"validateTransfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "SmartCoin", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000baf6edd9a0ff8bfa4f6e5bb7aa97a32f7035f799", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}