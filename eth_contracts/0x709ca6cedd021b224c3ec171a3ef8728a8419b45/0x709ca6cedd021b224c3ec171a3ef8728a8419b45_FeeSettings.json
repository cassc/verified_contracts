{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/FeeSettings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity 0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable2Step.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\nimport \\\"./interfaces/IFeeSettings.sol\\\";\\n\\n/**\\n * @title FeeSettings\\n * @author malteish, cjentzsch\\n * @notice The FeeSettings contract is used to manage fees paid to the tokenize.it platfom\\n */\\ncontract FeeSettings is Ownable2Step, ERC165, IFeeSettingsV1 {\\n    /// max token fee is 5%\\n    uint32 public constant MAX_TOKEN_FEE_NUMERATOR = 1;\\n    uint32 public constant MAX_TOKEN_FEE_DENOMINATOR = 20;\\n    /// max public fundraising fee is 10%\\n    uint32 public constant MAX_CONTINUOUS_FUNDRAISING_FEE_NUMERATOR = 1;\\n    uint32 public constant MAX_CONTINUOUS_FUNDRAISING_FEE_DENOMINATOR = 10;\\n    /// max private offer fee is 5%\\n    uint32 public constant MAX_PERSONAL_INVITE_FEE_NUMERATOR = 1;\\n    uint32 public constant MAX_PERSONAL_INVITE_FEE_DENOMINATOR = 20;\\n\\n    /// Numerator to calculate fees paid in Token.sol.\\n    uint32 public tokenFeeNumerator;\\n    /// Denominator to calculate fees paid in Token.sol.\\n    uint32 public tokenFeeDenominator;\\n\\n    /// Numerator to calculate fees paid in ContinuousFundraising.sol.\\n    uint32 public continuousFundraisingFeeNumerator;\\n    /// Denominator to calculate fees paid in ContinuousFundraising.sol.\\n    uint32 public continuousFundraisingFeeDenominator;\\n\\n    /// Numerator to calculate fees paid in PersonalInvite.sol.\\n    uint32 public personalInviteFeeNumerator;\\n    /// Denominator to calculate fees paid in PersonalInvite.sol.\\n    uint32 public personalInviteFeeDenominator;\\n\\n    /// address the fees have to be paid to\\n    address public feeCollector;\\n\\n    /// new fee settings that can be activated (after a delay in case of fee increase)\\n    Fees public proposedFees;\\n\\n    /**\\n     * @notice Fee factors have been changed\\n     * @param tokenFeeNumerator a in fraction a/b that defines the fee paid in Token: fee = amount * a / b\\n     * @param tokenFeeDenominator b in fraction a/b that defines the fee paid in Token: fee = amount * a / b\\n     * @param continuousFundraisingFeeNumerator a in fraction a/b that defines the fee paid in currency for public fundraising: fee = amount * a / b\\n     * @param continuousFundraisingFeeDenominator b in fraction a/b that defines the fee paid in currency for public fundraising: fee = amount * a / b\\n     * @param personalInviteFeeNumerator a in fraction a/b that defines the fee paid in currency for private offers: fee = amount * a / b\\n     * @param personalInviteFeeDenominator b in fraction a/b that defines the fee paid in currency for private offers: fee = amount * a / b\\n     */\\n    event SetFee(\\n        uint32 tokenFeeNumerator,\\n        uint32 tokenFeeDenominator,\\n        uint32 continuousFundraisingFeeNumerator,\\n        uint32 continuousFundraisingFeeDenominator,\\n        uint32 personalInviteFeeNumerator,\\n        uint32 personalInviteFeeDenominator\\n    );\\n\\n    /**\\n     * @notice The fee collector has been changed to `newFeeCollector`\\n     * @param newFeeCollector The new fee collector\\n     */\\n    event FeeCollectorChanged(address indexed newFeeCollector);\\n\\n    /**\\n     * @notice A fee change has been proposed\\n     * @param proposal The new fee settings that have been proposed\\n     */\\n    event ChangeProposed(Fees proposal);\\n\\n    /**\\n     * @notice Initializes the contract with the given fee denominators and fee collector\\n     * @param _fees The initial fee denominators\\n     * @param _feeCollector The initial fee collector\\n     */\\n    constructor(Fees memory _fees, address _feeCollector) {\\n        checkFeeLimits(_fees);\\n        tokenFeeNumerator = _fees.tokenFeeNumerator;\\n        tokenFeeDenominator = _fees.tokenFeeDenominator;\\n        continuousFundraisingFeeNumerator = _fees.continuousFundraisingFeeNumerator;\\n        continuousFundraisingFeeDenominator = _fees.continuousFundraisingFeeDenominator;\\n        personalInviteFeeNumerator = _fees.personalInviteFeeNumerator;\\n        personalInviteFeeDenominator = _fees.personalInviteFeeDenominator;\\n        require(_feeCollector != address(0), \\\"Fee collector cannot be 0x0\\\");\\n        feeCollector = _feeCollector;\\n    }\\n\\n    /**\\n     * @notice Prepares a fee change. Fee increases are subject to a minimum delay of 12 weeks, while fee reductions can be executed immediately.\\n     * @dev reducing fees = increasing the denominator\\n     * @param _fees The new fee denominators\\n     */\\n    function planFeeChange(Fees memory _fees) external onlyOwner {\\n        checkFeeLimits(_fees);\\n\\n        // if at least one fee increases, enforce minimum delay\\n        if (\\n            _isFractionAGreater(\\n                _fees.tokenFeeNumerator,\\n                _fees.tokenFeeDenominator,\\n                tokenFeeNumerator,\\n                tokenFeeDenominator\\n            ) ||\\n            _isFractionAGreater(\\n                _fees.continuousFundraisingFeeNumerator,\\n                _fees.continuousFundraisingFeeDenominator,\\n                continuousFundraisingFeeNumerator,\\n                continuousFundraisingFeeDenominator\\n            ) ||\\n            _isFractionAGreater(\\n                _fees.personalInviteFeeNumerator,\\n                _fees.personalInviteFeeDenominator,\\n                personalInviteFeeNumerator,\\n                personalInviteFeeDenominator\\n            )\\n        ) {\\n            require(_fees.time > block.timestamp + 12 weeks, \\\"Fee change must be at least 12 weeks in the future\\\");\\n        }\\n        proposedFees = _fees;\\n        emit ChangeProposed(_fees);\\n    }\\n\\n    /**\\n     * @notice Executes a fee change that has been planned before\\n     */\\n    function executeFeeChange() external onlyOwner {\\n        require(block.timestamp >= proposedFees.time, \\\"Fee change must be executed after the change time\\\");\\n        tokenFeeNumerator = proposedFees.tokenFeeNumerator;\\n        tokenFeeDenominator = proposedFees.tokenFeeDenominator;\\n        continuousFundraisingFeeNumerator = proposedFees.continuousFundraisingFeeNumerator;\\n        continuousFundraisingFeeDenominator = proposedFees.continuousFundraisingFeeDenominator;\\n        personalInviteFeeNumerator = proposedFees.personalInviteFeeNumerator;\\n        personalInviteFeeDenominator = proposedFees.personalInviteFeeDenominator;\\n        emit SetFee(\\n            tokenFeeNumerator,\\n            tokenFeeDenominator,\\n            continuousFundraisingFeeNumerator,\\n            continuousFundraisingFeeDenominator,\\n            personalInviteFeeNumerator,\\n            personalInviteFeeDenominator\\n        );\\n        delete proposedFees;\\n    }\\n\\n    /**\\n     * @notice Sets a new fee collector\\n     * @param _feeCollector The new fee collector\\n     */\\n    function setFeeCollector(address _feeCollector) external onlyOwner {\\n        require(_feeCollector != address(0), \\\"Fee collector cannot be 0x0\\\");\\n        feeCollector = _feeCollector;\\n        emit FeeCollectorChanged(_feeCollector);\\n    }\\n\\n    /**\\n     * Compares two fractions and returns true if the first one is greater than the second one\\n     * @param aNumerator numerator in fraction aNumerator/aDenominator\\n     * @param aDenominator denominator in fraction aNumerator/aDenominator\\n     * @param bNumerator numerator in fraction bNumerator/bDenominator\\n     * @param bDenominator denominator in fraction bNumerator/bDenominator\\n     */\\n    function _isFractionAGreater(\\n        uint32 aNumerator,\\n        uint32 aDenominator,\\n        uint32 bNumerator,\\n        uint32 bDenominator\\n    ) internal pure returns (bool) {\\n        return uint256(aNumerator) * bDenominator > uint256(bNumerator) * aDenominator;\\n    }\\n\\n    /**\\n     * @notice Checks if the given fee settings are valid\\n     * @param _fees The fees to check\\n     */\\n    function checkFeeLimits(Fees memory _fees) internal pure {\\n        require(\\n            _fees.tokenFeeDenominator > 0 &&\\n                _fees.continuousFundraisingFeeDenominator > 0 &&\\n                _fees.personalInviteFeeDenominator > 0,\\n            \\\"Denominator cannot be 0\\\"\\n        );\\n        require(\\n            !_isFractionAGreater(\\n                _fees.tokenFeeNumerator,\\n                _fees.tokenFeeDenominator,\\n                MAX_TOKEN_FEE_NUMERATOR,\\n                MAX_TOKEN_FEE_DENOMINATOR\\n            ),\\n            \\\"Token fee must be equal or less 5%\\\"\\n        );\\n        require(\\n            !_isFractionAGreater(\\n                _fees.continuousFundraisingFeeNumerator,\\n                _fees.continuousFundraisingFeeDenominator,\\n                MAX_CONTINUOUS_FUNDRAISING_FEE_NUMERATOR,\\n                MAX_CONTINUOUS_FUNDRAISING_FEE_DENOMINATOR\\n            ),\\n            \\\"ContinuousFundraising fee must be equal or less 10%\\\"\\n        );\\n        require(\\n            !_isFractionAGreater(\\n                _fees.personalInviteFeeNumerator,\\n                _fees.personalInviteFeeDenominator,\\n                MAX_PERSONAL_INVITE_FEE_NUMERATOR,\\n                MAX_PERSONAL_INVITE_FEE_DENOMINATOR\\n            ),\\n            \\\"PersonalInvite fee must be equal or less 5%\\\"\\n        );\\n    }\\n\\n    /**\\n     * @notice Returns the fee for a given token amount\\n     * @dev will wrongly return 1 if denominator and amount are both uint256 max\\n     */\\n    function tokenFee(uint256 _tokenAmount) external view override(IFeeSettingsV1) returns (uint256) {\\n        return (_tokenAmount * tokenFeeNumerator) / tokenFeeDenominator;\\n    }\\n\\n    /**\\n     * @notice Calculates the fee for a given currency amount in ContinuousFundraising.sol\\n     * @dev will wrongly return 1 if denominator and amount are both uint256 max\\n     * @param _currencyAmount The amount of currency to calculate the fee for\\n     * @return The fee\\n     */\\n    function continuousFundraisingFee(\\n        uint256 _currencyAmount\\n    ) external view override(IFeeSettingsV1) returns (uint256) {\\n        return (_currencyAmount * continuousFundraisingFeeNumerator) / continuousFundraisingFeeDenominator;\\n    }\\n\\n    /**\\n     * @notice Calculates the fee for a given currency amount in PersonalInvite.sol\\n     * @dev will wrongly return 1 if denominator and amount are both uint256 max\\n     * @param _currencyAmount The amount of currency to calculate the fee for\\n     * @return The fee\\n     */\\n    function personalInviteFee(uint256 _currencyAmount) external view override(IFeeSettingsV1) returns (uint256) {\\n        return (_currencyAmount * personalInviteFeeNumerator) / personalInviteFeeDenominator;\\n    }\\n\\n    /**\\n     * @dev Specify where the implementation of owner() is located\\n     * @return The owner of the contract\\n     */\\n    function owner() public view override(Ownable, IFeeSettingsV1) returns (address) {\\n        return Ownable.owner();\\n    }\\n\\n    /**\\n     * @notice This contract implements the ERC165 interface in order to enable other contracts to query which interfaces this contract implements.\\n     * @dev See https://eips.ethereum.org/EIPS/eip-165\\n     * @return `true` for supported interfaces, otherwise `false`\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IFeeSettingsV1) returns (bool) {\\n        return\\n            interfaceId == type(IFeeSettingsV1).interfaceId || // we implement IFeeSettingsV1\\n            ERC165.supportsInterface(interfaceId); // default implementation that enables further querying\\n    }\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts/access/Ownable2Step.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (access/Ownable2Step.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Ownable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership} and {acceptOwnership}.\\n *\\n * This module is used through inheritance. It will make available all functions\\n * from parent (Ownable).\\n */\\nabstract contract Ownable2Step is Ownable {\\n    address private _pendingOwner;\\n\\n    event OwnershipTransferStarted(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Returns the address of the pending owner.\\n     */\\n    function pendingOwner() public view virtual returns (address) {\\n        return _pendingOwner;\\n    }\\n\\n    /**\\n     * @dev Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one.\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual override onlyOwner {\\n        _pendingOwner = newOwner;\\n        emit OwnershipTransferStarted(owner(), newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`) and deletes any pending owner.\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual override {\\n        delete _pendingOwner;\\n        super._transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev The new owner accepts the ownership transfer.\\n     */\\n    function acceptOwnership() external {\\n        address sender = _msgSender();\\n        require(pendingOwner() == sender, \\\"Ownable2Step: caller is not the new owner\\\");\\n        _transferOwnership(sender);\\n    }\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts/utils/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IFeeSettings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity 0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\n\\ninterface IFeeSettingsV1 {\\n    function tokenFee(uint256) external view returns (uint256);\\n\\n    function continuousFundraisingFee(uint256) external view returns (uint256);\\n\\n    function personalInviteFee(uint256) external view returns (uint256);\\n\\n    function feeCollector() external view returns (address);\\n\\n    function owner() external view returns (address);\\n\\n    function supportsInterface(bytes4) external view returns (bool); //because we inherit from ERC165\\n}\\n\\nstruct Fees {\\n    uint32 tokenFeeNumerator;\\n    uint32 tokenFeeDenominator;\\n    uint32 continuousFundraisingFeeNumerator;\\n    uint32 continuousFundraisingFeeDenominator;\\n    uint32 personalInviteFeeNumerator;\\n    uint32 personalInviteFeeDenominator;\\n    uint64 time;\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [\r\n      \"@ensdomains/=node_modules/@ensdomains/\",\r\n      \"@opengsn/=node_modules/@opengsn/\",\r\n      \"@openzeppelin/=node_modules/@openzeppelin/\",\r\n      \"ds-test/=lib/forge-std/lib/ds-test/src/\",\r\n      \"eth-gas-reporter/=node_modules/eth-gas-reporter/\",\r\n      \"forge-std/=lib/forge-std/src/\",\r\n      \"hardhat/=node_modules/hardhat/\"\r\n    ],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 10000\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": false,\r\n      \"bytecodeHash\": \"ipfs\"\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"tokenFeeNumerator\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"tokenFeeDenominator\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"continuousFundraisingFeeNumerator\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"continuousFundraisingFeeDenominator\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"personalInviteFeeNumerator\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"personalInviteFeeDenominator\",\"type\":\"uint32\"},{\"internalType\":\"uint64\",\"name\":\"time\",\"type\":\"uint64\"}],\"internalType\":\"struct Fees\",\"name\":\"_fees\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"_feeCollector\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"tokenFeeNumerator\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"tokenFeeDenominator\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"continuousFundraisingFeeNumerator\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"continuousFundraisingFeeDenominator\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"personalInviteFeeNumerator\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"personalInviteFeeDenominator\",\"type\":\"uint32\"},{\"internalType\":\"uint64\",\"name\":\"time\",\"type\":\"uint64\"}],\"indexed\":false,\"internalType\":\"struct Fees\",\"name\":\"proposal\",\"type\":\"tuple\"}],\"name\":\"ChangeProposed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newFeeCollector\",\"type\":\"address\"}],\"name\":\"FeeCollectorChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"tokenFeeNumerator\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"tokenFeeDenominator\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"continuousFundraisingFeeNumerator\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"continuousFundraisingFeeDenominator\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"personalInviteFeeNumerator\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"personalInviteFeeDenominator\",\"type\":\"uint32\"}],\"name\":\"SetFee\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_CONTINUOUS_FUNDRAISING_FEE_DENOMINATOR\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_CONTINUOUS_FUNDRAISING_FEE_NUMERATOR\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_PERSONAL_INVITE_FEE_DENOMINATOR\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_PERSONAL_INVITE_FEE_NUMERATOR\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_TOKEN_FEE_DENOMINATOR\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_TOKEN_FEE_NUMERATOR\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_currencyAmount\",\"type\":\"uint256\"}],\"name\":\"continuousFundraisingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"continuousFundraisingFeeDenominator\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"continuousFundraisingFeeNumerator\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"executeFeeChange\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeCollector\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_currencyAmount\",\"type\":\"uint256\"}],\"name\":\"personalInviteFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"personalInviteFeeDenominator\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"personalInviteFeeNumerator\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"tokenFeeNumerator\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"tokenFeeDenominator\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"continuousFundraisingFeeNumerator\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"continuousFundraisingFeeDenominator\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"personalInviteFeeNumerator\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"personalInviteFeeDenominator\",\"type\":\"uint32\"},{\"internalType\":\"uint64\",\"name\":\"time\",\"type\":\"uint64\"}],\"internalType\":\"struct Fees\",\"name\":\"_fees\",\"type\":\"tuple\"}],\"name\":\"planFeeChange\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proposedFees\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"tokenFeeNumerator\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"tokenFeeDenominator\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"continuousFundraisingFeeNumerator\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"continuousFundraisingFeeDenominator\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"personalInviteFeeNumerator\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"personalInviteFeeDenominator\",\"type\":\"uint32\"},{\"internalType\":\"uint64\",\"name\":\"time\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeCollector\",\"type\":\"address\"}],\"name\":\"setFeeCollector\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenAmount\",\"type\":\"uint256\"}],\"name\":\"tokenFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenFeeDenominator\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenFeeNumerator\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "FeeSettings", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "10000", "ConstructorArguments": "00000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000032000000000000000000000000000000000000000000000000000000000000000300000000000000000000000000000000000000000000000000000000000000320000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000003300000000000000000000000000000000000000000000000000000000000000000000000000000000000000009e23f8aa17b2721cf69d157b8a15bd7b64ac881c", "EVMVersion": "london", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}