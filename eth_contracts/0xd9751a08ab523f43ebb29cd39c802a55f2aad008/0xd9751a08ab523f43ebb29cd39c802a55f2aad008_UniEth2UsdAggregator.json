{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(\\n    uint80 _roundId\\n  ) external view returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\\n}\\n\"\r\n    },\r\n    \"contracts/Pricing/UniEth2UsdAggregator.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\n\\n\\ninterface IRockXStaking {\\n  /// @notice Retrieve price data\\n  function exchangeRatio()\\n    external\\n    view\\n    returns (uint256);\\n}\\n\\ncontract UniEth2UsdAggregator  is AggregatorV3Interface{\\n\\n\\n    uint256 internal constant PRECISION = 1 ether;\\n\\n\\tAggregatorV3Interface public immutable WETH2USDAggregator;\\n\\n   // Updating the proxy address is a security-critical action which is why\\n   // we have made it immutable.\\n   IRockXStaking public immutable api3Proxy;\\n\\n   constructor(address _api3Proxy,address _WWETH2USDAggregator) {\\n       api3Proxy = IRockXStaking(_api3Proxy);\\n\\t   WETH2USDAggregator = AggregatorV3Interface(_WWETH2USDAggregator);\\n   }\\n\\n  function decimals() external view override returns (uint8) {\\n\\t\\treturn WETH2USDAggregator.decimals();\\n\\t}\\n\\n\\tfunction description() external pure override returns (string memory) {\\n\\t\\treturn \\\"UinEth2UsdPriceAggregator\\\";\\n\\t}\\n\\tfunction getRoundData(uint80 _roundId)\\n\\t\\texternal\\n\\t\\tview\\n\\t\\toverride\\n\\t\\treturns (\\n\\t\\t\\tuint80 roundId,\\n\\t\\t\\tint256 answer,\\n\\t\\t\\tuint256 startedAt,\\n\\t\\t\\tuint256 updatedAt,\\n\\t\\t\\tuint80 answeredInRound\\n\\t\\t)\\n\\t{\\n\\t\\t( roundId,  answer, startedAt , updatedAt, answeredInRound) = WETH2USDAggregator.getRoundData(_roundId);\\n         (uint256 uniETHAnswer,uint256 uniETHUpdatedAt ) = _WETH2UniETH(uint256(answer));\\n\\t\\t require(uniETHUpdatedAt > 0, \\\"uniETH upAt cannot be zero\\\");\\n\\t\\t require(updatedAt > 0, \\\"ETH upAT cannot be zero\\\");\\n\\t\\t answer = int256(uniETHAnswer);\\n\\t\\t updatedAt = uniETHUpdatedAt > updatedAt ? updatedAt : uniETHUpdatedAt;\\n\\t\\n\\t}\\n\\tfunction latestRoundData()\\n\\t\\texternal\\n\\t\\tview\\n\\t\\toverride\\n\\t\\treturns (\\n\\t\\t\\tuint80 roundId,\\n\\t\\t\\tint256 answer,\\n\\t\\t\\tuint256 startedAt,\\n\\t\\t\\tuint256 updatedAt,\\n\\t\\t\\tuint80 answeredInRound\\n\\t\\t)\\n\\t{\\n\\t\\t( roundId,  answer, startedAt , updatedAt, answeredInRound) = WETH2USDAggregator.latestRoundData();\\n         (uint256 uniETHAnswer,uint256 uniETHUpdatedAt ) = _WETH2UniETH(uint256(answer));\\n\\t\\t require(uniETHUpdatedAt > 0, \\\"uniETH upAt cannot be zero\\\");\\n\\t\\t require(updatedAt > 0, \\\"ETH upAT cannot be zero\\\");\\n\\t\\t answer = int256(uniETHAnswer);\\n\\t\\t updatedAt = uniETHUpdatedAt > updatedAt ? updatedAt : uniETHUpdatedAt;\\n\\t}\\n\\n\\tfunction version() external pure override returns (uint256) {\\n\\t\\treturn 1;\\n\\t}\\n\\n\\t// Internal/Helper functions ----------------------------------------------------------------------------------------\\n\\n\\tfunction _WETH2UniETH(uint256 WETHPrice) internal view returns (uint256 ,uint256 ) {\\n\\t\\trequire(WETHPrice > 0, \\\"WETHPrice value cannot be zero\\\");\\n\\t\\tuint256 rate = api3Proxy.exchangeRatio();\\n\\t\\tuint256 updatedAt = block.timestamp;\\n\\t\\trequire(rate > 0, \\\"uniETH rate cannot be zero\\\");\\n\\t\\tuint256 price = WETHPrice* rate/ PRECISION;\\n\\t\\treturn (price,updatedAt);\\n\\t}\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"paris\",\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_api3Proxy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_WWETH2USDAggregator\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"WETH2USDAggregator\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"api3Proxy\",\"outputs\":[{\"internalType\":\"contract IRockXStaking\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"description\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint80\",\"name\":\"_roundId\",\"type\":\"uint80\"}],\"name\":\"getRoundData\",\"outputs\":[{\"internalType\":\"uint80\",\"name\":\"roundId\",\"type\":\"uint80\"},{\"internalType\":\"int256\",\"name\":\"answer\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"startedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"updatedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint80\",\"name\":\"answeredInRound\",\"type\":\"uint80\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestRoundData\",\"outputs\":[{\"internalType\":\"uint80\",\"name\":\"roundId\",\"type\":\"uint80\"},{\"internalType\":\"int256\",\"name\":\"answer\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"startedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"updatedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint80\",\"name\":\"answeredInRound\",\"type\":\"uint80\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}]", "ContractName": "UniEth2UsdAggregator", "CompilerVersion": "v0.8.20+commit.a1b79de6", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000004befa2aa9c305238aa3e0b5d17eb20c045269e9d0000000000000000000000005f4ec3df9cbd43714fe2740f5e3616155c5b8419", "EVMVersion": "paris", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}