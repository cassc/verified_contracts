{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * SAFEMATH LIBRARY\r\n */\r\nlibrary SafeMath {\r\n    \r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            uint256 c = a + b;\r\n            if (c < a) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b > a) return (false, 0);\r\n            return (true, a - b);\r\n        }\r\n    }\r\n\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n            // benefit is lost if 'b' is also tested.\r\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n            if (a == 0) return (true, 0);\r\n            uint256 c = a * b;\r\n            if (c / a != b) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a / b);\r\n        }\r\n    }\r\n\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a % b);\r\n        }\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a + b;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a - b;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a * b;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a % b;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b <= a, errorMessage);\r\n            return a - b;\r\n        }\r\n    }\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a / b;\r\n        }\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a % b;\r\n        }\r\n    }\r\n}\r\n\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function decimals() external view returns (uint8);\r\n    function symbol() external view returns (string memory);\r\n    function name() external view returns (string memory);\r\n    function getOwner() external view returns (address);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address _owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ninterface HoldPad {\r\n    function totalSupply() external view returns (uint256);\r\n    function decimals() external view returns (uint8);\r\n    function symbol() external view returns (string memory);\r\n    function name() external view returns (string memory);\r\n    function getOwner() external view returns (address);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address _owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n    function distributorAddress() external view returns (address);\r\n}\r\n\r\ninterface IDividendDistributor {\r\n    function getUnpaidEarnings(address shareholder) external view returns (uint256);\r\n    function totalDividends() external view returns (uint256);\r\n    function totalDistributed() external view returns (uint256);\r\n    function shares(address shareholder) external view returns (uint256 amount, uint256 totalExcluded, uint256 totalRealised);\r\n}\r\n\r\ncontract HPAD_Assist {\r\n    using SafeMath for uint256;\r\n\r\n    HoldPad holdpad;\r\n    IDividendDistributor dividendDistributor;\r\n\r\n    struct Views {\r\n        uint256 ethAmount;\r\n        uint256 hpadAmount;\r\n        uint256 hpadUnclaimed;\r\n        uint256 hpadEarned;\r\n        uint256 hpadTotalDividend;\r\n        uint256 hpadTotalDistributed;\r\n        uint256 hpadTotalUnclaimed;\r\n    } \r\n\r\n    constructor ()  {\r\n        holdpad = HoldPad(0x21Fe86bfb2F45E5563Cf148dF73826DFDaAaC14e);\r\n        dividendDistributor = IDividendDistributor(0x6FDfa7df13b6ee46ac0B542E29B5d1C0CB4bb3F9);\r\n        \r\n    }\r\n\r\n    function userView(address user) public view returns (Views memory) {\r\n        (, ,uint256 hpadEarned) = dividendDistributor.shares(user);\r\n\r\n        return Views(\r\n            address(user).balance\r\n            , holdpad.balanceOf(address(user))\r\n            , dividendDistributor.getUnpaidEarnings(address(user))\r\n            , hpadEarned\r\n            , dividendDistributor.totalDividends()\r\n            , dividendDistributor.totalDistributed()\r\n            , dividendDistributor.totalDividends() - dividendDistributor.totalDistributed()\r\n\r\n        );\r\n    }\r\n\r\n    function _getTokenAmount(address _tokenAddress, uint256 _amount) internal view returns (uint256 quotient) {\r\n\t\tuint _weiDecimal = 18;\r\n\t\t\r\n\t\tIERC20 tokenAddress = IERC20(_tokenAddress);\r\n\t\tuint256 tokenDecimal = tokenAddress.decimals();\r\n\t\tuint256 decimalDiff = 0;\r\n\t\tuint256 decimalDiffConverter = 0;\r\n\t\tuint256 amount = 0;\r\n\t\t\t\r\n\t\tif(_weiDecimal != tokenDecimal){\r\n\t\t\tif(_weiDecimal > tokenDecimal){\r\n\t\t\t\tdecimalDiff = _weiDecimal - tokenDecimal;\r\n\t\t\t\tdecimalDiffConverter = 10**decimalDiff;\r\n\t\t\t\tamount = _amount.div(decimalDiffConverter);\r\n\t\t\t} else {\r\n\t\t\t\tdecimalDiff = tokenDecimal - _weiDecimal;\r\n\t\t\t\tdecimalDiffConverter = 10**decimalDiff;\r\n\t\t\t\tamount = _amount.mul(decimalDiffConverter);\r\n\t\t\t}\t\t\r\n\t\t} else {\r\n\t\t\tamount = _amount;\r\n\t\t}\r\n\t\t\r\n\t\tuint256 _quotient = amount;\r\n\t\t\r\n\t\treturn (_quotient);\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"userView\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"ethAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"hpadAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"hpadUnclaimed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"hpadEarned\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"hpadTotalDividend\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"hpadTotalDistributed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"hpadTotalUnclaimed\",\"type\":\"uint256\"}],\"internalType\":\"struct HPAD_Assist.Views\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "HPAD_Assist", "CompilerVersion": "v0.8.22+commit.4fc1097e", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://a93fd03769465a0a365f1d449e54646383dd10afa00b3e00da006830f0dee353"}