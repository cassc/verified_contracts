{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard ERC20 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\\n */\\ninterface IERC20Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC20InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC20InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender`\u2019s `allowance`. Used in transfers.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC20InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC20InvalidSpender(address spender);\\n}\\n\\n/**\\n * @dev Standard ERC721 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\\n */\\ninterface IERC721Errors {\\n    /**\\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\\n     * Used in balance queries.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721InvalidOwner(address owner);\\n\\n    /**\\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721NonexistentToken(uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param tokenId Identifier number of a token.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC721InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC721InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC721InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC721InvalidOperator(address operator);\\n}\\n\\n/**\\n * @dev Standard ERC1155 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\\n */\\ninterface IERC1155Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC1155InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC1155InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC1155MissingApprovalForAll(address operator, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC1155InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC1155InvalidOperator(address operator);\\n\\n    /**\\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\\n     * Used in batch transfers.\\n     * @param idsLength Length of the array of token identifiers\\n     * @param valuesLength Length of the array of token amounts\\n     */\\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"./IERC20.sol\\\";\\nimport {IERC20Metadata} from \\\"./extensions/IERC20Metadata.sol\\\";\\nimport {Context} from \\\"../../utils/Context.sol\\\";\\nimport {IERC20Errors} from \\\"../../interfaces/draft-IERC6093.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n */\\nabstract contract ERC20 is Context, IERC20, IERC20Metadata, IERC20Errors {\\n    mapping(address account => uint256) private _balances;\\n\\n    mapping(address account => mapping(address spender => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `value`.\\n     */\\n    function transfer(address to, uint256 value) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 value) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `value`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `value`.\\n     */\\n    function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, value);\\n        _transfer(from, to, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\n     */\\n    function _transfer(address from, address to, uint256 value) internal {\\n        if (from == address(0)) {\\n            revert ERC20InvalidSender(address(0));\\n        }\\n        if (to == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n        _update(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\\n     * (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\\n     * this function.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _update(address from, address to, uint256 value) internal virtual {\\n        if (from == address(0)) {\\n            // Overflow check required: The rest of the code assumes that totalSupply never overflows\\n            _totalSupply += value;\\n        } else {\\n            uint256 fromBalance = _balances[from];\\n            if (fromBalance < value) {\\n                revert ERC20InsufficientBalance(from, fromBalance, value);\\n            }\\n            unchecked {\\n                // Overflow not possible: value <= fromBalance <= totalSupply.\\n                _balances[from] = fromBalance - value;\\n            }\\n        }\\n\\n        if (to == address(0)) {\\n            unchecked {\\n                // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.\\n                _totalSupply -= value;\\n            }\\n        } else {\\n            unchecked {\\n                // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.\\n                _balances[to] += value;\\n            }\\n        }\\n\\n        emit Transfer(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\\n     * Relies on the `_update` mechanism\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\n     */\\n    function _mint(address account, uint256 value) internal {\\n        if (account == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n        _update(address(0), account, value);\\n    }\\n\\n    /**\\n     * @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\\n     * Relies on the `_update` mechanism.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead\\n     */\\n    function _burn(address account, uint256 value) internal {\\n        if (account == address(0)) {\\n            revert ERC20InvalidSender(address(0));\\n        }\\n        _update(account, address(0), value);\\n    }\\n\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     *\\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\\n     */\\n    function _approve(address owner, address spender, uint256 value) internal {\\n        _approve(owner, spender, value, true);\\n    }\\n\\n    /**\\n     * @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\\n     *\\n     * By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\\n     * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\\n     * `Approval` event during `transferFrom` operations.\\n     *\\n     * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\\n     * true using the following override:\\n     * ```\\n     * function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\\n     *     super._approve(owner, spender, value, true);\\n     * }\\n     * ```\\n     *\\n     * Requirements are the same as {_approve}.\\n     */\\n    function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {\\n        if (owner == address(0)) {\\n            revert ERC20InvalidApprover(address(0));\\n        }\\n        if (spender == address(0)) {\\n            revert ERC20InvalidSpender(address(0));\\n        }\\n        _allowances[owner][spender] = value;\\n        if (emitEvent) {\\n            emit Approval(owner, spender, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `value`.\\n     *\\n     * Does not update the allowance value in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Does not emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 value) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            if (currentAllowance < value) {\\n                revert ERC20InsufficientAllowance(spender, currentAllowance, value);\\n            }\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - value, false);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/ERC20Burnable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {ERC20} from \\\"../ERC20.sol\\\";\\nimport {Context} from \\\"../../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\\n * tokens and those that they have an allowance for, in a way that can be\\n * recognized off-chain (via event analysis).\\n */\\nabstract contract ERC20Burnable is Context, ERC20 {\\n    /**\\n     * @dev Destroys a `value` amount of tokens from the caller.\\n     *\\n     * See {ERC20-_burn}.\\n     */\\n    function burn(uint256 value) public virtual {\\n        _burn(_msgSender(), value);\\n    }\\n\\n    /**\\n     * @dev Destroys a `value` amount of tokens from `account`, deducting from\\n     * the caller's allowance.\\n     *\\n     * See {ERC20-_burn} and {ERC20-allowance}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have allowance for ``accounts``'s tokens of at least\\n     * `value`.\\n     */\\n    function burnFrom(address account, uint256 value) public virtual {\\n        _spendAllowance(account, _msgSender(), value);\\n        _burn(account, value);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC721} from \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC721} from \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or\\n     *   {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the address zero.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be\\n     * reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Create2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Create2.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Helper to make usage of the `CREATE2` EVM opcode easier and safer.\\n * `CREATE2` can be used to compute in advance the address where a smart\\n * contract will be deployed, which allows for interesting new mechanisms known\\n * as 'counterfactual interactions'.\\n *\\n * See the https://eips.ethereum.org/EIPS/eip-1014#motivation[EIP] for more\\n * information.\\n */\\nlibrary Create2 {\\n    /**\\n     * @dev Not enough balance for performing a CREATE2 deploy.\\n     */\\n    error Create2InsufficientBalance(uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev There's no code to deploy.\\n     */\\n    error Create2EmptyBytecode();\\n\\n    /**\\n     * @dev The deployment failed.\\n     */\\n    error Create2FailedDeployment();\\n\\n    /**\\n     * @dev Deploys a contract using `CREATE2`. The address where the contract\\n     * will be deployed can be known in advance via {computeAddress}.\\n     *\\n     * The bytecode for a contract can be obtained from Solidity with\\n     * `type(contractName).creationCode`.\\n     *\\n     * Requirements:\\n     *\\n     * - `bytecode` must not be empty.\\n     * - `salt` must have not been used for `bytecode` already.\\n     * - the factory must have a balance of at least `amount`.\\n     * - if `amount` is non-zero, `bytecode` must have a `payable` constructor.\\n     */\\n    function deploy(uint256 amount, bytes32 salt, bytes memory bytecode) internal returns (address addr) {\\n        if (address(this).balance < amount) {\\n            revert Create2InsufficientBalance(address(this).balance, amount);\\n        }\\n        if (bytecode.length == 0) {\\n            revert Create2EmptyBytecode();\\n        }\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            addr := create2(amount, add(bytecode, 0x20), mload(bytecode), salt)\\n        }\\n        if (addr == address(0)) {\\n            revert Create2FailedDeployment();\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address where a contract will be stored if deployed via {deploy}. Any change in the\\n     * `bytecodeHash` or `salt` will result in a new destination address.\\n     */\\n    function computeAddress(bytes32 salt, bytes32 bytecodeHash) internal view returns (address) {\\n        return computeAddress(salt, bytecodeHash, address(this));\\n    }\\n\\n    /**\\n     * @dev Returns the address where a contract will be stored if deployed via {deploy} from a contract located at\\n     * `deployer`. If `deployer` is this contract's address, returns the same value as {computeAddress}.\\n     */\\n    function computeAddress(bytes32 salt, bytes32 bytecodeHash, address deployer) internal pure returns (address addr) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40) // Get free memory pointer\\n\\n            // |                   | \u2193 ptr ...  \u2193 ptr + 0x0B (start) ...  \u2193 ptr + 0x20 ...  \u2193 ptr + 0x40 ...   |\\n            // |-------------------|---------------------------------------------------------------------------|\\n            // | bytecodeHash      |                                                        CCCCCCCCCCCCC...CC |\\n            // | salt              |                                      BBBBBBBBBBBBB...BB                   |\\n            // | deployer          | 000000...0000AAAAAAAAAAAAAAAAAAA...AA                                     |\\n            // | 0xFF              |            FF                                                             |\\n            // |-------------------|---------------------------------------------------------------------------|\\n            // | memory            | 000000...00FFAAAAAAAAAAAAAAAAAAA...AABBBBBBBBBBBBB...BBCCCCCCCCCCCCC...CC |\\n            // | keccak(start, 85) |            \u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191 |\\n\\n            mstore(add(ptr, 0x40), bytecodeHash)\\n            mstore(add(ptr, 0x20), salt)\\n            mstore(ptr, deployer) // Right-aligned with 12 preceding garbage bytes\\n            let start := add(ptr, 0x0b) // The hashed data starts at the final garbage byte which we will set to 0xff\\n            mstore8(start, 0xff)\\n            addr := keccak256(start, 85)\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Pausable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Pausable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    bool private _paused;\\n\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    /**\\n     * @dev The operation failed because the contract is paused.\\n     */\\n    error EnforcedPause();\\n\\n    /**\\n     * @dev The operation failed because the contract is not paused.\\n     */\\n    error ExpectedPause();\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        if (paused()) {\\n            revert EnforcedPause();\\n        }\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        if (!paused()) {\\n            revert ExpectedPause();\\n        }\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    constructor() {\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if (_status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@privylabs/authorized/contracts/Authorized.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.17;\\n\\nimport { IAuthorized } from \\\"./interfaces/IAuthorized.sol\\\";\\n\\nabstract contract Authorized is IAuthorized {\\n    constructor() {\\n        /// @notice Add the deployer as an authorized admin\\n        owner = msg.sender;\\n    }\\n\\n    /// @notice the owner of the contract\\n    address private owner;\\n\\n    /// @notice A mapping storing authorized admins\\n    /// @dev admin address => authorized status\\n    mapping (address => bool) private authorizedAdmins;\\n\\n    /// @notice A mapping of the authorized delegate operators\\n    /// @dev operator address => authorized status\\n    mapping (address => bool) private authorizedOperators;\\n\\n    /// @notice Modifier to ensure caller is owner\\n    modifier onlyOwner() {\\n        if (msg.sender != owner) {\\n            revert Unauthorized();\\n        }\\n        _;\\n    }\\n\\n    /// @dev Modifier to ensure caller is authorized admin\\n    modifier onlyAuthorizedAdmin() {\\n        if (msg.sender != owner && !authorizedAdmins[msg.sender]) {\\n            revert Unauthorized();\\n        }\\n        _;\\n    }\\n\\n    /// @dev Modifier to ensure caller is authorized operator\\n    modifier onlyAuthorizedOperator() {\\n        if (msg.sender != owner && !authorizedAdmins[msg.sender] && !authorizedOperators[msg.sender]) {\\n            revert Unauthorized();\\n        }\\n        _;\\n    }\\n\\n    /// @inheritdoc IAuthorized\\n    function transferOwnership(address newOwner) external onlyOwner {\\n        /// check if address is not null\\n        require(newOwner != address(0), \\\"Authorized System: New owner cannot be null\\\");\\n        /// check if address is not the same as owner\\n        require(newOwner != owner, \\\"Authorized System: New owner cannot be the same as old owner\\\");\\n        /// check if address is not the same as operator\\n        require(!authorizedOperators[owner], \\\"Authorized System: Owner cannot be an operator\\\");\\n\\n        /// update the owner\\n        owner = newOwner;\\n    }\\n\\n    /// @inheritdoc IAuthorized\\n    function setAuthorizedAdmin(address _admin, bool status) public virtual onlyAuthorizedAdmin {\\n        /// check if address is not null\\n        require(_admin != address(0), \\\"Authorized System: Admin address cannot be null\\\");\\n        /// check if address is not the same as operator\\n        require(!authorizedOperators[_admin], \\\"Authorized System: Admin cannot be an operator\\\");\\n        \\n        /// update the admin status\\n        authorizedAdmins[_admin] = status;\\n        emit SetAdmin(_admin);\\n    }\\n\\n    /// @inheritdoc IAuthorized\\n    function setAuthorizedOperator(address _operator, bool status) public virtual onlyAuthorizedAdmin {\\n        /// check if address is not null\\n        require(_operator != address(0), \\\"Authorized System: Operator address cannot be null\\\");\\n        /// check if address is not the same as admin\\n        require(!authorizedAdmins[_operator], \\\"Authorized System: Operator cannot be an admin\\\");\\n        \\n        /// update the operator status\\n        authorizedOperators[_operator] = status;\\n        emit SetOperator(_operator);\\n    }\\n\\n    /// @inheritdoc IAuthorized\\n    function getAuthorizedAdmin(address _admin) public view virtual returns (bool) {\\n        return authorizedAdmins[_admin];\\n    }\\n\\n    /// @inheritdoc IAuthorized\\n    function getAuthorizedOperator(address _operator) public view virtual returns (bool) {\\n        return authorizedOperators[_operator];\\n    }\\n\\n    /// @inheritdoc IAuthorized\\n    function getOwner() public view virtual override returns (address) {\\n        return owner;\\n    }\\n}\"\r\n    },\r\n    \"@privylabs/authorized/contracts/interfaces/IAuthorized.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.17;\\n\\ninterface IAuthorized {\\n\\n    /// @notice Generic error when a user attempts to access a feature/function without proper access\\n    error Unauthorized();\\n\\n    /// @notice Event emitted when a new admin is added\\n    event SetAdmin(address indexed admin);\\n\\n    /// @notice Event emitted when a new operator is added\\n    event SetOperator(address indexed operator);\\n\\n    /// @notice Event emmited when a new authOperator is added\\n    event SetAuthOperator(address indexed authOperator);\\n\\n    /// @notice Transfer ownership of the contract to a new account (`newOwner`).\\n    /// @param newOwner The address to transfer ownership to.\\n    function transferOwnership(address newOwner) external;\\n\\n    /// @notice Add an authorized admin\\n    /// @param _admin address of the admin\\n    /// @param status status of the admin\\n    function setAuthorizedAdmin(address _admin, bool status) external;\\n\\n    /// @notice Add an authorized Operator\\n    /// @param _operator address of the operator\\n    /// @param status status of the operator\\n    function setAuthorizedOperator(address _operator, bool status) external;\\n\\n    /// @notice Get the status of an admin\\n    /// @param _admin address of the admin\\n    /// @return status of the admin\\n    function getAuthorizedAdmin(address _admin) external view returns (bool);\\n\\n    /// @notice Get the status of an operator\\n    /// @param _operator address of the operator\\n    /// @return status of the operator\\n    function getAuthorizedOperator(address _operator) external view returns (bool);\\n\\n    /// @notice Get the owner\\n    function getOwner() external view returns (address);\\n}\"\r\n    },\r\n    \"@uniswap/v3-periphery/contracts/interfaces/IERC721Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.7.5;\\n\\nimport '@openzeppelin/contracts/token/ERC721/IERC721.sol';\\n\\n/// @title ERC721 with permit\\n/// @notice Extension to ERC721 that includes a permit function for signature based approvals\\ninterface IERC721Permit is IERC721 {\\n    /// @notice The permit typehash used in the permit signature\\n    /// @return The typehash for the permit\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n\\n    /// @notice The domain separator used in the permit signature\\n    /// @return The domain seperator used in encoding of permit signature\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n\\n    /// @notice Approve of a specific token ID for spending by spender via signature\\n    /// @param spender The account that is being approved\\n    /// @param tokenId The ID of the token that is being approved for spending\\n    /// @param deadline The deadline timestamp by which the call must be mined for the approve to work\\n    /// @param v Must produce valid secp256k1 signature from the holder along with `r` and `s`\\n    /// @param r Must produce valid secp256k1 signature from the holder along with `v` and `s`\\n    /// @param s Must produce valid secp256k1 signature from the holder along with `r` and `v`\\n    function permit(\\n        address spender,\\n        uint256 tokenId,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external payable;\\n}\\n\"\r\n    },\r\n    \"@uniswap/v3-periphery/contracts/interfaces/IPeripheryImmutableState.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Immutable state\\n/// @notice Functions that return immutable state of the router\\ninterface IPeripheryImmutableState {\\n    /// @return Returns the address of the Uniswap V3 factory\\n    function factory() external view returns (address);\\n\\n    /// @return Returns the address of WETH9\\n    function WETH9() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"@uniswap/v3-periphery/contracts/interfaces/IPeripheryPayments.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.7.5;\\n\\n/// @title Periphery Payments\\n/// @notice Functions to ease deposits and withdrawals of ETH\\ninterface IPeripheryPayments {\\n    /// @notice Unwraps the contract's WETH9 balance and sends it to recipient as ETH.\\n    /// @dev The amountMinimum parameter prevents malicious contracts from stealing WETH9 from users.\\n    /// @param amountMinimum The minimum amount of WETH9 to unwrap\\n    /// @param recipient The address receiving ETH\\n    function unwrapWETH9(uint256 amountMinimum, address recipient) external payable;\\n\\n    /// @notice Refunds any ETH balance held by this contract to the `msg.sender`\\n    /// @dev Useful for bundling with mint or increase liquidity that uses ether, or exact output swaps\\n    /// that use ether for the input amount\\n    function refundETH() external payable;\\n\\n    /// @notice Transfers the full amount of a token held by this contract to recipient\\n    /// @dev The amountMinimum parameter prevents malicious contracts from stealing the token from users\\n    /// @param token The contract address of the token which will be transferred to `recipient`\\n    /// @param amountMinimum The minimum amount of token required for a transfer\\n    /// @param recipient The destination address of the token\\n    function sweepToken(\\n        address token,\\n        uint256 amountMinimum,\\n        address recipient\\n    ) external payable;\\n}\\n\"\r\n    },\r\n    \"@uniswap/v3-periphery/contracts/interfaces/IPoolInitializer.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.7.5;\\npragma abicoder v2;\\n\\n/// @title Creates and initializes V3 Pools\\n/// @notice Provides a method for creating and initializing a pool, if necessary, for bundling with other methods that\\n/// require the pool to exist.\\ninterface IPoolInitializer {\\n    /// @notice Creates a new pool if it does not exist, then initializes if not initialized\\n    /// @dev This method can be bundled with others via IMulticall for the first action (e.g. mint) performed against a pool\\n    /// @param token0 The contract address of token0 of the pool\\n    /// @param token1 The contract address of token1 of the pool\\n    /// @param fee The fee amount of the v3 pool for the specified token pair\\n    /// @param sqrtPriceX96 The initial square root price of the pool as a Q64.96 value\\n    /// @return pool Returns the pool address based on the pair of tokens and fee, will return the newly created pool address if necessary\\n    function createAndInitializePoolIfNecessary(\\n        address token0,\\n        address token1,\\n        uint24 fee,\\n        uint160 sqrtPriceX96\\n    ) external payable returns (address pool);\\n}\\n\"\r\n    },\r\n    \"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.6.0;\\n\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\n\\nlibrary TransferHelper {\\n    /// @notice Transfers tokens from the targeted address to the given destination\\n    /// @notice Errors with 'STF' if transfer fails\\n    /// @param token The contract address of the token to be transferred\\n    /// @param from The originating address from which the tokens will be transferred\\n    /// @param to The destination address of the transfer\\n    /// @param value The amount to be transferred\\n    function safeTransferFrom(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        (bool success, bytes memory data) =\\n            token.call(abi.encodeWithSelector(IERC20.transferFrom.selector, from, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'STF');\\n    }\\n\\n    /// @notice Transfers tokens from msg.sender to a recipient\\n    /// @dev Errors with ST if transfer fails\\n    /// @param token The contract address of the token which will be transferred\\n    /// @param to The recipient of the transfer\\n    /// @param value The value of the transfer\\n    function safeTransfer(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(IERC20.transfer.selector, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'ST');\\n    }\\n\\n    /// @notice Approves the stipulated contract to spend the given allowance in the given token\\n    /// @dev Errors with 'SA' if transfer fails\\n    /// @param token The contract address of the token to be approved\\n    /// @param to The target of the approval\\n    /// @param value The amount of the given token the target will be allowed to spend\\n    function safeApprove(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(IERC20.approve.selector, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'SA');\\n    }\\n\\n    /// @notice Transfers ETH to the recipient address\\n    /// @dev Fails with `STE`\\n    /// @param to The destination of the transfer\\n    /// @param value The value to be transferred\\n    function safeTransferETH(address to, uint256 value) internal {\\n        (bool success, ) = to.call{value: value}(new bytes(0));\\n        require(success, 'STE');\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/ERC20AntiBot.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.24;\\n\\n/*\\n\\n                                                                                                    \\n                    &&&&&& &&&&&                                        &%                          \\n                     &&&&&&&&&&&&&&&                               && &&&&&&&&&&%                   \\n                     &&&&&&&      &&&&&                          #&&&&&&&&&&&&&                     \\n                     &&&&&  &&&&&&&   &&                      &&&&    &%  &&&&&&&                   \\n                        &&. &&&&&&&&&&                        &  %&&&&&&&  &&&&                     \\n                        &&&&  *&&&&&&&&&                       &&&&&&&&&  &&&&                      \\n                           .&&&   &&&&&&&&                   &&&&&&&&   &&&                         \\n                                    .&&&&&&&               &&&&&&&   &&&%                           \\n                                       &&&&&&             &&&&&&                                    \\n                                         &&&&&          /&&&&.                                      \\n                                           &&&&  %&&&  #&&&,                                        \\n                                   &&&&(     &&&&&&&&&&&&&                                          \\n                               &&&&&&&&&&&&&&&&&&&&&&&&&&&&   &&&&&&&&&&                            \\n                             &&&%        &&&&&&&&&&&&&&&&&&&&&&&&&     &&&                          \\n                            &&&    &&&*    &&&&&&&&&&&&&&&&&&&&&         &&*                        \\n                           &&&   .&&&&&&   &&&&&&&&&&&&&&&&&&&&   &&&&&   &&                        \\n                           &&&   #&&&&&&   &&&&&&&&&&&&&&&&&&&&&  &&&&&   &&                        \\n                            &&&    &&&&    &&&&&&&&&&&&&&&&&&&&&&  #&&   &&&                        \\n                             &&&         &&&&&&&&&&&&&&&&&&&&&&&&,     *&&&                         \\n                              (&&&&&&&&&&&&&&&&&&&&          &&&&&&&&&&&%                           \\n                                  &&&&&&&&&&&&&&&&&          &&&&&                                  \\n                                    &&&&&&&&&&&&&&&&&&    %&&&&&&&                                  \\n                                    &&&&&&&&&&&&&&&&&&&&&&&&&&&&&&#                                 \\n                                      &&&&&&&&&&&&&&&&&&&&&&&&&&&&                                  \\n                                           &&&&&&&&&&&&&&&&&&&&                                     \\n\\n*/\\n/*\\n * ERC20AntiBot contract\\n * This contract is used to control bad actors using bots on trades\\n */\\n/// @title ERC20AntiBot\\n/// @author Smithii\\n\\nimport {IERC20AntiBot} from \\\"./interfaces/services/IERC20AntiBot.sol\\\";\\nimport {Indexable} from \\\"./utils/Indexable.sol\\\";\\nimport {Payable} from \\\"./utils/Payable.sol\\\";\\n\\ncontract ERC20AntiBot is IERC20AntiBot, Payable, Indexable {\\n    constructor(\\n        address _indexer,\\n        address _payments,\\n        string memory _serviceId\\n    ) Indexable(_indexer) Payable(_payments, _serviceId) {}\\n\\n    /// mappings\\n    mapping(address => mapping(address => uint256)) private buyBlock;\\n    mapping(address => Options) private canUseAntiBot;\\n    mapping(address => mapping(address => bool)) public exempts;\\n\\n    /// @inheritdoc IERC20AntiBot\\n    function isBotDetected(address _from) public view returns (bool) {\\n        if (isExempt(msg.sender, _from)) return false;\\n\\n        if (isActive(msg.sender)) {\\n            return (buyBlock[msg.sender][_from] == block.number);\\n        }\\n        return false;\\n    }\\n    /// @inheritdoc IERC20AntiBot\\n    function registerBlock(address _to) external {\\n        if (isActive(msg.sender)) {\\n            buyBlock[msg.sender][_to] = block.number;\\n        }\\n    }\\n    /// set a token address to be registered in the AntiBot\\n    /// @param _tokenAddress the address to check\\n    /// @param _options the options for anti bot\\n    function _setCanUseAntiBot(\\n        address _tokenAddress,\\n        Options memory _options\\n    ) internal {\\n        canUseAntiBot[_tokenAddress] = _options;\\n    }\\n    /// @inheritdoc IERC20AntiBot\\n    function setCanUseAntiBot(\\n        bytes32 projectId,\\n        address _tokenAddress\\n    ) external payable onlyProjectOwner(_tokenAddress) {\\n        if (canUseAntiBot[_tokenAddress].active)\\n            revert TokenAlreadyActiveOnAntiBot();\\n        Options memory _options = Options(true, true);\\n        _setCanUseAntiBot(_tokenAddress, _options);\\n        payService(projectId, _tokenAddress, 1);\\n    }\\n    /// @inheritdoc IERC20AntiBot\\n    function setActive(\\n        address _tokenAddress,\\n        bool _active\\n    ) external onlyProjectOwner(_tokenAddress) {\\n        if (!canUseAntiBot[_tokenAddress].active)\\n            revert TokenNotActiveOnAntiBot();\\n        canUseAntiBot[_tokenAddress].applied = _active;\\n    }\\n    /// @inheritdoc IERC20AntiBot\\n    function setExempt(\\n        address _tokenAddress,\\n        address _traderAddress,\\n        bool _exempt\\n    ) external onlyProjectOwner(_tokenAddress) {\\n        if (!canUseAntiBot[_tokenAddress].active)\\n            revert TokenNotActiveOnAntiBot();\\n        exempts[_tokenAddress][_traderAddress] = _exempt;\\n    }\\n    /// @inheritdoc IERC20AntiBot\\n    function isExempt(\\n        address _tokenAddress,\\n        address _traderAddress\\n    ) public view returns (bool) {\\n        return exempts[_tokenAddress][_traderAddress];\\n    }\\n    /// @inheritdoc IERC20AntiBot\\n    function isActive(address _tokenAddress) public view returns (bool) {\\n        if (!canUseAntiBot[_tokenAddress].active) return false;\\n        return canUseAntiBot[_tokenAddress].applied;\\n    }\\n    /// @inheritdoc IERC20AntiBot\\n    function canUse(address _tokenAddress) public view returns (bool) {\\n        return canUseAntiBot[_tokenAddress].active;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/ERC20AntiWhale.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.24;\\n\\n/*\\n\\n                                                                                                    \\n                    &&&&&& &&&&&                                        &%                          \\n                     &&&&&&&&&&&&&&&                               && &&&&&&&&&&%                   \\n                     &&&&&&&      &&&&&                          #&&&&&&&&&&&&&                     \\n                     &&&&&  &&&&&&&   &&                      &&&&    &%  &&&&&&&                   \\n                        &&. &&&&&&&&&&                        &  %&&&&&&&  &&&&                     \\n                        &&&&  *&&&&&&&&&                       &&&&&&&&&  &&&&                      \\n                           .&&&   &&&&&&&&                   &&&&&&&&   &&&                         \\n                                    .&&&&&&&               &&&&&&&   &&&%                           \\n                                       &&&&&&             &&&&&&                                    \\n                                         &&&&&          /&&&&.                                      \\n                                           &&&&  %&&&  #&&&,                                        \\n                                   &&&&(     &&&&&&&&&&&&&                                          \\n                               &&&&&&&&&&&&&&&&&&&&&&&&&&&&   &&&&&&&&&&                            \\n                             &&&%        &&&&&&&&&&&&&&&&&&&&&&&&&     &&&                          \\n                            &&&    &&&*    &&&&&&&&&&&&&&&&&&&&&         &&*                        \\n                           &&&   .&&&&&&   &&&&&&&&&&&&&&&&&&&&   &&&&&   &&                        \\n                           &&&   #&&&&&&   &&&&&&&&&&&&&&&&&&&&&  &&&&&   &&                        \\n                            &&&    &&&&    &&&&&&&&&&&&&&&&&&&&&&  #&&   &&&                        \\n                             &&&         &&&&&&&&&&&&&&&&&&&&&&&&,     *&&&                         \\n                              (&&&&&&&&&&&&&&&&&&&&          &&&&&&&&&&&%                           \\n                                  &&&&&&&&&&&&&&&&&          &&&&&                                  \\n                                    &&&&&&&&&&&&&&&&&&    %&&&&&&&                                  \\n                                    &&&&&&&&&&&&&&&&&&&&&&&&&&&&&&#                                 \\n                                      &&&&&&&&&&&&&&&&&&&&&&&&&&&&                                  \\n                                           &&&&&&&&&&&&&&&&&&&&                                     \\n\\n*/\\n/*\\n * ERC20AntiWhale contract\\n * This contract is used to control bad actors controlling large amounts of tokens\\n */\\n/// @title ERC20AntiWhale\\n/// @author Smithii\\n\\nimport {IERC20AntiWhale} from \\\"./interfaces/services/IERC20AntiWhale.sol\\\";\\nimport {Indexable} from \\\"./utils/Indexable.sol\\\";\\nimport {Payable} from \\\"./utils/Payable.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ncontract ERC20AntiWhale is IERC20AntiWhale, Indexable, Payable {\\n    /// mappings\\n    mapping(address => mapping(address => uint256)) private buyBlock;\\n    mapping(address => Options) private canUseAntiWhale;\\n    mapping(address => mapping(address => bool)) public exempts;\\n\\n    constructor(\\n        address _indexer,\\n        address _payments,\\n        string memory _serviceId\\n    ) Indexable(_indexer) Payable(_payments, _serviceId) {}\\n\\n    /// @inheritdoc IERC20AntiWhale\\n    function isWhaleDetected(\\n        address _to,\\n        uint256 _amount\\n    ) public view returns (bool) {\\n        if (isExempt(msg.sender, _to)) return false;\\n\\n        bool isWhale = false;\\n        if (isActive(msg.sender)) {\\n            if (_amount > canUseAntiWhale[msg.sender].maxAmountPerTrade)\\n                isWhale = true;\\n            if (\\n                _amount + IERC20(msg.sender).balanceOf(_to) >\\n                canUseAntiWhale[msg.sender].maxAmountTotal\\n            ) isWhale = true;\\n            if (\\n                block.timestamp <\\n                buyBlock[msg.sender][_to] +\\n                    canUseAntiWhale[msg.sender].timeLimitPerTrade\\n            ) isWhale = true;\\n        }\\n        return isWhale;\\n    }\\n    /// @inheritdoc IERC20AntiWhale\\n    function registerBlockTimeStamp(address _to) external {\\n        if (isActive(msg.sender)) {\\n            buyBlock[msg.sender][_to] = block.timestamp;\\n        }\\n    }\\n    /// set a token address to be registered in the AntiWhale\\n    /// @param _address the address to check\\n    /// @param _options the options for anti whale\\n    function _setCanUseAntiWhale(\\n        address _address,\\n        Options memory _options\\n    ) internal {\\n        canUseAntiWhale[_address] = _options;\\n    }\\n    /// @inheritdoc IERC20AntiWhale\\n    function setCanUseAntiWhale(\\n        bytes32 projectId,\\n        address _tokenAddress,\\n        Options memory _options\\n    ) external payable onlyProjectOwner(_tokenAddress) {\\n        if (canUseAntiWhale[_tokenAddress].active)\\n            revert TokenAlreadyActiveOnAntiWhale();\\n        _options.active = true;\\n        _options.activePeriodStarted = block.timestamp;\\n        _setCanUseAntiWhale(_tokenAddress, _options);\\n        payService(projectId, _tokenAddress, 1);\\n    }\\n    /// @inheritdoc IERC20AntiWhale\\n    function setMaxAmountPerTrade(\\n        address _tokenAddress,\\n        uint256 _maxAmountPerTrade\\n    ) external onlyProjectOwner(_tokenAddress) {\\n        if (!canUseAntiWhale[_tokenAddress].active)\\n            revert TokenNotActiveOnAntiWhale();\\n        canUseAntiWhale[_tokenAddress].maxAmountPerTrade = _maxAmountPerTrade;\\n    }\\n    /// @inheritdoc IERC20AntiWhale\\n    function setMaxAmountTotal(\\n        address _tokenAddress,\\n        uint256 _maxAmountTotal\\n    ) external onlyProjectOwner(_tokenAddress) {\\n        if (!canUseAntiWhale[_tokenAddress].active)\\n            revert TokenNotActiveOnAntiWhale();\\n        canUseAntiWhale[_tokenAddress].maxAmountTotal = _maxAmountTotal;\\n    }\\n    /// @inheritdoc IERC20AntiWhale\\n    function setTimeLimitPerTrade(\\n        address _tokenAddress,\\n        uint256 _timeLimitPerTrade\\n    ) external onlyProjectOwner(_tokenAddress) {\\n        if (!canUseAntiWhale[_tokenAddress].active)\\n            revert TokenNotActiveOnAntiWhale();\\n        canUseAntiWhale[_tokenAddress].timeLimitPerTrade = _timeLimitPerTrade;\\n    }\\n    /// @inheritdoc IERC20AntiWhale\\n    function setActivePeriod(\\n        address _tokenAddress,\\n        uint256 _activePeriod\\n    ) external onlyProjectOwner(_tokenAddress) {\\n        if (!canUseAntiWhale[_tokenAddress].active)\\n            revert TokenNotActiveOnAntiWhale();\\n        canUseAntiWhale[_tokenAddress].activePeriod = _activePeriod;\\n        canUseAntiWhale[_tokenAddress].activePeriodStarted = block.timestamp;\\n    }\\n    /// @inheritdoc IERC20AntiWhale\\n    function setExempt(\\n        address _tokenAddress,\\n        address _traderAddress,\\n        bool _exempt\\n    ) external onlyProjectOwner(_tokenAddress) {\\n        if (!canUseAntiWhale[_tokenAddress].active)\\n            revert TokenNotActiveOnAntiWhale();\\n        exempts[_tokenAddress][_traderAddress] = _exempt;\\n    }\\n    /// @inheritdoc IERC20AntiWhale\\n    function isExempt(\\n        address _tokenAddress,\\n        address _traderAddress\\n    ) public view returns (bool) {\\n        return exempts[_tokenAddress][_traderAddress];\\n    }\\n    /// @inheritdoc IERC20AntiWhale\\n    function isActive(address _tokenAddress) public view returns (bool) {\\n        if (!canUseAntiWhale[_tokenAddress].active) return false;\\n        return\\n            block.timestamp <\\n            canUseAntiWhale[_tokenAddress].activePeriodStarted +\\n                canUseAntiWhale[_tokenAddress].activePeriod;\\n    }\\n    /// @inheritdoc IERC20AntiWhale\\n    function canUse(address _tokenAddress) public view returns (bool) {\\n        return canUseAntiWhale[_tokenAddress].active;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/ERC20PoolFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.24;\\npragma abicoder v2;\\n\\n/*\\n\\n                                                                                                    \\n                    &&&&&& &&&&&                                        &%                          \\n                     &&&&&&&&&&&&&&&                               && &&&&&&&&&&%                   \\n                     &&&&&&&      &&&&&                          #&&&&&&&&&&&&&                     \\n                     &&&&&  &&&&&&&   &&                      &&&&    &%  &&&&&&&                   \\n                        &&. &&&&&&&&&&                        &  %&&&&&&&  &&&&                     \\n                        &&&&  *&&&&&&&&&                       &&&&&&&&&  &&&&                      \\n                           .&&&   &&&&&&&&                   &&&&&&&&   &&&                         \\n                                    .&&&&&&&               &&&&&&&   &&&%                           \\n                                       &&&&&&             &&&&&&                                    \\n                                         &&&&&          /&&&&.                                      \\n                                           &&&&  %&&&  #&&&,                                        \\n                                   &&&&(     &&&&&&&&&&&&&                                          \\n                               &&&&&&&&&&&&&&&&&&&&&&&&&&&&   &&&&&&&&&&                            \\n                             &&&%        &&&&&&&&&&&&&&&&&&&&&&&&&     &&&                          \\n                            &&&    &&&*    &&&&&&&&&&&&&&&&&&&&&         &&*                        \\n                           &&&   .&&&&&&   &&&&&&&&&&&&&&&&&&&&   &&&&&   &&                        \\n                           &&&   #&&&&&&   &&&&&&&&&&&&&&&&&&&&&  &&&&&   &&                        \\n                            &&&    &&&&    &&&&&&&&&&&&&&&&&&&&&&  #&&   &&&                        \\n                             &&&         &&&&&&&&&&&&&&&&&&&&&&&&,     *&&&                         \\n                              (&&&&&&&&&&&&&&&&&&&&          &&&&&&&&&&&%                           \\n                                  &&&&&&&&&&&&&&&&&          &&&&&                                  \\n                                    &&&&&&&&&&&&&&&&&&    %&&&&&&&                                  \\n                                    &&&&&&&&&&&&&&&&&&&&&&&&&&&&&&#                                 \\n                                      &&&&&&&&&&&&&&&&&&&&&&&&&&&&                                  \\n                                           &&&&&&&&&&&&&&&&&&&&                                     \\n\\n*/\\n/*\\n * Pool Factory contract\\n * This contract is used to create a liquidity pool on Uniswap V3\\n */\\n/// @title PoolFactory\\n/// @author Smithii\\n\\nimport {IERC721Receiver} from \\\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\\\";\\nimport {TransferHelper} from \\\"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\\\";\\nimport {INonfungiblePositionManager} from \\\"./interfaces/INonfungiblePositionManager.sol\\\";\\nimport {Payable} from \\\"./utils/Payable.sol\\\";\\n\\ncontract ERC20PoolFactory is IERC721Receiver, Payable {\\n    /// @dev The minimum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**-128\\n    int24 internal constant MIN_TICK = -887272;\\n    /// @dev The maximum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**128\\n    int24 internal constant MAX_TICK = -MIN_TICK;\\n    struct Deposit {\\n        address owner;\\n        uint128 liquidity;\\n        address token0;\\n        address token1;\\n    }\\n    INonfungiblePositionManager public immutable nonfungiblePositionManager;\\n    /// events\\n    event PositionMinted(\\n        uint256 tokenId,\\n        uint128 liquidity,\\n        uint256 amount0,\\n        uint256 amount1\\n    );\\n    event FeesCollected(uint256 amount0, uint256 amount1);\\n    event LiquidityIncreased(\\n        uint256 liquidity,\\n        uint256 amount0,\\n        uint256 amount1\\n    );\\n    event LiquidityDecreased(uint256 amount0, uint256 amount1);\\n\\n    /// mappings\\n    mapping(uint256 => Deposit) public deposits;\\n\\n    constructor(\\n        address _nonfungiblePositionManager,\\n        address _payments,\\n        string memory _serviceId\\n    ) Payable(_payments, _serviceId) {\\n        nonfungiblePositionManager = INonfungiblePositionManager(\\n            _nonfungiblePositionManager\\n        );\\n    }\\n    /// @inheritdoc IERC721Receiver\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external override returns (bytes4) {\\n        // get position information\\n\\n        _createDeposit(operator, tokenId);\\n\\n        return this.onERC721Received.selector;\\n    }\\n    /// Create Depoisit function\\n    /// @param owner the owner of the deposit\\n    /// @param tokenId the id of the deposit\\n    function _createDeposit(address owner, uint256 tokenId) internal {\\n        (\\n            ,\\n            ,\\n            address token0,\\n            address token1,\\n            ,\\n            ,\\n            ,\\n            uint128 liquidity,\\n            ,\\n            ,\\n            ,\\n\\n        ) = nonfungiblePositionManager.positions(tokenId);\\n\\n        // set the owner and data for position\\n        // operator is msg.sender\\n        deposits[tokenId] = Deposit({\\n            owner: owner,\\n            liquidity: liquidity,\\n            token0: token0,\\n            token1: token1\\n        });\\n    }\\n\\n    /// @notice Mint a new position, creates the pool and mints a token\\n    /// @param _token0 the address of the token0\\n    /// @param _token1 the address of the token1\\n    /// @param _amount0ToMint the amount of token0 to mint\\n    /// @param _amount1ToMint the amount of token1 to mint\\n    /// @param poolFee the pool fee\\n    /// @return tokenId the id of the erc721\\n    /// @return liquidity the amount of liquidity\\n    /// @return amount0 the amount of token0\\n    /// @return amount1 the amount of token1\\n    function mintNewPosition(\\n        address _token0,\\n        address _token1,\\n        uint256 _amount0ToMint,\\n        uint256 _amount1ToMint,\\n        uint24 poolFee,\\n        bytes32 _projectId\\n    )\\n        external\\n        payable\\n        returns (\\n            uint256 tokenId,\\n            uint128 liquidity,\\n            uint256 amount0,\\n            uint256 amount1\\n        )\\n    {\\n        // Approve the position manager\\n        TransferHelper.safeApprove(\\n            _token0,\\n            address(nonfungiblePositionManager),\\n            _amount0ToMint\\n        );\\n        TransferHelper.safeApprove(\\n            _token1,\\n            address(nonfungiblePositionManager),\\n            _amount1ToMint\\n        );\\n\\n        INonfungiblePositionManager.MintParams\\n            memory params = INonfungiblePositionManager.MintParams({\\n                token0: _token0,\\n                token1: _token1,\\n                fee: poolFee,\\n                tickLower: MIN_TICK,\\n                tickUpper: MAX_TICK,\\n                amount0Desired: _amount0ToMint,\\n                amount1Desired: _amount1ToMint,\\n                amount0Min: 0,\\n                amount1Min: 0,\\n                recipient: address(this),\\n                deadline: block.timestamp\\n            });\\n\\n        ///@dev Note that the pool defined by DAI/USDC and fee tier 0.01% \\n        ///@dev must already be created and initialized in order to mint\\n        (tokenId, liquidity, amount0, amount1) = nonfungiblePositionManager\\n            .mint(params);\\n\\n        // Create a deposit\\n        _createDeposit(msg.sender, tokenId);\\n\\n        // Remove allowance and refund in both assets.\\n        if (amount0 < _amount0ToMint) {\\n            TransferHelper.safeApprove(\\n                _token0,\\n                address(nonfungiblePositionManager),\\n                0\\n            );\\n            uint256 refund0 = _amount0ToMint - amount0;\\n            TransferHelper.safeTransfer(_token0, msg.sender, refund0);\\n        }\\n\\n        if (amount1 < _amount1ToMint) {\\n            TransferHelper.safeApprove(\\n                _token0,\\n                address(nonfungiblePositionManager),\\n                0\\n            );\\n            uint256 refund1 = _amount1ToMint - amount1;\\n            TransferHelper.safeTransfer(_token1, msg.sender, refund1);\\n        }\\n        payService(_projectId, _token0, 1);\\n        emit PositionMinted(tokenId, liquidity, amount0, amount1);\\n        return (tokenId, liquidity, amount0, amount1);\\n    }\\n    /// Collect all fees from a position\\n    /// @param tokenId The id of the erc721\\n    /// @return amount0 the amount of token0\\n    /// @return amount1 the amount of token1\\n    function collectAllFees(\\n        uint256 tokenId\\n    ) external returns (uint256 amount0, uint256 amount1) {\\n        // Caller must own the ERC721 position\\n        // Call to safeTransfer will trigger `onERC721Received` which must return the selector else transfer will fail\\n        nonfungiblePositionManager.safeTransferFrom(\\n            msg.sender,\\n            address(this),\\n            tokenId\\n        );\\n\\n        // set amount0Max and amount1Max to uint256.max to collect all fees\\n        // alternatively can set recipient to msg.sender and avoid another transaction in `sendToOwner`\\n        INonfungiblePositionManager.CollectParams\\n            memory params = INonfungiblePositionManager.CollectParams({\\n                tokenId: tokenId,\\n                recipient: address(this),\\n                amount0Max: type(uint128).max,\\n                amount1Max: type(uint128).max\\n            });\\n\\n        (amount0, amount1) = nonfungiblePositionManager.collect(params);\\n\\n        // send collected feed back to owner\\n        _sendToOwner(tokenId, amount0, amount1);\\n        emit FeesCollected(amount0, amount1);\\n        return (amount0, amount1);\\n    }\\n\\n    /// @notice Transfers funds to owner of NFT\\n    /// @param tokenId The id of the erc721\\n    /// @param amount0 The amount of token0\\n    /// @param amount1 The amount of token1\\n    function _sendToOwner(\\n        uint256 tokenId,\\n        uint256 amount0,\\n        uint256 amount1\\n    ) internal {\\n        // get owner of contract\\n        address owner = deposits[tokenId].owner;\\n\\n        address token0 = deposits[tokenId].token0;\\n        address token1 = deposits[tokenId].token1;\\n        // send collected fees to owner\\n        TransferHelper.safeTransfer(token0, owner, amount0);\\n        TransferHelper.safeTransfer(token1, owner, amount1);\\n    }\\n    ///\\n    /// @param tokenId The id of the erc721\\n    /// @param amountAdd0 the amount to add of token0\\n    /// @param amountAdd1 the amount to add of token1\\n    /// @return liquidity the amount of liquidity\\n    /// @return amount0 the amount of token0\\n    /// @return amount1 the amount of token1\\n    function increaseLiquidityCurrentRange(\\n        uint256 tokenId,\\n        uint256 amountAdd0,\\n        uint256 amountAdd1\\n    ) external returns (uint128 liquidity, uint256 amount0, uint256 amount1) {\\n        TransferHelper.safeTransferFrom(\\n            deposits[tokenId].token0,\\n            msg.sender,\\n            address(this),\\n            amountAdd0\\n        );\\n        TransferHelper.safeTransferFrom(\\n            deposits[tokenId].token1,\\n            msg.sender,\\n            address(this),\\n            amountAdd1\\n        );\\n\\n        TransferHelper.safeApprove(\\n            deposits[tokenId].token0,\\n            address(nonfungiblePositionManager),\\n            amountAdd0\\n        );\\n        TransferHelper.safeApprove(\\n            deposits[tokenId].token1,\\n            address(nonfungiblePositionManager),\\n            amountAdd1\\n        );\\n\\n        INonfungiblePositionManager.IncreaseLiquidityParams\\n            memory params = INonfungiblePositionManager\\n                .IncreaseLiquidityParams({\\n                    tokenId: tokenId,\\n                    amount0Desired: amountAdd0,\\n                    amount1Desired: amountAdd1,\\n                    amount0Min: 0,\\n                    amount1Min: 0,\\n                    deadline: block.timestamp\\n                });\\n\\n        (liquidity, amount0, amount1) = nonfungiblePositionManager\\n            .increaseLiquidity(params);\\n\\n        emit LiquidityIncreased(liquidity, amount0, amount1);\\n    }\\n    ///\\n    /// @param tokenId The id of the erc721\\n    /// @param newLiquidity the new liquidity\\n    /// @return amount0 the amount of token0\\n    /// @return amount1 the amount of token1\\n    function decreaseLiquidity(\\n        uint256 tokenId,\\n        uint128 newLiquidity\\n    ) external returns (uint256 amount0, uint256 amount1) {\\n        // caller must be the owner of the NFT\\n        require(msg.sender == deposits[tokenId].owner, \\\"Not the owner\\\");\\n        // get liquidity data for tokenId\\n        uint128 liquidity = deposits[tokenId].liquidity;\\n        //uint128 halfLiquidity = liquidity / 2;\\n        require(\\n            newLiquidity < liquidity,\\n            \\\"New liquidity must be lesser than current liquidity\\\"\\n        );\\n\\n        // amount0Min and amount1Min are price slippage checks\\n        // if the amount received after burning is not greater than these minimums, transaction will fail\\n        INonfungiblePositionManager.DecreaseLiquidityParams\\n            memory params = INonfungiblePositionManager\\n                .DecreaseLiquidityParams({\\n                    tokenId: tokenId,\\n                    liquidity: newLiquidity,\\n                    amount0Min: 0,\\n                    amount1Min: 0,\\n                    deadline: block.timestamp\\n                });\\n\\n        (amount0, amount1) = nonfungiblePositionManager.decreaseLiquidity(\\n            params\\n        );\\n\\n        /// @notice send liquidity back to owner\\n        _sendToOwner(tokenId, amount0, amount1);\\n        emit LiquidityDecreased(amount0, amount1);\\n        return (amount0, amount1);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/ERC20TokenFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.24;\\n\\n/*\\n\\n                                                                                                    \\n                    &&&&&& &&&&&                                        &%                          \\n                     &&&&&&&&&&&&&&&                               && &&&&&&&&&&%                   \\n                     &&&&&&&      &&&&&                          #&&&&&&&&&&&&&                     \\n                     &&&&&  &&&&&&&   &&                      &&&&    &%  &&&&&&&                   \\n                        &&. &&&&&&&&&&                        &  %&&&&&&&  &&&&                     \\n                        &&&&  *&&&&&&&&&                       &&&&&&&&&  &&&&                      \\n                           .&&&   &&&&&&&&                   &&&&&&&&   &&&                         \\n                                    .&&&&&&&               &&&&&&&   &&&%                           \\n                                       &&&&&&             &&&&&&                                    \\n                                         &&&&&          /&&&&.                                      \\n                                           &&&&  %&&&  #&&&,                                        \\n                                   &&&&(     &&&&&&&&&&&&&                                          \\n                               &&&&&&&&&&&&&&&&&&&&&&&&&&&&   &&&&&&&&&&                            \\n                             &&&%        &&&&&&&&&&&&&&&&&&&&&&&&&     &&&                          \\n                            &&&    &&&*    &&&&&&&&&&&&&&&&&&&&&         &&*                        \\n                           &&&   .&&&&&&   &&&&&&&&&&&&&&&&&&&&   &&&&&   &&                        \\n                           &&&   #&&&&&&   &&&&&&&&&&&&&&&&&&&&&  &&&&&   &&                        \\n                            &&&    &&&&    &&&&&&&&&&&&&&&&&&&&&&  #&&   &&&                        \\n                             &&&         &&&&&&&&&&&&&&&&&&&&&&&&,     *&&&                         \\n                              (&&&&&&&&&&&&&&&&&&&&          &&&&&&&&&&&%                           \\n                                  &&&&&&&&&&&&&&&&&          &&&&&                                  \\n                                    &&&&&&&&&&&&&&&&&&    %&&&&&&&                                  \\n                                    &&&&&&&&&&&&&&&&&&&&&&&&&&&&&&#                                 \\n                                      &&&&&&&&&&&&&&&&&&&&&&&&&&&&                                  \\n                                           &&&&&&&&&&&&&&&&&&&&                                     \\n\\n*/\\n/*\\n * Factory contract\\n * This contract is used to deploy smart contracts and register them in the Indexer contract\\n */\\n/// @title ERC20TokenFactory\\n/// @author Smithii\\n\\nimport {Create2} from \\\"@openzeppelin/contracts/utils/Create2.sol\\\";\\nimport {Indexable} from \\\"./utils/Indexable.sol\\\";\\nimport {Payable} from \\\"./utils/Payable.sol\\\";\\n\\ncontract ERC20TokenFactory is Payable, Indexable {\\n    constructor(\\n        address _indexer,\\n        address _payments,\\n        string memory _serviceId\\n    ) Payable(_payments, _serviceId) Indexable(_indexer) {}\\n\\n    /// Deploys a contract and pays the service creating fee\\n    /// @param _projectId bytes32 projectId\\n    /// @param _byteCode the contract bytecode\\n    /// @param _type the contract type\\n    function deployContract(\\n        bytes32 _projectId,\\n        bytes calldata _byteCode,\\n        string memory _type\\n    ) external payable {\\n        address resultedAddress = Create2.computeAddress(\\n            _projectId,\\n            keccak256(_byteCode)\\n        );\\n        registerProject(_projectId, msg.sender, resultedAddress, _type);\\n        address _contract = Create2.deploy(0, _projectId, _byteCode);\\n        require(_contract == resultedAddress, \\\"Contract address mismatch\\\");\\n        // Pay the total of 1 token creation fee\\n        payService(_projectId, _contract, 1);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/INonfungiblePositionManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.7.5;\\npragma abicoder v2;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\\\";\\n\\nimport \\\"@uniswap/v3-periphery/contracts/interfaces/IPoolInitializer.sol\\\";\\nimport \\\"@uniswap/v3-periphery/contracts/interfaces/IERC721Permit.sol\\\";\\nimport \\\"@uniswap/v3-periphery/contracts/interfaces/IPeripheryPayments.sol\\\";\\nimport \\\"@uniswap/v3-periphery/contracts/interfaces/IPeripheryImmutableState.sol\\\";\\n\\n/// @title Non-fungible token for positions\\n/// @notice Wraps Uniswap V3 positions in a non-fungible token interface which allows for them to be transferred\\n/// and authorized.\\ninterface INonfungiblePositionManager is\\n    IPoolInitializer,\\n    IPeripheryPayments,\\n    IPeripheryImmutableState,\\n    IERC721Metadata,\\n    IERC721Enumerable,\\n    IERC721Permit\\n{\\n    /// @notice Emitted when liquidity is increased for a position NFT\\n    /// @dev Also emitted when a token is minted\\n    /// @param tokenId The ID of the token for which liquidity was increased\\n    /// @param liquidity The amount by which liquidity for the NFT position was increased\\n    /// @param amount0 The amount of token0 that was paid for the increase in liquidity\\n    /// @param amount1 The amount of token1 that was paid for the increase in liquidity\\n    event IncreaseLiquidity(\\n        uint256 indexed tokenId,\\n        uint128 liquidity,\\n        uint256 amount0,\\n        uint256 amount1\\n    );\\n    /// @notice Emitted when liquidity is decreased for a position NFT\\n    /// @param tokenId The ID of the token for which liquidity was decreased\\n    /// @param liquidity The amount by which liquidity for the NFT position was decreased\\n    /// @param amount0 The amount of token0 that was accounted for the decrease in liquidity\\n    /// @param amount1 The amount of token1 that was accounted for the decrease in liquidity\\n    event DecreaseLiquidity(\\n        uint256 indexed tokenId,\\n        uint128 liquidity,\\n        uint256 amount0,\\n        uint256 amount1\\n    );\\n    /// @notice Emitted when tokens are collected for a position NFT\\n    /// @dev The amounts reported may not be exactly equivalent to the amounts transferred, due to rounding behavior\\n    /// @param tokenId The ID of the token for which underlying tokens were collected\\n    /// @param recipient The address of the account that received the collected tokens\\n    /// @param amount0 The amount of token0 owed to the position that was collected\\n    /// @param amount1 The amount of token1 owed to the position that was collected\\n    event Collect(\\n        uint256 indexed tokenId,\\n        address recipient,\\n        uint256 amount0,\\n        uint256 amount1\\n    );\\n\\n    /// @notice Returns the position information associated with a given token ID.\\n    /// @dev Throws if the token ID is not valid.\\n    /// @param tokenId The ID of the token that represents the position\\n    /// @return nonce The nonce for permits\\n    /// @return operator The address that is approved for spending\\n    /// @return token0 The address of the token0 for a specific pool\\n    /// @return token1 The address of the token1 for a specific pool\\n    /// @return fee The fee associated with the pool\\n    /// @return tickLower The lower end of the tick range for the position\\n    /// @return tickUpper The higher end of the tick range for the position\\n    /// @return liquidity The liquidity of the position\\n    /// @return feeGrowthInside0LastX128 The fee growth of token0 as of the last action on the individual position\\n    /// @return feeGrowthInside1LastX128 The fee growth of token1 as of the last action on the individual position\\n    /// @return tokensOwed0 The uncollected amount of token0 owed to the position as of the last computation\\n    /// @return tokensOwed1 The uncollected amount of token1 owed to the position as of the last computation\\n    function positions(\\n        uint256 tokenId\\n    )\\n        external\\n        view\\n        returns (\\n            uint96 nonce,\\n            address operator,\\n            address token0,\\n            address token1,\\n            uint24 fee,\\n            int24 tickLower,\\n            int24 tickUpper,\\n            uint128 liquidity,\\n            uint256 feeGrowthInside0LastX128,\\n            uint256 feeGrowthInside1LastX128,\\n            uint128 tokensOwed0,\\n            uint128 tokensOwed1\\n        );\\n\\n    struct MintParams {\\n        address token0;\\n        address token1;\\n        uint24 fee;\\n        int24 tickLower;\\n        int24 tickUpper;\\n        uint256 amount0Desired;\\n        uint256 amount1Desired;\\n        uint256 amount0Min;\\n        uint256 amount1Min;\\n        address recipient;\\n        uint256 deadline;\\n    }\\n\\n    /// @notice Creates a new position wrapped in a NFT\\n    /// @dev Call this when the pool does exist and is initialized. Note that if the pool is created but not initialized\\n    /// a method does not exist, i.e. the pool is assumed to be initialized.\\n    /// @param params The params necessary to mint a position, encoded as `MintParams` in calldata\\n    /// @return tokenId The ID of the token that represents the minted position\\n    /// @return liquidity The amount of liquidity for this position\\n    /// @return amount0 The amount of token0\\n    /// @return amount1 The amount of token1\\n    function mint(\\n        MintParams calldata params\\n    )\\n        external\\n        payable\\n        returns (\\n            uint256 tokenId,\\n            uint128 liquidity,\\n            uint256 amount0,\\n            uint256 amount1\\n        );\\n\\n    struct IncreaseLiquidityParams {\\n        uint256 tokenId;\\n        uint256 amount0Desired;\\n        uint256 amount1Desired;\\n        uint256 amount0Min;\\n        uint256 amount1Min;\\n        uint256 deadline;\\n    }\\n\\n    /// @notice Increases the amount of liquidity in a position, with tokens paid by the `msg.sender`\\n    /// @param params tokenId The ID of the token for which liquidity is being increased,\\n    /// amount0Desired The desired amount of token0 to be spent,\\n    /// amount1Desired The desired amount of token1 to be spent,\\n    /// amount0Min The minimum amount of token0 to spend, which serves as a slippage check,\\n    /// amount1Min The minimum amount of token1 to spend, which serves as a slippage check,\\n    /// deadline The time by which the transaction must be included to effect the change\\n    /// @return liquidity The new liquidity amount as a result of the increase\\n    /// @return amount0 The amount of token0 to acheive resulting liquidity\\n    /// @return amount1 The amount of token1 to acheive resulting liquidity\\n    function increaseLiquidity(\\n        IncreaseLiquidityParams calldata params\\n    )\\n        external\\n        payable\\n        returns (uint128 liquidity, uint256 amount0, uint256 amount1);\\n\\n    struct DecreaseLiquidityParams {\\n        uint256 tokenId;\\n        uint128 liquidity;\\n        uint256 amount0Min;\\n        uint256 amount1Min;\\n        uint256 deadline;\\n    }\\n\\n    /// @notice Decreases the amount of liquidity in a position and accounts it to the position\\n    /// @param params tokenId The ID of the token for which liquidity is being decreased,\\n    /// amount The amount by which liquidity will be decreased,\\n    /// amount0Min The minimum amount of token0 that should be accounted for the burned liquidity,\\n    /// amount1Min The minimum amount of token1 that should be accounted for the burned liquidity,\\n    /// deadline The time by which the transaction must be included to effect the change\\n    /// @return amount0 The amount of token0 accounted to the position's tokens owed\\n    /// @return amount1 The amount of token1 accounted to the position's tokens owed\\n    function decreaseLiquidity(\\n        DecreaseLiquidityParams calldata params\\n    ) external payable returns (uint256 amount0, uint256 amount1);\\n\\n    struct CollectParams {\\n        uint256 tokenId;\\n        address recipient;\\n        uint128 amount0Max;\\n        uint128 amount1Max;\\n    }\\n\\n    /// @notice Collects up to a maximum amount of fees owed to a specific position to the recipient\\n    /// @param params tokenId The ID of the NFT for which tokens are being collected,\\n    /// recipient The account that should receive the tokens,\\n    /// amount0Max The maximum amount of token0 to collect,\\n    /// amount1Max The maximum amount of token1 to collect\\n    /// @return amount0 The amount of fees collected in token0\\n    /// @return amount1 The amount of fees collected in token1\\n    function collect(\\n        CollectParams calldata params\\n    ) external payable returns (uint256 amount0, uint256 amount1);\\n\\n    /// @notice Burns a token ID, which deletes it from the NFT contract. The token must have 0 liquidity and all tokens\\n    /// must be collected first.\\n    /// @param tokenId The ID of the token that is being burned\\n    function burn(uint256 tokenId) external payable;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/marketplace/IIndexer.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.24;\\n/*\\n * IIndexer Inteface\\n */\\n/// @title IIndexer\\n/// @author Smithii\\n\\ninterface IIndexer {\\n    /// Structs\\n    struct Contract {\\n        address contractAddress;\\n        string contracType;\\n    }\\n    struct Project {\\n        address owner;\\n        Contract[] contracts;\\n    }\\n\\n    /// Errors\\n    error ProjectContractAlreadyRegistered();\\n    error ProjectIndexAlreadyRegistered();\\n\\n    /// Events\\n    event ProjectRegistered(\\n        bytes32 projectId,\\n        address owner,\\n        address contractAddress,\\n        string contractType\\n    );\\n\\n    /// Register a project in the Indexer\\n    /// @param _projectId bytes32 projectId\\n    /// @param _owner the owner of the project\\n    /// @param _contract the contract address\\n    function registerProject(\\n        bytes32 _projectId,\\n        address _owner,\\n        address _contract,\\n        string memory _contractType\\n    ) external;\\n    /// Check if the ProjectIndex is registered\\n    /// @param _projectId bytes32 projectId\\n    /// @return bool if the proyect is aleady registered\\n    function isProjectIndexRegistered(\\n        bytes32 _projectId\\n    ) external returns (bool);\\n    /// Check if a contract is registered in the project\\n    /// @param _contract the contract address\\n    /// @return bool if the proyect is aleady registered`\\n    function isContractRegistered(address _contract) external returns (bool);\\n    /// @param _projectId the project Index\\n    function getProjectOwner(bytes32 _projectId) external returns (address);\\n    ///\\n    /// @param _projectAddress address of the project\\n    function getProjectAddressOwner(\\n        address _projectAddress\\n    ) external returns (address);\\n    ///\\n    /// @param _projectAddress address of the project\\n    /// @return address the owner of the project\\n    /// @return address[] the contracts of the project\\n    function getProjectInfoByProjectAddress(\\n        address _projectAddress\\n    ) external returns (address, Contract[] memory);\\n    ///\\n    /// @param _projectId bytes32 projectId\\n    /// @return address the owner of the project\\n    /// @return address[] the contracts of the project\\n    function getProjectInfoByIndex(\\n        bytes32 _projectId\\n    ) external returns (address, Contract[] memory);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/marketplace/IPayments.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.24;\\n\\n/*\\n * IPayments interface\\n */\\n/// @title Payments\\n/// @author Smithii\\n\\ninterface IPayments {\\n    struct Service {\\n        bytes32 serviceId;\\n        uint256 pricePerItem;\\n        bool active;\\n    }\\n\\n    struct Invoice {\\n        address user;\\n        Service service;\\n        uint256 qty;\\n        uint256 total;\\n        uint256 timestamp;\\n    }\\n\\n    /// Events\\n    event ServiceAdded(bytes32 serviceId, string name, uint256 price);\\n    event ServiceSet(bytes32 serviceId, bool active);\\n    event ServicePaid(\\n        bytes32 projectId,\\n        address contractAddress,\\n        bytes32 serviceId,\\n        address user,\\n        uint256 amount,\\n        uint256 timestamp\\n    );\\n    event ServiceWithdraw(\\n        bytes32 projectId,\\n        address contractAddress,\\n        bytes32 serviceId,\\n        uint256 amount\\n    );\\n\\n    /// Errors\\n    error ServiceNotActive(bytes32 serviceId);\\n    error InvalidTotalAmount();\\n    error ServiceAlreadyPaid(\\n        bytes32 projectId,\\n        address contractAddress,\\n        bytes32 serviceId\\n    );\\n\\n    /// Add a service to the payment program\\n    /// @param _serviceId the service id\\n    /// @param _pricePerItem the price per item\\n    function addService(bytes32 _serviceId, uint256 _pricePerItem) external;\\n    /// Set the service active status\\n    /// @param _serviceId the service id\\n    /// @param _active the active status\\n    function setService(bytes32 _serviceId, bool _active) external;\\n    /// function payService by projectId and contract address\\n    /// @param _projectId bytes32 projectId\\n    /// @param _contract the contract address\\n    /// @param _serviceId the service id\\n    /// @param _qty the qty of items to pay\\n    function payService(\\n        bytes32 _projectId,\\n        address _contract,\\n        bytes32 _serviceId,\\n        uint256 _qty\\n    ) external payable;\\n    /// Withdraw per invoice\\n    /// @param _projectId the project id\\n    /// @param _contract the contract address\\n    /// @param _serviceId the service id\\n    /// @param _to the address to withdraw the balance\\n    function withdraw(\\n        bytes32 _projectId,\\n        address _contract,\\n        bytes32 _serviceId,\\n        address payable _to\\n    ) external;\\n    /// Withdraw the contract balance\\n    /// @param _to the address to withdraw the balance\\n    function withdrawAll(address payable _to) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/services/IERC20AntiBot.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.24;\\n/*\\n * IERC20AntiBot interface\\n */\\n/// @title ERC20AntiBot\\n/// @author Smithii\\n\\ninterface IERC20AntiBot {\\n    struct Options {\\n        bool applied;\\n        bool active;\\n    }\\n    /// errors\\n    error TokenNotActiveOnAntiBot();\\n    error TokenAlreadyActiveOnAntiBot();\\n    ///\\n    /// @param _from the address to check\\n    function isBotDetected(address _from) external returns (bool);\\n    /// Registers the block number of the receiver\\n    /// @param _to the address to register\\n    function registerBlock(address _to) external;\\n    /// Registers and pay for a token address to use the Antibot\\n    /// @param projectId the project id\\n    /// @param _tokenAddress the address to register\\n    function setCanUseAntiBot(\\n        bytes32 projectId,\\n        address _tokenAddress\\n    ) external payable;\\n    /// Set the exempt status of a trader\\n    /// @param _tokenAddress the token address\\n    /// @param _traderAddress the trader address\\n    /// @param _exempt the exempt status\\n    function setExempt(\\n        address _tokenAddress,\\n        address _traderAddress,\\n        bool _exempt\\n    ) external;\\n    /// helper function to check if the trader is exempt\\n    /// @param _tokenAddress the token address\\n    /// @param _traderAddress the trader address\\n    function isExempt(\\n        address _tokenAddress,\\n        address _traderAddress\\n    ) external returns (bool);\\n    ///\\n    /// @param _tokenAddress the token address\\n    /// @param _active the active oft he options to be applied\\n    function setActive(address _tokenAddress, bool _active) external;\\n    /// Check if the token address is active to use the Antibot\\n    /// @param _tokenAddress the address to check\\n    function isActive(address _tokenAddress) external returns (bool);\\n    /// Get if the token address can use the Antibot\\n    /// @param _tokenAddress the address to check\\n    function canUse(address _tokenAddress) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/services/IERC20AntiWhale.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.24;\\n/*\\n * IERC20AntiWhale interface\\n */\\n/// @title IERC20AntiWhale\\n/// @author Smithii\\n\\ninterface IERC20AntiWhale {\\n    struct Options {\\n        uint256 maxAmountPerTrade;\\n        uint256 maxAmountTotal; /// require to get the traders balance\\n        uint256 timeLimitPerTrade;\\n        uint256 activePeriod;\\n        uint256 activePeriodStarted;\\n        bool active;\\n    }\\n    /// errors\\n    error TokenNotActiveOnAntiWhale();\\n    error TokenAlreadyActiveOnAntiWhale();\\n    ///\\n    /// @param _to the address to check\\n    /// @param _amount the amount to check\\n    function isWhaleDetected(\\n        address _to,\\n        uint256 _amount\\n    ) external returns (bool);\\n    ///\\n    /// @param _to the address to register\\n    function registerBlockTimeStamp(address _to) external;\\n    ///\\n    /// @param projectId the project id\\n    /// @param _address the token address to register\\n    /// @param _options the options as Options struct\\n    function setCanUseAntiWhale(\\n        bytes32 projectId,\\n        address _address,\\n        Options memory _options\\n    ) external payable;\\n    ///\\n    /// @param _address the token address\\n    /// @param _maxAmountPerTrade the maximum amount per trade\\n    function setMaxAmountPerTrade(\\n        address _address,\\n        uint256 _maxAmountPerTrade\\n    ) external;\\n    ///\\n    /// @param _address the token address\\n    /// @param _maxAmountTotal the maximum amount total accumulated by the trader\\n    function setMaxAmountTotal(\\n        address _address,\\n        uint256 _maxAmountTotal\\n    ) external;\\n    ///\\n    /// @param _address the token address\\n    /// @param _timeLimitPerTrade the time limit per trade\\n    function setTimeLimitPerTrade(\\n        address _address,\\n        uint256 _timeLimitPerTrade\\n    ) external;\\n    ///\\n    /// @param _tokenAddress the token address\\n    /// @param _activePeriod the active period of the options to be applied\\n    function setActivePeriod(\\n        address _tokenAddress,\\n        uint256 _activePeriod\\n    ) external;\\n    /// Set the exempt status of a trader\\n    /// @param _tokenAddress the token address\\n    /// @param _traderAddress the trader address\\n    /// @param _exempt the exempt status\\n    function setExempt(\\n        address _tokenAddress,\\n        address _traderAddress,\\n        bool _exempt\\n    ) external;\\n    /// helper function to check if the trader is exempt\\n    /// @param _tokenAddress the token address\\n    /// @param _traderAddress the trader address\\n    function isExempt(\\n        address _tokenAddress,\\n        address _traderAddress\\n    ) external returns (bool);\\n    ///\\n    /// @param _tokenAddress the token address\\n    function isActive(address _tokenAddress) external returns (bool);\\n    /// Get if the token address can use the AntiWhale\\n    /// @param _tokenAddress the address to check\\n    function canUse(address _tokenAddress) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/marketplace/Indexer.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.24;\\n\\n/*\\n\\n                                                                                                    \\n                    &&&&&& &&&&&                                        &%                          \\n                     &&&&&&&&&&&&&&&                               && &&&&&&&&&&%                   \\n                     &&&&&&&      &&&&&                          #&&&&&&&&&&&&&                     \\n                     &&&&&  &&&&&&&   &&                      &&&&    &%  &&&&&&&                   \\n                        &&. &&&&&&&&&&                        &  %&&&&&&&  &&&&                     \\n                        &&&&  *&&&&&&&&&                       &&&&&&&&&  &&&&                      \\n                           .&&&   &&&&&&&&                   &&&&&&&&   &&&                         \\n                                    .&&&&&&&               &&&&&&&   &&&%                           \\n                                       &&&&&&             &&&&&&                                    \\n                                         &&&&&          /&&&&.                                      \\n                                           &&&&  %&&&  #&&&,                                        \\n                                   &&&&(     &&&&&&&&&&&&&                                          \\n                               &&&&&&&&&&&&&&&&&&&&&&&&&&&&   &&&&&&&&&&                            \\n                             &&&%        &&&&&&&&&&&&&&&&&&&&&&&&&     &&&                          \\n                            &&&    &&&*    &&&&&&&&&&&&&&&&&&&&&         &&*                        \\n                           &&&   .&&&&&&   &&&&&&&&&&&&&&&&&&&&   &&&&&   &&                        \\n                           &&&   #&&&&&&   &&&&&&&&&&&&&&&&&&&&&  &&&&&   &&                        \\n                            &&&    &&&&    &&&&&&&&&&&&&&&&&&&&&&  #&&   &&&                        \\n                             &&&         &&&&&&&&&&&&&&&&&&&&&&&&,     *&&&                         \\n                              (&&&&&&&&&&&&&&&&&&&&          &&&&&&&&&&&%                           \\n                                  &&&&&&&&&&&&&&&&&          &&&&&                                  \\n                                    &&&&&&&&&&&&&&&&&&    %&&&&&&&                                  \\n                                    &&&&&&&&&&&&&&&&&&&&&&&&&&&&&&#                                 \\n                                      &&&&&&&&&&&&&&&&&&&&&&&&&&&&                                  \\n                                           &&&&&&&&&&&&&&&&&&&&                                     \\n\\n*/\\n/*\\n * Indexer contract\\n * This contract is used to index the projects and contracts deployed by the Factory contract\\n */\\n/// @title Indexer\\n/// @author Smithii\\n\\nimport {IIndexer} from \\\"../interfaces/marketplace/IIndexer.sol\\\";\\nimport {Authorized} from \\\"@privylabs/authorized/contracts/Authorized.sol\\\";\\n\\ncontract Indexer is IIndexer, Authorized {\\n    /// Mappings\\n    mapping(bytes32 => Project) public projects;\\n    mapping(address => bytes32) public projectIndex; /// hepler to get registered projects\\n\\n    constructor() {}\\n\\n    /// @inheritdoc IIndexer\\n    function registerProject(\\n        bytes32 _projectId,\\n        address _owner,\\n        address _contract,\\n        string memory _contractType\\n    ) public onlyAuthorizedOperator {\\n        if (isContractRegistered(_contract))\\n            revert ProjectContractAlreadyRegistered();\\n        if (\\n            isProjectIndexRegistered(_projectId) &&\\n            projects[_projectId].owner != _owner\\n        ) revert ProjectIndexAlreadyRegistered();\\n        Contract memory _contractInfo = Contract(_contract, _contractType);\\n        projects[_projectId].contracts.push(_contractInfo);\\n        projects[_projectId].owner = _owner;\\n\\n        projectIndex[_contract] = _projectId;\\n        emit ProjectRegistered(_projectId, _owner, _contract, _contractType);\\n    }\\n\\n    /// @inheritdoc IIndexer\\n    function isProjectIndexRegistered(\\n        bytes32 _projectId\\n    ) public view returns (bool) {\\n        return projects[_projectId].owner != address(0);\\n    }\\n    /// @inheritdoc IIndexer\\n    function isContractRegistered(\\n        address _contract\\n    ) public view returns (bool) {\\n        return projects[projectIndex[_contract]].owner != address(0);\\n    }\\n    /// @inheritdoc IIndexer\\n    function getProjectOwner(bytes32 _projectId) public view returns (address) {\\n        return projects[_projectId].owner;\\n    }\\n    function getProjectAddressOwner(\\n        address _projectAddress\\n    ) public view returns (address) {\\n        return projects[projectIndex[_projectAddress]].owner;\\n    }\\n    /// @inheritdoc IIndexer\\n    function getProjectInfoByProjectAddress(\\n        address _projectAddress\\n    ) public view returns (address, Contract[] memory) {\\n        Project memory project = projects[projectIndex[_projectAddress]];\\n        return (project.owner, project.contracts);\\n    }\\n    /// @inheritdoc IIndexer\\n    function getProjectInfoByIndex(\\n        bytes32 _projectId\\n    ) public view returns (address, Contract[] memory) {\\n        Project memory project = projects[_projectId];\\n        return (project.owner, project.contracts);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/marketplace/Payments.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.24;\\n\\n/*\\n\\n                                                                                                    \\n                    &&&&&& &&&&&                                        &%                          \\n                     &&&&&&&&&&&&&&&                               && &&&&&&&&&&%                   \\n                     &&&&&&&      &&&&&                          #&&&&&&&&&&&&&                     \\n                     &&&&&  &&&&&&&   &&                      &&&&    &%  &&&&&&&                   \\n                        &&. &&&&&&&&&&                        &  %&&&&&&&  &&&&                     \\n                        &&&&  *&&&&&&&&&                       &&&&&&&&&  &&&&                      \\n                           .&&&   &&&&&&&&                   &&&&&&&&   &&&                         \\n                                    .&&&&&&&               &&&&&&&   &&&%                           \\n                                       &&&&&&             &&&&&&                                    \\n                                         &&&&&          /&&&&.                                      \\n                                           &&&&  %&&&  #&&&,                                        \\n                                   &&&&(     &&&&&&&&&&&&&                                          \\n                               &&&&&&&&&&&&&&&&&&&&&&&&&&&&   &&&&&&&&&&                            \\n                             &&&%        &&&&&&&&&&&&&&&&&&&&&&&&&     &&&                          \\n                            &&&    &&&*    &&&&&&&&&&&&&&&&&&&&&         &&*                        \\n                           &&&   .&&&&&&   &&&&&&&&&&&&&&&&&&&&   &&&&&   &&                        \\n                           &&&   #&&&&&&   &&&&&&&&&&&&&&&&&&&&&  &&&&&   &&                        \\n                            &&&    &&&&    &&&&&&&&&&&&&&&&&&&&&&  #&&   &&&                        \\n                             &&&         &&&&&&&&&&&&&&&&&&&&&&&&,     *&&&                         \\n                              (&&&&&&&&&&&&&&&&&&&&          &&&&&&&&&&&%                           \\n                                  &&&&&&&&&&&&&&&&&          &&&&&                                  \\n                                    &&&&&&&&&&&&&&&&&&    %&&&&&&&                                  \\n                                    &&&&&&&&&&&&&&&&&&&&&&&&&&&&&&#                                 \\n                                      &&&&&&&&&&&&&&&&&&&&&&&&&&&&                                  \\n                                           &&&&&&&&&&&&&&&&&&&&                                     \\n\\n*/\\n/*\\n * Payments contract\\n * This contract is used to pay the bills based on servicesId and projectId from the Indexer.\\n */\\n/// @title Payments\\n/// @author Smithii\\n\\nimport {IPayments} from \\\"../interfaces/marketplace/IPayments.sol\\\";\\nimport {Authorized} from \\\"@privylabs/authorized/contracts/Authorized.sol\\\";\\nimport {ReentrancyGuard} from \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\n\\ncontract Payments is IPayments, Authorized, ReentrancyGuard {\\n    mapping(bytes32 => Service) public services;\\n    /// projectId from indexer => contract address => serviceId => Invoice\\n    mapping(bytes32 => mapping(address => mapping(bytes32 => Invoice[])))\\n        public invoices;\\n\\n    constructor() {}\\n    /// @inheritdoc IPayments\\n    function addService(\\n        bytes32 _serviceId,\\n        uint256 _pricePerItem\\n    ) public onlyAuthorizedOperator {\\n        services[_serviceId] = Service(_serviceId, _pricePerItem, false);\\n    }\\n    /// @inheritdoc IPayments\\n    function setService(\\n        bytes32 _serviceId,\\n        bool _active\\n    ) public onlyAuthorizedOperator {\\n        services[_serviceId].active = _active;\\n    }\\n\\n    /// @inheritdoc IPayments\\n    function payService(\\n        bytes32 _projectId,\\n        address _contract,\\n        bytes32 _serviceId,\\n        uint256 _qty\\n    ) public payable nonReentrant {\\n        if (!services[_serviceId].active) revert ServiceNotActive(_serviceId);\\n        uint256 total = services[_serviceId].pricePerItem * _qty;\\n        if (msg.value != total) revert InvalidTotalAmount();\\n        \\n        Invoice memory invoice = Invoice(\\n            msg.sender,\\n            services[_serviceId],\\n            _qty,\\n            total,\\n            block.timestamp\\n        );\\n        invoices[_projectId][_contract][_serviceId].push(invoice);\\n\\n        emit ServicePaid(\\n            _projectId,\\n            _contract,\\n            _serviceId,\\n            msg.sender,\\n            total,\\n            block.timestamp\\n        );\\n    }\\n    /// @inheritdoc IPayments\\n    function withdraw(\\n        bytes32 _projectId,\\n        address _contract,\\n        bytes32 _serviceId,\\n        address payable _to\\n    ) public onlyAuthorizedAdmin {\\n        Invoice[] memory _invoices = invoices[_projectId][_contract][\\n            _serviceId\\n        ];\\n        uint256 total = 0;\\n        for (uint256 i = 0; i < _invoices.length; i++) {\\n            total += _invoices[i].total;\\n        }\\n        _to.transfer(total);\\n\\n        emit ServiceWithdraw(_projectId, _contract, _serviceId, total);\\n    }\\n\\n    /// @inheritdoc IPayments\\n    function withdrawAll(address payable _to) public onlyOwner {\\n        _to.transfer(address(this).balance);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/tokens/ERC20/ERC20Template.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.24;\\n\\n/*\\n\\n                                                                                                    \\n                    &&&&&& &&&&&                                        &%                          \\n                     &&&&&&&&&&&&&&&                               && &&&&&&&&&&%                   \\n                     &&&&&&&      &&&&&                          #&&&&&&&&&&&&&                     \\n                     &&&&&  &&&&&&&   &&                      &&&&    &%  &&&&&&&                   \\n                        &&. &&&&&&&&&&                        &  %&&&&&&&  &&&&                     \\n                        &&&&  *&&&&&&&&&                       &&&&&&&&&  &&&&                      \\n                           .&&&   &&&&&&&&                   &&&&&&&&   &&&                         \\n                                    .&&&&&&&               &&&&&&&   &&&%                           \\n                                       &&&&&&             &&&&&&                                    \\n                                         &&&&&          /&&&&.                                      \\n                                           &&&&  %&&&  #&&&,                                        \\n                                   &&&&(     &&&&&&&&&&&&&                                          \\n                               &&&&&&&&&&&&&&&&&&&&&&&&&&&&   &&&&&&&&&&                            \\n                             &&&%        &&&&&&&&&&&&&&&&&&&&&&&&&     &&&                          \\n                            &&&    &&&*    &&&&&&&&&&&&&&&&&&&&&         &&*                        \\n                           &&&   .&&&&&&   &&&&&&&&&&&&&&&&&&&&   &&&&&   &&                        \\n                           &&&   #&&&&&&   &&&&&&&&&&&&&&&&&&&&&  &&&&&   &&                        \\n                            &&&    &&&&    &&&&&&&&&&&&&&&&&&&&&&  #&&   &&&                        \\n                             &&&         &&&&&&&&&&&&&&&&&&&&&&&&,     *&&&                         \\n                              (&&&&&&&&&&&&&&&&&&&&          &&&&&&&&&&&%                           \\n                                  &&&&&&&&&&&&&&&&&          &&&&&                                  \\n                                    &&&&&&&&&&&&&&&&&&    %&&&&&&&                                  \\n                                    &&&&&&&&&&&&&&&&&&&&&&&&&&&&&&#                                 \\n                                      &&&&&&&&&&&&&&&&&&&&&&&&&&&&                                  \\n                                           &&&&&&&&&&&&&&&&&&&&                                     \\n\\n*/\\n/**\\n * ERC20Template contract\\n */\\n\\n/// @author Smithii\\n\\nimport {ERC20} from \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport {ERC20Burnable} from \\\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\\\";\\nimport {Pausable} from \\\"@openzeppelin/contracts/utils/Pausable.sol\\\";\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport {Secured} from \\\"../../utils/Secured.sol\\\";\\nimport {Shallowed} from \\\"../../utils/Shallowed.sol\\\";\\n\\ncontract ERC20Template is\\n    ERC20,\\n    ERC20Burnable,\\n    Pausable,\\n    Ownable,\\n    Secured,\\n    Shallowed\\n{\\n    uint256 public constant DECIMALS = 1 * 10 ** 18;\\n    uint256 public initialSupply = 0;\\n    uint256 public taxFee = 0; // 0 - 100 % tax fee\\n    address public taxAddress = address(0);\\n    bool public isAirdrop = false;\\n\\n    mapping(address => bool) public blackList;\\n    mapping(address => bool) public noTaxable;\\n\\n    /// Errors\\n\\n    error InvalidInitialSupply();\\n    error InvalidTaxFee();\\n    error BlacklistedAddress(address _address);\\n\\n    constructor(\\n        string memory name,\\n        string memory symbol,\\n        address _owner,\\n        address _taxAddress,\\n        address _antiBot,\\n        address _antiWhale,\\n        uint256 _initialSupply,\\n        uint256 _taxFee,\\n        bool _isAirdrop\\n    )\\n        ERC20(name, symbol)\\n        Ownable(_owner)\\n        Secured(_antiBot)\\n        Shallowed(_antiWhale)\\n    {\\n        if (_initialSupply <= 0) revert InvalidInitialSupply();\\n        if (_taxFee > 20) revert InvalidTaxFee();\\n\\n        initialSupply = _initialSupply * DECIMALS;\\n        taxFee = _taxFee;\\n        taxAddress = _taxAddress;\\n        noTaxable[_owner] = true;\\n        noTaxable[address(0)] = true;\\n        if (_isAirdrop) isAirdrop = true;\\n        _mint(_owner, initialSupply);\\n    }\\n    /// Exclude the address from the tax\\n    /// @param _address the target address\\n    /// @param _taxable is the address not taxable\\n    function setNotTaxable(address _address, bool _taxable) external onlyOwner {\\n        noTaxable[_address] = _taxable;\\n    }\\n    /// BLacklist the address\\n    /// @param _address the target address\\n    /// @param _blackList is in the black list\\n    function setBlackList(\\n        address _address,\\n        bool _blackList\\n    ) external onlyOwner {\\n        blackList[_address] = _blackList;\\n    }\\n    /// Address to receive the tax\\n    /// @param _taxAddress the address to receive the tax\\n    function setTaxAddress(address _taxAddress) external onlyOwner {\\n        taxAddress = _taxAddress;\\n        noTaxable[_taxAddress] = true;\\n    }\\n    /// relesae the airdrop mode\\n    /// @dev set the airdrop mode to false only once\\n    function releaseAirdropMode() external onlyOwner {\\n        isAirdrop = false;\\n    }\\n    /// @inheritdoc ERC20\\n    function _update(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    )\\n        internal\\n        virtual\\n        override\\n        whenNotPaused\\n        noBots(sender)\\n        noWhales(recipient, amount)\\n    {\\n        registerBlock(recipient);\\n        registerBlockTimeStamp(sender);\\n        if (isAirdrop) {\\n            if (!noTaxable[sender]) revert(\\\"Airdrop mode is enabled\\\");\\n        }\\n        /// @dev the tx is charged based on the sender\\n        if (blackList[sender]) revert BlacklistedAddress(sender);\\n        if (blackList[recipient]) revert BlacklistedAddress(recipient);\\n        uint tax = 0;\\n        if (!noTaxable[sender]) {\\n            tax = (amount / 100) * taxFee; // % tax\\n            super._update(sender, taxAddress, tax);\\n        }\\n        super._update(sender, recipient, amount - tax);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/utils/Indexable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.24;\\n\\n/// @title Indexable\\n/// @author Smithii\\n\\nimport {IIndexer} from \\\"../interfaces/marketplace/IIndexer.sol\\\";\\n\\nabstract contract Indexable {\\n    address public indexer = address(0);\\n    bytes32 public projectId;\\n    /// errors\\n    error NotPtojectOwner();\\n    constructor(address _indexer) {\\n        indexer = _indexer;\\n    }\\n    modifier onlyProjectOwner(address _address) {\\n        if (getProjectAddressOwner(_address) != msg.sender)\\n            revert NotPtojectOwner();\\n        _;\\n    }\\n    /// Registers the project in the Indexer\\n    /// @param _projectId the project id\\n    /// @param _owner the owner of the project\\n    /// @param _contract the contract address\\n    /// @param _contractType the contract type eg. ERC20, ERC721\\n    function registerProject(\\n        bytes32 _projectId,\\n        address _owner,\\n        address _contract,\\n        string memory _contractType\\n    ) public {\\n        IIndexer(indexer).registerProject(\\n            _projectId,\\n            _owner,\\n            _contract,\\n            _contractType\\n        );\\n    }\\n    ///\\n    /// @param _projectAddress the project address\\n    function isContractRegistered(\\n        address _projectAddress\\n    ) public returns (bool) {\\n        return IIndexer(indexer).isContractRegistered(_projectAddress);\\n    }\\n    ///\\n    /// @param _projectId the project id\\n    function getProjectOwner(bytes32 _projectId) public returns (address) {\\n        return IIndexer(indexer).getProjectOwner(_projectId);\\n    }\\n    function getProjectAddressOwner(\\n        address _projectAddress\\n    ) public returns (address) {\\n        return IIndexer(indexer).getProjectAddressOwner(_projectAddress);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/utils/Payable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.24;\\n\\n/// @title Payable\\n/// @author Smithii\\n\\nimport {IPayments} from \\\"../interfaces/marketplace/IPayments.sol\\\";\\n\\nabstract contract Payable {\\n    address public payments = address(0);\\n    bytes32 public serviceId;\\n\\n    constructor(address _payments, string memory _serviceId) {\\n        payments = _payments;\\n        serviceId = keccak256(abi.encodePacked(_serviceId));\\n    }\\n    ///\\n    /// @param _projectId the project id\\n    /// @param _token the token address\\n    /// @param qty the qty of items to pay\\n    function payService(\\n        bytes32 _projectId,\\n        address _token,\\n        uint256 qty\\n    ) public payable {\\n        IPayments(payments).payService{value: msg.value}(\\n            _projectId,\\n            _token,\\n            serviceId,\\n            qty\\n        );\\n    }\\n    receive() external payable {}\\n}\\n\"\r\n    },\r\n    \"contracts/utils/Secured.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.24;\\n\\n/// @title Secured\\n/// @author Smithii\\n\\nimport {IERC20AntiBot} from \\\"../interfaces/services/IERC20AntiBot.sol\\\";\\n\\n/// errors\\nerror BotDetected();\\n\\nabstract contract Secured {\\n    address public antiBot = address(0);\\n    constructor(address _antiBot) {\\n        antiBot = _antiBot;\\n    }\\n    modifier noBots(address _from) {\\n        if (IERC20AntiBot(antiBot).isBotDetected(_from)) revert BotDetected();\\n        _;\\n    }\\n    /// Registers the block number of the receiver\\n    /// @param _to the address to register\\n    function registerBlock(address _to) internal {\\n        IERC20AntiBot(antiBot).registerBlock(_to);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/utils/Shallowed.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.24;\\n\\n/// @title Whale Detector\\n/// @author Smithii\\n\\nimport {IERC20AntiWhale} from \\\"../interfaces/services/IERC20AntiWhale.sol\\\";\\n\\n/// errors\\nerror WhaleDetected();\\n\\nabstract contract Shallowed {\\n    address public antiWhale = address(0);\\n    constructor(address _antiWhale) {\\n        antiWhale = _antiWhale;\\n    }\\n    modifier noWhales(address _to, uint256 _amount) {\\n        if (IERC20AntiWhale(antiWhale).isWhaleDetected(_to, _amount))\\n            revert WhaleDetected();\\n        _;\\n    }\\n    /// Registers the block number of the receiver\\n    /// @param _to the address to register\\n    function registerBlockTimeStamp(address _to) internal {\\n        IERC20AntiWhale(antiWhale).registerBlockTimeStamp(_to);\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1000\r\n    },\r\n    \"evmVersion\": \"paris\",\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_taxAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_antiBot\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_antiWhale\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_initialSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_taxFee\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_isAirdrop\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"BlacklistedAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BotDetected\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientAllowance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSpender\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EnforcedPause\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ExpectedPause\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidInitialSupply\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidTaxFee\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WhaleDetected\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DECIMALS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"antiBot\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"antiWhale\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"blackList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isAirdrop\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"noTaxable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"releaseAirdropMode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_blackList\",\"type\":\"bool\"}],\"name\":\"setBlackList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_taxable\",\"type\":\"bool\"}],\"name\":\"setNotTaxable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_taxAddress\",\"type\":\"address\"}],\"name\":\"setTaxAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"taxAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"taxFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "ERC20Template", "CompilerVersion": "v0.8.24+commit.e11b9ed9", "OptimizationUsed": "1", "Runs": "1000", "ConstructorArguments": "0000000000000000000000000000000000000000000000000000000000000120000000000000000000000000000000000000000000000000000000000000016000000000000000000000000056964e0a8596624bf7c70fb8665ef6f07421d57400000000000000000000000056964e0a8596624bf7c70fb8665ef6f07421d5740000000000000000000000006120fa4b79ab3672322ee5ba8ed59d4303d0ff0600000000000000000000000090ca629ca55a8e70b507557c228a3a054648847e0000000000000000000000000000000000000000000000000000000000030d4000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a54726f7461706f6b657200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000354504b0000000000000000000000000000000000000000000000000000000000", "EVMVersion": "paris", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}