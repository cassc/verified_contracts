{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"lib/openzeppelin-contracts/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/Counters.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/protocol/packages/core/contracts/optimistic-oracle-v3/interfaces/OptimisticOracleV3Interface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity 0.8.16;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/**\\n * @title Optimistic Oracle V3 Interface that callers must use to assert truths about the world.\\n */\\ninterface OptimisticOracleV3Interface {\\n    // Struct grouping together the settings related to the escalation manager stored in the assertion.\\n    struct EscalationManagerSettings {\\n        bool arbitrateViaEscalationManager; // False if the DVM is used as an oracle (EscalationManager on True).\\n        bool discardOracle; // False if Oracle result is used for resolving assertion after dispute.\\n        bool validateDisputers; // True if the EM isDisputeAllowed should be checked on disputes.\\n        address assertingCaller; // Stores msg.sender when assertion was made.\\n        address escalationManager; // Address of the escalation manager (zero address if not configured).\\n    }\\n\\n    // Struct for storing properties and lifecycle of an assertion.\\n    struct Assertion {\\n        EscalationManagerSettings escalationManagerSettings; // Settings related to the escalation manager.\\n        address asserter; // Address of the asserter.\\n        uint64 assertionTime; // Time of the assertion.\\n        bool settled; // True if the request is settled.\\n        IERC20 currency; // ERC20 token used to pay rewards and fees.\\n        uint64 expirationTime; // Unix timestamp marking threshold when the assertion can no longer be disputed.\\n        bool settlementResolution; // Resolution of the assertion (false till resolved).\\n        bytes32 domainId; // Optional domain that can be used to relate the assertion to others in the escalationManager.\\n        bytes32 identifier; // UMA DVM identifier to use for price requests in the event of a dispute.\\n        uint256 bond; // Amount of currency that the asserter has bonded.\\n        address callbackRecipient; // Address that receives the callback.\\n        address disputer; // Address of the disputer.\\n    }\\n\\n    // Struct for storing cached currency whitelist.\\n    struct WhitelistedCurrency {\\n        bool isWhitelisted; // True if the currency is whitelisted.\\n        uint256 finalFee; // Final fee of the currency.\\n    }\\n\\n    /**\\n     * @notice Returns the default identifier used by the Optimistic Oracle V3.\\n     * @return The default identifier.\\n     */\\n    function defaultIdentifier() external view returns (bytes32);\\n\\n    /**\\n     * @notice Fetches information about a specific assertion and returns it.\\n     * @param assertionId unique identifier for the assertion to fetch information for.\\n     * @return assertion information about the assertion.\\n     */\\n    function getAssertion(bytes32 assertionId) external view returns (Assertion memory);\\n\\n    /**\\n     * @notice Asserts a truth about the world, using the default currency and liveness. No callback recipient or\\n     * escalation manager is enabled. The caller is expected to provide a bond of finalFee/burnedBondPercentage\\n     * (with burnedBondPercentage set to 50%, the bond is 2x final fee) of the default currency.\\n     * @dev The caller must approve this contract to spend at least the result of getMinimumBond(defaultCurrency).\\n     * @param claim the truth claim being asserted. This is an assertion about the world, and is verified by disputers.\\n     * @param asserter receives bonds back at settlement. This could be msg.sender or\\n     * any other account that the caller wants to receive the bond at settlement time.\\n     * @return assertionId unique identifier for this assertion.\\n     */\\n    function assertTruthWithDefaults(bytes memory claim, address asserter) external returns (bytes32);\\n\\n    /**\\n     * @notice Asserts a truth about the world, using a fully custom configuration.\\n     * @dev The caller must approve this contract to spend at least bond amount of currency.\\n     * @param claim the truth claim being asserted. This is an assertion about the world, and is verified by disputers.\\n     * @param asserter receives bonds back at settlement. This could be msg.sender or\\n     * any other account that the caller wants to receive the bond at settlement time.\\n     * @param callbackRecipient if configured, this address will receive a function call assertionResolvedCallback and\\n     * assertionDisputedCallback at resolution or dispute respectively. Enables dynamic responses to these events. The\\n     * recipient _must_ implement these callbacks and not revert or the assertion resolution will be blocked.\\n     * @param escalationManager if configured, this address will control escalation properties of the assertion. This\\n     * means a) choosing to arbitrate via the UMA DVM, b) choosing to discard assertions on dispute, or choosing to\\n     * validate disputes. Combining these, the asserter can define their own security properties for the assertion.\\n     * escalationManager also _must_ implement the same callbacks as callbackRecipient.\\n     * @param liveness time to wait before the assertion can be resolved. Assertion can be disputed in this time.\\n     * @param currency bond currency pulled from the caller and held in escrow until the assertion is resolved.\\n     * @param bond amount of currency to pull from the caller and hold in escrow until the assertion is resolved. This\\n     * must be >= getMinimumBond(address(currency)).\\n     * @param identifier UMA DVM identifier to use for price requests in the event of a dispute. Must be pre-approved.\\n     * @param domainId optional domain that can be used to relate this assertion to others in the escalationManager and\\n     * can be used by the configured escalationManager to define custom behavior for groups of assertions. This is\\n     * typically used for \\\"escalation games\\\" by changing bonds or other assertion properties based on the other\\n     * assertions that have come before. If not needed this value should be 0 to save gas.\\n     * @return assertionId unique identifier for this assertion.\\n     */\\n    function assertTruth(\\n        bytes memory claim,\\n        address asserter,\\n        address callbackRecipient,\\n        address escalationManager,\\n        uint64 liveness,\\n        IERC20 currency,\\n        uint256 bond,\\n        bytes32 identifier,\\n        bytes32 domainId\\n    ) external returns (bytes32);\\n\\n    /**\\n     * @notice Fetches information about a specific identifier & currency from the UMA contracts and stores a local copy\\n     * of the information within this contract. This is used to save gas when making assertions as we can avoid an\\n     * external call to the UMA contracts to fetch this.\\n     * @param identifier identifier to fetch information for and store locally.\\n     * @param currency currency to fetch information for and store locally.\\n     */\\n    function syncUmaParams(bytes32 identifier, address currency) external;\\n\\n    /**\\n     * @notice Resolves an assertion. If the assertion has not been disputed, the assertion is resolved as true and the\\n     * asserter receives the bond. If the assertion has been disputed, the assertion is resolved depending on the oracle\\n     * result. Based on the result, the asserter or disputer receives the bond. If the assertion was disputed then an\\n     * amount of the bond is sent to the UMA Store as an oracle fee based on the burnedBondPercentage. The remainder of\\n     * the bond is returned to the asserter or disputer.\\n     * @param assertionId unique identifier for the assertion to resolve.\\n     */\\n    function settleAssertion(bytes32 assertionId) external;\\n\\n    /**\\n     * @notice Settles an assertion and returns the resolution.\\n     * @param assertionId unique identifier for the assertion to resolve and return the resolution for.\\n     * @return resolution of the assertion.\\n     */\\n    function settleAndGetAssertionResult(bytes32 assertionId) external returns (bool);\\n\\n    /**\\n     * @notice Fetches the resolution of a specific assertion and returns it. If the assertion has not been settled then\\n     * this will revert. If the assertion was disputed and configured to discard the oracle resolution return false.\\n     * @param assertionId unique identifier for the assertion to fetch the resolution for.\\n     * @return resolution of the assertion.\\n     */\\n    function getAssertionResult(bytes32 assertionId) external view returns (bool);\\n\\n    /**\\n     * @notice Returns the minimum bond amount required to make an assertion. This is calculated as the final fee of the\\n     * currency divided by the burnedBondPercentage. If burn percentage is 50% then the min bond is 2x the final fee.\\n     * @param currency currency to calculate the minimum bond for.\\n     * @return minimum bond amount.\\n     */\\n    function getMinimumBond(address currency) external view returns (uint256);\\n\\n    event AssertionMade(\\n        bytes32 indexed assertionId,\\n        bytes32 domainId,\\n        bytes claim,\\n        address indexed asserter,\\n        address callbackRecipient,\\n        address escalationManager,\\n        address caller,\\n        uint64 expirationTime,\\n        IERC20 currency,\\n        uint256 bond,\\n        bytes32 indexed identifier\\n    );\\n\\n    event AssertionDisputed(bytes32 indexed assertionId, address indexed caller, address indexed disputer);\\n\\n    event AssertionSettled(\\n        bytes32 indexed assertionId,\\n        address indexed bondRecipient,\\n        bool disputed,\\n        bool settlementResolution,\\n        address settleCaller\\n    );\\n\\n    event AdminPropertiesSet(IERC20 defaultCurrency, uint64 defaultLiveness, uint256 burnedBondPercentage);\\n}\\n\"\r\n    },\r\n    \"src/stader/RatedOracleForStader.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.8.16;\\n\\nimport \\\"@UMA/packages/core/contracts/optimistic-oracle-v3/interfaces/OptimisticOracleV3Interface.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\n\\nimport \\\"./utils/Utils.sol\\\";\\n\\ncontract RatedOracle is Ownable {\\n    using SafeERC20 for IERC20;\\n    using Counters for Counters.Counter;\\n\\n    /****************************************\\n     *              STRUCTS                 *\\n     ****************************************/\\n\\n    struct Violation {\\n        bytes32 validatorIdentifier;\\n        uint32 epochNumber;\\n        uint32 penaltyType;\\n        address newFeeRecipientAddress;\\n    }\\n\\n    struct Report {\\n        uint32 fromEpoch;\\n        uint32 toEpoch;\\n        uint256 timestamp;\\n        bytes32 assertionID;\\n        Violation[] listViolations;\\n    }\\n\\n    /****************************************\\n     *              STORAGE                 *\\n     ****************************************/\\n\\n    Counters.Counter public reportID; // Atomic counter for identifying reports.\\n    mapping(bytes32 => Violation[]) public violationsForValidator; // List of settled violations for a validator.\\n    mapping(uint256 => mapping(bytes32 => bool)) public validatorInReport; // Whether or not a report affects a validator.\\n    mapping(uint256 => Report) public reports; // Mapping of the reports against their ID.\\n    mapping(address => bool) public approvedProposer; // Mapping giving whether or not this address is approved for proposing reports.\\n\\n    uint256[] public disputedReportsID; // List of the ID reports under dispute.\\n    uint256[] public pendingReportsID; // List of not yet finalized reports.\\n\\n    OptimisticOracleV3Interface OO; // UMA Optimistic Oracle v3.\\n    bytes32 public priceIdentifier = \\\"ROPU_ETHx\\\"; // To be replaced with custom Identifier.\\n    uint256 public bondAmount; // Bond amount to commit on OO with assertion.\\n    uint64 public challengeWindow; // Number of seconds to wait before assertion is finalized.\\n    uint64 public timeToSettle = 345600; // Maximum amount of time required for a disputed report to settle.\\n\\n    IERC20 public bondCurrency; // Currency used as bond.\\n\\n    /****************************************\\n     *               EVENTS                 *\\n     ****************************************/\\n\\n    /// @notice Emitted when a new bond is set.\\n    /// @param _newBondAmount The new amount to set.\\n    /// @param _newCurrency The new currency to set.\\n    event NewBondSet(uint256 _newBondAmount, IERC20 _newCurrency);\\n\\n    /// @notice Emitted when a new proposer is approved.\\n    /// @param _proposerApproved The newly approved proposer.\\n    event ProposerApproved(address _proposerApproved);\\n\\n    /// @notice Emitted when a proposer is revoked.\\n    /// @param _proposerRevoked The revoked proposer.\\n    event ProposerRevoked(address _proposerRevoked);\\n\\n    /// @notice Emitted when a new challenge window is set.\\n    /// @param _newChallengeWindow The new challenge window.\\n    event NewChallengeWindowSet(uint64 _newChallengeWindow);\\n\\n    /// @notice Emitted when a new time to settle is set.\\n    /// @param _timeToSettle The new time to settle.\\n    event NewTimeToSettleSet(uint64 _timeToSettle);\\n\\n    /// @notice Emitted when a report is disputed.\\n    /// @param _reportID The disputed report.\\n    event reportDisputed(uint256 _reportID);\\n\\n    /// @notice Emitted when a report is settled.\\n    /// @param _reportID The settled report.\\n    event reportSettled(uint256 _reportID);\\n\\n    /// @notice Emitted when a new report is brought on chain.\\n    /// @param _reportID The new report.\\n    event reportMade(uint256 _reportID);\\n\\n    /// @notice Emitted when a new report is discarded.\\n    /// @param _reportID The discarded report.\\n    event reportDiscarded(uint256 _reportID);\\n\\n    /****************************************\\n     *               ERRORS                 *\\n     ****************************************/\\n\\n    /// @notice Thrown if msg.sender isn't an approved proposer.\\n    error proposerNotApproved();\\n\\n    /// @notice Thrown when zero is passed as a parameter.\\n    error amountCanNotBeZero();\\n\\n    /// @notice Thrown when address zero is passed as a parameter.\\n    error canNotBeAddressZero();\\n\\n    /// @notice Thrown when the challenge window passed is invalid.\\n    error invalidChallengeWindow();\\n\\n    /****************************************\\n     *              MODIFIER                *\\n     ****************************************/\\n\\n    // @dev Throws if called by a unapproved proposer.\\n    modifier onlyApprovedProposer() {\\n        if (approvedProposer[msg.sender] != true) revert proposerNotApproved();\\n        _;\\n    }\\n\\n    /****************************************\\n     *             CONSTRUCTOR              *\\n     ****************************************/\\n\\n    /// @notice Constructs the contract.\\n    constructor(\\n        uint256 _bondAmount,\\n        uint64 _challengeWindow,\\n        address _bondCurrency,\\n        address _proposer,\\n        address _oracle\\n    ) {\\n        changeBondAmountAndCurrency(_bondAmount, IERC20(_bondCurrency));\\n        setChallengeWindow(_challengeWindow);\\n        approveProposer(_proposer);\\n        OO = OptimisticOracleV3Interface(_oracle);\\n        transferOwnership(0x7e764ED499BcBd64Bc0Ab76222C239c666d50E4D);\\n    }\\n\\n    /****************************************\\n     *         GOVERNANCE FUNCTIONS         *\\n     ****************************************/\\n\\n    /// @notice Sets the currency and amount for the bond of the assertions.\\n    /// @param _newBondAmount The new amount to set.\\n    /// @param _newCurrency The new currency to set.\\n    function changeBondAmountAndCurrency(\\n        uint256 _newBondAmount,\\n        IERC20 _newCurrency\\n    ) public onlyOwner {\\n        if (_newBondAmount == 0) revert amountCanNotBeZero();\\n        if (address(_newCurrency) == address(0)) revert canNotBeAddressZero();\\n\\n        bondAmount = _newBondAmount;\\n        bondCurrency = _newCurrency;\\n\\n        emit NewBondSet(_newBondAmount, _newCurrency);\\n    }\\n\\n    /// @notice Allow an address to propose.\\n    /// @param _address the address to authorize.\\n    function approveProposer(address _address) public onlyOwner {\\n        if (_address == address(0)) revert canNotBeAddressZero();\\n        approvedProposer[_address] = true;\\n        emit ProposerApproved(_address);\\n    }\\n\\n    /// @notice Revoke an address priviledge to propose.\\n    /// @param _address the address to revoke.\\n    function revokeProposer(address _address) external onlyOwner {\\n        if (_address == address(0)) revert canNotBeAddressZero();\\n        approvedProposer[_address] = false;\\n        emit ProposerRevoked(_address);\\n    }\\n\\n    /// @notice Allow owner to withdraw funds on the contract.\\n    /// @dev Make sure the contract always has enough funds to commit bonds to the OptimisticOracle.\\n    /// @param _token The address of the ERC20 to withdraw.\\n    /// @param _amount The amount to withdraw.\\n    /// @param _to Receiver of the funds.\\n    function withdrawFunds(\\n        address _token,\\n        uint256 _amount,\\n        address _to\\n    ) external onlyOwner {\\n        if (_to == address(0)) revert canNotBeAddressZero();\\n        IERC20(_token).safeTransfer(_to, _amount);\\n    }\\n\\n    /// @notice Sets the size of the challenge window.\\n    /// @param _newChallengeWindow The new challenge window to set (in seconds).\\n    function setChallengeWindow(uint64 _newChallengeWindow) public onlyOwner {\\n        if (_newChallengeWindow > 604800 || _newChallengeWindow == 0)\\n            revert invalidChallengeWindow();\\n\\n        challengeWindow = _newChallengeWindow;\\n        emit NewChallengeWindowSet(_newChallengeWindow);\\n    }\\n\\n    /// @notice Sets the time to settle for a disputed report.\\n    /// @param _timeToSettle The new time to settle (in seconds).\\n    function setTimeToSettle(uint64 _timeToSettle) public onlyOwner {\\n        timeToSettle = _timeToSettle;\\n        emit NewTimeToSettleSet(_timeToSettle);\\n    }\\n\\n    /// @notice Forces the removal of a report from disputedReportsID.\\n    /// @dev If Quorum is not reached in the dispute process, the report will not settle in the desired time frame.\\n    /// @param _index The index of the report to remove in the array.\\n    function removeDisputedReport(uint64 _index) external onlyOwner {\\n        emit reportDiscarded(disputedReportsID[_index]);\\n        Utils.removeFromArray(_index, disputedReportsID);\\n    }\\n\\n    /****************************************\\n     *         INTERNAL FUNCTIONS           *\\n     ****************************************/\\n\\n    /// @notice Settles the reports that can be settled and applies the changes to storage.\\n    /// @dev If a report is under dispute, will mark it as such and\\n    /// @dev settles it when vote is complete - 2 to 4 days later.\\n    function settleReports() internal {\\n        uint256 deletedElem = 0;\\n        uint256 numberOfDisputedReports = disputedReportsID.length;\\n        for (uint256 i = 0; i < numberOfDisputedReports; i++) {\\n            uint256 index = i - deletedElem;\\n            uint256 IDreportToSettle = disputedReportsID[index];\\n            if (\\n                block.timestamp >\\n                reports[IDreportToSettle].timestamp + timeToSettle\\n            ) {\\n                if (\\n                    OO.settleAndGetAssertionResult(\\n                        reports[IDreportToSettle].assertionID\\n                    )\\n                ) {\\n                    pushVerifiedReport(IDreportToSettle);\\n                    Utils.removeFromArray(index, disputedReportsID);\\n                    deletedElem++;\\n                    emit reportSettled(IDreportToSettle);\\n                } else {\\n                    Utils.removeFromArray(index, disputedReportsID);\\n                    deletedElem++;\\n                    emit reportDiscarded(IDreportToSettle);\\n                }\\n            }\\n        }\\n\\n        deletedElem = 0;\\n        uint256 numberOfPendingReports = pendingReportsID.length;\\n        for (uint256 i = 0; i < numberOfPendingReports; i++) {\\n            uint256 index = i - deletedElem;\\n            uint256 IDreportToSettle = pendingReportsID[index];\\n\\n            OptimisticOracleV3Interface.Assertion memory assertionDetails = OO\\n                .getAssertion(reports[IDreportToSettle].assertionID);\\n\\n            if (\\n                assertionDetails.disputer == address(0) &&\\n                block.timestamp > assertionDetails.expirationTime\\n            ) {\\n                if (assertionDetails.settled == false) {\\n                    OO.settleAssertion(reports[IDreportToSettle].assertionID);\\n                }\\n                pushVerifiedReport(IDreportToSettle);\\n                Utils.removeFromArray(index, pendingReportsID);\\n                deletedElem++;\\n                emit reportSettled(IDreportToSettle);\\n            }\\n\\n            if (assertionDetails.disputer != address(0)) {\\n                reports[IDreportToSettle].timestamp = block.timestamp;\\n                disputedReportsID.push(IDreportToSettle);\\n                Utils.removeFromArray(index, pendingReportsID);\\n                deletedElem++;\\n                emit reportDisputed(IDreportToSettle);\\n            }\\n        }\\n    }\\n\\n    /// @notice Attributes the report's violation to the concerned validators.\\n    /// @param _reportID The report to push.\\n    function pushVerifiedReport(uint256 _reportID) internal {\\n        Violation[] memory listViolations = reports[_reportID].listViolations;\\n\\n        uint256 numberOfViolations = listViolations.length;\\n        for (uint256 i = 0; i < numberOfViolations; i++) {\\n            violationsForValidator[listViolations[i].validatorIdentifier].push(\\n                listViolations[i]\\n            );\\n        }\\n    }\\n\\n    /****************************************\\n     *         PROPOSER FUNCTIONS           *\\n     ****************************************/\\n\\n    /// @notice Proposer creates a new report.\\n    /// @param _fromEpoch Starting epoch of the report on the Beacon Chain.\\n    /// @param _toEpoch Ending epoch of the report on the Beacon Chain.\\n    /// @param _listViolations List of the violations reported.\\n    function postReport(\\n        uint32 _fromEpoch,\\n        uint32 _toEpoch,\\n        Violation[] memory _listViolations\\n    ) public onlyApprovedProposer {\\n        reportID.increment();\\n        uint256 newReportID = reportID.current();\\n\\n        settleReports();\\n\\n        uint256 numberOfViolations = _listViolations.length;\\n        for (uint256 i = 0; i < numberOfViolations; i++) {\\n            validatorInReport[newReportID][\\n                _listViolations[i].validatorIdentifier\\n            ] = true;\\n            reports[newReportID].listViolations.push(_listViolations[i]);\\n        }\\n\\n        reports[newReportID].fromEpoch = _fromEpoch;\\n        reports[newReportID].toEpoch = _toEpoch;\\n\\n        bondCurrency.safeIncreaseAllowance(address(OO), bondAmount);\\n\\n        reports[newReportID].assertionID = OO.assertTruth(\\n            Utils.toBytes(newReportID),\\n            address(this),\\n            address(0),\\n            address(0),\\n            challengeWindow,\\n            bondCurrency,\\n            bondAmount,\\n            priceIdentifier,\\n            \\\"\\\"\\n        );\\n\\n        pendingReportsID.push(newReportID);\\n        emit reportMade(newReportID);\\n    }\\n\\n    /****************************************\\n     *            STADER GETTERS            *\\n     ****************************************/\\n\\n    /// @notice Get the all the finalized violations reported for a validator.\\n    /// @param _validatorIdentifier The Validator to get violations for.\\n    function getViolationsForValidator(\\n        bytes32 _validatorIdentifier\\n    ) external returns (Violation[] memory) {\\n        settleReports();\\n        return violationsForValidator[_validatorIdentifier];\\n    }\\n\\n    /// @notice Get if a validator is concerned by a un-finalized report.\\n    /// @param _validatorIdentifier The Validator to check.\\n    function isValidatorInDispute(\\n        bytes32 _validatorIdentifier\\n    ) external returns (bool) {\\n        settleReports();\\n\\n        uint256 numberOfPendingReports = pendingReportsID.length;\\n        for (uint256 i = 0; i < numberOfPendingReports; i++) {\\n            if (validatorInReport[pendingReportsID[i]][_validatorIdentifier]) {\\n                return true;\\n            }\\n        }\\n\\n        uint256 numberOfDisputedReports = disputedReportsID.length;\\n        for (uint256 i = 0; i < numberOfDisputedReports; i++) {\\n            if (validatorInReport[disputedReportsID[i]][_validatorIdentifier]) {\\n                return true;\\n            }\\n        }\\n\\n        return false;\\n    }\\n\\n    /****************************************\\n     *            VIEW FUNCTIONS            *\\n     ****************************************/\\n\\n    /// @notice Get the number of verified violations for a validator.\\n    /// @dev This is a view function that will not settle pending reports. It might not reflect latest reports.\\n    /// @dev It's usage on-chain is not recommended.\\n    /// @param _validatorIdentifier The Validator to check for.\\n    function numberOfViolationsForValidator(\\n        bytes32 _validatorIdentifier\\n    ) public view returns (uint256 len) {\\n        len = violationsForValidator[_validatorIdentifier].length;\\n    }\\n\\n    /// @notice Get the violations contained in a report.\\n    /// @param _reportID The report to check for.\\n    function getViolationsInReport(\\n        uint256 _reportID\\n    ) public view returns (Violation[] memory containedViolation) {\\n        containedViolation = reports[_reportID].listViolations;\\n    }\\n\\n    /**\\n     * @notice Computes the public key root.\\n     * @param _pubkey The validator public key for which to compute the root.\\n     * @return The root of the public key.\\n     */\\n    function getPubkeyRoot(\\n        bytes calldata _pubkey\\n    ) public pure returns (bytes32) {\\n        // Append 16 bytes of zero padding to the pubkey and compute its hash to get the pubkey root.\\n        return sha256(abi.encodePacked(_pubkey, bytes16(0)));\\n    }\\n}\\n\"\r\n    },\r\n    \"src/stader/utils/Utils.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.8.16;\\n\\nlibrary Utils {\\n    /// @notice Convert a unsigned integer to bytes.\\n    /// @param x the uint256 to convert.\\n    function toBytes(uint256 x) internal pure returns (bytes memory b) {\\n        b = new bytes(32);\\n        assembly {\\n            mstore(add(b, 32), x)\\n        }\\n    }\\n\\n    /// @notice Remove an element from an array.\\n    /// @param index Index of the element to remove.\\n    /// @param array Array to remove from.\\n    function removeFromArray(uint256 index, uint256[] storage array) internal {\\n        array[index] = array[array.length - 1];\\n        array.pop();\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [\r\n      \"@UMA/=lib/protocol/\",\r\n      \"@ds-test/=lib/forge-std/lib/ds-test/src/\",\r\n      \"@forge-std/=lib/forge-std/src/\",\r\n      \"@openzeppelin/=lib/openzeppelin-contracts/\",\r\n      \"ds-test/=lib/forge-std/lib/ds-test/src/\",\r\n      \"erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/\",\r\n      \"forge-std/=lib/forge-std/src/\",\r\n      \"openzeppelin-contracts/=lib/openzeppelin-contracts/\",\r\n      \"protocol/=lib/protocol/\"\r\n    ],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"ipfs\"\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_bondAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"_challengeWindow\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"_bondCurrency\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_proposer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_oracle\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"amountCanNotBeZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"canNotBeAddressZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"invalidChallengeWindow\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"proposerNotApproved\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_newBondAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"contract IERC20\",\"name\":\"_newCurrency\",\"type\":\"address\"}],\"name\":\"NewBondSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"_newChallengeWindow\",\"type\":\"uint64\"}],\"name\":\"NewChallengeWindowSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"_timeToSettle\",\"type\":\"uint64\"}],\"name\":\"NewTimeToSettleSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_proposerApproved\",\"type\":\"address\"}],\"name\":\"ProposerApproved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_proposerRevoked\",\"type\":\"address\"}],\"name\":\"ProposerRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_reportID\",\"type\":\"uint256\"}],\"name\":\"reportDiscarded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_reportID\",\"type\":\"uint256\"}],\"name\":\"reportDisputed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_reportID\",\"type\":\"uint256\"}],\"name\":\"reportMade\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_reportID\",\"type\":\"uint256\"}],\"name\":\"reportSettled\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"approveProposer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"approvedProposer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bondAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bondCurrency\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"challengeWindow\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newBondAmount\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"_newCurrency\",\"type\":\"address\"}],\"name\":\"changeBondAmountAndCurrency\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"disputedReportsID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_pubkey\",\"type\":\"bytes\"}],\"name\":\"getPubkeyRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_validatorIdentifier\",\"type\":\"bytes32\"}],\"name\":\"getViolationsForValidator\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"validatorIdentifier\",\"type\":\"bytes32\"},{\"internalType\":\"uint32\",\"name\":\"epochNumber\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"penaltyType\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"newFeeRecipientAddress\",\"type\":\"address\"}],\"internalType\":\"struct RatedOracle.Violation[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_reportID\",\"type\":\"uint256\"}],\"name\":\"getViolationsInReport\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"validatorIdentifier\",\"type\":\"bytes32\"},{\"internalType\":\"uint32\",\"name\":\"epochNumber\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"penaltyType\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"newFeeRecipientAddress\",\"type\":\"address\"}],\"internalType\":\"struct RatedOracle.Violation[]\",\"name\":\"containedViolation\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_validatorIdentifier\",\"type\":\"bytes32\"}],\"name\":\"isValidatorInDispute\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_validatorIdentifier\",\"type\":\"bytes32\"}],\"name\":\"numberOfViolationsForValidator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"len\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pendingReportsID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_fromEpoch\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"_toEpoch\",\"type\":\"uint32\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"validatorIdentifier\",\"type\":\"bytes32\"},{\"internalType\":\"uint32\",\"name\":\"epochNumber\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"penaltyType\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"newFeeRecipientAddress\",\"type\":\"address\"}],\"internalType\":\"struct RatedOracle.Violation[]\",\"name\":\"_listViolations\",\"type\":\"tuple[]\"}],\"name\":\"postReport\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceIdentifier\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_index\",\"type\":\"uint64\"}],\"name\":\"removeDisputedReport\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reportID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"reports\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"fromEpoch\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"toEpoch\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"assertionID\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"revokeProposer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_newChallengeWindow\",\"type\":\"uint64\"}],\"name\":\"setChallengeWindow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_timeToSettle\",\"type\":\"uint64\"}],\"name\":\"setTimeToSettle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"timeToSettle\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"validatorInReport\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"violationsForValidator\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"validatorIdentifier\",\"type\":\"bytes32\"},{\"internalType\":\"uint32\",\"name\":\"epochNumber\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"penaltyType\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"newFeeRecipientAddress\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"withdrawFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "RatedOracle", "CompilerVersion": "v0.8.16+commit.07a7930e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000000000000000000000000000000000003b9aca000000000000000000000000000000000000000000000000000000000000015180000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb48000000000000000000000000a7eb7c9bd59aee56b7c5d29d3df972e2c191448f000000000000000000000000fb55f43fb9f48f63f9269db7dde3bbbe1ebdc0de", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}