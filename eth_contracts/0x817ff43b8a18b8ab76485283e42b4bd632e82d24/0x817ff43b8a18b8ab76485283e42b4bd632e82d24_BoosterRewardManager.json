{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/contracts/BoosterRewardManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\n\\nimport \\\"./interfaces/IBooster.sol\\\";\\nimport \\\"./interfaces/IBoosterAdmin.sol\\\";\\nimport \\\"./interfaces/IBoosterRewardManager.sol\\\";\\nimport \\\"./interfaces/IRewardStash.sol\\\";\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\n\\n/*\\n    Reward Manager\\n*/\\ncontract BoosterRewardManager is IBoosterRewardManager{\\n\\n    address public constant booster = address(0xF403C135812408BFbE8713b5A23a04b3D48AAE31);\\n    address public constant boosterOwner = address(0x256e1bbA846611C37CF89844a02435E6C098b86D);\\n    address public constant cvx = address(0x4e3FBD56CD56c3e72c1403e103b45Db9da5B9D2B);\\n    address public constant crv = address(0xD533a949740bb3306d119CC777fa900bA034cd52);\\n    address public immutable owner;\\n\\n    mapping(address => bool) public operators;\\n    mapping(address => address) public stashMap;\\n    address public override defaultHook;\\n\\n    event AddOperator(address indexed _op, bool _valid);\\n    event ChangeHooks(address mainhook);\\n\\n    constructor(address _owner) public {\\n        owner = _owner;\\n        operators[msg.sender] = true;\\n        emit AddOperator(msg.sender, true);\\n    }\\n\\n    modifier onlyOwner() {\\n        require(owner == msg.sender, \\\"!owner\\\");\\n        _;\\n    }\\n\\n    modifier onlyOperator() {\\n        require(operators[msg.sender] || owner == msg.sender, \\\"!op\\\");\\n        _;\\n    }\\n\\n    //set operator\\n    function setOperators(address _op, bool _valid) external onlyOwner{\\n        operators[_op] = _valid;\\n        emit AddOperator(_op, _valid);\\n    }\\n\\n    //set default hooks\\n    function setPoolHooks(address _poolhook) external onlyOwner{\\n        defaultHook = _poolhook;\\n        emit ChangeHooks(_poolhook);\\n    }\\n\\n    function setStashRewardManager(address _mng) external override onlyOwner{\\n        IBoosterAdmin(boosterOwner).setStashRewardManager(_mng);\\n    }\\n\\n    function acceptStashRewardManager() external{\\n        IBoosterAdmin(boosterOwner).acceptStashRewardManager();\\n    }\\n\\n    function initializePool(uint256 _pid) external override onlyOperator{\\n        //add cvx (will be ignored if called twice)\\n        IBoosterAdmin(boosterOwner).setStashExtraReward(_pid, cvx);\\n\\n        (, , , , address stash, ) = IBooster(booster).poolInfo(_pid);\\n        if(IRewardStash(stash).rewardHook() == address(0)){\\n            //set pool hook\\n            IBoosterAdmin(boosterOwner).setStashRewardHook(_pid, defaultHook);\\n        }\\n    }\\n    \\n    function setStashExtraReward(uint256 _pid, address _token) external override onlyOperator{\\n        IBoosterAdmin(boosterOwner).setStashExtraReward(_pid, _token);\\n    }\\n\\n    function setStashRewardHook(uint256 _pid, address _hook) external override onlyOperator{\\n        IBoosterAdmin(boosterOwner).setStashRewardHook(_pid, _hook);\\n    }\\n\\n    function setMultiStashRewardHook(uint256[] calldata _pids, address _hook) external override onlyOperator{\\n        uint256 plength = _pids.length;\\n        for(uint256 i = 0; i < plength; ++i ){ \\n            IBoosterAdmin(boosterOwner).setStashRewardHook(_pids[i], _hook);\\n        }\\n    }\\n\\n    function setStashTokenIsValid(address stashToken, bool isValid) external override onlyOperator{\\n        IBoosterAdmin(boosterOwner).setStashTokenIsValid(stashToken, isValid);\\n    }\\n\\n}\"\r\n    },\r\n    \"/contracts/interfaces/IRewardStash.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\ninterface IRewardStash{\\n    function rewardHook() external view returns(address);\\n    function setRewardHook(address _hook) external;\\n    function setExtraReward(address _token) external;\\n\\n}\"\r\n    },\r\n    \"/contracts/interfaces/IBoosterRewardManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\n\\ninterface IBoosterRewardManager {\\n    function defaultHook() external view returns(address);\\n    function initializePool(uint256 _pid) external;\\n    function setStashRewardManager(address _mng) external;\\n    function setStashExtraReward(uint256 _pid, address _token) external;\\n    function setStashRewardHook(uint256 _pid, address _hook) external;\\n    function setMultiStashRewardHook(uint256[] calldata _pids, address _hook) external;\\n    function setStashTokenIsValid(address stashToken, bool isValid) external;\\n}\"\r\n    },\r\n    \"/contracts/interfaces/IBoosterAdmin.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\n\\ninterface IBoosterAdmin {\\n    function owner() external view returns(address);\\n    function stashRewardManager() external view returns(address);\\n    function setStashRewardManager(address _mng) external;\\n    function acceptStashRewardManager() external;\\n    function setStashExtraReward(uint256 _pid, address _token) external;\\n    function setStashRewardHook(uint256 _pid, address _hook) external;\\n    function setStashTokenIsValid(address stashToken, bool isValid) external;\\n}\"\r\n    },\r\n    \"/contracts/interfaces/IBooster.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\n\\ninterface IBooster {\\n    function owner() external view returns(address);\\n    function feeToken() external view returns(address);\\n    function feeDistro() external view returns(address);\\n    function lockFees() external view returns(address);\\n    function stakerRewards() external view returns(address);\\n    function lockRewards() external view returns(address);\\n    function setVoteDelegate(address _voteDelegate) external;\\n    function vote(uint256 _voteId, address _votingAddress, bool _support) external returns(bool);\\n    function voteGaugeWeight(address[] calldata _gauge, uint256[] calldata _weight ) external returns(bool);\\n    function poolInfo(uint256 _pid) external view returns(address _lptoken, address _token, address _gauge, address _crvRewards, address _stash, bool _shutdown);\\n    function earmarkRewards(uint256 _pid) external returns(bool);\\n    function earmarkFees() external returns(bool);\\n    function isShutdown() external view returns(bool);\\n    function poolLength() external view returns (uint256);\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_op\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_valid\",\"type\":\"bool\"}],\"name\":\"AddOperator\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"mainhook\",\"type\":\"address\"}],\"name\":\"ChangeHooks\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptStashRewardManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"booster\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"boosterOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"crv\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cvx\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defaultHook\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"initializePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"operators\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_pids\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"_hook\",\"type\":\"address\"}],\"name\":\"setMultiStashRewardHook\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_op\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_valid\",\"type\":\"bool\"}],\"name\":\"setOperators\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_poolhook\",\"type\":\"address\"}],\"name\":\"setPoolHooks\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"setStashExtraReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_hook\",\"type\":\"address\"}],\"name\":\"setStashRewardHook\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_mng\",\"type\":\"address\"}],\"name\":\"setStashRewardManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stashToken\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isValid\",\"type\":\"bool\"}],\"name\":\"setStashTokenIsValid\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stashMap\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "BoosterRewardManager", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000a3c5a1e09150b75ff251c1a7815a07182c3de2fb", "EVMVersion": "istanbul", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}