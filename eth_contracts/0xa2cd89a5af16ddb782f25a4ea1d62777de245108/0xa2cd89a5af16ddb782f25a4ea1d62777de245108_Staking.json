{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"src/Staking.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.24;\\n\\nimport {Ownable2Step, Ownable} from \\\"lib/openzeppelin-contracts/contracts/access/Ownable2Step.sol\\\";\\nimport {ReentrancyGuard} from \\\"lib/openzeppelin-contracts/contracts/utils/ReentrancyGuard.sol\\\";\\nimport {IERC20} from \\\"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/// @title Staking\\n/// @notice $BLOCK staking\\ncontract Staking is Ownable2Step, ReentrancyGuard {\\n    /*==============================================================\\n                      CONSTANTS & IMMUTABLES\\n    ==============================================================*/\\n\\n    /// @notice $BLOCK address\\n    IERC20 public immutable token;\\n\\n    /*==============================================================\\n                       STORAGE VARIABLES\\n    ==============================================================*/\\n\\n    struct Pool {\\n        uint256 poolId;\\n        uint256 amountLimit;\\n        uint256 amount;\\n        uint256[] lockupPeriods;\\n        bool paused;\\n        bool terminated;\\n    }\\n\\n    struct Stake {\\n        uint256 poolId;\\n        uint256 amount;\\n        uint256 lockupPeriod;\\n        uint256 expiresAt;\\n        bool unstaked;\\n    }\\n\\n    /// @notice Pool ID => Pool\\n    mapping(uint256 => Pool) public pools;\\n\\n    /// @notice User => Stake[]\\n    mapping(address => Stake[]) public stakes;\\n\\n    /// @notice User => Stake count\\n    mapping(address => uint256) public stakesCount;\\n\\n    /*==============================================================\\n                            FUNCTIONS\\n    ==============================================================*/\\n\\n    /// @notice Staking contract constructor\\n    /// @param _initialOwner Initial owner of the contract\\n    /// @param _token $BLOCK token address\\n    constructor(address _initialOwner, address _token) Ownable(_initialOwner) {\\n        if (_token == address(0)) {\\n            revert InvalidTokenAddressSet();\\n        }\\n\\n        token = IERC20(_token);\\n    }\\n\\n    /// @notice Stake $BLOCK tokens\\n    /// @param _poolId Pool ID\\n    /// @param _amount Amount of $BLOCK tokens to stake\\n    /// @param _lockupPeriod Lockup period in seconds\\n    function stake(\\n        uint256 _poolId,\\n        uint256 _amount,\\n        uint256 _lockupPeriod\\n    ) external nonReentrant {\\n        if (pools[_poolId].amountLimit == 0) {\\n            revert PoolDoesNotExist();\\n        }\\n\\n        Pool memory pool = pools[_poolId];\\n        if (pool.terminated) {\\n            revert PoolIsTerminated();\\n        } else if (pool.paused) {\\n            revert PoolIsPaused();\\n        } else if (_amount + pool.amount > pools[_poolId].amountLimit) {\\n            revert ExceedsLimit();\\n        } else if (!_exists(pool.lockupPeriods, _lockupPeriod)) {\\n            revert InvalidLockupPeriod();\\n        }\\n\\n        token.transferFrom(msg.sender, address(this), _amount);\\n        stakes[msg.sender].push(\\n            Stake({\\n                poolId: _poolId,\\n                amount: _amount,\\n                lockupPeriod: _lockupPeriod,\\n                expiresAt: block.timestamp + _lockupPeriod,\\n                unstaked: false\\n            })\\n        );\\n\\n        stakesCount[msg.sender]++;\\n        pools[_poolId].amount += _amount;\\n\\n        emit Staked(msg.sender, _poolId, _amount, _lockupPeriod);\\n    }\\n\\n    /// @notice Unstake $BLOCK tokens\\n    /// @param _stakeIds Stake ID\\n    function unstake(uint256[] calldata _stakeIds) external nonReentrant {\\n        uint256 unstakeAmount = 0;\\n\\n        for (uint256 i = 0; i < _stakeIds.length; i++) {\\n            Stake storage stake_ = stakes[msg.sender][_stakeIds[i]];\\n            if (stake_.unstaked) {\\n                revert AlreadyUnstaked();\\n            }\\n\\n            Pool memory pool = pools[stake_.poolId];\\n            if (!pool.terminated && stake_.expiresAt > block.timestamp) {\\n                revert StakeNotExpired();\\n            }\\n\\n            stake_.unstaked = true;\\n            unstakeAmount += stake_.amount;\\n        }\\n\\n        token.transfer(msg.sender, unstakeAmount);\\n\\n        emit Unstaked(_stakeIds);\\n    }\\n\\n    /*==============================================================\\n                        ADMIN FUNCTIONS\\n    ==============================================================*/\\n\\n    /// @notice Create a new pool\\n    /// @param _poolId Pool ID\\n    /// @param _amountLimit Total limit of the pool\\n    /// @param _lockupPeriods Lockup periods\\n    function createPool(uint256 _poolId, uint256 _amountLimit, uint256[] calldata _lockupPeriods) external onlyOwner {\\n        if (pools[_poolId].amountLimit != 0) {\\n            revert PoolAlreadyExists();\\n        } else if (_amountLimit == 0) {\\n            revert InvalidAmountLimitSet();\\n        }\\n\\n        for (uint256 i = 0; i < _lockupPeriods.length; i++) {\\n            if (_lockupPeriods[i] == 0) {\\n                revert InvalidLockupPeriodSet();\\n            }\\n        }\\n\\n        pools[_poolId] = Pool({\\n            poolId: _poolId,\\n            amountLimit: _amountLimit,\\n            lockupPeriods: _lockupPeriods,\\n            amount: 0,\\n            paused: false,\\n            terminated: false\\n        });\\n        emit PoolCreated(_poolId, _amountLimit);\\n    }\\n\\n    /// @notice Pause a pool\\n    /// @param _poolId Pool ID\\n    function pausePool(uint256 _poolId) external onlyOwner {\\n        pools[_poolId].paused = true;\\n        emit PoolPaused(_poolId);\\n    }\\n\\n    /// @notice Unpause a pool\\n    /// @param _poolId Pool ID\\n    function unpausePool(uint256 _poolId) external onlyOwner {\\n        pools[_poolId].paused = false;\\n        emit PoolUnpaused(_poolId);\\n    }\\n\\n    /// @notice Terminate a pool\\n    /// @param _poolId Pool ID\\n    function terminatePool(uint256 _poolId) external onlyOwner {\\n        pools[_poolId].terminated = true;\\n        emit PoolTerminated(_poolId);\\n    }\\n\\n    /*==============================================================\\n                      INTERNAL FUNCTIONS\\n    ==============================================================*/\\n\\n    /// @notice Check if a lockup period exists\\n    /// @param _periods Lockup periods\\n    /// @param _period Lockup period\\n    function _exists(\\n        uint256[] memory _periods,\\n        uint256 _period\\n    ) internal pure returns (bool) {\\n        for (uint256 i = 0; i < _periods.length; i++) {\\n            if (_periods[i] == _period) {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n\\n    /*==============================================================\\n                            EVENTS\\n    ==============================================================*/\\n\\n    /// @notice Emitted when a pool is created\\n    /// @param poolId Pool ID\\n    /// @param amountLimit Total limit of the pool\\n    event PoolCreated(uint256 indexed poolId, uint256 indexed amountLimit);\\n\\n    /// @notice Emitted when a pool is paused\\n    /// @param poolId Pool ID\\n    event PoolPaused(uint256 indexed poolId);\\n\\n    /// @notice Emitted when a pool is unpaused\\n    /// @param poolId Pool ID\\n    event PoolUnpaused(uint256 indexed poolId);\\n\\n    /// @notice Emitted when a pool is terminated\\n    /// @param poolId Pool ID\\n    event PoolTerminated(uint256 indexed poolId);\\n\\n    /// @notice Emitted when a user stakes to a pool\\n    /// @param walletAddress Address of staker\\n    /// @param poolId Pool ID\\n    /// @param amount Amount of $BLOCK tokens staked\\n    /// @param lockupPeriod Lockup period\\n    event Staked(\\n        address indexed walletAddress,\\n        uint256 indexed poolId,\\n        uint256 amount,\\n        uint256 indexed lockupPeriod\\n    );\\n\\n    /// @notice Emitted when a user unstakes from a pool\\n    /// @param stakeIds Stake IDs\\n    event Unstaked(uint256[] indexed stakeIds);\\n\\n    /*==============================================================\\n                            ERRORS\\n    ==============================================================*/\\n\\n    /// @notice Error when pool does not exist\\n    error PoolDoesNotExist();\\n\\n    /// @notice Error when pool already exists\\n    error PoolAlreadyExists();\\n\\n    /// @notice Error when pool is paused\\n    error PoolIsPaused();\\n\\n    /// @notice Error when pool is terminated\\n    error PoolIsTerminated();\\n\\n    /// @notice Error when pool amount limit is exceeded\\n    error ExceedsLimit();\\n\\n    /// @notice Error when lockup period is invalid\\n    error InvalidLockupPeriod();\\n\\n    /// @notice Error when stake is already unstaked\\n    error TransferFailed();\\n\\n    /// @notice Error when stake is already unstaked\\n    error AlreadyUnstaked();\\n\\n    /// @notice Error when stake is not expired\\n    error StakeNotExpired();\\n\\n    /// @notice Error when stake does not exist\\n    error StakeDoesNotExist();\\n\\n    /// @notice Error when adding invalid token address\\n    error InvalidTokenAddressSet();\\n\\n    /// @notice Error when setting invalid amount limit\\n    error InvalidAmountLimitSet();\\n\\n    /// @notice Error when setting invalid lockup period\\n    error InvalidLockupPeriodSet();\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/access/Ownable2Step.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable2Step.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Ownable} from \\\"./Ownable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is specified at deployment time in the constructor for `Ownable`. This\\n * can later be changed with {transferOwnership} and {acceptOwnership}.\\n *\\n * This module is used through inheritance. It will make available all functions\\n * from parent (Ownable).\\n */\\nabstract contract Ownable2Step is Ownable {\\n    address private _pendingOwner;\\n\\n    event OwnershipTransferStarted(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Returns the address of the pending owner.\\n     */\\n    function pendingOwner() public view virtual returns (address) {\\n        return _pendingOwner;\\n    }\\n\\n    /**\\n     * @dev Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one.\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual override onlyOwner {\\n        _pendingOwner = newOwner;\\n        emit OwnershipTransferStarted(owner(), newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`) and deletes any pending owner.\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual override {\\n        delete _pendingOwner;\\n        super._transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev The new owner accepts the ownership transfer.\\n     */\\n    function acceptOwnership() public virtual {\\n        address sender = _msgSender();\\n        if (pendingOwner() != sender) {\\n            revert OwnableUnauthorizedAccount(sender);\\n        }\\n        _transferOwnership(sender);\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    constructor() {\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if (_status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [\r\n      \"@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\r\n      \"ds-test/=lib/openzeppelin-contracts/lib/forge-std/lib/ds-test/src/\",\r\n      \"erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/\",\r\n      \"forge-std/=lib/forge-std/src/\",\r\n      \"openzeppelin-contracts/=lib/openzeppelin-contracts/\"\r\n    ],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": false,\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"appendCBOR\": true\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"paris\",\r\n    \"viaIR\": false,\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_initialOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AlreadyUnstaked\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ExceedsLimit\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidAmountLimitSet\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidLockupPeriod\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidLockupPeriodSet\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidTokenAddressSet\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PoolAlreadyExists\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PoolDoesNotExist\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PoolIsPaused\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PoolIsTerminated\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"StakeDoesNotExist\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"StakeNotExpired\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferFailed\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amountLimit\",\"type\":\"uint256\"}],\"name\":\"PoolCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"}],\"name\":\"PoolPaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"}],\"name\":\"PoolTerminated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"}],\"name\":\"PoolUnpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"walletAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"lockupPeriod\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256[]\",\"name\":\"stakeIds\",\"type\":\"uint256[]\"}],\"name\":\"Unstaked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"_lockupPeriods\",\"type\":\"uint256[]\"}],\"name\":\"createPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolId\",\"type\":\"uint256\"}],\"name\":\"pausePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pools\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"paused\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"terminated\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lockupPeriod\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stakes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockupPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiresAt\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"unstaked\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stakesCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolId\",\"type\":\"uint256\"}],\"name\":\"terminatePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolId\",\"type\":\"uint256\"}],\"name\":\"unpausePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_stakeIds\",\"type\":\"uint256[]\"}],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Staking", "CompilerVersion": "v0.8.24+commit.e11b9ed9", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000051fc2c72731155f225a6ca8002887e56afdb7b040000000000000000000000008fc17671d853341d9e8b001f5fc3c892d09cb53a", "EVMVersion": "paris", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}