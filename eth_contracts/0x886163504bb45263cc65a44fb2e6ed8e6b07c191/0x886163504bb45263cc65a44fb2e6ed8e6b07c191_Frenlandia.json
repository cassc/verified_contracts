{"SourceCode": "// File: @openzeppelin/contracts/utils/Context.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\r\n\r\npragma solidity ^0.8.20;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n\r\n    function _contextSuffixLength() internal view virtual returns (uint256) {\r\n        return 0;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/Ownable.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.20;\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * The initial owner is set to the address provided by the deployer. This can\r\n * later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    /**\r\n     * @dev The caller account is not authorized to perform an operation.\r\n     */\r\n    error OwnableUnauthorizedAccount(address account);\r\n\r\n    /**\r\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\r\n     */\r\n    error OwnableInvalidOwner(address owner);\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\r\n     */\r\n    constructor(address initialOwner) {\r\n        if (initialOwner == address(0)) {\r\n            revert OwnableInvalidOwner(address(0));\r\n        }\r\n        _transferOwnership(initialOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the owner.\r\n     */\r\n    function _checkOwner() internal view virtual {\r\n        if (owner() != _msgSender()) {\r\n            revert OwnableUnauthorizedAccount(_msgSender());\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby disabling any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        if (newOwner == address(0)) {\r\n            revert OwnableInvalidOwner(address(0));\r\n        }\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n// File: frenkingdom.sol\r\n\r\n\r\npragma solidity ^0.8.20;\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\nlibrary IterableMapping {\r\n    // Iterable mapping from address to uint;\r\n    struct Map {\r\n        address[] keys;\r\n        mapping(address => uint256) values;\r\n        mapping(address => uint256) indexOf;\r\n        mapping(address => bool) inserted;\r\n    }\r\n\r\n    function exists(Map storage map, address key) internal view returns (bool) {\r\n        return map.inserted[key];\r\n    }\r\n\r\n    function get(Map storage map, address key) internal view returns (uint256) {\r\n        return map.values[key];\r\n    }\r\n\r\n    function getKeyAtIndex(Map storage map, uint256 index) internal view returns (address) {\r\n        return map.keys[index];\r\n    }\r\n\r\n    function size(Map storage map) internal view returns (uint256) {\r\n        return map.keys.length;\r\n    }\r\n\r\n    function set(Map storage map, address key, uint256 val) internal {\r\n        if (map.inserted[key]) {\r\n            map.values[key] = val;\r\n        } else {\r\n            map.inserted[key] = true;\r\n            map.values[key] = val;\r\n            map.indexOf[key] = map.keys.length;\r\n            map.keys.push(key);\r\n        }\r\n    }\r\n\r\n    function remove(Map storage map, address key) internal {\r\n        if (!map.inserted[key]) {\r\n            return;\r\n        }\r\n\r\n        delete map.inserted[key];\r\n        delete map.values[key];\r\n\r\n        uint256 index = map.indexOf[key];\r\n        address lastKey = map.keys[map.keys.length - 1];\r\n\r\n        map.indexOf[lastKey] = index;\r\n        delete map.indexOf[key];\r\n\r\n        map.keys[index] = lastKey;\r\n        map.keys.pop();\r\n    }\r\n}\r\n\r\ncontract Frenlandia is IERC20, Ownable {\r\n\r\n    mapping(address account => uint256) private _balances;\r\n    mapping(address account => mapping(address spender => uint256)) private _allowances;\r\n    mapping(address => bool) private _blacklist;\r\n\r\n    uint256 constant private _totalSupply = 666666666666 * 10**18; // 666666666666 tokens with 18 decimals\r\n    string constant private _name = \"Frenlandia\";\r\n    string constant private _symbol = \"Fren\";\r\n    uint8 constant private _decimals = 18;\r\n\r\n    uint256 constant private _taxFee = 1; // 1% tax fee\r\n    uint256 constant private _maxSends = 5; // maximum number of random holders who receive their reflection per transaction\r\n    uint256 private _reflectionTotal;\r\n    mapping(address => bool) private _excludedFromReflection;\r\n    uint256 private _excludedSupply;\r\n\r\n    using IterableMapping for IterableMapping.Map;\r\n    IterableMapping.Map private _reflections;\r\n\r\n    constructor() Ownable (_msgSender()) {\r\n        _balances[_msgSender()] = _totalSupply;\r\n        emit Transfer(address(0), _msgSender(), _totalSupply);\r\n        _reflections.set(_msgSender(), _reflectionTotal);\r\n        _excludedFromReflection[address(0)] = true;\r\n        _excludedFromReflection[address(0x000000000000000000000000000000000000dEaD)] = true;\r\n    }\r\n\r\n    function name() public pure returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public pure returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public pure returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public pure override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        uint256 balance = _balances[account];\r\n        return  balance;\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()] - amount);\r\n        return true;\r\n    }\r\n\r\n    function totalReflection() public view returns (uint256) {\r\n        return _reflectionTotal;\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) internal {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n        require(!_blacklist[owner], \"Owner is blacklisted\");\r\n        require(!_blacklist[spender], \"Spender is blacklisted\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n\r\n        _excludeReflection(spender); // no reflections for router\r\n    }\r\n\r\n    function _transfer(address sender, address recipient, uint256 amount) internal {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n        require(amount > 0, \"ERC20: transfer amount must be greater than zero\");\r\n        require(!_blacklist[sender], \"Sender is blacklisted\");\r\n        require(!_blacklist[recipient], \"Recipient is blacklisted\");\r\n\r\n        uint256 taxAmount = amount * _taxFee / 100; // Calculate the tax amount\r\n        uint256 transferAmount = amount - taxAmount; // Calculate the transfer amount after tax\r\n\r\n        address owner = owner();\r\n        if(sender != owner) { _checkAccount(sender); }\r\n        if(recipient != owner) { _checkAccount(recipient); }\r\n        if((sender == owner) || (recipient == owner) || (_excludedFromReflection[sender] && _excludedFromReflection[recipient])) {\r\n            taxAmount = 0;\r\n            transferAmount = amount;\r\n        }\r\n\r\n        if(taxAmount > 0) {\r\n            // take fee and store in contract\r\n            _balances[address(this)] = _balances[address(this)] + taxAmount;\r\n            emit Transfer(sender, address(this), taxAmount);\r\n            _reflectionTotal = _reflectionTotal + taxAmount;\r\n        }\r\n        _redistributeReflection(sender, recipient); // Distribute reflection on each transfer\r\n\r\n        _balances[sender] = _balances[sender] - amount;\r\n        if(_excludedFromReflection[sender]) {\r\n            _excludedSupply-= amount;\r\n        }\r\n        _balances[recipient] = _balances[recipient] + transferAmount;\r\n        if(_excludedFromReflection[recipient]) {\r\n            _excludedSupply+= transferAmount;\r\n        }\r\n        emit Transfer(sender, recipient, transferAmount);\r\n    }\r\n\r\n    function _redistributeReflection(address sender, address recipient) internal {\r\n        _redistributeReflectionFor(sender);\r\n        _redistributeReflectionFor(recipient);\r\n\r\n        uint256 size = _reflections.size();\r\n        uint256 randomIndex = uint256(keccak256(abi.encodePacked(block.number, _msgSender(), _reflectionTotal))) % size;\r\n        uint256 count = size;\r\n        if(_reflections.exists(sender)) count--;\r\n        if(_reflections.exists(recipient)) count--;\r\n        uint256 max = (count > _maxSends) ? _maxSends : count;\r\n        uint256 i = 0;\r\n        while(i < max) {\r\n            address holder = _reflections.getKeyAtIndex(randomIndex);\r\n            if((holder != sender) && (holder != recipient)) { \r\n                if(!_redistributeReflectionFor(holder)) break;\r\n                i++;\r\n            }\r\n            randomIndex = (randomIndex + 1) % size;\r\n        }\r\n    }\r\n\r\n    function _redistributeReflectionFor(address holder) internal  returns (bool){\r\n        if(_reflections.exists(holder)) {\r\n            uint256 balance = _balances[holder];\r\n            uint256 lastReflectionTotal = _reflections.get(holder);\r\n            uint256 reflection_amount = balance * (_reflectionTotal - lastReflectionTotal) / (_totalSupply - _excludedSupply);\r\n            if(reflection_amount > 0) {\r\n                if(_balances[address(this)] >= (reflection_amount)) {\r\n                    _balances[address(this)] = _balances[address(this)] - reflection_amount;\r\n                    _balances[holder] = _balances[holder] + reflection_amount;\r\n                    _reflections.set(holder, _reflectionTotal);\r\n                    emit Transfer(address(this), holder, reflection_amount);\r\n                    return true;\r\n                } else return false;\r\n            }\r\n        }\r\n        _reflections.set(holder, _reflectionTotal);\r\n        return true;\r\n    }\r\n\r\n    event BlacklistUpdated(address indexed account, bool isBlacklisted);\r\n\r\n    function blacklist(address account) public onlyOwner {\r\n        require(!_blacklist[account], \"Account is already blacklisted\");\r\n        _blacklist[account] = true;\r\n        emit BlacklistUpdated(account, true);\r\n    }\r\n\r\n    function unBlacklist(address account) public onlyOwner {\r\n        require(_blacklist[account], \"Account is not blacklisted\");\r\n        delete(_blacklist[account]);\r\n        emit BlacklistUpdated(account, false);\r\n    }\r\n\r\n    function isBlacklisted(address account) public view returns (bool) {\r\n        return _blacklist[account];\r\n    }\r\n    \r\n    event ExcludedUpdated(address indexed account, bool isExcluded, uint256 balance, uint256 excludedSupply);\r\n\r\n    function _excludeReflection(address account) internal {\r\n        if(!_excludedFromReflection[account]) {\r\n            _excludedFromReflection[account] = true;\r\n            _excludedSupply+= _balances[account];\r\n            emit ExcludedUpdated(account, true, _balances[account], _excludedSupply);\r\n        }\r\n    }\r\n\r\n    function _checkAccount(address account) internal {\r\n        if(!_excludedFromReflection[account]) {\r\n            if(_isPair(account)) {\r\n                _excludeReflection(account);\r\n            }\r\n        }\r\n    }\r\n\r\n    function _isPair(address account) internal view returns (bool) {\r\n        bool success;\r\n        bytes memory data;\r\n        (success, data) = account.staticcall(abi.encodeWithSelector(0x0dfe1681));//token0\r\n        if(success && (data.length == 32)) {\r\n            if(address(uint160(uint256(bytes32(data)))) == address(this)) return true;\r\n        } else return false;\r\n        (success, data) = account.staticcall(abi.encodeWithSelector(0xd21220a7));//token1\r\n        if(success && (data.length == 32)) {\r\n            if(address(uint160(uint256(bytes32(data)))) == address(this)) return true;\r\n        }\r\n        return false;\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isBlacklisted\",\"type\":\"bool\"}],\"name\":\"BlacklistUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isExcluded\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"excludedSupply\",\"type\":\"uint256\"}],\"name\":\"ExcludedUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"blacklist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isBlacklisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalReflection\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"unBlacklist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Frenlandia", "CompilerVersion": "v0.8.26+commit.8a97fa7a", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "Unlicense", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://40830be31ffbb6ab36e2985f5cd53069494ea4e3bb8940c0c3fcc91c715740eb"}