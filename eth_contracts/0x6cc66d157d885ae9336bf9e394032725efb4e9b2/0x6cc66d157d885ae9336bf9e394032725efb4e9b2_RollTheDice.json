{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\n// Roll-The-Dice Game Contract: 17 November 2023\r\n// Version: 1.2\r\n\r\n// Website: https://kekw.gg/\r\n// telegram: https://t.me/kekw_gg\r\n// X.com/Twtter: https://x.com/kekw_gg\r\n// Token: ($KEKW) 0x0DF596AD12F927e41EC317AF7DD666cA3574845f\r\n// Uniswap: https://app.uniswap.org/swap?outputCurrency=0x0DF596AD12F927e41EC317AF7DD666cA3574845f\r\n// Dextools: https://www.dextools.io/app/en/ether/pair-explorer/0x14ba508aaf2c15231f9df265980d1d461e54192b\r\n\r\npragma solidity ^0.8.18;\r\n\r\ninterface Casino {\r\n    struct Game {\r\n        uint256 index; // servers as Id\r\n        uint256 betAmount;\r\n        uint256 totalBetAmount;\r\n        address player1;\r\n        address player2;\r\n        address winner;\r\n        address gameContractAddress;\r\n        string player1Outcome;\r\n        string player2Outcome;\r\n    }\r\n\r\n    function ensureGameIsNotPlayed(uint256 _index)\r\n        external\r\n        view\r\n        returns (Game memory);\r\n\r\n    function winnerCallback(\r\n        uint256 gameIndex,\r\n        address winnerAddress,\r\n        string memory _player1Outcome,\r\n        string memory _player2Outcome\r\n    ) external;\r\n}\r\n\r\ncontract RollTheDice {\r\n    Casino public casino;\r\n    address public casinoAddress;\r\n    address public manager;\r\n    bool public paused;\r\n    uint256 public randomness = 64;\r\n\r\n    event GameStarted(uint256 gameIndex, address playerAddress);\r\n    event GameCompleted(\r\n        uint256 gameIndex,\r\n        address winnerAddress,\r\n        string randomSeed,\r\n        string player1Outcome,\r\n        string player2Outcome\r\n    );\r\n    event GameTie(uint256 gameIndex);\r\n\r\n    constructor(address _casino) {\r\n        manager = msg.sender;\r\n        casino = Casino(_casino);\r\n        casinoAddress = _casino;\r\n    }\r\n\r\n    function updateCasino(address _casino) public restricted {\r\n        casino = Casino(_casino);\r\n        casinoAddress = _casino;\r\n    }\r\n\r\n    function updateRandomness(uint256 _randomness) public restricted {\r\n        randomness = _randomness;\r\n    }\r\n\r\n    function generateRandomString(uint256 length)\r\n        public\r\n        view\r\n        returns (string memory)\r\n    {\r\n        require(length > 0, \"Length must be greater than 0\");\r\n\r\n        // Use block information and user address as a seed for randomness\r\n        bytes32 previousBlockNumberHash = blockhash(block.number - 1);\r\n        uint256 seed = uint256(\r\n            keccak256(\r\n                abi.encodePacked(\r\n                    previousBlockNumberHash,\r\n                    block.timestamp,\r\n                    msg.sender\r\n                )\r\n            )\r\n        );\r\n\r\n        // Define characters to include in the random string\r\n        string\r\n            memory characters = \"zGdFr0xHfPwKs43yhRJDepMjX6mEai8OSIWqQTZclUYoB95tnvbLV2Ag17uCNk\";\r\n\r\n        // Generate the random string\r\n        bytes memory randomString = new bytes(length);\r\n        for (uint256 i = 0; i < length; i++) {\r\n            // Get a pseudo-random index based on the seed\r\n            uint256 charIndex = (seed + i) % bytes(characters).length;\r\n\r\n            // Set the character in the random string\r\n            randomString[i] = bytes(characters)[charIndex];\r\n        }\r\n\r\n        return string(randomString);\r\n    }\r\n\r\n    function random(address _player, string memory _userSeed)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        bytes32 previousBlockNumberHash = blockhash(block.number - 1);\r\n        uint256 randomNumber = uint256(\r\n            keccak256(\r\n                abi.encodePacked(previousBlockNumberHash, _player, _userSeed)\r\n            )\r\n        );\r\n        return randomNumber;\r\n    }\r\n\r\n    function roll(address _player, string memory _userSeed)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        uint256 randomNumber = random(_player, _userSeed);\r\n        if (_player == casinoAddress) {\r\n            return (randomNumber % 100) < 1 ? 6 : (randomNumber % 6) + 1;\r\n        }\r\n        return (randomNumber % 6) + 1;\r\n    }\r\n\r\n    function play(uint256 _index) public notPaused returns (uint256, uint256) {\r\n        emit GameStarted(_index, msg.sender);\r\n        Casino.Game memory game = casino.ensureGameIsNotPlayed(_index);\r\n        require(\r\n            game.player1 == msg.sender || game.player2 == msg.sender,\r\n            \"Player is not allowed to play game on this table.\"\r\n        );\r\n        string memory randomUserSeed = generateRandomString(randomness);\r\n        uint256 player1Dice = roll(game.player1, randomUserSeed);\r\n        uint256 player2Dice = roll(game.player2, randomUserSeed);\r\n\r\n        if (player1Dice == player2Dice) {\r\n            emit GameTie(_index);\r\n            return (player1Dice, player2Dice);\r\n        } else {\r\n            address winner = player1Dice > player2Dice\r\n                ? game.player1\r\n                : game.player2;\r\n\r\n            string memory player1DiceString = uintToString(player1Dice);\r\n            string memory player2DiceString = uintToString(player2Dice);\r\n\r\n            casino.winnerCallback(\r\n                _index,\r\n                winner,\r\n                player1DiceString,\r\n                player2DiceString\r\n            );\r\n\r\n            emit GameCompleted(\r\n                _index,\r\n                winner,\r\n                randomUserSeed,\r\n                player1DiceString,\r\n                player2DiceString\r\n            );\r\n            return (player1Dice, player2Dice);\r\n        }\r\n    }\r\n\r\n    function uintToString(uint256 value) public pure returns (string memory) {\r\n        if (value == 0) {\r\n            return \"0\";\r\n        }\r\n\r\n        uint256 temp = value;\r\n        uint256 digits;\r\n\r\n        while (temp > 0) {\r\n            digits++;\r\n            temp /= 10;\r\n        }\r\n\r\n        bytes memory buffer = new bytes(digits);\r\n        while (value > 0) {\r\n            digits--;\r\n            buffer[digits] = bytes1(uint8(48 + (value % 10)));\r\n            value /= 10;\r\n        }\r\n\r\n        return string(buffer);\r\n    }\r\n\r\n    function updateGameState(bool _paused) public restricted {\r\n        paused = _paused;\r\n    }\r\n\r\n    modifier notPaused() {\r\n        require(paused == false);\r\n        _;\r\n    }\r\n\r\n    modifier restricted() {\r\n        require(msg.sender == manager);\r\n        _;\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_casino\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gameIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"winnerAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"randomSeed\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"player1Outcome\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"player2Outcome\",\"type\":\"string\"}],\"name\":\"GameCompleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gameIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"playerAddress\",\"type\":\"address\"}],\"name\":\"GameStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gameIndex\",\"type\":\"uint256\"}],\"name\":\"GameTie\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"casino\",\"outputs\":[{\"internalType\":\"contract Casino\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"casinoAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"}],\"name\":\"generateRandomString\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"play\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_player\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_userSeed\",\"type\":\"string\"}],\"name\":\"random\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"randomness\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_player\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_userSeed\",\"type\":\"string\"}],\"name\":\"roll\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"uintToString\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_casino\",\"type\":\"address\"}],\"name\":\"updateCasino\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_paused\",\"type\":\"bool\"}],\"name\":\"updateGameState\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_randomness\",\"type\":\"uint256\"}],\"name\":\"updateRandomness\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "RollTheDice", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000fcea7232160c9cf1b36e401348ef3fd4f83d6af1", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://748bf3be61938234db5d32ac97a664e8d30111bdef3d81206657f6be77b1cefd"}