{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"src/TokenRouter.sol\": {\r\n      \"content\": \"pragma solidity 0.8.18;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\nimport \\\"./BurnTokens.sol\\\";\\nimport \\\"./FeeCalculator.sol\\\";\\nimport \\\"./FeeOperator.sol\\\";\\nimport \\\"./SafeERC20TransferFrom.sol\\\";\\nimport \\\"./interfaces/ICircleTokenMessenger.sol\\\";\\nimport \\\"./roles/Admin.sol\\\";\\n\\n/**\\n * @title TokenRouter\\n * @notice Calls Circle's TokenMessenger contract to burn tokens on source chain\\n */\\ncontract TokenRouter is FeeCalculator, FeeOperator, BurnTokens, Pausable {\\n    using SafeERC20 for IERC20;\\n\\n    ICircleTokenMessenger public immutable circleTokenMessenger;\\n    address public immutable circleTokenMessengerAddress;\\n\\n    // ============ Events ============\\n    /**\\n     * @notice Emitted when a DepositToken message is sent. Similar as DepositForBurn event in TokenMessenger contract\\n     * https://github.com/circlefin/evm-cctp-contracts/blob/master/src/TokenMessenger.sol\\n     * @param nonce unique nonce reserved by message\\n     * @param burnToken address of token burnt on source domain\\n     * @param amount deposit amount\\n     * @param depositor address where deposit is transferred from\\n     * @param mintRecipient address receiving minted tokens on destination domain as bytes32\\n     * @param destinationDomain destination domain\\n     * @param totalFee fee amount\\n     */\\n    event TransferTokens(\\n        uint64 nonce, \\n        address burnToken, \\n        uint256 amount, \\n        address depositor, \\n        address mintRecipient, \\n        uint32 destinationDomain,\\n        uint256 totalFee\\n    );\\n\\n    // Errors\\n    error InvalidTokenMessengerAddress();\\n    error InvalidMintRecipientAddress();\\n    error AmountLessThanFee();\\n\\n    // ============ Constructor ============\\n    /**\\n     * @param circleTokenMessenger_ Cirle's TokenMessenger contract address\\n     * @param burnToken_ address of burnToken.\\n     */\\n    constructor (address circleTokenMessenger_, address burnToken_) BurnTokens(burnToken_) {\\n        if (circleTokenMessenger_ == address(0)) {\\n            revert InvalidTokenMessengerAddress();\\n        }\\n\\n        circleTokenMessenger = ICircleTokenMessenger(circleTokenMessenger_);\\n        circleTokenMessengerAddress = circleTokenMessenger_;\\n    }\\n\\n    // ============ External Functions  ============\\n    /**\\n     * @notice Collects fee from sender and calls Circle's TokenMessenger contract to burn tokens.\\n     * Emits a `TransferTokens` event.\\n     * @dev It defines same input parameters as depositForBurn in TokenMessenger contract\\n     * https://github.com/circlefin/evm-cctp-contracts/blob/master/src/TokenMessenger.sol\\n     * Modifications:\\n     * mintRecipient is address instead of bytes32\\n     * @param amount amount of tokens to burn\\n     * @param destinationDomain destination domain\\n     * @param mintRecipient address of mint recipient on destination domain\\n     * @param burnToken address of contract to burn deposited tokens, on local domain\\n     * @return nonce unique nonce reserved by message\\n     */\\n    function transferTokens(\\n        uint256 amount, \\n        uint32 destinationDomain,\\n        address mintRecipient,\\n        address burnToken\\n    )\\n        external \\n        nonReentrant \\n        whenNotPaused \\n        returns (uint64 nonce) \\n    {\\n        if (mintRecipient == address(0)) {\\n            revert InvalidMintRecipientAddress();\\n        }\\n        if (!isSupportedBurnToken(burnToken)) {\\n            revert BurnTokens.UnSupportedBurnToken();\\n        }\\n\\n        uint256 fee = calculateFee(amount, destinationDomain);\\n        if (amount <= fee) {\\n            revert AmountLessThanFee();\\n        }\\n\\n        IERC20 token = IERC20(burnToken);\\n\\n        uint256 transferredAmount = SafeERC20TransferFrom.safeTransferFrom(token, amount);\\n\\n        uint256 bridgeAmt = transferredAmount - fee;\\n        token.safeIncreaseAllowance(circleTokenMessengerAddress, bridgeAmt);\\n\\n        bytes32 mintRecipientBytes32 = bytes32(uint256(uint160(mintRecipient)));\\n\\n        nonce = circleTokenMessenger.depositForBurn(bridgeAmt, destinationDomain, mintRecipientBytes32, burnToken);\\n\\n        emit TransferTokens(nonce, burnToken, amount, msg.sender, mintRecipient, destinationDomain, fee);\\n    }\\n\\n    /**\\n     * @notice pause the contract\\n     */\\n    function pause() public onlyAdmin {\\n        _pause();\\n    }\\n\\n    /**\\n     * @notice unpause the contract \\n     */\\n    function unpause() public onlyAdmin {\\n        _unpause();\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Compatible with tokens that require the approval to be set to\\n     * 0 before setting it to a non-zero value.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/security/Pausable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\"\r\n    },\r\n    \"src/BurnTokens.sol\": {\r\n      \"content\": \"pragma solidity 0.8.18;\\n\\nimport \\\"./roles/Admin.sol\\\";\\n\\n/**\\n * @title BurnTokens\\n * @notice BurnTokens contract keeps track of supported burn tokens\\n */\\ncontract BurnTokens is Admin {\\n    // ============ Storage ============\\n    // Mapping of burn token to whether it is a supported burn token\\n    mapping(address => bool) public supportedBurnTokens;\\n\\n    // ============ Events ============\\n    /**\\n     * @notice Emitted when a burn token is added\\n     * @param token address of the burn token\\n     */\\n    event BurnTokenAdded(address token);\\n    /**\\n     * @notice Emitted when a burn token is removed\\n     * @param token address of the burn token\\n     */\\n    event BurnTokenRemoved(address token);\\n\\n    // Errors\\n    error AlreadySupportedBurnToken();\\n    error InvalidTokenAddress();\\n    error UnSupportedBurnToken();\\n   \\n    // ============ Constructor ============\\n    /**\\n     * @notice Initializes the contract\\n     * @param burnToken contract address of the initial burn token\\n     */\\n    constructor(address burnToken) {\\n        addSupportedBurnToken(burnToken);\\n    }\\n\\n    // ============ External Functions ============\\n    /**\\n     * @notice Adds a supported burn token\\n     * @param token address of the token contract\\n     */\\n    function addSupportedBurnToken(address token) public onlyAdmin {\\n        if (isSupportedBurnToken(token)) {\\n            revert AlreadySupportedBurnToken();\\n        }\\n\\n        if (token == address(0)) {\\n            revert InvalidTokenAddress();\\n        }\\n\\n        supportedBurnTokens[token] = true;\\n        \\n        emit BurnTokenAdded(token);\\n    }\\n\\n    /**\\n     * @notice Removes a supported burn token\\n     * @param token address of the token contract\\n     */\\n    function removeSupportedBurnToken(address token) public onlyAdmin {\\n        if (!isSupportedBurnToken(token)) {\\n            revert UnSupportedBurnToken();\\n        }\\n        supportedBurnTokens[token] = false;\\n\\n        emit BurnTokenRemoved(token);\\n    }\\n\\n    /**\\n     * @notice Returns whether a token is a supported burn token\\n     * @param token address of the token contract\\n     * @return bool true if token is a supported burn token\\n     */\\n    function isSupportedBurnToken(address token) public view returns (bool) {\\n        return supportedBurnTokens[token];\\n    }\\n}\"\r\n    },\r\n    \"src/FeeCalculator.sol\": {\r\n      \"content\": \"pragma solidity 0.8.18;\\n\\nimport \\\"./roles/Admin.sol\\\";\\n\\n/**\\n * @title FeeCalculator\\n * @notice Calculates fee for transactions using fee configuration\\n */\\ncontract FeeCalculator is Admin {\\n    /**\\n     * @notice Fee configuration for a domain\\n     * @param maxFee maximum fee in USDC\\n     * @param minFee minimum fee in USDC\\n     * @param feePercentage fee percentage in basis point\\n     * @param txnFee transaction fee in USDC for broadcasting transaction on destination domain\\n     * @param supported if the domain is supported\\n     */\\n    struct FeeConfiguration {\\n        // maximum fee in USDC\\n        uint256 maxFee;\\n        // minimum fee in USDC\\n        uint256 minFee;\\n        // fee percentage in basis point\\n        // e.g. 1% is stored as 100\\n        uint32 feePercentage;\\n        // transaction fee is in USDC\\n        uint256 txnFee;\\n        // if the domain is supported\\n        bool supported;\\n    }\\n\\n    // domain ID -> fee configuration\\n    mapping(uint32 => FeeConfiguration) private _feeConfigurations;\\n\\n    // ============ Events ============\\n    /**\\n     * @notice Emitted when fee configuration is updated\\n     * @param domain domain ID\\n     * @param feeConfiguration fee configuration\\n     */\\n    event FeeConfigurationUpdated(uint32 domain, FeeConfiguration feeConfiguration);\\n\\n    // Errors\\n    error UnsupportedDomain();\\n    error MaxFeeLessThanMinFee();\\n    error FeePercentageGreaterThanMax();\\n\\n    // ============ Functions  ============\\n    /**\\n     * @notice Sets fee configurations for domains\\n     * @param domain domain ID\\n     * @param feeConfiguration fee configuration\\n     */\\n    function setFeeConfiguration(\\n        uint32 domain, \\n        FeeConfiguration calldata feeConfiguration\\n    ) \\n        public \\n        onlyAdmin \\n    {\\n        if (feeConfiguration.maxFee < feeConfiguration.minFee) {\\n            revert MaxFeeLessThanMinFee();\\n        }\\n\\n        if (feeConfiguration.feePercentage > 1000) {\\n            revert FeePercentageGreaterThanMax();\\n        }\\n\\n        _feeConfigurations[domain] = feeConfiguration;\\n\\n        emit FeeConfigurationUpdated(domain, feeConfiguration);\\n    }\\n\\n     /**\\n     * @notice Checks if a domain is supported\\n     * @param domain domain ID\\n     * @return true if the domain is supported\\n     */\\n    function isSupportedDomain(uint32 domain) public view returns (bool) {\\n        return _feeConfigurations[domain].supported;\\n    }\\n\\n    /**\\n     * @notice Sets fee configuration for a domain\\n     * @param domain domain ID\\n     * @return FeeConfiguration fee configuration\\n     */\\n    function getFeeConfiguration(uint32 domain) public view returns (FeeConfiguration memory) {\\n        if (!isSupportedDomain(domain)) {\\n            revert UnsupportedDomain();\\n        }\\n        return _feeConfigurations[domain];\\n    }\\n\\n    /**\\n     * @notice Get max fee for a domain\\n     * @param domain domain ID\\n     * @return uint256 maximum fee in USDC\\n     */\\n    function getMaxFee(uint32 domain) public view returns (uint256) {\\n        if (!isSupportedDomain(domain)) {\\n            revert UnsupportedDomain();\\n        }\\n        return _feeConfigurations[domain].maxFee;\\n    }\\n\\n    /**\\n     * @notice Get min fee for a domain\\n     * @param domain domain ID\\n     * @return uint256 minimum fee in USDC\\n     */\\n    function getMinFee(uint32 domain) public view returns (uint256) {\\n        if (!isSupportedDomain(domain)) {\\n            revert UnsupportedDomain();\\n        }\\n        return _feeConfigurations[domain].minFee;\\n    }\\n\\n    /**\\n     * @notice Get fee percentage for a domain\\n     * @param domain domain ID\\n     * @return uint32 fee percentage in basis point\\n     */\\n    function getFeePercentage(uint32 domain) public view returns (uint32) {\\n        if (!isSupportedDomain(domain)) {\\n            revert UnsupportedDomain();\\n        }\\n        return _feeConfigurations[domain].feePercentage;\\n    }\\n\\n    /**\\n     * @notice Get transaction fee for a domain\\n     * @param domain domain ID\\n     * @return uint256 transaction fee in USDC\\n     */\\n    function getTxnFee(uint32 domain) public view returns (uint256) {\\n        if (!isSupportedDomain(domain)) {\\n            revert UnsupportedDomain();\\n        }\\n        return _feeConfigurations[domain].txnFee;\\n    }\\n\\n    /**\\n     * @notice Calculates fee for a transaction\\n     * @param amount amount of USDC\\n     * @param destinationDomain destination domain ID\\n     * @return uint256 fee in USDC\\n     */\\n    function calculateFee(uint256 amount, uint32 destinationDomain) public view returns (uint256) {\\n        if (!isSupportedDomain(destinationDomain)) {\\n            revert UnsupportedDomain();\\n        }\\n\\n        FeeConfiguration memory config = _feeConfigurations[destinationDomain];\\n\\n        // percentage of the amount\\n        uint256 pctFee = amount * config.feePercentage;\\n\\n        // round up if necessary\\n        pctFee = pctFee / 10_000 + (pctFee % 10_000 > 0 ? 1 : 0);\\n\\n        uint256 maxFee = config.maxFee + config.txnFee;\\n        uint256 minFee = config.minFee + config.txnFee;\\n\\n        // check if the percentage fee is within the range of maxFee and minFee\\n        if (pctFee < minFee) {\\n            return minFee;\\n        } else if (pctFee > maxFee) {\\n            return maxFee;\\n        }\\n\\n        return pctFee;\\n    }\\n}\\n\"\r\n    },\r\n    \"src/FeeOperator.sol\": {\r\n      \"content\": \"pragma solidity 0.8.18;\\n\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"./roles/Admin.sol\\\";\\n\\n/**\\n * @title FeeOperator\\n * @notice Fee collectors collects fees from contract\\n */\\nabstract contract FeeOperator is Admin, ReentrancyGuard {\\n    using SafeERC20 for IERC20;\\n\\n    // Mapping of fee collector to whether it is a fee collector\\n    mapping(address => bool) private _feeCollectors;\\n\\n    // ============ Events ============\\n    /**\\n     * @notice Emitted when a fee collector is added\\n     * @param feeCollector address of the fee collector\\n     */\\n    event FeeCollectorAdded(address feeCollector);\\n    /**\\n     * @notice Emitted when a fee collector is removed\\n     * @param feeCollector address of the fee collector\\n     */\\n    event FeeCollectorRemoved(address feeCollector);\\n\\n    // Errors\\n    error NotFeeCollector();\\n    error InvalidFeeCollector();\\n    error AlreadyFeeCollector();\\n\\n    // ============ Modifiers ============\\n    /**\\n     * @dev Throws if called by any account other than the fee collector\\n     */\\n    modifier onlyFeeCollector() {\\n        if (!isFeeCollector(msg.sender)) {\\n            revert NotFeeCollector();\\n        }\\n        _;\\n    }\\n\\n    // ============ Constructor ============\\n    /**\\n     * @notice Initializes the contract\\n     * set the deployer as the first fee collector\\n     */\\n    constructor() {\\n        _feeCollectors[msg.sender] = true;\\n    }\\n\\n    // ============ External Functions ============\\n    /**\\n     * @notice Collects fees from contract\\n     * @param token token address\\n     * @return bool true if success\\n     */\\n    function collectFees(address token) external nonReentrant onlyFeeCollector returns (bool) {\\n        uint256 balance = IERC20(token).balanceOf(address(this));\\n        IERC20(token).safeTransfer(msg.sender, balance);\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Adds a fee collector\\n     * @param feeCollector address of the fee collector\\n     */\\n    function addFeeCollector(address feeCollector) external onlyAdmin {\\n        if (feeCollector == address(0)) {\\n            revert InvalidFeeCollector();\\n        }\\n        if (isFeeCollector(feeCollector)) {\\n            revert AlreadyFeeCollector();\\n        }\\n        _feeCollectors[feeCollector] = true;\\n        emit FeeCollectorAdded(feeCollector);\\n    }\\n\\n    /**\\n     * @notice Removes a fee collector\\n     * @param feeCollector address of the fee collector\\n     */\\n    function removeFeeCollector(address feeCollector) external onlyAdmin {\\n        if (!isFeeCollector(feeCollector)) {\\n            revert NotFeeCollector();\\n        }\\n        _feeCollectors[feeCollector] = false;\\n        emit FeeCollectorRemoved(feeCollector);\\n    }\\n\\n     /**\\n     * @notice Returns the fee amount of each token\\n     * @param token token address\\n     * @return uint256 token balance\\n     */\\n    function getFeeAmounts(address token) external view returns (uint256) {\\n        return IERC20(token).balanceOf(address(this));\\n    }\\n\\n    /**\\n     * @notice Returns whether an account is a fee collector\\n     * @param account address of the account\\n     * @return bool true if account is a fee collector\\n     */\\n    function isFeeCollector(address account) public view returns (bool) {\\n        return _feeCollectors[account];\\n    }\\n}\"\r\n    },\r\n    \"src/SafeERC20TransferFrom.sol\": {\r\n      \"content\": \"pragma solidity 0.8.18;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\n/**\\n * @dev Provides a wrapper used for calling an ERC20 transferFrom method\\n * to receive tokens to a contract from msg.sender.\\n *\\n * Checks the balance of the recipient before and after the call to transferFrom, and\\n * returns balance increase. Designed for safely handling ERC20 \\\"fee on transfer\\\" and \\\"burn on transfer\\\" implementations.\\n *\\n * Note: A reentrancy guard must always be used when calling token.safeTransferFrom in order to\\n * prevent against possible \\\"before-after\\\" pattern vulnerabilities.\\n */\\nlibrary SafeERC20TransferFrom {\\n    using SafeERC20 for IERC20;\\n\\n    error BalanceNotIncreased();\\n\\n    function safeTransferFrom(\\n        IERC20 erc20,\\n        uint256 amount\\n    ) internal returns (uint256) {\\n        uint256 balanceBefore = erc20.balanceOf(address(this));\\n        erc20.safeTransferFrom(msg.sender, address(this), amount);\\n        uint256 balanceAfter = erc20.balanceOf(address(this));\\n\\n        if (balanceAfter <= balanceBefore) {\\n            revert BalanceNotIncreased();\\n        }\\n\\n        return balanceAfter - balanceBefore;\\n    }\\n}\"\r\n    },\r\n    \"src/interfaces/ICircleTokenMessenger.sol\": {\r\n      \"content\": \"pragma solidity 0.8.18;\\n\\n// This is from Circle's TokenMessenger contract\\n// https://github.com/circlefin/evm-cctp-contracts/blob/master/src/TokenMessenger.sol\\ninterface ICircleTokenMessenger {\\n    /**\\n    * @notice Deposits and burns tokens from sender to be minted on destination domain.\\n    * Emits a `DepositForBurn` event.\\n    * @dev reverts if:\\n    * - given burnToken is not supported\\n    * - given destinationDomain has no CircleBridge registered\\n    * - transferFrom() reverts. For example, if sender's burnToken balance or approved allowance\\n    * to this contract is less than `amount`.\\n    * - burn() reverts. For example, if `amount` is 0.\\n    * - MessageTransmitter returns false or reverts.\\n    * @param amount amount of tokens to burn\\n    * @param destinationDomain destination domain (ETH = 0, AVAX = 1)\\n    * @param mintRecipient address of mint recipient on destination domain\\n    * @param burnToken address of contract to burn deposited tokens, on local domain\\n    * @return nonce unique nonce reserved by message\\n    */\\n    function depositForBurn(\\n        uint256 amount,\\n        uint32 destinationDomain,\\n        bytes32 mintRecipient,\\n        address burnToken\\n    ) external returns (uint64 nonce);\\n}\"\r\n    },\r\n    \"src/roles/Admin.sol\": {\r\n      \"content\": \"pragma solidity 0.8.18;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\n/**\\n * @title Admin\\n * @notice Allows contract owner to add/remove admins\\n */\\ncontract Admin is Ownable {\\n    // Mapping of admin to whether it is an admin\\n    mapping(address => bool) private _admins;\\n    // Number of admins\\n    uint32 private _adminCount;\\n\\n    // ============ Events ============\\n    /**\\n     * @notice Emitted when an admin is added\\n     * @param admin address of the admin\\n     */\\n    event AdminAdded(address admin);\\n    /**\\n     * @notice Emitted when an admin is removed\\n     * @param admin address of the admin\\n     */\\n    event AdminRemoved(address admin);\\n\\n    // Errors\\n    error NotAdmin();\\n    error InvalidAdminAddress();\\n    error AlreadyAdmin();\\n    error CannotRemoveLastAdmin();\\n\\n    // ============ Modifiers ============\\n    /**\\n     * @dev Throws if called by any account other than the admin\\n     */\\n    modifier onlyAdmin() {\\n        if (!isAdmin(msg.sender)) {\\n            revert NotAdmin();\\n        }\\n        _;\\n    }\\n\\n    // ============ Constructor ============\\n    /**\\n     * @notice Initializes the contract\\n     * set the deployer as the first admin\\n     */\\n    constructor() {\\n        addAdmin(msg.sender);\\n    }\\n\\n    // ============ Functions ============\\n    /**\\n     * @notice Adds an admin\\n     */\\n    function addAdmin(address account) public onlyOwner {\\n        if (account == address(0)) {\\n            revert InvalidAdminAddress();\\n        }\\n        if (isAdmin(account)) {\\n            revert AlreadyAdmin();\\n        }\\n        _admins[account] = true;\\n        _adminCount += 1;\\n        emit AdminAdded(account);\\n    }\\n\\n    /**\\n     * @notice Removes an admin when there is more than one admin\\n     */\\n    function removeAdmin(address account) public onlyOwner {\\n        if (_adminCount == 1) {\\n            revert CannotRemoveLastAdmin();\\n        }\\n\\n        if (!isAdmin(account)) {\\n            revert NotAdmin();\\n        }\\n\\n        _admins[account] = false;\\n        _adminCount -= 1;\\n        emit AdminRemoved(account);\\n    }\\n\\n    /**\\n     * @notice Returns whether an account is an admin\\n     * @param account address of the account\\n     * @return bool true if account is an admin\\n     */\\n    function isAdmin(address account) public view returns (bool) {\\n        return _admins[account];\\n    }\\n} \"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [\r\n      \"@memview-sol/=lib/memview-sol/\",\r\n      \"@openzeppelin/=lib/openzeppelin-contracts/\",\r\n      \"ds-test/=lib/ds-test/src/\",\r\n      \"erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/\",\r\n      \"forge-std/=lib/forge-std/src/\",\r\n      \"memview-sol/=lib/memview-sol/contracts/\",\r\n      \"openzeppelin-contracts/=lib/openzeppelin-contracts/\",\r\n      \"openzeppelin/=lib/openzeppelin-contracts/contracts/\"\r\n    ],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"appendCBOR\": true\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"paris\",\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"circleTokenMessenger_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"burnToken_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AlreadyAdmin\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AlreadyFeeCollector\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AlreadySupportedBurnToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AmountLessThanFee\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BalanceNotIncreased\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CannotRemoveLastAdmin\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FeePercentageGreaterThanMax\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidAdminAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidFeeCollector\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidMintRecipientAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidTokenAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidTokenMessengerAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MaxFeeLessThanMinFee\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotAdmin\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotFeeCollector\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UnSupportedBurnToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UnsupportedDomain\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"AdminAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"AdminRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"BurnTokenAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"BurnTokenRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"feeCollector\",\"type\":\"address\"}],\"name\":\"FeeCollectorAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"feeCollector\",\"type\":\"address\"}],\"name\":\"FeeCollectorRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"domain\",\"type\":\"uint32\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"maxFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minFee\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"feePercentage\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"txnFee\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"supported\",\"type\":\"bool\"}],\"indexed\":false,\"internalType\":\"struct FeeCalculator.FeeConfiguration\",\"name\":\"feeConfiguration\",\"type\":\"tuple\"}],\"name\":\"FeeConfigurationUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"burnToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"depositor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"mintRecipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"destinationDomain\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalFee\",\"type\":\"uint256\"}],\"name\":\"TransferTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeCollector\",\"type\":\"address\"}],\"name\":\"addFeeCollector\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"addSupportedBurnToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"destinationDomain\",\"type\":\"uint32\"}],\"name\":\"calculateFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"circleTokenMessenger\",\"outputs\":[{\"internalType\":\"contract ICircleTokenMessenger\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"circleTokenMessengerAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"collectFees\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getFeeAmounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"domain\",\"type\":\"uint32\"}],\"name\":\"getFeeConfiguration\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"maxFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minFee\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"feePercentage\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"txnFee\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"supported\",\"type\":\"bool\"}],\"internalType\":\"struct FeeCalculator.FeeConfiguration\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"domain\",\"type\":\"uint32\"}],\"name\":\"getFeePercentage\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"domain\",\"type\":\"uint32\"}],\"name\":\"getMaxFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"domain\",\"type\":\"uint32\"}],\"name\":\"getMinFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"domain\",\"type\":\"uint32\"}],\"name\":\"getTxnFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isFeeCollector\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"isSupportedBurnToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"domain\",\"type\":\"uint32\"}],\"name\":\"isSupportedDomain\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removeAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeCollector\",\"type\":\"address\"}],\"name\":\"removeFeeCollector\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"removeSupportedBurnToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"domain\",\"type\":\"uint32\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"maxFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minFee\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"feePercentage\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"txnFee\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"supported\",\"type\":\"bool\"}],\"internalType\":\"struct FeeCalculator.FeeConfiguration\",\"name\":\"feeConfiguration\",\"type\":\"tuple\"}],\"name\":\"setFeeConfiguration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"supportedBurnTokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"destinationDomain\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"mintRecipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"burnToken\",\"type\":\"address\"}],\"name\":\"transferTokens\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "TokenRouter", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000bd3fa81b58ba92a82136038b25adec7066af3155000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb48", "EVMVersion": "paris", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}