{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/interfaces/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../utils/introspection/IERC165.sol\\\";\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Muldiv operation overflow.\\n     */\\n    error MathOverflowedMulDiv();\\n\\n    enum Rounding {\\n        Floor, // Toward negative infinity\\n        Ceil, // Toward positive infinity\\n        Trunc, // Toward zero\\n        Expand // Away from zero\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\n     * of rounding towards zero.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) {\\n            // Guarantee the same behavior as in a regular Solidity division.\\n            return a / b;\\n        }\\n\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\n     * denominator == 0.\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\n     * Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            if (denominator <= prod1) {\\n                revert MathOverflowedMulDiv();\\n            }\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\\n\\n            uint256 twos = denominator & (0 - denominator);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\\n            // works in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\n     * towards zero.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\n     */\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\n        return uint8(rounding) % 2 == 1;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/SignedMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Math} from \\\"./math/Math.sol\\\";\\nimport {SignedMath} from \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant HEX_DIGITS = \\\"0123456789abcdef\\\";\\n    uint8 private constant ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev The `value` string doesn't fit in the specified `length`.\\n     */\\n    error StringsInsufficientHexLength(uint256 value, uint256 length);\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), HEX_DIGITS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toStringSigned(int256 value) internal pure returns (string memory) {\\n        return string.concat(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value)));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        uint256 localValue = value;\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = HEX_DIGITS[localValue & 0xf];\\n            localValue >>= 4;\\n        }\\n        if (localValue != 0) {\\n            revert StringsInsufficientHexLength(value, length);\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal\\n     * representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return bytes(a).length == bytes(b).length && keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/diamond/IDiamondFacet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GNU General Public License v3.0\\n\\npragma solidity 0.8.20;\\n\\nimport \\\"@openzeppelin/contracts/interfaces/IERC165.sol\\\";\\n\\n/// @notice Use at your own risk\\ninterface IDiamondFacet is IERC165 {\\n\\n    // NOTE: The override MUST remain 'pure'.\\n    function getFacetName() external pure returns (string memory);\\n\\n    // NOTE: The override MUST remain 'pure'.\\n    function getFacetVersion() external pure returns (string memory);\\n\\n    // NOTE: The override MUST remain 'pure'.\\n    function getFacetPI() external pure returns (string[] memory);\\n\\n    // NOTE: The override MUST remain 'pure'.\\n    function getFacetProtectedPI() external pure returns (string[] memory);\\n}\\n\"\r\n    },\r\n    \"contracts/facets/_korridor/access-point-v3/AccessPointV3Facet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GNU General Public License v3.0\\n\\npragma solidity 0.8.20;\\n\\nimport \\\"../../../diamond/IDiamondFacet.sol\\\";\\nimport \\\"../../hasher/HasherLib.sol\\\";\\nimport \\\"../IKorridorAccessPointV3.sol\\\";\\nimport \\\"./AccessPointV3Internal.sol\\\";\\n\\n/// @notice Use at your own risk\\ncontract AccessPointV3Facet is\\n  IDiamondFacet,\\n  IKorridorAccessPointV3 {\\n\\n    modifier reentrancyProtected {\\n        require(!AccessPointV3Internal._getReentrancyLock(), \\\"AP3F:REELCK\\\");\\n        AccessPointV3Internal._reentrancyLock();\\n        _;\\n        AccessPointV3Internal._reentrancyUnlock();\\n    }\\n\\n    function getFacetName()\\n      external pure override returns (string memory) {\\n        return \\\"access-point-v3\\\";\\n    }\\n\\n    // CAUTION: Don't forget to update the version when adding new functionality\\n    function getFacetVersion()\\n      external pure override returns (string memory) {\\n        return \\\"1.1.0\\\";\\n    }\\n\\n    function getFacetPI()\\n      external pure override returns (string[] memory) {\\n        string[] memory pi = new string[](10);\\n        pi[ 0] = \\\"initializeAccessPoint(uint256,address)\\\";\\n        pi[ 1] = \\\"getAccessPointSettings()\\\";\\n        pi[ 2] = \\\"setAccessPointSettings(uint256,address)\\\";\\n        pi[ 3] = \\\"getNrOfSends()\\\";\\n        pi[ 4] = \\\"getSendBlockNumber(uint256)\\\";\\n        pi[ 5] = \\\"submitSend((address,uint256,address,uint256,uint256,string,address,string,uint256,address,string,bytes))\\\";\\n        pi[ 6] = \\\"getNrOfDeliveries()\\\";\\n        pi[ 7] = \\\"getDeliveryBlockNumber(uint256)\\\";\\n        pi[ 8] = \\\"getDeliveryIdBySendHash(bytes32)\\\";\\n        pi[ 9] = \\\"completeDelivery((string,address,string,uint256,bytes32,uint256,address,uint256,uint256,address,uint256,address,bytes))\\\";\\n        return pi;\\n    }\\n\\n    function getFacetProtectedPI()\\n      external pure override returns (string[] memory) {\\n        string[] memory pi = new string[](3);\\n        pi[ 0] = \\\"initializeAccessPoint(uint256,address)\\\";\\n        pi[ 1] = \\\"setAccessPointSettings(uint256,address)\\\";\\n        pi[ 2] = \\\"completeDelivery((string,address,string,uint256,bytes32,uint256,address,uint256,uint256,address,uint256,address,bytes))\\\";\\n        return pi;\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId)\\n      external pure override returns (bool) {\\n        return\\n            interfaceId == type(IDiamondFacet).interfaceId ||\\n            interfaceId == type(IKorridorAccessPointV3).interfaceId;\\n    }\\n\\n    function initializeAccessPoint(\\n        uint256 sendFixedFeeWei,\\n        address feeCollector\\n    ) external {\\n        AccessPointV3Internal._initializeAccessPoint(\\n            sendFixedFeeWei, feeCollector);\\n    }\\n\\n    function getAccessPointSettings() external view returns (\\n        bool initialized,\\n        uint256 sendFixedFeeWei,\\n        address feeCollector\\n    ) {\\n        return AccessPointV3Internal._getAccessPointSettings();\\n    }\\n\\n    function setAccessPointSettings (\\n        uint256 sendFixedFeeWei,\\n        address feeCollector\\n    ) external {\\n        AccessPointV3Internal._setAccessPointSettings(\\n            sendFixedFeeWei, feeCollector);\\n    }\\n\\n    function getNrOfSends() external view returns (uint256) {\\n        return AccessPointV3Internal._getNrOfSends();\\n    }\\n\\n    function getSendBlockNumber(uint256 sendId)\\n    external view returns (uint256) {\\n        return AccessPointV3Internal._getSendBlockNumber(sendId);\\n    }\\n\\n    function submitSend(\\n        IKorridorAccessPointV3.SendParams memory send\\n    ) external payable reentrancyProtected returns (uint256 sendId, bytes32 sendHash) {\\n        return AccessPointV3Internal._submitSend(send);\\n    }\\n\\n    function getNrOfDeliveries() external view returns (uint256) {\\n        return AccessPointV3Internal._getNrOfDeliveries();\\n    }\\n\\n    function getDeliveryBlockNumber(uint256 deliveryId)\\n    external view returns (uint256) {\\n        return AccessPointV3Internal._getDeliveryBlockNumber(deliveryId);\\n    }\\n\\n    function getDeliveryIdBySendHash(bytes32 sendHash)\\n    external view returns (uint256) {\\n        return AccessPointV3Internal._getDeliveryIdBySendHash(sendHash);\\n    }\\n\\n    function completeDelivery(\\n        IKorridorAccessPointV3.DeliveryParams memory delivery\\n    ) external returns (uint256 deliveryId) {\\n        return AccessPointV3Internal._completeDelivery(delivery);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/facets/_korridor/access-point-v3/AccessPointV3Internal.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GNU General Public License v3.0\\n\\npragma solidity 0.8.20;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"../../hasher/HasherLib.sol\\\";\\nimport \\\"./AccessPointV3Storage.sol\\\";\\n\\n/// @notice Use at your own risk\\nlibrary AccessPointV3Internal {\\n\\n    event NewSend(uint256 indexed sendId, bytes32 indexed sendHash);\\n    event AbortSend(uint256 indexed sendId);\\n    event NewDelivery(uint256 indexed deliveryId);\\n\\n    function _initializeAccessPoint(\\n        uint256 sendFixedFeeWei,\\n        address feeCollector\\n    ) internal {\\n        require(!__v3().initialized, \\\"AP3I:AI\\\");\\n        __v3().sendFixedFeeWei = sendFixedFeeWei;\\n        __v3().feeCollector = feeCollector;\\n        __v3().chainIdStr = Strings.toString(block.chainid);\\n        __v3().initialized = true;\\n    }\\n\\n    function _getReentrancyLock() internal view returns (bool) {\\n        return __v3().reentrancyLock;\\n    }\\n\\n    function _reentrancyLock() internal {\\n        __v3().reentrancyLock = true;\\n    }\\n\\n    function _reentrancyUnlock() internal {\\n        __v3().reentrancyLock = false;\\n    }\\n\\n    function _getAccessPointSettings() internal view returns (\\n        bool initialized,\\n        uint256 sendFixedFeeWei,\\n        address feeCollector\\n    ) {\\n        initialized = __v3().initialized;\\n        sendFixedFeeWei = __v3().sendFixedFeeWei;\\n        feeCollector = __v3().feeCollector;\\n    }\\n\\n    function _setAccessPointSettings (\\n        uint256 sendFixedFeeWei,\\n        address feeCollector\\n    ) internal {\\n        require(__v3().initialized, \\\"AP3I:NI\\\");\\n        __v3().sendFixedFeeWei = sendFixedFeeWei;\\n        __v3().feeCollector = feeCollector;\\n    }\\n\\n    //=======================================================================\\n    //                                SENDS\\n    //=======================================================================\\n\\n    function _getNrOfSends() internal view returns (uint256) {\\n        return __v3().sendIdCounter;\\n    }\\n\\n    function _getSendBlockNumber(uint256 sendId)\\n    internal view returns (uint256) {\\n        require(sendId > 0 && sendId <= __v3().sendIdCounter, \\\"AP3I:SNF\\\");\\n        return __v3().sendIdToBlockNumberMap[sendId];\\n    }\\n\\n    function _submitSend(\\n        IKorridorAccessPointV3.SendParams memory send\\n    ) internal returns (uint256 sendId, bytes32 sendHash) {\\n        require(__v3().initialized, \\\"AP3I:NI\\\");\\n        require(!__v3().paused, \\\"AP3I:PAUS\\\");\\n\\n        // collect fee\\n        {\\n            require(msg.value >= __v3().sendFixedFeeWei, \\\"AP3I:FEE\\\");\\n            (bool success, ) =\\n                __v3().feeCollector.call{value: __v3().sendFixedFeeWei}(new bytes(0));\\n            require(success, \\\"AP3I:TF\\\");\\n            uint256 remainder = msg.value - __v3().sendFixedFeeWei;\\n            if (remainder > 0) {\\n                (bool success2, ) =\\n                    msg.sender.call{value: remainder}(new bytes(0));\\n                require(success2, \\\"AP3I:TF2\\\");\\n            }\\n        }\\n\\n        require(send.srcTokenType == KorridorV3Constants.TOKEN_TYPE__ERC20, \\\"AP3I:NSUPPTOK\\\");\\n        require(send.srcToken != address(0), \\\"AP3I:ZTOK\\\");\\n        // TODO(kam): for now, we only support ERC20 transfers\\n        require(send.srcTokenId == 0, \\\"AP3I:NZTOKID\\\");\\n        require(send.srcAmount > 0, \\\"AP3I:ZAM\\\");\\n\\n        // TODO(kam): for now, we don't support delivering directly to a destination trezor\\n        require(send.dstTrezorEth == address(0), \\\"AP3I:TREZNSUPP\\\");\\n        require(bytes(send.dstTrezorNonEth).length == 0, \\\"AP3I:TREZNSUPP2\\\");\\n        require(send.dstTrezorLedgerId == 0, \\\"AP3I:TREZNSUPP3\\\");\\n\\n        require(send.dstEth != address(0) || bytes(send.dstNonEth).length > 0, \\\"AP3I:ZDST\\\");\\n\\n        sendId = __v3().sendIdCounter + 1;\\n        __v3().sendIdCounter += 1;\\n\\n        __v3().sendIdToBlockNumberMap[sendId] = block.number;\\n\\n        // move tokens to access point\\n        if (send.srcTokenType == KorridorV3Constants.TOKEN_TYPE__ERC20) {\\n            uint256 oldBalance = IERC20(send.srcToken).balanceOf(address(this));\\n            require(send.srcAmount <=\\n                    IERC20(send.srcToken).balanceOf(send.src), \\\"AP3I:NEBAL\\\");\\n            require(send.srcAmount <=\\n                    IERC20(send.srcToken).allowance(send.src, address(this)), \\\"AP3I:NEALW\\\");\\n            bool success = IERC20(send.srcToken).transferFrom(\\n                send.src, address(this), send.srcAmount);\\n            require(success, \\\"AP3I:TF\\\");\\n            uint256 newBalance = IERC20(send.srcToken).balanceOf(address(this));\\n            require((oldBalance + send.srcAmount) == newBalance, \\\"AP3I:IB\\\");\\n        } else {\\n            revert(\\\"AP3I:NSUPPTOK2\\\");\\n        }\\n\\n        sendHash = __calculateSendHash(\\n            __v3().chainIdStr, address(this), \\\"\\\", sendId, send.dstChainId);\\n        emit NewSend(sendId, sendHash);\\n    }\\n\\n    function _getNrOfDeliveries() internal view returns (uint256) {\\n        return __v3().deliveryIdCounter;\\n    }\\n\\n    function _getDeliveryBlockNumber(uint256 deliveryId)\\n    internal view returns (uint256) {\\n        require(deliveryId > 0 && deliveryId <= __v3().deliveryIdCounter, \\\"AP3I:DNF\\\");\\n        return __v3().deliveryIdToBlockNumberMap[deliveryId];\\n    }\\n\\n    function _getDeliveryIdBySendHash(bytes32 sendHash)\\n    internal view returns (uint256 deliveryId) {\\n        return __v3().sendHashToDeliveryIdMap[sendHash];\\n    }\\n\\n    function _completeDelivery(\\n        IKorridorAccessPointV3.DeliveryParams memory delivery\\n    ) internal returns (uint256 deliveryId) {\\n        require(__v3().initialized, \\\"AP3I:NI\\\");\\n\\n        require(delivery.srcAccessPointEth != address(0) ||\\n                bytes(delivery.srcAccessPointNonEth).length > 0, \\\"AP3I:ZSAP\\\");\\n        require(delivery.sendId > 0, \\\"AP3I:ZSID\\\");\\n\\n        bytes32 calculatedSendHash = __calculateSendHash(\\n            delivery.srcChainId,\\n            delivery.srcAccessPointEth,\\n            delivery.srcAccessPointNonEth,\\n            delivery.sendId,\\n            __v3().chainIdStr\\n        );\\n        require(delivery.sendHash == calculatedSendHash, \\\"AP3I:INVH\\\");\\n        require(__v3().sendHashToDeliveryIdMap[delivery.sendHash] == 0, \\\"AP3I:APRCD\\\");\\n\\n        require(delivery.dstTokenType == KorridorV3Constants.TOKEN_TYPE__ERC20, \\\"AP3I:NSUPPTOK\\\");\\n        require(delivery.dstToken != address(0), \\\"AP3I:ZTOK\\\");\\n        // TODO(kam): for now, we only support ERC20 transfers\\n        require(delivery.dstTokenId == 0, \\\"AP3I:NZTOKID\\\");\\n        require(delivery.dstAmount > 0, \\\"AP3I:ZAM\\\");\\n\\n        // TODO(kam): for now, we don't support delivering directly to a destination trezor\\n        require(delivery.dstTrezor == address(0), \\\"AP3I:TREZNSUPP\\\");\\n        require(delivery.dstTrezorLedgerId == 0, \\\"AP3I:TREZNSUPP2\\\");\\n        require(delivery.dst != address(0), \\\"AP3I:ZDST\\\");\\n\\n        deliveryId = __v3().deliveryIdCounter + 1;\\n        __v3().deliveryIdCounter += 1;\\n\\n        __v3().deliveryIdToBlockNumberMap[deliveryId] = block.number;\\n\\n        // deliver the tokens\\n        if (delivery.dstTokenType == KorridorV3Constants.TOKEN_TYPE__ERC20) {\\n            uint256 oldBalance = IERC20(delivery.dstToken).balanceOf(address(this));\\n            require(delivery.dstAmount <=\\n                    IERC20(delivery.dstToken).balanceOf(address(this)), \\\"AP3I:NEBAL\\\");\\n            bool success = IERC20(delivery.dstToken).transfer(delivery.dst, delivery.dstAmount);\\n            require(success, \\\"AP3I:TF\\\");\\n            uint256 newBalance = IERC20(delivery.dstToken).balanceOf(address(this));\\n            require((oldBalance - delivery.dstAmount) == newBalance, \\\"AP3I:IB\\\");\\n        } else {\\n            revert(\\\"AP3I:NSUPPTOK2\\\");\\n        }\\n\\n        __v3().sendHashToDeliveryIdMap[delivery.sendHash] = deliveryId;\\n        emit NewDelivery(deliveryId);\\n    }\\n\\n    function __calculateSendHash(\\n        string memory srcChainId,\\n        address srcAccessPointEth,\\n        string memory srcAccessPointNonEth,\\n        uint256 sendId,\\n        string memory destinationChainId\\n    ) private pure returns (bytes32) {\\n        return keccak256(\\n            abi.encodePacked(\\n                srcChainId,\\n                srcAccessPointEth,\\n                srcAccessPointNonEth,\\n                sendId,\\n                destinationChainId\\n            )\\n        );\\n    }\\n\\n    function __v3() private pure returns (AccessPointV3Storage.V3 storage) {\\n        return AccessPointV3Storage.v3();\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/facets/_korridor/access-point-v3/AccessPointV3Storage.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GNU General Public License v3.0\\n\\npragma solidity 0.8.20;\\n\\nimport \\\"../IKorridorAccessPointV3.sol\\\";\\n\\n/// @notice Use at your own risk. Just got the basic\\n///         idea from: https://github.com/solidstate-network/solidstate-solidity\\nlibrary AccessPointV3Storage {\\n\\n    struct V3 {\\n        bool initialized;\\n        bool paused;\\n        string chainIdStr;\\n        bool reentrancyLock;\\n\\n        uint256 sendIdCounter;\\n        mapping(uint256 => uint256) sendIdToBlockNumberMap;\\n\\n        uint256 deliveryIdCounter;\\n        mapping(uint256 => uint256) deliveryIdToBlockNumberMap;\\n\\n        mapping(bytes32 => uint256) sendHashToDeliveryIdMap;\\n\\n        uint256 sendFixedFeeWei;\\n        address feeCollector;\\n\\n        // reserved for future usage\\n        mapping(bytes32 => bytes) extra;\\n    }\\n\\n    bytes32 internal constant STORAGE_SLOT_V3 =\\n        keccak256(\\\"qomet-tech.contracts.facets.korridor.access-point.v3.storage\\\");\\n\\n    function v3() internal pure returns (V3 storage s) {\\n        bytes32 slot = STORAGE_SLOT_V3;\\n        /* solhint-disable no-inline-assembly */\\n        assembly {\\n            s.slot := slot\\n        }\\n        /* solhint-enable no-inline-assembly */\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/facets/_korridor/IKorridorAccessPointV3.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GNU General Public License v3.0\\n\\npragma solidity 0.8.20;\\n\\nlibrary KorridorV3Constants {\\n    uint256 public constant TOKEN_TYPE__UNKNOWN = 0;\\n    uint256 public constant TOKEN_TYPE__ERC20   = 20;\\n    uint256 public constant TOKEN_TYPE__ERC721  = 721;\\n    uint256 public constant TOKEN_TYPE__ERC1155 = 1155;\\n}\\n\\n/// @notice Use at your own risk\\ninterface IKorridorAccessPointV3 {\\n\\n    struct SendParams {\\n        // Sender info\\n        address src;\\n\\n        // Source token info\\n        uint256 srcTokenType;\\n        address srcToken;\\n        uint256 srcTokenId;\\n        uint256 srcAmount;\\n\\n        // Destination info\\n        string  dstChainId;\\n        address dstTrezorEth;\\n        string  dstTrezorNonEth;\\n        uint256 dstTrezorLedgerId;\\n        address dstEth;\\n        string  dstNonEth;\\n\\n        // Extra info such as remarks or references\\n        bytes   data;\\n    }\\n    function submitSend(\\n        SendParams memory send\\n    ) external payable returns (uint256 sendId, bytes32 sendHash);\\n\\n    struct DeliveryParams {\\n        // Source chain and access-point info\\n        string  srcChainId;\\n        address srcAccessPointEth;\\n        string  srcAccessPointNonEth;\\n\\n        // Send info\\n        uint256 sendId;\\n        bytes32 sendHash;\\n\\n        // Token delivery info\\n        uint256 dstTokenType;\\n        address dstToken;\\n        uint256 dstTokenId;\\n        uint256 dstAmount;\\n\\n        // Destination info\\n        address dstTrezor;\\n        uint256 dstTrezorLedgerId;\\n        address dst;\\n\\n        // Extra info such as remarks or references\\n        bytes data;\\n    }\\n    function completeDelivery(\\n        DeliveryParams memory delivery\\n    ) external returns (uint256 deliveryId);\\n}\\n\"\r\n    },\r\n    \"contracts/facets/hasher/HasherLib.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GNU General Public License v3.0\\n\\npragma solidity 0.8.20;\\n\\n/// @notice Use at your own risk\\nlibrary HasherLib {\\n\\n    function _hashBytes(bytes memory data) internal pure returns (bytes32) {\\n        return keccak256(data);\\n    }\\n\\n    function _hashAddress(address addr) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(addr));\\n    }\\n\\n    function _hashStr(string memory str) internal pure returns (bytes32) {\\n        return keccak256(bytes(str));\\n    }\\n\\n    function _hashInt(uint256 num) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"INT\\\", num));\\n    }\\n\\n    function _hashAccount(address account) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"ACCOUNT\\\", account));\\n    }\\n\\n    function _hashVault(address vault) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"VAULT\\\", vault));\\n    }\\n\\n    function _hashReserveId(uint256 reserveId) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"RESERVEID\\\", reserveId));\\n    }\\n\\n    function _hashContract(address contractAddr) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"CONTRACT\\\", contractAddr));\\n    }\\n\\n    function _hashTokenId(uint256 tokenId) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"TOKENID\\\", tokenId));\\n    }\\n\\n    function _hashRole(string memory roleName) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"ROLE\\\", roleName));\\n    }\\n\\n    function _hashLedgerId(uint256 ledgerId) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"LEDGERID\\\", ledgerId));\\n    }\\n\\n    function _mixHash2(\\n        bytes32 d1,\\n        bytes32 d2\\n    ) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"MIX2_\\\", d1, d2));\\n    }\\n\\n    function _mixHash3(\\n        bytes32 d1,\\n        bytes32 d2,\\n        bytes32 d3\\n    ) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"MIX3_\\\", d1, d2, d3));\\n    }\\n\\n    function _mixHash4(\\n        bytes32 d1,\\n        bytes32 d2,\\n        bytes32 d3,\\n        bytes32 d4\\n    ) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"MIX4_\\\", d1, d2, d3, d4));\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"paris\",\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"deliveryId\",\"type\":\"uint256\"}],\"name\":\"NewDelivery\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"sendId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"sendHash\",\"type\":\"bytes32\"}],\"name\":\"NewSend\",\"type\":\"event\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"srcChainId\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"srcAccessPointEth\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"srcAccessPointNonEth\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"sendId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"sendHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"dstTokenType\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"dstToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"dstTokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dstAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"dstTrezor\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"dstTrezorLedgerId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct IKorridorAccessPointV3.DeliveryParams\",\"name\":\"delivery\",\"type\":\"tuple\"}],\"name\":\"completeDelivery\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"deliveryId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAccessPointSettings\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"initialized\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"sendFixedFeeWei\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"feeCollector\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"deliveryId\",\"type\":\"uint256\"}],\"name\":\"getDeliveryBlockNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"sendHash\",\"type\":\"bytes32\"}],\"name\":\"getDeliveryIdBySendHash\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFacetName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFacetPI\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFacetProtectedPI\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFacetVersion\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNrOfDeliveries\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNrOfSends\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"sendId\",\"type\":\"uint256\"}],\"name\":\"getSendBlockNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"sendFixedFeeWei\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"feeCollector\",\"type\":\"address\"}],\"name\":\"initializeAccessPoint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"sendFixedFeeWei\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"feeCollector\",\"type\":\"address\"}],\"name\":\"setAccessPointSettings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"src\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"srcTokenType\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"srcToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"srcTokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"srcAmount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"dstChainId\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"dstTrezorEth\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"dstTrezorNonEth\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"dstTrezorLedgerId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"dstEth\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"dstNonEth\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct IKorridorAccessPointV3.SendParams\",\"name\":\"send\",\"type\":\"tuple\"}],\"name\":\"submitSend\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"sendId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"sendHash\",\"type\":\"bytes32\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}]", "ContractName": "AccessPointV3Facet", "CompilerVersion": "v0.8.20+commit.a1b79de6", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "paris", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}