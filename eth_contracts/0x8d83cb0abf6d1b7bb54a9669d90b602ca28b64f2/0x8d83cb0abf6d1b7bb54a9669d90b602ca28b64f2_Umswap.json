{"SourceCode": "/**\r\n *Submitted for verification at Etherscan.io on 2022-08-15\r\n*/\r\n\r\npragma solidity ^0.8.0;\r\n\r\n// ----------------------------------------------------------------------------\r\n// Umswap v0.9.0 testing\r\n//\r\n// https://github.com/bokkypoobah/Umswap\r\n//\r\n// Deployments:\r\n// - UmswapFactory 0x8f093895cD4C54eaB897C6377e1Bf85Fe5B4E948\r\n// - Template Umswap 0xB595e208833164D43A08ce529ACc2b803d33C30E\r\n//\r\n// SPDX-License-Identifier: MIT\r\n//\r\n// Enjoy. And hello, from the past.\r\n//\r\n// (c) BokkyPooBah / Bok Consulting Pty Ltd 2022\r\n// ----------------------------------------------------------------------------\r\n\r\n/// @notice https://github.com/optionality/clone-factory/blob/32782f82dfc5a00d103a7e61a17a5dedbd1e8e9d/contracts/CloneFactory.sol\r\n/*\r\nThe MIT License (MIT)\r\n\r\nCopyright (c) 2018 Murray Software, LLC.\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining\r\na copy of this software and associated documentation files (the\r\n\"Software\"), to deal in the Software without restriction, including\r\nwithout limitation the rights to use, copy, modify, merge, publish,\r\ndistribute, sublicense, and/or sell copies of the Software, and to\r\npermit persons to whom the Software is furnished to do so, subject to\r\nthe following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included\r\nin all copies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\r\nOR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\r\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\r\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\r\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\r\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\r\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n*/\r\n//solhint-disable max-line-length\r\n//solhint-disable no-inline-assembly\r\n\r\ncontract CloneFactory {\r\n  function createClone(address target) internal returns (address result) {\r\n    bytes20 targetBytes = bytes20(target);\r\n    assembly {\r\n      let clone := mload(0x40)\r\n      mstore(clone, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\r\n      mstore(add(clone, 0x14), targetBytes)\r\n      mstore(add(clone, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\r\n      result := create(0, clone, 0x37)\r\n    }\r\n  }\r\n}\r\n// End CloneFactory.sol\r\n\r\n\r\n/// @author Alex W.(github.com/nonstopcoderaxw)\r\n/// @title Array utility functions optimized for Nix\r\nlibrary ArrayUtils {\r\n    /// @notice divide-and-conquer check if an targeted item exists in a sorted array\r\n    /// @param self the given sorted array\r\n    /// @param target the targeted item to the array\r\n    /// @return true - if exists, false - not found\r\n    function includes16(uint16[] memory self, uint target) internal pure returns (bool) {\r\n        if (self.length > 0) {\r\n            uint left;\r\n            uint right = self.length - 1;\r\n            uint mid;\r\n            while (left <= right) {\r\n                mid = (left + right) / 2;\r\n                if (uint(self[mid]) < target) {\r\n                    left = mid + 1;\r\n                } else if (uint(self[mid]) > target) {\r\n                    if (mid < 1) {\r\n                        break;\r\n                    }\r\n                    right = mid - 1;\r\n                } else {\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n    function includes32(uint32[] memory self, uint target) internal pure returns (bool) {\r\n        if (self.length > 0) {\r\n            uint left;\r\n            uint right = self.length - 1;\r\n            uint mid;\r\n            while (left <= right) {\r\n                mid = (left + right) / 2;\r\n                if (uint(self[mid]) < target) {\r\n                    left = mid + 1;\r\n                } else if (uint(self[mid]) > target) {\r\n                    if (mid < 1) {\r\n                        break;\r\n                    }\r\n                    right = mid - 1;\r\n                } else {\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n    function includes64(uint64[] memory self, uint target) internal pure returns (bool) {\r\n        if (self.length > 0) {\r\n            uint left;\r\n            uint right = self.length - 1;\r\n            uint mid;\r\n            while (left <= right) {\r\n                mid = (left + right) / 2;\r\n                if (uint(self[mid]) < target) {\r\n                    left = mid + 1;\r\n                } else if (uint(self[mid]) > target) {\r\n                    if (mid < 1) {\r\n                        break;\r\n                    }\r\n                    right = mid - 1;\r\n                } else {\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n    function includes256(uint[] memory self, uint target) internal pure returns (bool) {\r\n        if (self.length > 0) {\r\n            uint left;\r\n            uint right = self.length - 1;\r\n            uint mid;\r\n            while (left <= right) {\r\n                mid = (left + right) / 2;\r\n                if (self[mid] < target) {\r\n                    left = mid + 1;\r\n                } else if (self[mid] > target) {\r\n                    if (mid < 1) {\r\n                        break;\r\n                    }\r\n                    right = mid - 1;\r\n                } else {\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n}\r\n\r\n\r\nlibrary TokenIdList {\r\n    struct TokenId {\r\n        uint64 timestamp;\r\n        uint192 index;\r\n        uint tokenId;\r\n    }\r\n    struct Data {\r\n        mapping(uint => TokenId) entries;\r\n        uint[] index;\r\n    }\r\n\r\n    error CannotAddDuplicate();\r\n    error NotFound();\r\n\r\n    function add(Data storage self, uint tokenId) internal {\r\n        if (self.entries[tokenId].timestamp > 0) {\r\n            revert CannotAddDuplicate();\r\n        }\r\n        self.index.push(tokenId);\r\n        self.entries[tokenId] = TokenId(uint64(block.timestamp), uint192(self.index.length - 1), tokenId);\r\n    }\r\n    function remove(Data storage self, uint tokenId) internal {\r\n        if (self.entries[tokenId].timestamp == 0) {\r\n            revert NotFound();\r\n        }\r\n        uint removeIndex = self.entries[tokenId].index;\r\n        uint lastIndex = self.index.length - 1;\r\n        uint lastIndexKey = self.index[lastIndex];\r\n        self.index[removeIndex] = lastIndexKey;\r\n        self.entries[lastIndexKey].index = uint192(removeIndex);\r\n        delete self.entries[tokenId];\r\n        if (self.index.length > 0) {\r\n            self.index.pop();\r\n        }\r\n    }\r\n    function length(Data storage self) internal view returns (uint) {\r\n        return self.index.length;\r\n    }\r\n}\r\n\r\n\r\n/// @notice ERC20 https://eips.ethereum.org/EIPS/eip-20 with optional symbol, name and decimals\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address tokenOwner) external view returns (uint balance);\r\n    function allowance(address tokenOwner, address spender) external view returns (uint remaining);\r\n    function transfer(address to, uint tokens) external returns (bool success);\r\n    function approve(address spender, uint tokens) external returns (bool success);\r\n    function transferFrom(address from, address to, uint tokens) external returns (bool success);\r\n\r\n    function symbol() external view returns (string memory);\r\n    function name() external view returns (string memory);\r\n    function decimals() external view returns (uint8);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint tokens);\r\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\r\n}\r\n\r\ninterface IERC165 {\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\ninterface IERC721Partial is IERC165 {\r\n    function ownerOf(uint tokenId) external view returns (address);\r\n    function balanceOf(address owner) external view returns (uint balance);\r\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\r\n    function transferFrom(address from, address to, uint tokenId) external payable;\r\n    function safeTransferFrom(address from, address to, uint tokenId) external payable;\r\n}\r\n\r\n\r\nfunction onePlus(uint x) pure returns (uint) {\r\n    unchecked { return 1 + x; }\r\n}\r\n\r\n\r\ncontract ReentrancyGuard {\r\n    uint private _executing;\r\n\r\n    error ReentrancyAttempted();\r\n\r\n    modifier reentrancyGuard() {\r\n        if (_executing == 1) {\r\n            revert ReentrancyAttempted();\r\n        }\r\n        _executing = 1;\r\n        _;\r\n        _executing = 2;\r\n    }\r\n}\r\n\r\n\r\n/// @notice Basic token = ERC20 + symbol + name + decimals + mint + ownership\r\ncontract BasicToken is IERC20 {\r\n\r\n    bool initialised;\r\n    string _symbol;\r\n    string _name;\r\n    uint8 _decimals;\r\n    uint _totalSupply;\r\n\r\n    mapping(address => uint) balances;\r\n    mapping(address => mapping(address => uint)) allowed;\r\n\r\n    error AlreadyInitialised();\r\n\r\n    function initBasicToken(string memory __symbol, string memory __name, uint8 __decimals) internal {\r\n        if (initialised) {\r\n            revert AlreadyInitialised();\r\n        }\r\n        initialised = true;\r\n        _symbol = __symbol;\r\n        _name = __name;\r\n        _decimals = __decimals;\r\n    }\r\n    function symbol() override external view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n    function name() override external view returns (string memory) {\r\n        return _name;\r\n    }\r\n    function decimals() override external view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n    function totalSupply() override external view returns (uint) {\r\n        return _totalSupply - balances[address(0)];\r\n    }\r\n    function balanceOf(address tokenOwner) override external view returns (uint balance) {\r\n        return balances[tokenOwner];\r\n    }\r\n    function transfer(address to, uint tokens) override external returns (bool success) {\r\n        balances[msg.sender] -= tokens;\r\n        balances[to] += tokens;\r\n        emit Transfer(msg.sender, to, tokens);\r\n        return true;\r\n    }\r\n    function approve(address spender, uint tokens) override external returns (bool success) {\r\n        allowed[msg.sender][spender] = tokens;\r\n        emit Approval(msg.sender, spender, tokens);\r\n        return true;\r\n    }\r\n    function transferFrom(address from, address to, uint tokens) override external returns (bool success) {\r\n        balances[from] -= tokens;\r\n        allowed[from][msg.sender] -= tokens;\r\n        balances[to] += tokens;\r\n        emit Transfer(from, to, tokens);\r\n        return true;\r\n    }\r\n    function allowance(address tokenOwner, address spender) override external view returns (uint remaining) {\r\n        return allowed[tokenOwner][spender];\r\n    }\r\n    function _mint(address tokenOwner, uint tokens) internal returns (bool success) {\r\n        balances[tokenOwner] += tokens;\r\n        _totalSupply += tokens;\r\n        emit Transfer(address(0), tokenOwner, tokens);\r\n        return true;\r\n    }\r\n    function _burn(address tokenOwner, uint tokens) internal returns (bool success) {\r\n        balances[tokenOwner] -= tokens;\r\n        _totalSupply -= tokens;\r\n        emit Transfer(tokenOwner, address(0), tokens);\r\n        return true;\r\n    }\r\n}\r\n\r\n\r\n/// @title ERC-721 pool\r\n/// @author BokkyPooBah, Bok Consulting Pty Ltd\r\ncontract Umswap is BasicToken, ReentrancyGuard {\r\n    using TokenIdList for TokenIdList.Data;\r\n    using TokenIdList for TokenIdList.TokenId;\r\n\r\n    enum Stats { SwappedIn, SwappedOut, TotalScores }\r\n\r\n    struct Rating {\r\n        address account;\r\n        uint64 score;\r\n    }\r\n\r\n    uint8 constant DECIMALS = 18;\r\n    uint constant MAXRATINGSCORE = 10;\r\n    uint constant MAXRATINGTEXTLENGTH = 48;\r\n\r\n    address private creator;\r\n    IERC721Partial private collection;\r\n    uint16[] private validTokenIds16;\r\n    uint32[] private validTokenIds32;\r\n    uint64[] private validTokenIds64;\r\n    uint[] private validTokenIds256;\r\n    uint64[3] private stats;\r\n\r\n    mapping(address => Rating) public ratings;\r\n    address[] public raters;\r\n    TokenIdList.Data private tokenIds;\r\n\r\n    event Swapped(address indexed account, uint indexed timestamp, uint[] inTokenIds, uint[] outTokenIds, uint64[3] stats);\r\n    event Rated(address indexed account, uint indexed timestamp, uint score, string text, uint64[3] stats);\r\n\r\n    error InsufficientTokensToBurn();\r\n    error InvalidTokenId(uint tokenId);\r\n    error MaxRatingExceeded(uint max);\r\n    error InvalidRatingMessage();\r\n\r\n    function initUmswap(address _creator, IERC721Partial _collection, string calldata _symbol, string calldata _name, uint[] calldata _tokenIds) public {\r\n        creator = _creator;\r\n        collection = _collection;\r\n        super.initBasicToken(_symbol, _name, DECIMALS);\r\n        uint maxTokenId;\r\n        for (uint i = 0; i < _tokenIds.length; i = onePlus(i)) {\r\n            if (_tokenIds[i] > maxTokenId) {\r\n                maxTokenId = _tokenIds[i];\r\n            }\r\n        }\r\n        if (maxTokenId < 2 ** 16) {\r\n            for (uint i = 0; i < _tokenIds.length; i = onePlus(i)) {\r\n                validTokenIds16.push(uint16(_tokenIds[i]));\r\n            }\r\n        } else if (maxTokenId < 2 ** 32) {\r\n            for (uint i = 0; i < _tokenIds.length; i = onePlus(i)) {\r\n                validTokenIds32.push(uint32(_tokenIds[i]));\r\n            }\r\n        } else if (maxTokenId < 2 ** 64) {\r\n            for (uint i = 0; i < _tokenIds.length; i = onePlus(i)) {\r\n                validTokenIds64.push(uint64(_tokenIds[i]));\r\n            }\r\n        } else {\r\n            validTokenIds256 = _tokenIds;\r\n        }\r\n    }\r\n\r\n    /// @dev Is tokenId valid?\r\n    /// @param tokenId TokenId to check\r\n    /// @return True if valid\r\n    function isValidTokenId(uint tokenId) public view returns (bool) {\r\n        if (validTokenIds16.length > 0) {\r\n            return ArrayUtils.includes16(validTokenIds16, tokenId);\r\n        } else if (validTokenIds32.length > 0) {\r\n            return ArrayUtils.includes32(validTokenIds32, tokenId);\r\n        } else if (validTokenIds64.length > 0) {\r\n            return ArrayUtils.includes64(validTokenIds64, tokenId);\r\n        } else if (validTokenIds256.length > 0) {\r\n            return ArrayUtils.includes256(validTokenIds256, tokenId);\r\n        } else {\r\n            return true;\r\n        }\r\n    }\r\n\r\n    /// @dev Swap tokens into and out of the Umswap\r\n    /// @param inTokenIds TokenIds to be transferred in\r\n    /// @param outTokenIds TokenIds to be transferred out\r\n    function swap(uint[] calldata inTokenIds, uint[] calldata outTokenIds) public reentrancyGuard {\r\n        if (outTokenIds.length > inTokenIds.length) {\r\n            uint tokensToBurn = (outTokenIds.length - inTokenIds.length) * 10 ** DECIMALS;\r\n            if (tokensToBurn > this.balanceOf(msg.sender)) {\r\n                revert InsufficientTokensToBurn();\r\n            }\r\n            _burn(msg.sender, tokensToBurn);\r\n        }\r\n        for (uint i = 0; i < inTokenIds.length; i = onePlus(i)) {\r\n            if (!isValidTokenId(inTokenIds[i])) {\r\n                revert InvalidTokenId(inTokenIds[i]);\r\n            }\r\n            collection.transferFrom(msg.sender, address(this), inTokenIds[i]);\r\n            tokenIds.add(inTokenIds[i]);\r\n        }\r\n        for (uint i = 0; i < outTokenIds.length; i = onePlus(i)) {\r\n            if (!isValidTokenId(outTokenIds[i])) {\r\n                revert InvalidTokenId(outTokenIds[i]);\r\n            }\r\n            tokenIds.remove(outTokenIds[i]);\r\n            collection.transferFrom(address(this), msg.sender, outTokenIds[i]);\r\n        }\r\n        if (outTokenIds.length < inTokenIds.length) {\r\n            _mint(msg.sender, (inTokenIds.length - outTokenIds.length) * 10 ** DECIMALS);\r\n        }\r\n        stats[uint(Stats.SwappedIn)] += uint64(inTokenIds.length);\r\n        stats[uint(Stats.SwappedOut)] += uint64(outTokenIds.length);\r\n        emit Swapped(msg.sender, block.timestamp, inTokenIds, outTokenIds, stats);\r\n    }\r\n\r\n    /// @dev Rate a Umswap. Ratings scores can be updated forever\r\n    /// @param score Score between 0 and `MAXRATINGSCORE` inclusive\r\n    /// @param text Length between 1 and `MAXRATINGTEXTLENGTH`\r\n    function rate(uint score, string calldata text) public {\r\n        if (score > MAXRATINGSCORE) {\r\n            revert MaxRatingExceeded(MAXRATINGSCORE);\r\n        }\r\n        bytes memory textBytes = bytes(text);\r\n        if (textBytes.length > MAXRATINGTEXTLENGTH) {\r\n            revert InvalidRatingMessage();\r\n        }\r\n        Rating storage rating = ratings[msg.sender];\r\n        if (rating.account == address(0)) {\r\n            ratings[msg.sender] = Rating(msg.sender, uint64(score));\r\n            raters.push(msg.sender);\r\n        } else {\r\n            stats[uint(Stats.TotalScores)] -= rating.score;\r\n            rating.score = uint64(score);\r\n        }\r\n        stats[uint(Stats.TotalScores)] += uint64(score);\r\n        emit Rated(msg.sender, block.timestamp, score, text, stats);\r\n    }\r\n\r\n    function isApprovedForAll(address tokenOwner) internal view returns (bool b) {\r\n        try IERC721Partial(collection).isApprovedForAll(tokenOwner, address(this)) returns (bool _b) {\r\n            b = _b;\r\n        } catch {\r\n        }\r\n    }\r\n\r\n    /// @dev Get info\r\n    /// @param tokenOwner To check collection.isApprovedForAll(tokenOwner, this)\r\n    /// @return symbol_ Symbol\r\n    /// @return name_ Name\r\n    /// @return collection_ Collection\r\n    /// @return validTokenIds_ Valid tokenIds\r\n    /// @return tokenIds_ TokenIds\r\n    /// @return creator_ Creator\r\n    /// @return stats_ Stats\r\n    function getInfo(address tokenOwner) public view returns (string memory symbol_, string memory name_, IERC721Partial collection_, uint[] memory validTokenIds_, uint[] memory tokenIds_, address creator_, uint[] memory stats_) {\r\n        symbol_ = _symbol;\r\n        name_ = _name;\r\n        collection_ = collection;\r\n        if (validTokenIds16.length > 0) {\r\n            validTokenIds_ = new uint[](validTokenIds16.length);\r\n            for (uint i = 0; i < validTokenIds16.length; i = onePlus(i)) {\r\n                validTokenIds_[i] = validTokenIds16[i];\r\n            }\r\n        } else if (validTokenIds32.length > 0) {\r\n            validTokenIds_ = new uint[](validTokenIds32.length);\r\n            for (uint i = 0; i < validTokenIds32.length; i = onePlus(i)) {\r\n                validTokenIds_[i] = validTokenIds32[i];\r\n            }\r\n        } else if (validTokenIds64.length > 0) {\r\n            validTokenIds_ = new uint[](validTokenIds64.length);\r\n            for (uint i = 0; i < validTokenIds64.length; i = onePlus(i)) {\r\n                validTokenIds_[i] = validTokenIds64[i];\r\n            }\r\n        } else if (validTokenIds256.length > 0) {\r\n            validTokenIds_ = new uint[](validTokenIds256.length);\r\n            for (uint i = 0; i < validTokenIds256.length; i = onePlus(i)) {\r\n                validTokenIds_[i] = validTokenIds256[i];\r\n            }\r\n        } else {\r\n            validTokenIds_ = new uint[](0);\r\n        }\r\n        tokenIds_ = new uint[](tokenIds.length());\r\n        for (uint i = 0; i < tokenIds.length(); i = onePlus(i)) {\r\n            tokenIds_[i] = tokenIds.index[i];\r\n        }\r\n        creator_ = creator;\r\n        stats_ = new uint[](7);\r\n        stats_[0] = stats[uint(Stats.SwappedIn)];\r\n        stats_[1] = stats[uint(Stats.SwappedOut)];\r\n        stats_[2] = stats[uint(Stats.TotalScores)];\r\n        stats_[3] = this.balanceOf(tokenOwner);\r\n        stats_[4] = _totalSupply;\r\n        stats_[5] = raters.length;\r\n        stats_[6] = isApprovedForAll(tokenOwner) ? 1 : 0;\r\n    }\r\n\r\n    function getRatings(uint[] memory indices) public view returns (Rating[] memory ratings_) {\r\n        uint length = indices.length;\r\n        ratings_ = new Rating[](length);\r\n        for (uint i = 0; i < length; i = onePlus(i)) {\r\n            ratings_[i] = ratings[raters[i]];\r\n        }\r\n    }\r\n}\r\n\r\n\r\n/// @title Factory to deploy cloned Umswaps instances\r\n/// @author BokkyPooBah, Bok Consulting Pty Ltd\r\ncontract UmswapFactory is CloneFactory {\r\n\r\n    bytes1 constant SPACE = 0x20;\r\n    bytes1 constant ZERO = 0x30;\r\n    bytes1 constant TILDE = 0x7e;\r\n    bytes constant UMSYMBOLPREFIX = \"UMS\";\r\n    bytes4 constant ERC721_INTERFACE = 0x80ac58cd;\r\n    uint constant MAXNAMELENGTH = 48;\r\n    uint constant MAXTOPICLENGTH = 48;\r\n    uint constant MAXTEXTLENGTH = 280;\r\n\r\n    Umswap public template;\r\n    Umswap[] public umswaps;\r\n    mapping(Umswap => bool) umswapExists;\r\n    mapping(bytes32 => bool) setExists;\r\n\r\n    error NotERC721();\r\n    error InvalidName();\r\n    error InvalidTopic();\r\n    error InvalidMessage();\r\n    error InvalidUmswapOrCollection();\r\n    error DuplicateSet();\r\n    error TokenIdsMustBeSortedWithNoDuplicates();\r\n\r\n    event NewUmswap(address indexed creator, uint timestamp, Umswap indexed umswap, IERC721Partial indexed collection, string name, uint[] tokenIds);\r\n    event Message(address indexed from, uint timestamp, address indexed to, address indexed umswapOrCollection, string topic, string message);\r\n    event Withdrawn(address owner, uint timestamp, address indexed token, uint tokens, uint tokenId);\r\n\r\n    constructor() {\r\n        template = new Umswap();\r\n    }\r\n\r\n    function isERC721(address token) internal view returns (bool b) {\r\n        if (token.code.length > 0) {\r\n            try IERC721Partial(token).supportsInterface(ERC721_INTERFACE) returns (bool _b) {\r\n                b = _b;\r\n            } catch {\r\n            }\r\n        }\r\n    }\r\n\r\n    function genSymbol(uint id) internal pure returns (string memory s) {\r\n        bytes memory b = new bytes(8);\r\n        uint i;\r\n        uint j;\r\n        uint num;\r\n        for (i = 0; i < UMSYMBOLPREFIX.length; i = onePlus(i)) {\r\n            b[j++] = UMSYMBOLPREFIX[i];\r\n        }\r\n        i = 5;\r\n        do {\r\n            unchecked {\r\n                i--;\r\n            }\r\n            num = id / 10 ** i;\r\n            b[j++] = bytes1(uint8(num % 10 + uint8(ZERO)));\r\n        } while (i > 0);\r\n        s = string(b);\r\n    }\r\n\r\n    /// @dev Is name valid? Length between 1 and `MAXNAMELENGTH`. Characters between SPACE and TILDE inclusive. No leading, trailing or repeating SPACEs\r\n    /// @param str Name to check\r\n    /// @return True if valid\r\n    function isValidName(string memory str) public pure returns (bool) {\r\n        bytes memory b = bytes(str);\r\n        if (b.length < 1 || b.length > MAXNAMELENGTH) {\r\n            return false;\r\n        }\r\n        if (b[0] == SPACE || b[b.length-1] == SPACE) {\r\n            return false;\r\n        }\r\n        bytes1 lastChar = b[0];\r\n        for (uint i; i < b.length; i = onePlus(i)) {\r\n            bytes1 char = b[i];\r\n            if (char == SPACE && lastChar == SPACE) {\r\n                return false;\r\n            }\r\n            if (!(char >= SPACE && char <= TILDE)) {\r\n                return false;\r\n            }\r\n            lastChar = char;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /// @dev Create new Umswap\r\n    /// @param collection ERC-721 contract address\r\n    /// @param name Name. See `isValidName` for valid names\r\n    /// @param tokenIds List of valid tokenIds in this Umswap. Set to [] for any tokenIds in the collection\r\n    function newUmswap(IERC721Partial collection, string calldata name, uint[] calldata tokenIds) public {\r\n        if (!isERC721(address(collection))) {\r\n            revert NotERC721();\r\n        }\r\n        if (!isValidName(name)) {\r\n            revert InvalidName();\r\n        }\r\n        if (tokenIds.length > 0) {\r\n            for (uint i = 1; i < tokenIds.length; i = onePlus(i)) {\r\n                if (tokenIds[i - 1] >= tokenIds[i]) {\r\n                    revert TokenIdsMustBeSortedWithNoDuplicates();\r\n                }\r\n            }\r\n        }\r\n        bytes32 key = keccak256(abi.encodePacked(collection, tokenIds));\r\n        if (setExists[key]) {\r\n            revert DuplicateSet();\r\n        }\r\n        setExists[key] = true;\r\n        Umswap umswap = Umswap(createClone(address(template)));\r\n        umswap.initUmswap(msg.sender, collection, genSymbol(umswaps.length), name, tokenIds);\r\n        umswaps.push(umswap);\r\n        umswapExists[umswap] = true;\r\n        emit NewUmswap(msg.sender, block.timestamp, umswap, collection, name, tokenIds);\r\n    }\r\n\r\n    /// @dev Send message\r\n    /// @param to Destination address, or address(0) for general messages\r\n    /// @param umswapOrCollection Specific umswap or ERC-721 contract address, or address(0) for general messages\r\n    /// @param topic Message topic. Length between 0 and `MAXTOPICLENGTH`\r\n    /// @param text Message text. Length between 1 and `MAXTEXTLENGTH`\r\n    function sendMessage(address to, address umswapOrCollection, string calldata topic, string calldata text) public {\r\n        bytes memory topicBytes = bytes(topic);\r\n        if (topicBytes.length > MAXTOPICLENGTH) {\r\n            revert InvalidTopic();\r\n        }\r\n        bytes memory textBytes = bytes(text);\r\n        if (textBytes.length < 1 || textBytes.length > MAXTEXTLENGTH) {\r\n            revert InvalidMessage();\r\n        }\r\n        if (umswapOrCollection != address(0) && !umswapExists[Umswap(umswapOrCollection)] && !isERC721(umswapOrCollection)) {\r\n            revert InvalidUmswapOrCollection();\r\n        }\r\n        emit Message(msg.sender, block.timestamp, to, umswapOrCollection, topic, text);\r\n    }\r\n\r\n    function getUmswapsLength() public view returns (uint _length) {\r\n        return umswaps.length;\r\n    }\r\n\r\n    function getUmswaps(address tokenOwner, uint[] memory indices) public view returns (\r\n        Umswap[] memory umswaps_,\r\n        string[] memory symbols,\r\n        string[] memory names,\r\n        IERC721Partial[] memory collections,\r\n        uint[][] memory validTokenIds,\r\n        uint[][] memory tokenIds,\r\n        address[] memory creators,\r\n        uint[][] memory stats\r\n    ) {\r\n        uint length = indices.length;\r\n        umswaps_ = new Umswap[](length);\r\n        symbols = new string[](length);\r\n        names = new string[](length);\r\n        collections = new IERC721Partial[](length);\r\n        validTokenIds = new uint[][](length);\r\n        tokenIds = new uint[][](length);\r\n        creators = new address[](length);\r\n        stats = new uint[][](length);\r\n        for (uint i = 0; i < length; i = onePlus(i)) {\r\n            umswaps_[i] = umswaps[indices[i]];\r\n            (symbols[i], names[i], collections[i], validTokenIds[i], tokenIds[i], creators[i], stats[i]) = umswaps[indices[i]].getInfo(tokenOwner);\r\n        }\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"name\":\"AlreadyInitialised\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CannotAddDuplicate\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientTokensToBurn\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidRatingMessage\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"InvalidTokenId\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"max\",\"type\":\"uint256\"}],\"name\":\"MaxRatingExceeded\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotFound\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyAttempted\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"score\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"text\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint64[3]\",\"name\":\"stats\",\"type\":\"uint64[3]\"}],\"name\":\"Rated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"inTokenIds\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"outTokenIds\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint64[3]\",\"name\":\"stats\",\"type\":\"uint64[3]\"}],\"name\":\"Swapped\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"remaining\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"}],\"name\":\"getInfo\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"contract IERC721Partial\",\"name\":\"collection_\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"validTokenIds_\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds_\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"creator_\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"stats_\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"indices\",\"type\":\"uint256[]\"}],\"name\":\"getRatings\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"score\",\"type\":\"uint64\"}],\"internalType\":\"struct Umswap.Rating[]\",\"name\":\"ratings_\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_creator\",\"type\":\"address\"},{\"internalType\":\"contract IERC721Partial\",\"name\":\"_collection\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"uint256[]\",\"name\":\"_tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"initUmswap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"isValidTokenId\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"score\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"text\",\"type\":\"string\"}],\"name\":\"rate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"raters\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"ratings\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"score\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"inTokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"outTokenIds\",\"type\":\"uint256[]\"}],\"name\":\"swap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Umswap", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://d986ebd2e402b2027d02504ca9aa45b08b9e58fec2fce3f89e7259032e0ffab0"}