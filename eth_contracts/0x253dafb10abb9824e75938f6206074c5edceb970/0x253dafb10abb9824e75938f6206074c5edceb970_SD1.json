{"SourceCode": "/**\r\nLegend has it that a sleeping dragon lies dormant \r\nsomewhere in the cosmos that can only be \r\nawakened by a worthy space traveler through a \r\nfiery ritual.... As Satellite Doge-1 made its way \r\nthrough space conquering the cosmos powering its \r\nway to the moon and what lies beyond, it \r\nencountered an oddly shaped asteroid. Upon \r\nrealizing that this could be the legendary sleeping \r\ndragon, doge 1 circled round the mysterious \r\nobject at unmeasurable speeds, producing a blaze \r\nso hot and powerful that it cracked the asteroid. \r\nWith a roar that echoed through space and time, a \r\nfierce, beautiful dragon with eyes of fire emerged \r\nfrom within. This dragon became known as \r\nDragon-1. The duo, bonded forever through a fiery \r\nflame, continuing their journey together to \r\ncomplete THE MOON MISSION. \r\n\r\nWebsite:  https://satellite-dragon1.com/\r\nTG:  https://t.me/satellitedragon1\r\n*/\r\n\r\npragma solidity 0.8.23;\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ninterface IERC20Metadata is IERC20{\r\n\r\n    function name() external view returns (string memory);\r\n\r\n    function symbol() external view returns (string memory);\r\n\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n}\r\n\r\ninterface IUniswapV2Pair {\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n    function token0() external view returns (address);\r\n    function token1() external view returns (address);\r\n}\r\n\r\ncontract ERC20 is Context, IERC20, IERC20Metadata {\r\n    mapping(address => uint256) private _balances;\r\n\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n\r\n    constructor(string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view virtual override returns (uint8) {\r\n        return 18;\r\n    }\r\n\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(address account) public view virtual override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\r\n        address owner = _msgSender();\r\n        _transfer(owner, to, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        address owner = _msgSender();\r\n        _approve(owner, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\r\n        address spender = _msgSender();\r\n        _spendAllowance(from, spender, amount);\r\n        _transfer(from, to, amount);\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        address owner = _msgSender();\r\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        address owner = _msgSender();\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\r\n        unchecked {\r\n            _approve(owner, spender, currentAllowance - subtractedValue);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    function _transfer(address from, address to, uint256 amount) internal virtual {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(from, to, amount);\r\n\r\n        uint256 fromBalance = _balances[from];\r\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\r\n        unchecked {\r\n            _balances[from] = fromBalance - amount;\r\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\r\n            // decrementing then incrementing.\r\n            _balances[to] += amount;\r\n        }\r\n\r\n        emit Transfer(from, to, amount);\r\n\r\n        _afterTokenTransfer(from, to, amount);\r\n    }\r\n\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply += amount;\r\n        unchecked {\r\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\r\n            _balances[account] += amount;\r\n        }\r\n        emit Transfer(address(0), account, amount);\r\n\r\n        _afterTokenTransfer(address(0), account, amount);\r\n    }\r\n\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        uint256 accountBalance = _balances[account];\r\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\r\n        unchecked {\r\n            _balances[account] = accountBalance - amount;\r\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\r\n            _totalSupply -= amount;\r\n        }\r\n\r\n        emit Transfer(account, address(0), amount);\r\n\r\n        _afterTokenTransfer(account, address(0), amount);\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n        if (currentAllowance != type(uint256).max) {\r\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\r\n            unchecked {\r\n                _approve(owner, spender, currentAllowance - amount);\r\n            }\r\n        }\r\n    }\r\n\r\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\r\n\r\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n    \r\n    constructor () {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() external virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\nlibrary Address {\r\n    function isContract(address account) internal view returns (bool) {\r\n        return account.code.length > 0;\r\n    }\r\n\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\r\n    }\r\n\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\r\n    }\r\n\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\r\n    }\r\n\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\r\n    }\r\n\r\n    function verifyCallResultFromTarget(\r\n        address target,\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        if (success) {\r\n            if (returndata.length == 0) {\r\n                // only check isContract if the call was successful and the return data is empty\r\n                // otherwise we already know that it was a contract\r\n                require(isContract(target), \"Address: call to non-contract\");\r\n            }\r\n            return returndata;\r\n        } else {\r\n            _revert(returndata, errorMessage);\r\n        }\r\n    }\r\n\r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            _revert(returndata, errorMessage);\r\n        }\r\n    }\r\n\r\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\r\n        // Look for revert reason and bubble it up if present\r\n        if (returndata.length > 0) {\r\n            // The easiest way to bubble the revert reason is using memory via assembly\r\n            /// @solidity memory-safe-assembly\r\n            assembly {\r\n                let returndata_size := mload(returndata)\r\n                revert(add(32, returndata), returndata_size)\r\n            }\r\n        } else {\r\n            revert(errorMessage);\r\n        }\r\n    }\r\n}\r\n\r\nlibrary SafeERC20 {\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) {\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        require(\r\n            (value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n}\r\n\r\ninterface IDexRouter {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline) external;\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(uint amountOutMin, address[] calldata path, address to, uint deadline) external payable;\r\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline) external payable returns (uint[] memory amounts);\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline) external;\r\n    function swapTokensForExactTokens(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline) external returns (uint[] memory amounts);\r\n    function addLiquidityETH(address token, uint256 amountTokenDesired, uint256 amountTokenMin, uint256 amountETHMin, address to, uint256 deadline) external payable returns (uint256 amountToken, uint256 amountETH, uint256 liquidity);\r\n    function addLiquidity(address tokenA, address tokenB, uint amountADesired, uint amountBDesired, uint amountAMin, uint amountBMin, address to, uint deadline) external returns (uint amountA, uint amountB, uint liquidity);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n\r\ninterface IDexFactory {\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\ncontract SD1_Burn_Station is Ownable{\r\n\r\n    IDexRouter router = IDexRouter(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n    address private factory = router.factory(); \r\n    address private WETH = router.WETH(); \r\n    IERC20 mainToken;\r\n    IERC20 doge1Token = IERC20(0xFfE203b59393593965842439ce1E7D7c78109b46);\r\n    uint256 totalMainBurn;\r\n    uint256 totalDogeBurn;\r\n    address DEAD = 0x000000000000000000000000000000000000dEaD;\r\n\r\n    struct TokenHolder {\r\n        uint256 amount;\r\n        uint256 valueInETH;\r\n        uint256 lastUpdated;\r\n    }\r\n\r\n    mapping(address => TokenHolder) public mainTokenBalances;\r\n    mapping(address => TokenHolder) public doge1TokenBalances;\r\n    uint256 public lastDoubleBurnTimestamp;\r\n    modifier onlyMainToken() {\r\n        require(msg.sender == address(mainToken));\r\n        _;\r\n    }\r\n\r\n    function getTokenTotals() external view returns(uint256,uint256,uint256,uint256){\r\n        uint256 d1held = doge1Token.balanceOf(address(this));\r\n        uint256 mainheld = mainToken.balanceOf(address(this));\r\n        return (mainheld,d1held,totalMainBurn,totalDogeBurn);\r\n    }\r\n\r\n    constructor(address _owner){\r\n        mainToken = IERC20(_owner);\r\n    }\r\n\r\n    function getMainTokenBalance(address holder) public view returns (uint256,uint256) {\r\n        if (mainTokenBalances[holder].lastUpdated < lastDoubleBurnTimestamp) {\r\n            return (0,0);\r\n        }\r\n        return (mainTokenBalances[holder].amount,mainTokenBalances[holder].valueInETH);\r\n    }\r\n\r\n    function getDoge1TokenBalance(address holder) public view returns (uint256,uint256)  {\r\n        if (doge1TokenBalances[holder].lastUpdated < lastDoubleBurnTimestamp) {\r\n            return (0,0);\r\n        }\r\n        return (doge1TokenBalances[holder].amount,doge1TokenBalances[holder].valueInETH);\r\n    }\r\n\r\n    function doubleBurn() external onlyOwner{\r\n        totalMainBurn += mainToken.balanceOf(address(this));\r\n        totalDogeBurn += doge1Token.balanceOf(address(this));\r\n        mainToken.transfer(DEAD, mainToken.balanceOf(address(this)));\r\n        doge1Token.transfer(DEAD, doge1Token.balanceOf(address(this)));\r\n        lastDoubleBurnTimestamp = block.timestamp;\r\n    }\r\n    \r\n    function feedTheFire(address user, uint256 mainTokenAmount, uint256 doge1TokenAmount) public onlyMainToken{\r\n        require(mainTokenAmount > 0 || doge1TokenAmount > 0, \"No tokens specified for transfer\");\r\n\r\n        if (mainTokenAmount > 0) {\r\n            uint256 mainTokenPriceInETH = getTokenPriceInETH(address(mainToken));\r\n            require(mainToken.transferFrom(user, address(this), mainTokenAmount), \"Main token transfer failed\");\r\n\r\n            if (mainTokenBalances[user].lastUpdated < lastDoubleBurnTimestamp) {\r\n                mainTokenBalances[user].amount = 0;\r\n                mainTokenBalances[user].valueInETH = 0;\r\n            }\r\n\r\n            mainTokenBalances[user].amount += mainTokenAmount;\r\n            mainTokenBalances[user].valueInETH += mainTokenAmount * mainTokenPriceInETH;\r\n            mainTokenBalances[user].lastUpdated = block.timestamp;\r\n        }\r\n\r\n        if (doge1TokenAmount > 0) {\r\n            uint256 doge1TokenPriceInETH = getTokenPriceInETH(address(doge1Token));\r\n            require(doge1Token.transferFrom(user, address(this), doge1TokenAmount), \"Doge1 token transfer failed\");\r\n\r\n            if (doge1TokenBalances[user].lastUpdated < lastDoubleBurnTimestamp) {\r\n                doge1TokenBalances[user].amount = 0;\r\n                doge1TokenBalances[user].valueInETH = 0;\r\n            }\r\n\r\n            doge1TokenBalances[user].amount += doge1TokenAmount;\r\n            doge1TokenBalances[user].valueInETH += doge1TokenAmount * doge1TokenPriceInETH;\r\n            doge1TokenBalances[user].lastUpdated = block.timestamp;\r\n        }\r\n    }\r\n\r\n    function getUniswapPairAddress(address token) public view returns (address) {\r\n        IUniswapV2Factory uniswapFactory = IUniswapV2Factory(factory);\r\n        address pairAddress = uniswapFactory.getPair(token, WETH);\r\n        return pairAddress;\r\n    }\r\n\r\n\r\n    function getTokenPriceInETH(address token) public view returns (uint256) {\r\n        address pairAddress = getUniswapPairAddress(token);\r\n        IUniswapV2Pair pair = IUniswapV2Pair(pairAddress);\r\n\r\n        (uint112 reserve0, uint112 reserve1,) = pair.getReserves();\r\n        address token0 = pair.token0();\r\n        uint8 tokenDecimals = 18;\r\n\r\n        uint256 price;\r\n        if (token == token0) {\r\n            price = (reserve1 * (10 ** (18 + tokenDecimals))) / reserve0;\r\n        } else {\r\n            price = (reserve0 * (10 ** (18 + tokenDecimals))) / reserve1;\r\n        }\r\n\r\n        return price / (10 ** 18); \r\n    }\r\n\r\n\r\n    function fuelUp(address user) external payable onlyMainToken {\r\n        address doge1 = address(doge1Token);\r\n\r\n        uint256 initialMainTokenBalance = mainToken.balanceOf(address(this));\r\n        uint256 initialDoge1TokenBalance = doge1Token.balanceOf(address(this));\r\n\r\n        address[] memory path1 = new address[](2);\r\n        path1[0] = address(router.WETH());\r\n        path1[1] = address(mainToken);\r\n        address[] memory path2 = new address[](2);\r\n        path2[0] = address(router.WETH());\r\n        path2[1] = doge1;\r\n        uint256 amount = (msg.value / 2);\r\n\r\n        router.swapExactETHForTokensSupportingFeeOnTransferTokens{value: amount}(\r\n            0, path1, address(this), block.timestamp\r\n        );\r\n        router.swapExactETHForTokensSupportingFeeOnTransferTokens{value: amount}(\r\n            0, path2, address(this), block.timestamp\r\n        );\r\n\r\n        uint256 mainTokenBought = mainToken.balanceOf(address(this)) - initialMainTokenBalance;\r\n        uint256 doge1TokenBought = doge1Token.balanceOf(address(this)) - initialDoge1TokenBalance;\r\n\r\n        if (mainTokenBalances[msg.sender].lastUpdated < lastDoubleBurnTimestamp) {\r\n            mainTokenBalances[msg.sender].amount = 0;\r\n            mainTokenBalances[msg.sender].valueInETH = 0;\r\n        }\r\n        if (doge1TokenBalances[msg.sender].lastUpdated < lastDoubleBurnTimestamp) {\r\n            doge1TokenBalances[msg.sender].amount = 0;\r\n            doge1TokenBalances[msg.sender].valueInETH = 0;\r\n        }\r\n\r\n        mainTokenBalances[user].amount += mainTokenBought;\r\n        mainTokenBalances[user].valueInETH += mainTokenBought * getTokenPriceInETH(address(mainToken));\r\n        mainTokenBalances[user].lastUpdated = block.timestamp;\r\n\r\n        doge1TokenBalances[user].amount += doge1TokenBought;\r\n        doge1TokenBalances[user].valueInETH += doge1TokenBought * getTokenPriceInETH(doge1);\r\n        doge1TokenBalances[user].lastUpdated = block.timestamp;\r\n    }\r\n}\r\n\r\n\r\ncontract SD1 is ERC20, Ownable {\r\n\r\n    mapping (address => bool) public feeExempt;\r\n    mapping (address => bool) public limitExempt;\r\n\r\n    SD1_Burn_Station burnStation;\r\n\r\n    bool public tradingActive;\r\n\r\n    address creator;\r\n\r\n    mapping (address => bool) public isPair;\r\n\r\n    uint256 public maxTxn;\r\n    uint256 public maxWallet;\r\n\r\n    address payable public taxWallet;\r\n    address payable public burnWallet;\r\n\r\n    uint256 public totalBuyTax;\r\n\r\n    uint256 public totalSellTax;\r\n\r\n    bool public limits = true;\r\n\r\n    bool public swapEnabled = true;\r\n    bool private swapping;\r\n    uint256 public swapTokensAtAmt;\r\n\r\n    address public lpPair;\r\n    IDexRouter public router;\r\n\r\n    event UpdatedmaxTxn(uint256 newMax);\r\n    event UpdatedMaxWallet(uint256 newMax);\r\n    event SetFeeExempt(address _address, bool _isExempt);\r\n    event SetLimitExempt(address _address, bool _isExempt);\r\n    event LimitsRemoved();\r\n    event UpdatedBuyTax(uint256 newAmt);\r\n    event UpdatedSellTax(uint256 newAmt);\r\n\r\n\r\n    constructor ()\r\n        ERC20(\"Satellite Dragon-1\", \"SD1\")\r\n        {\r\n        creator = msg.sender;\r\n        _mint(creator, 1 * (10**9) * (10** decimals())); //one time mint, in constructor\r\n        router = IDexRouter(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n\r\n        maxTxn = totalSupply() * 10 / 1000; //1% max bag/buy at launch\r\n        maxWallet = totalSupply() * 10 / 1000;\r\n        swapTokensAtAmt = totalSupply() * 20 / 10000;  //contract won't swap until this amount, here 0.2%\r\n\r\n        taxWallet = payable(0x691C093E136cB743518E80d7dd1392f18b0d89bD);\r\n        burnWallet = payable(0xC3Da03432214175859ef6ba9B7fe178ffF560479);\r\n\r\n        totalBuyTax = 30; //high to start, can only lower from here\r\n\r\n        totalSellTax = 50; //high to start, can only lower from here\r\n        burnStation = new SD1_Burn_Station(address(this));\r\n\r\n        lpPair = IDexFactory(router.factory()).createPair(address(this), router.WETH());\r\n\r\n        isPair[lpPair] = true;\r\n\r\n        limitExempt[lpPair] = true;\r\n        limitExempt[msg.sender] = true;\r\n        limitExempt[address(this)] = true;\r\n        limitExempt[address(burnStation)] = true;\r\n    \r\n        feeExempt[msg.sender] = true;\r\n        feeExempt[address(this)] = true;\r\n        feeExempt[address(burnStation)] = true;\r\n \r\n        _approve(address(this), address(router), type(uint256).max);\r\n        _approve(address(msg.sender), address(router), totalSupply());\r\n            \r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    function seeBurnStation() public view returns(address){\r\n        return address(burnStation);\r\n    }\r\n\r\n    function doubleBurn() external{\r\n        require(msg.sender == burnWallet);\r\n        burnStation.doubleBurn();\r\n    }\r\n\r\n    function fuelUp() external payable {\r\n        burnStation.fuelUp{value: msg.value}(msg.sender);\r\n    }\r\n    \r\n    function feedTheFire(uint256 mainTokenAmount, uint256 doge1TokenAmount) external {\r\n        burnStation.feedTheFire(msg.sender, mainTokenAmount, doge1TokenAmount);\r\n    }\r\n\r\n    function setFeeExempt(address _address, bool _isExempt) external onlyOwner {\r\n        feeExempt[_address] = _isExempt;\r\n        emit SetFeeExempt(_address, _isExempt);\r\n    }\r\n\r\n    function setLimitExempt(address _address, bool _isExempt) external onlyOwner {\r\n        if(!_isExempt){\r\n            require(_address != lpPair, \"LP pair\");\r\n        }\r\n        limitExempt[_address] = _isExempt;\r\n        emit SetLimitExempt(_address, _isExempt);\r\n    }\r\n\r\n    function updateSwapTokensAmount(uint256 _amount) external onlyOwner{\r\n        require(_amount > 0);\r\n        require(_amount < totalSupply() * 5 / 100);\r\n        swapTokensAtAmt = _amount * (10**decimals());\r\n\r\n    }\r\n\r\n    function raiseMaxTxn(uint256 _maxTxn) external onlyOwner {\r\n        require(_maxTxn * (10**decimals()) > maxTxn, \"Only higher\");\r\n        require(_maxTxn * (10**decimals())<= totalSupply());\r\n        require(_maxTxn * (10**decimals()) >= (totalSupply() * 5 / 1000)/(10**decimals()), \"Too low\");\r\n        maxTxn = _maxTxn * (10**decimals());\r\n        emit UpdatedmaxTxn(maxTxn);\r\n    }\r\n\r\n    function raiseMaxWallet(uint256 _maxWallet) external onlyOwner {\r\n        require(_maxWallet * (10**decimals()) > maxWallet, \"Only higher\");\r\n        require(_maxWallet * (10**decimals()) <= totalSupply());\r\n        require(_maxWallet * (10**decimals()) >= (totalSupply() * 5 / 1000)/(10**decimals()), \"Too low\");\r\n        maxWallet = _maxWallet * (10**decimals());\r\n        emit UpdatedMaxWallet(maxWallet);\r\n    }\r\n\r\n    function lowerBuyTax(uint256 _buyTax) external onlyOwner {\r\n        require(_buyTax < totalBuyTax,\"Only lower\");\r\n        totalBuyTax = _buyTax;\r\n        emit UpdatedBuyTax(totalBuyTax);\r\n    }\r\n\r\n    function lowerSellTax(uint256 _sellTax) external onlyOwner {\r\n        require(_sellTax < totalSellTax,\"Only lower\");\r\n        totalSellTax = _sellTax;\r\n        emit UpdatedSellTax(totalSellTax);\r\n    }\r\n\r\n    function startTrading() external onlyOwner {\r\n        tradingActive = true;\r\n    }\r\n\r\n    function removeLimits() external {\r\n        //This function turns off all limits + taxes to make the token CEX-worthy. When renounced, can still be used by deployer\r\n        require(msg.sender == taxWallet);\r\n        limits = false;\r\n        maxTxn = totalSupply();\r\n        maxWallet = totalSupply();\r\n        totalBuyTax = 0;\r\n        totalSellTax = 0;\r\n        emit LimitsRemoved();\r\n    }\r\n\r\n    function airdropToWallets(address[] calldata wallets, uint256[] calldata amounts) external  {\r\n        require (msg.sender == creator, \"Done at contract creation only\");\r\n        require(tradingActive == false);\r\n        require(wallets.length == amounts.length, \"arrays length mismatch\");\r\n        for(uint256 i = 0; i < wallets.length; i++){\r\n            super._transfer(msg.sender, wallets[i], (amounts[i]* (10**18)));\r\n        }\r\n    }\r\n\r\n    function removeForeignTokens(address _token) external {\r\n        //this lets us recover non-main and non native tokens that get stuck in the contract\r\n        require(_token != address(this), \"cant take the tax tokens\");\r\n        uint256 _contractBalance = IERC20(_token).balanceOf(address(this));\r\n        SafeERC20.safeTransfer(IERC20(_token),taxWallet, _contractBalance);\r\n    }\r\n\r\n    function clearStuckBalance() external  onlyOwner{\r\n        uint256 amount = address(this).balance;\r\n        payable(taxWallet).transfer(amount);\r\n    }\r\n\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual override {\r\n\r\n        if(feeExempt[from] || feeExempt[to]){\r\n            super._transfer(from,to,amount);\r\n            return;\r\n        }\r\n        \r\n        checkLimits(from, to, amount);\r\n\r\n        amount -= takeFees(from, to, amount);\r\n\r\n        super._transfer(from,to,amount);\r\n    }\r\n\r\n    function checkLimits(address from, address to, uint256 amount) internal view {\r\n\r\n        require(tradingActive);\r\n\r\n        if(limits){\r\n            // buy\r\n            if (isPair[from] && !limitExempt[to]) {\r\n                require(amount <= maxTxn, \"Higher than max txn\");\r\n                require(amount + balanceOf(to) <= maxWallet, \"Higher than max wallet\");\r\n            } \r\n            // sell\r\n            else if (isPair[to] && !limitExempt[from]) {\r\n                require(amount <= maxTxn, \"higher than maxTxn.\");\r\n            }\r\n            //transfer\r\n            else if(!limitExempt[to]) {\r\n                require(amount + balanceOf(to) <= maxWallet, \"Higher than max wallet\");\r\n            }\r\n        }\r\n    }\r\n\r\n    function takeFees(address from, address to, uint256 amount) internal returns (uint256){\r\n\r\n        if(balanceOf(address(this)) >= swapTokensAtAmt && swapEnabled && !swapping && isPair[to]) {\r\n            swapping = true;\r\n            swapBack();\r\n            swapping = false;\r\n        }\r\n        \r\n        uint256 tax = 0;\r\n\r\n        // on sell\r\n        if (isPair[to] && totalSellTax > 0){\r\n            tax = amount * totalSellTax / 100;\r\n        }\r\n\r\n        // on buy\r\n        else if(isPair[from] && totalBuyTax > 0) {\r\n            tax = amount * totalBuyTax / 100;\r\n\r\n        }\r\n        \r\n        if(tax > 0){    \r\n            super._transfer(from, address(this), tax);\r\n        }\r\n\r\n        return tax;\r\n    }\r\n\r\n    function swapTokensForETH(uint256 tokenAmt) internal {\r\n\r\n        uint256 initialEthBalance = address(this).balance;\r\n\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this); \r\n        path[1] = address(router.WETH()); \r\n\r\n        router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmt,\r\n            0, \r\n            path,\r\n            address(this), \r\n            block.timestamp\r\n        );\r\n\r\n        uint256 ethReceived = address(this).balance - initialEthBalance; \r\n\r\n  \r\n        uint256 ethForWallet1 = ethReceived / 2;\r\n\r\n        payable(taxWallet).transfer(ethForWallet1);\r\n        uint256 ethForWallet2 = address(this).balance;\r\n        payable(burnWallet).transfer(ethForWallet2);\r\n    }\r\n\r\n\r\n\r\n    function swapBack() private {\r\n\r\n        uint256 swapAmount = balanceOf(address(this));\r\n\r\n        //imposes a max amount of how much contract can swap at once\r\n        if(swapAmount > swapTokensAtAmt * 5){\r\n            swapAmount = swapTokensAtAmt * 5;\r\n        }\r\n        \r\n        swapTokensForETH(swapAmount);\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"LimitsRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_isExempt\",\"type\":\"bool\"}],\"name\":\"SetFeeExempt\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_isExempt\",\"type\":\"bool\"}],\"name\":\"SetLimitExempt\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newAmt\",\"type\":\"uint256\"}],\"name\":\"UpdatedBuyTax\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMax\",\"type\":\"uint256\"}],\"name\":\"UpdatedMaxWallet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newAmt\",\"type\":\"uint256\"}],\"name\":\"UpdatedSellTax\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMax\",\"type\":\"uint256\"}],\"name\":\"UpdatedmaxTxn\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"wallets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"airdropToWallets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnWallet\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"clearStuckBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"doubleBurn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"feeExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"mainTokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"doge1TokenAmount\",\"type\":\"uint256\"}],\"name\":\"feedTheFire\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fuelUp\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isPair\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"limitExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limits\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_buyTax\",\"type\":\"uint256\"}],\"name\":\"lowerBuyTax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_sellTax\",\"type\":\"uint256\"}],\"name\":\"lowerSellTax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTxn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxWallet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxTxn\",\"type\":\"uint256\"}],\"name\":\"raiseMaxTxn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxWallet\",\"type\":\"uint256\"}],\"name\":\"raiseMaxWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"removeForeignTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"contract IDexRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"seeBurnStation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isExempt\",\"type\":\"bool\"}],\"name\":\"setFeeExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isExempt\",\"type\":\"bool\"}],\"name\":\"setLimitExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapTokensAtAmt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"taxWallet\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalBuyTax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSellTax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"updateSwapTokensAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "SD1", "CompilerVersion": "v0.8.23+commit.f704f362", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://8bb993f471c5d21228274b1296714fbab05b72a4f832b9606eae546d0e1e23e9"}