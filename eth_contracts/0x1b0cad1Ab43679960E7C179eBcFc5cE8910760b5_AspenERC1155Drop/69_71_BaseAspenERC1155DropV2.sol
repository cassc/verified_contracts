// SPDX-License-Identifier: Apache-2.0

// Generated by impl.ts. Will be overwritten.
// Filename: './BaseAspenERC1155DropV2.sol'

pragma solidity ^0.8.4;

import "../../api/impl/IAspenERC1155Drop.sol";
import "../../api/IAspenFeatures.sol";
import "../../api/IAspenVersioned.sol";
import "../../api/IMulticallable.sol";
import "../../api/standard/IERC1155.sol";
import "../../api/standard/IERC2981.sol";
import "../../api/standard/IERC4906.sol";
import "../../api/issuance/ISFTSupply.sol";
import "../../api/issuance/ISFTSupply.sol";
import "../../api/issuance/ISFTLimitSupply.sol";
import "../../api/issuance/ICedarSFTIssuance.sol";
import "../../api/issuance/ICedarSFTIssuance.sol";
import "../../api/issuance/ICedarSFTIssuance.sol";
import "../../api/royalties/IRoyalty.sol";
import "../../api/royalties/IRoyalty.sol";
import "../../api/baseURI/IUpdateBaseURI.sol";
import "../../api/baseURI/IUpdateBaseURI.sol";
import "../../api/metadata/IContractMetadata.sol";
import "../../api/metadata/IContractMetadata.sol";
import "../../api/metadata/ISFTMetadata.sol";
import "../../api/ownable/IOwnable.sol";
import "../../api/ownable/IOwnable.sol";
import "../../api/pausable/IPausable.sol";
import "../../api/pausable/IPausable.sol";
import "../../api/agreement/IAgreement.sol";
import "../../api/agreement/IAgreement.sol";
import "../../api/agreement/IAgreement.sol";
import "../../api/primarysale/IPrimarySale.sol";
import "../../api/primarysale/IPrimarySale.sol";
import "../../api/primarysale/IPrimarySale.sol";
import "../../api/royalties/IRoyalty.sol";
import "../../api/royalties/IRoyalty.sol";
import "../../api/royalties/IRoyalty.sol";
import "../../api/royalties/IPlatformFee.sol";
import "../../api/lazymint/ILazyMint.sol";
import "../../api/issuance/ISFTClaimCount.sol";

/// Delegate features
interface IDelegateBaseAspenERC1155DropV2 is IRestrictedERC4906V0, IDelegatedSFTSupplyV0, IRestrictedSFTLimitSupplyV1, IDelegatedSFTIssuanceV0, IRestrictedSFTIssuanceV4, IRestrictedRoyaltyV1, IDelegatedUpdateBaseURIV0, IRestrictedUpdateBaseURIV1, IRestrictedMetadataV2, IRestrictedOwnableV0, IDelegatedPausableV0, IRestrictedPausableV1, IDelegatedAgreementV0, IRestrictedAgreementV1, IRestrictedPrimarySaleV2, IRestrictedSFTPrimarySaleV0, IRestrictedOperatorFiltererV0, IRestrictedOperatorFilterToggleV0, IDelegatedPlatformFeeV0, IRestrictedLazyMintV1, IRestrictedSFTClaimCountV0 {}

/// Inherit from this base to implement introspection
abstract contract BaseAspenERC1155DropV2 is IAspenFeaturesV0, IAspenVersionedV2, IMulticallableV0, IERC1155V3, IERC2981V0, IPublicSFTSupplyV0, IPublicSFTIssuanceV4, IPublicRoyaltyV0, IPublicMetadataV0, IAspenSFTMetadataV1, IPublicOwnableV0, IPublicAgreementV1, IPublicPrimarySaleV1, IPublicOperatorFilterToggleV0 {
    function supportedFeatures() override public pure returns (string[] memory features) {
        features = new string[](32);
        features[0] = "IAspenFeatures.sol:IAspenFeaturesV0";
        features[1] = "IAspenVersioned.sol:IAspenVersionedV2";
        features[2] = "IMulticallable.sol:IMulticallableV0";
        features[3] = "issuance/ISFTSupply.sol:IPublicSFTSupplyV0";
        features[4] = "issuance/ISFTSupply.sol:IDelegatedSFTSupplyV0";
        features[5] = "issuance/ISFTLimitSupply.sol:IRestrictedSFTLimitSupplyV1";
        features[6] = "issuance/ICedarSFTIssuance.sol:IPublicSFTIssuanceV4";
        features[7] = "issuance/ICedarSFTIssuance.sol:IDelegatedSFTIssuanceV0";
        features[8] = "issuance/ICedarSFTIssuance.sol:IRestrictedSFTIssuanceV4";
        features[9] = "royalties/IRoyalty.sol:IPublicRoyaltyV0";
        features[10] = "royalties/IRoyalty.sol:IRestrictedRoyaltyV1";
        features[11] = "baseURI/IUpdateBaseURI.sol:IDelegatedUpdateBaseURIV0";
        features[12] = "baseURI/IUpdateBaseURI.sol:IRestrictedUpdateBaseURIV1";
        features[13] = "metadata/IContractMetadata.sol:IPublicMetadataV0";
        features[14] = "metadata/IContractMetadata.sol:IRestrictedMetadataV2";
        features[15] = "metadata/ISFTMetadata.sol:IAspenSFTMetadataV1";
        features[16] = "ownable/IOwnable.sol:IPublicOwnableV0";
        features[17] = "ownable/IOwnable.sol:IRestrictedOwnableV0";
        features[18] = "pausable/IPausable.sol:IDelegatedPausableV0";
        features[19] = "pausable/IPausable.sol:IRestrictedPausableV1";
        features[20] = "agreement/IAgreement.sol:IPublicAgreementV1";
        features[21] = "agreement/IAgreement.sol:IDelegatedAgreementV0";
        features[22] = "agreement/IAgreement.sol:IRestrictedAgreementV1";
        features[23] = "primarysale/IPrimarySale.sol:IPublicPrimarySaleV1";
        features[24] = "primarysale/IPrimarySale.sol:IRestrictedPrimarySaleV2";
        features[25] = "primarysale/IPrimarySale.sol:IRestrictedSFTPrimarySaleV0";
        features[26] = "royalties/IRoyalty.sol:IRestrictedOperatorFiltererV0";
        features[27] = "royalties/IRoyalty.sol:IPublicOperatorFilterToggleV0";
        features[28] = "royalties/IRoyalty.sol:IRestrictedOperatorFilterToggleV0";
        features[29] = "royalties/IPlatformFee.sol:IDelegatedPlatformFeeV0";
        features[30] = "lazymint/ILazyMint.sol:IRestrictedLazyMintV1";
        features[31] = "issuance/ISFTClaimCount.sol:IRestrictedSFTClaimCountV0";
    }

    /// This needs to be public to be callable from initialize via delegatecall
    function minorVersion() virtual override public pure returns (uint256 minor, uint256 patch);

    function implementationVersion() override public pure returns (uint256 major, uint256 minor, uint256 patch) {
        (minor, patch) = minorVersion();
        major = 2;
    }

    function implementationInterfaceId() virtual override public pure returns (string memory interfaceId) {
        interfaceId = "impl/IAspenERC1155Drop.sol:IAspenERC1155DropV2";
    }

    function supportsInterface(bytes4 interfaceID) virtual override public view returns (bool) {
        return (interfaceID != 0x0) && ((interfaceID != 0xffffffff) && ((interfaceID == 0x01ffc9a7) || ((interfaceID == type(IAspenFeaturesV0).interfaceId) || ((interfaceID == type(IAspenVersionedV2).interfaceId) || ((interfaceID == type(IMulticallableV0).interfaceId) || ((interfaceID == type(IERC1155V3).interfaceId) || ((interfaceID == type(IERC2981V0).interfaceId) || ((interfaceID == type(IRestrictedERC4906V0).interfaceId) || ((interfaceID == type(IPublicSFTSupplyV0).interfaceId) || ((interfaceID == type(IDelegatedSFTSupplyV0).interfaceId) || ((interfaceID == type(IRestrictedSFTLimitSupplyV1).interfaceId) || ((interfaceID == type(IPublicSFTIssuanceV4).interfaceId) || ((interfaceID == type(IDelegatedSFTIssuanceV0).interfaceId) || ((interfaceID == type(IRestrictedSFTIssuanceV4).interfaceId) || ((interfaceID == type(IPublicRoyaltyV0).interfaceId) || ((interfaceID == type(IRestrictedRoyaltyV1).interfaceId) || ((interfaceID == type(IDelegatedUpdateBaseURIV0).interfaceId) || ((interfaceID == type(IRestrictedUpdateBaseURIV1).interfaceId) || ((interfaceID == type(IPublicMetadataV0).interfaceId) || ((interfaceID == type(IRestrictedMetadataV2).interfaceId) || ((interfaceID == type(IAspenSFTMetadataV1).interfaceId) || ((interfaceID == type(IPublicOwnableV0).interfaceId) || ((interfaceID == type(IRestrictedOwnableV0).interfaceId) || ((interfaceID == type(IDelegatedPausableV0).interfaceId) || ((interfaceID == type(IRestrictedPausableV1).interfaceId) || ((interfaceID == type(IPublicAgreementV1).interfaceId) || ((interfaceID == type(IDelegatedAgreementV0).interfaceId) || ((interfaceID == type(IRestrictedAgreementV1).interfaceId) || ((interfaceID == type(IPublicPrimarySaleV1).interfaceId) || ((interfaceID == type(IRestrictedPrimarySaleV2).interfaceId) || ((interfaceID == type(IRestrictedSFTPrimarySaleV0).interfaceId) || ((interfaceID == type(IRestrictedOperatorFiltererV0).interfaceId) || ((interfaceID == type(IPublicOperatorFilterToggleV0).interfaceId) || ((interfaceID == type(IRestrictedOperatorFilterToggleV0).interfaceId) || ((interfaceID == type(IDelegatedPlatformFeeV0).interfaceId) || ((interfaceID == type(IRestrictedLazyMintV1).interfaceId) || ((interfaceID == type(IRestrictedSFTClaimCountV0).interfaceId) || (interfaceID == type(IAspenERC1155DropV2).interfaceId))))))))))))))))))))))))))))))))))))));
    }

    function isIAspenFeaturesV0() override public pure returns (bool) {
        return true;
    }
}