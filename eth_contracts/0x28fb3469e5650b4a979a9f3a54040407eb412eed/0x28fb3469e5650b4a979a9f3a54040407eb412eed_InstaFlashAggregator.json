{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/aggregator/mainnet/flashloan/helpers.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.0;\\n\\nimport \\\"./variables.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\ncontract Helper is Variables {\\n    using SafeERC20 for IERC20;\\n\\n    /**\\n     * @dev Delegate the calls to implementation.\\n     * @param _target Target address\\n     * @param _data CallData of function.\\n    */\\n    function spell(address _target, bytes memory _data) internal returns (bytes memory response) {\\n        require(_target != address(0), \\\"target-invalid\\\");\\n        assembly {\\n            let succeeded := delegatecall(gas(), _target, add(_data, 0x20), mload(_data), 0, 0)\\n            let size := returndatasize()\\n\\n            response := mload(0x40)\\n            mstore(0x40, add(response, and(add(add(size, 0x20), 0x1f), not(0x1f))))\\n            mstore(response, size)\\n            returndatacopy(add(response, 0x20), 0, size)\\n\\n            switch iszero(succeeded)\\n                case 1 {\\n                    // throw if delegatecall failed\\n                    returndatacopy(0x00, 0x00, size)\\n                    revert(0x00, size)\\n                }\\n        }\\n    }\\n\\n    /**\\n     * @dev Approves the token to the spender address with allowance amount.\\n     * @notice Approves the token to the spender address with allowance amount.\\n     * @param token_ token for which allowance is to be given.\\n     * @param spender_ the address to which the allowance is to be given.\\n     * @param amount_ amount of token.\\n     */\\n    function approve(\\n        address token_,\\n        address spender_,\\n        uint256 amount_\\n    ) internal {\\n        TokenInterface tokenContract_ = TokenInterface(token_);\\n        try tokenContract_.approve(spender_, amount_) {} catch {\\n            IERC20 token = IERC20(token_);\\n            token.safeApprove(spender_, 0);\\n            token.safeApprove(spender_, amount_);\\n        }\\n    }\\n\\n    /**\\n     * @dev Approves the tokens to the receiver address with allowance (amount + fee).\\n     * @notice Approves the tokens to the receiver address with allowance (amount + fee).\\n     * @param _instaLoanVariables struct which includes list of token addresses and amounts.\\n     * @param _fees list of premiums/fees for the corresponding addresses for flashloan.\\n     * @param _receiver address to which tokens have to be approved.\\n     */\\n    function safeApprove(\\n        FlashloanVariables memory _instaLoanVariables,\\n        uint256[] memory _fees,\\n        address _receiver\\n    ) internal {\\n        uint256 length_ = _instaLoanVariables._tokens.length;\\n        require(\\n            length_ == _instaLoanVariables._amounts.length,\\n            \\\"Lengths of parameters not same\\\"\\n        );\\n        require(length_ == _fees.length, \\\"Lengths of parameters not same\\\");\\n        for (uint256 i = 0; i < length_; i++) {\\n            approve(\\n                _instaLoanVariables._tokens[i],\\n                _receiver,\\n                _instaLoanVariables._amounts[i] + _fees[i]\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Transfers the tokens to the receiver address.\\n     * @notice Transfers the tokens to the receiver address.\\n     * @param _instaLoanVariables struct which includes list of token addresses and amounts.\\n     * @param _receiver address to which tokens have to be transferred.\\n     */\\n    function safeTransfer(\\n        FlashloanVariables memory _instaLoanVariables,\\n        address _receiver\\n    ) internal {\\n        uint256 length_ = _instaLoanVariables._tokens.length;\\n        require(\\n            length_ == _instaLoanVariables._amounts.length,\\n            \\\"Lengths of parameters not same\\\"\\n        );\\n        for (uint256 i = 0; i < length_; i++) {\\n            IERC20 token = IERC20(_instaLoanVariables._tokens[i]);\\n            token.safeTransfer(_receiver, _instaLoanVariables._amounts[i]);\\n        }\\n    }\\n\\n    /**\\n     * @dev Transfers the tokens to the receiver address (amount + fee).\\n     * @notice Transfers the tokens to the receiver address (amount + fee).\\n     * @param _instaLoanVariables struct which includes list of token addresses and amounts.\\n     * @param _fees list of fees for the respective tokens.\\n     * @param _receiver address to which tokens have to be transferred.\\n     */\\n    function safeTransferWithFee(\\n        FlashloanVariables memory _instaLoanVariables,\\n        uint256[] memory _fees,\\n        address _receiver\\n    ) internal {\\n        uint256 length_ = _instaLoanVariables._tokens.length;\\n        require(\\n            length_ == _instaLoanVariables._amounts.length,\\n            \\\"Lengths of parameters not same\\\"\\n        );\\n        require(length_ == _fees.length, \\\"Lengths of parameters not same\\\");\\n        for (uint256 i = 0; i < length_; i++) {\\n            IERC20 token = IERC20(_instaLoanVariables._tokens[i]);\\n            token.safeTransfer(\\n                _receiver,\\n                _instaLoanVariables._amounts[i] + _fees[i]\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Calculates the balances..\\n     * @notice Calculates the balances of the account passed for the tokens.\\n     * @param _tokens list of token addresses to calculate balance for.\\n     * @param _account account to calculate balance for.\\n     */\\n    function calculateBalances(address[] memory _tokens, address _account)\\n        internal\\n        view\\n        returns (uint256[] memory)\\n    {\\n        uint256 _length = _tokens.length;\\n        uint256[] memory balances_ = new uint256[](_length);\\n        for (uint256 i = 0; i < _length; i++) {\\n            IERC20 token = IERC20(_tokens[i]);\\n            balances_[i] = token.balanceOf(_account);\\n        }\\n        return balances_;\\n    }\\n\\n    /**\\n     * @dev Validates if the receiver sent the correct amounts of funds.\\n     * @notice Validates if the receiver sent the correct amounts of funds.\\n     * @param _instaLoanVariables struct which includes list of initial balances, final balances and fees for the respective tokens.\\n     */\\n    function validateFlashloan(FlashloanVariables memory _instaLoanVariables)\\n        internal\\n        pure\\n    {\\n        for (uint256 i; i < _instaLoanVariables._iniBals.length; i++) {\\n            uint minRequiredBalance_ = _instaLoanVariables._iniBals[i] + _instaLoanVariables._instaFees[i];\\n\\n            require(\\n                minRequiredBalance_ <=\\n                    _instaLoanVariables._finBals[i],\\n                \\\"amount-paid-less\\\"\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Validates if token addresses are unique. Just need to check adjacent tokens as the array was sorted first\\n     * @notice Validates if token addresses are unique.\\n     * @param _tokens list of token addresses.\\n     */\\n    function validateTokens(address[] memory _tokens) internal pure {\\n        for (uint256 i = 0; i < _tokens.length - 1; i++) {\\n            require(_tokens[i] != _tokens[i + 1], \\\"non-unique-tokens\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns fee for the passed route in BPS.\\n     * @notice Returns fee for the passed route in BPS. 1 BPS == 0.01%.\\n     * @param _route route number for flashloan.\\n     */\\n    function calculateFeeBPS(uint256 _route, address account_)\\n        public\\n        view\\n        returns (uint256 BPS_)\\n    {\\n        if (_route == 1) {\\n            BPS_ = aaveV2Lending.FLASHLOAN_PREMIUM_TOTAL();\\n        } else if (_route == 2 || _route == 3 || _route == 4) {\\n            BPS_ = 0;\\n        } else if (_route == 5 || _route == 6 || _route == 7) {\\n            BPS_ =\\n                (\\n                    balancerLending\\n                        .getProtocolFeesCollector()\\n                        .getFlashLoanFeePercentage()\\n                ) *\\n                100;\\n        } else if (_route == 9) {\\n            BPS_ = aaveV3Lending.FLASHLOAN_PREMIUM_TOTAL();\\n        } else if (_route == 10) {\\n            BPS_ = sparkLending.FLASHLOAN_PREMIUM_TOTAL();\\n        } else {\\n            revert(\\\"Invalid source\\\");\\n        }\\n\\n        if (!isWhitelisted[account_] && BPS_ < InstaFeeBPS) {\\n            BPS_ = InstaFeeBPS;\\n        }\\n    }\\n\\n    /**\\n     * @dev Calculate fees for the respective amounts and fee in BPS passed.\\n     * @notice Calculate fees for the respective amounts and fee in BPS passed. 1 BPS == 0.01%.\\n     * @param _amounts list of amounts.\\n     * @param _BPS fee in BPS.\\n     */\\n    function calculateFees(uint256[] memory _amounts, uint256 _BPS)\\n        internal\\n        pure\\n        returns (uint256[] memory)\\n    {\\n        uint256 length_ = _amounts.length;\\n        uint256[] memory InstaFees = new uint256[](length_);\\n        for (uint256 i = 0; i < length_; i++) {\\n            InstaFees[i] = (_amounts[i] * _BPS) / (10**4);\\n        }\\n        return InstaFees;\\n    }\\n\\n    /**\\n     * @dev Sort the tokens and amounts arrays according to token addresses.\\n     * @notice Sort the tokens and amounts arrays according to token addresses.\\n     * @param _tokens list of token addresses.\\n     * @param _amounts list of respective amounts.\\n     */\\n    function bubbleSort(address[] memory _tokens, uint256[] memory _amounts)\\n        internal\\n        pure\\n        returns (address[] memory, uint256[] memory)\\n    {\\n        for (uint256 i = 0; i < _tokens.length - 1; i++) {\\n            for (uint256 j = 0; j < _tokens.length - i - 1; j++) {\\n                if (_tokens[j] > _tokens[j + 1]) {\\n                    (\\n                        _tokens[j],\\n                        _tokens[j + 1],\\n                        _amounts[j],\\n                        _amounts[j + 1]\\n                    ) = (\\n                        _tokens[j + 1],\\n                        _tokens[j],\\n                        _amounts[j + 1],\\n                        _amounts[j]\\n                    );\\n                }\\n            }\\n        }\\n        return (_tokens, _amounts);\\n    }\\n\\n    /**\\n     * @dev Returns to wEth amount to be borrowed.\\n     * @notice Returns to wEth amount to be borrowed.\\n     */\\n    function getWEthBorrowAmount() internal view returns (uint256) {\\n        uint256 amount_ = wethToken.balanceOf(address(balancerLending));\\n        return (amount_ * wethBorrowAmountPercentage) / 100;\\n    }\\n\\n    /**\\n     * @dev Returns to true if the passed address is a DSA else returns false.\\n     * @notice Returns to true if the passed address is a DSA else returns false.\\n     * @param _account account to check for, if DSA.\\n     */\\n    function checkIfDsa(address _account) internal view returns (bool) {\\n        return instaList.accountID(_account) > 0;\\n    }\\n\\n    /**\\n     * @dev  better checking by double encoding the data.\\n     * @notice better checking by double encoding the data.\\n     * @param data_ data passed.\\n     */\\n    modifier verifyDataHash(bytes memory data_) {\\n        bytes32 dataHash_ = keccak256(data_);\\n        require(\\n            dataHash_ == dataHash && dataHash_ != bytes32(0),\\n            \\\"invalid-data-hash\\\"\\n        );\\n        require(status == 2, \\\"already-entered\\\");\\n        dataHash = bytes32(0);\\n        _;\\n        status = 1;\\n    }\\n\\n    /**\\n     * @dev reentrancy gaurd.\\n     * @notice reentrancy gaurd.\\n     */\\n    modifier reentrancy() {\\n        require(status == 1, \\\"already-entered\\\");\\n        status = 2;\\n        _;\\n        require(status == 1, \\\"already-entered\\\");\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/aggregator/mainnet/flashloan/interfaces.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface InstaFlashReceiverInterface {\\n    function executeOperation(\\n        address[] calldata assets,\\n        uint256[] calldata amounts,\\n        uint256[] calldata premiums,\\n        address initiator,\\n        bytes calldata _data\\n    ) external returns (bool);\\n}\\n\\ninterface IndexInterface {\\n    function master() external view returns (address);\\n\\n    function list() external view returns (address);\\n}\\n\\ninterface ListInterface {\\n    function accountID(address) external view returns (uint64);\\n}\\n\\ninterface TokenInterface {\\n    function approve(address, uint256) external;\\n\\n    function transfer(address, uint256) external;\\n\\n    function transferFrom(\\n        address,\\n        address,\\n        uint256\\n    ) external;\\n\\n    function deposit() external payable;\\n\\n    function withdraw(uint256) external;\\n\\n    function balanceOf(address) external view returns (uint256);\\n\\n    function decimals() external view returns (uint256);\\n\\n    function totalSupply() external view returns (uint256);\\n}\\n\\ninterface CTokenInterface {\\n    function mint(uint256) external returns (uint256);\\n\\n    function redeemUnderlying(uint256) external returns (uint256);\\n\\n    function borrow(uint256) external returns (uint256);\\n\\n    function repayBorrow(uint256) external returns (uint256);\\n\\n    function underlying() external view returns (address);\\n}\\n\\ninterface CEthInterface {\\n    function mint() external payable;\\n\\n    function redeemUnderlying(uint256) external returns (uint256);\\n\\n    function borrow(uint256) external returns (uint256);\\n\\n    function repayBorrow() external payable;\\n}\\n\\ninterface IWeth is IERC20 {\\n    function deposit() external payable;\\n\\n    function withdraw(uint256 amount) external;\\n}\\n\\ninterface Comptroller {\\n    function enterMarkets(address[] calldata)\\n        external\\n        returns (uint256[] memory);\\n\\n    function markets(address)\\n        external\\n        view\\n        returns (\\n            bool,\\n            uint256,\\n            bool\\n        );\\n\\n    function getAllMarkets() external view returns (CTokenInterface[] memory);\\n}\\n\\ninterface IAaveLending {\\n    function flashLoan(\\n        address receiverAddress,\\n        address[] calldata assets,\\n        uint256[] calldata amounts,\\n        uint256[] calldata modes,\\n        address onBehalfOf,\\n        bytes calldata params,\\n        uint16 referralCode\\n    ) external;\\n\\n    function FLASHLOAN_PREMIUM_TOTAL() external view returns (uint256);\\n\\n    function deposit(\\n        address asset,\\n        uint256 amount,\\n        address onBehalfOf,\\n        uint16 referralCode\\n    ) external;\\n\\n    function withdraw(\\n        address asset,\\n        uint256 amount,\\n        address to\\n    ) external;\\n\\n    function borrow(\\n        address asset,\\n        uint256 amount,\\n        uint256 interestRateMode,\\n        uint16 referralCode,\\n        address onBehalfOf\\n    ) external;\\n\\n    function repay(\\n        address asset,\\n        uint256 amount,\\n        uint256 rateMode,\\n        address onBehalfOf\\n    ) external;\\n\\n    function setUserUseReserveAsCollateral(address asset, bool useAsCollateral)\\n        external;\\n}\\n\\ninterface IERC3156FlashLender {\\n    function maxFlashLoan(address token) external view returns (uint256);\\n\\n    function flashFee(address token, uint256 amount)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function flashLoan(\\n        InstaFlashReceiverInterface receiver,\\n        address token,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external returns (bool);\\n\\n    function toll() external view returns (uint256);\\n}\\n\\ninterface ProtocolFeesCollector {\\n    function getFlashLoanFeePercentage() external view returns (uint256);\\n}\\n\\ninterface IBalancerLending {\\n    function flashLoan(\\n        InstaFlashReceiverInterface recipient,\\n        IERC20[] memory tokens,\\n        uint256[] memory amounts,\\n        bytes memory userData\\n    ) external;\\n\\n    function getProtocolFeesCollector()\\n        external\\n        view\\n        returns (ProtocolFeesCollector);\\n}\\n\\ninterface IWstETH {\\n    function getWstETHByStETH(uint256 _stETHAmount)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getStETHByWstETH(uint256 _wstETHAmount)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function stEthPerToken() external view returns (uint256);\\n\\n    function tokensPerStEth() external view returns (uint256);\\n\\n    function wrap(uint256 _stETHAmount) external returns (uint256);\\n\\n    function unwrap(uint256 _wstETHAmount) external returns (uint256);\\n}\\n\\ninterface IAaveV3Lending {\\n    function flashLoan(\\n        address receiverAddress,\\n        address[] calldata assets,\\n        uint256[] calldata amounts,\\n        uint256[] calldata modes,\\n        address onBehalfOf,\\n        bytes calldata params,\\n        uint16 referralCode\\n    ) external;\\n\\n    function FLASHLOAN_PREMIUM_TOTAL() external view returns (uint128);\\n}\\n\\ninterface ISparkLending {\\n    function flashLoan(\\n        address receiverAddress,\\n        address[] calldata assets,\\n        uint256[] calldata amounts,\\n        uint256[] calldata modes,\\n        address onBehalfOf,\\n        bytes calldata params,\\n        uint16 referralCode\\n    ) external;\\n\\n    function FLASHLOAN_PREMIUM_TOTAL() external view returns (uint128);\\n}\\n\"\r\n    },\r\n    \"contracts/aggregator/mainnet/flashloan/main.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Flashloan.\\n * @dev Flashloan aggregator.\\n */\\n\\nimport \\\"./helpers.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\ncontract AdminModule is Helper {\\n    event updateOwnerLog(address indexed oldOwner, address indexed newOwner);\\n\\n    event updateWhitelistLog(\\n        address indexed account,\\n        bool indexed isWhitelisted_\\n    );\\n\\n    /**\\n     * @dev owner gaurd.\\n     * @notice owner gaurd.\\n     */\\n    modifier onlyOwner() {\\n        require(msg.sender == owner, \\\"not-owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Update owner.\\n     * @notice Update owner.\\n     * @param newOwner_ address of new owner.\\n     */\\n    function updateOwner(address newOwner_) external onlyOwner {\\n        address oldOwner_ = owner;\\n        owner = newOwner_;\\n        emit updateOwnerLog(oldOwner_, newOwner_);\\n    }\\n\\n    /**\\n     * @dev Update whitelist.\\n     * @notice Update whitelist.\\n     * @param account_ address to update the whitelist for.\\n     * @param whitelist_ want to whitelist -> true, else false.\\n     */\\n    function updateWhitelist(address account_, bool whitelist_)\\n        external\\n        onlyOwner\\n    {\\n        isWhitelisted[account_] = whitelist_;\\n        emit updateWhitelistLog(account_, whitelist_);\\n    }\\n}\\n\\ncontract Setups is AdminModule {\\n    using SafeERC20 for IERC20;\\n\\n    /**\\n     * @dev Add to token to cToken mapping.\\n     * @notice Add to token to cToken mapping.\\n     * @param _cTokens list of cToken addresses to be added to the mapping.\\n     */\\n    function addTokenToCToken(address[] memory _cTokens) public {\\n        for (uint256 i = 0; i < _cTokens.length; i++) {\\n            (bool isMarket_, , ) = troller.markets(_cTokens[i]);\\n            require(isMarket_, \\\"unvalid-ctoken\\\");\\n            address token_ = CTokenInterface(_cTokens[i]).underlying();\\n            require(tokenToCToken[token_] == address((0)), \\\"already-added\\\");\\n            tokenToCToken[token_] = _cTokens[i];\\n            IERC20(token_).safeApprove(_cTokens[i], type(uint256).max);\\n        }\\n    }\\n}\\n\\ncontract FlashAggregator is Setups {\\n    using SafeERC20 for IERC20;\\n\\n    event LogFlashloan(\\n        address indexed account,\\n        uint256 indexed route,\\n        address[] tokens,\\n        uint256[] amounts\\n    );\\n\\n    /**\\n     * @dev Callback function for aave flashloan.\\n     * @notice Callback function for aave flashloan.\\n     * @param _assets list of asset addresses for flashloan.\\n     * @param _amounts list of amounts for the corresponding assets for flashloan.\\n     * @param _premiums list of premiums/fees for the corresponding addresses for flashloan.\\n     * @param _initiator initiator address for flashloan.\\n     * @param _data extra data passed.\\n     */\\n    function executeOperation(\\n        address[] memory _assets,\\n        uint256[] memory _amounts,\\n        uint256[] memory _premiums,\\n        address _initiator,\\n        bytes memory _data\\n    ) external verifyDataHash(_data) returns (bool) {\\n        require(_initiator == address(this), \\\"not-same-sender\\\");\\n        require(\\n            msg.sender == aaveV2LendingAddr || msg.sender == aaveV3LendingAddr || msg.sender == sparkLendingAddr,\\n            \\\"not-aave-sender\\\"\\n        );\\n\\n        FlashloanVariables memory instaLoanVariables_;\\n        DataHelper memory helper;\\n\\n        (\\n            helper.route_,\\n            helper.tokens_,\\n            helper.amounts_,\\n            helper.sender_,\\n            helper.data_\\n        ) = abi.decode(_data, (uint256, address[], uint256[], address, bytes));\\n\\n        instaLoanVariables_._tokens = helper.tokens_;\\n        instaLoanVariables_._amounts = helper.amounts_;\\n        instaLoanVariables_._instaFees = calculateFees(\\n            helper.amounts_,\\n            calculateFeeBPS(helper.route_, helper.sender_)\\n        );\\n\\n        for (uint i; i < _assets.length; i++) {\\n            if (helper.route_ == 1) {\\n                approve(_assets[i], aaveV2LendingAddr, _amounts[i] + _premiums[i]);\\n            } else if (helper.route_ == 9) {\\n                approve(_assets[i], aaveV3LendingAddr, _amounts[i] + _premiums[i]);\\n            } else if (helper.route_ == 10) {\\n                approve(_assets[i], sparkLendingAddr, _amounts[i] + _premiums[i]);\\n            } else {\\n                revert(\\\"wrong-route\\\");\\n            }\\n        }\\n\\n        if (helper.route_ == 9 || helper.route_ == 10) {\\n            if (helper.tokens_[0] == stEthTokenAddr) {\\n                wstEthToken.unwrap(_amounts[0]);\\n            }\\n        }\\n\\n        instaLoanVariables_._iniBals = calculateBalances(\\n            helper.tokens_,\\n            address(this)\\n        );\\n\\n        safeTransfer(instaLoanVariables_, helper.sender_);\\n\\n        if (checkIfDsa(helper.sender_)) {\\n            Address.functionCall(\\n                helper.sender_,\\n                helper.data_,\\n                \\\"DSA-flashloan-fallback-failed\\\"\\n            );\\n        } else {\\n            InstaFlashReceiverInterface(helper.sender_).executeOperation(\\n                helper.tokens_,\\n                helper.amounts_,\\n                instaLoanVariables_._instaFees,\\n                helper.sender_,\\n                helper.data_\\n            );\\n        }\\n\\n        instaLoanVariables_._finBals = calculateBalances(\\n            helper.tokens_,\\n            address(this)\\n        );\\n\\n        if (helper.route_ == 9 || helper.route_ == 10) {\\n            if (helper.tokens_[0] == stEthTokenAddr) {\\n                instaLoanVariables_._finBals[0] = instaLoanVariables_._finBals[0] + 10; // Taking 10 wei extra buffer for steth\\n                wstEthToken.wrap(helper.amounts_[0]);\\n            }\\n        }\\n        \\n        validateFlashloan(instaLoanVariables_);\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Fallback function for makerdao flashloan.\\n     * @notice Fallback function for makerdao flashloan.\\n     * @param _initiator initiator address for flashloan.\\n     * @param _amount DAI amount for flashloan.\\n     * @param _fee fee for the flashloan.\\n     * @param _data extra data passed(includes route info aswell).\\n     */\\n    function onFlashLoan(\\n        address _initiator,\\n        address,\\n        uint256 _amount,\\n        uint256 _fee,\\n        bytes calldata _data\\n    ) external verifyDataHash(_data) returns (bytes32) {\\n        require(_initiator == address(this), \\\"not-same-sender\\\");\\n        require(msg.sender == address(makerLending), \\\"not-maker-sender\\\");\\n\\n        FlashloanVariables memory instaLoanVariables_;\\n\\n        (\\n            uint256 route_,\\n            address[] memory tokens_,\\n            uint256[] memory amounts_,\\n            address sender_,\\n            bytes memory data_\\n        ) = abi.decode(_data, (uint256, address[], uint256[], address, bytes));\\n\\n        instaLoanVariables_._tokens = tokens_;\\n        instaLoanVariables_._amounts = amounts_;\\n        instaLoanVariables_._iniBals = calculateBalances(\\n            tokens_,\\n            address(this)\\n        );\\n        instaLoanVariables_._instaFees = calculateFees(\\n            amounts_,\\n            calculateFeeBPS(route_, sender_)\\n        );\\n\\n        if (route_ == 2) {\\n            safeTransfer(instaLoanVariables_, sender_);\\n\\n            if (checkIfDsa(sender_)) {\\n                Address.functionCall(\\n                    sender_,\\n                    data_,\\n                    \\\"DSA-flashloan-fallback-failed\\\"\\n                );\\n            } else {\\n                InstaFlashReceiverInterface(sender_).executeOperation(\\n                    tokens_,\\n                    amounts_,\\n                    instaLoanVariables_._instaFees,\\n                    sender_,\\n                    data_\\n                );\\n            }\\n        } else if (route_ == 3 || route_ == 4) {\\n            require(_fee == 0, \\\"flash-DAI-fee-not-0\\\");\\n\\n            address[] memory _daiTokenList = new address[](1);\\n            uint256[] memory _daiTokenAmountsList = new uint256[](1);\\n            _daiTokenList[0] = daiTokenAddr;\\n            _daiTokenAmountsList[0] = _amount;\\n\\n            if (route_ == 3) {\\n                spell(\\n                    ADVANCED_ROUTES_IMPL,\\n                    abi.encodeWithSignature(\\n                        \\\"compoundSupplyAndBorrow(address[],uint256[],address[],uint256[])\\\",\\n                        _daiTokenList,\\n                        _daiTokenAmountsList,\\n                        tokens_,\\n                        amounts_\\n                    )\\n                );\\n            } else {\\n                spell(\\n                    ADVANCED_ROUTES_IMPL,\\n                    abi.encodeWithSignature(\\n                        \\\"aaveSupplyAndBorrow(address[],uint256[],address[],uint256[])\\\",\\n                        _daiTokenList,\\n                        _daiTokenAmountsList,\\n                        tokens_,\\n                        amounts_\\n                    )\\n                );\\n            }\\n\\n            safeTransfer(instaLoanVariables_, sender_);\\n\\n            if (checkIfDsa(sender_)) {\\n                Address.functionCall(\\n                    sender_,\\n                    data_,\\n                    \\\"DSA-flashloan-fallback-failed\\\"\\n                );\\n            } else {\\n                InstaFlashReceiverInterface(sender_).executeOperation(\\n                    tokens_,\\n                    amounts_,\\n                    instaLoanVariables_._instaFees,\\n                    sender_,\\n                    data_\\n                );\\n            }\\n\\n            if (route_ == 3) {\\n                spell(\\n                    ADVANCED_ROUTES_IMPL,\\n                    abi.encodeWithSignature(\\n                        \\\"compoundPaybackAndWithdraw(address[],uint256[],address[],uint256[])\\\",\\n                        tokens_,\\n                        amounts_,\\n                        _daiTokenList,\\n                        _daiTokenAmountsList\\n                    )\\n                );\\n            } else {\\n                spell(\\n                    ADVANCED_ROUTES_IMPL,\\n                    abi.encodeWithSignature(\\n                        \\\"aavePaybackAndWithdraw(address[],uint256[],address[],uint256[])\\\",\\n                        tokens_,\\n                        amounts_,\\n                        _daiTokenList,\\n                        _daiTokenAmountsList\\n                    )\\n                );\\n            }\\n        } else {\\n            revert(\\\"wrong-route\\\");\\n        }\\n\\n        instaLoanVariables_._finBals = calculateBalances(\\n            tokens_,\\n            address(this)\\n        );\\n        validateFlashloan(instaLoanVariables_);\\n\\n        return keccak256(\\\"ERC3156FlashBorrower.onFlashLoan\\\");\\n    }\\n\\n    struct DataHelper {\\n        uint256 route_;\\n        address[] tokens_;\\n        uint256[] amounts_;\\n        address sender_;\\n        bytes data_;\\n    }\\n\\n    /**\\n     * @dev Fallback function for balancer flashloan.\\n     * @notice Fallback function for balancer flashloan.\\n     * @param _amounts list of amounts for the corresponding assets or amount of ether to borrow as collateral for flashloan.\\n     * @param _fees list of fees for the corresponding addresses for flashloan.\\n     * @param _data extra data passed(includes route info aswell).\\n     */\\n    function receiveFlashLoan(\\n        IERC20[] memory,\\n        uint256[] memory _amounts,\\n        uint256[] memory _fees,\\n        bytes memory _data\\n    ) external verifyDataHash(_data) {\\n        require(msg.sender == address(balancerLending), \\\"not-balancer-sender\\\");\\n\\n        FlashloanVariables memory instaLoanVariables_;\\n        DataHelper memory helper;\\n\\n        (\\n            helper.route_,\\n            helper.tokens_,\\n            helper.amounts_,\\n            helper.sender_,\\n            helper.data_\\n        ) = abi.decode(_data, (uint256, address[], uint256[], address, bytes));\\n\\n        instaLoanVariables_._tokens = helper.tokens_;\\n        instaLoanVariables_._amounts = helper.amounts_;\\n        instaLoanVariables_._iniBals = calculateBalances(\\n            helper.tokens_,\\n            address(this)\\n        );\\n        instaLoanVariables_._instaFees = calculateFees(\\n            helper.amounts_,\\n            calculateFeeBPS(helper.route_, helper.sender_)\\n        );\\n\\n        if (helper.route_ == 5) {\\n            if (helper.tokens_[0] == stEthTokenAddr) {\\n                wstEthToken.unwrap(_amounts[0]);\\n            }\\n            safeTransfer(instaLoanVariables_, helper.sender_);\\n            if (checkIfDsa(helper.sender_)) {\\n                Address.functionCall(\\n                    helper.sender_,\\n                    helper.data_,\\n                    \\\"DSA-flashloan-fallback-failed\\\"\\n                );\\n            } else {\\n                InstaFlashReceiverInterface(helper.sender_).executeOperation(\\n                    helper.tokens_,\\n                    helper.amounts_,\\n                    instaLoanVariables_._instaFees,\\n                    helper.sender_,\\n                    helper.data_\\n                );\\n            }\\n            if (helper.tokens_[0] == stEthTokenAddr) {\\n                wstEthToken.wrap(helper.amounts_[0]);\\n            }\\n\\n            instaLoanVariables_._finBals = calculateBalances(\\n                helper.tokens_,\\n                address(this)\\n            );\\n            if (helper.tokens_[0] == stEthTokenAddr) {\\n                // adding 10 wei to avoid any possible decimal errors in final calculations\\n                instaLoanVariables_._finBals[0] =\\n                    instaLoanVariables_._finBals[0] +\\n                    10;\\n                instaLoanVariables_._tokens[0] = address(wstEthToken);\\n                instaLoanVariables_._amounts[0] = _amounts[0];\\n            }\\n            validateFlashloan(instaLoanVariables_);\\n            safeTransferWithFee(\\n                instaLoanVariables_,\\n                _fees,\\n                address(balancerLending)\\n            );\\n        } else if (helper.route_ == 6 || helper.route_ == 7) {\\n            require(_fees[0] == 0, \\\"flash-ETH-fee-not-0\\\");\\n\\n            address[] memory wEthTokenList = new address[](1);\\n            wEthTokenList[0] = address(wethToken);\\n\\n            if (helper.route_ == 6) {\\n                spell(\\n                    ADVANCED_ROUTES_IMPL,\\n                    abi.encodeWithSignature(\\n                        \\\"compoundSupplyAndBorrow(address[],uint256[],address[],uint256[])\\\",\\n                        wEthTokenList,\\n                        _amounts,\\n                        helper.tokens_,\\n                        helper.amounts_\\n                    )\\n                );\\n            } else {\\n                 spell(\\n                    ADVANCED_ROUTES_IMPL,\\n                    abi.encodeWithSignature(\\n                        \\\"aaveSupplyAndBorrow(address[],uint256[],address[],uint256[])\\\",\\n                        wEthTokenList,\\n                        _amounts,\\n                        helper.tokens_,\\n                        helper.amounts_\\n                    )\\n                );\\n            }\\n\\n            safeTransfer(instaLoanVariables_, helper.sender_);\\n\\n            if (checkIfDsa(helper.sender_)) {\\n                Address.functionCall(\\n                    helper.sender_,\\n                    helper.data_,\\n                    \\\"DSA-flashloan-fallback-failed\\\"\\n                );\\n            } else {\\n                InstaFlashReceiverInterface(helper.sender_).executeOperation(\\n                    helper.tokens_,\\n                    helper.amounts_,\\n                    instaLoanVariables_._instaFees,\\n                    helper.sender_,\\n                    helper.data_\\n                );\\n            }\\n\\n            if (helper.route_ == 6) {\\n                spell(\\n                    ADVANCED_ROUTES_IMPL,\\n                    abi.encodeWithSignature(\\n                        \\\"compoundPaybackAndWithdraw(address[],uint256[],address[],uint256[])\\\",\\n                        helper.tokens_,\\n                        helper.amounts_,\\n                        wEthTokenList,\\n                        _amounts\\n                    )\\n                );\\n            } else {\\n                spell(\\n                    ADVANCED_ROUTES_IMPL,\\n                    abi.encodeWithSignature(\\n                        \\\"aavePaybackAndWithdraw(address[],uint256[],address[],uint256[])\\\",\\n                        helper.tokens_,\\n                        helper.amounts_,\\n                        wEthTokenList,\\n                        _amounts\\n                    )\\n                );\\n            }\\n            instaLoanVariables_._finBals = calculateBalances(\\n                helper.tokens_,\\n                address(this)\\n            );\\n            validateFlashloan(instaLoanVariables_);\\n            instaLoanVariables_._tokens = wEthTokenList;\\n            instaLoanVariables_._amounts = _amounts;\\n            safeTransferWithFee(\\n                instaLoanVariables_,\\n                _fees,\\n                address(balancerLending)\\n            );\\n        } else {\\n            revert(\\\"wrong-route\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Middle function for route 1, 9 and 10.\\n     * @notice Middle function for route 1, 9 and 10.\\n     * @param _tokens list of token addresses for flashloan.\\n     * @param _amounts list of amounts for the corresponding assets or amount of ether to borrow as collateral for flashloan.\\n     * @param _data extra data passed.\\n     */\\n    function routeAaveAndSpark(\\n        uint256 route,\\n        address[] memory _tokens,\\n        uint256[] memory _amounts,\\n        bytes memory _data\\n    ) internal {\\n        bytes memory data_ = abi.encode(\\n            route,\\n            _tokens,\\n            _amounts,\\n            msg.sender,\\n            _data\\n        );\\n        uint256 length_ = _tokens.length;\\n        uint256[] memory _modes = new uint256[](length_);\\n        for (uint256 i = 0; i < length_; i++) {\\n            _modes[i] = 0;\\n        }\\n        dataHash = bytes32(keccak256(data_));\\n\\n        if (route == 1) {\\n            aaveV2Lending.flashLoan(\\n                address(this),\\n                _tokens,\\n                _amounts,\\n                _modes,\\n                address(0),\\n                data_,\\n                3228\\n            );\\n        } else if (route == 9) {\\n            if (_tokens[0] == stEthTokenAddr) {\\n                require(length_ == 1, \\\"steth-length-should-be-1\\\");\\n                _tokens[0] = address(wstEthToken);\\n                _amounts[0] = wstEthToken.getWstETHByStETH(_amounts[0]);\\n            }\\n            aaveV3Lending.flashLoan(\\n                address(this),\\n                _tokens,\\n                _amounts,\\n                _modes,\\n                address(0),\\n                data_,\\n                3228\\n            );\\n        } else if (route == 10) {\\n            if (_tokens[0] == stEthTokenAddr) {\\n                require(length_ == 1, \\\"steth-length-should-be-1\\\");\\n                _tokens[0] = address(wstEthToken);\\n                _amounts[0] = wstEthToken.getWstETHByStETH(_amounts[0]);\\n            }\\n            sparkLending.flashLoan(\\n                address(this),\\n                _tokens,\\n                _amounts,\\n                _modes,\\n                address(0),\\n                data_,\\n                3228\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Middle function for route 2.\\n     * @notice Middle function for route 2.\\n     * @param _token token address for flashloan(DAI).\\n     * @param _amount DAI amount for flashloan.\\n     * @param _data extra data passed.\\n     */\\n    function routeMaker(\\n        address _token,\\n        uint256 _amount,\\n        bytes memory _data\\n    ) internal {\\n        address[] memory tokens_ = new address[](1);\\n        uint256[] memory amounts_ = new uint256[](1);\\n        tokens_[0] = _token;\\n        amounts_[0] = _amount;\\n\\n        bytes memory data_ = abi.encode(\\n            2,\\n            tokens_,\\n            amounts_,\\n            msg.sender,\\n            _data\\n        );\\n        dataHash = bytes32(keccak256(data_));\\n        makerLending.flashLoan(\\n            InstaFlashReceiverInterface(address(this)),\\n            _token,\\n            _amount,\\n            data_\\n        );\\n    }\\n\\n    /**\\n     * @dev Middle function for route 3.\\n     * @notice Middle function for route 3.\\n     * @param _tokens token addresses for flashloan.\\n     * @param _amounts list of amounts for the corresponding assets.\\n     * @param _data extra data passed.\\n     */\\n    function routeMakerCompound(\\n        address[] memory _tokens,\\n        uint256[] memory _amounts,\\n        bytes memory _data\\n    ) internal {\\n        bytes memory data_ = abi.encode(\\n            3,\\n            _tokens,\\n            _amounts,\\n            msg.sender,\\n            _data\\n        );\\n        dataHash = bytes32(keccak256(data_));\\n        makerLending.flashLoan(\\n            InstaFlashReceiverInterface(address(this)),\\n            daiTokenAddr,\\n            daiBorrowAmount,\\n            data_\\n        );\\n    }\\n\\n    /**\\n     * @dev Middle function for route 4.\\n     * @notice Middle function for route 4.\\n     * @param _tokens token addresses for flashloan.\\n     * @param _amounts list of amounts for the corresponding assets.\\n     * @param _data extra data passed.\\n     */\\n    function routeMakerAave(\\n        address[] memory _tokens,\\n        uint256[] memory _amounts,\\n        bytes memory _data\\n    ) internal {\\n        bytes memory data_ = abi.encode(\\n            4,\\n            _tokens,\\n            _amounts,\\n            msg.sender,\\n            _data\\n        );\\n        dataHash = bytes32(keccak256(data_));\\n        makerLending.flashLoan(\\n            InstaFlashReceiverInterface(address(this)),\\n            daiTokenAddr,\\n            daiBorrowAmount,\\n            data_\\n        );\\n    }\\n\\n    /**\\n     * @dev Middle function for route 5.\\n     * @notice Middle function for route 5.\\n     * @param _tokens token addresses for flashloan.\\n     * @param _amounts list of amounts for the corresponding assets.\\n     * @param _data extra data passed.\\n     */\\n    function routeBalancer(\\n        address[] memory _tokens,\\n        uint256[] memory _amounts,\\n        bytes memory _data\\n    ) internal {\\n        uint256 length_ = _tokens.length;\\n        IERC20[] memory tokens_ = new IERC20[](length_);\\n        for (uint256 i = 0; i < length_; i++) {\\n            tokens_[i] = IERC20(_tokens[i]);\\n        }\\n        bytes memory data_ = abi.encode(\\n            5,\\n            _tokens,\\n            _amounts,\\n            msg.sender,\\n            _data\\n        );\\n        dataHash = bytes32(keccak256(data_));\\n        if (_tokens[0] == stEthTokenAddr) {\\n            require(length_ == 1, \\\"steth-length-should-be-1\\\");\\n            tokens_[0] = IERC20(address(wstEthToken));\\n            _amounts[0] = wstEthToken.getWstETHByStETH(_amounts[0]);\\n        }\\n        balancerLending.flashLoan(\\n            InstaFlashReceiverInterface(address(this)),\\n            tokens_,\\n            _amounts,\\n            data_\\n        );\\n    }\\n\\n    /**\\n     * @dev Middle function for route 6.\\n     * @notice Middle function for route 6.\\n     * @param _tokens token addresses for flashloan.\\n     * @param _amounts list of amounts for the corresponding assets.\\n     * @param _data extra data passed.\\n     */\\n    function routeBalancerCompound(\\n        address[] memory _tokens,\\n        uint256[] memory _amounts,\\n        bytes memory _data\\n    ) internal {\\n        bytes memory data_ = abi.encode(\\n            6,\\n            _tokens,\\n            _amounts,\\n            msg.sender,\\n            _data\\n        );\\n        IERC20[] memory wethTokenList_ = new IERC20[](1);\\n        uint256[] memory wethAmountList_ = new uint256[](1);\\n        wethTokenList_[0] = IERC20(wethToken);\\n        wethAmountList_[0] = getWEthBorrowAmount();\\n        dataHash = bytes32(keccak256(data_));\\n        balancerLending.flashLoan(\\n            InstaFlashReceiverInterface(address(this)),\\n            wethTokenList_,\\n            wethAmountList_,\\n            data_\\n        );\\n    }\\n\\n    /**\\n     * @dev Middle function for route 7.\\n     * @notice Middle helper function for route 7.\\n     * @param _tokens token addresses for flashloan.\\n     * @param _amounts list of amounts for the corresponding assets.\\n     * @param _data extra data passed.\\n     */\\n    function routeBalancerAave(\\n        address[] memory _tokens,\\n        uint256[] memory _amounts,\\n        bytes memory _data\\n    ) internal {\\n        bytes memory data_ = abi.encode(\\n            7,\\n            _tokens,\\n            _amounts,\\n            msg.sender,\\n            _data\\n        );\\n        IERC20[] memory wethTokenList_ = new IERC20[](1);\\n        uint256[] memory wethAmountList_ = new uint256[](1);\\n        wethTokenList_[0] = wethToken;\\n        wethAmountList_[0] = getWEthBorrowAmount();\\n        dataHash = bytes32(keccak256(data_));\\n        balancerLending.flashLoan(\\n            InstaFlashReceiverInterface(address(this)),\\n            wethTokenList_,\\n            wethAmountList_,\\n            data_\\n        );\\n    }\\n\\n    /**\\n     * @dev Main function for flashloan for all routes. Calls the middle functions according to routes.\\n     * @notice Main function for flashloan for all routes. Calls the middle functions according to routes.\\n     * @param _tokens token addresses for flashloan.\\n     * @param _amounts list of amounts for the corresponding assets.\\n     * @param _route route for flashloan.\\n     * @param _data extra data passed.\\n     */\\n    function flashLoan(\\n        address[] memory _tokens,\\n        uint256[] memory _amounts,\\n        uint256 _route,\\n        bytes calldata _data,\\n        bytes calldata // kept for future use by instadapp. Currently not used anywhere.\\n    ) external reentrancy {\\n        require(_tokens.length == _amounts.length, \\\"array-lengths-not-same\\\");\\n\\n        (_tokens, _amounts) = bubbleSort(_tokens, _amounts);\\n        validateTokens(_tokens);\\n\\n        if (_route == 1) {\\n            routeAaveAndSpark(1, _tokens, _amounts, _data);\\n        } else if (_route == 2) {\\n            routeMaker(_tokens[0], _amounts[0], _data);\\n        } else if (_route == 3) {\\n            routeMakerCompound(_tokens, _amounts, _data);\\n        } else if (_route == 4) {\\n            routeMakerAave(_tokens, _amounts, _data);\\n        } else if (_route == 5) {\\n            routeBalancer(_tokens, _amounts, _data);\\n        } else if (_route == 6) {\\n            routeBalancerCompound(_tokens, _amounts, _data);\\n        } else if (_route == 7) {\\n            routeBalancerAave(_tokens, _amounts, _data);\\n        } else if (_route == 9) {\\n            routeAaveAndSpark(9, _tokens, _amounts, _data);\\n        } else if (_route == 10) {\\n            routeAaveAndSpark(10, _tokens, _amounts, _data);\\n        } \\n        else {\\n            revert(\\\"route-does-not-exist\\\");\\n        }\\n\\n        emit LogFlashloan(msg.sender, _route, _tokens, _amounts);\\n    }\\n\\n    /**\\n     * @dev Function to get the list of available routes.\\n     * @notice Function to get the list of available routes.\\n     */\\n    function getRoutes() public pure returns (uint16[] memory routes_) {\\n        routes_ = new uint16[](9);\\n        routes_[0] = 1; // routeAaveV2\\n        routes_[1] = 2; // routeMaker\\n        routes_[2] = 3; // routeMakerCompound\\n        routes_[3] = 4; // routeMakerAave\\n        routes_[4] = 5; // routeBalancer\\n        routes_[5] = 6; // routeBalancerCompound\\n        routes_[6] = 7; // routeBalancerAave\\n        routes_[7] = 9; // routeAaveV3\\n        routes_[8] = 10; // routeSpark\\n    }\\n\\n    /**\\n     * @dev Function to transfer fee to the treasury.\\n     * @notice Function to transfer fee to the treasury. Will be called manually.\\n     * @param _tokens token addresses for transferring fee to treasury.\\n     */\\n    function transferFeeToTreasury(address[] memory _tokens) public {\\n        for (uint256 i = 0; i < _tokens.length; i++) {\\n            IERC20 token_ = IERC20(_tokens[i]);\\n            uint256 decimals_ = TokenInterface(_tokens[i]).decimals();\\n            uint256 amtToSub_ = decimals_ == 18 ? 1e10 : decimals_ > 12\\n                ? 10000\\n                : decimals_ > 7\\n                ? 100\\n                : 10;\\n            uint256 amtToTransfer_ = token_.balanceOf(address(this)) > amtToSub_\\n                ? (token_.balanceOf(address(this)) - amtToSub_)\\n                : 0;\\n            if (amtToTransfer_ > 0)\\n                token_.safeTransfer(treasuryAddr, amtToTransfer_);\\n        }\\n    }\\n}\\n\\ncontract InstaFlashAggregator is FlashAggregator {\\n    using SafeERC20 for IERC20;\\n\\n    /* \\n     Deprecated\\n    */\\n    // function initialize(address[] memory _ctokens, address owner_) public {\\n    //     require(status == 0, \\\"cannot-call-again\\\");\\n    //     require(stETHStatus == 0, \\\"only-once\\\");\\n    //     require(ownerStatus == 0, \\\"only-once\\\");\\n    //     IERC20(daiTokenAddr).safeApprove(address(makerLending), type(uint256).max);\\n    //     addTokenToCToken(_ctokens);\\n    //     address[] memory cTokens_ = new address[](2);\\n    //     cTokens_[0] = cethTokenAddr;\\n    //     cTokens_[1] = cdaiTokenAddr;\\n    //     uint256[] memory errors_ = troller.enterMarkets(cTokens_);\\n    //     for(uint256 j = 0; j < errors_.length; j++){\\n    //         require(errors_[j] == 0, \\\"Comptroller.enterMarkets failed.\\\");\\n    //     }\\n    //     IERC20(stEthTokenAddr).safeApprove(address(wstEthToken), type(uint256).max);\\n    //     owner = owner_;\\n    //     ownerStatus = 1;\\n    //     stETHStatus = 1;\\n    //     status = 1;\\n    // }\\n\\n    /* \\n     Deprecated\\n    */\\n    // function initialize() public {\\n    //     require(initializeStatus == 0, \\\"cannot-call-again\\\");\\n    //     IERC20(daiTokenAddr).safeApprove(address(makerLending), type(uint256).max);\\n    //     initializeStatus = 1;\\n    // }\\n\\n    receive() external payable {}\\n}\\n\"\r\n    },\r\n    \"contracts/aggregator/mainnet/flashloan/variables.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.0;\\n\\nimport \\\"./interfaces.sol\\\";\\n\\ncontract ConstantVariables {\\n    address public constant aaveV2LendingAddr =\\n        0x7d2768dE32b0b80b7a3454c06BdAc94A69DDc7A9;\\n    IAaveLending public constant aaveV2Lending =\\n        IAaveLending(aaveV2LendingAddr);\\n\\n    address public constant aaveV3LendingAddr =\\n        0x87870Bca3F3fD6335C3F4ce8392D69350B4fA4E2;\\n    IAaveV3Lending public constant aaveV3Lending =\\n        IAaveV3Lending(aaveV3LendingAddr);\\n\\n    address public constant sparkLendingAddr =\\n        0xC13e21B648A5Ee794902342038FF3aDAB66BE987;\\n    ISparkLending public constant sparkLending =\\n        ISparkLending(sparkLendingAddr);\\n\\n    IERC3156FlashLender internal constant makerLending =\\n        IERC3156FlashLender(0x60744434d6339a6B27d73d9Eda62b6F66a0a04FA);\\n\\n    IBalancerLending internal constant balancerLending =\\n        IBalancerLending(0xBA12222222228d8Ba445958a75a0704d566BF2C8);\\n\\n    address internal constant daiTokenAddr =\\n        0x6B175474E89094C44Da98b954EedeAC495271d0F;\\n    address internal constant cdaiTokenAddr =\\n        0x5d3a536E4D6DbD6114cc1Ead35777bAB948E3643;\\n    uint256 internal constant daiBorrowAmount = 500000000000000000000000000;\\n    address internal constant cethTokenAddr =\\n        0x4Ddc2D193948926D02f9B1fE9e1daa0718270ED5;\\n    uint256 internal constant wethBorrowAmountPercentage = 80;\\n    address internal constant stEthTokenAddr =\\n        0xae7ab96520DE3A18E5e111B5EaAb095312D7fE84;\\n    IWeth internal constant wethToken =\\n        IWeth(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);\\n    IWstETH internal constant wstEthToken =\\n        IWstETH(0x7f39C581F595B53c5cb19bD0b3f8dA6c935E2Ca0);\\n    Comptroller internal constant troller =\\n        Comptroller(0x3d9819210A31b4961b30EF54bE2aeD79B9c9Cd3B);\\n\\n    address internal constant treasuryAddr =\\n        0x28849D2b63fA8D361e5fc15cB8aBB13019884d09;\\n    ListInterface internal constant instaList =\\n        ListInterface(0x4c8a1BEb8a87765788946D6B19C6C6355194AbEb);\\n    uint256 public constant InstaFeeBPS = 5; // in BPS; 1 BPS = 0.01%\\n\\n    address internal constant ADVANCED_ROUTES_IMPL =\\n        0xeD4DF5d720F5FA036d16C971FdF409c202C3D8F6;\\n}\\n\\ncontract Variables is ConstantVariables {\\n    bytes32 internal dataHash;\\n    // if 1 then can enter flashlaon, if 2 then callback\\n    uint256 internal status;\\n\\n    struct FlashloanVariables {\\n        address[] _tokens;\\n        uint256[] _amounts;\\n        uint256[] _iniBals;\\n        uint256[] _finBals;\\n        uint256[] _instaFees;\\n    }\\n\\n    mapping(address => address) public tokenToCToken;\\n\\n    // stETH allowance status\\n    uint256 internal stETHStatus;\\n\\n    address public owner;\\n\\n    uint256 internal ownerStatus;\\n\\n    mapping(address => bool) public isWhitelisted;\\n\\n    // Initialize status to initialize again to give approval to updated Maker flashloan.\\n    uint256 internal initializeStatus;\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"none\"\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"route\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"LogFlashloan\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"updateOwnerLog\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"isWhitelisted_\",\"type\":\"bool\"}],\"name\":\"updateWhitelistLog\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"InstaFeeBPS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"aaveV2Lending\",\"outputs\":[{\"internalType\":\"contract IAaveLending\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"aaveV2LendingAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"aaveV3Lending\",\"outputs\":[{\"internalType\":\"contract IAaveV3Lending\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"aaveV3LendingAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_cTokens\",\"type\":\"address[]\"}],\"name\":\"addTokenToCToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_route\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"account_\",\"type\":\"address\"}],\"name\":\"calculateFeeBPS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"BPS_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_assets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_premiums\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"_initiator\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"executeOperation\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"_route\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"flashLoan\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRoutes\",\"outputs\":[{\"internalType\":\"uint16[]\",\"name\":\"routes_\",\"type\":\"uint16[]\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isWhitelisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_initiator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"onFlashLoan\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_fees\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"receiveFlashLoan\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sparkLending\",\"outputs\":[{\"internalType\":\"contract ISparkLending\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sparkLendingAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenToCToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"}],\"name\":\"transferFeeToTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner_\",\"type\":\"address\"}],\"name\":\"updateOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account_\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"whitelist_\",\"type\":\"bool\"}],\"name\":\"updateWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "InstaFlashAggregator", "CompilerVersion": "v0.8.4+commit.c7e474f2", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}