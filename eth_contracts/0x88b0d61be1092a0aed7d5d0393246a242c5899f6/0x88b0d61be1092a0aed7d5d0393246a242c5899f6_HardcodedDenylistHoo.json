{"SourceCode": "// File: @openzeppelin/contracts@4.8.0/utils/Context.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts@4.8.0/access/Ownable.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the owner.\r\n     */\r\n    function _checkOwner() internal view virtual {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n// File: contracts/IBeforeTokenTransferHandler.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.9;\r\n\r\ninterface IBeforeTokenTransferHandler {\r\n    /**\r\n     * Handles before token transfer events from a ERC721 contract\r\n     */\r\n    function beforeTokenTransfer(\r\n        address tokenContract,\r\n        address operator,\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    /**\r\n     * Handles before token transfer events from a ERC721 contract with newer openZepplin\r\n     */\r\n    function beforeTokenTransfer(\r\n        address tokenContract,\r\n        address operator,\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        uint256 batchSize\r\n    ) external;\r\n}\r\n\r\n// File: contracts/HardcodedDenylistHook.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.9;\r\n\r\n\r\n\r\n/**\r\n * A before transfer hook that blocks transfers based on a hardcoded list of contract addresses.\r\n */\r\ncontract HardcodedDenylistHook is IBeforeTokenTransferHandler, Ownable {\r\n    /// @notice The list of operators to bar from facilitating NFT sales.\r\n    address[] private denylistedOperators = [\r\n        0xf42aa99F011A1fA7CDA90E5E98b277E306BcA83e, //looks rare\r\n        0xFED24eC7E22f573c2e08AEF55aA6797Ca2b3A051, //looks rare\r\n        0xD42638863462d2F21bb7D4275d7637eE5d5541eB, //sudo\r\n        0x08CE97807A81896E85841d74FB7E7B065ab3ef05, //sudo\r\n        0x92de3a1511EF22AbCf3526c302159882a4755B22, //sudo\r\n        0xCd80C916B1194beB48aBF007D0b79a7238436D56, //sudo\r\n        0xb16c1342E617A5B6E4b631EB114483FDB289c0A4, //sudo\r\n        0x0fc584529a2AEfA997697FAfAcbA5831faC0c22d //nftx\r\n    ];\r\n\r\n    /** ERRORS **/\r\n    error OperatorNotAllowed(address operator);\r\n\r\n    /**\r\n     * Get the addresses of the operators this contract is blocking.\r\n     *\r\n     * @return address[] The array of addresses this contract is blocking.\r\n     */\r\n    function getDenylistOperators() external view returns (address[] memory) {\r\n        return denylistedOperators;\r\n    }\r\n\r\n    /**\r\n     * Add an address to the denylist.\r\n     *\r\n     * @param addr The address to add to the denylist.\r\n     */\r\n    function addDenylistedAddress(address addr) external onlyOwner {\r\n        denylistedOperators.push(addr);\r\n    }\r\n\r\n    /**\r\n     * Remove an address from the denylist.\r\n     *\r\n     * @param addr The address to remove from the denylist.\r\n     */\r\n    function removeDenylistedAddress(address addr) external onlyOwner {\r\n        for (uint256 i = 0; i < denylistedOperators.length; i++) {\r\n            if (denylistedOperators[i] == addr) {\r\n                delete denylistedOperators[i];\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Handles before token transfer events from a ERC721 contract.\r\n     */\r\n    function beforeTokenTransfer(\r\n        address tokenContract,\r\n        address operator,\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external view {\r\n        beforeTokenTransfer(tokenContract, operator, from, to, tokenId, 1);\r\n    }\r\n\r\n    /**\r\n     * Handles before token transfer events from a ERC721 contract.\r\n     */\r\n    function beforeTokenTransfer(\r\n        address,\r\n        address operator,\r\n        address,\r\n        address,\r\n        uint256,\r\n        uint256\r\n    ) public view {\r\n        uint256 addressListLength = denylistedOperators.length;\r\n        for (uint256 i = 0; i < addressListLength; i++) {\r\n            if (operator == address(denylistedOperators[i])) {\r\n                revert OperatorNotAllowed(operator);\r\n            }\r\n        }\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"OperatorNotAllowed\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"addDenylistedAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"beforeTokenTransfer\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"beforeTokenTransfer\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDenylistOperators\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"removeDenylistedAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "HardcodedDenylistHook", "CompilerVersion": "v0.8.14+commit.80d49f37", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://a982c7a601e4f7457f02a3ad20374caaf357cd1f512f45f0d66ea07bf1d101e1"}