{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.19;\r\n\r\ninterface IVeBoost {\r\n    function approve(address, uint256) external;\r\n    function boost(address, uint256, uint256, address) external;\r\n    function delegable_balance(address) external returns (uint256);\r\n    function permit(address, address, uint256, uint256, uint8, bytes32, bytes32) external;\r\n    function received_balance(address) external returns (uint256);\r\n}\r\n\r\n/// @notice Simple ERC20 + EIP-2612 implementation.\r\n/// @author Solady (https://github.com/vectorized/solady/blob/main/src/tokens/ERC20.sol)\r\n/// @author Modified from Solmate (https://github.com/transmissions11/solmate/blob/main/src/tokens/ERC20.sol)\r\n/// @author Modified from OpenZeppelin (https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol)\r\n///\r\n/// @dev Note:\r\n/// - The ERC20 standard allows minting and transferring to and from the zero address,\r\n///   minting and transferring zero tokens, as well as self-approvals.\r\n///   For performance, this implementation WILL NOT revert for such actions.\r\n///   Please add any checks with overrides if desired.\r\n/// - The `permit` function uses the ecrecover precompile (0x1).\r\n///\r\n/// If you are overriding:\r\n/// - NEVER violate the ERC20 invariant:\r\n///   the total sum of all balances must be equal to `totalSupply()`.\r\n/// - Check that the overridden function is actually used in the function you want to\r\n///   change the behavior of. Much of the code has been manually inlined for performance.\r\nabstract contract ERC20 {\r\n    /*\u00b4:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0\u2022.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:*/\r\n    /*                       CUSTOM ERRORS                        */\r\n    /*.\u2022\u00b0:\u00b0.\u00b4+\u02da.*\u00b0.\u02da:*.\u00b4\u2022*.+\u00b0.\u2022\u00b0:\u00b4*.\u00b4\u2022*.\u2022\u00b0.\u2022\u00b0:\u00b0.\u00b4:\u2022\u02da\u00b0.*\u00b0.\u02da:*.\u00b4+\u00b0.\u2022*/\r\n\r\n    /// @dev The total supply has overflowed.\r\n    error TotalSupplyOverflow();\r\n\r\n    /// @dev The allowance has overflowed.\r\n    error AllowanceOverflow();\r\n\r\n    /// @dev The allowance has underflowed.\r\n    error AllowanceUnderflow();\r\n\r\n    /// @dev Insufficient balance.\r\n    error InsufficientBalance();\r\n\r\n    /// @dev Insufficient allowance.\r\n    error InsufficientAllowance();\r\n\r\n    /// @dev The permit is invalid.\r\n    error InvalidPermit();\r\n\r\n    /// @dev The permit has expired.\r\n    error PermitExpired();\r\n\r\n    /*\u00b4:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0\u2022.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:*/\r\n    /*                           EVENTS                           */\r\n    /*.\u2022\u00b0:\u00b0.\u00b4+\u02da.*\u00b0.\u02da:*.\u00b4\u2022*.+\u00b0.\u2022\u00b0:\u00b4*.\u00b4\u2022*.\u2022\u00b0.\u2022\u00b0:\u00b0.\u00b4:\u2022\u02da\u00b0.*\u00b0.\u02da:*.\u00b4+\u00b0.\u2022*/\r\n\r\n    /// @dev Emitted when `amount` tokens is transferred from `from` to `to`.\r\n    event Transfer(address indexed from, address indexed to, uint256 amount);\r\n\r\n    /// @dev Emitted when `amount` tokens is approved by `owner` to be used by `spender`.\r\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\r\n\r\n    /// @dev `keccak256(bytes(\"Transfer(address,address,uint256)\"))`.\r\n    uint256 private constant _TRANSFER_EVENT_SIGNATURE =\r\n        0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef;\r\n\r\n    /// @dev `keccak256(bytes(\"Approval(address,address,uint256)\"))`.\r\n    uint256 private constant _APPROVAL_EVENT_SIGNATURE =\r\n        0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925;\r\n\r\n    /*\u00b4:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0\u2022.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:*/\r\n    /*                          STORAGE                           */\r\n    /*.\u2022\u00b0:\u00b0.\u00b4+\u02da.*\u00b0.\u02da:*.\u00b4\u2022*.+\u00b0.\u2022\u00b0:\u00b4*.\u00b4\u2022*.\u2022\u00b0.\u2022\u00b0:\u00b0.\u00b4:\u2022\u02da\u00b0.*\u00b0.\u02da:*.\u00b4+\u00b0.\u2022*/\r\n\r\n    /// @dev The storage slot for the total supply.\r\n    uint256 private constant _TOTAL_SUPPLY_SLOT = 0x05345cdf77eb68f44c;\r\n\r\n    /// @dev The balance slot of `owner` is given by:\r\n    /// ```\r\n    ///     mstore(0x0c, _BALANCE_SLOT_SEED)\r\n    ///     mstore(0x00, owner)\r\n    ///     let balanceSlot := keccak256(0x0c, 0x20)\r\n    /// ```\r\n    uint256 private constant _BALANCE_SLOT_SEED = 0x87a211a2;\r\n\r\n    /// @dev The allowance slot of (`owner`, `spender`) is given by:\r\n    /// ```\r\n    ///     mstore(0x20, spender)\r\n    ///     mstore(0x0c, _ALLOWANCE_SLOT_SEED)\r\n    ///     mstore(0x00, owner)\r\n    ///     let allowanceSlot := keccak256(0x0c, 0x34)\r\n    /// ```\r\n    uint256 private constant _ALLOWANCE_SLOT_SEED = 0x7f5e9f20;\r\n\r\n    /// @dev The nonce slot of `owner` is given by:\r\n    /// ```\r\n    ///     mstore(0x0c, _NONCES_SLOT_SEED)\r\n    ///     mstore(0x00, owner)\r\n    ///     let nonceSlot := keccak256(0x0c, 0x20)\r\n    /// ```\r\n    uint256 private constant _NONCES_SLOT_SEED = 0x38377508;\r\n\r\n    /*\u00b4:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0\u2022.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:*/\r\n    /*                         CONSTANTS                          */\r\n    /*.\u2022\u00b0:\u00b0.\u00b4+\u02da.*\u00b0.\u02da:*.\u00b4\u2022*.+\u00b0.\u2022\u00b0:\u00b4*.\u00b4\u2022*.\u2022\u00b0.\u2022\u00b0:\u00b0.\u00b4:\u2022\u02da\u00b0.*\u00b0.\u02da:*.\u00b4+\u00b0.\u2022*/\r\n\r\n    /// @dev `(_NONCES_SLOT_SEED << 16) | 0x1901`.\r\n    uint256 private constant _NONCES_SLOT_SEED_WITH_SIGNATURE_PREFIX = 0x383775081901;\r\n\r\n    /// @dev `keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\")`.\r\n    bytes32 private constant _DOMAIN_TYPEHASH =\r\n        0x8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f;\r\n\r\n    /// @dev `keccak256(\"1\")`.\r\n    bytes32 private constant _VERSION_HASH =\r\n        0xc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc6;\r\n\r\n    /// @dev `keccak256(\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\")`.\r\n    bytes32 private constant _PERMIT_TYPEHASH =\r\n        0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9;\r\n\r\n    /*\u00b4:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0\u2022.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:*/\r\n    /*                       ERC20 METADATA                       */\r\n    /*.\u2022\u00b0:\u00b0.\u00b4+\u02da.*\u00b0.\u02da:*.\u00b4\u2022*.+\u00b0.\u2022\u00b0:\u00b4*.\u00b4\u2022*.\u2022\u00b0.\u2022\u00b0:\u00b0.\u00b4:\u2022\u02da\u00b0.*\u00b0.\u02da:*.\u00b4+\u00b0.\u2022*/\r\n\r\n    /// @dev Returns the name of the token.\r\n    function name() public view virtual returns (string memory);\r\n\r\n    /// @dev Returns the symbol of the token.\r\n    function symbol() public view virtual returns (string memory);\r\n\r\n    /// @dev Returns the decimals places of the token.\r\n    function decimals() public view virtual returns (uint8) {\r\n        return 18;\r\n    }\r\n\r\n    /*\u00b4:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0\u2022.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:*/\r\n    /*                           ERC20                            */\r\n    /*.\u2022\u00b0:\u00b0.\u00b4+\u02da.*\u00b0.\u02da:*.\u00b4\u2022*.+\u00b0.\u2022\u00b0:\u00b4*.\u00b4\u2022*.\u2022\u00b0.\u2022\u00b0:\u00b0.\u00b4:\u2022\u02da\u00b0.*\u00b0.\u02da:*.\u00b4+\u00b0.\u2022*/\r\n\r\n    /// @dev Returns the amount of tokens in existence.\r\n    function totalSupply() public view virtual returns (uint256 result) {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            result := sload(_TOTAL_SUPPLY_SLOT)\r\n        }\r\n    }\r\n\r\n    /// @dev Returns the amount of tokens owned by `owner`.\r\n    function balanceOf(address owner) public view virtual returns (uint256 result) {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            mstore(0x0c, _BALANCE_SLOT_SEED)\r\n            mstore(0x00, owner)\r\n            result := sload(keccak256(0x0c, 0x20))\r\n        }\r\n    }\r\n\r\n    /// @dev Returns the amount of tokens that `spender` can spend on behalf of `owner`.\r\n    function allowance(address owner, address spender)\r\n        public\r\n        view\r\n        virtual\r\n        returns (uint256 result)\r\n    {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            mstore(0x20, spender)\r\n            mstore(0x0c, _ALLOWANCE_SLOT_SEED)\r\n            mstore(0x00, owner)\r\n            result := sload(keccak256(0x0c, 0x34))\r\n        }\r\n    }\r\n\r\n    /// @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n    ///\r\n    /// Emits a {Approval} event.\r\n    function approve(address spender, uint256 amount) public virtual returns (bool) {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            // Compute the allowance slot and store the amount.\r\n            mstore(0x20, spender)\r\n            mstore(0x0c, _ALLOWANCE_SLOT_SEED)\r\n            mstore(0x00, caller())\r\n            sstore(keccak256(0x0c, 0x34), amount)\r\n            // Emit the {Approval} event.\r\n            mstore(0x00, amount)\r\n            log3(0x00, 0x20, _APPROVAL_EVENT_SIGNATURE, caller(), shr(96, mload(0x2c)))\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /// @dev Transfer `amount` tokens from the caller to `to`.\r\n    ///\r\n    /// Requirements:\r\n    /// - `from` must at least have `amount`.\r\n    ///\r\n    /// Emits a {Transfer} event.\r\n    function transfer(address to, uint256 amount) public virtual returns (bool) {\r\n        _beforeTokenTransfer(msg.sender, to, amount);\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            // Compute the balance slot and load its value.\r\n            mstore(0x0c, _BALANCE_SLOT_SEED)\r\n            mstore(0x00, caller())\r\n            let fromBalanceSlot := keccak256(0x0c, 0x20)\r\n            let fromBalance := sload(fromBalanceSlot)\r\n            // Revert if insufficient balance.\r\n            if gt(amount, fromBalance) {\r\n                mstore(0x00, 0xf4d678b8) // `InsufficientBalance()`.\r\n                revert(0x1c, 0x04)\r\n            }\r\n            // Subtract and store the updated balance.\r\n            sstore(fromBalanceSlot, sub(fromBalance, amount))\r\n            // Compute the balance slot of `to`.\r\n            mstore(0x00, to)\r\n            let toBalanceSlot := keccak256(0x0c, 0x20)\r\n            // Add and store the updated balance of `to`.\r\n            // Will not overflow because the sum of all user balances\r\n            // cannot exceed the maximum uint256 value.\r\n            sstore(toBalanceSlot, add(sload(toBalanceSlot), amount))\r\n            // Emit the {Transfer} event.\r\n            mstore(0x20, amount)\r\n            log3(0x20, 0x20, _TRANSFER_EVENT_SIGNATURE, caller(), shr(96, mload(0x0c)))\r\n        }\r\n        _afterTokenTransfer(msg.sender, to, amount);\r\n        return true;\r\n    }\r\n\r\n    /// @dev Transfers `amount` tokens from `from` to `to`.\r\n    ///\r\n    /// Note: Does not update the allowance if it is the maximum uint256 value.\r\n    ///\r\n    /// Requirements:\r\n    /// - `from` must at least have `amount`.\r\n    /// - The caller must have at least `amount` of allowance to transfer the tokens of `from`.\r\n    ///\r\n    /// Emits a {Transfer} event.\r\n    function transferFrom(address from, address to, uint256 amount) public virtual returns (bool) {\r\n        _beforeTokenTransfer(from, to, amount);\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            let from_ := shl(96, from)\r\n            // Compute the allowance slot and load its value.\r\n            mstore(0x20, caller())\r\n            mstore(0x0c, or(from_, _ALLOWANCE_SLOT_SEED))\r\n            let allowanceSlot := keccak256(0x0c, 0x34)\r\n            let allowance_ := sload(allowanceSlot)\r\n            // If the allowance is not the maximum uint256 value.\r\n            if add(allowance_, 1) {\r\n                // Revert if the amount to be transferred exceeds the allowance.\r\n                if gt(amount, allowance_) {\r\n                    mstore(0x00, 0x13be252b) // `InsufficientAllowance()`.\r\n                    revert(0x1c, 0x04)\r\n                }\r\n                // Subtract and store the updated allowance.\r\n                sstore(allowanceSlot, sub(allowance_, amount))\r\n            }\r\n            // Compute the balance slot and load its value.\r\n            mstore(0x0c, or(from_, _BALANCE_SLOT_SEED))\r\n            let fromBalanceSlot := keccak256(0x0c, 0x20)\r\n            let fromBalance := sload(fromBalanceSlot)\r\n            // Revert if insufficient balance.\r\n            if gt(amount, fromBalance) {\r\n                mstore(0x00, 0xf4d678b8) // `InsufficientBalance()`.\r\n                revert(0x1c, 0x04)\r\n            }\r\n            // Subtract and store the updated balance.\r\n            sstore(fromBalanceSlot, sub(fromBalance, amount))\r\n            // Compute the balance slot of `to`.\r\n            mstore(0x00, to)\r\n            let toBalanceSlot := keccak256(0x0c, 0x20)\r\n            // Add and store the updated balance of `to`.\r\n            // Will not overflow because the sum of all user balances\r\n            // cannot exceed the maximum uint256 value.\r\n            sstore(toBalanceSlot, add(sload(toBalanceSlot), amount))\r\n            // Emit the {Transfer} event.\r\n            mstore(0x20, amount)\r\n            log3(0x20, 0x20, _TRANSFER_EVENT_SIGNATURE, shr(96, from_), shr(96, mload(0x0c)))\r\n        }\r\n        _afterTokenTransfer(from, to, amount);\r\n        return true;\r\n    }\r\n\r\n    /*\u00b4:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0\u2022.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:*/\r\n    /*                          EIP-2612                          */\r\n    /*.\u2022\u00b0:\u00b0.\u00b4+\u02da.*\u00b0.\u02da:*.\u00b4\u2022*.+\u00b0.\u2022\u00b0:\u00b4*.\u00b4\u2022*.\u2022\u00b0.\u2022\u00b0:\u00b0.\u00b4:\u2022\u02da\u00b0.*\u00b0.\u02da:*.\u00b4+\u00b0.\u2022*/\r\n\r\n    /// @dev For more performance, override to return the constant value\r\n    /// of `keccak256(bytes(name()))` if `name()` will never change.\r\n    function _constantNameHash() internal view virtual returns (bytes32 result) {}\r\n\r\n    /// @dev Returns the current nonce for `owner`.\r\n    /// This value is used to compute the signature for EIP-2612 permit.\r\n    function nonces(address owner) public view virtual returns (uint256 result) {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            // Compute the nonce slot and load its value.\r\n            mstore(0x0c, _NONCES_SLOT_SEED)\r\n            mstore(0x00, owner)\r\n            result := sload(keccak256(0x0c, 0x20))\r\n        }\r\n    }\r\n\r\n    /// @dev Sets `value` as the allowance of `spender` over the tokens of `owner`,\r\n    /// authorized by a signed approval by `owner`.\r\n    ///\r\n    /// Emits a {Approval} event.\r\n    function permit(\r\n        address owner,\r\n        address spender,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) public virtual {\r\n        bytes32 nameHash = _constantNameHash();\r\n        //  We simply calculate it on-the-fly to allow for cases where the `name` may change.\r\n        if (nameHash == bytes32(0)) nameHash = keccak256(bytes(name()));\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            // Revert if the block timestamp is greater than `deadline`.\r\n            if gt(timestamp(), deadline) {\r\n                mstore(0x00, 0x1a15a3cc) // `PermitExpired()`.\r\n                revert(0x1c, 0x04)\r\n            }\r\n            let m := mload(0x40) // Grab the free memory pointer.\r\n            // Clean the upper 96 bits.\r\n            owner := shr(96, shl(96, owner))\r\n            spender := shr(96, shl(96, spender))\r\n            // Compute the nonce slot and load its value.\r\n            mstore(0x0e, _NONCES_SLOT_SEED_WITH_SIGNATURE_PREFIX)\r\n            mstore(0x00, owner)\r\n            let nonceSlot := keccak256(0x0c, 0x20)\r\n            let nonceValue := sload(nonceSlot)\r\n            // Prepare the domain separator.\r\n            mstore(m, _DOMAIN_TYPEHASH)\r\n            mstore(add(m, 0x20), nameHash)\r\n            mstore(add(m, 0x40), _VERSION_HASH)\r\n            mstore(add(m, 0x60), chainid())\r\n            mstore(add(m, 0x80), address())\r\n            mstore(0x2e, keccak256(m, 0xa0))\r\n            // Prepare the struct hash.\r\n            mstore(m, _PERMIT_TYPEHASH)\r\n            mstore(add(m, 0x20), owner)\r\n            mstore(add(m, 0x40), spender)\r\n            mstore(add(m, 0x60), value)\r\n            mstore(add(m, 0x80), nonceValue)\r\n            mstore(add(m, 0xa0), deadline)\r\n            mstore(0x4e, keccak256(m, 0xc0))\r\n            // Prepare the ecrecover calldata.\r\n            mstore(0x00, keccak256(0x2c, 0x42))\r\n            mstore(0x20, and(0xff, v))\r\n            mstore(0x40, r)\r\n            mstore(0x60, s)\r\n            let t := staticcall(gas(), 1, 0, 0x80, 0x20, 0x20)\r\n            // If the ecrecover fails, the returndatasize will be 0x00,\r\n            // `owner` will be checked if it equals the hash at 0x00,\r\n            // which evaluates to false (i.e. 0), and we will revert.\r\n            // If the ecrecover succeeds, the returndatasize will be 0x20,\r\n            // `owner` will be compared against the returned address at 0x20.\r\n            if iszero(eq(mload(returndatasize()), owner)) {\r\n                mstore(0x00, 0xddafbaef) // `InvalidPermit()`.\r\n                revert(0x1c, 0x04)\r\n            }\r\n            // Increment and store the updated nonce.\r\n            sstore(nonceSlot, add(nonceValue, t)) // `t` is 1 if ecrecover succeeds.\r\n            // Compute the allowance slot and store the value.\r\n            // The `owner` is already at slot 0x20.\r\n            mstore(0x40, or(shl(160, _ALLOWANCE_SLOT_SEED), spender))\r\n            sstore(keccak256(0x2c, 0x34), value)\r\n            // Emit the {Approval} event.\r\n            log3(add(m, 0x60), 0x20, _APPROVAL_EVENT_SIGNATURE, owner, spender)\r\n            mstore(0x40, m) // Restore the free memory pointer.\r\n            mstore(0x60, 0) // Restore the zero pointer.\r\n        }\r\n    }\r\n\r\n    /// @dev Returns the EIP-712 domain separator for the EIP-2612 permit.\r\n    function DOMAIN_SEPARATOR() public view virtual returns (bytes32 result) {\r\n        bytes32 nameHash = _constantNameHash();\r\n        //  We simply calculate it on-the-fly to allow for cases where the `name` may change.\r\n        if (nameHash == bytes32(0)) nameHash = keccak256(bytes(name()));\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            let m := mload(0x40) // Grab the free memory pointer.\r\n            mstore(m, _DOMAIN_TYPEHASH)\r\n            mstore(add(m, 0x20), nameHash)\r\n            mstore(add(m, 0x40), _VERSION_HASH)\r\n            mstore(add(m, 0x60), chainid())\r\n            mstore(add(m, 0x80), address())\r\n            result := keccak256(m, 0xa0)\r\n        }\r\n    }\r\n\r\n    /*\u00b4:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0\u2022.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:*/\r\n    /*                  INTERNAL MINT FUNCTIONS                   */\r\n    /*.\u2022\u00b0:\u00b0.\u00b4+\u02da.*\u00b0.\u02da:*.\u00b4\u2022*.+\u00b0.\u2022\u00b0:\u00b4*.\u00b4\u2022*.\u2022\u00b0.\u2022\u00b0:\u00b0.\u00b4:\u2022\u02da\u00b0.*\u00b0.\u02da:*.\u00b4+\u00b0.\u2022*/\r\n\r\n    /// @dev Mints `amount` tokens to `to`, increasing the total supply.\r\n    ///\r\n    /// Emits a {Transfer} event.\r\n    function _mint(address to, uint256 amount) internal virtual {\r\n        _beforeTokenTransfer(address(0), to, amount);\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            let totalSupplyBefore := sload(_TOTAL_SUPPLY_SLOT)\r\n            let totalSupplyAfter := add(totalSupplyBefore, amount)\r\n            // Revert if the total supply overflows.\r\n            if lt(totalSupplyAfter, totalSupplyBefore) {\r\n                mstore(0x00, 0xe5cfe957) // `TotalSupplyOverflow()`.\r\n                revert(0x1c, 0x04)\r\n            }\r\n            // Store the updated total supply.\r\n            sstore(_TOTAL_SUPPLY_SLOT, totalSupplyAfter)\r\n            // Compute the balance slot and load its value.\r\n            mstore(0x0c, _BALANCE_SLOT_SEED)\r\n            mstore(0x00, to)\r\n            let toBalanceSlot := keccak256(0x0c, 0x20)\r\n            // Add and store the updated balance.\r\n            sstore(toBalanceSlot, add(sload(toBalanceSlot), amount))\r\n            // Emit the {Transfer} event.\r\n            mstore(0x20, amount)\r\n            log3(0x20, 0x20, _TRANSFER_EVENT_SIGNATURE, 0, shr(96, mload(0x0c)))\r\n        }\r\n        _afterTokenTransfer(address(0), to, amount);\r\n    }\r\n\r\n    /*\u00b4:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0\u2022.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:*/\r\n    /*                  INTERNAL BURN FUNCTIONS                   */\r\n    /*.\u2022\u00b0:\u00b0.\u00b4+\u02da.*\u00b0.\u02da:*.\u00b4\u2022*.+\u00b0.\u2022\u00b0:\u00b4*.\u00b4\u2022*.\u2022\u00b0.\u2022\u00b0:\u00b0.\u00b4:\u2022\u02da\u00b0.*\u00b0.\u02da:*.\u00b4+\u00b0.\u2022*/\r\n\r\n    /// @dev Burns `amount` tokens from `from`, reducing the total supply.\r\n    ///\r\n    /// Emits a {Transfer} event.\r\n    function _burn(address from, uint256 amount) internal virtual {\r\n        _beforeTokenTransfer(from, address(0), amount);\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            // Compute the balance slot and load its value.\r\n            mstore(0x0c, _BALANCE_SLOT_SEED)\r\n            mstore(0x00, from)\r\n            let fromBalanceSlot := keccak256(0x0c, 0x20)\r\n            let fromBalance := sload(fromBalanceSlot)\r\n            // Revert if insufficient balance.\r\n            if gt(amount, fromBalance) {\r\n                mstore(0x00, 0xf4d678b8) // `InsufficientBalance()`.\r\n                revert(0x1c, 0x04)\r\n            }\r\n            // Subtract and store the updated balance.\r\n            sstore(fromBalanceSlot, sub(fromBalance, amount))\r\n            // Subtract and store the updated total supply.\r\n            sstore(_TOTAL_SUPPLY_SLOT, sub(sload(_TOTAL_SUPPLY_SLOT), amount))\r\n            // Emit the {Transfer} event.\r\n            mstore(0x00, amount)\r\n            log3(0x00, 0x20, _TRANSFER_EVENT_SIGNATURE, shr(96, shl(96, from)), 0)\r\n        }\r\n        _afterTokenTransfer(from, address(0), amount);\r\n    }\r\n\r\n    /*\u00b4:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0\u2022.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:*/\r\n    /*                INTERNAL TRANSFER FUNCTIONS                 */\r\n    /*.\u2022\u00b0:\u00b0.\u00b4+\u02da.*\u00b0.\u02da:*.\u00b4\u2022*.+\u00b0.\u2022\u00b0:\u00b4*.\u00b4\u2022*.\u2022\u00b0.\u2022\u00b0:\u00b0.\u00b4:\u2022\u02da\u00b0.*\u00b0.\u02da:*.\u00b4+\u00b0.\u2022*/\r\n\r\n    /// @dev Moves `amount` of tokens from `from` to `to`.\r\n    function _transfer(address from, address to, uint256 amount) internal virtual {\r\n        _beforeTokenTransfer(from, to, amount);\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            let from_ := shl(96, from)\r\n            // Compute the balance slot and load its value.\r\n            mstore(0x0c, or(from_, _BALANCE_SLOT_SEED))\r\n            let fromBalanceSlot := keccak256(0x0c, 0x20)\r\n            let fromBalance := sload(fromBalanceSlot)\r\n            // Revert if insufficient balance.\r\n            if gt(amount, fromBalance) {\r\n                mstore(0x00, 0xf4d678b8) // `InsufficientBalance()`.\r\n                revert(0x1c, 0x04)\r\n            }\r\n            // Subtract and store the updated balance.\r\n            sstore(fromBalanceSlot, sub(fromBalance, amount))\r\n            // Compute the balance slot of `to`.\r\n            mstore(0x00, to)\r\n            let toBalanceSlot := keccak256(0x0c, 0x20)\r\n            // Add and store the updated balance of `to`.\r\n            // Will not overflow because the sum of all user balances\r\n            // cannot exceed the maximum uint256 value.\r\n            sstore(toBalanceSlot, add(sload(toBalanceSlot), amount))\r\n            // Emit the {Transfer} event.\r\n            mstore(0x20, amount)\r\n            log3(0x20, 0x20, _TRANSFER_EVENT_SIGNATURE, shr(96, from_), shr(96, mload(0x0c)))\r\n        }\r\n        _afterTokenTransfer(from, to, amount);\r\n    }\r\n\r\n    /*\u00b4:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0\u2022.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:*/\r\n    /*                INTERNAL ALLOWANCE FUNCTIONS                */\r\n    /*.\u2022\u00b0:\u00b0.\u00b4+\u02da.*\u00b0.\u02da:*.\u00b4\u2022*.+\u00b0.\u2022\u00b0:\u00b4*.\u00b4\u2022*.\u2022\u00b0.\u2022\u00b0:\u00b0.\u00b4:\u2022\u02da\u00b0.*\u00b0.\u02da:*.\u00b4+\u00b0.\u2022*/\r\n\r\n    /// @dev Updates the allowance of `owner` for `spender` based on spent `amount`.\r\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            // Compute the allowance slot and load its value.\r\n            mstore(0x20, spender)\r\n            mstore(0x0c, _ALLOWANCE_SLOT_SEED)\r\n            mstore(0x00, owner)\r\n            let allowanceSlot := keccak256(0x0c, 0x34)\r\n            let allowance_ := sload(allowanceSlot)\r\n            // If the allowance is not the maximum uint256 value.\r\n            if add(allowance_, 1) {\r\n                // Revert if the amount to be transferred exceeds the allowance.\r\n                if gt(amount, allowance_) {\r\n                    mstore(0x00, 0x13be252b) // `InsufficientAllowance()`.\r\n                    revert(0x1c, 0x04)\r\n                }\r\n                // Subtract and store the updated allowance.\r\n                sstore(allowanceSlot, sub(allowance_, amount))\r\n            }\r\n        }\r\n    }\r\n\r\n    /// @dev Sets `amount` as the allowance of `spender` over the tokens of `owner`.\r\n    ///\r\n    /// Emits a {Approval} event.\r\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            let owner_ := shl(96, owner)\r\n            // Compute the allowance slot and store the amount.\r\n            mstore(0x20, spender)\r\n            mstore(0x0c, or(owner_, _ALLOWANCE_SLOT_SEED))\r\n            sstore(keccak256(0x0c, 0x34), amount)\r\n            // Emit the {Approval} event.\r\n            mstore(0x00, amount)\r\n            log3(0x00, 0x20, _APPROVAL_EVENT_SIGNATURE, shr(96, owner_), shr(96, mload(0x2c)))\r\n        }\r\n    }\r\n\r\n    /*\u00b4:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0\u2022.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:*/\r\n    /*                     HOOKS TO OVERRIDE                      */\r\n    /*.\u2022\u00b0:\u00b0.\u00b4+\u02da.*\u00b0.\u02da:*.\u00b4\u2022*.+\u00b0.\u2022\u00b0:\u00b4*.\u00b4\u2022*.\u2022\u00b0.\u2022\u00b0:\u00b0.\u00b4:\u2022\u02da\u00b0.*\u00b0.\u02da:*.\u00b4+\u00b0.\u2022*/\r\n\r\n    /// @dev Hook that is called before any transfer of tokens.\r\n    /// This includes minting and burning.\r\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\r\n\r\n    /// @dev Hook that is called after any transfer of tokens.\r\n    /// This includes minting and burning.\r\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\r\n}\r\n\r\n/// @notice Safe ETH and ERC20 transfer library that gracefully handles missing return values.\r\n/// @author Solady (https://github.com/vectorized/solady/blob/main/src/utils/SafeTransferLib.sol)\r\n/// @author Modified from Solmate (https://github.com/transmissions11/solmate/blob/main/src/utils/SafeTransferLib.sol)\r\n///\r\n/// @dev Note:\r\n/// - For ETH transfers, please use `forceSafeTransferETH` for DoS protection.\r\n/// - For ERC20s, this implementation won't check that a token has code,\r\n///   responsibility is delegated to the caller.\r\nlibrary SafeTransferLib {\r\n    /*\u00b4:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0\u2022.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:*/\r\n    /*                       CUSTOM ERRORS                        */\r\n    /*.\u2022\u00b0:\u00b0.\u00b4+\u02da.*\u00b0.\u02da:*.\u00b4\u2022*.+\u00b0.\u2022\u00b0:\u00b4*.\u00b4\u2022*.\u2022\u00b0.\u2022\u00b0:\u00b0.\u00b4:\u2022\u02da\u00b0.*\u00b0.\u02da:*.\u00b4+\u00b0.\u2022*/\r\n\r\n    /// @dev The ETH transfer has failed.\r\n    error ETHTransferFailed();\r\n\r\n    /// @dev The ERC20 `transferFrom` has failed.\r\n    error TransferFromFailed();\r\n\r\n    /// @dev The ERC20 `transfer` has failed.\r\n    error TransferFailed();\r\n\r\n    /// @dev The ERC20 `approve` has failed.\r\n    error ApproveFailed();\r\n\r\n    /*\u00b4:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0\u2022.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:*/\r\n    /*                         CONSTANTS                          */\r\n    /*.\u2022\u00b0:\u00b0.\u00b4+\u02da.*\u00b0.\u02da:*.\u00b4\u2022*.+\u00b0.\u2022\u00b0:\u00b4*.\u00b4\u2022*.\u2022\u00b0.\u2022\u00b0:\u00b0.\u00b4:\u2022\u02da\u00b0.*\u00b0.\u02da:*.\u00b4+\u00b0.\u2022*/\r\n\r\n    /// @dev Suggested gas stipend for contract receiving ETH that disallows any storage writes.\r\n    uint256 internal constant GAS_STIPEND_NO_STORAGE_WRITES = 2300;\r\n\r\n    /// @dev Suggested gas stipend for contract receiving ETH to perform a few\r\n    /// storage reads and writes, but low enough to prevent griefing.\r\n    uint256 internal constant GAS_STIPEND_NO_GRIEF = 100000;\r\n\r\n    /*\u00b4:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0\u2022.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:*/\r\n    /*                       ETH OPERATIONS                       */\r\n    /*.\u2022\u00b0:\u00b0.\u00b4+\u02da.*\u00b0.\u02da:*.\u00b4\u2022*.+\u00b0.\u2022\u00b0:\u00b4*.\u00b4\u2022*.\u2022\u00b0.\u2022\u00b0:\u00b0.\u00b4:\u2022\u02da\u00b0.*\u00b0.\u02da:*.\u00b4+\u00b0.\u2022*/\r\n\r\n    // If the ETH transfer MUST succeed with a reasonable gas budget, use the force variants.\r\n    //\r\n    // The regular variants:\r\n    // - Forwards all remaining gas to the target.\r\n    // - Reverts if the target reverts.\r\n    // - Reverts if the current contract has insufficient balance.\r\n    //\r\n    // The force variants:\r\n    // - Forwards with an optional gas stipend\r\n    //   (defaults to `GAS_STIPEND_NO_GRIEF`, which is sufficient for most cases).\r\n    // - If the target reverts, or if the gas stipend is exhausted,\r\n    //   creates a temporary contract to force send the ETH via `SELFDESTRUCT`.\r\n    //   Future compatible with `SENDALL`: https://eips.ethereum.org/EIPS/eip-4758.\r\n    // - Reverts if the current contract has insufficient balance.\r\n    //\r\n    // The try variants:\r\n    // - Forwards with a mandatory gas stipend.\r\n    // - Instead of reverting, returns whether the transfer succeeded.\r\n\r\n    /// @dev Sends `amount` (in wei) ETH to `to`.\r\n    function safeTransferETH(address to, uint256 amount) internal {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            if iszero(call(gas(), to, amount, codesize(), 0x00, codesize(), 0x00)) {\r\n                mstore(0x00, 0xb12d13eb) // `ETHTransferFailed()`.\r\n                revert(0x1c, 0x04)\r\n            }\r\n        }\r\n    }\r\n\r\n    /// @dev Sends all the ETH in the current contract to `to`.\r\n    function safeTransferAllETH(address to) internal {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            // Transfer all the ETH and check if it succeeded or not.\r\n            if iszero(call(gas(), to, selfbalance(), codesize(), 0x00, codesize(), 0x00)) {\r\n                mstore(0x00, 0xb12d13eb) // `ETHTransferFailed()`.\r\n                revert(0x1c, 0x04)\r\n            }\r\n        }\r\n    }\r\n\r\n    /// @dev Force sends `amount` (in wei) ETH to `to`, with a `gasStipend`.\r\n    function forceSafeTransferETH(address to, uint256 amount, uint256 gasStipend) internal {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            if lt(selfbalance(), amount) {\r\n                mstore(0x00, 0xb12d13eb) // `ETHTransferFailed()`.\r\n                revert(0x1c, 0x04)\r\n            }\r\n            if iszero(call(gasStipend, to, amount, codesize(), 0x00, codesize(), 0x00)) {\r\n                mstore(0x00, to) // Store the address in scratch space.\r\n                mstore8(0x0b, 0x73) // Opcode `PUSH20`.\r\n                mstore8(0x20, 0xff) // Opcode `SELFDESTRUCT`.\r\n                if iszero(create(amount, 0x0b, 0x16)) { revert(codesize(), codesize()) } // For gas estimation.\r\n            }\r\n        }\r\n    }\r\n\r\n    /// @dev Force sends all the ETH in the current contract to `to`, with a `gasStipend`.\r\n    function forceSafeTransferAllETH(address to, uint256 gasStipend) internal {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            if iszero(call(gasStipend, to, selfbalance(), codesize(), 0x00, codesize(), 0x00)) {\r\n                mstore(0x00, to) // Store the address in scratch space.\r\n                mstore8(0x0b, 0x73) // Opcode `PUSH20`.\r\n                mstore8(0x20, 0xff) // Opcode `SELFDESTRUCT`.\r\n                if iszero(create(selfbalance(), 0x0b, 0x16)) { revert(codesize(), codesize()) } // For gas estimation.\r\n            }\r\n        }\r\n    }\r\n\r\n    /// @dev Force sends `amount` (in wei) ETH to `to`, with `GAS_STIPEND_NO_GRIEF`.\r\n    function forceSafeTransferETH(address to, uint256 amount) internal {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            if lt(selfbalance(), amount) {\r\n                mstore(0x00, 0xb12d13eb) // `ETHTransferFailed()`.\r\n                revert(0x1c, 0x04)\r\n            }\r\n            if iszero(call(GAS_STIPEND_NO_GRIEF, to, amount, codesize(), 0x00, codesize(), 0x00)) {\r\n                mstore(0x00, to) // Store the address in scratch space.\r\n                mstore8(0x0b, 0x73) // Opcode `PUSH20`.\r\n                mstore8(0x20, 0xff) // Opcode `SELFDESTRUCT`.\r\n                if iszero(create(amount, 0x0b, 0x16)) { revert(codesize(), codesize()) } // For gas estimation.\r\n            }\r\n        }\r\n    }\r\n\r\n    /// @dev Force sends all the ETH in the current contract to `to`, with `GAS_STIPEND_NO_GRIEF`.\r\n    function forceSafeTransferAllETH(address to) internal {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            // forgefmt: disable-next-item\r\n            if iszero(call(GAS_STIPEND_NO_GRIEF, to, selfbalance(), codesize(), 0x00, codesize(), 0x00)) {\r\n                mstore(0x00, to) // Store the address in scratch space.\r\n                mstore8(0x0b, 0x73) // Opcode `PUSH20`.\r\n                mstore8(0x20, 0xff) // Opcode `SELFDESTRUCT`.\r\n                if iszero(create(selfbalance(), 0x0b, 0x16)) { revert(codesize(), codesize()) } // For gas estimation.\r\n            }\r\n        }\r\n    }\r\n\r\n    /// @dev Sends `amount` (in wei) ETH to `to`, with a `gasStipend`.\r\n    function trySafeTransferETH(address to, uint256 amount, uint256 gasStipend)\r\n        internal\r\n        returns (bool success)\r\n    {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            success := call(gasStipend, to, amount, codesize(), 0x00, codesize(), 0x00)\r\n        }\r\n    }\r\n\r\n    /// @dev Sends all the ETH in the current contract to `to`, with a `gasStipend`.\r\n    function trySafeTransferAllETH(address to, uint256 gasStipend)\r\n        internal\r\n        returns (bool success)\r\n    {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            success := call(gasStipend, to, selfbalance(), codesize(), 0x00, codesize(), 0x00)\r\n        }\r\n    }\r\n\r\n    /*\u00b4:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0\u2022.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:*/\r\n    /*                      ERC20 OPERATIONS                      */\r\n    /*.\u2022\u00b0:\u00b0.\u00b4+\u02da.*\u00b0.\u02da:*.\u00b4\u2022*.+\u00b0.\u2022\u00b0:\u00b4*.\u00b4\u2022*.\u2022\u00b0.\u2022\u00b0:\u00b0.\u00b4:\u2022\u02da\u00b0.*\u00b0.\u02da:*.\u00b4+\u00b0.\u2022*/\r\n\r\n    /// @dev Sends `amount` of ERC20 `token` from `from` to `to`.\r\n    /// Reverts upon failure.\r\n    ///\r\n    /// The `from` account must have at least `amount` approved for\r\n    /// the current contract to manage.\r\n    function safeTransferFrom(address token, address from, address to, uint256 amount) internal {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            let m := mload(0x40) // Cache the free memory pointer.\r\n            mstore(0x60, amount) // Store the `amount` argument.\r\n            mstore(0x40, to) // Store the `to` argument.\r\n            mstore(0x2c, shl(96, from)) // Store the `from` argument.\r\n            mstore(0x0c, 0x23b872dd000000000000000000000000) // `transferFrom(address,address,uint256)`.\r\n            // Perform the transfer, reverting upon failure.\r\n            if iszero(\r\n                and( // The arguments of `and` are evaluated from right to left.\r\n                    or(eq(mload(0x00), 1), iszero(returndatasize())), // Returned 1 or nothing.\r\n                    call(gas(), token, 0, 0x1c, 0x64, 0x00, 0x20)\r\n                )\r\n            ) {\r\n                mstore(0x00, 0x7939f424) // `TransferFromFailed()`.\r\n                revert(0x1c, 0x04)\r\n            }\r\n            mstore(0x60, 0) // Restore the zero slot to zero.\r\n            mstore(0x40, m) // Restore the free memory pointer.\r\n        }\r\n    }\r\n\r\n    /// @dev Sends all of ERC20 `token` from `from` to `to`.\r\n    /// Reverts upon failure.\r\n    ///\r\n    /// The `from` account must have their entire balance approved for\r\n    /// the current contract to manage.\r\n    function safeTransferAllFrom(address token, address from, address to)\r\n        internal\r\n        returns (uint256 amount)\r\n    {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            let m := mload(0x40) // Cache the free memory pointer.\r\n            mstore(0x40, to) // Store the `to` argument.\r\n            mstore(0x2c, shl(96, from)) // Store the `from` argument.\r\n            mstore(0x0c, 0x70a08231000000000000000000000000) // `balanceOf(address)`.\r\n            // Read the balance, reverting upon failure.\r\n            if iszero(\r\n                and( // The arguments of `and` are evaluated from right to left.\r\n                    gt(returndatasize(), 0x1f), // At least 32 bytes returned.\r\n                    staticcall(gas(), token, 0x1c, 0x24, 0x60, 0x20)\r\n                )\r\n            ) {\r\n                mstore(0x00, 0x7939f424) // `TransferFromFailed()`.\r\n                revert(0x1c, 0x04)\r\n            }\r\n            mstore(0x00, 0x23b872dd) // `transferFrom(address,address,uint256)`.\r\n            amount := mload(0x60) // The `amount` is already at 0x60. We'll need to return it.\r\n            // Perform the transfer, reverting upon failure.\r\n            if iszero(\r\n                and( // The arguments of `and` are evaluated from right to left.\r\n                    or(eq(mload(0x00), 1), iszero(returndatasize())), // Returned 1 or nothing.\r\n                    call(gas(), token, 0, 0x1c, 0x64, 0x00, 0x20)\r\n                )\r\n            ) {\r\n                mstore(0x00, 0x7939f424) // `TransferFromFailed()`.\r\n                revert(0x1c, 0x04)\r\n            }\r\n            mstore(0x60, 0) // Restore the zero slot to zero.\r\n            mstore(0x40, m) // Restore the free memory pointer.\r\n        }\r\n    }\r\n\r\n    /// @dev Sends `amount` of ERC20 `token` from the current contract to `to`.\r\n    /// Reverts upon failure.\r\n    function safeTransfer(address token, address to, uint256 amount) internal {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            mstore(0x14, to) // Store the `to` argument.\r\n            mstore(0x34, amount) // Store the `amount` argument.\r\n            mstore(0x00, 0xa9059cbb000000000000000000000000) // `transfer(address,uint256)`.\r\n            // Perform the transfer, reverting upon failure.\r\n            if iszero(\r\n                and( // The arguments of `and` are evaluated from right to left.\r\n                    or(eq(mload(0x00), 1), iszero(returndatasize())), // Returned 1 or nothing.\r\n                    call(gas(), token, 0, 0x10, 0x44, 0x00, 0x20)\r\n                )\r\n            ) {\r\n                mstore(0x00, 0x90b8ec18) // `TransferFailed()`.\r\n                revert(0x1c, 0x04)\r\n            }\r\n            mstore(0x34, 0) // Restore the part of the free memory pointer that was overwritten.\r\n        }\r\n    }\r\n\r\n    /// @dev Sends all of ERC20 `token` from the current contract to `to`.\r\n    /// Reverts upon failure.\r\n    function safeTransferAll(address token, address to) internal returns (uint256 amount) {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            mstore(0x00, 0x70a08231) // Store the function selector of `balanceOf(address)`.\r\n            mstore(0x20, address()) // Store the address of the current contract.\r\n            // Read the balance, reverting upon failure.\r\n            if iszero(\r\n                and( // The arguments of `and` are evaluated from right to left.\r\n                    gt(returndatasize(), 0x1f), // At least 32 bytes returned.\r\n                    staticcall(gas(), token, 0x1c, 0x24, 0x34, 0x20)\r\n                )\r\n            ) {\r\n                mstore(0x00, 0x90b8ec18) // `TransferFailed()`.\r\n                revert(0x1c, 0x04)\r\n            }\r\n            mstore(0x14, to) // Store the `to` argument.\r\n            amount := mload(0x34) // The `amount` is already at 0x34. We'll need to return it.\r\n            mstore(0x00, 0xa9059cbb000000000000000000000000) // `transfer(address,uint256)`.\r\n            // Perform the transfer, reverting upon failure.\r\n            if iszero(\r\n                and( // The arguments of `and` are evaluated from right to left.\r\n                    or(eq(mload(0x00), 1), iszero(returndatasize())), // Returned 1 or nothing.\r\n                    call(gas(), token, 0, 0x10, 0x44, 0x00, 0x20)\r\n                )\r\n            ) {\r\n                mstore(0x00, 0x90b8ec18) // `TransferFailed()`.\r\n                revert(0x1c, 0x04)\r\n            }\r\n            mstore(0x34, 0) // Restore the part of the free memory pointer that was overwritten.\r\n        }\r\n    }\r\n\r\n    /// @dev Sets `amount` of ERC20 `token` for `to` to manage on behalf of the current contract.\r\n    /// Reverts upon failure.\r\n    function safeApprove(address token, address to, uint256 amount) internal {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            mstore(0x14, to) // Store the `to` argument.\r\n            mstore(0x34, amount) // Store the `amount` argument.\r\n            mstore(0x00, 0x095ea7b3000000000000000000000000) // `approve(address,uint256)`.\r\n            // Perform the approval, reverting upon failure.\r\n            if iszero(\r\n                and( // The arguments of `and` are evaluated from right to left.\r\n                    or(eq(mload(0x00), 1), iszero(returndatasize())), // Returned 1 or nothing.\r\n                    call(gas(), token, 0, 0x10, 0x44, 0x00, 0x20)\r\n                )\r\n            ) {\r\n                mstore(0x00, 0x3e3f8f73) // `ApproveFailed()`.\r\n                revert(0x1c, 0x04)\r\n            }\r\n            mstore(0x34, 0) // Restore the part of the free memory pointer that was overwritten.\r\n        }\r\n    }\r\n\r\n    /// @dev Sets `amount` of ERC20 `token` for `to` to manage on behalf of the current contract.\r\n    /// If the initial attempt to approve fails, attempts to reset the approved amount to zero,\r\n    /// then retries the approval again (some tokens, e.g. USDT, requires this).\r\n    /// Reverts upon failure.\r\n    function safeApproveWithRetry(address token, address to, uint256 amount) internal {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            mstore(0x14, to) // Store the `to` argument.\r\n            mstore(0x34, amount) // Store the `amount` argument.\r\n            mstore(0x00, 0x095ea7b3000000000000000000000000) // `approve(address,uint256)`.\r\n            // Perform the approval, retrying upon failure.\r\n            if iszero(\r\n                and( // The arguments of `and` are evaluated from right to left.\r\n                    or(eq(mload(0x00), 1), iszero(returndatasize())), // Returned 1 or nothing.\r\n                    call(gas(), token, 0, 0x10, 0x44, 0x00, 0x20)\r\n                )\r\n            ) {\r\n                mstore(0x34, 0) // Store 0 for the `amount`.\r\n                mstore(0x00, 0x095ea7b3000000000000000000000000) // `approve(address,uint256)`.\r\n                pop(call(gas(), token, 0, 0x10, 0x44, codesize(), 0x00)) // Reset the approval.\r\n                mstore(0x34, amount) // Store back the original `amount`.\r\n                // Retry the approval, reverting upon failure.\r\n                if iszero(\r\n                    and(\r\n                        or(eq(mload(0x00), 1), iszero(returndatasize())), // Returned 1 or nothing.\r\n                        call(gas(), token, 0, 0x10, 0x44, 0x00, 0x20)\r\n                    )\r\n                ) {\r\n                    mstore(0x00, 0x3e3f8f73) // `ApproveFailed()`.\r\n                    revert(0x1c, 0x04)\r\n                }\r\n            }\r\n            mstore(0x34, 0) // Restore the part of the free memory pointer that was overwritten.\r\n        }\r\n    }\r\n\r\n    /// @dev Returns the amount of ERC20 `token` owned by `account`.\r\n    /// Returns zero if the `token` does not exist.\r\n    function balanceOf(address token, address account) internal view returns (uint256 amount) {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            mstore(0x14, account) // Store the `account` argument.\r\n            mstore(0x00, 0x70a08231000000000000000000000000) // `balanceOf(address)`.\r\n            amount :=\r\n                mul(\r\n                    mload(0x20),\r\n                    and( // The arguments of `and` are evaluated from right to left.\r\n                        gt(returndatasize(), 0x1f), // At least 32 bytes returned.\r\n                        staticcall(gas(), token, 0x10, 0x24, 0x20, 0x20)\r\n                    )\r\n                )\r\n        }\r\n    }\r\n}\r\n\r\n/// @dev Forked from https://github.com/AladdinDAO/aladdin-v3-contracts/blob/main/contracts/concentrator/stakedao/VeSDTDelegation.sol\r\n/// @dev Changes:\r\n/// - Bump solidity version to `0.8.19`.\r\n/// - Use `SafeTransferLib` and`ERC20` from `solady` instead of `OpenZeppelin`.\r\ncontract VeBoostDelegation {\r\n    using SafeTransferLib for ERC20;\r\n\r\n    /// @notice Emitted when someone boost the `LockerProxy` contract.\r\n    /// @param _owner The address of veToken owner.\r\n    /// @param _recipient The address of recipient who will receive the pool share.\r\n    /// @param _amount The amount of veToken to boost.\r\n    /// @param _endtime The timestamp in seconds when the boost will end.\r\n    event Boost(address indexed _owner, address indexed _recipient, uint256 _amount, uint256 _endtime);\r\n\r\n    /// @notice Emitted when someone checkpoint pending rewards.\r\n    /// @param _timestamp The timestamp in seconds when the checkpoint happened.\r\n    /// @param _amount The amount of pending rewards distributed.\r\n    event CheckpointReward(uint256 _timestamp, uint256 _amount);\r\n\r\n    /// @notice Emitted when user claim pending rewards\r\n    /// @param _owner The owner of the pool share.\r\n    /// @param _recipient The address of recipient who will receive the rewards.\r\n    /// @param _amount The amount of pending rewards claimed.\r\n    event Claim(address indexed _owner, address indexed _recipient, uint256 _amount);\r\n\r\n    /// @dev The address of Reward Token.\r\n    address public immutable REWARD_TOKEN;\r\n\r\n    /// @dev The address of Token Vote-Escrowed Boost contract.\r\n    // solhint-disable-next-line const-name-snakecase\r\n    address public immutable veTOKEN_BOOST;\r\n\r\n    /// @notice The delay in seconds for the reward checkpoint.\r\n    uint256 private immutable REWARD_CHECKPOINT_DELAY = 1 days;\r\n\r\n    /// @dev The number of seconds in a week.\r\n    uint256 private constant WEEK = 86400 * 7;\r\n\r\n    /// @notice The name of the vault.\r\n    // solhint-disable-next-line const-name-snakecase\r\n    string public name;\r\n\r\n    /// @notice The symbol of the vault.\r\n    // solhint-disable-next-line const-name-snakecase\r\n    string public symbol;\r\n\r\n    /// @notice The decimal of the vault share.\r\n    // solhint-disable-next-line const-name-snakecase\r\n    uint8 public constant decimals = 18;\r\n\r\n    /// @notice The address of lockerProxy contract.\r\n    address public immutable lockerProxy;\r\n\r\n    /// @dev Compiler will pack this into single `uint256`.\r\n    /// The boost power can be represented as `bias - slope * (t - ts)` if the time `t` and `ts`\r\n    /// is in the same epoch. If epoch cross happens, we will change the corresponding value based\r\n    /// on slope changes.\r\n    struct Point {\r\n        // The bias for the linear function\r\n        uint112 bias;\r\n        // The slop for the linear function\r\n        uint112 slope;\r\n        // The start timestamp in seconds for current epoch.\r\n        // `uint32` should be enough for next 83 years.\r\n        uint32 ts;\r\n    }\r\n\r\n    /// @dev Compiler will pack this into single `uint256`.\r\n    struct RewardData {\r\n        // The current balance of reward token.\r\n        uint128 balance;\r\n        // The timestamp in second when last distribute happened.\r\n        uint128 timestamp;\r\n    }\r\n\r\n    /// @notice Mapping from user address to current updated point.\r\n    /// @dev The global information is stored in address(0)\r\n    mapping(address => Point) public boosts;\r\n\r\n    /// @notice Mapping from user address to boost endtime to slope changes.\r\n    /// @dev The global information is stored in address(0)\r\n    mapping(address => mapping(uint256 => uint256)) public slopeChanges;\r\n\r\n    /// @notice Mapping from user address to week timestamp to the boost power.\r\n    /// @dev The global information is stored in address(0)\r\n    mapping(address => mapping(uint256 => uint256)) public historyBoosts;\r\n\r\n    /// @notice Mapping from week timestamp to the number of rewards accured during the week.\r\n    mapping(uint256 => uint256) public weeklyRewards;\r\n\r\n    /// @notice Mapping from user address to reward claimed week timestamp.\r\n    mapping(address => uint256) public claimIndex;\r\n\r\n    /// @notice The lastest reward distribute information.\r\n    RewardData public lastReward;\r\n\r\n    /**\r\n     * Constructor *********************************\r\n     */\r\n\r\n    constructor(\r\n        address _lockerProxy,\r\n        uint256 _startTimestamp,\r\n        address _rewardToken,\r\n        address _veTokenBoost,\r\n        string memory _name,\r\n        string memory _symbol\r\n    ) {\r\n        boosts[address(0)] = Point({bias: 0, slope: 0, ts: uint32(block.timestamp)});\r\n        lastReward = RewardData({balance: 0, timestamp: uint128(_startTimestamp)});\r\n\r\n        lockerProxy = _lockerProxy;\r\n        REWARD_TOKEN = _rewardToken;\r\n        veTOKEN_BOOST = _veTokenBoost;\r\n        name = _name;\r\n        symbol = _symbol;\r\n    }\r\n\r\n    /**\r\n     * View Functions *********************************\r\n     */\r\n\r\n    /// @notice Return the current total pool shares.\r\n    function totalSupply() external view returns (uint256) {\r\n        Point memory p = _checkpointRead(address(0));\r\n        return p.bias - p.slope * (block.timestamp - p.ts);\r\n    }\r\n\r\n    /// @notice Return the current pool share for the user.\r\n    /// @param _user The address of the user to query.\r\n    function balanceOf(address _user) external view returns (uint256) {\r\n        if (_user == address(0)) return 0;\r\n\r\n        Point memory p = _checkpointRead(_user);\r\n        return p.bias - p.slope * (block.timestamp - p.ts);\r\n    }\r\n\r\n    /**\r\n     * Mutated Functions *********************************\r\n     */\r\n\r\n    /// @notice Boost some veToken to `LockerProxy` contract permited.\r\n    /// @dev Use `_amount=-1` to boost all available power.\r\n    /// @param _amount The amount of veToken to boost.\r\n    /// @param _endtime The timestamp in seconds when the boost will end.\r\n    /// @param _recipient The address of recipient who will receive the pool share.\r\n    /// @param _deadline The deadline in seconds for the permit signature.\r\n    /// @param _v The V part of the signature\r\n    /// @param _r The R part of the signature\r\n    /// @param _s The S part of the signature\r\n    function boostPermit(\r\n        uint256 _amount,\r\n        uint256 _endtime,\r\n        address _recipient,\r\n        uint256 _deadline,\r\n        uint8 _v,\r\n        bytes32 _r,\r\n        bytes32 _s\r\n    ) external {\r\n        // set allowance\r\n        IVeBoost(veTOKEN_BOOST).permit(msg.sender, address(this), _amount, _deadline, _v, _r, _s);\r\n\r\n        // do delegation\r\n        boost(_amount, _endtime, _recipient);\r\n    }\r\n\r\n    /// @notice Boost some veToken to `lockerProxy` contract.\r\n    /// @dev Use `_amount=-1` to boost all available power.\r\n    /// @param _amount The amount of veToken to boost.\r\n    /// @param _endtime The timestamp in seconds when the boost will end.\r\n    /// @param _recipient The address of recipient who will receive the pool share.\r\n    function boost(uint256 _amount, uint256 _endtime, address _recipient) public {\r\n        require(_recipient != address(0), \"recipient is zero address\");\r\n        if (_amount == type(uint256).max) {\r\n            _amount = IVeBoost(veTOKEN_BOOST).delegable_balance(msg.sender);\r\n        }\r\n\r\n        IVeBoost(veTOKEN_BOOST).boost(lockerProxy, _amount, _endtime, msg.sender);\r\n\r\n        _boost(_amount, _endtime, _recipient);\r\n    }\r\n\r\n    /// @notice Claim rewards for some user.\r\n    /// @param _user The address of user to claim.\r\n    /// @param _recipient The address of recipient who will receive the reward.\r\n    /// @return The amount of reward claimed.\r\n    function claim(address _user, address _recipient) external returns (uint256) {\r\n        if (_user != msg.sender) {\r\n            require(_recipient == _user, \"claim from others to others\");\r\n        }\r\n        require(_user != address(0), \"claim for zero address\");\r\n\r\n        // during claiming, update the point if 1 day pasts, since we will not use the latest point\r\n        Point memory p = boosts[address(0)];\r\n        if (block.timestamp >= p.ts + REWARD_CHECKPOINT_DELAY) {\r\n            _checkpointWrite(address(0), p);\r\n            boosts[address(0)] = p;\r\n        }\r\n\r\n        // during claiming, update the point if 1 day pasts, since we will not use the latest point\r\n        p = boosts[_user];\r\n        if (block.timestamp >= p.ts + REWARD_CHECKPOINT_DELAY) {\r\n            _checkpointWrite(_user, p);\r\n            boosts[_user] = p;\r\n        }\r\n\r\n        // checkpoint weekly reward\r\n        _checkpointReward(false);\r\n\r\n        // claim reward\r\n        return _claim(_user, _recipient);\r\n    }\r\n\r\n    /// @notice Force checkpoint reward status.\r\n    function checkpointReward() external {\r\n        _checkpointReward(true);\r\n    }\r\n\r\n    /// @notice Force checkpoint user information.\r\n    /// @dev User `_user=address(0)` to checkpoint total supply.\r\n    /// @param _user The address of user to checkpoint.\r\n    function checkpoint(address _user) external {\r\n        Point memory p = boosts[_user];\r\n        _checkpointWrite(_user, p);\r\n        boosts[_user] = p;\r\n    }\r\n\r\n    /**\r\n     * Internal Functions *********************************\r\n     */\r\n\r\n    /// @dev Internal function to update boost records\r\n    /// @param _amount The amount of veToken to boost.\r\n    /// @param _endtime The timestamp in seconds when the boost will end.\r\n    /// @param _recipient The address of recipient who will receive the pool share.\r\n    function _boost(uint256 _amount, uint256 _endtime, address _recipient) internal {\r\n        // initialize claim index\r\n        if (claimIndex[_recipient] == 0) {\r\n            claimIndex[_recipient] = (block.timestamp / WEEK) * WEEK;\r\n        }\r\n\r\n        // _endtime should always be multiple of WEEK\r\n        uint256 _slope = _amount / (_endtime - block.timestamp);\r\n        uint256 _bias = _slope * (_endtime - block.timestamp);\r\n\r\n        // update global state\r\n        _update(_bias, _slope, _endtime, address(0));\r\n\r\n        // update user state\r\n        _update(_bias, _slope, _endtime, _recipient);\r\n\r\n        emit Boost(msg.sender, _recipient, _amount, _endtime);\r\n    }\r\n\r\n    /// @dev Internal function to update veBoost point\r\n    /// @param _bias The bias delta of the point.\r\n    /// @param _slope The slope delta of the point.\r\n    /// @param _endtime The endtime in seconds for the boost.\r\n    /// @param _user The address of user to update.\r\n    function _update(uint256 _bias, uint256 _slope, uint256 _endtime, address _user) internal {\r\n        Point memory p = boosts[_user];\r\n        _checkpointWrite(_user, p);\r\n        p.bias += uint112(_bias);\r\n        p.slope += uint112(_slope);\r\n\r\n        slopeChanges[_user][_endtime] += _slope;\r\n        boosts[_user] = p;\r\n\r\n        if (p.ts % WEEK == 0) {\r\n            historyBoosts[_user][p.ts] = p.bias;\r\n        }\r\n    }\r\n\r\n    /// @dev Internal function to claim user rewards.\r\n    /// @param _user The address of user to claim.\r\n    /// @param _recipient The address of recipient who will receive the reward.\r\n    /// @return The amount of reward claimed.\r\n    function _claim(address _user, address _recipient) internal returns (uint256) {\r\n        uint256 _index = claimIndex[_user];\r\n        uint256 _lastTime = lastReward.timestamp;\r\n        uint256 _amount = 0;\r\n        uint256 _thisWeek = (block.timestamp / WEEK) * WEEK;\r\n\r\n        // claim at most 50 weeks in one tx\r\n        for (uint256 i = 0; i < 50; i++) {\r\n            // we don't claim rewards from current week.\r\n            if (_index >= _lastTime || _index >= _thisWeek) break;\r\n            uint256 _totalPower = historyBoosts[address(0)][_index];\r\n            uint256 _userPower = historyBoosts[_user][_index];\r\n            if (_totalPower != 0 && _userPower != 0) {\r\n                _amount += (_userPower * weeklyRewards[_index]) / _totalPower;\r\n            }\r\n            _index += WEEK;\r\n        }\r\n        claimIndex[_user] = _index;\r\n\r\n        if (_amount > 0) {\r\n            SafeTransferLib.safeTransfer(REWARD_TOKEN, _recipient, _amount);\r\n            lastReward.balance -= uint128(_amount);\r\n        }\r\n\r\n        emit Claim(_user, _recipient, _amount);\r\n        return _amount;\r\n    }\r\n\r\n    /// @dev Internal function to read checkpoint result without change state.\r\n    /// @param _user The address of user to checkpoint.\r\n    /// @return The result point for the user.\r\n    function _checkpointRead(address _user) internal view returns (Point memory) {\r\n        Point memory p = boosts[_user];\r\n\r\n        if (p.ts == 0) {\r\n            p.ts = uint32(block.timestamp);\r\n        }\r\n        if (p.ts == block.timestamp) {\r\n            return p;\r\n        }\r\n\r\n        uint256 ts = (p.ts / WEEK) * WEEK;\r\n        for (uint256 i = 0; i < 255; i++) {\r\n            ts += WEEK;\r\n            uint256 _slopeChange = 0;\r\n            if (ts > block.timestamp) {\r\n                ts = block.timestamp;\r\n            } else {\r\n                _slopeChange = slopeChanges[_user][ts];\r\n            }\r\n\r\n            p.bias -= p.slope * uint112(ts - p.ts);\r\n            p.slope -= uint112(_slopeChange);\r\n            p.ts = uint32(ts);\r\n\r\n            if (p.ts == block.timestamp) {\r\n                break;\r\n            }\r\n        }\r\n        return p;\r\n    }\r\n\r\n    /// @dev Internal function to read checkpoint result and change state.\r\n    /// @param _user The address of user to checkpoint.\r\n    function _checkpointWrite(address _user, Point memory p) internal {\r\n        if (p.ts == 0) p.ts = uint32(block.timestamp);\r\n        if (p.ts == block.timestamp) return;\r\n\r\n        uint256 ts = (p.ts / WEEK) * WEEK;\r\n        for (uint256 i = 0; i < 255; i++) {\r\n            ts += WEEK;\r\n            uint256 _slopeChange = 0;\r\n            if (ts > block.timestamp) {\r\n                ts = block.timestamp;\r\n            } else {\r\n                _slopeChange = slopeChanges[_user][ts];\r\n            }\r\n\r\n            p.bias -= p.slope * uint112(ts - p.ts);\r\n            p.slope -= uint112(_slopeChange);\r\n            p.ts = uint32(ts);\r\n\r\n            if (ts % WEEK == 0) {\r\n                historyBoosts[_user][ts] = p.bias;\r\n            }\r\n\r\n            if (p.ts == block.timestamp) {\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    /// @dev Internal function to checkpoint the rewards\r\n    /// @param _force Whether to do force checkpoint.\r\n    function _checkpointReward(bool _force) internal {\r\n        RewardData memory _last = lastReward;\r\n        // We only claim in the next week, so the update can delay 1 day.\r\n        if (!_force && block.timestamp <= _last.timestamp + REWARD_CHECKPOINT_DELAY) return;\r\n        require(block.timestamp >= _last.timestamp, \"not start yet\");\r\n\r\n        // update timestamp\r\n        uint256 _lastTime = _last.timestamp;\r\n        uint256 _sinceLast = block.timestamp - _last.timestamp;\r\n        _last.timestamp = uint128(block.timestamp);\r\n        // update balance\r\n        uint256 _balance = ERC20(REWARD_TOKEN).balanceOf(address(this));\r\n        uint256 _amount = _balance - _last.balance;\r\n        _last.balance = uint128(_balance);\r\n        lastReward = _last;\r\n\r\n        if (_amount > 0) {\r\n            uint256 _thisWeek = (_lastTime / WEEK) * WEEK;\r\n\r\n            // 20 should be enough, since we are doing checkpoint every week.\r\n            for (uint256 i = 0; i < 20; i++) {\r\n                uint256 _nextWeek = _thisWeek + WEEK;\r\n                if (block.timestamp < _nextWeek) {\r\n                    if (_sinceLast == 0) {\r\n                        weeklyRewards[_thisWeek] += _amount;\r\n                    } else {\r\n                        weeklyRewards[_thisWeek] += (_amount * (block.timestamp - _lastTime)) / _sinceLast;\r\n                    }\r\n                    break;\r\n                } else {\r\n                    if (_sinceLast == 0 && _nextWeek == _lastTime) {\r\n                        weeklyRewards[_thisWeek] += _amount;\r\n                    } else {\r\n                        weeklyRewards[_thisWeek] += (_amount * (_nextWeek - _lastTime)) / _sinceLast;\r\n                    }\r\n                }\r\n                _lastTime = _nextWeek;\r\n                _thisWeek = _nextWeek;\r\n            }\r\n        }\r\n\r\n        emit CheckpointReward(block.timestamp, _amount);\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lockerProxy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_startTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_rewardToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_veTokenBoost\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_endtime\",\"type\":\"uint256\"}],\"name\":\"Boost\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"CheckpointReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Claim\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"REWARD_TOKEN\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endtime\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"boost\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endtime\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"_r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_s\",\"type\":\"bytes32\"}],\"name\":\"boostPermit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"boosts\",\"outputs\":[{\"internalType\":\"uint112\",\"name\":\"bias\",\"type\":\"uint112\"},{\"internalType\":\"uint112\",\"name\":\"slope\",\"type\":\"uint112\"},{\"internalType\":\"uint32\",\"name\":\"ts\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"checkpoint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkpointReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"claim\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"claimIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"historyBoosts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastReward\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"balance\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"timestamp\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockerProxy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"slopeChanges\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"veTOKEN_BOOST\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"weeklyRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "VeBoostDelegation", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000038d10708ce535361f178f55e68df7e85acc6627000000000000000000000000000000000000000000000000000000000658cba8000000000000000000000000073968b9a57c6e53d41345fd57a6e6ae27d6cdb2f00000000000000000000000047b3262c96bb55a8d2e4f8e3fed29d2eab6db6e900000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000155374616b652044414f20766553445420426f6f73740000000000000000000000000000000000000000000000000000000000000000000000000000000000000b76655344542d426f6f7374000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://c43a692e795539df098e90549fc5a9dce52543591265902a3afbaca3ab390911"}