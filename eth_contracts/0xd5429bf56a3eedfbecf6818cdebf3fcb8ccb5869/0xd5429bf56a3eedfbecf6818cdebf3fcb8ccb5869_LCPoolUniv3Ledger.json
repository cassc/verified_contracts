{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/contracts/LCPoolUniv3Ledger.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.8.0 <0.9.0;\\r\\n\\r\\nimport \\\"./interfaces/IFeeTierStrate.sol\\\";\\r\\n\\r\\nimport \\\"./utils/Ownable.sol\\\";\\r\\n\\r\\ncontract LCPoolUniv3Ledger is Ownable {\\r\\n  address public feeStrate;\\r\\n\\r\\n  uint256 private constant MULTIPLIER = 1_0000_0000_0000_0000;\\r\\n\\r\\n  // token0 -> token1 -> fee -> nftId\\r\\n  mapping (address => mapping(address => mapping(uint24 => uint256))) public poolToNftId;\\r\\n\\r\\n  uint256 public tvl;\\r\\n  uint256 public rtr0;\\r\\n  uint256 public rtr1;\\r\\n\\r\\n  struct StakeInfo {\\r\\n    uint256 amount;   // Staked liquidity\\r\\n    uint256 rtr0;\\r\\n    uint256 rtr1;\\r\\n    uint256 updatedAt;\\r\\n  }\\r\\n\\r\\n  // account -> nftid -> basketId -> info basketid=0?lcpool\\r\\n  mapping (address => mapping (uint256 => mapping (uint256 => StakeInfo))) public userInfo;\\r\\n\\r\\n  mapping (address => bool) public managers;\\r\\n  modifier onlyManager() {\\r\\n    require(managers[msg.sender], \\\"LC pool ledger: !manager\\\");\\r\\n    _;\\r\\n  }\\r\\n\\r\\n  constructor (\\r\\n    address _feeStrate\\r\\n  ) {\\r\\n    require(_feeStrate != address(0), \\\"LC pool ledger: feeStrate\\\");\\r\\n\\r\\n    feeStrate = _feeStrate;\\r\\n    managers[msg.sender] = true;\\r\\n  }\\r\\n\\r\\n  function setPoolToNftId(address token0, address token1, uint24 fee, uint256 id) public onlyManager {\\r\\n    poolToNftId[token0][token1][fee] = id;\\r\\n  }\\r\\n\\r\\n  function getUserLiquidity(address account, uint256 tokenId, uint256 basketId) public view returns(uint256) {\\r\\n    return userInfo[account][tokenId][basketId].amount;\\r\\n  }\\r\\n\\r\\n  function updateInfo(address acc, uint256 tId, uint256 bId, uint256 liquidity, uint256 reward0, uint256 reward1, bool increase) public onlyManager returns(uint256, uint256) {\\r\\n    (uint256 pendingReward0, uint256 pendingReward1) = _getSingleReward(acc, tId, bId, 0, 0, false);\\r\\n\\r\\n    rtr0 += (tvl > 0 ? reward0 * MULTIPLIER / tvl : 0);\\r\\n    rtr1 += (tvl > 0 ? reward1 * MULTIPLIER / tvl : 0);\\r\\n    tvl = increase ? tvl + liquidity : (tvl >= liquidity ? tvl - liquidity : 0);\\r\\n    \\r\\n    if (increase) {\\r\\n      userInfo[acc][tId][bId].amount += liquidity;\\r\\n    }\\r\\n    else {\\r\\n      if (userInfo[acc][tId][bId].amount >= liquidity) {\\r\\n        userInfo[acc][tId][bId].amount -= liquidity;\\r\\n      }\\r\\n      else {\\r\\n        userInfo[acc][tId][bId].amount = 0;\\r\\n      }\\r\\n    }\\r\\n    userInfo[acc][tId][bId].rtr0 = rtr0;\\r\\n    userInfo[acc][tId][bId].rtr1 = rtr1;\\r\\n    userInfo[acc][tId][bId].updatedAt = block.timestamp;\\r\\n    return (pendingReward0, pendingReward1);\\r\\n  }\\r\\n\\r\\n  function _getSingleReward(address acc, uint256 tId, uint256 bId, uint256 reward0, uint256 reward1, bool cutfee) internal view returns(uint256, uint256) {\\r\\n    uint256[] memory jvar = new uint256[](7);\\r\\n    jvar[0] = 0;  // reward0\\r\\n    jvar[1] = 0;  // reward1\\r\\n    jvar[2] = userInfo[acc][tId][bId].amount;\\r\\n\\r\\n    uint256 userRtr0 = userInfo[acc][tId][bId].rtr0;\\r\\n    uint256 userRtr1 = userInfo[acc][tId][bId].rtr1;\\r\\n\\r\\n    if (jvar[2] > 0) {\\r\\n      uint256 vrtr0 = rtr0;\\r\\n      uint256 vrtr1 = rtr1;\\r\\n\\r\\n      if (reward0 > 0) {\\r\\n        vrtr0 += (tvl > 0 ? reward0 * MULTIPLIER / tvl : 0);\\r\\n      }\\r\\n      if (reward1 > 0) {\\r\\n        vrtr1 += (tvl > 0 ? reward1 * MULTIPLIER / tvl : 0);\\r\\n      }\\r\\n\\r\\n      jvar[0] = (vrtr0 >= userRtr0) ? (vrtr0 - userRtr0) * jvar[2] / MULTIPLIER : 0;\\r\\n      jvar[1] = (vrtr1 >= userRtr1) ? (vrtr1 - userRtr1) * jvar[2] / MULTIPLIER : 0;\\r\\n    }\\r\\n    else {\\r\\n      return (jvar[0], jvar[1]);\\r\\n    }\\r\\n\\r\\n    if (cutfee == false) {\\r\\n      return (jvar[0], jvar[1]);\\r\\n    }\\r\\n\\r\\n    (jvar[4], jvar[5]) = IFeeTierStrate(feeStrate).getTotalFee(bId);\\r\\n    require(jvar[5] > 0, \\\"LC pool ledger: wrong fee configure\\\");\\r\\n    jvar[3] = jvar[0] * jvar[4] / jvar[5]; // rewardLc0\\r\\n    jvar[6] = jvar[1] * jvar[4] / jvar[5]; // rewardLc1\\r\\n\\r\\n    if (jvar[6] > 0) {\\r\\n      uint256[] memory feeIndexs = IFeeTierStrate(feeStrate).getAllTier();\\r\\n      uint256 len = feeIndexs.length;\\r\\n      uint256 maxFee = IFeeTierStrate(feeStrate).getMaxFee();\\r\\n      for (uint256 i=0; i<len; i++) {\\r\\n        (, ,uint256 fee) = IFeeTierStrate(feeStrate).getTier(feeIndexs[i]);\\r\\n        uint256 feeAmount = jvar[6] * fee / maxFee;\\r\\n        if (feeAmount > 0 && jvar[1] >= feeAmount) {\\r\\n          jvar[1] -= feeAmount;\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n    if (jvar[3] > 0) {\\r\\n      uint256[] memory feeIndexs = IFeeTierStrate(feeStrate).getAllTier();\\r\\n      uint256 len = feeIndexs.length;\\r\\n      uint256 maxFee = IFeeTierStrate(feeStrate).getMaxFee();\\r\\n      for (uint256 i=0; i<len; i++) {\\r\\n        (, ,uint256 fee) = IFeeTierStrate(feeStrate).getTier(feeIndexs[i]);\\r\\n        uint256 feeAmount = jvar[3] * fee / maxFee;\\r\\n        if (feeAmount > 0 && jvar[0] >= feeAmount) {\\r\\n          jvar[0] -= feeAmount;\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n\\r\\n    return (jvar[0], jvar[1]);\\r\\n  }\\r\\n\\r\\n  function getReward(address account, uint256[] memory tokenId, uint256[] memory basketIds, uint256[] memory rewards) public view\\r\\n    returns(uint256[] memory, uint256[] memory)\\r\\n  {\\r\\n    uint256 bLen = basketIds.length;\\r\\n    uint256 len = tokenId.length * bLen;\\r\\n    uint256[] memory extraLp = new uint256[](len);\\r\\n    uint256[] memory reward = new uint256[](len);\\r\\n    for (uint256 x = 0; x < tokenId.length; x ++) {\\r\\n      for (uint256 y = 0; y < bLen; y ++) {\\r\\n        (extraLp[x*bLen + y], reward[x*bLen + y]) = _getSingleReward(account, tokenId[x], basketIds[y], rewards[0], rewards[1], true);\\r\\n      }\\r\\n    }\\r\\n    return (extraLp, reward);\\r\\n  }\\r\\n\\r\\n  function setManager(address account, bool access) public onlyOwner {\\r\\n    managers[account] = access;\\r\\n  }\\r\\n\\r\\n  function setFeeStrate(address _feeStrate) external onlyManager {\\r\\n    require(_feeStrate != address(0), \\\"LC pool ledger: Fee Strate\\\");\\r\\n    feeStrate = _feeStrate;\\r\\n  }\\r\\n}\\r\\n\"\r\n    },\r\n    \"/contracts/utils/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\r\\n\\r\\npragma solidity >=0.8.0 <0.9.0;\\r\\n\\r\\nimport \\\"./Context.sol\\\";\\r\\n\\r\\nabstract contract Ownable is Context {\\r\\n    address private _owner;\\r\\n\\r\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\r\\n\\r\\n    constructor() {\\r\\n        _transferOwnership(_msgSender());\\r\\n    }\\r\\n\\r\\n    modifier onlyOwner() {\\r\\n        _checkOwner();\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function owner() public view virtual returns (address) {\\r\\n        return _owner;\\r\\n    }\\r\\n\\r\\n    function _checkOwner() internal view virtual {\\r\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\r\\n    }\\r\\n\\r\\n    function renounceOwnership() public virtual onlyOwner {\\r\\n        _transferOwnership(address(0));\\r\\n    }\\r\\n\\r\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\r\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\r\\n        _transferOwnership(newOwner);\\r\\n    }\\r\\n\\r\\n    function _transferOwnership(address newOwner) internal virtual {\\r\\n        address oldOwner = _owner;\\r\\n        _owner = newOwner;\\r\\n        emit OwnershipTransferred(oldOwner, newOwner);\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\r\\n\\r\\npragma solidity >=0.8.0 <0.9.0;\\r\\n\\r\\nabstract contract Context {\\r\\n    function _msgSender() internal view virtual returns (address) {\\r\\n        return msg.sender;\\r\\n    }\\r\\n    function _msgData() internal view virtual returns (bytes calldata) {\\r\\n        return msg.data;\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"/contracts/interfaces/IFeeTierStrate.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.8.0 <0.9.0;\\r\\n\\r\\ninterface IFeeTierStrate {\\r\\n  function getMaxFee() external view returns(uint256);\\r\\n  function getDepositFee(uint256 id) external view returns(uint256, uint256);\\r\\n  function getTotalFee(uint256 id) external view returns(uint256, uint256);\\r\\n  function getWithdrawFee(uint256 id) external view returns(uint256, uint256);\\r\\n  function getAllTier() external view returns(uint256[] memory);\\r\\n  function getTier(uint256 index) external view returns(address, string memory, uint256);\\r\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"paris\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeStrate\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"feeStrate\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenId\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"basketIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"rewards\",\"type\":\"uint256[]\"}],\"name\":\"getReward\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"basketId\",\"type\":\"uint256\"}],\"name\":\"getUserLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"managers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"}],\"name\":\"poolToNftId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rtr0\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rtr1\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeStrate\",\"type\":\"address\"}],\"name\":\"setFeeStrate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"access\",\"type\":\"bool\"}],\"name\":\"setManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"setPoolToNftId\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tvl\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"acc\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reward0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reward1\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"increase\",\"type\":\"bool\"}],\"name\":\"updateInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rtr0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rtr1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"updatedAt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "LCPoolUniv3Ledger", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000471200ce99a9608b5676660c98d31167825af1de", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}