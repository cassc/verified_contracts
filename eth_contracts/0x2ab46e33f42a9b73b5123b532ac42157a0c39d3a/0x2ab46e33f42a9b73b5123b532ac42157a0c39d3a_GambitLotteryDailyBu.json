{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract GambitLotteryDailyBundle {\r\n    address payable public manager;\r\n    address payable[] public players;\r\n    address public nativeToken;\r\n    address public deadAddress=0x000000000000000000000000000000000000dEaD;\r\n    address public lotteryWinner;\r\n    address public usdtAddress=0xdAC17F958D2ee523a2206206994597C13D831ec7;\r\n\r\n    mapping(address => uint256) public ownedTickets;\r\n\r\n    uint256 public maxTicket=10;\r\n    uint256 public round=1;\r\n    uint256 public countDownTicker=86400; //1 Day\r\n    uint256 public endTime=0;\r\n    uint256 public ticketPrice = 400000000000000000000000; //400000 GAMBIT\r\n\r\n    event Deposit(address indexed sender, uint256 amount);\r\n    event Withdraw(address indexed recipient, uint256 amount);\r\n    constructor(address nativeTokenAddress) {\r\n        manager = payable(msg.sender);\r\n        nativeToken = nativeTokenAddress;\r\n    }\r\n    IERC20 token = IERC20(nativeToken);\r\n    IERC20 reward = IERC20(usdtAddress);\r\n\r\n    function enter() public {\r\n        require(ownedTickets[msg.sender] <= maxTicket-1, \"Maximum Tickets is 10\");\r\n        require(block.timestamp <= endTime, \"This Round is end !\");\r\n\r\n        token.transferFrom(msg.sender, deadAddress, ticketPrice);\r\n        ownedTickets[msg.sender] += 1;\r\n        players.push(payable(msg.sender));\r\n    }\r\n\r\n    function enterBundle() public {\r\n        require(ownedTickets[msg.sender] <= maxTicket-1, \"Maximum Tickets is 10\");\r\n        require(block.timestamp <= endTime, \"This Round is end !\");\r\n\r\n        uint256 amount = maxTicket-ownedTickets[msg.sender];\r\n        token.transferFrom(msg.sender, deadAddress, ticketPrice*amount);\r\n        ownedTickets[msg.sender] += 1*amount;\r\n        for (uint i = 0; i<amount; i++){\r\n        players.push(payable(msg.sender));\r\n        }\r\n    }\r\n\r\n    function random() private view returns (uint) {\r\n        return uint(keccak256(abi.encodePacked(block.prevrandao, block.timestamp, players)));\r\n    }\r\n\r\n    function pickWinner() public restricted {\r\n        require(players.length > 0, \"No players in the lottery\");\r\n        require(address(this).balance > 0, \"Insufficient Balance\");\r\n\r\n        if (block.timestamp >= endTime) {\r\n            uint index = random() % players.length;\r\n            address payable winner = players[index];\r\n            lotteryWinner = winner;\r\n            reward.transfer(winner, reward.balanceOf(address(this)));\r\n\r\n            // Reset players array for the next lottery\r\n            for (uint256 i = 0; i < players.length; i++) {\r\n                address ticketHolders = players[i];\r\n                ownedTickets[ticketHolders] = 0;\r\n            }\r\n\r\n            players = new address payable[](0);\r\n            round++;\r\n            endTime=block.timestamp+countDownTicker;\r\n        }\r\n        else {\r\n            require(false, \"Countdown Condition Not Met\");\r\n        }\r\n    }\r\n\r\n    modifier restricted() {\r\n        require(msg.sender == manager, \"Only the manager can call this function\");\r\n        _;\r\n    }\r\n\r\n    function getPlayers() public view returns (address payable[] memory) {\r\n        return players;\r\n    }\r\n\r\n    function getManager() public view returns (address) {\r\n        return manager;\r\n    }\r\n\r\n    function getWinner() public view returns (address) {\r\n        return lotteryWinner;\r\n    }\r\n\r\n    function getBalance() public view returns (uint) {\r\n        return address(this).balance;\r\n    }\r\n\r\n    function transferStuckToken(address addy, uint256 amount) public restricted {\r\n        IERC20 stuckToken = IERC20(addy);\r\n\r\n        stuckToken.transfer(msg.sender, amount);\r\n    }\r\n\r\n    function setTicketPrice(uint256 newPrice) public restricted {\r\n        ticketPrice = newPrice;\r\n    }\r\n\r\n    function activateRound() public restricted {\r\n        token = IERC20(nativeToken);\r\n        endTime = block.timestamp + countDownTicker;\r\n    }\r\n\r\n    function setNativeTokenAddress(address _nativeToken) public restricted {\r\n        nativeToken = _nativeToken;\r\n        token = IERC20(nativeToken);\r\n    }\r\n\r\n    function getNativeTokenAddress() public view returns(IERC20) {\r\n        return token;\r\n    }\r\n\r\n    function getTicketAmount(address sender) public view returns (uint) {\r\n        return ownedTickets[sender];\r\n    }\r\n    \r\n    function timeLeft() public view returns (uint256) {\r\n        if (block.timestamp >= endTime) {\r\n            return 0;\r\n        } else {\r\n            return endTime - block.timestamp;\r\n        }\r\n    }\r\n\r\n    function getTotalTicketSold() public view returns (uint) {\r\n        uint sold = 0;\r\n        for (uint i = 0; i<players.length; i++){\r\n            sold++;\r\n        }\r\n        return sold;\r\n    }\r\n\r\n    function setCountDown(uint256 newCountDown) public restricted {\r\n        countDownTicker = newCountDown;\r\n    }\r\n\r\n    function startCountDown() public restricted {\r\n        endTime = block.timestamp+countDownTicker;\r\n    }\r\n\r\n    function endRound() public restricted {\r\n        endTime = 0;\r\n    }\r\n\r\n    function clearStuckETH() public restricted {\r\n        manager.transfer(address(this).balance);\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    function getNativeTokenBalance() public view returns(uint256){\r\n        return token.balanceOf(address(this));\r\n    }\r\n\r\n    function totalBurn() public view returns(uint256) {\r\n        return token.balanceOf(deadAddress);\r\n    }\r\n\r\n    function getMaxTicket() public view returns(uint256) {\r\n        return maxTicket;\r\n    }\r\n\r\n    function changeMaxTicket(uint256 newMaxTicket) public restricted{\r\n        maxTicket = newMaxTicket;\r\n    }\r\n\r\n    function resetRound() public restricted {\r\n        round = 1;\r\n    }\r\n\r\n    function changeReward(address newRewardAddress) public restricted {\r\n        reward = IERC20(newRewardAddress);\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nativeTokenAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"activateRound\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newMaxTicket\",\"type\":\"uint256\"}],\"name\":\"changeMaxTicket\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newRewardAddress\",\"type\":\"address\"}],\"name\":\"changeReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"clearStuckETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"countDownTicker\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deadAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endRound\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enterBundle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMaxTicket\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNativeTokenAddress\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNativeTokenBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPlayers\",\"outputs\":[{\"internalType\":\"address payable[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"getTicketAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalTicketSold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getWinner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lotteryWinner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manager\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTicket\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nativeToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"ownedTickets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pickWinner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"players\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"resetRound\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"round\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newCountDown\",\"type\":\"uint256\"}],\"name\":\"setCountDown\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nativeToken\",\"type\":\"address\"}],\"name\":\"setNativeTokenAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newPrice\",\"type\":\"uint256\"}],\"name\":\"setTicketPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startCountDown\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ticketPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"timeLeft\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalBurn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferStuckToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdtAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "GambitLotteryDailyBundle", "CompilerVersion": "v0.8.24+commit.e11b9ed9", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "0000000000000000000000002ae21de576e0fe0367651ddcf76e04dd0608c076", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://779d053079b8f58dac4276c15ae67d9b0a3ae7c7fb0fb58cb0e7df4ab9a7fba4"}