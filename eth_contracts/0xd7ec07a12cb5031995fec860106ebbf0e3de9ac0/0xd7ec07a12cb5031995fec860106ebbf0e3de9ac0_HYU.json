{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @title ERC721 Token (Batch Mint)\r\n * @author 0xSumo <@PBADAO>\r\n *\r\n * - This NFT Art Collection is inspired by the Japanese professional skateboarder Yuto Horigome. -\r\n */\r\n\r\nabstract contract ERC721TokenReceiver {\r\n    function onERC721Received(address, address, uint256, bytes calldata) external virtual returns (bytes4) { return ERC721TokenReceiver.onERC721Received.selector; }\r\n}\r\n\r\nabstract contract ERC721 {\r\n    \r\n    event Transfer(address indexed from_, address indexed to_, uint256 indexed tokenId_);\r\n    event Approval(address indexed owner_, address indexed spender_, uint256 indexed id_);\r\n    event ApprovalForAll(address indexed owner_, address indexed operator_, bool approved_);\r\n\r\n    string public name; \r\n    string public symbol;\r\n\r\n    uint256 public nextTokenId;\r\n    uint256 public totalBurned;\r\n    uint256 public constant maxBatchSize = 20;\r\n    \r\n    function startTokenId() public pure virtual returns (uint256) {\r\n        return 0;\r\n    }\r\n\r\n    function totalSupply() public view virtual returns (uint256) {\r\n        return nextTokenId - totalBurned - startTokenId();\r\n    }\r\n\r\n    constructor(string memory name_, string memory symbol_) {\r\n        name = name_;\r\n        symbol = symbol_;\r\n        nextTokenId = startTokenId();\r\n    }\r\n\r\n    struct TokenData {\r\n        address owner;\r\n        uint40 lastTransfer;\r\n        bool burned;\r\n        bool nextInitialized;\r\n    }\r\n    struct BalanceData {\r\n        uint32 balance;\r\n        uint32 mintedAmount;\r\n    }\r\n\r\n    mapping(uint256 => TokenData) public _tokenData;\r\n    mapping(address => BalanceData) public _balanceData;\r\n\r\n    mapping(uint256 => address) public getApproved;\r\n    mapping(address => mapping(address => bool)) public isApprovedForAll;\r\n\r\n    function _getTokenDataOf(uint256 tokenId_) public view virtual returns (TokenData memory) {\r\n        uint256 _lookupId = tokenId_;\r\n        require(_lookupId >= startTokenId(), \"_getTokenDataOf _lookupId < startTokenId\");\r\n        TokenData memory _TokenData = _tokenData[_lookupId];\r\n        if (_TokenData.owner != address(0) && !_TokenData.burned) return _TokenData;\r\n        require(!_TokenData.burned, \"_getTokenDataOf burned token!\");\r\n        require(_lookupId < nextTokenId, \"_getTokenDataOf _lookupId > _nextTokenId\");\r\n        unchecked { while(_tokenData[--_lookupId].owner == address(0)) {} }\r\n        return _tokenData[_lookupId];\r\n    }\r\n\r\n    function balanceOf(address owner_) public virtual view returns (uint256) {\r\n        require(owner_ != address(0), \"balanceOf to 0x0\");\r\n        return _balanceData[owner_].balance;\r\n    }\r\n\r\n    function ownerOf(uint256 tokenId_) public view returns (address) {\r\n        return _getTokenDataOf(tokenId_).owner;\r\n    }\r\n\r\n    function _mintInternal(address to_, uint256 amount_) internal virtual { unchecked {\r\n        require(to_ != address(0), \"_mint to 0x0\");\r\n        uint256 _startId = nextTokenId;\r\n        uint256 _endId = _startId + amount_;\r\n        _tokenData[_startId].owner = to_;\r\n        _tokenData[_startId].lastTransfer = uint40(block.timestamp);\r\n        _balanceData[to_].balance += uint32(amount_);\r\n        _balanceData[to_].mintedAmount += uint32(amount_);\r\n        do { emit Transfer(address(0), to_, _startId); } while (++_startId < _endId);\r\n        nextTokenId = _endId;\r\n    }}\r\n\r\n    function _mint(address to_, uint256 amount_) internal virtual {\r\n        uint256 _amountToMint = amount_;\r\n        while (_amountToMint > maxBatchSize) {\r\n            _amountToMint -= maxBatchSize;\r\n            _mintInternal(to_, maxBatchSize);\r\n        }\r\n        _mintInternal(to_, _amountToMint);\r\n    }\r\n\r\n    function _burn(uint256 tokenId_, bool checkApproved_) internal virtual { unchecked {\r\n        TokenData memory _TokenData = _getTokenDataOf(tokenId_);\r\n        address _owner = _TokenData.owner;\r\n        if (checkApproved_) require(_isApprovedOrOwner(_owner, msg.sender, tokenId_), \"_burn not approved\");\r\n        delete getApproved[tokenId_];\r\n        _tokenData[tokenId_].owner = _owner;\r\n        _tokenData[tokenId_].lastTransfer = uint40(block.timestamp);\r\n        _tokenData[tokenId_].burned = true;\r\n        _tokenData[tokenId_].nextInitialized = true;\r\n\r\n        if (!_TokenData.nextInitialized) {\r\n            uint256 _tokenIdIncremented = tokenId_ + 1;\r\n            if (_tokenData[_tokenIdIncremented].owner == address(0)) {\r\n                if (tokenId_ < nextTokenId - 1) {\r\n                    _tokenData[_tokenIdIncremented] = _TokenData;\r\n                }\r\n            }\r\n        }\r\n        \r\n        _balanceData[_owner].balance--;\r\n        emit Transfer(_owner, address(0), tokenId_);\r\n        totalBurned++;\r\n    }}\r\n\r\n    function _transfer(address from_, address to_, uint256 tokenId_, bool checkApproved_) internal virtual { unchecked {\r\n        require(to_ != address(0), \"_transfer to 0x0\");\r\n        TokenData memory _TokenData = _getTokenDataOf(tokenId_);\r\n        address _owner = _TokenData.owner;\r\n        require(from_ == _owner, \"_transfer not from owner\");\r\n        if (checkApproved_) require(_isApprovedOrOwner(_owner, msg.sender, tokenId_), \"_transfer not approved\");\r\n        delete getApproved[tokenId_];\r\n        _tokenData[tokenId_].owner = to_;\r\n        _tokenData[tokenId_].lastTransfer = uint40(block.timestamp);\r\n        _tokenData[tokenId_].nextInitialized = true;\r\n        \r\n        if (!_TokenData.nextInitialized) {\r\n            uint256 _tokenIdIncremented = tokenId_ + 1;\r\n            if (_tokenData[_tokenIdIncremented].owner == address(0)) {\r\n                if (tokenId_ < nextTokenId - 1) {\r\n                    _tokenData[_tokenIdIncremented] = _TokenData;\r\n                }\r\n            }\r\n        }\r\n\r\n        _balanceData[from_].balance--;\r\n        _balanceData[to_].balance++;\r\n        emit Transfer(from_, to_, tokenId_);\r\n    }}\r\n\r\n    function transferFrom(address from_, address to_, uint256 tokenId_) public virtual {\r\n        _transfer(from_, to_, tokenId_, true);\r\n    }\r\n\r\n    function safeTransferFrom(address from_, address to_, uint256 tokenId_, bytes memory data_) public virtual {\r\n        transferFrom(from_, to_, tokenId_);\r\n        require(to_.code.length == 0 || ERC721TokenReceiver(to_).onERC721Received(msg.sender, from_, tokenId_, data_) ==\r\n        ERC721TokenReceiver.onERC721Received.selector, \"safeTransferFrom to unsafe address\");\r\n    }\r\n\r\n    function safeTransferFrom(address from_, address to_, uint256 tokenId_) public virtual {\r\n        safeTransferFrom(from_, to_, tokenId_, \"\");\r\n    }\r\n\r\n    function approve(address spender_, uint256 tokenId_) public virtual {\r\n        address _owner = ownerOf(tokenId_);\r\n        require(msg.sender == _owner || isApprovedForAll[_owner][msg.sender], \"approve not authorized!\");\r\n        getApproved[tokenId_] = spender_;\r\n        emit Approval(_owner, spender_, tokenId_);\r\n    }\r\n\r\n    function setApprovalForAll(address operator_, bool approved_) public virtual {\r\n        isApprovedForAll[msg.sender][operator_] = approved_;\r\n        emit ApprovalForAll(msg.sender, operator_, approved_);\r\n    }\r\n\r\n    function _isApprovedOrOwner(address owner_, address spender_, uint256 tokenId_) internal virtual view returns (bool) {\r\n        return (owner_ == spender_ || getApproved[tokenId_] == spender_ || isApprovedForAll[owner_][spender_]);\r\n    }\r\n\r\n    function supportsInterface(bytes4 id_) public virtual view returns (bool) {\r\n        return  id_ == 0x01ffc9a7 || id_ == 0x80ac58cd || id_ == 0x5b5e139f;\r\n    }\r\n\r\n    function tokenURI(uint256 tokenId_) public virtual view returns (string memory);\r\n}\r\n\r\nabstract contract ERC721TokenURI {\r\n    string public baseTokenURI;\r\n    string public baseTokenURI_EXT;\r\n    function _setBaseTokenURI(string memory uri_) internal virtual {\r\n        baseTokenURI = uri_;\r\n    }\r\n    function _setBaseTokenURIEXT(string memory uriExt_) internal virtual {\r\n        baseTokenURI_EXT = uriExt_;\r\n    }\r\n    function _toString(uint256 value_) internal pure virtual returns (string memory _str) {\r\n        assembly {\r\n            let m := add(mload(0x40), 0xa0)\r\n            mstore(0x40, m)\r\n            _str := sub(m, 0x20)\r\n            mstore(_str, 0)\r\n            let end := _str\r\n            for { let temp := value_ } 1 {} {\r\n                _str := sub(_str, 1)\r\n                mstore8(_str, add(48, mod(temp, 10)))\r\n                temp := div(temp, 10)\r\n                if iszero(temp) { break }\r\n            }\r\n            let length := sub(end, _str)\r\n            _str := sub(_str, 0x20)\r\n            mstore(_str, length)\r\n        }\r\n    }\r\n    function _getTokenURI(uint256 tokenId_) internal virtual view returns (string memory) {\r\n        return string(abi.encodePacked(baseTokenURI, _toString(tokenId_), baseTokenURI_EXT));\r\n    }\r\n}\r\n\r\nabstract contract OwnWithAuth {\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n    event AdminSet(bytes32 indexed controllerType, bytes32 indexed controllerSlot, address indexed controller, bool status);\r\n    address public owner;\r\n    mapping(bytes32 => mapping(address => bool)) internal admin;\r\n    constructor() { owner = msg.sender; }\r\n    modifier onlyOwner() { require(owner == msg.sender, \"only owner\");_; }\r\n    modifier onlyAdmin(string memory type_) { require(isAdmin(type_, msg.sender), \"only admin\");_; }\r\n    function transferOwnership(address newOwner) external onlyOwner { \r\n        emit OwnershipTransferred(owner, newOwner); owner = newOwner; \r\n    }\r\n    function _setAdmin(string memory type_, address controller, bool status) internal {\r\n        bytes32 typeHash = keccak256(abi.encodePacked(type_)); \r\n        admin[typeHash][controller] = status; \r\n        emit AdminSet(typeHash, typeHash, controller, status); \r\n    }\r\n    function setAdmin(string memory type_, address controller, bool status) external onlyOwner { \r\n        _setAdmin(type_, controller, status);\r\n    }\r\n    function isAdmin(string memory type_, address controller) public view returns (bool) { \r\n        bytes32 typeHash = keccak256(abi.encodePacked(type_));\r\n        return admin[typeHash][controller]; \r\n    }\r\n}\r\n\r\ncontract HYU is ERC721, ERC721TokenURI, OwnWithAuth {\r\n\r\n    constructor() ERC721(\"HYU\", \"HYU\") {\r\n        _setAdmin(\"MINTER\", msg.sender, true);\r\n        _setAdmin(\"BURNER\", msg.sender, true);\r\n        _setAdmin(\"ADMIN\", msg.sender, true);\r\n\r\n        _setBaseTokenURI(\"ipfs://QmNm6e7uXexLdDbfzDyWjS3mriCRbszrmDJ189p5oJsjCg/\");\r\n        _setBaseTokenURIEXT(\".json\");\r\n\r\n        _mint(0xE8E0A9042Df33d16b8604D87d9B703aBD64a31eC, 30);\r\n    }\r\n\r\n    function mint(address address_, uint256 amount_) external onlyAdmin(\"MINTER\") {\r\n        _mint(address_, amount_);\r\n    }\r\n\r\n    function burn(uint256 tokenId_, bool checkApproved_) external onlyAdmin(\"BURNER\") {\r\n        _burn(tokenId_, checkApproved_);\r\n    }\r\n\r\n    function setBaseTokenURI(string calldata uri_) external onlyAdmin(\"ADMIN\") {\r\n        _setBaseTokenURI(uri_);\r\n    }\r\n\r\n    function setBaseTokenURIEXT(string calldata uriExt_) external onlyAdmin(\"ADMIN\") {\r\n        _setBaseTokenURIEXT(uriExt_);\r\n    }\r\n\r\n    function startTokenId() public pure override returns (uint256) {\r\n        return 1;\r\n    }\r\n\r\n    function tokenURI(uint256 tokenId_) public view override returns (string memory) {\r\n        return _getTokenURI(tokenId_);\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"controllerType\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"controllerSlot\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"controller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"AdminSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender_\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id_\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator_\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved_\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from_\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to_\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId_\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_balanceData\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"balance\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"mintedAmount\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId_\",\"type\":\"uint256\"}],\"name\":\"_getTokenDataOf\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint40\",\"name\":\"lastTransfer\",\"type\":\"uint40\"},{\"internalType\":\"bool\",\"name\":\"burned\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"nextInitialized\",\"type\":\"bool\"}],\"internalType\":\"struct ERC721.TokenData\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_tokenData\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint40\",\"name\":\"lastTransfer\",\"type\":\"uint40\"},{\"internalType\":\"bool\",\"name\":\"burned\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"nextInitialized\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId_\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseTokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseTokenURI_EXT\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId_\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"checkApproved_\",\"type\":\"bool\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"type_\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"controller\",\"type\":\"address\"}],\"name\":\"isAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxBatchSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"address_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextTokenId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId_\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId_\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId_\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data_\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"type_\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"controller\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"setAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator_\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved_\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"uri_\",\"type\":\"string\"}],\"name\":\"setBaseTokenURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"uriExt_\",\"type\":\"string\"}],\"name\":\"setBaseTokenURIEXT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTokenId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"id_\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId_\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalBurned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId_\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "HYU", "CompilerVersion": "v0.8.24+commit.e11b9ed9", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://e593eb8c8f77c058a2d83da82a79eb9ef25c6670a7d0c468c6e0576fc8642370"}