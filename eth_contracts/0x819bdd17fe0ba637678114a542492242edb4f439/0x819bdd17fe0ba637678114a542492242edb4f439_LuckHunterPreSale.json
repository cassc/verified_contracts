{"SourceCode": "// SPDX-License-Identifier: MIT\r\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\r\n\r\npragma solidity ^0.8.20;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n\r\n    /**\r\n     * @dev Returns the value of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the value of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\r\n     * caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\r\n     * allowance mechanism. `value` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) external returns (bool);\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\r\n\r\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Metadata.sol)\r\n\r\npragma solidity ^0.8.20;\r\n\r\n/**\r\n * @dev Interface for the optional metadata functions from the ERC20 standard.\r\n */\r\ninterface IERC20Metadata is IERC20 {\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the decimals places of the token.\r\n     */\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Context.sol\r\n\r\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\r\n\r\npragma solidity ^0.8.20;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n\r\n    function _contextSuffixLength() internal view virtual returns (uint256) {\r\n        return 0;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/interfaces/draft-IERC6093.sol\r\n\r\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\r\npragma solidity ^0.8.20;\r\n\r\n/**\r\n * @dev Standard ERC20 Errors\r\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\r\n */\r\ninterface IERC20Errors {\r\n    /**\r\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\r\n     * @param sender Address whose tokens are being transferred.\r\n     * @param balance Current balance for the interacting account.\r\n     * @param needed Minimum amount required to perform a transfer.\r\n     */\r\n    error ERC20InsufficientBalance(\r\n        address sender,\r\n        uint256 balance,\r\n        uint256 needed\r\n    );\r\n\r\n    /**\r\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\r\n     * @param sender Address whose tokens are being transferred.\r\n     */\r\n    error ERC20InvalidSender(address sender);\r\n\r\n    /**\r\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\r\n     * @param receiver Address to which tokens are being transferred.\r\n     */\r\n    error ERC20InvalidReceiver(address receiver);\r\n\r\n    /**\r\n     * @dev Indicates a failure with the `spender`\u2019s `allowance`. Used in transfers.\r\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\r\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\r\n     * @param needed Minimum amount required to perform a transfer.\r\n     */\r\n    error ERC20InsufficientAllowance(\r\n        address spender,\r\n        uint256 allowance,\r\n        uint256 needed\r\n    );\r\n\r\n    /**\r\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\r\n     * @param approver Address initiating an approval operation.\r\n     */\r\n    error ERC20InvalidApprover(address approver);\r\n\r\n    /**\r\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\r\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\r\n     */\r\n    error ERC20InvalidSpender(address spender);\r\n}\r\n\r\n/**\r\n * @dev Standard ERC721 Errors\r\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\r\n */\r\ninterface IERC721Errors {\r\n    /**\r\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\r\n     * Used in balance queries.\r\n     * @param owner Address of the current owner of a token.\r\n     */\r\n    error ERC721InvalidOwner(address owner);\r\n\r\n    /**\r\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\r\n     * @param tokenId Identifier number of a token.\r\n     */\r\n    error ERC721NonexistentToken(uint256 tokenId);\r\n\r\n    /**\r\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\r\n     * @param sender Address whose tokens are being transferred.\r\n     * @param tokenId Identifier number of a token.\r\n     * @param owner Address of the current owner of a token.\r\n     */\r\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\r\n\r\n    /**\r\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\r\n     * @param sender Address whose tokens are being transferred.\r\n     */\r\n    error ERC721InvalidSender(address sender);\r\n\r\n    /**\r\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\r\n     * @param receiver Address to which tokens are being transferred.\r\n     */\r\n    error ERC721InvalidReceiver(address receiver);\r\n\r\n    /**\r\n     * @dev Indicates a failure with the `operator`\u2019s approval. Used in transfers.\r\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\r\n     * @param tokenId Identifier number of a token.\r\n     */\r\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\r\n\r\n    /**\r\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\r\n     * @param approver Address initiating an approval operation.\r\n     */\r\n    error ERC721InvalidApprover(address approver);\r\n\r\n    /**\r\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\r\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\r\n     */\r\n    error ERC721InvalidOperator(address operator);\r\n}\r\n\r\n/**\r\n * @dev Standard ERC1155 Errors\r\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\r\n */\r\ninterface IERC1155Errors {\r\n    /**\r\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\r\n     * @param sender Address whose tokens are being transferred.\r\n     * @param balance Current balance for the interacting account.\r\n     * @param needed Minimum amount required to perform a transfer.\r\n     * @param tokenId Identifier number of a token.\r\n     */\r\n    error ERC1155InsufficientBalance(\r\n        address sender,\r\n        uint256 balance,\r\n        uint256 needed,\r\n        uint256 tokenId\r\n    );\r\n\r\n    /**\r\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\r\n     * @param sender Address whose tokens are being transferred.\r\n     */\r\n    error ERC1155InvalidSender(address sender);\r\n\r\n    /**\r\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\r\n     * @param receiver Address to which tokens are being transferred.\r\n     */\r\n    error ERC1155InvalidReceiver(address receiver);\r\n\r\n    /**\r\n     * @dev Indicates a failure with the `operator`\u2019s approval. Used in transfers.\r\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\r\n     * @param owner Address of the current owner of a token.\r\n     */\r\n    error ERC1155MissingApprovalForAll(address operator, address owner);\r\n\r\n    /**\r\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\r\n     * @param approver Address initiating an approval operation.\r\n     */\r\n    error ERC1155InvalidApprover(address approver);\r\n\r\n    /**\r\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\r\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\r\n     */\r\n    error ERC1155InvalidOperator(address operator);\r\n\r\n    /**\r\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\r\n     * Used in batch transfers.\r\n     * @param idsLength Length of the array of token identifiers\r\n     * @param valuesLength Length of the array of token amounts\r\n     */\r\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/ERC20.sol\r\n\r\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/ERC20.sol)\r\n\r\npragma solidity ^0.8.20;\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * The default value of {decimals} is 18. To change this, you should override\r\n * this function so it returns a different value.\r\n *\r\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\r\n * instead returning `false` on failure. This behavior is nonetheless\r\n * conventional and does not conflict with the expectations of ERC20\r\n * applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n */\r\nabstract contract ERC20 is Context, IERC20, IERC20Metadata, IERC20Errors {\r\n    mapping(address => uint256) private _balances;\r\n\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n\r\n    /**\r\n     * @dev Sets the values for {name} and {symbol}.\r\n     *\r\n     * All two of these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor(string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view virtual returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view virtual returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the default value returned by this function, unless\r\n     * it's overridden.\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view virtual returns (uint8) {\r\n        return 18;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view virtual returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view virtual returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     * - the caller must have a balance of at least `value`.\r\n     */\r\n    function transfer(address to, uint256 value) public virtual returns (bool) {\r\n        address owner = _msgSender();\r\n        _transfer(owner, to, value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender)\r\n        public\r\n        view\r\n        virtual\r\n        returns (uint256)\r\n    {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\r\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 value)\r\n        public\r\n        virtual\r\n        returns (bool)\r\n    {\r\n        address owner = _msgSender();\r\n        _approve(owner, spender, value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20}.\r\n     *\r\n     * NOTE: Does not update the allowance if the current allowance\r\n     * is the maximum `uint256`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` and `to` cannot be the zero address.\r\n     * - `from` must have a balance of at least `value`.\r\n     * - the caller must have allowance for ``from``'s tokens of at least\r\n     * `value`.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) public virtual returns (bool) {\r\n        address spender = _msgSender();\r\n        _spendAllowance(from, spender, value);\r\n        _transfer(from, to, value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves a `value` amount of tokens from `from` to `to`.\r\n     *\r\n     * This internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\r\n     */\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        if (from == address(0)) {\r\n            revert ERC20InvalidSender(address(0));\r\n        }\r\n        if (to == address(0)) {\r\n            revert ERC20InvalidReceiver(address(0));\r\n        }\r\n        _update(from, to, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\r\n     * (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\r\n     * this function.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _update(\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) internal virtual {\r\n        if (from == address(0)) {\r\n            // Overflow check required: The rest of the code assumes that totalSupply never overflows\r\n            _totalSupply += value;\r\n        } else {\r\n            uint256 fromBalance = _balances[from];\r\n            if (fromBalance < value) {\r\n                revert ERC20InsufficientBalance(from, fromBalance, value);\r\n            }\r\n            unchecked {\r\n                // Overflow not possible: value <= fromBalance <= totalSupply.\r\n                _balances[from] = fromBalance - value;\r\n            }\r\n        }\r\n\r\n        if (to == address(0)) {\r\n            unchecked {\r\n                // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.\r\n                _totalSupply -= value;\r\n            }\r\n        } else {\r\n            unchecked {\r\n                // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.\r\n                _balances[to] += value;\r\n            }\r\n        }\r\n\r\n        emit Transfer(from, to, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\r\n     * Relies on the `_update` mechanism\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\r\n     */\r\n    function _mint(address account, uint256 value) internal {\r\n        if (account == address(0)) {\r\n            revert ERC20InvalidReceiver(address(0));\r\n        }\r\n        _update(address(0), account, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\r\n     * Relies on the `_update` mechanism.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * NOTE: This function is not virtual, {_update} should be overridden instead\r\n     */\r\n    function _burn(address account, uint256 value) internal {\r\n        if (account == address(0)) {\r\n            revert ERC20InvalidSender(address(0));\r\n        }\r\n        _update(account, address(0), value);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `value` as the allowance of `spender` over the `owner` s tokens.\r\n     *\r\n     * This internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     *\r\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\r\n     */\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        _approve(owner, spender, value, true);\r\n    }\r\n\r\n    /**\r\n     * @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\r\n     *\r\n     * By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\r\n     * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\r\n     * `Approval` event during `transferFrom` operations.\r\n     *\r\n     * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\r\n     * true using the following override:\r\n     * ```\r\n     * function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\r\n     *     super._approve(owner, spender, value, true);\r\n     * }\r\n     * ```\r\n     *\r\n     * Requirements are the same as {_approve}.\r\n     */\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 value,\r\n        bool emitEvent\r\n    ) internal virtual {\r\n        if (owner == address(0)) {\r\n            revert ERC20InvalidApprover(address(0));\r\n        }\r\n        if (spender == address(0)) {\r\n            revert ERC20InvalidSpender(address(0));\r\n        }\r\n        _allowances[owner][spender] = value;\r\n        if (emitEvent) {\r\n            emit Approval(owner, spender, value);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Updates `owner` s allowance for `spender` based on spent `value`.\r\n     *\r\n     * Does not update the allowance value in case of infinite allowance.\r\n     * Revert if not enough allowance is available.\r\n     *\r\n     * Does not emit an {Approval} event.\r\n     */\r\n    function _spendAllowance(\r\n        address owner,\r\n        address spender,\r\n        uint256 value\r\n    ) internal virtual {\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n        if (currentAllowance != type(uint256).max) {\r\n            if (currentAllowance < value) {\r\n                revert ERC20InsufficientAllowance(\r\n                    spender,\r\n                    currentAllowance,\r\n                    value\r\n                );\r\n            }\r\n            unchecked {\r\n                _approve(owner, spender, currentAllowance - value, false);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/Ownable.sol\r\n\r\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.20;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * The initial owner is set to the address provided by the deployer. This can\r\n * later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    /**\r\n     * @dev The caller account is not authorized to perform an operation.\r\n     */\r\n    error OwnableUnauthorizedAccount(address account);\r\n\r\n    /**\r\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\r\n     */\r\n    error OwnableInvalidOwner(address owner);\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\r\n     */\r\n    constructor(address initialOwner) {\r\n        if (initialOwner == address(0)) {\r\n            revert OwnableInvalidOwner(address(0));\r\n        }\r\n        _transferOwnership(initialOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the owner.\r\n     */\r\n    function _checkOwner() internal view virtual {\r\n        if (owner() != _msgSender()) {\r\n            revert OwnableUnauthorizedAccount(_msgSender());\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby disabling any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        if (newOwner == address(0)) {\r\n            revert OwnableInvalidOwner(address(0));\r\n        }\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Pausable.sol\r\n\r\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Pausable.sol)\r\n\r\npragma solidity ^0.8.20;\r\n\r\n/**\r\n * @dev Contract module which allows children to implement an emergency stop\r\n * mechanism that can be triggered by an authorized account.\r\n *\r\n * This module is used through inheritance. It will make available the\r\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\r\n * the functions of your contract. Note that they will not be pausable by\r\n * simply including this module, only once the modifiers are put in place.\r\n */\r\nabstract contract Pausable is Context {\r\n    bool private _paused;\r\n\r\n    /**\r\n     * @dev Emitted when the pause is triggered by `account`.\r\n     */\r\n    event Paused(address account);\r\n\r\n    /**\r\n     * @dev Emitted when the pause is lifted by `account`.\r\n     */\r\n    event Unpaused(address account);\r\n\r\n    /**\r\n     * @dev The operation failed because the contract is paused.\r\n     */\r\n    error EnforcedPause();\r\n\r\n    /**\r\n     * @dev The operation failed because the contract is not paused.\r\n     */\r\n    error ExpectedPause();\r\n\r\n    /**\r\n     * @dev Initializes the contract in unpaused state.\r\n     */\r\n    constructor() {\r\n        _paused = false;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is not paused.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    modifier whenNotPaused() {\r\n        _requireNotPaused();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is paused.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    modifier whenPaused() {\r\n        _requirePaused();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the contract is paused, and false otherwise.\r\n     */\r\n    function paused() public view virtual returns (bool) {\r\n        return _paused;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the contract is paused.\r\n     */\r\n    function _requireNotPaused() internal view virtual {\r\n        if (paused()) {\r\n            revert EnforcedPause();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the contract is not paused.\r\n     */\r\n    function _requirePaused() internal view virtual {\r\n        if (!paused()) {\r\n            revert ExpectedPause();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Triggers stopped state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    function _pause() internal virtual whenNotPaused {\r\n        _paused = true;\r\n        emit Paused(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns to normal state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    function _unpause() internal virtual whenPaused {\r\n        _paused = false;\r\n        emit Unpaused(_msgSender());\r\n    }\r\n}\r\n\r\n// File: @chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\r\n\r\npragma solidity ^0.8.0;\r\n\r\ninterface AggregatorV3Interface {\r\n    function decimals() external view returns (uint8);\r\n\r\n    function description() external view returns (string memory);\r\n\r\n    function version() external view returns (uint256);\r\n\r\n    function getRoundData(uint80 _roundId)\r\n        external\r\n        view\r\n        returns (\r\n            uint80 roundId,\r\n            int256 answer,\r\n            uint256 startedAt,\r\n            uint256 updatedAt,\r\n            uint80 answeredInRound\r\n        );\r\n\r\n    function latestRoundData()\r\n        external\r\n        view\r\n        returns (\r\n            uint80 roundId,\r\n            int256 answer,\r\n            uint256 startedAt,\r\n            uint256 updatedAt,\r\n            uint80 answeredInRound\r\n        );\r\n}\r\n\r\n// File: hardhat/console.sol\r\n\r\npragma solidity >=0.4.22 <0.9.0;\r\n\r\nlibrary console {\r\n    address constant CONSOLE_ADDRESS =\r\n        0x000000000000000000636F6e736F6c652e6c6f67;\r\n\r\n    function _sendLogPayloadImplementation(bytes memory payload) internal view {\r\n        address consoleAddress = CONSOLE_ADDRESS;\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            pop(\r\n                staticcall(\r\n                    gas(),\r\n                    consoleAddress,\r\n                    add(payload, 32),\r\n                    mload(payload),\r\n                    0,\r\n                    0\r\n                )\r\n            )\r\n        }\r\n    }\r\n\r\n    function _castToPure(function(bytes memory) internal view fnIn)\r\n        internal\r\n        pure\r\n        returns (function(bytes memory) pure fnOut)\r\n    {\r\n        assembly {\r\n            fnOut := fnIn\r\n        }\r\n    }\r\n\r\n    function _sendLogPayload(bytes memory payload) internal pure {\r\n        _castToPure(_sendLogPayloadImplementation)(payload);\r\n    }\r\n\r\n    function log() internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log()\"));\r\n    }\r\n\r\n    function logInt(int256 p0) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(int256)\", p0));\r\n    }\r\n\r\n    function logUint(uint256 p0) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256)\", p0));\r\n    }\r\n\r\n    function logString(string memory p0) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string)\", p0));\r\n    }\r\n\r\n    function logBool(bool p0) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool)\", p0));\r\n    }\r\n\r\n    function logAddress(address p0) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address)\", p0));\r\n    }\r\n\r\n    function logBytes(bytes memory p0) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes)\", p0));\r\n    }\r\n\r\n    function logBytes1(bytes1 p0) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes1)\", p0));\r\n    }\r\n\r\n    function logBytes2(bytes2 p0) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes2)\", p0));\r\n    }\r\n\r\n    function logBytes3(bytes3 p0) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes3)\", p0));\r\n    }\r\n\r\n    function logBytes4(bytes4 p0) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes4)\", p0));\r\n    }\r\n\r\n    function logBytes5(bytes5 p0) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes5)\", p0));\r\n    }\r\n\r\n    function logBytes6(bytes6 p0) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes6)\", p0));\r\n    }\r\n\r\n    function logBytes7(bytes7 p0) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes7)\", p0));\r\n    }\r\n\r\n    function logBytes8(bytes8 p0) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes8)\", p0));\r\n    }\r\n\r\n    function logBytes9(bytes9 p0) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes9)\", p0));\r\n    }\r\n\r\n    function logBytes10(bytes10 p0) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes10)\", p0));\r\n    }\r\n\r\n    function logBytes11(bytes11 p0) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes11)\", p0));\r\n    }\r\n\r\n    function logBytes12(bytes12 p0) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes12)\", p0));\r\n    }\r\n\r\n    function logBytes13(bytes13 p0) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes13)\", p0));\r\n    }\r\n\r\n    function logBytes14(bytes14 p0) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes14)\", p0));\r\n    }\r\n\r\n    function logBytes15(bytes15 p0) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes15)\", p0));\r\n    }\r\n\r\n    function logBytes16(bytes16 p0) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes16)\", p0));\r\n    }\r\n\r\n    function logBytes17(bytes17 p0) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes17)\", p0));\r\n    }\r\n\r\n    function logBytes18(bytes18 p0) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes18)\", p0));\r\n    }\r\n\r\n    function logBytes19(bytes19 p0) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes19)\", p0));\r\n    }\r\n\r\n    function logBytes20(bytes20 p0) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes20)\", p0));\r\n    }\r\n\r\n    function logBytes21(bytes21 p0) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes21)\", p0));\r\n    }\r\n\r\n    function logBytes22(bytes22 p0) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes22)\", p0));\r\n    }\r\n\r\n    function logBytes23(bytes23 p0) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes23)\", p0));\r\n    }\r\n\r\n    function logBytes24(bytes24 p0) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes24)\", p0));\r\n    }\r\n\r\n    function logBytes25(bytes25 p0) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes25)\", p0));\r\n    }\r\n\r\n    function logBytes26(bytes26 p0) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes26)\", p0));\r\n    }\r\n\r\n    function logBytes27(bytes27 p0) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes27)\", p0));\r\n    }\r\n\r\n    function logBytes28(bytes28 p0) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes28)\", p0));\r\n    }\r\n\r\n    function logBytes29(bytes29 p0) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes29)\", p0));\r\n    }\r\n\r\n    function logBytes30(bytes30 p0) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes30)\", p0));\r\n    }\r\n\r\n    function logBytes31(bytes31 p0) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes31)\", p0));\r\n    }\r\n\r\n    function logBytes32(bytes32 p0) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes32)\", p0));\r\n    }\r\n\r\n    function log(uint256 p0) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256)\", p0));\r\n    }\r\n\r\n    function log(string memory p0) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string)\", p0));\r\n    }\r\n\r\n    function log(bool p0) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool)\", p0));\r\n    }\r\n\r\n    function log(address p0) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address)\", p0));\r\n    }\r\n\r\n    function log(uint256 p0, uint256 p1) internal pure {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\"log(uint256,uint256)\", p0, p1)\r\n        );\r\n    }\r\n\r\n    function log(uint256 p0, string memory p1) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string)\", p0, p1));\r\n    }\r\n\r\n    function log(uint256 p0, bool p1) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool)\", p0, p1));\r\n    }\r\n\r\n    function log(uint256 p0, address p1) internal pure {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\"log(uint256,address)\", p0, p1)\r\n        );\r\n    }\r\n\r\n    function log(string memory p0, uint256 p1) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256)\", p0, p1));\r\n    }\r\n\r\n    function log(string memory p0, string memory p1) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string)\", p0, p1));\r\n    }\r\n\r\n    function log(string memory p0, bool p1) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool)\", p0, p1));\r\n    }\r\n\r\n    function log(string memory p0, address p1) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address)\", p0, p1));\r\n    }\r\n\r\n    function log(bool p0, uint256 p1) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256)\", p0, p1));\r\n    }\r\n\r\n    function log(bool p0, string memory p1) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string)\", p0, p1));\r\n    }\r\n\r\n    function log(bool p0, bool p1) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool)\", p0, p1));\r\n    }\r\n\r\n    function log(bool p0, address p1) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address)\", p0, p1));\r\n    }\r\n\r\n    function log(address p0, uint256 p1) internal pure {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\"log(address,uint256)\", p0, p1)\r\n        );\r\n    }\r\n\r\n    function log(address p0, string memory p1) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string)\", p0, p1));\r\n    }\r\n\r\n    function log(address p0, bool p1) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool)\", p0, p1));\r\n    }\r\n\r\n    function log(address p0, address p1) internal pure {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\"log(address,address)\", p0, p1)\r\n        );\r\n    }\r\n\r\n    function log(\r\n        uint256 p0,\r\n        uint256 p1,\r\n        uint256 p2\r\n    ) internal pure {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\"log(uint256,uint256,uint256)\", p0, p1, p2)\r\n        );\r\n    }\r\n\r\n    function log(\r\n        uint256 p0,\r\n        uint256 p1,\r\n        string memory p2\r\n    ) internal pure {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\"log(uint256,uint256,string)\", p0, p1, p2)\r\n        );\r\n    }\r\n\r\n    function log(\r\n        uint256 p0,\r\n        uint256 p1,\r\n        bool p2\r\n    ) internal pure {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\"log(uint256,uint256,bool)\", p0, p1, p2)\r\n        );\r\n    }\r\n\r\n    function log(\r\n        uint256 p0,\r\n        uint256 p1,\r\n        address p2\r\n    ) internal pure {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\"log(uint256,uint256,address)\", p0, p1, p2)\r\n        );\r\n    }\r\n\r\n    function log(\r\n        uint256 p0,\r\n        string memory p1,\r\n        uint256 p2\r\n    ) internal pure {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\"log(uint256,string,uint256)\", p0, p1, p2)\r\n        );\r\n    }\r\n\r\n    function log(\r\n        uint256 p0,\r\n        string memory p1,\r\n        string memory p2\r\n    ) internal pure {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\"log(uint256,string,string)\", p0, p1, p2)\r\n        );\r\n    }\r\n\r\n    function log(\r\n        uint256 p0,\r\n        string memory p1,\r\n        bool p2\r\n    ) internal pure {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\"log(uint256,string,bool)\", p0, p1, p2)\r\n        );\r\n    }\r\n\r\n    function log(\r\n        uint256 p0,\r\n        string memory p1,\r\n        address p2\r\n    ) internal pure {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\"log(uint256,string,address)\", p0, p1, p2)\r\n        );\r\n    }\r\n\r\n    function log(\r\n        uint256 p0,\r\n        bool p1,\r\n        uint256 p2\r\n    ) internal pure {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\"log(uint256,bool,uint256)\", p0, p1, p2)\r\n        );\r\n    }\r\n\r\n    function log(\r\n        uint256 p0,\r\n        bool p1,\r\n        string memory p2\r\n    ) internal pure {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\"log(uint256,bool,string)\", p0, p1, p2)\r\n        );\r\n    }\r\n\r\n    function log(\r\n        uint256 p0,\r\n        bool p1,\r\n        bool p2\r\n    ) internal pure {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\"log(uint256,bool,bool)\", p0, p1, p2)\r\n        );\r\n    }\r\n\r\n    function log(\r\n        uint256 p0,\r\n        bool p1,\r\n        address p2\r\n    ) internal pure {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\"log(uint256,bool,address)\", p0, p1, p2)\r\n        );\r\n    }\r\n\r\n    function log(\r\n        uint256 p0,\r\n        address p1,\r\n        uint256 p2\r\n    ) internal pure {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\"log(uint256,address,uint256)\", p0, p1, p2)\r\n        );\r\n    }\r\n\r\n    function log(\r\n        uint256 p0,\r\n        address p1,\r\n        string memory p2\r\n    ) internal pure {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\"log(uint256,address,string)\", p0, p1, p2)\r\n        );\r\n    }\r\n\r\n    function log(\r\n        uint256 p0,\r\n        address p1,\r\n        bool p2\r\n    ) internal pure {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\"log(uint256,address,bool)\", p0, p1, p2)\r\n        );\r\n    }\r\n\r\n    function log(\r\n        uint256 p0,\r\n        address p1,\r\n        address p2\r\n    ) internal pure {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\"log(uint256,address,address)\", p0, p1, p2)\r\n        );\r\n    }\r\n\r\n    function log(\r\n        string memory p0,\r\n        uint256 p1,\r\n        uint256 p2\r\n    ) internal pure {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\"log(string,uint256,uint256)\", p0, p1, p2)\r\n        );\r\n    }\r\n\r\n    function log(\r\n        string memory p0,\r\n        uint256 p1,\r\n        string memory p2\r\n    ) internal pure {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\"log(string,uint256,string)\", p0, p1, p2)\r\n        );\r\n    }\r\n\r\n    function log(\r\n        string memory p0,\r\n        uint256 p1,\r\n        bool p2\r\n    ) internal pure {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\"log(string,uint256,bool)\", p0, p1, p2)\r\n        );\r\n    }\r\n\r\n    function log(\r\n        string memory p0,\r\n        uint256 p1,\r\n        address p2\r\n    ) internal pure {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\"log(string,uint256,address)\", p0, p1, p2)\r\n        );\r\n    }\r\n\r\n    function log(\r\n        string memory p0,\r\n        string memory p1,\r\n        uint256 p2\r\n    ) internal pure {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\"log(string,string,uint256)\", p0, p1, p2)\r\n        );\r\n    }\r\n\r\n    function log(\r\n        string memory p0,\r\n        string memory p1,\r\n        string memory p2\r\n    ) internal pure {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\"log(string,string,string)\", p0, p1, p2)\r\n        );\r\n    }\r\n\r\n    function log(\r\n        string memory p0,\r\n        string memory p1,\r\n        bool p2\r\n    ) internal pure {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\"log(string,string,bool)\", p0, p1, p2)\r\n        );\r\n    }\r\n\r\n    function log(\r\n        string memory p0,\r\n        string memory p1,\r\n        address p2\r\n    ) internal pure {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\"log(string,string,address)\", p0, p1, p2)\r\n        );\r\n    }\r\n\r\n    function log(\r\n        string memory p0,\r\n        bool p1,\r\n        uint256 p2\r\n    ) internal pure {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\"log(string,bool,uint256)\", p0, p1, p2)\r\n        );\r\n    }\r\n\r\n    function log(\r\n        string memory p0,\r\n        bool p1,\r\n        string memory p2\r\n    ) internal pure {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\"log(string,bool,string)\", p0, p1, p2)\r\n        );\r\n    }\r\n\r\n    function log(\r\n        string memory p0,\r\n        bool p1,\r\n        bool p2\r\n    ) internal pure {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\"log(string,bool,bool)\", p0, p1, p2)\r\n        );\r\n    }\r\n\r\n    function log(\r\n        string memory p0,\r\n        bool p1,\r\n        address p2\r\n    ) internal pure {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\"log(string,bool,address)\", p0, p1, p2)\r\n        );\r\n    }\r\n\r\n    function log(\r\n        string memory p0,\r\n        address p1,\r\n        uint256 p2\r\n    ) internal pure {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\"log(string,address,uint256)\", p0, p1, p2)\r\n        );\r\n    }\r\n\r\n    function log(\r\n        string memory p0,\r\n        address p1,\r\n        string memory p2\r\n    ) internal pure {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\"log(string,address,string)\", p0, p1, p2)\r\n        );\r\n    }\r\n\r\n    function log(\r\n        string memory p0,\r\n        address p1,\r\n        bool p2\r\n    ) internal pure {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\"log(string,address,bool)\", p0, p1, p2)\r\n        );\r\n    }\r\n\r\n    function log(\r\n        string memory p0,\r\n        address p1,\r\n        address p2\r\n    ) internal pure {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\"log(string,address,address)\", p0, p1, p2)\r\n        );\r\n    }\r\n\r\n    function log(\r\n        bool p0,\r\n        uint256 p1,\r\n        uint256 p2\r\n    ) internal pure {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\"log(bool,uint256,uint256)\", p0, p1, p2)\r\n        );\r\n    }\r\n\r\n    function log(\r\n        bool p0,\r\n        uint256 p1,\r\n        string memory p2\r\n    ) internal pure {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\"log(bool,uint256,string)\", p0, p1, p2)\r\n        );\r\n    }\r\n\r\n    function log(\r\n        bool p0,\r\n        uint256 p1,\r\n        bool p2\r\n    ) internal pure {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\"log(bool,uint256,bool)\", p0, p1, p2)\r\n        );\r\n    }\r\n\r\n    function log(\r\n        bool p0,\r\n        uint256 p1,\r\n        address p2\r\n    ) internal pure {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\"log(bool,uint256,address)\", p0, p1, p2)\r\n        );\r\n    }\r\n\r\n    function log(\r\n        bool p0,\r\n        string memory p1,\r\n        uint256 p2\r\n    ) internal pure {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\"log(bool,string,uint256)\", p0, p1, p2)\r\n        );\r\n    }\r\n\r\n    function log(\r\n        bool p0,\r\n        string memory p1,\r\n        string memory p2\r\n    ) internal pure {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\"log(bool,string,string)\", p0, p1, p2)\r\n        );\r\n    }\r\n\r\n    function log(\r\n        bool p0,\r\n        string memory p1,\r\n        bool p2\r\n    ) internal pure {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\"log(bool,string,bool)\", p0, p1, p2)\r\n        );\r\n    }\r\n\r\n    function log(\r\n        bool p0,\r\n        string memory p1,\r\n        address p2\r\n    ) internal pure {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\"log(bool,string,address)\", p0, p1, p2)\r\n        );\r\n    }\r\n\r\n    function log(\r\n        bool p0,\r\n        bool p1,\r\n        uint256 p2\r\n    ) internal pure {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\"log(bool,bool,uint256)\", p0, p1, p2)\r\n        );\r\n    }\r\n\r\n    function log(\r\n        bool p0,\r\n        bool p1,\r\n        string memory p2\r\n    ) internal pure {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\"log(bool,bool,string)\", p0, p1, p2)\r\n        );\r\n    }\r\n\r\n    function log(\r\n        bool p0,\r\n        bool p1,\r\n        bool p2\r\n    ) internal pure {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\"log(bool,bool,bool)\", p0, p1, p2)\r\n        );\r\n    }\r\n\r\n    function log(\r\n        bool p0,\r\n        bool p1,\r\n        address p2\r\n    ) internal pure {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\"log(bool,bool,address)\", p0, p1, p2)\r\n        );\r\n    }\r\n\r\n    function log(\r\n        bool p0,\r\n        address p1,\r\n        uint256 p2\r\n    ) internal pure {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\"log(bool,address,uint256)\", p0, p1, p2)\r\n        );\r\n    }\r\n\r\n    function log(\r\n        bool p0,\r\n        address p1,\r\n        string memory p2\r\n    ) internal pure {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\"log(bool,address,string)\", p0, p1, p2)\r\n        );\r\n    }\r\n\r\n    function log(\r\n        bool p0,\r\n        address p1,\r\n        bool p2\r\n    ) internal pure {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\"log(bool,address,bool)\", p0, p1, p2)\r\n        );\r\n    }\r\n\r\n    function log(\r\n        bool p0,\r\n        address p1,\r\n        address p2\r\n    ) internal pure {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\"log(bool,address,address)\", p0, p1, p2)\r\n        );\r\n    }\r\n\r\n    function log(\r\n        address p0,\r\n        uint256 p1,\r\n        uint256 p2\r\n    ) internal pure {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\"log(address,uint256,uint256)\", p0, p1, p2)\r\n        );\r\n    }\r\n\r\n    function log(\r\n        address p0,\r\n        uint256 p1,\r\n        string memory p2\r\n    ) internal pure {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\"log(address,uint256,string)\", p0, p1, p2)\r\n        );\r\n    }\r\n\r\n    function log(\r\n        address p0,\r\n        uint256 p1,\r\n        bool p2\r\n    ) internal pure {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\"log(address,uint256,bool)\", p0, p1, p2)\r\n        );\r\n    }\r\n\r\n    function log(\r\n        address p0,\r\n        uint256 p1,\r\n        address p2\r\n    ) internal pure {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\"log(address,uint256,address)\", p0, p1, p2)\r\n        );\r\n    }\r\n\r\n    function log(\r\n        address p0,\r\n        string memory p1,\r\n        uint256 p2\r\n    ) internal pure {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\"log(address,string,uint256)\", p0, p1, p2)\r\n        );\r\n    }\r\n\r\n    function log(\r\n        address p0,\r\n        string memory p1,\r\n        string memory p2\r\n    ) internal pure {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\"log(address,string,string)\", p0, p1, p2)\r\n        );\r\n    }\r\n\r\n    function log(\r\n        address p0,\r\n        string memory p1,\r\n        bool p2\r\n    ) internal pure {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\"log(address,string,bool)\", p0, p1, p2)\r\n        );\r\n    }\r\n\r\n    function log(\r\n        address p0,\r\n        string memory p1,\r\n        address p2\r\n    ) internal pure {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\"log(address,string,address)\", p0, p1, p2)\r\n        );\r\n    }\r\n\r\n    function log(\r\n        address p0,\r\n        bool p1,\r\n        uint256 p2\r\n    ) internal pure {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\"log(address,bool,uint256)\", p0, p1, p2)\r\n        );\r\n    }\r\n\r\n    function log(\r\n        address p0,\r\n        bool p1,\r\n        string memory p2\r\n    ) internal pure {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\"log(address,bool,string)\", p0, p1, p2)\r\n        );\r\n    }\r\n\r\n    function log(\r\n        address p0,\r\n        bool p1,\r\n        bool p2\r\n    ) internal pure {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\"log(address,bool,bool)\", p0, p1, p2)\r\n        );\r\n    }\r\n\r\n    function log(\r\n        address p0,\r\n        bool p1,\r\n        address p2\r\n    ) internal pure {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\"log(address,bool,address)\", p0, p1, p2)\r\n        );\r\n    }\r\n\r\n    function log(\r\n        address p0,\r\n        address p1,\r\n        uint256 p2\r\n    ) internal pure {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\"log(address,address,uint256)\", p0, p1, p2)\r\n        );\r\n    }\r\n\r\n    function log(\r\n        address p0,\r\n        address p1,\r\n        string memory p2\r\n    ) internal pure {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\"log(address,address,string)\", p0, p1, p2)\r\n        );\r\n    }\r\n\r\n    function log(\r\n        address p0,\r\n        address p1,\r\n        bool p2\r\n    ) internal pure {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\"log(address,address,bool)\", p0, p1, p2)\r\n        );\r\n    }\r\n\r\n    function log(\r\n        address p0,\r\n        address p1,\r\n        address p2\r\n    ) internal pure {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\"log(address,address,address)\", p0, p1, p2)\r\n        );\r\n    }\r\n\r\n    function log(\r\n        uint256 p0,\r\n        uint256 p1,\r\n        uint256 p2,\r\n        uint256 p3\r\n    ) internal pure {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(uint256,uint256,uint256,uint256)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        uint256 p0,\r\n        uint256 p1,\r\n        uint256 p2,\r\n        string memory p3\r\n    ) internal pure {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(uint256,uint256,uint256,string)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        uint256 p0,\r\n        uint256 p1,\r\n        uint256 p2,\r\n        bool p3\r\n    ) internal pure {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(uint256,uint256,uint256,bool)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        uint256 p0,\r\n        uint256 p1,\r\n        uint256 p2,\r\n        address p3\r\n    ) internal pure {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(uint256,uint256,uint256,address)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        uint256 p0,\r\n        uint256 p1,\r\n        string memory p2,\r\n        uint256 p3\r\n    ) internal pure {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(uint256,uint256,string,uint256)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        uint256 p0,\r\n        uint256 p1,\r\n        string memory p2,\r\n        string memory p3\r\n    ) internal pure {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(uint256,uint256,string,string)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        uint256 p0,\r\n        uint256 p1,\r\n        string memory p2,\r\n        bool p3\r\n    ) internal pure {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(uint256,uint256,string,bool)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        uint256 p0,\r\n        uint256 p1,\r\n        string memory p2,\r\n        address p3\r\n    ) internal pure {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(uint256,uint256,string,address)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        uint256 p0,\r\n        uint256 p1,\r\n        bool p2,\r\n        uint256 p3\r\n    ) internal pure {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(uint256,uint256,bool,uint256)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        uint256 p0,\r\n        uint256 p1,\r\n        bool p2,\r\n        string memory p3\r\n    ) internal pure {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(uint256,uint256,bool,string)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        uint256 p0,\r\n        uint256 p1,\r\n        bool p2,\r\n        bool p3\r\n    ) internal pure {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(uint256,uint256,bool,bool)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        uint256 p0,\r\n        uint256 p1,\r\n        bool p2,\r\n        address p3\r\n    ) internal pure {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(uint256,uint256,bool,address)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        uint256 p0,\r\n        uint256 p1,\r\n        address p2,\r\n        uint256 p3\r\n    ) internal pure {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(uint256,uint256,address,uint256)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        uint256 p0,\r\n        uint256 p1,\r\n        address p2,\r\n        string memory p3\r\n    ) internal pure {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(uint256,uint256,address,string)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        uint256 p0,\r\n        uint256 p1,\r\n        address p2,\r\n        bool p3\r\n    ) internal pure {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(uint256,uint256,address,bool)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        uint256 p0,\r\n        uint256 p1,\r\n        address p2,\r\n        address p3\r\n    ) internal pure {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(uint256,uint256,address,address)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        uint256 p0,\r\n        string memory p1,\r\n        uint256 p2,\r\n        uint256 p3\r\n    ) internal pure {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(uint256,string,uint256,uint256)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        uint256 p0,\r\n        string memory p1,\r\n        uint256 p2,\r\n        string memory p3\r\n    ) internal pure {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(uint256,string,uint256,string)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        uint256 p0,\r\n        string memory p1,\r\n        uint256 p2,\r\n        bool p3\r\n    ) internal pure {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(uint256,string,uint256,bool)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        uint256 p0,\r\n        string memory p1,\r\n        uint256 p2,\r\n        address p3\r\n    ) internal pure {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(uint256,string,uint256,address)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        uint256 p0,\r\n        string memory p1,\r\n        string memory p2,\r\n        uint256 p3\r\n    ) internal pure {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(uint256,string,string,uint256)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        uint256 p0,\r\n        string memory p1,\r\n        string memory p2,\r\n        string memory p3\r\n    ) internal pure {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(uint256,string,string,string)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        uint256 p0,\r\n        string memory p1,\r\n        string memory p2,\r\n        bool p3\r\n    ) internal pure {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(uint256,string,string,bool)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        uint256 p0,\r\n        string memory p1,\r\n        string memory p2,\r\n        address p3\r\n    ) internal pure {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(uint256,string,string,address)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        uint256 p0,\r\n        string memory p1,\r\n        bool p2,\r\n        uint256 p3\r\n    ) internal pure {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(uint256,string,bool,uint256)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        uint256 p0,\r\n        string memory p1,\r\n        bool p2,\r\n        string memory p3\r\n    ) internal pure {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(uint256,string,bool,string)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        uint256 p0,\r\n        string memory p1,\r\n        bool p2,\r\n        bool p3\r\n    ) internal pure {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(uint256,string,bool,bool)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        uint256 p0,\r\n        string memory p1,\r\n        bool p2,\r\n        address p3\r\n    ) internal pure {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(uint256,string,bool,address)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        uint256 p0,\r\n        string memory p1,\r\n        address p2,\r\n        uint256 p3\r\n    ) internal pure {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(uint256,string,address,uint256)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        uint256 p0,\r\n        string memory p1,\r\n        address p2,\r\n        string memory p3\r\n    ) internal pure {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(uint256,string,address,string)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        uint256 p0,\r\n        string memory p1,\r\n        address p2,\r\n        bool p3\r\n    ) internal pure {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(uint256,string,address,bool)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        uint256 p0,\r\n        string memory p1,\r\n        address p2,\r\n        address p3\r\n    ) internal pure {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(uint256,string,address,address)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        uint256 p0,\r\n        bool p1,\r\n        uint256 p2,\r\n        uint256 p3\r\n    ) internal pure {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(uint256,bool,uint256,uint256)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        uint256 p0,\r\n        bool p1,\r\n        uint256 p2,\r\n        string memory p3\r\n    ) internal pure {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(uint256,bool,uint256,string)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        uint256 p0,\r\n        bool p1,\r\n        uint256 p2,\r\n        bool p3\r\n    ) internal pure {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(uint256,bool,uint256,bool)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        uint256 p0,\r\n        bool p1,\r\n        uint256 p2,\r\n        address p3\r\n    ) internal pure {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(uint256,bool,uint256,address)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        uint256 p0,\r\n        bool p1,\r\n        string memory p2,\r\n        uint256 p3\r\n    ) internal pure {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(uint256,bool,string,uint256)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        uint256 p0,\r\n        bool p1,\r\n        string memory p2,\r\n        string memory p3\r\n    ) internal pure {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(uint256,bool,string,string)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        uint256 p0,\r\n        bool p1,\r\n        string memory p2,\r\n        bool p3\r\n    ) internal pure {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(uint256,bool,string,bool)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        uint256 p0,\r\n        bool p1,\r\n        string memory p2,\r\n        address p3\r\n    ) internal pure {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(uint256,bool,string,address)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        uint256 p0,\r\n        bool p1,\r\n        bool p2,\r\n        uint256 p3\r\n    ) internal pure {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(uint256,bool,bool,uint256)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        uint256 p0,\r\n        bool p1,\r\n        bool p2,\r\n        string memory p3\r\n    ) internal pure {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(uint256,bool,bool,string)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        uint256 p0,\r\n        bool p1,\r\n        bool p2,\r\n        bool p3\r\n    ) internal pure {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(uint256,bool,bool,bool)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        uint256 p0,\r\n        bool p1,\r\n        bool p2,\r\n        address p3\r\n    ) internal pure {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(uint256,bool,bool,address)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        uint256 p0,\r\n        bool p1,\r\n        address p2,\r\n        uint256 p3\r\n    ) internal pure {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(uint256,bool,address,uint256)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        uint256 p0,\r\n        bool p1,\r\n        address p2,\r\n        string memory p3\r\n    ) internal pure {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(uint256,bool,address,string)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        uint256 p0,\r\n        bool p1,\r\n        address p2,\r\n        bool p3\r\n    ) internal pure {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(uint256,bool,address,bool)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        uint256 p0,\r\n        bool p1,\r\n        address p2,\r\n        address p3\r\n    ) internal pure {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(uint256,bool,address,address)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        uint256 p0,\r\n        address p1,\r\n        uint256 p2,\r\n        uint256 p3\r\n    ) internal pure {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(uint256,address,uint256,uint256)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        uint256 p0,\r\n        address p1,\r\n        uint256 p2,\r\n        string memory p3\r\n    ) internal pure {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(uint256,address,uint256,string)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        uint256 p0,\r\n        address p1,\r\n        uint256 p2,\r\n        bool p3\r\n    ) internal pure {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(uint256,address,uint256,bool)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        uint256 p0,\r\n        address p1,\r\n        uint256 p2,\r\n        address p3\r\n    ) internal pure {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(uint256,address,uint256,address)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        uint256 p0,\r\n        address p1,\r\n        string memory p2,\r\n        uint256 p3\r\n    ) internal pure {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(uint256,address,string,uint256)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        uint256 p0,\r\n        address p1,\r\n        string memory p2,\r\n        string memory p3\r\n    ) internal pure {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(uint256,address,string,string)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        uint256 p0,\r\n        address p1,\r\n        string memory p2,\r\n        bool p3\r\n    ) internal pure {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(uint256,address,string,bool)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        uint256 p0,\r\n        address p1,\r\n        string memory p2,\r\n        address p3\r\n    ) internal pure {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(uint256,address,string,address)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        uint256 p0,\r\n        address p1,\r\n        bool p2,\r\n        uint256 p3\r\n    ) internal pure {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(uint256,address,bool,uint256)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        uint256 p0,\r\n        address p1,\r\n        bool p2,\r\n        string memory p3\r\n    ) internal pure {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(uint256,address,bool,string)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        uint256 p0,\r\n        address p1,\r\n        bool p2,\r\n        bool p3\r\n    ) internal pure {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(uint256,address,bool,bool)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        uint256 p0,\r\n        address p1,\r\n        bool p2,\r\n        address p3\r\n    ) internal pure {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(uint256,address,bool,address)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        uint256 p0,\r\n        address p1,\r\n        address p2,\r\n        uint256 p3\r\n    ) internal pure {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(uint256,address,address,uint256)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        uint256 p0,\r\n        address p1,\r\n        address p2,\r\n        string memory p3\r\n    ) internal pure {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(uint256,address,address,string)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        uint256 p0,\r\n        address p1,\r\n        address p2,\r\n        bool p3\r\n    ) internal pure {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(uint256,address,address,bool)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        uint256 p0,\r\n        address p1,\r\n        address p2,\r\n        address p3\r\n    ) internal pure {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(uint256,address,address,address)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        string memory p0,\r\n        uint256 p1,\r\n        uint256 p2,\r\n        uint256 p3\r\n    ) internal pure {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(string,uint256,uint256,uint256)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        string memory p0,\r\n        uint256 p1,\r\n        uint256 p2,\r\n        string memory p3\r\n    ) internal pure {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(string,uint256,uint256,string)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        string memory p0,\r\n        uint256 p1,\r\n        uint256 p2,\r\n        bool p3\r\n    ) internal pure {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(string,uint256,uint256,bool)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        string memory p0,\r\n        uint256 p1,\r\n        uint256 p2,\r\n        address p3\r\n    ) internal pure {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(string,uint256,uint256,address)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        string memory p0,\r\n        uint256 p1,\r\n        string memory p2,\r\n        uint256 p3\r\n    ) internal pure {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(string,uint256,string,uint256)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        string memory p0,\r\n        uint256 p1,\r\n        string memory p2,\r\n        string memory p3\r\n    ) internal pure {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(string,uint256,string,string)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        string memory p0,\r\n        uint256 p1,\r\n        string memory p2,\r\n        bool p3\r\n    ) internal pure {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(string,uint256,string,bool)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        string memory p0,\r\n        uint256 p1,\r\n        string memory p2,\r\n        address p3\r\n    ) internal pure {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(string,uint256,string,address)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        string memory p0,\r\n        uint256 p1,\r\n        bool p2,\r\n        uint256 p3\r\n    ) internal pure {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(string,uint256,bool,uint256)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        string memory p0,\r\n        uint256 p1,\r\n        bool p2,\r\n        string memory p3\r\n    ) internal pure {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(string,uint256,bool,string)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        string memory p0,\r\n        uint256 p1,\r\n        bool p2,\r\n        bool p3\r\n    ) internal pure {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(string,uint256,bool,bool)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        string memory p0,\r\n        uint256 p1,\r\n        bool p2,\r\n        address p3\r\n    ) internal pure {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(string,uint256,bool,address)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        string memory p0,\r\n        uint256 p1,\r\n        address p2,\r\n        uint256 p3\r\n    ) internal pure {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(string,uint256,address,uint256)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        string memory p0,\r\n        uint256 p1,\r\n        address p2,\r\n        string memory p3\r\n    ) internal pure {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(string,uint256,address,string)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        string memory p0,\r\n        uint256 p1,\r\n        address p2,\r\n        bool p3\r\n    ) internal pure {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(string,uint256,address,bool)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        string memory p0,\r\n        uint256 p1,\r\n        address p2,\r\n        address p3\r\n    ) internal pure {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(string,uint256,address,address)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        string memory p0,\r\n        string memory p1,\r\n        uint256 p2,\r\n        uint256 p3\r\n    ) internal pure {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(string,string,uint256,uint256)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        string memory p0,\r\n        string memory p1,\r\n        uint256 p2,\r\n        string memory p3\r\n    ) internal pure {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(string,string,uint256,string)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        string memory p0,\r\n        string memory p1,\r\n        uint256 p2,\r\n        bool p3\r\n    ) internal pure {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(string,string,uint256,bool)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        string memory p0,\r\n        string memory p1,\r\n        uint256 p2,\r\n        address p3\r\n    ) internal pure {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(string,string,uint256,address)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        string memory p0,\r\n        string memory p1,\r\n        string memory p2,\r\n        uint256 p3\r\n    ) internal pure {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(string,string,string,uint256)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        string memory p0,\r\n        string memory p1,\r\n        string memory p2,\r\n        string memory p3\r\n    ) internal pure {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(string,string,string,string)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        string memory p0,\r\n        string memory p1,\r\n        string memory p2,\r\n        bool p3\r\n    ) internal pure {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(string,string,string,bool)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        string memory p0,\r\n        string memory p1,\r\n        string memory p2,\r\n        address p3\r\n    ) internal pure {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(string,string,string,address)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        string memory p0,\r\n        string memory p1,\r\n        bool p2,\r\n        uint256 p3\r\n    ) internal pure {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(string,string,bool,uint256)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        string memory p0,\r\n        string memory p1,\r\n        bool p2,\r\n        string memory p3\r\n    ) internal pure {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(string,string,bool,string)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        string memory p0,\r\n        string memory p1,\r\n        bool p2,\r\n        bool p3\r\n    ) internal pure {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(string,string,bool,bool)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        string memory p0,\r\n        string memory p1,\r\n        bool p2,\r\n        address p3\r\n    ) internal pure {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(string,string,bool,address)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        string memory p0,\r\n        string memory p1,\r\n        address p2,\r\n        uint256 p3\r\n    ) internal pure {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(string,string,address,uint256)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        string memory p0,\r\n        string memory p1,\r\n        address p2,\r\n        string memory p3\r\n    ) internal pure {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(string,string,address,string)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        string memory p0,\r\n        string memory p1,\r\n        address p2,\r\n        bool p3\r\n    ) internal pure {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(string,string,address,bool)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        string memory p0,\r\n        string memory p1,\r\n        address p2,\r\n        address p3\r\n    ) internal pure {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(string,string,address,address)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        string memory p0,\r\n        bool p1,\r\n        uint256 p2,\r\n        uint256 p3\r\n    ) internal pure {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(string,bool,uint256,uint256)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        string memory p0,\r\n        bool p1,\r\n        uint256 p2,\r\n        string memory p3\r\n    ) internal pure {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(string,bool,uint256,string)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        string memory p0,\r\n        bool p1,\r\n        uint256 p2,\r\n        bool p3\r\n    ) internal pure {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(string,bool,uint256,bool)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        string memory p0,\r\n        bool p1,\r\n        uint256 p2,\r\n        address p3\r\n    ) internal pure {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(string,bool,uint256,address)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        string memory p0,\r\n        bool p1,\r\n        string memory p2,\r\n        uint256 p3\r\n    ) internal pure {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(string,bool,string,uint256)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        string memory p0,\r\n        bool p1,\r\n        string memory p2,\r\n        string memory p3\r\n    ) internal pure {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(string,bool,string,string)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        string memory p0,\r\n        bool p1,\r\n        string memory p2,\r\n        bool p3\r\n    ) internal pure {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(string,bool,string,bool)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        string memory p0,\r\n        bool p1,\r\n        string memory p2,\r\n        address p3\r\n    ) internal pure {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(string,bool,string,address)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        string memory p0,\r\n        bool p1,\r\n        bool p2,\r\n        uint256 p3\r\n    ) internal pure {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(string,bool,bool,uint256)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        string memory p0,\r\n        bool p1,\r\n        bool p2,\r\n        string memory p3\r\n    ) internal pure {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(string,bool,bool,string)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        string memory p0,\r\n        bool p1,\r\n        bool p2,\r\n        bool p3\r\n    ) internal pure {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(string,bool,bool,bool)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        string memory p0,\r\n        bool p1,\r\n        bool p2,\r\n        address p3\r\n    ) internal pure {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(string,bool,bool,address)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        string memory p0,\r\n        bool p1,\r\n        address p2,\r\n        uint256 p3\r\n    ) internal pure {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(string,bool,address,uint256)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        string memory p0,\r\n        bool p1,\r\n        address p2,\r\n        string memory p3\r\n    ) internal pure {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(string,bool,address,string)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        string memory p0,\r\n        bool p1,\r\n        address p2,\r\n        bool p3\r\n    ) internal pure {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(string,bool,address,bool)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        string memory p0,\r\n        bool p1,\r\n        address p2,\r\n        address p3\r\n    ) internal pure {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(string,bool,address,address)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        string memory p0,\r\n        address p1,\r\n        uint256 p2,\r\n        uint256 p3\r\n    ) internal pure {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(string,address,uint256,uint256)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        string memory p0,\r\n        address p1,\r\n        uint256 p2,\r\n        string memory p3\r\n    ) internal pure {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(string,address,uint256,string)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        string memory p0,\r\n        address p1,\r\n        uint256 p2,\r\n        bool p3\r\n    ) internal pure {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(string,address,uint256,bool)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        string memory p0,\r\n        address p1,\r\n        uint256 p2,\r\n        address p3\r\n    ) internal pure {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(string,address,uint256,address)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        string memory p0,\r\n        address p1,\r\n        string memory p2,\r\n        uint256 p3\r\n    ) internal pure {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(string,address,string,uint256)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        string memory p0,\r\n        address p1,\r\n        string memory p2,\r\n        string memory p3\r\n    ) internal pure {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(string,address,string,string)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        string memory p0,\r\n        address p1,\r\n        string memory p2,\r\n        bool p3\r\n    ) internal pure {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(string,address,string,bool)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        string memory p0,\r\n        address p1,\r\n        string memory p2,\r\n        address p3\r\n    ) internal pure {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(string,address,string,address)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        string memory p0,\r\n        address p1,\r\n        bool p2,\r\n        uint256 p3\r\n    ) internal pure {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(string,address,bool,uint256)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        string memory p0,\r\n        address p1,\r\n        bool p2,\r\n        string memory p3\r\n    ) internal pure {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(string,address,bool,string)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        string memory p0,\r\n        address p1,\r\n        bool p2,\r\n        bool p3\r\n    ) internal pure {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(string,address,bool,bool)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        string memory p0,\r\n        address p1,\r\n        bool p2,\r\n        address p3\r\n    ) internal pure {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(string,address,bool,address)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        string memory p0,\r\n        address p1,\r\n        address p2,\r\n        uint256 p3\r\n    ) internal pure {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(string,address,address,uint256)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        string memory p0,\r\n        address p1,\r\n        address p2,\r\n        string memory p3\r\n    ) internal pure {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(string,address,address,string)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        string memory p0,\r\n        address p1,\r\n        address p2,\r\n        bool p3\r\n    ) internal pure {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(string,address,address,bool)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        string memory p0,\r\n        address p1,\r\n        address p2,\r\n        address p3\r\n    ) internal pure {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(string,address,address,address)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        bool p0,\r\n        uint256 p1,\r\n        uint256 p2,\r\n        uint256 p3\r\n    ) internal pure {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(bool,uint256,uint256,uint256)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        bool p0,\r\n        uint256 p1,\r\n        uint256 p2,\r\n        string memory p3\r\n    ) internal pure {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(bool,uint256,uint256,string)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        bool p0,\r\n        uint256 p1,\r\n        uint256 p2,\r\n        bool p3\r\n    ) internal pure {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(bool,uint256,uint256,bool)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        bool p0,\r\n        uint256 p1,\r\n        uint256 p2,\r\n        address p3\r\n    ) internal pure {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(bool,uint256,uint256,address)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        bool p0,\r\n        uint256 p1,\r\n        string memory p2,\r\n        uint256 p3\r\n    ) internal pure {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(bool,uint256,string,uint256)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        bool p0,\r\n        uint256 p1,\r\n        string memory p2,\r\n        string memory p3\r\n    ) internal pure {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(bool,uint256,string,string)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        bool p0,\r\n        uint256 p1,\r\n        string memory p2,\r\n        bool p3\r\n    ) internal pure {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(bool,uint256,string,bool)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        bool p0,\r\n        uint256 p1,\r\n        string memory p2,\r\n        address p3\r\n    ) internal pure {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(bool,uint256,string,address)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        bool p0,\r\n        uint256 p1,\r\n        bool p2,\r\n        uint256 p3\r\n    ) internal pure {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(bool,uint256,bool,uint256)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        bool p0,\r\n        uint256 p1,\r\n        bool p2,\r\n        string memory p3\r\n    ) internal pure {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(bool,uint256,bool,string)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        bool p0,\r\n        uint256 p1,\r\n        bool p2,\r\n        bool p3\r\n    ) internal pure {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(bool,uint256,bool,bool)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        bool p0,\r\n        uint256 p1,\r\n        bool p2,\r\n        address p3\r\n    ) internal pure {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(bool,uint256,bool,address)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        bool p0,\r\n        uint256 p1,\r\n        address p2,\r\n        uint256 p3\r\n    ) internal pure {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(bool,uint256,address,uint256)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        bool p0,\r\n        uint256 p1,\r\n        address p2,\r\n        string memory p3\r\n    ) internal pure {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(bool,uint256,address,string)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        bool p0,\r\n        uint256 p1,\r\n        address p2,\r\n        bool p3\r\n    ) internal pure {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(bool,uint256,address,bool)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        bool p0,\r\n        uint256 p1,\r\n        address p2,\r\n        address p3\r\n    ) internal pure {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(bool,uint256,address,address)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        bool p0,\r\n        string memory p1,\r\n        uint256 p2,\r\n        uint256 p3\r\n    ) internal pure {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(bool,string,uint256,uint256)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        bool p0,\r\n        string memory p1,\r\n        uint256 p2,\r\n        string memory p3\r\n    ) internal pure {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(bool,string,uint256,string)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        bool p0,\r\n        string memory p1,\r\n        uint256 p2,\r\n        bool p3\r\n    ) internal pure {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(bool,string,uint256,bool)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        bool p0,\r\n        string memory p1,\r\n        uint256 p2,\r\n        address p3\r\n    ) internal pure {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(bool,string,uint256,address)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        bool p0,\r\n        string memory p1,\r\n        string memory p2,\r\n        uint256 p3\r\n    ) internal pure {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(bool,string,string,uint256)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        bool p0,\r\n        string memory p1,\r\n        string memory p2,\r\n        string memory p3\r\n    ) internal pure {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(bool,string,string,string)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        bool p0,\r\n        string memory p1,\r\n        string memory p2,\r\n        bool p3\r\n    ) internal pure {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(bool,string,string,bool)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        bool p0,\r\n        string memory p1,\r\n        string memory p2,\r\n        address p3\r\n    ) internal pure {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(bool,string,string,address)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        bool p0,\r\n        string memory p1,\r\n        bool p2,\r\n        uint256 p3\r\n    ) internal pure {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(bool,string,bool,uint256)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        bool p0,\r\n        string memory p1,\r\n        bool p2,\r\n        string memory p3\r\n    ) internal pure {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(bool,string,bool,string)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        bool p0,\r\n        string memory p1,\r\n        bool p2,\r\n        bool p3\r\n    ) internal pure {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(bool,string,bool,bool)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        bool p0,\r\n        string memory p1,\r\n        bool p2,\r\n        address p3\r\n    ) internal pure {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(bool,string,bool,address)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        bool p0,\r\n        string memory p1,\r\n        address p2,\r\n        uint256 p3\r\n    ) internal pure {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(bool,string,address,uint256)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        bool p0,\r\n        string memory p1,\r\n        address p2,\r\n        string memory p3\r\n    ) internal pure {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(bool,string,address,string)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        bool p0,\r\n        string memory p1,\r\n        address p2,\r\n        bool p3\r\n    ) internal pure {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(bool,string,address,bool)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        bool p0,\r\n        string memory p1,\r\n        address p2,\r\n        address p3\r\n    ) internal pure {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(bool,string,address,address)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        bool p0,\r\n        bool p1,\r\n        uint256 p2,\r\n        uint256 p3\r\n    ) internal pure {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(bool,bool,uint256,uint256)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        bool p0,\r\n        bool p1,\r\n        uint256 p2,\r\n        string memory p3\r\n    ) internal pure {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(bool,bool,uint256,string)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        bool p0,\r\n        bool p1,\r\n        uint256 p2,\r\n        bool p3\r\n    ) internal pure {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(bool,bool,uint256,bool)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        bool p0,\r\n        bool p1,\r\n        uint256 p2,\r\n        address p3\r\n    ) internal pure {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(bool,bool,uint256,address)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        bool p0,\r\n        bool p1,\r\n        string memory p2,\r\n        uint256 p3\r\n    ) internal pure {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(bool,bool,string,uint256)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        bool p0,\r\n        bool p1,\r\n        string memory p2,\r\n        string memory p3\r\n    ) internal pure {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(bool,bool,string,string)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        bool p0,\r\n        bool p1,\r\n        string memory p2,\r\n        bool p3\r\n    ) internal pure {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(bool,bool,string,bool)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        bool p0,\r\n        bool p1,\r\n        string memory p2,\r\n        address p3\r\n    ) internal pure {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(bool,bool,string,address)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        bool p0,\r\n        bool p1,\r\n        bool p2,\r\n        uint256 p3\r\n    ) internal pure {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(bool,bool,bool,uint256)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        bool p0,\r\n        bool p1,\r\n        bool p2,\r\n        string memory p3\r\n    ) internal pure {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(bool,bool,bool,string)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        bool p0,\r\n        bool p1,\r\n        bool p2,\r\n        bool p3\r\n    ) internal pure {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\"log(bool,bool,bool,bool)\", p0, p1, p2, p3)\r\n        );\r\n    }\r\n\r\n    function log(\r\n        bool p0,\r\n        bool p1,\r\n        bool p2,\r\n        address p3\r\n    ) internal pure {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(bool,bool,bool,address)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        bool p0,\r\n        bool p1,\r\n        address p2,\r\n        uint256 p3\r\n    ) internal pure {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(bool,bool,address,uint256)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        bool p0,\r\n        bool p1,\r\n        address p2,\r\n        string memory p3\r\n    ) internal pure {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(bool,bool,address,string)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        bool p0,\r\n        bool p1,\r\n        address p2,\r\n        bool p3\r\n    ) internal pure {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(bool,bool,address,bool)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        bool p0,\r\n        bool p1,\r\n        address p2,\r\n        address p3\r\n    ) internal pure {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(bool,bool,address,address)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        bool p0,\r\n        address p1,\r\n        uint256 p2,\r\n        uint256 p3\r\n    ) internal pure {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(bool,address,uint256,uint256)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        bool p0,\r\n        address p1,\r\n        uint256 p2,\r\n        string memory p3\r\n    ) internal pure {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(bool,address,uint256,string)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        bool p0,\r\n        address p1,\r\n        uint256 p2,\r\n        bool p3\r\n    ) internal pure {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(bool,address,uint256,bool)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        bool p0,\r\n        address p1,\r\n        uint256 p2,\r\n        address p3\r\n    ) internal pure {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(bool,address,uint256,address)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        bool p0,\r\n        address p1,\r\n        string memory p2,\r\n        uint256 p3\r\n    ) internal pure {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(bool,address,string,uint256)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        bool p0,\r\n        address p1,\r\n        string memory p2,\r\n        string memory p3\r\n    ) internal pure {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(bool,address,string,string)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        bool p0,\r\n        address p1,\r\n        string memory p2,\r\n        bool p3\r\n    ) internal pure {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(bool,address,string,bool)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        bool p0,\r\n        address p1,\r\n        string memory p2,\r\n        address p3\r\n    ) internal pure {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(bool,address,string,address)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        bool p0,\r\n        address p1,\r\n        bool p2,\r\n        uint256 p3\r\n    ) internal pure {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(bool,address,bool,uint256)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        bool p0,\r\n        address p1,\r\n        bool p2,\r\n        string memory p3\r\n    ) internal pure {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(bool,address,bool,string)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        bool p0,\r\n        address p1,\r\n        bool p2,\r\n        bool p3\r\n    ) internal pure {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(bool,address,bool,bool)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        bool p0,\r\n        address p1,\r\n        bool p2,\r\n        address p3\r\n    ) internal pure {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(bool,address,bool,address)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        bool p0,\r\n        address p1,\r\n        address p2,\r\n        uint256 p3\r\n    ) internal pure {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(bool,address,address,uint256)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        bool p0,\r\n        address p1,\r\n        address p2,\r\n        string memory p3\r\n    ) internal pure {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(bool,address,address,string)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        bool p0,\r\n        address p1,\r\n        address p2,\r\n        bool p3\r\n    ) internal pure {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(bool,address,address,bool)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        bool p0,\r\n        address p1,\r\n        address p2,\r\n        address p3\r\n    ) internal pure {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(bool,address,address,address)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        address p0,\r\n        uint256 p1,\r\n        uint256 p2,\r\n        uint256 p3\r\n    ) internal pure {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(address,uint256,uint256,uint256)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        address p0,\r\n        uint256 p1,\r\n        uint256 p2,\r\n        string memory p3\r\n    ) internal pure {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(address,uint256,uint256,string)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        address p0,\r\n        uint256 p1,\r\n        uint256 p2,\r\n        bool p3\r\n    ) internal pure {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(address,uint256,uint256,bool)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        address p0,\r\n        uint256 p1,\r\n        uint256 p2,\r\n        address p3\r\n    ) internal pure {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(address,uint256,uint256,address)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        address p0,\r\n        uint256 p1,\r\n        string memory p2,\r\n        uint256 p3\r\n    ) internal pure {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(address,uint256,string,uint256)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        address p0,\r\n        uint256 p1,\r\n        string memory p2,\r\n        string memory p3\r\n    ) internal pure {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(address,uint256,string,string)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        address p0,\r\n        uint256 p1,\r\n        string memory p2,\r\n        bool p3\r\n    ) internal pure {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(address,uint256,string,bool)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        address p0,\r\n        uint256 p1,\r\n        string memory p2,\r\n        address p3\r\n    ) internal pure {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(address,uint256,string,address)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        address p0,\r\n        uint256 p1,\r\n        bool p2,\r\n        uint256 p3\r\n    ) internal pure {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(address,uint256,bool,uint256)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        address p0,\r\n        uint256 p1,\r\n        bool p2,\r\n        string memory p3\r\n    ) internal pure {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(address,uint256,bool,string)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        address p0,\r\n        uint256 p1,\r\n        bool p2,\r\n        bool p3\r\n    ) internal pure {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(address,uint256,bool,bool)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        address p0,\r\n        uint256 p1,\r\n        bool p2,\r\n        address p3\r\n    ) internal pure {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(address,uint256,bool,address)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        address p0,\r\n        uint256 p1,\r\n        address p2,\r\n        uint256 p3\r\n    ) internal pure {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(address,uint256,address,uint256)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        address p0,\r\n        uint256 p1,\r\n        address p2,\r\n        string memory p3\r\n    ) internal pure {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(address,uint256,address,string)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        address p0,\r\n        uint256 p1,\r\n        address p2,\r\n        bool p3\r\n    ) internal pure {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(address,uint256,address,bool)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        address p0,\r\n        uint256 p1,\r\n        address p2,\r\n        address p3\r\n    ) internal pure {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(address,uint256,address,address)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        address p0,\r\n        string memory p1,\r\n        uint256 p2,\r\n        uint256 p3\r\n    ) internal pure {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(address,string,uint256,uint256)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        address p0,\r\n        string memory p1,\r\n        uint256 p2,\r\n        string memory p3\r\n    ) internal pure {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(address,string,uint256,string)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        address p0,\r\n        string memory p1,\r\n        uint256 p2,\r\n        bool p3\r\n    ) internal pure {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(address,string,uint256,bool)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        address p0,\r\n        string memory p1,\r\n        uint256 p2,\r\n        address p3\r\n    ) internal pure {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(address,string,uint256,address)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        address p0,\r\n        string memory p1,\r\n        string memory p2,\r\n        uint256 p3\r\n    ) internal pure {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(address,string,string,uint256)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        address p0,\r\n        string memory p1,\r\n        string memory p2,\r\n        string memory p3\r\n    ) internal pure {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(address,string,string,string)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        address p0,\r\n        string memory p1,\r\n        string memory p2,\r\n        bool p3\r\n    ) internal pure {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(address,string,string,bool)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        address p0,\r\n        string memory p1,\r\n        string memory p2,\r\n        address p3\r\n    ) internal pure {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(address,string,string,address)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        address p0,\r\n        string memory p1,\r\n        bool p2,\r\n        uint256 p3\r\n    ) internal pure {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(address,string,bool,uint256)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        address p0,\r\n        string memory p1,\r\n        bool p2,\r\n        string memory p3\r\n    ) internal pure {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(address,string,bool,string)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        address p0,\r\n        string memory p1,\r\n        bool p2,\r\n        bool p3\r\n    ) internal pure {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(address,string,bool,bool)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        address p0,\r\n        string memory p1,\r\n        bool p2,\r\n        address p3\r\n    ) internal pure {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(address,string,bool,address)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        address p0,\r\n        string memory p1,\r\n        address p2,\r\n        uint256 p3\r\n    ) internal pure {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(address,string,address,uint256)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        address p0,\r\n        string memory p1,\r\n        address p2,\r\n        string memory p3\r\n    ) internal pure {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(address,string,address,string)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        address p0,\r\n        string memory p1,\r\n        address p2,\r\n        bool p3\r\n    ) internal pure {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(address,string,address,bool)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        address p0,\r\n        string memory p1,\r\n        address p2,\r\n        address p3\r\n    ) internal pure {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(address,string,address,address)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        address p0,\r\n        bool p1,\r\n        uint256 p2,\r\n        uint256 p3\r\n    ) internal pure {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(address,bool,uint256,uint256)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        address p0,\r\n        bool p1,\r\n        uint256 p2,\r\n        string memory p3\r\n    ) internal pure {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(address,bool,uint256,string)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        address p0,\r\n        bool p1,\r\n        uint256 p2,\r\n        bool p3\r\n    ) internal pure {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(address,bool,uint256,bool)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        address p0,\r\n        bool p1,\r\n        uint256 p2,\r\n        address p3\r\n    ) internal pure {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(address,bool,uint256,address)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        address p0,\r\n        bool p1,\r\n        string memory p2,\r\n        uint256 p3\r\n    ) internal pure {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(address,bool,string,uint256)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        address p0,\r\n        bool p1,\r\n        string memory p2,\r\n        string memory p3\r\n    ) internal pure {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(address,bool,string,string)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        address p0,\r\n        bool p1,\r\n        string memory p2,\r\n        bool p3\r\n    ) internal pure {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(address,bool,string,bool)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        address p0,\r\n        bool p1,\r\n        string memory p2,\r\n        address p3\r\n    ) internal pure {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(address,bool,string,address)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        address p0,\r\n        bool p1,\r\n        bool p2,\r\n        uint256 p3\r\n    ) internal pure {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(address,bool,bool,uint256)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        address p0,\r\n        bool p1,\r\n        bool p2,\r\n        string memory p3\r\n    ) internal pure {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(address,bool,bool,string)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        address p0,\r\n        bool p1,\r\n        bool p2,\r\n        bool p3\r\n    ) internal pure {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(address,bool,bool,bool)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        address p0,\r\n        bool p1,\r\n        bool p2,\r\n        address p3\r\n    ) internal pure {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(address,bool,bool,address)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        address p0,\r\n        bool p1,\r\n        address p2,\r\n        uint256 p3\r\n    ) internal pure {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(address,bool,address,uint256)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        address p0,\r\n        bool p1,\r\n        address p2,\r\n        string memory p3\r\n    ) internal pure {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(address,bool,address,string)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        address p0,\r\n        bool p1,\r\n        address p2,\r\n        bool p3\r\n    ) internal pure {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(address,bool,address,bool)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        address p0,\r\n        bool p1,\r\n        address p2,\r\n        address p3\r\n    ) internal pure {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(address,bool,address,address)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        address p0,\r\n        address p1,\r\n        uint256 p2,\r\n        uint256 p3\r\n    ) internal pure {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(address,address,uint256,uint256)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        address p0,\r\n        address p1,\r\n        uint256 p2,\r\n        string memory p3\r\n    ) internal pure {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(address,address,uint256,string)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        address p0,\r\n        address p1,\r\n        uint256 p2,\r\n        bool p3\r\n    ) internal pure {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(address,address,uint256,bool)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        address p0,\r\n        address p1,\r\n        uint256 p2,\r\n        address p3\r\n    ) internal pure {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(address,address,uint256,address)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        address p0,\r\n        address p1,\r\n        string memory p2,\r\n        uint256 p3\r\n    ) internal pure {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(address,address,string,uint256)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        address p0,\r\n        address p1,\r\n        string memory p2,\r\n        string memory p3\r\n    ) internal pure {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(address,address,string,string)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        address p0,\r\n        address p1,\r\n        string memory p2,\r\n        bool p3\r\n    ) internal pure {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(address,address,string,bool)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        address p0,\r\n        address p1,\r\n        string memory p2,\r\n        address p3\r\n    ) internal pure {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(address,address,string,address)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        address p0,\r\n        address p1,\r\n        bool p2,\r\n        uint256 p3\r\n    ) internal pure {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(address,address,bool,uint256)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        address p0,\r\n        address p1,\r\n        bool p2,\r\n        string memory p3\r\n    ) internal pure {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(address,address,bool,string)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        address p0,\r\n        address p1,\r\n        bool p2,\r\n        bool p3\r\n    ) internal pure {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(address,address,bool,bool)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        address p0,\r\n        address p1,\r\n        bool p2,\r\n        address p3\r\n    ) internal pure {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(address,address,bool,address)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        address p0,\r\n        address p1,\r\n        address p2,\r\n        uint256 p3\r\n    ) internal pure {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(address,address,address,uint256)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        address p0,\r\n        address p1,\r\n        address p2,\r\n        string memory p3\r\n    ) internal pure {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(address,address,address,string)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        address p0,\r\n        address p1,\r\n        address p2,\r\n        bool p3\r\n    ) internal pure {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(address,address,address,bool)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n\r\n    function log(\r\n        address p0,\r\n        address p1,\r\n        address p2,\r\n        address p3\r\n    ) internal pure {\r\n        _sendLogPayload(\r\n            abi.encodeWithSignature(\r\n                \"log(address,address,address,address)\",\r\n                p0,\r\n                p1,\r\n                p2,\r\n                p3\r\n            )\r\n        );\r\n    }\r\n}\r\n\r\n\r\n// Compatible with OpenZeppelin Contracts ^5.0.0\r\npragma solidity 0.8.20;\r\n\r\ncontract LuckHunterPreSale is Ownable, Pausable {\r\n    uint256 public totalRaised;\r\n    uint8 public currentRound = 0;\r\n\r\n    uint256 public cliffDuration;\r\n    uint256 public vestingStartTime;\r\n    uint256 public vestingDuration;\r\n    uint256 public vestingInterval;\r\n    uint256 public cliffPercentage;\r\n\r\n    IERC20 public vestingToken;\r\n\r\n    struct Round {\r\n        uint256 maxDepositToken;\r\n        uint256 amountRaised;\r\n        uint256 price;\r\n        uint256 vestedTokens;\r\n        uint256 tokensSold;\r\n    }\r\n\r\n    mapping(address => uint256) public tokenRaised;\r\n    AggregatorV3Interface internal EthUSDDataFeed;\r\n    address public usdc = 0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48;\r\n    address public usdt = 0xdAC17F958D2ee523a2206206994597C13D831ec7;\r\n\r\n    struct User {\r\n        uint256 investedAmount;\r\n        uint256 totalVestedAmounts;\r\n        uint256 claimedTokens;\r\n    }\r\n\r\n    struct RoundTime {\r\n        uint256 start;\r\n        uint256 end;\r\n    }\r\n\r\n    Round[10] public rounds;\r\n    mapping(address => User) public userDetails;\r\n    mapping(uint256 => RoundTime) public roundTime;\r\n\r\n    event TokensDeposited(address indexed user, uint256 amount);\r\n    event ETHDeposited(address indexed user, uint256 amount);\r\n    event TokensClaimed(address indexed user, uint256 amount);\r\n    event TokenAdded(address indexed token, uint256 amount);\r\n    event TokenWithdraw(address indexed token, uint256 amount);\r\n    event RoundTimeUpdated(uint256 indexed round, uint256 start, uint256 end);\r\n\r\n    constructor(\r\n        uint256 _vestingDuration,\r\n        uint256 _vestingInterval,\r\n        uint256 _cliffDuration,\r\n        uint256 _vestingStartTime,\r\n        uint256 _cliffPercentage,\r\n        address _owner\r\n    ) Ownable(_owner) {\r\n        vestingToken = IERC20(0x2b838A5DAdE021BE2A50a96897Ae350b9a93fF63);\r\n        vestingDuration = _vestingDuration;\r\n        cliffDuration = _cliffDuration;\r\n        vestingStartTime = _vestingStartTime;\r\n        vestingInterval = _vestingInterval;\r\n        cliffPercentage = _cliffPercentage;\r\n\r\n        EthUSDDataFeed = AggregatorV3Interface(\r\n            0x5f4eC3Df9cbd43714FE2740f5E3616155c5b8419\r\n        );\r\n\r\n        rounds[0] = Round(250000 * 10**6, 0, 1000, 250000000 * 10**18, 0);\r\n        rounds[1] = Round(350000 * 10**6, 0, 1120, 312500000 * 10**18, 0);\r\n        rounds[2] = Round(450000 * 10**6, 0, 1240, 362903226 * 10**18, 0); \r\n        rounds[3] = Round(550000 * 10**6, 0, 1380, 398550725 * 10**18, 0); \r\n        rounds[4] = Round(650000 * 10**6, 0, 1520, 427631579 * 10**18, 0); \r\n        rounds[5] = Round(750000 * 10**6, 0, 1680, 446428571 * 10**18, 0);\r\n        rounds[6] = Round(850000 * 10**6, 0, 1860, 456989247 * 10**18, 0); \r\n        rounds[7] = Round(950000 * 10**6, 0, 2060, 461165049 * 10**18, 0); \r\n        rounds[8] = Round(1050000 * 10**6, 0, 2280, 460526316 * 10**18, 0);\r\n        rounds[9] = Round(1150000 * 10**6, 0, 2520, 456349206 * 10**18, 0);\r\n    }\r\n\r\n    function updateVesting(\r\n        uint256 _vestingDuration,\r\n        uint256 _vestingInterval,\r\n        uint256 _cliffDuration,\r\n        uint256 _vestingStartTime,\r\n        uint256 _cliffPercentage\r\n        ) external onlyOwner {\r\n        require(\r\n            vestingStartTime > block.timestamp,\r\n            \"Vesting has already started\"\r\n        );\r\n\r\n        vestingDuration = _vestingDuration;\r\n        cliffDuration = _cliffDuration;\r\n        vestingStartTime = _vestingStartTime;\r\n        vestingInterval = _vestingInterval;\r\n        cliffPercentage = _cliffPercentage;\r\n    }\r\n\r\n    function updateRoundTimes(\r\n        uint8[] calldata _rounds,\r\n        uint256[] calldata _starts,\r\n        uint256[] calldata _ends\r\n    ) external onlyOwner {\r\n        require(\r\n            _rounds.length == _starts.length && _starts.length == _ends.length,\r\n            \"Array lengths must match\"\r\n        );\r\n\r\n        for (uint256 i = 0; i < _rounds.length; i++) {\r\n            uint8 round = _rounds[i];\r\n            uint256 start = _starts[i];\r\n            uint256 end = _ends[i];\r\n\r\n            require(round < rounds.length, \"Invalid round\");\r\n            require(start < end, \"Start time must be less than end time\");\r\n\r\n            roundTime[round] = RoundTime(start, end);\r\n            emit RoundTimeUpdated(round, start, end);\r\n        }\r\n    }\r\n\r\n    function nextRound() public onlyOwner{\r\n        if (block.timestamp < roundTime[currentRound].end) {\r\n            revert(\"Current Round Time is not ended\");\r\n        } else {\r\n            currentRound += 1;\r\n        }\r\n    }\r\n\r\n    function depositETH() public payable whenNotPaused {\r\n        require(\r\n            block.timestamp >= roundTime[currentRound].start,\r\n            \"Sale not started yet\"\r\n        );\r\n        require(block.timestamp <= roundTime[currentRound].end, \"Sale Ended\");\r\n        require(\r\n            currentRound < rounds.length,\r\n            \"All presale rounds are completed\"\r\n        );\r\n        uint256 ethToUsdPrice = getPriceOfETH();\r\n        uint256 amount = (msg.value * ethToUsdPrice);\r\n\r\n        uint256 amountInvestedByUser = (msg.value * ethToUsdPrice * 10e5) /\r\n            10**18;\r\n        require(amountInvestedByUser > 0, \"Insufficient amount sent\");\r\n\r\n        uint256 tokensToBuy = (amount * 10**6) / (rounds[currentRound].price);\r\n\r\n        require(\r\n            amountInvestedByUser + rounds[currentRound].amountRaised <=\r\n                rounds[currentRound].maxDepositToken,\r\n            \"Max cap reached for this round\"\r\n        );\r\n\r\n        rounds[currentRound].tokensSold += tokensToBuy;\r\n        rounds[currentRound].amountRaised += amountInvestedByUser;\r\n        totalRaised += amountInvestedByUser;\r\n        userDetails[msg.sender].investedAmount += amountInvestedByUser;\r\n        userDetails[msg.sender].totalVestedAmounts += tokensToBuy;\r\n\r\n        payable(owner()).transfer(msg.value);\r\n\r\n        emit ETHDeposited(msg.sender, amountInvestedByUser);\r\n    }\r\n\r\n    function getPriceOfETH() public view returns (uint256) {\r\n        (\r\n            ,\r\n            /* uint80 roundID */\r\n            int256 answer, /*uint startedAt*/\r\n            ,\r\n            ,\r\n\r\n        ) = /*uint timeStamp*/\r\n            /*uint80 answeredInRound*/\r\n            EthUSDDataFeed.latestRoundData();\r\n\r\n        return uint256(answer) / 10**8;\r\n    }\r\n\r\n    function depositTokens(uint256 amount, address _depositToken)\r\n        public\r\n        whenNotPaused\r\n    {\r\n        require(\r\n            _depositToken == usdt || _depositToken == usdc,\r\n            \"We can only use USDT or USDC for trade\"\r\n        );\r\n        require(\r\n            block.timestamp >= roundTime[currentRound].start,\r\n            \"Sale not started yet\"\r\n        );\r\n        require(block.timestamp <= roundTime[currentRound].end, \"Sale Ended\");\r\n        require(\r\n            currentRound < rounds.length,\r\n            \"All presale rounds are completed\"\r\n        );\r\n\r\n        require(amount > 0, \"Insufficient amount sent\");\r\n\r\n        uint256 tokensToBuy = (amount / rounds[currentRound].price) * 10**18;\r\n\r\n        require(\r\n            amount + rounds[currentRound].amountRaised <=\r\n                rounds[currentRound].maxDepositToken,\r\n            \"Max cap reached for this round\"\r\n        );\r\n\r\n        rounds[currentRound].tokensSold += tokensToBuy;\r\n        rounds[currentRound].amountRaised += amount;\r\n        totalRaised += amount;\r\n        userDetails[msg.sender].investedAmount += amount;\r\n        userDetails[msg.sender].totalVestedAmounts += tokensToBuy;\r\n\r\n        IERC20(_depositToken).transferFrom(msg.sender, owner(), amount);\r\n        tokenRaised[_depositToken] = amount;\r\n        emit TokensDeposited(msg.sender, amount);\r\n    }\r\n\r\n    function claimTokens() public whenNotPaused {\r\n        require(\r\n            block.timestamp >= vestingStartTime + cliffDuration,\r\n            \"Cliff period not over\"\r\n        );\r\n        uint256 claimableTokens = calculateUnlockedToken(msg.sender);\r\n        require(claimableTokens > 0, \"No tokens available for claim\");\r\n\r\n        vestingToken.transfer(msg.sender, claimableTokens);\r\n        userDetails[msg.sender].claimedTokens += claimableTokens;\r\n        emit TokensClaimed(msg.sender, claimableTokens);\r\n    }\r\n\r\n    function calculateUnlockedToken(address _wallet)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        uint256 totalVested = userDetails[_wallet].totalVestedAmounts;\r\n\r\n        if (block.timestamp < vestingStartTime + cliffDuration) {\r\n            return 0;\r\n        } else if (\r\n            block.timestamp >=\r\n            vestingStartTime + cliffDuration + vestingDuration\r\n        ) {\r\n            return totalVested - userDetails[_wallet].claimedTokens;\r\n        } else {\r\n            uint256 elapsedTime = block.timestamp -\r\n                (vestingStartTime + cliffDuration);\r\n            uint256 vestingPeriods = elapsedTime / vestingInterval;\r\n            uint256 cliffReleaseAmount = (totalVested * cliffPercentage) / 100;\r\n            uint256 totalUnlocked = cliffReleaseAmount +\r\n                ((totalVested - cliffReleaseAmount) *\r\n                    vestingPeriods *\r\n                    vestingInterval) /\r\n                vestingDuration;\r\n            return totalUnlocked - userDetails[_wallet].claimedTokens;\r\n        }\r\n    }\r\n\r\n    function addTokensToPresale(uint256 amount) external onlyOwner {\r\n        vestingToken.transferFrom(msg.sender, address(this), amount);\r\n        emit TokenAdded(address(vestingToken), amount);\r\n    }\r\n\r\n    function withdrawTokens(address _token) external onlyOwner {\r\n        uint256 amount = IERC20(_token).balanceOf(address(this));\r\n        IERC20(_token).transfer(msg.sender, amount);\r\n        emit TokenWithdraw(address(_token), amount);\r\n    }\r\n\r\n    function pause() external onlyOwner {\r\n        _pause();\r\n    }\r\n\r\n    function unpause() external onlyOwner {\r\n        _unpause();\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_vestingDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_vestingInterval\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_cliffDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_vestingStartTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_cliffPercentage\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"EnforcedPause\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ExpectedPause\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ETHDeposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"round\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"}],\"name\":\"RoundTimeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokensClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokensDeposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"addTokensToPresale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"calculateUnlockedToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cliffDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cliffPercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentRound\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositETH\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_depositToken\",\"type\":\"address\"}],\"name\":\"depositTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPriceOfETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextRound\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"roundTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rounds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"maxDepositToken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountRaised\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vestedTokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokensSold\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenRaised\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalRaised\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8[]\",\"name\":\"_rounds\",\"type\":\"uint8[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_starts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_ends\",\"type\":\"uint256[]\"}],\"name\":\"updateRoundTimes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_vestingDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_vestingInterval\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_cliffDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_vestingStartTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_cliffPercentage\",\"type\":\"uint256\"}],\"name\":\"updateVesting\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdc\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdt\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userDetails\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"investedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalVestedAmounts\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimedTokens\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vestingDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vestingInterval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vestingStartTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vestingToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"withdrawTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "LuckHunterPreSale", "CompilerVersion": "v0.8.20+commit.a1b79de6", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "0000000000000000000000000000000000000000000000000000000001da9c000000000000000000000000000000000000000000000000000000000000278d000000000000000000000000000000000000000000000000000000000000278d0000000000000000000000000000000000000000000000000000000000674ba700000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000002f4f8ea3b0194d2ee0e3ec2eb7c0f5a651a09adf", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://3759a86a66fcb2e674b51810e8792b85007d63c5de95b453fd89492dff5527e1"}