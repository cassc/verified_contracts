{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"src/periphery/LzOFTV2FeeHandler.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\nimport {OperatableV2} from \\\"mixins/OperatableV2.sol\\\";\\nimport {ILzFeeHandler, ILzOFTV2} from \\\"interfaces/ILayerZero.sol\\\";\\nimport {IAggregator} from \\\"interfaces/IAggregator.sol\\\";\\n\\ncontract LzOFTV2FeeHandler is OperatableV2, ILzFeeHandler {\\n    event LogFeeWithdrawn(address to, uint256 amount);\\n    event LogFixedNativeFeeChanged(uint256 previous, uint256 current);\\n    event LogOracleImplementationChange(IAggregator indexed previous, IAggregator indexed current);\\n    event LogQuoteTypeChanged(QuoteType previous, QuoteType current);\\n    event LogFeeToChanged(address indexed previous, address indexed current);\\n    event LogUsdFeeChanged(uint256 previous, uint256 current);\\n    event LogFeeCollected(uint256 amount);\\n\\n    error ErrInvalidQuoteType(QuoteType);\\n    error ErrWithdrawFailed();\\n    error ErrValueTooLowToCoverFees(uint256);\\n    error ErrUnauthorizedSender();\\n\\n    modifier onlyFromOFT() {\\n        if (msg.sender != address(oft)) {\\n            revert ErrUnauthorizedSender();\\n        }\\n        _;\\n    }\\n\\n    uint256 public constant DEFAULT_USD_FEE = 1e18;\\n\\n    ILzOFTV2 public immutable oft;\\n\\n    address public feeTo;\\n    IAggregator public aggregator;\\n    uint256 public fixedNativeFee;\\n    uint256 public usdFee;\\n    QuoteType public quoteType = QuoteType.Oracle;\\n\\n    constructor(\\n        address _owner,\\n        uint256 _fixedNativeFee,\\n        address _oft,\\n        address _aggregator,\\n        address _feeTo,\\n        uint8 _quoteType\\n    ) OperatableV2(_owner) {\\n        fixedNativeFee = _fixedNativeFee;\\n        oft = ILzOFTV2(_oft);\\n        aggregator = IAggregator(_aggregator);\\n        feeTo = _feeTo;\\n        quoteType = QuoteType(_quoteType);\\n        usdFee = DEFAULT_USD_FEE;\\n    }\\n\\n    receive() external payable {\\n        emit LogFeeCollected(msg.value);\\n    }\\n\\n    /************************************************************************\\n     * Public\\n     ************************************************************************/\\n    function withdrawFees() external {\\n        uint256 balance = address(this).balance;\\n        (bool success, ) = feeTo.call{value: balance}(\\\"\\\");\\n        if (!success) revert ErrWithdrawFailed();\\n        emit LogFeeWithdrawn(feeTo, balance);\\n    }\\n\\n    /************************************************************************\\n     * Operations\\n     ************************************************************************/\\n    function setFixedNativeFee(uint256 _fixedNativeFee) external onlyOperators {\\n        emit LogFixedNativeFeeChanged(fixedNativeFee, _fixedNativeFee);\\n        fixedNativeFee = _fixedNativeFee;\\n    }\\n\\n    function setAggregator(IAggregator _aggregator) external onlyOperators {\\n        emit LogOracleImplementationChange(aggregator, _aggregator);\\n        aggregator = _aggregator;\\n    }\\n\\n    function setUsdFee(uint256 _usdFee) external onlyOperators {\\n        emit LogUsdFeeChanged(usdFee, _usdFee);\\n        usdFee = _usdFee;\\n    }\\n\\n    function setQuoteType(QuoteType _quoteType) external onlyOperators {\\n        if (_quoteType > QuoteType.Fixed) {\\n            revert ErrInvalidQuoteType(_quoteType);\\n        }\\n\\n        emit LogQuoteTypeChanged(quoteType, _quoteType);\\n        quoteType = _quoteType;\\n    }\\n\\n    /************************************************************************\\n     * Owners\\n     ************************************************************************/\\n    function setFeeTo(address _feeTo) external onlyOwner {\\n        emit LogFeeToChanged(feeTo, _feeTo);\\n        feeTo = _feeTo;\\n    }\\n\\n    /************************************************************************\\n     * Views\\n     ************************************************************************/\\n    function getFee() public view override returns (uint256 nativeFee) {\\n        if (quoteType == QuoteType.Oracle) {\\n            nativeFee = ((10 ** aggregator.decimals()) * usdFee) / uint256(aggregator.latestAnswer());\\n        } else if (quoteType == QuoteType.Fixed) {\\n            nativeFee = fixedNativeFee;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"src/mixins/OperatableV2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\nimport {Owned} from \\\"solmate/auth/Owned.sol\\\";\\n\\n/// @title OperatableV2\\n/// @notice OperatableV2 is a contract that allows operator management.\\n/// The difference with OperatableV1 apart from using solmate `Owned` vs `BoringOwnable` is that\\n/// the constructor is taking in the owner except of using msg.sender.\\n/// This allows ensuring that the owner is right one.\\n/// For example, when deploying from a CREATE2 factory, the msg.sender would the factory address\\n/// which is usually not what we want.\\ncontract OperatableV2 is Owned {\\n    event OperatorChanged(address indexed, bool);\\n    error NotAllowedOperator();\\n\\n    mapping(address => bool) public operators;\\n\\n    constructor(address _owner) Owned(_owner) {}\\n\\n    modifier onlyOperators() {\\n        if (!operators[msg.sender] && msg.sender != owner) {\\n            revert NotAllowedOperator();\\n        }\\n        _;\\n    }\\n\\n    function setOperator(address operator, bool status) external onlyOwner {\\n        operators[operator] = status;\\n        emit OperatorChanged(operator, status);\\n    }\\n}\\n\"\r\n    },\r\n    \"src/interfaces/ILayerZero.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\nimport {IERC165} from \\\"openzeppelin-contracts/utils/introspection/IERC165.sol\\\";\\nimport {IAggregator} from \\\"interfaces/IAggregator.sol\\\";\\n\\ninterface ILzCommonOFT is IERC165 {\\n    struct LzCallParams {\\n        address payable refundAddress;\\n        address zroPaymentAddress;\\n        bytes adapterParams;\\n    }\\n\\n    function estimateSendFee(\\n        uint16 _dstChainId,\\n        bytes32 _toAddress,\\n        uint _amount,\\n        bool _useZro,\\n        bytes calldata _adapterParams\\n    ) external view returns (uint nativeFee, uint zroFee);\\n\\n    function estimateSendAndCallFee(\\n        uint16 _dstChainId,\\n        bytes32 _toAddress,\\n        uint _amount,\\n        bytes calldata _payload,\\n        uint64 _dstGasForCall,\\n        bool _useZro,\\n        bytes calldata _adapterParams\\n    ) external view returns (uint nativeFee, uint zroFee);\\n\\n    function circulatingSupply() external view returns (uint);\\n\\n    function token() external view returns (address);\\n}\\n\\ninterface ILzUserApplicationConfig {\\n    function setConfig(uint16 _version, uint16 _chainId, uint _configType, bytes calldata _config) external;\\n\\n    function setSendVersion(uint16 _version) external;\\n\\n    function setReceiveVersion(uint16 _version) external;\\n\\n    function forceResumeReceive(uint16 _srcChainId, bytes calldata _srcAddress) external;\\n}\\n\\ninterface ILzEndpoint is ILzUserApplicationConfig {\\n    function defaultSendLibrary() external view returns (address);\\n\\n    function send(\\n        uint16 _dstChainId,\\n        bytes calldata _destination,\\n        bytes calldata _payload,\\n        address payable _refundAddress,\\n        address _zroPaymentAddress,\\n        bytes calldata _adapterParams\\n    ) external payable;\\n\\n    function receivePayload(\\n        uint16 _srcChainId,\\n        bytes calldata _srcAddress,\\n        address _dstAddress,\\n        uint64 _nonce,\\n        uint _gasLimit,\\n        bytes calldata _payload\\n    ) external;\\n\\n    function getInboundNonce(uint16 _srcChainId, bytes calldata _srcAddress) external view returns (uint64);\\n\\n    function getOutboundNonce(uint16 _dstChainId, address _srcAddress) external view returns (uint64);\\n\\n    function estimateFees(\\n        uint16 _dstChainId,\\n        address _userApplication,\\n        bytes calldata _payload,\\n        bool _payInZRO,\\n        bytes calldata _adapterParam\\n    ) external view returns (uint nativeFee, uint zroFee);\\n\\n    function getChainId() external view returns (uint16);\\n\\n    function retryPayload(uint16 _srcChainId, bytes calldata _srcAddress, bytes calldata _payload) external;\\n\\n    function hasStoredPayload(uint16 _srcChainId, bytes calldata _srcAddress) external view returns (bool);\\n\\n    function getSendLibraryAddress(address _userApplication) external view returns (address);\\n\\n    function getReceiveLibraryAddress(address _userApplication) external view returns (address);\\n\\n    function isSendingPayload() external view returns (bool);\\n\\n    function isReceivingPayload() external view returns (bool);\\n\\n    function getConfig(uint16 _version, uint16 _chainId, address _userApplication, uint _configType) external view returns (bytes memory);\\n\\n    function getSendVersion(address _userApplication) external view returns (uint16);\\n\\n    function getReceiveVersion(address _userApplication) external view returns (uint16);\\n\\n    function defaultSendVersion() external view returns (uint16);\\n\\n    function defaultReceiveVersion() external view returns (uint16);\\n\\n    function defaultReceiveLibraryAddress() external view returns (address);\\n\\n    function uaConfigLookup(\\n        address _address\\n    ) external view returns (uint16 sendVersion, uint16 receiveVersion, address receiveLibraryAddress, address sendLibrary);\\n}\\n\\ninterface ILzBaseOFTV2 {\\n    function sharedDecimals() external view returns (uint8);\\n\\n    function innerToken() external view returns (address);\\n}\\n\\ninterface ILzApp {\\n    function lzReceive(uint16 _srcChainId, bytes calldata _srcAddress, uint64 _nonce, bytes calldata _payload) external;\\n\\n    function minDstGasLookup(uint16 _srcChainId, uint16 _dstChainId) external view returns (uint);\\n\\n    function setTrustedRemote(uint16 _remoteChainId, bytes calldata _path) external;\\n\\n    function trustedRemoteLookup(uint16 _srcChainId) external view returns (bytes memory);\\n\\n    function setConfig(uint16 _version, uint16 _chainId, uint _configType, bytes calldata _config) external;\\n\\n    function lzEndpoint() external view returns (ILzEndpoint);\\n}\\n\\ninterface ILzFeeHandler {\\n    enum QuoteType {\\n        None,\\n        Oracle,\\n        Fixed\\n    }\\n\\n    function getFee() external view returns (uint256);\\n}\\n\\ninterface ILzOFTV2 is ILzCommonOFT {\\n    function sendFrom(\\n        address _from,\\n        uint16 _dstChainId,\\n        bytes32 _toAddress,\\n        uint _amount,\\n        LzCallParams calldata _callParams\\n    ) external payable;\\n\\n    function sendAndCall(\\n        address _from,\\n        uint16 _dstChainId,\\n        bytes32 _toAddress,\\n        uint _amount,\\n        bytes calldata _payload,\\n        uint64 _dstGasForCall,\\n        LzCallParams calldata _callParams\\n    ) external payable;\\n}\\n\\ninterface ILzOFTReceiverV2 {\\n    function onOFTReceived(\\n        uint16 _srcChainId,\\n        bytes calldata _srcAddress,\\n        uint64 _nonce,\\n        bytes32 _from,\\n        uint _amount,\\n        bytes calldata _payload\\n    ) external;\\n}\\n\\ninterface ILzUltraLightNodeV2 {\\n    function defaultAppConfig(\\n        uint16\\n    )\\n        external\\n        view\\n        returns (\\n            uint16 inboundProofLibraryVersion,\\n            uint64 inboundBlockConfirmations,\\n            address relayer,\\n            uint16 outboundProofType,\\n            uint64 outboundBlockConfirmations,\\n            address oracle\\n        );\\n\\n    function appConfig(\\n        address,\\n        uint16\\n    )\\n        external\\n        view\\n        returns (\\n            uint16 inboundProofLibraryVersion,\\n            uint64 inboundBlockConfirmations,\\n            address relayer,\\n            uint16 outboundProofType,\\n            uint64 outboundBlockConfirmations,\\n            address oracle\\n        );\\n}\\n\\ninterface ILzReceiver {\\n    function lzReceive(uint16 _srcChainId, bytes calldata _srcAddress, uint64 _nonce, bytes calldata _payload) external;\\n}\\n\\ninterface IOFTV2View {\\n    function lzReceive(uint16 _srcChainId, bytes32 _scrAddress, bytes memory _payload, uint _totalSupply) external view returns (uint);\\n\\n    function getInboundNonce(uint16 _srcChainId) external view returns (uint64);\\n\\n    function getCurrentState() external view returns (uint);\\n\\n    function isProxy() external view returns (bool);\\n}\\n\\ninterface IOFTWrapper {\\n    event LogWrapperFeeWithdrawn(address to, uint256 amount);\\n    event LogDefaultExchangeRateChanged(uint256 oldExchangeRate, uint256 newExchangeRate);\\n    event LogOracleImplementationChange(IAggregator indexed oldOracle, IAggregator indexed newOracle);\\n    event LogDefaultQuoteTypeChanged(QUOTE_TYPE oldValue, QUOTE_TYPE newValue);\\n    event LogFeeToChange(address indexed oldAddress, address indexed newAddress);\\n\\n    enum QUOTE_TYPE {\\n        ORACLE,\\n        FIXED_EXCHANGE_RATE\\n    }\\n\\n    function sendOFTV2(\\n        uint16 _dstChainId,\\n        bytes32 _toAddress,\\n        uint _amount,\\n        ILzCommonOFT.LzCallParams calldata _callParams\\n    ) external payable;\\n\\n    function sendProxyOFTV2(\\n        uint16 _dstChainId,\\n        bytes32 _toAddress,\\n        uint _amount,\\n        ILzCommonOFT.LzCallParams calldata _callParams\\n    ) external payable;\\n\\n    function estimateSendFeeV2(\\n        uint16 _dstChainId,\\n        bytes32 _toAddress,\\n        uint _amount,\\n        bytes calldata _adapterParams\\n    ) external view returns (uint nativeFee, uint zroFee);\\n}\\n\\ninterface IPreCrimeView {\\n    struct Packet {\\n        uint16 srcChainId;\\n        bytes32 srcAddress;\\n        uint64 nonce;\\n        bytes payload;\\n    }\\n\\n    struct SimulationResult {\\n        uint chainTotalSupply;\\n        bool isProxy;\\n    }\\n\\n    function getConfig(Packet[] calldata _packets) external view returns (bytes memory);\\n\\n    function precrime(Packet[] calldata _packets, bytes[] calldata _simulation) external view returns (uint16 code, bytes memory reason);\\n\\n    function version() external view returns (uint16);\\n\\n    function simulate(Packet[] calldata _packets) external view returns (uint16 code, bytes memory result);\\n}\\n\"\r\n    },\r\n    \"src/interfaces/IAggregator.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\ninterface IAggregator {\\n    function decimals() external view returns (uint8);\\n\\n    function latestAnswer() external view returns (int256 answer);\\n\\n    function latestRoundData()\\n        external\\n        view\\n        returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\\n}\\n\"\r\n    },\r\n    \"lib/solmate/src/auth/Owned.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\n/// @notice Simple single owner authorization mixin.\\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/auth/Owned.sol)\\nabstract contract Owned {\\n    /*//////////////////////////////////////////////////////////////\\n                                 EVENTS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    event OwnershipTransferred(address indexed user, address indexed newOwner);\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            OWNERSHIP STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    address public owner;\\n\\n    modifier onlyOwner() virtual {\\n        require(msg.sender == owner, \\\"UNAUTHORIZED\\\");\\n\\n        _;\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                               CONSTRUCTOR\\n    //////////////////////////////////////////////////////////////*/\\n\\n    constructor(address _owner) {\\n        owner = _owner;\\n\\n        emit OwnershipTransferred(address(0), _owner);\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                             OWNERSHIP LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        owner = newOwner;\\n\\n        emit OwnershipTransferred(msg.sender, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [\r\n      \"/=src/\",\r\n      \"openzeppelin-contracts/=lib/openzeppelin-contracts/contracts/\",\r\n      \"BoringSolidity/=lib/BoringSolidity/contracts/\",\r\n      \"ds-test/=lib/forge-std/lib/ds-test/src/\",\r\n      \"forge-std/=lib/forge-std/src/\",\r\n      \"solmate/=lib/solmate/src/\",\r\n      \"utils/=utils/\",\r\n      \"libraries/=src/libraries/\",\r\n      \"interfaces/=src/interfaces/\",\r\n      \"cauldrons/=src/cauldrons/\",\r\n      \"staking/=src/staking/\",\r\n      \"swappers/=src/swappers/\",\r\n      \"oracles/=src/oracles/\",\r\n      \"strategies/=src/strategies/\",\r\n      \"tokens/=src/tokens/\",\r\n      \"periphery/=src/periphery/\",\r\n      \"mixins/=src/mixins/\",\r\n      \"lenses/=src/lenses/\",\r\n      \"surl/=lib/surl/src/\",\r\n      \"solady/=lib/solady/src/\",\r\n      \"forge-deploy/=lib/forge-deploy/contracts/\",\r\n      \"ExcessivelySafeCall/=lib/ExcessivelySafeCall/src/\",\r\n      \"safe-contracts/=lib/safe-contracts/contracts/\"\r\n    ],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 400\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": false,\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"appendCBOR\": true\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"paris\",\r\n    \"viaIR\": false,\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_fixedNativeFee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_oft\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_aggregator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_feeTo\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"_quoteType\",\"type\":\"uint8\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"enum ILzFeeHandler.QuoteType\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"ErrInvalidQuoteType\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrUnauthorizedSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ErrValueTooLowToCoverFees\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrWithdrawFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotAllowedOperator\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LogFeeCollected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previous\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"current\",\"type\":\"address\"}],\"name\":\"LogFeeToChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LogFeeWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previous\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"current\",\"type\":\"uint256\"}],\"name\":\"LogFixedNativeFeeChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IAggregator\",\"name\":\"previous\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract IAggregator\",\"name\":\"current\",\"type\":\"address\"}],\"name\":\"LogOracleImplementationChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"enum ILzFeeHandler.QuoteType\",\"name\":\"previous\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"enum ILzFeeHandler.QuoteType\",\"name\":\"current\",\"type\":\"uint8\"}],\"name\":\"LogQuoteTypeChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previous\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"current\",\"type\":\"uint256\"}],\"name\":\"LogUsdFeeChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"name\":\"OperatorChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_USD_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"aggregator\",\"outputs\":[{\"internalType\":\"contract IAggregator\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeTo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fixedNativeFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"nativeFee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oft\",\"outputs\":[{\"internalType\":\"contract ILzOFTV2\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"operators\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"quoteType\",\"outputs\":[{\"internalType\":\"enum ILzFeeHandler.QuoteType\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IAggregator\",\"name\":\"_aggregator\",\"type\":\"address\"}],\"name\":\"setAggregator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeTo\",\"type\":\"address\"}],\"name\":\"setFeeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fixedNativeFee\",\"type\":\"uint256\"}],\"name\":\"setFixedNativeFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"setOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum ILzFeeHandler.QuoteType\",\"name\":\"_quoteType\",\"type\":\"uint8\"}],\"name\":\"setQuoteType\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_usdFee\",\"type\":\"uint256\"}],\"name\":\"setUsdFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "LzOFTV2FeeHandler", "CompilerVersion": "v0.8.20+commit.a1b79de6", "OptimizationUsed": "1", "Runs": "400", "ConstructorArguments": "000000000000000000000000fb3485c2e209a5cfbdc1447674256578f1a80ee300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000f51ccf269747fa2eb4aba4a7b173cb2a73d86ea0000000000000000000000005f4ec3df9cbd43714fe2740f5e3616155c5b8419000000000000000000000000fb3485c2e209a5cfbdc1447674256578f1a80ee30000000000000000000000000000000000000000000000000000000000000001", "EVMVersion": "paris", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}