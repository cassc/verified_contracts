{"SourceCode": "# @version ^0.3.9\r\n# @title TokenRedeemer\r\n\r\n\"\"\"\r\nToken redemption contract where users can redeem their tokens for ETH.\r\nThey get (accumulated ETH) / (total supply) * (token balance)\r\n\"\"\"\r\n\r\nfrom vyper.interfaces import ERC20\r\n\r\ntoken: public(ERC20)\r\n\r\ninterface MintableBurnableToken:\r\n    def mint(amount: uint256): nonpayable\r\n    def burn(amount: uint256): nonpayable\r\n\r\nevent Redeemed:\r\n    redeemer: indexed(address)\r\n    amount_earned: uint256\r\n    amount_burned: uint256\r\n\r\n@external\r\ndef __init__(_token: ERC20):\r\n    self.token = _token\r\n\r\nevent Attempt:\r\n    user: indexed(address)\r\n    amount: uint256\r\n    allowance: uint256\r\n    balance: uint256\r\n\r\n@external\r\ndef redeem(amount: uint256 = 0):\r\n    \"\"\"\r\n    Redeem tokens for ETH.\r\n    \"\"\"\r\n    totalSupply: uint256 = self.token.totalSupply()\r\n\r\n    amount_to_burn: uint256 = amount\r\n    if amount_to_burn == 0:\r\n        amount_to_burn = self.token.balanceOf(msg.sender)\r\n\r\n    amount_earned: uint256 = (self.balance * amount_to_burn) / totalSupply\r\n\r\n    assert self.token.allowance(msg.sender, self) >= amount_to_burn, \"Not enough allowance\"\r\n    assert self.token.balanceOf(msg.sender) >= amount_to_burn, \"Not enough balance\"\r\n\r\n    log Attempt(msg.sender, amount_to_burn, self.token.allowance(msg.sender, self), self.token.balanceOf(msg.sender))\r\n\r\n    self.token.transferFrom(msg.sender, self, amount_to_burn)\r\n\r\n    send(msg.sender, amount_earned)\r\n    MintableBurnableToken(self.token.address).burn(amount_to_burn)\r\n\r\n    log Redeemed(msg.sender, amount_earned, amount_to_burn)\r\n\r\n@view\r\n@external\r\ndef claimable_amount(user: address) -> uint256:\r\n    \"\"\"\r\n    Returns the amount of ETH that can be claimed.\r\n    \"\"\"\r\n    totalSupply: uint256 = self.token.totalSupply()\r\n    return (self.balance * self.token.balanceOf(user)) / totalSupply\r\n\r\n@payable\r\n@external\r\ndef __default__():\r\n    \"\"\"\r\n    Fallback function to receive ETH.\r\n    \"\"\"\r\n    pass", "ABI": "[{\"name\":\"Redeemed\",\"inputs\":[{\"name\":\"redeemer\",\"type\":\"address\",\"indexed\":true},{\"name\":\"amount_earned\",\"type\":\"uint256\",\"indexed\":false},{\"name\":\"amount_burned\",\"type\":\"uint256\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"Attempt\",\"inputs\":[{\"name\":\"user\",\"type\":\"address\",\"indexed\":true},{\"name\":\"amount\",\"type\":\"uint256\",\"indexed\":false},{\"name\":\"allowance\",\"type\":\"uint256\",\"indexed\":false},{\"name\":\"balance\",\"type\":\"uint256\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"stateMutability\":\"nonpayable\",\"type\":\"constructor\",\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"redeem\",\"inputs\":[],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"redeem\",\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"outputs\":[]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"claimable_amount\",\"inputs\":[{\"name\":\"user\",\"type\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"token\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}]}]", "ContractName": "TokenRedeemer", "CompilerVersion": "vyper:0.3.9", "OptimizationUsed": "0", "Runs": "0", "ConstructorArguments": "000000000000000000000000ce96cc49a25e8c1e6e380f8ab4b64dff188fd035", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}