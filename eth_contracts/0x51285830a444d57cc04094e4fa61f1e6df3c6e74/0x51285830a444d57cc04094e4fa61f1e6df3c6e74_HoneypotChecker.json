{"SourceCode": "/**\r\n *Submitted for verification at BscScan.com on 2022-12-13\r\n*/\r\n\r\n// SPDX-License-Identifier: UNLICENSED\r\n// File: @openzeppelin/contracts/utils/Context.sol\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\npragma solidity ^0.8.0;\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n// File: @openzeppelin/contracts/access/Ownable.sol\r\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\r\npragma solidity ^0.8.0;\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n    /**\r\n     * @dev Throws if the sender is not the owner.\r\n     */\r\n    function _checkOwner() internal view virtual {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    }\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n// File: contracts/interfaces/IRouter.sol\r\npragma solidity >=0.6.2;\r\ninterface IRouter {\r\n    function WETH() external pure returns (address);\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable;\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n    function getAmountsOut(uint256 amountIn, address[] calldata path)\r\n        external\r\n        view\r\n        returns (uint256[] memory amounts);\r\n}\r\n// File: contracts/interfaces/IWETH.sol\r\npragma solidity >=0.4.0;\r\ninterface IWETH {\r\n    function deposit() external payable;\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n}\r\n// File: contracts/interfaces/IBEP20.sol\r\npragma solidity >=0.4.0;\r\ninterface IBEP20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function decimals() external view returns (uint8);\r\n    function symbol() external view returns (string memory);\r\n    function name() external view returns (string memory);\r\n    function getOwner() external view returns (address);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        returns (bool);\r\n    function allowance(address _owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n// File: contracts/contract.sol\r\npragma solidity ^0.8.0;\r\ncontract HoneypotChecker is Ownable {\r\n    constructor() {}\r\n    uint256 MAX_INT = 2**256 - 1;\r\n    struct CheckerResponse {\r\n        uint256 buyGas;\r\n        uint256 sellGas;\r\n        uint256 estimatedBuy;\r\n        uint256 exactBuy;\r\n        uint256 estimatedSell;\r\n        uint256 exactSell;\r\n    }\r\n    function destroy() external payable onlyOwner {\r\n        address owner = owner();\r\n        selfdestruct(payable(owner));\r\n    }\r\n    function _calculateGas(IRouter router, uint256 amountIn, address[] memory path) internal returns (uint256){\r\n        uint256 usedGas = gasleft();\r\n        router.swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n            amountIn, \r\n            0, \r\n            path, \r\n            address(this), \r\n            block.timestamp + 100\r\n        );\r\n        usedGas = usedGas - gasleft();\r\n        return usedGas;\r\n    }\r\n    function check(address dexRouter, address[] calldata path) external payable returns(CheckerResponse memory) {\r\n        require(path.length == 2);\r\n        IRouter router = IRouter(dexRouter);\r\n        IBEP20 baseToken = IBEP20(path[0]);\r\n        IBEP20 targetToken = IBEP20(path[1]);\r\n        uint tokenBalance;\r\n        address[] memory routePath = new address[](2);\r\n        uint expectedAmountsOut;\r\n        if(path[0] == router.WETH()) {\r\n            IWETH wbnb = IWETH(router.WETH());\r\n            wbnb.deposit{value: msg.value}();\r\n            tokenBalance = baseToken.balanceOf(address(this));\r\n            expectedAmountsOut = router.getAmountsOut(msg.value, path)[1];\r\n        } else {\r\n            routePath[0] = router.WETH();\r\n            routePath[1] = path[0];\r\n            router.swapExactETHForTokensSupportingFeeOnTransferTokens{value: msg.value}(\r\n                0,\r\n                routePath,\r\n                address(this), \r\n                block.timestamp + 100\r\n            );\r\n            tokenBalance = baseToken.balanceOf(address(this));\r\n            expectedAmountsOut = router.getAmountsOut(tokenBalance, path)[1];\r\n        }\r\n        // approve token\r\n        baseToken.approve(dexRouter, MAX_INT);\r\n        targetToken.approve(dexRouter, MAX_INT);\r\n        uint estimatedBuy = expectedAmountsOut;\r\n        uint buyGas = _calculateGas(router, tokenBalance, path);\r\n        tokenBalance = targetToken.balanceOf(address(this));\r\n        uint exactBuy = tokenBalance;\r\n        //swap Path\r\n        routePath[0] = path[1];\r\n        routePath[1] = path[0];\r\n        expectedAmountsOut = router.getAmountsOut(tokenBalance, routePath)[1];\r\n        uint estimatedSell = expectedAmountsOut;\r\n        uint sellGas = _calculateGas(router, tokenBalance, routePath);\r\n        tokenBalance = baseToken.balanceOf(address(this));\r\n        uint exactSell = tokenBalance;\r\n        CheckerResponse memory response = CheckerResponse(\r\n            buyGas,\r\n            sellGas,\r\n            estimatedBuy,\r\n            exactBuy,\r\n            estimatedSell,\r\n            exactSell\r\n        );\r\n        return response;\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dexRouter\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"}],\"name\":\"check\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"buyGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sellGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"estimatedBuy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"exactBuy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"estimatedSell\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"exactSell\",\"type\":\"uint256\"}],\"internalType\":\"struct HoneypotChecker.CheckerResponse\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"destroy\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "HoneypotChecker", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://4c0db8f293695ed4706acf6fb6ce294af905b95a75f4a5d95ea96e8f2a36b337"}