// SPDX-License-Identifier: MIT

/*
                                     .......                                    
                          ............................                          
                     .......................................                    
                 ..............................................                 
              ....................................................              
            ..................................///////L...............           
          ..............................////////////LL.................         
        ............................./////////////LLLL..................        
       ............................//////////////LLLLL....................      
      ..........................///////////////LLLLLLL.....................     
     ..........................LLLLLL/////////LLLLLLLL......................    
    ..........................LLLLLLLLLLLLLL\LLLLLLLLL.......................   
   ..........................LLLLLLLLLLLLLLL\\\\\\LLLL.......................   
   .........................////////////////\\\\\\\\\L........................  
   .........................//////////////////\\\\\\\\........................  
   .........................//////////////////L///////........................  
   .........................//////////////LLLL////////........................  
   .........................\\\\\\////LLLLLLL/////////........................  
    ........................\\\\\\LLLLLLLLL\\\\///////........................   
    ........................\\//LLLLLLLLL\\\\\\///LL........................    
     ......................./////////LLL\\\\\\\\/L/.........................    
      ......................///////////\\\\\\////.........................      
        ....................///////////\\//////..........................       
         ...................////////////////............................        
           ................./////LLLLLL...............................          
             .............../L/....................................             
                .................................................               
                   ..........................................                   
                        .................................                       
                              ....................                              

                                _______ _______ _______ 
                         |      |______ |_____| |______ 
                         |_____ |______ |     | |       */
 
pragma solidity 0.8.17;

import {ERC20} from '@openzeppelin/contracts/token/ERC20/ERC20.sol';
import {Ownable} from '@openzeppelin/contracts/access/Ownable.sol';
import {ERC20Permit} from '@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol';
import {Pausable} from '@openzeppelin/contracts/security/Pausable.sol';

/// @title LeafCoin
contract LeafCoin is ERC20, Ownable, Pausable, ERC20Permit {

    /// @notice This event is emitted when forceTransfer is called.
    /// @param _from Source address.
    /// @param _to Target address.
    /// @param _amount Amount of tokens to be transferred.
    event ForcedTransfer(address indexed _from, address indexed _to, uint256 _amount);

    constructor() ERC20('LeafCoin', 'LEAF') ERC20Permit('LeafCoin') Ownable() {
        _mint(msg.sender, 420e9 * 1e18);
    }
    
    /// @notice Trigger pausing, initiated by Owner.
    /// @dev Only to be used in special cases.
    function pause() public onlyOwner {
        _pause();
    }
    
    /// @notice Trigger unpausing, initiated by Owner.
    /// @dev Only to be used in special cases.
    function unpause() public onlyOwner {
        _unpause();
    }
    
    /// @notice Transfer tokens from arbitrary address to another, initiated by Owner.
    /// @dev Only to be used in special cases.
    /// @param from Source address.
    /// @param to Target address.
    /// @param amount Amount of tokens to be transferred.
    /// @return True on success.
    function forceTransfer(
        address from,
        address to,
        uint256 amount
    ) public onlyOwner returns (bool) {
        _transfer(from, to, amount);
        emit ForcedTransfer(from, to, amount);
        return true;
    }
    
    /// @notice Called before transfers.
    /// @dev Overriding original to fit logic for pausing and forceTransfer.
    function _beforeTokenTransfer(
        address from,
        address to,
        uint256 amount
    ) internal virtual override {
        super._beforeTokenTransfer(from, to, amount);
        require(!paused() || msg.sender == owner(), "LeafCoin: token transfer while paused");
    }
    
}