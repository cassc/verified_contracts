{"SourceCode": "// SPDX-License-Identifier: UNLICENSED\r\npragma solidity 0.8.13;\r\n\r\n\r\ninterface IRegistry {\r\n    function setRegistryAddress(string memory fn, address value) external ;\r\n    function setRegistryBool(string memory fn, bool value) external ;\r\n    function setRegistryUINT(string memory key) external view returns (uint256) ;\r\n    function setRegistryString(string memory fn, string memory value) external ;\r\n    function setAdmin(address user,bool status ) external;\r\n    function setAppAdmin(address app, address user, bool state) external;\r\n\r\n    function getRegistryAddress(string memory key) external view returns (address) ;\r\n    function getRegistryBool(string memory key) external view returns (bool);\r\n    function getRegistryUINT(string memory key) external view returns (uint256) ;\r\n    function getRegistryString(string memory key) external view returns (string memory) ;\r\n    function isAdmin(address user) external view returns (bool) ;\r\n    function isAppAdmin(address app, address user) external view returns (bool);\r\n}\r\n\r\n\r\ncontract LookupContract {\r\n\r\n    IRegistry           reg = IRegistry(0x1e8150050A7a4715aad42b905C08df76883f396F);\r\n\r\n    mapping(address => address) lookups;\r\n\r\n    error ContractNameNotInitialised(string contract_name);\r\n    error ContractInfoNotInitialised();\r\n\r\n    function find_contract(string memory contract_name) external returns (address) {\r\n        // console.log(\"find_contract called for:\", contract_name);\r\n        address adr = reg.getRegistryAddress(contract_name);\r\n        if (adr == address(0)) revert ContractNameNotInitialised(contract_name);\r\n        lookups[msg.sender] = adr;\r\n        return adr;\r\n    }\r\n\r\n    function lookup() external view returns (address) {\r\n        address adr = lookups[msg.sender];\r\n        // console.log(\"lookup called sender/adr\", msg.sender, adr);\r\n        if (adr == address(0)) revert ContractInfoNotInitialised();\r\n        return adr;\r\n    }\r\n}\r\n\r\n// import \"hardhat/console.sol\";\r\n\r\ncontract TheProxy {\r\n\r\n    event ContractInitialised(string contract_name,address dest);\r\n\r\n    address immutable public lookup;\r\n\r\n    constructor(string memory contract_name, address _lookup) {\r\n        // console.log(\"TheProxy constructor\");\r\n        lookup = _lookup;\r\n        address dest   = LookupContract(lookup).find_contract(contract_name);\r\n        // console.log(\"proxy installed: dest/ctr_name/lookup\", dest, contract_name, lookup);\r\n        emit ContractInitialised(contract_name,dest);\r\n    }\r\n\r\n    // fallback(bytes calldata b) external  returns (bytes memory)  {           // For debugging when we want to access \"lookup\"\r\n    fallback(bytes calldata b) external payable returns (bytes memory)  {\r\n        // console.log(\"proxy start sender/lookup:\", msg.sender, lookup);\r\n        address dest   = LookupContract(lookup).lookup();\r\n        // console.log(\"proxy delegate:\", dest);\r\n        (bool success, bytes memory returnedData) = dest.delegatecall(b);\r\n        require(success, string(returnedData));\r\n        return returnedData; \r\n    }\r\n  \r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"contract_name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_lookup\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"contract_name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"dest\",\"type\":\"address\"}],\"name\":\"ContractInitialised\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"lookup\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "TheProxy", "CompilerVersion": "v0.8.13+commit.abaa5c0e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000000000000000000000000000000000000000000040000000000000000000000000b238de0619c7e9aa155d9a69b9e5b0d9b5b412710000000000000000000000000000000000000000000000000000000000000015474f4c44454e5f54524149545f52454749535452590000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "1", "Implementation": "0xc8f818729bf05d6239a407baa8370dec8e0c01e9", "SwarmSource": "ipfs://5b6645ac4c3c8cedfd2dd76cb63c03b67e0e65034b22b320b24da4ae06705e44"}