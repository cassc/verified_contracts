{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"src/Agent.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\n// SPDX-FileCopyrightText: 2023 Snowfork <hello@snowfork.com>\\npragma solidity 0.8.25;\\n\\n/// @title An agent contract that acts on behalf of a consensus system on Polkadot\\n/// @dev Instances of this contract act as an agents for arbitrary consensus systems on Polkadot. These consensus systems\\n/// can include toplevel parachains as as well as nested consensus systems within a parachain.\\ncontract Agent {\\n    error Unauthorized();\\n\\n    /// @dev The unique ID for this agent, derived from the MultiLocation of the corresponding consensus system on Polkadot\\n    bytes32 public immutable AGENT_ID;\\n\\n    /// @dev The gateway contract controlling this agent\\n    address public immutable GATEWAY;\\n\\n    constructor(bytes32 agentID) {\\n        AGENT_ID = agentID;\\n        GATEWAY = msg.sender;\\n    }\\n\\n    /// @dev Agents can receive ether permissionlessly.\\n    /// This is important, as agents for top-level parachains also act as sovereign accounts from which message relayers\\n    /// are rewarded.\\n    receive() external payable {}\\n\\n    /// @dev Allow the gateway to invoke some code within the context of this agent\\n    /// using `delegatecall`. Typically this code will be provided by `AgentExecutor.sol`.\\n    function invoke(address executor, bytes calldata data) external returns (bool, bytes memory) {\\n        if (msg.sender != GATEWAY) {\\n            revert Unauthorized();\\n        }\\n        return executor.delegatecall(data);\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [\r\n      \"canonical-weth/=lib/canonical-weth/contracts/\",\r\n      \"ds-test/=lib/ds-test/src/\",\r\n      \"forge-std/=lib/forge-std/src/\",\r\n      \"openzeppelin-contracts/=lib/openzeppelin-contracts/\",\r\n      \"openzeppelin/=lib/openzeppelin-contracts/contracts/\",\r\n      \"prb/math/=lib/prb-math/\",\r\n      \"@prb/test/=lib/prb-math/lib/prb-test/src/\",\r\n      \"erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/\",\r\n      \"prb-math/=lib/prb-math/src/\",\r\n      \"prb-test/=lib/prb-math/lib/prb-test/src/\"\r\n    ],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 20000\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": false,\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"appendCBOR\": true\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"paris\",\r\n    \"viaIR\": true,\r\n    \"libraries\": {\r\n      \"src/Assets.sol\": {\r\n        \"Assets\": \"0x0ee3c81642A308B0e1F81C81f6853B64bf261976\"\r\n      },\r\n      \"src/Verification.sol\": {\r\n        \"Verification\": \"0x515c0817005b2F3383B7D8837d6DCc15c0d71C56\"\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"agentID\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"Unauthorized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AGENT_ID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"GATEWAY\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"executor\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"invoke\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "Agent", "CompilerVersion": "v0.8.25+commit.b61c2a91", "OptimizationUsed": "1", "Runs": "20000", "ConstructorArguments": "81c5ab2571199e3188135178f3c2c8e2d268be1313d029b30f534fa579b69b79", "EVMVersion": "paris", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}