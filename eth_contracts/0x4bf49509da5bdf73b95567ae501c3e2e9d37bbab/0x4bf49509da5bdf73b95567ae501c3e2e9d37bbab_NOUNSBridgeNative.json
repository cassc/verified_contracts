{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/bridgeNative.sol\": {\r\n      \"content\": \"/////////////////////////////////////////////////////////////////////////\\r\\n// SPDX-License-Identifier: TheUnlicense\\r\\n//\\r\\n// Smart contracts, backend and frontend by KingSimpa69.\\r\\n// Another refactor from a contract I wrote two years ago. \\r\\n// Built for the Based Fellas Bridge Authority.\\r\\n// Bridging ANY project on ANY EVM over to base safely and responsibly.\\r\\n//\\r\\n/////////////////////////////////////////////////////////////////////////\\r\\npragma solidity ^0.8.26;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\r\\n\\r\\n/// @title A contract for bridging NFTs between different blockchains or layers\\r\\n/// @notice This contract handles the locking, unlocking, and validation of NFTs for cross-chain transfers\\r\\n/// @dev Utilizes OpenZeppelin's ERC721 interface for NFT interactions and ReentrancyGuard for security against re-entrant calls\\r\\ncontract NOUNSBridgeNative is ReentrancyGuard {\\r\\n    /// @notice Address of the NFT contract\\r\\n    address public nounsAddy = 0x9C8fF314C9Bc7F6e59A9d9225Fb22946427eDC03;\\r\\n\\r\\n    /// @notice Bridge fee required to lock an NFT\\r\\n    uint256 public BRIDGE_FEE = 10000000000000000; \\r\\n\\r\\n    /// @notice ERC721 NFT contract interface\\r\\n    IERC721 public NOUNS = IERC721(nounsAddy);\\r\\n\\r\\n    /// @notice Tracks whether an NFT is locked for bridging\\r\\n    mapping(uint256 => bool) public lockedNFTs;\\r\\n\\r\\n    /// @notice Tracks validation status of NFTs by authorized authorities\\r\\n    mapping(uint256 => address[3]) public validated;\\r\\n\\r\\n    /// @notice Array of addresses authorized to validate NFTs\\r\\n    address[3] public authorities;\\r\\n\\r\\n    /// @notice Address that last validated a change to authority\\r\\n    address public authorityModValidated = address(0);\\r\\n\\r\\n    /// @notice Address that last validated a fee modification\\r\\n    address public feeModValidated = address(0);\\r\\n\\r\\n    /// @dev Emitted when an NFT is locked for bridging\\r\\n    event NFTLocked(uint256 tokenId, address owner);\\r\\n\\r\\n    /// @dev Emitted when an NFT is unlocked from bridging\\r\\n    event NFTUnlocked(uint256 tokenId, address owner);\\r\\n\\r\\n    /// @dev Emitted when an NFT is validated by an authority\\r\\n    event Validated(uint256 tokenId, address receiver, address validator);\\r\\n\\r\\n    constructor() {\\r\\n        authorities[0] = 0x5100C59526185Ee1863aae24D6D9064e7CbAC0E4;\\r\\n        authorities[1] = 0x2B81Aad20Df5539573e4f5C9105164c9E60a8522;\\r\\n        authorities[2] = 0x299Ed0Ca9226cd196CDb2f5950c49BD49aD8D84f;\\r\\n    }\\r\\n\\r\\n    /// @notice Locks an NFT for bridging\\r\\n    /// @dev Transfers the NFT to the contract and locks it, distributing the bridge fee among authorities in specified percentages\\r\\n    /// @param tokenId The token ID of the NFT to lock\\r\\n    function bridgeOut(uint256 tokenId) public nonReentrant payable {\\r\\n        require(NOUNS.ownerOf(tokenId) == msg.sender, \\\"Not the owner\\\");\\r\\n        require(!lockedNFTs[tokenId], \\\"NFT is locked.\\\");\\r\\n        require(msg.value >= BRIDGE_FEE, \\\"You must pay the bridge fee\\\");\\r\\n        uint256 paymentToAuthority0 = msg.value * 20 / 100; // 20% \\r\\n        uint256 paymentToAuthority1 = msg.value * 20 / 100; // 20% \\r\\n\\r\\n        payable(authorities[0]).transfer(paymentToAuthority0);\\r\\n        payable(authorities[1]).transfer(paymentToAuthority1);\\r\\n        payable(authorities[2]).transfer(address(this).balance);\\r\\n\\r\\n        NOUNS.transferFrom(msg.sender, address(this), tokenId);\\r\\n        lockedNFTs[tokenId] = true;\\r\\n\\r\\n        emit NFTLocked(tokenId, msg.sender);\\r\\n    }\\r\\n\\r\\n    /// @notice Unlocks an NFT from the bridge and transfers it to the recipient\\r\\n    /// @dev Requires full validation from all authorities\\r\\n    /// @param tokenId The token ID of the NFT\\r\\n    /// @param recipient The address to receive the unlocked NTP\\r\\n    function bridgeReceive(uint256 tokenId, address recipient) public {\\r\\n        require(isAuthority(msg.sender), \\\"Not an authority\\\");\\r\\n        require(lockedNFTs[tokenId], \\\"NFT not locked.\\\");\\r\\n        require(validated[tokenId][0] != address(0) && validated[tokenId][1] != address(0) && validated[tokenId][2] != address(0), \\\"NFT not fully validated.\\\");\\r\\n\\r\\n        NOUNS.transferFrom(address(this), recipient, tokenId);\\r\\n        delete lockedNFTs[tokenId];\\r\\n        delete validated[tokenId];\\r\\n\\r\\n        emit NFTUnlocked(tokenId, recipient);\\r\\n    }\\r\\n\\r\\n    /// @notice Validates an NFT for bridging by authorized authorities\\r\\n    /// @dev Records the validator if they have not already validated the token\\r\\n    /// @param tokenId The token ID of the NFT to validate\\r\\n    function validate(uint256 tokenId, address receiver) public {\\r\\n        require(isAuthority(msg.sender), \\\"Not an authority\\\");\\r\\n        require(!hasValidated(tokenId, msg.sender), \\\"Already validated this token\\\");\\r\\n\\r\\n        for (uint i = 0; i < validated[tokenId].length; i++) {\\r\\n            if (validated[tokenId][i] == address(0)) {\\r\\n                validated[tokenId][i] = msg.sender;\\r\\n                emit Validated(tokenId, receiver, msg.sender);\\r\\n                return;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice Checks if a given address has already validated a specific token\\r\\n    /// @param tokenId The token ID to check\\r\\n    /// @param validator The address to check\\r\\n    /// @return bool Whether the address has already validated the token\\r\\n    function hasValidated(uint256 tokenId, address validator) internal view returns (bool) {\\r\\n        for (uint i = 0; i < validated[tokenId].length; i++) {\\r\\n            if (validated[tokenId][i] == validator) {\\r\\n                return true;\\r\\n            }\\r\\n        }\\r\\n        return false;\\r\\n    }\\r\\n\\r\\n    /// @notice Checks if an address is an authorized authority\\r\\n    /// @param _address The address to check\\r\\n    /// @return bool Whether the address is an authority\\r\\n    function isAuthority(address _address) public view returns (bool) {\\r\\n        for (uint i = 0; i < authorities.length; i++) {\\r\\n            if (authorities[i] == _address) {\\r\\n                return true;\\r\\n            }\\r\\n        }\\r\\n        return false;\\r\\n    }\\r\\n\\r\\n    /// @notice Sets the bridge fee and requires a validation step before implementation\\r\\n    /// @param fee The new bridge fee to set\\r\\n    function feeMod(uint256 fee) public nonReentrant{\\r\\n        require(isAuthority(msg.sender), \\\"Not authorized\\\");\\r\\n        require(feeModValidated == address(0) || feeModValidated == msg.sender, \\\"Operation already initiated\\\");\\r\\n        if (feeModValidated == address(0)) {\\r\\n            feeModValidated = msg.sender;\\r\\n        } else {\\r\\n            BRIDGE_FEE = fee;\\r\\n            feeModValidated = address(0);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice Modifies the authority list after a two-step validation process\\r\\n    /// @param index The index in the authority array to modify\\r\\n    /// @param _address The new authority address to set\\r\\n    function authorityMod(uint256 index, address _address) public nonReentrant{\\r\\n        require(isAuthority(msg.sender), \\\"Not authorized\\\");\\r\\n        require(authorityModValidated == address(0) || authorityModValidated == msg.sender, \\\"Operation already initiated\\\");\\r\\n\\r\\n        if (authorityModValidated == address(0)) {\\r\\n            authorityModValidated = msg.sender;\\r\\n        } else {\\r\\n            require(index < authorities.length, \\\"Invalid index\\\");\\r\\n            authorities[index] = _address;\\r\\n            authorityModValidated = address(0);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice Retrieves the full list of authority addresses\\r\\n    /// @return An array of 3 addresses that are authorized\\r\\n    function getAuthorities() public view returns (address[3] memory) {\\r\\n        return authorities;\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or\\n     *   {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the address zero.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"NFTLocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"NFTUnlocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"}],\"name\":\"Validated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BRIDGE_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NOUNS\",\"outputs\":[{\"internalType\":\"contract IERC721\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"authorities\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"authorityMod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"authorityModValidated\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"bridgeOut\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"bridgeReceive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"feeMod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeModValidated\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAuthorities\",\"outputs\":[{\"internalType\":\"address[3]\",\"name\":\"\",\"type\":\"address[3]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"isAuthority\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lockedNFTs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nounsAddy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"validate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"validated\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "NOUNSBridgeNative", "CompilerVersion": "v0.8.26+commit.8a97fa7a", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}