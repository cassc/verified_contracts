{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n// <-/-/-/-/-/->->->->->->->->\r\ninterface IERC20 {\r\n    function balanceOf(address account) external view returns (uint);\r\n    function transfer(address recipient, uint amount) external returns (bool);\r\n}\r\n// <-/-/-/-/-/->->->->->->->->\r\ninterface IUniswapV2Router02 {\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n// <-/-/-/-/-/->->->->->->->->\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n// <-/-/-/-/-/->->->->->->->->\r\ninterface ISushiSwapRouter {\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n// <-/-/-/-/-/->->->->->->->->\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n// <-/-/-/-/-/->->->->->->->->\r\ninterface ILendingPool {\r\n    function flashLoan(\r\n        address receiverAddress,\r\n        address[] calldata assets,\r\n        uint256[] calldata amounts,\r\n        uint256[] calldata modes,\r\n        address onBehalfOf,\r\n        bytes calldata params,\r\n        uint16 referralCode\r\n    ) external;\r\n// <-/-/-/-/-/->->->->->->->->\r\n    function getReserveData(address asset) external view returns (uint256 availableLiquidity, uint256 totalBorrows, uint256 totalReserve);\r\n}\r\n// <-/-/-/-/-/->->->->->->->->\r\ncontract FlashLoanArbitrage {\r\n    address public constant uniswapRouter = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\r\n    address public constant sushiSwapRouter = 0xd9e1cE17f2641f24aE83637ab66a2cca9C378B9F;\r\n    address public constant lendingPoolAddress = 0x7d2768dE32b0b80b7a3454c06BdAc94A69DDc7A9;\r\n// <-/-/-/-/-/->->->->->->->->\r\n    IUniswapV2Router02 public uniswap;\r\n    ISushiSwapRouter public sushiSwap;\r\n    ILendingPool public lendingPool;\r\n// <-/-/-/-/-/->->->->->->->->\r\n    event ArbitrageExecuted(address indexed tokenIn, address indexed tokenOut, uint amountIn, uint profit);\r\n// <-/-/-/-/-/->->->->->->->->\r\n    constructor() {\r\n        uniswap = IUniswapV2Router02(uniswapRouter);\r\n        sushiSwap = ISushiSwapRouter(sushiSwapRouter);\r\n        lendingPool = ILendingPool(lendingPoolAddress);\r\n    }\r\n// <-/-/-/-/-/->->->->->->->->\r\n    function findArbitrageOpportunity(address tokenIn, address tokenOut, uint amount) external view returns (bool, uint) {\r\n      \r\n        uint[] memory amountsOutUniswap = uniswap.getAmountsOut(amount, getPathForUniswap(tokenIn, tokenOut));\r\n        uint amountOutMinUniswap = amountsOutUniswap[amountsOutUniswap.length - 1];\r\n        uint profitUniswap = amountOutMinUniswap - amount;\r\n// <-/-/-/-/-/->->->->->->->->\r\n// <-/-/-/-/-/->->->->->->->->       \r\n        uint[] memory amountsOutSushi = sushiSwap.getAmountsOut(amount, getPathForSushiSwap(tokenIn, tokenOut));\r\n        uint amountOutMinSushi = amountsOutSushi[amountsOutSushi.length - 1];\r\n        uint profitSushi = amountOutMinSushi - amount;\r\n// <-/-/-/-/-/->->->->->->->->\r\n        if (profitUniswap > 0.05 ether || profitSushi > 0.05 ether) {\r\n            uint totalProfit = profitUniswap + profitSushi;\r\n            return (true, totalProfit);\r\n        } else {\r\n            return (false, 0);\r\n        }\r\n    }\r\n// <-/-/-/-/-/->->->->->->->->\r\n    function getTotalBorrowableAmount(address token) external view returns (uint) {\r\n        (uint256 availableLiquidity, , ) = lendingPool.getReserveData(token);\r\n        return availableLiquidity;\r\n    }\r\n// <-/-/-/-/-/->->->->->->->->\r\n    function executeArbitrage(address tokenIn, address tokenOut, uint amount) external {\r\n        address[] memory assets = new address[](1);\r\n        assets[0] = tokenIn;\r\n// <-/-/-/-/-/->->->->->->->->\r\n        uint256[] memory amountsToLoan = new uint256[](1);\r\n        amountsToLoan[0] = amount;\r\n// <-/-/-/-/-/->->->->->->->->\r\n        bytes memory params = abi.encode(tokenIn, tokenOut, amount);\r\n// <-/-/-/-/-/->->->->->->->->\r\n        lendingPool.flashLoan(\r\n            address(this),\r\n            assets,\r\n            amountsToLoan,\r\n            new uint256[](assets.length),\r\n            address(this),\r\n            params,\r\n            0 \r\n        );\r\n    }\r\n// <-/-/-/-/-/->->->->->->->->\r\n    function executeOperation(\r\n        address[] calldata,\r\n        uint256[] calldata amounts,\r\n        uint256[] calldata premiums,\r\n        address initiator,\r\n        bytes calldata params\r\n    ) external {\r\n        require(initiator == address(this), \"Invalid initiator\");\r\n// <-/-/-/-/-/->->->->->->->->\r\n        address tokenIn;\r\n        address tokenOut;\r\n        uint amount;\r\n// <-/-/-/-/-/->->->->->->->->\r\n// <-/-/-/-/-/->->->->->->->-> \r\n        (tokenIn, tokenOut, amount) = abi.decode(params, (address, address, uint));\r\n        uint totalDebt = amounts[0] + premiums[0];\r\n\r\n        uint[] memory amountsOut = uniswap.getAmountsOut(amount, getPathForUniswap(tokenIn, tokenOut));\r\n        uint amountOutMin = amountsOut[amountsOut.length - 1];\r\n        uniswap.swapExactTokensForTokens(\r\n            amount,\r\n            amountOutMin,\r\n            getPathForUniswap(tokenIn, tokenOut),\r\n            address(this),\r\n            block.timestamp + 120 \r\n        );\r\n// <-/-/-/-/-/->->->->->->->->\r\n        uint[] memory sushiAmountsOut = sushiSwap.getAmountsOut(amount, getPathForSushiSwap(tokenOut, tokenIn));\r\n        uint amountOutMinSushi = sushiAmountsOut[sushiAmountsOut.length - 1];\r\n        sushiSwap.swapExactTokensForTokens(\r\n            IERC20(tokenOut).balanceOf(address(this)),\r\n            amountOutMinSushi,\r\n            getPathForSushiSwap(tokenOut, tokenIn),\r\n            address(this),\r\n            block.timestamp + 120 \r\n        );\r\n\r\n        uint profit = IERC20(tokenOut).balanceOf(address(this));\r\n\r\n        IERC20(tokenOut).transfer(msg.sender, profit);\r\n\r\n        IERC20(tokenIn).transfer(lendingPoolAddress, totalDebt);\r\n\r\n        emit ArbitrageExecuted(tokenIn, tokenOut, amount, profit);\r\n    }\r\n// <-/-/-/-/-/->->->->->->->->\r\n    function getPathForUniswap(address tokenIn, address tokenOut) private pure returns (address[] memory) {\r\n        address[] memory path = new address[](2);\r\n        path[0] = tokenIn;\r\n        path[1] = tokenOut;\r\n        return path;\r\n    }\r\n// <-/-/-/-/-/->->->->->->->->\r\n    function getPathForSushiSwap(address tokenIn, address tokenOut) private pure returns (address[] memory) {\r\n        address[] memory path = new address[](2);\r\n        path[0] = tokenIn;\r\n        path[1] = tokenOut;\r\n        return path;\r\n    }\r\n// <-/-/-/-/-/->->->->->->->->\r\n    receive() external payable {}\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"profit\",\"type\":\"uint256\"}],\"name\":\"ArbitrageExecuted\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"executeArbitrage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"premiums\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"initiator\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"params\",\"type\":\"bytes\"}],\"name\":\"executeOperation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"findArbitrageOpportunity\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getTotalBorrowableAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lendingPool\",\"outputs\":[{\"internalType\":\"contract ILendingPool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lendingPoolAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sushiSwap\",\"outputs\":[{\"internalType\":\"contract ISushiSwapRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sushiSwapRouter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswap\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapRouter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "FlashLoanArbitrage", "CompilerVersion": "v0.8.26+commit.8a97fa7a", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://f326d8f553676e544a20d27329c84f0c2393482f0cefac7ef7232811b312a473"}