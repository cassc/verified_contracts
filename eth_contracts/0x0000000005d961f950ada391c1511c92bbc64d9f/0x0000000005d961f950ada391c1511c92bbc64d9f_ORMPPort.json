{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"src/ports/ORMPPort.sol\": {\r\n      \"content\": \"// This file is part of Darwinia.\\n// Copyright (C) 2018-2023 Darwinia Network\\n// SPDX-License-Identifier: GPL-3.0\\n//\\n// Darwinia is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n//\\n// Darwinia is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\\n// GNU General Public License for more details.\\n//\\n// You should have received a copy of the GNU General Public License\\n// along with Darwinia. If not, see <https://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.8.17;\\n\\nimport \\\"./base/BaseMessagePort.sol\\\";\\nimport \\\"./base/PortLookup.sol\\\";\\nimport \\\"ORMP/src/interfaces/IORMP.sol\\\";\\nimport \\\"ORMP/src/user/Application.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable2Step.sol\\\";\\n\\ncontract ORMPPort is Ownable2Step, Application, BaseMessagePort, PortLookup {\\n    constructor(address dao, address ormp, string memory name) Application(ormp) BaseMessagePort(name) {\\n        _transferOwnership(dao);\\n    }\\n\\n    function setURI(string calldata uri) external onlyOwner {\\n        _setURI(uri);\\n    }\\n\\n    function setAppConfig(address oracle, address relayer) external onlyOwner {\\n        _setAppConfig(oracle, relayer);\\n    }\\n\\n    function setToPort(uint256 _toChainId, address _toPortAddress) external onlyOwner {\\n        _setToPort(_toChainId, _toPortAddress);\\n    }\\n\\n    function setFromPort(uint256 _fromChainId, address _fromPortAddress) external onlyOwner {\\n        _setFromPort(_fromChainId, _fromPortAddress);\\n    }\\n\\n    function _send(address fromDapp, uint256 toChainId, address toDapp, bytes calldata message, bytes calldata params)\\n        internal\\n        override\\n    {\\n        (uint256 gasLimit, address refund, bytes memory ormpParams) = abi.decode(params, (uint256, address, bytes));\\n        bytes memory encoded = abi.encodeWithSelector(ORMPPort.recv.selector, fromDapp, toDapp, message);\\n        IORMP(TRUSTED_ORMP).send{value: msg.value}(\\n            toChainId, _checkedToPort(toChainId), gasLimit, encoded, refund, ormpParams\\n        );\\n    }\\n\\n    function recv(address fromDapp, address toDapp, bytes calldata message) external payable onlyORMP {\\n        uint256 fromChainId = _fromChainId();\\n        require(_xmsgSender() == _checkedFromPort(fromChainId), \\\"!auth\\\");\\n        _recv(fromChainId, fromDapp, toDapp, message);\\n    }\\n\\n    function fee(uint256 toChainId, address toDapp, bytes calldata message, bytes calldata params)\\n        external\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        (uint256 gasLimit,, bytes memory ormpParams) = abi.decode(params, (uint256, address, bytes));\\n        bytes memory encoded = abi.encodeWithSelector(ORMPPort.recv.selector, msg.sender, toDapp, message);\\n        return IORMP(TRUSTED_ORMP).fee(toChainId, address(this), gasLimit, encoded, ormpParams);\\n    }\\n}\\n\"\r\n    },\r\n    \"src/ports/base/BaseMessagePort.sol\": {\r\n      \"content\": \"// This file is part of Darwinia.\\n// Copyright (C) 2018-2023 Darwinia Network\\n// SPDX-License-Identifier: GPL-3.0\\n//\\n// Darwinia is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n//\\n// Darwinia is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\\n// GNU General Public License for more details.\\n//\\n// You should have received a copy of the GNU General Public License\\n// along with Darwinia. If not, see <https://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/IMessagePort.sol\\\";\\nimport \\\"./PortMetadata.sol\\\";\\n\\nabstract contract BaseMessagePort is IMessagePort, PortMetadata {\\n    constructor(string memory name) PortMetadata(name) {}\\n\\n    function LOCAL_CHAINID() public view returns (uint256) {\\n        return block.chainid;\\n    }\\n\\n    /// @dev Send a cross-chain message over the MessagePort.\\n    ///      Port developer should implement this, then it will be called by `send`.\\n    /// @param fromDapp The real sender account who send the message.\\n    /// @param toChainId The message destination chain id. <https://eips.ethereum.org/EIPS/eip-155>\\n    /// @param toDapp The user application contract address which receive the message.\\n    /// @param message The calldata which encoded by ABI Encoding.\\n    /// @param params Extend parameters to adapt to different message protocols.\\n    function _send(address fromDapp, uint256 toChainId, address toDapp, bytes calldata message, bytes calldata params)\\n        internal\\n        virtual;\\n\\n    function send(uint256 toChainId, address toDapp, bytes calldata message, bytes calldata params) public payable {\\n        _send(msg.sender, toChainId, toDapp, message, params);\\n    }\\n\\n    /// @dev Make toDapp accept messages.\\n    ///      This should be called by message port when a message is received.\\n    /// @param fromChainId The source chainId, standard evm chainId.\\n    /// @param fromDapp The message sender in source chain.\\n    /// @param toDapp The message receiver in dest chain.\\n    /// @param message The message body.\\n    function _recv(uint256 fromChainId, address fromDapp, address toDapp, bytes memory message)\\n        internal\\n        returns (bytes memory)\\n    {\\n        (bool success, bytes memory returndata) =\\n            toDapp.call{value: msg.value}(abi.encodePacked(message, fromChainId, fromDapp));\\n        if (success) {\\n            return returndata;\\n        } else {\\n            revert MessageFailure(returndata);\\n        }\\n    }\\n\\n    function fee(uint256, address, bytes calldata, bytes calldata) external view virtual returns (uint256) {\\n        revert(\\\"Unimplemented!\\\");\\n    }\\n}\\n\"\r\n    },\r\n    \"src/ports/base/PortLookup.sol\": {\r\n      \"content\": \"// This file is part of Darwinia.\\n// Copyright (C) 2018-2023 Darwinia Network\\n// SPDX-License-Identifier: GPL-3.0\\n//\\n// Darwinia is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n//\\n// Darwinia is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\\n// GNU General Public License for more details.\\n//\\n// You should have received a copy of the GNU General Public License\\n// along with Darwinia. If not, see <https://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./FromPortLookup.sol\\\";\\nimport \\\"./ToPortLookup.sol\\\";\\n\\nabstract contract PortLookup is FromPortLookup, ToPortLookup {}\\n\"\r\n    },\r\n    \"lib/ORMP/src/interfaces/IORMP.sol\": {\r\n      \"content\": \"// This file is part of Darwinia.\\n// Copyright (C) 2018-2023 Darwinia Network\\n// SPDX-License-Identifier: GPL-3.0\\n//\\n// Darwinia is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n//\\n// Darwinia is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\\n// GNU General Public License for more details.\\n//\\n// You should have received a copy of the GNU General Public License\\n// along with Darwinia. If not, see <https://www.gnu.org/licenses/>.\\n\\npragma solidity 0.8.17;\\n\\nimport \\\"../Common.sol\\\";\\n\\ninterface IORMP {\\n    /// @dev Send a cross-chain message over the endpoint.\\n    /// @notice follow https://eips.ethereum.org/EIPS/eip-5750\\n    /// @param toChainId The Message destination chain id.\\n    /// @param to User application contract address which receive the message.\\n    /// @param gasLimit Gas limit for destination user application used.\\n    /// @param encoded The calldata which encoded by ABI Encoding.\\n    /// @param refund Return extra fee to refund address.\\n    /// @param params General extensibility for relayer to custom functionality.\\n    /// @return Return the hash of the message as message id.\\n    function send(\\n        uint256 toChainId,\\n        address to,\\n        uint256 gasLimit,\\n        bytes calldata encoded,\\n        address refund,\\n        bytes calldata params\\n    ) external payable returns (bytes32);\\n\\n    /// @notice Get a quote in source native gas, for the amount that send() requires to pay for message delivery.\\n    /// @param toChainId The Message destination chain id.\\n    //  @param ua User application contract address which send the message.\\n    /// @param gasLimit Gas limit for destination user application used.\\n    /// @param encoded The calldata which encoded by ABI Encoding.\\n    /// @param params General extensibility for relayer to custom functionality.\\n    function fee(uint256 toChainId, address ua, uint256 gasLimit, bytes calldata encoded, bytes calldata params)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /// @dev Recv verified message and dispatch to destination user application address.\\n    /// @param message Verified receive message info.\\n    /// @param proof Message proof of this message.\\n    /// @return dispatchResult Result of the message dispatch.\\n    function recv(Message calldata message, bytes calldata proof) external returns (bool dispatchResult);\\n\\n    function prove() external view returns (bytes32[32] memory);\\n\\n    /// @dev Fetch user application config.\\n    /// @notice If user application has not configured, then the default config is used.\\n    /// @param ua User application contract address.\\n    /// @return user application config.\\n    function getAppConfig(address ua) external view returns (UC memory);\\n\\n    /// @notice Set user application config.\\n    /// @param oracle Oracle which user application choose.\\n    /// @param relayer Relayer which user application choose.\\n    function setAppConfig(address oracle, address relayer) external;\\n\\n    function defaultUC() external view returns (UC memory);\\n}\\n\"\r\n    },\r\n    \"lib/ORMP/src/user/Application.sol\": {\r\n      \"content\": \"// This file is part of Darwinia.\\n// Copyright (C) 2018-2023 Darwinia Network\\n// SPDX-License-Identifier: GPL-3.0\\n//\\n// Darwinia is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n//\\n// Darwinia is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\\n// GNU General Public License for more details.\\n//\\n// You should have received a copy of the GNU General Public License\\n// along with Darwinia. If not, see <https://www.gnu.org/licenses/>.\\n\\npragma solidity 0.8.17;\\n\\nimport \\\"../Common.sol\\\";\\nimport \\\"../interfaces/IORMP.sol\\\";\\n\\n// https://eips.ethereum.org/EIPS/eip-5164\\nabstract contract Application {\\n    address public immutable TRUSTED_ORMP;\\n\\n    constructor(address ormp) {\\n        TRUSTED_ORMP = ormp;\\n    }\\n\\n    function _setAppConfig(address oracle, address relayer) internal virtual {\\n        IORMP(TRUSTED_ORMP).setAppConfig(oracle, relayer);\\n    }\\n\\n    modifier onlyORMP() {\\n        require(TRUSTED_ORMP == msg.sender, \\\"!ormp\\\");\\n        _;\\n    }\\n\\n    function _messageId() internal pure returns (bytes32 _msgDataMessageId) {\\n        require(msg.data.length >= 84, \\\"!messageId\\\");\\n        assembly {\\n            _msgDataMessageId := calldataload(sub(calldatasize(), 84))\\n        }\\n    }\\n\\n    function _fromChainId() internal pure returns (uint256 _msgDataFromChainId) {\\n        require(msg.data.length >= 52, \\\"!fromChainId\\\");\\n        assembly {\\n            _msgDataFromChainId := calldataload(sub(calldatasize(), 52))\\n        }\\n    }\\n\\n    function _xmsgSender() internal pure returns (address payable _from) {\\n        require(msg.data.length >= 20, \\\"!xmsgSender\\\");\\n        assembly {\\n            _from := shr(96, calldataload(sub(calldatasize(), 20)))\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/access/Ownable2Step.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable2Step.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Ownable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership} and {acceptOwnership}.\\n *\\n * This module is used through inheritance. It will make available all functions\\n * from parent (Ownable).\\n */\\nabstract contract Ownable2Step is Ownable {\\n    address private _pendingOwner;\\n\\n    event OwnershipTransferStarted(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Returns the address of the pending owner.\\n     */\\n    function pendingOwner() public view virtual returns (address) {\\n        return _pendingOwner;\\n    }\\n\\n    /**\\n     * @dev Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one.\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual override onlyOwner {\\n        _pendingOwner = newOwner;\\n        emit OwnershipTransferStarted(owner(), newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`) and deletes any pending owner.\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual override {\\n        delete _pendingOwner;\\n        super._transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev The new owner accepts the ownership transfer.\\n     */\\n    function acceptOwnership() public virtual {\\n        address sender = _msgSender();\\n        require(pendingOwner() == sender, \\\"Ownable2Step: caller is not the new owner\\\");\\n        _transferOwnership(sender);\\n    }\\n}\\n\"\r\n    },\r\n    \"src/interfaces/IMessagePort.sol\": {\r\n      \"content\": \"// This file is part of Darwinia.\\n// Copyright (C) 2018-2023 Darwinia Network\\n// SPDX-License-Identifier: GPL-3.0\\n//\\n// Darwinia is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n//\\n// Darwinia is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\\n// GNU General Public License for more details.\\n//\\n// You should have received a copy of the GNU General Public License\\n// along with Darwinia. If not, see <https://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.8.0;\\n\\ninterface IMessagePort {\\n    error MessageFailure(bytes errorData);\\n\\n    /// @dev Send a cross-chain message over the MessagePort.\\n    /// @notice Send a cross-chain message over the MessagePort.\\n    /// @param toChainId The message destination chain id. <https://eips.ethereum.org/EIPS/eip-155>\\n    /// @param toDapp The user application contract address which receive the message.\\n    /// @param message The calldata which encoded by ABI Encoding.\\n    /// @param params Extend parameters to adapt to different message protocols.\\n    function send(uint256 toChainId, address toDapp, bytes calldata message, bytes calldata params) external payable;\\n\\n    /// @notice Get a quote in source native gas, for the amount that send() requires to pay for message delivery.\\n    ///         It should be noted that not all ports will implement this interface.\\n    /// @dev If the messaging protocol does not support on-chain fetch fee, then revert with \\\"Unimplemented!\\\".\\n    /// @param toChainId The message destination chain id. <https://eips.ethereum.org/EIPS/eip-155>\\n    /// @param toDapp The user application contract address which receive the message.\\n    /// @param message The calldata which encoded by ABI Encoding.\\n    /// @param params Extend parameters to adapt to different message protocols.\\n    function fee(uint256 toChainId, address toDapp, bytes calldata message, bytes calldata params)\\n        external\\n        view\\n        returns (uint256);\\n}\\n\"\r\n    },\r\n    \"src/ports/base/PortMetadata.sol\": {\r\n      \"content\": \"// This file is part of Darwinia.\\n// Copyright (C) 2018-2023 Darwinia Network\\n// SPDX-License-Identifier: GPL-3.0\\n//\\n// Darwinia is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n//\\n// Darwinia is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\\n// GNU General Public License for more details.\\n//\\n// You should have received a copy of the GNU General Public License\\n// along with Darwinia. If not, see <https://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/IPortMetadata.sol\\\";\\n\\ncontract PortMetadata is IPortMetadata {\\n    string internal _name;\\n    string internal _uri;\\n\\n    constructor(string memory name_) {\\n        _name = name_;\\n    }\\n\\n    function _setURI(string memory uri_) internal virtual {\\n        _uri = uri_;\\n        emit URI(uri_);\\n    }\\n\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    function code() public view virtual returns (bytes4) {\\n        return bytes4(keccak256(bytes(_name)));\\n    }\\n\\n    function uri() public view virtual returns (string memory) {\\n        return _uri;\\n    }\\n}\\n\"\r\n    },\r\n    \"src/ports/base/FromPortLookup.sol\": {\r\n      \"content\": \"// This file is part of Darwinia.\\n// Copyright (C) 2018-2023 Darwinia Network\\n// SPDX-License-Identifier: GPL-3.0\\n//\\n// Darwinia is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n//\\n// Darwinia is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\\n// GNU General Public License for more details.\\n//\\n// You should have received a copy of the GNU General Public License\\n// along with Darwinia. If not, see <https://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.8.0;\\n\\nabstract contract FromPortLookup {\\n    event SetFromPort(uint256 fromChainId, address fromPort);\\n\\n    // fromChainId => fromPortAddress\\n    mapping(uint256 => address) public fromPortLookup;\\n\\n    function _setFromPort(uint256 fromChainId, address fromPort) internal virtual {\\n        fromPortLookup[fromChainId] = fromPort;\\n        emit SetFromPort(fromChainId, fromPort);\\n    }\\n\\n    function _fromPort(uint256 fromChainId) internal view returns (address) {\\n        return fromPortLookup[fromChainId];\\n    }\\n\\n    function _checkedFromPort(uint256 fromChainId) internal view returns (address l) {\\n        l = fromPortLookup[fromChainId];\\n        require(l != address(0), \\\"!fromPort\\\");\\n    }\\n}\\n\"\r\n    },\r\n    \"src/ports/base/ToPortLookup.sol\": {\r\n      \"content\": \"// This file is part of Darwinia.\\n// Copyright (C) 2018-2023 Darwinia Network\\n// SPDX-License-Identifier: GPL-3.0\\n//\\n// Darwinia is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n//\\n// Darwinia is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\\n// GNU General Public License for more details.\\n//\\n// You should have received a copy of the GNU General Public License\\n// along with Darwinia. If not, see <https://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.8.0;\\n\\nabstract contract ToPortLookup {\\n    event SetToPort(uint256 toChainId, address toPort);\\n\\n    // toChainId => toPortAddress\\n    mapping(uint256 => address) public toPortLookup;\\n\\n    function _setToPort(uint256 toChainId, address toPort) internal virtual {\\n        toPortLookup[toChainId] = toPort;\\n        emit SetToPort(toChainId, toPort);\\n    }\\n\\n    function _toPort(uint256 toChainId) internal view returns (address) {\\n        return toPortLookup[toChainId];\\n    }\\n\\n    function _checkedToPort(uint256 toChainId) internal view returns (address l) {\\n        l = toPortLookup[toChainId];\\n        require(l != address(0), \\\"!toPort\\\");\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/ORMP/src/Common.sol\": {\r\n      \"content\": \"// This file is part of Darwinia.\\n// Copyright (C) 2018-2023 Darwinia Network\\n// SPDX-License-Identifier: GPL-3.0\\n//\\n// Darwinia is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n//\\n// Darwinia is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\\n// GNU General Public License for more details.\\n//\\n// You should have received a copy of the GNU General Public License\\n// along with Darwinia. If not, see <https://www.gnu.org/licenses/>.\\n\\npragma solidity 0.8.17;\\n\\n/// @dev The block of control information and data for comminicate\\n/// between user applications. Messages are the exchange medium\\n/// used by channels to send and receive data through cross-chain networks.\\n/// A message is sent from a source chain to a destination chain.\\n/// @param index The leaf index lives in channel's incremental mekle tree.\\n/// @param fromChainId The message source chain id.\\n/// @param from User application contract address which send the message.\\n/// @param toChainId The message destination chain id.\\n/// @param to User application contract address which receive the message.\\n/// @param gasLimit Gas limit for destination UA used.\\n/// @param encoded The calldata which encoded by ABI Encoding.\\nstruct Message {\\n    address channel;\\n    uint256 index;\\n    uint256 fromChainId;\\n    address from;\\n    uint256 toChainId;\\n    address to;\\n    uint256 gasLimit;\\n    bytes encoded; /*(abi.encodePacked(SELECTOR, PARAMS))*/\\n}\\n\\n/// @dev User application custom configuration.\\n/// @param oracle Oracle contract address.\\n/// @param relayer Relayer contract address.\\nstruct UC {\\n    address oracle;\\n    address relayer;\\n}\\n\\n/// @dev Hash of the message.\\nfunction hash(Message memory message) pure returns (bytes32) {\\n    return keccak256(abi.encode(message));\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"src/interfaces/IPortMetadata.sol\": {\r\n      \"content\": \"// This file is part of Darwinia.\\n// Copyright (C) 2018-2023 Darwinia Network\\n// SPDX-License-Identifier: GPL-3.0\\n//\\n// Darwinia is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n//\\n// Darwinia is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\\n// GNU General Public License for more details.\\n//\\n// You should have received a copy of the GNU General Public License\\n// along with Darwinia. If not, see <https://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.8.0;\\n\\ninterface IPortMetadata {\\n    event URI(string uri);\\n\\n    /// @notice Get the port name, it's globally unique and immutable.\\n    /// @return The MessagePort name.\\n    function name() external view returns (string memory);\\n\\n    /// @return The port metadata uri.\\n    function uri() external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [\r\n      \"@axelar-network/axelar-gmp-sdk-solidity/=lib/axelar-gmp-sdk-solidity/\",\r\n      \"@layerzerolabs/solidity-examples/=lib/solidity-examples/\",\r\n      \"@openzeppelin/=lib/openzeppelin-contracts/\",\r\n      \"@darwinia/contracts-periphery/=lib/darwinia-messages-sol/contracts/periphery/\",\r\n      \"sgn-v2-contracts/=lib/sgn-v2-contracts/\",\r\n      \"ds-test/=lib/forge-std/lib/ds-test/src/\",\r\n      \"forge-std/=lib/forge-std/src/\",\r\n      \"ORMP/=lib/ORMP/\",\r\n      \"create3-deploy/=lib/create3-deploy/\",\r\n      \"solmate/=lib/solmate/src/\"\r\n    ],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 999999\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": false,\r\n      \"bytecodeHash\": \"ipfs\"\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dao\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"ormp\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"errorData\",\"type\":\"bytes\"}],\"name\":\"MessageFailure\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fromChainId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"fromPort\",\"type\":\"address\"}],\"name\":\"SetFromPort\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"toChainId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"toPort\",\"type\":\"address\"}],\"name\":\"SetToPort\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"}],\"name\":\"URI\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"LOCAL_CHAINID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TRUSTED_ORMP\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"code\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"toChainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"toDapp\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"params\",\"type\":\"bytes\"}],\"name\":\"fee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"fromPortLookup\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromDapp\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"toDapp\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"}],\"name\":\"recv\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"toChainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"toDapp\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"params\",\"type\":\"bytes\"}],\"name\":\"send\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"relayer\",\"type\":\"address\"}],\"name\":\"setAppConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fromChainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_fromPortAddress\",\"type\":\"address\"}],\"name\":\"setFromPort\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_toChainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_toPortAddress\",\"type\":\"address\"}],\"name\":\"setToPort\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"}],\"name\":\"setURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"toPortLookup\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "ORMPPort", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "999999", "ConstructorArguments": "0000000000000000000000000f14341a7f464320319025540e8fe48ad0fe5aec00000000000000000000000000000000001523057a05d6293c1e5171ee33ee0a000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000044f524d5000000000000000000000000000000000000000000000000000000000", "EVMVersion": "london", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}