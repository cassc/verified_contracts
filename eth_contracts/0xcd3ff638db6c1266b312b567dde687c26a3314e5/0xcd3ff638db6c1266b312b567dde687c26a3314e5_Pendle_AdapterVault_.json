{"SourceCode": "#pragma version 0.3.10\r\n#pragma evm-version cancun\r\n\"\"\"\r\n@title Pendle AdapterVault Factory\r\n@license Copyright 2023, 2024 Biggest Lab Co Ltd, Benjamin Scherrey, Sajal Kayan, and Eike Caldeweyher\r\n@author BiggestLab (https://biggestlab.io) Benjamin Scherrey\r\n\"\"\"\r\nfrom vyper.interfaces import ERC20\r\nfrom vyper.interfaces import ERC4626\r\n\r\nowner: public(address)\r\nadapter_vault_blueprint: public(address)\r\npendle_adapter_blueprint: public(address)\r\nfunds_allocator_impl: public(address)\r\ngovernance_impl: public(address)\r\n\r\npendle_router: public(address)\r\npendle_router_static: public(address)\r\npendle_oracle: public(address)\r\n\r\nMAX_ADAPTERS : constant(uint256) = 5\r\n\r\nevent OwnerChanged:\r\n    new_owner: indexed(address)\r\n    old_owner: indexed(address)    \r\n\r\nevent PendleAdapterVaultDeployed:\r\n    adapter_vault: indexed(address)\r\n    asset: indexed(address)\r\n    pendle_market: address\r\n    adapter_vault_blueprint: address\r\n    pendle_adapter_blueprint: address\r\n    owner: address\r\n\r\nstruct AdapterStrategy:\r\n    adapter: address\r\n    ratio: uint256    \r\n\r\ninterface AdapterVault:\r\n    def set_strategy(Proposer: address, Strategies: AdapterStrategy[MAX_ADAPTERS], min_proposer_payout: uint256) -> bool: nonpayable\r\n    def replaceGovernanceContract(NewGovernance: address) -> bool: nonpayable\r\n    def replaceOwner(_new_owner: address) -> bool: nonpayable\r\n    def add_adapter(_adapter: address) -> bool: nonpayable\r\n\r\n@external\r\ndef __init__():\r\n    \"\"\"\r\n    @notice Constructor for 4626the factory contract.\r\n    \"\"\"\r\n    self.owner = msg.sender\r\n\r\n@external\r\n@nonpayable\r\ndef replace_owner(_new_owner: address) -> bool:\r\n    \"\"\"\r\n    @notice replace the current 4626 owner with a new one.\r\n    @param _new_owner address of the new contract owner\r\n    @return True, if contract owner was replaced, False otherwise\r\n    \"\"\"\r\n    assert msg.sender == self.owner, \"Only existing owner can replace the owner.\"\r\n    assert _new_owner != empty(address), \"Owner cannot be null address.\"\r\n\r\n    log OwnerChanged(_new_owner, self.owner)\r\n\r\n    self.owner = _new_owner\r\n    \r\n    return True\r\n\r\n#owner-only setters for storage\r\n\r\n@external\r\n@nonpayable\r\ndef update_blueprints(_adapter_vault_blueprint: address, _pendle_adapter_blueprint: address):\r\n    assert msg.sender == self.owner, \"Only owner can update contracts\"\r\n    self.adapter_vault_blueprint = _adapter_vault_blueprint\r\n    self.pendle_adapter_blueprint = _pendle_adapter_blueprint\r\n\r\n@external\r\n@nonpayable\r\ndef update_funds_allocator(_funds_allocator_impl: address):\r\n    assert msg.sender == self.owner, \"Only owner can update contracts\"\r\n    self.funds_allocator_impl = _funds_allocator_impl\r\n\r\n@external\r\n@nonpayable\r\ndef update_governance(_governance_impl: address):\r\n    assert msg.sender == self.owner, \"Only owner can update contracts\"\r\n    self.governance_impl = _governance_impl\r\n\r\n@external\r\n@nonpayable\r\ndef update_pendle_contracts(_pendle_router: address, _pendle_router_static: address, _pendle_oracle: address):\r\n    assert msg.sender == self.owner, \"Only owner can update contracts\"\r\n    self.pendle_router = _pendle_router\r\n    self.pendle_router_static = _pendle_router_static\r\n    self.pendle_oracle = _pendle_oracle\r\n\r\n\r\n@external\r\n@nonpayable\r\ndef deploy_pendle_vault(\r\n    _asset: address,\r\n    _pendle_market: address,\r\n    _name: String[64],\r\n    _symbol: String[32],\r\n    _decimals: uint8,\r\n    _max_slippage_percent: decimal,\r\n    _init_mint_amount: uint256\r\n    ) -> address:\r\n    \"\"\"\r\n    @notice deploy a new AdapterVault with single adapter pointing to the mentioned pendle market\r\n    @param _asset the vault will be denominated in.\r\n    @param _pendle_market the vault will invest in\r\n    @param _name of shares token\r\n    @param _symbol identifier of shares token\r\n    @param _decimals increment for division of shares token \r\n    @param _max_slippage_percent default maximum acceptable slippage for deposits/withdraws as a percentage\r\n    @param _init_mint_amount The amount asset to be deposited, and resulting shares burned.\r\n    \"\"\"\r\n    assert msg.sender == self.owner, \"Only owner may deploy a vault\"\r\n    assert _init_mint_amount > 0, \"Some amount shares must be burned\"\r\n\r\n    #more asserts to ensure required addresses have been populated\r\n    assert self.adapter_vault_blueprint != empty(address), \"adapter_vault_blueprint must be defined\"\r\n    assert self.pendle_adapter_blueprint != empty(address), \"pendle_adapter_blueprint must be defined\"\r\n    assert self.funds_allocator_impl != empty(address), \"funds_allocator_impl must be defined\"\r\n    assert self.governance_impl != empty(address), \"governance_impl must be defined\"\r\n    assert self.pendle_router != empty(address), \"pendle_router must be defined\"\r\n    assert self.pendle_router_static != empty(address), \"pendle_router_static must be defined\"\r\n    assert self.pendle_oracle != empty(address), \"pendle_oracle must be defined\"\r\n\r\n    #deploy pendle adapter using blueprint\r\n    adapter: address = create_from_blueprint(\r\n        self.pendle_adapter_blueprint,\r\n        _asset,\r\n        self.pendle_router,\r\n        self.pendle_router_static,\r\n        _pendle_market,\r\n        self.pendle_oracle,\r\n        code_offset=3\r\n    )\r\n    #deploy vault using blueprint\r\n    vault: address = create_from_blueprint(\r\n        self.adapter_vault_blueprint,\r\n        _name,\r\n        _symbol,\r\n        _decimals,\r\n        _asset,\r\n        self,\r\n        self.funds_allocator_impl,\r\n        _max_slippage_percent,\r\n        code_offset=3\r\n    )\r\n    AdapterVault(vault).add_adapter(adapter)\r\n    #initialize the vault with strategy.\r\n    strategy: AdapterStrategy[MAX_ADAPTERS] = empty(AdapterStrategy[MAX_ADAPTERS]) \r\n    strategy[0].adapter = adapter\r\n    strategy[0].ratio = 1\r\n    AdapterVault(vault).set_strategy(msg.sender, strategy, 0)\r\n    #mint some shares (take asset from owner)\r\n    ERC20(_asset).transferFrom(msg.sender, self, _init_mint_amount)\r\n    ERC20(_asset).approve(vault, _init_mint_amount)\r\n    #Because of rounding issues\r\n    ERC4626(vault).deposit(ERC20(_asset).balanceOf(self), self)\r\n    #burn resulting shares\r\n    ERC20(vault).transfer(empty(address), ERC20(vault).balanceOf(self))\r\n    #assign governance contract\r\n    AdapterVault(vault).replaceGovernanceContract(self.governance_impl)\r\n    #Transfer ownership of vault to owner\r\n    AdapterVault(vault).replaceOwner(self.owner)\r\n    #All done log it\r\n    log PendleAdapterVaultDeployed(\r\n        vault,\r\n        _asset,\r\n        _pendle_market,\r\n        self.adapter_vault_blueprint,\r\n        self.pendle_adapter_blueprint,\r\n        self.owner\r\n    )\r\n    return vault", "ABI": "[{\"name\":\"OwnerChanged\",\"inputs\":[{\"name\":\"new_owner\",\"type\":\"address\",\"indexed\":true},{\"name\":\"old_owner\",\"type\":\"address\",\"indexed\":true}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"PendleAdapterVaultDeployed\",\"inputs\":[{\"name\":\"adapter_vault\",\"type\":\"address\",\"indexed\":true},{\"name\":\"asset\",\"type\":\"address\",\"indexed\":true},{\"name\":\"pendle_market\",\"type\":\"address\",\"indexed\":false},{\"name\":\"adapter_vault_blueprint\",\"type\":\"address\",\"indexed\":false},{\"name\":\"pendle_adapter_blueprint\",\"type\":\"address\",\"indexed\":false},{\"name\":\"owner\",\"type\":\"address\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"stateMutability\":\"nonpayable\",\"type\":\"constructor\",\"inputs\":[],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"replace_owner\",\"inputs\":[{\"name\":\"_new_owner\",\"type\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"update_blueprints\",\"inputs\":[{\"name\":\"_adapter_vault_blueprint\",\"type\":\"address\"},{\"name\":\"_pendle_adapter_blueprint\",\"type\":\"address\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"update_funds_allocator\",\"inputs\":[{\"name\":\"_funds_allocator_impl\",\"type\":\"address\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"update_governance\",\"inputs\":[{\"name\":\"_governance_impl\",\"type\":\"address\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"update_pendle_contracts\",\"inputs\":[{\"name\":\"_pendle_router\",\"type\":\"address\"},{\"name\":\"_pendle_router_static\",\"type\":\"address\"},{\"name\":\"_pendle_oracle\",\"type\":\"address\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"deploy_pendle_vault\",\"inputs\":[{\"name\":\"_asset\",\"type\":\"address\"},{\"name\":\"_pendle_market\",\"type\":\"address\"},{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_symbol\",\"type\":\"string\"},{\"name\":\"_decimals\",\"type\":\"uint8\"},{\"name\":\"_max_slippage_percent\",\"type\":\"fixed168x10\"},{\"name\":\"_init_mint_amount\",\"type\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"owner\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"adapter_vault_blueprint\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"pendle_adapter_blueprint\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"funds_allocator_impl\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"governance_impl\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"pendle_router\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"pendle_router_static\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"pendle_oracle\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}]}]", "ContractName": "Pendle AdapterVault Factory", "CompilerVersion": "vyper:0.3.10", "OptimizationUsed": "0", "Runs": "0", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "BSL 1.1", "Proxy": "0", "Implementation": "", "SwarmSource": ""}