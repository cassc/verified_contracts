{"SourceCode": "/*\r\n                                   \r\nRBITS: A frictionless yield NFT/gaming token\r\n\r\nTG: https://t.me/rbitsportal\r\n\r\nX: https://twitter.com/RBitsOfficial\r\n\r\nWeb: https://rbits.xyz\r\n\r\ndev notes:\r\n- High Tax on launch (25%)\r\n- After setFees is called to set the new tax rate, it can never be set higher than 5%\r\n- No limits\r\n\r\n*/\r\n\r\n\r\npragma solidity ^0.8.18;\r\n// SPDX-License-Identifier: Unlicensed\r\n \r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return payable(msg.sender);\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n    address private _previousOwner;\r\n    \r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Not owner\");\r\n        _;\r\n    }\r\n\r\n     /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Renounced\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\r\n\r\n    function feeTo() external view returns (address);\r\n    function feeToSetter() external view returns (address);\r\n\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n    function allPairs(uint) external view returns (address pair);\r\n    function allPairsLength() external view returns (uint);\r\n\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n\r\n    function setFeeTo(address) external;\r\n    function setFeeToSetter(address) external;\r\n}\r\n\r\ninterface IUniswapV2Pair {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function name() external pure returns (string memory);\r\n    function symbol() external pure returns (string memory);\r\n    function decimals() external pure returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n    function nonces(address owner) external view returns (uint);\r\n\r\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n\r\n    event Mint(address indexed sender, uint amount0, uint amount1);\r\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\r\n    event Swap(\r\n        address indexed sender,\r\n        uint amount0In,\r\n        uint amount1In,\r\n        uint amount0Out,\r\n        uint amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\r\n    function factory() external view returns (address);\r\n    function token0() external view returns (address);\r\n    function token1() external view returns (address);\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n    function price0CumulativeLast() external view returns (uint);\r\n    function price1CumulativeLast() external view returns (uint);\r\n    function kLast() external view returns (uint);\r\n\r\n    function mint(address to) external returns (uint liquidity);\r\n    function burn(address to) external returns (uint amount0, uint amount1);\r\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\r\n    function skim(address to) external;\r\n    function sync() external;\r\n\r\n    function initialize(address, address) external;\r\n}\r\n\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapTokensForExactTokens(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n\r\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountETH);\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\ncontract Rabbits is Context, IERC20, Ownable {\r\n  \r\n    mapping (address => uint256) private _rOwned;\r\n    mapping (address => uint256) private _tOwned;\r\n    mapping (address => uint256) private _specialFees; // fee amount for special addresses\r\n    mapping( address => bool) private _hasSpecialFee; // addresses eligible for special fees\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n    mapping (address => bool) private _isExcludedFromReward;  // addresses excluded from reflection rewards\r\n    \r\n    address[] private _excludedFromReward; // addresses not eligible for reflection rewards\r\n\r\n    address payable public _platformFundAddress = payable(0xe941e3adA31bF3e6300eBcfeB8D12BA7AFE8EA2b);\r\n   \r\n    uint256 public numTokensToSell = 500000 * 10**6 * 10**9; // 500 billion\r\n    uint256 private constant MAX = ~uint256(0);\r\n    uint256 private constant _TTOTAL = 1000000000 * 10**6 * 10**9;  // 1 quadrillion\r\n    uint256 private constant WHALETHRESHOLD = 5000000 * 10**6 * 10**9; // 0.5 trillion\r\n    uint256 private constant MAXLIQUIFYAMOUNT = 10000000 * 10**6 * 10**9; // 1 trillion\r\n\r\n    uint256 private _rTotal = (MAX - (MAX % _TTOTAL));\r\n\r\n    string private constant NAME = \"Rabbits\";\r\n    string private constant SYMBOL = \"RBITS\";\r\n    uint8 private constant DECIMALS = 9;\r\n    \r\n    // initially, high taxes to seed project funds\r\n    uint256 public _taxFee = 0;                    // percentage that is distributed to all holders\r\n    uint256 private _prevTaxFee = _taxFee;\r\n    \r\n    uint256 public _liquidityFee = 0;              // percentage that is added to LP\r\n    uint256 private _prevLiquidityFee = _liquidityFee;\r\n\r\n    uint256 public _projectFee = 2500;             // percentage that is added to project fund\r\n    uint256 private _prevProjectFee = _projectFee;\r\n\r\n    uint256 public _totalLiqFee = 0;               // total fee to be liquified \r\n    uint256 private _prevTotalLiqFee = _totalLiqFee;\r\n\r\n    // target tax rate (5%)\r\n    // tax can be modified but new taxrate must be equal to or less than 5%\r\n    uint256 private constant TARGETFEE = 500;\r\n    bool private _transferTaxEnabled = false;\r\n    uint256 public _totalFee = 0;\r\n    \r\n    IUniswapV2Router02 public immutable uniswapV2Router;\r\n    address public immutable uniswapV2Pair;\r\n    \r\n    bool private inSwapAndLiquify;\r\n    \r\n    bool public swapAndLiquifyEnabled = false;\r\n    bool public swapAndLiquifyMaxAmountEnabled = true;\r\n\r\n    uint256 private _timeLock = 0;\r\n\r\n    event SetFee(address account, uint256 newFee, bool enabled);\r\n    event SetFees(uint256 newRewardFee, uint256 newLiquidityFee, uint256 newProjectFee, bool transferTax);\r\n    event SetPlatformFundAddress(address newAddress);\r\n    event ExcludeFromReward(address addr);\r\n    event IncludeInReward(address addr);\r\n    event SetSwapAndLiquifyMaxAmount(uint256 amount);\r\n    event SetSwapAndLiquifyEnabled(bool swapEnabled, bool maxAmountEnabled);\r\n    event RescueETH(uint256 amount, address addr);\r\n    event RescueERC20(uint256 amount, address addr);\r\n    event RemoveLiquidity(uint256 percentage);\r\n    event AddInitialLiquidity();\r\n    event OpenTrading();\r\n\r\n    modifier lockTheSwap {\r\n        inSwapAndLiquify = true;\r\n        _;\r\n        inSwapAndLiquify = false;\r\n    }\r\n    \r\n    constructor () {\r\n        _rOwned[_msgSender()] = _rTotal;\r\n        \r\n        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n        // ETH Mainnet\r\n\r\n        // Create a uniswap pair for this new token\r\n        uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory())\r\n            .createPair(address(this), _uniswapV2Router.WETH());\r\n\r\n        // set the rest of the contract variables\r\n        uniswapV2Router = _uniswapV2Router;\r\n       \r\n        //exclude owner, fund address and this contract from fee\r\n        _hasSpecialFee[ owner() ] = true;\r\n        _hasSpecialFee[ address(this) ] = true;\r\n        _hasSpecialFee[ _platformFundAddress ] = true;\r\n\r\n        //exclude pair from receiving reflection rewards\r\n        _isExcludedFromReward[ uniswapV2Pair ] = true;\r\n        \r\n        _totalLiqFee = _liquidityFee + _projectFee;\r\n        _prevTotalLiqFee = _totalLiqFee;\r\n\r\n        _timeLock = block.timestamp;\r\n\r\n        emit Transfer(address(0), _msgSender(), _TTOTAL);\r\n    }\r\n\r\n    function name() external pure returns (string memory) {\r\n        return NAME;\r\n    }\r\n\r\n    function symbol() external pure returns (string memory) {\r\n        return SYMBOL;\r\n    }\r\n\r\n    function decimals() external pure returns (uint8) {\r\n        return DECIMALS;\r\n    }\r\n\r\n    function totalSupply() external pure override returns (uint256) {\r\n        return _TTOTAL;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        if (_isExcludedFromReward[account]) return _tOwned[account];\r\n        return tokenFromReflection(_rOwned[account]);\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) external override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) external view override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) external override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()] - amount);\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue) external virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) external virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] - subtractedValue);\r\n        return true;\r\n    }\r\n\r\n    function isExcludedFromReward(address account) external view returns (bool) {\r\n        return _isExcludedFromReward[account];\r\n    }\r\n\r\n    function reflectionFromToken(uint256 tAmount, bool deductTransferFee) external view returns(uint256) {\r\n        require(tAmount <= _TTOTAL);\r\n        if (!deductTransferFee) {\r\n            (uint256 rAmount,,,,,) = _getValues(tAmount);\r\n            return rAmount;\r\n        } else {\r\n            (,uint256 rTransferAmount,,,,) = _getValues(tAmount);\r\n            return rTransferAmount;\r\n        }\r\n    }\r\n\r\n    function tokenFromReflection(uint256 rAmount) public view returns(uint256) {\r\n        require(rAmount <= _rTotal);\r\n        uint256 currentRate = _getRate();\r\n        return rAmount / currentRate;\r\n    }\r\n\r\n    function isFeeForAddressEnabled(address account) external view returns (bool) {\r\n        return _hasSpecialFee[ account ];\r\n    }\r\n\r\n    function getFeeForAddress(address account) external view returns (uint256) {\r\n        return  _specialFees[ account ];\r\n    }\r\n\r\n    function setPlatformFundAddress(address newAddress) external onlyOwner() {\r\n        require( newAddress != address(0) );\r\n        _platformFundAddress = payable(newAddress);\r\n\r\n        emit SetPlatformFundAddress(newAddress);\r\n    }\r\n\r\n   function setFees(uint256 newRewardFee, uint256 newLiquidityFee, uint256 newProjectFee, bool transferTax) \r\n     external onlyOwner() {\r\n        require( (newRewardFee + newLiquidityFee + newProjectFee) <= TARGETFEE); // cannot be more than 5%\r\n        \r\n        _taxFee = newRewardFee;\r\n        _liquidityFee = newLiquidityFee;\r\n        _projectFee = newProjectFee;\r\n        _transferTaxEnabled = transferTax; // if enabled, tax transfers between wallets\r\n\r\n        _totalLiqFee = _liquidityFee + _projectFee;\r\n\r\n        emit SetFees(newRewardFee, newLiquidityFee, newProjectFee, transferTax);\r\n    }\r\n\r\n    function openTrading() external onlyOwner() {\r\n        swapAndLiquifyEnabled = true;\r\n\r\n        emit OpenTrading();\r\n    }\r\n\r\n    function setFee(address account, uint256 newFee, bool enabled) external onlyOwner {\r\n        require( newFee <= TARGETFEE ); // cannot be more than 5%\r\n\r\n        _specialFees[ account ] = newFee;\r\n        _hasSpecialFee[ account ] = enabled;\r\n\r\n        emit SetFee(account, newFee, enabled);\r\n    }\r\n\r\n    function excludeFromReward(address account) external onlyOwner() {\r\n        require(!_isExcludedFromReward[account]);\r\n        require(_excludedFromReward.length < 100);\r\n        if(_rOwned[account] > 0) {\r\n            _tOwned[account] = tokenFromReflection(_rOwned[account]);\r\n        }\r\n        _isExcludedFromReward[account] = true;\r\n        _excludedFromReward.push(account);\r\n\r\n        emit ExcludeFromReward(account);\r\n    }\r\n\r\n    function includeInReward(address account) external onlyOwner() {\r\n        require(_isExcludedFromReward[account]);\r\n        require(_excludedFromReward.length < 100);\r\n        uint len = _excludedFromReward.length;\r\n        for (uint256 i = 0; i < len; i++) {\r\n            if (_excludedFromReward[i] == account) {\r\n                _excludedFromReward[i] = _excludedFromReward[len - 1];\r\n                uint256 currentRate = _getRate();\r\n                _rOwned[account] = _tOwned[account] * currentRate;\r\n                _tOwned[account] = 0;\r\n                _isExcludedFromReward[account] = false;\r\n                _excludedFromReward.pop();\r\n\r\n                emit IncludeInReward(account);\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    function setSwapAndLiquifyEnabled(bool swapEnabled, bool maxAmountEnabled) external onlyOwner {\r\n        swapAndLiquifyEnabled = swapEnabled;\r\n        swapAndLiquifyMaxAmountEnabled = maxAmountEnabled;\r\n\r\n        emit SetSwapAndLiquifyEnabled(swapAndLiquifyEnabled, swapAndLiquifyMaxAmountEnabled);\r\n    }\r\n\r\n    function setSwapAndLiquifyMaxAmount(uint256 amount) external onlyOwner {\r\n        require( amount > 0 );\r\n        require( amount <= MAXLIQUIFYAMOUNT);\r\n        numTokensToSell = amount;\r\n\r\n        emit SetSwapAndLiquifyMaxAmount(numTokensToSell);\r\n    }\r\n\r\n    // contract gains ETH over time\r\n    function rescueETH(uint256 amount) external onlyOwner {\r\n        payable( msg.sender ).transfer(amount);\r\n\r\n        emit RescueETH(amount, msg.sender );\r\n    }\r\n\r\n    // rescue tokens accidently sent to contract address\r\n    function rescueERC20(address tokenAddress) external onlyOwner() {\r\n        //require(tokenAddress != address(this));\r\n        require(tokenAddress != address(uniswapV2Pair));\r\n\r\n        IERC20 token = IERC20(tokenAddress);\r\n        uint256 amount = token.balanceOf(address(this));\r\n        require(amount > 0);\r\n\r\n        bool success = token.transfer(_msgSender(), amount);\r\n        require(success);\r\n\r\n        emit RescueERC20( amount, tokenAddress );\r\n    }\r\n\r\n    function _reflectFee(uint256 rFee, uint256 tFee) private {\r\n        _rTotal = _rTotal - rFee;\r\n        _totalFee = _totalFee + tFee;\r\n    }\r\n\r\n    function _getValues(uint256 tAmount) private view returns (uint256, uint256, uint256, uint256, uint256, uint256) {\r\n        (uint256 tTransferAmount, uint256 tFee, uint256 tLiquidity) = _getTValues(tAmount);\r\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee) = _getRValues(tAmount, tFee, tLiquidity, _getRate());\r\n        return (rAmount, rTransferAmount, rFee, tTransferAmount, tFee, tLiquidity);\r\n    }\r\n\r\n    function _getTValues(uint256 tAmount) private view returns (uint256, uint256, uint256) {\r\n        uint256 tFee = tAmount * _taxFee / (10**4);\r\n        uint256 tLiquidity = tAmount * _totalLiqFee / (10**4);\r\n        uint256 tTransferAmount = tAmount - tFee - tLiquidity;\r\n        return (tTransferAmount, tFee, tLiquidity);\r\n    }\r\n\r\n    function _getRValues(uint256 tAmount, uint256 tFee, uint256 tLiquidity, uint256 currentRate) \r\n        private pure returns (uint256, uint256, uint256) {\r\n        uint256 rAmount = tAmount * currentRate;\r\n        uint256 rFee = tFee * currentRate;\r\n        uint256 rLiquidity = tLiquidity * currentRate;\r\n        uint256 rTransferAmount = rAmount - rFee - rLiquidity;\r\n        return (rAmount, rTransferAmount, rFee);\r\n    }\r\n\r\n    function _getRate() private view returns(uint256) {\r\n        (uint256 rSupply, uint256 tSupply) = _getCurrentSupply();\r\n        return rSupply / tSupply;\r\n    }\r\n\r\n    function _getCurrentSupply() private view returns(uint256, uint256) {\r\n        uint256 rSupply = _rTotal;\r\n        uint256 tSupply = _TTOTAL;\r\n        uint len = _excludedFromReward.length;\r\n        for (uint256 i = 0; i < len; i++) {\r\n            if (_rOwned[_excludedFromReward[i]] > rSupply || \r\n                _tOwned[_excludedFromReward[i]] > tSupply) \r\n                    return (_rTotal, _TTOTAL);\r\n            rSupply = rSupply - _rOwned[_excludedFromReward[i]];\r\n            tSupply = tSupply - _tOwned[_excludedFromReward[i]];\r\n        }\r\n        if (rSupply < (_rTotal / _TTOTAL)) return (_rTotal, _TTOTAL);\r\n        return (rSupply, tSupply);\r\n    }\r\n    \r\n    function _takeLiquidity(uint256 tLiquidity) private {\r\n        uint256 currentRate = _getRate();\r\n        uint256 rLiquidity = tLiquidity * currentRate;\r\n        _rOwned[address(this)] = _rOwned[address(this)] + rLiquidity;\r\n        if(_isExcludedFromReward[address(this)])\r\n            _tOwned[address(this)] = _tOwned[address(this)] + tLiquidity;\r\n    }\r\n    \r\n    function saveAllFees() private {\r\n        _prevTaxFee = _taxFee;\r\n        _prevTotalLiqFee = _totalLiqFee;\r\n        _prevProjectFee = _projectFee;\r\n        _prevLiquidityFee = _liquidityFee;\r\n    }\r\n  \r\n    function setTaxes(address from, address to) private returns (bool) {\r\n        \r\n        uint256 totalFee = _taxFee + _liquidityFee + _projectFee;\r\n        if( totalFee == 0 ) {\r\n            return false;\r\n        }\r\n\r\n        // don't tax normal transfers between wallets if transferTax is disabled\r\n        bool isSimpleTransfer = (from != uniswapV2Pair && to != uniswapV2Pair && !_transferTaxEnabled);\r\n        if (isSimpleTransfer && !_hasSpecialFee[from]) {\r\n            _taxFee = 0;\r\n            _liquidityFee = 0;\r\n            _projectFee = 0;\r\n            _totalLiqFee = 0;\r\n            return false;\r\n        }\r\n\r\n        // if the tax rate is not yet the target tax rate, lock the tax rate on buy\r\n        // this provides a dynamic taxrate to cushion the impact when sniper whales exit\r\n        if( totalFee > TARGETFEE && from == uniswapV2Pair && !_hasSpecialFee[to] ) {\r\n            if( balanceOf(to) >= WHALETHRESHOLD ) {\r\n                _hasSpecialFee[to] = true;\r\n                _specialFees[to]   = totalFee;\r\n            }\r\n        }\r\n\r\n        if( !_hasSpecialFee[from] && !_hasSpecialFee[to]) {\r\n            // dont change tax fee\r\n            return false;\r\n        }\r\n\r\n        // either one or both of the addresses have a special fee, take the lowest\r\n        address lowestFeeAccount = from;\r\n        if( _hasSpecialFee[from] && _hasSpecialFee[to]) {\r\n            lowestFeeAccount = ( _specialFees[from] > _specialFees[to] ? to : from );\r\n        } else if ( _hasSpecialFee[to] ) {\r\n            lowestFeeAccount = to;\r\n        }\r\n\r\n        // get the fee (which can be zero)\r\n        uint256 fee = _specialFees[ lowestFeeAccount ];\r\n        \r\n        // set fees\r\n        _taxFee = fee * _taxFee / totalFee;\r\n        _liquidityFee = fee * _liquidityFee / totalFee;\r\n        _projectFee = fee * _projectFee / totalFee;\r\n        _totalLiqFee = _liquidityFee + _projectFee;\r\n\r\n        return true;\r\n    }\r\n\r\n    function restoreAllFees(address from, address to) private {\r\n        _taxFee = _prevTaxFee;\r\n        _totalLiqFee = _prevTotalLiqFee;\r\n        _projectFee = _prevProjectFee;\r\n        _liquidityFee = _prevLiquidityFee;\r\n\r\n        // remove special fee if new balance is near zero\r\n        if( _hasSpecialFee[to] && balanceOf(to) < (1 * 10**9) ) {\r\n            _specialFees[to] = 0;\r\n            _hasSpecialFee[to] = false;\r\n        }\r\n\r\n        if( _hasSpecialFee[from] && balanceOf(from) < (1 * 10**9) ) {\r\n            _specialFees[from] = 0;\r\n            _hasSpecialFee[from] = false;\r\n        }\r\n    }\r\n \r\n    function _approve(address addr, address spender, uint256 amount) private {\r\n        require(addr != address(0) );\r\n        require(spender != address(0) );\r\n\r\n        _allowances[addr][spender] = amount;\r\n        emit Approval(addr, spender, amount);\r\n    }\r\n\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) private {\r\n        require(from != address(0));\r\n        require(to != address(0));\r\n        require(amount <= balanceOf(from));\r\n\r\n        uint256 contractTokenBalance = balanceOf(address(this));\r\n        bool overMinTokenBalance = contractTokenBalance > numTokensToSell;\r\n        \r\n        // save all the fees\r\n        saveAllFees();\r\n\r\n        setTaxes(from,to);\r\n                \r\n        // is the token balance of this contract address over the min number of\r\n        // tokens that we need to initiate a swap + liquidity lock?\r\n        // also, don't get caught in a circular liquidity event.\r\n        // also, don't swap & liquify if sender is uniswap pair.\r\n        if (\r\n            overMinTokenBalance &&\r\n            !inSwapAndLiquify &&\r\n            from != uniswapV2Pair &&\r\n            swapAndLiquifyEnabled &&\r\n            _totalLiqFee > 0\r\n        ) {\r\n            if( swapAndLiquifyMaxAmountEnabled ) {\r\n                contractTokenBalance = numTokensToSell;\r\n            }\r\n            \r\n            swapAndLiquify(contractTokenBalance);\r\n        }\r\n        \r\n        //transfer amount, it will deduct fee and reflect tokens\r\n        _tokenTransfer(from,to,amount);\r\n\r\n        // restore all the fees\r\n        restoreAllFees(from, to);\r\n    }\r\n\r\n    function swapAndLiquify(uint256 tAmount) private lockTheSwap {\r\n        uint256 forLiquidity = tAmount * _liquidityFee / _totalLiqFee;\r\n        uint256 forWallets = tAmount - forLiquidity;\r\n        \r\n        if(forLiquidity > 0 && _liquidityFee > 0)\r\n        {\r\n            // sell half the tokens for ETH and add liquidity\r\n            uint256 half = forLiquidity / 2;\r\n            uint256 otherHalf = forLiquidity - half;\r\n    \r\n            uint256 initialBalance = address(this).balance;\r\n            swapTokensForETH(half);\r\n\r\n            uint256 newBalance = address(this).balance - initialBalance;\r\n            addLiquidity(otherHalf, newBalance);\r\n        }\r\n                \r\n        if(forWallets > 0 && _projectFee > 0) \r\n        {\r\n            // sell tokens for ETH and send to project fund\r\n            uint256 initialBalance = address(this).balance;\r\n            swapTokensForETH(forWallets);\r\n\r\n            uint256 newBalance = address(this).balance - initialBalance;\r\n            \r\n            _platformFundAddress.transfer(newBalance);\r\n        }\r\n\r\n    }\r\n\r\n    function swapTokensForETH(uint256 tokenAmount) private {\r\n        // generate the pair path of token -> weth \r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = uniswapV2Router.WETH();\r\n\r\n        if( _allowances[ address(this)][address(uniswapV2Router)] < tokenAmount )\r\n            _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n\r\n        // make the swap\r\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0, // accept any amount of ETH\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    // remove at most 10% of the liquidity tokens in the contract and each withdrawal triggers\r\n    // an automatic 4-week time lock.\r\n    // this does not impact initial liquidity\r\n    function removeLiquidity(uint256 percentage) external onlyOwner lockTheSwap {\r\n        require(_timeLock <= block.timestamp);\r\n        require(percentage <= 1000);\r\n        \r\n        uint256 liquidity = IERC20(uniswapV2Pair).balanceOf(address(this));\r\n        require( liquidity > 0);\r\n\r\n        uint256 amount = liquidity * percentage / (10**4); // at most 10%\r\n        \r\n        IERC20(uniswapV2Pair).approve(address(uniswapV2Router), amount);\r\n        uniswapV2Router.removeLiquidityETHSupportingFeeOnTransferTokens(\r\n            address(this), amount, 0, 0, msg.sender, block.timestamp + 60 );\r\n\r\n        // set a new timed lock\r\n        _timeLock = block.timestamp + (4 weeks);\r\n\r\n        emit RemoveLiquidity(percentage);\r\n    }\r\n\r\n    // function that generates LP tokens from taxes\r\n    function addLiquidity(uint256 tokenAmount, uint256 ETHAmount) private {        \r\n        if( _allowances[ address(this)][address(uniswapV2Router)] < tokenAmount )\r\n            _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n\r\n        // add the liquidity\r\n        uniswapV2Router.addLiquidityETH{value: ETHAmount}(\r\n            address(this),\r\n            tokenAmount,\r\n            0, // slippage is unavoidable\r\n            0, // slippage is unavoidable\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    // function to add initial liquidity\r\n    // owner of the LP tokens is the deployer wallet\r\n    // received LP tokens need to be locked or burned\r\n    function addInitialLiquidity() external payable onlyOwner {\r\n        _approve(address(this), address(uniswapV2Router), MAX);\r\n        IERC20(uniswapV2Pair).approve(address(uniswapV2Router), MAX);\r\n        \r\n        uniswapV2Router.addLiquidityETH{value: msg.value}(\r\n            address(this),\r\n            balanceOf(address(this)),\r\n            0,\r\n            0,\r\n            owner(),\r\n            block.timestamp\r\n        );\r\n        \r\n        emit AddInitialLiquidity();\r\n    }\r\n\r\n    //this method is responsible for taking all fee\r\n    function _tokenTransfer(address sender, address recipient, uint256 amount) private {\r\n        if (_isExcludedFromReward[sender] && !_isExcludedFromReward[recipient]) {\r\n            _transferFromExcluded(sender, recipient, amount);\r\n        } else if (!_isExcludedFromReward[sender] && _isExcludedFromReward[recipient]) {\r\n            _transferToExcluded(sender, recipient, amount);\r\n        } else if (_isExcludedFromReward[sender] && _isExcludedFromReward[recipient]) {\r\n            _transferBothExcluded(sender, recipient, amount);\r\n        } else {\r\n            _transferStandard(sender, recipient, amount);\r\n        }\r\n    }\r\n\r\n    function _transferStandard(address sender, address recipient, uint256 tAmount) private {\r\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, \r\n         uint256 tTransferAmount, uint256 tFee, uint256 tLiquidity) = _getValues(tAmount);\r\n        _rOwned[sender] = _rOwned[sender] - rAmount;\r\n        _rOwned[recipient] = _rOwned[recipient] + rTransferAmount;\r\n        _takeLiquidity(tLiquidity);\r\n        _reflectFee(rFee, tFee);\r\n        emit Transfer(sender, recipient, tTransferAmount);\r\n    }\r\n\r\n    function _transferToExcluded(address sender, address recipient, uint256 tAmount) private {\r\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, \r\n         uint256 tFee, uint256 tLiquidity) = _getValues(tAmount);\r\n        _rOwned[sender] = _rOwned[sender] - rAmount;\r\n        _tOwned[recipient] = _tOwned[recipient] + tTransferAmount;\r\n        _rOwned[recipient] = _rOwned[recipient] + rTransferAmount;\r\n        _takeLiquidity(tLiquidity);\r\n        _reflectFee(rFee, tFee);\r\n        emit Transfer(sender, recipient, tTransferAmount);\r\n    }\r\n\r\n    function _transferFromExcluded(address sender, address recipient, uint256 tAmount) private {\r\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount,\r\n         uint256 tFee, uint256 tLiquidity) = _getValues(tAmount);\r\n        _tOwned[sender] = _tOwned[sender] - tAmount;\r\n        _rOwned[sender] = _rOwned[sender] - rAmount;\r\n        _rOwned[recipient] = _rOwned[recipient] + rTransferAmount;\r\n        _takeLiquidity(tLiquidity);\r\n        _reflectFee(rFee, tFee);\r\n        emit Transfer(sender, recipient, tTransferAmount);\r\n    }\r\n   \r\n    function _transferBothExcluded(address sender, address recipient, uint256 tAmount) private {\r\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount,\r\n         uint256 tFee, uint256 tLiquidity) = _getValues(tAmount);\r\n        _tOwned[sender] = _tOwned[sender] - tAmount;\r\n        _rOwned[sender] = _rOwned[sender] - rAmount;\r\n        _tOwned[recipient] = _tOwned[recipient] + tTransferAmount;\r\n        _rOwned[recipient] = _rOwned[recipient] + rTransferAmount;\r\n        _takeLiquidity(tLiquidity);\r\n        _reflectFee(rFee, tFee);\r\n        emit Transfer(sender, recipient, tTransferAmount);\r\n    }\r\n\r\n     //to receive ETH from router when swapping\r\n    receive() external payable {}\r\n\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"AddInitialLiquidity\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"ExcludeFromReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"IncludeInReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"OpenTrading\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"percentage\",\"type\":\"uint256\"}],\"name\":\"RemoveLiquidity\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"RescueERC20\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"RescueETH\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"SetFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newRewardFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newLiquidityFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newProjectFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"transferTax\",\"type\":\"bool\"}],\"name\":\"SetFees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"SetPlatformFundAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"swapEnabled\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"maxAmountEnabled\",\"type\":\"bool\"}],\"name\":\"SetSwapAndLiquifyEnabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"SetSwapAndLiquifyMaxAmount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_liquidityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_platformFundAddress\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_projectFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_taxFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_totalFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_totalLiqFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"addInitialLiquidity\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getFeeForAddress\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeInReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromReward\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isFeeForAddressEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numTokensToSell\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"openTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"deductTransferFee\",\"type\":\"bool\"}],\"name\":\"reflectionFromToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"percentage\",\"type\":\"uint256\"}],\"name\":\"removeLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"rescueERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"rescueETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"newFee\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"setFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newRewardFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newLiquidityFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newProjectFee\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"transferTax\",\"type\":\"bool\"}],\"name\":\"setFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"setPlatformFundAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"swapEnabled\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"maxAmountEnabled\",\"type\":\"bool\"}],\"name\":\"setSwapAndLiquifyEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setSwapAndLiquifyMaxAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapAndLiquifyEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapAndLiquifyMaxAmountEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rAmount\",\"type\":\"uint256\"}],\"name\":\"tokenFromReflection\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "Rabbits", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://8124de5d895ae77a377cd1bc421fb541f130eeb60f1ef92a44cf7aeb99dd2143"}