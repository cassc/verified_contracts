{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@chainlink/contracts/src/v0.8/ChainSpecificUtil.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport {ArbSys} from \\\"./vendor/@arbitrum/nitro-contracts/src/precompiles/ArbSys.sol\\\";\\nimport {ArbGasInfo} from \\\"./vendor/@arbitrum/nitro-contracts/src/precompiles/ArbGasInfo.sol\\\";\\n\\n//@dev A library that abstracts out opcodes that behave differently across chains.\\n//@dev The methods below return values that are pertinent to the given chain.\\n//@dev For instance, ChainSpecificUtil.getBlockNumber() returns L2 block number in L2 chains\\nlibrary ChainSpecificUtil {\\n  address private constant ARBSYS_ADDR = address(0x0000000000000000000000000000000000000064);\\n  ArbSys private constant ARBSYS = ArbSys(ARBSYS_ADDR);\\n  address private constant ARBGAS_ADDR = address(0x000000000000000000000000000000000000006C);\\n  ArbGasInfo private constant ARBGAS = ArbGasInfo(ARBGAS_ADDR);\\n  uint256 private constant ARB_MAINNET_CHAIN_ID = 42161;\\n  uint256 private constant ARB_GOERLI_TESTNET_CHAIN_ID = 421613;\\n  uint256 private constant ARB_SEPOLIA_TESTNET_CHAIN_ID = 421614;\\n\\n  function getBlockhash(uint64 blockNumber) internal view returns (bytes32) {\\n    uint256 chainid = block.chainid;\\n    if (\\n      chainid == ARB_MAINNET_CHAIN_ID ||\\n      chainid == ARB_GOERLI_TESTNET_CHAIN_ID ||\\n      chainid == ARB_SEPOLIA_TESTNET_CHAIN_ID\\n    ) {\\n      if ((getBlockNumber() - blockNumber) > 256 || blockNumber >= getBlockNumber()) {\\n        return \\\"\\\";\\n      }\\n      return ARBSYS.arbBlockHash(blockNumber);\\n    }\\n    return blockhash(blockNumber);\\n  }\\n\\n  function getBlockNumber() internal view returns (uint256) {\\n    uint256 chainid = block.chainid;\\n    if (chainid == ARB_MAINNET_CHAIN_ID || chainid == ARB_GOERLI_TESTNET_CHAIN_ID) {\\n      return ARBSYS.arbBlockNumber();\\n    }\\n    return block.number;\\n  }\\n\\n  function getCurrentTxL1GasFees() internal view returns (uint256) {\\n    uint256 chainid = block.chainid;\\n    if (chainid == ARB_MAINNET_CHAIN_ID || chainid == ARB_GOERLI_TESTNET_CHAIN_ID) {\\n      return ARBGAS.getCurrentTxL1GasFees();\\n    }\\n    return 0;\\n  }\\n\\n  /**\\n   * @notice Returns the gas cost in wei of calldataSizeBytes of calldata being posted\\n   * @notice to L1.\\n   */\\n  function getL1CalldataGasCost(uint256 calldataSizeBytes) internal view returns (uint256) {\\n    uint256 chainid = block.chainid;\\n    if (chainid == ARB_MAINNET_CHAIN_ID || chainid == ARB_GOERLI_TESTNET_CHAIN_ID) {\\n      (, uint256 l1PricePerByte, , , , ) = ARBGAS.getPricesInWei();\\n      // see https://developer.arbitrum.io/devs-how-tos/how-to-estimate-gas#where-do-we-get-all-this-information-from\\n      // for the justification behind the 140 number.\\n      return l1PricePerByte * (calldataSizeBytes + 140);\\n    }\\n    return 0;\\n  }\\n}\\n\"\r\n    },\r\n    \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(\\n    uint80 _roundId\\n  ) external view returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\\n}\\n\"\r\n    },\r\n    \"@chainlink/contracts/src/v0.8/interfaces/BlockhashStoreInterface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface BlockhashStoreInterface {\\n  function getBlockhash(uint256 number) external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"@chainlink/contracts/src/v0.8/interfaces/TypeAndVersionInterface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nabstract contract TypeAndVersionInterface {\\n  function typeAndVersion() external pure virtual returns (string memory);\\n}\\n\"\r\n    },\r\n    \"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface VRFCoordinatorV2Interface {\\n  /**\\n   * @notice Get configuration relevant for making requests\\n   * @return minimumRequestConfirmations global min for request confirmations\\n   * @return maxGasLimit global max for request gas limit\\n   * @return s_provingKeyHashes list of registered key hashes\\n   */\\n  function getRequestConfig() external view returns (uint16, uint32, bytes32[] memory);\\n\\n  /**\\n   * @notice Request a set of random words.\\n   * @param keyHash - Corresponds to a particular oracle job which uses\\n   * that key for generating the VRF proof. Different keyHash's have different gas price\\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\\n   * @param subId  - The ID of the VRF subscription. Must be funded\\n   * with the minimum subscription balance required for the selected keyHash.\\n   * @param minimumRequestConfirmations - How many blocks you'd like the\\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\\n   * for why you may want to request more. The acceptable range is\\n   * [minimumRequestBlockConfirmations, 200].\\n   * @param callbackGasLimit - How much gas you'd like to receive in your\\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\\n   * may be slightly less than this amount because of gas used calling the function\\n   * (argument decoding etc.), so you may need to request slightly more than you expect\\n   * to have inside fulfillRandomWords. The acceptable range is\\n   * [0, maxGasLimit]\\n   * @param numWords - The number of uint256 random values you'd like to receive\\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\\n   * @return requestId - A unique identifier of the request. Can be used to match\\n   * a request to a response in fulfillRandomWords.\\n   */\\n  function requestRandomWords(\\n    bytes32 keyHash,\\n    uint64 subId,\\n    uint16 minimumRequestConfirmations,\\n    uint32 callbackGasLimit,\\n    uint32 numWords\\n  ) external returns (uint256 requestId);\\n\\n  /**\\n   * @notice Create a VRF subscription.\\n   * @return subId - A unique subscription id.\\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\\n   * @dev Note to fund the subscription, use transferAndCall. For example\\n   * @dev  LINKTOKEN.transferAndCall(\\n   * @dev    address(COORDINATOR),\\n   * @dev    amount,\\n   * @dev    abi.encode(subId));\\n   */\\n  function createSubscription() external returns (uint64 subId);\\n\\n  /**\\n   * @notice Get a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @return balance - LINK balance of the subscription in juels.\\n   * @return reqCount - number of requests for this subscription, determines fee tier.\\n   * @return owner - owner of the subscription.\\n   * @return consumers - list of consumer address which are able to use this subscription.\\n   */\\n  function getSubscription(\\n    uint64 subId\\n  ) external view returns (uint96 balance, uint64 reqCount, address owner, address[] memory consumers);\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @param newOwner - proposed new owner of the subscription\\n   */\\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @dev will revert if original owner of subId has\\n   * not requested that msg.sender become the new owner.\\n   */\\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\\n\\n  /**\\n   * @notice Add a consumer to a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - New consumer which can use the subscription\\n   */\\n  function addConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Remove a consumer from a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - Consumer to remove from the subscription\\n   */\\n  function removeConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Cancel a subscription\\n   * @param subId - ID of the subscription\\n   * @param to - Where to send the remaining LINK to\\n   */\\n  function cancelSubscription(uint64 subId, address to) external;\\n\\n  /*\\n   * @notice Check to see if there exists a request commitment consumers\\n   * for all consumers and keyhashes for a given sub.\\n   * @param subId - ID of the subscription\\n   * @return true if there exists at least one unfulfilled request for the subscription, false\\n   * otherwise.\\n   */\\n  function pendingRequestExists(uint64 subId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@chainlink/contracts/src/v0.8/shared/access/ConfirmedOwner.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ConfirmedOwnerWithProposal.sol\\\";\\n\\n/**\\n * @title The ConfirmedOwner contract\\n * @notice A contract with helpers for basic contract ownership.\\n */\\ncontract ConfirmedOwner is ConfirmedOwnerWithProposal {\\n  constructor(address newOwner) ConfirmedOwnerWithProposal(newOwner, address(0)) {}\\n}\\n\"\r\n    },\r\n    \"@chainlink/contracts/src/v0.8/shared/access/ConfirmedOwnerWithProposal.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"../interfaces/IOwnable.sol\\\";\\n\\n/**\\n * @title The ConfirmedOwner contract\\n * @notice A contract with helpers for basic contract ownership.\\n */\\ncontract ConfirmedOwnerWithProposal is IOwnable {\\n  address private s_owner;\\n  address private s_pendingOwner;\\n\\n  event OwnershipTransferRequested(address indexed from, address indexed to);\\n  event OwnershipTransferred(address indexed from, address indexed to);\\n\\n  constructor(address newOwner, address pendingOwner) {\\n    require(newOwner != address(0), \\\"Cannot set owner to zero\\\");\\n\\n    s_owner = newOwner;\\n    if (pendingOwner != address(0)) {\\n      _transferOwnership(pendingOwner);\\n    }\\n  }\\n\\n  /**\\n   * @notice Allows an owner to begin transferring ownership to a new address,\\n   * pending.\\n   */\\n  function transferOwnership(address to) public override onlyOwner {\\n    _transferOwnership(to);\\n  }\\n\\n  /**\\n   * @notice Allows an ownership transfer to be completed by the recipient.\\n   */\\n  function acceptOwnership() external override {\\n    require(msg.sender == s_pendingOwner, \\\"Must be proposed owner\\\");\\n\\n    address oldOwner = s_owner;\\n    s_owner = msg.sender;\\n    s_pendingOwner = address(0);\\n\\n    emit OwnershipTransferred(oldOwner, msg.sender);\\n  }\\n\\n  /**\\n   * @notice Get the current owner\\n   */\\n  function owner() public view override returns (address) {\\n    return s_owner;\\n  }\\n\\n  /**\\n   * @notice validate, transfer ownership, and emit relevant events\\n   */\\n  function _transferOwnership(address to) private {\\n    require(to != msg.sender, \\\"Cannot transfer to self\\\");\\n\\n    s_pendingOwner = to;\\n\\n    emit OwnershipTransferRequested(s_owner, to);\\n  }\\n\\n  /**\\n   * @notice validate access\\n   */\\n  function _validateOwnership() internal view {\\n    require(msg.sender == s_owner, \\\"Only callable by owner\\\");\\n  }\\n\\n  /**\\n   * @notice Reverts if called by anyone other than the contract owner.\\n   */\\n  modifier onlyOwner() {\\n    _validateOwnership();\\n    _;\\n  }\\n}\\n\"\r\n    },\r\n    \"@chainlink/contracts/src/v0.8/shared/interfaces/IERC677Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.6;\\n\\ninterface IERC677Receiver {\\n  function onTokenTransfer(address sender, uint256 amount, bytes calldata data) external;\\n}\\n\"\r\n    },\r\n    \"@chainlink/contracts/src/v0.8/shared/interfaces/IOwnable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IOwnable {\\n  function owner() external returns (address);\\n\\n  function transferOwnership(address recipient) external;\\n\\n  function acceptOwnership() external;\\n}\\n\"\r\n    },\r\n    \"@chainlink/contracts/src/v0.8/shared/interfaces/LinkTokenInterface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface LinkTokenInterface {\\n  function allowance(address owner, address spender) external view returns (uint256 remaining);\\n\\n  function approve(address spender, uint256 value) external returns (bool success);\\n\\n  function balanceOf(address owner) external view returns (uint256 balance);\\n\\n  function decimals() external view returns (uint8 decimalPlaces);\\n\\n  function decreaseApproval(address spender, uint256 addedValue) external returns (bool success);\\n\\n  function increaseApproval(address spender, uint256 subtractedValue) external;\\n\\n  function name() external view returns (string memory tokenName);\\n\\n  function symbol() external view returns (string memory tokenSymbol);\\n\\n  function totalSupply() external view returns (uint256 totalTokensIssued);\\n\\n  function transfer(address to, uint256 value) external returns (bool success);\\n\\n  function transferAndCall(address to, uint256 value, bytes calldata data) external returns (bool success);\\n\\n  function transferFrom(address from, address to, uint256 value) external returns (bool success);\\n}\\n\"\r\n    },\r\n    \"@chainlink/contracts/src/v0.8/vendor/@arbitrum/nitro-contracts/src/precompiles/ArbGasInfo.sol\": {\r\n      \"content\": \"// Copyright 2021-2022, Offchain Labs, Inc.\\n// For license information, see https://github.com/nitro/blob/master/LICENSE\\n// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity >=0.4.21 <0.9.0;\\n\\ninterface ArbGasInfo {\\n    // return gas prices in wei, assuming the specified aggregator is used\\n    //        (\\n    //            per L2 tx,\\n    //            per L1 calldata unit, (zero byte = 4 units, nonzero byte = 16 units)\\n    //            per storage allocation,\\n    //            per ArbGas base,\\n    //            per ArbGas congestion,\\n    //            per ArbGas total\\n    //        )\\n    function getPricesInWeiWithAggregator(address aggregator) external view returns (uint, uint, uint, uint, uint, uint);\\n\\n    // return gas prices in wei, as described above, assuming the caller's preferred aggregator is used\\n    //     if the caller hasn't specified a preferred aggregator, the default aggregator is assumed\\n    function getPricesInWei() external view returns (uint, uint, uint, uint, uint, uint);\\n\\n    // return prices in ArbGas (per L2 tx, per L1 calldata unit, per storage allocation),\\n    //       assuming the specified aggregator is used\\n    function getPricesInArbGasWithAggregator(address aggregator) external view returns (uint, uint, uint);\\n\\n    // return gas prices in ArbGas, as described above, assuming the caller's preferred aggregator is used\\n    //     if the caller hasn't specified a preferred aggregator, the default aggregator is assumed\\n    function getPricesInArbGas() external view returns (uint, uint, uint);\\n\\n    // return gas accounting parameters (speedLimitPerSecond, gasPoolMax, maxTxGasLimit)\\n    function getGasAccountingParams() external view returns (uint, uint, uint);\\n\\n    // get ArbOS's estimate of the L1 gas price in wei\\n    function getL1GasPriceEstimate() external view returns(uint);\\n\\n    // set ArbOS's estimate of the L1 gas price in wei\\n    // reverts unless called by chain owner or designated gas oracle (if any)\\n    function setL1GasPriceEstimate(uint priceInWei) external;\\n\\n    // get L1 gas fees paid by the current transaction (txBaseFeeWei, calldataFeeWei)\\n    function getCurrentTxL1GasFees() external view returns(uint);\\n}\\n\"\r\n    },\r\n    \"@chainlink/contracts/src/v0.8/vendor/@arbitrum/nitro-contracts/src/precompiles/ArbSys.sol\": {\r\n      \"content\": \"// Copyright 2021-2022, Offchain Labs, Inc.\\n// For license information, see https://github.com/nitro/blob/master/LICENSE\\n// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity >=0.4.21 <0.9.0;\\n\\n/**\\n * @title System level functionality\\n * @notice For use by contracts to interact with core L2-specific functionality.\\n * Precompiled contract that exists in every Arbitrum chain at address(100), 0x0000000000000000000000000000000000000064.\\n */\\ninterface ArbSys {\\n    /**\\n     * @notice Get Arbitrum block number (distinct from L1 block number; Arbitrum genesis block has block number 0)\\n     * @return block number as int\\n     */\\n    function arbBlockNumber() external view returns (uint256);\\n\\n    /**\\n     * @notice Get Arbitrum block hash (reverts unless currentBlockNum-256 <= arbBlockNum < currentBlockNum)\\n     * @return block hash\\n     */\\n    function arbBlockHash(uint256 arbBlockNum) external view returns (bytes32);\\n\\n    /**\\n     * @notice Gets the rollup's unique chain identifier\\n     * @return Chain identifier as int\\n     */\\n    function arbChainID() external view returns (uint256);\\n\\n    /**\\n     * @notice Get internal version number identifying an ArbOS build\\n     * @return version number as int\\n     */\\n    function arbOSVersion() external view returns (uint256);\\n\\n    /**\\n     * @notice Returns 0 since Nitro has no concept of storage gas\\n     * @return uint 0\\n     */\\n    function getStorageGasAvailable() external view returns (uint256);\\n\\n    /**\\n     * @notice (deprecated) check if current call is top level (meaning it was triggered by an EoA or a L1 contract)\\n     * @dev this call has been deprecated and may be removed in a future release\\n     * @return true if current execution frame is not a call by another L2 contract\\n     */\\n    function isTopLevelCall() external view returns (bool);\\n\\n    /**\\n     * @notice map L1 sender contract address to its L2 alias\\n     * @param sender sender address\\n     * @param unused argument no longer used\\n     * @return aliased sender address\\n     */\\n    function mapL1SenderContractAddressToL2Alias(address sender, address unused)\\n        external\\n        pure\\n        returns (address);\\n\\n    /**\\n     * @notice check if the caller (of this caller of this) is an aliased L1 contract address\\n     * @return true iff the caller's address is an alias for an L1 contract address\\n     */\\n    function wasMyCallersAddressAliased() external view returns (bool);\\n\\n    /**\\n     * @notice return the address of the caller (of this caller of this), without applying L1 contract address aliasing\\n     * @return address of the caller's caller, without applying L1 contract address aliasing\\n     */\\n    function myCallersAddressWithoutAliasing() external view returns (address);\\n\\n    /**\\n     * @notice Send given amount of Eth to dest from sender.\\n     * This is a convenience function, which is equivalent to calling sendTxToL1 with empty data.\\n     * @param destination recipient address on L1\\n     * @return unique identifier for this L2-to-L1 transaction.\\n     */\\n    function withdrawEth(address destination)\\n        external\\n        payable\\n        returns (uint256);\\n\\n    /**\\n     * @notice Send a transaction to L1\\n     * @dev it is not possible to execute on the L1 any L2-to-L1 transaction which contains data\\n     * to a contract address without any code (as enforced by the Bridge contract).\\n     * @param destination recipient address on L1\\n     * @param data (optional) calldata for L1 contract call\\n     * @return a unique identifier for this L2-to-L1 transaction.\\n     */\\n    function sendTxToL1(address destination, bytes calldata data)\\n        external\\n        payable\\n        returns (uint256);\\n\\n    /**\\n     * @notice Get send Merkle tree state\\n     * @return size number of sends in the history\\n     * @return root root hash of the send history\\n     * @return partials hashes of partial subtrees in the send history tree\\n     */\\n    function sendMerkleTreeState()\\n        external\\n        view\\n        returns (\\n            uint256 size,\\n            bytes32 root,\\n            bytes32[] memory partials\\n        );\\n\\n    /**\\n     * @notice creates a send txn from L2 to L1\\n     * @param position = (level << 192) + leaf = (0 << 192) + leaf = leaf\\n     */\\n    event L2ToL1Tx(\\n        address caller,\\n        address indexed destination,\\n        uint256 indexed hash,\\n        uint256 indexed position,\\n        uint256 arbBlockNum,\\n        uint256 ethBlockNum,\\n        uint256 timestamp,\\n        uint256 callvalue,\\n        bytes data\\n    );\\n\\n    /// @dev DEPRECATED in favour of the new L2ToL1Tx event above after the nitro upgrade\\n    event L2ToL1Transaction(\\n        address caller,\\n        address indexed destination,\\n        uint256 indexed uniqueId,\\n        uint256 indexed batchNumber,\\n        uint256 indexInBatch,\\n        uint256 arbBlockNum,\\n        uint256 ethBlockNum,\\n        uint256 timestamp,\\n        uint256 callvalue,\\n        bytes data\\n    );\\n\\n    /**\\n     * @notice logs a merkle branch for proof synthesis\\n     * @param reserved an index meant only to align the 4th index with L2ToL1Transaction's 4th event\\n     * @param hash the merkle hash\\n     * @param position = (level << 192) + leaf\\n     */\\n    event SendMerkleUpdate(\\n        uint256 indexed reserved,\\n        bytes32 indexed hash,\\n        uint256 indexed position\\n    );\\n}\\n\"\r\n    },\r\n    \"@chainlink/contracts/src/v0.8/vrf/VRF.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/** ****************************************************************************\\n  * @notice Verification of verifiable-random-function (VRF) proofs, following\\n  * @notice https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-vrf-05#section-5.3\\n  * @notice See https://eprint.iacr.org/2017/099.pdf for security proofs.\\n\\n  * @dev Bibliographic references:\\n\\n  * @dev Goldberg, et al., \\\"Verifiable Random Functions (VRFs)\\\", Internet Draft\\n  * @dev draft-irtf-cfrg-vrf-05, IETF, Aug 11 2019,\\n  * @dev https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-vrf-05\\n\\n  * @dev Papadopoulos, et al., \\\"Making NSEC5 Practical for DNSSEC\\\", Cryptology\\n  * @dev ePrint Archive, Report 2017/099, https://eprint.iacr.org/2017/099.pdf\\n  * ****************************************************************************\\n  * @dev USAGE\\n\\n  * @dev The main entry point is randomValueFromVRFProof. See its docstring.\\n  * ****************************************************************************\\n  * @dev PURPOSE\\n\\n  * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n  * @dev to Vera the verifier in such a way that Vera can be sure he's not\\n  * @dev making his output up to suit himself. Reggie provides Vera a public key\\n  * @dev to which he knows the secret key. Each time Vera provides a seed to\\n  * @dev Reggie, he gives back a value which is computed completely\\n  * @dev deterministically from the seed and the secret key.\\n\\n  * @dev Reggie provides a proof by which Vera can verify that the output was\\n  * @dev correctly computed once Reggie tells it to her, but without that proof,\\n  * @dev the output is computationally indistinguishable to her from a uniform\\n  * @dev random sample from the output space.\\n\\n  * @dev The purpose of this contract is to perform that verification.\\n  * ****************************************************************************\\n  * @dev DESIGN NOTES\\n\\n  * @dev The VRF algorithm verified here satisfies the full uniqueness, full\\n  * @dev collision resistance, and full pseudo-randomness security properties.\\n  * @dev See \\\"SECURITY PROPERTIES\\\" below, and\\n  * @dev https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-vrf-05#section-3\\n\\n  * @dev An elliptic curve point is generally represented in the solidity code\\n  * @dev as a uint256[2], corresponding to its affine coordinates in\\n  * @dev GF(FIELD_SIZE).\\n\\n  * @dev For the sake of efficiency, this implementation deviates from the spec\\n  * @dev in some minor ways:\\n\\n  * @dev - Keccak hash rather than the SHA256 hash recommended in\\n  * @dev   https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-vrf-05#section-5.5\\n  * @dev   Keccak costs much less gas on the EVM, and provides similar security.\\n\\n  * @dev - Secp256k1 curve instead of the P-256 or ED25519 curves recommended in\\n  * @dev   https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-vrf-05#section-5.5\\n  * @dev   For curve-point multiplication, it's much cheaper to abuse ECRECOVER\\n\\n  * @dev - hashToCurve recursively hashes until it finds a curve x-ordinate. On\\n  * @dev   the EVM, this is slightly more efficient than the recommendation in\\n  * @dev   https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-vrf-05#section-5.4.1.1\\n  * @dev   step 5, to concatenate with a nonce then hash, and rehash with the\\n  * @dev   nonce updated until a valid x-ordinate is found.\\n\\n  * @dev - hashToCurve does not include a cipher version string or the byte 0x1\\n  * @dev   in the hash message, as recommended in step 5.B of the draft\\n  * @dev   standard. They are unnecessary here because no variation in the\\n  * @dev   cipher suite is allowed.\\n\\n  * @dev - Similarly, the hash input in scalarFromCurvePoints does not include a\\n  * @dev   commitment to the cipher suite, either, which differs from step 2 of\\n  * @dev   https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-vrf-05#section-5.4.3\\n  * @dev   . Also, the hash input is the concatenation of the uncompressed\\n  * @dev   points, not the compressed points as recommended in step 3.\\n\\n  * @dev - In the calculation of the challenge value \\\"c\\\", the \\\"u\\\" value (i.e.\\n  * @dev   the value computed by Reggie as the nonce times the secp256k1\\n  * @dev   generator point, see steps 5 and 7 of\\n  * @dev   https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-vrf-05#section-5.3\\n  * @dev   ) is replaced by its ethereum address, i.e. the lower 160 bits of the\\n  * @dev   keccak hash of the original u. This is because we only verify the\\n  * @dev   calculation of u up to its address, by abusing ECRECOVER.\\n  * ****************************************************************************\\n  * @dev   SECURITY PROPERTIES\\n\\n  * @dev Here are the security properties for this VRF:\\n\\n  * @dev Full uniqueness: For any seed and valid VRF public key, there is\\n  * @dev   exactly one VRF output which can be proved to come from that seed, in\\n  * @dev   the sense that the proof will pass verifyVRFProof.\\n\\n  * @dev Full collision resistance: It's cryptographically infeasible to find\\n  * @dev   two seeds with same VRF output from a fixed, valid VRF key\\n\\n  * @dev Full pseudorandomness: Absent the proofs that the VRF outputs are\\n  * @dev   derived from a given seed, the outputs are computationally\\n  * @dev   indistinguishable from randomness.\\n\\n  * @dev https://eprint.iacr.org/2017/099.pdf, Appendix B contains the proofs\\n  * @dev for these properties.\\n\\n  * @dev For secp256k1, the key validation described in section\\n  * @dev https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-vrf-05#section-5.6\\n  * @dev is unnecessary, because secp256k1 has cofactor 1, and the\\n  * @dev representation of the public key used here (affine x- and y-ordinates\\n  * @dev of the secp256k1 point on the standard y^2=x^3+7 curve) cannot refer to\\n  * @dev the point at infinity.\\n  * ****************************************************************************\\n  * @dev OTHER SECURITY CONSIDERATIONS\\n  *\\n  * @dev The seed input to the VRF could in principle force an arbitrary amount\\n  * @dev of work in hashToCurve, by requiring extra rounds of hashing and\\n  * @dev checking whether that's yielded the x ordinate of a secp256k1 point.\\n  * @dev However, under the Random Oracle Model the probability of choosing a\\n  * @dev point which forces n extra rounds in hashToCurve is 2\u207b\u207f. The base cost\\n  * @dev for calling hashToCurve is about 25,000 gas, and each round of checking\\n  * @dev for a valid x ordinate costs about 15,555 gas, so to find a seed for\\n  * @dev which hashToCurve would cost more than 2,017,000 gas, one would have to\\n  * @dev try, in expectation, about 2\u00b9\u00b2\u2078 seeds, which is infeasible for any\\n  * @dev foreseeable computational resources. (25,000 + 128 * 15,555 < 2,017,000.)\\n\\n  * @dev Since the gas block limit for the Ethereum main net is 10,000,000 gas,\\n  * @dev this means it is infeasible for an adversary to prevent correct\\n  * @dev operation of this contract by choosing an adverse seed.\\n\\n  * @dev (See TestMeasureHashToCurveGasCost for verification of the gas cost for\\n  * @dev hashToCurve.)\\n\\n  * @dev It may be possible to make a secure constant-time hashToCurve function.\\n  * @dev See notes in hashToCurve docstring.\\n*/\\ncontract VRF {\\n  // See https://www.secg.org/sec2-v2.pdf, section 2.4.1, for these constants.\\n  // Number of points in Secp256k1\\n  uint256 private constant GROUP_ORDER = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141;\\n  // Prime characteristic of the galois field over which Secp256k1 is defined\\n  uint256 private constant FIELD_SIZE =\\n    // solium-disable-next-line indentation\\n    0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFC2F;\\n  uint256 private constant WORD_LENGTH_BYTES = 0x20;\\n\\n  // (base^exponent) % FIELD_SIZE\\n  // Cribbed from https://medium.com/@rbkhmrcr/precompiles-solidity-e5d29bd428c4\\n  function bigModExp(uint256 base, uint256 exponent) internal view returns (uint256 exponentiation) {\\n    uint256 callResult;\\n    uint256[6] memory bigModExpContractInputs;\\n    bigModExpContractInputs[0] = WORD_LENGTH_BYTES; // Length of base\\n    bigModExpContractInputs[1] = WORD_LENGTH_BYTES; // Length of exponent\\n    bigModExpContractInputs[2] = WORD_LENGTH_BYTES; // Length of modulus\\n    bigModExpContractInputs[3] = base;\\n    bigModExpContractInputs[4] = exponent;\\n    bigModExpContractInputs[5] = FIELD_SIZE;\\n    uint256[1] memory output;\\n    assembly {\\n      // solhint-disable-line no-inline-assembly\\n      callResult := staticcall(\\n        not(0), // Gas cost: no limit\\n        0x05, // Bigmodexp contract address\\n        bigModExpContractInputs,\\n        0xc0, // Length of input segment: 6*0x20-bytes\\n        output,\\n        0x20 // Length of output segment\\n      )\\n    }\\n    if (callResult == 0) {\\n      revert(\\\"bigModExp failure!\\\");\\n    }\\n    return output[0];\\n  }\\n\\n  // Let q=FIELD_SIZE. q % 4 = 3, \u2234 x\u2261r^2 mod q \u21d2 x^SQRT_POWER\u2261\u00b1r mod q.  See\\n  // https://en.wikipedia.org/wiki/Modular_square_root#Prime_or_prime_power_modulus\\n  uint256 private constant SQRT_POWER = (FIELD_SIZE + 1) >> 2;\\n\\n  // Computes a s.t. a^2 = x in the field. Assumes a exists\\n  function squareRoot(uint256 x) internal view returns (uint256) {\\n    return bigModExp(x, SQRT_POWER);\\n  }\\n\\n  // The value of y^2 given that (x,y) is on secp256k1.\\n  function ySquared(uint256 x) internal pure returns (uint256) {\\n    // Curve is y^2=x^3+7. See section 2.4.1 of https://www.secg.org/sec2-v2.pdf\\n    uint256 xCubed = mulmod(x, mulmod(x, x, FIELD_SIZE), FIELD_SIZE);\\n    return addmod(xCubed, 7, FIELD_SIZE);\\n  }\\n\\n  // True iff p is on secp256k1\\n  function isOnCurve(uint256[2] memory p) internal pure returns (bool) {\\n    // Section 2.3.6. in https://www.secg.org/sec1-v2.pdf\\n    // requires each ordinate to be in [0, ..., FIELD_SIZE-1]\\n    require(p[0] < FIELD_SIZE, \\\"invalid x-ordinate\\\");\\n    require(p[1] < FIELD_SIZE, \\\"invalid y-ordinate\\\");\\n    return ySquared(p[0]) == mulmod(p[1], p[1], FIELD_SIZE);\\n  }\\n\\n  // Hash x uniformly into {0, ..., FIELD_SIZE-1}.\\n  function fieldHash(bytes memory b) internal pure returns (uint256 x_) {\\n    x_ = uint256(keccak256(b));\\n    // Rejecting if x >= FIELD_SIZE corresponds to step 2.1 in section 2.3.4 of\\n    // http://www.secg.org/sec1-v2.pdf , which is part of the definition of\\n    // string_to_point in the IETF draft\\n    while (x_ >= FIELD_SIZE) {\\n      x_ = uint256(keccak256(abi.encodePacked(x_)));\\n    }\\n  }\\n\\n  // Hash b to a random point which hopefully lies on secp256k1. The y ordinate\\n  // is always even, due to\\n  // https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-vrf-05#section-5.4.1.1\\n  // step 5.C, which references arbitrary_string_to_point, defined in\\n  // https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-vrf-05#section-5.5 as\\n  // returning the point with given x ordinate, and even y ordinate.\\n  function newCandidateSecp256k1Point(bytes memory b) internal view returns (uint256[2] memory p) {\\n    unchecked {\\n      p[0] = fieldHash(b);\\n      p[1] = squareRoot(ySquared(p[0]));\\n      if (p[1] % 2 == 1) {\\n        // Note that 0 <= p[1] < FIELD_SIZE\\n        // so this cannot wrap, we use unchecked to save gas.\\n        p[1] = FIELD_SIZE - p[1];\\n      }\\n    }\\n  }\\n\\n  // Domain-separation tag for initial hash in hashToCurve. Corresponds to\\n  // vrf.go/hashToCurveHashPrefix\\n  uint256 internal constant HASH_TO_CURVE_HASH_PREFIX = 1;\\n\\n  // Cryptographic hash function onto the curve.\\n  //\\n  // Corresponds to algorithm in section 5.4.1.1 of the draft standard. (But see\\n  // DESIGN NOTES above for slight differences.)\\n  //\\n  // TODO(alx): Implement a bounded-computation hash-to-curve, as described in\\n  // \\\"Construction of Rational Points on Elliptic Curves over Finite Fields\\\"\\n  // http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.831.5299&rep=rep1&type=pdf\\n  // and suggested by\\n  // https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-hash-to-curve-01#section-5.2.2\\n  // (Though we can't used exactly that because secp256k1's j-invariant is 0.)\\n  //\\n  // This would greatly simplify the analysis in \\\"OTHER SECURITY CONSIDERATIONS\\\"\\n  // https://www.pivotaltracker.com/story/show/171120900\\n  function hashToCurve(uint256[2] memory pk, uint256 input) internal view returns (uint256[2] memory rv) {\\n    rv = newCandidateSecp256k1Point(abi.encodePacked(HASH_TO_CURVE_HASH_PREFIX, pk, input));\\n    while (!isOnCurve(rv)) {\\n      rv = newCandidateSecp256k1Point(abi.encodePacked(rv[0]));\\n    }\\n  }\\n\\n  /** *********************************************************************\\n   * @notice Check that product==scalar*multiplicand\\n   *\\n   * @dev Based on Vitalik Buterin's idea in ethresear.ch post cited below.\\n   *\\n   * @param multiplicand: secp256k1 point\\n   * @param scalar: non-zero GF(GROUP_ORDER) scalar\\n   * @param product: secp256k1 expected to be multiplier * multiplicand\\n   * @return verifies true iff product==scalar*multiplicand, with cryptographically high probability\\n   */\\n  function ecmulVerify(\\n    uint256[2] memory multiplicand,\\n    uint256 scalar,\\n    uint256[2] memory product\\n  ) internal pure returns (bool verifies) {\\n    require(scalar != 0, \\\"zero scalar\\\"); // Rules out an ecrecover failure case\\n    uint256 x = multiplicand[0]; // x ordinate of multiplicand\\n    uint8 v = multiplicand[1] % 2 == 0 ? 27 : 28; // parity of y ordinate\\n    // https://ethresear.ch/t/you-can-kinda-abuse-ecrecover-to-do-ecmul-in-secp256k1-today/2384/9\\n    // Point corresponding to address ecrecover(0, v, x, s=scalar*x) is\\n    // (x\u207b\u00b9 mod GROUP_ORDER) * (scalar * x * multiplicand - 0 * g), i.e.\\n    // scalar*multiplicand. See https://crypto.stackexchange.com/a/18106\\n    bytes32 scalarTimesX = bytes32(mulmod(scalar, x, GROUP_ORDER));\\n    address actual = ecrecover(bytes32(0), v, bytes32(x), scalarTimesX);\\n    // Explicit conversion to address takes bottom 160 bits\\n    address expected = address(uint160(uint256(keccak256(abi.encodePacked(product)))));\\n    return (actual == expected);\\n  }\\n\\n  // Returns x1/z1-x2/z2=(x1z2-x2z1)/(z1z2) in projective coordinates on P\u00b9(\ud835\udd3d\u2099)\\n  function projectiveSub(\\n    uint256 x1,\\n    uint256 z1,\\n    uint256 x2,\\n    uint256 z2\\n  ) internal pure returns (uint256 x3, uint256 z3) {\\n    unchecked {\\n      uint256 num1 = mulmod(z2, x1, FIELD_SIZE);\\n      // Note this cannot wrap since x2 is a point in [0, FIELD_SIZE-1]\\n      // we use unchecked to save gas.\\n      uint256 num2 = mulmod(FIELD_SIZE - x2, z1, FIELD_SIZE);\\n      (x3, z3) = (addmod(num1, num2, FIELD_SIZE), mulmod(z1, z2, FIELD_SIZE));\\n    }\\n  }\\n\\n  // Returns x1/z1*x2/z2=(x1x2)/(z1z2), in projective coordinates on P\u00b9(\ud835\udd3d\u2099)\\n  function projectiveMul(\\n    uint256 x1,\\n    uint256 z1,\\n    uint256 x2,\\n    uint256 z2\\n  ) internal pure returns (uint256 x3, uint256 z3) {\\n    (x3, z3) = (mulmod(x1, x2, FIELD_SIZE), mulmod(z1, z2, FIELD_SIZE));\\n  }\\n\\n  /** **************************************************************************\\n        @notice Computes elliptic-curve sum, in projective co-ordinates\\n\\n        @dev Using projective coordinates avoids costly divisions\\n\\n        @dev To use this with p and q in affine coordinates, call\\n        @dev projectiveECAdd(px, py, qx, qy). This will return\\n        @dev the addition of (px, py, 1) and (qx, qy, 1), in the\\n        @dev secp256k1 group.\\n\\n        @dev This can be used to calculate the z which is the inverse to zInv\\n        @dev in isValidVRFOutput. But consider using a faster\\n        @dev re-implementation such as ProjectiveECAdd in the golang vrf package.\\n\\n        @dev This function assumes [px,py,1],[qx,qy,1] are valid projective\\n             coordinates of secp256k1 points. That is safe in this contract,\\n             because this method is only used by linearCombination, which checks\\n             points are on the curve via ecrecover.\\n        **************************************************************************\\n        @param px The first affine coordinate of the first summand\\n        @param py The second affine coordinate of the first summand\\n        @param qx The first affine coordinate of the second summand\\n        @param qy The second affine coordinate of the second summand\\n\\n        (px,py) and (qx,qy) must be distinct, valid secp256k1 points.\\n        **************************************************************************\\n        Return values are projective coordinates of [px,py,1]+[qx,qy,1] as points\\n        on secp256k1, in P\u00b2(\ud835\udd3d\u2099)\\n        @return sx\\n        @return sy\\n        @return sz\\n    */\\n  function projectiveECAdd(\\n    uint256 px,\\n    uint256 py,\\n    uint256 qx,\\n    uint256 qy\\n  ) internal pure returns (uint256 sx, uint256 sy, uint256 sz) {\\n    unchecked {\\n      // See \\\"Group law for E/K : y^2 = x^3 + ax + b\\\", in section 3.1.2, p. 80,\\n      // \\\"Guide to Elliptic Curve Cryptography\\\" by Hankerson, Menezes and Vanstone\\n      // We take the equations there for (sx,sy), and homogenize them to\\n      // projective coordinates. That way, no inverses are required, here, and we\\n      // only need the one inverse in affineECAdd.\\n\\n      // We only need the \\\"point addition\\\" equations from Hankerson et al. Can\\n      // skip the \\\"point doubling\\\" equations because p1 == p2 is cryptographically\\n      // impossible, and required not to be the case in linearCombination.\\n\\n      // Add extra \\\"projective coordinate\\\" to the two points\\n      (uint256 z1, uint256 z2) = (1, 1);\\n\\n      // (lx, lz) = (qy-py)/(qx-px), i.e., gradient of secant line.\\n      // Cannot wrap since px and py are in [0, FIELD_SIZE-1]\\n      uint256 lx = addmod(qy, FIELD_SIZE - py, FIELD_SIZE);\\n      uint256 lz = addmod(qx, FIELD_SIZE - px, FIELD_SIZE);\\n\\n      uint256 dx; // Accumulates denominator from sx calculation\\n      // sx=((qy-py)/(qx-px))^2-px-qx\\n      (sx, dx) = projectiveMul(lx, lz, lx, lz); // ((qy-py)/(qx-px))^2\\n      (sx, dx) = projectiveSub(sx, dx, px, z1); // ((qy-py)/(qx-px))^2-px\\n      (sx, dx) = projectiveSub(sx, dx, qx, z2); // ((qy-py)/(qx-px))^2-px-qx\\n\\n      uint256 dy; // Accumulates denominator from sy calculation\\n      // sy=((qy-py)/(qx-px))(px-sx)-py\\n      (sy, dy) = projectiveSub(px, z1, sx, dx); // px-sx\\n      (sy, dy) = projectiveMul(sy, dy, lx, lz); // ((qy-py)/(qx-px))(px-sx)\\n      (sy, dy) = projectiveSub(sy, dy, py, z1); // ((qy-py)/(qx-px))(px-sx)-py\\n\\n      if (dx != dy) {\\n        // Cross-multiply to put everything over a common denominator\\n        sx = mulmod(sx, dy, FIELD_SIZE);\\n        sy = mulmod(sy, dx, FIELD_SIZE);\\n        sz = mulmod(dx, dy, FIELD_SIZE);\\n      } else {\\n        // Already over a common denominator, use that for z ordinate\\n        sz = dx;\\n      }\\n    }\\n  }\\n\\n  // p1+p2, as affine points on secp256k1.\\n  //\\n  // invZ must be the inverse of the z returned by projectiveECAdd(p1, p2).\\n  // It is computed off-chain to save gas.\\n  //\\n  // p1 and p2 must be distinct, because projectiveECAdd doesn't handle\\n  // point doubling.\\n  function affineECAdd(\\n    uint256[2] memory p1,\\n    uint256[2] memory p2,\\n    uint256 invZ\\n  ) internal pure returns (uint256[2] memory) {\\n    uint256 x;\\n    uint256 y;\\n    uint256 z;\\n    (x, y, z) = projectiveECAdd(p1[0], p1[1], p2[0], p2[1]);\\n    require(mulmod(z, invZ, FIELD_SIZE) == 1, \\\"invZ must be inverse of z\\\");\\n    // Clear the z ordinate of the projective representation by dividing through\\n    // by it, to obtain the affine representation\\n    return [mulmod(x, invZ, FIELD_SIZE), mulmod(y, invZ, FIELD_SIZE)];\\n  }\\n\\n  // True iff address(c*p+s*g) == lcWitness, where g is generator. (With\\n  // cryptographically high probability.)\\n  function verifyLinearCombinationWithGenerator(\\n    uint256 c,\\n    uint256[2] memory p,\\n    uint256 s,\\n    address lcWitness\\n  ) internal pure returns (bool) {\\n    // Rule out ecrecover failure modes which return address 0.\\n    unchecked {\\n      require(lcWitness != address(0), \\\"bad witness\\\");\\n      uint8 v = (p[1] % 2 == 0) ? 27 : 28; // parity of y-ordinate of p\\n      // Note this cannot wrap (X - Y % X), but we use unchecked to save\\n      // gas.\\n      bytes32 pseudoHash = bytes32(GROUP_ORDER - mulmod(p[0], s, GROUP_ORDER)); // -s*p[0]\\n      bytes32 pseudoSignature = bytes32(mulmod(c, p[0], GROUP_ORDER)); // c*p[0]\\n      // https://ethresear.ch/t/you-can-kinda-abuse-ecrecover-to-do-ecmul-in-secp256k1-today/2384/9\\n      // The point corresponding to the address returned by\\n      // ecrecover(-s*p[0],v,p[0],c*p[0]) is\\n      // (p[0]\u207b\u00b9 mod GROUP_ORDER)*(c*p[0]-(-s)*p[0]*g)=c*p+s*g.\\n      // See https://crypto.stackexchange.com/a/18106\\n      // https://bitcoin.stackexchange.com/questions/38351/ecdsa-v-r-s-what-is-v\\n      address computed = ecrecover(pseudoHash, v, bytes32(p[0]), pseudoSignature);\\n      return computed == lcWitness;\\n    }\\n  }\\n\\n  // c*p1 + s*p2. Requires cp1Witness=c*p1 and sp2Witness=s*p2. Also\\n  // requires cp1Witness != sp2Witness (which is fine for this application,\\n  // since it is cryptographically impossible for them to be equal. In the\\n  // (cryptographically impossible) case that a prover accidentally derives\\n  // a proof with equal c*p1 and s*p2, they should retry with a different\\n  // proof nonce.) Assumes that all points are on secp256k1\\n  // (which is checked in verifyVRFProof below.)\\n  function linearCombination(\\n    uint256 c,\\n    uint256[2] memory p1,\\n    uint256[2] memory cp1Witness,\\n    uint256 s,\\n    uint256[2] memory p2,\\n    uint256[2] memory sp2Witness,\\n    uint256 zInv\\n  ) internal pure returns (uint256[2] memory) {\\n    unchecked {\\n      // Note we are relying on the wrap around here\\n      require((cp1Witness[0] % FIELD_SIZE) != (sp2Witness[0] % FIELD_SIZE), \\\"points in sum must be distinct\\\");\\n      require(ecmulVerify(p1, c, cp1Witness), \\\"First mul check failed\\\");\\n      require(ecmulVerify(p2, s, sp2Witness), \\\"Second mul check failed\\\");\\n      return affineECAdd(cp1Witness, sp2Witness, zInv);\\n    }\\n  }\\n\\n  // Domain-separation tag for the hash taken in scalarFromCurvePoints.\\n  // Corresponds to scalarFromCurveHashPrefix in vrf.go\\n  uint256 internal constant SCALAR_FROM_CURVE_POINTS_HASH_PREFIX = 2;\\n\\n  // Pseudo-random number from inputs. Matches vrf.go/scalarFromCurvePoints, and\\n  // https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-vrf-05#section-5.4.3\\n  // The draft calls (in step 7, via the definition of string_to_int, in\\n  // https://datatracker.ietf.org/doc/html/rfc8017#section-4.2 ) for taking the\\n  // first hash without checking that it corresponds to a number less than the\\n  // group order, which will lead to a slight bias in the sample.\\n  //\\n  // TODO(alx): We could save a bit of gas by following the standard here and\\n  // using the compressed representation of the points, if we collated the y\\n  // parities into a single bytes32.\\n  // https://www.pivotaltracker.com/story/show/171120588\\n  function scalarFromCurvePoints(\\n    uint256[2] memory hash,\\n    uint256[2] memory pk,\\n    uint256[2] memory gamma,\\n    address uWitness,\\n    uint256[2] memory v\\n  ) internal pure returns (uint256 s) {\\n    return uint256(keccak256(abi.encodePacked(SCALAR_FROM_CURVE_POINTS_HASH_PREFIX, hash, pk, gamma, v, uWitness)));\\n  }\\n\\n  // True if (gamma, c, s) is a correctly constructed randomness proof from pk\\n  // and seed. zInv must be the inverse of the third ordinate from\\n  // projectiveECAdd applied to cGammaWitness and sHashWitness. Corresponds to\\n  // section 5.3 of the IETF draft.\\n  //\\n  // TODO(alx): Since I'm only using pk in the ecrecover call, I could only pass\\n  // the x ordinate, and the parity of the y ordinate in the top bit of uWitness\\n  // (which I could make a uint256 without using any extra space.) Would save\\n  // about 2000 gas. https://www.pivotaltracker.com/story/show/170828567\\n  function verifyVRFProof(\\n    uint256[2] memory pk,\\n    uint256[2] memory gamma,\\n    uint256 c,\\n    uint256 s,\\n    uint256 seed,\\n    address uWitness,\\n    uint256[2] memory cGammaWitness,\\n    uint256[2] memory sHashWitness,\\n    uint256 zInv\\n  ) internal view {\\n    unchecked {\\n      require(isOnCurve(pk), \\\"public key is not on curve\\\");\\n      require(isOnCurve(gamma), \\\"gamma is not on curve\\\");\\n      require(isOnCurve(cGammaWitness), \\\"cGammaWitness is not on curve\\\");\\n      require(isOnCurve(sHashWitness), \\\"sHashWitness is not on curve\\\");\\n      // Step 5. of IETF draft section 5.3 (pk corresponds to 5.3's Y, and here\\n      // we use the address of u instead of u itself. Also, here we add the\\n      // terms instead of taking the difference, and in the proof construction in\\n      // vrf.GenerateProof, we correspondingly take the difference instead of\\n      // taking the sum as they do in step 7 of section 5.1.)\\n      require(verifyLinearCombinationWithGenerator(c, pk, s, uWitness), \\\"addr(c*pk+s*g)!=_uWitness\\\");\\n      // Step 4. of IETF draft section 5.3 (pk corresponds to Y, seed to alpha_string)\\n      uint256[2] memory hash = hashToCurve(pk, seed);\\n      // Step 6. of IETF draft section 5.3, but see note for step 5 about +/- terms\\n      uint256[2] memory v = linearCombination(c, gamma, cGammaWitness, s, hash, sHashWitness, zInv);\\n      // Steps 7. and 8. of IETF draft section 5.3\\n      uint256 derivedC = scalarFromCurvePoints(hash, pk, gamma, uWitness, v);\\n      require(c == derivedC, \\\"invalid proof\\\");\\n    }\\n  }\\n\\n  // Domain-separation tag for the hash used as the final VRF output.\\n  // Corresponds to vrfRandomOutputHashPrefix in vrf.go\\n  uint256 internal constant VRF_RANDOM_OUTPUT_HASH_PREFIX = 3;\\n\\n  struct Proof {\\n    uint256[2] pk;\\n    uint256[2] gamma;\\n    uint256 c;\\n    uint256 s;\\n    uint256 seed;\\n    address uWitness;\\n    uint256[2] cGammaWitness;\\n    uint256[2] sHashWitness;\\n    uint256 zInv;\\n  }\\n\\n  /* ***************************************************************************\\n     * @notice Returns proof's output, if proof is valid. Otherwise reverts\\n\\n     * @param proof vrf proof components\\n     * @param seed  seed used to generate the vrf output\\n     *\\n     * Throws if proof is invalid, otherwise:\\n     * @return output i.e., the random output implied by the proof\\n     * ***************************************************************************\\n     */\\n  function randomValueFromVRFProof(Proof memory proof, uint256 seed) internal view returns (uint256 output) {\\n    verifyVRFProof(\\n      proof.pk,\\n      proof.gamma,\\n      proof.c,\\n      proof.s,\\n      seed,\\n      proof.uWitness,\\n      proof.cGammaWitness,\\n      proof.sHashWitness,\\n      proof.zInv\\n    );\\n    output = uint256(keccak256(abi.encode(VRF_RANDOM_OUTPUT_HASH_PREFIX, proof.gamma)));\\n  }\\n}\\n\"\r\n    },\r\n    \"@chainlink/contracts/src/v0.8/vrf/VRFConsumerBaseV2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/** ****************************************************************************\\n * @notice Interface for contracts using VRF randomness\\n * *****************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\\n * @dev making his output up to suit himself. Reggie provides Vera a public key\\n * @dev to which he knows the secret key. Each time Vera provides a seed to\\n * @dev Reggie, he gives back a value which is computed completely\\n * @dev deterministically from the seed and the secret key.\\n *\\n * @dev Reggie provides a proof by which Vera can verify that the output was\\n * @dev correctly computed once Reggie tells it to her, but without that proof,\\n * @dev the output is indistinguishable to her from a uniform random sample\\n * @dev from the output space.\\n *\\n * @dev The purpose of this contract is to make it easy for unrelated contracts\\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\\n * @dev 1. The fulfillment came from the VRFCoordinator\\n * @dev 2. The consumer contract implements fulfillRandomWords.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\\n * @dev initialize VRFConsumerBase's attributes in their constructor as\\n * @dev shown:\\n *\\n * @dev   contract VRFConsumer {\\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\\n * @dev         <initialization with other arguments goes here>\\n * @dev       }\\n * @dev   }\\n *\\n * @dev The oracle will have given you an ID for the VRF keypair they have\\n * @dev committed to (let's call it keyHash). Create subscription, fund it\\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\\n * @dev subscription management functions).\\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\\n * @dev callbackGasLimit, numWords),\\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\\n *\\n * @dev Once the VRFCoordinator has received and validated the oracle's response\\n * @dev to your request, it will call your contract's fulfillRandomWords method.\\n *\\n * @dev The randomness argument to fulfillRandomWords is a set of random words\\n * @dev generated from your requestId and the blockHash of the request.\\n *\\n * @dev If your contract could have concurrent requests open, you can use the\\n * @dev requestId returned from requestRandomWords to track which response is associated\\n * @dev with which randomness request.\\n * @dev See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,\\n * @dev if your contract could have multiple requests in flight simultaneously.\\n *\\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\\n * @dev differ.\\n *\\n * *****************************************************************************\\n * @dev SECURITY CONSIDERATIONS\\n *\\n * @dev A method with the ability to call your fulfillRandomness method directly\\n * @dev could spoof a VRF response with any random value, so it's critical that\\n * @dev it cannot be directly called by anything other than this base contract\\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\\n *\\n * @dev For your users to trust that your contract's random behavior is free\\n * @dev from malicious interference, it's best if you can write it so that all\\n * @dev behaviors implied by a VRF response are executed *during* your\\n * @dev fulfillRandomness method. If your contract must store the response (or\\n * @dev anything derived from it) and use it later, you must ensure that any\\n * @dev user-significant behavior which depends on that stored value cannot be\\n * @dev manipulated by a subsequent VRF request.\\n *\\n * @dev Similarly, both miners and the VRF oracle itself have some influence\\n * @dev over the order in which VRF responses appear on the blockchain, so if\\n * @dev your contract could have multiple VRF requests in flight simultaneously,\\n * @dev you must ensure that the order in which the VRF responses arrive cannot\\n * @dev be used to manipulate your contract's user-significant behavior.\\n *\\n * @dev Since the block hash of the block which contains the requestRandomness\\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\\n * @dev miner could, in principle, fork the blockchain to evict the block\\n * @dev containing the request, forcing the request to be included in a\\n * @dev different block with a different hash, and therefore a different input\\n * @dev to the VRF. However, such an attack would incur a substantial economic\\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\\n * @dev until it calls responds to a request. It is for this reason that\\n * @dev that you can signal to an oracle you'd like them to wait longer before\\n * @dev responding to the request (however this is not enforced in the contract\\n * @dev and so remains effective only in the case of unmodified oracle software).\\n */\\nabstract contract VRFConsumerBaseV2 {\\n  error OnlyCoordinatorCanFulfill(address have, address want);\\n  address private immutable vrfCoordinator;\\n\\n  /**\\n   * @param _vrfCoordinator address of VRFCoordinator contract\\n   */\\n  constructor(address _vrfCoordinator) {\\n    vrfCoordinator = _vrfCoordinator;\\n  }\\n\\n  /**\\n   * @notice fulfillRandomness handles the VRF response. Your contract must\\n   * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\n   * @notice principles to keep in mind when implementing your fulfillRandomness\\n   * @notice method.\\n   *\\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\\n   * @dev signature, and will call it once it has verified the proof\\n   * @dev associated with the randomness. (It is triggered via a call to\\n   * @dev rawFulfillRandomness, below.)\\n   *\\n   * @param requestId The Id initially returned by requestRandomness\\n   * @param randomWords the VRF output expanded to the requested number of words\\n   */\\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\\n\\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\n  // the origin of the call\\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\\n    if (msg.sender != vrfCoordinator) {\\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\\n    }\\n    fulfillRandomWords(requestId, randomWords);\\n  }\\n}\\n\"\r\n    },\r\n    \"@chainlink/contracts/src/v0.8/vrf/VRFCoordinatorV2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"../shared/interfaces/LinkTokenInterface.sol\\\";\\nimport \\\"../interfaces/BlockhashStoreInterface.sol\\\";\\nimport \\\"../interfaces/AggregatorV3Interface.sol\\\";\\nimport \\\"../interfaces/VRFCoordinatorV2Interface.sol\\\";\\nimport \\\"../interfaces/TypeAndVersionInterface.sol\\\";\\nimport \\\"../shared/interfaces/IERC677Receiver.sol\\\";\\nimport \\\"./VRF.sol\\\";\\nimport \\\"../shared/access/ConfirmedOwner.sol\\\";\\nimport \\\"./VRFConsumerBaseV2.sol\\\";\\nimport \\\"../ChainSpecificUtil.sol\\\";\\n\\ncontract VRFCoordinatorV2 is VRF, ConfirmedOwner, TypeAndVersionInterface, VRFCoordinatorV2Interface, IERC677Receiver {\\n  LinkTokenInterface public immutable LINK;\\n  AggregatorV3Interface public immutable LINK_ETH_FEED;\\n  BlockhashStoreInterface public immutable BLOCKHASH_STORE;\\n\\n  // We need to maintain a list of consuming addresses.\\n  // This bound ensures we are able to loop over them as needed.\\n  // Should a user require more consumers, they can use multiple subscriptions.\\n  uint16 public constant MAX_CONSUMERS = 100;\\n  error TooManyConsumers();\\n  error InsufficientBalance();\\n  error InvalidConsumer(uint64 subId, address consumer);\\n  error InvalidSubscription();\\n  error OnlyCallableFromLink();\\n  error InvalidCalldata();\\n  error MustBeSubOwner(address owner);\\n  error PendingRequestExists();\\n  error MustBeRequestedOwner(address proposedOwner);\\n  error BalanceInvariantViolated(uint256 internalBalance, uint256 externalBalance); // Should never happen\\n  event FundsRecovered(address to, uint256 amount);\\n  // We use the subscription struct (1 word)\\n  // at fulfillment time.\\n  struct Subscription {\\n    // There are only 1e9*1e18 = 1e27 juels in existence, so the balance can fit in uint96 (2^96 ~ 7e28)\\n    uint96 balance; // Common link balance used for all consumer requests.\\n    uint64 reqCount; // For fee tiers\\n  }\\n  // We use the config for the mgmt APIs\\n  struct SubscriptionConfig {\\n    address owner; // Owner can fund/withdraw/cancel the sub.\\n    address requestedOwner; // For safely transferring sub ownership.\\n    // Maintains the list of keys in s_consumers.\\n    // We do this for 2 reasons:\\n    // 1. To be able to clean up all keys from s_consumers when canceling a subscription.\\n    // 2. To be able to return the list of all consumers in getSubscription.\\n    // Note that we need the s_consumers map to be able to directly check if a\\n    // consumer is valid without reading all the consumers from storage.\\n    address[] consumers;\\n  }\\n  // Note a nonce of 0 indicates an the consumer is not assigned to that subscription.\\n  mapping(address => mapping(uint64 => uint64)) /* consumer */ /* subId */ /* nonce */ private s_consumers;\\n  mapping(uint64 => SubscriptionConfig) /* subId */ /* subscriptionConfig */ private s_subscriptionConfigs;\\n  mapping(uint64 => Subscription) /* subId */ /* subscription */ private s_subscriptions;\\n  // We make the sub count public so that its possible to\\n  // get all the current subscriptions via getSubscription.\\n  uint64 private s_currentSubId;\\n  // s_totalBalance tracks the total link sent to/from\\n  // this contract through onTokenTransfer, cancelSubscription and oracleWithdraw.\\n  // A discrepancy with this contract's link balance indicates someone\\n  // sent tokens using transfer and so we may need to use recoverFunds.\\n  uint96 private s_totalBalance;\\n  event SubscriptionCreated(uint64 indexed subId, address owner);\\n  event SubscriptionFunded(uint64 indexed subId, uint256 oldBalance, uint256 newBalance);\\n  event SubscriptionConsumerAdded(uint64 indexed subId, address consumer);\\n  event SubscriptionConsumerRemoved(uint64 indexed subId, address consumer);\\n  event SubscriptionCanceled(uint64 indexed subId, address to, uint256 amount);\\n  event SubscriptionOwnerTransferRequested(uint64 indexed subId, address from, address to);\\n  event SubscriptionOwnerTransferred(uint64 indexed subId, address from, address to);\\n\\n  // Set this maximum to 200 to give us a 56 block window to fulfill\\n  // the request before requiring the block hash feeder.\\n  uint16 public constant MAX_REQUEST_CONFIRMATIONS = 200;\\n  uint32 public constant MAX_NUM_WORDS = 500;\\n  // 5k is plenty for an EXTCODESIZE call (2600) + warm CALL (100)\\n  // and some arithmetic operations.\\n  uint256 private constant GAS_FOR_CALL_EXACT_CHECK = 5_000;\\n  error InvalidRequestConfirmations(uint16 have, uint16 min, uint16 max);\\n  error GasLimitTooBig(uint32 have, uint32 want);\\n  error NumWordsTooBig(uint32 have, uint32 want);\\n  error ProvingKeyAlreadyRegistered(bytes32 keyHash);\\n  error NoSuchProvingKey(bytes32 keyHash);\\n  error InvalidLinkWeiPrice(int256 linkWei);\\n  error InsufficientGasForConsumer(uint256 have, uint256 want);\\n  error NoCorrespondingRequest();\\n  error IncorrectCommitment();\\n  error BlockhashNotInStore(uint256 blockNum);\\n  error PaymentTooLarge();\\n  error Reentrant();\\n  struct RequestCommitment {\\n    uint64 blockNum;\\n    uint64 subId;\\n    uint32 callbackGasLimit;\\n    uint32 numWords;\\n    address sender;\\n  }\\n  mapping(bytes32 => address) /* keyHash */ /* oracle */ private s_provingKeys;\\n  bytes32[] private s_provingKeyHashes;\\n  mapping(address => uint96) /* oracle */ /* LINK balance */ private s_withdrawableTokens;\\n  mapping(uint256 => bytes32) /* requestID */ /* commitment */ private s_requestCommitments;\\n  event ProvingKeyRegistered(bytes32 keyHash, address indexed oracle);\\n  event ProvingKeyDeregistered(bytes32 keyHash, address indexed oracle);\\n  event RandomWordsRequested(\\n    bytes32 indexed keyHash,\\n    uint256 requestId,\\n    uint256 preSeed,\\n    uint64 indexed subId,\\n    uint16 minimumRequestConfirmations,\\n    uint32 callbackGasLimit,\\n    uint32 numWords,\\n    address indexed sender\\n  );\\n  event RandomWordsFulfilled(uint256 indexed requestId, uint256 outputSeed, uint96 payment, bool success);\\n\\n  struct Config {\\n    uint16 minimumRequestConfirmations;\\n    uint32 maxGasLimit;\\n    // Reentrancy protection.\\n    bool reentrancyLock;\\n    // stalenessSeconds is how long before we consider the feed price to be stale\\n    // and fallback to fallbackWeiPerUnitLink.\\n    uint32 stalenessSeconds;\\n    // Gas to cover oracle payment after we calculate the payment.\\n    // We make it configurable in case those operations are repriced.\\n    uint32 gasAfterPaymentCalculation;\\n  }\\n  int256 private s_fallbackWeiPerUnitLink;\\n  Config private s_config;\\n  FeeConfig private s_feeConfig;\\n  struct FeeConfig {\\n    // Flat fee charged per fulfillment in millionths of link\\n    // So fee range is [0, 2^32/10^6].\\n    uint32 fulfillmentFlatFeeLinkPPMTier1;\\n    uint32 fulfillmentFlatFeeLinkPPMTier2;\\n    uint32 fulfillmentFlatFeeLinkPPMTier3;\\n    uint32 fulfillmentFlatFeeLinkPPMTier4;\\n    uint32 fulfillmentFlatFeeLinkPPMTier5;\\n    uint24 reqsForTier2;\\n    uint24 reqsForTier3;\\n    uint24 reqsForTier4;\\n    uint24 reqsForTier5;\\n  }\\n  event ConfigSet(\\n    uint16 minimumRequestConfirmations,\\n    uint32 maxGasLimit,\\n    uint32 stalenessSeconds,\\n    uint32 gasAfterPaymentCalculation,\\n    int256 fallbackWeiPerUnitLink,\\n    FeeConfig feeConfig\\n  );\\n\\n  constructor(address link, address blockhashStore, address linkEthFeed) ConfirmedOwner(msg.sender) {\\n    LINK = LinkTokenInterface(link);\\n    LINK_ETH_FEED = AggregatorV3Interface(linkEthFeed);\\n    BLOCKHASH_STORE = BlockhashStoreInterface(blockhashStore);\\n  }\\n\\n  /**\\n   * @notice Registers a proving key to an oracle.\\n   * @param oracle address of the oracle\\n   * @param publicProvingKey key that oracle can use to submit vrf fulfillments\\n   */\\n  function registerProvingKey(address oracle, uint256[2] calldata publicProvingKey) external onlyOwner {\\n    bytes32 kh = hashOfKey(publicProvingKey);\\n    if (s_provingKeys[kh] != address(0)) {\\n      revert ProvingKeyAlreadyRegistered(kh);\\n    }\\n    s_provingKeys[kh] = oracle;\\n    s_provingKeyHashes.push(kh);\\n    emit ProvingKeyRegistered(kh, oracle);\\n  }\\n\\n  /**\\n   * @notice Deregisters a proving key to an oracle.\\n   * @param publicProvingKey key that oracle can use to submit vrf fulfillments\\n   */\\n  function deregisterProvingKey(uint256[2] calldata publicProvingKey) external onlyOwner {\\n    bytes32 kh = hashOfKey(publicProvingKey);\\n    address oracle = s_provingKeys[kh];\\n    if (oracle == address(0)) {\\n      revert NoSuchProvingKey(kh);\\n    }\\n    delete s_provingKeys[kh];\\n    for (uint256 i = 0; i < s_provingKeyHashes.length; i++) {\\n      if (s_provingKeyHashes[i] == kh) {\\n        bytes32 last = s_provingKeyHashes[s_provingKeyHashes.length - 1];\\n        // Copy last element and overwrite kh to be deleted with it\\n        s_provingKeyHashes[i] = last;\\n        s_provingKeyHashes.pop();\\n      }\\n    }\\n    emit ProvingKeyDeregistered(kh, oracle);\\n  }\\n\\n  /**\\n   * @notice Returns the proving key hash key associated with this public key\\n   * @param publicKey the key to return the hash of\\n   */\\n  function hashOfKey(uint256[2] memory publicKey) public pure returns (bytes32) {\\n    return keccak256(abi.encode(publicKey));\\n  }\\n\\n  /**\\n   * @notice Sets the configuration of the vrfv2 coordinator\\n   * @param minimumRequestConfirmations global min for request confirmations\\n   * @param maxGasLimit global max for request gas limit\\n   * @param stalenessSeconds if the eth/link feed is more stale then this, use the fallback price\\n   * @param gasAfterPaymentCalculation gas used in doing accounting after completing the gas measurement\\n   * @param fallbackWeiPerUnitLink fallback eth/link price in the case of a stale feed\\n   * @param feeConfig fee tier configuration\\n   */\\n  function setConfig(\\n    uint16 minimumRequestConfirmations,\\n    uint32 maxGasLimit,\\n    uint32 stalenessSeconds,\\n    uint32 gasAfterPaymentCalculation,\\n    int256 fallbackWeiPerUnitLink,\\n    FeeConfig memory feeConfig\\n  ) external onlyOwner {\\n    if (minimumRequestConfirmations > MAX_REQUEST_CONFIRMATIONS) {\\n      revert InvalidRequestConfirmations(\\n        minimumRequestConfirmations,\\n        minimumRequestConfirmations,\\n        MAX_REQUEST_CONFIRMATIONS\\n      );\\n    }\\n    if (fallbackWeiPerUnitLink <= 0) {\\n      revert InvalidLinkWeiPrice(fallbackWeiPerUnitLink);\\n    }\\n    s_config = Config({\\n      minimumRequestConfirmations: minimumRequestConfirmations,\\n      maxGasLimit: maxGasLimit,\\n      stalenessSeconds: stalenessSeconds,\\n      gasAfterPaymentCalculation: gasAfterPaymentCalculation,\\n      reentrancyLock: false\\n    });\\n    s_feeConfig = feeConfig;\\n    s_fallbackWeiPerUnitLink = fallbackWeiPerUnitLink;\\n    emit ConfigSet(\\n      minimumRequestConfirmations,\\n      maxGasLimit,\\n      stalenessSeconds,\\n      gasAfterPaymentCalculation,\\n      fallbackWeiPerUnitLink,\\n      s_feeConfig\\n    );\\n  }\\n\\n  function getConfig()\\n    external\\n    view\\n    returns (\\n      uint16 minimumRequestConfirmations,\\n      uint32 maxGasLimit,\\n      uint32 stalenessSeconds,\\n      uint32 gasAfterPaymentCalculation\\n    )\\n  {\\n    return (\\n      s_config.minimumRequestConfirmations,\\n      s_config.maxGasLimit,\\n      s_config.stalenessSeconds,\\n      s_config.gasAfterPaymentCalculation\\n    );\\n  }\\n\\n  function getFeeConfig()\\n    external\\n    view\\n    returns (\\n      uint32 fulfillmentFlatFeeLinkPPMTier1,\\n      uint32 fulfillmentFlatFeeLinkPPMTier2,\\n      uint32 fulfillmentFlatFeeLinkPPMTier3,\\n      uint32 fulfillmentFlatFeeLinkPPMTier4,\\n      uint32 fulfillmentFlatFeeLinkPPMTier5,\\n      uint24 reqsForTier2,\\n      uint24 reqsForTier3,\\n      uint24 reqsForTier4,\\n      uint24 reqsForTier5\\n    )\\n  {\\n    return (\\n      s_feeConfig.fulfillmentFlatFeeLinkPPMTier1,\\n      s_feeConfig.fulfillmentFlatFeeLinkPPMTier2,\\n      s_feeConfig.fulfillmentFlatFeeLinkPPMTier3,\\n      s_feeConfig.fulfillmentFlatFeeLinkPPMTier4,\\n      s_feeConfig.fulfillmentFlatFeeLinkPPMTier5,\\n      s_feeConfig.reqsForTier2,\\n      s_feeConfig.reqsForTier3,\\n      s_feeConfig.reqsForTier4,\\n      s_feeConfig.reqsForTier5\\n    );\\n  }\\n\\n  function getTotalBalance() external view returns (uint256) {\\n    return s_totalBalance;\\n  }\\n\\n  function getFallbackWeiPerUnitLink() external view returns (int256) {\\n    return s_fallbackWeiPerUnitLink;\\n  }\\n\\n  /**\\n   * @notice Owner cancel subscription, sends remaining link directly to the subscription owner.\\n   * @param subId subscription id\\n   * @dev notably can be called even if there are pending requests, outstanding ones may fail onchain\\n   */\\n  function ownerCancelSubscription(uint64 subId) external onlyOwner {\\n    if (s_subscriptionConfigs[subId].owner == address(0)) {\\n      revert InvalidSubscription();\\n    }\\n    cancelSubscriptionHelper(subId, s_subscriptionConfigs[subId].owner);\\n  }\\n\\n  /**\\n   * @notice Recover link sent with transfer instead of transferAndCall.\\n   * @param to address to send link to\\n   */\\n  function recoverFunds(address to) external onlyOwner {\\n    uint256 externalBalance = LINK.balanceOf(address(this));\\n    uint256 internalBalance = uint256(s_totalBalance);\\n    if (internalBalance > externalBalance) {\\n      revert BalanceInvariantViolated(internalBalance, externalBalance);\\n    }\\n    if (internalBalance < externalBalance) {\\n      uint256 amount = externalBalance - internalBalance;\\n      LINK.transfer(to, amount);\\n      emit FundsRecovered(to, amount);\\n    }\\n    // If the balances are equal, nothing to be done.\\n  }\\n\\n  /**\\n   * @inheritdoc VRFCoordinatorV2Interface\\n   */\\n  function getRequestConfig() external view override returns (uint16, uint32, bytes32[] memory) {\\n    return (s_config.minimumRequestConfirmations, s_config.maxGasLimit, s_provingKeyHashes);\\n  }\\n\\n  /**\\n   * @inheritdoc VRFCoordinatorV2Interface\\n   */\\n  function requestRandomWords(\\n    bytes32 keyHash,\\n    uint64 subId,\\n    uint16 requestConfirmations,\\n    uint32 callbackGasLimit,\\n    uint32 numWords\\n  ) external override nonReentrant returns (uint256) {\\n    // Input validation using the subscription storage.\\n    if (s_subscriptionConfigs[subId].owner == address(0)) {\\n      revert InvalidSubscription();\\n    }\\n    // Its important to ensure that the consumer is in fact who they say they\\n    // are, otherwise they could use someone else's subscription balance.\\n    // A nonce of 0 indicates consumer is not allocated to the sub.\\n    uint64 currentNonce = s_consumers[msg.sender][subId];\\n    if (currentNonce == 0) {\\n      revert InvalidConsumer(subId, msg.sender);\\n    }\\n    // Input validation using the config storage word.\\n    if (\\n      requestConfirmations < s_config.minimumRequestConfirmations || requestConfirmations > MAX_REQUEST_CONFIRMATIONS\\n    ) {\\n      revert InvalidRequestConfirmations(\\n        requestConfirmations,\\n        s_config.minimumRequestConfirmations,\\n        MAX_REQUEST_CONFIRMATIONS\\n      );\\n    }\\n    // No lower bound on the requested gas limit. A user could request 0\\n    // and they would simply be billed for the proof verification and wouldn't be\\n    // able to do anything with the random value.\\n    if (callbackGasLimit > s_config.maxGasLimit) {\\n      revert GasLimitTooBig(callbackGasLimit, s_config.maxGasLimit);\\n    }\\n    if (numWords > MAX_NUM_WORDS) {\\n      revert NumWordsTooBig(numWords, MAX_NUM_WORDS);\\n    }\\n    // Note we do not check whether the keyHash is valid to save gas.\\n    // The consequence for users is that they can send requests\\n    // for invalid keyHashes which will simply not be fulfilled.\\n    uint64 nonce = currentNonce + 1;\\n    (uint256 requestId, uint256 preSeed) = computeRequestId(keyHash, msg.sender, subId, nonce);\\n\\n    s_requestCommitments[requestId] = keccak256(\\n      abi.encode(requestId, ChainSpecificUtil.getBlockNumber(), subId, callbackGasLimit, numWords, msg.sender)\\n    );\\n    emit RandomWordsRequested(\\n      keyHash,\\n      requestId,\\n      preSeed,\\n      subId,\\n      requestConfirmations,\\n      callbackGasLimit,\\n      numWords,\\n      msg.sender\\n    );\\n    s_consumers[msg.sender][subId] = nonce;\\n\\n    return requestId;\\n  }\\n\\n  /**\\n   * @notice Get request commitment\\n   * @param requestId id of request\\n   * @dev used to determine if a request is fulfilled or not\\n   */\\n  function getCommitment(uint256 requestId) external view returns (bytes32) {\\n    return s_requestCommitments[requestId];\\n  }\\n\\n  function computeRequestId(\\n    bytes32 keyHash,\\n    address sender,\\n    uint64 subId,\\n    uint64 nonce\\n  ) private pure returns (uint256, uint256) {\\n    uint256 preSeed = uint256(keccak256(abi.encode(keyHash, sender, subId, nonce)));\\n    return (uint256(keccak256(abi.encode(keyHash, preSeed))), preSeed);\\n  }\\n\\n  /**\\n   * @dev calls target address with exactly gasAmount gas and data as calldata\\n   * or reverts if at least gasAmount gas is not available.\\n   */\\n  function callWithExactGas(uint256 gasAmount, address target, bytes memory data) private returns (bool success) {\\n    // solhint-disable-next-line no-inline-assembly\\n    assembly {\\n      let g := gas()\\n      // Compute g -= GAS_FOR_CALL_EXACT_CHECK and check for underflow\\n      // The gas actually passed to the callee is min(gasAmount, 63//64*gas available).\\n      // We want to ensure that we revert if gasAmount >  63//64*gas available\\n      // as we do not want to provide them with less, however that check itself costs\\n      // gas.  GAS_FOR_CALL_EXACT_CHECK ensures we have at least enough gas to be able\\n      // to revert if gasAmount >  63//64*gas available.\\n      if lt(g, GAS_FOR_CALL_EXACT_CHECK) {\\n        revert(0, 0)\\n      }\\n      g := sub(g, GAS_FOR_CALL_EXACT_CHECK)\\n      // if g - g//64 <= gasAmount, revert\\n      // (we subtract g//64 because of EIP-150)\\n      if iszero(gt(sub(g, div(g, 64)), gasAmount)) {\\n        revert(0, 0)\\n      }\\n      // solidity calls check that a contract actually exists at the destination, so we do the same\\n      if iszero(extcodesize(target)) {\\n        revert(0, 0)\\n      }\\n      // call and return whether we succeeded. ignore return data\\n      // call(gas,addr,value,argsOffset,argsLength,retOffset,retLength)\\n      success := call(gasAmount, target, 0, add(data, 0x20), mload(data), 0, 0)\\n    }\\n    return success;\\n  }\\n\\n  function getRandomnessFromProof(\\n    Proof memory proof,\\n    RequestCommitment memory rc\\n  ) private view returns (bytes32 keyHash, uint256 requestId, uint256 randomness) {\\n    keyHash = hashOfKey(proof.pk);\\n    // Only registered proving keys are permitted.\\n    address oracle = s_provingKeys[keyHash];\\n    if (oracle == address(0)) {\\n      revert NoSuchProvingKey(keyHash);\\n    }\\n    requestId = uint256(keccak256(abi.encode(keyHash, proof.seed)));\\n    bytes32 commitment = s_requestCommitments[requestId];\\n    if (commitment == 0) {\\n      revert NoCorrespondingRequest();\\n    }\\n    if (\\n      commitment != keccak256(abi.encode(requestId, rc.blockNum, rc.subId, rc.callbackGasLimit, rc.numWords, rc.sender))\\n    ) {\\n      revert IncorrectCommitment();\\n    }\\n\\n    bytes32 blockHash = ChainSpecificUtil.getBlockhash(rc.blockNum);\\n    if (blockHash == bytes32(0)) {\\n      blockHash = BLOCKHASH_STORE.getBlockhash(rc.blockNum);\\n      if (blockHash == bytes32(0)) {\\n        revert BlockhashNotInStore(rc.blockNum);\\n      }\\n    }\\n\\n    // The seed actually used by the VRF machinery, mixing in the blockhash\\n    uint256 actualSeed = uint256(keccak256(abi.encodePacked(proof.seed, blockHash)));\\n    randomness = VRF.randomValueFromVRFProof(proof, actualSeed); // Reverts on failure\\n  }\\n\\n  /*\\n   * @notice Compute fee based on the request count\\n   * @param reqCount number of requests\\n   * @return feePPM fee in LINK PPM\\n   */\\n  function getFeeTier(uint64 reqCount) public view returns (uint32) {\\n    FeeConfig memory fc = s_feeConfig;\\n    if (0 <= reqCount && reqCount <= fc.reqsForTier2) {\\n      return fc.fulfillmentFlatFeeLinkPPMTier1;\\n    }\\n    if (fc.reqsForTier2 < reqCount && reqCount <= fc.reqsForTier3) {\\n      return fc.fulfillmentFlatFeeLinkPPMTier2;\\n    }\\n    if (fc.reqsForTier3 < reqCount && reqCount <= fc.reqsForTier4) {\\n      return fc.fulfillmentFlatFeeLinkPPMTier3;\\n    }\\n    if (fc.reqsForTier4 < reqCount && reqCount <= fc.reqsForTier5) {\\n      return fc.fulfillmentFlatFeeLinkPPMTier4;\\n    }\\n    return fc.fulfillmentFlatFeeLinkPPMTier5;\\n  }\\n\\n  /*\\n   * @notice Fulfill a randomness request\\n   * @param proof contains the proof and randomness\\n   * @param rc request commitment pre-image, committed to at request time\\n   * @return payment amount billed to the subscription\\n   * @dev simulated offchain to determine if sufficient balance is present to fulfill the request\\n   */\\n  function fulfillRandomWords(Proof memory proof, RequestCommitment memory rc) external nonReentrant returns (uint96) {\\n    uint256 startGas = gasleft();\\n    (bytes32 keyHash, uint256 requestId, uint256 randomness) = getRandomnessFromProof(proof, rc);\\n\\n    uint256[] memory randomWords = new uint256[](rc.numWords);\\n    for (uint256 i = 0; i < rc.numWords; i++) {\\n      randomWords[i] = uint256(keccak256(abi.encode(randomness, i)));\\n    }\\n\\n    delete s_requestCommitments[requestId];\\n    VRFConsumerBaseV2 v;\\n    bytes memory resp = abi.encodeWithSelector(v.rawFulfillRandomWords.selector, requestId, randomWords);\\n    // Call with explicitly the amount of callback gas requested\\n    // Important to not let them exhaust the gas budget and avoid oracle payment.\\n    // Do not allow any non-view/non-pure coordinator functions to be called\\n    // during the consumers callback code via reentrancyLock.\\n    // Note that callWithExactGas will revert if we do not have sufficient gas\\n    // to give the callee their requested amount.\\n    s_config.reentrancyLock = true;\\n    bool success = callWithExactGas(rc.callbackGasLimit, rc.sender, resp);\\n    s_config.reentrancyLock = false;\\n\\n    // Increment the req count for fee tier selection.\\n    uint64 reqCount = s_subscriptions[rc.subId].reqCount;\\n    s_subscriptions[rc.subId].reqCount += 1;\\n\\n    // We want to charge users exactly for how much gas they use in their callback.\\n    // The gasAfterPaymentCalculation is meant to cover these additional operations where we\\n    // decrement the subscription balance and increment the oracles withdrawable balance.\\n    // We also add the flat link fee to the payment amount.\\n    // Its specified in millionths of link, if s_config.fulfillmentFlatFeeLinkPPM = 1\\n    // 1 link / 1e6 = 1e18 juels / 1e6 = 1e12 juels.\\n    uint96 payment = calculatePaymentAmount(\\n      startGas,\\n      s_config.gasAfterPaymentCalculation,\\n      getFeeTier(reqCount),\\n      tx.gasprice\\n    );\\n    if (s_subscriptions[rc.subId].balance < payment) {\\n      revert InsufficientBalance();\\n    }\\n    s_subscriptions[rc.subId].balance -= payment;\\n    s_withdrawableTokens[s_provingKeys[keyHash]] += payment;\\n    // Include payment in the event for tracking costs.\\n    emit RandomWordsFulfilled(requestId, randomness, payment, success);\\n    return payment;\\n  }\\n\\n  // Get the amount of gas used for fulfillment\\n  function calculatePaymentAmount(\\n    uint256 startGas,\\n    uint256 gasAfterPaymentCalculation,\\n    uint32 fulfillmentFlatFeeLinkPPM,\\n    uint256 weiPerUnitGas\\n  ) internal view returns (uint96) {\\n    int256 weiPerUnitLink;\\n    weiPerUnitLink = getFeedData();\\n    if (weiPerUnitLink <= 0) {\\n      revert InvalidLinkWeiPrice(weiPerUnitLink);\\n    }\\n    // Will return non-zero on chains that have this enabled\\n    uint256 l1CostWei = ChainSpecificUtil.getCurrentTxL1GasFees();\\n    // (1e18 juels/link) ((wei/gas * gas) + l1wei) / (wei/link) = juels\\n    uint256 paymentNoFee = (1e18 * (weiPerUnitGas * (gasAfterPaymentCalculation + startGas - gasleft()) + l1CostWei)) /\\n      uint256(weiPerUnitLink);\\n    uint256 fee = 1e12 * uint256(fulfillmentFlatFeeLinkPPM);\\n    if (paymentNoFee > (1e27 - fee)) {\\n      revert PaymentTooLarge(); // Payment + fee cannot be more than all of the link in existence.\\n    }\\n    return uint96(paymentNoFee + fee);\\n  }\\n\\n  function getFeedData() private view returns (int256) {\\n    uint32 stalenessSeconds = s_config.stalenessSeconds;\\n    bool staleFallback = stalenessSeconds > 0;\\n    uint256 timestamp;\\n    int256 weiPerUnitLink;\\n    (, weiPerUnitLink, , timestamp, ) = LINK_ETH_FEED.latestRoundData();\\n    // solhint-disable-next-line not-rely-on-time\\n    if (staleFallback && stalenessSeconds < block.timestamp - timestamp) {\\n      weiPerUnitLink = s_fallbackWeiPerUnitLink;\\n    }\\n    return weiPerUnitLink;\\n  }\\n\\n  /*\\n   * @notice Oracle withdraw LINK earned through fulfilling requests\\n   * @param recipient where to send the funds\\n   * @param amount amount to withdraw\\n   */\\n  function oracleWithdraw(address recipient, uint96 amount) external nonReentrant {\\n    if (s_withdrawableTokens[msg.sender] < amount) {\\n      revert InsufficientBalance();\\n    }\\n    s_withdrawableTokens[msg.sender] -= amount;\\n    s_totalBalance -= amount;\\n    if (!LINK.transfer(recipient, amount)) {\\n      revert InsufficientBalance();\\n    }\\n  }\\n\\n  function onTokenTransfer(address /* sender */, uint256 amount, bytes calldata data) external override nonReentrant {\\n    if (msg.sender != address(LINK)) {\\n      revert OnlyCallableFromLink();\\n    }\\n    if (data.length != 32) {\\n      revert InvalidCalldata();\\n    }\\n    uint64 subId = abi.decode(data, (uint64));\\n    if (s_subscriptionConfigs[subId].owner == address(0)) {\\n      revert InvalidSubscription();\\n    }\\n    // We do not check that the msg.sender is the subscription owner,\\n    // anyone can fund a subscription.\\n    uint256 oldBalance = s_subscriptions[subId].balance;\\n    s_subscriptions[subId].balance += uint96(amount);\\n    s_totalBalance += uint96(amount);\\n    emit SubscriptionFunded(subId, oldBalance, oldBalance + amount);\\n  }\\n\\n  function getCurrentSubId() external view returns (uint64) {\\n    return s_currentSubId;\\n  }\\n\\n  /**\\n   * @inheritdoc VRFCoordinatorV2Interface\\n   */\\n  function getSubscription(\\n    uint64 subId\\n  ) external view override returns (uint96 balance, uint64 reqCount, address owner, address[] memory consumers) {\\n    if (s_subscriptionConfigs[subId].owner == address(0)) {\\n      revert InvalidSubscription();\\n    }\\n    return (\\n      s_subscriptions[subId].balance,\\n      s_subscriptions[subId].reqCount,\\n      s_subscriptionConfigs[subId].owner,\\n      s_subscriptionConfigs[subId].consumers\\n    );\\n  }\\n\\n  /**\\n   * @inheritdoc VRFCoordinatorV2Interface\\n   */\\n  function createSubscription() external override nonReentrant returns (uint64) {\\n    s_currentSubId++;\\n    uint64 currentSubId = s_currentSubId;\\n    address[] memory consumers = new address[](0);\\n    s_subscriptions[currentSubId] = Subscription({balance: 0, reqCount: 0});\\n    s_subscriptionConfigs[currentSubId] = SubscriptionConfig({\\n      owner: msg.sender,\\n      requestedOwner: address(0),\\n      consumers: consumers\\n    });\\n\\n    emit SubscriptionCreated(currentSubId, msg.sender);\\n    return currentSubId;\\n  }\\n\\n  /**\\n   * @inheritdoc VRFCoordinatorV2Interface\\n   */\\n  function requestSubscriptionOwnerTransfer(\\n    uint64 subId,\\n    address newOwner\\n  ) external override onlySubOwner(subId) nonReentrant {\\n    // Proposing to address(0) would never be claimable so don't need to check.\\n    if (s_subscriptionConfigs[subId].requestedOwner != newOwner) {\\n      s_subscriptionConfigs[subId].requestedOwner = newOwner;\\n      emit SubscriptionOwnerTransferRequested(subId, msg.sender, newOwner);\\n    }\\n  }\\n\\n  /**\\n   * @inheritdoc VRFCoordinatorV2Interface\\n   */\\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external override nonReentrant {\\n    if (s_subscriptionConfigs[subId].owner == address(0)) {\\n      revert InvalidSubscription();\\n    }\\n    if (s_subscriptionConfigs[subId].requestedOwner != msg.sender) {\\n      revert MustBeRequestedOwner(s_subscriptionConfigs[subId].requestedOwner);\\n    }\\n    address oldOwner = s_subscriptionConfigs[subId].owner;\\n    s_subscriptionConfigs[subId].owner = msg.sender;\\n    s_subscriptionConfigs[subId].requestedOwner = address(0);\\n    emit SubscriptionOwnerTransferred(subId, oldOwner, msg.sender);\\n  }\\n\\n  /**\\n   * @inheritdoc VRFCoordinatorV2Interface\\n   */\\n  function removeConsumer(uint64 subId, address consumer) external override onlySubOwner(subId) nonReentrant {\\n    if (pendingRequestExists(subId)) {\\n      revert PendingRequestExists();\\n    }\\n    if (s_consumers[consumer][subId] == 0) {\\n      revert InvalidConsumer(subId, consumer);\\n    }\\n    // Note bounded by MAX_CONSUMERS\\n    address[] memory consumers = s_subscriptionConfigs[subId].consumers;\\n    uint256 lastConsumerIndex = consumers.length - 1;\\n    for (uint256 i = 0; i < consumers.length; i++) {\\n      if (consumers[i] == consumer) {\\n        address last = consumers[lastConsumerIndex];\\n        // Storage write to preserve last element\\n        s_subscriptionConfigs[subId].consumers[i] = last;\\n        // Storage remove last element\\n        s_subscriptionConfigs[subId].consumers.pop();\\n        break;\\n      }\\n    }\\n    delete s_consumers[consumer][subId];\\n    emit SubscriptionConsumerRemoved(subId, consumer);\\n  }\\n\\n  /**\\n   * @inheritdoc VRFCoordinatorV2Interface\\n   */\\n  function addConsumer(uint64 subId, address consumer) external override onlySubOwner(subId) nonReentrant {\\n    // Already maxed, cannot add any more consumers.\\n    if (s_subscriptionConfigs[subId].consumers.length == MAX_CONSUMERS) {\\n      revert TooManyConsumers();\\n    }\\n    if (s_consumers[consumer][subId] != 0) {\\n      // Idempotence - do nothing if already added.\\n      // Ensures uniqueness in s_subscriptions[subId].consumers.\\n      return;\\n    }\\n    // Initialize the nonce to 1, indicating the consumer is allocated.\\n    s_consumers[consumer][subId] = 1;\\n    s_subscriptionConfigs[subId].consumers.push(consumer);\\n\\n    emit SubscriptionConsumerAdded(subId, consumer);\\n  }\\n\\n  /**\\n   * @inheritdoc VRFCoordinatorV2Interface\\n   */\\n  function cancelSubscription(uint64 subId, address to) external override onlySubOwner(subId) nonReentrant {\\n    if (pendingRequestExists(subId)) {\\n      revert PendingRequestExists();\\n    }\\n    cancelSubscriptionHelper(subId, to);\\n  }\\n\\n  function cancelSubscriptionHelper(uint64 subId, address to) private nonReentrant {\\n    SubscriptionConfig memory subConfig = s_subscriptionConfigs[subId];\\n    Subscription memory sub = s_subscriptions[subId];\\n    uint96 balance = sub.balance;\\n    // Note bounded by MAX_CONSUMERS;\\n    // If no consumers, does nothing.\\n    for (uint256 i = 0; i < subConfig.consumers.length; i++) {\\n      delete s_consumers[subConfig.consumers[i]][subId];\\n    }\\n    delete s_subscriptionConfigs[subId];\\n    delete s_subscriptions[subId];\\n    s_totalBalance -= balance;\\n    if (!LINK.transfer(to, uint256(balance))) {\\n      revert InsufficientBalance();\\n    }\\n    emit SubscriptionCanceled(subId, to, balance);\\n  }\\n\\n  /**\\n   * @inheritdoc VRFCoordinatorV2Interface\\n   * @dev Looping is bounded to MAX_CONSUMERS*(number of keyhashes).\\n   * @dev Used to disable subscription canceling while outstanding request are present.\\n   */\\n  function pendingRequestExists(uint64 subId) public view override returns (bool) {\\n    SubscriptionConfig memory subConfig = s_subscriptionConfigs[subId];\\n    for (uint256 i = 0; i < subConfig.consumers.length; i++) {\\n      for (uint256 j = 0; j < s_provingKeyHashes.length; j++) {\\n        (uint256 reqId, ) = computeRequestId(\\n          s_provingKeyHashes[j],\\n          subConfig.consumers[i],\\n          subId,\\n          s_consumers[subConfig.consumers[i]][subId]\\n        );\\n        if (s_requestCommitments[reqId] != 0) {\\n          return true;\\n        }\\n      }\\n    }\\n    return false;\\n  }\\n\\n  modifier onlySubOwner(uint64 subId) {\\n    address owner = s_subscriptionConfigs[subId].owner;\\n    if (owner == address(0)) {\\n      revert InvalidSubscription();\\n    }\\n    if (msg.sender != owner) {\\n      revert MustBeSubOwner(owner);\\n    }\\n    _;\\n  }\\n\\n  modifier nonReentrant() {\\n    if (s_config.reentrancyLock) {\\n      revert Reentrant();\\n    }\\n    _;\\n  }\\n\\n  /**\\n   * @notice The type and version of this contract\\n   * @return Type and version string\\n   */\\n  function typeAndVersion() external pure virtual override returns (string memory) {\\n    return \\\"VRFCoordinatorV2 1.0.0\\\";\\n  }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard ERC20 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\\n */\\ninterface IERC20Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC20InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC20InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender`\u2019s `allowance`. Used in transfers.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC20InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC20InvalidSpender(address spender);\\n}\\n\\n/**\\n * @dev Standard ERC721 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\\n */\\ninterface IERC721Errors {\\n    /**\\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\\n     * Used in balance queries.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721InvalidOwner(address owner);\\n\\n    /**\\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721NonexistentToken(uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param tokenId Identifier number of a token.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC721InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC721InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC721InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC721InvalidOperator(address operator);\\n}\\n\\n/**\\n * @dev Standard ERC1155 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\\n */\\ninterface IERC1155Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC1155InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC1155InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC1155MissingApprovalForAll(address operator, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC1155InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC1155InvalidOperator(address operator);\\n\\n    /**\\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\\n     * Used in batch transfers.\\n     * @param idsLength Length of the array of token identifiers\\n     * @param valuesLength Length of the array of token amounts\\n     */\\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/ERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC721} from \\\"./IERC721.sol\\\";\\nimport {IERC721Receiver} from \\\"./IERC721Receiver.sol\\\";\\nimport {IERC721Metadata} from \\\"./extensions/IERC721Metadata.sol\\\";\\nimport {Context} from \\\"../../utils/Context.sol\\\";\\nimport {Strings} from \\\"../../utils/Strings.sol\\\";\\nimport {IERC165, ERC165} from \\\"../../utils/introspection/ERC165.sol\\\";\\nimport {IERC721Errors} from \\\"../../interfaces/draft-IERC6093.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\nabstract contract ERC721 is Context, ERC165, IERC721, IERC721Metadata, IERC721Errors {\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    mapping(uint256 tokenId => address) private _owners;\\n\\n    mapping(address owner => uint256) private _balances;\\n\\n    mapping(uint256 tokenId => address) private _tokenApprovals;\\n\\n    mapping(address owner => mapping(address operator => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual returns (uint256) {\\n        if (owner == address(0)) {\\n            revert ERC721InvalidOwner(address(0));\\n        }\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual returns (address) {\\n        return _requireOwned(tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual returns (string memory) {\\n        _requireOwned(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string.concat(baseURI, tokenId.toString()) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual {\\n        _approve(to, tokenId, _msgSender());\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual returns (address) {\\n        _requireOwned(tokenId);\\n\\n        return _getApproved(tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) public virtual {\\n        if (to == address(0)) {\\n            revert ERC721InvalidReceiver(address(0));\\n        }\\n        // Setting an \\\"auth\\\" arguments enables the `_isAuthorized` check which verifies that the token exists\\n        // (from != 0). Therefore, it is not needed to verify that the return value is not 0 here.\\n        address previousOwner = _update(to, tokenId, _msgSender());\\n        if (previousOwner != from) {\\n            revert ERC721IncorrectOwner(from, tokenId, previousOwner);\\n        }\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) public {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public virtual {\\n        transferFrom(from, to, tokenId);\\n        _checkOnERC721Received(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n     *\\n     * IMPORTANT: Any overrides to this function that add ownership of tokens not tracked by the\\n     * core ERC721 logic MUST be matched with the use of {_increaseBalance} to keep balances\\n     * consistent with ownership. The invariant to preserve is that for any address `a` the value returned by\\n     * `balanceOf(a)` must be equal to the number of tokens such that `_ownerOf(tokenId)` is `a`.\\n     */\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        return _owners[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns the approved address for `tokenId`. Returns 0 if `tokenId` is not minted.\\n     */\\n    function _getApproved(uint256 tokenId) internal view virtual returns (address) {\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `owner`'s tokens, or `tokenId` in\\n     * particular (ignoring whether it is owned by `owner`).\\n     *\\n     * WARNING: This function assumes that `owner` is the actual owner of `tokenId` and does not verify this\\n     * assumption.\\n     */\\n    function _isAuthorized(address owner, address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        return\\n            spender != address(0) &&\\n            (owner == spender || isApprovedForAll(owner, spender) || _getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Checks if `spender` can operate on `tokenId`, assuming the provided `owner` is the actual owner.\\n     * Reverts if `spender` does not have approval from the provided `owner` for the given token or for all its assets\\n     * the `spender` for the specific `tokenId`.\\n     *\\n     * WARNING: This function assumes that `owner` is the actual owner of `tokenId` and does not verify this\\n     * assumption.\\n     */\\n    function _checkAuthorized(address owner, address spender, uint256 tokenId) internal view virtual {\\n        if (!_isAuthorized(owner, spender, tokenId)) {\\n            if (owner == address(0)) {\\n                revert ERC721NonexistentToken(tokenId);\\n            } else {\\n                revert ERC721InsufficientApproval(spender, tokenId);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Unsafe write access to the balances, used by extensions that \\\"mint\\\" tokens using an {ownerOf} override.\\n     *\\n     * NOTE: the value is limited to type(uint128).max. This protect against _balance overflow. It is unrealistic that\\n     * a uint256 would ever overflow from increments when these increments are bounded to uint128 values.\\n     *\\n     * WARNING: Increasing an account's balance using this function tends to be paired with an override of the\\n     * {_ownerOf} function to resolve the ownership of the corresponding tokens so that balances and ownership\\n     * remain consistent with one another.\\n     */\\n    function _increaseBalance(address account, uint128 value) internal virtual {\\n        unchecked {\\n            _balances[account] += value;\\n        }\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from its current owner to `to`, or alternatively mints (or burns) if the current owner\\n     * (or `to`) is the zero address. Returns the owner of the `tokenId` before the update.\\n     *\\n     * The `auth` argument is optional. If the value passed is non 0, then this function will check that\\n     * `auth` is either the owner of the token, or approved to operate on the token (by the owner).\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * NOTE: If overriding this function in a way that tracks balances, see also {_increaseBalance}.\\n     */\\n    function _update(address to, uint256 tokenId, address auth) internal virtual returns (address) {\\n        address from = _ownerOf(tokenId);\\n\\n        // Perform (optional) operator check\\n        if (auth != address(0)) {\\n            _checkAuthorized(from, auth, tokenId);\\n        }\\n\\n        // Execute the update\\n        if (from != address(0)) {\\n            // Clear approval. No need to re-authorize or emit the Approval event\\n            _approve(address(0), tokenId, address(0), false);\\n\\n            unchecked {\\n                _balances[from] -= 1;\\n            }\\n        }\\n\\n        if (to != address(0)) {\\n            unchecked {\\n                _balances[to] += 1;\\n            }\\n        }\\n\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        return from;\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal {\\n        if (to == address(0)) {\\n            revert ERC721InvalidReceiver(address(0));\\n        }\\n        address previousOwner = _update(to, tokenId, address(0));\\n        if (previousOwner != address(0)) {\\n            revert ERC721InvalidSender(address(0));\\n        }\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId`, transfers it to `to` and checks for `to` acceptance.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _mint(to, tokenId);\\n        _checkOnERC721Received(address(0), to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal {\\n        address previousOwner = _update(address(0), tokenId, address(0));\\n        if (previousOwner == address(0)) {\\n            revert ERC721NonexistentToken(tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(address from, address to, uint256 tokenId) internal {\\n        if (to == address(0)) {\\n            revert ERC721InvalidReceiver(address(0));\\n        }\\n        address previousOwner = _update(to, tokenId, address(0));\\n        if (previousOwner == address(0)) {\\n            revert ERC721NonexistentToken(tokenId);\\n        } else if (previousOwner != from) {\\n            revert ERC721IncorrectOwner(from, tokenId, previousOwner);\\n        }\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking that contract recipients\\n     * are aware of the ERC721 standard to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is like {safeTransferFrom} in the sense that it invokes\\n     * {IERC721Receiver-onERC721Received} on the receiver, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - `to` cannot be the zero address.\\n     * - `from` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId) internal {\\n        _safeTransfer(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeTransfer-address-address-uint256-}[`_safeTransfer`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _transfer(from, to, tokenId);\\n        _checkOnERC721Received(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * The `auth` argument is optional. If the value passed is non 0, then this function will check that `auth` is\\n     * either the owner of the token, or approved to operate on all tokens held by this owner.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\\n     */\\n    function _approve(address to, uint256 tokenId, address auth) internal {\\n        _approve(to, tokenId, auth, true);\\n    }\\n\\n    /**\\n     * @dev Variant of `_approve` with an optional flag to enable or disable the {Approval} event. The event is not\\n     * emitted in the context of transfers.\\n     */\\n    function _approve(address to, uint256 tokenId, address auth, bool emitEvent) internal virtual {\\n        // Avoid reading the owner unless necessary\\n        if (emitEvent || auth != address(0)) {\\n            address owner = _requireOwned(tokenId);\\n\\n            // We do not use _isAuthorized because single-token approvals should not be able to call approve\\n            if (auth != address(0) && owner != auth && !isApprovedForAll(owner, auth)) {\\n                revert ERC721InvalidApprover(auth);\\n            }\\n\\n            if (emitEvent) {\\n                emit Approval(owner, to, tokenId);\\n            }\\n        }\\n\\n        _tokenApprovals[tokenId] = to;\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Requirements:\\n     * - operator can't be the address zero.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {\\n        if (operator == address(0)) {\\n            revert ERC721InvalidOperator(operator);\\n        }\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` doesn't have a current owner (it hasn't been minted, or it has been burned).\\n     * Returns the owner.\\n     *\\n     * Overrides to ownership logic should be done to {_ownerOf}.\\n     */\\n    function _requireOwned(uint256 tokenId) internal view returns (address) {\\n        address owner = _ownerOf(tokenId);\\n        if (owner == address(0)) {\\n            revert ERC721NonexistentToken(tokenId);\\n        }\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev Private function to invoke {IERC721Receiver-onERC721Received} on a target address. This will revert if the\\n     * recipient doesn't accept the token transfer. The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     */\\n    function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory data) private {\\n        if (to.code.length > 0) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                if (retval != IERC721Receiver.onERC721Received.selector) {\\n                    revert ERC721InvalidReceiver(to);\\n                }\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert ERC721InvalidReceiver(to);\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC721} from \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or\\n     *   {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the address zero.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be\\n     * reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Base64.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Base64.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides a set of functions to operate with Base64 strings.\\n */\\nlibrary Base64 {\\n    /**\\n     * @dev Base64 Encoding/Decoding Table\\n     */\\n    string internal constant _TABLE = \\\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\\\";\\n\\n    /**\\n     * @dev Converts a `bytes` to its Bytes64 `string` representation.\\n     */\\n    function encode(bytes memory data) internal pure returns (string memory) {\\n        /**\\n         * Inspired by Brecht Devos (Brechtpd) implementation - MIT licence\\n         * https://github.com/Brechtpd/base64/blob/e78d9fd951e7b0977ddca77d92dc85183770daf4/base64.sol\\n         */\\n        if (data.length == 0) return \\\"\\\";\\n\\n        // Loads the table into memory\\n        string memory table = _TABLE;\\n\\n        // Encoding takes 3 bytes chunks of binary data from `bytes` data parameter\\n        // and split into 4 numbers of 6 bits.\\n        // The final Base64 length should be `bytes` data length multiplied by 4/3 rounded up\\n        // - `data.length + 2`  -> Round up\\n        // - `/ 3`              -> Number of 3-bytes chunks\\n        // - `4 *`              -> 4 characters for each chunk\\n        string memory result = new string(4 * ((data.length + 2) / 3));\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Prepare the lookup table (skip the first \\\"length\\\" byte)\\n            let tablePtr := add(table, 1)\\n\\n            // Prepare result pointer, jump over length\\n            let resultPtr := add(result, 32)\\n\\n            // Run over the input, 3 bytes at a time\\n            for {\\n                let dataPtr := data\\n                let endPtr := add(data, mload(data))\\n            } lt(dataPtr, endPtr) {\\n\\n            } {\\n                // Advance 3 bytes\\n                dataPtr := add(dataPtr, 3)\\n                let input := mload(dataPtr)\\n\\n                // To write each character, shift the 3 bytes (18 bits) chunk\\n                // 4 times in blocks of 6 bits for each character (18, 12, 6, 0)\\n                // and apply logical AND with 0x3F which is the number of\\n                // the previous character in the ASCII table prior to the Base64 Table\\n                // The result is then added to the table to get the character to write,\\n                // and finally write it in the result pointer but with a left shift\\n                // of 256 (1 byte) - 8 (1 ASCII char) = 248 bits\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(18, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(12, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(6, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(input, 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n            }\\n\\n            // When data `bytes` is not exactly 3 bytes long\\n            // it is padded with `=` characters at the end\\n            switch mod(mload(data), 3)\\n            case 1 {\\n                mstore8(sub(resultPtr, 1), 0x3d)\\n                mstore8(sub(resultPtr, 2), 0x3d)\\n            }\\n            case 2 {\\n                mstore8(sub(resultPtr, 1), 0x3d)\\n            }\\n        }\\n\\n        return result;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Muldiv operation overflow.\\n     */\\n    error MathOverflowedMulDiv();\\n\\n    enum Rounding {\\n        Floor, // Toward negative infinity\\n        Ceil, // Toward positive infinity\\n        Trunc, // Toward zero\\n        Expand // Away from zero\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\n     * of rounding towards zero.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) {\\n            // Guarantee the same behavior as in a regular Solidity division.\\n            return a / b;\\n        }\\n\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\n     * denominator == 0.\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\n     * Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            if (denominator <= prod1) {\\n                revert MathOverflowedMulDiv();\\n            }\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\\n\\n            uint256 twos = denominator & (0 - denominator);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\\n            // works in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\n     * towards zero.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\n     */\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\n        return uint8(rounding) % 2 == 1;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/SignedMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Pausable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Pausable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    bool private _paused;\\n\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    /**\\n     * @dev The operation failed because the contract is paused.\\n     */\\n    error EnforcedPause();\\n\\n    /**\\n     * @dev The operation failed because the contract is not paused.\\n     */\\n    error ExpectedPause();\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        if (paused()) {\\n            revert EnforcedPause();\\n        }\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        if (!paused()) {\\n            revert ExpectedPause();\\n        }\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    constructor() {\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if (_status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Math} from \\\"./math/Math.sol\\\";\\nimport {SignedMath} from \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant HEX_DIGITS = \\\"0123456789abcdef\\\";\\n    uint8 private constant ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev The `value` string doesn't fit in the specified `length`.\\n     */\\n    error StringsInsufficientHexLength(uint256 value, uint256 length);\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), HEX_DIGITS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toStringSigned(int256 value) internal pure returns (string memory) {\\n        return string.concat(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value)));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        uint256 localValue = value;\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = HEX_DIGITS[localValue & 0xf];\\n            localValue >>= 4;\\n        }\\n        if (localValue != 0) {\\n            revert StringsInsufficientHexLength(value, length);\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal\\n     * representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return bytes(a).length == bytes(b).length && keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\"\r\n    },\r\n    \"@uniswap/v3-core/contracts/interfaces/IUniswapV3Pool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\nimport './pool/IUniswapV3PoolImmutables.sol';\\nimport './pool/IUniswapV3PoolState.sol';\\nimport './pool/IUniswapV3PoolDerivedState.sol';\\nimport './pool/IUniswapV3PoolActions.sol';\\nimport './pool/IUniswapV3PoolOwnerActions.sol';\\nimport './pool/IUniswapV3PoolEvents.sol';\\n\\n/// @title The interface for a Uniswap V3 Pool\\n/// @notice A Uniswap pool facilitates swapping and automated market making between any two assets that strictly conform\\n/// to the ERC20 specification\\n/// @dev The pool interface is broken up into many smaller pieces\\ninterface IUniswapV3Pool is\\n    IUniswapV3PoolImmutables,\\n    IUniswapV3PoolState,\\n    IUniswapV3PoolDerivedState,\\n    IUniswapV3PoolActions,\\n    IUniswapV3PoolOwnerActions,\\n    IUniswapV3PoolEvents\\n{\\n\\n}\\n\"\r\n    },\r\n    \"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolActions.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Permissionless pool actions\\n/// @notice Contains pool methods that can be called by anyone\\ninterface IUniswapV3PoolActions {\\n    /// @notice Sets the initial price for the pool\\n    /// @dev Price is represented as a sqrt(amountToken1/amountToken0) Q64.96 value\\n    /// @param sqrtPriceX96 the initial sqrt price of the pool as a Q64.96\\n    function initialize(uint160 sqrtPriceX96) external;\\n\\n    /// @notice Adds liquidity for the given recipient/tickLower/tickUpper position\\n    /// @dev The caller of this method receives a callback in the form of IUniswapV3MintCallback#uniswapV3MintCallback\\n    /// in which they must pay any token0 or token1 owed for the liquidity. The amount of token0/token1 due depends\\n    /// on tickLower, tickUpper, the amount of liquidity, and the current price.\\n    /// @param recipient The address for which the liquidity will be created\\n    /// @param tickLower The lower tick of the position in which to add liquidity\\n    /// @param tickUpper The upper tick of the position in which to add liquidity\\n    /// @param amount The amount of liquidity to mint\\n    /// @param data Any data that should be passed through to the callback\\n    /// @return amount0 The amount of token0 that was paid to mint the given amount of liquidity. Matches the value in the callback\\n    /// @return amount1 The amount of token1 that was paid to mint the given amount of liquidity. Matches the value in the callback\\n    function mint(\\n        address recipient,\\n        int24 tickLower,\\n        int24 tickUpper,\\n        uint128 amount,\\n        bytes calldata data\\n    ) external returns (uint256 amount0, uint256 amount1);\\n\\n    /// @notice Collects tokens owed to a position\\n    /// @dev Does not recompute fees earned, which must be done either via mint or burn of any amount of liquidity.\\n    /// Collect must be called by the position owner. To withdraw only token0 or only token1, amount0Requested or\\n    /// amount1Requested may be set to zero. To withdraw all tokens owed, caller may pass any value greater than the\\n    /// actual tokens owed, e.g. type(uint128).max. Tokens owed may be from accumulated swap fees or burned liquidity.\\n    /// @param recipient The address which should receive the fees collected\\n    /// @param tickLower The lower tick of the position for which to collect fees\\n    /// @param tickUpper The upper tick of the position for which to collect fees\\n    /// @param amount0Requested How much token0 should be withdrawn from the fees owed\\n    /// @param amount1Requested How much token1 should be withdrawn from the fees owed\\n    /// @return amount0 The amount of fees collected in token0\\n    /// @return amount1 The amount of fees collected in token1\\n    function collect(\\n        address recipient,\\n        int24 tickLower,\\n        int24 tickUpper,\\n        uint128 amount0Requested,\\n        uint128 amount1Requested\\n    ) external returns (uint128 amount0, uint128 amount1);\\n\\n    /// @notice Burn liquidity from the sender and account tokens owed for the liquidity to the position\\n    /// @dev Can be used to trigger a recalculation of fees owed to a position by calling with an amount of 0\\n    /// @dev Fees must be collected separately via a call to #collect\\n    /// @param tickLower The lower tick of the position for which to burn liquidity\\n    /// @param tickUpper The upper tick of the position for which to burn liquidity\\n    /// @param amount How much liquidity to burn\\n    /// @return amount0 The amount of token0 sent to the recipient\\n    /// @return amount1 The amount of token1 sent to the recipient\\n    function burn(\\n        int24 tickLower,\\n        int24 tickUpper,\\n        uint128 amount\\n    ) external returns (uint256 amount0, uint256 amount1);\\n\\n    /// @notice Swap token0 for token1, or token1 for token0\\n    /// @dev The caller of this method receives a callback in the form of IUniswapV3SwapCallback#uniswapV3SwapCallback\\n    /// @param recipient The address to receive the output of the swap\\n    /// @param zeroForOne The direction of the swap, true for token0 to token1, false for token1 to token0\\n    /// @param amountSpecified The amount of the swap, which implicitly configures the swap as exact input (positive), or exact output (negative)\\n    /// @param sqrtPriceLimitX96 The Q64.96 sqrt price limit. If zero for one, the price cannot be less than this\\n    /// value after the swap. If one for zero, the price cannot be greater than this value after the swap\\n    /// @param data Any data to be passed through to the callback\\n    /// @return amount0 The delta of the balance of token0 of the pool, exact when negative, minimum when positive\\n    /// @return amount1 The delta of the balance of token1 of the pool, exact when negative, minimum when positive\\n    function swap(\\n        address recipient,\\n        bool zeroForOne,\\n        int256 amountSpecified,\\n        uint160 sqrtPriceLimitX96,\\n        bytes calldata data\\n    ) external returns (int256 amount0, int256 amount1);\\n\\n    /// @notice Receive token0 and/or token1 and pay it back, plus a fee, in the callback\\n    /// @dev The caller of this method receives a callback in the form of IUniswapV3FlashCallback#uniswapV3FlashCallback\\n    /// @dev Can be used to donate underlying tokens pro-rata to currently in-range liquidity providers by calling\\n    /// with 0 amount{0,1} and sending the donation amount(s) from the callback\\n    /// @param recipient The address which will receive the token0 and token1 amounts\\n    /// @param amount0 The amount of token0 to send\\n    /// @param amount1 The amount of token1 to send\\n    /// @param data Any data to be passed through to the callback\\n    function flash(\\n        address recipient,\\n        uint256 amount0,\\n        uint256 amount1,\\n        bytes calldata data\\n    ) external;\\n\\n    /// @notice Increase the maximum number of price and liquidity observations that this pool will store\\n    /// @dev This method is no-op if the pool already has an observationCardinalityNext greater than or equal to\\n    /// the input observationCardinalityNext.\\n    /// @param observationCardinalityNext The desired minimum number of observations for the pool to store\\n    function increaseObservationCardinalityNext(uint16 observationCardinalityNext) external;\\n}\\n\"\r\n    },\r\n    \"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolDerivedState.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Pool state that is not stored\\n/// @notice Contains view functions to provide information about the pool that is computed rather than stored on the\\n/// blockchain. The functions here may have variable gas costs.\\ninterface IUniswapV3PoolDerivedState {\\n    /// @notice Returns the cumulative tick and liquidity as of each timestamp `secondsAgo` from the current block timestamp\\n    /// @dev To get a time weighted average tick or liquidity-in-range, you must call this with two values, one representing\\n    /// the beginning of the period and another for the end of the period. E.g., to get the last hour time-weighted average tick,\\n    /// you must call it with secondsAgos = [3600, 0].\\n    /// @dev The time weighted average tick represents the geometric time weighted average price of the pool, in\\n    /// log base sqrt(1.0001) of token1 / token0. The TickMath library can be used to go from a tick value to a ratio.\\n    /// @param secondsAgos From how long ago each cumulative tick and liquidity value should be returned\\n    /// @return tickCumulatives Cumulative tick values as of each `secondsAgos` from the current block timestamp\\n    /// @return secondsPerLiquidityCumulativeX128s Cumulative seconds per liquidity-in-range value as of each `secondsAgos` from the current block\\n    /// timestamp\\n    function observe(uint32[] calldata secondsAgos)\\n        external\\n        view\\n        returns (int56[] memory tickCumulatives, uint160[] memory secondsPerLiquidityCumulativeX128s);\\n\\n    /// @notice Returns a snapshot of the tick cumulative, seconds per liquidity and seconds inside a tick range\\n    /// @dev Snapshots must only be compared to other snapshots, taken over a period for which a position existed.\\n    /// I.e., snapshots cannot be compared if a position is not held for the entire period between when the first\\n    /// snapshot is taken and the second snapshot is taken.\\n    /// @param tickLower The lower tick of the range\\n    /// @param tickUpper The upper tick of the range\\n    /// @return tickCumulativeInside The snapshot of the tick accumulator for the range\\n    /// @return secondsPerLiquidityInsideX128 The snapshot of seconds per liquidity for the range\\n    /// @return secondsInside The snapshot of seconds per liquidity for the range\\n    function snapshotCumulativesInside(int24 tickLower, int24 tickUpper)\\n        external\\n        view\\n        returns (\\n            int56 tickCumulativeInside,\\n            uint160 secondsPerLiquidityInsideX128,\\n            uint32 secondsInside\\n        );\\n}\\n\"\r\n    },\r\n    \"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolEvents.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Events emitted by a pool\\n/// @notice Contains all events emitted by the pool\\ninterface IUniswapV3PoolEvents {\\n    /// @notice Emitted exactly once by a pool when #initialize is first called on the pool\\n    /// @dev Mint/Burn/Swap cannot be emitted by the pool before Initialize\\n    /// @param sqrtPriceX96 The initial sqrt price of the pool, as a Q64.96\\n    /// @param tick The initial tick of the pool, i.e. log base 1.0001 of the starting price of the pool\\n    event Initialize(uint160 sqrtPriceX96, int24 tick);\\n\\n    /// @notice Emitted when liquidity is minted for a given position\\n    /// @param sender The address that minted the liquidity\\n    /// @param owner The owner of the position and recipient of any minted liquidity\\n    /// @param tickLower The lower tick of the position\\n    /// @param tickUpper The upper tick of the position\\n    /// @param amount The amount of liquidity minted to the position range\\n    /// @param amount0 How much token0 was required for the minted liquidity\\n    /// @param amount1 How much token1 was required for the minted liquidity\\n    event Mint(\\n        address sender,\\n        address indexed owner,\\n        int24 indexed tickLower,\\n        int24 indexed tickUpper,\\n        uint128 amount,\\n        uint256 amount0,\\n        uint256 amount1\\n    );\\n\\n    /// @notice Emitted when fees are collected by the owner of a position\\n    /// @dev Collect events may be emitted with zero amount0 and amount1 when the caller chooses not to collect fees\\n    /// @param owner The owner of the position for which fees are collected\\n    /// @param tickLower The lower tick of the position\\n    /// @param tickUpper The upper tick of the position\\n    /// @param amount0 The amount of token0 fees collected\\n    /// @param amount1 The amount of token1 fees collected\\n    event Collect(\\n        address indexed owner,\\n        address recipient,\\n        int24 indexed tickLower,\\n        int24 indexed tickUpper,\\n        uint128 amount0,\\n        uint128 amount1\\n    );\\n\\n    /// @notice Emitted when a position's liquidity is removed\\n    /// @dev Does not withdraw any fees earned by the liquidity position, which must be withdrawn via #collect\\n    /// @param owner The owner of the position for which liquidity is removed\\n    /// @param tickLower The lower tick of the position\\n    /// @param tickUpper The upper tick of the position\\n    /// @param amount The amount of liquidity to remove\\n    /// @param amount0 The amount of token0 withdrawn\\n    /// @param amount1 The amount of token1 withdrawn\\n    event Burn(\\n        address indexed owner,\\n        int24 indexed tickLower,\\n        int24 indexed tickUpper,\\n        uint128 amount,\\n        uint256 amount0,\\n        uint256 amount1\\n    );\\n\\n    /// @notice Emitted by the pool for any swaps between token0 and token1\\n    /// @param sender The address that initiated the swap call, and that received the callback\\n    /// @param recipient The address that received the output of the swap\\n    /// @param amount0 The delta of the token0 balance of the pool\\n    /// @param amount1 The delta of the token1 balance of the pool\\n    /// @param sqrtPriceX96 The sqrt(price) of the pool after the swap, as a Q64.96\\n    /// @param liquidity The liquidity of the pool after the swap\\n    /// @param tick The log base 1.0001 of price of the pool after the swap\\n    event Swap(\\n        address indexed sender,\\n        address indexed recipient,\\n        int256 amount0,\\n        int256 amount1,\\n        uint160 sqrtPriceX96,\\n        uint128 liquidity,\\n        int24 tick\\n    );\\n\\n    /// @notice Emitted by the pool for any flashes of token0/token1\\n    /// @param sender The address that initiated the swap call, and that received the callback\\n    /// @param recipient The address that received the tokens from flash\\n    /// @param amount0 The amount of token0 that was flashed\\n    /// @param amount1 The amount of token1 that was flashed\\n    /// @param paid0 The amount of token0 paid for the flash, which can exceed the amount0 plus the fee\\n    /// @param paid1 The amount of token1 paid for the flash, which can exceed the amount1 plus the fee\\n    event Flash(\\n        address indexed sender,\\n        address indexed recipient,\\n        uint256 amount0,\\n        uint256 amount1,\\n        uint256 paid0,\\n        uint256 paid1\\n    );\\n\\n    /// @notice Emitted by the pool for increases to the number of observations that can be stored\\n    /// @dev observationCardinalityNext is not the observation cardinality until an observation is written at the index\\n    /// just before a mint/swap/burn.\\n    /// @param observationCardinalityNextOld The previous value of the next observation cardinality\\n    /// @param observationCardinalityNextNew The updated value of the next observation cardinality\\n    event IncreaseObservationCardinalityNext(\\n        uint16 observationCardinalityNextOld,\\n        uint16 observationCardinalityNextNew\\n    );\\n\\n    /// @notice Emitted when the protocol fee is changed by the pool\\n    /// @param feeProtocol0Old The previous value of the token0 protocol fee\\n    /// @param feeProtocol1Old The previous value of the token1 protocol fee\\n    /// @param feeProtocol0New The updated value of the token0 protocol fee\\n    /// @param feeProtocol1New The updated value of the token1 protocol fee\\n    event SetFeeProtocol(uint8 feeProtocol0Old, uint8 feeProtocol1Old, uint8 feeProtocol0New, uint8 feeProtocol1New);\\n\\n    /// @notice Emitted when the collected protocol fees are withdrawn by the factory owner\\n    /// @param sender The address that collects the protocol fees\\n    /// @param recipient The address that receives the collected protocol fees\\n    /// @param amount0 The amount of token0 protocol fees that is withdrawn\\n    /// @param amount0 The amount of token1 protocol fees that is withdrawn\\n    event CollectProtocol(address indexed sender, address indexed recipient, uint128 amount0, uint128 amount1);\\n}\\n\"\r\n    },\r\n    \"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolImmutables.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Pool state that never changes\\n/// @notice These parameters are fixed for a pool forever, i.e., the methods will always return the same values\\ninterface IUniswapV3PoolImmutables {\\n    /// @notice The contract that deployed the pool, which must adhere to the IUniswapV3Factory interface\\n    /// @return The contract address\\n    function factory() external view returns (address);\\n\\n    /// @notice The first of the two tokens of the pool, sorted by address\\n    /// @return The token contract address\\n    function token0() external view returns (address);\\n\\n    /// @notice The second of the two tokens of the pool, sorted by address\\n    /// @return The token contract address\\n    function token1() external view returns (address);\\n\\n    /// @notice The pool's fee in hundredths of a bip, i.e. 1e-6\\n    /// @return The fee\\n    function fee() external view returns (uint24);\\n\\n    /// @notice The pool tick spacing\\n    /// @dev Ticks can only be used at multiples of this value, minimum of 1 and always positive\\n    /// e.g.: a tickSpacing of 3 means ticks can be initialized every 3rd tick, i.e., ..., -6, -3, 0, 3, 6, ...\\n    /// This value is an int24 to avoid casting even though it is always positive.\\n    /// @return The tick spacing\\n    function tickSpacing() external view returns (int24);\\n\\n    /// @notice The maximum amount of position liquidity that can use any tick in the range\\n    /// @dev This parameter is enforced per tick to prevent liquidity from overflowing a uint128 at any point, and\\n    /// also prevents out-of-range liquidity from being used to prevent adding in-range liquidity to a pool\\n    /// @return The max amount of liquidity per tick\\n    function maxLiquidityPerTick() external view returns (uint128);\\n}\\n\"\r\n    },\r\n    \"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolOwnerActions.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Permissioned pool actions\\n/// @notice Contains pool methods that may only be called by the factory owner\\ninterface IUniswapV3PoolOwnerActions {\\n    /// @notice Set the denominator of the protocol's % share of the fees\\n    /// @param feeProtocol0 new protocol fee for token0 of the pool\\n    /// @param feeProtocol1 new protocol fee for token1 of the pool\\n    function setFeeProtocol(uint8 feeProtocol0, uint8 feeProtocol1) external;\\n\\n    /// @notice Collect the protocol fee accrued to the pool\\n    /// @param recipient The address to which collected protocol fees should be sent\\n    /// @param amount0Requested The maximum amount of token0 to send, can be 0 to collect fees in only token1\\n    /// @param amount1Requested The maximum amount of token1 to send, can be 0 to collect fees in only token0\\n    /// @return amount0 The protocol fee collected in token0\\n    /// @return amount1 The protocol fee collected in token1\\n    function collectProtocol(\\n        address recipient,\\n        uint128 amount0Requested,\\n        uint128 amount1Requested\\n    ) external returns (uint128 amount0, uint128 amount1);\\n}\\n\"\r\n    },\r\n    \"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolState.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Pool state that can change\\n/// @notice These methods compose the pool's state, and can change with any frequency including multiple times\\n/// per transaction\\ninterface IUniswapV3PoolState {\\n    /// @notice The 0th storage slot in the pool stores many values, and is exposed as a single method to save gas\\n    /// when accessed externally.\\n    /// @return sqrtPriceX96 The current price of the pool as a sqrt(token1/token0) Q64.96 value\\n    /// tick The current tick of the pool, i.e. according to the last tick transition that was run.\\n    /// This value may not always be equal to SqrtTickMath.getTickAtSqrtRatio(sqrtPriceX96) if the price is on a tick\\n    /// boundary.\\n    /// observationIndex The index of the last oracle observation that was written,\\n    /// observationCardinality The current maximum number of observations stored in the pool,\\n    /// observationCardinalityNext The next maximum number of observations, to be updated when the observation.\\n    /// feeProtocol The protocol fee for both tokens of the pool.\\n    /// Encoded as two 4 bit values, where the protocol fee of token1 is shifted 4 bits and the protocol fee of token0\\n    /// is the lower 4 bits. Used as the denominator of a fraction of the swap fee, e.g. 4 means 1/4th of the swap fee.\\n    /// unlocked Whether the pool is currently locked to reentrancy\\n    function slot0()\\n        external\\n        view\\n        returns (\\n            uint160 sqrtPriceX96,\\n            int24 tick,\\n            uint16 observationIndex,\\n            uint16 observationCardinality,\\n            uint16 observationCardinalityNext,\\n            uint8 feeProtocol,\\n            bool unlocked\\n        );\\n\\n    /// @notice The fee growth as a Q128.128 fees of token0 collected per unit of liquidity for the entire life of the pool\\n    /// @dev This value can overflow the uint256\\n    function feeGrowthGlobal0X128() external view returns (uint256);\\n\\n    /// @notice The fee growth as a Q128.128 fees of token1 collected per unit of liquidity for the entire life of the pool\\n    /// @dev This value can overflow the uint256\\n    function feeGrowthGlobal1X128() external view returns (uint256);\\n\\n    /// @notice The amounts of token0 and token1 that are owed to the protocol\\n    /// @dev Protocol fees will never exceed uint128 max in either token\\n    function protocolFees() external view returns (uint128 token0, uint128 token1);\\n\\n    /// @notice The currently in range liquidity available to the pool\\n    /// @dev This value has no relationship to the total liquidity across all ticks\\n    function liquidity() external view returns (uint128);\\n\\n    /// @notice Look up information about a specific tick in the pool\\n    /// @param tick The tick to look up\\n    /// @return liquidityGross the total amount of position liquidity that uses the pool either as tick lower or\\n    /// tick upper,\\n    /// liquidityNet how much liquidity changes when the pool price crosses the tick,\\n    /// feeGrowthOutside0X128 the fee growth on the other side of the tick from the current tick in token0,\\n    /// feeGrowthOutside1X128 the fee growth on the other side of the tick from the current tick in token1,\\n    /// tickCumulativeOutside the cumulative tick value on the other side of the tick from the current tick\\n    /// secondsPerLiquidityOutsideX128 the seconds spent per liquidity on the other side of the tick from the current tick,\\n    /// secondsOutside the seconds spent on the other side of the tick from the current tick,\\n    /// initialized Set to true if the tick is initialized, i.e. liquidityGross is greater than 0, otherwise equal to false.\\n    /// Outside values can only be used if the tick is initialized, i.e. if liquidityGross is greater than 0.\\n    /// In addition, these values are only relative and must be used only in comparison to previous snapshots for\\n    /// a specific position.\\n    function ticks(int24 tick)\\n        external\\n        view\\n        returns (\\n            uint128 liquidityGross,\\n            int128 liquidityNet,\\n            uint256 feeGrowthOutside0X128,\\n            uint256 feeGrowthOutside1X128,\\n            int56 tickCumulativeOutside,\\n            uint160 secondsPerLiquidityOutsideX128,\\n            uint32 secondsOutside,\\n            bool initialized\\n        );\\n\\n    /// @notice Returns 256 packed tick initialized boolean values. See TickBitmap for more information\\n    function tickBitmap(int16 wordPosition) external view returns (uint256);\\n\\n    /// @notice Returns the information about a position by the position's key\\n    /// @param key The position's key is a hash of a preimage composed by the owner, tickLower and tickUpper\\n    /// @return _liquidity The amount of liquidity in the position,\\n    /// Returns feeGrowthInside0LastX128 fee growth of token0 inside the tick range as of the last mint/burn/poke,\\n    /// Returns feeGrowthInside1LastX128 fee growth of token1 inside the tick range as of the last mint/burn/poke,\\n    /// Returns tokensOwed0 the computed amount of token0 owed to the position as of the last mint/burn/poke,\\n    /// Returns tokensOwed1 the computed amount of token1 owed to the position as of the last mint/burn/poke\\n    function positions(bytes32 key)\\n        external\\n        view\\n        returns (\\n            uint128 _liquidity,\\n            uint256 feeGrowthInside0LastX128,\\n            uint256 feeGrowthInside1LastX128,\\n            uint128 tokensOwed0,\\n            uint128 tokensOwed1\\n        );\\n\\n    /// @notice Returns data about a specific observation index\\n    /// @param index The element of the observations array to fetch\\n    /// @dev You most likely want to use #observe() instead of this method to get an observation as of some amount of time\\n    /// ago, rather than at a specific index in the array.\\n    /// @return blockTimestamp The timestamp of the observation,\\n    /// Returns tickCumulative the tick multiplied by seconds elapsed for the life of the pool as of the observation timestamp,\\n    /// Returns secondsPerLiquidityCumulativeX128 the seconds per in range liquidity for the life of the pool as of the observation timestamp,\\n    /// Returns initialized whether the observation has been initialized and the values are safe to use\\n    function observations(uint256 index)\\n        external\\n        view\\n        returns (\\n            uint32 blockTimestamp,\\n            int56 tickCumulative,\\n            uint160 secondsPerLiquidityCumulativeX128,\\n            bool initialized\\n        );\\n}\\n\"\r\n    },\r\n    \"contracts/Excavator.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.7.0 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nimport \\\"@chainlink/contracts/src/v0.8/shared/interfaces/LinkTokenInterface.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/vrf/VRFCoordinatorV2.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/vrf/VRFConsumerBaseV2.sol\\\";\\n\\nimport \\\"./utils/ExecutorManager.sol\\\";\\nimport \\\"./utils/TransferHelper.sol\\\";\\nimport \\\"./interfaces/ISwapRouter.sol\\\";\\nimport \\\"./interfaces/IWETH.sol\\\";\\nimport \\\"./interfaces/ITetraSpektra.sol\\\";\\n\\ncontract Excavator is Ownable, ExecutorManager, VRFConsumerBaseV2 {\\n    ISwapRouter public immutable uniswapRouter;\\n    VRFCoordinatorV2 public immutable vrfCoordinator;\\n\\n    address public immutable WETH;\\n    address public immutable LINK;\\n    bytes32 public immutable KEY_HASH;\\n\\n    uint64 public vrfSubscriptionId;\\n    ITetraSpektra immutable tetraSpektra;\\n\\n    uint32 _gasFeeLimit = 420_000;\\n\\n    constructor(\\n        address executor,\\n        address tetraSpektraAddress_,\\n        address uniswapRouterAddress_,\\n        address vrfCoordinatorAddress_,\\n        bytes32 vrfKeyHash_,\\n        address wethTokenAddress_,\\n        address linkTokenAddress_\\n    )\\n        Ownable(msg.sender)\\n        ExecutorManager(executor)\\n        VRFConsumerBaseV2(vrfCoordinatorAddress_)\\n    {\\n        tetraSpektra = ITetraSpektra(tetraSpektraAddress_);\\n\\n        uniswapRouter = ISwapRouter(uniswapRouterAddress_);\\n\\n        vrfCoordinator = VRFCoordinatorV2(vrfCoordinatorAddress_);\\n\\n        WETH = wethTokenAddress_;\\n        LINK = linkTokenAddress_;\\n        KEY_HASH = vrfKeyHash_;\\n\\n        TransferHelper.safeApprove(\\n            WETH,\\n            address(uniswapRouter),\\n            type(uint256).max\\n        );\\n\\n        LinkTokenInterface(LINK).approve(\\n            address(vrfCoordinator),\\n            type(uint256).max\\n        );\\n    }\\n\\n    function initialize() public payable onlyOwner {\\n        vrfSubscriptionId = vrfCoordinator.createSubscription();\\n\\n        require(isInitialized(), \\\"0\\\");\\n\\n        vrfCoordinator.addConsumer(vrfSubscriptionId, address(this));\\n\\n        IWETH(WETH).deposit{value: msg.value}();\\n\\n        uint256 outputAmount = _swapWethForLink(msg.value, address(this));\\n\\n        LinkTokenInterface(LINK).transferAndCall(\\n            address(vrfCoordinator),\\n            outputAmount,\\n            abi.encode(vrfSubscriptionId)\\n        );\\n    }\\n\\n    function fund() external payable {\\n        require(isInitialized(), \\\"0\\\");\\n        IWETH(WETH).deposit{value: msg.value}();\\n\\n        uint256 outputAmount = _swapWethForLink(msg.value, address(this));\\n\\n        LinkTokenInterface(LINK).transferAndCall(\\n            address(vrfCoordinator),\\n            outputAmount,\\n            abi.encode(vrfSubscriptionId)\\n        );\\n    }\\n\\n    function fundWithWeth(uint256 amount) external {\\n        require(isInitialized(), \\\"0\\\");\\n        require(amount > 0, \\\"1\\\");\\n        require(IERC20(WETH).transferFrom(msg.sender, address(this), amount));\\n\\n        uint256 fundAmount = _swapWethForLink(amount, address(this));\\n        require(fundAmount > 0, \\\"2\\\");\\n        LinkTokenInterface(LINK).transferAndCall(\\n            address(vrfCoordinator),\\n            fundAmount,\\n            abi.encode(vrfSubscriptionId)\\n        );\\n    }\\n\\n    function fundWithLink(uint256 amount) external {\\n        require(isInitialized(), \\\"0\\\");\\n        require(amount > 0, \\\"1\\\");\\n        require(IERC20(LINK).transferFrom(msg.sender, address(this), amount));\\n\\n        uint256 fundAmount = IERC20(LINK).balanceOf(address(this));\\n        LinkTokenInterface(LINK).transferAndCall(\\n            address(vrfCoordinator),\\n            fundAmount,\\n            abi.encode(vrfSubscriptionId)\\n        );\\n    }\\n\\n    function isInitialized() public view returns (bool) {\\n        return vrfSubscriptionId != 0;\\n    }\\n\\n    function getLinkPrice() external view returns (uint256) {\\n        (, int answer, , , ) = vrfCoordinator.LINK_ETH_FEED().latestRoundData();\\n        uint256 linkPrice = (answer <= 0)\\n            ? 6_500_000_000_000_000\\n            : uint256(answer);\\n        return linkPrice;\\n    }\\n\\n    function _swapWethForLink(\\n        uint256 amountIn,\\n        address recipient\\n    ) private returns (uint256) {\\n        return\\n            uniswapRouter.exactInputSingle(\\n                ISwapRouter.ExactInputSingleParams({\\n                    tokenIn: WETH,\\n                    tokenOut: LINK,\\n                    fee: 3_000,\\n                    recipient: recipient,\\n                    amountIn: amountIn,\\n                    amountOutMinimum: 2,\\n                    sqrtPriceLimitX96: 0\\n                })\\n            );\\n    }\\n\\n    function beginExcavation() public onlyOwner returns (uint256) {\\n        uint256 excavationId = vrfCoordinator.requestRandomWords(\\n            KEY_HASH,\\n            vrfSubscriptionId,\\n            3,\\n            _gasFeeLimit,\\n            1\\n        );\\n        return excavationId;\\n    }\\n\\n    function updateGasFeeLimit(uint32 gasFeeLimit) external onlyExecutor {\\n        require(gasFeeLimit > 330_000, \\\"TOO_LOW\\\");\\n        _gasFeeLimit = gasFeeLimit;\\n    }\\n\\n    function fulfillRandomWords(\\n        uint256 excavationId,\\n        uint256[] memory values\\n    ) internal override {\\n        tetraSpektra.excavate(excavationId, values[0]);\\n    }\\n\\n    function forceExcavate(\\n        uint256 excavationId,\\n        uint256 value\\n    ) public onlyOwner {\\n        tetraSpektra.excavate(excavationId, value);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IBountyVault.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.7.0 <0.9.0;\\n\\ninterface IBountyVault {\\n    function distribute(\\n        address recipient,\\n        uint256 amount,\\n        uint256 amountForCreator\\n    ) external;\\n\\n    function claimBounty(address tokenOwner, uint256 tokenId) external;\\n\\n    function isVaultUnlocked() external returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IClaimsManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.7.0 <0.9.0;\\n\\ninterface IClaimsManager {\\n    function isClaimsSessionExpired() external view returns (bool);\\n\\n    function getTimeRemainingForClaimsSession() external view returns (uint256);\\n\\n    function getClaimsSessionId() external view returns (uint256);\\n\\n    function enable() external;\\n\\n    function claim(address recipient, uint256 tokenId) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IPriceOracle.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity >=0.7.0 <0.9.0;\\n\\ninterface IPriceOracle {\\n    function getPrice(\\n        address token0Address,\\n        address token1Address,\\n        uint128 amount,\\n        uint24 poolFee\\n    ) external view returns (uint256 priceU18);\\n\\n    function getBasePrice(\\n        address token0Address,\\n        address token1Address,\\n        uint24 poolFee\\n    ) external view returns (uint256 priceU18);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IProspektorFundManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.7.0 <0.9.0;\\n\\ninterface IProspektorFundManager {\\n    function getTick() external view returns (int24);\\n\\n    function collectLPFees() external returns (uint256, uint256);\\n\\n    function addLiquidity(\\n        uint token0Amount,\\n        uint token1Amount\\n    )\\n        external\\n        returns (uint128 liquidity, uint256 token0Value, uint256 token1Value);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IRandomizer.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.7.0 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ninterface IRandomizer {\\n    function random() external returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ISwapRouter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.7.0 <0.9.0;\\n\\ninterface ISwapRouter {\\n    struct ExactInputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        // uint deadline;\\n        uint amountIn;\\n        uint amountOutMinimum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    function exactInputSingle(\\n        ExactInputSingleParams calldata params\\n    ) external payable returns (uint amountOut);\\n\\n    struct ExactInputParams {\\n        bytes path;\\n        address recipient;\\n        //uint deadline;\\n        uint amountIn;\\n        uint amountOutMinimum;\\n    }\\n\\n    function exactInput(\\n        ExactInputParams calldata params\\n    ) external payable returns (uint amountOut);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ITetraSpektra.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.7.0 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\n\\ninterface ITetraSpektra is IERC721 {\\n    function excavate(uint256 excavationId, uint256 value) external;\\n\\n    function exchange(uint256[4] memory tokenIds) external;\\n\\n    function getGlyphKeys(uint256 tokenId) external returns (bytes32[3] memory);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IWETH.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\npragma solidity >=0.7.0 <0.9.0;\\n\\ninterface IWETH is IERC20 {\\n    function deposit() external payable;\\n\\n    function withdraw(uint amount) external;\\n}\\n\"\r\n    },\r\n    \"contracts/TetraSpectra.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\n/******* TetraSpektra.sol ******\\n * \u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591 *\\n * \u2591\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2591\u2591\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2591\u2591 *\\n * \u2591\u2591\u2588\u2588\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2591\u2591 *\\n * \u2591\u2591\u2588\u2588\u2591\u2591\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2591\u2591\u2591\u2588\u2588\u2588\u2588\u2591\u2591\u2591\u2588\u2588\u2591\u2591 *\\n * \u2591\u2591\u2588\u2588\u2591\u2591\u2591\u2588\u2588\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2591\u2591\u2591\u2588\u2588\u2591\u2591 *\\n * \u2591\u2591\u2588\u2588\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2592\u2592\u2591\u2588\u2588\u2591\u2591\u2588\u2588\u2591\u2591\u2591\u2591\u2591\u2591\u2591 *\\n * \u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2591\u2591\u2593\u2593\u2591\u2592\u2592\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2591\u2591 *\\n * \u2591\u2591\u2588\u2588\u2591\u2591\u2591\u2588\u2588\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2591\u2591\u2591\u2588\u2588\u2591\u2591 *\\n * \u2591\u2591\u2588\u2588\u2591\u2591\u2591\u2588\u2588\u2588\u2588\u2591\u2591\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2591\u2591\u2591\u2588\u2588\u2591\u2591 *\\n * \u2591\u2591\u2588\u2588\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2591\u2591 *\\n * \u2591\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2591\u2591\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2591\u2591 *\\n * \u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591 *\\n ******************************/\\n\\n/*\\n  ___                           _            _    _   \\n / _ \\\\__  __/\\\\   /\\\\___ _ __ ___| |_ ___  ___| | _| |_ \\n| | | \\\\ \\\\/ /\\\\ \\\\ / / _ \\\\ '__/ __| __/ _ \\\\/ __| |/ / __|\\n| |_| |>  <  \\\\ V /  __/ |  \\\\__ \\\\ ||  __/ (__|   <| |_ \\n \\\\___//_/\\\\_\\\\  \\\\_/ \\\\___|_|  |___/\\\\__\\\\___|\\\\___|_|\\\\_\\\\\\\\__|\\n \\n */\\n\\npragma solidity >=0.7.0 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Pausable.sol\\\";\\n\\nimport {IUniswapV3Pool} from \\\"@uniswap/v3-core/contracts/interfaces/IUniswapV3Pool.sol\\\";\\nimport {Excavator} from \\\"./Excavator.sol\\\";\\nimport \\\"./interfaces/ISwapRouter.sol\\\";\\nimport \\\"./interfaces/IClaimsManager.sol\\\";\\nimport \\\"./interfaces/IRandomizer.sol\\\";\\nimport \\\"./interfaces/IPriceOracle.sol\\\";\\nimport \\\"./interfaces/IBountyVault.sol\\\";\\nimport \\\"./interfaces/IWETH.sol\\\";\\nimport \\\"./interfaces/IProspektorFundManager.sol\\\";\\n\\nimport \\\"./utils/TransferHelper.sol\\\";\\nimport \\\"./utils/RenderHelper.sol\\\";\\nimport \\\"./utils/ExecutorManager.sol\\\";\\n\\nenum CreatorBountyTier {\\n    None,\\n    Low,\\n    Medium,\\n    High,\\n    Ultra\\n}\\n\\nenum BountyTier {\\n    Silver,\\n    Gold,\\n    Platinum\\n}\\n\\nenum DiscoveryType {\\n    Prospekted,\\n    Reforged,\\n    Refined\\n}\\n\\nstruct BountySwapConfig {\\n    uint256 tokenCount;\\n    uint256 innerCount;\\n    uint256 outerCount;\\n}\\n\\nstruct TetraSpektraConfig {\\n    uint256 maxSupply;\\n    uint256 prospektPrice;\\n    uint256 refreshPrice;\\n    uint256 flashBountyValue;\\n    uint8 excavatorFundingPercentage;\\n    uint16 maxSilver2Swaps;\\n    uint8 silver2UnlockCadence;\\n    uint8 silver2UnlockAmount;\\n    string[] colorHexCodes;\\n    string[] colorNames;\\n}\\n\\nstruct AddressConfig {\\n    address randomizerAddress;\\n    address claimsManagerAddress;\\n    address priceOracleAddress;\\n    address bountyVaultAddress;\\n    address uniswapRouterAddress;\\n}\\n\\nstruct ColorConfig {\\n    string[] colorHexCodes;\\n    string[] colorNames;\\n    uint8 maxColors;\\n}\\n\\nstruct ExcavatorConfig {\\n    address vrfCoordinatorAddress;\\n    bytes32 vrfKeyHash;\\n    address linkTokenAddress;\\n}\\n\\nstruct TokenConfig {\\n    address wethTokenAddress;\\n    address porkTokenAddress;\\n}\\n\\n/**\\n * @title TetraSpektra\\n * @author 0xVersteckt\\n * @notice Hello prospektor...\\n */\\ncontract TetraSpektra is\\n    ERC721,\\n    IERC721Receiver,\\n    ExecutorManager,\\n    Pausable,\\n    ReentrancyGuard\\n{\\n    error InsufficientPayment();\\n    error NotSoldOut();\\n    error InvalidTokenOwner();\\n    error InvalidToken();\\n    error NotMatched();\\n    error InvalidTokenCompare();\\n    error TooManySilver2Swaps();\\n    error InvalidTokenCount();\\n    error ExcavationInProgress();\\n    error ExcavationGroupNotReady();\\n\\n    event Swapped(\\n        address indexed prospektor,\\n        uint256 indexed tier,\\n        uint256 bountyValue,\\n        uint256 tokenId_0,\\n        uint256 tokenId_1,\\n        uint256 tokenId_2,\\n        uint256 tokenId_3\\n    );\\n\\n    event Discovery(\\n        address indexed prospektor,\\n        uint256 indexed tokenId,\\n        DiscoveryType discoveryType\\n    );\\n\\n    event Excavated(\\n        address indexed prospektor,\\n        uint256 indexed tokenId,\\n        bytes32 silverTetraKey,\\n        bytes32 goldTetraKey,\\n        bytes32 platinumTetraKey\\n    );\\n\\n    event AddedLiquidityForBounty(\\n        address indexed prospektor,\\n        uint256 interactionCount,\\n        uint256 porkAmount,\\n        uint256 wethAmount,\\n        uint256 canAddLiquidityAfter\\n    );\\n\\n    event CollectedFeesForBounty(\\n        address indexed prospektor,\\n        uint256 interactionCount,\\n        uint256 porkAmount,\\n        uint256 canCollectFeesAfter\\n    );\\n\\n    event ExcavationComplete(\\n        uint256 indexed excavationId,\\n        uint256 indexed value\\n    );\\n\\n    event ExcavationContracted(\\n        uint256 excavationId,\\n        uint256 tokenId_0,\\n        uint256 tokenId_1,\\n        uint256 tokenId_2,\\n        uint256 tokenId_3,\\n        uint256 tokenId_4\\n    );\\n\\n    event ExcavatedFlashBounty(\\n        bytes32 silverTetraKey,\\n        bytes32 goldTetraKey,\\n        bytes32 platinumTetraKey\\n    );\\n\\n    event ClaimedFlashBounty(\\n        address indexed prospektor,\\n        uint256 indexed tokenId,\\n        bytes32 tetraKey,\\n        uint256 bountyValue\\n    );\\n\\n    event Claimed(\\n        address indexed prospektor,\\n        uint256 claimsSessionId,\\n        uint256 claimedTokenId,\\n        uint256 tokenId\\n    );\\n\\n    IProspektorFundManager public prospektorFundManager;\\n    IClaimsManager public claimsManager;\\n    IRandomizer public randomizer;\\n    IPriceOracle public priceOracle;\\n    IBountyVault public bountyVault;\\n    Excavator public excavator;\\n\\n    IUniswapV3Pool public uniswapPool;\\n    ISwapRouter public uniswapRouter;\\n\\n    address public immutable WETH;\\n    address public immutable PORK;\\n\\n    uint256 public immutable maxSupply;\\n\\n    /// @notice Used to prevent underflow\\n    uint256 public constant MIN_WETH_AMOUNT = 1_000_000_000_000_000; // .001 ether\\n    uint256 public constant MIN_PORK_AMOUNT = 100_000_000;\\n\\n    bytes32 public immutable BASE_TETRA_KEY = getTetraKey(0, BountyTier.Silver);\\n    uint24 public constant PORK_WETH_POOL_FEE = 10_000;\\n    uint24 public constant DEFAULT_POOL_FEE = 3_000;\\n    uint8 public constant MAX_TO_PROSPEKT = 5;\\n    uint8 private constant CADENCE = 5;\\n    uint8 public constant SWAP_PERCENTAGE_INCREMENT = 8;\\n\\n    uint8 public fundingPercentage;\\n\\n    uint16 public maxSilver2Swaps;\\n    uint8 public silver2UnlockCadence;\\n    uint8 public silver2UnlockAmount;\\n\\n    uint256 public silver2Swaps = 0;\\n\\n    uint256 public canCollectFeesAfter = 20;\\n    uint256 public feeCollectorBounty = 20_000_000_000_000_000;\\n    uint256 public feeCollectorCadence = 20;\\n\\n    uint256 public canAddLiquidityAfter = 10;\\n    uint256 public liquidityAdderBounty = 25_000_000_000_000_000;\\n    uint256 public liquidityAdderCadence = 12;\\n\\n    uint256 private _prospektCount = 1;\\n    uint256 public interactionCount = 0;\\n    uint256 public swapPercentage = 55;\\n    uint256 public prospektPrice;\\n    uint256 public refreshPrice;\\n\\n    uint256 public refreshCount = 0;\\n\\n    bool public isInitialized;\\n\\n    uint256 public flashBountyValue;\\n    bool public flashBountyEnabled;\\n\\n    mapping(uint256 => uint256) private _tetraSeeds;\\n    mapping(uint256 => uint256) private _excavationResults;\\n\\n    mapping(uint256 => uint256) public tetraExcavationIds;\\n    mapping(uint256 => uint256) public excavationTracker;\\n\\n    uint256 public excavationGroup;\\n\\n    uint256[3][3] private _bounties;\\n\\n    ColorConfig public colorConfig;\\n\\n    uint24[5][2] private _priceHistory;\\n    uint8 private _priceHistoryIndex;\\n\\n    constructor(\\n        AddressConfig memory addressConfig,\\n        TokenConfig memory tokenConfig,\\n        ExcavatorConfig memory excavatorConfig,\\n        TetraSpektraConfig memory tetraSpektraConfig,\\n        uint256[3][3] memory bounties\\n    ) payable ExecutorManager(msg.sender) ERC721(\\\"TetraSpektra\\\", \\\"TETRA\\\") {\\n        require(\\n            tetraSpektraConfig.colorHexCodes.length ==\\n                tetraSpektraConfig.colorNames.length,\\n            \\\"0\\\"\\n        );\\n        claimsManager = IClaimsManager(addressConfig.claimsManagerAddress);\\n        randomizer = IRandomizer(addressConfig.randomizerAddress);\\n        priceOracle = IPriceOracle(addressConfig.priceOracleAddress);\\n        bountyVault = IBountyVault(addressConfig.bountyVaultAddress);\\n        uniswapRouter = ISwapRouter(addressConfig.uniswapRouterAddress);\\n\\n        WETH = tokenConfig.wethTokenAddress;\\n        PORK = tokenConfig.porkTokenAddress;\\n\\n        maxSupply = tetraSpektraConfig.maxSupply;\\n        prospektPrice = tetraSpektraConfig.prospektPrice;\\n        refreshPrice = tetraSpektraConfig.refreshPrice;\\n\\n        flashBountyValue = tetraSpektraConfig.flashBountyValue == 0\\n            ? _percentage(tetraSpektraConfig.prospektPrice, 70) * 10\\n            : tetraSpektraConfig.flashBountyValue;\\n\\n        fundingPercentage = tetraSpektraConfig.excavatorFundingPercentage;\\n\\n        maxSilver2Swaps = tetraSpektraConfig.maxSilver2Swaps;\\n        silver2UnlockCadence = tetraSpektraConfig.silver2UnlockCadence;\\n        silver2UnlockAmount = tetraSpektraConfig.silver2UnlockAmount;\\n\\n        colorConfig = ColorConfig({\\n            colorHexCodes: tetraSpektraConfig.colorHexCodes,\\n            colorNames: tetraSpektraConfig.colorNames,\\n            maxColors: uint8(tetraSpektraConfig.colorNames.length)\\n        });\\n\\n        excavator = new Excavator(\\n            msg.sender,\\n            address(this),\\n            address(uniswapRouter),\\n            excavatorConfig.vrfCoordinatorAddress,\\n            excavatorConfig.vrfKeyHash,\\n            WETH,\\n            excavatorConfig.linkTokenAddress\\n        );\\n\\n        TransferHelper.safeApprove(WETH, address(excavator), type(uint256).max);\\n\\n        IWETH(WETH).deposit{value: _percentage(msg.value, 20)}();\\n        excavator.initialize{value: _percentage(msg.value, 80)}();\\n\\n        _bounties = bounties;\\n    }\\n\\n    function _unsafeIncrement(uint256 x) private pure returns (uint256) {\\n        unchecked {\\n            return x + 1;\\n        }\\n    }\\n\\n    modifier mustOwnToken(address addr, uint256 tokenId) {\\n        if (ownerOf(tokenId) != addr) revert InvalidTokenOwner();\\n        _;\\n    }\\n\\n    modifier checkPayment(uint256 value) {\\n        if (msg.value < value) revert InsufficientPayment();\\n        _;\\n    }\\n\\n    modifier mustBeSoldOut() {\\n        if (totalSupply() != maxSupply) revert NotSoldOut();\\n        _;\\n    }\\n\\n    function getBounties() public view returns (uint256[3][3] memory) {\\n        return _bounties;\\n    }\\n\\n    function totalSupply() public view returns (uint256) {\\n        return _prospektCount - 1;\\n    }\\n\\n    function getTetrasRemaining() public view returns (uint256) {\\n        return maxSupply - totalSupply();\\n    }\\n\\n    function claimVaultBounty(\\n        uint256 tokenId\\n    ) public mustOwnToken(msg.sender, tokenId) {\\n        bountyVault.claimBounty(msg.sender, tokenId);\\n    }\\n\\n    function getTotalBounty(\\n        uint256 tierIndex,\\n        uint256 countIndex\\n    ) private view returns (uint256) {\\n        return\\n            address(this).balance >= _bounties[tierIndex][countIndex]\\n                ? _bounties[tierIndex][countIndex]\\n                : address(this).balance;\\n    }\\n\\n    function isFlashBountyEnabled() public view returns (bool) {\\n        return flashBountyEnabled && isExcavated(0);\\n    }\\n\\n    function isExcavated(uint256 tokenId) public view returns (bool) {\\n        return getTetraKey(tokenId, BountyTier.Silver) != BASE_TETRA_KEY;\\n    }\\n\\n    function _percentage(\\n        uint256 value,\\n        uint256 percentage\\n    ) private pure returns (uint256) {\\n        return (value * percentage) / 100;\\n    }\\n\\n    function _fundExcavatorWhenReady() internal {\\n        if (\\n            fundingPercentage > 0 &&\\n            interactionCount > 0 &&\\n            interactionCount % CADENCE == 0\\n        ) {\\n            uint256 fundAmount = (_percentage(\\n                excavator.getLinkPrice(),\\n                fundingPercentage\\n            ) * CADENCE);\\n            require(\\n                IERC20(WETH).balanceOf(address(this)) > fundAmount,\\n                \\\"INVALID_WETH\\\"\\n            );\\n            excavator.fundWithWeth(fundAmount);\\n        }\\n    }\\n\\n    function updateExcavatorFundingPercentage(\\n        uint8 percentage\\n    ) public onlyExecutor {\\n        require(percentage >= 0 && percentage <= 100, \\\"0\\\");\\n        fundingPercentage = percentage;\\n    }\\n\\n    function prospekt(\\n        uint256 count\\n    )\\n        external\\n        payable\\n        whenNotPaused\\n        nonReentrant\\n        checkPayment(prospektPrice * count)\\n        returns (uint256[MAX_TO_PROSPEKT] memory tokenIds)\\n    {\\n        require(count > 0 && count <= MAX_TO_PROSPEKT, \\\"1\\\");\\n        require(totalSupply() + count <= maxSupply, \\\"2\\\");\\n\\n        for (uint256 i = 0; i < count; i = _unsafeIncrement(i))\\n            tokenIds[i] = _prospekt(msg.sender);\\n\\n        IWETH(WETH).deposit{value: msg.value}();\\n\\n        _fundExcavatorWhenReady();\\n\\n        /// @dev Attempt to buffer for liquidity adder\\n        ///      and fee collector bounty\\n        uint256 wethToSwap = IERC20(WETH).balanceOf(address(this));\\n        if (wethToSwap / liquidityAdderBounty == 1)\\n            wethToSwap -= liquidityAdderBounty;\\n        if (wethToSwap > 0)\\n            _swapWethForToken(\\n                PORK,\\n                _percentage(wethToSwap, swapPercentage),\\n                address(this)\\n            );\\n\\n        return tokenIds;\\n    }\\n\\n    /// @dev User pays to re-excavate and claim tokens owned by contract\\n    function refine(\\n        uint256[] memory tokenIds\\n    )\\n        external\\n        payable\\n        whenNotPaused\\n        nonReentrant\\n        checkPayment(refreshPrice * tokenIds.length)\\n        mustBeSoldOut\\n    {\\n        IWETH(WETH).deposit{value: msg.value}();\\n\\n        for (uint256 i = 0; i < tokenIds.length; i = _unsafeIncrement(i)) {\\n            if (ownerOf(tokenIds[i]) != address(this))\\n                revert InvalidTokenOwner();\\n\\n            _transfer(address(this), msg.sender, tokenIds[i]);\\n\\n            _processRefresh(DiscoveryType.Refined, tokenIds[i]);\\n        }\\n\\n        /// @dev Attempt to buffer for liquidity adder\\n        ///      and fee collector bounty\\n        uint256 wethToSwap = IERC20(WETH).balanceOf(address(this));\\n        if (wethToSwap / liquidityAdderBounty == 1)\\n            wethToSwap -= liquidityAdderBounty;\\n        if (wethToSwap > 0)\\n            _swapWethForToken(\\n                PORK,\\n                _percentage(wethToSwap, swapPercentage),\\n                address(this)\\n            );\\n    }\\n\\n    /// @dev User pays to re-excavate tokens they own\\n    function reforge(\\n        uint256[] memory tokenIds\\n    )\\n        external\\n        payable\\n        whenNotPaused\\n        nonReentrant\\n        checkPayment(refreshPrice * tokenIds.length)\\n        mustBeSoldOut\\n    {\\n        IWETH(WETH).deposit{value: msg.value}();\\n\\n        for (uint256 i = 0; i < tokenIds.length; i = _unsafeIncrement(i)) {\\n            if (ownerOf(tokenIds[i]) != msg.sender) revert InvalidTokenOwner();\\n\\n            _resetTetra(tokenIds[i]);\\n\\n            _processRefresh(DiscoveryType.Reforged, tokenIds[i]);\\n        }\\n\\n        /// @dev Attempt to buffer for liquidity adder\\n        ///      and fee collector bounty\\n        uint256 wethToSwap = IERC20(WETH).balanceOf(address(this));\\n        if (wethToSwap / liquidityAdderBounty == 1)\\n            wethToSwap -= liquidityAdderBounty;\\n        if (wethToSwap > 0)\\n            _swapWethForToken(\\n                PORK,\\n                _percentage(wethToSwap, swapPercentage),\\n                address(this)\\n            );\\n    }\\n\\n    /// @dev Swap matching owned tokens for bounty\\n    function swapForBounty(\\n        uint256[4] memory tokenIds,\\n        CreatorBountyTier creatorBountyTier\\n    ) external whenNotPaused nonReentrant {\\n        BountySwapConfig memory bountySwapConfig;\\n        bountySwapConfig.tokenCount = 0;\\n\\n        uint8[7] memory tetra0 = _getTetra(tokenIds[0]);\\n        for (uint256 i = 0; i < tokenIds.length; i = _unsafeIncrement(i)) {\\n            if (tokenIds[i] == 0) break;\\n            else bountySwapConfig.tokenCount++;\\n            if (ownerOf(tokenIds[i]) != msg.sender) revert InvalidTokenOwner();\\n\\n            uint8[7] memory currentTetra = _getTetra(tokenIds[i]);\\n\\n            if (i < tokenIds.length - 1)\\n                for (\\n                    uint256 k = i + 1;\\n                    k < tokenIds.length;\\n                    k = _unsafeIncrement(k)\\n                ) {\\n                    if (tokenIds[k] == 0) break;\\n                    if (tokenIds[i] == tokenIds[k])\\n                        revert InvalidTokenCompare();\\n                    if (\\n                        getTetraKey(tokenIds[i], BountyTier.Silver) !=\\n                        getTetraKey(tokenIds[k], BountyTier.Silver)\\n                    ) revert NotMatched();\\n                }\\n            if (i != 0) {\\n                if (\\n                    tetra0[5] != 0 &&\\n                    currentTetra[5] != 0 &&\\n                    tetra0[5] == currentTetra[5]\\n                )\\n                    bountySwapConfig.innerCount = _unsafeIncrement(\\n                        bountySwapConfig.innerCount\\n                    );\\n                if (\\n                    /// @notice Cant compare if not excavated\\n                    tetra0[6] != 0 &&\\n                    currentTetra[6] != 0 &&\\n                    tetra0[6] == currentTetra[6]\\n                )\\n                    bountySwapConfig.outerCount = _unsafeIncrement(\\n                        bountySwapConfig.outerCount\\n                    );\\n            }\\n        }\\n        if (bountySwapConfig.tokenCount < 2) revert InvalidTokenCount();\\n\\n        uint256 tierIndex = 0;\\n        /// @notice Check to see if shell_0 matches\\n        if (bountySwapConfig.innerCount == bountySwapConfig.tokenCount - 1) {\\n            tierIndex = _unsafeIncrement(tierIndex);\\n\\n            /// @notice Check to see if shell_1 matches\\n            if (bountySwapConfig.outerCount == bountySwapConfig.tokenCount - 1)\\n                tierIndex = _unsafeIncrement(tierIndex);\\n        }\\n\\n        /// @notice Limit silver2Swaps\\n        if (tierIndex == 0 && bountySwapConfig.tokenCount == 2) {\\n            if (silver2Swaps == maxSilver2Swaps) revert TooManySilver2Swaps();\\n            silver2Swaps = _unsafeIncrement(silver2Swaps);\\n        }\\n\\n        for (\\n            uint256 i = 0;\\n            i < bountySwapConfig.tokenCount;\\n            i = _unsafeIncrement(i)\\n        ) {\\n            _resetTetra(tokenIds[i]);\\n            safeTransferFrom(msg.sender, address(this), tokenIds[i]);\\n        }\\n\\n        uint256 totalValueEth = getTotalBounty(\\n            tierIndex,\\n            bountySwapConfig.tokenCount - 2\\n        );\\n\\n        uint256 bountyValue = priceOracle.getPrice(\\n            WETH,\\n            PORK,\\n            uint128(totalValueEth),\\n            PORK_WETH_POOL_FEE\\n        );\\n\\n        require(\\n            IERC20(PORK).balanceOf(address(bountyVault)) > bountyValue,\\n            \\\"NOT_ENOUGH_BALANCE\\\"\\n        );\\n\\n        uint256 creatorBountyPercentage = uint256(\\n            creatorBountyTier == CreatorBountyTier.Low\\n                ? 5\\n                : creatorBountyTier == CreatorBountyTier.Medium\\n                ? 10\\n                : creatorBountyTier == CreatorBountyTier.High\\n                ? 20\\n                : creatorBountyTier == CreatorBountyTier.Ultra\\n                ? 40\\n                : 0\\n        );\\n\\n        bountyVault.distribute(\\n            msg.sender,\\n            _percentage(bountyValue, 100 - creatorBountyPercentage),\\n            _percentage(bountyValue, creatorBountyPercentage)\\n        );\\n\\n        emit Swapped(\\n            msg.sender,\\n            tierIndex,\\n            bountyValue,\\n            tokenIds[0],\\n            tokenIds[1],\\n            tokenIds[2],\\n            /// @notice Make sure that token[2] exists so tokenId isn't \\\"spoofed\\\"\\n            bountySwapConfig.tokenCount > 3 ? tokenIds[3] : 0\\n        );\\n    }\\n\\n    function _processRefresh(\\n        DiscoveryType discoveryType,\\n        uint256 tokenId\\n    ) private {\\n        _excavateWhenReady(tokenId);\\n\\n        _fundExcavatorWhenReady();\\n\\n        if (\\n            ++refreshCount % silver2UnlockCadence == 0 &&\\n            silver2Swaps > silver2UnlockAmount\\n        ) silver2Swaps -= silver2UnlockAmount;\\n\\n        emit Discovery(msg.sender, tokenId, discoveryType);\\n    }\\n\\n    function _swapWethForToken(\\n        address token,\\n        uint256 ethAmount,\\n        address recipient\\n    ) internal returns (uint256 amount) {\\n        uint256 currWethBalance = IWETH(WETH).balanceOf(address(this));\\n        if (ethAmount > currWethBalance) ethAmount = currWethBalance;\\n\\n        // TODO: Set min value req\\n        if (ethAmount > 0) {\\n            amount = _swapTokens(WETH, token, ethAmount, recipient);\\n        }\\n    }\\n\\n    function _resetTetra(uint256 tokenId) private {\\n        delete _tetraSeeds[tokenId];\\n        delete tetraExcavationIds[tokenId];\\n    }\\n\\n    function _beginGroupExcavation() private {\\n        require(excavator.isInitialized(), \\\"NO_SUBSCRIPTION\\\");\\n        uint256 excavationId = excavator.beginExcavation();\\n\\n        require(excavationId != 0, \\\"EXCAVATION_FAILED\\\");\\n        excavationTracker[excavationId] = excavationGroup;\\n\\n        for (uint256 i = 0; i < CADENCE; i = _unsafeIncrement(i))\\n            tetraExcavationIds[\\n                uint256(uint16(excavationTracker[excavationId] >> (16 * i)))\\n            ] = excavationId;\\n\\n        emit ExcavationContracted(\\n            excavationId,\\n            uint256(uint16(excavationGroup >> 0)),\\n            uint256(uint16(excavationGroup >> 16)),\\n            uint256(uint16(excavationGroup >> 32)),\\n            uint256(uint16(excavationGroup >> 48)),\\n            uint256(uint16(excavationGroup >> 64))\\n        );\\n\\n        delete excavationGroup;\\n    }\\n\\n    function excavate(uint256 excavationId, uint256 value) external {\\n        require(\\n            msg.sender == address(excavator.vrfCoordinator()) ||\\n                msg.sender == address(excavator),\\n            \\\"INVALID_SENDER\\\"\\n        );\\n\\n        _excavate(excavationId, value);\\n\\n        emit ExcavationComplete(excavationId, value);\\n    }\\n\\n    function forceExcavate(uint256 excavationId) public onlyExecutor {\\n        /// @notice Prevents executor from breaking unfilled excavation groups\\n        for (uint256 i = 0; i < CADENCE; i = _unsafeIncrement(i)) {\\n            uint256 tokenId = uint256(\\n                uint16(excavationTracker[excavationId] >> (16 * i))\\n            );\\n            if (tokenId == 0) revert ExcavationGroupNotReady();\\n        }\\n        excavator.forceExcavate(excavationId, randomizer.random());\\n    }\\n\\n    function _prospekt(address recipient) private returns (uint256) {\\n        require(totalSupply() < maxSupply);\\n\\n        uint256 tokenId = _prospektCount;\\n        _prospektCount = _unsafeIncrement(_prospektCount);\\n        _safeMint(recipient, tokenId);\\n\\n        _excavateWhenReady(tokenId);\\n\\n        emit Discovery(msg.sender, tokenId, DiscoveryType.Prospekted);\\n\\n        return tokenId;\\n    }\\n\\n    function collectFeesForBounty() external nonReentrant {\\n        require(balanceOf(msg.sender) > 0, \\\"NOT_TETRA_OWNER\\\");\\n        require(canCollectFees(), \\\"NOT_READY\\\");\\n        uint256 preBalance = IERC20(PORK).balanceOf(address(bountyVault));\\n        prospektorFundManager.collectLPFees();\\n        uint256 postBalance = IERC20(PORK).balanceOf(address(bountyVault));\\n\\n        emit CollectedFeesForBounty(\\n            msg.sender,\\n            interactionCount,\\n            postBalance - preBalance,\\n            canCollectFeesAfter\\n        );\\n\\n        canCollectFeesAfter = interactionCount + feeCollectorCadence;\\n        IERC20(WETH).approve(msg.sender, feeCollectorBounty);\\n        IERC20(WETH).transfer(msg.sender, feeCollectorBounty);\\n    }\\n\\n    function addLiquidityForBounty() external nonReentrant {\\n        require(balanceOf(msg.sender) > 0, \\\"NOT_TETRA_OWNER\\\");\\n        require(canAddLiquidity(), \\\"NOT_READY\\\");\\n        (uint256 addedPorkAmount, uint256 addedWethAmount) = _addLiquidity();\\n        canAddLiquidityAfter = interactionCount + liquidityAdderCadence;\\n\\n        emit AddedLiquidityForBounty(\\n            msg.sender,\\n            interactionCount,\\n            addedPorkAmount,\\n            addedWethAmount,\\n            canAddLiquidityAfter\\n        );\\n\\n        IERC20(WETH).approve(msg.sender, liquidityAdderBounty);\\n        IERC20(WETH).transfer(msg.sender, liquidityAdderBounty);\\n    }\\n\\n    function canAddLiquidity() public view returns (bool) {\\n        return\\n            interactionCount >= canAddLiquidityAfter &&\\n            IERC20(WETH).balanceOf(address(this)) > liquidityAdderBounty;\\n    }\\n\\n    function canCollectFees() public view returns (bool) {\\n        return\\n            interactionCount >= canCollectFeesAfter &&\\n            IERC20(WETH).balanceOf(address(this)) > feeCollectorBounty;\\n    }\\n\\n    function _addLiquidity()\\n        private\\n        returns (uint256 addedPorkAmount, uint256 addedWethAmount)\\n    {\\n        uint256 initialPorkBalance = _getBalanceMinusSaver(PORK);\\n        uint256 initialWethBalance = _getBalanceMinusSaver(WETH) -\\n            liquidityAdderBounty;\\n\\n        (, addedPorkAmount, addedWethAmount) = prospektorFundManager\\n            .addLiquidity(initialPorkBalance, initialWethBalance);\\n\\n        uint256 remainingPorkAmount = initialPorkBalance - addedPorkAmount;\\n        uint256 remainingWethAmount = initialWethBalance - addedWethAmount;\\n\\n        uint256 porkWethValue = priceOracle.getPrice(\\n            PORK,\\n            WETH,\\n            uint128(remainingPorkAmount),\\n            PORK_WETH_POOL_FEE\\n        );\\n\\n        if (\\n            porkWethValue > remainingWethAmount &&\\n            swapPercentage - SWAP_PERCENTAGE_INCREMENT > 0\\n        ) swapPercentage -= SWAP_PERCENTAGE_INCREMENT;\\n\\n        if (\\n            porkWethValue < remainingWethAmount &&\\n            swapPercentage + SWAP_PERCENTAGE_INCREMENT < 90\\n        ) swapPercentage += SWAP_PERCENTAGE_INCREMENT;\\n    }\\n\\n    function _getBalanceMinusSaver(\\n        address erc20Address\\n    ) internal view returns (uint256 balance) {\\n        balance = IERC20(erc20Address).balanceOf(address(this));\\n        if (erc20Address == WETH) balance -= MIN_WETH_AMOUNT;\\n        else if (erc20Address == PORK) balance -= MIN_PORK_AMOUNT;\\n    }\\n\\n    function getTetraExcavationId(\\n        uint256 tokenId\\n    ) external view returns (uint256) {\\n        return tetraExcavationIds[tokenId];\\n    }\\n\\n    function isExcavating(uint256 tokenId) public view returns (bool) {\\n        return\\n            tetraExcavationIds[tokenId] != 0 &&\\n            _excavationResults[tetraExcavationIds[tokenId]] == 0;\\n    }\\n\\n    function _excavateWhenReady(uint256 tokenId) internal {\\n        if (isExcavating(tokenId)) revert ExcavationInProgress();\\n\\n        if (interactionCount % CADENCE == 0) excavationGroup = tokenId;\\n        else excavationGroup |= tokenId << (16 * (interactionCount % CADENCE));\\n\\n        /// @notice Temporarily set to value\\n        tetraExcavationIds[tokenId] = 1;\\n\\n        _createTetraSeed(tokenId);\\n\\n        if ((++interactionCount) % CADENCE == 0) _beginGroupExcavation();\\n    }\\n\\n    /**\\n     * Flash bounties\\n     */\\n    function enableFlashBounty() public onlyExecutor {\\n        require(!isFlashBountyEnabled());\\n        flashBountyEnabled = true;\\n        _createTetraSeed(0);\\n        _excavate(0, randomizer.random());\\n    }\\n\\n    function _disableFlashBounty() private {\\n        require(isFlashBountyEnabled(), \\\"NOT_ENABLED\\\");\\n        flashBountyEnabled = false;\\n        delete _excavationResults[0];\\n    }\\n\\n    function isFlashBountyMatch(uint256 tokenId) public view returns (bool) {\\n        return\\n            flashBountyEnabled\\n                ? getTetraKey(0, BountyTier.Silver) ==\\n                    getTetraKey(tokenId, BountyTier.Silver)\\n                : false;\\n    }\\n\\n    function claimFlashBounty(\\n        uint256 tokenId\\n    ) public nonReentrant mustOwnToken(msg.sender, tokenId) {\\n        require(flashBountyEnabled && isFlashBountyMatch(tokenId), \\\"0\\\");\\n        _disableFlashBounty();\\n\\n        uint256 bountyValue = priceOracle.getPrice(\\n            WETH,\\n            PORK,\\n            uint128(flashBountyValue),\\n            PORK_WETH_POOL_FEE\\n        );\\n\\n        bountyVault.distribute(msg.sender, bountyValue, 0);\\n\\n        emit ClaimedFlashBounty(\\n            msg.sender,\\n            tokenId,\\n            getTetraKey(tokenId, BountyTier.Silver),\\n            bountyValue\\n        );\\n    }\\n\\n    function claim(uint256 claimTokenId) public nonReentrant returns (uint256) {\\n        claimsManager.claim(msg.sender, claimTokenId);\\n        uint256 tokenId = _prospekt(msg.sender);\\n        emit Claimed(\\n            msg.sender,\\n            claimsManager.getClaimsSessionId(),\\n            claimTokenId,\\n            tokenId\\n        );\\n        return tokenId;\\n    }\\n\\n    function getTetraKey(\\n        uint256 tokenId,\\n        BountyTier tier\\n    ) public view returns (bytes32) {\\n        if (tier == BountyTier.Silver)\\n            return _getTetraKey(tokenId, false, false);\\n        if (tier == BountyTier.Gold) {\\n            return _getTetraKey(tokenId, true, false);\\n        }\\n        if (tier == BountyTier.Platinum)\\n            return _getTetraKey(tokenId, true, true);\\n        return 0;\\n    }\\n\\n    function getTetraKeys(\\n        uint256 tokenId\\n    ) public view returns (bytes32[3] memory) {\\n        bytes32[3] memory tetraKeys = [\\n            getTetraKey(tokenId, BountyTier.Silver),\\n            getTetraKey(tokenId, BountyTier.Gold),\\n            getTetraKey(tokenId, BountyTier.Platinum)\\n        ];\\n        return tetraKeys;\\n    }\\n\\n    function _getTetra(uint256 tokenId) public view returns (uint8[7] memory) {\\n        if (\\n            isExcavating(tokenId) ||\\n            (tokenId == 0 && !flashBountyEnabled) ||\\n            /// @notice Check if slot is uninitialized\\n            uint256(uint16(_tetraSeeds[tokenId] >> 16)) == 0\\n        ) return [0, 0, 0, 0, 0, 0, 0];\\n        return [\\n            _modToColorIndex(\\n                _excavationResults[tetraExcavationIds[tokenId]],\\n                uint256(uint16(_tetraSeeds[tokenId] >> 16))\\n            ),\\n            _modToColorIndex(\\n                _excavationResults[tetraExcavationIds[tokenId]],\\n                uint256(uint16(_tetraSeeds[tokenId] >> 32))\\n            ),\\n            _modToColorIndex(\\n                _excavationResults[tetraExcavationIds[tokenId]],\\n                uint256(uint16(_tetraSeeds[tokenId] >> 48))\\n            ),\\n            _modToColorIndex(\\n                _excavationResults[tetraExcavationIds[tokenId]],\\n                uint256(uint16(_tetraSeeds[tokenId] >> 64))\\n            ),\\n            _modToColorIndex(\\n                _excavationResults[tetraExcavationIds[tokenId]],\\n                uint256(uint16(_tetraSeeds[tokenId] >> 80))\\n            ),\\n            _modToColorIndex(\\n                _excavationResults[tetraExcavationIds[tokenId]],\\n                uint256(uint16(_tetraSeeds[tokenId] >> 96))\\n            ),\\n            _modToColorIndex(\\n                _excavationResults[tetraExcavationIds[tokenId]],\\n                uint256(uint16(_tetraSeeds[tokenId] >> 112))\\n            )\\n        ];\\n    }\\n\\n    function _getTetraKey(\\n        uint256 tokenId,\\n        bool includeMantle,\\n        bool includeKrust\\n    ) private view returns (bytes32) {\\n        uint8[7] memory tetra = _getTetra(tokenId);\\n        return\\n            bytes32(\\n                (uint256(tetra[0]) + 1) *\\n                    10 ** 12 +\\n                    (uint256(tetra[1]) + 1) *\\n                    10 ** 10 +\\n                    (uint256(tetra[2]) + 1) *\\n                    10 ** 8 +\\n                    (uint256(tetra[3]) + 1) *\\n                    10 ** 6 +\\n                    (uint256(tetra[4]) + 1) *\\n                    10 ** 4 +\\n                    (includeMantle ? (uint256(tetra[5]) + 1) * 10 ** 2 : 0) +\\n                    (includeKrust ? (uint256(tetra[6]) + 1) : 0)\\n            );\\n    }\\n\\n    function tokenURI(\\n        uint256 tokenId\\n    ) public view override returns (string memory) {\\n        return\\n            RenderHelper.getJson(\\n                tokenId,\\n                _getTetra(tokenId),\\n                colorConfig.colorNames,\\n                colorConfig.colorHexCodes\\n            );\\n    }\\n\\n    function _modToColorIndex(\\n        uint256 value,\\n        uint256 seed\\n    ) public view returns (uint8) {\\n        unchecked {\\n            return uint8((value / seed) % (colorConfig.maxColors - 1)) + 1;\\n        }\\n    }\\n\\n    function _createTetraSeed(uint256 tokenId) private {\\n        uint256 tetra;\\n        uint256 rand = randomizer.random();\\n\\n        for (uint256 i = 0; i < 7; i = _unsafeIncrement(i)) tetra |= rand << 16;\\n\\n        _tetraSeeds[tokenId] = tetra;\\n    }\\n\\n    function _excavate(uint256 excavationId, uint256 value) internal {\\n        _excavationResults[excavationId] = value;\\n\\n        /// @dev Is Flash Bounty\\n        if (excavationId == 0) {\\n            emit ExcavatedFlashBounty(\\n                getTetraKey(0, BountyTier.Silver),\\n                getTetraKey(0, BountyTier.Gold),\\n                getTetraKey(0, BountyTier.Platinum)\\n            );\\n        } else {\\n            for (uint256 i = 0; i < CADENCE; i = _unsafeIncrement(i)) {\\n                uint256 tokenId = uint256(\\n                    uint16(excavationTracker[excavationId] >> (16 * i))\\n                );\\n                emit Excavated(\\n                    ownerOf(tokenId),\\n                    tokenId,\\n                    getTetraKey(tokenId, BountyTier.Silver),\\n                    getTetraKey(tokenId, BountyTier.Gold),\\n                    getTetraKey(tokenId, BountyTier.Platinum)\\n                );\\n            }\\n            delete excavationTracker[excavationId];\\n        }\\n    }\\n\\n    function _swapTokens(\\n        address fromToken,\\n        address toToken,\\n        uint256 amountIn,\\n        address recipient\\n    ) internal returns (uint256) {\\n        uint24 _poolFee = fromToken == PORK || toToken == PORK\\n            ? PORK_WETH_POOL_FEE\\n            : DEFAULT_POOL_FEE;\\n        return\\n            uniswapRouter.exactInputSingle(\\n                ISwapRouter.ExactInputSingleParams({\\n                    tokenIn: fromToken,\\n                    tokenOut: toToken,\\n                    fee: _poolFee,\\n                    recipient: recipient,\\n                    amountIn: amountIn,\\n                    amountOutMinimum: 0,\\n                    sqrtPriceLimitX96: 0\\n                })\\n            );\\n    }\\n\\n    function initialize(\\n        address prospektorFundManagerAddress\\n    ) public onlyExecutor {\\n        require(!isInitialized, \\\"ALREADY_INITIALIZED\\\");\\n        isInitialized = true;\\n        /// @notice Setup ProspektorFundManager\\n        prospektorFundManager = IProspektorFundManager(\\n            prospektorFundManagerAddress\\n        );\\n\\n        TransferHelper.safeApprove(\\n            WETH,\\n            prospektorFundManagerAddress,\\n            type(uint256).max\\n        );\\n\\n        TransferHelper.safeApprove(\\n            PORK,\\n            prospektorFundManagerAddress,\\n            type(uint256).max\\n        );\\n\\n        /// @notice Setup Uniswap Router\\n        TransferHelper.safeApprove(\\n            WETH,\\n            address(uniswapRouter),\\n            type(uint256).max\\n        );\\n\\n        TransferHelper.safeApprove(\\n            PORK,\\n            address(uniswapRouter),\\n            type(uint256).max\\n        );\\n    }\\n\\n    function pause() public onlyExecutor {\\n        _pause();\\n    }\\n\\n    function unpause() public onlyExecutor {\\n        _unpause();\\n    }\\n\\n    function onERC721Received(\\n        address,\\n        address,\\n        uint256,\\n        bytes calldata\\n    ) external pure returns (bytes4) {\\n        return IERC721Receiver.onERC721Received.selector;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/utils/ExecutorManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.7.0 <0.9.0;\\n\\nabstract contract ExecutorManager {\\n    error NotExecutor(address attempted);\\n    error CannotRemoveSelf();\\n\\n    mapping(address => bool) public executors;\\n\\n    constructor(address initialExecutor) {\\n        _addExecutor(initialExecutor);\\n    }\\n\\n    modifier onlyExecutor() {\\n        if (isExecutor(msg.sender) != true) revert NotExecutor(msg.sender);\\n        _;\\n    }\\n\\n    function isExecutor(address _executor) public view returns (bool) {\\n        return (executors[_executor] == true);\\n    }\\n\\n    function _addExecutor(address _toAdd) internal {\\n        executors[_toAdd] = true;\\n    }\\n\\n    function addExecutor(address _toAdd) external virtual onlyExecutor {\\n        _addExecutor(_toAdd);\\n    }\\n\\n    function _removeExecutor(address _toRemove) internal {\\n        if (_toRemove == msg.sender) revert CannotRemoveSelf();\\n        executors[_toRemove] = false;\\n    }\\n\\n    function removeExecutor(address _toRemove) external virtual onlyExecutor {\\n        _removeExecutor(_toRemove);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/utils/RenderHelper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.7.0 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/Base64.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"./SvgHelper.sol\\\";\\n\\nlibrary RenderHelper {\\n    function getJson(\\n        uint256 tokenId,\\n        uint8[7] memory tetra,\\n        string[] memory colorNames,\\n        string[] memory colorHexCodes\\n    ) public pure returns (string memory) {\\n        bytes memory dataURI = abi.encodePacked(\\n            \\\"{\\\",\\n            _prop(\\\"description\\\", \\\"TetraSpektra\\\"),\\n            _prop(\\\"name\\\", string.concat(\\\"Tetra #\\\", Strings.toString(tokenId))),\\n            '\\\"attributes\\\": [',\\n            string(_getAttributes(tetra, colorNames)),\\n            \\\"],\\\",\\n            _prop(\\n                \\\"image\\\",\\n                _getBase64Image(_render(tetra, colorHexCodes)),\\n                false\\n            ),\\n            \\\"}\\\"\\n        );\\n\\n        return\\n            string(\\n                abi.encodePacked(\\n                    \\\"data:application/json;base64,\\\",\\n                    Base64.encode(dataURI)\\n                )\\n            );\\n    }\\n\\n    function _getTrait(\\n        string memory traitType,\\n        string memory traitValue\\n    ) private pure returns (string memory) {\\n        return _getTrait(traitType, traitValue, true);\\n    }\\n\\n    function _getTrait(\\n        string memory traitType,\\n        string memory traitValue,\\n        bool addComma\\n    ) private pure returns (string memory) {\\n        return\\n            string.concat(\\n                \\\"{\\\",\\n                _prop(\\\"trait_type\\\", traitType),\\n                _prop(\\\"value\\\", traitValue, false),\\n                \\\"}\\\",\\n                addComma ? \\\",\\\" : \\\"\\\"\\n            );\\n    }\\n\\n    function _prop(\\n        string memory name,\\n        string memory value\\n    ) private pure returns (string memory) {\\n        return _prop(name, value, false, true);\\n    }\\n\\n    function _prop(\\n        string memory name,\\n        string memory value,\\n        bool addComma\\n    ) private pure returns (string memory) {\\n        return _prop(name, value, false, addComma);\\n    }\\n\\n    function _prop(\\n        string memory name,\\n        string memory value,\\n        bool isNumber,\\n        bool addComma\\n    ) private pure returns (string memory) {\\n        return\\n            string.concat(\\n                ' \\\"',\\n                name,\\n                '\\\": ',\\n                isNumber ? \\\"\\\" : '\\\"',\\n                value,\\n                isNumber ? \\\"\\\" : '\\\"',\\n                addComma ? \\\", \\\" : \\\" \\\"\\n            );\\n    }\\n\\n    function _getBase64Image(\\n        bytes memory data\\n    ) private pure returns (string memory) {\\n        return\\n            string(\\n                abi.encodePacked(\\n                    \\\"data:image/svg+xml;base64,\\\",\\n                    Base64.encode(data)\\n                )\\n            );\\n    }\\n\\n    function _getAttributes(\\n        uint8[7] memory tetra,\\n        string[] memory colorNames\\n    ) private pure returns (bytes memory) {\\n        return\\n            abi.encodePacked(\\n                _getTrait(\\\"Inner Kore #1\\\", colorNames[tetra[0]]),\\n                _getTrait(\\\"Inner Kore #2\\\", colorNames[tetra[1]]),\\n                _getTrait(\\\"Inner Kore #3\\\", colorNames[tetra[2]]),\\n                _getTrait(\\\"Inner Kore #4\\\", colorNames[tetra[3]]),\\n                _getTrait(\\\"Outer Kore\\\", colorNames[tetra[4]]),\\n                _getTrait(\\\"Mantle\\\", colorNames[tetra[5]]),\\n                _getTrait(\\\"Krust\\\", colorNames[tetra[6]], false)\\n            );\\n    }\\n\\n    function _renderUnexcavated() private pure returns (bytes memory) {\\n        return\\n            abi.encodePacked(\\n                \\\"<svg xmlns='http://www.w3.org/2000/svg' preserveAspectRatio='xMinYMin meet' viewBox='0 0 15 15' width='100%' height='auto' shape-rendering='crispEdges' >\\\",\\n                \\\"<style type='text/css'> @media screen and (-webkit-min-device-pixel-ratio: 0) and (min-resolution: 0.001dpcm) {.static { background: repeating-radial-gradient(#000 0 0.0001%,#fff 0 0.0002%) 50% 0/2500px 2500px,repeating-conic-gradient(#000 0 0.0001%,#fff 0 0.0002%) 60% 60%/2500px 2500px; background-blend-mode: difference; animation: st .2s infinite alternate; mix-blend-mode: multiply;} @keyframes st{ 100% {background-position: 20% 0, 20% 50%} } @media screen and (-webkit-min-device-pixel-ratio: 0) { _::-webkit-full-page-media, .static { background:none; }}</style>\\\",\\n                \\\"<filter id='g'><feGaussianBlur stdDeviation='.14' result='cb' /><feMerge><feMergeNode in='cb' /><feMergeNode in='SourceGraphic' /></feMerge></filter><rect x='0' y='0' height='100%' width='100%' fill='black' /><g transform='translate(.5 .5)'><rect x='6.125' y='6.125' height='.75' width='.75' stroke='#FFFFFF' stroke-width='.01'><animate attributeName='opacity' values='1;0;1' dur='4s' repeatCount='indefinite' /></rect><rect x='7.125' y='6.125' height='.75' width='.75' stroke='#FFFFFF' stroke-width='.01'><animate attributeName='opacity' values='1;0;1' dur='2s' repeatCount='indefinite' /></rect><rect x='6.125' y='7.125' height='.75' width='.75' stroke='#FFFFFF' stroke-width='.01'><animate attributeName='opacity' values='1;0;1' dur='3s' repeatCount='indefinite' /></rect><rect x='7.125' y='7.125' height='.75' width='.75' stroke='#FFFFFF' stroke-width='.01'><animate attributeName='opacity' values='1;0;1' dur='1s' repeatCount='indefinite' /></rect></g><g transform='translate(.5 .5)'><g><circle cx='7' cy='7' r='2' fill='none' opacity='1' stroke='#FFFFFF' stroke-width='0.1' filter='' ><animate attributeName='r' values='2.5;6.9;' dur='6s' repeatCount='indefinite' /><animate attributeName='stroke-width' values='0;.1;' dur='6s' repeatCount='indefinite' /><animate attributeName='opacity' values='0;1;0;' dur='6s' repeatCount='indefinite' /></circle></g></g>\\\",\\n                \\\"<foreignObject class='static' x='0' y='0' width='100' height='100'><div class='logoGradient' xmlns='http://www.w3.org/1999/xhtml'></div></foreignObject></svg>\\\"\\n            );\\n    }\\n\\n    function _renderKrust(\\n        uint8[7] memory tetra,\\n        string[] memory colorHexCodes\\n    ) private pure returns (string memory) {\\n        return\\n            string.concat(\\n                SvgHelper.rectangle(\\n                    \\\"0\\\",\\n                    \\\"0\\\",\\n                    \\\"6\\\",\\n                    \\\".1\\\",\\n                    colorHexCodes[tetra[6]]\\n                ),\\n                SvgHelper.rectangle(\\n                    \\\"0\\\",\\n                    \\\"0\\\",\\n                    \\\".1\\\",\\n                    \\\"7\\\",\\n                    colorHexCodes[tetra[6]]\\n                ),\\n                SvgHelper.rectangle(\\n                    \\\"0\\\",\\n                    \\\"7\\\",\\n                    \\\"7\\\",\\n                    \\\".1\\\",\\n                    colorHexCodes[tetra[6]]\\n                ),\\n                SvgHelper.rectangle(\\n                    \\\"0\\\",\\n                    \\\"13.9\\\",\\n                    \\\".1\\\",\\n                    \\\"6\\\",\\n                    colorHexCodes[tetra[6]]\\n                ),\\n                SvgHelper.rectangle(\\n                    \\\"7\\\",\\n                    \\\"13.9\\\",\\n                    \\\".1\\\",\\n                    \\\"7\\\",\\n                    colorHexCodes[tetra[6]]\\n                ),\\n                SvgHelper.rectangle(\\n                    \\\"13.9\\\",\\n                    \\\"8\\\",\\n                    \\\"6\\\",\\n                    \\\".1\\\",\\n                    colorHexCodes[tetra[6]]\\n                ),\\n                SvgHelper.rectangle(\\n                    \\\"13.9\\\",\\n                    \\\"0\\\",\\n                    \\\"7\\\",\\n                    \\\".1\\\",\\n                    colorHexCodes[tetra[6]]\\n                ),\\n                SvgHelper.rectangle(\\n                    \\\"8\\\",\\n                    \\\"0\\\",\\n                    \\\".1\\\",\\n                    \\\"6\\\",\\n                    colorHexCodes[tetra[6]]\\n                )\\n            );\\n    }\\n\\n    function _renderMantle(\\n        uint8[7] memory tetra,\\n        string[] memory colorHexCodes\\n    ) private pure returns (string memory) {\\n        return\\n            string.concat(\\n                SvgHelper.rectangle(\\n                    \\\"2\\\",\\n                    \\\"2\\\",\\n                    \\\".1\\\",\\n                    \\\"7\\\",\\n                    colorHexCodes[tetra[5]]\\n                ),\\n                SvgHelper.rectangle(\\n                    \\\"2\\\",\\n                    \\\"2\\\",\\n                    \\\"1\\\",\\n                    \\\".1\\\",\\n                    colorHexCodes[tetra[5]]\\n                ),\\n                //\\n                SvgHelper.rectangle(\\n                    \\\"2\\\",\\n                    \\\"5\\\",\\n                    \\\"7\\\",\\n                    \\\".1\\\",\\n                    colorHexCodes[tetra[5]]\\n                ),\\n                SvgHelper.rectangle(\\n                    \\\"2\\\",\\n                    \\\"11.9\\\",\\n                    \\\".1\\\",\\n                    \\\"1\\\",\\n                    colorHexCodes[tetra[5]]\\n                ),\\n                //\\n                SvgHelper.rectangle(\\n                    \\\"5\\\",\\n                    \\\"11.9\\\",\\n                    \\\".1\\\",\\n                    \\\"7\\\",\\n                    colorHexCodes[tetra[5]]\\n                ),\\n                SvgHelper.rectangle(\\n                    \\\"11.9\\\",\\n                    \\\"10.9\\\",\\n                    \\\"1\\\",\\n                    \\\".1\\\",\\n                    colorHexCodes[tetra[5]]\\n                ),\\n                //\\n                SvgHelper.rectangle(\\n                    \\\"11.9\\\",\\n                    \\\"2\\\",\\n                    \\\"7\\\",\\n                    \\\".1\\\",\\n                    colorHexCodes[tetra[5]]\\n                ),\\n                SvgHelper.rectangle(\\n                    \\\"10.9\\\",\\n                    \\\"2\\\",\\n                    \\\".1\\\",\\n                    \\\"1\\\",\\n                    colorHexCodes[tetra[5]]\\n                )\\n            );\\n    }\\n\\n    function _renderNucleus(\\n        uint8[7] memory tetra,\\n        string[] memory colorHexCodes\\n    ) private pure returns (string memory) {\\n        return\\n            string.concat(\\n                SvgHelper.square(\\n                    \\\"6.125\\\",\\n                    \\\"6.125\\\",\\n                    \\\".75\\\",\\n                    colorHexCodes[tetra[0]],\\n                    SvgHelper.animate(\\\"opacity\\\", \\\"1;0.2;1;\\\", \\\"3s\\\")\\n                ),\\n                SvgHelper.square(\\n                    \\\"7.125\\\",\\n                    \\\"6.125\\\",\\n                    \\\".75\\\",\\n                    colorHexCodes[tetra[1]],\\n                    SvgHelper.animate(\\\"opacity\\\", \\\"1;0.2;1;\\\", \\\"2s\\\")\\n                ),\\n                SvgHelper.square(\\n                    \\\"6.125\\\",\\n                    \\\"7.125\\\",\\n                    \\\".75\\\",\\n                    colorHexCodes[tetra[2]],\\n                    SvgHelper.animate(\\\"opacity\\\", \\\"1;0.2;1;\\\", \\\"4s\\\")\\n                ),\\n                SvgHelper.square(\\n                    \\\"7.125\\\",\\n                    \\\"7.125\\\",\\n                    \\\".75\\\",\\n                    colorHexCodes[tetra[3]],\\n                    SvgHelper.animate(\\\"opacity\\\", \\\"1;0.2;1;\\\", \\\"5s\\\")\\n                )\\n            );\\n    }\\n\\n    function _render(\\n        uint8[7] memory tetra,\\n        string[] memory colorHexCodes\\n    ) private pure returns (bytes memory) {\\n        if (tetra[0] == 0) return _renderUnexcavated();\\n        string memory str = string.concat(\\n            \\\"<g filter='url(#g)'>\\\",\\n            _renderKrust(tetra, colorHexCodes),\\n            _renderMantle(tetra, colorHexCodes),\\n            SvgHelper.circle(\\n                \\\"7\\\",\\n                \\\"7\\\",\\n                \\\"2.5\\\",\\n                \\\"1\\\",\\n                \\\"none\\\",\\n                colorHexCodes[tetra[4]],\\n                \\\"0.1\\\"\\n            ),\\n            \\\"</g>\\\",\\n            \\\"<g>\\\",\\n            SvgHelper.circle(\\n                \\\"7\\\",\\n                \\\"7\\\",\\n                \\\"2\\\",\\n                \\\"1\\\",\\n                \\\"none\\\",\\n                colorHexCodes[tetra[4]],\\n                \\\"0.1\\\",\\n                SvgHelper.getStandardAnimationGroup(\\\"8s\\\")\\n            ),\\n            SvgHelper.circle(\\n                \\\"7\\\",\\n                \\\"7\\\",\\n                \\\"2\\\",\\n                \\\"1\\\",\\n                \\\"none\\\",\\n                colorHexCodes[tetra[6]],\\n                \\\"0.1\\\",\\n                SvgHelper.getStandardAnimationGroup(\\\"6s\\\")\\n            ),\\n            SvgHelper.circle(\\n                \\\"7\\\",\\n                \\\"7\\\",\\n                \\\"2\\\",\\n                \\\"1\\\",\\n                \\\"none\\\",\\n                colorHexCodes[tetra[5]],\\n                \\\"0.1\\\",\\n                SvgHelper.getStandardAnimationGroup(\\\"4s\\\")\\n            ),\\n            SvgHelper.circle(\\n                \\\"7\\\",\\n                \\\"7\\\",\\n                \\\"2\\\",\\n                \\\"1\\\",\\n                \\\"none\\\",\\n                colorHexCodes[tetra[4]],\\n                \\\"0.1\\\",\\n                SvgHelper.getStandardAnimationGroup(\\\"2s\\\")\\n            ),\\n            \\\"</g>\\\",\\n            _renderNucleus(tetra, colorHexCodes)\\n        );\\n\\n        return\\n            abi.encodePacked(\\n                \\\"<svg xmlns='http://www.w3.org/2000/svg' preserveAspectRatio='xMinYMin meet' viewBox='0 0 15 15' width='100%' height='auto' shape-rendering='crispEdges'><filter id='g'><feGaussianBlur stdDeviation='.14' result='cb' /><feMerge><feMergeNode in='cb'/><feMergeNode in='SourceGraphic' /></feMerge></filter>\\\",\\n                \\\"<style type='text/css'> @media screen and (-webkit-min-device-pixel-ratio: 0) and (min-resolution: 0.001dpcm) {.static { background: repeating-radial-gradient(#000 0 0.0001%,#fff 0 0.0002%) 50% 0/2500px 2500px,repeating-conic-gradient(#000 0 0.0001%,#fff 0 0.0002%) 60% 60%/2500px 2500px; background-blend-mode: difference; animation: st .2s infinite alternate; mix-blend-mode: multiply;} @keyframes st{ 100% {background-position: 20% 0, 20% 50%} } @media screen and (-webkit-min-device-pixel-ratio: 0) { _::-webkit-full-page-media, .static { background:none; }}</style>\\\",\\n                SvgHelper.rectangle(\\\"0\\\", \\\"0\\\", \\\"100%\\\", \\\"100%\\\", colorHexCodes[0]),\\n                \\\"<g transform='translate(.5 .5)'>\\\",\\n                str,\\n                \\\"</g><foreignObject class='static' x='0' y='0' width='100' height='100'><div class='logoGradient' xmlns='http://www.w3.org/1999/xhtml'></div></foreignObject></svg>\\\"\\n            );\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/utils/SvgHelper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.7.0 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\nlibrary SvgHelper {\\n    function circle(\\n        string memory x,\\n        string memory y,\\n        string memory r,\\n        string memory color\\n    ) public pure returns (string memory) {\\n        return circle(x, y, r, \\\"1\\\", color, \\\"\\\", \\\"0\\\");\\n    }\\n\\n    function circle(\\n        uint256 x,\\n        uint256 y,\\n        uint256 r,\\n        string memory opacity,\\n        string memory color,\\n        string memory strokeColor,\\n        string memory strokeWidth\\n    ) public pure returns (string memory) {\\n        return\\n            circle(\\n                Strings.toString(x),\\n                Strings.toString(y),\\n                Strings.toString(r),\\n                opacity,\\n                color,\\n                strokeColor,\\n                strokeWidth,\\n                \\\"\\\"\\n            );\\n    }\\n\\n    function circle(\\n        string memory x,\\n        string memory y,\\n        string memory r,\\n        string memory opacity,\\n        string memory color,\\n        string memory strokeColor,\\n        string memory strokeWidth\\n    ) public pure returns (string memory) {\\n        return circle(x, y, r, opacity, color, strokeColor, strokeWidth, \\\"\\\");\\n    }\\n\\n    function circle(\\n        string memory x,\\n        string memory y,\\n        string memory r,\\n        string memory opacity,\\n        string memory color,\\n        string memory strokeColor,\\n        string memory strokeWidth,\\n        string memory animation\\n    ) public pure returns (string memory) {\\n        return\\n            circle(\\n                x,\\n                y,\\n                r,\\n                opacity,\\n                color,\\n                strokeColor,\\n                strokeWidth,\\n                animation,\\n                \\\"\\\"\\n            );\\n    }\\n\\n    function circle(\\n        string memory x,\\n        string memory y,\\n        string memory r,\\n        string memory opacity,\\n        string memory color,\\n        string memory strokeColor,\\n        string memory strokeWidth,\\n        string memory animation,\\n        string memory filter\\n    ) public pure returns (string memory) {\\n        return\\n            string.concat(\\n                \\\"<circle cx='\\\",\\n                x,\\n                \\\"' cy='\\\",\\n                y,\\n                \\\"' r='\\\",\\n                r,\\n                \\\"' fill='\\\",\\n                color,\\n                \\\"' opacity='\\\",\\n                opacity,\\n                \\\"' stroke='\\\",\\n                keccak256(abi.encodePacked(strokeColor)) != \\\"\\\"\\n                    ? strokeColor\\n                    : \\\"\\\",\\n                \\\"' stroke-width='\\\",\\n                keccak256(abi.encodePacked(strokeColor)) != \\\"\\\"\\n                    ? strokeWidth\\n                    : \\\"\\\",\\n                \\\"'\\\",\\n                keccak256(abi.encodePacked(filter)) == \\\"\\\"\\n                    ? \\\"\\\"\\n                    : string.concat(\\\" filter='\\\", filter, \\\"'\\\"),\\n                keccak256(abi.encodePacked((animation))) == \\\"\\\"\\n                    ? \\\"/>\\\"\\n                    : string.concat(\\\" >\\\", animation, \\\"</circle>\\\")\\n            );\\n    }\\n\\n    function triangle(\\n        string memory x0,\\n        string memory y0,\\n        string memory x1,\\n        string memory y1,\\n        string memory x2,\\n        string memory y2,\\n        string memory color\\n    ) public pure returns (string memory) {\\n        return\\n            string.concat(\\n                \\\"<polygon points='\\\",\\n                x0,\\n                \\\" \\\",\\n                y0,\\n                \\\", \\\",\\n                x1,\\n                \\\" \\\",\\n                y1,\\n                \\\", \\\",\\n                x2,\\n                \\\" \\\",\\n                y2,\\n                \\\"'  fill='\\\",\\n                color,\\n                \\\"'/>\\\"\\n            );\\n    }\\n\\n    function square(\\n        string memory x,\\n        string memory y,\\n        string memory size,\\n        string memory color\\n    ) public pure returns (string memory) {\\n        return square(x, y, size, color, \\\"\\\");\\n    }\\n\\n    function square(\\n        string memory x,\\n        string memory y,\\n        string memory size,\\n        string memory color,\\n        string memory animation\\n    ) public pure returns (string memory) {\\n        return rectangle(x, y, size, size, color, \\\"\\\", \\\"\\\", animation);\\n    }\\n\\n    function animate(\\n        string memory attributeName,\\n        string memory values,\\n        string memory duration\\n    ) public pure returns (string memory) {\\n        return\\n            string.concat(\\n                \\\"<animate attributeName='\\\",\\n                attributeName,\\n                \\\"' values='\\\",\\n                values,\\n                \\\"' dur='\\\",\\n                duration,\\n                \\\"' repeatCount='\\\",\\n                \\\"indefinite\\\",\\n                \\\"' />\\\"\\n            );\\n    }\\n\\n    function rectangle(\\n        string memory x,\\n        string memory y,\\n        string memory h,\\n        string memory w,\\n        string memory color\\n    ) public pure returns (string memory) {\\n        return rectangle(x, y, h, w, color, \\\"\\\", \\\"\\\", \\\"\\\");\\n    }\\n\\n    function rectangle(\\n        string memory x,\\n        string memory y,\\n        string memory h,\\n        string memory w,\\n        string memory color,\\n        string memory stroke,\\n        string memory strokeWidth,\\n        string memory animation\\n    ) public pure returns (string memory) {\\n        return\\n            string.concat(\\n                \\\"<rect x='\\\",\\n                x,\\n                \\\"' y='\\\",\\n                y,\\n                \\\"' height='\\\",\\n                h,\\n                \\\"' width='\\\",\\n                w,\\n                \\\"' fill='\\\",\\n                color,\\n                \\\"' stroke='\\\",\\n                stroke,\\n                \\\"' stroke-width='\\\",\\n                strokeWidth,\\n                \\\"'\\\",\\n                keccak256(abi.encodePacked((animation))) == \\\"\\\"\\n                    ? \\\"/>\\\"\\n                    : string.concat(\\\" >\\\", animation, \\\"</rect>\\\")\\n            );\\n    }\\n\\n    function getStandardAnimationGroup(\\n        string memory s\\n    ) public pure returns (string memory) {\\n        return\\n            string.concat(\\n                animate(\\\"r\\\", \\\"2.5;6.9;\\\", s),\\n                animate(\\\"stroke-width\\\", \\\"0;.1;\\\", s),\\n                animate(\\\"opacity\\\", \\\"1;0;\\\", s)\\n            );\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/utils/TransferHelper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.6.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nlibrary TransferHelper {\\n    /// @notice Transfers tokens from the targeted address to the given destination\\n    /// @notice Errors with 'STF' if transfer fails\\n    /// @param token The contract address of the token to be transferred\\n    /// @param from The originating address from which the tokens will be transferred\\n    /// @param to The destination address of the transfer\\n    /// @param value The amount to be transferred\\n    function safeTransferFrom(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        (bool success, bytes memory data) = token.call(\\n            abi.encodeWithSelector(\\n                IERC20.transferFrom.selector,\\n                from,\\n                to,\\n                value\\n            )\\n        );\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            \\\"STF\\\"\\n        );\\n    }\\n\\n    /// @notice Transfers tokens from msg.sender to a recipient\\n    /// @dev Errors with ST if transfer fails\\n    /// @param token The contract address of the token which will be transferred\\n    /// @param to The recipient of the transfer\\n    /// @param value The value of the transfer\\n    function safeTransfer(address token, address to, uint256 value) internal {\\n        (bool success, bytes memory data) = token.call(\\n            abi.encodeWithSelector(IERC20.transfer.selector, to, value)\\n        );\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            \\\"ST\\\"\\n        );\\n    }\\n\\n    /// @notice Approves the stipulated contract to spend the given allowance in the given token\\n    /// @dev Errors with 'SA' if transfer fails\\n    /// @param token The contract address of the token to be approved\\n    /// @param to The target of the approval\\n    /// @param value The amount of the given token the target will be allowed to spend\\n    function safeApprove(address token, address to, uint256 value) internal {\\n        (bool success, bytes memory data) = token.call(\\n            abi.encodeWithSelector(IERC20.approve.selector, to, value)\\n        );\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            \\\"SA\\\"\\n        );\\n    }\\n\\n    /// @notice Transfers ETH to the recipient address\\n    /// @dev Fails with `STE`\\n    /// @param to The destination of the transfer\\n    /// @param value The value to be transferred\\n    function safeTransferETH(address to, uint256 value) internal {\\n        (bool success, ) = to.call{value: value}(new bytes(0));\\n        require(success, \\\"STE\\\");\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1000\r\n    },\r\n    \"evmVersion\": \"paris\",\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {\r\n      \"contracts/utils/RenderHelper.sol\": {\r\n        \"RenderHelper\": \"0xccd1203f67954d8886c13da1ad1c21595ab6db31\"\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"randomizerAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"claimsManagerAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"priceOracleAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"bountyVaultAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"uniswapRouterAddress\",\"type\":\"address\"}],\"internalType\":\"struct AddressConfig\",\"name\":\"addressConfig\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"wethTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"porkTokenAddress\",\"type\":\"address\"}],\"internalType\":\"struct TokenConfig\",\"name\":\"tokenConfig\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"vrfCoordinatorAddress\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"vrfKeyHash\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"linkTokenAddress\",\"type\":\"address\"}],\"internalType\":\"struct ExcavatorConfig\",\"name\":\"excavatorConfig\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"maxSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"prospektPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"refreshPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"flashBountyValue\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"excavatorFundingPercentage\",\"type\":\"uint8\"},{\"internalType\":\"uint16\",\"name\":\"maxSilver2Swaps\",\"type\":\"uint16\"},{\"internalType\":\"uint8\",\"name\":\"silver2UnlockCadence\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"silver2UnlockAmount\",\"type\":\"uint8\"},{\"internalType\":\"string[]\",\"name\":\"colorHexCodes\",\"type\":\"string[]\"},{\"internalType\":\"string[]\",\"name\":\"colorNames\",\"type\":\"string[]\"}],\"internalType\":\"struct TetraSpektraConfig\",\"name\":\"tetraSpektraConfig\",\"type\":\"tuple\"},{\"internalType\":\"uint256[3][3]\",\"name\":\"bounties\",\"type\":\"uint256[3][3]\"}],\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"CannotRemoveSelf\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC721IncorrectOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC721InsufficientApproval\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC721InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"ERC721InvalidOperator\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC721InvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC721InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC721InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC721NonexistentToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EnforcedPause\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ExcavationGroupNotReady\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ExcavationInProgress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ExpectedPause\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientPayment\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidTokenCompare\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidTokenCount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidTokenOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"attempted\",\"type\":\"address\"}],\"name\":\"NotExecutor\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotMatched\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotSoldOut\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TooManySilver2Swaps\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"prospektor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"interactionCount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"porkAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"wethAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"canAddLiquidityAfter\",\"type\":\"uint256\"}],\"name\":\"AddedLiquidityForBounty\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"prospektor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"claimsSessionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"claimedTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Claimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"prospektor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"tetraKey\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bountyValue\",\"type\":\"uint256\"}],\"name\":\"ClaimedFlashBounty\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"prospektor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"interactionCount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"porkAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"canCollectFeesAfter\",\"type\":\"uint256\"}],\"name\":\"CollectedFeesForBounty\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"prospektor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum DiscoveryType\",\"name\":\"discoveryType\",\"type\":\"uint8\"}],\"name\":\"Discovery\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"prospektor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"silverTetraKey\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"goldTetraKey\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"platinumTetraKey\",\"type\":\"bytes32\"}],\"name\":\"Excavated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"silverTetraKey\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"goldTetraKey\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"platinumTetraKey\",\"type\":\"bytes32\"}],\"name\":\"ExcavatedFlashBounty\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"excavationId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"ExcavationComplete\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"excavationId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId_0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId_1\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId_2\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId_3\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId_4\",\"type\":\"uint256\"}],\"name\":\"ExcavationContracted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"prospektor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tier\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bountyValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId_0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId_1\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId_2\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId_3\",\"type\":\"uint256\"}],\"name\":\"Swapped\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BASE_TETRA_KEY\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_POOL_FEE\",\"outputs\":[{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_TO_PROSPEKT\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_PORK_AMOUNT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_WETH_AMOUNT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PORK\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PORK_WETH_POOL_FEE\",\"outputs\":[{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SWAP_PERCENTAGE_INCREMENT\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WETH\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"_getTetra\",\"outputs\":[{\"internalType\":\"uint8[7]\",\"name\":\"\",\"type\":\"uint8[7]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"seed\",\"type\":\"uint256\"}],\"name\":\"_modToColorIndex\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_toAdd\",\"type\":\"address\"}],\"name\":\"addExecutor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"addLiquidityForBounty\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bountyVault\",\"outputs\":[{\"internalType\":\"contract IBountyVault\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"canAddLiquidity\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"canAddLiquidityAfter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"canCollectFees\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"canCollectFeesAfter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"claimTokenId\",\"type\":\"uint256\"}],\"name\":\"claim\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"claimFlashBounty\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"claimVaultBounty\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimsManager\",\"outputs\":[{\"internalType\":\"contract IClaimsManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collectFeesForBounty\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"colorConfig\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"maxColors\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableFlashBounty\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"excavationId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"excavate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"excavationGroup\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"excavationTracker\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"excavator\",\"outputs\":[{\"internalType\":\"contract Excavator\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"executors\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeCollectorBounty\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeCollectorCadence\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"flashBountyEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"flashBountyValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"excavationId\",\"type\":\"uint256\"}],\"name\":\"forceExcavate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundingPercentage\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBounties\",\"outputs\":[{\"internalType\":\"uint256[3][3]\",\"name\":\"\",\"type\":\"uint256[3][3]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getTetraExcavationId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"enum BountyTier\",\"name\":\"tier\",\"type\":\"uint8\"}],\"name\":\"getTetraKey\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getTetraKeys\",\"outputs\":[{\"internalType\":\"bytes32[3]\",\"name\":\"\",\"type\":\"bytes32[3]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTetrasRemaining\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"prospektorFundManagerAddress\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"interactionCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"isExcavated\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"isExcavating\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_executor\",\"type\":\"address\"}],\"name\":\"isExecutor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isFlashBountyEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"isFlashBountyMatch\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isInitialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityAdderBounty\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityAdderCadence\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSilver2Swaps\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceOracle\",\"outputs\":[{\"internalType\":\"contract IPriceOracle\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"name\":\"prospekt\",\"outputs\":[{\"internalType\":\"uint256[5]\",\"name\":\"tokenIds\",\"type\":\"uint256[5]\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"prospektPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"prospektorFundManager\",\"outputs\":[{\"internalType\":\"contract IProspektorFundManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"randomizer\",\"outputs\":[{\"internalType\":\"contract IRandomizer\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"refine\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"reforge\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"refreshCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"refreshPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_toRemove\",\"type\":\"address\"}],\"name\":\"removeExecutor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"silver2Swaps\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"silver2UnlockAmount\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"silver2UnlockCadence\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[4]\",\"name\":\"tokenIds\",\"type\":\"uint256[4]\"},{\"internalType\":\"enum CreatorBountyTier\",\"name\":\"creatorBountyTier\",\"type\":\"uint8\"}],\"name\":\"swapForBounty\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapPercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tetraExcavationIds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapPool\",\"outputs\":[{\"internalType\":\"contract IUniswapV3Pool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapRouter\",\"outputs\":[{\"internalType\":\"contract ISwapRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"percentage\",\"type\":\"uint8\"}],\"name\":\"updateExcavatorFundingPercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "TetraSpektra", "CompilerVersion": "v0.8.23+commit.f704f362", "OptimizationUsed": "1", "Runs": "1000", "ConstructorArguments": "000000000000000000000000b96829b761fa8cf594144fb5b1f86c47943aa111000000000000000000000000d1cd0f7c1131ceb1f642b488405ec9e32b4026030000000000000000000000009a051784defafab0ec587113c625d19ff04e2ce4000000000000000000000000767ae0e2ff010afff8b1ad02bf8e2a8e4a682def00000000000000000000000068b3465833fb72a70ecdf485e0e4c7bd8665fc45000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2000000000000000000000000b9f599ce614feb2e1bbe58f180f370d05b39344e000000000000000000000000271682deb8c4e0901d1a1550ad2e64d568e699098af398995b04c28e9951adb9721ef74c74f93e6a478f39e7e0777be13527e7ef000000000000000000000000514910771af9ca656af840dff83e8264ecf986ca0000000000000000000000000000000000000000000000000000000000000280000000000000000000000000000000000000000000000000027f7d0bdb9200000000000000000000000000000000000000000000000000000429d069189e00000000000000000000000000000000000000000000000000000de0b6b3a76400000000000000000000000000000000000000000000000000000429d069189e00000000000000000000000000000000000000000000000000000de0b6b3a76400000000000000000000000000000000000000000000000000004563918244f400000000000000000000000000000000000000000000000000004563918244f40000000000000000000000000000000000000000000000000000d02ab486cedc00000000000000000000000000000000000000000000000000022b1c8c1227a000000000000000000000000000000000000000000000000000000000000000002710000000000000000000000000000000000000000000000000007c585087238000000000000000000000000000000000000000000000000000007c58508723800000000000000000000000000000000000000000000000000003782dace9d90000000000000000000000000000000000000000000000000000000000000000001900000000000000000000000000000000000000000000000000000000000001a400000000000000000000000000000000000000000000000000000000000000050000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000014000000000000000000000000000000000000000000000000000000000000004c000000000000000000000000000000000000000000000000000000000000000090000000000000000000000000000000000000000000000000000000000000120000000000000000000000000000000000000000000000000000000000000016000000000000000000000000000000000000000000000000000000000000001a000000000000000000000000000000000000000000000000000000000000001e00000000000000000000000000000000000000000000000000000000000000220000000000000000000000000000000000000000000000000000000000000026000000000000000000000000000000000000000000000000000000000000002a000000000000000000000000000000000000000000000000000000000000002ea000000000000000000000000000000000000000000000000000000000000001e00000000000000000000000000000000000000000000000000000000000000220000000000000000000000000000000000000000000000000000000000000026000000000000000000000000000000000000000000000000000000000000002a000000000000000000000000000000000000000000000000000000000000002e0000000000000000000000000000000000000000000000000000000000000032000000000000000000000000000000000000000000000000000000000000000044f6e79780000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000074469616d6f6e6400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000743697472696e65000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005546f70617a0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008416d657468797374000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000452756279000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000007456d6572616c6400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a417175616d6172696e650000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000085361707068697265000000000000000000000000000000000000000000000000", "EVMVersion": "paris", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}