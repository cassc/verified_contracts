{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\n\r\npragma solidity 0.8.20;\r\ninterface IDistributor {\r\n    function distribute() external;\r\n\r\n    function nextRewardAt(uint256 _rate) external view returns (uint256);\r\n\r\n    function nextReward() external view returns (uint256);\r\n}\r\n\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\r\n}\r\n\r\n\r\n\r\n/**\r\n * @dev Interface for the optional metadata functions from the ERC20 standard.\r\n *\r\n * _Available since v4.1._\r\n */\r\ninterface IERC20Metadata is IERC20 {\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the decimals places of the token.\r\n     */\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the owner.\r\n     */\r\n    function _checkOwner() internal view virtual {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby disabling any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\ninterface IsKIBBLE is IERC20 {\r\n    function rebase(uint256 amount_, uint epoch_) external returns (uint256);\r\n\r\n    function circulatingSupply() external view returns (uint256);\r\n\r\n    function gonsForBalance(uint amount) external view returns (uint);\r\n\r\n    function balanceForGons(uint gons) external view returns (uint);\r\n\r\n    function index() external view returns (uint);\r\n}\r\n\r\n\r\n/// @title   KIBBLEStaking\r\n/// @notice  KIBBLE Staking\r\ncontract KIBBLEStake is Ownable {\r\n    /// EVENTS ///\r\n\r\n    event DistributorSet(address distributor);\r\n\r\n    /// DATA STRUCTURES ///\r\n\r\n    struct Epoch {\r\n        uint256 length; // in seconds\r\n        uint256 number; // since inception\r\n        uint256 end; // timestamp\r\n        uint256 distribute; // amount\r\n    }\r\n\r\n    /// STATE VARIABLES ///\r\n\r\n    /// @notice KIBBLE address\r\n    IERC20 public immutable KIBBLE;\r\n    /// @notice sKIBBLE address\r\n    IsKIBBLE public sKIBBLE;\r\n\r\n    /// @notice Current epoch details\r\n    Epoch public epoch;\r\n\r\n    /// @notice Distributor address\r\n    IDistributor public distributor;\r\n\r\n    /// CONSTRUCTOR ///\r\n\r\n    constructor(\r\n        address _KIBBLE,\r\n        uint256 _secondsTillFirstEpoch\r\n    ) {\r\n        require(_KIBBLE != address(0), \"Zero address: KIBBLE\");\r\n        KIBBLE = IERC20(_KIBBLE);\r\n        epoch = Epoch({\r\n            length: 1,\r\n            number: 0,\r\n            end: block.timestamp + _secondsTillFirstEpoch,\r\n            distribute: 0\r\n        });\r\n    }\r\n\r\n    function setSkibble(address _sKIBBLE) external onlyOwner {\r\n        require(_sKIBBLE != address(0), \"Zero address: sKIBBLE\");\r\n        sKIBBLE = IsKIBBLE(_sKIBBLE);\r\n    }\r\n\r\n    /// @notice stake KIBBLE\r\n    function stake(address _to, uint256 _amount) external {\r\n        rebase();\r\n        KIBBLE.transferFrom(msg.sender, address(this), _amount);\r\n        sKIBBLE.transfer(_to, _amount);\r\n    }\r\n\r\n    /// @notice redeem sKIBBLE for KIBBLE\r\n    function unstake(address _to, uint256 _amount, bool _rebase) external {\r\n        if (_rebase) rebase();\r\n        sKIBBLE.transferFrom(msg.sender, address(this), _amount);\r\n        require(\r\n            _amount <= KIBBLE.balanceOf(address(this)),\r\n            \"Insufficient KIBBLE balance in contract\"\r\n        );\r\n        KIBBLE.transfer(_to, _amount);\r\n    }\r\n\r\n    ///@notice Trigger rebase if epoch over\r\n    function rebase() public {\r\n        if (epoch.end <= block.timestamp) {\r\n            sKIBBLE.rebase(epoch.distribute, epoch.number);\r\n\r\n            epoch.end = epoch.end + epoch.length;\r\n            epoch.number++;\r\n\r\n            if (address(distributor) != address(0)) {\r\n                distributor.distribute();\r\n            }\r\n\r\n            uint256 balance = KIBBLE.balanceOf(address(this));\r\n            uint256 staked = sKIBBLE.circulatingSupply();\r\n\r\n            if (balance <= staked) {\r\n                epoch.distribute = 0;\r\n            } else {\r\n                epoch.distribute = balance - staked;\r\n            }\r\n        }\r\n    }\r\n\r\n    /// @notice         Send sKIBBLE upon staking\r\n    function _send(\r\n        address _to,\r\n        uint256 _amount\r\n    ) internal returns (uint256 _sent) {\r\n        sKIBBLE.transfer(_to, _amount); // send as sKIBBLE (equal unit as KIBBLE)\r\n        return _amount;\r\n    }\r\n\r\n    /// @notice         Returns the sKIBBLE index, which tracks rebase growth\r\n    function index() public view returns (uint256 index_) {\r\n        return sKIBBLE.index();\r\n    }\r\n\r\n    /// @notice           Returns econds until the next epoch begins\r\n    function secondsToNextEpoch() external view returns (uint256 seconds_) {\r\n        return epoch.end - block.timestamp;\r\n    }\r\n\r\n\r\n    /// @notice              Sets the contract address for LP staking\r\n    function setDistributor(address _distributor) external onlyOwner {\r\n        distributor = IDistributor(_distributor);\r\n        emit DistributorSet(_distributor);\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_KIBBLE\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_secondsTillFirstEpoch\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"distributor\",\"type\":\"address\"}],\"name\":\"DistributorSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"KIBBLE\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"distributor\",\"outputs\":[{\"internalType\":\"contract IDistributor\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"epoch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"number\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"distribute\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"index\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"index_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rebase\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sKIBBLE\",\"outputs\":[{\"internalType\":\"contract IsKIBBLE\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"secondsToNextEpoch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"seconds_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_distributor\",\"type\":\"address\"}],\"name\":\"setDistributor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sKIBBLE\",\"type\":\"address\"}],\"name\":\"setSkibble\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_rebase\",\"type\":\"bool\"}],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "KIBBLEStake", "CompilerVersion": "v0.8.20+commit.a1b79de6", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "00000000000000000000000059eb4ca177df0e0b902f60c9c6b7d49775b3632a000000000000000000000000000000000000000000000000000000000000000a", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://7227aa991741d323c1dfeb9eae65980504225ff5dc03735f62a52742a374a935"}