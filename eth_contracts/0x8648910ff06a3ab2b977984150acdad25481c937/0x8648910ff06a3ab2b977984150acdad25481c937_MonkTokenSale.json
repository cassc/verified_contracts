{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\n// File: @openzeppelin/contracts/security/ReentrancyGuard.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\r\n\r\npragma solidity 0.8.19;\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\nabstract contract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor() {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and making it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Context.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\npragma solidity 0.8.19;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/Ownable.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\r\n\r\npragma solidity 0.8.19;\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the owner.\r\n     */\r\n    function _checkOwner() internal view virtual {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/cryptography/MerkleProof.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/cryptography/MerkleProof.sol)\r\n\r\npragma solidity 0.8.19;\r\n\r\n/**\r\n * @dev These functions deal with verification of Merkle Tree proofs.\r\n *\r\n * The tree and the proofs can be generated using our\r\n * https://github.com/OpenZeppelin/merkle-tree[JavaScript library].\r\n * You will find a quickstart guide in the readme.\r\n *\r\n * WARNING: You should avoid using leaf values that are 64 bytes long prior to\r\n * hashing, or use a hash function other than keccak256 for hashing leaves.\r\n * This is because the concatenation of a sorted pair of internal nodes in\r\n * the merkle tree could be reinterpreted as a leaf value.\r\n * OpenZeppelin's JavaScript library generates merkle trees that are safe\r\n * against this attack out of the box.\r\n */\r\nlibrary MerkleProof {\r\n    /**\r\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\r\n     * defined by `root`. For this, a `proof` must be provided, containing\r\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\r\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\r\n     */\r\n    function verify(bytes32[] memory proof, bytes32 root, bytes32 leaf) internal pure returns (bool) {\r\n        return processProof(proof, leaf) == root;\r\n    }\r\n\r\n    /**\r\n     * @dev Calldata version of {verify}\r\n     *\r\n     * _Available since v4.7._\r\n     */\r\n    function verifyCalldata(bytes32[] calldata proof, bytes32 root, bytes32 leaf) internal pure returns (bool) {\r\n        return processProofCalldata(proof, leaf) == root;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\r\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\r\n     * hash matches the root of the tree. When processing the proof, the pairs\r\n     * of leafs & pre-images are assumed to be sorted.\r\n     *\r\n     * _Available since v4.4._\r\n     */\r\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\r\n        bytes32 computedHash = leaf;\r\n        for (uint256 i = 0; i < proof.length; i++) {\r\n            computedHash = _hashPair(computedHash, proof[i]);\r\n        }\r\n        return computedHash;\r\n    }\r\n\r\n    /**\r\n     * @dev Calldata version of {processProof}\r\n     *\r\n     * _Available since v4.7._\r\n     */\r\n    function processProofCalldata(bytes32[] calldata proof, bytes32 leaf) internal pure returns (bytes32) {\r\n        bytes32 computedHash = leaf;\r\n        for (uint256 i = 0; i < proof.length; i++) {\r\n            computedHash = _hashPair(computedHash, proof[i]);\r\n        }\r\n        return computedHash;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the `leaves` can be simultaneously proven to be a part of a merkle tree defined by\r\n     * `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\r\n     *\r\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\r\n     *\r\n     * _Available since v4.7._\r\n     */\r\n    function multiProofVerify(\r\n        bytes32[] memory proof,\r\n        bool[] memory proofFlags,\r\n        bytes32 root,\r\n        bytes32[] memory leaves\r\n    ) internal pure returns (bool) {\r\n        return processMultiProof(proof, proofFlags, leaves) == root;\r\n    }\r\n\r\n    /**\r\n     * @dev Calldata version of {multiProofVerify}\r\n     *\r\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\r\n     *\r\n     * _Available since v4.7._\r\n     */\r\n    function multiProofVerifyCalldata(\r\n        bytes32[] calldata proof,\r\n        bool[] calldata proofFlags,\r\n        bytes32 root,\r\n        bytes32[] memory leaves\r\n    ) internal pure returns (bool) {\r\n        return processMultiProofCalldata(proof, proofFlags, leaves) == root;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the root of a tree reconstructed from `leaves` and sibling nodes in `proof`. The reconstruction\r\n     * proceeds by incrementally reconstructing all inner nodes by combining a leaf/inner node with either another\r\n     * leaf/inner node or a proof sibling node, depending on whether each `proofFlags` item is true or false\r\n     * respectively.\r\n     *\r\n     * CAUTION: Not all merkle trees admit multiproofs. To use multiproofs, it is sufficient to ensure that: 1) the tree\r\n     * is complete (but not necessarily perfect), 2) the leaves to be proven are in the opposite order they are in the\r\n     * tree (i.e., as seen from right to left starting at the deepest layer and continuing at the next layer).\r\n     *\r\n     * _Available since v4.7._\r\n     */\r\n    function processMultiProof(\r\n        bytes32[] memory proof,\r\n        bool[] memory proofFlags,\r\n        bytes32[] memory leaves\r\n    ) internal pure returns (bytes32 merkleRoot) {\r\n        // This function rebuilds the root hash by traversing the tree up from the leaves. The root is rebuilt by\r\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\r\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\r\n        // the merkle tree.\r\n        uint256 leavesLen = leaves.length;\r\n        uint256 totalHashes = proofFlags.length;\r\n\r\n        // Check proof validity.\r\n        require(leavesLen + proof.length - 1 == totalHashes, \"MerkleProof: invalid multiproof\");\r\n\r\n        // The xxxPos values are \"pointers\" to the next value to consume in each array. All accesses are done using\r\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \"pop\".\r\n        bytes32[] memory hashes = new bytes32[](totalHashes);\r\n        uint256 leafPos = 0;\r\n        uint256 hashPos = 0;\r\n        uint256 proofPos = 0;\r\n        // At each step, we compute the next hash using two values:\r\n        // - a value from the \"main queue\". If not all leaves have been consumed, we get the next leaf, otherwise we\r\n        //   get the next hash.\r\n        // - depending on the flag, either another value from the \"main queue\" (merging branches) or an element from the\r\n        //   `proof` array.\r\n        for (uint256 i = 0; i < totalHashes; i++) {\r\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\r\n            bytes32 b = proofFlags[i]\r\n                ? (leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++])\r\n                : proof[proofPos++];\r\n            hashes[i] = _hashPair(a, b);\r\n        }\r\n\r\n        if (totalHashes > 0) {\r\n            unchecked {\r\n                return hashes[totalHashes - 1];\r\n            }\r\n        } else if (leavesLen > 0) {\r\n            return leaves[0];\r\n        } else {\r\n            return proof[0];\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Calldata version of {processMultiProof}.\r\n     *\r\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\r\n     *\r\n     * _Available since v4.7._\r\n     */\r\n    function processMultiProofCalldata(\r\n        bytes32[] calldata proof,\r\n        bool[] calldata proofFlags,\r\n        bytes32[] memory leaves\r\n    ) internal pure returns (bytes32 merkleRoot) {\r\n        // This function rebuilds the root hash by traversing the tree up from the leaves. The root is rebuilt by\r\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\r\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\r\n        // the merkle tree.\r\n        uint256 leavesLen = leaves.length;\r\n        uint256 totalHashes = proofFlags.length;\r\n\r\n        // Check proof validity.\r\n        require(leavesLen + proof.length - 1 == totalHashes, \"MerkleProof: invalid multiproof\");\r\n\r\n        // The xxxPos values are \"pointers\" to the next value to consume in each array. All accesses are done using\r\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \"pop\".\r\n        bytes32[] memory hashes = new bytes32[](totalHashes);\r\n        uint256 leafPos = 0;\r\n        uint256 hashPos = 0;\r\n        uint256 proofPos = 0;\r\n        // At each step, we compute the next hash using two values:\r\n        // - a value from the \"main queue\". If not all leaves have been consumed, we get the next leaf, otherwise we\r\n        //   get the next hash.\r\n        // - depending on the flag, either another value from the \"main queue\" (merging branches) or an element from the\r\n        //   `proof` array.\r\n        for (uint256 i = 0; i < totalHashes; i++) {\r\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\r\n            bytes32 b = proofFlags[i]\r\n                ? (leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++])\r\n                : proof[proofPos++];\r\n            hashes[i] = _hashPair(a, b);\r\n        }\r\n\r\n        if (totalHashes > 0) {\r\n            unchecked {\r\n                return hashes[totalHashes - 1];\r\n            }\r\n        } else if (leavesLen > 0) {\r\n            return leaves[0];\r\n        } else {\r\n            return proof[0];\r\n        }\r\n    }\r\n\r\n    function _hashPair(bytes32 a, bytes32 b) private pure returns (bytes32) {\r\n        return a < b ? _efficientHash(a, b) : _efficientHash(b, a);\r\n    }\r\n\r\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            mstore(0x00, a)\r\n            mstore(0x20, b)\r\n            value := keccak256(0x00, 0x40)\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\r\n\r\npragma solidity 0.8.19;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n}\r\n\r\n// File: monkcoin/MonkTokenSale.sol\r\n\r\npragma solidity 0.8.19;\r\n\r\nlibrary TransferHelper {\r\n    function safeApprove(address token, address to, uint value) internal {\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: APPROVE_FAILED');\r\n    }\r\n\r\n    function safeTransfer(address token, address to, uint value) internal {\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FAILED');\r\n    }\r\n\r\n    function safeTransferFrom(address token, address from, address to, uint value) internal {\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FROM_FAILED');\r\n    }\r\n\r\n}\r\n\r\ninterface AggregatorV3Interface {\r\n  function decimals() external view returns (uint8);\r\n\r\n  function description() external view returns (string memory);\r\n\r\n  function version() external view returns (uint256);\r\n\r\n  // getRoundData and latestRoundData should both raise \"No data present\"\r\n  // if they do not have data to report, instead of returning unset values\r\n  // which could be misinterpreted as actual reported values.\r\n  function getRoundData(uint80 _roundId)\r\n    external\r\n    view\r\n    returns (\r\n      uint80 roundId,\r\n      int256 answer,\r\n      uint256 startedAt,\r\n      uint256 updatedAt,\r\n      uint80 answeredInRound\r\n    );\r\n\r\n  function latestRoundData()\r\n    external\r\n    view\r\n    returns (\r\n      uint80 roundId,\r\n      int256 answer,\r\n      uint256 startedAt,\r\n      uint256 updatedAt,\r\n      uint80 answeredInRound\r\n    );\r\n}\r\n\r\n/**\r\n * @title MonkTokenSale\r\n * @dev A contract for conducting a token sale.\r\n */\r\ncontract MonkTokenSale is Ownable, ReentrancyGuard {\r\n    address private MonkCoin;\r\n    uint256 private tokenPrice;\r\n    bytes32 private merkleRoot;\r\n    uint256 private saleStartTime;\r\n    uint256 private saleEndTime;\r\n    uint256 private whitelistSaleStartTime;\r\n    uint256 private whitelistSaleEndTime;\r\n    uint256 private maxTokensToSell;\r\n    uint256 private totalTokensSold;\r\n    uint256 private maxWalletLimit;\r\n    AggregatorV3Interface private eth_priceFeed;\r\n\r\n    struct TokenPurchase {\r\n        uint256 amountPurchased;\r\n        uint256 amountTransferred;\r\n    }\r\n\r\n    mapping(address => bool) private isTokenAllowed;\r\n    mapping(address => TokenPurchase) private tokensPurchased;\r\n\r\n    event TokenPurchased(address indexed buyer, uint256 amountPurchased, uint256 amountTransferred, address token);\r\n\r\n    constructor() {\r\n        // ETH\r\n        isTokenAllowed[address(0)] = true;\r\n\r\n        // USDC\r\n        isTokenAllowed[0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48] = true;\r\n\r\n        // USDT \r\n        isTokenAllowed[0xdAC17F958D2ee523a2206206994597C13D831ec7] = true;\r\n\r\n        eth_priceFeed = AggregatorV3Interface(0x5f4eC3Df9cbd43714FE2740f5E3616155c5b8419);\r\n\r\n        maxWalletLimit = 5000000000 ether;\r\n\r\n        maxTokensToSell = 960000000000 ether;\r\n\r\n        tokenPrice = 7500000000000;\r\n\r\n        MonkCoin = 0xaA35Cc8660Cc26D86913e771C141Fd6eeB5fF29e;\r\n    }\r\n\r\n    modifier onlyDuringSale() {\r\n        // Ensures that the token sale is active.\r\n        require(\r\n            block.timestamp >= saleStartTime && block.timestamp <= saleEndTime,\r\n            \"MONK: Token sale is not active\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    modifier onlyDuringWhitelistSale() {\r\n        // Ensures that the whitelist sale is active.\r\n        require(\r\n            block.timestamp >= whitelistSaleStartTime && block.timestamp <= whitelistSaleEndTime,\r\n            \"MONK: Whitelist sale is not active\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Sets the maximum number of tokens to sell.\r\n     * @param amount The maximum number of tokens to sell.\r\n     */\r\n    function setMaxTokensToSell(uint256 amount) external onlyOwner {\r\n        maxTokensToSell = amount;\r\n    }\r\n\r\n    /**\r\n     * @dev Sets the maximum wallet limit.\r\n     * @param amount The maximum wallet limit.\r\n     */\r\n    function setMaxWalletLimit(uint256 amount) external onlyOwner {\r\n        maxWalletLimit = amount;\r\n    }\r\n\r\n    /**\r\n     * @dev Sets the token price.\r\n     * @param _newTokenPrice The new token price.\r\n     */\r\n    function setTokenPrice(uint256 _newTokenPrice) external onlyOwner {\r\n        tokenPrice = _newTokenPrice;\r\n    }\r\n\r\n    /**\r\n     * @dev Sets the Merkle root for verifying whitelist purchases.\r\n     * @param _newMerkleRoot The new Merkle root.\r\n     */\r\n    function setMerkleRoot(bytes32 _newMerkleRoot) external onlyOwner {\r\n        merkleRoot = _newMerkleRoot;\r\n    }\r\n\r\n    /**\r\n     * @dev Sets the start time of the token sale.\r\n     * @param _newSaleStartTime The new start time of the token sale.\r\n     */\r\n    function setSaleStartTime(uint256 _newSaleStartTime) external onlyOwner {\r\n        saleStartTime = _newSaleStartTime;\r\n    }\r\n\r\n    /**\r\n     * @dev Sets whether a token is allowed for purchase.\r\n     * @param token The address of the token.\r\n     * @param status The status indicating whether the token is allowed.\r\n     */\r\n    function setTokenAllowed(address token, bool status) external onlyOwner {\r\n        isTokenAllowed[token] = status;\r\n    }\r\n\r\n    /**\r\n     * @dev Sets the end time of the token sale.\r\n     * @param _newSaleEndTime The new end time of the token sale.\r\n     */\r\n    function setSaleEndTime(uint256 _newSaleEndTime) external onlyOwner {\r\n        saleEndTime = _newSaleEndTime;\r\n    }\r\n\r\n    /**\r\n     * @dev Sets the start time of the whitelist sale.\r\n     * @param _newWhitelistSaleStartTime The new start time of the whitelist sale.\r\n     */\r\n    function setWhitelistSaleStartTime(uint256 _newWhitelistSaleStartTime) external onlyOwner {\r\n        whitelistSaleStartTime = _newWhitelistSaleStartTime;\r\n    }\r\n\r\n    /**\r\n     * @dev Sets the end time of the whitelist sale.\r\n     * @param _newWhitelistSaleEndTime The new end time of the whitelist sale.\r\n     */\r\n    function setWhitelistSaleEndTime(uint256 _newWhitelistSaleEndTime) external onlyOwner {\r\n        whitelistSaleEndTime = _newWhitelistSaleEndTime;\r\n    }\r\n\r\n    /**\r\n     * @dev Sets the ETH Price Feed.\r\n     * @param _newETHPriceFeed The new price feed.\r\n     */\r\n    function setETHPriceFeed(address _newETHPriceFeed) external onlyOwner {\r\n        eth_priceFeed = AggregatorV3Interface(_newETHPriceFeed);\r\n    }\r\n\r\n    /**\r\n     * @dev Gets the address of the ETH price feed aggregator.\r\n     * @return The address of the ETH price feed aggregator.\r\n     */\r\n    function getETHPriceFees() external view returns (address) {\r\n        return address(eth_priceFeed);\r\n    }\r\n\r\n    /**\r\n     * @dev Gets the token purchase details for a specific wallet address.\r\n     * @param wallet The wallet address.\r\n     * @return The token purchase details.\r\n     */\r\n    function getPurchasedTokens(address wallet) external view returns (TokenPurchase memory) {\r\n        return tokensPurchased[wallet];\r\n    }\r\n\r\n    /**\r\n     * @dev Gets the token price.\r\n     * @return The token price.\r\n     */\r\n    function getTokenPrice() external view returns (uint256) {\r\n        return tokenPrice;\r\n    }\r\n\r\n    /**\r\n     * @dev Gets the Merkle root.\r\n     * @return The Merkle root.\r\n     */\r\n    function getMerkleRoot() external view returns (bytes32) {\r\n        return merkleRoot;\r\n    }\r\n\r\n    /**\r\n     * @dev Gets the start time of the token sale.\r\n     * @return The start time of the token sale.\r\n     */\r\n    function getSaleStartTime() external view returns (uint256) {\r\n        return saleStartTime;\r\n    }\r\n\r\n    /**\r\n     * @dev Gets the end time of the token sale.\r\n     * @return The end time of the token sale.\r\n     */\r\n    function getSaleEndTime() external view returns (uint256) {\r\n        return saleEndTime;\r\n    }\r\n\r\n    /**\r\n     * @dev Gets the start time of the whitelist sale.\r\n     * @return The start time of the whitelist sale.\r\n     */\r\n    function getWhitelistSaleStartTime() external view returns (uint256) {\r\n        return whitelistSaleStartTime;\r\n    }\r\n\r\n    /**\r\n     * @dev Gets the end time of the whitelist sale.\r\n     * @return The end time of the whitelist sale.\r\n     */\r\n    function getWhitelistSaleEndTime() external view returns (uint256) {\r\n        return whitelistSaleEndTime;\r\n    }\r\n\r\n    /**\r\n     * @dev Gets the maximum number of tokens to sell.\r\n     * @return The maximum number of tokens to sell.\r\n     */\r\n    function getMaxTokensToSell() external view returns (uint256) {\r\n        return maxTokensToSell;\r\n    }\r\n\r\n    /**\r\n     * @dev Gets the total number of tokens sold.\r\n     * @return The total number of tokens sold.\r\n     */\r\n    function getTotalTokensSold() external view returns (uint256) {\r\n        return totalTokensSold;\r\n    }\r\n\r\n    /**\r\n     * @dev Gets the maximum wallet limit.\r\n     * @return The maximum wallet limit.\r\n     */\r\n    function getMaxWalletLimit() external view returns (uint256) {\r\n        return maxWalletLimit;\r\n    }\r\n\r\n    /**\r\n     * @dev Gets the Monk Coin Address.\r\n     * @return Monk Coin Address.\r\n     */\r\n    function getMonkCoin() external view returns (address) {\r\n        return MonkCoin;\r\n    }\r\n    \r\n    /**\r\n     * @dev Gets the ETH price from the price feed aggregator.\r\n     * @return The ETH price in USD.\r\n     */\r\n    function getETHPrice() public view returns (uint) {\r\n        (uint80 roundId, , , , ) = eth_priceFeed.latestRoundData();\r\n        uint256 round_ = (roundId / 10) * 10; \r\n        (, int price, , , ) = eth_priceFeed.getRoundData(uint80(round_));\r\n        require(price >= 0, \"MONK: Invalid Price Feed Data\");\r\n        return uint256(price);\r\n    }\r\n\r\n    /**\r\n     * @dev Gets the decimals of the ETH price feed.\r\n     * @return The number of decimals of the ETH price feed.\r\n     */\r\n    function priceFeedDecimals() public view returns(uint){\r\n        return eth_priceFeed.decimals();\r\n    }\r\n\r\n    /**\r\n     * @dev Gets the equivalent amount of ETH for a given USD amount.\r\n     * @param amountInUSD The USD amount.\r\n     * @return The equivalent amount of ETH.\r\n     */\r\n    function getETHAmount(uint256 amountInUSD) public view returns(uint256){\r\n        uint256 amount = (amountInUSD * (10**priceFeedDecimals())) / getETHPrice();\r\n        return amount;\r\n    }\r\n    \r\n    /**\r\n     * @dev Performs a purchase during the whitelist sale period.\r\n     * @param amountInUSD The USD amount.\r\n     * @param token The address of the token.\r\n     * @param proof The Merkle proof for the wallet address.\r\n     */\r\n    function whitelistPurchase(uint256 amountInUSD, address token, bytes32[] calldata proof) external payable onlyDuringWhitelistSale nonReentrant { \r\n        require(amountInUSD > 0, \"MONK: Purchase should not be zero\");\r\n        // Verify the Merkle proof\r\n        bytes32 leaf = keccak256(abi.encodePacked(_msgSender()));\r\n        require(\r\n            MerkleProof.verify(proof, merkleRoot, leaf),\r\n            \"MONK: Invalid Merkle proof\"\r\n        );\r\n        require(isTokenAllowed[token] == true, \"MONK: Token not allowed\");\r\n        if(token == address(0)) {\r\n            uint256 ethValue = getETHAmount(amountInUSD);\r\n            require(ethValue > 0, \"MONK: ETH value should be greater than zero\");\r\n            require(msg.value == ethValue, \"MONK: Please send proper ETH Amount\");\r\n            payable(owner()).transfer(msg.value);\r\n        } else {\r\n            TransferHelper.safeTransferFrom(token, _msgSender(), owner(), amountInUSD);\r\n            amountInUSD = amountInUSD * 10**12; // Converting USDT/USDC amount to 18 decimals\r\n        }\r\n        \r\n        uint256 tokenAmount = (amountInUSD * 10**18) / tokenPrice;\r\n\r\n        uint256 tokenToTransfer = tokenAmount / 2;\r\n        totalTokensSold += tokenAmount;\r\n        require(totalTokensSold <= maxTokensToSell, \"MONK: Max Limit Reached\");\r\n\r\n        tokensPurchased[_msgSender()].amountPurchased += tokenAmount;\r\n        tokensPurchased[_msgSender()].amountTransferred += tokenToTransfer;\r\n        require(tokensPurchased[_msgSender()].amountPurchased <= maxWalletLimit, \"MONK: Max Wallet Limit Reached\");\r\n        TransferHelper.safeTransfer(MonkCoin, _msgSender(), tokenToTransfer);\r\n\r\n        emit TokenPurchased(_msgSender(), tokenAmount, tokenToTransfer, token);\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a purchase during the public sale period.\r\n     * @param amountInUSD The USD amount.\r\n     * @param token The address of the token.\r\n     */\r\n    function publicPurchase(uint256 amountInUSD, address token) external payable onlyDuringSale nonReentrant {\r\n        require(amountInUSD > 0, \"MONK: Purchase should not be zero\");\r\n        require(isTokenAllowed[token] == true, \"MONK: Token not allowed\");\r\n        if(token == address(0)) {\r\n            uint256 ethValue = getETHAmount(amountInUSD);\r\n            require(ethValue > 0, \"MONK: ETH value should be greater than zero\");\r\n            require(msg.value == ethValue, \"MONK: Please send proper ETH Amount\");\r\n            payable(owner()).transfer(msg.value);\r\n        } else {\r\n            TransferHelper.safeTransferFrom(token, _msgSender(), owner(), amountInUSD);\r\n            amountInUSD = amountInUSD * 10**12; // Converting USDT/USDC amount to 18 decimals\r\n        }\r\n\r\n        uint256 tokenAmount = (amountInUSD * 10**18) / tokenPrice;\r\n\r\n        uint256 tokenToTransfer = tokenAmount / 2;\r\n        totalTokensSold += tokenAmount;\r\n        require(totalTokensSold <= maxTokensToSell, \"MONK: Max Limit Reached\");\r\n\r\n        tokensPurchased[_msgSender()].amountPurchased += tokenAmount;\r\n        tokensPurchased[_msgSender()].amountTransferred += tokenToTransfer;\r\n        require(tokensPurchased[_msgSender()].amountPurchased <= maxWalletLimit, \"MONK: Max Wallet Limit Reached\");\r\n        TransferHelper.safeTransfer(MonkCoin, _msgSender(), tokenToTransfer);\r\n\r\n        emit TokenPurchased(_msgSender(), tokenAmount, tokenToTransfer, token);\r\n    }\r\n\r\n    /**\r\n     * @dev Withdraws the unsold tokens to the owner.\r\n     * @param token The address of the token.\r\n     * @param amount The amount of unsold tokens to withdraw.\r\n     */\r\n    function withdrawTokens(address token, uint256 amount) external onlyOwner nonReentrant {\r\n        require(token != address(0), \"MONK: ETH cannot be withdrawn using this function\");\r\n        TransferHelper.safeTransfer(token, owner(), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Withdraws the ETH balance to the owner.\r\n     */\r\n    function withdrawETHBalance(uint256 amount) external onlyOwner nonReentrant {\r\n        uint256 balance = address(this).balance;\r\n        require(balance >= amount, \"MONK: No ETH balance to withdraw\");\r\n        payable(owner()).transfer(amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Receives ETH payments sent to the contract.\r\n     */\r\n    receive() external payable {}\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountPurchased\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountTransferred\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"TokenPurchased\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountInUSD\",\"type\":\"uint256\"}],\"name\":\"getETHAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getETHPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getETHPriceFees\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMaxTokensToSell\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMaxWalletLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMerkleRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMonkCoin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"getPurchasedTokens\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amountPurchased\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountTransferred\",\"type\":\"uint256\"}],\"internalType\":\"struct MonkTokenSale.TokenPurchase\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSaleEndTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSaleStartTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokenPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalTokensSold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getWhitelistSaleEndTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getWhitelistSaleStartTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceFeedDecimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountInUSD\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"publicPurchase\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newETHPriceFeed\",\"type\":\"address\"}],\"name\":\"setETHPriceFeed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setMaxTokensToSell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setMaxWalletLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_newMerkleRoot\",\"type\":\"bytes32\"}],\"name\":\"setMerkleRoot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newSaleEndTime\",\"type\":\"uint256\"}],\"name\":\"setSaleEndTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newSaleStartTime\",\"type\":\"uint256\"}],\"name\":\"setSaleStartTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"setTokenAllowed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newTokenPrice\",\"type\":\"uint256\"}],\"name\":\"setTokenPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newWhitelistSaleEndTime\",\"type\":\"uint256\"}],\"name\":\"setWhitelistSaleEndTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newWhitelistSaleStartTime\",\"type\":\"uint256\"}],\"name\":\"setWhitelistSaleStartTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountInUSD\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"}],\"name\":\"whitelistPurchase\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawETHBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "MonkTokenSale", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://fca39ad8b52e87fa7bdc4f75f5abd0fc4a337da0f8b3808dda05654670fcb419"}