{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/DimentMultiSignatureWallet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.22;\\n\\n// Errors\\nerror OnlyOwners(address user);\\nerror AlreadyOwner(address user);\\nerror OwnerNotFound(address user);\\nerror CallerIsNotItsSelf();\\nerror TxNotExists(uint16 txId);\\nerror TxNotConfirmed(uint16 txId);\\nerror AlreadyExecuted(uint16 txId);\\nerror AlreadyCorfirmed(uint16 txId);\\nerror NullAdress();\\nerror NotVaildRequirement();\\nerror ZeroAddress();\\nerror NotEnoughConfirmation();\\n\\ncontract DimentMultiSignatureWallet {\\n    event Received(address indexed sender, uint256 amount, uint256 balance);\\n    event SubmitTransaction(\\n        address indexed owner,\\n        uint16 indexed txIndex,\\n        address indexed to,\\n        uint256 value,\\n        bytes data\\n    );\\n    event ConfirmTransaction(address indexed owner, uint16 indexed txIndex);\\n    event RevokeConfirmation(address indexed owner, uint16 indexed txIndex);\\n    event ExecuteTransaction(address indexed owner, uint16 indexed txIndex);\\n\\n    event OwnerAdded(address indexed owner);\\n    event OwnerRemoved(address indexed owner);\\n    event RequirementChange(uint8 required);\\n\\n    event ETHRemoved(address to);\\n\\n    address[] private _owners;\\n    uint8 internal ownersCount;\\n    uint8 private constant _MAX_OWNER_COUNT = 50;\\n\\n    mapping(address => bool) public isOwner;\\n    uint8 public numConfirmationsRequired;\\n\\n    struct Transaction {\\n        uint256 value;\\n        bytes data;\\n        address to;\\n        uint8 executed;\\n        uint8 numConfirmations;\\n    }\\n\\n    // mapping from tx index => owner => bool\\n    mapping(uint16 => mapping(address => bool)) public isConfirmed;\\n\\n    // @dev transaction list\\n    Transaction[] public transactions;\\n    uint16 public transactionIndex;\\n\\n    // @dev only owner modifier\\n    modifier onlyOwner() {\\n        if (!isOwner[msg.sender]) {\\n            revert OnlyOwners(msg.sender);\\n        }\\n        _;\\n    }\\n\\n    // @dev check the owner not in the owner list modifier\\n    modifier ownerDoesNotExist(address owner) {\\n        if (isOwner[owner]) {\\n            revert AlreadyOwner(owner);\\n        }\\n        _;\\n    }\\n\\n    // @dev check the owner is in the owner list modifier\\n    modifier ownerExists(address owner) {\\n        if (!isOwner[owner]) {\\n            revert OwnerNotFound(owner);\\n        }\\n        _;\\n    }\\n\\n    // @dev check the wallet is caller of transactions, used for in call like owner functions\\n    modifier onlyWallet() {\\n        if (msg.sender != address(this)) {\\n            revert CallerIsNotItsSelf();\\n        }\\n        _;\\n    }\\n\\n    // @dev check incoming id is in the transactions list range\\n    modifier txExists(uint16 _txIndex) {\\n        if (_txIndex >= transactions.length) {\\n            revert TxNotExists(_txIndex);\\n        }\\n        _;\\n    }\\n\\n    // @dev check incoming id is not executed\\n    modifier notExecuted(uint16 _txIndex) {\\n        if (transactions[_txIndex].executed == 1) {\\n            revert AlreadyExecuted(_txIndex);\\n        }\\n        _;\\n    }\\n\\n    // @dev check incoming id is not confirmed\\n    modifier notConfirmed(uint16 _txIndex) {\\n        if (isConfirmed[_txIndex][msg.sender]) {\\n            revert AlreadyCorfirmed(_txIndex);\\n        }\\n        _;\\n    }\\n\\n    // @dev check incoming address is not null\\n    modifier notNull(address _address) {\\n        if (_address != address(0)) {\\n            revert NullAdress();\\n        }\\n        _;\\n    }\\n\\n    // @dev check requirements for owner and required wallets\\n    modifier validRequirement(uint8 ownerCount, uint8 _required) {\\n        if (\\n            ownerCount >= _MAX_OWNER_COUNT ||\\n            _required > ownerCount ||\\n            _required == 0 ||\\n            ownerCount == 0\\n        ) {\\n            revert NotVaildRequirement();\\n        }\\n\\n        _;\\n    }\\n\\n    /**\\n     * @dev constructor of contract\\n     * @param owners_ owners array\\n     * @param numConfirmationsRequired_ transaction confirmation required amount\\n     */\\n    //\\n    constructor(address[] memory owners_, uint8 numConfirmationsRequired_) {\\n        uint256 arrLength = owners_.length;\\n        if (arrLength == 0) {\\n            revert NotVaildRequirement();\\n        }\\n\\n        if (\\n            numConfirmationsRequired_ == 0 ||\\n            numConfirmationsRequired_ > arrLength\\n        ) {\\n            revert NotVaildRequirement();\\n        }\\n\\n        uint8 i;\\n\\n        for (i = 0; i < arrLength; i++) {\\n            address owner = owners_[i];\\n\\n            if (owner == address(0)) {\\n                revert ZeroAddress();\\n            }\\n            if (isOwner[owner]) {\\n                revert AlreadyOwner(owner);\\n            }\\n\\n            isOwner[owner] = true;\\n            _owners.push(owner);\\n        }\\n\\n        // set memory value to storage\\n        ownersCount = i;\\n\\n        numConfirmationsRequired = numConfirmationsRequired_;\\n    }\\n\\n    receive() external payable {\\n        emit Received(msg.sender, msg.value, address(this).balance);\\n    }\\n\\n    /**\\n     * @dev add transaction to transaction list\\n     * @param to_ transaction will execute on this address\\n     * @param value_ amount ether we want to send\\n     * @param data_ transaction data that encoded\\n     */\\n    //\\n    function submitTransaction(\\n        address to_,\\n        uint256 value_,\\n        bytes memory data_\\n    ) external onlyOwner {\\n        uint16 txIndex = transactionIndex;\\n\\n        // transaction index update\\n        transactionIndex++;\\n\\n        transactions.push(\\n            Transaction({\\n                to: to_,\\n                value: value_,\\n                data: data_,\\n                executed: 0,\\n                numConfirmations: 0\\n            })\\n        );\\n\\n        emit SubmitTransaction(msg.sender, txIndex, to_, value_, data_);\\n    }\\n\\n    /**\\n     * @dev owners can confirm transaction that the list that not confirmed and not executed yet\\n     * @param txIndex_ transaction id\\n     */\\n    function confirmTransaction(\\n        uint16 txIndex_\\n    )\\n        external\\n        onlyOwner\\n        txExists(txIndex_)\\n        notExecuted(txIndex_)\\n        notConfirmed(txIndex_)\\n    {\\n        Transaction storage transaction = transactions[txIndex_];\\n        transaction.numConfirmations += 1;\\n        isConfirmed[txIndex_][msg.sender] = true;\\n\\n        emit ConfirmTransaction(msg.sender, txIndex_);\\n    }\\n\\n    /**\\n     * @dev owners can executed transaction that in the list and not executed yet\\n     * @param txIndex_ transaction id\\n     */\\n    //\\n    function executeTransaction(\\n        uint16 txIndex_\\n    ) external onlyOwner txExists(txIndex_) notExecuted(txIndex_) {\\n        Transaction storage transaction = transactions[txIndex_];\\n\\n        if (transaction.numConfirmations < numConfirmationsRequired) {\\n            revert NotEnoughConfirmation();\\n        }\\n\\n        transaction.executed = 1;\\n\\n        emit ExecuteTransaction(msg.sender, txIndex_);\\n\\n        (bool success, ) = transaction.to.call{value: transaction.value}(\\n            transaction.data\\n        );\\n        require(success, \\\"tx failed\\\");\\n    }\\n\\n    /**\\n     * @dev owners can revoke transaction that in the list and not executed\\n     * @param txIndex_ transaction id\\n     */\\n    //\\n    function revokeConfirmation(\\n        uint16 txIndex_\\n    ) external onlyOwner txExists(txIndex_) notExecuted(txIndex_) {\\n        Transaction storage transaction = transactions[txIndex_];\\n\\n        if (!isConfirmed[txIndex_][msg.sender]) {\\n            revert TxNotConfirmed(txIndex_);\\n        }\\n\\n        transaction.numConfirmations -= 1;\\n        isConfirmed[txIndex_][msg.sender] = false;\\n\\n        emit RevokeConfirmation(msg.sender, txIndex_);\\n    }\\n\\n    /**\\n     * @dev get transaction count\\n     */\\n    //\\n    function getTransactionCount() external view returns (uint256) {\\n        return transactions.length;\\n    }\\n\\n    /**\\n     * @dev get single transaction details\\n     * @param txIndex_ transaction id\\n     */\\n    //\\n    function getTransaction(\\n        uint16 txIndex_\\n    )\\n        external\\n        view\\n        returns (\\n            uint256 value,\\n            bytes memory data,\\n            address to,\\n            uint8 executed,\\n            uint8 numConfirmations\\n        )\\n    {\\n        Transaction memory transaction = transactions[txIndex_];\\n\\n        return (\\n            transaction.value,\\n            transaction.data,\\n            transaction.to,\\n            transaction.executed,\\n            transaction.numConfirmations\\n        );\\n    }\\n\\n    /**\\n     * @dev add new owner buy calling itself\\n     * @param owner_ new owners address\\n     */\\n    //\\n    function addOwner(\\n        address owner_\\n    )\\n        external\\n        onlyWallet\\n        ownerDoesNotExist(owner_)\\n        notNull(owner_)\\n        validRequirement(ownersCount, numConfirmationsRequired)\\n    {\\n        isOwner[owner_] = true;\\n        _owners.push(owner_);\\n        ownersCount++;\\n        emit OwnerAdded(owner_);\\n    }\\n\\n    /**\\n     * @dev replace old owner with the new owner buy calling itself\\n     * @param owner_ owner will remove\\n     * @param newOwner_ owner will replace\\n     */\\n    //\\n    function replaceOwner(\\n        address owner_,\\n        address newOwner_\\n    ) external onlyWallet ownerExists(owner_) ownerDoesNotExist(newOwner_) {\\n        for (uint8 i = 0; i < ownersCount; i++)\\n            if (_owners[i] == owner_) {\\n                _owners[i] = newOwner_;\\n                break;\\n            }\\n        isOwner[owner_] = false;\\n        isOwner[newOwner_] = true;\\n        emit OwnerRemoved(owner_);\\n        emit OwnerAdded(newOwner_);\\n    }\\n\\n    /**\\n     * @dev remove the owner from the owners buy calling itself\\n     * @param owner_ address to remove\\n     */\\n    //\\n    function removeOwner(\\n        address owner_\\n    ) external onlyWallet ownerExists(owner_) {\\n        isOwner[owner_] = false;\\n\\n        for (uint8 i = 0; i < ownersCount; i++)\\n            if (_owners[i] == owner_) {\\n                _owners[i] = _owners[ownersCount - 1];\\n                break;\\n            }\\n\\n        _owners.pop();\\n        ownersCount--;\\n\\n        if (numConfirmationsRequired > ownersCount) {\\n            changeRequirement(ownersCount);\\n        }\\n\\n        emit OwnerRemoved(owner_);\\n    }\\n\\n    /**\\n     * @dev add new owner buy calling itself\\n     * @param required_ amount for minimum confirmations\\n     */\\n    //\\n    function changeRequirement(\\n        uint8 required_\\n    ) public onlyWallet validRequirement(ownersCount, required_) {\\n        numConfirmationsRequired = required_;\\n        emit RequirementChange(required_);\\n    }\\n\\n    /**\\n     * @dev remove native token from contract\\n     * @param to_ who will recive funds\\n     */\\n    function recoverETH(address payable to_) external onlyWallet {\\n        require(to_ != address(0), \\\"ERC20: transfer to the zero address\\\");\\n        require(address(this).balance > 0, \\\"ERC20: zero native balance\\\");\\n\\n        emit ETHRemoved(to_);\\n        (bool sent, ) = to_.call{value: address(this).balance}(\\\"\\\");\\n        require(sent, \\\"ERC20: ETH_TX_FAIL on recover ETH\\\");\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"evmVersion\": \"paris\",\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"owners_\",\"type\":\"address[]\"},{\"internalType\":\"uint8\",\"name\":\"numConfirmationsRequired_\",\"type\":\"uint8\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"txId\",\"type\":\"uint16\"}],\"name\":\"AlreadyCorfirmed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"txId\",\"type\":\"uint16\"}],\"name\":\"AlreadyExecuted\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"AlreadyOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CallerIsNotItsSelf\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotEnoughConfirmation\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotVaildRequirement\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NullAdress\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"OnlyOwners\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"OwnerNotFound\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"txId\",\"type\":\"uint16\"}],\"name\":\"TxNotConfirmed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"txId\",\"type\":\"uint16\"}],\"name\":\"TxNotExists\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAddress\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint16\",\"name\":\"txIndex\",\"type\":\"uint16\"}],\"name\":\"ConfirmTransaction\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"ETHRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint16\",\"name\":\"txIndex\",\"type\":\"uint16\"}],\"name\":\"ExecuteTransaction\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnerAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnerRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"Received\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"required\",\"type\":\"uint8\"}],\"name\":\"RequirementChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint16\",\"name\":\"txIndex\",\"type\":\"uint16\"}],\"name\":\"RevokeConfirmation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint16\",\"name\":\"txIndex\",\"type\":\"uint16\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"SubmitTransaction\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"}],\"name\":\"addOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"required_\",\"type\":\"uint8\"}],\"name\":\"changeRequirement\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"txIndex_\",\"type\":\"uint16\"}],\"name\":\"confirmTransaction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"txIndex_\",\"type\":\"uint16\"}],\"name\":\"executeTransaction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"txIndex_\",\"type\":\"uint16\"}],\"name\":\"getTransaction\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"executed\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"numConfirmations\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTransactionCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isConfirmed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numConfirmationsRequired\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"to_\",\"type\":\"address\"}],\"name\":\"recoverETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"}],\"name\":\"removeOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newOwner_\",\"type\":\"address\"}],\"name\":\"replaceOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"txIndex_\",\"type\":\"uint16\"}],\"name\":\"revokeConfirmation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value_\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data_\",\"type\":\"bytes\"}],\"name\":\"submitTransaction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transactionIndex\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"transactions\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"executed\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"numConfirmations\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "DimentMultiSignatureWallet", "CompilerVersion": "v0.8.22+commit.4fc1097e", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000003000000000000000000000000eb098a67d7c46ca48c701cd09d6a3a37b1ba07170000000000000000000000005d3c96bf7ecf9bdb75f18bef5f4a7aef351543ea000000000000000000000000d5ae52e39750c52c94a725d7b7f717239d964af5", "EVMVersion": "paris", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}