{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\": {\r\n      \"content\": \"pragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Pair {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external pure returns (string memory);\\n    function symbol() external pure returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint amount0In,\\n        uint amount1In,\\n        uint amount0Out,\\n        uint amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\n    function factory() external view returns (address);\\n    function token0() external view returns (address);\\n    function token1() external view returns (address);\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n    function price0CumulativeLast() external view returns (uint);\\n    function price1CumulativeLast() external view returns (uint);\\n    function kLast() external view returns (uint);\\n\\n    function mint(address to) external returns (uint liquidity);\\n    function burn(address to) external returns (uint amount0, uint amount1);\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n    function skim(address to) external;\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\\n\"\r\n    },\r\n    \"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol\": {\r\n      \"content\": \"pragma solidity >=0.6.2;\\n\\ninterface IUniswapV2Router01 {\\n    function factory() external pure returns (address);\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETH(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountToken, uint amountETH);\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountToken, uint amountETH);\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapTokensForExactTokens(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\n}\\n\"\r\n    },\r\n    \"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\": {\r\n      \"content\": \"pragma solidity >=0.6.2;\\n\\nimport './IUniswapV2Router01.sol';\\n\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountETH);\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountETH);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable;\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/LottyStaking.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.21;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\\\";\\r\\nimport \\\"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title LOTTY Staking Contract\\r\\n * @author @Xirynx\\r\\n */\\r\\ncontract LottyStaking is Ownable {\\r\\n    //============================================//\\r\\n    //                Definitions                 //\\r\\n    //============================================//\\r\\n\\r\\n    struct StakePosition {\\r\\n        address owner;\\r\\n        uint256 timestamp;\\r\\n        uint256 liquidity;\\r\\n        uint256 timeLocked;\\r\\n    }\\r\\n\\r\\n    //============================================//\\r\\n    //                  Errors                    //\\r\\n    //============================================//\\r\\n\\r\\n    error BalanceTransferFailed();\\r\\n    error CallerNotOrigin();\\r\\n    error CallerDoesNotOwnPosition();\\r\\n    error PositionLocked();\\r\\n\\r\\n    //============================================//\\r\\n    //                  Events                    //\\r\\n    //============================================//\\r\\n\\r\\n    event Stake(\\r\\n        address indexed owner,\\r\\n        uint256 indexed positionNonce,\\r\\n        uint256 timestamp,\\r\\n        uint256 timelock,\\r\\n        uint256 liquidity\\r\\n    );\\r\\n    event Unstake(\\r\\n        address indexed owner,\\r\\n        uint256 indexed positionNonce,\\r\\n        uint256 timestamp,\\r\\n        uint256 liquidity\\r\\n    );\\r\\n\\r\\n    //============================================//\\r\\n    //                 Constants                  //\\r\\n    //============================================//\\r\\n\\r\\n    IUniswapV2Pair uniswapV2Pair;\\r\\n    IUniswapV2Router02 uniswapV2Router;\\r\\n    IERC20 lotty;\\r\\n\\r\\n    //============================================//\\r\\n    //              State Variables               //\\r\\n    //============================================//\\r\\n\\r\\n    uint256 public totalLiquidity;\\r\\n    uint256 public stakeNonce;\\r\\n    mapping(uint256 => StakePosition) public positions;\\r\\n\\r\\n    /**\\r\\n     * @notice Make the deployment network agnostic by requiring to specify prerequisite addresses\\r\\n     * @param _uniswapV2Pair: Uniswap pool pair address\\r\\n     * @param _uniswapV2Router: UniswapV2Router address\\r\\n     * @param _lotty: ERC20 Lotty token address\\r\\n     */\\r\\n    constructor(\\r\\n        IUniswapV2Pair _uniswapV2Pair,\\r\\n        IUniswapV2Router02 _uniswapV2Router,\\r\\n        IERC20 _lotty\\r\\n    ) {\\r\\n        uniswapV2Pair = IUniswapV2Pair(_uniswapV2Pair);\\r\\n        uniswapV2Router = IUniswapV2Router02(_uniswapV2Router);\\r\\n        lotty = IERC20(_lotty);\\r\\n    }\\r\\n\\r\\n    //============================================//\\r\\n    //                 Read Only                  //\\r\\n    //============================================//\\r\\n    /**\\r\\n     * @notice Returns staking position indexed at `_nonce`\\r\\n     * @param _nonce: Index of the staking position being queried.\\r\\n     */\\r\\n    function checkPosition(\\r\\n        uint256 _nonce\\r\\n    ) public view returns (StakePosition memory _position) {\\r\\n        _position = positions[_nonce];\\r\\n    }\\r\\n\\r\\n    //============================================//\\r\\n    //                Core Methods                //\\r\\n    //============================================//\\r\\n\\r\\n    /**\\r\\n     * @notice Stakes Lotty and ETH and locks liquidity for duration of _timeLocked\\r\\n     * @dev Caller must be not be contract\\r\\n     * @dev Caller must have approved at least `_amountLottyDesired` tokens before staking\\r\\n     * @param _amountLottyDesired: Ideal amount of Lotty tokens to stake\\r\\n     * @param _amountLottyMin: Bounds the extent to which the ETH/Lotty price can go up before the transaction reverts. Must be <= _amountLottyDesired\\r\\n     * @param _amountETHMin: Bounds the extent to which the Lotty/ETH price can go up before the transaction reverts. Must be <= `msg.value`\\r\\n     * @param _deadline: Unix timestamp after which the transaction will revert\\r\\n     * @param _timeLocked: Duration (seconds) for which the position will be unstakeable\\r\\n     */\\r\\n    function stake(\\r\\n        uint256 _amountLottyDesired,\\r\\n        uint256 _amountLottyMin,\\r\\n        uint256 _amountETHMin,\\r\\n        uint256 _deadline,\\r\\n        uint256 _timeLocked\\r\\n    ) public payable {\\r\\n        if (msg.sender != tx.origin) revert CallerNotOrigin();\\r\\n\\r\\n        lotty.transferFrom(msg.sender, address(this), _amountLottyDesired);\\r\\n        lotty.approve(address(uniswapV2Router), _amountLottyDesired);\\r\\n        stakeNonce += 1;\\r\\n\\r\\n        (, , uint256 liquidity) = uniswapV2Router.addLiquidityETH{\\r\\n            value: msg.value\\r\\n        }(\\r\\n            address(lotty),\\r\\n            _amountLottyDesired,\\r\\n            _amountLottyMin,\\r\\n            _amountETHMin,\\r\\n            address(this),\\r\\n            _deadline\\r\\n        );\\r\\n\\r\\n        totalLiquidity += liquidity;\\r\\n        positions[stakeNonce] = StakePosition(\\r\\n            msg.sender,\\r\\n            block.timestamp,\\r\\n            liquidity,\\r\\n            _timeLocked\\r\\n        );\\r\\n\\r\\n        uint256 balance = address(this).balance;\\r\\n        if (balance > 0) {\\r\\n            (bool callSuccess, ) = payable(msg.sender).call{value: balance}(\\\"\\\");\\r\\n            if (!callSuccess) revert BalanceTransferFailed();\\r\\n        }\\r\\n\\r\\n        uint256 lottyBalance = lotty.balanceOf(address(this));\\r\\n        if (lottyBalance > 0) {\\r\\n            lotty.transfer(msg.sender, lottyBalance);\\r\\n        }\\r\\n\\r\\n        emit Stake(\\r\\n            msg.sender,\\r\\n            stakeNonce,\\r\\n            block.timestamp,\\r\\n            _timeLocked,\\r\\n            liquidity\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Burns the position's liquidity tokens and returns the equivalent Lotty and ETH back to the staker\\r\\n     * @dev Caller must own the position\\r\\n     * @dev `block.timestamp` must be greater than the position's unlock time\\r\\n     * @param _positionNonce: Nonce by which to identify the position for unstaking\\r\\n     * @param _amountLottyMin: The minimum amount of Lotty that must be received for the transaction not to revert\\r\\n     * @param _amountETHMin: The minimum amount of ETH that must be received for the transaction not to revert.\\r\\n     * @param _deadline: Unix timestamp after which the transaction will revert\\r\\n     */\\r\\n    function unstake(\\r\\n        uint256 _positionNonce,\\r\\n        uint256 _amountLottyMin,\\r\\n        uint256 _amountETHMin,\\r\\n        uint256 _deadline\\r\\n    ) public {\\r\\n        StakePosition memory position = positions[_positionNonce];\\r\\n        if (position.owner != msg.sender) revert CallerDoesNotOwnPosition();\\r\\n        if (block.timestamp - position.timestamp < position.timeLocked)\\r\\n            revert PositionLocked();\\r\\n\\r\\n        totalLiquidity -= position.liquidity;\\r\\n        positions[_positionNonce].owner = address(0);\\r\\n\\r\\n        uniswapV2Pair.approve(address(uniswapV2Router), position.liquidity);\\r\\n\\r\\n        uniswapV2Router.removeLiquidityETH(\\r\\n            address(lotty),\\r\\n            position.liquidity,\\r\\n            _amountLottyMin,\\r\\n            _amountETHMin,\\r\\n            msg.sender,\\r\\n            _deadline\\r\\n        );\\r\\n\\r\\n        emit Unstake(\\r\\n            msg.sender,\\r\\n            _positionNonce,\\r\\n            block.timestamp,\\r\\n            position.liquidity\\r\\n        );\\r\\n    }\\r\\n\\r\\n    receive() external payable {}\\r\\n}\\r\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract IUniswapV2Pair\",\"name\":\"_uniswapV2Pair\",\"type\":\"address\"},{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"_uniswapV2Router\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_lotty\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"BalanceTransferFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CallerDoesNotOwnPosition\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CallerNotOrigin\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PositionLocked\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"positionNonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timelock\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"}],\"name\":\"Stake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"positionNonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"}],\"name\":\"Unstake\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_nonce\",\"type\":\"uint256\"}],\"name\":\"checkPosition\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timeLocked\",\"type\":\"uint256\"}],\"internalType\":\"struct LottyStaking.StakePosition\",\"name\":\"_position\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"positions\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timeLocked\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountLottyDesired\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountLottyMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountETHMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_timeLocked\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakeNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_positionNonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountLottyMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountETHMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_deadline\",\"type\":\"uint256\"}],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "LottyStaking", "CompilerVersion": "v0.8.21+commit.d9974bed", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "0000000000000000000000001840c51b131a51bb66f3019cc7b2d54e6d686e100000000000000000000000007a250d5630b4cf539739df2c5dacb4c659f2488d000000000000000000000000b459f7204a8ac84f9e7758d6d839ebd01670e35c", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}