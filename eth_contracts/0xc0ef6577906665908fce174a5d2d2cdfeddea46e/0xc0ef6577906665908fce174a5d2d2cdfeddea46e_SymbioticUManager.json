{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"src/micro-managers/SymbioticUManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.21;\\n\\nimport {FixedPointMathLib} from \\\"@solmate/utils/FixedPointMathLib.sol\\\";\\nimport {ManagerWithMerkleVerification} from \\\"src/base/Roles/ManagerWithMerkleVerification.sol\\\";\\nimport {ERC20} from \\\"@solmate/tokens/ERC20.sol\\\";\\nimport {Auth, Authority} from \\\"@solmate/auth/Auth.sol\\\";\\nimport {SSTORE2} from \\\"lib/solmate/src/utils/SSTORE2.sol\\\";\\nimport {SymbioticDecoderAndSanitizer} from \\\"src/base/DecodersAndSanitizers/Protocols/SymbioticDecoderAndSanitizer.sol\\\";\\nimport {DefaultCollateral} from \\\"src/interfaces/DefaultCollateral.sol\\\";\\n\\ncontract SymbioticUManager is Auth {\\n    using FixedPointMathLib for uint256;\\n\\n    // ========================================= STRUCTS =========================================\\n\\n    /**\\n     * @notice Configuration for a symbiotic default collateral.\\n     * @param minimumDeposit The minimum amount of the DefaultCollateral.asset() that can be deposited.\\n     * @param decoderAndSanitizer The decoder and sanitizer to use to sanitize the call.\\n     */\\n    struct Configuration {\\n        uint96 minimumDeposit;\\n        address decoderAndSanitizer;\\n    }\\n    // ========================================= CONSTANTS =========================================\\n\\n    /**\\n     * @notice The selector for the ERC20.approve function.\\n     */\\n    bytes4 internal constant APPROVE_SELECTOR = ERC20.approve.selector;\\n\\n    /**\\n     * @notice The selector for the DefaultCollateral.deposit function.\\n     */\\n    bytes4 internal constant DEPOSIT_SELECTOR = DefaultCollateral.deposit.selector;\\n\\n    // ========================================= STATE =========================================\\n\\n    /**\\n     * @notice The configuration for each symbiotic default collateral.\\n     */\\n    mapping(address => Configuration) public configurations;\\n\\n    /**\\n     * @notice The pointer to the merkle tree.\\n     */\\n    address internal pointer;\\n\\n    //============================== ERRORS ===============================\\n\\n    error SymbioticUManager__BadHash(bytes32 leafA, bytes32 leafB, bytes32 expectedLeafAB, bytes32 actualLeafAB);\\n    error SymbioticUManager__InvalidMerkleTree();\\n    error SymbioticUManager__DepositAmountExceedsLimit(uint256 amount, uint256 limitDelta);\\n    error SymbioticUManager__DepositAmountExceedsBalance(uint256 amount, uint256 balance);\\n    error SymbioticUManager__DepositAmountTooSmall(uint256 amount, uint256 minimumDeposit);\\n    error SymbioticUManager__DecoderAndSanitizerNotSet();\\n    error SymbioticUManager__MinimumDepositNotSet();\\n\\n    //============================== EVENTS ===============================\\n\\n    event MerkleLeafsUpdated(address pointer);\\n    event ConfigurationSet(address indexed defaultCollateral, uint96 minimumDeposit, address decoderAndSanitizer);\\n    event Assembled(address indexed defaultCollateral, uint256 amount);\\n\\n    //============================== IMMUTABLES ===============================\\n\\n    /**\\n     * @notice The ManagerWithMerkleVerification this uManager works with.\\n     */\\n    ManagerWithMerkleVerification internal immutable manager;\\n\\n    /**\\n     * @notice The BoringVault this uManager works with.\\n     */\\n    address internal immutable boringVault;\\n\\n    constructor(address _owner, Authority _authoirty, address _manager, address _boringVault)\\n        Auth(_owner, Authority(_authoirty))\\n    {\\n        manager = ManagerWithMerkleVerification(_manager);\\n        boringVault = _boringVault;\\n    }\\n\\n    // ========================================= ADMIN FUNCTIONS =========================================\\n\\n    /**\\n     * @notice Update the merkle tree.\\n     * @param _merkleTree The new merkle tree.\\n     * @param validateMerkleTree If true, the merkle tree will be validated.\\n     * @dev Callable by STRATEGIST_MULTISIG_ROLE\\n     */\\n    function updateMerkleTree(bytes32[][] calldata _merkleTree, bool validateMerkleTree) external requiresAuth {\\n        if (validateMerkleTree) {\\n            // Check that the tree is valid.\\n            for (uint256 i; i < _merkleTree.length - 1; ++i) {\\n                uint256 levelLength = _merkleTree[i].length;\\n                if (levelLength % 2 != 0) revert SymbioticUManager__InvalidMerkleTree();\\n                uint256 nextLevelLength = _merkleTree[i + 1].length;\\n                if (levelLength / 2 != nextLevelLength) revert SymbioticUManager__InvalidMerkleTree();\\n\\n                for (uint256 j; j < _merkleTree[i].length; j += 2) {\\n                    bytes32 leafA = _merkleTree[i][j];\\n                    bytes32 leafB = _merkleTree[i][j + 1];\\n                    bytes32 expectedLeafAB = _merkleTree[i + 1][j / 2];\\n\\n                    bytes32 actualLeafAB = _hashPair(leafA, leafB);\\n\\n                    if (actualLeafAB != expectedLeafAB) {\\n                        revert SymbioticUManager__BadHash(leafA, leafB, expectedLeafAB, actualLeafAB);\\n                    }\\n                }\\n            }\\n\\n            // Check that the root of this tree matches the root in the manager contract.\\n            bytes32 proposedRoot = _merkleTree[_merkleTree.length - 1][0];\\n            bytes32 managerRoot = manager.manageRoot(address(this));\\n            if (proposedRoot != managerRoot) {\\n                revert SymbioticUManager__InvalidMerkleTree();\\n            }\\n        }\\n\\n        bytes memory data = abi.encode(_merkleTree);\\n        address _pointer = SSTORE2.write(data);\\n        pointer = _pointer;\\n\\n        emit MerkleLeafsUpdated(_pointer);\\n    }\\n\\n    /**\\n     * @notice Set the configuration for a symbiotic default collateral.\\n     * @param defaultCollateral The default collateral to set the configuration for.\\n     * @param minimumDeposit The minimum amount of the DefaultCollateral.asset() that can be deposited.\\n     * @param decoderAndSanitizer The decoder and sanitizer to use to sanitize the call.\\n     * @dev Callable by STRATEGIST_MULTISIG_ROLE\\n     */\\n    function setConfiguration(DefaultCollateral defaultCollateral, uint96 minimumDeposit, address decoderAndSanitizer)\\n        external\\n        requiresAuth\\n    {\\n        if (decoderAndSanitizer == address(0)) {\\n            revert SymbioticUManager__DecoderAndSanitizerNotSet();\\n        }\\n        if (minimumDeposit == 0) {\\n            revert SymbioticUManager__MinimumDepositNotSet();\\n        }\\n        configurations[address(defaultCollateral)] = Configuration(minimumDeposit, decoderAndSanitizer);\\n\\n        emit ConfigurationSet(address(defaultCollateral), minimumDeposit, decoderAndSanitizer);\\n    }\\n\\n    // ========================================= SNIPER FUNCTIONS =========================================\\n\\n    /**\\n     * @notice Assemble a specific amount of a default collateral.\\n     * @param defaultCollateral The default collateral to assemble.\\n     * @param amount The amount to assemble.\\n     * @dev Callable by SNIPER_ROLE\\n     * @dev Use type(uint256).max to deposit as much as possible.\\n     */\\n    function assemble(DefaultCollateral defaultCollateral, uint256 amount)\\n        external\\n        requiresAuth\\n        returns (uint256 assembled)\\n    {\\n        assembled = _assemble(defaultCollateral, amount);\\n    }\\n\\n    /**\\n     * @notice Assemble as much as possible of a default collateral.\\n     * @param defaultCollateral The default collateral to assemble.\\n     * @dev Callable by SNIPER_ROLE\\n     */\\n    function fullAssemble(DefaultCollateral defaultCollateral) external requiresAuth returns (uint256 assembled) {\\n        assembled = _assemble(defaultCollateral, type(uint256).max);\\n    }\\n\\n    // ========================================= HELPER FUNCTIONS =========================================\\n\\n    /**\\n     * @notice Helper function to handle approving and depositing into a default collateral.\\n     * @return the amount assembled.\\n     */\\n    function _assemble(DefaultCollateral defaultCollateral, uint256 amount) internal returns (uint256) {\\n        ERC20 asset = defaultCollateral.asset();\\n        uint256 allowance = asset.allowance(boringVault, address(defaultCollateral));\\n\\n        address[] memory unoDecoderAndSanitizer = new address[](1);\\n        {\\n            Configuration memory configuration = configurations[address(defaultCollateral)];\\n            amount = _maxDeposit(defaultCollateral, asset, amount, configuration.minimumDeposit);\\n            unoDecoderAndSanitizer[0] = configuration.decoderAndSanitizer;\\n        }\\n\\n        bytes32 leaf;\\n        bytes32[][] memory merkleTree = viewMerkleTree();\\n        bytes32[][] memory unoProof = new bytes32[][](1);\\n        if (unoDecoderAndSanitizer[0] == address(0)) {\\n            revert SymbioticUManager__DecoderAndSanitizerNotSet();\\n        }\\n        address[] memory unoTarget = new address[](1);\\n        bytes[] memory unoTargetData = new bytes[](1);\\n        uint256[] memory unoZero = new uint256[](1);\\n\\n        if (allowance < amount) {\\n            unoTarget[0] = address(asset);\\n            leaf = _buildLeaf(unoDecoderAndSanitizer[0], unoTarget[0], APPROVE_SELECTOR, address(defaultCollateral));\\n            unoProof[0] = _generateProof(leaf, merkleTree);\\n            if (allowance > 0) {\\n                // Set approval to zero.\\n                unoTargetData[0] = abi.encodeWithSelector(APPROVE_SELECTOR, address(defaultCollateral), 0);\\n                manager.manageVaultWithMerkleVerification(\\n                    unoProof, unoDecoderAndSanitizer, unoTarget, unoTargetData, unoZero\\n                );\\n            }\\n            // Set approval to amount.\\n            unoTargetData[0] = abi.encodeWithSelector(APPROVE_SELECTOR, address(defaultCollateral), amount);\\n            manager.manageVaultWithMerkleVerification(\\n                unoProof, unoDecoderAndSanitizer, unoTarget, unoTargetData, unoZero\\n            );\\n\\n            // We set the allowance to zero, to indicate that we should revokeApproval if non zero after deposit.\\n            allowance = 0;\\n        }\\n\\n        // Deposit the amount.\\n        unoTarget[0] = address(defaultCollateral);\\n        leaf = _buildLeaf(unoDecoderAndSanitizer[0], unoTarget[0], DEPOSIT_SELECTOR, boringVault);\\n        unoProof[0] = _generateProof(leaf, merkleTree);\\n        unoTargetData[0] = abi.encodeWithSelector(DEPOSIT_SELECTOR, boringVault, amount);\\n        manager.manageVaultWithMerkleVerification(unoProof, unoDecoderAndSanitizer, unoTarget, unoTargetData, unoZero);\\n\\n        if (allowance == 0 && asset.allowance(boringVault, address(defaultCollateral)) > 0) {\\n            // Zero out approval.\\n            unoTarget[0] = address(asset);\\n            leaf = _buildLeaf(unoDecoderAndSanitizer[0], unoTarget[0], APPROVE_SELECTOR, address(defaultCollateral));\\n            unoProof[0] = _generateProof(leaf, merkleTree);\\n            unoTargetData[0] = abi.encodeWithSelector(APPROVE_SELECTOR, address(defaultCollateral), 0);\\n            manager.manageVaultWithMerkleVerification(\\n                unoProof, unoDecoderAndSanitizer, unoTarget, unoTargetData, unoZero\\n            );\\n        }\\n\\n        emit Assembled(address(defaultCollateral), amount);\\n\\n        return amount;\\n    }\\n\\n    /**\\n     * @notice Calculate the maximum amount that can be deposited into a default collateral.\\n     * @param defaultCollateral The default collateral to deposit into.\\n     * @param asset The asset to deposit.\\n     * @param amount The amount to deposit.\\n     * @param minimumDeposit The minimum amount that can be deposited.\\n     * @return max The maximum amount that can be deposited.\\n     */\\n    function _maxDeposit(DefaultCollateral defaultCollateral, ERC20 asset, uint256 amount, uint256 minimumDeposit)\\n        internal\\n        view\\n        returns (uint256 max)\\n    {\\n        uint256 limitDelta = defaultCollateral.limit() - defaultCollateral.totalSupply();\\n        uint256 assetBalance = asset.balanceOf(boringVault);\\n\\n        if (amount != type(uint256).max) {\\n            // Bot wants to deposit a specific amount.\\n            // Revert early if the amount is too high.\\n            if (amount > limitDelta) {\\n                revert SymbioticUManager__DepositAmountExceedsLimit(amount, limitDelta);\\n            }\\n            if (amount > assetBalance) {\\n                revert SymbioticUManager__DepositAmountExceedsBalance(amount, assetBalance);\\n            }\\n            max = amount;\\n        } else {\\n            // Bot wants to deposit as much as possible.\\n\\n            max = limitDelta < assetBalance ? limitDelta : assetBalance;\\n        }\\n\\n        // Make sure we meet the minimum deposit requirement.\\n        if (max < minimumDeposit) {\\n            revert SymbioticUManager__DepositAmountTooSmall(max, minimumDeposit);\\n        }\\n    }\\n\\n    /**\\n     * @notice Efficiently hash two bytes32 values.\\n     */\\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, a)\\n            mstore(0x20, b)\\n            value := keccak256(0x00, 0x40)\\n        }\\n    }\\n\\n    /**\\n     * @notice Efficiently hash a pair of bytes32 values in numerical order.\\n     */\\n    function _hashPair(bytes32 a, bytes32 b) private pure returns (bytes32) {\\n        return a < b ? _efficientHash(a, b) : _efficientHash(b, a);\\n    }\\n\\n    /**\\n     * @notice Generate a proof for a leaf in a merkle tree.\\n     * @param leaf The leaf to generate a proof for.\\n     * @param tree The merkle tree to generate the proof from.\\n     * @return proof The proof for the leaf.\\n     */\\n    function _generateProof(bytes32 leaf, bytes32[][] memory tree) internal pure returns (bytes32[] memory proof) {\\n        // The length of each proof is the height of the tree - 1.\\n        uint256 treeLength = tree.length;\\n        proof = new bytes32[](treeLength - 1);\\n\\n        // Build the proof\\n        for (uint256 i; i < treeLength - 1; ++i) {\\n            // For each layer we need to find the leaf.\\n            for (uint256 j; j < tree[i].length; ++j) {\\n                if (leaf == tree[i][j]) {\\n                    // We have found the leaf, so now figure out if the proof needs the next leaf or the previous one.\\n                    proof[i] = j % 2 == 0 ? tree[i][j + 1] : tree[i][j - 1];\\n                    leaf = _hashPair(leaf, proof[i]);\\n                    break;\\n                }\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Build a leaf for the merkle tree.\\n     * @param decoderAndSanitizer The decoder and sanitizer to use to sanitize the call.\\n     * @param target The target to call.\\n     * @param selector The selector to call.\\n     * @param addressArgument The address argument of the call.\\n     * @return leaf The leaf for the merkle tree.\\n     */\\n    function _buildLeaf(address decoderAndSanitizer, address target, bytes4 selector, address addressArgument)\\n        internal\\n        pure\\n        returns (bytes32 leaf)\\n    {\\n        leaf = keccak256(abi.encodePacked(decoderAndSanitizer, target, false, selector, addressArgument));\\n    }\\n\\n    /**\\n     * @notice View the merkle tree.\\n     * @return merkleTree The merkle tree.\\n     */\\n    function viewMerkleTree() public view returns (bytes32[][] memory merkleTree) {\\n        bytes memory data = SSTORE2.read(pointer);\\n\\n        merkleTree = abi.decode(data, (bytes32[][]));\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/solmate/src/utils/FixedPointMathLib.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\n/// @notice Arithmetic library with operations for fixed-point numbers.\\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/utils/FixedPointMathLib.sol)\\n/// @author Inspired by USM (https://github.com/usmfum/USM/blob/master/contracts/WadMath.sol)\\nlibrary FixedPointMathLib {\\n    /*//////////////////////////////////////////////////////////////\\n                    SIMPLIFIED FIXED POINT OPERATIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    uint256 internal constant MAX_UINT256 = 2**256 - 1;\\n\\n    uint256 internal constant WAD = 1e18; // The scalar of ETH and most ERC20s.\\n\\n    function mulWadDown(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return mulDivDown(x, y, WAD); // Equivalent to (x * y) / WAD rounded down.\\n    }\\n\\n    function mulWadUp(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return mulDivUp(x, y, WAD); // Equivalent to (x * y) / WAD rounded up.\\n    }\\n\\n    function divWadDown(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return mulDivDown(x, WAD, y); // Equivalent to (x * WAD) / y rounded down.\\n    }\\n\\n    function divWadUp(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return mulDivUp(x, WAD, y); // Equivalent to (x * WAD) / y rounded up.\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                    LOW LEVEL FIXED POINT OPERATIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function mulDivDown(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 z) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Equivalent to require(denominator != 0 && (y == 0 || x <= type(uint256).max / y))\\n            if iszero(mul(denominator, iszero(mul(y, gt(x, div(MAX_UINT256, y)))))) {\\n                revert(0, 0)\\n            }\\n\\n            // Divide x * y by the denominator.\\n            z := div(mul(x, y), denominator)\\n        }\\n    }\\n\\n    function mulDivUp(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 z) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Equivalent to require(denominator != 0 && (y == 0 || x <= type(uint256).max / y))\\n            if iszero(mul(denominator, iszero(mul(y, gt(x, div(MAX_UINT256, y)))))) {\\n                revert(0, 0)\\n            }\\n\\n            // If x * y modulo the denominator is strictly greater than 0,\\n            // 1 is added to round up the division of x * y by the denominator.\\n            z := add(gt(mod(mul(x, y), denominator), 0), div(mul(x, y), denominator))\\n        }\\n    }\\n\\n    function rpow(\\n        uint256 x,\\n        uint256 n,\\n        uint256 scalar\\n    ) internal pure returns (uint256 z) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            switch x\\n            case 0 {\\n                switch n\\n                case 0 {\\n                    // 0 ** 0 = 1\\n                    z := scalar\\n                }\\n                default {\\n                    // 0 ** n = 0\\n                    z := 0\\n                }\\n            }\\n            default {\\n                switch mod(n, 2)\\n                case 0 {\\n                    // If n is even, store scalar in z for now.\\n                    z := scalar\\n                }\\n                default {\\n                    // If n is odd, store x in z for now.\\n                    z := x\\n                }\\n\\n                // Shifting right by 1 is like dividing by 2.\\n                let half := shr(1, scalar)\\n\\n                for {\\n                    // Shift n right by 1 before looping to halve it.\\n                    n := shr(1, n)\\n                } n {\\n                    // Shift n right by 1 each iteration to halve it.\\n                    n := shr(1, n)\\n                } {\\n                    // Revert immediately if x ** 2 would overflow.\\n                    // Equivalent to iszero(eq(div(xx, x), x)) here.\\n                    if shr(128, x) {\\n                        revert(0, 0)\\n                    }\\n\\n                    // Store x squared.\\n                    let xx := mul(x, x)\\n\\n                    // Round to the nearest number.\\n                    let xxRound := add(xx, half)\\n\\n                    // Revert if xx + half overflowed.\\n                    if lt(xxRound, xx) {\\n                        revert(0, 0)\\n                    }\\n\\n                    // Set x to scaled xxRound.\\n                    x := div(xxRound, scalar)\\n\\n                    // If n is even:\\n                    if mod(n, 2) {\\n                        // Compute z * x.\\n                        let zx := mul(z, x)\\n\\n                        // If z * x overflowed:\\n                        if iszero(eq(div(zx, x), z)) {\\n                            // Revert if x is non-zero.\\n                            if iszero(iszero(x)) {\\n                                revert(0, 0)\\n                            }\\n                        }\\n\\n                        // Round to the nearest number.\\n                        let zxRound := add(zx, half)\\n\\n                        // Revert if zx + half overflowed.\\n                        if lt(zxRound, zx) {\\n                            revert(0, 0)\\n                        }\\n\\n                        // Return properly scaled zxRound.\\n                        z := div(zxRound, scalar)\\n                    }\\n                }\\n            }\\n        }\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                        GENERAL NUMBER UTILITIES\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function sqrt(uint256 x) internal pure returns (uint256 z) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let y := x // We start y at x, which will help us make our initial estimate.\\n\\n            z := 181 // The \\\"correct\\\" value is 1, but this saves a multiplication later.\\n\\n            // This segment is to get a reasonable initial estimate for the Babylonian method. With a bad\\n            // start, the correct # of bits increases ~linearly each iteration instead of ~quadratically.\\n\\n            // We check y >= 2^(k + 8) but shift right by k bits\\n            // each branch to ensure that if x >= 256, then y >= 256.\\n            if iszero(lt(y, 0x10000000000000000000000000000000000)) {\\n                y := shr(128, y)\\n                z := shl(64, z)\\n            }\\n            if iszero(lt(y, 0x1000000000000000000)) {\\n                y := shr(64, y)\\n                z := shl(32, z)\\n            }\\n            if iszero(lt(y, 0x10000000000)) {\\n                y := shr(32, y)\\n                z := shl(16, z)\\n            }\\n            if iszero(lt(y, 0x1000000)) {\\n                y := shr(16, y)\\n                z := shl(8, z)\\n            }\\n\\n            // Goal was to get z*z*y within a small factor of x. More iterations could\\n            // get y in a tighter range. Currently, we will have y in [256, 256*2^16).\\n            // We ensured y >= 256 so that the relative difference between y and y+1 is small.\\n            // That's not possible if x < 256 but we can just verify those cases exhaustively.\\n\\n            // Now, z*z*y <= x < z*z*(y+1), and y <= 2^(16+8), and either y >= 256, or x < 256.\\n            // Correctness can be checked exhaustively for x < 256, so we assume y >= 256.\\n            // Then z*sqrt(y) is within sqrt(257)/sqrt(256) of sqrt(x), or about 20bps.\\n\\n            // For s in the range [1/256, 256], the estimate f(s) = (181/1024) * (s+1) is in the range\\n            // (1/2.84 * sqrt(s), 2.84 * sqrt(s)), with largest error when s = 1 and when s = 256 or 1/256.\\n\\n            // Since y is in [256, 256*2^16), let a = y/65536, so that a is in [1/256, 256). Then we can estimate\\n            // sqrt(y) using sqrt(65536) * 181/1024 * (a + 1) = 181/4 * (y + 65536)/65536 = 181 * (y + 65536)/2^18.\\n\\n            // There is no overflow risk here since y < 2^136 after the first branch above.\\n            z := shr(18, mul(z, add(y, 65536))) // A mul() is saved from starting z at 181.\\n\\n            // Given the worst case multiplicative error of 2.84 above, 7 iterations should be enough.\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n\\n            // If x+1 is a perfect square, the Babylonian method cycles between\\n            // floor(sqrt(x)) and ceil(sqrt(x)). This statement ensures we return floor.\\n            // See: https://en.wikipedia.org/wiki/Integer_square_root#Using_only_integer_division\\n            // Since the ceil is rare, we save gas on the assignment and repeat division in the rare case.\\n            // If you don't care whether the floor or ceil square root is returned, you can remove this statement.\\n            z := sub(z, lt(div(x, z), z))\\n        }\\n    }\\n\\n    function unsafeMod(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Mod x by y. Note this will return\\n            // 0 instead of reverting if y is zero.\\n            z := mod(x, y)\\n        }\\n    }\\n\\n    function unsafeDiv(uint256 x, uint256 y) internal pure returns (uint256 r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Divide x by y. Note this will return\\n            // 0 instead of reverting if y is zero.\\n            r := div(x, y)\\n        }\\n    }\\n\\n    function unsafeDivUp(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Add 1 to x * y if x % y > 0. Note this will\\n            // return 0 instead of reverting if y is zero.\\n            z := add(gt(mod(x, y), 0), div(x, y))\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"src/base/Roles/ManagerWithMerkleVerification.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.21;\\n\\nimport {FixedPointMathLib} from \\\"@solmate/utils/FixedPointMathLib.sol\\\";\\nimport {BoringVault} from \\\"src/base/BoringVault.sol\\\";\\nimport {MerkleProofLib} from \\\"@solmate/utils/MerkleProofLib.sol\\\";\\nimport {ERC20} from \\\"@solmate/tokens/ERC20.sol\\\";\\nimport {SafeTransferLib} from \\\"@solmate/utils/SafeTransferLib.sol\\\";\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport {BalancerVault} from \\\"src/interfaces/BalancerVault.sol\\\";\\nimport {Auth, Authority} from \\\"@solmate/auth/Auth.sol\\\";\\n\\ncontract ManagerWithMerkleVerification is Auth {\\n    using FixedPointMathLib for uint256;\\n    using SafeTransferLib for ERC20;\\n    using Address for address;\\n\\n    // ========================================= STATE =========================================\\n\\n    /**\\n     * @notice A merkle tree root that restricts what data can be passed to the BoringVault.\\n     * @dev Maps a strategist address to their specific merkle root.\\n     * @dev Each leaf is composed of the keccak256 hash of abi.encodePacked {decodersAndSanitizer, target, valueIsNonZero, selector, argumentAddress_0, ...., argumentAddress_N}\\n     *      Where:\\n     *             - decodersAndSanitizer is the addres to call to extract packed address arguments from the calldata\\n     *             - target is the address to make the call to\\n     *             - valueIsNonZero is a bool indicating whether or not the value is non-zero\\n     *             - selector is the function selector on target\\n     *             - argumentAddress is each allowed address argument in that call\\n     */\\n    mapping(address => bytes32) public manageRoot;\\n\\n    /**\\n     * @notice Bool indicating whether or not this contract is actively performing a flash loan.\\n     * @dev Used to block flash loans that are initiated outside a manage call.\\n     */\\n    bool internal performingFlashLoan;\\n\\n    /**\\n     * @notice keccak256 hash of flash loan data.\\n     */\\n    bytes32 internal flashLoanIntentHash = bytes32(0);\\n\\n    /**\\n     * @notice Used to pause calls to `manageVaultWithMerkleVerification`.\\n     */\\n    bool public isPaused;\\n\\n    //============================== ERRORS ===============================\\n\\n    error ManagerWithMerkleVerification__InvalidManageProofLength();\\n    error ManagerWithMerkleVerification__InvalidTargetDataLength();\\n    error ManagerWithMerkleVerification__InvalidValuesLength();\\n    error ManagerWithMerkleVerification__InvalidDecodersAndSanitizersLength();\\n    error ManagerWithMerkleVerification__FlashLoanNotExecuted();\\n    error ManagerWithMerkleVerification__FlashLoanNotInProgress();\\n    error ManagerWithMerkleVerification__BadFlashLoanIntentHash();\\n    error ManagerWithMerkleVerification__FailedToVerifyManageProof(address target, bytes targetData, uint256 value);\\n    error ManagerWithMerkleVerification__Paused();\\n    error ManagerWithMerkleVerification__OnlyCallableByBoringVault();\\n    error ManagerWithMerkleVerification__OnlyCallableByBalancerVault();\\n    error ManagerWithMerkleVerification__TotalSupplyMustRemainConstantDuringManagement();\\n\\n    //============================== EVENTS ===============================\\n\\n    event ManageRootUpdated(address indexed strategist, bytes32 oldRoot, bytes32 newRoot);\\n    event BoringVaultManaged(uint256 callsMade);\\n    event Paused();\\n    event Unpaused();\\n\\n    //============================== IMMUTABLES ===============================\\n\\n    /**\\n     * @notice The BoringVault this contract can manage.\\n     */\\n    BoringVault public immutable vault;\\n\\n    /**\\n     * @notice The balancer vault this contract can use for flash loans.\\n     */\\n    BalancerVault public immutable balancerVault;\\n\\n    constructor(address _owner, address _vault, address _balancerVault) Auth(_owner, Authority(address(0))) {\\n        vault = BoringVault(payable(_vault));\\n        balancerVault = BalancerVault(_balancerVault);\\n    }\\n\\n    // ========================================= ADMIN FUNCTIONS =========================================\\n\\n    /**\\n     * @notice Sets the manageRoot.\\n     * @dev Callable by OWNER_ROLE.\\n     */\\n    function setManageRoot(address strategist, bytes32 _manageRoot) external requiresAuth {\\n        bytes32 oldRoot = manageRoot[strategist];\\n        manageRoot[strategist] = _manageRoot;\\n        emit ManageRootUpdated(strategist, oldRoot, _manageRoot);\\n    }\\n\\n    /**\\n     * @notice Pause this contract, which prevents future calls to `manageVaultWithMerkleVerification`.\\n     * @dev Callable by MULTISIG_ROLE.\\n     */\\n    function pause() external requiresAuth {\\n        isPaused = true;\\n        emit Paused();\\n    }\\n\\n    /**\\n     * @notice Unpause this contract, which allows future calls to `manageVaultWithMerkleVerification`.\\n     * @dev Callable by MULTISIG_ROLE.\\n     */\\n    function unpause() external requiresAuth {\\n        isPaused = false;\\n        emit Unpaused();\\n    }\\n\\n    // ========================================= STRATEGIST FUNCTIONS =========================================\\n\\n    /**\\n     * @notice Allows strategist to manage the BoringVault.\\n     * @dev The strategist must provide a merkle proof for every call that verifiees they are allowed to make that call.\\n     * @dev Callable by MANAGER_INTERNAL_ROLE.\\n     * @dev Callable by STRATEGIST_ROLE.\\n     * @dev Callable by MICRO_MANAGER_ROLE.\\n     */\\n    function manageVaultWithMerkleVerification(\\n        bytes32[][] calldata manageProofs,\\n        address[] calldata decodersAndSanitizers,\\n        address[] calldata targets,\\n        bytes[] calldata targetData,\\n        uint256[] calldata values\\n    ) external requiresAuth {\\n        if (isPaused) revert ManagerWithMerkleVerification__Paused();\\n        uint256 targetsLength = targets.length;\\n        if (targetsLength != manageProofs.length) revert ManagerWithMerkleVerification__InvalidManageProofLength();\\n        if (targetsLength != targetData.length) revert ManagerWithMerkleVerification__InvalidTargetDataLength();\\n        if (targetsLength != values.length) revert ManagerWithMerkleVerification__InvalidValuesLength();\\n        if (targetsLength != decodersAndSanitizers.length) {\\n            revert ManagerWithMerkleVerification__InvalidDecodersAndSanitizersLength();\\n        }\\n\\n        bytes32 strategistManageRoot = manageRoot[msg.sender];\\n        uint256 totalSupply = vault.totalSupply();\\n\\n        for (uint256 i; i < targetsLength; ++i) {\\n            _verifyCallData(\\n                strategistManageRoot, manageProofs[i], decodersAndSanitizers[i], targets[i], values[i], targetData[i]\\n            );\\n            vault.manage(targets[i], targetData[i], values[i]);\\n        }\\n        if (totalSupply != vault.totalSupply()) {\\n            revert ManagerWithMerkleVerification__TotalSupplyMustRemainConstantDuringManagement();\\n        }\\n        emit BoringVaultManaged(targetsLength);\\n    }\\n\\n    // ========================================= FLASH LOAN FUNCTIONS =========================================\\n\\n    /**\\n     * @notice In order to perform a flash loan,\\n     *         1) Merkle root must contain the leaf(address(this), this.flashLoan.selector, ARGUMENT_ADDRESSES ...)\\n     *         2) Strategist must initiate the flash loan using `manageVaultWithMerkleVerification`\\n     *         3) balancerVault MUST callback to this contract with the same userData\\n     */\\n    function flashLoan(\\n        address recipient,\\n        address[] calldata tokens,\\n        uint256[] calldata amounts,\\n        bytes calldata userData\\n    ) external {\\n        if (msg.sender != address(vault)) revert ManagerWithMerkleVerification__OnlyCallableByBoringVault();\\n\\n        flashLoanIntentHash = keccak256(userData);\\n        performingFlashLoan = true;\\n        balancerVault.flashLoan(recipient, tokens, amounts, userData);\\n        performingFlashLoan = false;\\n        if (flashLoanIntentHash != bytes32(0)) revert ManagerWithMerkleVerification__FlashLoanNotExecuted();\\n    }\\n\\n    /**\\n     * @notice Add support for balancer flash loans.\\n     * @dev userData can optionally have salt encoded at the end of it, in order to change the intentHash,\\n     *      if a flash loan is exact userData is being repeated, and their is fear of 3rd parties\\n     *      front-running the rebalance.\\n     */\\n    function receiveFlashLoan(\\n        address[] calldata tokens,\\n        uint256[] calldata amounts,\\n        uint256[] calldata feeAmounts,\\n        bytes calldata userData\\n    ) external {\\n        if (msg.sender != address(balancerVault)) revert ManagerWithMerkleVerification__OnlyCallableByBalancerVault();\\n        if (!performingFlashLoan) revert ManagerWithMerkleVerification__FlashLoanNotInProgress();\\n\\n        // Validate userData using intentHash.\\n        bytes32 intentHash = keccak256(userData);\\n        if (intentHash != flashLoanIntentHash) revert ManagerWithMerkleVerification__BadFlashLoanIntentHash();\\n        // reset intent hash to prevent replays.\\n        flashLoanIntentHash = bytes32(0);\\n\\n        // Transfer tokens to vault.\\n        for (uint256 i = 0; i < amounts.length; ++i) {\\n            ERC20(tokens[i]).safeTransfer(address(vault), amounts[i]);\\n        }\\n        {\\n            (\\n                bytes32[][] memory manageProofs,\\n                address[] memory decodersAndSanitizers,\\n                address[] memory targets,\\n                bytes[] memory data,\\n                uint256[] memory values\\n            ) = abi.decode(userData, (bytes32[][], address[], address[], bytes[], uint256[]));\\n\\n            ManagerWithMerkleVerification(address(this)).manageVaultWithMerkleVerification(\\n                manageProofs, decodersAndSanitizers, targets, data, values\\n            );\\n        }\\n\\n        // Transfer tokens back to balancer.\\n        // Have vault transfer amount + fees back to balancer\\n        bytes[] memory transferData = new bytes[](amounts.length);\\n        for (uint256 i; i < amounts.length; ++i) {\\n            transferData[i] =\\n                abi.encodeWithSelector(ERC20.transfer.selector, address(balancerVault), (amounts[i] + feeAmounts[i]));\\n        }\\n        // Values is always zero, just pass in an array of zeroes.\\n        vault.manage(tokens, transferData, new uint256[](amounts.length));\\n    }\\n\\n    // ========================================= INTERNAL HELPER FUNCTIONS =========================================\\n\\n    /**\\n     * @notice Helper function to decode, sanitize, and verify call data.\\n     */\\n    function _verifyCallData(\\n        bytes32 currentManageRoot,\\n        bytes32[] calldata manageProof,\\n        address decoderAndSanitizer,\\n        address target,\\n        uint256 value,\\n        bytes calldata targetData\\n    ) internal view {\\n        // Use address decoder to get addresses in call data.\\n        bytes memory packedArgumentAddresses = abi.decode(decoderAndSanitizer.functionStaticCall(targetData), (bytes));\\n\\n        if (\\n            !_verifyManageProof(\\n                currentManageRoot,\\n                manageProof,\\n                target,\\n                decoderAndSanitizer,\\n                value,\\n                bytes4(targetData),\\n                packedArgumentAddresses\\n            )\\n        ) {\\n            revert ManagerWithMerkleVerification__FailedToVerifyManageProof(target, targetData, value);\\n        }\\n    }\\n\\n    /**\\n     * @notice Helper function to verify a manageProof is valid.\\n     */\\n    function _verifyManageProof(\\n        bytes32 root,\\n        bytes32[] calldata proof,\\n        address target,\\n        address decoderAndSanitizer,\\n        uint256 value,\\n        bytes4 selector,\\n        bytes memory packedArgumentAddresses\\n    ) internal pure returns (bool) {\\n        bool valueNonZero = value > 0;\\n        bytes32 leaf =\\n            keccak256(abi.encodePacked(decoderAndSanitizer, target, valueNonZero, selector, packedArgumentAddresses));\\n        return MerkleProofLib.verify(proof, root, leaf);\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/solmate/src/tokens/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\n/// @notice Modern and gas efficient ERC20 + EIP-2612 implementation.\\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/tokens/ERC20.sol)\\n/// @author Modified from Uniswap (https://github.com/Uniswap/uniswap-v2-core/blob/master/contracts/UniswapV2ERC20.sol)\\n/// @dev Do not manually set balances without updating totalSupply, as the sum of all user balances must not exceed it.\\nabstract contract ERC20 {\\n    /*//////////////////////////////////////////////////////////////\\n                                 EVENTS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    event Transfer(address indexed from, address indexed to, uint256 amount);\\n\\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            METADATA STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    string public name;\\n\\n    string public symbol;\\n\\n    uint8 public immutable decimals;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                              ERC20 STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    uint256 public totalSupply;\\n\\n    mapping(address => uint256) public balanceOf;\\n\\n    mapping(address => mapping(address => uint256)) public allowance;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            EIP-2612 STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    uint256 internal immutable INITIAL_CHAIN_ID;\\n\\n    bytes32 internal immutable INITIAL_DOMAIN_SEPARATOR;\\n\\n    mapping(address => uint256) public nonces;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                               CONSTRUCTOR\\n    //////////////////////////////////////////////////////////////*/\\n\\n    constructor(\\n        string memory _name,\\n        string memory _symbol,\\n        uint8 _decimals\\n    ) {\\n        name = _name;\\n        symbol = _symbol;\\n        decimals = _decimals;\\n\\n        INITIAL_CHAIN_ID = block.chainid;\\n        INITIAL_DOMAIN_SEPARATOR = computeDomainSeparator();\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                               ERC20 LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function approve(address spender, uint256 amount) public virtual returns (bool) {\\n        allowance[msg.sender][spender] = amount;\\n\\n        emit Approval(msg.sender, spender, amount);\\n\\n        return true;\\n    }\\n\\n    function transfer(address to, uint256 amount) public virtual returns (bool) {\\n        balanceOf[msg.sender] -= amount;\\n\\n        // Cannot overflow because the sum of all user\\n        // balances can't exceed the max uint256 value.\\n        unchecked {\\n            balanceOf[to] += amount;\\n        }\\n\\n        emit Transfer(msg.sender, to, amount);\\n\\n        return true;\\n    }\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual returns (bool) {\\n        uint256 allowed = allowance[from][msg.sender]; // Saves gas for limited approvals.\\n\\n        if (allowed != type(uint256).max) allowance[from][msg.sender] = allowed - amount;\\n\\n        balanceOf[from] -= amount;\\n\\n        // Cannot overflow because the sum of all user\\n        // balances can't exceed the max uint256 value.\\n        unchecked {\\n            balanceOf[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        return true;\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                             EIP-2612 LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public virtual {\\n        require(deadline >= block.timestamp, \\\"PERMIT_DEADLINE_EXPIRED\\\");\\n\\n        // Unchecked because the only math done is incrementing\\n        // the owner's nonce which cannot realistically overflow.\\n        unchecked {\\n            address recoveredAddress = ecrecover(\\n                keccak256(\\n                    abi.encodePacked(\\n                        \\\"\\\\x19\\\\x01\\\",\\n                        DOMAIN_SEPARATOR(),\\n                        keccak256(\\n                            abi.encode(\\n                                keccak256(\\n                                    \\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\"\\n                                ),\\n                                owner,\\n                                spender,\\n                                value,\\n                                nonces[owner]++,\\n                                deadline\\n                            )\\n                        )\\n                    )\\n                ),\\n                v,\\n                r,\\n                s\\n            );\\n\\n            require(recoveredAddress != address(0) && recoveredAddress == owner, \\\"INVALID_SIGNER\\\");\\n\\n            allowance[recoveredAddress][spender] = value;\\n        }\\n\\n        emit Approval(owner, spender, value);\\n    }\\n\\n    function DOMAIN_SEPARATOR() public view virtual returns (bytes32) {\\n        return block.chainid == INITIAL_CHAIN_ID ? INITIAL_DOMAIN_SEPARATOR : computeDomainSeparator();\\n    }\\n\\n    function computeDomainSeparator() internal view virtual returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encode(\\n                    keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"),\\n                    keccak256(bytes(name)),\\n                    keccak256(\\\"1\\\"),\\n                    block.chainid,\\n                    address(this)\\n                )\\n            );\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                        INTERNAL MINT/BURN LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function _mint(address to, uint256 amount) internal virtual {\\n        totalSupply += amount;\\n\\n        // Cannot overflow because the sum of all user\\n        // balances can't exceed the max uint256 value.\\n        unchecked {\\n            balanceOf[to] += amount;\\n        }\\n\\n        emit Transfer(address(0), to, amount);\\n    }\\n\\n    function _burn(address from, uint256 amount) internal virtual {\\n        balanceOf[from] -= amount;\\n\\n        // Cannot underflow because a user's balance\\n        // will never be larger than the total supply.\\n        unchecked {\\n            totalSupply -= amount;\\n        }\\n\\n        emit Transfer(from, address(0), amount);\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/solmate/src/auth/Auth.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\n/// @notice Provides a flexible and updatable auth pattern which is completely separate from application logic.\\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/auth/Auth.sol)\\n/// @author Modified from Dappsys (https://github.com/dapphub/ds-auth/blob/master/src/auth.sol)\\nabstract contract Auth {\\n    event OwnershipTransferred(address indexed user, address indexed newOwner);\\n\\n    event AuthorityUpdated(address indexed user, Authority indexed newAuthority);\\n\\n    address public owner;\\n\\n    Authority public authority;\\n\\n    constructor(address _owner, Authority _authority) {\\n        owner = _owner;\\n        authority = _authority;\\n\\n        emit OwnershipTransferred(msg.sender, _owner);\\n        emit AuthorityUpdated(msg.sender, _authority);\\n    }\\n\\n    modifier requiresAuth() virtual {\\n        require(isAuthorized(msg.sender, msg.sig), \\\"UNAUTHORIZED\\\");\\n\\n        _;\\n    }\\n\\n    function isAuthorized(address user, bytes4 functionSig) internal view virtual returns (bool) {\\n        Authority auth = authority; // Memoizing authority saves us a warm SLOAD, around 100 gas.\\n\\n        // Checking if the caller is the owner only after calling the authority saves gas in most cases, but be\\n        // aware that this makes protected functions uncallable even to the owner if the authority is out of order.\\n        return (address(auth) != address(0) && auth.canCall(user, address(this), functionSig)) || user == owner;\\n    }\\n\\n    function setAuthority(Authority newAuthority) public virtual {\\n        // We check if the caller is the owner first because we want to ensure they can\\n        // always swap out the authority even if it's reverting or using up a lot of gas.\\n        require(msg.sender == owner || authority.canCall(msg.sender, address(this), msg.sig));\\n\\n        authority = newAuthority;\\n\\n        emit AuthorityUpdated(msg.sender, newAuthority);\\n    }\\n\\n    function transferOwnership(address newOwner) public virtual requiresAuth {\\n        owner = newOwner;\\n\\n        emit OwnershipTransferred(msg.sender, newOwner);\\n    }\\n}\\n\\n/// @notice A generic interface for a contract which provides authorization data to an Auth instance.\\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/auth/Auth.sol)\\n/// @author Modified from Dappsys (https://github.com/dapphub/ds-auth/blob/master/src/auth.sol)\\ninterface Authority {\\n    function canCall(\\n        address user,\\n        address target,\\n        bytes4 functionSig\\n    ) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"lib/solmate/src/utils/SSTORE2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\n/// @notice Read and write to persistent storage at a fraction of the cost.\\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/utils/SSTORE2.sol)\\n/// @author Modified from 0xSequence (https://github.com/0xSequence/sstore2/blob/master/contracts/SSTORE2.sol)\\nlibrary SSTORE2 {\\n    uint256 internal constant DATA_OFFSET = 1; // We skip the first byte as it's a STOP opcode to ensure the contract can't be called.\\n\\n    /*//////////////////////////////////////////////////////////////\\n                               WRITE LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function write(bytes memory data) internal returns (address pointer) {\\n        // Prefix the bytecode with a STOP opcode to ensure it cannot be called.\\n        bytes memory runtimeCode = abi.encodePacked(hex\\\"00\\\", data);\\n\\n        bytes memory creationCode = abi.encodePacked(\\n            //---------------------------------------------------------------------------------------------------------------//\\n            // Opcode  | Opcode + Arguments  | Description  | Stack View                                                     //\\n            //---------------------------------------------------------------------------------------------------------------//\\n            // 0x60    |  0x600B             | PUSH1 11     | codeOffset                                                     //\\n            // 0x59    |  0x59               | MSIZE        | 0 codeOffset                                                   //\\n            // 0x81    |  0x81               | DUP2         | codeOffset 0 codeOffset                                        //\\n            // 0x38    |  0x38               | CODESIZE     | codeSize codeOffset 0 codeOffset                               //\\n            // 0x03    |  0x03               | SUB          | (codeSize - codeOffset) 0 codeOffset                           //\\n            // 0x80    |  0x80               | DUP          | (codeSize - codeOffset) (codeSize - codeOffset) 0 codeOffset   //\\n            // 0x92    |  0x92               | SWAP3        | codeOffset (codeSize - codeOffset) 0 (codeSize - codeOffset)   //\\n            // 0x59    |  0x59               | MSIZE        | 0 codeOffset (codeSize - codeOffset) 0 (codeSize - codeOffset) //\\n            // 0x39    |  0x39               | CODECOPY     | 0 (codeSize - codeOffset)                                      //\\n            // 0xf3    |  0xf3               | RETURN       |                                                                //\\n            //---------------------------------------------------------------------------------------------------------------//\\n            hex\\\"60_0B_59_81_38_03_80_92_59_39_F3\\\", // Returns all code in the contract except for the first 11 (0B in hex) bytes.\\n            runtimeCode // The bytecode we want the contract to have after deployment. Capped at 1 byte less than the code size limit.\\n        );\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Deploy a new contract with the generated creation code.\\n            // We start 32 bytes into the code to avoid copying the byte length.\\n            pointer := create(0, add(creationCode, 32), mload(creationCode))\\n        }\\n\\n        require(pointer != address(0), \\\"DEPLOYMENT_FAILED\\\");\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                               READ LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function read(address pointer) internal view returns (bytes memory) {\\n        return readBytecode(pointer, DATA_OFFSET, pointer.code.length - DATA_OFFSET);\\n    }\\n\\n    function read(address pointer, uint256 start) internal view returns (bytes memory) {\\n        start += DATA_OFFSET;\\n\\n        return readBytecode(pointer, start, pointer.code.length - start);\\n    }\\n\\n    function read(\\n        address pointer,\\n        uint256 start,\\n        uint256 end\\n    ) internal view returns (bytes memory) {\\n        start += DATA_OFFSET;\\n        end += DATA_OFFSET;\\n\\n        require(pointer.code.length >= end, \\\"OUT_OF_BOUNDS\\\");\\n\\n        return readBytecode(pointer, start, end - start);\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                          INTERNAL HELPER LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function readBytecode(\\n        address pointer,\\n        uint256 start,\\n        uint256 size\\n    ) private view returns (bytes memory data) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Get a pointer to some free memory.\\n            data := mload(0x40)\\n\\n            // Update the free memory pointer to prevent overriding our data.\\n            // We use and(x, not(31)) as a cheaper equivalent to sub(x, mod(x, 32)).\\n            // Adding 31 to size and running the result through the logic above ensures\\n            // the memory pointer remains word-aligned, following the Solidity convention.\\n            mstore(0x40, add(data, and(add(add(size, 32), 31), not(31))))\\n\\n            // Store the size of the data in the first 32 byte chunk of free memory.\\n            mstore(data, size)\\n\\n            // Copy the code into memory right after the 32 bytes we used to store the size.\\n            extcodecopy(pointer, add(data, 32), start, size)\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"src/base/DecodersAndSanitizers/Protocols/SymbioticDecoderAndSanitizer.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.21;\\n\\nimport {BaseDecoderAndSanitizer} from \\\"src/base/DecodersAndSanitizers/BaseDecoderAndSanitizer.sol\\\";\\n\\nabstract contract SymbioticDecoderAndSanitizer is BaseDecoderAndSanitizer {\\n    //============================== SYMBIOTIC ===============================\\n\\n    function deposit(address recipient, uint256 /*amount*/ )\\n        external\\n        pure\\n        virtual\\n        returns (bytes memory addressesFound)\\n    {\\n        addressesFound = abi.encodePacked(recipient);\\n    }\\n\\n    function withdraw(address recipient, uint256 /*amount*/ )\\n        external\\n        pure\\n        virtual\\n        returns (bytes memory addressesFound)\\n    {\\n        addressesFound = abi.encodePacked(recipient);\\n    }\\n\\n    function issueDebt(address recipient, uint256 /*amount*/ )\\n        external\\n        pure\\n        virtual\\n        returns (bytes memory addressesFound)\\n    {\\n        addressesFound = abi.encodePacked(recipient);\\n    }\\n}\\n\"\r\n    },\r\n    \"src/interfaces/DefaultCollateral.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.21;\\n\\nimport {ERC20} from \\\"@solmate/tokens/ERC20.sol\\\";\\n\\ninterface DefaultCollateral {\\n    function balanceOf(address account) external view returns (uint256);\\n    function withdraw(address recipient, uint256 amount) external;\\n    function deposit(address recipient, uint256 amount) external;\\n    function asset() external view returns (ERC20);\\n    function limit() external view returns (uint256);\\n    function totalSupply() external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"src/base/BoringVault.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.21;\\n\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport {ERC721Holder} from \\\"@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol\\\";\\nimport {ERC1155Holder} from \\\"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol\\\";\\nimport {FixedPointMathLib} from \\\"@solmate/utils/FixedPointMathLib.sol\\\";\\nimport {SafeTransferLib} from \\\"@solmate/utils/SafeTransferLib.sol\\\";\\nimport {ERC20} from \\\"@solmate/tokens/ERC20.sol\\\";\\nimport {BeforeTransferHook} from \\\"src/interfaces/BeforeTransferHook.sol\\\";\\nimport {Auth, Authority} from \\\"@solmate/auth/Auth.sol\\\";\\n\\ncontract BoringVault is ERC20, Auth, ERC721Holder, ERC1155Holder {\\n    using Address for address;\\n    using SafeTransferLib for ERC20;\\n    using FixedPointMathLib for uint256;\\n\\n    // ========================================= STATE =========================================\\n\\n    /**\\n     * @notice Contract responsbile for implementing `beforeTransfer`.\\n     */\\n    BeforeTransferHook public hook;\\n\\n    //============================== EVENTS ===============================\\n\\n    event Enter(address indexed from, address indexed asset, uint256 amount, address indexed to, uint256 shares);\\n    event Exit(address indexed to, address indexed asset, uint256 amount, address indexed from, uint256 shares);\\n\\n    //============================== CONSTRUCTOR ===============================\\n\\n    constructor(address _owner, string memory _name, string memory _symbol, uint8 _decimals)\\n        ERC20(_name, _symbol, _decimals)\\n        Auth(_owner, Authority(address(0)))\\n    {}\\n\\n    //============================== MANAGE ===============================\\n\\n    /**\\n     * @notice Allows manager to make an arbitrary function call from this contract.\\n     * @dev Callable by MANAGER_ROLE.\\n     */\\n    function manage(address target, bytes calldata data, uint256 value)\\n        external\\n        requiresAuth\\n        returns (bytes memory result)\\n    {\\n        result = target.functionCallWithValue(data, value);\\n    }\\n\\n    /**\\n     * @notice Allows manager to make arbitrary function calls from this contract.\\n     * @dev Callable by MANAGER_ROLE.\\n     */\\n    function manage(address[] calldata targets, bytes[] calldata data, uint256[] calldata values)\\n        external\\n        requiresAuth\\n        returns (bytes[] memory results)\\n    {\\n        uint256 targetsLength = targets.length;\\n        results = new bytes[](targetsLength);\\n        for (uint256 i; i < targetsLength; ++i) {\\n            results[i] = targets[i].functionCallWithValue(data[i], values[i]);\\n        }\\n    }\\n\\n    //============================== ENTER ===============================\\n\\n    /**\\n     * @notice Allows minter to mint shares, in exchange for assets.\\n     * @dev If assetAmount is zero, no assets are transferred in.\\n     * @dev Callable by MINTER_ROLE.\\n     */\\n    function enter(address from, ERC20 asset, uint256 assetAmount, address to, uint256 shareAmount)\\n        external\\n        requiresAuth\\n    {\\n        // Transfer assets in\\n        if (assetAmount > 0) asset.safeTransferFrom(from, address(this), assetAmount);\\n\\n        // Mint shares.\\n        _mint(to, shareAmount);\\n\\n        emit Enter(from, address(asset), assetAmount, to, shareAmount);\\n    }\\n\\n    //============================== EXIT ===============================\\n\\n    /**\\n     * @notice Allows burner to burn shares, in exchange for assets.\\n     * @dev If assetAmount is zero, no assets are transferred out.\\n     * @dev Callable by BURNER_ROLE.\\n     */\\n    function exit(address to, ERC20 asset, uint256 assetAmount, address from, uint256 shareAmount)\\n        external\\n        requiresAuth\\n    {\\n        // Burn shares.\\n        _burn(from, shareAmount);\\n\\n        // Transfer assets out.\\n        if (assetAmount > 0) asset.safeTransfer(to, assetAmount);\\n\\n        emit Exit(to, address(asset), assetAmount, from, shareAmount);\\n    }\\n\\n    //============================== BEFORE TRANSFER HOOK ===============================\\n    /**\\n     * @notice Sets the share locker.\\n     * @notice If set to zero address, the share locker logic is disabled.\\n     * @dev Callable by OWNER_ROLE.\\n     */\\n    function setBeforeTransferHook(address _hook) external requiresAuth {\\n        hook = BeforeTransferHook(_hook);\\n    }\\n\\n    /**\\n     * @notice Call `beforeTransferHook` passing in `from` `to`, and `msg.sender`.\\n     */\\n    function _callBeforeTransfer(address from, address to) internal view {\\n        if (address(hook) != address(0)) hook.beforeTransfer(from, to, msg.sender);\\n    }\\n\\n    function transfer(address to, uint256 amount) public override returns (bool) {\\n        _callBeforeTransfer(msg.sender, to);\\n        return super.transfer(to, amount);\\n    }\\n\\n    function transferFrom(address from, address to, uint256 amount) public override returns (bool) {\\n        _callBeforeTransfer(from, to);\\n        return super.transferFrom(from, to, amount);\\n    }\\n\\n    //============================== RECEIVE ===============================\\n\\n    receive() external payable {}\\n}\\n\"\r\n    },\r\n    \"lib/solmate/src/utils/MerkleProofLib.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\n/// @notice Gas optimized merkle proof verification library.\\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/utils/MerkleProofLib.sol)\\n/// @author Modified from Solady (https://github.com/Vectorized/solady/blob/main/src/utils/MerkleProofLib.sol)\\nlibrary MerkleProofLib {\\n    function verify(\\n        bytes32[] calldata proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool isValid) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            if proof.length {\\n                // Left shifting by 5 is like multiplying by 32.\\n                let end := add(proof.offset, shl(5, proof.length))\\n\\n                // Initialize offset to the offset of the proof in calldata.\\n                let offset := proof.offset\\n\\n                // Iterate over proof elements to compute root hash.\\n                // prettier-ignore\\n                for {} 1 {} {\\n                    // Slot where the leaf should be put in scratch space. If\\n                    // leaf > calldataload(offset): slot 32, otherwise: slot 0.\\n                    let leafSlot := shl(5, gt(leaf, calldataload(offset)))\\n\\n                    // Store elements to hash contiguously in scratch space.\\n                    // The xor puts calldataload(offset) in whichever slot leaf\\n                    // is not occupying, so 0 if leafSlot is 32, and 32 otherwise.\\n                    mstore(leafSlot, leaf)\\n                    mstore(xor(leafSlot, 32), calldataload(offset))\\n\\n                    // Reuse leaf to store the hash to reduce stack operations.\\n                    leaf := keccak256(0, 64) // Hash both slots of scratch space.\\n\\n                    offset := add(offset, 32) // Shift 1 word per cycle.\\n\\n                    // prettier-ignore\\n                    if iszero(lt(offset, end)) { break }\\n                }\\n            }\\n\\n            isValid := eq(leaf, root) // The proof is valid if the roots match.\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/solmate/src/utils/SafeTransferLib.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\nimport {ERC20} from \\\"../tokens/ERC20.sol\\\";\\n\\n/// @notice Safe ETH and ERC20 transfer library that gracefully handles missing return values.\\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/utils/SafeTransferLib.sol)\\n/// @dev Use with caution! Some functions in this library knowingly create dirty bits at the destination of the free memory pointer.\\n/// @dev Note that none of the functions in this library check that a token has code at all! That responsibility is delegated to the caller.\\nlibrary SafeTransferLib {\\n    /*//////////////////////////////////////////////////////////////\\n                             ETH OPERATIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function safeTransferETH(address to, uint256 amount) internal {\\n        bool success;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Transfer the ETH and store if it succeeded or not.\\n            success := call(gas(), to, amount, 0, 0, 0, 0)\\n        }\\n\\n        require(success, \\\"ETH_TRANSFER_FAILED\\\");\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            ERC20 OPERATIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function safeTransferFrom(\\n        ERC20 token,\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        bool success;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Get a pointer to some free memory.\\n            let freeMemoryPointer := mload(0x40)\\n\\n            // Write the abi-encoded calldata into memory, beginning with the function selector.\\n            mstore(freeMemoryPointer, 0x23b872dd00000000000000000000000000000000000000000000000000000000)\\n            mstore(add(freeMemoryPointer, 4), and(from, 0xffffffffffffffffffffffffffffffffffffffff)) // Append and mask the \\\"from\\\" argument.\\n            mstore(add(freeMemoryPointer, 36), and(to, 0xffffffffffffffffffffffffffffffffffffffff)) // Append and mask the \\\"to\\\" argument.\\n            mstore(add(freeMemoryPointer, 68), amount) // Append the \\\"amount\\\" argument. Masking not required as it's a full 32 byte type.\\n\\n            success := and(\\n                // Set success to whether the call reverted, if not we check it either\\n                // returned exactly 1 (can't just be non-zero data), or had no return data.\\n                or(and(eq(mload(0), 1), gt(returndatasize(), 31)), iszero(returndatasize())),\\n                // We use 100 because the length of our calldata totals up like so: 4 + 32 * 3.\\n                // We use 0 and 32 to copy up to 32 bytes of return data into the scratch space.\\n                // Counterintuitively, this call must be positioned second to the or() call in the\\n                // surrounding and() call or else returndatasize() will be zero during the computation.\\n                call(gas(), token, 0, freeMemoryPointer, 100, 0, 32)\\n            )\\n        }\\n\\n        require(success, \\\"TRANSFER_FROM_FAILED\\\");\\n    }\\n\\n    function safeTransfer(\\n        ERC20 token,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        bool success;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Get a pointer to some free memory.\\n            let freeMemoryPointer := mload(0x40)\\n\\n            // Write the abi-encoded calldata into memory, beginning with the function selector.\\n            mstore(freeMemoryPointer, 0xa9059cbb00000000000000000000000000000000000000000000000000000000)\\n            mstore(add(freeMemoryPointer, 4), and(to, 0xffffffffffffffffffffffffffffffffffffffff)) // Append and mask the \\\"to\\\" argument.\\n            mstore(add(freeMemoryPointer, 36), amount) // Append the \\\"amount\\\" argument. Masking not required as it's a full 32 byte type.\\n\\n            success := and(\\n                // Set success to whether the call reverted, if not we check it either\\n                // returned exactly 1 (can't just be non-zero data), or had no return data.\\n                or(and(eq(mload(0), 1), gt(returndatasize(), 31)), iszero(returndatasize())),\\n                // We use 68 because the length of our calldata totals up like so: 4 + 32 * 2.\\n                // We use 0 and 32 to copy up to 32 bytes of return data into the scratch space.\\n                // Counterintuitively, this call must be positioned second to the or() call in the\\n                // surrounding and() call or else returndatasize() will be zero during the computation.\\n                call(gas(), token, 0, freeMemoryPointer, 68, 0, 32)\\n            )\\n        }\\n\\n        require(success, \\\"TRANSFER_FAILED\\\");\\n    }\\n\\n    function safeApprove(\\n        ERC20 token,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        bool success;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Get a pointer to some free memory.\\n            let freeMemoryPointer := mload(0x40)\\n\\n            // Write the abi-encoded calldata into memory, beginning with the function selector.\\n            mstore(freeMemoryPointer, 0x095ea7b300000000000000000000000000000000000000000000000000000000)\\n            mstore(add(freeMemoryPointer, 4), and(to, 0xffffffffffffffffffffffffffffffffffffffff)) // Append and mask the \\\"to\\\" argument.\\n            mstore(add(freeMemoryPointer, 36), amount) // Append the \\\"amount\\\" argument. Masking not required as it's a full 32 byte type.\\n\\n            success := and(\\n                // Set success to whether the call reverted, if not we check it either\\n                // returned exactly 1 (can't just be non-zero data), or had no return data.\\n                or(and(eq(mload(0), 1), gt(returndatasize(), 31)), iszero(returndatasize())),\\n                // We use 68 because the length of our calldata totals up like so: 4 + 32 * 2.\\n                // We use 0 and 32 to copy up to 32 bytes of return data into the scratch space.\\n                // Counterintuitively, this call must be positioned second to the or() call in the\\n                // surrounding and() call or else returndatasize() will be zero during the computation.\\n                call(gas(), token, 0, freeMemoryPointer, 68, 0, 32)\\n            )\\n        }\\n\\n        require(success, \\\"APPROVE_FAILED\\\");\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error AddressInsufficientBalance(address account);\\n\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedInnerCall();\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            revert FailedInnerCall();\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {FailedInnerCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\\n     * unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {FailedInnerCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert FailedInnerCall();\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"src/interfaces/BalancerVault.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.21;\\n\\nimport {DecoderCustomTypes} from \\\"src/interfaces/DecoderCustomTypes.sol\\\";\\n\\ninterface BalancerVault {\\n    function flashLoan(address, address[] memory tokens, uint256[] memory amounts, bytes calldata userData) external;\\n    function swap(\\n        DecoderCustomTypes.SingleSwap memory singleSwap,\\n        DecoderCustomTypes.FundManagement memory funds,\\n        uint256 limit,\\n        uint256 deadline\\n    ) external returns (uint256 amountCalculated);\\n}\\n\"\r\n    },\r\n    \"src/base/DecodersAndSanitizers/BaseDecoderAndSanitizer.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.21;\\n\\nimport {DecoderCustomTypes} from \\\"src/interfaces/DecoderCustomTypes.sol\\\";\\n\\ncontract BaseDecoderAndSanitizer {\\n    //============================== IMMUTABLES ===============================\\n\\n    /**\\n     * @notice The BoringVault contract address.\\n     */\\n    address internal immutable boringVault;\\n\\n    constructor(address _boringVault) {\\n        boringVault = _boringVault;\\n    }\\n\\n    function approve(address spender, uint256) external pure returns (bytes memory addressesFound) {\\n        addressesFound = abi.encodePacked(spender);\\n    }\\n\\n    function claimFees(address feeAsset) external pure returns (bytes memory addressesFound) {\\n        addressesFound = abi.encodePacked(feeAsset);\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/token/ERC721/utils/ERC721Holder.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/utils/ERC721Holder.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC721Receiver} from \\\"../IERC721Receiver.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC721Receiver} interface.\\n *\\n * Accepts all token transfers.\\n * Make sure the contract is able to use its token with {IERC721-safeTransferFrom}, {IERC721-approve} or\\n * {IERC721-setApprovalForAll}.\\n */\\nabstract contract ERC721Holder is IERC721Receiver {\\n    /**\\n     * @dev See {IERC721Receiver-onERC721Received}.\\n     *\\n     * Always returns `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(address, address, uint256, bytes memory) public virtual returns (bytes4) {\\n        return this.onERC721Received.selector;\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/token/ERC1155/utils/ERC1155Holder.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC1155/utils/ERC1155Holder.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165, ERC165} from \\\"../../../utils/introspection/ERC165.sol\\\";\\nimport {IERC1155Receiver} from \\\"../IERC1155Receiver.sol\\\";\\n\\n/**\\n * @dev Simple implementation of `IERC1155Receiver` that will allow a contract to hold ERC1155 tokens.\\n *\\n * IMPORTANT: When inheriting this contract, you must include a way to use the received tokens, otherwise they will be\\n * stuck.\\n */\\nabstract contract ERC1155Holder is ERC165, IERC1155Receiver {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return interfaceId == type(IERC1155Receiver).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    function onERC1155Received(\\n        address,\\n        address,\\n        uint256,\\n        uint256,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC1155Received.selector;\\n    }\\n\\n    function onERC1155BatchReceived(\\n        address,\\n        address,\\n        uint256[] memory,\\n        uint256[] memory,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC1155BatchReceived.selector;\\n    }\\n}\\n\"\r\n    },\r\n    \"src/interfaces/BeforeTransferHook.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.21;\\n\\ninterface BeforeTransferHook {\\n    function beforeTransfer(address from, address to, address operator) external view;\\n}\\n\"\r\n    },\r\n    \"src/interfaces/DecoderCustomTypes.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.21;\\n\\ncontract DecoderCustomTypes {\\n    // ========================================= BALANCER =========================================\\n    struct JoinPoolRequest {\\n        address[] assets;\\n        uint256[] maxAmountsIn;\\n        bytes userData;\\n        bool fromInternalBalance;\\n    }\\n\\n    struct ExitPoolRequest {\\n        address[] assets;\\n        uint256[] minAmountsOut;\\n        bytes userData;\\n        bool toInternalBalance;\\n    }\\n\\n    enum SwapKind {\\n        GIVEN_IN,\\n        GIVEN_OUT\\n    }\\n\\n    struct SingleSwap {\\n        bytes32 poolId;\\n        SwapKind kind;\\n        address assetIn;\\n        address assetOut;\\n        uint256 amount;\\n        bytes userData;\\n    }\\n\\n    struct FundManagement {\\n        address sender;\\n        bool fromInternalBalance;\\n        address recipient;\\n        bool toInternalBalance;\\n    }\\n\\n    // ========================================= UNISWAP V3 =========================================\\n\\n    struct MintParams {\\n        address token0;\\n        address token1;\\n        uint24 fee;\\n        int24 tickLower;\\n        int24 tickUpper;\\n        uint256 amount0Desired;\\n        uint256 amount1Desired;\\n        uint256 amount0Min;\\n        uint256 amount1Min;\\n        address recipient;\\n        uint256 deadline;\\n    }\\n\\n    struct IncreaseLiquidityParams {\\n        uint256 tokenId;\\n        uint256 amount0Desired;\\n        uint256 amount1Desired;\\n        uint256 amount0Min;\\n        uint256 amount1Min;\\n        uint256 deadline;\\n    }\\n\\n    struct DecreaseLiquidityParams {\\n        uint256 tokenId;\\n        uint128 liquidity;\\n        uint256 amount0Min;\\n        uint256 amount1Min;\\n        uint256 deadline;\\n    }\\n\\n    struct CollectParams {\\n        uint256 tokenId;\\n        address recipient;\\n        uint128 amount0Max;\\n        uint128 amount1Max;\\n    }\\n\\n    struct ExactInputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n    }\\n\\n    // ========================================= MORPHO BLUE =========================================\\n\\n    struct MarketParams {\\n        address loanToken;\\n        address collateralToken;\\n        address oracle;\\n        address irm;\\n        uint256 lltv;\\n    }\\n\\n    // ========================================= 1INCH =========================================\\n\\n    struct SwapDescription {\\n        address srcToken;\\n        address dstToken;\\n        address payable srcReceiver;\\n        address payable dstReceiver;\\n        uint256 amount;\\n        uint256 minReturnAmount;\\n        uint256 flags;\\n    }\\n\\n    // ========================================= PENDLE =========================================\\n    struct TokenInput {\\n        // TOKEN DATA\\n        address tokenIn;\\n        uint256 netTokenIn;\\n        address tokenMintSy;\\n        // AGGREGATOR DATA\\n        address pendleSwap;\\n        SwapData swapData;\\n    }\\n\\n    struct TokenOutput {\\n        // TOKEN DATA\\n        address tokenOut;\\n        uint256 minTokenOut;\\n        address tokenRedeemSy;\\n        // AGGREGATOR DATA\\n        address pendleSwap;\\n        SwapData swapData;\\n    }\\n\\n    struct ApproxParams {\\n        uint256 guessMin;\\n        uint256 guessMax;\\n        uint256 guessOffchain; // pass 0 in to skip this variable\\n        uint256 maxIteration; // every iteration, the diff between guessMin and guessMax will be divided by 2\\n        uint256 eps; // the max eps between the returned result & the correct result, base 1e18. Normally this number will be set\\n            // to 1e15 (1e18/1000 = 0.1%)\\n    }\\n\\n    struct SwapData {\\n        SwapType swapType;\\n        address extRouter;\\n        bytes extCalldata;\\n        bool needScale;\\n    }\\n\\n    enum SwapType {\\n        NONE,\\n        KYBERSWAP,\\n        ONE_INCH,\\n        // ETH_WETH not used in Aggregator\\n        ETH_WETH\\n    }\\n\\n    // ========================================= EIGEN LAYER =========================================\\n\\n    struct QueuedWithdrawalParams {\\n        // Array of strategies that the QueuedWithdrawal contains\\n        address[] strategies;\\n        // Array containing the amount of shares in each Strategy in the `strategies` array\\n        uint256[] shares;\\n        // The address of the withdrawer\\n        address withdrawer;\\n    }\\n\\n    struct Withdrawal {\\n        // The address that originated the Withdrawal\\n        address staker;\\n        // The address that the staker was delegated to at the time that the Withdrawal was created\\n        address delegatedTo;\\n        // The address that can complete the Withdrawal + will receive funds when completing the withdrawal\\n        address withdrawer;\\n        // Nonce used to guarantee that otherwise identical withdrawals have unique hashes\\n        uint256 nonce;\\n        // Block number when the Withdrawal was created\\n        uint32 startBlock;\\n        // Array of strategies that the Withdrawal contains\\n        address[] strategies;\\n        // Array containing the amount of shares in each Strategy in the `strategies` array\\n        uint256[] shares;\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/token/ERC721/IERC721Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be\\n     * reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/token/ERC1155/IERC1155Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Interface that must be implemented by smart contracts in order to receive\\n * ERC-1155 token transfers.\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [\r\n      \"@solmate/=lib/solmate/src/\",\r\n      \"@forge-std/=lib/forge-std/src/\",\r\n      \"@ds-test/=lib/forge-std/lib/ds-test/src/\",\r\n      \"ds-test/=lib/forge-std/lib/ds-test/src/\",\r\n      \"@openzeppelin/=lib/openzeppelin-contracts/\",\r\n      \"@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\r\n      \"erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/\",\r\n      \"forge-std/=lib/forge-std/src/\",\r\n      \"openzeppelin-contracts/=lib/openzeppelin-contracts/\",\r\n      \"solmate/=lib/solmate/src/\"\r\n    ],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": false,\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"appendCBOR\": true\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"shanghai\",\r\n    \"viaIR\": false,\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"contract Authority\",\"name\":\"_authoirty\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_manager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_boringVault\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"leafA\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"leafB\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"expectedLeafAB\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"actualLeafAB\",\"type\":\"bytes32\"}],\"name\":\"SymbioticUManager__BadHash\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SymbioticUManager__DecoderAndSanitizerNotSet\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"SymbioticUManager__DepositAmountExceedsBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"limitDelta\",\"type\":\"uint256\"}],\"name\":\"SymbioticUManager__DepositAmountExceedsLimit\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minimumDeposit\",\"type\":\"uint256\"}],\"name\":\"SymbioticUManager__DepositAmountTooSmall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SymbioticUManager__InvalidMerkleTree\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SymbioticUManager__MinimumDepositNotSet\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"defaultCollateral\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Assembled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract Authority\",\"name\":\"newAuthority\",\"type\":\"address\"}],\"name\":\"AuthorityUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"defaultCollateral\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"minimumDeposit\",\"type\":\"uint96\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"decoderAndSanitizer\",\"type\":\"address\"}],\"name\":\"ConfigurationSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pointer\",\"type\":\"address\"}],\"name\":\"MerkleLeafsUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"contract DefaultCollateral\",\"name\":\"defaultCollateral\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"assemble\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"assembled\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"authority\",\"outputs\":[{\"internalType\":\"contract Authority\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"configurations\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"minimumDeposit\",\"type\":\"uint96\"},{\"internalType\":\"address\",\"name\":\"decoderAndSanitizer\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract DefaultCollateral\",\"name\":\"defaultCollateral\",\"type\":\"address\"}],\"name\":\"fullAssemble\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"assembled\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract Authority\",\"name\":\"newAuthority\",\"type\":\"address\"}],\"name\":\"setAuthority\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract DefaultCollateral\",\"name\":\"defaultCollateral\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"minimumDeposit\",\"type\":\"uint96\"},{\"internalType\":\"address\",\"name\":\"decoderAndSanitizer\",\"type\":\"address\"}],\"name\":\"setConfiguration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[][]\",\"name\":\"_merkleTree\",\"type\":\"bytes32[][]\"},{\"internalType\":\"bool\",\"name\":\"validateMerkleTree\",\"type\":\"bool\"}],\"name\":\"updateMerkleTree\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"viewMerkleTree\",\"outputs\":[{\"internalType\":\"bytes32[][]\",\"name\":\"merkleTree\",\"type\":\"bytes32[][]\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "SymbioticUManager", "CompilerVersion": "v0.8.21+commit.d9974bed", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000000463e60c7ce10e57911ab7bd1667eaa21de3e79b0000000000000000000000004df6b73328b639073db150c4584196c4d97053b7000000000000000000000000cff411d5c54fe0583a984bee1ef43a4776854b9a00000000000000000000000008c6f91e2b681faf5e17227f2a44c307b3c1364c", "EVMVersion": "shanghai", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}