{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"settings\": {\r\n    \"evmVersion\": \"shanghai\",\r\n    \"libraries\": {},\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"remappings\": [],\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  },\r\n  \"sources\": {\r\n    \"@gnus.ai/contracts-upgradeable-diamond/contracts/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@gnus.ai/contracts-upgradeable-diamond/contracts/utils/CountersUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary CountersUpgradeable {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\"\r\n    },\r\n    \"@gnus.ai/contracts-upgradeable-diamond/contracts/utils/StringsUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/MathUpgradeable.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = MathUpgradeable.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, MathUpgradeable.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\"\r\n    },\r\n    \"@gnus.ai/contracts-upgradeable-diamond/contracts/utils/math/MathUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUpgradeable {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@gnus.ai/contracts-upgradeable-diamond/contracts/utils/math/SafeMathUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMathUpgradeable {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/facets/AdminFacet.sol\": {\r\n      \"content\": \"// Copyright (c) 2023, ApeFathers NFT\\n// GSKNNFT Inc\\n// Contract name: AdminFacet\\n\\n// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity ^0.8.20;\\n\\nimport {IAdmin} from \\\"../interfaces/IAdmin.sol\\\";\\nimport {AddressUpgradeable} from \\\"@gnus.ai/contracts-upgradeable-diamond/contracts/utils/AddressUpgradeable.sol\\\";\\nimport {SafeMathUpgradeable} from \\\"@gnus.ai/contracts-upgradeable-diamond/contracts/utils/math/SafeMathUpgradeable.sol\\\";\\nimport {StringsUpgradeable} from \\\"@gnus.ai/contracts-upgradeable-diamond/contracts/utils/StringsUpgradeable.sol\\\";\\n\\nimport {IERC173} from \\\"../interfaces/IERC173.sol\\\";\\nimport {IRoyalties} from \\\"../interfaces/IRoyalties.sol\\\";\\nimport {LibDiamondDapes} from \\\"../libraries/LibDiamondDapes.sol\\\";\\nimport {LibDiamond} from \\\"../libraries/LibDiamond.sol\\\";\\n\\ncontract AdminFacet is IAdmin {\\n  using AddressUpgradeable for address;\\n  using StringsUpgradeable for uint256;\\n  using SafeMathUpgradeable for uint256;\\n  using LibDiamondDapes for LibDiamondDapes.DiamondDapesStruct;\\n  using LibDiamondDapes for LibDiamondDapes.AdminStorage;\\n\\n  // Modifier to restrict function calls to only admin\\n  modifier onlyOwner() {\\n    LibDiamond.enforceIsContractOwner();\\n    _;\\n  }\\n\\n  /**\\n   * @notice to return whether public sale is active\\n   * @return bool - public sale state\\n   */\\n  function isPublicSaleActive() external view returns (bool) {\\n    return LibDiamondDapes.diamondDapesStorage().isPublicSaleActive;\\n  }\\n\\n  /**\\n   * @notice to return whether burn is active\\n   * @return bool - burn claim state\\n   */\\n  function isBurnClaimActive() public view returns (bool) {\\n    return LibDiamondDapes.diamondDapesStorage().isBurnClaimActive;\\n  }\\n\\n  /**\\n   * @notice To be updated by contract owner to allow public sale minting\\n   * @param _saleActiveState - bool new public sale state\\n   * @return bool - new public sale state\\n   */\\n  function setPublicSaleState(bool _saleActiveState) external returns (bool) {\\n    LibDiamond.enforceIsContractOwner();\\n    require(\\n      LibDiamondDapes.diamondDapesStorage().isPublicSaleActive != _saleActiveState,\\n      \\\"NEW_STATE_IDENTICAL_TO_OLD_STATE\\\"\\n    );\\n    LibDiamondDapes.diamondDapesStorage().isPublicSaleActive = _saleActiveState;\\n    return LibDiamondDapes.diamondDapesStorage().isPublicSaleActive;\\n  }\\n\\n  /**\\n   * @notice To be updated by contract owner to allow burning to claim a token for free + gas\\n   * @param _burnClaimActive - new burn claim state\\n   * @return bool - new burn claim state\\n   */\\n  function setBurnClaimState(bool _burnClaimActive) external returns (bool) {\\n    LibDiamond.enforceIsContractOwner();\\n    LibDiamondDapes.diamondDapesStorage().isBurnClaimActive = _burnClaimActive;\\n    return LibDiamondDapes.diamondDapesStorage().isBurnClaimActive;\\n  }\\n\\n  function toggleBurnClaim() external returns (bool) {\\n    LibDiamond.enforceIsContractOwner();\\n    LibDiamondDapes.diamondDapesStorage().isBurnClaimActive = !LibDiamondDapes.diamondDapesStorage().isBurnClaimActive;\\n    return LibDiamondDapes.diamondDapesStorage().isBurnClaimActive;\\n  }\\n\\n  function togglePublicSale() external returns (bool) {\\n    LibDiamond.enforceIsContractOwner();\\n    LibDiamondDapes.diamondDapesStorage().isPublicSaleActive = !LibDiamondDapes\\n      .diamondDapesStorage()\\n      .isPublicSaleActive;\\n    return LibDiamondDapes.diamondDapesStorage().isPublicSaleActive;\\n  }\\n\\n  function toggleTokenBurn(bool state) external {\\n    LibDiamond.enforceIsContractOwner();\\n    LibDiamondDapes.diamondDapesStorage().isTokenBurnActive = state;\\n  }\\n\\n  function addAdmin(address[] memory _admins) external onlyOwner {\\n    LibDiamondDapes.AdminStorage storage aStore = LibDiamondDapes.adminStorage();\\n    for (uint i = 0; i < _admins.length; i++) {\\n      aStore.admins.push(_admins[i]);\\n    }\\n  }\\n\\n  function removeAdmin(address _admin) external onlyOwner {\\n    LibDiamondDapes.AdminStorage storage aStore = LibDiamondDapes.adminStorage();\\n    for (uint i = 0; i < aStore.admins.length; i++) {\\n      if (aStore.admins[i] == _admin) {\\n        // Replace the admin at index i with the laStoret admin in the array\\n        aStore.admins[i] = aStore.admins[aStore.admins.length - 1];\\n        // Delete the last element of the array (the duplicate admin)\\n        aStore.admins.pop();\\n        return;\\n      }\\n    }\\n  }\\n\\n  function setMintBatchActive(bool _isBatchMintActive) external onlyOwner {\\n    LibDiamondDapes.diamondDapesStorage().isBatchMintActive = _isBatchMintActive;\\n  }\\n\\n  function setMintBatch(uint256 _batchEndID) external onlyOwner {\\n    LibDiamondDapes.diamondDapesStorage().publicCloseTokenId = _batchEndID;\\n  }\\n\\n  /*\\n   * @notice Allow owner to set the version\\n   * @param version_ - version\\n   */\\n  function setVersion(string calldata _version) external onlyOwner {\\n    LibDiamondDapes.diamondDapesStorage().version = _version;\\n  }\\n\\n  function _registerInterface(bytes4 _interfaceID) internal {\\n    LibDiamondDapes.adminStorage()._supportedInterfaces[_interfaceID] = true;\\n  }\\n\\n  /**\\n   * @notice Allows the contract owner to set allowed facets for certain actions\\n   * @param facet_ - array of facet addresses to allow\\n   */\\n  function setAllowedFacets(address[] calldata facet_) external {\\n    LibDiamond.enforceIsContractOwner();\\n    for (uint256 i = 0; i < facet_.length; i++) {\\n      LibDiamondDapes.adminStorage().allowedFacets[facet_[i]] = true;\\n    }\\n  }\\n\\n  /**\\n   * @dev Sets the base URI for all token IDs. It is automatically added as a prefix to the value\\n   * returned in {tokenURI}, or to the token ID if {tokenURI} is empty, or revert if the tokenURI is already set.\\n   * @notice Only the owner of the contract can set the base URI. If you want to override the base URI with each individual URI, use {_setTokenURI}.\\n   * This will allow setting the base URI for hosting the metadata as well as the base contract URI.\\n   * @param _baseURI_ - the base URI to set\\n   * @param uriPrefix_ - the prefix to add to the baseURI\\n   */\\n  function _setPrefixBaseURI(string memory _baseURI_, string memory uriPrefix_) external onlyOwner {\\n    LibDiamondDapes.DiamondDapesStruct storage dds = LibDiamondDapes.diamondDapesStorage();\\n    require(!dds.metadataFrozen, \\\"METADATA_HAS_BEEN_FROZEN\\\");\\n    if (bytes(uriPrefix_).length > 0) {\\n      dds.uriPrefix = uriPrefix_;\\n    }\\n    if (bytes(_baseURI_).length > 0) {\\n      dds.baseURI = _baseURI_;\\n    }\\n  }\\n\\n  /**\\n   * @dev Returns the base URI set via {_setBaseURI}.\\n   */\\n  function setBaseURI(string calldata _newBaseURI) external onlyOwner returns (string memory) {\\n    require(!LibDiamondDapes.diamondDapesStorage().metadataFrozen, \\\"METADATA_HAS_BEEN_FROZEN\\\");\\n    LibDiamondDapes.diamondDapesStorage().baseURI = _newBaseURI;\\n\\n    return LibDiamondDapes.diamondDapesStorage().baseURI;\\n  }\\n\\n  function setUriAttributes(\\n    string memory _uriPrefix,\\n    string memory _uriSuffix\\n  ) external onlyOwner returns (string memory, string memory) {\\n    LibDiamondDapes.diamondDapesStorage().uriPrefix = _uriPrefix;\\n    LibDiamondDapes.diamondDapesStorage().uriSuffix = _uriSuffix;\\n    return (LibDiamondDapes.diamondDapesStorage().uriPrefix, LibDiamondDapes.diamondDapesStorage().uriSuffix);\\n  }\\n\\n  /**\\n   * @notice Update the public mint price\\n   * @param _publicPrice - new public price\\n   * @return uint256 - new public price\\n   */\\n  function setPublicPrice(uint256 _publicPrice) external returns (uint256) {\\n    LibDiamond.enforceIsContractOwner();\\n    LibDiamondDapes.diamondDapesStorage().publicPrice = _publicPrice;\\n    return LibDiamondDapes.diamondDapesStorage().publicPrice;\\n  }\\n\\n  /*\\n   * @notice Allow owner to set the URI prefix\\n   * @param uriPrefix_ - URI prefix\\n   */\\n\\n  function setUriPrefix(string calldata _uriPrefix) external onlyOwner {\\n    LibDiamondDapes.diamondDapesStorage().uriPrefix = _uriPrefix;\\n  }\\n\\n  /*\\n   * @notice Allow owner to set the URI suffix\\n   * @param uriSuffix_ - URI suffix\\n   */\\n  function setUriSuffix(string calldata _uriSuffix) external onlyOwner {\\n    LibDiamondDapes.diamondDapesStorage().uriSuffix = _uriSuffix;\\n  }\\n\\n  /*\\n   * @notice Allow owner to freeze the metadata\\n   */\\n  function freezeMetadata() external onlyOwner {\\n    require(!LibDiamondDapes.diamondDapesStorage().metadataFrozen, \\\"ApeFathers: metadata is already frozen\\\");\\n    LibDiamondDapes.diamondDapesStorage().metadataFrozen = true;\\n  }\\n\\n  /*\\n   * @notice Allow owner to set the version\\n   * @param version_ Version of the contract\\n   */\\n  function setPayoutAddresses(address[] calldata _payoutAddresses) external onlyOwner {\\n    require(\\n      LibDiamondDapes.diamondDapesStorage().payoutAddressesFrozen == false,\\n      \\\"ApeFathers: payout addresses are frozen\\\"\\n    );\\n    LibDiamondDapes.diamondDapesStorage().payoutAddresses = _payoutAddresses;\\n  }\\n\\n  /*\\n   * @notice Allow owner to set the hidden metadata URI\\n   * @param hiddenMetadataUri_ - hidden metadata URI\\n   */\\n  function setHiddenMetadataUri(string calldata _hiddenMetadataUri) external onlyOwner returns (string memory) {\\n    require(LibDiamondDapes.diamondDapesStorage().metadataFrozen == false, \\\"METADATA_FROZEN\\\");\\n    LibDiamondDapes.diamondDapesStorage().hiddenMetadataUri = _hiddenMetadataUri;\\n    return LibDiamondDapes.diamondDapesStorage().hiddenMetadataUri;\\n  }\\n\\n  /*\\n   * @notice Allow owner to reveal the collection metadata\\n   */\\n  function setRevealed(bool _state) external onlyOwner returns (bool) {\\n    LibDiamondDapes.diamondDapesStorage().revealed = _state;\\n    return LibDiamondDapes.diamondDapesStorage().revealed;\\n  }\\n\\n  /*\\n   * @notice Allow owner to set the tokens per batch to reveal\\n   * @param payoutAddresses_ - payout addresses\\n   */\\n  function setTokensPerBatch(uint256 _tokensPerBatch) external onlyOwner returns (uint256) {\\n    LibDiamondDapes.diamondDapesStorage().tokensPerBatch = _tokensPerBatch;\\n    return LibDiamondDapes.diamondDapesStorage().tokensPerBatch;\\n  }\\n\\n  /*\\n   * @notice Allow owner to manually override the total of tokens revealed in case of a bug\\n   * @param _totalRevealed - total revealed\\n   */\\n  function setTotalRevealed(uint256 _totalRevealed) external onlyOwner returns (uint256) {\\n    LibDiamondDapes.diamondDapesStorage().totalRevealed = _totalRevealed;\\n    return LibDiamondDapes.diamondDapesStorage().totalRevealed;\\n  }\\n\\n  /*\\n   * @notice Set the address of the INFT contract instance\\n   * @param _newINftAddress\\n   */\\n  function setNftAddress(address _newINftAddress) external onlyOwner returns (address) {\\n    LibDiamondDapes.diamondDapesStorage().nftAddress = _newINftAddress;\\n    return LibDiamondDapes.diamondDapesStorage().nftAddress;\\n  }\\n\\n  /**\\n   * @notice Set the maximum public mints allowed per a given transaction\\n   */\\n  function setBatchSizePerTx(uint8 _batchSizePerTx) external onlyOwner returns (uint8) {\\n    LibDiamondDapes.diamondDapesStorage().batchSizePerTx = _batchSizePerTx;\\n    return LibDiamondDapes.diamondDapesStorage().batchSizePerTx;\\n  }\\n\\n  function bitIsSet(uint256 word, uint256 bit) internal pure returns (bool) {\\n    return (word >> bit) & 1 == 1;\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IAdmin.sol\": {\r\n      \"content\": \"// Copyright (c) 2023, GSKNNFT Inc\\n\\n// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity ^0.8.20;\\n\\ninterface IAdmin {\\n  function isPublicSaleActive() external view returns (bool);\\n\\n  function isBurnClaimActive() external view returns (bool);\\n\\n  function setPublicSaleState(bool _saleActiveState) external returns (bool);\\n\\n  function setBurnClaimState(bool _burnClaimActive) external returns (bool);\\n\\n  function toggleBurnClaim() external returns (bool);\\n\\n  function togglePublicSale() external returns (bool);\\n\\n  function toggleTokenBurn(bool state) external;\\n\\n  function addAdmin(address[] memory _admins) external;\\n\\n  function removeAdmin(address _admin) external;\\n\\n  function setMintBatchActive(bool _isBatchMintActive) external;\\n\\n  function setMintBatch(uint256 _batchEndID) external;\\n\\n  function setVersion(string calldata _version) external;\\n\\n  function setAllowedFacets(address[] calldata facet_) external;\\n\\n  function setBaseURI(string calldata _newBaseURI) external returns (string memory);\\n\\n  function setUriAttributes(\\n    string memory _uriPrefix,\\n    string memory _uriSuffix\\n  ) external returns (string memory, string memory);\\n\\n  function setPublicPrice(uint256 _publicPrice) external returns (uint256);\\n\\n  function setUriPrefix(string calldata _uriPrefix) external;\\n\\n  function setUriSuffix(string calldata _uriSuffix) external;\\n\\n  function setPayoutAddresses(address[] calldata _payoutAddresses) external;\\n\\n  function setHiddenMetadataUri(string calldata _hiddenMetadataUri) external returns (string memory);\\n\\n  function setRevealed(bool _state) external returns (bool);\\n\\n  function setTokensPerBatch(uint256 _tokensPerBatch) external returns (uint256);\\n\\n  function setTotalRevealed(uint256 _totalRevealed) external returns (uint256);\\n\\n  function setNftAddress(address _newINftAddress) external returns (address);\\n\\n  function setBatchSizePerTx(uint8 _batchSizePerTx) external returns (uint8);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IDiamondCut.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\\n/******************************************************************************/\\n\\ninterface IDiamondCut {\\n  enum FacetCutAction {\\n    Add,\\n    Replace,\\n    Remove\\n  }\\n  // Add=0, Replace=1, Remove=2\\n\\n  struct FacetCut {\\n    address facetAddress;\\n    FacetCutAction action;\\n    bytes4[] functionSelectors;\\n  }\\n\\n  /// @notice Add/replace/remove any number of functions and optionally execute\\n  ///         a function with delegatecall\\n  /// @param _diamondCut Contains the facet addresses and function selectors\\n  /// @param _init The address of the contract or facet to execute _calldata\\n  /// @param _calldata A function call, including function selector and arguments\\n  ///                  _calldata is executed with delegatecall on _init\\n  function diamondCut(FacetCut[] calldata _diamondCut, address _init, bytes calldata _calldata) external;\\n\\n  event DiamondCut(FacetCut[] _diamondCut, address _init, bytes _calldata);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IERC173.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\n/// @title ERC-173 Contract Ownership Standard\\n///  Note: the ERC-165 identifier for this interface is 0x7f5828d0\\n/* is ERC165 */\\ninterface IERC173 {\\n  /// @dev This emits when ownership of a contract changes.\\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n  /// @notice Get the address of the owner\\n  /// @return owner_ The address of the owner.\\n  function owner() external view returns (address owner_);\\n\\n  /// @notice Set the address of the new owner of the contract\\n  /// @dev Set _newOwner to address(0) to renounce any ownership.\\n  /// @param _newOwner The address of the new owner of the contract\\n  function transferOwnership(address _newOwner) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IRoyalties.sol\": {\r\n      \"content\": \"// Copyright (c) 2023, GSKNNFT Inc\\n// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity ^0.8.20;\\n\\ninterface IRoyalties {\\n  function setRoyaltyAddress(address _royaltyAddress) external;\\n  \\n  function setRoyaltyFee(uint96 _feeNumerator) external;\\n  \\n  function changeRoyalties(address _newRoyaltyAddress, uint96 _royaltyFee) external;\\n  \\n  function changePayoutAddresses(address[] calldata _newPayoutAddresses, uint16[] calldata _newPayoutBasisPoints) external;\\n  \\n  function setRoyalty(uint96 _fee, address _recipient) external;\\n  \\n  function activateHolderRoyalties(bool _val, uint256 _perc) external;\\n  \\n  function royaltyInfo(uint256 _tokenId, uint256 _salePrice) external view returns (address receiver, uint256 royaltyAmount);\\n  \\n  function withdrawRoyalties() external;\\n    \\n  function beforeTokenTransfers_(address from, address to, uint256, uint256) external payable;\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/LibDiamond.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\\n/******************************************************************************/\\nimport {IDiamondCut} from \\\"../interfaces/IDiamondCut.sol\\\";\\n\\n// Remember to add the loupe functions from DiamondLoupeFacet to the diamond.\\n// The loupe functions are required by the EIP2535 Diamonds standard\\n\\nerror InitializationFunctionReverted(address _initializationContractAddress, bytes _calldata);\\n\\nlibrary LibDiamond {\\n  bytes32 constant DIAMOND_STORAGE_POSITION = keccak256(\\\"diamond.standard.diamond.storage\\\");\\n  bytes32 constant FACETDATA_STORAGE_POSITION = keccak256(\\\"facetdata.standard.diamond.storage\\\");\\n\\n  struct DiamondStorage {\\n    // facet initialation data\\n    mapping(address => bytes) facetInitData;\\n    // maps function selectors to the facets that execute the functions.\\n    // and maps the selectors to their position in the selectorSlots array.\\n    // func selector => address facet, selector position\\n    mapping(bytes4 => bytes32) facets;\\n    // array of slots of function selectors.\\n    // each slot holds 8 function selectors.\\n    mapping(uint256 => bytes32) selectorSlots;\\n    // The number of function selectors in selectorSlots\\n    uint16 selectorCount;\\n    // Used to query if a contract implements an interface.\\n    // Used to implement ERC-165.\\n    mapping(bytes4 => bool) supportedInterfaces;\\n    // owner of the contract\\n    address contractOwner;\\n  }\\n\\n  struct FacetData {\\n    bytes4[] functionSelectors;\\n    bytes callData;\\n  }\\n\\n  function facetData() internal pure returns (FacetData storage fd) {\\n    bytes32 position = FACETDATA_STORAGE_POSITION;\\n    assembly {\\n      fd.slot := position\\n    }\\n  }\\n\\n  function diamondStorage() internal pure returns (DiamondStorage storage ds) {\\n    bytes32 position = DIAMOND_STORAGE_POSITION;\\n    assembly {\\n      ds.slot := position\\n    }\\n  }\\n\\n  event _OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n  function setContractOwner(address _newOwner) internal {\\n    DiamondStorage storage ds = diamondStorage();\\n    address previousOwner = ds.contractOwner;\\n    ds.contractOwner = _newOwner;\\n    emit _OwnershipTransferred(previousOwner, _newOwner);\\n  }\\n\\n  function contractOwner() internal view returns (address contractOwner_) {\\n    contractOwner_ = diamondStorage().contractOwner;\\n  }\\n\\n  function enforceIsContractOwner() internal view {\\n    require(msg.sender == diamondStorage().contractOwner, \\\"LibDiamond: Must be contract owner\\\");\\n  }\\n\\n  event DiamondCut(IDiamondCut.FacetCut[] _diamondCut, address _init, bytes _calldata);\\n\\n  bytes32 constant CLEAR_ADDRESS_MASK = bytes32(uint256(0xffffffffffffffffffffffff));\\n  bytes32 constant CLEAR_SELECTOR_MASK = bytes32(uint256(0xffffffff << 224));\\n  bytes32 constant CLEAR_SELECTOR = CLEAR_ADDRESS_MASK | CLEAR_SELECTOR_MASK;\\n  bytes32 constant SELECTOR_SIZE = bytes32(uint256(0xffffffff << 224));\\n  bytes32 constant SELECTOR_SHIFT =\\n    bytes32(uint256(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff) << 224);\\n  bytes32 constant SELECTOR_MASK = CLEAR_ADDRESS_MASK | SELECTOR_SIZE;\\n  bytes32 constant SELECTOR_OFFSET = bytes32(uint256(0xffffffff << 224) >> 1);\\n  bytes32 constant DIAMOND_STORAGE_OFFSET = bytes32(uint256(0xffffffff << 224) >> 2);\\n  bytes32 constant DIAMOND_STORAGE_SIZE = bytes32(uint256(0xffffffff << 224) >> 3);\\n  bytes32 constant DIAMOND_STORAGE_MASK = CLEAR_ADDRESS_MASK | DIAMOND_STORAGE_SIZE;\\n  bytes32 constant DIAMOND_STORAGE_SHIFT =\\n    bytes32(uint256(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff) << 224) >> 4;\\n  bytes32 constant DIAMOND_STORAGE = DIAMOND_STORAGE_OFFSET | DIAMOND_STORAGE_SIZE;\\n\\n  // Internal function version of diamondCut\\n  // This code is almost the same as the external diamondCut,\\n  // except it is using 'Facet[] memory _diamondCut' instead of\\n  // 'Facet[] calldata _diamondCut'.\\n  // The code is duplicated to prevent copying calldata to memory which\\n  // causes an error for a two dimensional array.\\n  function diamondCut(IDiamondCut.FacetCut[] memory _diamondCut, address _init, bytes memory _calldata) internal {\\n    DiamondStorage storage ds = diamondStorage();\\n    uint256 originalSelectorCount = ds.selectorCount;\\n    uint256 selectorCount = originalSelectorCount;\\n    bytes32 selectorSlot;\\n    // Check if last selector slot is not full\\n    // \\\"selectorCount & 7\\\" is a gas efficient modulo by eight \\\"selectorCount % 8\\\"\\n    if (selectorCount & 7 > 0) {\\n      // get last selectorSlot\\n      // \\\"selectorSlot >> 3\\\" is a gas efficient division by 8 \\\"selectorSlot / 8\\\"\\n      selectorSlot = ds.selectorSlots[selectorCount >> 3];\\n    }\\n    // loop through diamond cut\\n    for (uint256 facetIndex; facetIndex < _diamondCut.length; ) {\\n      (selectorCount, selectorSlot) = addReplaceRemoveFacetSelectors(\\n        selectorCount,\\n        selectorSlot,\\n        _diamondCut[facetIndex].facetAddress,\\n        _diamondCut[facetIndex].action,\\n        _diamondCut[facetIndex].functionSelectors\\n      );\\n\\n      unchecked {\\n        facetIndex++;\\n      }\\n    }\\n    if (selectorCount != originalSelectorCount) {\\n      ds.selectorCount = uint16(selectorCount);\\n    }\\n    // If last selector slot is not full\\n    // \\\"selectorCount & 7\\\" is a gas efficient modulo by eight \\\"selectorCount % 8\\\"\\n    if (selectorCount & 7 > 0) {\\n      // \\\"selectorSlot >> 3\\\" is a gas efficient division by 8 \\\"selectorSlot / 8\\\"\\n      ds.selectorSlots[selectorCount >> 3] = selectorSlot;\\n    }\\n    emit DiamondCut(_diamondCut, _init, _calldata);\\n    initializeDiamondCut(_init, _calldata);\\n  }\\n\\n  function addReplaceRemoveFacetSelectors(\\n    uint256 _selectorCount,\\n    bytes32 _selectorSlot,\\n    address _newFacetAddress,\\n    IDiamondCut.FacetCutAction _action,\\n    bytes4[] memory _selectors\\n  ) internal returns (uint256, bytes32) {\\n    DiamondStorage storage ds = diamondStorage();\\n    require(_selectors.length > 0, \\\"LibDiamondCut: No selectors in facet to cut\\\");\\n    if (_action == IDiamondCut.FacetCutAction.Add) {\\n      enforceHasContractCode(_newFacetAddress, \\\"LibDiamondCut: Add facet has no code\\\");\\n      for (uint256 selectorIndex; selectorIndex < _selectors.length; ) {\\n        bytes4 selector = _selectors[selectorIndex];\\n        bytes32 oldFacet = ds.facets[selector];\\n        require(address(bytes20(oldFacet)) == address(0), \\\"LibDiamondCut: Can't add function that already exists\\\");\\n        // add facet for selector\\n        ds.facets[selector] = bytes20(_newFacetAddress) | bytes32(_selectorCount);\\n        // \\\"_selectorCount & 7\\\" is a gas efficient modulo by eight \\\"_selectorCount % 8\\\"\\n        // \\\" << 5 is the same as multiplying by 32 ( * 32)\\n        uint256 selectorInSlotPosition = (_selectorCount & 7) << 5;\\n        // clear selector position in slot and add selector\\n        _selectorSlot =\\n          (_selectorSlot & ~(CLEAR_SELECTOR_MASK >> selectorInSlotPosition)) |\\n          (bytes32(selector) >> selectorInSlotPosition);\\n        // if slot is full then write it to storage\\n        if (selectorInSlotPosition == 224) {\\n          // \\\"_selectorSlot >> 3\\\" is a gas efficient division by 8 \\\"_selectorSlot / 8\\\"\\n          ds.selectorSlots[_selectorCount >> 3] = _selectorSlot;\\n          _selectorSlot = 0;\\n        }\\n        _selectorCount++;\\n\\n        unchecked {\\n          selectorIndex++;\\n        }\\n      }\\n    } else if (_action == IDiamondCut.FacetCutAction.Replace) {\\n      enforceHasContractCode(_newFacetAddress, \\\"LibDiamondCut: Replace facet has no code\\\");\\n      for (uint256 selectorIndex; selectorIndex < _selectors.length; ) {\\n        bytes4 selector = _selectors[selectorIndex];\\n        bytes32 oldFacet = ds.facets[selector];\\n        address oldFacetAddress = address(bytes20(oldFacet));\\n        // only useful if immutable functions exist\\n        require(oldFacetAddress != address(this), \\\"LibDiamondCut: Can't replace immutable function\\\");\\n        require(oldFacetAddress != _newFacetAddress, \\\"LibDiamondCut: Can't replace function with same function\\\");\\n        require(oldFacetAddress != address(0), \\\"LibDiamondCut: Can't replace function that doesn't exist\\\");\\n        // replace old facet address\\n        ds.facets[selector] = (oldFacet & CLEAR_ADDRESS_MASK) | bytes20(_newFacetAddress);\\n\\n        unchecked {\\n          selectorIndex++;\\n        }\\n      }\\n    } else if (_action == IDiamondCut.FacetCutAction.Remove) {\\n      require(_newFacetAddress == address(0), \\\"LibDiamondCut: Remove facet address must be address(0)\\\");\\n      // \\\"_selectorCount >> 3\\\" is a gas efficient division by 8 \\\"_selectorCount / 8\\\"\\n      uint256 selectorSlotCount = _selectorCount >> 3;\\n      // \\\"_selectorCount & 7\\\" is a gas efficient modulo by eight \\\"_selectorCount % 8\\\"\\n      uint256 selectorInSlotIndex = _selectorCount & 7;\\n      for (uint256 selectorIndex; selectorIndex < _selectors.length; ) {\\n        if (_selectorSlot == 0) {\\n          // get last selectorSlot\\n          selectorSlotCount--;\\n          _selectorSlot = ds.selectorSlots[selectorSlotCount];\\n          selectorInSlotIndex = 7;\\n        } else {\\n          selectorInSlotIndex--;\\n        }\\n        bytes4 lastSelector;\\n        uint256 oldSelectorsSlotCount;\\n        uint256 oldSelectorInSlotPosition;\\n        // adding a block here prevents stack too deep error\\n        {\\n          bytes4 selector = _selectors[selectorIndex];\\n          bytes32 oldFacet = ds.facets[selector];\\n          require(address(bytes20(oldFacet)) != address(0), \\\"LibDiamondCut: Can't remove function that doesn't exist\\\");\\n          // only useful if immutable functions exist\\n          require(address(bytes20(oldFacet)) != address(this), \\\"LibDiamondCut: Can't remove immutable function\\\");\\n          // replace selector with last selector in ds.facets\\n          // gets the last selector\\n          // \\\" << 5 is the same as multiplying by 32 ( * 32)\\n          lastSelector = bytes4(_selectorSlot << (selectorInSlotIndex << 5));\\n          if (lastSelector != selector) {\\n            // update last selector slot position info\\n            ds.facets[lastSelector] = (oldFacet & CLEAR_ADDRESS_MASK) | bytes20(ds.facets[lastSelector]);\\n          }\\n          delete ds.facets[selector];\\n          uint256 oldSelectorCount = uint16(uint256(oldFacet));\\n          // \\\"oldSelectorCount >> 3\\\" is a gas efficient division by 8 \\\"oldSelectorCount / 8\\\"\\n          oldSelectorsSlotCount = oldSelectorCount >> 3;\\n          // \\\"oldSelectorCount & 7\\\" is a gas efficient modulo by eight \\\"oldSelectorCount % 8\\\"\\n          // \\\" << 5 is the same as multiplying by 32 ( * 32)\\n          oldSelectorInSlotPosition = (oldSelectorCount & 7) << 5;\\n        }\\n        if (oldSelectorsSlotCount != selectorSlotCount) {\\n          bytes32 oldSelectorSlot = ds.selectorSlots[oldSelectorsSlotCount];\\n          // clears the selector we are deleting and puts the last selector in its place.\\n          oldSelectorSlot =\\n            (oldSelectorSlot & ~(CLEAR_SELECTOR_MASK >> oldSelectorInSlotPosition)) |\\n            (bytes32(lastSelector) >> oldSelectorInSlotPosition);\\n          // update storage with the modified slot\\n          ds.selectorSlots[oldSelectorsSlotCount] = oldSelectorSlot;\\n        } else {\\n          // clears the selector we are deleting and puts the last selector in its place.\\n          _selectorSlot =\\n            (_selectorSlot & ~(CLEAR_SELECTOR_MASK >> oldSelectorInSlotPosition)) |\\n            (bytes32(lastSelector) >> oldSelectorInSlotPosition);\\n        }\\n        if (selectorInSlotIndex == 0) {\\n          delete ds.selectorSlots[selectorSlotCount];\\n          _selectorSlot = 0;\\n        }\\n\\n        unchecked {\\n          selectorIndex++;\\n        }\\n      }\\n      _selectorCount = selectorSlotCount * 8 + selectorInSlotIndex;\\n    } else {\\n      revert(\\\"LibDiamondCut: Incorrect FacetCutAction\\\");\\n    }\\n    return (_selectorCount, _selectorSlot);\\n  }\\n\\n  function initializeDiamondCut(address _init, bytes memory _calldata) internal {\\n    if (_init == address(0)) {\\n      return;\\n    }\\n    enforceHasContractCode(_init, \\\"LibDiamondCut: _init address has no code\\\");\\n    (bool success, bytes memory error) = _init.delegatecall(_calldata);\\n    if (!success) {\\n      if (error.length > 0) {\\n        // bubble up error\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n          let returndata_size := mload(error)\\n          revert(add(32, error), returndata_size)\\n        }\\n      } else {\\n        revert InitializationFunctionReverted(_init, _calldata);\\n      }\\n    }\\n  }\\n\\n  function enforceHasContractCode(address _contract, string memory _errorMessage) internal view {\\n    uint256 contractSize;\\n    assembly {\\n      contractSize := extcodesize(_contract)\\n    }\\n    require(contractSize > 0, _errorMessage);\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/LibDiamondDapes.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BSD-3-Clause\\n// Copyright (c) 2023, GSKNNFT Inc\\npragma solidity ^0.8.20;\\n\\nimport {CountersUpgradeable} from \\\"@gnus.ai/contracts-upgradeable-diamond/contracts/utils/CountersUpgradeable.sol\\\";\\nimport {IDiamondCut} from \\\"../interfaces/IDiamondCut.sol\\\";\\nimport {LibDiamond} from \\\"./LibDiamond.sol\\\";\\n\\nlibrary LibDiamondDapes {\\n  using CountersUpgradeable for CountersUpgradeable.Counter;\\n  using LibDiamond for LibDiamond.DiamondStorage;\\n  bytes32 constant DIAMOND_DAPES_STORAGE_POSITION = keccak256(\\\"diamonddapes.standard.diamond.dapes.storage\\\");\\n  bytes32 constant EXTRAAF_STORAGE_POSITION = keccak256(\\\"extraaf.standard.apefathers.storage\\\");\\n  bytes32 constant AFADMIN_STORAGE_POSITION = keccak256(\\\"diamonddapes.standard.apefathers.storage\\\");\\n  bytes32 constant STAGED_INIT_STORAGE_POSITION = keccak256(\\\"diamonddapes.stagedinit.standard.diamond.storage\\\");\\n  uint256 constant MAX_SUPPLY = 4000;\\n\\n  struct DiamondDapesStruct {\\n    // AdminFacet state variables\\n    // Mapping from token ID to metadata URI\\n    uint8 batchSizePerTx; // Number of tokens to mint per batch\\n    uint8 attributes;\\n    uint16 apeIndex;\\n    uint16 mintedCount;\\n    uint64 generation;\\n    uint96 royaltyFee;\\n    uint96 tokenCount;\\n    bool admininitialized;\\n    bool isActive;\\n    bool isTokenBurnActive;\\n    bool isPaused;\\n    bool isSpecial;\\n    bool isPublicSaleActive;\\n    bool isBurnClaimActive;\\n    bool isBatchMintActive;\\n    bool metadataFrozen; // Permanently freezes metadata so it can never be changed\\n    bool payoutAddressesFrozen; // If true, payout addresses and basis points are permanently frozen and can never be updated\\n    bool revealed;\\n    bool holderRoyaltiesActive;\\n    bool collectionRevealed;\\n    bool[50] __gapBool;\\n    uint256 _tokenIds;\\n    uint256 _totalSupply;\\n    uint256 publicPrice;\\n    uint256 tokensPerBatch; // Number of tokens to reveal per batch\\n    uint256 totalRevealed; // Keep track of total number of tokens already revealed\\n    uint256 holderPercents;\\n    uint256 publicCloseTokenId;\\n    uint16[] payoutBasisPoints; // The respective share of funds to be sent to each address in payoutAddresses in basis points\\n    uint256[50] __gapUint256;\\n    string baseURI;\\n    string fullURI;\\n    string hiddenMetadataUri;\\n    string name;\\n    string symbol;\\n    string uriPrefix;\\n    string uriSuffix;\\n    string version;\\n    bytes32 facetId;\\n    string[50] __gapString;\\n    address[] diamondDependencies;\\n    address[] payoutAddresses;\\n    address[50] __gapAddress;\\n    address nftAddress;\\n    address payable diamondAddress;\\n    address libAddress;\\n    address royaltyAddress;\\n    address tokenOwner;\\n  }\\n\\n  struct AdminStorage {\\n    uint256 nonce;\\n    mapping(uint256 => bool) revealedTokens;\\n    // Supported interfaces\\n    mapping(bytes4 => bool) _supportedInterfaces;\\n    // Allowed facets\\n    mapping(address => bool) allowedFacets;\\n    // Admin addresses\\n    address[] admins;\\n    // Balances\\n    mapping(address => uint256) balances;\\n    // Token ownership\\n    mapping(uint256 => address) _owners;\\n    // Token approvals\\n    mapping(uint256 => mapping(address => bool)) tokenApprovals;\\n    // Extra NFT data storage\\n    mapping(uint256 => string[]) _tokenIPFSHashes;\\n    // Token URIs\\n    mapping(uint256 => string) _tokenURIs;\\n    // Owned token IDs\\n    mapping(address => uint256[]) _ownedTokens;\\n    // Index of owned token IDs\\n    mapping(uint256 => uint256) _ownedTokensIndex;\\n    // Proxy mapping for projects\\n    mapping(address => bool) projectProxy;\\n    // Proxy mapping\\n    mapping(address => bool) proxyAddress;\\n  }\\n\\n  struct ExtraStorage {\\n    // Counters\\n    CountersUpgradeable.Counter _tokenIdTracker;\\n    CountersUpgradeable.Counter _supplyTracker;\\n  }\\n\\n  struct StagedInit {\\n    bool stage1Initialized;\\n    bool diamondInitialized;\\n    bool adminInitialized;\\n    bool royaltiesInitialized;\\n    bool approvalsInitialized;\\n  }\\n\\n  bytes32 constant CLEAR_ADDRESS_MASK = bytes32(uint256(0xffffffffffffffffffffffff));\\n  bytes32 constant CLEAR_SELECTOR_MASK = bytes32(uint256(0xffffffff << 224));\\n  bytes32 constant CLEAR_SELECTOR = CLEAR_ADDRESS_MASK | CLEAR_SELECTOR_MASK;\\n  bytes32 constant SELECTOR_SIZE = bytes32(uint256(0xffffffff << 224));\\n  bytes32 constant SELECTOR_SHIFT =\\n    bytes32(uint256(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff) << 224);\\n  bytes32 constant SELECTOR_MASK = CLEAR_ADDRESS_MASK | SELECTOR_SIZE;\\n  bytes32 constant SELECTOR_OFFSET = bytes32(uint256(0xffffffff << 224) >> 1);\\n  bytes32 constant DIAMOND_STORAGE_OFFSET = bytes32(uint256(0xffffffff << 224) >> 2);\\n  bytes32 constant DIAMOND_STORAGE_SIZE = bytes32(uint256(0xffffffff << 224) >> 3);\\n  bytes32 constant DIAMOND_STORAGE_MASK = CLEAR_ADDRESS_MASK | DIAMOND_STORAGE_SIZE;\\n  bytes32 constant DIAMOND_STORAGE_SHIFT =\\n    bytes32(uint256(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff) << 224) >> 4;\\n  bytes32 constant DIAMOND_STORAGE = DIAMOND_STORAGE_OFFSET | DIAMOND_STORAGE_SIZE;\\n\\n  function extraStorage() internal pure returns (ExtraStorage storage ex) {\\n    bytes32 position = EXTRAAF_STORAGE_POSITION;\\n    assembly {\\n      ex.slot := position\\n    }\\n  }\\n\\n  function diamondDapesStorage() internal pure returns (DiamondDapesStruct storage dds) {\\n    bytes32 position = DIAMOND_DAPES_STORAGE_POSITION;\\n    assembly {\\n      dds.slot := position\\n    }\\n  }\\n\\n  function adminStorage() internal pure returns (AdminStorage storage aStore) {\\n    bytes32 position = AFADMIN_STORAGE_POSITION;\\n    assembly {\\n      aStore.slot := position\\n    }\\n  }\\n\\n  /*\\n    function enforceIsAdmin() internal view returns (AdminStorage storage aStore) {\\n        require(msg.sender == adminStorage().admin, \\\"Must be admin\\\");\\n    }\\n*/\\n  function stagedInitStorage() internal pure returns (StagedInit storage sInit) {\\n    bytes32 position = STAGED_INIT_STORAGE_POSITION;\\n    assembly {\\n      sInit.slot := position\\n    }\\n  }\\n\\n  function setAddress(address _address) internal {\\n    DiamondDapesStruct storage diamondDapesStruct = diamondDapesStorage();\\n    diamondDapesStruct.libAddress = _address;\\n  }\\n\\n  function getAddress() internal view returns (address) {\\n    DiamondDapesStruct storage diamondDapesStruct = diamondDapesStorage();\\n    return diamondDapesStruct.libAddress;\\n  }\\n\\n  // Function to set a proxy address\\n  function setProxy(address _proxyAddress) internal {\\n    LibDiamond.enforceIsContractOwner();\\n    adminStorage().proxyAddress[_proxyAddress] = true;\\n  }\\n\\n  // Function to remove a proxy address\\n  function removeProxy(address _proxyAddress) internal {\\n    LibDiamond.enforceIsContractOwner();\\n    delete adminStorage().proxyAddress[_proxyAddress];\\n  }\\n\\n  // Function to activate a proxy\\n  function activateProxy(address _proxyAddress) internal {\\n    require(adminStorage().proxyAddress[_proxyAddress], \\\"Proxy address not found\\\");\\n    adminStorage().proxyAddress[_proxyAddress] = true;\\n  }\\n\\n  // Function to deactivate a proxy\\n  function deactivateProxy(address _proxyAddress) internal {\\n    require(adminStorage().proxyAddress[_proxyAddress], \\\"Proxy address not found\\\");\\n    adminStorage().proxyAddress[_proxyAddress] = false;\\n  }\\n}\\n\"\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_baseURI_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"uriPrefix_\",\"type\":\"string\"}],\"name\":\"_setPrefixBaseURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_admins\",\"type\":\"address[]\"}],\"name\":\"addAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"freezeMetadata\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isBurnClaimActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isPublicSaleActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"removeAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"facet_\",\"type\":\"address[]\"}],\"name\":\"setAllowedFacets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_newBaseURI\",\"type\":\"string\"}],\"name\":\"setBaseURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_batchSizePerTx\",\"type\":\"uint8\"}],\"name\":\"setBatchSizePerTx\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_burnClaimActive\",\"type\":\"bool\"}],\"name\":\"setBurnClaimState\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_hiddenMetadataUri\",\"type\":\"string\"}],\"name\":\"setHiddenMetadataUri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_batchEndID\",\"type\":\"uint256\"}],\"name\":\"setMintBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_isBatchMintActive\",\"type\":\"bool\"}],\"name\":\"setMintBatchActive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newINftAddress\",\"type\":\"address\"}],\"name\":\"setNftAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_payoutAddresses\",\"type\":\"address[]\"}],\"name\":\"setPayoutAddresses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_publicPrice\",\"type\":\"uint256\"}],\"name\":\"setPublicPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_saleActiveState\",\"type\":\"bool\"}],\"name\":\"setPublicSaleState\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_state\",\"type\":\"bool\"}],\"name\":\"setRevealed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokensPerBatch\",\"type\":\"uint256\"}],\"name\":\"setTokensPerBatch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_totalRevealed\",\"type\":\"uint256\"}],\"name\":\"setTotalRevealed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_uriPrefix\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_uriSuffix\",\"type\":\"string\"}],\"name\":\"setUriAttributes\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_uriPrefix\",\"type\":\"string\"}],\"name\":\"setUriPrefix\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_uriSuffix\",\"type\":\"string\"}],\"name\":\"setUriSuffix\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_version\",\"type\":\"string\"}],\"name\":\"setVersion\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toggleBurnClaim\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"togglePublicSale\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"toggleTokenBurn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "AdminFacet", "CompilerVersion": "v0.8.20+commit.a1b79de6", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "BSD-3-Clause", "Proxy": "0", "Implementation": "", "SwarmSource": ""}