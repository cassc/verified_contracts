{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IAccessControl} from \\\"@openzeppelin/contracts/access/IAccessControl.sol\\\";\\nimport {ContextUpgradeable} from \\\"../utils/ContextUpgradeable.sol\\\";\\nimport {ERC165Upgradeable} from \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControl, ERC165Upgradeable {\\n    struct RoleData {\\n        mapping(address account => bool) hasRole;\\n        bytes32 adminRole;\\n    }\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n\\n    /// @custom:storage-location erc7201:openzeppelin.storage.AccessControl\\n    struct AccessControlStorage {\\n        mapping(bytes32 role => RoleData) _roles;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.AccessControl\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant AccessControlStorageLocation = 0x02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b626800;\\n\\n    function _getAccessControlStorage() private pure returns (AccessControlStorage storage $) {\\n        assembly {\\n            $.slot := AccessControlStorageLocation\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with an {AccessControlUnauthorizedAccount} error including the required role.\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    function __AccessControl_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControl_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual returns (bool) {\\n        AccessControlStorage storage $ = _getAccessControlStorage();\\n        return $._roles[role].hasRole[account];\\n    }\\n\\n    /**\\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `_msgSender()`\\n     * is missing `role`. Overriding this function changes the behavior of the {onlyRole} modifier.\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `account`\\n     * is missing `role`.\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert AccessControlUnauthorizedAccount(account, role);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual returns (bytes32) {\\n        AccessControlStorage storage $ = _getAccessControlStorage();\\n        return $._roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `callerConfirmation`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address callerConfirmation) public virtual {\\n        if (callerConfirmation != _msgSender()) {\\n            revert AccessControlBadConfirmation();\\n        }\\n\\n        _revokeRole(role, callerConfirmation);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        AccessControlStorage storage $ = _getAccessControlStorage();\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        $._roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Attempts to grant `role` to `account` and returns a boolean indicating if `role` was granted.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual returns (bool) {\\n        AccessControlStorage storage $ = _getAccessControlStorage();\\n        if (!hasRole(role, account)) {\\n            $._roles[role].hasRole[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Attempts to revoke `role` to `account` and returns a boolean indicating if `role` was revoked.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual returns (bool) {\\n        AccessControlStorage storage $ = _getAccessControlStorage();\\n        if (hasRole(role, account)) {\\n            $._roles[role].hasRole[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {ContextUpgradeable} from \\\"../utils/ContextUpgradeable.sol\\\";\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    /// @custom:storage-location erc7201:openzeppelin.storage.Ownable\\n    struct OwnableStorage {\\n        address _owner;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Ownable\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant OwnableStorageLocation = 0x9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300;\\n\\n    function _getOwnableStorage() private pure returns (OwnableStorage storage $) {\\n        assembly {\\n            $.slot := OwnableStorageLocation\\n        }\\n    }\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    function __Ownable_init(address initialOwner) internal onlyInitializing {\\n        __Ownable_init_unchained(initialOwner);\\n    }\\n\\n    function __Ownable_init_unchained(address initialOwner) internal onlyInitializing {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        OwnableStorage storage $ = _getOwnableStorage();\\n        return $._owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        OwnableStorage storage $ = _getOwnableStorage();\\n        address oldOwner = $._owner;\\n        $._owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Storage of the initializable contract.\\n     *\\n     * It's implemented on a custom ERC-7201 namespace to reduce the risk of storage collisions\\n     * when using with upgradeable contracts.\\n     *\\n     * @custom:storage-location erc7201:openzeppelin.storage.Initializable\\n     */\\n    struct InitializableStorage {\\n        /**\\n         * @dev Indicates that the contract has been initialized.\\n         */\\n        uint64 _initialized;\\n        /**\\n         * @dev Indicates that the contract is in the process of being initialized.\\n         */\\n        bool _initializing;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Initializable\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant INITIALIZABLE_STORAGE = 0xf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00;\\n\\n    /**\\n     * @dev The contract is already initialized.\\n     */\\n    error InvalidInitialization();\\n\\n    /**\\n     * @dev The contract is not initializing.\\n     */\\n    error NotInitializing();\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint64 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that in the context of a constructor an `initializer` may be invoked any\\n     * number of times. This behavior in the constructor can be useful during testing and is not expected to be used in\\n     * production.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        // Cache values to avoid duplicated sloads\\n        bool isTopLevelCall = !$._initializing;\\n        uint64 initialized = $._initialized;\\n\\n        // Allowed calls:\\n        // - initialSetup: the contract is not in the initializing state and no previous version was\\n        //                 initialized\\n        // - construction: the contract is initialized at version 1 (no reininitialization) and the\\n        //                 current contract is just being deployed\\n        bool initialSetup = initialized == 0 && isTopLevelCall;\\n        bool construction = initialized == 1 && address(this).code.length == 0;\\n\\n        if (!initialSetup && !construction) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = 1;\\n        if (isTopLevelCall) {\\n            $._initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            $._initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: Setting the version to 2**64 - 1 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint64 version) {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing || $._initialized >= version) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = version;\\n        $._initializing = true;\\n        _;\\n        $._initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        _checkInitializing();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Reverts if the contract is not in an initializing state. See {onlyInitializing}.\\n     */\\n    function _checkInitializing() internal view virtual {\\n        if (!_isInitializing()) {\\n            revert NotInitializing();\\n        }\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing) {\\n            revert InvalidInitialization();\\n        }\\n        if ($._initialized != type(uint64).max) {\\n            $._initialized = type(uint64).max;\\n            emit Initialized(type(uint64).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint64) {\\n        return _getInitializableStorage()._initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _getInitializableStorage()._initializing;\\n    }\\n\\n    /**\\n     * @dev Returns a pointer to the storage namespace.\\n     */\\n    // solhint-disable-next-line var-name-mixedcase\\n    function _getInitializableStorage() private pure returns (InitializableStorage storage $) {\\n        assembly {\\n            $.slot := INITIALIZABLE_STORAGE\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\nimport {Initializable} from \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165 {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    /// @custom:storage-location erc7201:openzeppelin.storage.ReentrancyGuard\\n    struct ReentrancyGuardStorage {\\n        uint256 _status;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.ReentrancyGuard\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant ReentrancyGuardStorageLocation = 0x9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f00;\\n\\n    function _getReentrancyGuardStorage() private pure returns (ReentrancyGuardStorage storage $) {\\n        assembly {\\n            $.slot := ReentrancyGuardStorageLocation\\n        }\\n    }\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\\n        $._status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if ($._status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        $._status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        $._status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\\n        return $._status == ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/IAccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev The `account` is missing a role.\\n     */\\n    error AccessControlUnauthorizedAccount(address account, bytes32 neededRole);\\n\\n    /**\\n     * @dev The caller of a function is not the expected one.\\n     *\\n     * NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\\n     */\\n    error AccessControlBadConfirmation();\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `callerConfirmation`.\\n     */\\n    function renounceRole(bytes32 role, address callerConfirmation) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/interfaces/draft-IERC1822.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822Proxiable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/proxy/beacon/IBeacon.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {UpgradeableBeacon} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/ERC1967/ERC1967Utils.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IBeacon} from \\\"../beacon/IBeacon.sol\\\";\\nimport {Address} from \\\"../../utils/Address.sol\\\";\\nimport {StorageSlot} from \\\"../../utils/StorageSlot.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n */\\nlibrary ERC1967Utils {\\n    // We re-declare ERC-1967 events here because they can't be used directly from IERC1967.\\n    // This will be fixed in Solidity 0.8.21. At that point we should remove these events.\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Emitted when the beacon is changed.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1.\\n     */\\n    // solhint-disable-next-line private-vars-leading-underscore\\n    bytes32 internal constant IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev The `implementation` of the proxy is invalid.\\n     */\\n    error ERC1967InvalidImplementation(address implementation);\\n\\n    /**\\n     * @dev The `admin` of the proxy is invalid.\\n     */\\n    error ERC1967InvalidAdmin(address admin);\\n\\n    /**\\n     * @dev The `beacon` of the proxy is invalid.\\n     */\\n    error ERC1967InvalidBeacon(address beacon);\\n\\n    /**\\n     * @dev An upgrade function sees `msg.value > 0` that may be lost.\\n     */\\n    error ERC1967NonPayable();\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function getImplementation() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        if (newImplementation.code.length == 0) {\\n            revert ERC1967InvalidImplementation(newImplementation);\\n        }\\n        StorageSlot.getAddressSlot(IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Performs implementation upgrade with additional setup call if data is nonempty.\\n     * This function is payable only if the setup call is performed, otherwise `msg.value` is rejected\\n     * to avoid stuck value in the contract.\\n     *\\n     * Emits an {IERC1967-Upgraded} event.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n\\n        if (data.length > 0) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        } else {\\n            _checkNonPayable();\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1.\\n     */\\n    // solhint-disable-next-line private-vars-leading-underscore\\n    bytes32 internal constant ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Returns the current admin.\\n     *\\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using\\n     * the https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\\n     * `0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103`\\n     */\\n    function getAdmin() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        if (newAdmin == address(0)) {\\n            revert ERC1967InvalidAdmin(address(0));\\n        }\\n        StorageSlot.getAddressSlot(ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {IERC1967-AdminChanged} event.\\n     */\\n    function changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.beacon\\\" subtracted by 1.\\n     */\\n    // solhint-disable-next-line private-vars-leading-underscore\\n    bytes32 internal constant BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function getBeacon() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        if (newBeacon.code.length == 0) {\\n            revert ERC1967InvalidBeacon(newBeacon);\\n        }\\n\\n        StorageSlot.getAddressSlot(BEACON_SLOT).value = newBeacon;\\n\\n        address beaconImplementation = IBeacon(newBeacon).implementation();\\n        if (beaconImplementation.code.length == 0) {\\n            revert ERC1967InvalidImplementation(beaconImplementation);\\n        }\\n    }\\n\\n    /**\\n     * @dev Change the beacon and trigger a setup call if data is nonempty.\\n     * This function is payable only if the setup call is performed, otherwise `msg.value` is rejected\\n     * to avoid stuck value in the contract.\\n     *\\n     * Emits an {IERC1967-BeaconUpgraded} event.\\n     *\\n     * CAUTION: Invoking this function has no effect on an instance of {BeaconProxy} since v5, since\\n     * it uses an immutable beacon without looking at the value of the ERC-1967 beacon slot for\\n     * efficiency.\\n     */\\n    function upgradeBeaconToAndCall(address newBeacon, bytes memory data) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n\\n        if (data.length > 0) {\\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\\n        } else {\\n            _checkNonPayable();\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts if `msg.value` is not zero. It can be used to avoid `msg.value` stuck in the contract\\n     * if an upgrade doesn't perform an initialization call.\\n     */\\n    function _checkNonPayable() private {\\n        if (msg.value > 0) {\\n            revert ERC1967NonPayable();\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/proxy/utils/UUPSUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC1822Proxiable} from \\\"../../interfaces/draft-IERC1822.sol\\\";\\nimport {ERC1967Utils} from \\\"../ERC1967/ERC1967Utils.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n */\\nabstract contract UUPSUpgradeable is IERC1822Proxiable {\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev The version of the upgrade interface of the contract. If this getter is missing, both `upgradeTo(address)`\\n     * and `upgradeToAndCall(address,bytes)` are present, and `upgradeTo` must be used if no function should be called,\\n     * while `upgradeToAndCall` will invoke the `receive` function if the second argument is the empty byte string.\\n     * If the getter returns `\\\"5.0.0\\\"`, only `upgradeToAndCall(address,bytes)` is present, and the second argument must\\n     * be the empty byte string if no function should be called, making it impossible to invoke the `receive` function\\n     * during an upgrade.\\n     */\\n    string public constant UPGRADE_INTERFACE_VERSION = \\\"5.0.0\\\";\\n\\n    /**\\n     * @dev The call is from an unauthorized context.\\n     */\\n    error UUPSUnauthorizedCallContext();\\n\\n    /**\\n     * @dev The storage `slot` is unsupported as a UUID.\\n     */\\n    error UUPSUnsupportedProxiableUUID(bytes32 slot);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        _checkProxy();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\n     * callable on the implementing contract but not through proxies.\\n     */\\n    modifier notDelegated() {\\n        _checkNotDelegated();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\\n     * implementation. It is used to validate the implementation's compatibility when performing an upgrade.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\n     */\\n    function proxiableUUID() external view virtual notDelegated returns (bytes32) {\\n        return ERC1967Utils.IMPLEMENTATION_SLOT;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     *\\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) public payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, data);\\n    }\\n\\n    /**\\n     * @dev Reverts if the execution is not performed via delegatecall or the execution\\n     * context is not of a proxy with an ERC1967-compliant implementation pointing to self.\\n     * See {_onlyProxy}.\\n     */\\n    function _checkProxy() internal view virtual {\\n        if (\\n            address(this) == __self || // Must be called through delegatecall\\n            ERC1967Utils.getImplementation() != __self // Must be called through an active proxy\\n        ) {\\n            revert UUPSUnauthorizedCallContext();\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts if the execution is performed via delegatecall.\\n     * See {notDelegated}.\\n     */\\n    function _checkNotDelegated() internal view virtual {\\n        if (address(this) != __self) {\\n            // Must not be called through delegatecall\\n            revert UUPSUnauthorizedCallContext();\\n        }\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n\\n    /**\\n     * @dev Performs an implementation upgrade with a security check for UUPS proxies, and additional setup call.\\n     *\\n     * As a security check, {proxiableUUID} is invoked in the new implementation, and the return value\\n     * is expected to be the implementation slot in ERC1967.\\n     *\\n     * Emits an {IERC1967-Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(address newImplementation, bytes memory data) private {\\n        try IERC1822Proxiable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n            if (slot != ERC1967Utils.IMPLEMENTATION_SLOT) {\\n                revert UUPSUnsupportedProxiableUUID(slot);\\n            }\\n            ERC1967Utils.upgradeToAndCall(newImplementation, data);\\n        } catch {\\n            // The implementation is not UUPS\\n            revert ERC1967Utils.ERC1967InvalidImplementation(newImplementation);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\nimport {IERC20Permit} from \\\"../extensions/IERC20Permit.sol\\\";\\nimport {Address} from \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev An operation with an ERC20 token failed.\\n     */\\n    error SafeERC20FailedOperation(address token);\\n\\n    /**\\n     * @dev Indicates a failed `decreaseAllowance` request.\\n     */\\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        forceApprove(token, spender, oldAllowance + value);\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\\n     * value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\\n        unchecked {\\n            uint256 currentAllowance = token.allowance(address(this), spender);\\n            if (currentAllowance < requestedDecrease) {\\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\\n            }\\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data);\\n        if (returndata.length != 0 && !abi.decode(returndata, (bool))) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return success && (returndata.length == 0 || abi.decode(returndata, (bool))) && address(token).code.length > 0;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error AddressInsufficientBalance(address account);\\n\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedInnerCall();\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            revert FailedInnerCall();\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {FailedInnerCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\\n     * unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {FailedInnerCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert FailedInnerCall();\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS\\n    }\\n\\n    /**\\n     * @dev The signature derives the `address(0)`.\\n     */\\n    error ECDSAInvalidSignature();\\n\\n    /**\\n     * @dev The signature has an invalid length.\\n     */\\n    error ECDSAInvalidSignatureLength(uint256 length);\\n\\n    /**\\n     * @dev The signature has an S value that is in the upper half order.\\n     */\\n    error ECDSAInvalidSignatureS(bytes32 s);\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with `signature` or an error. This will not\\n     * return address(0) without also returning an error description. Errors are documented using an enum (error type)\\n     * and a bytes32 providing additional information about the error.\\n     *\\n     * If no error is returned, then the address can be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM precompile allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {MessageHashUtils-toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError, bytes32) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength, bytes32(signature.length));\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM precompile allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {MessageHashUtils-toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, signature);\\n        _throwError(error, errorArg);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     */\\n    function tryRecover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address, RecoverError, bytes32) {\\n        unchecked {\\n            bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n            // We do not check for an overflow here since the shift operation results in 0 or 1.\\n            uint8 v = uint8((uint256(vs) >> 255) + 27);\\n            return tryRecover(hash, v, r, s);\\n        }\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     */\\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, r, vs);\\n        _throwError(error, errorArg);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError, bytes32) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \u00f7 2 + 1, and for v in (302): v \u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS, s);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature, bytes32(0));\\n        }\\n\\n        return (signer, RecoverError.NoError, bytes32(0));\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, v, r, s);\\n        _throwError(error, errorArg);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Optionally reverts with the corresponding custom error according to the `error` argument provided.\\n     */\\n    function _throwError(RecoverError error, bytes32 errorArg) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert ECDSAInvalidSignature();\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert ECDSAInvalidSignatureLength(uint256(errorArg));\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert ECDSAInvalidSignatureS(errorArg);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/StorageSlot.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(newImplementation.code.length > 0);\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/whitemarket/WhiteEventV2.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: Unlicense\\r\\npragma solidity ^0.8.20;\\r\\n\\r\\ncontract WhiteEvent {\\r\\n    event NewOffer(\\r\\n        uint256 id,\\r\\n        uint8 offerType,\\r\\n        bytes32 tokenId,\\r\\n        address exToken,\\r\\n        uint256 amount,\\r\\n        uint256 value,\\r\\n        uint256 collateral,\\r\\n        bool fullMatch,\\r\\n        address doer,\\r\\n        string _additional\\r\\n    );\\r\\n    event NewToken(bytes32 tokenId, uint256 settleDuration);\\r\\n    event NewOrder(\\r\\n        uint256 id,\\r\\n        uint256 offerId,\\r\\n        uint256 amount,\\r\\n        address seller,\\r\\n        address buyer,\\r\\n        string _additional\\r\\n    );\\r\\n\\r\\n    event SettleFilled(\\r\\n        uint256 orderId,\\r\\n        uint256 value,\\r\\n        uint256 fee,\\r\\n        address doer\\r\\n    );\\r\\n\\r\\n    event SellerSettleFilledEnsure(uint256 orderId, address doer);\\r\\n\\r\\n    event SettleCancelled(\\r\\n        uint256 orderId,\\r\\n        uint256 value,\\r\\n        uint256 fee,\\r\\n        address doer\\r\\n    );\\r\\n\\r\\n    event CancelOrder(uint256 orderId, address doer);\\r\\n    event CancelOffer(\\r\\n        uint256 offerId,\\r\\n        uint256 refundValue,\\r\\n        uint256 refundFee,\\r\\n        address doer\\r\\n    );\\r\\n\\r\\n    event UpdateAcceptedTokens(address[] tokens, bool isAccepted);\\r\\n\\r\\n    event CloseOffer(uint256 offerId, uint256 refundAmount);\\r\\n\\r\\n    event UpdateConfig(\\r\\n        address oldFeeWallet,\\r\\n        uint256 oldFeeSettle,\\r\\n        uint256 oldFeeRefund,\\r\\n        uint256 oldPledgeRate,\\r\\n        address newFeeWallet,\\r\\n        uint256 newFeeSettle,\\r\\n        uint256 newFeeRefund,\\r\\n        uint256 newPledgeRate\\r\\n    );\\r\\n\\r\\n    event UpdateConf(\\r\\n        address newFeeWallet,\\r\\n        uint256 newFeeDefault,\\r\\n        uint256 newPledgeRate,\\r\\n        uint256 newFeeSellerSettle,\\r\\n        uint256 newFeeBuyerSettle,\\r\\n        uint256 newFeeSellerRefund,\\r\\n        uint256 newFeeBuyerRefund\\r\\n    );\\r\\n\\r\\n    event TokenToSettlePhase(\\r\\n        bytes32 tokenId,\\r\\n        address token,\\r\\n        uint256 settleRate,\\r\\n        uint256 settleTime\\r\\n    );\\r\\n    event UpdateTokenStatus(bytes32 tokenId, uint8 oldValue, uint8 newValue);\\r\\n    event TokenForceCancelSettlePhase(bytes32 tokenId);\\r\\n\\r\\n    event Settle2Steps(uint256 orderId, bytes32 hash, address doer);\\r\\n\\r\\n    event UpdateTokenSettleDuration(\\r\\n        bytes32 tokenId,\\r\\n        uint48 oldValue,\\r\\n        uint48 newValue\\r\\n    );\\r\\n\\r\\n    event GrantOperatorRole(address account);\\r\\n\\r\\n    event UpdateOwner(address oldOwner, address newOwner);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/whitemarket/WhiteMarketV2.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: Unlicense\\r\\npragma solidity ^0.8.20;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/proxy/utils/UUPSUpgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\nimport \\\"./WhiteStructV2.sol\\\";\\r\\nimport \\\"./WhiteEventV2.sol\\\";\\r\\n\\r\\ncontract WhiteMarketV2 is\\r\\n    Initializable,\\r\\n    OwnableUpgradeable,\\r\\n    AccessControlUpgradeable,\\r\\n    ReentrancyGuardUpgradeable,\\r\\n    WhiteStruct,\\r\\n    WhiteEvent\\r\\n{\\r\\n    using SafeERC20 for IERC20;\\r\\n    bytes32 public constant OPERATOR_ROLE = keccak256(\\\"OPERATOR_ROLE\\\");\\r\\n\\r\\n    bytes32 private constant PreMarketStorageLocation =\\r\\n        0xb5aac87cae642859b83c7d94636e91b606a9ae6a75d81192cc547439212e0500;\\r\\n\\r\\n    // PreMarket 0xb5aac87cae642859b83c7d94636e91b606a9ae6a75d81192cc547439212e0500  keccak256(abi.encode(uint256(keccak256(\\\"loot.storage.MooPerMarkets\\\")) - 1)) & ~bytes32(uint256(0xff))\\r\\n    // PointMarket 0x9d7f8eff5fed9f803af89108ba4913875df81349f49ac207674dafaeaf021100 keccak256(abi.encode(uint256(keccak256(\\\"loot.storage.PointMarkets\\\")) - 1)) & ~bytes32(uint256(0xff))\\r\\n\\r\\n    function _getOwnStorage()\\r\\n        private\\r\\n        pure\\r\\n        returns (PreMarketStorage storage $)\\r\\n    {\\r\\n        assembly {\\r\\n            $.slot := PreMarketStorageLocation\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function initialize() public initializer {\\r\\n        __Ownable_init(msg.sender);\\r\\n        __AccessControl_init_unchained();\\r\\n        _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\\r\\n        // init value\\r\\n        PreMarketStorage storage $ = _getOwnStorage();\\r\\n        $.conf.pledgeRate = WEI6; // 1:1\\r\\n        $.conf.feeWallet = owner();\\r\\n        $.conf.feeDefault = WEI6 / 10; //10%\\r\\n        $.conf.feeBuyerRefund = WEI6 / 100; // 1%\\r\\n        $.conf.feeSellerRefund = WEI6 / 100; //1%\\r\\n        $.conf.feeSellerSettle = WEI6 / 40; // 2.5%\\r\\n        $.conf.feeBuyerSettle = WEI6 / 40; // 2.5%\\r\\n    }\\r\\n\\r\\n    function transferOwnershipAndAdminRole(\\r\\n        address newOwner\\r\\n    ) external onlyRole(DEFAULT_ADMIN_ROLE) {\\r\\n        require(\\r\\n            newOwner != address(0),\\r\\n            \\\"Ownable: new owner is the zero address\\\"\\r\\n        );\\r\\n        transferOwnership(newOwner);\\r\\n        grantRole(DEFAULT_ADMIN_ROLE, newOwner);\\r\\n        revokeRole(DEFAULT_ADMIN_ROLE, msg.sender);\\r\\n        emit UpdateOwner(msg.sender, newOwner);\\r\\n    }\\r\\n\\r\\n    function grantOperatorRole(\\r\\n        address account\\r\\n    ) external onlyRole(DEFAULT_ADMIN_ROLE) {\\r\\n        require(\\r\\n            account != address(0),\\r\\n            \\\"Ownable: new owner is the zero address\\\"\\r\\n        );\\r\\n        grantRole(OPERATOR_ROLE, account);\\r\\n        emit GrantOperatorRole(account);\\r\\n    }\\r\\n\\r\\n    ///////////////////////////\\r\\n    ////// SYSTEM ACTION //////\\r\\n    ///////////////////////////\\r\\n\\r\\n    function createToken(\\r\\n        bytes32 tokenId,\\r\\n        uint48 settleDuration\\r\\n    ) external onlyRole(OPERATOR_ROLE) {\\r\\n        PreMarketStorage storage $ = _getOwnStorage();\\r\\n        require(settleDuration >= 24 * 60 * 60, \\\"Minimum 24h for settling\\\");\\r\\n        Token storage _token = $.tokens[tokenId];\\r\\n\\r\\n        _token.settleDuration = settleDuration;\\r\\n        _token.status = STATUS_TOKEN_ACTIVE;\\r\\n        emit NewToken(tokenId, settleDuration);\\r\\n    }\\r\\n\\r\\n    function tokenToSettlePhase(\\r\\n        bytes32 tokenId,\\r\\n        address tokenAddress,\\r\\n        uint152 settleRate // \u8bbe\u7f6e\u79ef\u5206\u5151\u4ee3\u5e01\u7684\u6c47\u7387   // \u6bcf1000000\u5206\u5151\u591a\u5c11\u4e2a\u4ee3\u5e01\\r\\n    ) external onlyRole(OPERATOR_ROLE) {\\r\\n        PreMarketStorage storage $ = _getOwnStorage();\\r\\n        Token storage _token = $.tokens[tokenId];\\r\\n        require(settleRate > 0, \\\"Invalid Settle Rate\\\");\\r\\n        require(_token.status != STATUS_TOKEN_SETTLE, \\\"Invalid Token Status\\\");\\r\\n        _token.token = tokenAddress;\\r\\n        _token.settleRate = settleRate;\\r\\n        // update token settle status & time\\r\\n        _token.status = STATUS_TOKEN_SETTLE;\\r\\n        _token.settleTime = uint48(block.timestamp);\\r\\n\\r\\n        emit TokenToSettlePhase(\\r\\n            tokenId,\\r\\n            tokenAddress,\\r\\n            settleRate,\\r\\n            block.timestamp\\r\\n        );\\r\\n    }\\r\\n\\r\\n    // \u6253\u5f00\u4ee3\u5e01\u4e3a\u53ef\u4ea4\u6613\u72b6\u6001\\r\\n    function tokenToggleActivation(\\r\\n        bytes32 tokenId\\r\\n    ) external onlyRole(OPERATOR_ROLE) {\\r\\n        PreMarketStorage storage $ = _getOwnStorage();\\r\\n        Token storage _token = $.tokens[tokenId];\\r\\n        uint8 fromStatus = _token.status;\\r\\n        uint8 toStatus = fromStatus == STATUS_TOKEN_ACTIVE\\r\\n            ? STATUS_TOKEN_INACTIVE\\r\\n            : STATUS_TOKEN_ACTIVE;\\r\\n\\r\\n        require(\\r\\n            _token.status != STATUS_TOKEN_SETTLE,\\r\\n            \\\"Cannot Change Token Status\\\"\\r\\n        );\\r\\n\\r\\n        _token.status = toStatus;\\r\\n        emit UpdateTokenStatus(tokenId, fromStatus, toStatus);\\r\\n    }\\r\\n\\r\\n    // in case wrong setting for settle \u5f3a\u5236\u53d6\u6d88\u4ee3\u5e01\u7ed3\u7b97\\r\\n    function tokenForceCancelSettlePhase(\\r\\n        bytes32 tokenId\\r\\n    ) external onlyRole(OPERATOR_ROLE) {\\r\\n        PreMarketStorage storage $ = _getOwnStorage();\\r\\n        Token storage _token = $.tokens[tokenId];\\r\\n        require(_token.status == STATUS_TOKEN_SETTLE, \\\"Invalid Token Status\\\");\\r\\n        _token.status = STATUS_TOKEN_INACTIVE;\\r\\n        emit TokenForceCancelSettlePhase(tokenId);\\r\\n    }\\r\\n\\r\\n    //\u8bbe\u7f6e\u7ed3\u7b97\u7684\u5468\u671f\\r\\n    function updateSettleDuration(\\r\\n        bytes32 tokenId,\\r\\n        uint48 newValue\\r\\n    ) external onlyRole(OPERATOR_ROLE) {\\r\\n        PreMarketStorage storage $ = _getOwnStorage();\\r\\n        require(newValue >= 24 * 60 * 60, \\\"Minimum 24h for settling\\\");\\r\\n        Token storage _token = $.tokens[tokenId];\\r\\n        uint48 oldValue = _token.settleDuration;\\r\\n        _token.settleDuration = newValue;\\r\\n        emit UpdateTokenSettleDuration(tokenId, oldValue, newValue);\\r\\n    }\\r\\n\\r\\n    // \u64cd\u4f5c\u5458\u53d6\u6d88\u8ba2\u5355  \u5f52\u8fd8\u62b5\u62bc\u7269\\r\\n    // force cancel order - by Operator\\r\\n    // refund for both seller & buyer\\r\\n    function forceCancelOrder(\\r\\n        uint256 orderId\\r\\n    ) public nonReentrant onlyRole(OPERATOR_ROLE) {\\r\\n        PreMarketStorage storage $ = _getOwnStorage();\\r\\n        Order storage order = $.orders[orderId];\\r\\n        Offer storage offer = $.offers[order.offerId];\\r\\n\\r\\n        require(order.status == STATUS_OFFER_OPEN, \\\"Invalid Order Status\\\");\\r\\n\\r\\n        // calculate refund\\r\\n        uint256 buyerRefundValue = (order.amount * offer.value) / offer.amount; // value\\r\\n        uint256 settleFee = (buyerRefundValue * $.conf.feeBuyerSettle) / WEI6;\\r\\n        buyerRefundValue += settleFee;\\r\\n\\r\\n        uint256 sellerRefundValue = (order.amount * offer.collateral) /\\r\\n            offer.amount; // collateral\\r\\n        address buyer = order.buyer;\\r\\n        address seller = order.seller;\\r\\n        // refund\\r\\n        if (offer.exToken == address(0)) {\\r\\n            // refund ETH\\r\\n            if (buyerRefundValue > 0 && buyer != address(0)) {\\r\\n                (bool success, ) = buyer.call{value: buyerRefundValue}(\\\"\\\");\\r\\n                require(success, \\\"Transfer Funds to Seller Fail\\\");\\r\\n            }\\r\\n            if (sellerRefundValue > 0 && seller != address(0)) {\\r\\n                (bool success, ) = seller.call{value: sellerRefundValue}(\\\"\\\");\\r\\n                require(success, \\\"Transfer Funds to Seller Fail\\\");\\r\\n            }\\r\\n        } else {\\r\\n            IERC20 iexToken = IERC20(offer.exToken);\\r\\n            if (buyerRefundValue > 0 && buyer != address(0)) {\\r\\n                iexToken.safeTransfer(buyer, buyerRefundValue);\\r\\n            }\\r\\n            if (sellerRefundValue > 0 && seller != address(0)) {\\r\\n                iexToken.safeTransfer(seller, sellerRefundValue);\\r\\n            }\\r\\n        }\\r\\n\\r\\n        order.status = STATUS_ORDER_CANCELLED;\\r\\n        emit CancelOrder(orderId, msg.sender);\\r\\n    }\\r\\n\\r\\n    // 2 steps settle:\\r\\n    // Tx1: Seller sending token to system vault/buyer\\r\\n    // Tx2: then Operator verify and settle to pay seller money+collateral\\r\\n    function settle2Steps(\\r\\n        uint256 orderId,\\r\\n        bytes32 hash\\r\\n    ) public nonReentrant onlyRole(OPERATOR_ROLE) {\\r\\n        PreMarketStorage storage $ = _getOwnStorage();\\r\\n        Order storage order = $.orders[orderId];\\r\\n        Offer storage offer = $.offers[order.offerId];\\r\\n        Token storage token = $.tokens[offer.tokenId];\\r\\n\\r\\n        // check condition\\r\\n        require(\\r\\n            token.status == STATUS_TOKEN_SETTLE ||\\r\\n                token.status == STATUS_TOKEN_ACTIVE,\\r\\n            \\\"Invalid Status\\\"\\r\\n        );\\r\\n\\r\\n        //require(token.settleRate > 0, \\\"Token Not Set\\\");\\r\\n\\r\\n        require(\\r\\n            order.status == STATUS_ORDER_SELLER_ENSURE ||\\r\\n                order.status == STATUS_ORDER_OPEN,\\r\\n            \\\"Invalid Order Status\\\"\\r\\n        );\\r\\n\\r\\n        uint256 collateral = (order.amount * offer.collateral) / offer.amount; // \u8ba1\u7b97\u51fa\u5f53\u524d\u8ba2\u5355\u62b5\u62bc\u4ef7\u503c\\r\\n        uint256 value = (order.amount * offer.value) / offer.amount; // \u8ba1\u7b97\u51fa\u8ba2\u5355\u91d1\u989d\\r\\n\\r\\n        // transfer liquid to seller\\r\\n        uint256 settleSellerFee = (value * $.conf.feeSellerSettle) / WEI6; // \u8ba1\u7b97\u51fa\u624b\u7eed\u8d39\\r\\n        uint256 totalValue = value + collateral - settleSellerFee; // \u8ba1\u7b97\u51fa\u603b\u989d\\r\\n        uint256 settleBuyerFee = (value * $.conf.feeBuyerSettle) / WEI6; // \u8ba1\u7b97\u51fa\u624b\u7eed\u8d39\\r\\n        uint256 totalFee = settleBuyerFee + settleSellerFee;\\r\\n        if (offer.exToken == address(0)) {\\r\\n            // by ETH\\r\\n            (bool success1, ) = order.seller.call{value: totalValue}(\\\"\\\");\\r\\n            (bool success2, ) = $.conf.feeWallet.call{value: totalFee}(\\\"\\\");\\r\\n            require(success1 && success2, \\\"Transfer Funds Fail\\\");\\r\\n        } else {\\r\\n            // by exToken\\r\\n            IERC20 iexToken = IERC20(offer.exToken);\\r\\n            iexToken.safeTransfer(order.seller, totalValue);\\r\\n            iexToken.safeTransfer($.conf.feeWallet, totalFee);\\r\\n        }\\r\\n\\r\\n        order.status = STATUS_ORDER_SETTLE_FILLED;\\r\\n\\r\\n        emit Settle2Steps(orderId, hash, msg.sender);\\r\\n        emit SettleFilled(orderId, totalValue, totalFee, msg.sender);\\r\\n    }\\r\\n\\r\\n    // \u6279\u91cf\u7ed3\u7b97\\r\\n    function settle2StepsBatch(\\r\\n        uint256[] memory orderIds,\\r\\n        bytes32[] memory hashes\\r\\n    ) external {\\r\\n        require(orderIds.length == hashes.length, \\\"Invalid Input\\\");\\r\\n        for (uint256 i = 0; i < orderIds.length; i++) {\\r\\n            settle2Steps(orderIds[i], hashes[i]);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /////////////////////////\\r\\n    ////// USER ACTION //////\\r\\n    /////////////////////////\\r\\n\\r\\n    // make a offer request\\r\\n    function newOffer(\\r\\n        uint8 offerType,\\r\\n        bytes32 tokenId,\\r\\n        uint256 amount,\\r\\n        uint256 value,\\r\\n        address exToken,\\r\\n        bool fullMatch,\\r\\n        string memory additional\\r\\n    ) external nonReentrant {\\r\\n        PreMarketStorage storage $ = _getOwnStorage();\\r\\n        Token storage token = $.tokens[tokenId];\\r\\n        require(token.status == STATUS_TOKEN_ACTIVE, \\\"Invalid Token\\\");\\r\\n        require(\\r\\n            exToken != address(0) && $.acceptedTokens[exToken],\\r\\n            \\\"Invalid Offer Token\\\"\\r\\n        );\\r\\n        require(amount > 0 && value > 0, \\\"Invalid Amount or Value\\\");\\r\\n        IERC20 iexToken = IERC20(exToken);\\r\\n        // collateral \u8ba1\u7b97\u62b5\u62bc\u7269\\r\\n        uint256 collateral = (value * $.conf.pledgeRate) / WEI6;\\r\\n\\r\\n        // transfer offer value (offer buy) or collateral (offer sell)\\r\\n        uint256 _transferAmount = offerType == OFFER_BUY ? value : collateral;\\r\\n        //\u521b\u5efa\u62a5\u4ef7 \u4f1a\u76f4\u63a5\u6536\u53d6buyer \u7684\u624b\u7eed\u8d39\\r\\n        if (offerType == OFFER_BUY) {\\r\\n            uint256 feeValue = (_transferAmount * $.conf.feeBuyerSettle) / WEI6;\\r\\n            _transferAmount += feeValue;\\r\\n        }\\r\\n        iexToken.safeTransferFrom(msg.sender, address(this), _transferAmount);\\r\\n\\r\\n        // create new offer\\r\\n        _newOffer(\\r\\n            offerType,\\r\\n            tokenId,\\r\\n            exToken,\\r\\n            amount,\\r\\n            value,\\r\\n            collateral,\\r\\n            fullMatch,\\r\\n            additional\\r\\n        );\\r\\n    }\\r\\n\\r\\n    // New offer in ETH\\r\\n    function newOfferETH(\\r\\n        uint8 offerType,\\r\\n        bytes32 tokenId,\\r\\n        uint256 amount,\\r\\n        uint256 value,\\r\\n        bool fullMatch,\\r\\n        string memory additional\\r\\n    ) external payable nonReentrant {\\r\\n        PreMarketStorage storage $ = _getOwnStorage();\\r\\n        Token storage token = $.tokens[tokenId];\\r\\n        require(token.status == STATUS_TOKEN_ACTIVE, \\\"Invalid Token\\\");\\r\\n        require(amount > 0 && value > 0, \\\"Invalid Amount or Value\\\");\\r\\n        // collateral\\r\\n        uint256 collateral = (value * $.conf.pledgeRate) / WEI6;\\r\\n\\r\\n        uint256 _ethAmount = offerType == OFFER_BUY ? value : collateral;\\r\\n        //\u521b\u5efa\u62a5\u4ef7 \u4f1a\u76f4\u63a5\u6536\u53d6buyer \u7684\u624b\u7eed\u8d39\\r\\n        if (offerType == OFFER_BUY) {\\r\\n            uint256 feeValue = (_ethAmount * $.conf.feeBuyerSettle) / WEI6;\\r\\n            _ethAmount += feeValue;\\r\\n        }\\r\\n\\r\\n        // \u68c0\u67e5\u63a5\u6536\u5230\u7684eth \u548c\u8ba1\u7b97\u7684\u662f\u5426\u76f8\u7b49\\r\\n        require(_ethAmount <= msg.value, \\\"Insufficient Funds\\\");\\r\\n        // create new offer\\r\\n        _newOffer(\\r\\n            offerType,\\r\\n            tokenId,\\r\\n            address(0),\\r\\n            amount,\\r\\n            value,\\r\\n            collateral,\\r\\n            fullMatch,\\r\\n            additional\\r\\n        );\\r\\n    }\\r\\n\\r\\n    // Helper function to execute common checks\\r\\n    function _validateCommonOfferConditions(\\r\\n        Offer storage offer,\\r\\n        Token storage token,\\r\\n        uint256 amount\\r\\n    ) internal view {\\r\\n        require(offer.status == STATUS_OFFER_OPEN, \\\"Invalid Offer Status\\\");\\r\\n        require(token.status == STATUS_TOKEN_ACTIVE, \\\"Invalid Token Status\\\");\\r\\n        require(amount > 0, \\\"Invalid Amount\\\");\\r\\n        require(\\r\\n            offer.amount - offer.filledAmount >= amount,\\r\\n            \\\"Insufficient Allocations\\\"\\r\\n        );\\r\\n        require(\\r\\n            offer.fullMatch == false || offer.amount == amount,\\r\\n            \\\"FullMatch required\\\"\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function _computeTransferAmount(\\r\\n        Offer storage offer,\\r\\n        uint256 amount\\r\\n    )\\r\\n        internal\\r\\n        view\\r\\n        returns (uint256 transferAmount, address buyer, address seller)\\r\\n    {\\r\\n        PreMarketStorage storage $ = _getOwnStorage();\\r\\n        uint256 amountRatio = offer.amount / amount;\\r\\n        if (offer.offerType == OFFER_BUY) {\\r\\n            transferAmount = offer.collateral / amountRatio;\\r\\n            buyer = offer.offeredBy;\\r\\n            seller = msg.sender;\\r\\n        } else {\\r\\n            transferAmount =\\r\\n                ((offer.value / amountRatio) * (WEI6 + $.conf.feeBuyerSettle)) /\\r\\n                WEI6;\\r\\n            buyer = msg.sender;\\r\\n            seller = offer.offeredBy;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // Single offer fill function\\r\\n    function fillOffer(\\r\\n        uint256 offerId,\\r\\n        uint256 amount,\\r\\n        string memory additional\\r\\n    ) external nonReentrant {\\r\\n        PreMarketStorage storage $ = _getOwnStorage();\\r\\n        Offer storage offer = $.offers[offerId];\\r\\n        Token storage token = $.tokens[offer.tokenId];\\r\\n\\r\\n        _validateCommonOfferConditions(offer, token, amount);\\r\\n        require(offer.exToken != address(0), \\\"Invalid Offer Token\\\");\\r\\n\\r\\n        (\\r\\n            uint256 transferAmount,\\r\\n            address buyer,\\r\\n            address seller\\r\\n        ) = _computeTransferAmount(offer, amount);\\r\\n        IERC20(offer.exToken).safeTransferFrom(\\r\\n            msg.sender,\\r\\n            address(this),\\r\\n            transferAmount\\r\\n        );\\r\\n\\r\\n        _fillOffer(offerId, amount, buyer, seller, additional);\\r\\n    }\\r\\n\\r\\n    // Batch offer fill function\\r\\n    function fillBatchOffer(\\r\\n        uint256[] memory offerIds,\\r\\n        uint256 totalAmount,\\r\\n        string memory additional\\r\\n    ) external nonReentrant {\\r\\n        require(\\r\\n            offerIds.length > 0 && offerIds.length <= 255,\\r\\n            \\\"Invalid number of offer IDs\\\"\\r\\n        );\\r\\n        require(totalAmount > 0, \\\"Invalid amount\\\");\\r\\n\\r\\n        PreMarketStorage storage $ = _getOwnStorage();\\r\\n        uint256 remainingAmount = totalAmount;\\r\\n\\r\\n        for (uint8 i = 0; i < offerIds.length; i++) {\\r\\n            Offer storage offer = $.offers[offerIds[i]];\\r\\n            Token storage token = $.tokens[offer.tokenId];\\r\\n\\r\\n            _validateCommonOfferConditions(\\r\\n                offer,\\r\\n                token,\\r\\n                offer.amount - offer.filledAmount\\r\\n            );\\r\\n            require(\\r\\n                remainingAmount > 0 &&\\r\\n                    remainingAmount >= offer.amount - offer.filledAmount,\\r\\n                \\\"Invalid Amount\\\"\\r\\n            );\\r\\n            require(offer.exToken != address(0), \\\"Invalid Offer Token\\\");\\r\\n\\r\\n            (\\r\\n                uint256 transferAmount,\\r\\n                address buyer,\\r\\n                address seller\\r\\n            ) = _computeTransferAmount(\\r\\n                    offer,\\r\\n                    offer.amount - offer.filledAmount\\r\\n                );\\r\\n            IERC20(offer.exToken).safeTransferFrom(\\r\\n                msg.sender,\\r\\n                address(this),\\r\\n                transferAmount\\r\\n            );\\r\\n\\r\\n            _fillOffer(\\r\\n                offerIds[i],\\r\\n                offer.amount - offer.filledAmount,\\r\\n                buyer,\\r\\n                seller,\\r\\n                additional\\r\\n            );\\r\\n            remainingAmount -= offer.amount - offer.filledAmount;\\r\\n\\r\\n            if (remainingAmount == 0) {\\r\\n                require(i == offerIds.length - 1, \\\"Invalid Fill Input\\\");\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // Single offer fill function for ETH\\r\\n    function fillOfferETH(\\r\\n        uint256 offerId,\\r\\n        uint256 amount,\\r\\n        string memory additional\\r\\n    ) external payable nonReentrant {\\r\\n        PreMarketStorage storage $ = _getOwnStorage();\\r\\n        Offer storage offer = $.offers[offerId];\\r\\n        Token storage token = $.tokens[offer.tokenId];\\r\\n\\r\\n        _validateCommonOfferConditions(offer, token, amount);\\r\\n        require(offer.exToken == address(0), \\\"Expected ETH offer\\\");\\r\\n\\r\\n        (\\r\\n            uint256 transferAmount,\\r\\n            address buyer,\\r\\n            address seller\\r\\n        ) = _computeTransferAmount(offer, amount);\\r\\n        require(msg.value >= transferAmount, \\\"Insufficient Funds\\\");\\r\\n\\r\\n        _fillOffer(offerId, amount, buyer, seller, additional);\\r\\n    }\\r\\n\\r\\n    // Batch offer fill function for ETH\\r\\n    function fillBatchOfferETH(\\r\\n        uint256[] memory offerIds,\\r\\n        uint256 totalAmount,\\r\\n        string memory additional\\r\\n    ) external payable nonReentrant {\\r\\n        require(\\r\\n            offerIds.length > 0 && offerIds.length <= 255,\\r\\n            \\\"Invalid number of offer IDs\\\"\\r\\n        );\\r\\n        require(totalAmount > 0, \\\"Invalid amount\\\");\\r\\n\\r\\n        PreMarketStorage storage $ = _getOwnStorage();\\r\\n        uint256 remainingAmount = totalAmount;\\r\\n        uint256 ethValue = msg.value;\\r\\n\\r\\n        for (uint8 i = 0; i < offerIds.length; i++) {\\r\\n            Offer storage offer = $.offers[offerIds[i]];\\r\\n            Token storage token = $.tokens[offer.tokenId];\\r\\n\\r\\n            _validateCommonOfferConditions(\\r\\n                offer,\\r\\n                token,\\r\\n                offer.amount - offer.filledAmount\\r\\n            );\\r\\n            require(offer.exToken == address(0), \\\"Expected ETH offer\\\");\\r\\n\\r\\n            (\\r\\n                uint256 transferAmount,\\r\\n                address buyer,\\r\\n                address seller\\r\\n            ) = _computeTransferAmount(\\r\\n                    offer,\\r\\n                    offer.amount - offer.filledAmount\\r\\n                );\\r\\n            require(ethValue >= transferAmount, \\\"Insufficient Funds\\\");\\r\\n\\r\\n            _fillOffer(\\r\\n                offerIds[i],\\r\\n                offer.amount - offer.filledAmount,\\r\\n                buyer,\\r\\n                seller,\\r\\n                additional\\r\\n            );\\r\\n            ethValue -= transferAmount;\\r\\n            remainingAmount -= offer.amount - offer.filledAmount;\\r\\n\\r\\n            if (remainingAmount == 0 || ethValue == 0) {\\r\\n                require(i == offerIds.length - 1, \\\"Invalid Fill Input\\\");\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // close unfullfilled offer - by Offer owner\\r\\n    function cancelOffer(uint256 offerId) public nonReentrant {\\r\\n        PreMarketStorage storage $ = _getOwnStorage();\\r\\n        Offer storage offer = $.offers[offerId];\\r\\n\\r\\n        require(offer.offeredBy == msg.sender, \\\"Offer Owner Only\\\");\\r\\n        require(offer.status == STATUS_OFFER_OPEN, \\\"Invalid Offer Status\\\");\\r\\n\\r\\n        uint256 refundAmount = offer.amount - offer.filledAmount;\\r\\n        require(refundAmount > 0, \\\"Insufficient Allocations\\\");\\r\\n\\r\\n        // calculate refund\\r\\n        uint256 refundValue;\\r\\n        uint256 refundFee;\\r\\n\\r\\n        if (offer.offerType == OFFER_BUY) {\\r\\n            refundValue = (refundAmount * offer.value) / offer.amount;\\r\\n            refundFee = (refundValue * $.conf.feeBuyerRefund) / WEI6;\\r\\n            refundValue += (refundValue * $.conf.feeBuyerSettle) / WEI6;\\r\\n        } else {\\r\\n            refundValue = (refundAmount * offer.collateral) / offer.amount;\\r\\n            refundFee = (refundValue * $.conf.feeSellerRefund) / WEI6;\\r\\n        }\\r\\n\\r\\n        refundValue -= refundFee;\\r\\n        // refund\\r\\n        if (offer.exToken == address(0)) {\\r\\n            // refund ETH\\r\\n            (bool success1, ) = offer.offeredBy.call{value: refundValue}(\\\"\\\");\\r\\n            (bool success2, ) = $.conf.feeWallet.call{value: refundFee}(\\\"\\\");\\r\\n            require(success1 && success2, \\\"Transfer Funds Fail\\\");\\r\\n        } else {\\r\\n            IERC20 iexToken = IERC20(offer.exToken);\\r\\n            iexToken.safeTransfer(offer.offeredBy, refundValue);\\r\\n            iexToken.safeTransfer($.conf.feeWallet, refundFee);\\r\\n        }\\r\\n\\r\\n        offer.status = STATUS_OFFER_CANCELLED;\\r\\n        emit CancelOffer(offerId, refundValue, refundFee, msg.sender);\\r\\n    }\\r\\n\\r\\n    function sellerSettleFilled(uint256 orderId) public nonReentrant {\\r\\n        PreMarketStorage storage $ = _getOwnStorage();\\r\\n        Order storage order = $.orders[orderId];\\r\\n        Offer storage offer = $.offers[order.offerId];\\r\\n        Token storage token = $.tokens[offer.tokenId];\\r\\n\\r\\n        // check condition\\r\\n        require(\\r\\n            token.status == STATUS_TOKEN_SETTLE ||\\r\\n                token.status == STATUS_TOKEN_ACTIVE,\\r\\n            \\\"Invalid Status\\\"\\r\\n        );\\r\\n        require(order.seller == msg.sender, \\\"Seller Only\\\");\\r\\n        require(order.status == STATUS_ORDER_OPEN, \\\"Invalid Order Status\\\");\\r\\n\\r\\n        order.status = STATUS_ORDER_SELLER_ENSURE; // \u8bbe\u7f6e\u8ba2\u5355\u72b6\u6001\u4e3a\u7ed3\u7b97\u5b8c\u6210\\r\\n        // \u5356\u65b9\u5df2\u7ecf\u786e\u8ba4\u7ed3\u7b97\\r\\n        emit SellerSettleFilledEnsure(orderId, msg.sender);\\r\\n    }\\r\\n\\r\\n    // settle order - deliver token to finillize the order\\r\\n    function buyerSettleFilled(uint256 orderId) public nonReentrant {\\r\\n        PreMarketStorage storage $ = _getOwnStorage();\\r\\n        Order storage order = $.orders[orderId];\\r\\n        Offer storage offer = $.offers[order.offerId];\\r\\n        Token storage token = $.tokens[offer.tokenId];\\r\\n\\r\\n        // check condition\\r\\n        require(\\r\\n            token.status == STATUS_TOKEN_SETTLE ||\\r\\n                token.status == STATUS_TOKEN_ACTIVE,\\r\\n            \\\"Invalid Status\\\"\\r\\n        );\\r\\n\\r\\n        require(order.buyer == msg.sender, \\\"Buyer Only\\\");\\r\\n        // \u8ba2\u5355\u72b6\u6001\u5fc5\u987b\u662f\u6253\u5f00\u7684 \u6216\u8005 \u662f\u5356\u5bb6\u786e\u8ba4\u8fc7\u7684\\r\\n        require(\\r\\n            order.status == STATUS_ORDER_SELLER_ENSURE ||\\r\\n                order.status == STATUS_ORDER_OPEN,\\r\\n            \\\"Invalid Order Status\\\"\\r\\n        );\\r\\n\\r\\n        uint256 collateral = (order.amount * offer.collateral) / offer.amount;\\r\\n        uint256 value = (order.amount * offer.value) / offer.amount;\\r\\n\\r\\n        // transfer liquid to seller\\r\\n        uint256 settleSellerFee = (value * $.conf.feeSellerSettle) / WEI6; // \u624b\u7eed\u8d39\\r\\n        uint256 totalValue = value + collateral - settleSellerFee; // \u603b\u989d + \u62b5\u62bc\u54c1 - \u624b\u7eed\u8d39\\r\\n        //\u8ba2\u5355\u5b8c\u6210  \u624b\u7eed\u8d39\u94b1\u5305\u5e94\u8be5\u6536\u5230\u4e24\u4efd\u624b\u7eed\u8d39 \u4e00\u4efd\u662f\u5356\u5bb6\u62b5\u62bc\u7269\u91cc\u9762\u7684  \u4e00\u4efd\u662f\u4e00\u4efd\u662fbuyer \u63d0\u524d\u652f\u4ed8\u5728\u5408\u7ea6\u91cc\u9762\u7684\\r\\n        uint256 settleBuyerFee = (value * $.conf.feeBuyerSettle) / WEI6; // \u624b\u7eed\u8d39\\r\\n\\r\\n        uint256 totalFee = settleBuyerFee + settleSellerFee;\\r\\n        if (offer.exToken == address(0)) {\\r\\n            // by ETH\\r\\n            (bool success1, ) = order.seller.call{value: totalValue}(\\\"\\\"); //\u53d1\u9001\u7ed9\u5356\u5bb6\\r\\n            (bool success2, ) = $.conf.feeWallet.call{value: totalFee}(\\\"\\\"); // \u53d1\u9001\u624b\u7eed\u8d39\u7ed9\u6536\u8d39\u5730\u5740\\r\\n            require(success1 && success2, \\\"Transfer Funds Fail\\\");\\r\\n        } else {\\r\\n            // by exToken\\r\\n            IERC20 iexToken = IERC20(offer.exToken);\\r\\n            iexToken.safeTransfer(order.seller, totalValue);\\r\\n            iexToken.safeTransfer($.conf.feeWallet, totalFee);\\r\\n        }\\r\\n\\r\\n        order.status = STATUS_ORDER_SETTLE_FILLED; // \u8bbe\u7f6e\u8ba2\u5355\u72b6\u6001\u4e3a\u7ed3\u7b97\u5b8c\u6210\\r\\n        emit SettleFilled(orderId, totalValue, totalFee, msg.sender);\\r\\n    }\\r\\n\\r\\n    // cancel unfilled order by token buyer after fullfill time frame\\r\\n    // token seller lose collateral to token buyer\\r\\n    function settleCancelled(\\r\\n        uint256 orderId\\r\\n    ) public nonReentrant onlyRole(OPERATOR_ROLE) {\\r\\n        PreMarketStorage storage $ = _getOwnStorage();\\r\\n        Order storage order = $.orders[orderId];\\r\\n        Offer storage offer = $.offers[order.offerId];\\r\\n        Token storage token = $.tokens[offer.tokenId];\\r\\n\\r\\n        // check condition\\r\\n        require(token.status == STATUS_TOKEN_SETTLE, \\\"Invalid Status\\\");\\r\\n        require(\\r\\n            block.timestamp > token.settleTime + token.settleDuration,\\r\\n            \\\"Settling Time Not Ended Yet\\\"\\r\\n        );\\r\\n        require(\\r\\n            order.status == STATUS_ORDER_OPEN ||\\r\\n                order.status == STATUS_ORDER_SELLER_ENSURE,\\r\\n            \\\"Invalid Order Status\\\"\\r\\n        );\\r\\n\\r\\n        uint256 collateral = (order.amount * offer.collateral) / offer.amount;\\r\\n        uint256 value = (order.amount * offer.value) / offer.amount;\\r\\n\\r\\n        // transfer liquid to buyer\\r\\n        uint256 settleSellerFee = (collateral *\\r\\n            ($.conf.feeSellerSettle + $.conf.feeDefault)) / WEI6;\\r\\n        uint256 settleBuyerFee = (collateral * $.conf.feeBuyerSettle) / WEI6;\\r\\n        // Because the buyer paid the handling fee in the first place.So it won't be deducted again.\\r\\n        uint256 totalValue = value + collateral - settleSellerFee;\\r\\n        uint256 totalFee = settleBuyerFee + settleSellerFee;\\r\\n        if (offer.exToken == address(0)) {\\r\\n            // by ETH\\r\\n            (bool success1, ) = order.buyer.call{value: totalValue}(\\\"\\\");\\r\\n            (bool success2, ) = $.conf.feeWallet.call{value: totalFee}(\\\"\\\");\\r\\n            require(success1 && success2, \\\"Transfer Funds Fail\\\");\\r\\n        } else {\\r\\n            // by exToken\\r\\n            IERC20 iexToken = IERC20(offer.exToken);\\r\\n            iexToken.safeTransfer(order.buyer, totalValue);\\r\\n            iexToken.safeTransfer($.conf.feeWallet, totalFee);\\r\\n        }\\r\\n\\r\\n        order.status = STATUS_ORDER_SETTLE_CANCELLED;\\r\\n\\r\\n        emit SettleCancelled(orderId, totalValue, totalFee, msg.sender);\\r\\n    }\\r\\n\\r\\n    // Batch actions\\r\\n    function forceCancelOrders(uint256[] memory orderIds) external {\\r\\n        for (uint256 i = 0; i < orderIds.length; i++) {\\r\\n            forceCancelOrder(orderIds[i]);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function cancelOffers(uint256[] memory offerIds) external {\\r\\n        for (uint256 i = 0; i < offerIds.length; i++) {\\r\\n            cancelOffer(offerIds[i]);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function sellerSettleFilleds(uint256[] memory orderIds) external {\\r\\n        for (uint256 i = 0; i < orderIds.length; i++) {\\r\\n            sellerSettleFilled(orderIds[i]);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function settleCancelleds(uint256[] memory orderIds) external {\\r\\n        for (uint256 i = 0; i < orderIds.length; i++) {\\r\\n            settleCancelled(orderIds[i]);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    ///////////////////////////\\r\\n    ///////// SETTER //////////\\r\\n    ///////////////////////////\\r\\n    // \u53ea\u80fd\u6240\u6709\u8005\u624d\u80fd\u66f4\u65b0config\\r\\n    function updateConf(\\r\\n        address feeWallet_,\\r\\n        uint256 feeDefault_,\\r\\n        uint256 pledgeRate_,\\r\\n        uint256 feeSellerSettle_,\\r\\n        uint256 feeBuyerSettle_,\\r\\n        uint256 feeSellerRefund_,\\r\\n        uint256 feeBuyerRefund_\\r\\n    ) external onlyRole(DEFAULT_ADMIN_ROLE) {\\r\\n        PreMarketStorage storage $ = _getOwnStorage();\\r\\n        require(feeWallet_ != address(0), \\\"Invalid Address\\\");\\r\\n        emit UpdateConf(\\r\\n            feeWallet_,\\r\\n            feeDefault_,\\r\\n            pledgeRate_,\\r\\n            feeSellerSettle_,\\r\\n            feeBuyerSettle_,\\r\\n            feeSellerRefund_,\\r\\n            feeBuyerRefund_\\r\\n        );\\r\\n        // update\\r\\n        $.conf.feeWallet = feeWallet_;\\r\\n        $.conf.feeDefault = feeDefault_;\\r\\n        $.conf.pledgeRate = pledgeRate_;\\r\\n        $.conf.feeSellerSettle = feeSellerSettle_;\\r\\n        $.conf.feeBuyerSettle = feeBuyerSettle_;\\r\\n        $.conf.feeSellerRefund = feeSellerRefund_;\\r\\n        $.conf.feeBuyerRefund = feeBuyerRefund_;\\r\\n    }\\r\\n\\r\\n    //update offer\\r\\n    function updateOffer(\\r\\n        uint256 offerId,\\r\\n        uint256 value,\\r\\n        uint256 collateral\\r\\n    ) external onlyRole(OPERATOR_ROLE) {\\r\\n        PreMarketStorage storage $ = _getOwnStorage();\\r\\n        require(value > 0, \\\"value cannot be less than 0\\\");\\r\\n        require(collateral > 0, \\\"collateral cannot be less than 0\\\");\\r\\n        // update\\r\\n        $.offers[offerId].value = value;\\r\\n        $.offers[offerId].collateral = collateral;\\r\\n    }\\r\\n\\r\\n    function setAcceptedTokens(\\r\\n        address[] memory tokenAddresses,\\r\\n        bool isAccepted\\r\\n    ) external onlyRole(OPERATOR_ROLE) {\\r\\n        PreMarketStorage storage $ = _getOwnStorage();\\r\\n\\r\\n        for (uint256 i = 0; i < tokenAddresses.length; i++) {\\r\\n            $.acceptedTokens[tokenAddresses[i]] = isAccepted;\\r\\n        }\\r\\n        emit UpdateAcceptedTokens(tokenAddresses, isAccepted);\\r\\n    }\\r\\n\\r\\n    ///////////////////////////\\r\\n    ///////// GETTER //////////\\r\\n    ///////////////////////////\\r\\n    function isAdditionalDup(\\r\\n        string memory additional,\\r\\n        bytes32 tokenId\\r\\n    ) external view returns (bool) {\\r\\n        require(bytes(additional).length > 0, \\\"Invalid Additional\\\");\\r\\n        require(tokenId != bytes32(0), \\\"Invalid TokenId\\\");\\r\\n        PreMarketStorage storage $ = _getOwnStorage();\\r\\n\\r\\n        bytes32 additionalHash = keccak256(abi.encodePacked(additional));\\r\\n\\r\\n        // \u904d\u5386 offerAdditional\\r\\n        for (uint256 i = 0; i <= $.lastOrderId; i++) {\\r\\n            if (\\r\\n                $.offers[i].tokenId == tokenId &&\\r\\n                keccak256(abi.encodePacked($.offerAdditional[i].additional)) ==\\r\\n                additionalHash\\r\\n            ) {\\r\\n                return true;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        // \u904d\u5386 orderAdditional\\r\\n        for (uint256 i = 0; i <= $.lastOrderId; i++) {\\r\\n            uint256 offerId = $.orders[i].offerId;\\r\\n            if (\\r\\n                $.offers[offerId].tokenId == tokenId &&\\r\\n                keccak256(abi.encodePacked($.orderAdditional[i].additional)) ==\\r\\n                additionalHash\\r\\n            ) {\\r\\n                return true;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return false;\\r\\n    }\\r\\n\\r\\n    function offerAmount(uint256 offerId) external view returns (uint256) {\\r\\n        PreMarketStorage storage $ = _getOwnStorage();\\r\\n        return $.offers[offerId].amount;\\r\\n    }\\r\\n\\r\\n    function offerAmountAvailable(\\r\\n        uint256 offerId\\r\\n    ) external view returns (uint256) {\\r\\n        PreMarketStorage storage $ = _getOwnStorage();\\r\\n        return $.offers[offerId].amount - $.offers[offerId].filledAmount;\\r\\n    }\\r\\n\\r\\n    function offerValue(uint256 offerId) external view returns (uint256) {\\r\\n        PreMarketStorage storage $ = _getOwnStorage();\\r\\n        return $.offers[offerId].value;\\r\\n    }\\r\\n\\r\\n    function offerExToken(uint256 offerId) external view returns (address) {\\r\\n        PreMarketStorage storage $ = _getOwnStorage();\\r\\n        return $.offers[offerId].exToken;\\r\\n    }\\r\\n\\r\\n    function isBuyOffer(uint256 offerId) external view returns (bool) {\\r\\n        PreMarketStorage storage $ = _getOwnStorage();\\r\\n        return $.offers[offerId].offerType == OFFER_BUY;\\r\\n    }\\r\\n\\r\\n    function isSellOffer(uint256 offerId) external view returns (bool) {\\r\\n        PreMarketStorage storage $ = _getOwnStorage();\\r\\n        return $.offers[offerId].offerType == OFFER_SELL;\\r\\n    }\\r\\n\\r\\n    function offerStatus(uint256 offerId) external view returns (uint256) {\\r\\n        PreMarketStorage storage $ = _getOwnStorage();\\r\\n        return $.offers[offerId].status;\\r\\n    }\\r\\n\\r\\n    function orderStatus(uint256 orderId) external view returns (uint256) {\\r\\n        PreMarketStorage storage $ = _getOwnStorage();\\r\\n        return $.orders[orderId].status;\\r\\n    }\\r\\n\\r\\n    function tokens(bytes32 tokenId) external view returns (Token memory) {\\r\\n        PreMarketStorage storage $ = _getOwnStorage();\\r\\n        return $.tokens[tokenId];\\r\\n    }\\r\\n\\r\\n    function offers(uint256 id) external view returns (Offer memory) {\\r\\n        PreMarketStorage storage $ = _getOwnStorage();\\r\\n        return $.offers[id];\\r\\n    }\\r\\n\\r\\n    function offerAdditional(\\r\\n        uint256 id\\r\\n    ) external view returns (Additional memory) {\\r\\n        PreMarketStorage storage $ = _getOwnStorage();\\r\\n        return $.offerAdditional[id];\\r\\n    }\\r\\n\\r\\n    function orderAdditional(\\r\\n        uint256 id\\r\\n    ) external view returns (Additional memory) {\\r\\n        PreMarketStorage storage $ = _getOwnStorage();\\r\\n        return $.orderAdditional[id];\\r\\n    }\\r\\n\\r\\n    function offers(\\r\\n        uint256[] calldata ids\\r\\n    ) external view returns (Offer[] memory) {\\r\\n        PreMarketStorage storage $ = _getOwnStorage();\\r\\n        uint256 validOfferCount = 0;\\r\\n        Offer[] memory offerList = new Offer[](ids.length);\\r\\n        uint256 index = 0;\\r\\n        for (uint256 i = 0; i < ids.length; i++) {\\r\\n            if ($.offers[ids[i]].status == STATUS_OFFER_OPEN) {\\r\\n                offerList[index++] = $.offers[ids[i]];\\r\\n                validOfferCount++;\\r\\n            }\\r\\n        }\\r\\n        assembly {\\r\\n            mstore(offerList, validOfferCount)\\r\\n        }\\r\\n        return offerList;\\r\\n    }\\r\\n\\r\\n    function orders(uint256 id) external view returns (Order memory) {\\r\\n        PreMarketStorage storage $ = _getOwnStorage();\\r\\n        return $.orders[id];\\r\\n    }\\r\\n\\r\\n    function config() external view returns (Conf memory) {\\r\\n        PreMarketStorage storage $ = _getOwnStorage();\\r\\n        return $.conf;\\r\\n    }\\r\\n\\r\\n    function isAcceptedToken(address token) external view returns (bool) {\\r\\n        PreMarketStorage storage $ = _getOwnStorage();\\r\\n        return $.acceptedTokens[token];\\r\\n    }\\r\\n\\r\\n    function lastOfferId() external view returns (uint256) {\\r\\n        PreMarketStorage storage $ = _getOwnStorage();\\r\\n        return $.lastOfferId;\\r\\n    }\\r\\n\\r\\n    function lastOrderId() external view returns (uint256) {\\r\\n        PreMarketStorage storage $ = _getOwnStorage();\\r\\n        return $.lastOrderId;\\r\\n    }\\r\\n\\r\\n    ///////////////////////////\\r\\n    //////// INTERNAL /////////\\r\\n    ///////////////////////////\\r\\n    function _newOffer(\\r\\n        uint8 offerType,\\r\\n        bytes32 tokenId,\\r\\n        address exToken,\\r\\n        uint256 amount,\\r\\n        uint256 value,\\r\\n        uint256 collateral,\\r\\n        bool fullMatch,\\r\\n        string memory additional\\r\\n    ) internal {\\r\\n        PreMarketStorage storage $ = _getOwnStorage();\\r\\n        // create new offer\\r\\n        $.offers[++$.lastOfferId] = Offer(\\r\\n            offerType,\\r\\n            tokenId,\\r\\n            exToken,\\r\\n            amount,\\r\\n            value,\\r\\n            collateral,\\r\\n            0,\\r\\n            STATUS_OFFER_OPEN,\\r\\n            msg.sender,\\r\\n            fullMatch\\r\\n        );\\r\\n\\r\\n        if (bytes(additional).length > 0) {\\r\\n            $.offerAdditional[$.lastOfferId] = Additional(additional);\\r\\n        }\\r\\n\\r\\n        emit NewOffer(\\r\\n            $.lastOfferId,\\r\\n            offerType,\\r\\n            tokenId,\\r\\n            exToken,\\r\\n            amount,\\r\\n            value,\\r\\n            collateral,\\r\\n            fullMatch,\\r\\n            msg.sender,\\r\\n            additional\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function _fillOffer(\\r\\n        uint256 offerId,\\r\\n        uint256 amount,\\r\\n        address buyer,\\r\\n        address seller,\\r\\n        string memory additional\\r\\n    ) internal {\\r\\n        PreMarketStorage storage $ = _getOwnStorage();\\r\\n        Offer storage offer = $.offers[offerId];\\r\\n        // new order\\r\\n        $.orders[++$.lastOrderId] = Order(\\r\\n            offerId,\\r\\n            amount,\\r\\n            seller,\\r\\n            buyer,\\r\\n            STATUS_ORDER_OPEN\\r\\n        );\\r\\n\\r\\n        if (bytes(additional).length > 0) {\\r\\n            $.orderAdditional[$.lastOrderId] = Additional(additional);\\r\\n        }\\r\\n\\r\\n        // check if offer is fullfilled\\r\\n        offer.filledAmount += amount;\\r\\n        if (offer.filledAmount == offer.amount) {\\r\\n            offer.status = STATUS_OFFER_FILLED;\\r\\n            emit CloseOffer(offerId, 0);\\r\\n        }\\r\\n        emit NewOrder(\\r\\n            $.lastOrderId,\\r\\n            offerId,\\r\\n            amount,\\r\\n            seller,\\r\\n            buyer,\\r\\n            additional\\r\\n        );\\r\\n    }\\r\\n\\r\\n    // get stuck token in contract   \u53ea\u80fd\u7531\u6240\u6709\u8005\u6765\u8c03\u7528 \u5c06\u5408\u7ea6\u7684\u94b1\u8f6c\u79fb\\r\\n    function withdrawStuckToken(\\r\\n        address _token,\\r\\n        address _to\\r\\n    ) external onlyOwner {\\r\\n        PreMarketStorage storage $ = _getOwnStorage();\\r\\n        require(\\r\\n            _token != address(0) && !$.acceptedTokens[_token],\\r\\n            \\\"Invalid Token Address\\\"\\r\\n        );\\r\\n        uint256 _contractBalance = IERC20(_token).balanceOf(address(this));\\r\\n        IERC20(_token).safeTransfer(_to, _contractBalance);\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/whitemarket/WhiteStructV2.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: Unlicense\\r\\npragma solidity ^0.8.20;\\r\\n\\r\\ncontract WhiteStruct {\\r\\n    uint256 constant WEI6 = 10 ** 6;\\r\\n    uint8 constant OFFER_BUY = 1;\\r\\n    uint8 constant OFFER_SELL = 2;\\r\\n\\r\\n    // Status\\r\\n    // Offer status\\r\\n    uint8 constant STATUS_OFFER_OPEN = 1;\\r\\n    uint8 constant STATUS_OFFER_FILLED = 2;\\r\\n    uint8 constant STATUS_OFFER_CANCELLED = 3;\\r\\n\\r\\n    // Order Status\\r\\n    uint8 constant STATUS_ORDER_OPEN = 1;\\r\\n    uint8 constant STATUS_ORDER_SETTLE_FILLED = 2;\\r\\n    uint8 constant STATUS_ORDER_SETTLE_CANCELLED = 3;\\r\\n    uint8 constant STATUS_ORDER_CANCELLED = 3;\\r\\n    uint8 constant STATUS_ORDER_SELLER_ENSURE = 4;\\r\\n\\r\\n    // token status\\r\\n    uint8 constant STATUS_TOKEN_ACTIVE = 1;\\r\\n    uint8 constant STATUS_TOKEN_INACTIVE = 2;\\r\\n    uint8 constant STATUS_TOKEN_SETTLE = 3;\\r\\n\\r\\n    struct Token {\\r\\n        address token;\\r\\n        uint48 settleTime;\\r\\n        uint48 settleDuration;\\r\\n        uint152 settleRate; // number of token per point\\r\\n        uint8 status; //\\r\\n    }\\r\\n\\r\\n    struct Offer {\\r\\n        uint8 offerType;\\r\\n        bytes32 tokenId;\\r\\n        address exToken;\\r\\n        uint256 amount;\\r\\n        uint256 value;\\r\\n        uint256 collateral;\\r\\n        uint256 filledAmount;\\r\\n        uint8 status;\\r\\n        address offeredBy;\\r\\n        bool fullMatch;\\r\\n    }\\r\\n\\r\\n    struct Order {\\r\\n        uint256 offerId;\\r\\n        uint256 amount;\\r\\n        address seller;\\r\\n        address buyer;\\r\\n        uint8 status;\\r\\n    }\\r\\n\\r\\n    struct Additional {\\r\\n        string additional;\\r\\n    }\\r\\n\\r\\n    struct Config {\\r\\n        uint256 pledgeRate;\\r\\n        uint256 feeRefund;\\r\\n        uint256 feeSettle;\\r\\n        address feeWallet;\\r\\n    }\\r\\n\\r\\n    struct Conf {\\r\\n        uint256 pledgeRate;\\r\\n        uint256 feeDefault;\\r\\n        address feeWallet;\\r\\n        uint256 feeSellerSettle;\\r\\n        uint256 feeBuyerSettle;\\r\\n        uint256 feeSellerRefund;\\r\\n        uint256 feeBuyerRefund;\\r\\n    }\\r\\n\\r\\n    struct PreMarketStorage {\\r\\n        mapping(address => bool) acceptedTokens;\\r\\n        mapping(bytes32 => Token) tokens;\\r\\n        mapping(uint256 => Offer) offers;\\r\\n        uint256 lastOfferId;\\r\\n        mapping(uint256 => Order) orders;\\r\\n        uint256 lastOrderId;\\r\\n        Config config;\\r\\n        mapping(uint256 => Additional) offerAdditional;\\r\\n        mapping(uint256 => Additional) orderAdditional;\\r\\n        Conf conf;\\r\\n    }\\r\\n}\\r\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"paris\",\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"name\":\"AccessControlBadConfirmation\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"neededRole\",\"type\":\"bytes32\"}],\"name\":\"AccessControlUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"AddressEmptyCode\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AddressInsufficientBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedInnerCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidInitialization\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotInitializing\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"SafeERC20FailedOperation\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"offerId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"refundValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"refundFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"doer\",\"type\":\"address\"}],\"name\":\"CancelOffer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"doer\",\"type\":\"address\"}],\"name\":\"CancelOrder\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"offerId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"refundAmount\",\"type\":\"uint256\"}],\"name\":\"CloseOffer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"GrantOperatorRole\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"version\",\"type\":\"uint64\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"offerType\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"tokenId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"exToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"collateral\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"fullMatch\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"doer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_additional\",\"type\":\"string\"}],\"name\":\"NewOffer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"offerId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_additional\",\"type\":\"string\"}],\"name\":\"NewOrder\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"tokenId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"settleDuration\",\"type\":\"uint256\"}],\"name\":\"NewToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"doer\",\"type\":\"address\"}],\"name\":\"SellerSettleFilledEnsure\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"doer\",\"type\":\"address\"}],\"name\":\"Settle2Steps\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"doer\",\"type\":\"address\"}],\"name\":\"SettleCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"doer\",\"type\":\"address\"}],\"name\":\"SettleFilled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"tokenId\",\"type\":\"bytes32\"}],\"name\":\"TokenForceCancelSettlePhase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"tokenId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"settleRate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"settleTime\",\"type\":\"uint256\"}],\"name\":\"TokenToSettlePhase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isAccepted\",\"type\":\"bool\"}],\"name\":\"UpdateAcceptedTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newFeeWallet\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newFeeDefault\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newPledgeRate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newFeeSellerSettle\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newFeeBuyerSettle\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newFeeSellerRefund\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newFeeBuyerRefund\",\"type\":\"uint256\"}],\"name\":\"UpdateConf\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldFeeWallet\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldFeeSettle\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldFeeRefund\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldPledgeRate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newFeeWallet\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newFeeSettle\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newFeeRefund\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newPledgeRate\",\"type\":\"uint256\"}],\"name\":\"UpdateConfig\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldOwner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"UpdateOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"tokenId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint48\",\"name\":\"oldValue\",\"type\":\"uint48\"},{\"indexed\":false,\"internalType\":\"uint48\",\"name\":\"newValue\",\"type\":\"uint48\"}],\"name\":\"UpdateTokenSettleDuration\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"tokenId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"oldValue\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"newValue\",\"type\":\"uint8\"}],\"name\":\"UpdateTokenStatus\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"OPERATOR_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"}],\"name\":\"buyerSettleFilled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"offerId\",\"type\":\"uint256\"}],\"name\":\"cancelOffer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"offerIds\",\"type\":\"uint256[]\"}],\"name\":\"cancelOffers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"config\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"pledgeRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feeDefault\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"feeWallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"feeSellerSettle\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feeBuyerSettle\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feeSellerRefund\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feeBuyerRefund\",\"type\":\"uint256\"}],\"internalType\":\"struct WhiteStruct.Conf\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"tokenId\",\"type\":\"bytes32\"},{\"internalType\":\"uint48\",\"name\":\"settleDuration\",\"type\":\"uint48\"}],\"name\":\"createToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"offerIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"additional\",\"type\":\"string\"}],\"name\":\"fillBatchOffer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"offerIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"additional\",\"type\":\"string\"}],\"name\":\"fillBatchOfferETH\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"offerId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"additional\",\"type\":\"string\"}],\"name\":\"fillOffer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"offerId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"additional\",\"type\":\"string\"}],\"name\":\"fillOfferETH\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"}],\"name\":\"forceCancelOrder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"orderIds\",\"type\":\"uint256[]\"}],\"name\":\"forceCancelOrders\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantOperatorRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"isAcceptedToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"additional\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"tokenId\",\"type\":\"bytes32\"}],\"name\":\"isAdditionalDup\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"offerId\",\"type\":\"uint256\"}],\"name\":\"isBuyOffer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"offerId\",\"type\":\"uint256\"}],\"name\":\"isSellOffer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastOfferId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastOrderId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"offerType\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"tokenId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"exToken\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"fullMatch\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"additional\",\"type\":\"string\"}],\"name\":\"newOffer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"offerType\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"tokenId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"fullMatch\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"additional\",\"type\":\"string\"}],\"name\":\"newOfferETH\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"offerAdditional\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"additional\",\"type\":\"string\"}],\"internalType\":\"struct WhiteStruct.Additional\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"offerId\",\"type\":\"uint256\"}],\"name\":\"offerAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"offerId\",\"type\":\"uint256\"}],\"name\":\"offerAmountAvailable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"offerId\",\"type\":\"uint256\"}],\"name\":\"offerExToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"offerId\",\"type\":\"uint256\"}],\"name\":\"offerStatus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"offerId\",\"type\":\"uint256\"}],\"name\":\"offerValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"offers\",\"outputs\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"offerType\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"tokenId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"exToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateral\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"filledAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"offeredBy\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"fullMatch\",\"type\":\"bool\"}],\"internalType\":\"struct WhiteStruct.Offer[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"offers\",\"outputs\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"offerType\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"tokenId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"exToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateral\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"filledAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"offeredBy\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"fullMatch\",\"type\":\"bool\"}],\"internalType\":\"struct WhiteStruct.Offer\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"orderAdditional\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"additional\",\"type\":\"string\"}],\"internalType\":\"struct WhiteStruct.Additional\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"}],\"name\":\"orderStatus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"orders\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"offerId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"status\",\"type\":\"uint8\"}],\"internalType\":\"struct WhiteStruct.Order\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"callerConfirmation\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"}],\"name\":\"sellerSettleFilled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"orderIds\",\"type\":\"uint256[]\"}],\"name\":\"sellerSettleFilleds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokenAddresses\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"isAccepted\",\"type\":\"bool\"}],\"name\":\"setAcceptedTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"}],\"name\":\"settle2Steps\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"orderIds\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"hashes\",\"type\":\"bytes32[]\"}],\"name\":\"settle2StepsBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"}],\"name\":\"settleCancelled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"orderIds\",\"type\":\"uint256[]\"}],\"name\":\"settleCancelleds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"tokenId\",\"type\":\"bytes32\"}],\"name\":\"tokenForceCancelSettlePhase\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"tokenId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint152\",\"name\":\"settleRate\",\"type\":\"uint152\"}],\"name\":\"tokenToSettlePhase\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"tokenId\",\"type\":\"bytes32\"}],\"name\":\"tokenToggleActivation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"tokenId\",\"type\":\"bytes32\"}],\"name\":\"tokens\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint48\",\"name\":\"settleTime\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"settleDuration\",\"type\":\"uint48\"},{\"internalType\":\"uint152\",\"name\":\"settleRate\",\"type\":\"uint152\"},{\"internalType\":\"uint8\",\"name\":\"status\",\"type\":\"uint8\"}],\"internalType\":\"struct WhiteStruct.Token\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnershipAndAdminRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeWallet_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"feeDefault_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pledgeRate_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feeSellerSettle_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feeBuyerSettle_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feeSellerRefund_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feeBuyerRefund_\",\"type\":\"uint256\"}],\"name\":\"updateConf\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"offerId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateral\",\"type\":\"uint256\"}],\"name\":\"updateOffer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"tokenId\",\"type\":\"bytes32\"},{\"internalType\":\"uint48\",\"name\":\"newValue\",\"type\":\"uint48\"}],\"name\":\"updateSettleDuration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"withdrawStuckToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "WhiteMarketV2", "CompilerVersion": "v0.8.20+commit.a1b79de6", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "paris", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}