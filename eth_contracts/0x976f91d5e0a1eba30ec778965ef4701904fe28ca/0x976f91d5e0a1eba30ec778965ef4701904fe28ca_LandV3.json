{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"src/solc_0.5/contracts_common/BaseWithStorage/AdminV2.sol\": {\r\n      \"content\": \"pragma solidity 0.5.9;\\n\\ncontract AdminV2 {\\n\\n    address internal _admin;\\n\\n    event AdminChanged(address oldAdmin, address newAdmin);\\n\\n    /// @notice gives the current administrator of this contract.\\n    /// @return the current administrator of this contract.\\n    function getAdmin() external view returns (address) {\\n        return _admin;\\n    }\\n\\n    /// @notice change the administrator to be `newAdmin`.\\n    /// @param newAdmin address of the new administrator.\\n    function changeAdmin(address newAdmin) external {\\n        address admin = _admin;\\n        require(msg.sender == admin, \\\"only admin can change admin\\\");\\n        require(newAdmin != admin, \\\"it can be only changed to a new admin\\\");\\n        emit AdminChanged(admin, newAdmin);\\n        _admin = newAdmin;\\n    }\\n\\n    modifier onlyAdmin() {\\n        require (msg.sender == _admin, \\\"only admin allowed\\\");\\n        _;\\n    }\\n\\n}\\n\"\r\n    },\r\n    \"src/solc_0.5/contracts_common/BaseWithStorage/MetaTransactionReceiverV2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.5.9;\\n\\nimport {AdminV2} from \\\"./AdminV2.sol\\\";\\nimport {AddressUtils} from \\\"../../contracts_common/Libraries/AddressUtils.sol\\\";\\n\\n/// @title MetaTransactionReceiverV2\\n/// @author The Sandbox\\n/// @notice Implements meta-transactions\\n/// @dev This contract permits to give an address the capacity to perform meta-transactions on behalf of any address\\ncontract MetaTransactionReceiverV2 is AdminV2 {\\n    using AddressUtils for address;\\n\\n    mapping(address => bool) internal _metaTransactionContracts;\\n    event MetaTransactionProcessor(address indexed metaTransactionProcessor, bool enabled);\\n\\n    /// @notice Enable or disable the ability of `metaTransactionProcessor` to perform meta-tx (metaTransactionProcessor rights).\\n    /// @param metaTransactionProcessor address that will be given/removed metaTransactionProcessor rights.\\n    /// @param enabled set whether the metaTransactionProcessor is enabled or disabled.\\n    function setMetaTransactionProcessor(address metaTransactionProcessor, bool enabled) public onlyAdmin {\\n        require(\\n            metaTransactionProcessor.isContract(),\\n            \\\"only contracts can be meta transaction processor\\\"\\n        );\\n        _setMetaTransactionProcessor(metaTransactionProcessor, enabled);\\n    }\\n\\n    /// @param metaTransactionProcessor address of the operator\\n    /// @param enabled is it enabled\\n    function _setMetaTransactionProcessor(address metaTransactionProcessor, bool enabled) internal {\\n        _metaTransactionContracts[metaTransactionProcessor] = enabled;\\n        emit MetaTransactionProcessor(metaTransactionProcessor, enabled);\\n    }\\n\\n    /// @notice check whether address `who` is given meta-transaction execution rights.\\n    /// @param who The address to query.\\n    /// @return whether the address has meta-transaction execution rights.\\n    function isMetaTransactionProcessor(address who) external view returns(bool) {\\n        return _metaTransactionContracts[who];\\n    }\\n}\\n\"\r\n    },\r\n    \"src/solc_0.5/contracts_common/BaseWithStorage/SuperOperatorsV2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.5.9;\\n\\nimport {AdminV2} from \\\"./AdminV2.sol\\\";\\n\\n/// @title SuperOperatorsV2\\n/// @author The Sandbox\\n/// @notice Implements a super operator role on the contract\\n/// @dev The contract inheriting SuperOperatorsV2 is able to use a super operator role\\ncontract SuperOperatorsV2 is AdminV2 {\\n\\n    mapping(address => bool) internal _superOperators;\\n\\n    event SuperOperator(address indexed superOperator, bool enabled);\\n\\n    /// @notice Enable or disable the ability of `superOperator` to transfer tokens of all (superOperator rights).\\n    /// @param superOperator address that will be given/removed superOperator right.\\n    /// @param enabled set whether the superOperator is enabled or disabled.\\n    function setSuperOperator(address superOperator, bool enabled) external onlyAdmin {\\n        require(\\n            superOperator != address(0),\\n            \\\"address 0 is not allowed as super operator\\\"\\n        );\\n        require(\\n            enabled != _superOperators[superOperator],\\n            \\\"the status should be different than the current one\\\"\\n        );\\n        _superOperators[superOperator] = enabled;\\n        emit SuperOperator(superOperator, enabled);\\n    }\\n\\n    /// @notice check whether address `who` is given superOperator rights.\\n    /// @param who The address to query.\\n    /// @return whether the address has superOperator rights.\\n    function isSuperOperator(address who) public view returns (bool) {\\n        return _superOperators[who];\\n    }\\n}\\n\"\r\n    },\r\n    \"src/solc_0.5/contracts_common/Interfaces/ERC721Events.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.5.9;\\n\\n/**\\n * @title ERC721 Non-Fungible Token Standard basic interface\\n * @dev see https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface ERC721Events {\\n    event Transfer(\\n        address indexed _from,\\n        address indexed _to,\\n        uint256 indexed _tokenId\\n    );\\n    event Approval(\\n        address indexed _owner,\\n        address indexed _approved,\\n        uint256 indexed _tokenId\\n    );\\n    event ApprovalForAll(\\n        address indexed _owner,\\n        address indexed _operator,\\n        bool _approved\\n    );\\n}\\n\"\r\n    },\r\n    \"src/solc_0.5/contracts_common/Interfaces/ERC721MandatoryTokenReceiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.5.9;\\n\\n/**\\n * @title ERC721MandatoryTokenReceiver\\n * @author The Sandbox\\n * @notice Interface for any contract that wants to support safeBatchTransfers\\n * from ERC721 asset contracts.\\n * @dev The ERC-165 identifier for this interface is 0x5e8bf644.\\n */\\ninterface ERC721MandatoryTokenReceiver {\\n    /**\\n     * @notice Whenever tokens are transferred to this contract via {IERC721-safeBatchTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     * @param operator sender\\n     * @param from owner of the tokens\\n     * @param ids token ids\\n     * @param data extra data\\n     * @return 0x4b808c46 if the transfer is a success\\n     */\\n    function onERC721BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        bytes calldata data\\n    ) external returns (bytes4); // needs to return 0x4b808c46\\n\\n    /**\\n     * @notice Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     * @param operator sender\\n     * @param from owner of the token\\n     * @param tokenId token id\\n     * @param data extra data\\n     * @return 0x150b7a02 if the transfer is a success\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4); // needs to return 0x150b7a02\\n}\\n\"\r\n    },\r\n    \"src/solc_0.5/contracts_common/Interfaces/ERC721TokenReceiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// solhint-disable-next-line compiler-fixed\\npragma solidity 0.5.9;\\n\\n/**\\n * @title ERC721TokenReceiver\\n * @author The Sandbox\\n * @notice Handle the receipt of an NFT\\n */\\ninterface ERC721TokenReceiver {\\n    /**\\n     * @notice Handle the receipt of an NFT\\n     * @dev The ERC721 smart contract calls this function on the recipient\\n     * after a `transfer`. This function MAY throw to revert and reject the\\n     * transfer. Return of other than the magic value MUST result in the\\n     * transaction being reverted.\\n     * Note: the contract address is always the message sender.\\n     * @param operator The address which called `safeTransferFrom` function\\n     * @param from The address which previously owned the token\\n     * @param tokenId The NFT identifier which is being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"))` unless throwing\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"src/solc_0.5/contracts_common/Libraries/AddressUtils.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.5.9;\\n\\n/**\\n * @title AddressUtils\\n * @author The Sandbox\\n * @notice Helper to manipulate addresses\\n */\\nlibrary AddressUtils {\\n\\n    /**\\n     * @dev Cast the address to be payable\\n     * @param _address target address\\n     * @return a payable address\\n     */\\n    function toPayable(address _address) internal pure returns (address payable) {\\n        return address(uint160(_address));\\n    }\\n\\n    /**\\n     * @dev Check if the address is a contract\\n     * @param addr target address\\n     * @return is it a contract\\n     */\\n    function isContract(address addr) internal view returns (bool) {\\n        // for accounts without code, i.e. `keccak256('')`:\\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\n\\n        bytes32 codehash;\\n        // solium-disable-next-line security/no-inline-assembly\\n        assembly {\\n            codehash := extcodehash(addr)\\n        }\\n        return (codehash != 0x0 && codehash != accountHash);\\n    }\\n}\\n\"\r\n    },\r\n    \"src/solc_0.5/Land/erc721/ERC721BaseTokenV2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n/* solhint-disable func-order, code-complexity */\\npragma solidity 0.5.9;\\n\\nimport {AddressUtils} from \\\"../../contracts_common/Libraries/AddressUtils.sol\\\";\\nimport {ERC721TokenReceiver} from \\\"../../contracts_common/Interfaces/ERC721TokenReceiver.sol\\\";\\nimport {ERC721Events} from \\\"../../contracts_common/Interfaces/ERC721Events.sol\\\";\\nimport {SuperOperatorsV2} from \\\"../../contracts_common/BaseWithStorage/SuperOperatorsV2.sol\\\";\\nimport {MetaTransactionReceiverV2} from \\\"../../contracts_common/BaseWithStorage/MetaTransactionReceiverV2.sol\\\";\\nimport {ERC721MandatoryTokenReceiver} from \\\"../../contracts_common/Interfaces/ERC721MandatoryTokenReceiver.sol\\\";\\n\\n/**\\n * @title ERC721BaseTokenV2\\n * @author The Sandbox\\n * @notice Basic functionalities of a NFT\\n * @dev ERC721 implementation that supports meta-transactions and super operators\\n */\\ncontract ERC721BaseTokenV2 is ERC721Events, SuperOperatorsV2, MetaTransactionReceiverV2 {\\n    using AddressUtils for address;\\n\\n    bytes4 internal constant _ERC721_RECEIVED = 0x150b7a02;\\n    bytes4 internal constant _ERC721_BATCH_RECEIVED = 0x4b808c46;\\n\\n    bytes4 internal constant ERC165ID = 0x01ffc9a7;\\n    bytes4 internal constant ERC721_MANDATORY_RECEIVER = 0x5e8bf644;\\n\\n    /// @notice Number of NFT an address own\\n    mapping (address => uint256) public _numNFTPerAddress;\\n\\n    /// @notice Token ids per address\\n    mapping (uint256 => uint256) public _owners;\\n\\n    /// @notice Operators for each owner address for all tokens\\n    mapping (address => mapping(address => bool)) public _operatorsForAll;\\n\\n    /// @notice Operator for each token id\\n    mapping (uint256 => address) public _operators;\\n\\n    bool internal _initialized;\\n\\n    modifier initializer() {\\n        require(!_initialized, \\\"ERC721BaseToken: Contract already initialized\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Initializes the contract with the meta-transaction contract & admin\\n     * @param metaTransactionContract Authorized contract for meta-transactions\\n     * @param admin Admin of the contract\\n     */\\n    function initialize (\\n        address metaTransactionContract,\\n        address admin\\n    ) public initializer {\\n        _admin = admin;\\n        _setMetaTransactionProcessor(metaTransactionContract, true);\\n        _initialized = true;\\n        emit AdminChanged(address(0), _admin);\\n    }\\n\\n    /**\\n     * @param from Sender address\\n     * @param to Recipient address\\n     * @param id Token id to transfer\\n     */\\n    function _transferFrom(\\n        address from,\\n        address to,\\n        uint256 id\\n    ) internal {\\n        _numNFTPerAddress[from]--;\\n        _numNFTPerAddress[to]++;\\n        _owners[id] = uint256(to);\\n        emit Transfer(from, to, id);\\n    }\\n\\n    /**\\n     * @notice Return the number of Land owned by an address\\n     * @param owner The address to look for\\n     * @return The number of Land token owned by the address\\n     */\\n    function balanceOf(address owner) external view returns (uint256) {\\n        require(owner != address(0), \\\"owner is zero address\\\");\\n        return _numNFTPerAddress[owner];\\n    }\\n\\n    /**\\n     * @param id token id\\n     * @return address of the owner\\n     */\\n    function _ownerOf(uint256 id) internal view returns (address) {\\n        return address(_owners[id]);\\n    }\\n\\n    /**\\n     * @param id Token id\\n     * @return owner Address of the token's owner\\n     * @return operatorEnabled Is he an operator\\n     */\\n    function _ownerAndOperatorEnabledOf(uint256 id) internal view returns (address owner, bool operatorEnabled) {\\n        uint256 data = _owners[id];\\n        owner = address(data);\\n        operatorEnabled = (data / 2**255) == 1;\\n    }\\n\\n    /**\\n     * @notice Return the owner of a Land\\n     * @param id The id of the Land\\n     * @return The address of the owner\\n     */\\n    function ownerOf(uint256 id) external view returns (address owner) {\\n        owner = _ownerOf(id);\\n        require(owner != address(0), \\\"token does not exist\\\");\\n    }\\n\\n    /**\\n     * @param owner The address giving the approval\\n     * @param operator The address receiving the approval\\n     * @param id The id of the token\\n     */\\n    function _approveFor(\\n        address owner,\\n        address operator,\\n        uint256 id\\n    ) internal {\\n        if (operator == address(0)) {\\n            _owners[id] = uint256(owner); // no need to resset the operator, it will be overriden next time\\n        } else {\\n            _owners[id] = uint256(owner) + 2**255;\\n            _operators[id] = operator;\\n        }\\n        emit Approval(owner, operator, id);\\n    }\\n\\n    /**\\n     * @notice Approve an operator to spend tokens on the sender behalf\\n     * @param sender The address giving the approval\\n     * @param operator The address receiving the approval\\n     * @param id The id of the token\\n     */\\n    function approveFor(\\n        address sender,\\n        address operator,\\n        uint256 id\\n    ) public {\\n        address owner = _ownerOf(id);\\n        require(sender != address(0), \\\"sender is zero address\\\");\\n        require(\\n            msg.sender == sender ||\\n                _metaTransactionContracts[msg.sender] ||\\n                _operatorsForAll[sender][msg.sender] ||\\n                _superOperators[msg.sender],\\n            \\\"not authorized to approve\\\"\\n        );\\n        require(owner == sender, \\\"owner != sender\\\");\\n        _approveFor(owner, operator, id);\\n    }\\n\\n    /**\\n     * @notice Approve an operator to spend tokens on the sender behalf\\n     * @param operator The address receiving the approval\\n     * @param id The id of the token\\n     */\\n    function approve(address operator, uint256 id) public {\\n        address owner = _ownerOf(id);\\n        require(owner != address(0), \\\"token does not exist\\\");\\n        require(\\n            owner == msg.sender || _operatorsForAll[owner][msg.sender] || _superOperators[msg.sender],\\n            \\\"not authorized to approve\\\"\\n        );\\n        _approveFor(owner, operator, id);\\n    }\\n\\n    /**\\n     * @notice Get the approved operator for a specific token\\n     * @param id The id of the token\\n     * @return The address of the operator\\n     */\\n    function getApproved(uint256 id) external view returns (address) {\\n        (address owner, bool operatorEnabled) = _ownerAndOperatorEnabledOf(id);\\n        require(owner != address(0), \\\"token does not exist\\\");\\n        if (operatorEnabled) {\\n            return _operators[id];\\n        } else {\\n            return address(0);\\n        }\\n    }\\n\\n    /**\\n     * @param from The sender of the token\\n     * @param to The recipient of the token\\n     * @param id The id of the token\\n     * @return is it a meta-tx\\n     */\\n    function _checkTransfer(\\n        address from,\\n        address to,\\n        uint256 id\\n    ) internal view returns (bool isMetaTx) {\\n        (address owner, bool operatorEnabled) = _ownerAndOperatorEnabledOf(id);\\n        require(owner != address(0), \\\"token does not exist\\\");\\n        require(owner == from, \\\"not owner in _checkTransfer\\\");\\n        require(to != address(0), \\\"can't send to zero address\\\");\\n        if (msg.sender != from) {\\n            if(_metaTransactionContracts[msg.sender]) {\\n                return true;\\n            }\\n            require(\\n                _operatorsForAll[from][msg.sender] ||\\n                    (operatorEnabled && _operators[id] == msg.sender) ||\\n                    _superOperators[msg.sender],\\n                \\\"not approved to transfer\\\"\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Checks if the target contract supports the given interface & doesn't exceed 10000 gas\\n     * @param _contract The target contract\\n     * @param interfaceId The interface id\\n     * @return if the call is a success\\n     */\\n    function _checkInterfaceWith10000Gas(address _contract, bytes4 interfaceId)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        bool success;\\n        bool result;\\n        bytes memory call_data = abi.encodeWithSelector(ERC165ID, interfaceId);\\n        // solium-disable-next-line security/no-inline-assembly\\n        assembly {\\n            let call_ptr := add(0x20, call_data)\\n            let call_size := mload(call_data)\\n            let output := mload(0x40) // Find empty storage location using \\\"free memory pointer\\\"\\n            mstore(output, 0x0)\\n            success := staticcall(10000, _contract, call_ptr, call_size, output, 0x20) // 32 bytes\\n            result := mload(output)\\n        }\\n        // (10000 / 63) \\\"not enough for supportsInterface(...)\\\" // consume all gas, so caller can potentially know that there was not enough gas\\n        assert(gasleft() > 158);\\n        return success && result;\\n    }\\n\\n    /**\\n     * @notice Transfer a token between 2 addresses\\n     * @param from The sender of the token\\n     * @param to The recipient of the token\\n     * @param id The id of the token\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 id\\n    ) public {\\n        bool metaTx = _checkTransfer(from, to, id);\\n        _transferFrom(from, to, id);\\n        if (to.isContract() && _checkInterfaceWith10000Gas(to, ERC721_MANDATORY_RECEIVER)) {\\n            require(\\n                _checkOnERC721Received(metaTx ? from : msg.sender, from, to, id, \\\"\\\"),\\n                \\\"erc721 transfer rejected by to\\\"\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @notice Transfer a token between 2 addresses letting the receiver knows of the transfer\\n     * @param from The sender of the token\\n     * @param to The recipient of the token\\n     * @param id The id of the token\\n     * @param data Additional data\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        bytes memory data\\n    ) public {\\n        bool metaTx = _checkTransfer(from, to, id);\\n        _transferFrom(from, to, id);\\n        if (to.isContract()) {\\n            require(\\n                _checkOnERC721Received(metaTx ? from : msg.sender, from, to, id, data),\\n                \\\"ERC721: transfer rejected by to\\\"\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @notice Transfer a token between 2 addresses letting the receiver knows of the transfer\\n     * @param from The send of the token\\n     * @param to The recipient of the token\\n     * @param id The id of the token\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id\\n    ) external {\\n        safeTransferFrom(from, to, id, \\\"\\\");\\n    }\\n\\n    /**\\n     * @notice Transfer many tokens between 2 addresses\\n     * @param from The sender of the token\\n     * @param to The recipient of the token\\n     * @param ids The ids of the tokens\\n     * @param data additional data\\n     */\\n    function batchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        bytes calldata data\\n    ) external {\\n        _batchTransferFrom(from, to, ids, data, false);\\n    }\\n\\n    /**\\n     * @param from The sender of the token\\n     * @param to The recipient of the token\\n     * @param ids The ids of the tokens\\n     * @param data additional data\\n     * @param safe checks the target contract\\n     */\\n    function _batchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        bytes memory data,\\n        bool safe\\n    ) internal {\\n        bool metaTx = msg.sender != from && _metaTransactionContracts[msg.sender];\\n        bool authorized =\\n            msg.sender == from || metaTx || _operatorsForAll[from][msg.sender] || _superOperators[msg.sender];\\n\\n        require(from != address(0), \\\"from is zero address\\\");\\n        require(to != address(0), \\\"can't send to zero address\\\");\\n\\n        uint256 numTokens = ids.length;\\n        for (uint256 i = 0; i < numTokens; i++) {\\n            uint256 id = ids[i];\\n            (address owner, bool operatorEnabled) = _ownerAndOperatorEnabledOf(id);\\n            require(owner == from, \\\"not owner in batchTransferFrom\\\");\\n            require(authorized || (operatorEnabled && _operators[id] == msg.sender), \\\"not authorized\\\");\\n            _owners[id] = uint256(to);\\n            emit Transfer(from, to, id);\\n        }\\n        if (from != to) {\\n            _numNFTPerAddress[from] -= numTokens;\\n            _numNFTPerAddress[to] += numTokens;\\n        }\\n\\n        if (to.isContract()) {\\n            if (_checkInterfaceWith10000Gas(to, ERC721_MANDATORY_RECEIVER)) {\\n                require(\\n                    _checkOnERC721BatchReceived(metaTx ? from : msg.sender, from, to, ids, data),\\n                    \\\"erc721 batch transfer rejected by to\\\"\\n                );\\n            } else if (safe) {\\n                for (uint256 i = 0; i < numTokens; i++) {\\n                    require(\\n                        _checkOnERC721Received(metaTx ? from : msg.sender, from, to, ids[i], \\\"\\\"),\\n                        \\\"erc721 transfer rejected by to\\\"\\n                    );\\n                }\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Transfer many tokens between 2 addresses ensuring the receiving contract has a receiver method\\n     * @param from The sender of the token\\n     * @param to The recipient of the token\\n     * @param ids The ids of the tokens\\n     * @param data additional data\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        bytes calldata data\\n    ) external {\\n        _batchTransferFrom(from, to, ids, data, true);\\n    }\\n\\n    /**\\n     * @notice Check if the contract supports an interface\\n     * 0x01ffc9a7 is ERC-165\\n     * 0x80ac58cd is ERC-721\\n     * @param id The id of the interface\\n     * @return True if the interface is supported\\n     */\\n    function supportsInterface(bytes4 id) external pure returns (bool) {\\n        return id == 0x01ffc9a7 || id == 0x80ac58cd;\\n    }\\n\\n    /**\\n     * @notice Set the approval for an operator to manage all the tokens of the sender\\n     * @param sender The address giving the approval\\n     * @param operator The address receiving the approval\\n     * @param approved The determination of the approval\\n     */\\n    function setApprovalForAllFor(\\n        address sender,\\n        address operator,\\n        bool approved\\n    ) public {\\n        require(sender != address(0), \\\"Invalid sender address\\\");\\n        require(\\n            msg.sender == sender || _metaTransactionContracts[msg.sender] || _superOperators[msg.sender],\\n            \\\"not authorized to approve for all\\\"\\n        );\\n\\n        _setApprovalForAll(sender, operator, approved);\\n    }\\n\\n    /**\\n     * @notice Set the approval for an operator to manage all the tokens of the sender\\n     * @param operator The address receiving the approval\\n     * @param approved The determination of the approval\\n     */\\n    function setApprovalForAll(address operator, bool approved) public {\\n        _setApprovalForAll(msg.sender, operator, approved);\\n    }\\n\\n    /**\\n     * @param sender Sender address\\n     * @param operator The address receiving the approval\\n     * @param approved The determination of the approval\\n     */\\n    function _setApprovalForAll(\\n        address sender,\\n        address operator,\\n        bool approved\\n    ) internal {\\n        require(!_superOperators[operator], \\\"super operator can't have their approvalForAll changed\\\");\\n        _operatorsForAll[sender][operator] = approved;\\n\\n        emit ApprovalForAll(sender, operator, approved);\\n    }\\n\\n    /**\\n     * @notice Check if the sender approved the operator\\n     * @param owner The address of the owner\\n     * @param operator The address of the operator\\n     * @return The status of the approval\\n     */\\n    function isApprovedForAll(address owner, address operator)\\n        external\\n        view\\n        returns (bool)\\n    {\\n        return _operatorsForAll[owner][operator] || _superOperators[operator];\\n    }\\n\\n    /**\\n     * @param from sender address\\n     * @param owner owner address of the token\\n     * @param id token id to burn\\n     */\\n    function _burn(\\n        address from,\\n        address owner,\\n        uint256 id\\n    ) internal {\\n        require(from == owner, \\\"not owner\\\");\\n        _owners[id] = 2**160; // cannot mint it again\\n        _numNFTPerAddress[from]--;\\n        emit Transfer(from, address(0), id);\\n    }\\n\\n    /// @notice Burns token `id`.\\n    /// @param id token which will be burnt.\\n    function burn(uint256 id) external {\\n        _burn(msg.sender, _ownerOf(id), id);\\n    }\\n\\n    /// @notice Burn token`id` from `from`.\\n    /// @param from address whose token is to be burnt.\\n    /// @param id token which will be burnt.\\n    function burnFrom(address from, uint256 id) external {\\n        require(from != address(0), \\\"Invalid sender address\\\");\\n        (address owner, bool operatorEnabled) = _ownerAndOperatorEnabledOf(id);\\n        require(\\n            msg.sender == from ||\\n                _metaTransactionContracts[msg.sender] ||\\n                (operatorEnabled && _operators[id] == msg.sender) ||\\n                _operatorsForAll[from][msg.sender] ||\\n                _superOperators[msg.sender],\\n            \\\"not authorized to burn\\\"\\n        );\\n        _burn(from, owner, id);\\n    }\\n\\n    /**\\n     * @param operator Sender of the tx\\n     * @param from Owner of the token\\n     * @param to Recipient\\n     * @param tokenId Token id\\n     * @param _data extra data\\n     */\\n    function _checkOnERC721Received(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal returns (bool) {\\n        bytes4 retval = ERC721TokenReceiver(to).onERC721Received(operator, from, tokenId, _data);\\n        return (retval == _ERC721_RECEIVED);\\n    }\\n\\n    /**\\n     * @dev Check if receiving contract accepts erc721 batch transfers.\\n     * @param operator Sender of the tx\\n     * @param from Owner of the token\\n     * @param to Recipient\\n     * @param ids Token ids\\n     * @param _data extra data\\n     * @return Whether the expected value of 0x4b808c46 is returned.\\n     */\\n    function _checkOnERC721BatchReceived(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        bytes memory _data\\n    ) internal returns (bool) {\\n        bytes4 retval = ERC721MandatoryTokenReceiver(to).onERC721BatchReceived(operator, from, ids, _data);\\n        return (retval == _ERC721_BATCH_RECEIVED);\\n    }\\n\\n    // Empty storage space in contracts for future enhancements\\n    // ref: https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/issues/13)\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"src/solc_0.5/Land/erc721/LandBaseTokenV3.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n/* solhint-disable func-order, code-complexity */\\npragma solidity 0.5.9;\\n\\nimport {ERC721BaseTokenV2} from \\\"./ERC721BaseTokenV2.sol\\\";\\n\\n/**\\n * @title LandBaseTokenV3\\n * @author The Sandbox\\n * @notice Implement LAND and quad functionalities on top of an ERC721 token\\n * @dev This contract implements a quad tree structure to handle groups of ERC721 tokens at once\\n */\\ncontract LandBaseTokenV3 is ERC721BaseTokenV2 {\\n    // Our grid is 408 x 408 lands\\n    uint256 internal constant GRID_SIZE = 408;\\n\\n    uint256 internal constant LAYER = 0xFF00000000000000000000000000000000000000000000000000000000000000;\\n    uint256 internal constant LAYER_1x1 = 0x0000000000000000000000000000000000000000000000000000000000000000;\\n    uint256 internal constant LAYER_3x3 = 0x0100000000000000000000000000000000000000000000000000000000000000;\\n    uint256 internal constant LAYER_6x6 = 0x0200000000000000000000000000000000000000000000000000000000000000;\\n    uint256 internal constant LAYER_12x12 = 0x0300000000000000000000000000000000000000000000000000000000000000;\\n    uint256 internal constant LAYER_24x24 = 0x0400000000000000000000000000000000000000000000000000000000000000;\\n\\n    mapping(address => bool) internal _minters;\\n    event Minter(address indexed superOperator, bool enabled);\\n\\n    struct Land {\\n        uint256 x;\\n        uint256 y;\\n        uint256 size;\\n    }\\n\\n    /**\\n     * @notice Mint a new quad (aligned to a quad tree with size 1, 3, 6, 12 or 24 only)\\n     * @param to The recipient of the new quad\\n     * @param size The size of the new quad\\n     * @param x The top left x coordinate of the new quad\\n     * @param y The top left y coordinate of the new quad\\n     * @param data extra data to pass to the transfer\\n     */\\n    function mintQuad(\\n        address to,\\n        uint256 size,\\n        uint256 x,\\n        uint256 y,\\n        bytes calldata data\\n    ) external {\\n        require(to != address(0), \\\"to is zero address\\\");\\n        require(size != 0, \\\"size cannot be zero\\\");\\n        require(isMinter(msg.sender), \\\"Only a minter can mint\\\");\\n\\n        _isValidQuad(size, x, y);\\n\\n        (uint256 layer, , ) = _getQuadLayer(size);\\n        uint256 quadId = _getQuadId(layer, x, y);\\n\\n        _checkOwner(size, x, y, 24);\\n        for (uint256 i = 0; i < size * size; i++) {\\n            uint256 _id = _idInPath(i, size, x, y);\\n            require(_owners[_id] == 0, \\\"Already minted\\\");\\n            emit Transfer(address(0), to, _id);\\n        }\\n\\n        _owners[quadId] = uint256(to);\\n        _numNFTPerAddress[to] += size * size;\\n\\n        _checkBatchReceiverAcceptQuad(msg.sender, address(0), to, size, x, y, data);\\n    }\\n\\n    /**\\n     * @notice Checks if a parent quad has child quads already minted.\\n     *  Then mints the rest child quads and transfers the parent quad.\\n     *  Should only be called by the tunnel.\\n     * @param to The recipient of the new quad\\n     * @param size The size of the new quad\\n     * @param x The top left x coordinate of the new quad\\n     * @param y The top left y coordinate of the new quad\\n     * @param data extra data to pass to the transfer\\n     */\\n    function mintAndTransferQuad(\\n        address to,\\n        uint256 size,\\n        uint256 x,\\n        uint256 y,\\n        bytes calldata data\\n    ) external {\\n        require(to != address(0), \\\"to is zero address\\\");\\n        require(isMinter(msg.sender), \\\"Only a minter can mint\\\");\\n\\n        if (exists(size, x, y) == true) {\\n            _transferQuad(msg.sender, to, size, x, y);\\n            _numNFTPerAddress[msg.sender] -= size * size;\\n            _numNFTPerAddress[to] += size * size;\\n            _checkBatchReceiverAcceptQuad(msg.sender, msg.sender, to, size, x, y, data);\\n        } else {\\n            _mintAndTransferQuad(to, size, x, y, data);\\n        }\\n    }\\n\\n    /// @notice transfer one quad (aligned to a quad tree with size 3, 6, 12 or 24 only)\\n    /// @param from current owner of the quad\\n    /// @param to destination\\n    /// @param size size of the quad\\n    /// @param x The top left x coordinate of the quad\\n    /// @param y The top left y coordinate of the quad\\n    /// @param data additional data\\n    function transferQuad(\\n        address from,\\n        address to,\\n        uint256 size,\\n        uint256 x,\\n        uint256 y,\\n        bytes calldata data\\n    ) external {\\n        require(from != address(0), \\\"from is zero address\\\");\\n        require(to != address(0), \\\"can't send to zero address\\\");\\n        bool metaTx = msg.sender != from && _metaTransactionContracts[msg.sender];\\n        if (msg.sender != from && !metaTx) {\\n            require(\\n                _operatorsForAll[from][msg.sender] || _superOperators[msg.sender],\\n                \\\"not authorized to transferQuad\\\"\\n            );\\n        }\\n        _transferQuad(from, to, size, x, y);\\n        _numNFTPerAddress[from] -= size * size;\\n        _numNFTPerAddress[to] += size * size;\\n\\n        _checkBatchReceiverAcceptQuad(metaTx ? from : msg.sender, from, to, size, x, y, data);\\n    }\\n\\n    /// @notice transfer multiple quad (aligned to a quad tree with size 3, 6, 12 or 24 only)\\n    /// @param from current owner of the quad\\n    /// @param to destination\\n    /// @param sizes list of sizes for each quad\\n    /// @param xs list of top left x coordinates for each quad\\n    /// @param ys list of top left y coordinates for each quad\\n    /// @param data additional data\\n    function batchTransferQuad(\\n        address from,\\n        address to,\\n        uint256[] calldata sizes,\\n        uint256[] calldata xs,\\n        uint256[] calldata ys,\\n        bytes calldata data\\n    ) external {\\n        require(from != address(0), \\\"from is zero address\\\");\\n        require(to != address(0), \\\"can't send to zero address\\\");\\n        require(sizes.length == xs.length, \\\"LandBaseTokenV3: sizes's and x's length are different\\\");\\n        require(xs.length == ys.length, \\\"LandBaseTokenV3: x's and y's length are different\\\");\\n        bool metaTx = msg.sender != from && _metaTransactionContracts[msg.sender];\\n        if (msg.sender != from && !metaTx) {\\n            require(\\n                _operatorsForAll[from][msg.sender] || _superOperators[msg.sender],\\n                \\\"not authorized to transferMultiQuads\\\"\\n            );\\n        }\\n        uint256 numTokensTransfered = 0;\\n        for (uint256 i = 0; i < sizes.length; i++) {\\n            uint256 size = sizes[i];\\n            _transferQuad(from, to, size, xs[i], ys[i]);\\n            numTokensTransfered += size * size;\\n        }\\n        _numNFTPerAddress[from] -= numTokensTransfered;\\n        _numNFTPerAddress[to] += numTokensTransfered;\\n\\n        if (to.isContract() && _checkInterfaceWith10000Gas(to, ERC721_MANDATORY_RECEIVER)) {\\n            uint256[] memory ids = new uint256[](numTokensTransfered);\\n            uint256 counter = 0;\\n            for (uint256 j = 0; j < sizes.length; j++) {\\n                uint256 size = sizes[j];\\n                for (uint256 i = 0; i < size * size; i++) {\\n                    ids[counter] = _idInPath(i, size, xs[j], ys[j]);\\n                    counter++;\\n                }\\n            }\\n            require(\\n                _checkOnERC721BatchReceived(metaTx ? from : msg.sender, from, to, ids, data),\\n                \\\"erc721 batch transfer rejected by to\\\"\\n            );\\n        }\\n    }\\n\\n    /// @notice Enable or disable the ability of `minter` to mint tokens\\n    /// @param minter address that will be given/removed minter right.\\n    /// @param enabled set whether the minter is enabled or disabled.\\n    function setMinter(address minter, bool enabled) external onlyAdmin {\\n        require(minter != address(0), \\\"address 0 is not allowed as minter\\\");\\n        require(enabled != _minters[minter], \\\"the status should be different than the current one\\\");\\n        _minters[minter] = enabled;\\n        emit Minter(minter, enabled);\\n    }\\n\\n    /// @notice total width of the map\\n    /// @return width\\n    function width() external pure returns (uint256) {\\n        return GRID_SIZE;\\n    }\\n\\n    /// @notice total height of the map\\n    /// @return height\\n    function height() external pure returns (uint256) {\\n        return GRID_SIZE;\\n    }\\n\\n    /// @notice x coordinate of Land token\\n    /// @param id tokenId\\n    /// @return the x coordinates\\n    function getX(uint256 id) external pure returns (uint256) {\\n        return _getX(id);\\n    }\\n\\n    /// @notice y coordinate of Land token\\n    /// @param id tokenId\\n    /// @return the y coordinates\\n    function getY(uint256 id) external pure returns (uint256) {\\n        return _getY(id);\\n    }\\n\\n    /// @notice check whether address `who` is given minter rights.\\n    /// @param who The address to query.\\n    /// @return whether the address has minter rights.\\n    function isMinter(address who) public view returns (bool) {\\n        return _minters[who];\\n    }\\n\\n    /// @notice checks if Land has been minted or not\\n    /// @param size size of the quad\\n    /// @param x x coordinate of the quad\\n    /// @param y y coordinate of the quad\\n    /// @return bool for if Land has been minted or not\\n    function exists(\\n        uint256 size,\\n        uint256 x,\\n        uint256 y\\n    ) public view returns (bool) {\\n        _isValidQuad(size, x, y);\\n        return _ownerOfQuad(size, x, y) != address(0);\\n    }\\n\\n    function _isValidQuad(uint256 size, uint256 x, uint256 y) internal pure {\\n        require(size == 1 || size == 3 || size == 6 || size == 12 || size == 24, \\\"Invalid size\\\");\\n        require(x % size == 0, \\\"Invalid x coordinate\\\");\\n        require(y % size == 0, \\\"Invalid y coordinate\\\");\\n        require(x <= GRID_SIZE - size, \\\"x out of bounds\\\");\\n        require(y <= GRID_SIZE - size, \\\"y out of bounds\\\");\\n    }\\n\\n    /**\\n     * @dev checks if the child quads in the parent quad (size, x, y) are owned by msg.sender.\\n     * It recursively checks child quad of every size(exculding Lands of 1x1 size) are minted or not.\\n     * Quad which are minted are pushed into quadMinted to also check if every Land of size 1x1 in the parent quad is minted or not.\\n     * While checking if the every child Quad and Land is minted it also checks and clear the owner for quads which are minted.\\n     * Finally it checks if the new owner if is a contract can handle ERC721 tokens or not and transfers the parent quad to new owner.\\n     * @param to The address to which the ownership of the quad will be transferred\\n     * @param size The size of the quad being minted and transfered\\n     * @param x The x-coordinate of the top-left corner of the quad being minted.\\n     * @param y The y-coordinate of the top-left corner of the quad being minted.\\n     * @param data extra data to pass to the transfer\\n    */\\n    function _mintAndTransferQuad(\\n        address to,\\n        uint256 size,\\n        uint256 x,\\n        uint256 y,\\n        bytes memory data\\n    ) internal {\\n        (uint256 layer, , ) = _getQuadLayer(size);\\n        uint256 quadId = _getQuadId(layer, x, y);\\n\\n        // Length of array is equal to number of 3x3 child quad a 24x24 quad can have. Would be used to push the minted Quads.\\n        Land[] memory quadMinted = new Land[](64);\\n        // index of last minted quad pushed on quadMinted Array\\n        uint256 index;\\n        uint256 numLandMinted;\\n\\n        // if size of the Quad in land struct to be transfered is greater than 3 we check recursivly if the child quads are minted or not.\\n        if (size > 3) {\\n            (index, numLandMinted) = _checkAndClearOwner(\\n                Land({x: x, y: y, size: size}),\\n                quadMinted,\\n                numLandMinted,\\n                index,\\n                size / 2\\n            );\\n        }\\n\\n        // Lopping around the Quad in land struct to generate ids of 1x1 land token and checking if they are owned by msg.sender\\n        {\\n            for (uint256 i = 0; i < size * size; i++) {\\n                uint256 _id = _idInPath(i, size, x, y);\\n                // checking land with token id \\\"_id\\\" is in the quadMinted array.\\n                bool isAlreadyMinted = _isQuadMinted(quadMinted, Land({x: _getX(_id), y: _getY(_id), size: 1}), index);\\n                if (isAlreadyMinted) {\\n                    // if land is in the quadMinted array there just emitting transfer event.\\n                    emit Transfer(msg.sender, to, _id);\\n                } else {\\n                    if (address(uint160(_owners[_id])) == msg.sender) {\\n                        if (_operators[_id] != address(0)) _operators[_id] = address(0);\\n                        numLandMinted += 1;\\n                        emit Transfer(msg.sender, to, _id);\\n                    } else {\\n                        // else is checked if owned by the msg.sender or not. If it is not owned by msg.sender it should not have an owner.\\n                        require(_owners[_id] == 0, \\\"Already minted\\\");\\n\\n                        emit Transfer(address(0), to, _id);\\n                    }\\n                }\\n            }\\n        }\\n\\n        // checking if the new owner \\\"to\\\" is a contract. If yes, checking if it could handle ERC721 tokens.\\n        _checkBatchReceiverAcceptQuadAndClearOwner(quadMinted, index, numLandMinted, to, size, x, y, data);\\n\\n        _owners[quadId] = uint256(to);\\n        _numNFTPerAddress[to] += size * size;\\n        _numNFTPerAddress[msg.sender] -= numLandMinted;\\n    }\\n\\n    /// @param operator sender of the tx\\n    /// @param from owner of the token\\n    /// @param to recipient\\n    /// @param size The size of the new quad\\n    /// @param x The top left x coordinate of the new quad\\n    /// @param y The top left y coordinate of the new quad\\n    /// @param data extra data\\n    function _checkBatchReceiverAcceptQuad(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 size,\\n        uint256 x,\\n        uint256 y,\\n        bytes memory data\\n    ) internal {\\n        if (to.isContract() && _checkInterfaceWith10000Gas(to, ERC721_MANDATORY_RECEIVER)) {\\n            uint256[] memory ids = new uint256[](size * size);\\n            for (uint256 i = 0; i < size * size; i++) {\\n                ids[i] = _idInPath(i, size, x, y);\\n            }\\n            require(_checkOnERC721BatchReceived(operator, from, to, ids, data), \\\"erc721 batch transfer rejected by to\\\");\\n        }\\n    }\\n\\n    /// @dev checks if the receiver of the quad(size, x, y) is a contact. If yes can it handle ERC721 tokens.\\n    ///      It also clears owner of 1x1 land's owned by msg.sender.\\n    /// @param quadMinted array of lands\\n    /// @param index array size\\n    /// @param numLandMinted number of lands transferred\\n    /// @param to recipient\\n    /// @param size The size of the new quad\\n    /// @param x The top left x coordinate of the new quad\\n    /// @param y The top left y coordinate of the new quad\\n    /// @param data extra data\\n    function _checkBatchReceiverAcceptQuadAndClearOwner(\\n        Land[] memory quadMinted,\\n        uint256 index,\\n        uint256 numLandMinted,\\n        address to,\\n        uint256 size,\\n        uint256 x,\\n        uint256 y,\\n        bytes memory data\\n    ) internal {\\n        // checks if to is a contract and supports ERC721_MANDATORY_RECEIVER interfaces.\\n        // if it doesn't it just clears the owner of 1x1 lands in quad(size, x, y)\\n        if (to.isContract() && _checkInterfaceWith10000Gas(to, ERC721_MANDATORY_RECEIVER)) {\\n            // array to push minted 1x1 land\\n            uint256[] memory idsToTransfer = new uint256[](numLandMinted);\\n            // index of last land pushed in idsToTransfer array\\n            uint256 transferIndex;\\n            // array to push ids to be minted\\n            uint256[] memory idsToMint = new uint256[]((size * size) - numLandMinted);\\n            // index of last land pushed in idsToMint array\\n            uint256 mintIndex;\\n            // iterating over every 1x1 land in the quad to be pushed in the above arrays\\n            for (uint256 i = 0; i < size * size; i++) {\\n                uint256 id = _idInPath(i, size, x, y);\\n\\n                if (_isQuadMinted(quadMinted, Land({x: _getX(id), y: _getY(id), size: 1}), index)) {\\n                    // if land is in the quads already minted it just pushed in to the idsToTransfer array\\n                    idsToTransfer[transferIndex] = id;\\n                    transferIndex++;\\n                } else if (address(uint160(_owners[id])) == msg.sender) {\\n                    _owners[id] = 0;\\n                    idsToTransfer[transferIndex] = id;\\n                    transferIndex++;\\n                } else {\\n                    // else it is not owned by any one and and pushed in teh idsToMint array\\n                    idsToMint[mintIndex] = id;\\n                    mintIndex++;\\n                }\\n            }\\n\\n            // checking if \\\"to\\\" contact can handle ERC721 tokens\\n            require(\\n                _checkOnERC721BatchReceived(msg.sender, address(0), to, idsToMint, data),\\n                \\\"erc721 batch transfer rejected by to\\\"\\n            );\\n            require(\\n                _checkOnERC721BatchReceived(msg.sender, msg.sender, to, idsToTransfer, data),\\n                \\\"erc721 batch transfer rejected by to\\\"\\n            );\\n        } else {\\n            for (uint256 i = 0; i < size * size; i++) {\\n                uint256 id = _idInPath(i, size, x, y);\\n                if (address(uint160(_owners[id])) == msg.sender) _owners[id] = 0;\\n            }\\n        }\\n    }\\n\\n    /// @param from current owner of the quad\\n    /// @param to destination\\n    /// @param size size of the quad\\n    /// @param x The top left x coordinate of the quad\\n    /// @param y The top left y coordinate of the quad\\n    function _transferQuad(\\n        address from,\\n        address to,\\n        uint256 size,\\n        uint256 x,\\n        uint256 y\\n    ) internal {\\n        _isValidQuad(size, x, y);\\n        if (size == 1) {\\n            uint256 id1x1 = _getQuadId(LAYER_1x1, x, y);\\n            address owner = _ownerOf(id1x1);\\n            require(owner != address(0), \\\"token does not exist\\\");\\n            require(owner == from, \\\"not owner in _transferQuad\\\");\\n            _owners[id1x1] = uint256(to);\\n        } else {\\n            _regroupQuad(from, to, Land({x: x, y: y, size: size}), true, size / 2);\\n        }\\n        for (uint256 i = 0; i < size * size; i++) {\\n            emit Transfer(from, to, _idInPath(i, size, x, y));\\n        }\\n    }\\n\\n    /// @dev checks if the quad is already minted compared to another quad size\\n    /// @param size size of the quad\\n    /// @param x The top left x coordinate of the quad\\n    /// @param y The top left y coordinate of the quad\\n    /// @param quadCompareSize size to compare with\\n    function _checkOwner(\\n        uint256 size,\\n        uint256 x,\\n        uint256 y,\\n        uint256 quadCompareSize\\n    ) internal view {\\n        (uint256 layer, , ) = _getQuadLayer(quadCompareSize);\\n\\n        if (size <= quadCompareSize) {\\n            // when the size of the quad is smaller than the quadCompareSize(size to be compared with),\\n            // then it is checked if the bigger quad which encapsulates the quad to be minted\\n            // of with size equals the quadCompareSize has been minted or not\\n            require(\\n                _owners[\\n                    _getQuadId(layer, (x / quadCompareSize) * quadCompareSize, (y / quadCompareSize) * quadCompareSize)\\n                ] == 0,\\n                \\\"Already minted\\\"\\n            );\\n        } else {\\n            // when the size is bigger than the quadCompare size the owner of all the smaller quads with size\\n            // quadCompare size in the quad to be minted are checked if they are minted or not\\n            uint256 toX = x + size;\\n            uint256 toY = y + size;\\n            for (uint256 xi = x; xi < toX; xi += quadCompareSize) {\\n                for (uint256 yi = y; yi < toY; yi += quadCompareSize) {\\n                    require(_owners[_getQuadId(layer, xi, yi)] == 0, \\\"Already minted\\\");\\n                }\\n            }\\n        }\\n\\n        quadCompareSize = quadCompareSize / 2;\\n        if (quadCompareSize >= 3) _checkOwner(size, x, y, quadCompareSize);\\n    }\\n\\n    /// @dev checks the owner of land of token id 'id' to be 'from' and clears it\\n    /// @param from owner of the token\\n    /// @param tokenId token id\\n    /// @return if the address is the owner of the token\\n    function _checkAndClearLandOwner(address from, uint256 tokenId) internal returns (bool) {\\n        uint256 currentOwner = _owners[tokenId];\\n        if (currentOwner != 0) {\\n            require(address(currentOwner) == from, \\\"not owner\\\");\\n            _owners[tokenId] = 0;\\n            return true;\\n        }\\n        return false;\\n    }\\n\\n    /** @dev recursivly checks if the child quads are minted in land and push them to the quadMinted array.\\n     * if a child quad is minted in land such quads child quads will be skipped such that there is no\\n     * overlapping in quads which are minted. it clears the minted child quads owners.\\n     * @param land the stuct which has the size x and y co-ordinate of Quad to be checked\\n     * @param quadMinted array in which the minted child quad would be pushed\\n     * @param numLandMinted number of lands transferred\\n     * @param index index of last element of quadMinted array\\n     * @param quadCompareSize the size of the child quads to be checked.\\n     * @return the index of last quad pushed in quadMinted array and the total land already minted\\n     * @return the number of lands minted\\n     */\\n    function _checkAndClearOwner(\\n        Land memory land,\\n        Land[] memory quadMinted,\\n        uint256 numLandMinted,\\n        uint256 index,\\n        uint256 quadCompareSize\\n    ) internal returns (uint256, uint256) {\\n        (uint256 layer, , ) = _getQuadLayer(quadCompareSize);\\n        uint256 toX = land.x + land.size;\\n        uint256 toY = land.y + land.size;\\n\\n        //Lopping around the Quad in land struct to check if the child quad are minted or not\\n        for (uint256 xi = land.x; xi < toX; xi += quadCompareSize) {\\n            for (uint256 yi = land.y; yi < toY; yi += quadCompareSize) {\\n                //checking if the child Quad is minted or not. i.e Checks if the quad is in the quadMinted array.\\n                bool isQuadChecked = _isQuadMinted(quadMinted, Land({x: xi, y: yi, size: quadCompareSize}), index);\\n                // if child quad is not already in the quadMinted array.\\n                if (!isQuadChecked) {\\n                    uint256 id = _getQuadId(layer, xi, yi);\\n                    address owner = address(uint160(_owners[id]));\\n                    // owner of the child quad is checked to be owned by msg.sender else should not be owned by anyone.\\n                    if (owner == msg.sender) {\\n                        // if child quad is minted it would be pushed in quadMinted array.\\n                        quadMinted[index] = Land({x: xi, y: yi, size: quadCompareSize});\\n                        // index of quadMinted is increased\\n                        index++;\\n                        // total land minted is increase by the number if land of 1x1 in child quad\\n                        numLandMinted += quadCompareSize * quadCompareSize;\\n                        //owner is cleared\\n                        _owners[id] = 0;\\n                    } else {\\n                        require(owner == address(0), \\\"Already minted\\\");\\n                    }\\n                }\\n            }\\n        }\\n\\n        // size of the child quad is set to be the next smaller child quad size (12 => 6 => 3)\\n        quadCompareSize = quadCompareSize / 2;\\n        // if child quad size is greater than 3 _checkAndClearOwner is checked for new child quads in the  quad in land struct.\\n        if (quadCompareSize >= 3)\\n            (index, numLandMinted) = _checkAndClearOwner(land, quadMinted, numLandMinted, index, quadCompareSize);\\n        return (index, numLandMinted);\\n    }\\n\\n    /// @dev checks if the Land's child quads are owned by the from address and clears all the previous owners\\n    /// if all the child quads are not owned by the \\\"from\\\" address then the owner of parent quad to the land\\n    /// is checked if owned by the \\\"from\\\" address. If from is the owner then land owner is set to \\\"to\\\" address\\n    /// @param from address of the previous owner\\n    /// @param to address of the new owner\\n    /// @param land the quad to be regrouped and transferred\\n    /// @param set for setting the new owner\\n    /// @param childQuadSize  size of the child quad to be checked for owner in the regrouping\\n    function _regroupQuad(\\n        address from,\\n        address to,\\n        Land memory land,\\n        bool set,\\n        uint256 childQuadSize\\n    ) internal returns (bool) {\\n        (uint256 layer, , uint256 childLayer) = _getQuadLayer(land.size);\\n        uint256 quadId = _getQuadId(layer, land.x, land.y);\\n        bool ownerOfAll = true;\\n\\n        {\\n            // double for loop iterates and checks owner of all the smaller quads in land\\n            for (uint256 xi = land.x; xi < land.x + land.size; xi += childQuadSize) {\\n                for (uint256 yi = land.y; yi < land.y + land.size; yi += childQuadSize) {\\n                    uint256 ownerChild;\\n                    bool ownAllIndividual;\\n                    if (childQuadSize < 3) {\\n                        // case when the smaller quad is 1x1,\\n                        ownAllIndividual = _checkAndClearLandOwner(from, _getQuadId(LAYER_1x1, xi, yi)) && ownerOfAll;\\n                    } else {\\n                        // recursively calling the _regroupQuad function to check the owner of child quads.\\n                        ownAllIndividual = _regroupQuad(\\n                            from,\\n                            to,\\n                            Land({x: xi, y: yi, size: childQuadSize}),\\n                            false,\\n                            childQuadSize / 2\\n                        );\\n                        uint256 idChild = _getQuadId(childLayer, xi, yi);\\n                        ownerChild = _owners[idChild];\\n                        if (ownerChild != 0) {\\n                            if (!ownAllIndividual) {\\n                                // checking the owner of child quad\\n                                require(ownerChild == uint256(from), \\\"not owner of child Quad\\\");\\n                            }\\n                            // clearing owner of child quad\\n                            _owners[idChild] = 0;\\n                        }\\n                    }\\n                    // ownerOfAll should be true if \\\"from\\\" is owner of all the child quads iterated over\\n                    ownerOfAll = (ownAllIndividual || ownerChild != 0) && ownerOfAll;\\n                }\\n            }\\n        }\\n\\n        // if set is true it check if the \\\"from\\\" is owner of all else checks for the owner of parent quad is\\n        // owned by \\\"from\\\" and sets the owner for the id of land to \\\"to\\\" address.\\n        if (set) {\\n            if (!ownerOfAll) {\\n                require(_ownerOfQuad(land.size, land.x, land.y) == from, \\\"not owner of all sub quads nor parent quads\\\");\\n            }\\n            _owners[quadId] = uint256(to);\\n            return true;\\n        }\\n\\n        return ownerOfAll;\\n    }\\n\\n    /// @notice Goes through every token id of a quad id\\n    /// @param i ith token of the quad\\n    /// @param size size of the quad\\n    /// @param x The top left x coordinate of the quad\\n    /// @param y The top left y coordinate of the quad\\n    /// @return the \\\"ith\\\" token id of the quad\\n    function _idInPath(\\n        uint256 i,\\n        uint256 size,\\n        uint256 x,\\n        uint256 y\\n    ) internal pure returns (uint256) {\\n        uint256 row = i / size;\\n        if (row % 2 == 0) {\\n            // allow ids to follow a path in a quad\\n            return _getQuadId(LAYER_1x1, (x + (i % size)), (y + row));\\n        } else {\\n            return _getQuadId(LAYER_1x1, (x + size) - (1 + (i % size)), (y + row));\\n        }\\n    }\\n\\n    /// @param mintedLand array of lands\\n    /// @param quad quad to check\\n    /// @param index size of the array\\n    /// @return is the quad minted\\n    function _isQuadMinted(\\n        Land[] memory mintedLand,\\n        Land memory quad,\\n        uint256 index\\n    ) internal pure returns (bool) {\\n        for (uint256 i = 0; i < index; i++) {\\n            Land memory land = mintedLand[i];\\n            if (\\n                land.size > quad.size &&\\n                quad.x >= land.x &&\\n                quad.x < land.x + land.size &&\\n                quad.y >= land.y &&\\n                quad.y < land.y + land.size\\n            ) {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n\\n    /// @param id token id\\n    /// @return the x coordinate\\n    function _getX(uint256 id) internal pure returns (uint256) {\\n        return (id & ~LAYER) % GRID_SIZE;\\n    }\\n\\n    /// @param id token id\\n    /// @return the y coordinate\\n    function _getY(uint256 id) internal pure returns (uint256) {\\n        return (id & ~LAYER) / GRID_SIZE;\\n    }\\n\\n    /// @param size of the quad\\n    /// @return layer the layer associated to that quad size\\n    /// @return parentSize size of the parent quad\\n    /// @return childLayer layer of the child quad size\\n    function _getQuadLayer(uint256 size)\\n        internal\\n        pure\\n        returns (\\n            uint256 layer,\\n            uint256 parentSize,\\n            uint256 childLayer\\n        )\\n    {\\n        if (size == 1) {\\n            layer = LAYER_1x1;\\n            parentSize = 3;\\n        } else if (size == 3) {\\n            layer = LAYER_3x3;\\n            parentSize = 6;\\n        } else if (size == 6) {\\n            layer = LAYER_6x6;\\n            parentSize = 12;\\n            childLayer = LAYER_3x3;\\n        } else if (size == 12) {\\n            layer = LAYER_12x12;\\n            parentSize = 24;\\n            childLayer = LAYER_6x6;\\n        } else if (size == 24) {\\n            layer = LAYER_24x24;\\n            childLayer = LAYER_12x12;\\n        } else {\\n            require(false, \\\"Invalid size\\\");\\n        }\\n    }\\n\\n    /// @param layer of the quad size\\n    /// @param x coordinate of the quad\\n    /// @param y coordinate of the quad\\n    /// @return the quad id\\n    function _getQuadId(\\n        uint256 layer,\\n        uint256 x,\\n        uint256 y\\n    ) internal pure returns (uint256) {\\n        return layer + x + y * GRID_SIZE;\\n    }\\n\\n    /// @param size of the quad\\n    /// @param x coordinate of the quad\\n    /// @param y coordinate of the quad\\n    /// @return address of the owner of the quad\\n    function _ownerOfQuad(\\n        uint256 size,\\n        uint256 x,\\n        uint256 y\\n    ) internal view returns (address) {\\n        (uint256 layer, uint256 parentSize, ) = _getQuadLayer(size);\\n        address owner = address(_owners[_getQuadId(layer, (x / size) * size, (y / size) * size)]);\\n        if (owner != address(0)) {\\n            return owner;\\n        } else if (size < 24) {\\n            return _ownerOfQuad(parentSize, x, y);\\n        }\\n        return address(0);\\n    }\\n\\n    /// @param id quad id\\n    /// @return size of the quad\\n    /// @return x coordinate\\n    /// @return y coordinate\\n    function _getQuadById(uint256 id)\\n        internal\\n        pure\\n        returns (\\n            uint256 size,\\n            uint256 x,\\n            uint256 y\\n        )\\n    {\\n        x = _getX(id);\\n        y = _getY(id);\\n        uint256 layer = id & LAYER;\\n        if (layer == LAYER_1x1) {\\n            size = 1;\\n        } else if (layer == LAYER_3x3) {\\n            size = 3;\\n        } else if (layer == LAYER_6x6) {\\n            size = 6;\\n        } else if (layer == LAYER_12x12) {\\n            size = 12;\\n        } else if (layer == LAYER_24x24) {\\n            size = 24;\\n        } else {\\n            require(false, \\\"Invalid token id\\\");\\n        }\\n    }\\n\\n    /// @param id quad id\\n    /// @return address of the owner\\n    function _ownerOf(uint256 id) internal view returns (address) {\\n        require(id & LAYER == 0, \\\"Invalid token id\\\");\\n        (uint256 size, uint256 x, uint256 y) = _getQuadById(id);\\n        require(x % size == 0, \\\"x coordinate: Invalid token id\\\");\\n        require(y % size == 0, \\\"y coordinate: Invalid token id\\\");\\n        return _ownerOfQuad(size, x, y);\\n    }\\n\\n    /// @param id token id\\n    /// @return owner owner of the token\\n    /// @return operatorEnabled is operator enabled\\n    function _ownerAndOperatorEnabledOf(uint256 id) internal view returns (address owner, bool operatorEnabled) {\\n        require(id & LAYER == 0, \\\"Invalid token id\\\");\\n        uint256 x = _getX(id);\\n        uint256 y = _getY(id);\\n        uint256 owner1x1 = _owners[id];\\n\\n        if (owner1x1 != 0) {\\n            owner = address(owner1x1);\\n            operatorEnabled = (owner1x1 / 2**255) == 1;\\n        } else {\\n            owner = _ownerOfQuad(3, (x * 3) / 3, (y * 3) / 3);\\n            operatorEnabled = false;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"src/solc_0.5/LandV3.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n/* solhint-disable no-empty-blocks */\\npragma solidity 0.5.9;\\n\\nimport {LandBaseTokenV3} from \\\"./Land/erc721/LandBaseTokenV3.sol\\\";\\nimport {OperatorFiltererUpgradeable, IOperatorFilterRegistry} from \\\"./OperatorFilterer/contracts/upgradeable/OperatorFiltererUpgradeable.sol\\\";\\n\\n/**\\n * @title LandV3\\n * @author The Sandbox\\n * @notice LAND contract\\n * @dev LAND contract implements ERC721, quad and marketplace filtering functionalities\\n */\\ncontract LandV3 is LandBaseTokenV3, OperatorFiltererUpgradeable {\\n    event OperatorRegistrySet(address indexed registry);\\n\\n    /**\\n     * @notice Return the name of the token contract\\n     * @return The name of the token contract\\n     */\\n    function name() external pure returns (string memory) {\\n        return \\\"Sandbox's LANDs\\\";\\n    }\\n\\n    /**\\n     * @notice Return the symbol of the token contract\\n     * @return The symbol of the token contract\\n     */\\n    function symbol() external pure returns (string memory) {\\n        return \\\"LAND\\\";\\n    }\\n\\n    // solium-disable-next-line security/no-assign-params\\n    function uint2str(uint256 _i) internal pure returns (string memory) {\\n        if (_i == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 j = _i;\\n        uint256 len;\\n        while (j != 0) {\\n            len++;\\n            j /= 10;\\n        }\\n        bytes memory bstr = new bytes(len);\\n        uint256 k = len - 1;\\n        while (_i != 0) {\\n            bstr[k--] = byte(uint8(48 + (_i % 10)));\\n            _i /= 10;\\n        }\\n        return string(bstr);\\n    }\\n\\n    /**\\n     * @notice Return the URI of a specific token\\n     * @param id The id of the token\\n     * @return The URI of the token\\n     */\\n    function tokenURI(uint256 id) public view returns (string memory) {\\n        require(_ownerOf(id) != address(0), \\\"LandV3: Id does not exist\\\");\\n        return string(abi.encodePacked(\\\"https://api.sandbox.game/lands/\\\", uint2str(id), \\\"/metadata.json\\\"));\\n    }\\n\\n    /**\\n     * @notice Check if the contract supports an interface\\n     * 0x01ffc9a7 is ERC-165\\n     * 0x80ac58cd is ERC-721\\n     * 0x5b5e139f is ERC-721 metadata\\n     * @param id The id of the interface\\n     * @return True if the interface is supported\\n     */\\n    function supportsInterface(bytes4 id) external pure returns (bool) {\\n        return id == 0x01ffc9a7 || id == 0x80ac58cd || id == 0x5b5e139f;\\n    }\\n\\n    /// @notice This function is used to register Land contract on the Operator Filterer Registry of Opensea.can only be called by admin.\\n    /// @dev used to register contract and subscribe to the subscriptionOrRegistrantToCopy's black list.\\n    /// @param subscriptionOrRegistrantToCopy registration address of the list to subscribe.\\n    /// @param subscribe bool to signify subscription \\\"true\\\"\\\" or to copy the list \\\"false\\\".\\n    function register(address subscriptionOrRegistrantToCopy, bool subscribe) external onlyAdmin {\\n        require(subscriptionOrRegistrantToCopy != address(0), \\\"LandV3: subscription can't be zero address\\\");\\n        _register(subscriptionOrRegistrantToCopy, subscribe);\\n    }\\n\\n    /// @notice sets filter registry address deployed in test\\n    /// @param registry the address of the registry\\n    function setOperatorRegistry(address registry) external onlyAdmin {\\n        operatorFilterRegistry = IOperatorFilterRegistry(registry);\\n        emit OperatorRegistrySet(registry);\\n    }\\n\\n    /**\\n     * @notice Approve an operator to spend tokens on the sender behalf\\n     * @param sender The address giving the approval\\n     * @param operator The address receiving the approval\\n     * @param id The id of the token\\n     */\\n    function approveFor(\\n        address sender,\\n        address operator,\\n        uint256 id\\n    ) public onlyAllowedOperatorApproval(operator) {\\n        super.approveFor(sender, operator, id);\\n    }\\n\\n    /**\\n     * @notice Set the approval for an operator to manage all the tokens of the sender\\n     * @param operator The address receiving the approval\\n     * @param approved The determination of the approval\\n     */\\n    function setApprovalForAll(address operator, bool approved) public onlyAllowedOperatorApproval(operator) {\\n        super.setApprovalForAll(operator, approved);\\n    }\\n\\n    /**\\n     * @notice Set the approval for an operator to manage all the tokens of the sender\\n     * @param sender The address giving the approval\\n     * @param operator The address receiving the approval\\n     * @param approved The determination of the approval\\n     */\\n    function setApprovalForAllFor(\\n        address sender,\\n        address operator,\\n        bool approved\\n    ) public onlyAllowedOperatorApproval(operator) {\\n        super.setApprovalForAllFor(sender, operator, approved);\\n    }\\n\\n    /**\\n     * @notice Approve an operator to spend tokens on the sender behalf\\n     * @param operator The address receiving the approval\\n     * @param id The id of the token\\n     */\\n    function approve(address operator, uint256 id) public onlyAllowedOperatorApproval(operator) {\\n        super.approve(operator, id);\\n    }\\n\\n    /**\\n     * @notice Transfer a token between 2 addresses\\n     * @param from The sender of the token\\n     * @param to The recipient of the token\\n     * @param id The id of the token\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 id\\n    ) public onlyAllowedOperator(from) {\\n        super.transferFrom(from, to, id);\\n    }\\n\\n    /**\\n     * @notice Transfer a token between 2 addresses letting the receiver knows of the transfer\\n     * @param from The sender of the token\\n     * @param to The recipient of the token\\n     * @param id The id of the token\\n     * @param data Additional data\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        bytes memory data\\n    ) public onlyAllowedOperator(from) {\\n        super.safeTransferFrom(from, to, id, data);\\n    }\\n\\n    /**\\n     * @notice Transfer a token between 2 addresses letting the receiver knows of the transfer\\n     * @param from The send of the token\\n     * @param to The recipient of the token\\n     * @param id The id of the token\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id\\n    ) external onlyAllowedOperator(from) {\\n        super.safeTransferFrom(from, to, id, \\\"\\\");\\n    }\\n}\\n\"\r\n    },\r\n    \"src/solc_0.5/OperatorFilterer/contracts/upgradeable/OperatorFiltererUpgradeable.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity 0.5.9;\\n\\nimport {IOperatorFilterRegistry} from \\\"../../interfaces/IOperatorFilterRegistry.sol\\\";\\nimport {AddressUtils} from \\\"../../../contracts_common/Libraries/AddressUtils.sol\\\";\\n\\n/// @title OperatorFiltererUpgradeable\\n/// @author The Sandbox\\n/// @notice This contract would subscibe or copy or just to the subscription provided or just register to default subscription list\\n/// @dev This contract is the upgradeable version of the OpenSea implementation https://github.com/ProjectOpenSea/operator-filter-registry/blob/main/src/OperatorFilterer.sol and adapted to the 0.5.9 solidity version\\ncontract OperatorFiltererUpgradeable {\\n    using AddressUtils for address;\\n    IOperatorFilterRegistry public operatorFilterRegistry;\\n\\n    event ContractRegistered(address indexed subscriptionOrRegistrant, bool subscribe);\\n\\n    /**\\n     * @notice Register this contract into the registry\\n     * @param subscriptionOrRegistrantToCopy address to subscribe or copy entries from\\n     * @param subscribe should it subscribe\\n     */\\n    function _register(address subscriptionOrRegistrantToCopy, bool subscribe) internal {\\n        // If an inheriting token contract is deployed to a network without the registry deployed, the modifier\\n        // will not revert, but the contract will need to be registered with the registry once it is deployed in\\n        // order for the modifier to filter addresses.\\n        if (address(operatorFilterRegistry).isContract()) {\\n            if (!operatorFilterRegistry.isRegistered(address(this))) {\\n                if (subscribe) {\\n                    operatorFilterRegistry.registerAndSubscribe(address(this), subscriptionOrRegistrantToCopy);\\n                } else {\\n                    if (subscriptionOrRegistrantToCopy != address(0)) {\\n                        operatorFilterRegistry.registerAndCopyEntries(address(this), subscriptionOrRegistrantToCopy);\\n                    } else {\\n                        operatorFilterRegistry.register(address(this));\\n                    }\\n                }\\n            }\\n        }\\n        emit ContractRegistered(subscriptionOrRegistrantToCopy, subscribe);\\n    }\\n\\n    modifier onlyAllowedOperator(address from) {\\n        // Check registry code length to facilitate testing in environments without a deployed registry.\\n        if (address(operatorFilterRegistry).isContract()) {\\n            // Allow spending tokens from addresses with balance\\n            // Note that this still allows listings and marketplaces with escrow to transfer tokens if transferred\\n            // from an EOA.\\n            if (from == msg.sender) {\\n                _;\\n                return;\\n            }\\n            if (!operatorFilterRegistry.isOperatorAllowed(address(this), msg.sender)) {\\n                revert(\\\"Operator Not Allowed\\\");\\n            }\\n        }\\n        _;\\n    }\\n\\n    modifier onlyAllowedOperatorApproval(address operator) {\\n        // Check registry code length to facilitate testing in environments without a deployed registry.\\n        if (address(operatorFilterRegistry).isContract()) {\\n            if (!operatorFilterRegistry.isOperatorAllowed(address(this), operator)) {\\n                revert(\\\"Operator Not Allowed\\\");\\n            }\\n        }\\n        _;\\n    }\\n}\\n\"\r\n    },\r\n    \"src/solc_0.5/OperatorFilterer/interfaces/IOperatorFilterRegistry.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity 0.5.9;\\n\\n/**\\n * @title IOperatorFilterRegistry\\n * @author OpenSea\\n * @notice Interface of the operator filter registry\\n * @dev This interface comes from OpenSea https://github.com/ProjectOpenSea/operator-filter-registry/blob/main/src/IOperatorFilterRegistry.sol and adapted to the 0.5.9 solidity version\\n */\\ninterface IOperatorFilterRegistry {\\n    /**\\n     * @notice Check if the operator is allowed for the given registrant\\n     * @param registrant address of the registrant\\n     * @param operator operator address to check\\n     * @return is the operator allowed\\n     */\\n    function isOperatorAllowed(address registrant, address operator) external view returns (bool);\\n\\n    /**\\n     * @notice Register a new address\\n     * @param registrant address to register\\n     */\\n    function register(address registrant) external;\\n\\n    /**\\n     * @notice Register a new address & subscribe to an address\\n     * @param registrant address of the registrant\\n     * @param subscription address where the registrant is subscribed to\\n     */\\n    function registerAndSubscribe(address registrant, address subscription) external;\\n\\n    /**\\n     * @notice Register and copy entries of another registrant\\n     * @param registrant address of the registrant\\n     * @param registrantToCopy address to copy from\\n     */\\n    function registerAndCopyEntries(address registrant, address registrantToCopy) external;\\n\\n    /**\\n     * @notice update the operator for a registrant\\n     * @param registrant address of the registrant\\n     * @param operator operator to be updated\\n     * @param filtered is it filtered\\n     */\\n    function updateOperator(\\n        address registrant,\\n        address operator,\\n        bool filtered\\n    ) external;\\n\\n    /**\\n     * @notice Update operators for a registrant\\n     * @param registrant address of the registrant\\n     * @param operators addresses of the operators\\n     * @param filtered is it filtered\\n     */\\n    function updateOperators(\\n        address registrant,\\n        address[] calldata operators,\\n        bool filtered\\n    ) external;\\n\\n    /**\\n     * @notice Update code hash\\n     * @param registrant address of the registrant\\n     * @param codehash code hash\\n     * @param filtered is it filtered\\n     */\\n    function updateCodeHash(\\n        address registrant,\\n        bytes32 codehash,\\n        bool filtered\\n    ) external;\\n\\n    /**\\n     * @notice Update code hashes\\n     * @param registrant address of the registrant\\n     * @param codeHashes code hashes\\n     * @param filtered is it filtered\\n     */\\n    function updateCodeHashes(\\n        address registrant,\\n        bytes32[] calldata codeHashes,\\n        bool filtered\\n    ) external;\\n\\n    /**\\n     * @notice Subscribe a registrant\\n     * @param registrant address of the registrant\\n     * @param registrantToSubscribe address to subscribe with\\n     */\\n    function subscribe(address registrant, address registrantToSubscribe) external;\\n\\n    /**\\n     * @notice Unsubscribe a registrant\\n     * @param registrant address of the registrant\\n     * @param copyExistingEntries copy existing entries\\n     */\\n    function unsubscribe(address registrant, bool copyExistingEntries) external;\\n\\n    /**\\n     * @notice Get the subscription of an address\\n     * @param addr address to check\\n     * @return the registrant address\\n     */\\n    function subscriptionOf(address addr) external returns (address registrant);\\n\\n    /**\\n     * @notice Get the subscribers of the registrant\\n     * @param registrant address of the registrant\\n     * @return the subscribers addresses\\n     */\\n    function subscribers(address registrant) external returns (address[] memory);\\n\\n    /**\\n     * @notice Get a specific subscriber\\n     * @param registrant address of the registrant\\n     * @param index index to check\\n     * @return the ith subscriber of the registrant\\n     */\\n    function subscriberAt(address registrant, uint256 index) external returns (address);\\n\\n    /**\\n     * @notice Copy the entries of a registrant\\n     * @param registrant address of the registrant\\n     * @param registrantToCopy address to copy\\n     */\\n    function copyEntriesOf(address registrant, address registrantToCopy) external;\\n\\n    /**\\n     * @notice Is a registrant filtered\\n     * @param registrant address of the registrant\\n     * @param operator operator address to check\\n     * @return is it filtered\\n     */\\n    function isOperatorFiltered(address registrant, address operator) external returns (bool);\\n\\n    /**\\n     * @notice Is the code hash of an operator filtered\\n     * @param registrant address of the registrant\\n     * @param operatorWithCode operator address to check\\n     * @return is it filtered\\n     */\\n    function isCodeHashOfFiltered(address registrant, address operatorWithCode) external returns (bool);\\n\\n    /**\\n     * @notice Is the code hash filtered\\n     * @param registrant address of the registrant\\n     * @param codeHash code hash\\n     * @return is it filtered\\n     */\\n    function isCodeHashFiltered(address registrant, bytes32 codeHash) external returns (bool);\\n\\n    /**\\n     * @notice Get the filtered operators\\n     * @param addr address to check\\n     * @return filtered operators\\n     */\\n    function filteredOperators(address addr) external returns (address[] memory);\\n\\n    /**\\n     * @notice Get the filtered code hashes\\n     * @param addr address to check\\n     * @return filtered code hashes\\n     */\\n    function filteredCodeHashes(address addr) external returns (bytes32[] memory);\\n\\n    /**\\n     * @notice Get a specific operator\\n     * @param registrant address of the registrant\\n     * @param index index to check\\n     * @return address of the operator\\n     */\\n    function filteredOperatorAt(address registrant, uint256 index) external returns (address);\\n\\n    /**\\n     * @notice Get the ith filtered code hash\\n     * @param registrant address of the registrant\\n     * @param index index to check\\n     * @return the code hash\\n     */\\n    function filteredCodeHashAt(address registrant, uint256 index) external returns (bytes32);\\n\\n    /**\\n     * @notice Is the address registered\\n     * @param addr address to check\\n     * @return is it registered\\n     */\\n    function isRegistered(address addr) external returns (bool);\\n\\n    /**\\n     * @notice Get the code hash for this address\\n     * @param addr address to check\\n     * @return the code hash\\n     */\\n    function codeHashOf(address addr) external returns (bytes32);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 2000\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"constant\":true,\"inputs\":[{\"name\":\"id\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"operator\",\"type\":\"address\"},{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"height\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"ids\",\"type\":\"uint256[]\"},{\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"batchTransferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"ids\",\"type\":\"uint256[]\"},{\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"sender\",\"type\":\"address\"},{\"name\":\"operator\",\"type\":\"address\"},{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"approveFor\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"size\",\"type\":\"uint256\"},{\"name\":\"x\",\"type\":\"uint256\"},{\"name\":\"y\",\"type\":\"uint256\"},{\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"transferQuad\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"metaTransactionContract\",\"type\":\"address\"},{\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"size\",\"type\":\"uint256\"},{\"name\":\"x\",\"type\":\"uint256\"},{\"name\":\"y\",\"type\":\"uint256\"},{\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"mintAndTransferQuad\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"size\",\"type\":\"uint256\"},{\"name\":\"x\",\"type\":\"uint256\"},{\"name\":\"y\",\"type\":\"uint256\"}],\"name\":\"exists\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"who\",\"type\":\"address\"}],\"name\":\"isSuperOperator\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"size\",\"type\":\"uint256\"},{\"name\":\"x\",\"type\":\"uint256\"},{\"name\":\"y\",\"type\":\"uint256\"},{\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"mintQuad\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAdmin\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"_numNFTPerAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"metaTransactionProcessor\",\"type\":\"address\"},{\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"setMetaTransactionProcessor\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getX\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"changeAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_owners\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"registry\",\"type\":\"address\"}],\"name\":\"setOperatorRegistry\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"_operatorsForAll\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"width\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"operator\",\"type\":\"address\"},{\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"who\",\"type\":\"address\"}],\"name\":\"isMinter\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"subscriptionOrRegistrantToCopy\",\"type\":\"address\"},{\"name\":\"subscribe\",\"type\":\"bool\"}],\"name\":\"register\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"superOperator\",\"type\":\"address\"},{\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"setSuperOperator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"operatorFilterRegistry\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"id\",\"type\":\"uint256\"},{\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_operators\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"minter\",\"type\":\"address\"},{\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"setMinter\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"who\",\"type\":\"address\"}],\"name\":\"isMetaTransactionProcessor\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"sizes\",\"type\":\"uint256[]\"},{\"name\":\"xs\",\"type\":\"uint256[]\"},{\"name\":\"ys\",\"type\":\"uint256[]\"},{\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"batchTransferQuad\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"sender\",\"type\":\"address\"},{\"name\":\"operator\",\"type\":\"address\"},{\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAllFor\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"registry\",\"type\":\"address\"}],\"name\":\"OperatorRegistrySet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"subscriptionOrRegistrant\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"subscribe\",\"type\":\"bool\"}],\"name\":\"ContractRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"superOperator\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"Minter\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"metaTransactionProcessor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"MetaTransactionProcessor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"superOperator\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"SuperOperator\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"oldAdmin\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_approved\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_operator\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"}]", "ContractName": "LandV3", "CompilerVersion": "v0.5.9+commit.e560f70d", "OptimizationUsed": "1", "Runs": "2000", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}