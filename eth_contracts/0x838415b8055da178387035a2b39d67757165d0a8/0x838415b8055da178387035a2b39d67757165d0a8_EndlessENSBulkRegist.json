{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/EndlessENSBulkRegister.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.17;\\n\\nimport \\\"./IENSRegistrarController.sol\\\";\\n\\ncontract EndlessENSBulkRegister {\\n    struct Commitment {\\n        string name;\\n        address owner;\\n        bytes32 secret;\\n        address resolver;\\n        address addr;\\n    }\\n\\n    modifier onlyOwner() {\\n        require(\\n            msg.sender == owner,\\n            \\\"EndlessENSBulkRegister.onlyOwner: Access denied\\\"\\n        );\\n        _;\\n    }\\n\\n    // address public ensRegistrarController;\\n    IENSRegistrarController public ensRegistrarController;\\n\\n    address owner;\\n\\n    constructor(address _ensRegistrarController) {\\n        ensRegistrarController = IENSRegistrarController(\\n            _ensRegistrarController\\n        );\\n        owner = msg.sender;\\n    }\\n\\n    event RegisterFailed(\\n        string name,\\n        address owner,\\n        bytes32 secret,\\n        uint256 duration,\\n        bytes errorInfo\\n    );\\n\\n    event RegisterSuccess(\\n        string name,\\n        address owner,\\n        bytes32 secret,\\n        uint256 duration\\n    );\\n\\n    event UpdateENSRegistrar(address oldENSRegistrar, address newENSRegistrar);\\n\\n    function bulkRegister(\\n        string[] memory _names,\\n        address[] memory _owners,\\n        bytes32[] memory _secrets,\\n        uint256[] memory _durations\\n    ) external payable {\\n        uint256 totalLength = _names.length;\\n        require(\\n            totalLength == _owners.length,\\n            \\\"EndlessENSBulkRegister.bulkRegister: Owner length does not match the domain names\\\"\\n        );\\n        require(\\n            totalLength == _secrets.length,\\n            \\\"EndlessENSBulkRegister.bulkRegister: Secret length does not match the domain names\\\"\\n        );\\n        require(\\n            totalLength == _durations.length,\\n            \\\"EndlessENSBulkRegister.bulkRegister: Duration length does not match the domain names\\\"\\n        );\\n        require(\\n            msg.value >= getBulkRentPrice(_names, _durations),\\n            \\\"EndlessENSBulkRegister.bulkRegister: Insufficient native token\\\"\\n        );\\n\\n        uint256 amtRem = msg.value;\\n\\n        for (uint8 i = 0; i < _names.length; i++) {\\n            uint256 price = getRentPrice(_names[i], _durations[i]);\\n            bool errorOccured = false;\\n\\n            try\\n                ensRegistrarController.register{value: price}(\\n                    _names[i],\\n                    _owners[i],\\n                    _durations[i],\\n                    _secrets[i]\\n                )\\n            {\\n                // continue\\n            } catch (bytes memory errorInfo) {\\n                errorOccured = true;\\n                emit RegisterFailed(\\n                    _names[i],\\n                    _owners[i],\\n                    _secrets[i],\\n                    _durations[i],\\n                    errorInfo\\n                );\\n            }\\n            if (errorOccured == false) {\\n                amtRem -= price;\\n                emit RegisterSuccess(\\n                    _names[i],\\n                    _owners[i],\\n                    _secrets[i],\\n                    _durations[i]\\n                );\\n            }\\n        }\\n\\n        // Refund excess amount\\n        if (amtRem > 0) {\\n            (bool sent, ) = msg.sender.call{value: amtRem}(\\\"\\\");\\n            require(sent, \\\"Failed to send Ether\\\");\\n        }\\n    }\\n\\n    function bulkCommit(\\n        string[] memory _names,\\n        address[] memory _owners,\\n        bytes32[] memory _secrets,\\n        address[] memory _resolvers\\n    ) external {\\n        uint256 totalLength = _names.length;\\n        require(\\n            totalLength == _owners.length,\\n            \\\"EndlessENSBulkRegister.bulkCommit: Owner length does not match the domain names\\\"\\n        );\\n        require(\\n            totalLength == _secrets.length,\\n            \\\"EndlessENSBulkRegister.bulkCommit: Secret length does not match the domain names\\\"\\n        );\\n\\n        if (_resolvers.length == 0) {\\n            for (uint8 i = 0; i < _names.length; i++) {\\n                bytes32 commitment = ensRegistrarController.makeCommitment(\\n                    _names[i],\\n                    _owners[i],\\n                    _secrets[i]\\n                );\\n                ensRegistrarController.commit(commitment);\\n            }\\n        } else {\\n            require(\\n                totalLength == _resolvers.length,\\n                \\\"EndlessENSBulkRegister.bulkCommit: Resolvers length does not match the domain names\\\"\\n            );\\n            for (uint8 i = 0; i < _names.length; i++) {\\n                bytes32 commitment = ensRegistrarController\\n                    .makeCommitmentWithConfig(\\n                        _names[i],\\n                        _owners[i],\\n                        _secrets[i],\\n                        _resolvers[i],\\n                        address(0) // Setting reverse resolution to 0x00000000000000000 for registration\\n                    );\\n                ensRegistrarController.commit(commitment);\\n            }\\n        }\\n    }\\n\\n    function getBulkRentPrice(\\n        string[] memory _names,\\n        uint256[] memory _durations\\n    ) public view returns (uint256) {\\n        uint256 totalLength = _names.length;\\n        require(\\n            totalLength == _durations.length,\\n            \\\"EndlessENSBulkRegister.getPriceRanges: Duration length does not match the domain names\\\"\\n        );\\n        uint256 price;\\n        for (uint8 i = 0; i < _names.length; i++) {\\n            price += getRentPrice(_names[i], _durations[i]);\\n        }\\n        return price;\\n    }\\n\\n    function setENSRegistrar(address _address) external onlyOwner {\\n        address oldENSRegistrarAddress = address(ensRegistrarController);\\n        ensRegistrarController = IENSRegistrarController(_address);\\n        emit UpdateENSRegistrar(\\n            oldENSRegistrarAddress,\\n            address(ensRegistrarController)\\n        );\\n    }\\n\\n    function getRentPrice(\\n        string memory _name,\\n        uint256 _duration\\n    ) internal view returns (uint256) {\\n        return ensRegistrarController.rentPrice(_name, _duration);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/IENSRegistrarController.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.17;\\n\\ninterface IENSRegistrarController {\\n    function makeCommitment(\\n        string memory name,\\n        address owner,\\n        bytes32 secret\\n    ) external pure returns (bytes32);\\n\\n    function makeCommitmentWithConfig(\\n        string memory name,\\n        address owner,\\n        bytes32 secret,\\n        address resolver,\\n        address addr\\n    ) external pure returns (bytes32);\\n\\n    function rentPrice(\\n        string memory name,\\n        uint duration\\n    ) external view returns (uint);\\n\\n    function commit(bytes32 commitment) external;\\n\\n    function register(\\n        string calldata name,\\n        address owner,\\n        uint duration,\\n        bytes32 secret\\n    ) external payable;\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1000\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ensRegistrarController\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"secret\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"errorInfo\",\"type\":\"bytes\"}],\"name\":\"RegisterFailed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"secret\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"name\":\"RegisterSuccess\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldENSRegistrar\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newENSRegistrar\",\"type\":\"address\"}],\"name\":\"UpdateENSRegistrar\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"_names\",\"type\":\"string[]\"},{\"internalType\":\"address[]\",\"name\":\"_owners\",\"type\":\"address[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"_secrets\",\"type\":\"bytes32[]\"},{\"internalType\":\"address[]\",\"name\":\"_resolvers\",\"type\":\"address[]\"}],\"name\":\"bulkCommit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"_names\",\"type\":\"string[]\"},{\"internalType\":\"address[]\",\"name\":\"_owners\",\"type\":\"address[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"_secrets\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_durations\",\"type\":\"uint256[]\"}],\"name\":\"bulkRegister\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ensRegistrarController\",\"outputs\":[{\"internalType\":\"contract IENSRegistrarController\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"_names\",\"type\":\"string[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_durations\",\"type\":\"uint256[]\"}],\"name\":\"getBulkRentPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setENSRegistrar\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "EndlessENSBulkRegister", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "1000", "ConstructorArguments": "000000000000000000000000253553366da8546fc250f225fe3d25d0c782303b", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}