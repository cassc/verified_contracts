{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.7;\r\n\r\ninterface IERC20 {\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n}\r\n\r\ncontract CustodialContract {\r\n    address public owner;\r\n\r\n    event Withdrawed(address to, uint256 amount);\r\n    event Received(address indexed to, uint256 indexed amount);\r\n\r\n    modifier onlyAdmin() {\r\n        require(msg.sender == owner, \"CustodialContract:Caller does not have admin privileges\");\r\n        _;\r\n    }\r\n\r\n    constructor(address _owner) {\r\n        owner = _owner;\r\n    }\r\n\r\n    receive() external payable {\r\n        emit Received(msg.sender, msg.value);\r\n    }\r\n\r\n    function withdraw(address to) external onlyAdmin {\r\n        uint amount = address(this).balance;\r\n        require(amount > 0 , \"CustodialContract:Incorrect amount.\");\r\n\t\t(bool success,) = to.call{value : amount}(\"\");\r\n        \r\n        if (success)\r\n            emit Withdrawed(to, amount);\r\n    }\r\n\r\n    function withdrawERC20(address _token, address to) external onlyAdmin {\r\n        uint amount = IERC20(_token).balanceOf(address(this));\r\n        require(amount > 0 , \"CustodialContract:Incorrect amount.\");\r\n        IERC20(_token).transfer(to, amount);\r\n    }\r\n}\r\n\r\ncontract CasinoBankRoll {\r\n    address public creator;\r\n    mapping (uint => address) private addressTracker;\r\n\r\n    event Deploy(address addr);\r\n    event Withdrawed(address to, uint256 amount);\r\n\r\n    modifier onlyCreator() {\r\n        require(msg.sender == creator, \"CasinoBankRoll:Caller does not have creator privileges\");\r\n        _;\r\n    }\r\n\r\n    constructor() {\r\n        creator = msg.sender;\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    function deploy(uint _salt) external onlyCreator {\r\n        CustodialContract _contract = new CustodialContract{\r\n            salt: bytes32(_salt)\r\n        }(msg.sender);\r\n\r\n        addressTracker[_salt] = address(_contract);\r\n\r\n        emit Deploy(address(_contract));\r\n    }\r\n\r\n    function getAddress(bytes memory bytecode, uint _salt) public view returns (address) {\r\n        bytes32 hash = keccak256(\r\n            abi.encodePacked(\r\n                bytes1(0xff), address(this), _salt, keccak256(bytecode)\r\n            )\r\n        );\r\n        return address (uint160(uint(hash)));\r\n    }\r\n\r\n    function getBytecode(address _owner) public pure returns (bytes memory) {\r\n        bytes memory bytecode = type(CustodialContract).creationCode;\r\n        return abi.encodePacked(bytecode, abi.encode(_owner));\r\n    }\r\n\r\n    function withdraw(address to, uint256 amount) external onlyCreator {\r\n        require(amount <= address(this).balance, \"CasinoBankRoll:Insufficient funds.\");\r\n\t\t(bool success,) = to.call{value : amount}(\"\");\r\n\r\n        if (success)\r\n            emit Withdrawed(to, amount);\r\n    }\r\n\r\n    function withdrawCustomToken(address _token, address to, uint256 amount) external onlyCreator() {\r\n        require(amount <= IERC20(_token).balanceOf(address(this)), \"CasinoBankRoll:Insufficient funds.\");\r\n        IERC20(_token).transfer(to, amount);\r\n    }\r\n\r\n    function getCustodialAddress(uint salt) external view returns (address) {\r\n        return addressTracker[salt];\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"Deploy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawed\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"creator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_salt\",\"type\":\"uint256\"}],\"name\":\"deploy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"bytecode\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_salt\",\"type\":\"uint256\"}],\"name\":\"getAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"getBytecode\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"salt\",\"type\":\"uint256\"}],\"name\":\"getCustodialAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawCustomToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "CasinoBankRoll", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://09e88cc225b9df45eb03c184e81c08fcb58471522ee7bfaa8a42c4aef195157e"}