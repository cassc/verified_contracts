{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/WitcherX.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\nimport \\\"./Ownable.sol\\\";\\nimport \\\"./ERC20.sol\\\";\\nimport \\\"./SafeMath.sol\\\";\\nimport \\\"./IUniswap.sol\\\";\\n\\ninterface IStaking {\\n   function updatePool(uint256 amount) external;\\n}\\n\\ncontract WitcherX is Ownable, ERC20 {\\n\\tusing SafeMath for uint256;\\n\\t\\n    mapping (address => uint256) public rOwned;\\n    mapping (address => uint256) public tOwned;\\n\\tmapping (address => uint256) public totalSend;\\n    mapping (address => uint256) public totalReceived;\\n\\tmapping (address => uint256) public lockedAmount;\\n\\t\\n    mapping (address => bool) public isExcludedFromFee;\\n    mapping (address => bool) public isExcludedFromReward;\\n\\tmapping (address => bool) public isAutomatedMarketMakerPairs;\\n\\tmapping (address => bool) public isHolder;\\n\\t\\n    address[] private _excluded;\\n\\t\\n\\taddress public burnWallet;\\n\\tIStaking public stakingContract;\\n\\t\\n    uint256 private constant MAX = ~uint256(0);\\n    uint256 private constant _tTotal = 333333333333 * (10**18);\\n    uint256 private _rTotal = (MAX - (MAX % _tTotal));\\n    uint256 private _tFeeTotal;\\n\\t\\n\\tuint256 public holders;\\n\\t\\n\\tuint256[] public reflectionFee;\\n\\tuint256[] public stakingFee;\\n\\tuint256[] public treasureFee;\\n\\tuint256[] public burnFee;\\n\\t\\n\\tuint256 private _reflectionFee;\\n\\tuint256 private _stakingFee;\\n\\tuint256 private _treasureFee;\\n\\tuint256 private _burnFee;\\n\\t\\n\\tIUniswapRouter public uniswapRouter;\\n    address public uniswapPair;\\n\\taddress public titanxAddress;\\n    address public treasureAddress;\\n\\n\\tbool private swapping;\\n\\t\\n\\t\\n\\tevent LockToken(uint256 amount, address user);\\n\\tevent UnLockToken(uint256 amount, address user);\\n\\tevent SwapTokensAmountUpdated(uint256 amount);\\n\\t\\n    constructor (address owner, address _titanxAddress, address _treasureAddress) ERC20(\\\"WitcherX\\\", \\\"WITCHERX\\\") {\\n\\t\\trOwned[owner] = _rTotal;\\n\\n        titanxAddress = _titanxAddress;\\n        treasureAddress = _treasureAddress;\\n\\t\\t\\n\\t\\tuniswapRouter = IUniswapRouter(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\\n\\t\\tuniswapPair = IUniswapFactory(uniswapRouter.factory()).createPair(address(this), titanxAddress);\\n\\t\\t\\n\\t\\tburnWallet = address(0x0000000000000000000000000000000000000369);\\n\\n\\t\\t\\n\\t\\tisExcludedFromFee[owner] = true;\\n\\t\\tisExcludedFromFee[address(this)] = true;\\n\\t\\tisExcludedFromFee[treasureAddress] = true;\\n\\t\\t\\n\\t\\t\\n\\t\\treflectionFee.push(150);\\n\\t\\treflectionFee.push(150);\\n\\t\\treflectionFee.push(150);\\n\\t\\t\\n\\t\\tstakingFee.push(150);\\n\\t\\tstakingFee.push(150);\\n\\t\\tstakingFee.push(150);\\n\\n\\t\\ttreasureFee.push(50);\\n\\t\\ttreasureFee.push(50);\\n\\t\\ttreasureFee.push(50);\\n\\t\\t\\n\\t\\tburnFee.push(150);\\n\\t\\tburnFee.push(150);\\n\\t\\tburnFee.push(150);\\n\\t\\t\\n\\t\\t\\n\\t\\t_excludeFromReward(address(burnWallet));\\n\\t\\t_excludeFromReward(address(uniswapPair));\\n\\t\\t_excludeFromReward(address(this));\\n\\t\\t_setAutomatedMarketMakerPair(uniswapPair, true);\\n\\t\\t\\n\\t\\tisHolder[owner] = true;\\n\\t\\tholders += 1;\\n\\t\\t\\n\\t\\ttotalReceived[owner] +=_tTotal;\\n\\t\\temit Transfer(address(0), owner, _tTotal);\\n    }\\n\\t\\n\\treceive() external payable {}\\n\\t\\n\\tfunction excludeFromLimit(address account, bool status) external onlyOwner {\\n\\t   isExcludedFromFee[address(account)] = status;\\n    }\\n\\t\\n\\tfunction updateAutomatedMarketMakerPair(address pair, bool value) external onlyOwner{\\n        require(pair != address(0), \\\"Zero address\\\");\\n\\t\\t_setAutomatedMarketMakerPair(pair, value);\\n\\t\\tif(value)\\n\\t\\t{\\n\\t\\t   _excludeFromReward(address(pair));\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t   _includeInReward(address(pair));\\n\\t\\t}\\n    }\\n\\t\\n    function totalSupply() public override pure returns (uint256) {\\n        return _tTotal;\\n    }\\n\\t\\n    function balanceOf(address account) public override view returns (uint256) {\\n        if (isExcludedFromReward[account]) return tOwned[account];\\n        return tokenFromReflection(rOwned[account]);\\n    }\\n\\t\\n    function tokenFromReflection(uint256 rAmount) public view returns(uint256) {\\n        require(rAmount <= _rTotal, \\\"Amount must be less than total reflections\\\");\\n        uint256 currentRate =  _getRate();\\n        return rAmount.div(currentRate);\\n    }\\n\\t\\n\\tfunction _excludeFromReward(address account) internal {\\n        if(rOwned[account] > 0) {\\n            tOwned[account] = tokenFromReflection(rOwned[account]);\\n        }\\n        isExcludedFromReward[account] = true;\\n        _excluded.push(account);\\n    }\\n\\t\\n\\tfunction _includeInReward(address account) internal {\\n        for (uint256 i = 0; i < _excluded.length; i++) {\\n            if (_excluded[i] == account) {\\n                _excluded[i] = _excluded[_excluded.length - 1];\\n                tOwned[account] = 0;\\n                isExcludedFromReward[account] = false;\\n                _excluded.pop();\\n                break;\\n            }\\n        }\\n    }\\n\\t\\n    function _setAutomatedMarketMakerPair(address pair, bool value) private {\\n        require(isAutomatedMarketMakerPairs[pair] != value, \\\"Automated market maker pair is already set to that value\\\");\\n        isAutomatedMarketMakerPairs[pair] = value;\\n    }\\n\\t\\n\\tfunction setStakingContract(IStaking contractAddress) external onlyOwner{\\n\\t    require(address(contractAddress) != address(0), \\\"Zero address\\\");\\n\\t    require(address(stakingContract) == address(0), \\\"Staking contract already set\\\");\\n\\t   \\n\\t    stakingContract = IStaking(contractAddress);\\n\\t   \\n\\t    _excludeFromReward(address(stakingContract));\\n\\t    isExcludedFromFee[address(stakingContract)] = true;\\n    }\\n\\t\\n\\t\\n\\tfunction lockToken(uint256 amount, address user) external {\\n\\t    require(msg.sender == address(stakingContract), \\\"sender not allowed\\\");\\n\\t   \\n\\t    uint256 unlockBalance = balanceOf(user) - lockedAmount[user];\\n\\t    require(unlockBalance >= amount, \\\"locking amount exceeds balance\\\");\\n\\t    lockedAmount[user] += amount;\\n\\t    emit LockToken(amount, user);\\n    }\\n\\t\\n\\tfunction unlockToken(uint256 amount, address user) external {\\n\\t    require(msg.sender == address(stakingContract), \\\"sender not allowed\\\");\\n\\t    require(lockedAmount[user] >= amount, \\\"amount is not correct\\\");\\n\\t   \\n\\t    lockedAmount[user] -= amount;\\n\\t    emit UnLockToken(amount, user);\\n    }\\n\\t\\n\\tfunction unlockSend(uint256 amount, address user) external {\\n\\t    require(msg.sender == address(stakingContract), \\\"sender not allowed\\\");\\n\\t    require(lockedAmount[user] >= amount, \\\"amount is not correct\\\");\\n\\t   \\n\\t    lockedAmount[user] -= amount;\\n\\t    IERC20(address(this)).transferFrom(address(user), address(stakingContract), amount);\\n\\t    emit UnLockToken(amount, user);\\n    }\\n\\t\\n\\tfunction airdropToken(uint256 amount) external {\\n        require(amount > 0, \\\"Transfer amount must be greater than zero\\\");\\n\\t    require(balanceOf(msg.sender) - lockedAmount[msg.sender] >= amount, \\\"transfer amount exceeds balance\\\");\\n\\t\\t\\n\\t    _tokenTransfer(msg.sender, address(this), amount, true, true);\\n\\t}\\n\\t\\n    function _reflectFee(uint256 rFee, uint256 tFee) private {\\n        _rTotal = _rTotal.sub(rFee);\\n        _tFeeTotal = _tFeeTotal.add(tFee);\\n    }\\n\\t\\n    function _getValues(uint256 tAmount) private view returns (uint256, uint256, uint256, uint256, uint256) {\\n        (uint256 tTransferAmount, uint256 tFee) = _getTValues(tAmount);\\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee) = _getRValues(tAmount, tFee, _getRate());\\n        return (rAmount, rTransferAmount, rFee, tTransferAmount, tFee);\\n    }\\n\\t\\n    function _getTValues(uint256 tAmount) private view returns (uint256, uint256) {\\n\\t\\tuint256 tFee = calculateReflectionFee(tAmount);\\n\\t\\t\\n\\t\\tuint256 tTransferAmount = tAmount.sub(tFee);\\n        return (tTransferAmount, tFee);\\n    }\\n\\t\\n    function _getRValues(uint256 tAmount, uint256 tFee, uint256 currentRate) private pure returns (uint256, uint256, uint256) {\\n        uint256 rAmount = tAmount.mul(currentRate);\\n        uint256 rFee = tFee.mul(currentRate);\\n\\t\\t\\n\\t\\tuint256 rTransferAmount = rAmount.sub(rFee);\\n        return (rAmount, rTransferAmount, rFee);\\n    }\\n\\n    function _getRate() private view returns(uint256) {\\n        (uint256 rSupply, uint256 tSupply) = _getCurrentSupply();\\n        return rSupply.div(tSupply);\\n    }\\n\\t\\n    function _getCurrentSupply() private view returns(uint256, uint256) {\\n        uint256 rSupply = _rTotal;\\n        uint256 tSupply = _tTotal;      \\n        for (uint256 i = 0; i < _excluded.length; i++) {\\n            if (rOwned[_excluded[i]] > rSupply || tOwned[_excluded[i]] > tSupply) return (_rTotal, _tTotal);\\n            rSupply = rSupply.sub(rOwned[_excluded[i]]);\\n            tSupply = tSupply.sub(tOwned[_excluded[i]]);\\n        }\\n        if (rSupply < _rTotal.div(_tTotal)) return (_rTotal, _tTotal);\\n        return (rSupply, tSupply);\\n    }\\n\\t\\n\\t\\n\\tfunction _takeStaking(uint256 tStaking) private {\\n        uint256 currentRate =  _getRate();\\n        uint256 rStaking = tStaking.mul(currentRate);\\n        rOwned[address(stakingContract)] = rOwned[address(stakingContract)].add(rStaking);\\n        if(isExcludedFromReward[address(stakingContract)])\\n            tOwned[address(stakingContract)] = tOwned[address(stakingContract)].add(tStaking);\\n    }\\n\\n\\tfunction _takeTreasure(uint256 tTreasure) private {\\n        uint256 currentRate =  _getRate();\\n        uint256 rTreasure = tTreasure.mul(currentRate);\\n        rOwned[address(treasureAddress)] = rOwned[address(treasureAddress)].add(rTreasure);\\n        if(isExcludedFromReward[address(treasureAddress)])\\n            tOwned[address(treasureAddress)] = tOwned[address(treasureAddress)].add(tTreasure);\\n    }\\n\\t\\n\\tfunction _takeBurn(uint256 tBurn) private {\\n        uint256 currentRate =  _getRate();\\n        uint256 rBurn = tBurn.mul(currentRate);\\n        rOwned[burnWallet] = rOwned[burnWallet].add(rBurn);\\n        if(isExcludedFromReward[burnWallet])\\n            tOwned[burnWallet] = tOwned[burnWallet].add(tBurn);\\n    }\\n\\t\\n    function calculateReflectionFee(uint256 _amount) private view returns (uint256) {\\n        return _amount.mul(_reflectionFee).div(10000);\\n    }\\n\\t\\n\\t\\n\\tfunction calculateStakingFee(uint256 _amount) private view returns (uint256) {\\n        return _amount.mul(_stakingFee).div(10000);\\n    }\\n\\n\\tfunction calculateTreasureFee(uint256 _amount) private view returns (uint256) {\\n        return _amount.mul(_treasureFee).div(10000);\\n    }\\n\\t\\n\\t\\n\\tfunction calculateBurnFee(uint256 _amount) private view returns (uint256) {\\n\\t\\treturn _amount.mul(_burnFee).div(10000);\\n    }\\n\\t\\n    function removeAllFee() private {\\n\\t   _reflectionFee = 0;\\n\\t   _stakingFee = 0;\\n\\t   _treasureFee = 0;\\n\\t   _burnFee = 0;\\n    }\\n\\t\\n    function applyBuyFee() private {\\n\\t   _reflectionFee = reflectionFee[0];\\n\\t   _stakingFee = stakingFee[0];\\n\\t   _treasureFee = treasureFee[0];\\n\\t   _burnFee = burnFee[0];\\n    }\\n\\t\\n\\tfunction applySellFee() private {\\n\\t   _reflectionFee = reflectionFee[1];\\n\\t   _stakingFee = stakingFee[1];\\n\\t   _treasureFee = treasureFee[1];\\n\\t   _burnFee = burnFee[1];\\n    }\\n\\t\\n\\tfunction applyP2PFee() private {\\n\\t   _reflectionFee = reflectionFee[2];\\n\\t   _stakingFee = stakingFee[2];\\n\\t   _treasureFee = treasureFee[2];\\n\\t   _burnFee = burnFee[2];\\n    }\\n\\t\\n\\tfunction applyAirdropFee() private {\\n\\t   _reflectionFee = 10000;\\n\\t   _stakingFee = 0;\\n\\t   _treasureFee = 0;\\n\\t   _burnFee = 0;\\n    }\\n\\t\\n    function _transfer(address from, address to, uint256 amount) internal override{\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n        require(amount > 0, \\\"Transfer amount must be greater than zero\\\");\\n\\t\\trequire(balanceOf(from) - lockedAmount[from] >= amount, \\\"transfer amount exceeds balance\\\");\\n\\t\\t\\n\\t\\tif(!isHolder[address(to)]) {\\n\\t\\t   isHolder[to] = true;\\n\\t\\t   holders += 1;\\n\\t\\t}\\n\\t\\t\\n\\t\\tif((balanceOf(from) - amount) == 0) {\\n\\t\\t   isHolder[from] = false;\\n\\t\\t   holders -= 1;\\n\\t\\t}\\n\\n\\t\\t\\n        bool takeFee = true;\\n        if(isExcludedFromFee[from] || isExcludedFromFee[to])\\n\\t\\t{\\n            takeFee = false;\\n        }\\n\\t\\telse\\n\\t\\t{\\n\\t\\t    if(!isHolder[address(this)]) {\\n\\t\\t\\t   isHolder[address(this)] = true;\\n\\t\\t\\t   holders += 1;\\n\\t\\t\\t}\\n\\t\\t\\t\\n\\t\\t\\tif(!isHolder[address(stakingContract)]) {\\n\\t\\t\\t   isHolder[address(stakingContract)] = true;\\n\\t\\t\\t   holders += 1;\\n\\t\\t\\t}\\n\\t\\t\\t\\n\\t\\t\\tif(!isHolder[address(burnWallet)]) {\\n\\t\\t\\t   isHolder[address(burnWallet)] = true;\\n\\t\\t\\t   holders += 1;\\n\\t\\t\\t}\\n\\t\\t}\\n        _tokenTransfer(from,to,amount,takeFee,false);\\n    }\\n\\t\\n    function _tokenTransfer(address sender, address recipient, uint256 amount, bool takeFee, bool airdrop) private {\\n\\t\\ttotalSend[sender] += amount;\\n\\t\\t\\n\\t\\tif(!takeFee) \\n\\t\\t{\\n\\t\\t    removeAllFee();\\n\\t\\t}\\n\\t\\telse if(airdrop)\\n\\t\\t{\\n\\t\\t    applyAirdropFee();\\n\\t\\t}\\n\\t\\telse if(!isAutomatedMarketMakerPairs[sender] && !isAutomatedMarketMakerPairs[recipient])\\n\\t\\t{\\n\\t\\t\\tapplyP2PFee();\\n\\t\\t}\\n\\t\\telse if(isAutomatedMarketMakerPairs[recipient])\\n\\t\\t{\\n\\t\\t    applySellFee();\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t    applyBuyFee();\\n\\t\\t}\\n\\t\\t\\n\\t\\tuint256 _totalFee = _reflectionFee + _stakingFee + _treasureFee + _burnFee;\\n\\t\\tif(_totalFee > 0)\\n\\t\\t{\\n\\t\\t    uint256 _feeAmount = amount.mul(_totalFee).div(10000);\\n\\t\\t    totalReceived[recipient] += amount.sub(_feeAmount);\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t    totalReceived[recipient] += amount;\\n\\t\\t}\\n\\t\\t\\n\\t\\tuint256 tBurn = calculateBurnFee(amount);\\n\\t\\tif(tBurn > 0)\\n\\t\\t{\\n\\t\\t   _takeBurn(tBurn);\\n\\t\\t   emit Transfer(sender, address(burnWallet), tBurn);\\n\\t\\t}\\n\\n\\t\\tuint256 tStaking = calculateStakingFee(amount);\\n\\t\\tif(tStaking > 0) \\n\\t\\t{\\n\\t\\t    _takeStaking(tStaking);\\n\\t\\t    stakingContract.updatePool(tStaking);\\n\\t\\t    emit Transfer(sender, address(stakingContract), tStaking);\\n\\t\\t}\\n\\n\\t\\tuint256 tTreasure = calculateTreasureFee(amount);\\n\\t\\tif(tTreasure > 0) \\n\\t\\t{\\n\\t\\t    _takeTreasure(tTreasure);\\n\\t\\t    emit Transfer(sender, address(treasureAddress), tTreasure);\\n\\t\\t}\\n\\t\\t\\n        if (isExcludedFromReward[sender] && !isExcludedFromReward[recipient]) \\n\\t\\t{\\n            _transferFromExcluded(sender, recipient, amount, tStaking, tBurn, tTreasure);\\n        } \\n\\t\\telse if (!isExcludedFromReward[sender] && isExcludedFromReward[recipient]) \\n\\t\\t{\\n            _transferToExcluded(sender, recipient, amount, tStaking, tBurn, tTreasure);\\n        } \\n\\t\\telse if (!isExcludedFromReward[sender] && !isExcludedFromReward[recipient]) \\n\\t\\t{\\n            _transferStandard(sender, recipient, amount, tStaking, tBurn, tTreasure);\\n        } \\n\\t\\telse if (isExcludedFromReward[sender] && isExcludedFromReward[recipient]) \\n\\t\\t{\\n            _transferBothExcluded(sender, recipient, amount, tStaking, tBurn, tTreasure);\\n        } \\n\\t\\telse \\n\\t\\t{\\n            _transferStandard(sender, recipient, amount, tStaking, tBurn, tTreasure);\\n        }\\n    }\\n\\t\\n    function _transferStandard(address sender, address recipient, uint256 tAmount, uint256 tStaking, uint256 tBurn, uint256 tTreasure) private {\\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee) = _getValues(tAmount);\\n        \\n\\t\\ttTransferAmount = tTransferAmount.sub(tStaking).sub(tTreasure).sub(tBurn);\\n\\t\\trTransferAmount = rTransferAmount.sub(tStaking.mul(_getRate())).sub(tTreasure.mul(_getRate())).sub(tBurn.mul(_getRate()));\\n\\t\\t\\n\\t\\trOwned[sender] = rOwned[sender].sub(rAmount);\\n        rOwned[recipient] = rOwned[recipient].add(rTransferAmount);\\n\\t\\t\\n        _reflectFee(rFee, tFee);\\n\\n        emit Transfer(sender, recipient, tTransferAmount);\\n    }\\n\\t\\n    function _transferToExcluded(address sender, address recipient, uint256 tAmount, uint256 tStaking, uint256 tBurn, uint256 tTreasure) private {\\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee) = _getValues(tAmount);\\n        \\n\\t\\ttTransferAmount = tTransferAmount.sub(tStaking).sub(tTreasure).sub(tBurn);\\n\\t\\trTransferAmount = rTransferAmount.sub(tStaking.mul(_getRate())).sub(tTreasure.mul(_getRate())).sub(tBurn.mul(_getRate()));\\n\\t\\t\\n\\t\\trOwned[sender] = rOwned[sender].sub(rAmount);\\n        tOwned[recipient] = tOwned[recipient].add(tTransferAmount);\\n        rOwned[recipient] = rOwned[recipient].add(rTransferAmount);  \\n\\t\\t\\n        _reflectFee(rFee, tFee);\\n\\n        emit Transfer(sender, recipient, tTransferAmount);\\n    }\\n\\n    function _transferFromExcluded(address sender, address recipient, uint256 tAmount, uint256 tStaking, uint256 tBurn, uint256 tTreasure) private {\\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee) = _getValues(tAmount);\\n        \\n\\t\\ttTransferAmount = tTransferAmount.sub(tStaking).sub(tTreasure).sub(tBurn);\\n\\t\\trTransferAmount = rTransferAmount.sub(tStaking.mul(_getRate())).sub(tTreasure.mul(_getRate())).sub(tBurn.mul(_getRate()));\\n\\t\\t\\n\\t\\ttOwned[sender] = tOwned[sender].sub(tAmount);\\n        rOwned[sender] = rOwned[sender].sub(rAmount);\\n        rOwned[recipient] = rOwned[recipient].add(rTransferAmount); \\n\\t\\t\\n        _reflectFee(rFee, tFee);\\n\\n        emit Transfer(sender, recipient, tTransferAmount);\\n    }\\n\\t\\n\\tfunction _transferBothExcluded(address sender, address recipient, uint256 tAmount, uint256 tStaking, uint256 tBurn, uint256 tTreasure) private {\\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee) = _getValues(tAmount);\\n        \\n\\t\\ttTransferAmount = tTransferAmount.sub(tStaking).sub(tTreasure).sub(tBurn);\\n\\t\\trTransferAmount = rTransferAmount.sub(tStaking.mul(_getRate())).sub(tTreasure.mul(_getRate())).sub(tBurn.mul(_getRate()));\\n\\t\\t\\n\\t\\ttOwned[sender] = tOwned[sender].sub(tAmount);\\n        rOwned[sender] = rOwned[sender].sub(rAmount);\\n        tOwned[recipient] = tOwned[recipient].add(tTransferAmount);\\n        rOwned[recipient] = rOwned[recipient].add(rTransferAmount);   \\n\\t\\n\\n        _reflectFee(rFee, tFee);\\n\\n        emit Transfer(sender, recipient, tTransferAmount);\\n    }\\n\\t\\n\\t\\n    function addLiquidity(uint256 witcherxAmount, uint256 titanxAmount) external onlyOwner {\\n        IERC20(address(this)).approve(address(uniswapRouter), witcherxAmount);\\n        IERC20(titanxAddress).approve(address(uniswapRouter), titanxAmount);\\n\\n\\n        (address token0, uint256 amount0, address token1, uint256 amount1) = \\n        address(this) < titanxAddress ? \\n        (address(this), witcherxAmount, titanxAddress, titanxAmount) : \\n        (titanxAddress, titanxAmount, address(this), witcherxAmount);\\n\\n        uniswapRouter.addLiquidity(\\n            token0,\\n            token1,\\n            amount0,\\n            amount1,\\n            0,\\n            0,\\n            address(this),\\n            block.timestamp\\n        );\\n    }\\n}\"\r\n    },\r\n    \"contracts/IUniswap.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.20;\\n\\ninterface IUniswapFactory {\\n   function createPair(address tokenA, address tokenB) external returns (address pair);\\n}\\n\\ninterface IUniswapRouter {\\n   function factory() external pure returns (address);\\n\\n   function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint256 amountADesired,\\n        uint256 amountBDesired,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountA, uint256 amountB, uint256 liquidity);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n\\n   function swapExactTokensForETHSupportingFeeOnTransferTokens(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline) external;\\n}\\n\"\r\n    },\r\n    \"contracts/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.20;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\"\r\n    },\r\n    \"contracts/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./IERC20Metadata.sol\\\";\\nimport \\\"./Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\"\r\n    },\r\n    \"contracts/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.20;\\n\\nimport \\\"./Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\"\r\n    },\r\n    \"contracts/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\t\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\"\r\n    },\r\n    \"contracts/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.20;\\n\\nimport \\\"./IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\"\r\n    },\r\n    \"contracts/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 0\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_titanxAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_treasureAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"LockToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"SwapTokensAmountUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"UnLockToken\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"witcherxAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"titanxAmount\",\"type\":\"uint256\"}],\"name\":\"addLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"airdropToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"burnFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"excludeFromLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"holders\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isAutomatedMarketMakerPairs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isExcludedFromFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isExcludedFromReward\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isHolder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"lockToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lockedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rOwned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"reflectionFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IStaking\",\"name\":\"contractAddress\",\"type\":\"address\"}],\"name\":\"setStakingContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingContract\",\"outputs\":[{\"internalType\":\"contract IStaking\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stakingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tOwned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"titanxAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rAmount\",\"type\":\"uint256\"}],\"name\":\"tokenFromReflection\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalReceived\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalSend\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasureAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"treasureFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapRouter\",\"outputs\":[{\"internalType\":\"contract IUniswapRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"unlockSend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"unlockToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"updateAutomatedMarketMakerPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "WitcherX", "CompilerVersion": "v0.8.20+commit.a1b79de6", "OptimizationUsed": "1", "Runs": "0", "ConstructorArguments": "0000000000000000000000003d9ef25e45b13194859f99784ca38e22d2fc14f7000000000000000000000000f19308f923582a6f7c465e5ce7a9dc1bec6665b100000000000000000000000097ece1f1d871687cb7a02f19cc96940d03b3fd58", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}