{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Compatible with tokens that require the approval to be set to\\n     * 0 before setting it to a non-zero value.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/lybra/interfaces/Iconfigurator.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.17;\\n\\ninterface Iconfigurator {\\n    function mintVault(address pool) external view returns(bool);\\n    function mintVaultMaxSupply(address pool) external view returns(uint256);\\n    function vaultMintPaused(address pool) external view returns(bool);\\n    function vaultBurnPaused(address pool) external view returns(bool);\\n    function tokenMiner(address pool) external view returns(bool);\\n    function getSafeCollateralRatio(address pool) external view returns(uint256);\\n    function getBadCollateralRatio(address pool) external view returns(uint256);\\n    function getVaultWeight(address pool) external view returns (uint256);\\n    function vaultMintFeeApy(address pool) external view returns(uint256);\\n    function vaultKeeperRatio(address pool) external view returns(uint256);\\n    function redemptionFee() external view returns(uint256);\\n    function getEUSDAddress() external view returns(address);\\n    function peUSD() external view returns(address);\\n    function eUSDMiningIncentives() external view returns(address);\\n    function getProtocolRewardsPool() external view returns(address);\\n    function flashloanFee() external view returns(uint256);\\n    function getEUSDMaxLocked() external view returns (uint256);\\n    function stableToken() external view returns (address);\\n    function isRedemptionProvider(address user) external view returns (bool);\\n    function becomeRedemptionProvider(bool _bool) external;\\n    function refreshMintReward(address user) external;\\n    function distributeRewards() external;\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n}\"\r\n    },\r\n    \"contracts/lybra/interfaces/IEUSD.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.17;\\n\\ninterface IEUSD {\\n    function totalSupply() external view returns (uint256);\\n\\n    function getTotalShares() external view returns (uint256);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function sharesOf(address _account) external view returns (uint256);\\n\\n    function allowance(\\n        address owner,\\n        address spender\\n    ) external view returns (uint256);\\n\\n    function approve(address _spender, uint256 _amount) external returns (bool);\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    function transferShares(\\n        address _recipient,\\n        uint256 _sharesAmount\\n    ) external returns (uint256);\\n\\n    function getSharesByMintedEUSD(\\n        uint256 _EUSDAmount\\n    ) external view returns (uint256);\\n\\n    function getMintedEUSDByShares(\\n        uint256 _sharesAmount\\n    ) external view returns (uint256);\\n\\n    function mint(\\n        address _recipient,\\n        uint256 _mintAmount\\n    ) external returns (uint256 newTotalShares);\\n\\n    function burnShares(\\n        address _account,\\n        uint256 burnAmount\\n    ) external returns (uint256 newTotalShares);\\n\\n    function burn(\\n        address _account,\\n        uint256 burnAmount\\n    ) external returns (uint256 newTotalShares);\\n\\n    function transfer(address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/lybra/pools/base/LybraEUSDVaultBase.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.17;\\n\\nimport \\\"../../interfaces/IEUSD.sol\\\";\\nimport \\\"../../interfaces/Iconfigurator.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\ninterface IPriceFeed {\\n    function fetchPrice() external returns (uint256);\\n}\\n\\nabstract contract LybraEUSDVaultBase {\\n    using SafeERC20 for IERC20;\\n    IEUSD public immutable EUSD;\\n    IERC20 public immutable collateralAsset;\\n    Iconfigurator public immutable configurator;\\n    uint256 public constant badCollateralRatio = 150 * 1e18;\\n    IPriceFeed immutable etherOracle;\\n\\n    uint256 public totalDepositedAsset;\\n    uint256 public lastReportTime;\\n    uint256 poolTotalCirculation;\\n\\n    mapping(address => uint256) public depositedAsset;\\n    mapping(address => uint256) borrowed;\\n    uint256 public feeStored;\\n    mapping(address => uint256) depositedTime;\\n\\n    event DepositEther(address indexed onBehalfOf, address asset, uint256 etherAmount, uint256 assetAmount, uint256 timestamp);\\n\\n    event DepositAsset(address indexed onBehalfOf, address asset, uint256 amount, uint256 timestamp);\\n\\n    event WithdrawAsset(address indexed sponsor, address asset, address indexed onBehalfOf, uint256 amount, uint256 timestamp);\\n    event Mint(address indexed sponsor, address indexed onBehalfOf, uint256 amount, uint256 timestamp);\\n    event Burn(address indexed sponsor, address indexed onBehalfOf, uint256 amount, uint256 timestamp);\\n    event LiquidationRecord(address indexed provider, address indexed keeper, address indexed onBehalfOf, uint256 eusdamount, uint256 liquidateEtherAmount, uint256 keeperReward, bool superLiquidation, uint256 timestamp);\\n    event LSDValueCaptured(uint256 stETHAdded, uint256 payoutEUSD, uint256 discountRate, uint256 timestamp);\\n    event RigidRedemption(address indexed caller, address indexed provider, uint256 eusdAmount, uint256 collateralAmount, uint256 timestamp);\\n    event FeeDistribution(address indexed feeAddress, uint256 feeAmount, uint256 timestamp);\\n\\n    //etherOracle = 0x4c517D4e2C851CA76d7eC94B805269Df0f2201De\\n    constructor(address _collateralAsset, address _etherOracle, address _configurator) {\\n        collateralAsset = IERC20(_collateralAsset);\\n        configurator = Iconfigurator(_configurator);\\n        EUSD = IEUSD(configurator.getEUSDAddress());\\n        etherOracle = IPriceFeed(_etherOracle);\\n    }\\n\\n    /**\\n     * @notice Allowing direct deposits of ETH, the pool may convert it into the corresponding collateral during the implementation.\\n     * While depositing, it is possible to simultaneously mint eUSD for oneself.\\n     * Emits a `DepositEther` event.\\n     *\\n     * Requirements:\\n     * - `mintAmount` Send 0 if doesn't mint eUSD\\n     * - msg.value Must be higher than 0.\\n     */\\n    function depositEtherToMint(uint256 mintAmount) external payable virtual;\\n\\n    /**\\n     * @notice Deposit collateral and allow minting eUSD for oneself.\\n     * Emits a `DepositAsset` event.\\n     *\\n     * Requirements:\\n     * - `assetAmount` Must be higher than 1e18.\\n     * - `mintAmount` Send 0 if doesn't mint eUSD\\n     */\\n    function depositAssetToMint(uint256 assetAmount, uint256 mintAmount) external virtual {\\n        require(assetAmount >= 1 ether, \\\"Deposit should not be less than 1 stETH.\\\");\\n        collateralAsset.safeTransferFrom(msg.sender, address(this), assetAmount);\\n        totalDepositedAsset += assetAmount;\\n        depositedAsset[msg.sender] += assetAmount;\\n        depositedTime[msg.sender] = block.timestamp;\\n\\n        if (mintAmount > 0) {\\n            _mintEUSD(msg.sender, msg.sender, mintAmount, getAssetPrice());\\n        }\\n        emit DepositAsset(msg.sender, address(collateralAsset), assetAmount, block.timestamp);\\n    }\\n\\n    /**\\n     * @notice Withdraw collateral assets to an address\\n     * Emits a `WithdrawEther` event.\\n     *\\n     * Requirements:\\n     * - `onBehalfOf` cannot be the zero address.\\n     * - `amount` Must be higher than 0.\\n     *\\n     * @dev Withdraw stETH. Check user\u2019s collateral ratio after withdrawal, should be higher than `safeCollateralRatio`\\n     */\\n    function withdraw(address onBehalfOf, uint256 amount) external virtual {\\n        require(onBehalfOf != address(0), \\\"TZA\\\");\\n        require(amount != 0, \\\"ZERO_WITHDRAW\\\");\\n        require(depositedAsset[msg.sender] >= amount, \\\"Withdraw amount exceeds deposited amount.\\\");\\n        totalDepositedAsset -= amount;\\n        depositedAsset[msg.sender] -= amount;\\n\\n        uint256 withdrawal = checkWithdrawal(msg.sender, amount);\\n\\n        collateralAsset.safeTransfer(onBehalfOf, withdrawal);\\n        if (borrowed[msg.sender] > 0) {\\n            _checkHealth(msg.sender, getAssetPrice());\\n        }\\n        emit WithdrawAsset(msg.sender, address(collateralAsset), onBehalfOf, withdrawal, block.timestamp);\\n    }\\n\\n    function checkWithdrawal(address user, uint256 amount) public view returns (uint256 withdrawal) {\\n        withdrawal = block.timestamp - 3 days >= depositedTime[user] ? amount : (amount * 999) / 1000;\\n    }\\n\\n    /**\\n     * @notice The mint amount number of eUSD is minted to the address\\n     * Emits a `Mint` event.\\n     *\\n     * Requirements:\\n     * - `onBehalfOf` cannot be the zero address.\\n     */\\n    function mint(address onBehalfOf, uint256 amount) external {\\n        require(onBehalfOf != address(0), \\\"MINT_TO_THE_ZERO_ADDRESS\\\");\\n        require(amount != 0, \\\"ZERO_MINT\\\");\\n        _mintEUSD(msg.sender, onBehalfOf, amount, getAssetPrice());\\n    }\\n\\n    /**\\n     * @notice Burn the amount of eUSD and payback the amount of minted eUSD\\n     * Emits a `Burn` event.\\n     * Requirements:\\n     * - `onBehalfOf` cannot be the zero address.\\n     * - `amount` Must be higher than 0.\\n     * @dev Calling the internal`_repay`function.\\n     */\\n    function burn(address onBehalfOf, uint256 amount) external {\\n        require(onBehalfOf != address(0), \\\"BURN_TO_THE_ZERO_ADDRESS\\\");\\n        _repay(msg.sender, onBehalfOf, amount);\\n    }\\n\\n    /**\\n     * @notice Keeper liquidates borrowers whose collateral ratio is below badCollateralRatio, using eUSD provided by Liquidation Provider.\\n     *\\n     * Requirements:\\n     * - onBehalfOf Collateral Ratio should be below badCollateralRatio\\n     * - collateralAmount should be less than 50% of collateral\\n     * - provider should authorize Lybra to utilize eUSD\\n     * @dev After liquidation, borrower's debt is reduced by collateralAmount * etherPrice, providers and keepers can receive up to an additional 10% liquidation reward. \\n     */\\n    function liquidation(address provider, address onBehalfOf, uint256 assetAmount) external virtual {\\n        uint256 assetPrice = getAssetPrice();\\n        uint256 onBehalfOfCollateralRatio = (depositedAsset[onBehalfOf] * assetPrice * 100) / borrowed[onBehalfOf];\\n        require(onBehalfOfCollateralRatio < badCollateralRatio, \\\"Borrowers collateral ratio should below badCollateralRatio\\\");\\n\\n        require(assetAmount * 2 <= depositedAsset[onBehalfOf], \\\"a max of 50% collateral can be liquidated\\\");\\n        require(EUSD.allowance(provider, address(this)) != 0 || msg.sender == provider, \\\"provider should authorize to provide liquidation eUSD\\\");\\n        uint256 eusdAmount = (assetAmount * assetPrice) / 1e18;\\n\\n        _repay(provider, onBehalfOf, eusdAmount);\\n        uint256 reducedAsset = assetAmount;\\n\\n        if(onBehalfOfCollateralRatio > 1e20 && onBehalfOfCollateralRatio < 11e19) {\\n            reducedAsset = assetAmount * onBehalfOfCollateralRatio / 1e20;\\n        }\\n        if(onBehalfOfCollateralRatio >= 11e19) {\\n            reducedAsset = assetAmount * 11 / 10;\\n        }\\n        totalDepositedAsset -= reducedAsset;\\n        depositedAsset[onBehalfOf] -= reducedAsset;\\n\\n        uint256 reward2keeper;\\n        uint256 keeperRatio = configurator.vaultKeeperRatio(address(this));\\n        if (msg.sender != provider && onBehalfOfCollateralRatio >= 1e20 + keeperRatio * 1e18) {\\n            reward2keeper = assetAmount * keeperRatio / 100;\\n            collateralAsset.safeTransfer(msg.sender, reward2keeper);\\n        }\\n        collateralAsset.safeTransfer(provider, reducedAsset - reward2keeper);\\n\\n        emit LiquidationRecord(provider, msg.sender, onBehalfOf, eusdAmount, reducedAsset, reward2keeper, false, block.timestamp);\\n    }\\n\\n    /**\\n     * @notice When overallCollateralRatio is below badCollateralRatio, borrowers with collateralRatio below 125% could be fully liquidated.\\n     * Emits a `LiquidationRecord` event.\\n     *\\n     * Requirements:\\n     * - Current overallCollateralRatio should be below badCollateralRatio\\n     * - `onBehalfOf`collateralRatio should be below 125%\\n     * @dev After Liquidation, borrower's debt is reduced by collateralAmount * etherPrice, deposit is reduced by collateralAmount * borrower's collateralRatio. Keeper gets a liquidation reward of `keeperRatio / borrower's collateralRatio\\n     */\\n    function superLiquidation(address provider, address onBehalfOf, uint256 assetAmount) external virtual {\\n        uint256 assetPrice = getAssetPrice();\\n        require((totalDepositedAsset * assetPrice * 100) / poolTotalCirculation < badCollateralRatio, \\\"overallCollateralRatio should below 150%\\\");\\n        uint256 onBehalfOfCollateralRatio = (depositedAsset[onBehalfOf] * assetPrice * 100) / borrowed[onBehalfOf];\\n        require(onBehalfOfCollateralRatio < 125 * 1e18, \\\"borrowers collateralRatio should below 125%\\\");\\n        require(assetAmount <= depositedAsset[onBehalfOf], \\\"total of collateral can be liquidated at most\\\");\\n        uint256 eusdAmount = (assetAmount * assetPrice) / 1e18;\\n        if (onBehalfOfCollateralRatio >= 1e20) {\\n            eusdAmount = (eusdAmount * 1e20) / onBehalfOfCollateralRatio;\\n        }\\n        require(EUSD.allowance(provider, address(this)) != 0 || msg.sender == provider, \\\"provider should authorize to provide liquidation eUSD\\\");\\n\\n        _repay(provider, onBehalfOf, eusdAmount);\\n\\n        totalDepositedAsset -= assetAmount;\\n        depositedAsset[onBehalfOf] -= assetAmount;\\n        uint256 reward2keeper;\\n        if (msg.sender != provider && onBehalfOfCollateralRatio >= 1e20 + configurator.vaultKeeperRatio(address(this)) * 1e18) {\\n            reward2keeper = ((assetAmount * configurator.vaultKeeperRatio(address(this))) * 1e18) / onBehalfOfCollateralRatio;\\n            collateralAsset.safeTransfer(msg.sender, reward2keeper);\\n        }\\n        collateralAsset.safeTransfer(provider, assetAmount - reward2keeper);\\n\\n        emit LiquidationRecord(provider, msg.sender, onBehalfOf, eusdAmount, assetAmount, reward2keeper, true, block.timestamp);\\n    }\\n\\n    /**\\n     * @notice When stETH balance increases through LSD or other reasons, the excess income is sold for eUSD, allocated to eUSD holders through rebase mechanism.\\n     * Emits a `LSDistribution` event.\\n     *\\n     * *Requirements:\\n     * - stETH balance in the contract cannot be less than totalDepositedAsset after exchange.\\n     * @dev Income is used to cover accumulated Service Fee first.\\n     */\\n    function excessIncomeDistribution(uint256 payAmount) external virtual;\\n\\n    /**\\n     * @notice Choose a Redemption Provider, Rigid Redeem `eusdAmount` of eUSD and get 1:1 value of collateral\\n     * Emits a `RigidRedemption` event.\\n     *\\n     * *Requirements:\\n     * - `provider` must be a Redemption Provider\\n     * - `provider`debt must equal to or above`eusdAmount`\\n     * @dev Service Fee for rigidRedemption `redemptionFee` is set to 0.5% by default, can be revised by DAO.\\n     */\\n    function rigidRedemption(address provider, uint256 eusdAmount, uint256 minReceiveAmount) external virtual {\\n        require(provider != msg.sender, \\\"CBS\\\");\\n        require(configurator.isRedemptionProvider(provider), \\\"provider is not a RedemptionProvider\\\");\\n        require(borrowed[provider] >= eusdAmount, \\\"eusdAmount cannot surpass providers debt\\\");\\n        uint256 assetPrice = getAssetPrice();\\n        uint256 providerCollateralRatio = (depositedAsset[provider] * assetPrice * 100) / borrowed[provider];\\n        require(providerCollateralRatio >= 100 * 1e18, \\\"The provider's collateral ratio should be not less than 100%.\\\");\\n        _repay(msg.sender, provider, eusdAmount);\\n        uint256 collateralAmount = eusdAmount * 1e18 * (10_000 - configurator.redemptionFee()) / assetPrice / 10_000;\\n        uint256 sendAmount = checkWithdrawal(provider, collateralAmount);\\n        require(sendAmount >= minReceiveAmount, \\\"EL\\\");\\n        depositedAsset[provider] -= collateralAmount;\\n        totalDepositedAsset -= collateralAmount;\\n        collateralAsset.safeTransfer(msg.sender, sendAmount);\\n        emit RigidRedemption(msg.sender, provider, eusdAmount, sendAmount, block.timestamp);\\n    }\\n\\n    /**\\n     * @notice Mints eUSD tokens for a user.\\n     * @param _provider The provider's address.\\n     * @param _onBehalfOf The user's address.\\n     * @param _mintAmount The amount of eUSD tokens to be minted.\\n     * @param _assetPrice The current collateral asset price.\\n     * @dev Mints eUSD tokens for the specified user, updates the total supply and borrowed balance,\\n     * refreshes the mint reward for the provider, checks the health of the provider,\\n     * and emits a Mint event.\\n     * Requirements:\\n     * The total supply plus mint amount must not exceed the maximum supply allowed for the vault.\\n     * The provider must have sufficient borrowing capacity to mint the specified amount.\\n     */\\n    function _mintEUSD(address _provider, address _onBehalfOf, uint256 _mintAmount, uint256 _assetPrice) internal virtual {\\n        require(poolTotalCirculation + _mintAmount <= configurator.mintVaultMaxSupply(address(this)), \\\"ESL\\\");\\n        configurator.refreshMintReward(_provider);\\n        borrowed[_provider] += _mintAmount;\\n\\n        EUSD.mint(_onBehalfOf, _mintAmount);\\n        _saveReport();\\n        poolTotalCirculation += _mintAmount;\\n        _checkHealth(_provider, _assetPrice);\\n        emit Mint(msg.sender, _onBehalfOf, _mintAmount, block.timestamp);\\n    }\\n\\n    /**\\n     * @notice Burn _provideramount eUSD to payback minted eUSD for _onBehalfOf.\\n     *\\n     * @dev Refresh LBR reward before reducing providers debt. Refresh Lybra generated service fee before reducing totalEUSDCirculation.\\n     */\\n    function _repay(address _provider, address _onBehalfOf, uint256 _amount) internal virtual {\\n        uint256 amount = borrowed[_onBehalfOf] >= _amount ? _amount : borrowed[_onBehalfOf];\\n\\n        EUSD.burn(_provider, amount);\\n        configurator.refreshMintReward(_onBehalfOf);\\n\\n        borrowed[_onBehalfOf] -= amount;\\n        _saveReport();\\n        poolTotalCirculation -= amount;\\n        emit Burn(_provider, _onBehalfOf, amount, block.timestamp);\\n    }\\n\\n    /**\\n     * @dev Get USD value of current collateral asset and minted eUSD through price oracle / Collateral asset USD value must higher than safe Collateral Ratio.\\n     */\\n    function _checkHealth(address _user, uint256 _assetPrice) internal view {\\n        if (((depositedAsset[_user] * _assetPrice * 100) / borrowed[_user]) < configurator.getSafeCollateralRatio(address(this))) revert(\\\"collateralRatio is Below safeCollateralRatio\\\");\\n    }\\n\\n    function _saveReport() internal {\\n        feeStored += _newFee();\\n        lastReportTime = block.timestamp;\\n    }\\n\\n    function _newFee() internal view returns (uint256) {\\n        return (poolTotalCirculation * configurator.vaultMintFeeApy(address(this)) * (block.timestamp - lastReportTime)) / (86_400 * 365) / 10_000;\\n    }\\n\\n    /**\\n     * @dev Return USD value of current ETH through Liquity PriceFeed Contract.\\n     */\\n    function _etherPrice() internal returns (uint256) {\\n        return etherOracle.fetchPrice();\\n    }\\n\\n    function getBorrowedOf(address user) external view returns (uint256) {\\n        return borrowed[user];\\n    }\\n\\n    function getPoolTotalCirculation() external view returns (uint256) {\\n        return poolTotalCirculation;\\n    }\\n\\n    function getAsset() external view virtual returns (address) {\\n        return address(collateralAsset);\\n    }\\n\\n    function getVaultType() external pure returns (uint8) {\\n        return 0;\\n    }\\n\\n    function getAssetPrice() public virtual returns (uint256);\\n    function getAsset2EtherExchangeRate() external view virtual returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/lybra/pools/LybraStETHVault.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.17;\\n\\nimport \\\"../interfaces/IEUSD.sol\\\";\\nimport \\\"./base/LybraEUSDVaultBase.sol\\\";\\n\\ninterface Ilido {\\n    function submit(address _referral) external payable returns (uint256 StETH);\\n}\\n\\ncontract LybraStETHVault is LybraEUSDVaultBase {\\n    // Currently, the official rebase time for Lido is between 12PM to 13PM UTC.\\n    uint256 public lidoRebaseTime = 12 hours;\\n\\n    // stETH = 0xae7ab96520DE3A18E5e111B5EaAb095312D7fE84\\n    // oracle = 0x4c517D4e2C851CA76d7eC94B805269Df0f2201De\\n    constructor(address _stETH, address _oracle, address _config) LybraEUSDVaultBase(_stETH, _oracle, _config) {\\n    }\\n\\n    /**\\n     * @notice Sets the rebase time for Lido based on the actual situation.\\n     * This function can only be called by an address with the ADMIN role.\\n     */\\n    function setLidoRebaseTime(uint256 _time) external {\\n        require(configurator.hasRole(keccak256(\\\"ADMIN\\\"), msg.sender), \\\"NA\\\");\\n        lidoRebaseTime = _time;\\n    }\\n\\n    /**\\n     * @notice Allows users to deposit ETH to mint eUSD.\\n     * ETH is directly deposited into Lido and converted to stETH.\\n     * @param mintAmount The amount of eUSD to mint.\\n     * Requirements:\\n     * The deposited amount of ETH must be greater than or equal to 1 ETH.\\n     */\\n    function depositEtherToMint(uint256 mintAmount) external payable override {\\n        require(msg.value >= 1 ether, \\\"DNL\\\");\\n        //convert to steth\\n        uint256 sharesAmount = Ilido(address(collateralAsset)).submit{value: msg.value}(address(configurator));\\n        require(sharesAmount != 0, \\\"ZERO_DEPOSIT\\\");\\n\\n        totalDepositedAsset += msg.value;\\n        depositedAsset[msg.sender] += msg.value;\\n        depositedTime[msg.sender] = block.timestamp;\\n\\n        if (mintAmount > 0) {\\n            _mintEUSD(msg.sender, msg.sender, mintAmount, getAssetPrice());\\n        }\\n\\n        emit DepositEther(msg.sender, address(collateralAsset), msg.value, msg.value, block.timestamp);\\n    }\\n\\n    /**\\n     * @notice When stETH balance increases through LSD or other reasons, the excess income is sold for eUSD, allocated to eUSD holders through rebase mechanism.\\n     * Emits a `LSDValueCaptured` event.\\n     *\\n     * *Requirements:\\n     * - stETH balance in the contract cannot be less than totalDepositedAsset after exchange.\\n     * @dev Income is used to cover accumulated Service Fee first.\\n     */\\n    function excessIncomeDistribution(uint256 stETHAmount) external override {\\n        uint256 excessAmount = collateralAsset.balanceOf(address(this)) - totalDepositedAsset;\\n        require(excessAmount != 0 && stETHAmount != 0, \\\"Only LSD excess income can be exchanged\\\");\\n        uint256 realAmount = stETHAmount > excessAmount ? excessAmount : stETHAmount;\\n        uint256 dutchAuctionDiscountPrice = getDutchAuctionDiscountPrice();\\n        uint256 payAmount = realAmount * getAssetPrice() * dutchAuctionDiscountPrice / 10_000 / 1e18;\\n\\n        uint256 income = feeStored + _newFee();\\n        if (payAmount > income) {\\n            bool success = EUSD.transferFrom(msg.sender, address(configurator), income);\\n            require(success, \\\"TF\\\");\\n\\n            try configurator.distributeRewards() {} catch {}\\n\\n            uint256 sharesAmount = EUSD.getSharesByMintedEUSD(payAmount - income);\\n            if (sharesAmount == 0) {\\n                //eUSD totalSupply is 0: assume that shares correspond to eUSD 1-to-1\\n                sharesAmount = (payAmount - income);\\n            }\\n            //Income is distributed to LBR staker.\\n            EUSD.burnShares(msg.sender, sharesAmount);\\n            feeStored = 0;\\n            emit FeeDistribution(address(configurator), income, block.timestamp);\\n        } else {\\n            bool success = EUSD.transferFrom(msg.sender, address(configurator), payAmount);\\n            require(success, \\\"TF\\\");\\n            try configurator.distributeRewards() {} catch {}\\n            feeStored = income - payAmount;\\n            emit FeeDistribution(address(configurator), payAmount, block.timestamp);\\n        }\\n\\n        lastReportTime = block.timestamp;\\n        collateralAsset.transfer(msg.sender, realAmount);\\n        emit LSDValueCaptured(realAmount, payAmount, dutchAuctionDiscountPrice, block.timestamp);\\n    }\\n\\n    /**\\n     * @notice Reduces the discount for the issuance of additional tokens based on the rebase time using the Dutch auction method.\\n     * The specific rule is that the discount rate increases by 1% every 30 minutes after the rebase occurs.\\n     */\\n    function getDutchAuctionDiscountPrice() public view returns (uint256) {\\n        uint256 time = (block.timestamp - lidoRebaseTime) % 1 days;\\n        if (time < 30 minutes) return 10_000;\\n        return 10_000 - (time / 30 minutes - 1) * 100;\\n    }\\n\\n    function getAssetPrice() public override returns (uint256) {\\n        return _etherPrice();\\n    }\\n    function getAsset2EtherExchangeRate() external view override returns (uint256) {\\n        return 1e18;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stETH\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_oracle\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_config\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sponsor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"onBehalfOf\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"onBehalfOf\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"DepositAsset\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"onBehalfOf\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"etherAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"assetAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"DepositEther\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"feeAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feeAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"FeeDistribution\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stETHAdded\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"payoutEUSD\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"discountRate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"LSDValueCaptured\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"keeper\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"onBehalfOf\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"eusdamount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"liquidateEtherAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"keeperReward\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"superLiquidation\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"LiquidationRecord\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sponsor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"onBehalfOf\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"eusdAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"collateralAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"RigidRedemption\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sponsor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"onBehalfOf\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"WithdrawAsset\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"EUSD\",\"outputs\":[{\"internalType\":\"contract IEUSD\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"badCollateralRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"onBehalfOf\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"checkWithdrawal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"withdrawal\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collateralAsset\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"configurator\",\"outputs\":[{\"internalType\":\"contract Iconfigurator\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assetAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mintAmount\",\"type\":\"uint256\"}],\"name\":\"depositAssetToMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"mintAmount\",\"type\":\"uint256\"}],\"name\":\"depositEtherToMint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"depositedAsset\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"stETHAmount\",\"type\":\"uint256\"}],\"name\":\"excessIncomeDistribution\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeStored\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAsset\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAsset2EtherExchangeRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAssetPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getBorrowedOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDutchAuctionDiscountPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPoolTotalCirculation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVaultType\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastReportTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lidoRebaseTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"onBehalfOf\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"assetAmount\",\"type\":\"uint256\"}],\"name\":\"liquidation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"onBehalfOf\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"eusdAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minReceiveAmount\",\"type\":\"uint256\"}],\"name\":\"rigidRedemption\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"setLidoRebaseTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"onBehalfOf\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"assetAmount\",\"type\":\"uint256\"}],\"name\":\"superLiquidation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDepositedAsset\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"onBehalfOf\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "LybraStETHVault", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000ae7ab96520de3a18e5e111b5eaab095312d7fe840000000000000000000000004c517d4e2c851ca76d7ec94b805269df0f2201de000000000000000000000000c8353594eeedc5ce5a4544d3d9907b694c4690ff", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}