{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/Echoes.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\n// Echoes - ERC20\\n// Redefining the efficiency of the Reflection token model through a dynamic framework. Experience a whole new era of Echonomics.\\n// Telegram: https://t.me/EchoesERC20\\n// Twitter: https://twitter.com/Echoes_erc\\n// Website: https://www.echoes-erc.com\\n\\npragma solidity ^0.8.19;\\n\\nimport \\\"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\\\";\\nimport \\\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol\\\";\\nimport \\\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\n\\ncontract Echoes is IERC20, Ownable {\\n    using SafeMath for uint256;\\n    /* -------------------------------------------------------------------------- */\\n    /*                                   events                                   */\\n    /* -------------------------------------------------------------------------- */\\n    event EventStart(string evt);\\n    event EventFinish(string evt, uint256 amountReflectionAccumulated);\\n    event ReflectAccumulated(uint256 amountAdded, uint256 totalAmountAccumulated);\\n    event ReflectDistributed(uint256 amountDistributer);\\n    event ReflectNotification(string message);\\n    event ModeChanged(string mode);\\n    event HolderMinimumChanged(uint256 newMinimum);\\n    event LogInfo(string info);\\n    event LogError(string error);\\n\\n    /* -------------------------------------------------------------------------- */\\n    /*                                  constants                                 */\\n    /* -------------------------------------------------------------------------- */\\n    address constant DEAD = 0x000000000000000000000000000000000000dEaD;\\n    address constant ZERO = 0x0000000000000000000000000000000000000000;\\n\\n    uint256 constant MAX_FEE = 10;\\n\\n    /* -------------------------------------------------------------------------- */\\n    /*                                   states                                   */\\n    /* -------------------------------------------------------------------------- */\\n    IUniswapV2Router02 public constant UNISWAP_V2_ROUTER =\\n        IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\\n    address public immutable UNISWAP_V2_PAIR;\\n\\n    struct Fee {\\n        uint8 reflection;\\n        uint8 teamOracle;\\n        uint8 lp;\\n        uint8 burn;\\n        uint128 total;\\n    }\\n    \\n    struct HolderInfo {\\n        uint256 balance;\\n        uint256 eventReflection;\\n        uint256 baseReflection;\\n        uint256 holdingTime;\\n        uint256 lastBuy;\\n        uint256 lastSell;\\n        uint256 keyIndex;\\n        bool isHolder;\\n    }\\n\\n    string _name = \\\"echoes\\\";\\n    string _symbol = \\\"echoes\\\";\\n\\n    uint256 _totalSupply = 343_000_000_000 ether;\\n\\n    uint256 public _swapThreshold = (_totalSupply * 2) / 10000;\\n\\n    uint256 public _minSupplyHolding = 85_000_000 ether;\\n\\n    mapping(address => uint256) public _balances;\\n    mapping(address => uint256) public _baseReflection;\\n    mapping(address => uint256) public _eventReflection;\\n    mapping(address => uint256) public _historyReflectionTransfered;\\n    mapping(address => uint256) public _holdingTime;\\n    mapping(address => uint256) public _lastBuy;\\n    mapping(address => uint256) public _lastSell;\\n    mapping(address => uint256) public _keyIndex;\\n    mapping(address => bool) public _isHolder;\\n\\n    address[] public addressesParticipantEvent;\\n    address[] public holderAddresses;\\n\\n    uint256 public totalReflections = 0;\\n    uint256 public eventReflectedToken = 0;\\n    uint256 public normalReflectedToken = 0;\\n    uint256 public totalRemainder = 0;\\n\\n    string public currentTokenMode = \\\"harmony\\\";\\n    string public nextTokenMode = \\\"amplify\\\";\\n    uint256 public lastTimeMode = 0;\\n    uint256 public lastTimeGenesis = 0;\\n    string public eventNameInProgress = \\\"\\\";\\n    bool public eventInProgress = false;\\n    string[] public eventHistory;\\n    string[] public modeHistory;\\n    uint256 public eventTokenAmountDistributedBatching;\\n    uint256 public timeEventStart = 0;\\n    uint256 public timeEventStop = 0;\\n    uint256 public highestReflectionEventValue = 0;\\n    uint256 public highestReflectionEventTime = 0;\\n    string public highestReflectionEventName = \\\"\\\";\\n\\n    mapping(address => mapping(address => uint256)) _allowances;\\n\\n    bool public enableTrading = false;\\n    bool public enableAutoAdjust = false;\\n    mapping(address => bool) public isFeeExempt;\\n    mapping(address => bool) public isReflectionExempt;\\n\\n    Fee public harmony = Fee({reflection: 2, teamOracle: 1, lp: 1, burn: 1, total: 5});\\n\\n    Fee public amplifyBuy = Fee({reflection: 4, teamOracle: 1, lp: 0, burn: 0, total: 5});\\n    Fee public amplifySell = Fee({reflection: 5, teamOracle: 1, lp: 0, burn: 4, total: 10});\\n\\n    Fee public growthBuy = Fee({reflection: 0, teamOracle: 1, lp: 0, burn: 0, total: 1});\\n    Fee public growthSell = Fee({reflection: 2, teamOracle: 1, lp: 2, burn: 0, total: 5});\\n\\n    Fee public buyFee;\\n    Fee public sellFee;\\n\\n    address private teamOracleFeeReceiver;\\n    address private lpFeeReceiver;\\n    address private airDropAddress;\\n\\n    address private msAddress;\\n\\n    bool public claimingFees = true;\\n    bool inSwap;\\n    mapping(address => bool) public blacklists;\\n\\n    /* -------------------------------------------------------------------------- */\\n    /*                                  modifiers                                 */\\n    /* -------------------------------------------------------------------------- */\\n    modifier swapping() {\\n        inSwap = true;\\n        _;\\n        inSwap = false;\\n    }\\n\\n    /* -------------------------------------------------------------------------- */\\n    /*                                 constructor                                */\\n    /* -------------------------------------------------------------------------- */\\n    constructor() {\\n        // create uniswap pair\\n        address _uniswapPair =\\n            IUniswapV2Factory(UNISWAP_V2_ROUTER.factory()).createPair(address(this), UNISWAP_V2_ROUTER.WETH());\\n        UNISWAP_V2_PAIR = _uniswapPair;\\n\\n        _allowances[address(this)][address(UNISWAP_V2_ROUTER)] = type(uint256).max;\\n        _allowances[address(this)][msg.sender] = type(uint256).max;\\n\\n        teamOracleFeeReceiver = address(0x3cbd714c6934321CBBb0af6F9B9Bc90B7043b5B3);\\n        lpFeeReceiver = address(0x100F3d829Ce0bd7E15aB2D77c227eAB86087E919);\\n        airDropAddress = address(0x7d51F929F504E70E59142c1D74CfC9D410ef66eE);\\n\\n        isFeeExempt[msg.sender] = true;\\n        isFeeExempt[teamOracleFeeReceiver] = true;\\n        isFeeExempt[lpFeeReceiver] = true;\\n        isFeeExempt[airDropAddress] = true;\\n        isFeeExempt[ZERO] = true;\\n        isFeeExempt[DEAD] = true;\\n\\n        isReflectionExempt[address(this)] = true;\\n        isReflectionExempt[address(UNISWAP_V2_ROUTER)] = true;\\n        isReflectionExempt[_uniswapPair] = true;\\n        isReflectionExempt[msg.sender] = true;\\n        isReflectionExempt[teamOracleFeeReceiver] = true;\\n        isReflectionExempt[lpFeeReceiver] = true;\\n        isReflectionExempt[airDropAddress] = true;\\n        isReflectionExempt[ZERO] = true;\\n        isReflectionExempt[DEAD] = true;\\n\\n        buyFee = harmony;\\n        sellFee = harmony;\\n\\n        uint256 distribute = _totalSupply * 55 / 100;\\n        _balances[msg.sender] = distribute;\\n        emit Transfer(address(0), msg.sender, distribute);\\n\\n        distribute = _totalSupply * 15 / 100;\\n        _balances[teamOracleFeeReceiver] = distribute;\\n        emit Transfer(address(0), teamOracleFeeReceiver, distribute);\\n\\n        distribute = _totalSupply * 30 / 100;\\n        _balances[airDropAddress] = distribute;\\n        emit Transfer(address(0), airDropAddress, distribute);\\n\\n        lastTimeMode = block.timestamp;\\n        emit ModeChanged(currentTokenMode);\\n    }\\n\\n    receive() external payable {}\\n\\n    /* -------------------------------------------------------------------------- */\\n    /*                                    ERC20                                   */\\n    /* -------------------------------------------------------------------------- */\\n    function approve(address spender, uint256 amount) public override returns (bool) {\\n        _allowances[msg.sender][spender] = amount;\\n        emit Approval(msg.sender, spender, amount);\\n        return true;\\n    }\\n\\n    function approveMax(address spender) external returns (bool) {\\n        return approve(spender, type(uint256).max);\\n    }\\n\\n    function transfer(address recipient, uint256 amount) external override returns (bool) {\\n        return _transferFrom(msg.sender, recipient, amount);\\n    }\\n\\n    function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool) {\\n        if (_allowances[sender][msg.sender] != type(uint256).max) {\\n            require(_allowances[sender][msg.sender] >= amount, \\\"ERC20: insufficient allowance\\\");\\n            _allowances[sender][msg.sender] = _allowances[sender][msg.sender] - amount;\\n        }\\n\\n        return _transferFrom(sender, recipient, amount);\\n    }\\n\\n    /* -------------------------------------------------------------------------- */\\n    /*                                    views                                   */\\n    /* -------------------------------------------------------------------------- */\\n    function totalSupply() external view override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    function decimals() external pure returns (uint8) {\\n        return 18;\\n    }\\n\\n    function name() external view returns (string memory) {\\n        return _name;\\n    }\\n\\n    function symbol() external view returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    function balanceOf(address account) public view override returns (uint256) {\\n        uint256 balanceNormalReflection = 0;\\n        if (isHolder(account)){\\n            if (holderAddresses.length > 0 && normalReflectedToken > 0) {\\n                uint256 baseReflection = 0;\\n                if (_baseReflection[account] > 0) {\\n                    baseReflection = _baseReflection[account];\\n                }\\n                uint256 calculatePersonnalReflection = normalReflectedToken / holderAddresses.length;\\n                if (calculatePersonnalReflection > baseReflection) {\\n                    balanceNormalReflection = calculatePersonnalReflection - baseReflection;\\n                }\\n            }\\n        }\\n\\n        uint256 totalBalance = _balances[account];\\n        if (balanceNormalReflection > 0) {\\n            totalBalance += balanceNormalReflection;\\n        }\\n        uint256 eventBalance = _eventReflection[account];\\n        if (eventBalance > 0) {\\n            totalBalance += eventBalance;\\n        }\\n\\n        return totalBalance;\\n    }\\n\\n    function getHolderNormalReflection(address account) public view returns (uint256) {\\n        uint256 balanceNormalReflection = 0;\\n        if (isHolder(account)){\\n            if (holderAddresses.length > 0 && normalReflectedToken > 0) {\\n                uint256 baseReflection = 0;\\n                if (_baseReflection[account] > 0) {\\n                    baseReflection = _baseReflection[account];\\n                }\\n                uint256 calculatePersonnalReflection = normalReflectedToken / holderAddresses.length;\\n                if (calculatePersonnalReflection > baseReflection) {\\n                    balanceNormalReflection = calculatePersonnalReflection - baseReflection;\\n                }\\n            }\\n        }\\n        return balanceNormalReflection;\\n    }\\n\\n    function getHolderEventReflection(address account) public view returns (uint256) {\\n        return _eventReflection[account];\\n    }\\n\\n    function getHolderHistoryReflectionTransfered(address account) public view returns (uint256) {\\n        return _historyReflectionTransfered[account];\\n    }\\n\\n    function allowance(address holder, address spender) external view override returns (uint256) {\\n        return _allowances[holder][spender];\\n    }\\n\\n    function getCirculatingSupply() public view returns (uint256) {\\n        return _totalSupply - balanceOf(DEAD) - balanceOf(ZERO);\\n    }\\n    \\n    function isHolder(address holderAddress) public view returns (bool) {\\n        if (isReflectionExempt[holderAddress] || blacklists[holderAddress]){\\n            return false;\\n        }\\n        return _balances[holderAddress] >= _minSupplyHolding;\\n    }\\n\\n    function isHolderInArray(address holderAddress) public view returns (bool) {\\n        return _isHolder[holderAddress];\\n    }\\n\\n    function addressToString(address _address) internal pure returns (string memory) {\\n        bytes32 value = bytes32(uint256(uint160(_address)));\\n        bytes memory alphabet = \\\"0123456789abcdef\\\";\\n        bytes memory str = new bytes(42);\\n        str[0] = '0';\\n        str[1] = 'x';\\n        for (uint256 i = 0; i < 20; i++) {\\n            str[2 + i * 2] = alphabet[uint8(value[i + 12] >> 4)];\\n            str[3 + i * 2] = alphabet[uint8(value[i + 12] & 0x0f)];\\n        }\\n        return string(str);\\n    }\\n\\n    /* -------------------------------------------------------------------------- */\\n    /*                                   owners                                   */\\n    /* -------------------------------------------------------------------------- */\\n\\n    function setMode(string calldata modeName, string calldata nextMode) external {\\n        require(msg.sender == owner() || msg.sender == teamOracleFeeReceiver, \\\"Forbidden\\\");\\n\\n        if (compareStrings(modeName, \\\"harmony\\\")) {\\n            buyFee = harmony;\\n            sellFee = harmony;\\n        } else if (compareStrings(modeName, \\\"amplify\\\")) {\\n            buyFee = amplifyBuy;\\n            sellFee = amplifySell;\\n        } else if (compareStrings(modeName, \\\"growth\\\")) {\\n            buyFee = growthBuy;\\n            sellFee = growthSell;\\n        }\\n\\n        currentTokenMode = modeName;\\n        nextTokenMode = nextMode;\\n\\n        modeHistory.push(modeName);\\n        if (modeHistory.length > 10){\\n            delete modeHistory[0];\\n            for(uint i = 0; i < modeHistory.length - 1; i++) {\\n                modeHistory[i] = modeHistory[i + 1];\\n            }\\n            modeHistory.pop();\\n        }\\n        lastTimeMode = block.timestamp;\\n        emit ModeChanged(modeName);\\n    }\\n\\n    function switchNextMode() external {\\n        require(msg.sender == owner() || msg.sender == teamOracleFeeReceiver, \\\"Forbidden\\\");\\n\\n        string memory modeName = nextTokenMode;\\n        string memory nextMode = \\\"\\\";\\n        if (compareStrings(nextTokenMode, \\\"harmony\\\")) {\\n            if (compareStrings(currentTokenMode, \\\"amplify\\\")) {\\n                nextMode = \\\"growth\\\";\\n            } else {\\n                nextMode = \\\"amplify\\\";\\n            }\\n        } else {\\n            nextMode = \\\"harmony\\\";\\n        }\\n\\n        if (compareStrings(modeName, \\\"harmony\\\")) {\\n            buyFee = harmony;\\n            sellFee = harmony;\\n        } else if (compareStrings(modeName, \\\"amplify\\\")) {\\n            buyFee = amplifyBuy;\\n            sellFee = amplifySell;\\n        } else if (compareStrings(modeName, \\\"growth\\\")) {\\n            buyFee = growthBuy;\\n            sellFee = growthSell;\\n        }\\n\\n        currentTokenMode = modeName;\\n        nextTokenMode = nextMode;\\n\\n        modeHistory.push(modeName);\\n        if (modeHistory.length > 10){\\n            delete modeHistory[0];\\n            for(uint i = 0; i < modeHistory.length - 1; i++) {\\n                modeHistory[i] = modeHistory[i + 1];\\n            }\\n            modeHistory.pop();\\n        }\\n        lastTimeMode = block.timestamp;\\n        emit ModeChanged(modeName);\\n    }\\n\\n    function getModeHistoryList() external view returns (string[] memory) {\\n        return modeHistory;\\n    }\\n\\n    function getCurrentMode() external view returns (string memory) {\\n        return currentTokenMode;\\n    }\\n\\n    function getNextMode() external view returns (string memory) {\\n        return nextTokenMode;\\n    }\\n\\n    function getLastTimeMode() external view returns (uint256) {\\n        return lastTimeMode;\\n    }\\n\\n    function getHighestReflectionEventValue() external view returns (uint256) {\\n        return highestReflectionEventValue;\\n    }\\n\\n    function getHighestReflectionEventName() external view returns (string memory) {\\n        return highestReflectionEventName;\\n    }\\n\\n    function getHighestReflectionEventTime() external view returns (uint256) {\\n        return highestReflectionEventTime;\\n    }\\n\\n    function getHolder(address holderAddress) external view returns (HolderInfo memory) {\\n        require(msg.sender == owner() || msg.sender == teamOracleFeeReceiver, \\\"Forbidden\\\");\\n        HolderInfo memory holder;\\n        holder.balance = _balances[holderAddress];\\n        holder.baseReflection = _baseReflection[holderAddress];\\n        holder.eventReflection = _eventReflection[holderAddress];\\n        holder.holdingTime = _holdingTime[holderAddress];\\n        holder.lastBuy = _lastBuy[holderAddress];\\n        holder.lastSell = _lastSell[holderAddress];\\n        holder.keyIndex = _keyIndex[holderAddress];\\n        holder.isHolder = _isHolder[holderAddress];\\n        return holder;\\n    }\\n\\n    function getArrayHolder() external view returns (address[] memory) {\\n        require(msg.sender == owner() || msg.sender == teamOracleFeeReceiver, \\\"Forbidden\\\");\\n        return holderAddresses;\\n    }\\n\\n    function getArrayParticipant() external view returns (address[] memory) {\\n        require(msg.sender == owner() || msg.sender == teamOracleFeeReceiver, \\\"Forbidden\\\");\\n        return addressesParticipantEvent;\\n    }\\n\\n    function stopEvent() external {\\n        require(msg.sender == owner() || msg.sender == teamOracleFeeReceiver, \\\"Forbidden\\\");\\n        require(eventInProgress == true, \\\"There is not event started actually.\\\");\\n        if (eventReflectedToken > highestReflectionEventValue) {\\n            highestReflectionEventValue = eventReflectedToken;\\n            highestReflectionEventTime = block.timestamp;\\n            highestReflectionEventName = eventNameInProgress;\\n        }\\n        emit EventFinish(eventNameInProgress, eventReflectedToken);\\n        eventNameInProgress = \\\"\\\";\\n        eventInProgress = false;\\n        eventTokenAmountDistributedBatching = 0;\\n        timeEventStop = block.timestamp;\\n    }\\n\\n    function startEventName(string calldata eventName, address[] calldata selectedAddresses) external {\\n        require(msg.sender == owner() || msg.sender == teamOracleFeeReceiver, \\\"Forbidden\\\");\\n        require(eventInProgress == false, \\\"Please finish the event before start another one.\\\");\\n        delete addressesParticipantEvent;\\n        addressesParticipantEvent = selectedAddresses;\\n        eventNameInProgress = eventName;\\n        eventInProgress = true;\\n        eventHistory.push(eventName);\\n        if (eventHistory.length > 10){\\n            delete eventHistory[0];\\n            for(uint i = 0; i < eventHistory.length - 1; i++) {\\n                eventHistory[i] = eventHistory[i + 1];\\n            }\\n            eventHistory.pop();\\n        }\\n        timeEventStart = block.timestamp;\\n        if (compareStrings(eventName, \\\"genesis\\\")) {\\n            lastTimeGenesis = block.timestamp;\\n        }\\n        emit EventStart(eventName);\\n    }\\n\\n    function getEventHistoryList() external view returns (string[] memory) {\\n        return eventHistory;\\n    }\\n\\n    function getEventTimeStart() external view returns (uint256) {\\n        return timeEventStart;\\n    }\\n\\n    function getEventTimeStop() external view returns (uint256) {\\n        return timeEventStop;\\n    }\\n\\n    function getLastTimeGenesis() external view returns (uint256) {\\n        return lastTimeGenesis;\\n    }\\n\\n    function shouldDistributeEventReflections(address[] calldata batchingParticipants, bool isLastCall) external returns (bool) {\\n        require(msg.sender == owner() || msg.sender == teamOracleFeeReceiver, \\\"Forbidden\\\");\\n        require(eventInProgress == false, \\\"Please finish the event before distribute.\\\");\\n\\n        uint256 totalParticipantsEvent = addressesParticipantEvent.length;\\n\\n        if (eventReflectedToken < totalParticipantsEvent){\\n            totalRemainder = totalRemainder + eventReflectedToken;\\n            eventReflectedToken = 0;\\n            emit ReflectNotification(\\\"[NOT_ENOUGH_TOKENS] Not enough tokens to distribute to every participant, tokens will be send randomly in a special event.\\\");\\n            return false;\\n        }\\n\\n        uint256 reflectionsPerHolder = eventReflectedToken.div(totalParticipantsEvent);\\n        for (uint i = 0; i < batchingParticipants.length; i++) {\\n            address participant = batchingParticipants[i];\\n            if (isHolder(participant)) {\\n                _eventReflection[participant] = _eventReflection[participant].add(reflectionsPerHolder);\\n            } else {\\n                totalRemainder = totalRemainder + reflectionsPerHolder;\\n            }\\n\\n            eventTokenAmountDistributedBatching = eventTokenAmountDistributedBatching + reflectionsPerHolder;\\n            if (eventTokenAmountDistributedBatching >= eventReflectedToken) {\\n                emit ReflectDistributed(eventReflectedToken);\\n                eventReflectedToken = 0;\\n                eventTokenAmountDistributedBatching = 0;\\n                emit ReflectNotification(\\\"[NOT_ENOUGH_TOKENS] Not enough tokens to distribute to every participant, tokens will be send randomly in a special event.\\\");\\n                return false;\\n            }\\n        }\\n        if (isLastCall) {\\n            uint256 remainder = eventReflectedToken % totalParticipantsEvent;\\n            if (remainder > 0){\\n                totalRemainder = totalRemainder + remainder;\\n            }\\n            if (eventReflectedToken > eventTokenAmountDistributedBatching) {\\n\\n                uint256 remainder2 = eventReflectedToken - eventTokenAmountDistributedBatching;\\n                if (remainder2 > 0){\\n                    totalRemainder = totalRemainder + remainder2;\\n                }\\n            }\\n\\n            emit ReflectDistributed(eventReflectedToken);\\n            eventReflectedToken = 0;\\n            eventTokenAmountDistributedBatching = 0;\\n        }\\n\\n        return true;\\n    }\\n\\n    function sendRemainderTokens(address winner, uint256 amount) external {\\n        require(msg.sender == owner() || msg.sender == teamOracleFeeReceiver, \\\"Forbidden\\\");\\n        _basicTransfer(address(this), winner, amount);\\n    }\\n\\n    function clearStuckBalance() external {\\n        require(msg.sender == owner() || msg.sender == teamOracleFeeReceiver, \\\"Forbidden\\\");\\n        (bool success,) = payable(msg.sender).call{value: address(this).balance}(\\\"\\\");\\n        require(success);\\n    }\\n    function clearStuckToken() external {\\n        require(msg.sender == owner() || msg.sender == teamOracleFeeReceiver, \\\"Forbidden\\\");\\n        _transferFrom(address(this), msg.sender, balanceOf(address(this)));\\n    }\\n\\n    function setSwapBackSettings(bool _enabled, uint256 _pt) external onlyOwner {\\n        claimingFees = _enabled;\\n        _swapThreshold = (_totalSupply * _pt) / 10000;\\n    }\\n\\n    function manualSwapBack() external onlyOwner {\\n        if (_shouldSwapBack()) {\\n            _swapBack();\\n        }\\n    }\\n\\n    function startTrading() external onlyOwner {\\n        enableTrading = true;\\n    }\\n\\n    function setMSAddress(address ad) external onlyOwner {\\n        msAddress = ad;\\n    }\\n\\n    function setIsFeeExempt(address holder, bool exempt) external onlyOwner {\\n        isFeeExempt[holder] = exempt;\\n    }\\n\\n    function setIsReflectionExempt(address holder, bool exempt) external onlyOwner {\\n        isReflectionExempt[holder] = exempt;\\n    }\\n\\n    function setFeeReceivers(address ot_, address lp_) external onlyOwner {\\n        teamOracleFeeReceiver = ot_;\\n        lpFeeReceiver = lp_;\\n    }\\n\\n    function setMinSupplyHolding(uint256 h_) external onlyOwner {\\n        _minSupplyHolding = _totalSupply * h_ / 10000;\\n        emit HolderMinimumChanged(_minSupplyHolding);\\n    }\\n\\n    function setEnableAutoAdjust(bool e_) external onlyOwner {\\n        enableAutoAdjust = e_;\\n    }\\n\\n    function blacklist(address _address, bool _isBlacklisting) external onlyOwner {\\n        blacklists[_address] = _isBlacklisting;\\n    }\\n\\n    function airdrop(address recipient, uint256 amount) external {\\n        require(msg.sender == owner() || msg.sender == teamOracleFeeReceiver || msg.sender == airDropAddress, \\\"Forbidden\\\");\\n        require(_balances[msg.sender] >= amount, \\\"Insufficient Balance\\\");\\n        _balances[msg.sender] = _balances[msg.sender] - amount;\\n        _balances[recipient] = _balances[recipient] + amount;\\n        updateStateHolder(recipient);\\n        _lastBuy[recipient] = block.timestamp;\\n        emit Transfer(msg.sender, recipient, amount);\\n    }\\n\\n    function airdropMultiple(address[] calldata recipients, uint256[] calldata amounts) external {\\n        require(msg.sender == owner() || msg.sender == teamOracleFeeReceiver || msg.sender == airDropAddress, \\\"Forbidden\\\");\\n        require(recipients.length == amounts.length, \\\"Invalid input\\\");\\n\\n        for (uint256 i = 0; i < recipients.length; i++) {\\n            address recipient = recipients[i];\\n            uint256 amount = amounts[i];\\n\\n            require(_balances[msg.sender] >= amount, \\\"Insufficient Balance\\\");\\n\\n            _balances[msg.sender] -= amount;\\n            _balances[recipient] += amount;\\n            updateStateHolder(recipient);\\n            _lastBuy[recipient] = block.timestamp;\\n            emit Transfer(msg.sender, recipient, amount);\\n        }\\n    }\\n\\n    function sendAutoAjustHolding() external onlyOwner {\\n        adjustMinimumHolding();\\n    }\\n\\n    /* -------------------------------------------------------------------------- */\\n    /*                                   private                                  */\\n    /* -------------------------------------------------------------------------- */\\n\\n    function adjustMinimumHolding() internal {\\n        address[] memory path = new address[](2);\\n        path[0] = UNISWAP_V2_ROUTER.WETH();\\n        path[1] = address(this);\\n\\n        uint256[] memory amounts = UNISWAP_V2_ROUTER.getAmountsOut(0.05 ether, path);\\n\\n        uint256 amountAdjusted = amounts[1];\\n\\n        _minSupplyHolding = amountAdjusted;\\n    }\\n\\n    function _claim(address holder) internal {\\n        uint256 balanceNormalReflection = 0;\\n        if (isHolder(holder)){\\n            if (holderAddresses.length > 0 && normalReflectedToken > 0) {\\n                uint256 baseReflection = 0;\\n                if (_baseReflection[holder] > 0) {\\n                    baseReflection = _baseReflection[holder];\\n                }\\n                uint256 calculatePersonnalReflection = normalReflectedToken / holderAddresses.length;\\n                if (calculatePersonnalReflection > baseReflection) {\\n                    balanceNormalReflection = calculatePersonnalReflection - baseReflection;\\n                }\\n            }\\n        }\\n\\n        uint256 totalBalance = _balances[holder];\\n        if (balanceNormalReflection > 0) {\\n            totalBalance += balanceNormalReflection;\\n        }\\n        uint256 eventBalance = _eventReflection[holder];\\n        if (eventBalance > 0) {\\n            totalBalance += eventBalance;\\n        }\\n\\n        uint256 amountReflection = balanceNormalReflection + eventBalance;\\n        if (amountReflection > 0){\\n            _basicTransfer(address(this), holder, amountReflection);\\n            _historyReflectionTransfered[holder] = _historyReflectionTransfered[holder] + amountReflection;\\n            if (balanceNormalReflection > 0) {\\n                _baseReflection[holder] = _baseReflection[holder] + balanceNormalReflection;\\n                normalReflectedToken -= balanceNormalReflection;\\n            }\\n            _eventReflection[holder] = 0;\\n        }\\n    }\\n\\n    function _transferFrom(address sender, address recipient, uint256 amount) internal returns (bool) {\\n        require(!blacklists[recipient] && !blacklists[sender], \\\"Blacklisted\\\");\\n        require(amount > 0, \\\"Transfer amount must be greater than zero\\\");\\n        require(sender != DEAD && sender != ZERO, \\\"Please use a good address\\\");\\n\\n        if (inSwap) {\\n            return _basicTransfer(sender, recipient, amount);\\n        }\\n\\n        if (!enableTrading) {\\n            if (sender == owner() || sender == teamOracleFeeReceiver || sender == airDropAddress || sender == msAddress){\\n                emit LogInfo(\\\"bypass enableTrading\\\");\\n                return _basicTransfer(sender, recipient, amount);\\n            } else {\\n                revert(string(abi.encodePacked(\\\"Trading not enabled yet, please wait. Sender: \\\", addressToString(sender), \\\" Recipient: \\\", addressToString(recipient))));\\n            }\\n        } else {\\n            if (sender == owner() || sender == teamOracleFeeReceiver || sender == airDropAddress || sender == msAddress){\\n                return _basicTransfer(sender, recipient, amount);\\n            }\\n        }\\n\\n        if (_shouldSwapBack()) {\\n            _swapBack();\\n        }\\n\\n        if (!isReflectionExempt[sender]){\\n            _claim(sender);\\n        }\\n\\n        require(_balances[sender] >= amount, \\\"Insufficient Real Balance\\\");\\n        _balances[sender] = _balances[sender] - amount;\\n\\n        updateStateHolder(sender);\\n\\n        if (sender != UNISWAP_V2_PAIR) { // WHEN SELL\\n            _lastSell[sender] = block.timestamp;\\n        }\\n\\n        uint256 fees = _takeFees(sender, recipient, amount);\\n        uint256 amountWithoutFees = amount;\\n        if (fees > 0) {\\n            amountWithoutFees -= fees;\\n            _balances[address(this)] = _balances[address(this)] + fees;\\n            emit Transfer(sender, address(this), fees);\\n        }\\n\\n        _balances[recipient] = _balances[recipient] + amountWithoutFees;\\n        \\n        updateStateHolder(recipient);\\n\\n        if (sender == UNISWAP_V2_PAIR) { // WHEN BUY\\n            _lastBuy[recipient] = block.timestamp;\\n        }\\n\\n        emit Transfer(sender, recipient, amountWithoutFees);\\n        if (sender == UNISWAP_V2_PAIR || recipient == UNISWAP_V2_PAIR) { \\n            if (enableAutoAdjust) {\\n                adjustMinimumHolding();\\n            }\\n        }\\n        return true;\\n    }\\n\\n    function _basicTransfer(address sender, address recipient, uint256 amount) internal returns (bool) {\\n        require(_balances[sender] >= amount, \\\"Insufficient Balance\\\");\\n        _balances[sender] = _balances[sender] - amount;\\n        updateStateHolder(sender);\\n        _balances[recipient] = _balances[recipient] + amount;\\n        updateStateHolder(recipient);\\n        _lastBuy[recipient] = block.timestamp;\\n        emit Transfer(sender, recipient, amount);\\n        if (sender == UNISWAP_V2_PAIR || recipient == UNISWAP_V2_PAIR) { \\n            if (enableAutoAdjust) {\\n                adjustMinimumHolding();\\n            }\\n        }\\n        return true;\\n    }\\n\\n    function _takeFees(address sender, address recipient, uint256 amount) internal returns (uint256) {\\n        uint256 fees = 0;\\n        Fee memory __buyFee = buyFee;\\n        Fee memory __sellFee = sellFee;\\n        if(_shouldTakeFee(sender, recipient))\\n        {\\n            uint256 proportionReflected = 0;\\n            if (sender == UNISWAP_V2_PAIR) {\\n                fees = amount.mul(__buyFee.total).div(100);\\n                proportionReflected = fees.mul(__buyFee.reflection).div(__buyFee.total);\\n            } else {\\n                fees = amount.mul(__sellFee.total).div(100);\\n                proportionReflected = fees.mul(__sellFee.reflection).div(__sellFee.total);\\n            }\\n\\n            if (proportionReflected > 0) {\\n                totalReflections += proportionReflected;\\n                if (eventInProgress) {\\n                    eventReflectedToken += proportionReflected;\\n                } else {\\n                    normalReflectedToken += proportionReflected;\\n                }\\n                emit ReflectAccumulated(proportionReflected, totalReflections);\\n            }\\n        }\\n        return fees;\\n    }\\n\\n    function _checkBalanceForSwapping() internal view returns (bool) {\\n        uint256 totalBalance = _balances[address(this)];\\n        uint256 totatToSub = eventReflectedToken + normalReflectedToken + totalRemainder;\\n        if (totatToSub > totalBalance) {\\n            return false;\\n        }\\n        totalBalance -= totatToSub;\\n        return totalBalance >= _swapThreshold;\\n    }\\n\\n    function _shouldSwapBack() internal view returns (bool) {\\n        return msg.sender != UNISWAP_V2_PAIR && !inSwap && claimingFees && _checkBalanceForSwapping();\\n    }\\n\\n    function _swapBack() internal swapping {\\n        Fee memory __sellFee = sellFee;\\n\\n        uint256 __swapThreshold = _swapThreshold;\\n        uint256 amountToBurn = __swapThreshold * __sellFee.burn / __sellFee.total;\\n        uint256 amountToSwap = __swapThreshold - amountToBurn;\\n        approve(address(UNISWAP_V2_ROUTER), amountToSwap);\\n\\n        // burn\\n        if (amountToBurn > 0) {\\n            _basicTransfer(address(this), DEAD, amountToBurn);\\n        }\\n\\n        // swap\\n        address[] memory path = new address[](2);\\n        path[0] = address(this);\\n        path[1] = UNISWAP_V2_ROUTER.WETH();\\n\\n        UNISWAP_V2_ROUTER.swapExactTokensForETHSupportingFeeOnTransferTokens(\\n            amountToSwap, 0, path, address(this), block.timestamp\\n        );\\n\\n        uint256 amountETH = address(this).balance;\\n\\n        uint256 totalSwapFee = __sellFee.total - __sellFee.reflection - __sellFee.burn;\\n        uint256 amountETHTeamOracle = amountETH * __sellFee.teamOracle / totalSwapFee;\\n        uint256 amountETHLP = amountETH * __sellFee.lp / totalSwapFee;\\n\\n        // send\\n        if (amountETHTeamOracle > 0) {\\n            (bool tmpSuccess,) = payable(teamOracleFeeReceiver).call{value: amountETHTeamOracle}(\\\"\\\");\\n        }\\n        if (amountETHLP > 0) {\\n            (bool tmpSuccess,) = payable(lpFeeReceiver).call{value: amountETHLP}(\\\"\\\");\\n        }\\n    }\\n\\n    function _shouldTakeFee(address sender, address recipient) internal view returns (bool) {\\n        return !isFeeExempt[sender] && !isFeeExempt[recipient];\\n    }\\n\\n    function compareStrings(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n\\n    /* -------------------------------------------------------------------------- */\\n    /*                                   public                                   */\\n    /* -------------------------------------------------------------------------- */\\n\\n    function updateStateHolder(address holder) public {\\n        if (!isReflectionExempt[holder]){\\n            if (isHolder(holder)){\\n                if (_isHolder[holder] == false){\\n                    _isHolder[holder] = true;\\n                    _holdingTime[holder] = block.timestamp;\\n                    holderAddresses.push(holder);\\n                    _keyIndex[holder] = holderAddresses.length - 1;\\n                }\\n            } else {\\n                if (_isHolder[holder] == true){\\n                    _isHolder[holder] = false;\\n                    _holdingTime[holder] = 0;\\n                    _keyIndex[holderAddresses[holderAddresses.length - 1]] = _keyIndex[holder];\\n                    holderAddresses[_keyIndex[holder]] = holderAddresses[holderAddresses.length - 1];\\n                    holderAddresses.pop();\\n                }\\n            }\\n        }\\n    }\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\": {\r\n      \"content\": \"pragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Pair {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external pure returns (string memory);\\n    function symbol() external pure returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint amount0In,\\n        uint amount1In,\\n        uint amount0Out,\\n        uint amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\n    function factory() external view returns (address);\\n    function token0() external view returns (address);\\n    function token1() external view returns (address);\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n    function price0CumulativeLast() external view returns (uint);\\n    function price1CumulativeLast() external view returns (uint);\\n    function kLast() external view returns (uint);\\n\\n    function mint(address to) external returns (uint liquidity);\\n    function burn(address to) external returns (uint amount0, uint amount1);\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n    function skim(address to) external;\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\\n\"\r\n    },\r\n    \"@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol\": {\r\n      \"content\": \"pragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Factory {\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\\n\\n    function feeTo() external view returns (address);\\n    function feeToSetter() external view returns (address);\\n\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\n    function allPairs(uint) external view returns (address pair);\\n    function allPairsLength() external view returns (uint);\\n\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\n\\n    function setFeeTo(address) external;\\n    function setFeeToSetter(address) external;\\n}\\n\"\r\n    },\r\n    \"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\": {\r\n      \"content\": \"pragma solidity >=0.6.2;\\n\\nimport './IUniswapV2Router01.sol';\\n\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountETH);\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountETH);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable;\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol\": {\r\n      \"content\": \"pragma solidity >=0.6.2;\\n\\ninterface IUniswapV2Router01 {\\n    function factory() external pure returns (address);\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETH(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountToken, uint amountETH);\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountToken, uint amountETH);\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapTokensForExactTokens(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"evt\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountReflectionAccumulated\",\"type\":\"uint256\"}],\"name\":\"EventFinish\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"evt\",\"type\":\"string\"}],\"name\":\"EventStart\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMinimum\",\"type\":\"uint256\"}],\"name\":\"HolderMinimumChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"error\",\"type\":\"string\"}],\"name\":\"LogError\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"info\",\"type\":\"string\"}],\"name\":\"LogInfo\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"mode\",\"type\":\"string\"}],\"name\":\"ModeChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountAdded\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalAmountAccumulated\",\"type\":\"uint256\"}],\"name\":\"ReflectAccumulated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountDistributer\",\"type\":\"uint256\"}],\"name\":\"ReflectDistributed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"message\",\"type\":\"string\"}],\"name\":\"ReflectNotification\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"UNISWAP_V2_PAIR\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UNISWAP_V2_ROUTER\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_balances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_baseReflection\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_eventReflection\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_historyReflectionTransfered\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_holdingTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_isHolder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_keyIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_lastBuy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_lastSell\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_minSupplyHolding\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_swapThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"addressesParticipantEvent\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"airdrop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"recipients\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"airdropMultiple\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amplifyBuy\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"reflection\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"teamOracle\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"lp\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"burn\",\"type\":\"uint8\"},{\"internalType\":\"uint128\",\"name\":\"total\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amplifySell\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"reflection\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"teamOracle\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"lp\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"burn\",\"type\":\"uint8\"},{\"internalType\":\"uint128\",\"name\":\"total\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"approveMax\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isBlacklisting\",\"type\":\"bool\"}],\"name\":\"blacklist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"blacklists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyFee\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"reflection\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"teamOracle\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"lp\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"burn\",\"type\":\"uint8\"},{\"internalType\":\"uint128\",\"name\":\"total\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimingFees\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"clearStuckBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"clearStuckToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentTokenMode\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableAutoAdjust\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableTrading\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"eventHistory\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"eventInProgress\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"eventNameInProgress\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"eventReflectedToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"eventTokenAmountDistributedBatching\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getArrayHolder\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getArrayParticipant\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCirculatingSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentMode\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEventHistoryList\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEventTimeStart\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEventTimeStop\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getHighestReflectionEventName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getHighestReflectionEventTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getHighestReflectionEventValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holderAddress\",\"type\":\"address\"}],\"name\":\"getHolder\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"eventReflection\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"baseReflection\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"holdingTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastBuy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastSell\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"keyIndex\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isHolder\",\"type\":\"bool\"}],\"internalType\":\"struct Echoes.HolderInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getHolderEventReflection\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getHolderHistoryReflectionTransfered\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getHolderNormalReflection\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLastTimeGenesis\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLastTimeMode\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getModeHistoryList\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNextMode\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"growthBuy\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"reflection\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"teamOracle\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"lp\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"burn\",\"type\":\"uint8\"},{\"internalType\":\"uint128\",\"name\":\"total\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"growthSell\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"reflection\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"teamOracle\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"lp\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"burn\",\"type\":\"uint8\"},{\"internalType\":\"uint128\",\"name\":\"total\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"harmony\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"reflection\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"teamOracle\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"lp\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"burn\",\"type\":\"uint8\"},{\"internalType\":\"uint128\",\"name\":\"total\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"highestReflectionEventName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"highestReflectionEventTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"highestReflectionEventValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"holderAddresses\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isFeeExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holderAddress\",\"type\":\"address\"}],\"name\":\"isHolder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holderAddress\",\"type\":\"address\"}],\"name\":\"isHolderInArray\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isReflectionExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastTimeGenesis\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastTimeMode\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manualSwapBack\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"modeHistory\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextTokenMode\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"normalReflectedToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellFee\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"reflection\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"teamOracle\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"lp\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"burn\",\"type\":\"uint8\"},{\"internalType\":\"uint128\",\"name\":\"total\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sendAutoAjustHolding\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"sendRemainderTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"e_\",\"type\":\"bool\"}],\"name\":\"setEnableAutoAdjust\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ot_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"lp_\",\"type\":\"address\"}],\"name\":\"setFeeReceivers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"exempt\",\"type\":\"bool\"}],\"name\":\"setIsFeeExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"exempt\",\"type\":\"bool\"}],\"name\":\"setIsReflectionExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ad\",\"type\":\"address\"}],\"name\":\"setMSAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"h_\",\"type\":\"uint256\"}],\"name\":\"setMinSupplyHolding\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"modeName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"nextMode\",\"type\":\"string\"}],\"name\":\"setMode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_pt\",\"type\":\"uint256\"}],\"name\":\"setSwapBackSettings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"batchingParticipants\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"isLastCall\",\"type\":\"bool\"}],\"name\":\"shouldDistributeEventReflections\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"eventName\",\"type\":\"string\"},{\"internalType\":\"address[]\",\"name\":\"selectedAddresses\",\"type\":\"address[]\"}],\"name\":\"startEventName\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stopEvent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"switchNextMode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"timeEventStart\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"timeEventStop\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalReflections\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalRemainder\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"}],\"name\":\"updateStateHolder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "Echoes", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}