{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.19;\r\n\r\n\r\n\r\n\r\n\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapTokensForExactTokens(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n\r\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountETH);\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\n\r\ninterface IUniswapV2Factory {\r\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\r\n\r\n    function feeTo() external view returns (address);\r\n    function feeToSetter() external view returns (address);\r\n\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n    function allPairs(uint) external view returns (address pair);\r\n    function allPairsLength() external view returns (uint);\r\n\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n\r\n    function setFeeTo(address) external;\r\n    function setFeeToSetter(address) external;\r\n}\r\n\r\n\r\ninterface IUniswapV2Pair {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function name() external pure returns (string memory);\r\n    function symbol() external pure returns (string memory);\r\n    function decimals() external pure returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n    function nonces(address owner) external view returns (uint);\r\n\r\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n\r\n    event Mint(address indexed sender, uint amount0, uint amount1);\r\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\r\n    event Swap(\r\n        address indexed sender,\r\n        uint amount0In,\r\n        uint amount1In,\r\n        uint amount0Out,\r\n        uint amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\r\n    function factory() external view returns (address);\r\n    function token0() external view returns (address);\r\n    function token1() external view returns (address);\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n    function price0CumulativeLast() external view returns (uint);\r\n    function price1CumulativeLast() external view returns (uint);\r\n    function kLast() external view returns (uint);\r\n\r\n    function mint(address to) external returns (uint liquidity);\r\n    function burn(address to) external returns (uint amount0, uint amount1);\r\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\r\n    function skim(address to) external;\r\n    function sync() external;\r\n\r\n    function initialize(address, address) external;\r\n}\r\n\r\n\r\n\r\nabstract contract Auth {\r\n    address internal owner;\r\n    mapping(address => bool) internal authorizations;\r\n\r\n    constructor(address _owner) {\r\n        owner = _owner;\r\n        authorizations[_owner] = true;\r\n    }\r\n\r\n    /**\r\n     * Function modifier to require caller to be contract owner\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner(msg.sender), \"!OWNER\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * Function modifier to require caller to be authorized\r\n     */\r\n    modifier authorized() {\r\n        require(isAuthorized(msg.sender), \"!AUTHORIZED\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * Authorize address. Owner only\r\n     */\r\n    function authorize(address adr) public onlyOwner {\r\n        authorizations[adr] = true;\r\n    }\r\n\r\n    /**\r\n     * Remove address' authorization. Owner only\r\n     */\r\n    function unauthorize(address adr) public onlyOwner {\r\n        authorizations[adr] = false;\r\n    }\r\n\r\n    /**\r\n     * Check if address is owner\r\n     */\r\n    function isOwner(address account) public view returns (bool) {\r\n        return account == owner;\r\n    }\r\n\r\n    /**\r\n     * Return address' authorization status\r\n     */\r\n    function isAuthorized(address adr) public view returns (bool) {\r\n        return authorizations[adr];\r\n    }\r\n\r\n    /**\r\n     * Transfer ownership to new address. Caller must be owner. Leaves old owner authorized\r\n     */\r\n    function transferOwnership(address payable adr) public onlyOwner {\r\n        owner = adr;\r\n        authorizations[adr] = true;\r\n        emit OwnershipTransferred(adr);\r\n    }\r\n\r\n    event OwnershipTransferred(address owner);\r\n}\r\n\r\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\r\n\r\n\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n}\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\r\n\r\n\r\n\r\n// CAUTION\r\n// This version of SafeMath should only be used with Solidity 0.8 or later,\r\n// because it relies on the compiler's built in overflow checks.\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations.\r\n *\r\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\r\n * now has built in overflow checking.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            uint256 c = a + b;\r\n            if (c < a) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b > a) return (false, 0);\r\n            return (true, a - b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n            // benefit is lost if 'b' is also tested.\r\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n            if (a == 0) return (true, 0);\r\n            uint256 c = a * b;\r\n            if (c / a != b) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a / b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a % b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a + b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a * b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a % b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {trySub}.\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b <= a, errorMessage);\r\n            return a - b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a / b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting with custom message when dividing by zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryMod}.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a % b;\r\n        }\r\n    }\r\n}\r\n\r\n\r\ncontract SHIBA is IERC20, Auth {\r\n    using SafeMath for uint256;\r\n\r\n    address private constant DEAD = address(0xdead);\r\n    address private constant ZERO = address(0);\r\n    address private devAddress = address(0xcECD9E887C94B33211d03835B056D5C181f55c6E);\r\n    address private treasuryAddress = address(0xcECD9E887C94B33211d03835B056D5C181f55c6E);\r\n    address private marketingAddress = address(0xcECD9E887C94B33211d03835B056D5C181f55c6E);\r\n    address private liquidityAddress = address(0xcECD9E887C94B33211d03835B056D5C181f55c6E);\r\n    /**\r\n     * Token Assets\r\n     * name, symbol, _decimals totalSupply\r\n     * This will be defined when we deploy the contract.\r\n     */\r\n    string private _name = \"Shiba\";\r\n    string private _symbol = \"SHIBA\";\r\n    uint8 private _decimals = 18;\r\n    uint256 private _totalSupply = 1_000_000_000 * (10 ** _decimals);  // 1 billion\r\n\r\n    mapping(address => uint256) private _balances;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    bool public enableTrading = false;\r\n    uint256 public maxBalance = _totalSupply * 2 / 100; // 2%\r\n    uint256 public maxTx = _totalSupply * 2 / 100;  // 2%\r\n    uint256 public swapThreshold = (_totalSupply * 2) / 10000;  // 0.02%\r\n\r\n    uint256 _buyMarketingFee = 20;\r\n    uint256 _buyLiquidityFee = 0;\r\n    uint256 _buyReflectionFee = 0;\r\n    uint256 _buyTreasuryFee = 0;\r\n\r\n    uint256 _sellMarketingFee = 40;\r\n    uint256 _sellLiquidityFee = 0;\r\n    uint256 _sellReflectionFee = 0;\r\n    uint256 _sellTreasuryFee = 0;\r\n    /**\r\n     * Mode & Fee\r\n     * mode1(BuyTax: treasury=2%, reflection=3%, SellTax: treasury=2%, reflection=3%)\r\n     * mode2(BuyTax: 0, SellTax: treasury=2%, reflection=2%, luck holder reward=2%)\r\n     * mode3(BuyTax: auto burn supply=1%, reflections to all top 150 holders=3%, \r\n     *       SellTax: treasury=2%, reflection=3%)\r\n     * mode4(BuyTax: 0, SellTax: 0)\r\n     */\r\n    uint8 public mode = 0;  // current mode\r\n    bool public isAutoMode = false;\r\n    uint256 public modeStartTime = 0;\r\n    uint256 public modePeriod = 3 hours;\r\n    struct Fee {\r\n        uint8 treasury;\r\n        uint8 reflection;\r\n        uint8 lucky;\r\n        uint8 burn;\r\n        uint8 total;\r\n    }\r\n    // mode == 0: pre fees\r\n    // Mode 1\r\n    Fee public mode1BuyTax = Fee({treasury: 2, reflection: 3, lucky: 0, burn: 0, total: 5});\r\n    Fee public mode1SellTax = Fee({treasury: 2, reflection: 3, lucky: 0, burn: 0, total: 5});\r\n    // Mode 2\r\n    Fee public mode2BuyTax = Fee({treasury: 0, reflection: 0, lucky: 0, burn: 0, total: 0});\r\n    Fee public mode2SellTax = Fee({treasury: 2, reflection: 2, lucky: 2, burn: 0, total: 6});\r\n    // Mode 3\r\n    Fee public mode3BuyTax = Fee({treasury: 0, reflection: 3, lucky: 0, burn: 1, total: 4});\r\n    Fee public mode3SellTax = Fee({treasury: 2, reflection: 3, lucky: 0, burn: 0, total: 5});\r\n    // Mode 4\r\n    Fee public mode4BuyTax = Fee({treasury: 0, reflection: 0, lucky: 0, burn: 0, total: 0});\r\n    Fee public mode4SellTax = Fee({treasury: 0, reflection: 0, lucky: 0, burn: 0, total: 0});\r\n\r\n    Fee public buyTax;\r\n    Fee public sellTax;\r\n\r\n    IUniswapV2Router02 public UNISWAP_V2_ROUTER;\r\n    address public UNISWAP_V2_PAIR;\r\n\r\n    mapping(address => bool) public isFeeExempt;\r\n    mapping(address => bool) public isReflectionExempt;\r\n\r\n    mapping(address => bool) public isHolder;\r\n    address[] public holders;\r\n    uint256 public totalReflectionAmount;\r\n    uint256 public topHolderReflectionAmount;\r\n\r\n    // events\r\n    event UpdateMode(uint8 mode);\r\n    event Reflection(uint256 amountAdded, uint256 totalAmountAccumulated);\r\n    event LuckyReward(address holder, uint256 amount);\r\n    event ChangeTradingStatus(bool status);\r\n\r\n    bool inSwap;\r\n    modifier swapping() {\r\n        inSwap = true;\r\n        _;\r\n        inSwap = false;\r\n    }\r\n\r\n    constructor () Auth(msg.sender) {\r\n        UNISWAP_V2_ROUTER = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n        UNISWAP_V2_PAIR = IUniswapV2Factory(UNISWAP_V2_ROUTER.factory()).createPair(address(this), UNISWAP_V2_ROUTER.WETH());\r\n        _allowances[address(this)][address(UNISWAP_V2_ROUTER)] = _totalSupply;\r\n        _allowances[address(this)][address(UNISWAP_V2_PAIR)] = _totalSupply;\r\n        _allowances[address(this)][msg.sender] = _totalSupply;\r\n\r\n        isFeeExempt[msg.sender] = true;\r\n        isFeeExempt[devAddress] = true;\r\n        isFeeExempt[treasuryAddress] = true;\r\n        isFeeExempt[marketingAddress] = true;\r\n        isFeeExempt[liquidityAddress] = true;\r\n        isFeeExempt[ZERO] = true;\r\n        isFeeExempt[DEAD] = true;\r\n\r\n        isReflectionExempt[address(this)] = true;\r\n        isReflectionExempt[address(UNISWAP_V2_ROUTER)] = true;\r\n        isReflectionExempt[UNISWAP_V2_PAIR] = true;\r\n        isReflectionExempt[msg.sender] = true;\r\n        // isReflectionExempt[devAddress] = true;\r\n        // isReflectionExempt[treasuryAddress] = true;\r\n        // isReflectionExempt[marketingAddress] = true;\r\n        // isReflectionExempt[liquidityAddress] = true;\r\n        isReflectionExempt[ZERO] = true;\r\n        isReflectionExempt[DEAD] = true;\r\n\r\n        buyTax = mode1BuyTax;\r\n        sellTax = mode1SellTax;\r\n\r\n        uint256 devAmount = _totalSupply * 5 / 100;\r\n        _balances[devAddress] = devAmount;\r\n        emit Transfer(address(0), devAddress, devAmount);\r\n        isHolder[devAddress] = true;\r\n        holders.push(devAddress);\r\n\r\n        uint256 circulationAmount = _totalSupply - devAmount;\r\n        _balances[msg.sender] = circulationAmount;\r\n        emit Transfer(address(0), msg.sender, circulationAmount);\r\n        isHolder[msg.sender] = true;\r\n        holders.push(msg.sender);\r\n    }\r\n\r\n    receive() external payable {}\r\n    /**\r\n     * ERC20 Standard methods with override\r\n     */\r\n    function totalSupply() external view override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function decimals() external view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function symbol() external view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function name() external view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        uint256 totalBalance = _balances[account];\r\n        if (!isReflectionExempt[account] && totalReflectionAmount > 0 && holders.length > 2) {\r\n            totalBalance += totalBalance / holders.length;\r\n        }\r\n        return totalBalance;\r\n    }\r\n\r\n    function allowance(address holder, address spender) external view override returns (uint256) {\r\n        return _allowances[holder][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _allowances[msg.sender][spender] = amount;\r\n        emit Approval(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function approveMax(address spender) external returns (bool) {\r\n        return approve(spender, _totalSupply);\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) external override returns (bool) {\r\n        return _transferFrom(msg.sender, recipient, amount);\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool) {\r\n        if (_allowances[sender][msg.sender] != type(uint256).max) {\r\n            require(_allowances[sender][msg.sender] >= amount, \"ERC20: insufficient allowance\");\r\n            _allowances[sender][msg.sender] = _allowances[sender][msg.sender] - amount;\r\n        }\r\n\r\n        return _transferFrom(sender, recipient, amount);\r\n    }\r\n\r\n    function _transferFrom(address sender, address recipient, uint256 amount) internal returns (bool) {\r\n        _checkBuySell(sender, recipient);\r\n        _checkLimitations(recipient, amount);\r\n        if (inSwap) {\r\n            return _basicTransfer(sender, recipient, amount);\r\n        }\r\n        if (_shouldSwapBack()) {\r\n            _swapBack();\r\n        }\r\n        if (!isReflectionExempt[sender]){\r\n            _claim(sender);\r\n        }\r\n        _balances[sender] = _balances[sender].sub(amount, \"Insufficient Balance\");\r\n        _updateHolders(sender);\r\n        uint256 amountReceived = _shouldTakeFee(sender, recipient) ? _takeFees(sender, amount) : amount;\r\n        _balances[recipient] = _balances[recipient].add(amountReceived);\r\n        _updateHolders(recipient);\r\n\r\n        if (isAutoMode) {\r\n            autoUpdateMode();\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    function _basicTransfer(address sender, address receiver, uint256 amount) internal returns (bool) {\r\n        _balances[sender] = _balances[sender].sub(amount, \"Insufficient Balance\");\r\n        _updateHolders(sender);\r\n        _balances[receiver] = _balances[receiver].add(amount);\r\n        _updateHolders(receiver);\r\n        return true;\r\n    }\r\n\r\n    function getRandomHolderIndex(uint256 _numToFetch, uint256 _i) internal view returns (uint256) {\r\n        uint256 randomNum = uint256(\r\n            keccak256(\r\n                abi.encode(\r\n                    msg.sender,\r\n                    tx.gasprice,\r\n                    block.number,\r\n                    block.timestamp,\r\n                    blockhash(block.number - 1),\r\n                    _numToFetch,\r\n                    _i\r\n                )\r\n            )\r\n        );\r\n        uint256 randomIndex = (randomNum % holders.length);\r\n        return randomIndex;\r\n    }\r\n\r\n    function _takePreFees(address sender, uint256 amount) internal returns (uint256) {\r\n        uint256 _marketingFee = _sellMarketingFee;\r\n        uint256 _liquidityFee = _sellLiquidityFee;\r\n        uint256 _reflectionFee = _sellReflectionFee;\r\n        uint256 _treasuryFee = _sellTreasuryFee;\r\n        if (sender == UNISWAP_V2_PAIR) {\r\n            _marketingFee = _buyMarketingFee;\r\n            _liquidityFee = _buyLiquidityFee;\r\n            _reflectionFee = _buyReflectionFee;\r\n            _treasuryFee = _buyTreasuryFee;\r\n        }\r\n        uint256 _marketingFeeAmount = 0;\r\n        uint256 _liquidityFeeAmount = 0;\r\n        uint256 _reflectionFeeAmount = 0;\r\n        uint256 _treasuryFeeAmount = 0;\r\n        if (_marketingFee > 0) {\r\n            _marketingFeeAmount = amount * _marketingFee / 100;\r\n            _balances[marketingAddress] += _marketingFeeAmount;\r\n            emit Transfer(address(this), treasuryAddress, _treasuryFeeAmount);\r\n        }\r\n        if (_reflectionFee > 0) {\r\n            _reflectionFeeAmount = amount * _reflectionFee / 100;\r\n            totalReflectionAmount += _reflectionFeeAmount;\r\n            emit Reflection(_reflectionFeeAmount, totalReflectionAmount);\r\n        }\r\n        if (_treasuryFee > 0) {\r\n            _treasuryFeeAmount = amount * _treasuryFee / 100;\r\n            _balances[treasuryAddress] += _treasuryFeeAmount;\r\n            emit Transfer(address(this), treasuryAddress, _treasuryFeeAmount);\r\n        }\r\n        if (_liquidityFee > 0) {\r\n            _liquidityFeeAmount = amount * _liquidityFee / 100;\r\n            _balances[address(this)] += _liquidityFeeAmount;\r\n        }\r\n        uint256 _totalFeeAmount = _marketingFeeAmount + _liquidityFeeAmount + _reflectionFeeAmount + _treasuryFeeAmount;\r\n        return amount.sub(_totalFeeAmount);\r\n    }\r\n\r\n    function _takeModeFees(address sender, uint256 amount) internal returns (uint256) {\r\n        Fee memory _feeTax = sellTax;\r\n        bool _topReflection = false;\r\n        if (sender == UNISWAP_V2_PAIR) {\r\n            _feeTax = buyTax;\r\n            if (mode == 3) {\r\n                _topReflection = true;\r\n            }\r\n        }\r\n        uint256 feeAmount = amount * _feeTax.total / 100;\r\n        if (_feeTax.treasury > 0) {\r\n            uint256 _treasuryFeeAmount = feeAmount * _feeTax.treasury / _feeTax.total;\r\n            _balances[treasuryAddress] += _treasuryFeeAmount;\r\n            emit Transfer(address(this), treasuryAddress, _treasuryFeeAmount);\r\n        }\r\n        if (_feeTax.reflection > 0) {\r\n            uint256 _reflectionFeeAmount = feeAmount * _feeTax.reflection / _feeTax.total;\r\n            if (_topReflection) {\r\n                _topHolderReflection(_reflectionFeeAmount);\r\n            } else {\r\n                totalReflectionAmount += _reflectionFeeAmount;\r\n                emit Reflection(_reflectionFeeAmount, totalReflectionAmount);\r\n            }\r\n        }\r\n        if (_feeTax.lucky > 0) {\r\n            uint256 _luckyFeeAmount = feeAmount * _feeTax.lucky / _feeTax.total;\r\n            _luckyReward(_luckyFeeAmount);\r\n        }\r\n        if (_feeTax.burn > 0) {\r\n            uint256 _burnFeeAmount = feeAmount * _feeTax.burn / _feeTax.total;\r\n            _balances[DEAD] += _burnFeeAmount;\r\n            emit Transfer(address(this), DEAD, _burnFeeAmount);\r\n        }\r\n\r\n        return amount.sub(feeAmount);\r\n    }\r\n\r\n    function _takeFees(address sender, uint256 amount) internal returns (uint256) {\r\n        if (mode > 0) {\r\n            return _takeModeFees(sender, amount);\r\n        } else {\r\n            return _takePreFees(sender, amount);\r\n        }\r\n    }\r\n\r\n    function _shouldTakeFee(address sender, address recipient) internal view returns (bool) {\r\n        return !isFeeExempt[sender] && !isFeeExempt[recipient];\r\n    }\r\n\r\n    function _checkBuySell(address sender, address recipient) internal view {\r\n        if (!enableTrading) {\r\n            require(sender != UNISWAP_V2_PAIR && recipient != UNISWAP_V2_PAIR, \"Trading is disabled!\");\r\n        }\r\n    }\r\n\r\n    function _checkLimitations(address recipient, uint256 amount) internal view {\r\n        if (recipient != UNISWAP_V2_PAIR) {\r\n            require(amount <= maxTx, \"Max transaction amount is limited!\");\r\n            uint256 suggestBalance = balanceOf(recipient) + amount;\r\n            require(suggestBalance <= maxBalance, \"Max balance is limited!\");\r\n        }\r\n    }\r\n\r\n    function _luckyReward(uint256 amount) internal {\r\n        uint256 randomIndex = getRandomHolderIndex(1, 1);\r\n        address luckyHolder = holders[randomIndex];\r\n        if (\r\n            luckyHolder != ZERO && \r\n            luckyHolder != DEAD && \r\n            luckyHolder != address(UNISWAP_V2_ROUTER) && \r\n            luckyHolder != UNISWAP_V2_PAIR\r\n        ) {\r\n            _balances[luckyHolder] += amount;\r\n            emit Transfer(address(this), luckyHolder, amount);\r\n        }\r\n    }\r\n\r\n    function _topHolderReflection(uint256 amount) internal {\r\n        topHolderReflectionAmount += amount;\r\n    }\r\n    \r\n    function _updateHolders(address holder) internal {\r\n        uint256 balance = balanceOf(holder);\r\n        if (balance > 0) {\r\n            if (!isHolder[holder]) {\r\n                isHolder[holder] = true;\r\n                holders.push(holder);\r\n            }\r\n        } else {\r\n            if (isHolder[holder]) {\r\n                isHolder[holder] = false;\r\n                for(uint256 i = 0; i < holders.length - 1; i++) {\r\n                    if (holders[i] == holder) {\r\n                        holders[i] = holders[holders.length - 1];\r\n                    }\r\n                }\r\n                holders.pop();\r\n            }\r\n        }\r\n    }\r\n\r\n    function _claim(address holder) internal {\r\n        if (totalReflectionAmount > 0) {\r\n            uint256 oneReflection = totalReflectionAmount / holders.length;\r\n            totalReflectionAmount -= oneReflection;\r\n            _balances[holder] += oneReflection;\r\n        }\r\n    }\r\n\r\n    function _shouldSwapBack() internal view returns (bool) {\r\n        return msg.sender != UNISWAP_V2_PAIR && !inSwap && balanceOf(address(this)) >= swapThreshold;\r\n    }\r\n\r\n    function _swapBack() internal swapping {\r\n        uint256 amountToSwap = balanceOf(address(this));\r\n        approve(address(UNISWAP_V2_ROUTER), amountToSwap);\r\n        // swap\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = UNISWAP_V2_ROUTER.WETH();\r\n        UNISWAP_V2_ROUTER.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            amountToSwap, 0, path, address(this), block.timestamp\r\n        );\r\n        uint256 amountETH = address(this).balance;\r\n        // (bool tmpSuccess,) = payable(liquidityAddress).call{value: amountETH}(\"\");\r\n        payable(liquidityAddress).transfer(amountETH);\r\n    }\r\n\r\n    function _changeMode(uint8 mode_) internal {\r\n        if (mode_ == 2) {\r\n            buyTax = mode2BuyTax;\r\n            sellTax = mode2SellTax;\r\n        } else if (mode_ == 3) {\r\n            buyTax = mode3BuyTax;\r\n            sellTax = mode3SellTax;\r\n        } else if (mode_ == 4) {\r\n            buyTax = mode4BuyTax;\r\n            sellTax = mode4SellTax;\r\n        } else {\r\n            buyTax = mode1BuyTax;\r\n            sellTax = mode1SellTax;\r\n        }\r\n        mode = mode_;\r\n        emit UpdateMode(mode_);\r\n    }\r\n\r\n    function autoUpdateMode() internal {\r\n        uint8 _currentMode = mode;\r\n        if (_currentMode == 0) {\r\n            return;\r\n        }\r\n        uint256 deltaTime = block.timestamp - modeStartTime;\r\n        if (deltaTime < modePeriod) {\r\n            return;\r\n        }\r\n        _currentMode = (_currentMode + 1) % 4;\r\n        if (_currentMode == 0) {\r\n            _currentMode = 1;\r\n        }\r\n        modeStartTime = block.timestamp;\r\n        _changeMode(_currentMode);\r\n    }\r\n\r\n    function manualUpdateMode(uint8 mode_) external authorized {\r\n        require(mode_ < 5, \"Undefined Mode\");\r\n        _changeMode(mode_);\r\n    }\r\n\r\n    function setAutoMode(bool isAuto_) external authorized {\r\n        isAutoMode = isAuto_;\r\n    }\r\n\r\n    function rewardTopHolders(address[] calldata _topHolders) public authorized {\r\n        require(topHolderReflectionAmount > 0, \"Reward should be available\");\r\n        uint256 oneReward = topHolderReflectionAmount / _topHolders.length;\r\n        topHolderReflectionAmount = 0;\r\n        for (uint8 i = 0; i < _topHolders.length; i++) {\r\n            _balances[_topHolders[i]] += oneReward;\r\n            emit Transfer(address(this), _topHolders[i], oneReward);\r\n        }\r\n    }\r\n\r\n    function setFeeReceivers(address treasury_) external authorized {\r\n        treasuryAddress = treasury_;\r\n    }\r\n\r\n    function setIsFeeExempt(address holder, bool exempt) external authorized {\r\n        isFeeExempt[holder] = exempt;\r\n    }\r\n\r\n    function setIsReflectionExempt(address holder, bool exempt) external authorized {\r\n        isReflectionExempt[holder] = exempt;\r\n    }\r\n\r\n    function changeTradingStatus(bool _status) external authorized {\r\n        enableTrading = _status;\r\n        emit ChangeTradingStatus(_status);\r\n    }\r\n\r\n    function updatePreFees(\r\n        uint256 buyMarketingFee_,\r\n        uint256 buyLiquidityFee_,\r\n        uint256 buyReflectionFee_,\r\n        uint256 buyTreasuryFee_,\r\n        uint256 sellMarketingFee_,\r\n        uint256 sellLiquidityFee_,\r\n        uint256 sellReflectionFee_,\r\n        uint256 sellTreasuryFee_\r\n    ) external authorized {\r\n        _buyMarketingFee = buyMarketingFee_;\r\n        _buyLiquidityFee = buyLiquidityFee_;\r\n        _buyReflectionFee = buyReflectionFee_;\r\n        _buyTreasuryFee = buyTreasuryFee_;\r\n\r\n        _sellMarketingFee = sellMarketingFee_;\r\n        _sellLiquidityFee = sellLiquidityFee_;\r\n        _sellReflectionFee = sellReflectionFee_;\r\n        _sellTreasuryFee = sellTreasuryFee_;\r\n    }\r\n\r\n    function updateSwapThreshold(uint256 _swapThreshold) external authorized {\r\n        swapThreshold = _swapThreshold;\r\n    }\r\n\r\n    function manualSwapBack() external authorized {\r\n        if (_shouldSwapBack()) {\r\n            _swapBack();\r\n        }\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"ChangeTradingStatus\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LuckyReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountAdded\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalAmountAccumulated\",\"type\":\"uint256\"}],\"name\":\"Reflection\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"mode\",\"type\":\"uint8\"}],\"name\":\"UpdateMode\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"UNISWAP_V2_PAIR\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UNISWAP_V2_ROUTER\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"approveMax\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"authorize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyTax\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"treasury\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"reflection\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"lucky\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"burn\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"total\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"changeTradingStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableTrading\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"holders\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"isAuthorized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isAutoMode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isFeeExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isHolder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isReflectionExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manualSwapBack\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"mode_\",\"type\":\"uint8\"}],\"name\":\"manualUpdateMode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTx\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mode\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mode1BuyTax\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"treasury\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"reflection\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"lucky\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"burn\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"total\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mode1SellTax\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"treasury\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"reflection\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"lucky\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"burn\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"total\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mode2BuyTax\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"treasury\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"reflection\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"lucky\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"burn\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"total\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mode2SellTax\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"treasury\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"reflection\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"lucky\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"burn\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"total\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mode3BuyTax\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"treasury\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"reflection\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"lucky\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"burn\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"total\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mode3SellTax\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"treasury\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"reflection\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"lucky\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"burn\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"total\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mode4BuyTax\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"treasury\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"reflection\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"lucky\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"burn\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"total\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mode4SellTax\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"treasury\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"reflection\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"lucky\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"burn\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"total\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"modePeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"modeStartTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_topHolders\",\"type\":\"address[]\"}],\"name\":\"rewardTopHolders\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellTax\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"treasury\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"reflection\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"lucky\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"burn\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"total\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"isAuto_\",\"type\":\"bool\"}],\"name\":\"setAutoMode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"treasury_\",\"type\":\"address\"}],\"name\":\"setFeeReceivers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"exempt\",\"type\":\"bool\"}],\"name\":\"setIsFeeExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"exempt\",\"type\":\"bool\"}],\"name\":\"setIsReflectionExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"topHolderReflectionAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalReflectionAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"unauthorize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"buyMarketingFee_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buyLiquidityFee_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buyReflectionFee_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buyTreasuryFee_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sellMarketingFee_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sellLiquidityFee_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sellReflectionFee_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sellTreasuryFee_\",\"type\":\"uint256\"}],\"name\":\"updatePreFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_swapThreshold\",\"type\":\"uint256\"}],\"name\":\"updateSwapThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "SHIBA", "CompilerVersion": "v0.8.21+commit.d9974bed", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://17345a9b99b32d523635fff9d719843d0ba1c9376e190f13019d76aa8924c161"}