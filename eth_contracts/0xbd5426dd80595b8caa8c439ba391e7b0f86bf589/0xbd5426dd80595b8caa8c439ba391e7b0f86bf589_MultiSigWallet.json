{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.20;\r\n\r\ncontract MultiSigWallet {\r\n    event Deposit(address indexed sender, uint amount, uint balance);\r\n    event SubmitTransaction(\r\n        address indexed owner,\r\n        uint indexed txIndex,\r\n        address indexed to,\r\n        uint value,\r\n        uint func,\r\n        bytes data\r\n    );\r\n    event ConfirmTransaction(address indexed owner, uint indexed txIndex);\r\n    event RevokeConfirmation(address indexed owner, uint indexed txIndex);\r\n    event ExecuteTransaction(address indexed owner, uint indexed txIndex);\r\n    event OwnerAddition(address indexed owner);\r\n    event OwnerRemoval(address indexed owner);\r\n    event ChangeRequiredConfirmations(uint requiredConfirmations);\r\n\r\n    address[] public owners;\r\n    mapping(address => bool) public isOwner;\r\n    uint public requiredConfirmations;\r\n\r\n    // Define transaction structure\r\n    // func: is number to identify function to call\r\n    //   1xx: internal function\r\n    //       101: addOwner\r\n    //       102: removeOwner\r\n    //       103: changeRequiredConfirmations\r\n    //   2xx: external function \r\n    struct Transaction{\r\n        address to;\r\n        uint value;\r\n        uint func;\r\n        bytes data;\r\n        bool executed;\r\n        uint confirmations;\r\n    }\r\n    mapping(uint => mapping(address=>bool)) public isConfirmed;\r\n    Transaction[] public transactions;\r\n\r\n    //****************************\r\n    modifier onlyWallet() {\r\n        require(msg.sender != address(this), \"invalid owner\");\r\n        _;\r\n    }\r\n\r\n    modifier  onlyOwner() {\r\n        require(isOwner[msg.sender], \"not owner\");\r\n        _;\r\n    }\r\n\r\n    modifier txExists(uint _txIndex) {\r\n        require(_txIndex < transactions.length, \"tx does not exists\");\r\n        _;\r\n    }\r\n\r\n    modifier notExecuted(uint _txIndex) {\r\n        require(!transactions[_txIndex].executed,\"tx already executed\");\r\n        _;\r\n    }\r\n\r\n    modifier notConfirmed(uint _txIndex) {\r\n        require(!isConfirmed[_txIndex][msg.sender],\"tx already confirmed\");\r\n        _;\r\n    }\r\n\r\n    //*********************************\r\n    constructor(address[] memory _owners, uint _requiredConfirmations){\r\n        require(_owners.length >0,\"owners required\");\r\n        require(\r\n            _requiredConfirmations >0 &&\r\n            _requiredConfirmations <= _owners.length,\r\n            \"Invalid number of required confirmations\"\r\n        );\r\n\r\n        for(uint i=0; i<_owners.length; i++){\r\n            address owner = _owners[i];\r\n            require(owner != address(0),\"Invalid owner\");\r\n            require(!isOwner[owner],\"owner not unique\");\r\n\r\n            isOwner[owner] = true;\r\n            owners.push(owner);\r\n        }\r\n        requiredConfirmations = _requiredConfirmations;\r\n    }\r\n\r\n    fallback() external payable { \r\n        if(msg.value >0){\r\n            emit Deposit(msg.sender, msg.value, address(this).balance);\r\n        }\r\n    }\r\n    receive() external payable { \r\n        emit Deposit(msg.sender, msg.value, address(this).balance);\r\n    }\r\n\r\n    //func: 101\r\n    function addOwner(address _owner)\r\n        public\r\n        onlyOwner\r\n    {\r\n        require(!isOwner[_owner],\"owner already exists\");\r\n        submitTransaction(_owner, 0, 101, bytes(\"\"));\r\n    }\r\n\r\n    function _executeAddOwner(address _owner) internal {\r\n        isOwner[_owner] = true;\r\n        owners.push(_owner);\r\n        emit OwnerAddition(_owner);\r\n    }\r\n\r\n    //func: 102\r\n    function removeOwner(address _owner) \r\n        public\r\n        onlyOwner\r\n    {\r\n        require(isOwner[_owner],\"owner not exists\");\r\n        submitTransaction(_owner, 0, 102, bytes(\"\"));\r\n    }\r\n\r\n    function _executeRemoveOwner(address _owner) internal {\r\n        isOwner[_owner] = false;\r\n        for (uint i=0; i<owners.length - 1; i++){\r\n            if (owners[i] == _owner) {\r\n                owners[i] = owners[owners.length - 1];\r\n                break;\r\n            }\r\n        }\r\n        owners.pop();\r\n        if (requiredConfirmations > owners.length)\r\n            _executeChangeRequiredConfirmations(owners.length);\r\n        \r\n        emit OwnerRemoval(_owner);\r\n    }\r\n\r\n    //func: 103\r\n    function changeRequiredConfirmations(uint _requiredConfirmations) public onlyOwner{\r\n        require(\r\n            _requiredConfirmations >0 &&\r\n            _requiredConfirmations <= owners.length,\r\n            \"Invalid number of required confirmations\"\r\n        );\r\n\r\n        submitTransaction(msg.sender, _requiredConfirmations, 103, bytes(\"\"));\r\n    }\r\n\r\n    function _executeChangeRequiredConfirmations(uint _requiredConfirmations) internal {\r\n        requiredConfirmations = _requiredConfirmations;\r\n        emit ChangeRequiredConfirmations(_requiredConfirmations);\r\n    }\r\n\r\n\r\n    function submitTransaction(\r\n        address _to,\r\n        uint _value,\r\n        uint _func,\r\n        bytes memory _data\r\n    ) public onlyOwner{\r\n        \r\n        //require func >0\r\n        require(_func >0,\"invalid func\");\r\n        uint txIndex = transactions.length;\r\n        transactions.push(\r\n            Transaction({\r\n                to:_to,\r\n                value:_value,\r\n                func: _func,\r\n                data: _data,\r\n                executed: false,\r\n                confirmations:0\r\n            })\r\n        );\r\n\r\n        emit SubmitTransaction(msg.sender, txIndex, _to, _value, _func, _data);\r\n    }\r\n\r\n    function confirmTransaction(\r\n        uint _txIndex\r\n    ) public onlyOwner txExists(_txIndex) notExecuted(_txIndex) notConfirmed(_txIndex) {\r\n        Transaction storage transaction = transactions[_txIndex];\r\n        transaction.confirmations += 1;\r\n        isConfirmed[_txIndex][msg.sender] = true;\r\n\r\n        emit ConfirmTransaction(msg.sender, _txIndex);\r\n    }\r\n\r\n    function executeTransaction(\r\n        uint _txIndex\r\n    ) public onlyOwner txExists(_txIndex) notExecuted(_txIndex) {\r\n        Transaction storage transaction = transactions[_txIndex];\r\n\r\n        require(\r\n            transaction.confirmations >= requiredConfirmations,\r\n            \"cannot execute tx\"\r\n        );\r\n        transaction.executed = true;\r\n        if(transaction.func >= 200){\r\n            _executeExternalTransaction(_txIndex);\r\n        }\r\n\r\n        if(transaction.func == 101){\r\n            _executeAddOwner(transaction.to);\r\n        }\r\n        if(transaction.func == 102){\r\n            _executeRemoveOwner(transaction.to);\r\n        }\r\n        if(transaction.func == 103){\r\n            _executeChangeRequiredConfirmations(transaction.value);\r\n        }\r\n        \r\n    }\r\n\r\n    function _executeExternalTransaction(uint _txIndex) internal{\r\n        Transaction storage transaction = transactions[_txIndex];\r\n\r\n        \r\n        (bool success, ) = transaction.to.call{value: transaction.value}(\r\n            transaction.data\r\n        );\r\n        require(success, \"tx failed\");\r\n\r\n        emit ExecuteTransaction(msg.sender, _txIndex);\r\n    }\r\n\r\n    function revokeConfirmation(\r\n        uint _txIndex\r\n    ) public onlyOwner txExists(_txIndex) notExecuted(_txIndex) {\r\n        Transaction storage transaction = transactions[_txIndex];\r\n\r\n        require(isConfirmed[_txIndex][msg.sender], \"tx not confirmed\");\r\n\r\n        transaction.confirmations -= 1;\r\n        isConfirmed[_txIndex][msg.sender] = false;\r\n\r\n        emit RevokeConfirmation(msg.sender, _txIndex);\r\n    }\r\n\r\n    function getOwners() public view returns (address[] memory) {\r\n        return owners;\r\n    }\r\n    function getTransactionCount() public view returns (uint) {\r\n        return transactions.length;\r\n    }\r\n    function getTransaction(\r\n        uint _txIndex\r\n    )\r\n        public\r\n        view\r\n        returns (\r\n            address to,\r\n            uint value,\r\n            uint func,\r\n            bytes memory data,\r\n            bool executed,\r\n            uint numConfirmations\r\n        )\r\n    {\r\n        Transaction storage transaction = transactions[_txIndex];\r\n\r\n        return (\r\n            transaction.to,\r\n            transaction.value,\r\n            transaction.func,\r\n            transaction.data,\r\n            transaction.executed,\r\n            transaction.confirmations\r\n        );\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_owners\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"_requiredConfirmations\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"requiredConfirmations\",\"type\":\"uint256\"}],\"name\":\"ChangeRequiredConfirmations\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"txIndex\",\"type\":\"uint256\"}],\"name\":\"ConfirmTransaction\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"txIndex\",\"type\":\"uint256\"}],\"name\":\"ExecuteTransaction\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnerAddition\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnerRemoval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"txIndex\",\"type\":\"uint256\"}],\"name\":\"RevokeConfirmation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"txIndex\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"func\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"SubmitTransaction\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"addOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_requiredConfirmations\",\"type\":\"uint256\"}],\"name\":\"changeRequiredConfirmations\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_txIndex\",\"type\":\"uint256\"}],\"name\":\"confirmTransaction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_txIndex\",\"type\":\"uint256\"}],\"name\":\"executeTransaction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwners\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_txIndex\",\"type\":\"uint256\"}],\"name\":\"getTransaction\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"func\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"bool\",\"name\":\"executed\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"numConfirmations\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTransactionCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isConfirmed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"owners\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"removeOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"requiredConfirmations\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_txIndex\",\"type\":\"uint256\"}],\"name\":\"revokeConfirmation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_func\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"submitTransaction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"transactions\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"func\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"bool\",\"name\":\"executed\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"confirmations\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "MultiSigWallet", "CompilerVersion": "v0.8.20+commit.a1b79de6", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "0000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000300000000000000000000000000000000000000000000000000000000000000030000000000000000000000006876e4bb48b3eeab52cf9e6e74276bdfe4b8df8200000000000000000000000099fafd0123d7399347330fd8d7bc0ea0b4b5442400000000000000000000000038e680aecbf2d1cb098c339506d34e5d35fdff6f", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://e7a100e4b206c0388c8544f64cc3bcd9acfd06808ef2868ead5f148e2cb2beba"}