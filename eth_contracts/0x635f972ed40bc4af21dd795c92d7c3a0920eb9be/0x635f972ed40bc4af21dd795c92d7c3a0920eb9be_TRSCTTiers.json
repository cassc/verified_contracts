{"SourceCode": "// SPDX-License-Identifier: Unlicensed\r\n\r\npragma solidity ^0.8.0;\r\n\r\ninterface IERC20 {\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n}\r\n\r\ninterface IUniswapV2Pair {\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n    function token0() external view returns (address);\r\n    function token1() external view returns (address);\r\n}\r\n\r\ncontract TRSCTTiers {\r\n    address public admin;\r\n    IERC20 public token;\r\n    IUniswapV2Pair public tokenWETHPair;\r\n    IUniswapV2Pair public WETHUSDCPair;\r\n\r\n    mapping(string => uint256) public tierLevel;\r\n\r\n    uint256 public PREMIUM_COST_USDC = 250 * 10**6; // $250 in USDC (assuming USDC has 6 decimals)\r\n    uint256 public PLATINUM_COST_USDC = 500 * 10**6; // $500 in USDC\r\n    uint256 public BLACK_COST_USDC = 1000 * 10**6; // $1000 in USDC\r\n\r\n    address public constant WETH_ADDRESS = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2; // WETH address on Ethereum mainnet\r\n\r\n    event TierPurchased(address indexed user, uint256 indexed tier, string telegramUID);\r\n    event Withdraw(address indexed admin, uint256 amount);\r\n\r\n    constructor(address _tokenAddress, address _tokenWETHPairAddress, address _WETHUSDCPairAddress) {\r\n        admin = msg.sender;\r\n        token = IERC20(_tokenAddress);\r\n        tokenWETHPair = IUniswapV2Pair(_tokenWETHPairAddress);\r\n        WETHUSDCPair = IUniswapV2Pair(_WETHUSDCPairAddress);\r\n    }\r\n\r\n    function getTokenPriceInWETH() public view returns (uint256) {\r\n        (uint112 reserve0, uint112 reserve1,) = tokenWETHPair.getReserves();\r\n        address token0 = tokenWETHPair.token0();\r\n        if (token0 == address(token)) {\r\n            return (uint256(reserve1) * 1e18) / uint256(reserve0);\r\n        } else {\r\n            return (uint256(reserve0) * 1e18) / uint256(reserve1);\r\n        }\r\n    }\r\n\r\n    function getWETHPriceInUSDC() public view returns (uint256) {\r\n        (uint112 reserve0, uint112 reserve1,) = WETHUSDCPair.getReserves();\r\n        address token0 = WETHUSDCPair.token0();\r\n        if (token0 == address(WETH_ADDRESS)) {\r\n            return (uint256(reserve1) * 1e18) / uint256(reserve0);\r\n        } else {\r\n            return (uint256(reserve0) * 1e18) / uint256(reserve1);\r\n        }\r\n    }\r\n\r\n    function getTokenPriceInUSDC() public view returns (uint256) {\r\n        uint256 tokenPriceInWETH = getTokenPriceInWETH();\r\n        uint256 wethPriceInUSDC = getWETHPriceInUSDC();\r\n\r\n        return (tokenPriceInWETH * wethPriceInUSDC) / 1e27;\r\n    }\r\n\r\n    function tokensRequiredForTier(uint256 tierCostUSDC) public view returns (uint256) {\r\n        uint256 tokenPriceInUSDC = getTokenPriceInUSDC();\r\n        return (tierCostUSDC * 1e9) / tokenPriceInUSDC;\r\n    }\r\n\r\n    modifier onlyAdmin() {\r\n        require(msg.sender == admin, \"Only admin can call this function\");\r\n        _;\r\n    }\r\n\r\n    function buyPremium(string memory _telegramUID) external {\r\n        uint256 premiumCostInTokens = tokensRequiredForTier(PREMIUM_COST_USDC);\r\n        require(token.balanceOf(msg.sender) >= premiumCostInTokens, \"Insufficient balance\");\r\n        require(tierLevel[_telegramUID] < 2, \"User is already premium tier\");\r\n\r\n        bool success = token.transferFrom(msg.sender, address(this), premiumCostInTokens);\r\n        require(success, \"Token transfer failed - please check with the admins.\");\r\n\r\n        tierLevel[_telegramUID] = 2;\r\n\r\n        emit TierPurchased(msg.sender, 2, _telegramUID);\r\n    }\r\n\r\n    function buyPlatinum(string memory _telegramUID) external {\r\n        uint256 platinumCostInTokens = tokensRequiredForTier(PLATINUM_COST_USDC);\r\n        require(tierLevel[_telegramUID] < 3, \"User is already platinum tier\");\r\n\r\n        uint256 costInTokens = platinumCostInTokens;\r\n        if (tierLevel[_telegramUID] == 2) {\r\n            uint256 premiumCostInTokens = tokensRequiredForTier(PREMIUM_COST_USDC);\r\n            costInTokens -= premiumCostInTokens; // Adjust cost if upgrading from Premium to Platinum\r\n        }\r\n\r\n        require(token.balanceOf(msg.sender) >= costInTokens, \"Insufficient balance\");\r\n\r\n        bool success = token.transferFrom(msg.sender, address(this), costInTokens);\r\n        require(success, \"Token transfer failed - please check with the admins.\");\r\n\r\n        tierLevel[_telegramUID] = 3;\r\n\r\n        emit TierPurchased(msg.sender, 3, _telegramUID);\r\n    }\r\n\r\n    function buyBlack(string memory _telegramUID) external {\r\n        uint256 blackCostInTokens = tokensRequiredForTier(BLACK_COST_USDC);\r\n        require(tierLevel[_telegramUID] < 4, \"User is already black tier\");\r\n\r\n        uint256 costInTokens = blackCostInTokens;\r\n\r\n        if (tierLevel[_telegramUID] == 2) {\r\n            uint256 premiumCostInTokens = tokensRequiredForTier(PREMIUM_COST_USDC);\r\n            costInTokens -= premiumCostInTokens; // Adjust cost if upgrading from Premium to Platinum\r\n        } else if (tierLevel[_telegramUID] == 3) {\r\n            uint256 platinumCostInTokens = tokensRequiredForTier(PLATINUM_COST_USDC);\r\n            costInTokens -= platinumCostInTokens;\r\n        }\r\n\r\n        require(token.balanceOf(msg.sender) >= costInTokens, \"Insufficient balance\");\r\n\r\n        bool success = token.transferFrom(msg.sender, address(this), costInTokens);\r\n        require(success, \"Token transfer failed - please check with the admins.\");\r\n\r\n        tierLevel[_telegramUID] = 4;\r\n\r\n        emit TierPurchased(msg.sender, 4, _telegramUID);\r\n    }\r\n\r\n    function setAdmin(address _newAdmin) external onlyAdmin {\r\n        admin = _newAdmin;\r\n    }\r\n\r\n    function withdraw(uint256 amount) external onlyAdmin {\r\n        require(token.balanceOf(address(this)) >= amount, \"Insufficient balance\");\r\n        token.transfer(admin, amount);\r\n        emit Withdraw(admin, amount);\r\n    }\r\n\r\n    function getTierLevel(string memory _telegramUID) external view returns (uint256) {\r\n        return tierLevel[_telegramUID];\r\n    }\r\n\r\n    function setPremiumCostInUSDC(uint256 _newPrice) external onlyAdmin {\r\n        PREMIUM_COST_USDC = _newPrice * 10**6;\r\n    }\r\n\r\n    function setPlatinumCostInUSDC(uint256 _newPrice) external onlyAdmin {\r\n        PLATINUM_COST_USDC = _newPrice * 10**6;\r\n    }\r\n\r\n    function setBlackCostInUSDC(uint256 _newPrice) external onlyAdmin {\r\n        BLACK_COST_USDC = _newPrice * 10**6;\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenWETHPairAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_WETHUSDCPairAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tier\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"telegramUID\",\"type\":\"string\"}],\"name\":\"TierPurchased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BLACK_COST_USDC\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PLATINUM_COST_USDC\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PREMIUM_COST_USDC\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WETHUSDCPair\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Pair\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WETH_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_telegramUID\",\"type\":\"string\"}],\"name\":\"buyBlack\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_telegramUID\",\"type\":\"string\"}],\"name\":\"buyPlatinum\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_telegramUID\",\"type\":\"string\"}],\"name\":\"buyPremium\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_telegramUID\",\"type\":\"string\"}],\"name\":\"getTierLevel\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokenPriceInUSDC\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokenPriceInWETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getWETHPriceInUSDC\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newAdmin\",\"type\":\"address\"}],\"name\":\"setAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newPrice\",\"type\":\"uint256\"}],\"name\":\"setBlackCostInUSDC\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newPrice\",\"type\":\"uint256\"}],\"name\":\"setPlatinumCostInUSDC\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newPrice\",\"type\":\"uint256\"}],\"name\":\"setPremiumCostInUSDC\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"tierLevel\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenWETHPair\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Pair\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tierCostUSDC\",\"type\":\"uint256\"}],\"name\":\"tokensRequiredForTier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "TRSCTTiers", "CompilerVersion": "v0.8.20+commit.a1b79de6", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000fe98796e0af4ababd716508429e51ff9ac1bb4d5000000000000000000000000d4fe3d36d8c405833972987c5fd977345aae2e8a000000000000000000000000b4e16d0168e52d35cacd2c6185b44281ec28c9dc", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://73d844ef629547566107c185f464758f2b76cfacc3e4a51758de82fabaea2805"}