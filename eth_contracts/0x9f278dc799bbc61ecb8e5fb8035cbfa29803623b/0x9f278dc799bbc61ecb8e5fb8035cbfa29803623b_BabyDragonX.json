{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable2Step.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable2Step.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Ownable} from \\\"./Ownable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is specified at deployment time in the constructor for `Ownable`. This\\n * can later be changed with {transferOwnership} and {acceptOwnership}.\\n *\\n * This module is used through inheritance. It will make available all functions\\n * from parent (Ownable).\\n */\\nabstract contract Ownable2Step is Ownable {\\n    address private _pendingOwner;\\n\\n    event OwnershipTransferStarted(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Returns the address of the pending owner.\\n     */\\n    function pendingOwner() public view virtual returns (address) {\\n        return _pendingOwner;\\n    }\\n\\n    /**\\n     * @dev Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one.\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual override onlyOwner {\\n        _pendingOwner = newOwner;\\n        emit OwnershipTransferStarted(owner(), newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`) and deletes any pending owner.\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual override {\\n        delete _pendingOwner;\\n        super._transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev The new owner accepts the ownership transfer.\\n     */\\n    function acceptOwnership() public virtual {\\n        address sender = _msgSender();\\n        if (pendingOwner() != sender) {\\n            revert OwnableUnauthorizedAccount(sender);\\n        }\\n        _transferOwnership(sender);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard ERC20 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\\n */\\ninterface IERC20Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC20InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC20InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender`\u2019s `allowance`. Used in transfers.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC20InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC20InvalidSpender(address spender);\\n}\\n\\n/**\\n * @dev Standard ERC721 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\\n */\\ninterface IERC721Errors {\\n    /**\\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\\n     * Used in balance queries.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721InvalidOwner(address owner);\\n\\n    /**\\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721NonexistentToken(uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param tokenId Identifier number of a token.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC721InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC721InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC721InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC721InvalidOperator(address operator);\\n}\\n\\n/**\\n * @dev Standard ERC1155 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\\n */\\ninterface IERC1155Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC1155InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC1155InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC1155MissingApprovalForAll(address operator, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC1155InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC1155InvalidOperator(address operator);\\n\\n    /**\\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\\n     * Used in batch transfers.\\n     * @param idsLength Length of the array of token identifiers\\n     * @param valuesLength Length of the array of token amounts\\n     */\\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"./IERC20.sol\\\";\\nimport {IERC20Metadata} from \\\"./extensions/IERC20Metadata.sol\\\";\\nimport {Context} from \\\"../../utils/Context.sol\\\";\\nimport {IERC20Errors} from \\\"../../interfaces/draft-IERC6093.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n */\\nabstract contract ERC20 is Context, IERC20, IERC20Metadata, IERC20Errors {\\n    mapping(address account => uint256) private _balances;\\n\\n    mapping(address account => mapping(address spender => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `value`.\\n     */\\n    function transfer(address to, uint256 value) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 value) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `value`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `value`.\\n     */\\n    function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, value);\\n        _transfer(from, to, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\n     */\\n    function _transfer(address from, address to, uint256 value) internal {\\n        if (from == address(0)) {\\n            revert ERC20InvalidSender(address(0));\\n        }\\n        if (to == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n        _update(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\\n     * (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\\n     * this function.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _update(address from, address to, uint256 value) internal virtual {\\n        if (from == address(0)) {\\n            // Overflow check required: The rest of the code assumes that totalSupply never overflows\\n            _totalSupply += value;\\n        } else {\\n            uint256 fromBalance = _balances[from];\\n            if (fromBalance < value) {\\n                revert ERC20InsufficientBalance(from, fromBalance, value);\\n            }\\n            unchecked {\\n                // Overflow not possible: value <= fromBalance <= totalSupply.\\n                _balances[from] = fromBalance - value;\\n            }\\n        }\\n\\n        if (to == address(0)) {\\n            unchecked {\\n                // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.\\n                _totalSupply -= value;\\n            }\\n        } else {\\n            unchecked {\\n                // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.\\n                _balances[to] += value;\\n            }\\n        }\\n\\n        emit Transfer(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\\n     * Relies on the `_update` mechanism\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\n     */\\n    function _mint(address account, uint256 value) internal {\\n        if (account == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n        _update(address(0), account, value);\\n    }\\n\\n    /**\\n     * @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\\n     * Relies on the `_update` mechanism.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead\\n     */\\n    function _burn(address account, uint256 value) internal {\\n        if (account == address(0)) {\\n            revert ERC20InvalidSender(address(0));\\n        }\\n        _update(account, address(0), value);\\n    }\\n\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     *\\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\\n     */\\n    function _approve(address owner, address spender, uint256 value) internal {\\n        _approve(owner, spender, value, true);\\n    }\\n\\n    /**\\n     * @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\\n     *\\n     * By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\\n     * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\\n     * `Approval` event during `transferFrom` operations.\\n     *\\n     * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\\n     * true using the following override:\\n     * ```\\n     * function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\\n     *     super._approve(owner, spender, value, true);\\n     * }\\n     * ```\\n     *\\n     * Requirements are the same as {_approve}.\\n     */\\n    function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {\\n        if (owner == address(0)) {\\n            revert ERC20InvalidApprover(address(0));\\n        }\\n        if (spender == address(0)) {\\n            revert ERC20InvalidSpender(address(0));\\n        }\\n        _allowances[owner][spender] = value;\\n        if (emitEvent) {\\n            emit Approval(owner, spender, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `value`.\\n     *\\n     * Does not update the allowance value in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Does not emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 value) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            if (currentAllowance < value) {\\n                revert ERC20InsufficientAllowance(spender, currentAllowance, value);\\n            }\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - value, false);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\nimport {IERC20Permit} from \\\"../extensions/IERC20Permit.sol\\\";\\nimport {Address} from \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev An operation with an ERC20 token failed.\\n     */\\n    error SafeERC20FailedOperation(address token);\\n\\n    /**\\n     * @dev Indicates a failed `decreaseAllowance` request.\\n     */\\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        forceApprove(token, spender, oldAllowance + value);\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\\n     * value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\\n        unchecked {\\n            uint256 currentAllowance = token.allowance(address(this), spender);\\n            if (currentAllowance < requestedDecrease) {\\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\\n            }\\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data);\\n        if (returndata.length != 0 && !abi.decode(returndata, (bool))) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return success && (returndata.length == 0 || abi.decode(returndata, (bool))) && address(token).code.length > 0;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error AddressInsufficientBalance(address account);\\n\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedInnerCall();\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            revert FailedInnerCall();\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {FailedInnerCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\\n     * unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {FailedInnerCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert FailedInnerCall();\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Muldiv operation overflow.\\n     */\\n    error MathOverflowedMulDiv();\\n\\n    enum Rounding {\\n        Floor, // Toward negative infinity\\n        Ceil, // Toward positive infinity\\n        Trunc, // Toward zero\\n        Expand // Away from zero\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\n     * of rounding towards zero.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) {\\n            // Guarantee the same behavior as in a regular Solidity division.\\n            return a / b;\\n        }\\n\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\n     * denominator == 0.\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\n     * Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            if (denominator <= prod1) {\\n                revert MathOverflowedMulDiv();\\n            }\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\\n\\n            uint256 twos = denominator & (0 - denominator);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\\n            // works in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\n     * towards zero.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\n     */\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\n        return uint8(rounding) % 2 == 1;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    constructor() {\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if (_status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Callback for IUniswapV3PoolActions#swap\\n/// @notice Any contract that calls IUniswapV3PoolActions#swap must implement this interface\\ninterface IUniswapV3SwapCallback {\\n    /// @notice Called to `msg.sender` after executing a swap via IUniswapV3Pool#swap.\\n    /// @dev In the implementation you must pay the pool tokens owed for the swap.\\n    /// The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory.\\n    /// amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\\n    /// @param amount0Delta The amount of token0 that was sent (negative) or must be received (positive) by the pool by\\n    /// the end of the swap. If positive, the callback must send that amount of token0 to the pool.\\n    /// @param amount1Delta The amount of token1 that was sent (negative) or must be received (positive) by the pool by\\n    /// the end of the swap. If positive, the callback must send that amount of token1 to the pool.\\n    /// @param data Any data passed through by the caller via the IUniswapV3PoolActions#swap call\\n    function uniswapV3SwapCallback(\\n        int256 amount0Delta,\\n        int256 amount1Delta,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@uniswap/v3-core/contracts/interfaces/IUniswapV3Pool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\nimport './pool/IUniswapV3PoolImmutables.sol';\\nimport './pool/IUniswapV3PoolState.sol';\\nimport './pool/IUniswapV3PoolDerivedState.sol';\\nimport './pool/IUniswapV3PoolActions.sol';\\nimport './pool/IUniswapV3PoolOwnerActions.sol';\\nimport './pool/IUniswapV3PoolEvents.sol';\\n\\n/// @title The interface for a Uniswap V3 Pool\\n/// @notice A Uniswap pool facilitates swapping and automated market making between any two assets that strictly conform\\n/// to the ERC20 specification\\n/// @dev The pool interface is broken up into many smaller pieces\\ninterface IUniswapV3Pool is\\n    IUniswapV3PoolImmutables,\\n    IUniswapV3PoolState,\\n    IUniswapV3PoolDerivedState,\\n    IUniswapV3PoolActions,\\n    IUniswapV3PoolOwnerActions,\\n    IUniswapV3PoolEvents\\n{\\n\\n}\\n\"\r\n    },\r\n    \"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolActions.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Permissionless pool actions\\n/// @notice Contains pool methods that can be called by anyone\\ninterface IUniswapV3PoolActions {\\n    /// @notice Sets the initial price for the pool\\n    /// @dev Price is represented as a sqrt(amountToken1/amountToken0) Q64.96 value\\n    /// @param sqrtPriceX96 the initial sqrt price of the pool as a Q64.96\\n    function initialize(uint160 sqrtPriceX96) external;\\n\\n    /// @notice Adds liquidity for the given recipient/tickLower/tickUpper position\\n    /// @dev The caller of this method receives a callback in the form of IUniswapV3MintCallback#uniswapV3MintCallback\\n    /// in which they must pay any token0 or token1 owed for the liquidity. The amount of token0/token1 due depends\\n    /// on tickLower, tickUpper, the amount of liquidity, and the current price.\\n    /// @param recipient The address for which the liquidity will be created\\n    /// @param tickLower The lower tick of the position in which to add liquidity\\n    /// @param tickUpper The upper tick of the position in which to add liquidity\\n    /// @param amount The amount of liquidity to mint\\n    /// @param data Any data that should be passed through to the callback\\n    /// @return amount0 The amount of token0 that was paid to mint the given amount of liquidity. Matches the value in the callback\\n    /// @return amount1 The amount of token1 that was paid to mint the given amount of liquidity. Matches the value in the callback\\n    function mint(\\n        address recipient,\\n        int24 tickLower,\\n        int24 tickUpper,\\n        uint128 amount,\\n        bytes calldata data\\n    ) external returns (uint256 amount0, uint256 amount1);\\n\\n    /// @notice Collects tokens owed to a position\\n    /// @dev Does not recompute fees earned, which must be done either via mint or burn of any amount of liquidity.\\n    /// Collect must be called by the position owner. To withdraw only token0 or only token1, amount0Requested or\\n    /// amount1Requested may be set to zero. To withdraw all tokens owed, caller may pass any value greater than the\\n    /// actual tokens owed, e.g. type(uint128).max. Tokens owed may be from accumulated swap fees or burned liquidity.\\n    /// @param recipient The address which should receive the fees collected\\n    /// @param tickLower The lower tick of the position for which to collect fees\\n    /// @param tickUpper The upper tick of the position for which to collect fees\\n    /// @param amount0Requested How much token0 should be withdrawn from the fees owed\\n    /// @param amount1Requested How much token1 should be withdrawn from the fees owed\\n    /// @return amount0 The amount of fees collected in token0\\n    /// @return amount1 The amount of fees collected in token1\\n    function collect(\\n        address recipient,\\n        int24 tickLower,\\n        int24 tickUpper,\\n        uint128 amount0Requested,\\n        uint128 amount1Requested\\n    ) external returns (uint128 amount0, uint128 amount1);\\n\\n    /// @notice Burn liquidity from the sender and account tokens owed for the liquidity to the position\\n    /// @dev Can be used to trigger a recalculation of fees owed to a position by calling with an amount of 0\\n    /// @dev Fees must be collected separately via a call to #collect\\n    /// @param tickLower The lower tick of the position for which to burn liquidity\\n    /// @param tickUpper The upper tick of the position for which to burn liquidity\\n    /// @param amount How much liquidity to burn\\n    /// @return amount0 The amount of token0 sent to the recipient\\n    /// @return amount1 The amount of token1 sent to the recipient\\n    function burn(\\n        int24 tickLower,\\n        int24 tickUpper,\\n        uint128 amount\\n    ) external returns (uint256 amount0, uint256 amount1);\\n\\n    /// @notice Swap token0 for token1, or token1 for token0\\n    /// @dev The caller of this method receives a callback in the form of IUniswapV3SwapCallback#uniswapV3SwapCallback\\n    /// @param recipient The address to receive the output of the swap\\n    /// @param zeroForOne The direction of the swap, true for token0 to token1, false for token1 to token0\\n    /// @param amountSpecified The amount of the swap, which implicitly configures the swap as exact input (positive), or exact output (negative)\\n    /// @param sqrtPriceLimitX96 The Q64.96 sqrt price limit. If zero for one, the price cannot be less than this\\n    /// value after the swap. If one for zero, the price cannot be greater than this value after the swap\\n    /// @param data Any data to be passed through to the callback\\n    /// @return amount0 The delta of the balance of token0 of the pool, exact when negative, minimum when positive\\n    /// @return amount1 The delta of the balance of token1 of the pool, exact when negative, minimum when positive\\n    function swap(\\n        address recipient,\\n        bool zeroForOne,\\n        int256 amountSpecified,\\n        uint160 sqrtPriceLimitX96,\\n        bytes calldata data\\n    ) external returns (int256 amount0, int256 amount1);\\n\\n    /// @notice Receive token0 and/or token1 and pay it back, plus a fee, in the callback\\n    /// @dev The caller of this method receives a callback in the form of IUniswapV3FlashCallback#uniswapV3FlashCallback\\n    /// @dev Can be used to donate underlying tokens pro-rata to currently in-range liquidity providers by calling\\n    /// with 0 amount{0,1} and sending the donation amount(s) from the callback\\n    /// @param recipient The address which will receive the token0 and token1 amounts\\n    /// @param amount0 The amount of token0 to send\\n    /// @param amount1 The amount of token1 to send\\n    /// @param data Any data to be passed through to the callback\\n    function flash(\\n        address recipient,\\n        uint256 amount0,\\n        uint256 amount1,\\n        bytes calldata data\\n    ) external;\\n\\n    /// @notice Increase the maximum number of price and liquidity observations that this pool will store\\n    /// @dev This method is no-op if the pool already has an observationCardinalityNext greater than or equal to\\n    /// the input observationCardinalityNext.\\n    /// @param observationCardinalityNext The desired minimum number of observations for the pool to store\\n    function increaseObservationCardinalityNext(uint16 observationCardinalityNext) external;\\n}\\n\"\r\n    },\r\n    \"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolDerivedState.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Pool state that is not stored\\n/// @notice Contains view functions to provide information about the pool that is computed rather than stored on the\\n/// blockchain. The functions here may have variable gas costs.\\ninterface IUniswapV3PoolDerivedState {\\n    /// @notice Returns the cumulative tick and liquidity as of each timestamp `secondsAgo` from the current block timestamp\\n    /// @dev To get a time weighted average tick or liquidity-in-range, you must call this with two values, one representing\\n    /// the beginning of the period and another for the end of the period. E.g., to get the last hour time-weighted average tick,\\n    /// you must call it with secondsAgos = [3600, 0].\\n    /// @dev The time weighted average tick represents the geometric time weighted average price of the pool, in\\n    /// log base sqrt(1.0001) of token1 / token0. The TickMath library can be used to go from a tick value to a ratio.\\n    /// @param secondsAgos From how long ago each cumulative tick and liquidity value should be returned\\n    /// @return tickCumulatives Cumulative tick values as of each `secondsAgos` from the current block timestamp\\n    /// @return secondsPerLiquidityCumulativeX128s Cumulative seconds per liquidity-in-range value as of each `secondsAgos` from the current block\\n    /// timestamp\\n    function observe(uint32[] calldata secondsAgos)\\n        external\\n        view\\n        returns (int56[] memory tickCumulatives, uint160[] memory secondsPerLiquidityCumulativeX128s);\\n\\n    /// @notice Returns a snapshot of the tick cumulative, seconds per liquidity and seconds inside a tick range\\n    /// @dev Snapshots must only be compared to other snapshots, taken over a period for which a position existed.\\n    /// I.e., snapshots cannot be compared if a position is not held for the entire period between when the first\\n    /// snapshot is taken and the second snapshot is taken.\\n    /// @param tickLower The lower tick of the range\\n    /// @param tickUpper The upper tick of the range\\n    /// @return tickCumulativeInside The snapshot of the tick accumulator for the range\\n    /// @return secondsPerLiquidityInsideX128 The snapshot of seconds per liquidity for the range\\n    /// @return secondsInside The snapshot of seconds per liquidity for the range\\n    function snapshotCumulativesInside(int24 tickLower, int24 tickUpper)\\n        external\\n        view\\n        returns (\\n            int56 tickCumulativeInside,\\n            uint160 secondsPerLiquidityInsideX128,\\n            uint32 secondsInside\\n        );\\n}\\n\"\r\n    },\r\n    \"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolEvents.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Events emitted by a pool\\n/// @notice Contains all events emitted by the pool\\ninterface IUniswapV3PoolEvents {\\n    /// @notice Emitted exactly once by a pool when #initialize is first called on the pool\\n    /// @dev Mint/Burn/Swap cannot be emitted by the pool before Initialize\\n    /// @param sqrtPriceX96 The initial sqrt price of the pool, as a Q64.96\\n    /// @param tick The initial tick of the pool, i.e. log base 1.0001 of the starting price of the pool\\n    event Initialize(uint160 sqrtPriceX96, int24 tick);\\n\\n    /// @notice Emitted when liquidity is minted for a given position\\n    /// @param sender The address that minted the liquidity\\n    /// @param owner The owner of the position and recipient of any minted liquidity\\n    /// @param tickLower The lower tick of the position\\n    /// @param tickUpper The upper tick of the position\\n    /// @param amount The amount of liquidity minted to the position range\\n    /// @param amount0 How much token0 was required for the minted liquidity\\n    /// @param amount1 How much token1 was required for the minted liquidity\\n    event Mint(\\n        address sender,\\n        address indexed owner,\\n        int24 indexed tickLower,\\n        int24 indexed tickUpper,\\n        uint128 amount,\\n        uint256 amount0,\\n        uint256 amount1\\n    );\\n\\n    /// @notice Emitted when fees are collected by the owner of a position\\n    /// @dev Collect events may be emitted with zero amount0 and amount1 when the caller chooses not to collect fees\\n    /// @param owner The owner of the position for which fees are collected\\n    /// @param tickLower The lower tick of the position\\n    /// @param tickUpper The upper tick of the position\\n    /// @param amount0 The amount of token0 fees collected\\n    /// @param amount1 The amount of token1 fees collected\\n    event Collect(\\n        address indexed owner,\\n        address recipient,\\n        int24 indexed tickLower,\\n        int24 indexed tickUpper,\\n        uint128 amount0,\\n        uint128 amount1\\n    );\\n\\n    /// @notice Emitted when a position's liquidity is removed\\n    /// @dev Does not withdraw any fees earned by the liquidity position, which must be withdrawn via #collect\\n    /// @param owner The owner of the position for which liquidity is removed\\n    /// @param tickLower The lower tick of the position\\n    /// @param tickUpper The upper tick of the position\\n    /// @param amount The amount of liquidity to remove\\n    /// @param amount0 The amount of token0 withdrawn\\n    /// @param amount1 The amount of token1 withdrawn\\n    event Burn(\\n        address indexed owner,\\n        int24 indexed tickLower,\\n        int24 indexed tickUpper,\\n        uint128 amount,\\n        uint256 amount0,\\n        uint256 amount1\\n    );\\n\\n    /// @notice Emitted by the pool for any swaps between token0 and token1\\n    /// @param sender The address that initiated the swap call, and that received the callback\\n    /// @param recipient The address that received the output of the swap\\n    /// @param amount0 The delta of the token0 balance of the pool\\n    /// @param amount1 The delta of the token1 balance of the pool\\n    /// @param sqrtPriceX96 The sqrt(price) of the pool after the swap, as a Q64.96\\n    /// @param liquidity The liquidity of the pool after the swap\\n    /// @param tick The log base 1.0001 of price of the pool after the swap\\n    event Swap(\\n        address indexed sender,\\n        address indexed recipient,\\n        int256 amount0,\\n        int256 amount1,\\n        uint160 sqrtPriceX96,\\n        uint128 liquidity,\\n        int24 tick\\n    );\\n\\n    /// @notice Emitted by the pool for any flashes of token0/token1\\n    /// @param sender The address that initiated the swap call, and that received the callback\\n    /// @param recipient The address that received the tokens from flash\\n    /// @param amount0 The amount of token0 that was flashed\\n    /// @param amount1 The amount of token1 that was flashed\\n    /// @param paid0 The amount of token0 paid for the flash, which can exceed the amount0 plus the fee\\n    /// @param paid1 The amount of token1 paid for the flash, which can exceed the amount1 plus the fee\\n    event Flash(\\n        address indexed sender,\\n        address indexed recipient,\\n        uint256 amount0,\\n        uint256 amount1,\\n        uint256 paid0,\\n        uint256 paid1\\n    );\\n\\n    /// @notice Emitted by the pool for increases to the number of observations that can be stored\\n    /// @dev observationCardinalityNext is not the observation cardinality until an observation is written at the index\\n    /// just before a mint/swap/burn.\\n    /// @param observationCardinalityNextOld The previous value of the next observation cardinality\\n    /// @param observationCardinalityNextNew The updated value of the next observation cardinality\\n    event IncreaseObservationCardinalityNext(\\n        uint16 observationCardinalityNextOld,\\n        uint16 observationCardinalityNextNew\\n    );\\n\\n    /// @notice Emitted when the protocol fee is changed by the pool\\n    /// @param feeProtocol0Old The previous value of the token0 protocol fee\\n    /// @param feeProtocol1Old The previous value of the token1 protocol fee\\n    /// @param feeProtocol0New The updated value of the token0 protocol fee\\n    /// @param feeProtocol1New The updated value of the token1 protocol fee\\n    event SetFeeProtocol(uint8 feeProtocol0Old, uint8 feeProtocol1Old, uint8 feeProtocol0New, uint8 feeProtocol1New);\\n\\n    /// @notice Emitted when the collected protocol fees are withdrawn by the factory owner\\n    /// @param sender The address that collects the protocol fees\\n    /// @param recipient The address that receives the collected protocol fees\\n    /// @param amount0 The amount of token0 protocol fees that is withdrawn\\n    /// @param amount0 The amount of token1 protocol fees that is withdrawn\\n    event CollectProtocol(address indexed sender, address indexed recipient, uint128 amount0, uint128 amount1);\\n}\\n\"\r\n    },\r\n    \"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolImmutables.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Pool state that never changes\\n/// @notice These parameters are fixed for a pool forever, i.e., the methods will always return the same values\\ninterface IUniswapV3PoolImmutables {\\n    /// @notice The contract that deployed the pool, which must adhere to the IUniswapV3Factory interface\\n    /// @return The contract address\\n    function factory() external view returns (address);\\n\\n    /// @notice The first of the two tokens of the pool, sorted by address\\n    /// @return The token contract address\\n    function token0() external view returns (address);\\n\\n    /// @notice The second of the two tokens of the pool, sorted by address\\n    /// @return The token contract address\\n    function token1() external view returns (address);\\n\\n    /// @notice The pool's fee in hundredths of a bip, i.e. 1e-6\\n    /// @return The fee\\n    function fee() external view returns (uint24);\\n\\n    /// @notice The pool tick spacing\\n    /// @dev Ticks can only be used at multiples of this value, minimum of 1 and always positive\\n    /// e.g.: a tickSpacing of 3 means ticks can be initialized every 3rd tick, i.e., ..., -6, -3, 0, 3, 6, ...\\n    /// This value is an int24 to avoid casting even though it is always positive.\\n    /// @return The tick spacing\\n    function tickSpacing() external view returns (int24);\\n\\n    /// @notice The maximum amount of position liquidity that can use any tick in the range\\n    /// @dev This parameter is enforced per tick to prevent liquidity from overflowing a uint128 at any point, and\\n    /// also prevents out-of-range liquidity from being used to prevent adding in-range liquidity to a pool\\n    /// @return The max amount of liquidity per tick\\n    function maxLiquidityPerTick() external view returns (uint128);\\n}\\n\"\r\n    },\r\n    \"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolOwnerActions.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Permissioned pool actions\\n/// @notice Contains pool methods that may only be called by the factory owner\\ninterface IUniswapV3PoolOwnerActions {\\n    /// @notice Set the denominator of the protocol's % share of the fees\\n    /// @param feeProtocol0 new protocol fee for token0 of the pool\\n    /// @param feeProtocol1 new protocol fee for token1 of the pool\\n    function setFeeProtocol(uint8 feeProtocol0, uint8 feeProtocol1) external;\\n\\n    /// @notice Collect the protocol fee accrued to the pool\\n    /// @param recipient The address to which collected protocol fees should be sent\\n    /// @param amount0Requested The maximum amount of token0 to send, can be 0 to collect fees in only token1\\n    /// @param amount1Requested The maximum amount of token1 to send, can be 0 to collect fees in only token0\\n    /// @return amount0 The protocol fee collected in token0\\n    /// @return amount1 The protocol fee collected in token1\\n    function collectProtocol(\\n        address recipient,\\n        uint128 amount0Requested,\\n        uint128 amount1Requested\\n    ) external returns (uint128 amount0, uint128 amount1);\\n}\\n\"\r\n    },\r\n    \"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolState.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Pool state that can change\\n/// @notice These methods compose the pool's state, and can change with any frequency including multiple times\\n/// per transaction\\ninterface IUniswapV3PoolState {\\n    /// @notice The 0th storage slot in the pool stores many values, and is exposed as a single method to save gas\\n    /// when accessed externally.\\n    /// @return sqrtPriceX96 The current price of the pool as a sqrt(token1/token0) Q64.96 value\\n    /// tick The current tick of the pool, i.e. according to the last tick transition that was run.\\n    /// This value may not always be equal to SqrtTickMath.getTickAtSqrtRatio(sqrtPriceX96) if the price is on a tick\\n    /// boundary.\\n    /// observationIndex The index of the last oracle observation that was written,\\n    /// observationCardinality The current maximum number of observations stored in the pool,\\n    /// observationCardinalityNext The next maximum number of observations, to be updated when the observation.\\n    /// feeProtocol The protocol fee for both tokens of the pool.\\n    /// Encoded as two 4 bit values, where the protocol fee of token1 is shifted 4 bits and the protocol fee of token0\\n    /// is the lower 4 bits. Used as the denominator of a fraction of the swap fee, e.g. 4 means 1/4th of the swap fee.\\n    /// unlocked Whether the pool is currently locked to reentrancy\\n    function slot0()\\n        external\\n        view\\n        returns (\\n            uint160 sqrtPriceX96,\\n            int24 tick,\\n            uint16 observationIndex,\\n            uint16 observationCardinality,\\n            uint16 observationCardinalityNext,\\n            uint8 feeProtocol,\\n            bool unlocked\\n        );\\n\\n    /// @notice The fee growth as a Q128.128 fees of token0 collected per unit of liquidity for the entire life of the pool\\n    /// @dev This value can overflow the uint256\\n    function feeGrowthGlobal0X128() external view returns (uint256);\\n\\n    /// @notice The fee growth as a Q128.128 fees of token1 collected per unit of liquidity for the entire life of the pool\\n    /// @dev This value can overflow the uint256\\n    function feeGrowthGlobal1X128() external view returns (uint256);\\n\\n    /// @notice The amounts of token0 and token1 that are owed to the protocol\\n    /// @dev Protocol fees will never exceed uint128 max in either token\\n    function protocolFees() external view returns (uint128 token0, uint128 token1);\\n\\n    /// @notice The currently in range liquidity available to the pool\\n    /// @dev This value has no relationship to the total liquidity across all ticks\\n    function liquidity() external view returns (uint128);\\n\\n    /// @notice Look up information about a specific tick in the pool\\n    /// @param tick The tick to look up\\n    /// @return liquidityGross the total amount of position liquidity that uses the pool either as tick lower or\\n    /// tick upper,\\n    /// liquidityNet how much liquidity changes when the pool price crosses the tick,\\n    /// feeGrowthOutside0X128 the fee growth on the other side of the tick from the current tick in token0,\\n    /// feeGrowthOutside1X128 the fee growth on the other side of the tick from the current tick in token1,\\n    /// tickCumulativeOutside the cumulative tick value on the other side of the tick from the current tick\\n    /// secondsPerLiquidityOutsideX128 the seconds spent per liquidity on the other side of the tick from the current tick,\\n    /// secondsOutside the seconds spent on the other side of the tick from the current tick,\\n    /// initialized Set to true if the tick is initialized, i.e. liquidityGross is greater than 0, otherwise equal to false.\\n    /// Outside values can only be used if the tick is initialized, i.e. if liquidityGross is greater than 0.\\n    /// In addition, these values are only relative and must be used only in comparison to previous snapshots for\\n    /// a specific position.\\n    function ticks(int24 tick)\\n        external\\n        view\\n        returns (\\n            uint128 liquidityGross,\\n            int128 liquidityNet,\\n            uint256 feeGrowthOutside0X128,\\n            uint256 feeGrowthOutside1X128,\\n            int56 tickCumulativeOutside,\\n            uint160 secondsPerLiquidityOutsideX128,\\n            uint32 secondsOutside,\\n            bool initialized\\n        );\\n\\n    /// @notice Returns 256 packed tick initialized boolean values. See TickBitmap for more information\\n    function tickBitmap(int16 wordPosition) external view returns (uint256);\\n\\n    /// @notice Returns the information about a position by the position's key\\n    /// @param key The position's key is a hash of a preimage composed by the owner, tickLower and tickUpper\\n    /// @return _liquidity The amount of liquidity in the position,\\n    /// Returns feeGrowthInside0LastX128 fee growth of token0 inside the tick range as of the last mint/burn/poke,\\n    /// Returns feeGrowthInside1LastX128 fee growth of token1 inside the tick range as of the last mint/burn/poke,\\n    /// Returns tokensOwed0 the computed amount of token0 owed to the position as of the last mint/burn/poke,\\n    /// Returns tokensOwed1 the computed amount of token1 owed to the position as of the last mint/burn/poke\\n    function positions(bytes32 key)\\n        external\\n        view\\n        returns (\\n            uint128 _liquidity,\\n            uint256 feeGrowthInside0LastX128,\\n            uint256 feeGrowthInside1LastX128,\\n            uint128 tokensOwed0,\\n            uint128 tokensOwed1\\n        );\\n\\n    /// @notice Returns data about a specific observation index\\n    /// @param index The element of the observations array to fetch\\n    /// @dev You most likely want to use #observe() instead of this method to get an observation as of some amount of time\\n    /// ago, rather than at a specific index in the array.\\n    /// @return blockTimestamp The timestamp of the observation,\\n    /// Returns tickCumulative the tick multiplied by seconds elapsed for the life of the pool as of the observation timestamp,\\n    /// Returns secondsPerLiquidityCumulativeX128 the seconds per in range liquidity for the life of the pool as of the observation timestamp,\\n    /// Returns initialized whether the observation has been initialized and the values are safe to use\\n    function observations(uint256 index)\\n        external\\n        view\\n        returns (\\n            uint32 blockTimestamp,\\n            int56 tickCumulative,\\n            uint160 secondsPerLiquidityCumulativeX128,\\n            bool initialized\\n        );\\n}\\n\"\r\n    },\r\n    \"@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.7.5;\\npragma abicoder v2;\\n\\nimport '@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol';\\n\\n/// @title Router token swapping functionality\\n/// @notice Functions for swapping tokens via Uniswap V3\\ninterface ISwapRouter is IUniswapV3SwapCallback {\\n    struct ExactInputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another token\\n    /// @param params The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInputSingle(ExactInputSingleParams calldata params) external payable returns (uint256 amountOut);\\n\\n    struct ExactInputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n    }\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another along the specified path\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInput(ExactInputParams calldata params) external payable returns (uint256 amountOut);\\n\\n    struct ExactOutputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another token\\n    /// @param params The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata\\n    /// @return amountIn The amount of the input token\\n    function exactOutputSingle(ExactOutputSingleParams calldata params) external payable returns (uint256 amountIn);\\n\\n    struct ExactOutputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n    }\\n\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed)\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata\\n    /// @return amountIn The amount of the input token\\n    function exactOutput(ExactOutputParams calldata params) external payable returns (uint256 amountIn);\\n}\\n\"\r\n    },\r\n    \"contracts/BabyDragonBuyAndBurn.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.24;\\n\\n// UniSwap\\nimport \\\"@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol\\\";\\nimport \\\"@uniswap/v3-core/contracts/interfaces/IUniswapV3Pool.sol\\\";\\n\\n// OpenZeppelins\\nimport \\\"@openzeppelin/contracts/access/Ownable2Step.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\n// Library\\nimport \\\"./lib/Constants.sol\\\";\\nimport \\\"./lib/interfaces/IWETH.sol\\\";\\nimport \\\"./lib/uniswap/PoolAddress.sol\\\";\\nimport \\\"./lib/uniswap/Oracle.sol\\\";\\nimport \\\"./lib/uniswap/TickMath.sol\\\";\\n\\n// Other\\nimport \\\"./BabyDragonX.sol\\\";\\n\\ncontract BabyDragonBuyAndBurn is Ownable2Step, ReentrancyGuard {\\n    using SafeERC20 for IERC20;\\n    using SafeERC20 for BabyDragonX;\\n    using SafeERC20 for IDragonX;\\n\\n    // -----------------------------------------\\n    // Type declarations\\n    // -----------------------------------------\\n\\n    // -----------------------------------------\\n    // State variables\\n    // -----------------------------------------\\n    /**\\n     * @dev The address of the BabyDragonX Contract.\\n     */\\n    address public babyDragonAddress;\\n\\n    /**\\n     * @dev Maximum slippage percentage acceptable when buying BabyDragonX with DragonX.\\n     * Slippage is expressed as a percentage (e.g., 5 for 5% slippage).\\n     */\\n    uint256 public slippage;\\n\\n    /**\\n     * @dev Tracks the total amount of DragonX used for purchasing BabyDragonX tokens.\\n     * This accumulates the DragonX spent over time in buy transactions.\\n     */\\n    uint256 public totalDragonUsedForBuys;\\n\\n    /**\\n     * @dev Tracks the total amount of BabyDragonX tokens purchased and burned.\\n     * This accumulates the BabyDragonX bought and subsequently burned over time.\\n     */\\n    uint256 public totalBabyDragonBought;\\n\\n    /**\\n     * @dev Tracks the current cap on the amount of DragonX that can be used per individual swap.\\n     * This cap can be adjusted to control the maximum size of each swap transaction.\\n     */\\n    uint256 public capPerSwap;\\n\\n    /**\\n     * @dev Records the timestamp of the last time the buy and burn function was called.\\n     * Used for tracking the interval between successive buy and burn operations.\\n     */\\n    uint256 public lastCallTs;\\n\\n    /**\\n     * @dev Specifies the interval in seconds between allowed buy and burn operations.\\n     * This sets a minimum time gap that must elapse before the buy and burn function can be called again.\\n     */\\n    uint256 public interval;\\n\\n    /**\\n     * @dev Specifies the value in minutes for the timed-weighted average when\\n     * calculating the BabyDragonX price (in DragonX)\\n     * for slippage protection.\\n     */\\n    uint32 private _babyDragonPriceTwa;\\n\\n    // -----------------------------------------\\n    // Events\\n    // -----------------------------------------\\n    /**\\n     * @notice Emitted when BabyDragonX tokens are purchased and burned.\\n     * @param dragon The amount of DragonX used for the purchase.\\n     * @param babyDragon The amount BabyDragonX tokens bought.\\n     * @param caller The address of the caller who initiated the transaction.\\n     */\\n    event BabyDragonBoughtAndBurned(\\n        uint256 indexed dragon,\\n        uint256 indexed babyDragon,\\n        address indexed caller\\n    );\\n\\n    // -----------------------------------------\\n    // Errors\\n    // -----------------------------------------\\n    /**\\n     * @dev Thrown when the provided address is address(0)\\n     */\\n    error InvalidBabyDragonAddress();\\n\\n    /**\\n     * @dev Thrown when the function caller is not authorized or expected.\\n     */\\n    error InvalidCaller();\\n\\n    /**\\n     * @dev Thrown when trying to buy BabyDragonX but the cooldown period is still active.\\n     */\\n    error CooldownPeriodActive();\\n\\n    /**\\n     * @dev Thrown when trying to buy BabyDragonX but there is no DragonX in the contract.\\n     */\\n    error NoDragonToBuyBabyDragon();\\n\\n    /**\\n     * @dev Thrown when trying to call  buy and burn while trading is not yet active.\\n     */\\n    error TradingNotEnabled();\\n\\n    // -----------------------------------------\\n    // Modifiers\\n    // -----------------------------------------\\n\\n    // -----------------------------------------\\n    // Constructor\\n    // -----------------------------------------\\n    /**\\n     * @notice Creates a new instance of the contract.\\n     * @dev Initializes the contract with predefined values for `capPerSwap`, `slippage`, and `interval`.\\n     *      Inherits from Ownable and sets the contract deployer as the initial owner.\\n     *      - Sets `capPerSwap` to 1000 DragonX, limiting the maximum amount of DragonX that can be used in each swap.\\n     *      - Sets `slippage` to 5%, defining the maximum allowable price movement in a swap transaction.\\n     *      - Sets `interval` to 15 minutes, establishing the minimum time between consecutive buy and burn operations.\\n     *      - Sets `_babyDragonPriceTwa` to 15 minutes, establishing a protection against sandwich-attacks.\\n     */\\n    constructor() Ownable(msg.sender) {\\n        // Set the cap to approx 1000 DragonX per day (called every hour)\\n        capPerSwap = 1000 ether;\\n        // Set the maximum slippage to 5%\\n        slippage = 5;\\n        // Set the minimum interval between buy and burn calls to 1 hour\\n        interval = 60 * 60;\\n        // Set TWA to 15 mins\\n        _babyDragonPriceTwa = 15;\\n    }\\n\\n    // -----------------------------------------\\n    // Receive function\\n    // -----------------------------------------\\n\\n    // -----------------------------------------\\n    // Fallback function\\n    // -----------------------------------------\\n\\n    // -----------------------------------------\\n    // External functions\\n    // -----------------------------------------\\n    /**\\n     * @notice Executes a swap of DragonX for BabyDragonX tokens, applies incentive fees,\\n     * and updates relevant contracts and state.\\n     * @dev This function:\\n     *      1. Checks for valid BabyDragonX address.\\n     *      2. Ensures the caller is not a contract to prevent bot interactions.\\n     *      3. Enforces a cooldown period between successive calls.\\n     *      4. Calculates the DragonX amount to be used for the swap based on the contract's\\n     *         DragonX balance and cap per swap.\\n     *      5. Deducts an incentive fee from the DragonX amount.\\n     *      6. Approves the swap router to spend DragonX.\\n     *      7. Calculates the minimum amount of BabyDragonX to be received in the swap, accounting for slippage.\\n     *      8. Performs the swap via the swap router.\\n     *      9. Burns the bought BabyDragonX.\\n     *      11. Updates state variables tracking DragonX used and BabyDragonX bought.\\n     *      12. Sends the incentive fee to the message sender.\\n     *      13. Emits a `BabyDragonBoughtAndBurned` event.\\n     * @return amountOut The amount of BabyDragonX tokens bought in the swap.\\n     * @custom:revert InvalidBabyDragonAddress If the BabyDragonX address is not set.\\n     * @custom:revert InvalidCaller If the function caller is a contract.\\n     * @custom:revert CooldownPeriodActive If the function is called again before the cooldown period has elapsed.\\n     * @custom:revert NoDragonToBuyBabyDragon If there is no DragonX available to buy BabyDragonX after\\n     * deducting the incentive fee.\\n     */\\n    function buyAndBurnBabyDragonX()\\n        external\\n        nonReentrant\\n        returns (uint256 amountOut)\\n    {\\n        // Cache state variables\\n        address babyDragonAddress_ = babyDragonAddress;\\n\\n        // Ensure BabyDragonX address has been set\\n        if (babyDragonAddress_ == address(0)) {\\n            revert InvalidBabyDragonAddress();\\n        }\\n        //prevent contract accounts (bots) from calling this function\\n        if (msg.sender != tx.origin) {\\n            revert InvalidCaller();\\n        }\\n\\n        //a minium gap of `interval` between each call\\n        if (block.timestamp - lastCallTs <= interval) {\\n            revert CooldownPeriodActive();\\n        }\\n        lastCallTs = block.timestamp;\\n\\n        ISwapRouter swapRouter = ISwapRouter(UNI_SWAP_ROUTER);\\n        IDragonX dragonX = IDragonX(DRAGONX_ADDRESS);\\n        BabyDragonX babyDragonX = BabyDragonX(babyDragonAddress_);\\n\\n        if (!babyDragonX.tradingEnabled()) {\\n            revert TradingNotEnabled();\\n        }\\n\\n        //  Balance of this contract\\n        uint256 amountIn = dragonX.balanceOf(address(this));\\n        uint256 dragonCap = capPerSwap;\\n        if (amountIn > dragonCap) {\\n            amountIn = dragonCap;\\n        }\\n\\n        uint256 incentiveFee = (amountIn * INCENTIVE_FEE) / BASIS;\\n        amountIn -= incentiveFee;\\n\\n        if (amountIn == 0) {\\n            revert NoDragonToBuyBabyDragon();\\n        }\\n\\n        // Approve the router to spend WETH\\n        dragonX.safeIncreaseAllowance(address(swapRouter), amountIn);\\n\\n        // The minimum amount to receive\\n        uint256 amountOutMinimum = calculateMinimumBabyDragonAmount(amountIn);\\n\\n        // Swap parameters\\n        ISwapRouter.ExactInputSingleParams memory params = ISwapRouter\\n            .ExactInputSingleParams({\\n                tokenIn: DRAGONX_ADDRESS,\\n                tokenOut: babyDragonAddress_,\\n                fee: FEE_TIER,\\n                recipient: address(this),\\n                deadline: block.timestamp + 1,\\n                amountIn: amountIn,\\n                amountOutMinimum: amountOutMinimum,\\n                sqrtPriceLimitX96: 0\\n            });\\n\\n        // Execute the swap\\n        amountOut = swapRouter.exactInputSingle(params);\\n\\n        // Send incentive fee\\n        dragonX.transfer(msg.sender, incentiveFee);\\n\\n        // Burn the bought BabyDragonX amount\\n        babyDragonX.burn(amountOut);\\n\\n        // Update state\\n        totalDragonUsedForBuys += amountIn;\\n        totalBabyDragonBought += amountOut;\\n\\n        // Emit events\\n        emit BabyDragonBoughtAndBurned(amountIn, amountOut, msg.sender);\\n    }\\n\\n    /**\\n     * @dev Retrieves the total amount of DragonX available to buy BabyDragonX.\\n     * This function queries the balance of DragonX held by the contract itself.\\n     *\\n     * @notice Use this function to get the total DragonX available for purchasing BabyDragonX.\\n     *\\n     * @return balance The total amount of DragonX available, represented as a uint256.\\n     */\\n    function totalDragonForBuy() external view returns (uint256 balance) {\\n        return IDragonX(DRAGONX_ADDRESS).balanceOf(address(this));\\n    }\\n\\n    /**\\n     * @dev Calculates the incentive fee for executing the buyAndBurnBabyDragonX function.\\n     * The fee is computed based on the DragonX amount designated for the next BabyDragonX purchase,\\n     * using the `dragonForNextBuyAndBurn` function, and applying a predefined incentive fee rate.\\n     *\\n     * @notice Used to determine the incentive fee for running the buyAndBurnBabyDragonX function.\\n     *\\n     * @return fee The calculated incentive fee, represented as a uint256.\\n     * This value is calculated by taking the product of `dragonForNextBuyAndBurn()` and\\n     * `INCENTIVE_FEE`, then dividing by `BASIS` to normalize the fee calculation.\\n     */\\n    function incentiveFeeForRunningBuyAndBurnBabyDragonX()\\n        external\\n        view\\n        returns (uint256 fee)\\n    {\\n        uint256 forBuy = dragonForNextBuyAndBurn();\\n        fee = (forBuy * INCENTIVE_FEE) / BASIS;\\n    }\\n\\n    /**\\n     * @notice Sets the address of the BabyDragonX contract\\n     * @dev This function allows the contract owner to update the address of the BabyDragonX contract.\\n     * It includes a check to prevent setting the address to the zero address.\\n     * @param babyDragonAddress_ The new address to be set for the contract.\\n     * @custom:revert InvalidAddress If the provided address is the zero address.\\n     */\\n    function setBabyDragonContractAddress(\\n        address babyDragonAddress_\\n    ) external onlyOwner {\\n        if (babyDragonAddress_ == address(0)) {\\n            revert InvalidBabyDragonAddress();\\n        }\\n        babyDragonAddress = babyDragonAddress_;\\n    }\\n\\n    /**\\n     * @notice set DragonX cap amount per buynburn call. Only callable by owner address.\\n     * @param amount amount in 18 decimals\\n     */\\n    function setCapPerSwap(uint256 amount) external onlyOwner {\\n        capPerSwap = amount;\\n    }\\n\\n    /**\\n     * @notice set slippage % for buy and burn minimum received amount. Only callable by owner address.\\n     * @param amount amount from 0 - 50\\n     */\\n    function setSlippage(uint256 amount) external onlyOwner {\\n        require(amount >= 5 && amount <= 15, \\\"5-15% only\\\");\\n        slippage = amount;\\n    }\\n\\n    /**\\n     * @notice set the buy and burn interval in seconds. Only callable by owner address.\\n     * @param secs amount in seconds\\n     */\\n    function setBuyAndBurnInterval(uint256 secs) external onlyOwner {\\n        require(secs >= 60 && secs <= 43200, \\\"1m-12h only\\\");\\n        interval = secs;\\n    }\\n\\n    /**\\n     * @notice set the TWA value used when calculting the BabyDragonX price. Only callable by owner address.\\n     * @param mins TWA in minutes\\n     */\\n    function setBabyDragonPriceTwa(uint32 mins) external onlyOwner {\\n        require(mins >= 5 && mins <= 60, \\\"5m-1h only\\\");\\n        _babyDragonPriceTwa = mins;\\n    }\\n\\n    // -----------------------------------------\\n    // Public functions\\n    // -----------------------------------------\\n    /**\\n     * Get a quote for BabyDragonX for a given amount of DragonX\\n     * @notice Uses Time-Weighted Average Price (TWAP) and falls back to the pool price if TWAP is not available.\\n     * @param baseAmount The amount of DragonX for which the BabyDragonX quote is needed.\\n     * @return quote The amount of BabyDraognX.\\n     * @dev This function computes the TWAP of BabyDragonX in DragonX using the Uniswap V3 pool for\\n     *      DragonX/BabyDragonX and the Oracle Library. Steps to compute the TWAP:\\n     *        1. Compute the pool address with the PoolAddress library using the Uniswap factory address,\\n     *           the addresses of DragonX and BabyDragonX, and the fee tier.\\n     *        2. Determine the period for the TWAP calculation, limited by the oldest\\n     *           available observation from the Oracle.\\n     *        3. If `secondsAgo` is zero, use the current price from the pool; otherwise, consult the Oracle Library\\n     *           for the arithmetic mean tick for the calculated period.\\n     *        4. Convert the arithmetic mean tick to the square root price (sqrtPriceX96) and calculate the price\\n     *           based on the specified baseAmount of ETH.\\n     */\\n    function getBabyDragonQuoteForDragon(\\n        uint256 baseAmount\\n    ) public view returns (uint256 quote) {\\n        address poolAddress = PoolAddress.computeAddress(\\n            UNI_FACTORY,\\n            PoolAddress.getPoolKey(DRAGONX_ADDRESS, babyDragonAddress, FEE_TIER)\\n        );\\n        uint32 secondsAgo = _babyDragonPriceTwa * 60;\\n        uint32 oldestObservation = OracleLibrary.getOldestObservationSecondsAgo(\\n            poolAddress\\n        );\\n\\n        // Limit to oldest observation\\n        if (oldestObservation < secondsAgo) {\\n            secondsAgo = oldestObservation;\\n        }\\n\\n        uint160 sqrtPriceX96;\\n        if (secondsAgo == 0) {\\n            // Default to current price\\n            IUniswapV3Pool pool = IUniswapV3Pool(poolAddress);\\n            (sqrtPriceX96, , , , , , ) = pool.slot0();\\n        } else {\\n            // Consult the Oracle Library for TWAP\\n            (int24 arithmeticMeanTick, ) = OracleLibrary.consult(\\n                poolAddress,\\n                secondsAgo\\n            );\\n\\n            // Convert tick to sqrtPriceX96\\n            sqrtPriceX96 = TickMath.getSqrtRatioAtTick(arithmeticMeanTick);\\n        }\\n\\n        return\\n            OracleLibrary.getQuoteForSqrtRatioX96(\\n                sqrtPriceX96,\\n                baseAmount,\\n                DRAGONX_ADDRESS,\\n                babyDragonAddress\\n            );\\n    }\\n\\n    /**\\n     * Calculate Minimum Amount Out for swapping DragonX to BabyDragonX\\n     * @notice Calculates the minimum amount of BabyDragonX tokens expected from a single-hop swap\\n     *         starting with DragonX.\\n     * @dev This function calculates the minimum amount of BabyDragonX tokens that should be received when\\n     *      swapping a given amount of DragonX for BabyDragonX, considering a specified slippage.\\n     *      It involves the following steps:\\n     *        1. Get a quote for BabyDragonX with the given DragonX amount.\\n     *        2. Adjust the BabyDragonX amount for slippage to get the minimum amount out.\\n     * @param amountIn The amount of DragonX to be swapped.\\n     * @return amountOutMinimum The minimum amount of BabyDragonX tokens expected from the swap.\\n     */\\n    function calculateMinimumBabyDragonAmount(\\n        uint256 amountIn\\n    ) public view returns (uint256) {\\n        // Calculate the expected amount of TITAN for the given amount of ETH\\n        uint256 expectedTitanAmount = getBabyDragonQuoteForDragon(amountIn);\\n\\n        // Adjust for slippage (applied uniformly across both hops)\\n        uint256 adjustedTitanAmount = (expectedTitanAmount * (100 - slippage)) /\\n            100;\\n\\n        return adjustedTitanAmount;\\n    }\\n\\n    /**\\n     * @dev Determines the DragonX amount available for the next call to buyAndBurnBabyDragonX.\\n     * This amount may be capped by a predefined limit `capPerSwap`.\\n     *\\n     * @notice Provides the amount of DragonX to be used in the next BabyDragonX purchase.\\n     *\\n     * @return forBuy The amount of DragonX available for the next buy, possibly subject to a cap.\\n     * If the balance exceeds `capPerSwap`, `forBuy` is set to `capPerSwap`.\\n     */\\n    function dragonForNextBuyAndBurn() public view returns (uint256 forBuy) {\\n        // Cache state variables\\n        uint256 capPerSwap_ = capPerSwap;\\n\\n        IERC20 dragonX = IERC20(DRAGONX_ADDRESS);\\n        forBuy = dragonX.balanceOf(address(this));\\n        if (forBuy > capPerSwap_) {\\n            forBuy = capPerSwap_;\\n        }\\n    }\\n\\n    // -----------------------------------------\\n    // Internal functions\\n    // -----------------------------------------\\n\\n    // -----------------------------------------\\n    // Private functions\\n    // -----------------------------------------\\n}\\n\"\r\n    },\r\n    \"contracts/BabyDragonX.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.24;\\n\\n// UniSwap\\nimport \\\"@uniswap/v3-core/contracts/interfaces/IUniswapV3Pool.sol\\\";\\n\\n// OpenZeppelin\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable2Step.sol\\\";\\n\\n// lib\\nimport \\\"./lib/Constants.sol\\\";\\nimport \\\"./lib/interfaces/IDragonX.sol\\\";\\nimport \\\"./lib/interfaces/ITitanX.sol\\\";\\nimport \\\"./lib/interfaces/INonfungiblePositionManager.sol\\\";\\n\\n/*\\n * @title The BabyDragonX Contract\\n * @author The DragonX and BabyDragon devs\\n */\\ncontract BabyDragonX is ERC20, Ownable2Step {\\n    // -----------------------------------------\\n    // Type declarations\\n    // -----------------------------------------\\n    /**\\n     * @dev Indicates if a contract was initialized\\n     */\\n    enum Initialized {\\n        No,\\n        Yes\\n    }\\n\\n    /**\\n     * @dev Indicates if minting was closed\\n     */\\n    enum MintingFinalized {\\n        No,\\n        Yes\\n    }\\n\\n    /**\\n     * @dev Represents the information about a Uniswap V3 liquidity pool position token.\\n     * This struct is used to store details of the position token, specifically for a single full range position.\\n     */\\n    struct LpTokenInfo {\\n        uint80 tokenId; // The ID of the position token in the Uniswap V3 pool.\\n        uint128 liquidity; // The amount of liquidity provided in the position.\\n        int24 tickLower; // The lower end of the price range for the position.\\n        int24 tickUpper; // The upper end of the price range for the position.\\n    }\\n\\n    // -----------------------------------------\\n    // State variables\\n    // -----------------------------------------\\n    /**\\n     * @dev Begin of the mint phase\\n     */\\n    uint256 public mintPhaseBegin;\\n\\n    /**\\n     * @dev The end of the mint phase\\n     */\\n    uint256 public mintPhaseEnd;\\n\\n    /**\\n     * @dev The address of the main LP for DragonX / BabyDragon\\n     */\\n    address public poolAddress;\\n\\n    /**\\n     * @notice true if the address is a LP Pool\\n     */\\n    mapping(address => bool) public pools;\\n\\n    /**\\n     * @dev Indicates if BabyDragon contract was initialized\\n     */\\n    Initialized public initialized;\\n\\n    /**\\n     * @dev Indicates if the mint phase was finalized\\n     */\\n    MintingFinalized public mintingFinalized;\\n\\n    /**\\n     * @dev Total DragonX send to BabyDragonX buy and burn\\n     */\\n    uint256 public totalDragonSentToBabyDragonBuyAndBurn;\\n\\n    /**\\n     * @dev Total BabyDragon burned through LP fees\\n     */\\n    uint256 public totalBabyDragonBurned;\\n\\n    /**\\n     * @dev Interacting with LP pools is disabled while minting\\n     */\\n    bool public tradingEnabled;\\n\\n    /**\\n     * @dev Stores the position token information, specifically for a single full range position in the Uniswap V3 pool.\\n     */\\n    LpTokenInfo public lpTokenInfo;\\n\\n    /**\\n     * @dev The BabyDragonX buy and burn address (smart contract executing buy and burns)\\n     */\\n    address public babyDragonBuyAndBurnAddress;\\n\\n    // -----------------------------------------\\n    // Events\\n    // -----------------------------------------\\n    /**\\n     * @notice Emitted when fees are collected in both DragonX and BabyDragon tokens.\\n     * @dev This event is triggered when a fee collection transaction is completed.\\n     * @param dragon The amount of DragonX collected as fees.\\n     * @param babyDragon The amount of BabyDragon tokens collected as fees.\\n     * @param caller The address of the user or contract that initiated the fee collection.\\n     */\\n    event CollectedFees(\\n        uint256 indexed dragon,\\n        uint256 indexed babyDragon,\\n        address indexed caller\\n    );\\n\\n    // -----------------------------------------\\n    // Errors\\n    // -----------------------------------------\\n\\n    // -----------------------------------------\\n    // Modifiers\\n    // -----------------------------------------\\n\\n    // -----------------------------------------\\n    // Constructor\\n    // -----------------------------------------\\n    constructor(\\n        address babyDragonBuyAndBurnAddress_\\n    ) ERC20(\\\"Baby DragonX\\\", \\\"BDX\\\") Ownable(msg.sender) {\\n        require(babyDragonBuyAndBurnAddress_ != address(0), \\\"invalid address\\\");\\n        // set other states\\n        initialized = Initialized.No;\\n        mintingFinalized = MintingFinalized.No;\\n        tradingEnabled = false;\\n        babyDragonBuyAndBurnAddress = babyDragonBuyAndBurnAddress_;\\n    }\\n\\n    // -----------------------------------------\\n    // Receive function\\n    // -----------------------------------------\\n\\n    // -----------------------------------------\\n    // Fallback function\\n    // -----------------------------------------\\n\\n    // -----------------------------------------\\n    // External functions\\n    // -----------------------------------------\\n    /**\\n     * Mint BabyDragonX Tokens\\n     * @dev Mints BabyDragonX tokens in exchange for TitanX tokens based on a dynamic minting ratio.\\n     * This function allows users to contribute TitanX tokens during the mint phase of\\n     * DragonX and receive BabyDragonX tokens in return.\\n     * The mint ratio adjusts according to the timestamp. It also allocates a\\n     * portion of TitanX tokens for team allocation,\\n     * expenses, and DragonX genesis share before minting.\\n     *\\n     * Requirements:\\n     * - The contract must be initialized.\\n     * - The minting phase must have started and not yet ended.\\n     *\\n     * Emits a {Transfer} event from the zero address to the `msg.sender` indicating the minting of BabyDragonX tokens.\\n     *\\n     * @param titanAmount The amount of TitanX tokens the user wishes to contribute for minting BabyDragonX tokens.\\n     * The function calculates the allocation for different purposes, mints DragonX tokens with a portion of TitanX,\\n     * and finally mints BabyDragonX tokens based on the calculated ratio.\\n     */\\n    function mint(uint256 titanAmount) external {\\n        IDragonX dragonX = IDragonX(DRAGONX_ADDRESS);\\n        ITitanX titanX = ITitanX(TITANX_ADDRESS);\\n\\n        require(initialized == Initialized.Yes, \\\"not initialized\\\");\\n        require(titanAmount > 0, \\\"invalid amount\\\");\\n\\n        // Align the mint-ratio with DragonX\\n        // This function will revert if minting has ended or not started yet\\n        uint256 ratio = getMintRatio();\\n\\n        // 7% Baby Dragon Team Allocation\\n        uint256 teamAllocation = (titanAmount * 700) / BASIS;\\n        titanX.transferFrom(\\n            msg.sender,\\n            BABY_DRAGON_TEAM_ADDRESS,\\n            teamAllocation\\n        );\\n\\n        // 5% Baby Dragon Expenses\\n        uint256 expenses = (titanAmount * 500) / BASIS;\\n        titanX.transferFrom(msg.sender, BABY_DRAGON_EXPENSES_ADDRESS, expenses);\\n\\n        // Send 1% of TitanX to DragonX genesis\\n        uint256 dragonGenesisShare = (titanAmount * 100) / BASIS;\\n        titanX.transferFrom(\\n            msg.sender,\\n            DRAGONX_GENESIS_ADDRESS,\\n            dragonGenesisShare\\n        );\\n\\n        // Mint DragonX with 87% of TitanX (accumulate in this contract)\\n        uint256 titanToMintDragon = titanAmount -\\n            teamAllocation -\\n            expenses -\\n            dragonGenesisShare;\\n        titanX.transferFrom(msg.sender, address(this), titanToMintDragon);\\n        titanX.approve(DRAGONX_ADDRESS, titanToMintDragon);\\n        dragonX.mint(titanToMintDragon);\\n\\n        // Mint BabyDragon\\n        uint256 babyDragonToMint = (titanAmount * ratio) / BASIS;\\n        _mint(msg.sender, babyDragonToMint);\\n    }\\n\\n    /**\\n     * Collects fees accrued from liquidity provision in DragonX and BabyDragon tokens.\\n     * @dev This function handles the collection and burning of fees generated by liquidity pools.\\n     * It determines the amounts of DragonX and BabyDragon tokens collected as fees,\\n     * burns the collected BabyDragon tokens, and sends the collected DragonX tokens to the\\n     * BabyDragon buy and burn address.\\n     *\\n     * Emits a {CollectedFees} event indicating the amounts of tokens collected and burned, and the caller's address.\\n     */\\n    function collectFees() external {\\n        require(initialized == Initialized.Yes, \\\"not initialized\\\");\\n\\n        // Cache state variables\\n        address dragonAddress = DRAGONX_ADDRESS;\\n        address babyDragonAddress = address(this);\\n\\n        (uint256 amount0, uint256 amount1) = _collectFees();\\n\\n        uint256 dragon;\\n        uint256 babyDragon;\\n\\n        if (dragonAddress < babyDragonAddress) {\\n            dragon = amount0;\\n            babyDragon = amount1;\\n        } else {\\n            babyDragon = amount0;\\n            dragon = amount1;\\n        }\\n\\n        // Burn BabyDragon\\n        totalBabyDragonBurned += babyDragon;\\n        _burn(address(this), babyDragon);\\n\\n        // Burn DragonX\\n        IDragonX dragonX = IDragonX(dragonAddress);\\n        totalDragonSentToBabyDragonBuyAndBurn += dragon;\\n        dragonX.transfer(babyDragonBuyAndBurnAddress, dragon);\\n\\n        emit CollectedFees(dragon, babyDragon, msg.sender);\\n    }\\n\\n    /**\\n     * @notice Allows users to burn their BabyDragonX tokens, reducing the total supply.\\n     * @dev Burns a specific amount of BabyDragonX tokens from the caller's balance.\\n     * Updates the `totalBabyDragonBurned` state to reflect the burned tokens.\\n     *\\n     * @param amount The amount of BabyDragonX tokens to burn from the caller's balance.\\n     *\\n     * Requirements:\\n     * - The caller must have at least `amount` tokens in their balance.\\n     */\\n    function burn(uint256 amount) external {\\n        require(amount > 0, \\\"invalid amount\\\");\\n        totalBabyDragonBurned += amount;\\n        _burn(msg.sender, amount);\\n    }\\n\\n    /**\\n     * Finalizes the minting phase, allocates tokens for liquidity, grants, and rewards, and enables trading.\\n     * @dev This function can only be called once by the contract owner after\\n     * the minting phase has ended.\\n     * It performs token allocations to various addresses and pools, mints additional\\n     * BabyDragonX tokens for grants and rewards, adds liquidity to the UniSwap pool,\\n     * and enables trading by updating the contract state.\\n     *\\n     * Requirements:\\n     * - The minting phase has ended.\\n     * - The function must not have been previously called.\\n     * - Can only be called by the contract owner.\\n     */\\n    function finalizeMint() external onlyOwner {\\n        require(block.timestamp > mintPhaseEnd, \\\"minting still open\\\");\\n        require(\\n            mintingFinalized == MintingFinalized.No,\\n            \\\"minting already finalized\\\"\\n        );\\n\\n        IDragonX dragonX = IDragonX(DRAGONX_ADDRESS);\\n        uint256 dragonBalance = dragonX.balanceOf(address(this));\\n\\n        // Allocate 50% to liquidity pool\\n        uint256 liquidityTopUp = (dragonBalance * 5000) / BASIS;\\n\\n        // Allocate 3% to BabyDragonX Genesis\\n        uint256 genesisShare = (dragonBalance * 300) / BASIS;\\n        dragonX.transfer(BABY_DRAGON_TEAM_ADDRESS, genesisShare);\\n\\n        // Allocate 47% to BabyDragonX buy and burn\\n        uint256 dragonForBabyDragonBurnShare = dragonBalance -\\n            liquidityTopUp -\\n            genesisShare;\\n        dragonX.transfer(\\n            babyDragonBuyAndBurnAddress,\\n            dragonForBabyDragonBurnShare\\n        );\\n        totalDragonSentToBabyDragonBuyAndBurn += dragonForBabyDragonBurnShare;\\n\\n        // Mint additional 4% for grants\\n        uint256 totalBabyDragonMinted = totalSupply();\\n        _mint(BABY_DRAGON_GRANT_ADDRESS, (totalBabyDragonMinted * 400) / BASIS);\\n\\n        // Mint additional 10% for future rewards\\n        _mint(\\n            BABY_DRAGON_FUTURE_REWARDS_ADDRESS,\\n            (totalBabyDragonMinted * 1000) / BASIS\\n        );\\n\\n        // Prepare LP\\n        uint256 amount0Desired = liquidityTopUp;\\n        uint256 amount1Desired = liquidityTopUp;\\n\\n        // mint BabyDragon for LP\\n        _mint(address(this), liquidityTopUp);\\n\\n        // Approve the Uniswap non-fungible position manager to spend DragonX.\\n        dragonX.approve(UNI_NONFUNGIBLEPOSITIONMANAGER, liquidityTopUp);\\n\\n        // Approve the UniSwap non-fungible position manager to spend BabyDragon.\\n        _approve(address(this), UNI_NONFUNGIBLEPOSITIONMANAGER, liquidityTopUp);\\n\\n        // Top Up Liquidity\\n        (uint128 liquidity, , ) = _addLiquidity(amount0Desired, amount1Desired);\\n        lpTokenInfo.liquidity = liquidity;\\n\\n        // Burn remaining DragonX\\n        if (dragonX.balanceOf(address(this)) > 0) {\\n            dragonX.burn();\\n        }\\n\\n        // Burn remaining BabyDragon\\n        uint256 remainingBabyDragon = balanceOf(address(this));\\n        if (remainingBabyDragon > 0) {\\n            totalBabyDragonBurned += remainingBabyDragon;\\n            _burn(address(this), remainingBabyDragon);\\n        }\\n\\n        // enable trading\\n        tradingEnabled = true;\\n\\n        // Update state\\n        mintingFinalized = MintingFinalized.Yes;\\n    }\\n\\n    /**\\n     * @notice Initializes the contract by setting up initial liquidity in the Uniswap pool and enabling minting.\\n     * @dev This function sets the initial liquidity parameters for the BabyDragonX and\\n     * DragonX tokens in the Uniswap pool. It mints initial liquidity tokens to this contract,\\n     * approves the Uniswap non-fungible position manager to spend the tokens,\\n     * and creates the initial liquidity pool if it doesn't exist already.\\n     * It also sets the minting phase's beginning and end times. This function can only be\\n     * called once by the contract owner.\\n     *\\n     * @param initialLiquidityAmount The amount of DragonX tokens to be added as initial liquidity to the Uniswap pool.\\n     * The function automatically calculates and mints the amount of BabyDragonX tokens for the initial liquidity,\\n     * assuming an initial price ratio of 1 DragonX to 1 BabyDragonX.\\n     *\\n     * Requirements:\\n     * - The contract must not have been initialized before.\\n     * - Only the contract owner can call this function.\\n     */\\n    function initialize(uint256 initialLiquidityAmount) external onlyOwner {\\n        require(initialized == Initialized.No, \\\"already initialized\\\");\\n        IDragonX dragonX = IDragonX(DRAGONX_ADDRESS);\\n\\n        // Mint initial liquidity\\n        _mint(address(this), initialLiquidityAmount);\\n\\n        // Setup initial liquidity pool\\n        // Transfer the specified amount of DragonX tokens from the caller to this contract.\\n        dragonX.transferFrom(msg.sender, address(this), initialLiquidityAmount);\\n\\n        // Approve the Uniswap non-fungible position manager to spend DragonX.\\n        dragonX.approve(UNI_NONFUNGIBLEPOSITIONMANAGER, initialLiquidityAmount);\\n\\n        // Approve the UniSwap non-fungible position manager to spend BabyDragon.\\n        _approve(\\n            address(this),\\n            UNI_NONFUNGIBLEPOSITIONMANAGER,\\n            initialLiquidityAmount\\n        );\\n\\n        // Create the initial liquidity pool in Uniswap V3.\\n        _createPool(initialLiquidityAmount);\\n\\n        // Mint the initial position in the pool.\\n        _mintInitialPosition(initialLiquidityAmount);\\n\\n        // Align mint phase begin to midnight UTC\\n        uint256 currentTimestamp = block.timestamp;\\n        uint256 secondsUntilMidnight = 86400 - (currentTimestamp % 86400);\\n\\n        // The mint phase begins at midnight\\n        mintPhaseBegin = currentTimestamp + secondsUntilMidnight;\\n\\n        // Minting will be open for 14 days\\n        mintPhaseEnd = mintPhaseBegin + 14 days;\\n\\n        // Update states\\n        initialized = Initialized.Yes;\\n    }\\n\\n    /**\\n     * @notice Registers or deregisters an address as a liquidity pool.\\n     * @dev Allows the contract owner to mark an address as a recognized liquidity pool\\n     * or remove it from the list of recognized pools. This function is critical for managing\\n     * which pools are considered for trading and can help in disabling trading in the minting phase.\\n     *\\n     * @param poolAddress_ The address of the liquidity pool to be registered or deregistered.\\n     * @param isPool A boolean indicating whether the address should be considered a\\n     * liquidity pool (true) or not (false).\\n     *\\n     * Requirements:\\n     * - Only the contract owner can call this function.\\n     * - This function has no effect once minting is finalized and trading is enabled.\\n     */\\n    function setPool(address poolAddress_, bool isPool) external onlyOwner {\\n        require(poolAddress_ != address(0), \\\"invalid address\\\");\\n        pools[poolAddress_] = isPool;\\n    }\\n\\n    /**\\n     * @notice Sets the BabyDragon buy and burn address to a new address.\\n     * @dev Allows the contract owner to update the address where DragonX tokens are\\n     * sent for buying and burning BabyDragonX tokens.\\n     * This can be used to change the destination address for the DragonX tokens\\n     * collected as fees and used for burning.\\n     *\\n     * @param babyDragonBuyAndBurnAddress_ The new address for buying and burning BabyDragonX tokens.\\n     *\\n     * Requirements:\\n     * - Only the contract owner can call this function.\\n     * - The new address must not be the zero address.\\n     */\\n    function setBabyDragonBuyAndBurnAddress(\\n        address babyDragonBuyAndBurnAddress_\\n    ) external onlyOwner {\\n        require(babyDragonBuyAndBurnAddress_ != address(0), \\\"invalid address\\\");\\n        babyDragonBuyAndBurnAddress = babyDragonBuyAndBurnAddress_;\\n    }\\n\\n    // -----------------------------------------\\n    // Public functions\\n    // -----------------------------------------\\n    /**\\n     * @notice Calculates the current mint ratio for BabyDragonX tokens based on the current\\n     * phase of the minting period.\\n     * @dev Returns a mint ratio that determines how many BabyDragonX tokens can be minted per unit of TitanX.\\n     * The mint ratio changes depending on which week of the minting phase the function is called.\\n     *\\n     * The mint ratio starts at 1 for the first week and adjusts to 0.95 for the second week.\\n     * This function ensures that the ratio is only accessible during the minting phase to enforce the minting schedule.\\n     *\\n     * Requirements:\\n     * - The current timestamp must be within the minting phase period, between `mintPhaseBegin` and `mintPhaseEnd`.\\n     *\\n     * @return ratio The current mint ratio\\n     */\\n    function getMintRatio() public view returns (uint256 ratio) {\\n        require(initialized == Initialized.Yes, \\\"not yet initialized\\\");\\n        require(block.timestamp >= mintPhaseBegin, \\\"minting not started\\\");\\n        require(block.timestamp <= mintPhaseEnd, \\\"minting has ended\\\");\\n\\n        if (block.timestamp < mintPhaseBegin + 7 days) {\\n            // week 1\\n            ratio = 10_000;\\n        } else {\\n            // week 2\\n            ratio = 9_500;\\n        }\\n    }\\n\\n    // -----------------------------------------\\n    // Internal functions\\n    // -----------------------------------------\\n    /**\\n     * @dev Overrides the ERC20 `_update` function to enforce trading restrictions.\\n     * This internal function is called during every transfer operation to check if trading is enabled\\n     * and whether the sender or recipient is a recognized liquidity pool address.\\n     * It ensures that trading through LP pools is only possible when explicitly enabled.\\n     *\\n     * @param from The address sending the tokens.\\n     * @param to The address receiving the tokens.\\n     * @param value The amount of tokens being transferred.\\n     *\\n     * Requirements:\\n     * - Trading must be enabled if either `from` or `to` is a recognized liquidity pool address.\\n     * - Always allow the contract itself to interact with the LP pool.\\n     */\\n    function _update(\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal override {\\n        // Allow the contract itself to always interact without checking if trading is enabled\\n        if (from != address(this) && to != address(this)) {\\n            require(\\n                (!pools[from] && !pools[to]) || tradingEnabled,\\n                \\\"trading was not enabled yet\\\"\\n            );\\n        }\\n\\n        super._update(from, to, value);\\n    }\\n\\n    // -----------------------------------------\\n    // Private functions\\n    // -----------------------------------------\\n    /**\\n     * @notice Sorts tokens in ascending order, as required by Uniswap for identifying a pair.\\n     * @dev This function arranges the token addresses in ascending order and assigns\\n     * liquidity in a ratio of 1:1\\n     * @param initialLiquidityAmount The amount of liquidity to assign to each token.\\n     * @return token0 The token address that is numerically smaller.\\n     * @return token1 The token address that is numerically larger.\\n     * @return amount0 The liquidity amount for `token0`.\\n     * @return amount1 The liquidity amount for `token1`.\\n     */\\n    function _getTokenConfig(\\n        uint256 initialLiquidityAmount\\n    )\\n        private\\n        view\\n        returns (\\n            address token0,\\n            address token1,\\n            uint256 amount0,\\n            uint256 amount1\\n        )\\n    {\\n        // Cache state variables\\n        address dragonAddress = DRAGONX_ADDRESS;\\n        address babyDragonAddress = address(this);\\n\\n        amount0 = initialLiquidityAmount;\\n        amount1 = initialLiquidityAmount;\\n\\n        if (dragonAddress < babyDragonAddress) {\\n            token0 = dragonAddress;\\n            token1 = babyDragonAddress;\\n        } else {\\n            token0 = babyDragonAddress;\\n            token1 = dragonAddress;\\n        }\\n    }\\n\\n    /**\\n     * @notice Creates a liquidity pool with a preset square root price ratio.\\n     * @dev This function initializes a Uniswap V3 pool with the specified initial liquidity amount.\\n     * @param initialLiquidityAmount The amount of liquidity to use for initializing the pool.\\n     */\\n    function _createPool(uint256 initialLiquidityAmount) private {\\n        (address token0, address token1, , ) = _getTokenConfig(\\n            initialLiquidityAmount\\n        );\\n        INonfungiblePositionManager manager = INonfungiblePositionManager(\\n            UNI_NONFUNGIBLEPOSITIONMANAGER\\n        );\\n\\n        poolAddress = manager.createAndInitializePoolIfNecessary(\\n            token0,\\n            token1,\\n            FEE_TIER,\\n            INITIAL_SQRT_PRICE_DRAGONX_BABYDRAGONX\\n        );\\n\\n        // Increase cardinality for observations enabling TWAP\\n        IUniswapV3Pool(poolAddress).increaseObservationCardinalityNext(100);\\n\\n        // Update state\\n        pools[poolAddress] = true;\\n    }\\n\\n    /**\\n     * @notice Mints a full range liquidity provider (LP) token in the Uniswap V3 pool.\\n     * @dev This function mints an LP token with the full price range in the Uniswap V3 pool.\\n     * @param initialLiquidityAmount The amount of liquidity to be used for minting the position.\\n     */\\n    function _mintInitialPosition(uint256 initialLiquidityAmount) private {\\n        INonfungiblePositionManager manager = INonfungiblePositionManager(\\n            UNI_NONFUNGIBLEPOSITIONMANAGER\\n        );\\n\\n        (\\n            address token0,\\n            address token1,\\n            uint256 amount0Desired,\\n            uint256 amount1Desired\\n        ) = _getTokenConfig(initialLiquidityAmount);\\n\\n        INonfungiblePositionManager.MintParams\\n            memory params = INonfungiblePositionManager.MintParams({\\n                token0: token0,\\n                token1: token1,\\n                fee: FEE_TIER,\\n                tickLower: MIN_TICK,\\n                tickUpper: MAX_TICK,\\n                amount0Desired: amount0Desired,\\n                amount1Desired: amount1Desired,\\n                amount0Min: (amount0Desired * 90) / 100,\\n                amount1Min: (amount1Desired * 90) / 100,\\n                recipient: address(this),\\n                deadline: block.timestamp\\n            });\\n\\n        (uint256 tokenId, uint256 liquidity, , ) = manager.mint(params);\\n\\n        lpTokenInfo.tokenId = uint80(tokenId);\\n        lpTokenInfo.liquidity = uint128(liquidity);\\n        lpTokenInfo.tickLower = MIN_TICK;\\n        lpTokenInfo.tickUpper = MAX_TICK;\\n    }\\n\\n    /**\\n     * @notice Collects liquidity pool fees from the Uniswap V3 pool.\\n     * @dev This function calls the Uniswap V3 `collect` function to retrieve LP fees.\\n     * @return amount0 The amount of `token0` collected as fees.\\n     * @return amount1 The amount of `token1` collected as fees.\\n     */\\n    function _collectFees() private returns (uint256 amount0, uint256 amount1) {\\n        INonfungiblePositionManager manager = INonfungiblePositionManager(\\n            UNI_NONFUNGIBLEPOSITIONMANAGER\\n        );\\n\\n        INonfungiblePositionManager.CollectParams\\n            memory params = INonfungiblePositionManager.CollectParams(\\n                lpTokenInfo.tokenId,\\n                address(this),\\n                type(uint128).max,\\n                type(uint128).max\\n            );\\n\\n        (amount0, amount1) = manager.collect(params);\\n    }\\n\\n    /**\\n     * @dev Adds liquidity to the Uniswap V3 pool for the BabyDragonX and DragonX tokens.\\n     * Attempts to add the desired amounts of token0 and token1 to the liquidity pool, with a\\n     * 10% minimum slippage tolerance.\\n     *\\n     * @param amount0Desired The desired amount of token0 to be added to the pool.\\n     * @param amount1Desired The desired amount of token1 to be added to the pool.\\n     * @return liquidity The amount of liquidity tokens received for the added liquidity.\\n     * @return amount0 The actual amount of token0 added to the pool.\\n     * @return amount1 The actual amount of token1 added to the pool.\\n     */\\n    function _addLiquidity(\\n        uint256 amount0Desired,\\n        uint256 amount1Desired\\n    ) private returns (uint128 liquidity, uint256 amount0, uint256 amount1) {\\n        INonfungiblePositionManager manager = INonfungiblePositionManager(\\n            UNI_NONFUNGIBLEPOSITIONMANAGER\\n        );\\n\\n        INonfungiblePositionManager.IncreaseLiquidityParams\\n            memory params = INonfungiblePositionManager\\n                .IncreaseLiquidityParams({\\n                    tokenId: lpTokenInfo.tokenId,\\n                    amount0Desired: amount0Desired,\\n                    amount1Desired: amount1Desired,\\n                    amount0Min: 0,\\n                    amount1Min: 0,\\n                    deadline: block.timestamp\\n                });\\n\\n        (liquidity, amount0, amount1) = manager.increaseLiquidity(params);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/lib/Constants.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.24;\\n\\n/* Other */\\nuint256 constant BASIS = 10_000;\\n\\n/* Addresses */\\naddress constant DRAGONX_ADDRESS = 0x96a5399D07896f757Bd4c6eF56461F58DB951862;\\naddress constant TITANX_ADDRESS = 0xF19308F923582A6f7c465e5CE7a9Dc1BEC6665B1;\\naddress constant WETH9_ADDRESS = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\\naddress constant UNI_SWAP_ROUTER = 0xE592427A0AEce92De3Edee1F18E0157C05861564;\\naddress constant UNI_NONFUNGIBLEPOSITIONMANAGER = 0xC36442b4a4522E871399CD717aBDD847Ab11FE88;\\naddress constant UNI_FACTORY = 0x1F98431c8aD98523631AE4a59f267346ea31F984;\\n\\n/* Genesis and dedicated Addresses */\\naddress constant DRAGONX_GENESIS_ADDRESS = 0x25C9E69177655FdA916d849B1d7C11BE32d2458b;\\naddress constant BABY_DRAGON_TEAM_ADDRESS = 0x3B30cC62f24183084779dfe4411506FB8b9a0F9D;\\naddress constant BABY_DRAGON_EXPENSES_ADDRESS = 0x62d7940FEEE2E7E9d1BEF21203b1e1441EB0B749;\\naddress constant BABY_DRAGON_GRANT_ADDRESS = 0x7877201c70892F6B5A896ddD9b909306EdD36220;\\naddress constant BABY_DRAGON_FUTURE_REWARDS_ADDRESS = 0xfc51fa192fa63d357d4Fc496A11Ca9d8383ec2c5;\\n\\n/* Uniswap Liquidity Pools (DragonX, BabyDragon) */\\nuint24 constant FEE_TIER = 10000;\\nint24 constant MIN_TICK = -887200;\\nint24 constant MAX_TICK = 887200;\\nuint160 constant INITIAL_SQRT_PRICE_DRAGONX_BABYDRAGONX = 79228162514264337593543950336; // 1:1\\n\\n/* BabyDragonX Constants */\\nuint256 constant INCENTIVE_FEE = 300;\\n\"\r\n    },\r\n    \"contracts/lib/interfaces/IDragonX.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.24;\\n\\n// OpenZeppelin\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IDragonX is IERC20 {\\n    // External functions\\n    function mint(uint256 amount) external;\\n\\n    function stake() external;\\n\\n    function claim() external returns (uint256 claimedAmount);\\n\\n    function totalStakesOpened() external view returns (uint256 totalStakes);\\n\\n    function incentiveFeeForClaim() external view returns (uint256 fee);\\n\\n    function stakeReachedMaturity()\\n        external\\n        view\\n        returns (bool hasStakesToEnd, address instanceAddress, uint256 sId);\\n\\n    function burn() external;\\n\\n    function vault() external view returns (uint256 vault);\\n\\n    function mintPhaseBegin() external view returns (uint256);\\n\\n    function mintPhaseEnd() external view returns (uint256);\\n\\n    function mintRatioWeekOne() external view returns (uint256);\\n\\n    function mintRatioWeekTwo() external view returns (uint256);\\n\\n    function mintRatioWeekThree() external view returns (uint256);\\n\\n    function mintRatioWeekFour() external view returns (uint256);\\n\\n    function mintRatioWeekFive() external view returns (uint256);\\n\\n    function mintRatioWeekSix() external view returns (uint256);\\n\\n    function mintRatioWeekSeven() external view returns (uint256);\\n\\n    function mintRatioWeekEight() external view returns (uint256);\\n\\n    function mintRatioWeekNine() external view returns (uint256);\\n\\n    function mintRatioWeekTen() external view returns (uint256);\\n\\n    function mintRatioWeekEleven() external view returns (uint256);\\n\\n    function mintRatioWeekTwelve() external view returns (uint256);\\n\\n    // Public functions\\n    function updateVault() external;\\n\\n    function totalEthClaimable() external view returns (uint256 claimable);\\n}\\n\"\r\n    },\r\n    \"contracts/lib/interfaces/INonfungiblePositionManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.24;\\n\\n/**\\n * @notice A subset of the Uniswap Interface to allow\\n * using latest openzeppelin contracts\\n */\\ninterface INonfungiblePositionManager {\\n    // Structs for mint and collect functions\\n    struct MintParams {\\n        address token0;\\n        address token1;\\n        uint24 fee;\\n        int24 tickLower;\\n        int24 tickUpper;\\n        uint256 amount0Desired;\\n        uint256 amount1Desired;\\n        uint256 amount0Min;\\n        uint256 amount1Min;\\n        address recipient;\\n        uint256 deadline;\\n    }\\n\\n    struct CollectParams {\\n        uint256 tokenId;\\n        address recipient;\\n        uint128 amount0Max;\\n        uint128 amount1Max;\\n    }\\n\\n    struct IncreaseLiquidityParams {\\n        uint256 tokenId;\\n        uint256 amount0Desired;\\n        uint256 amount1Desired;\\n        uint256 amount0Min;\\n        uint256 amount1Min;\\n        uint256 deadline;\\n    }\\n\\n    // Functions\\n    function createAndInitializePoolIfNecessary(\\n        address token0,\\n        address token1,\\n        uint24 fee,\\n        uint160 sqrtPriceX96\\n    ) external payable returns (address pool);\\n\\n    function mint(\\n        MintParams calldata params\\n    )\\n        external\\n        payable\\n        returns (\\n            uint256 tokenId,\\n            uint128 liquidity,\\n            uint256 amount0,\\n            uint256 amount1\\n        );\\n\\n    function collect(\\n        CollectParams calldata params\\n    ) external payable returns (uint256 amount0, uint256 amount1);\\n\\n    function increaseLiquidity(\\n        IncreaseLiquidityParams calldata params\\n    ) external returns (uint128 liquidity, uint256 amount0, uint256 amount1);\\n}\\n\"\r\n    },\r\n    \"contracts/lib/interfaces/ITitanX.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.24;\\n\\n// OpenZeppelin\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n// Enum for stake status\\nenum StakeStatus {\\n    ACTIVE,\\n    ENDED,\\n    BURNED\\n}\\n\\n// Struct for user stake information\\nstruct UserStakeInfo {\\n    uint152 titanAmount;\\n    uint128 shares;\\n    uint16 numOfDays;\\n    uint48 stakeStartTs;\\n    uint48 maturityTs;\\n    StakeStatus status;\\n}\\n\\n// Struct for user stake\\nstruct UserStake {\\n    uint256 sId;\\n    uint256 globalStakeId;\\n    UserStakeInfo stakeInfo;\\n}\\n\\n// Interface for the contract\\ninterface IStakeInfo {\\n    /**\\n     * @notice Get all stake info of a given user address.\\n     * @param user The address of the user to query stake information for.\\n     * @return An array of UserStake structs containing all stake info for the given address.\\n     */\\n    function getUserStakes(\\n        address user\\n    ) external view returns (UserStake[] memory);\\n\\n    /** @notice get stake info with stake id\\n     * @return stakeInfo stake info\\n     */\\n    function getUserStakeInfo(\\n        address user,\\n        uint256 id\\n    ) external view returns (UserStakeInfo memory);\\n}\\n\\n/**\\n * @title The TitanX interface used by DragonX to manages stakes\\n * @author The DragonX devs\\n */\\ninterface ITitanX is IERC20, IStakeInfo {\\n    /**\\n     * @notice Start a new stake\\n     * @param amount The amount of TitanX tokens to stake\\n     * @param numOfDays The length of the stake in days\\n     */\\n    function startStake(uint256 amount, uint256 numOfDays) external;\\n\\n    /**\\n     * @notice Claims available ETH payouts for a user based on their shares in various cycles.\\n     * @dev This function calculates the total reward from different cycles and transfers it to the caller.\\n     */\\n    function claimUserAvailableETHPayouts() external;\\n\\n    /**\\n     * @notice Calculates the total ETH claimable by a user for all cycles.\\n     * @dev This function sums up the rewards from various cycles based on user shares.\\n     * @param user The address of the user for whom to calculate the claimable ETH.\\n     * @return reward The total ETH reward claimable by the user.\\n     */\\n    function getUserETHClaimableTotal(\\n        address user\\n    ) external view returns (uint256 reward);\\n\\n    /**\\n     * @notice Allows anyone to sync dailyUpdate manually.\\n     * @dev Function to be called for manually triggering the daily update process.\\n     * This function is public and can be called by any external entity.\\n     */\\n    function manualDailyUpdate() external;\\n\\n    /**\\n     * @notice Trigger cycle payouts for days 8, 28, 90, 369, 888, including the burn reward cycle 28.\\n     * Payouts can be triggered on or after the maturity day of each cycle (e.g., Cycle8 on day 8).\\n     */\\n    function triggerPayouts() external;\\n\\n    /**\\n     * @notice Create a new mint\\n     * @param mintPower The power of the mint, ranging from 1 to 100.\\n     * @param numOfDays The duration of the mint, ranging from 1 to 280 days.\\n     */\\n    function startMint(uint256 mintPower, uint256 numOfDays) external payable;\\n\\n    /**\\n     * @notice Returns current mint cost\\n     * @return currentMintCost The current cost of minting.\\n     */\\n    function getCurrentMintCost() external view returns (uint256);\\n\\n    /** @notice end a stake\\n     * @param id stake id\\n     */\\n    function endStake(uint256 id) external;\\n}\\n\"\r\n    },\r\n    \"contracts/lib/interfaces/IWETH.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.24;\\n\\n// OpenZeppelin\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IWETH9 is IERC20 {\\n    // Deposit ether to get wrapped ether\\n    function deposit() external payable;\\n\\n    // Withdraw wrapped ether to get ether\\n    function withdraw(uint256) external;\\n}\\n\"\r\n    },\r\n    \"contracts/lib/uniswap/Oracle.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.24;\\n\\n// Uniswap\\nimport \\\"@uniswap/v3-core/contracts/interfaces/IUniswapV3Pool.sol\\\";\\n\\n// OpenZeppelin\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\n\\n/**\\n * @notice Adapted Uniswap V3 OracleLibrary computation to be compliant with Solidity 0.8.x and later.\\n *\\n * Documentation for Auditors:\\n *\\n * Solidity Version: Updated the Solidity version pragma to ^0.8.0. This change ensures compatibility\\n * with Solidity version 0.8.x.\\n *\\n * Safe Arithmetic Operations: Solidity 0.8.x automatically checks for arithmetic overflows/underflows.\\n * Therefore, the code no longer needs to use SafeMath library (or similar) for basic arithmetic operations.\\n * This change simplifies the code and reduces the potential for errors related to manual overflow/underflow checking.\\n *\\n * Overflow/Underflow: With the introduction of automatic overflow/underflow checks in Solidity 0.8.x, \\n * the code is inherently safer and less prone to certain types of arithmetic errors.\\n *\\n * Removal of SafeMath Library: Since Solidity 0.8.x handles arithmetic operations safely, the use of SafeMath library\\n * is omitted in this update.\\n *\\n * Git-style diff for the `consult` function:\\n *\\n * ```diff\\n * function consult(address pool, uint32 secondsAgo)\\n *     internal\\n *     view\\n *     returns (int24 arithmeticMeanTick, uint128 harmonicMeanLiquidity)\\n * {\\n *     require(secondsAgo != 0, 'BP');\\n *\\n *     uint32[] memory secondsAgos = new uint32[](2);\\n *     secondsAgos[0] = secondsAgo;\\n *     secondsAgos[1] = 0;\\n *\\n *     (int56[] memory tickCumulatives, uint160[] memory secondsPerLiquidityCumulativeX128s) =\\n *         IUniswapV3Pool(pool).observe(secondsAgos);\\n *\\n *     int56 tickCumulativesDelta = tickCumulatives[1] - tickCumulatives[0];\\n *     uint160 secondsPerLiquidityCumulativesDelta =\\n *         secondsPerLiquidityCumulativeX128s[1] - secondsPerLiquidityCumulativeX128s[0];\\n *\\n * -   arithmeticMeanTick = int24(tickCumulativesDelta / secondsAgo);\\n * +   int56 secondsAgoInt56 = int56(uint56(secondsAgo));\\n * +   arithmeticMeanTick = int24(tickCumulativesDelta / secondsAgoInt56);\\n *     // Always round to negative infinity\\n * -   if (tickCumulativesDelta < 0 && (tickCumulativesDelta % secondsAgo != 0)) arithmeticMeanTick--;\\n * +   if (tickCumulativesDelta < 0 && (tickCumulativesDelta % secondsAgoInt56 != 0)) arithmeticMeanTick--;\\n *\\n * -   uint192 secondsAgoX160 = uint192(secondsAgo) * type(uint160).max;\\n * +   uint192 secondsAgoUint192 = uint192(secondsAgo);\\n * +   uint192 secondsAgoX160 = secondsAgoUint192 * type(uint160).max;\\n *     harmonicMeanLiquidity = uint128(secondsAgoX160 / (uint192(secondsPerLiquidityCumulativesDelta) << 32));\\n * }\\n * ```\\n */\\n\\n/// @title Oracle library\\n/// @notice Provides functions to integrate with V3 pool oracle\\nlibrary OracleLibrary {\\n    /// @notice Calculates time-weighted means of tick and liquidity for a given Uniswap V3 pool\\n    /// @param pool Address of the pool that we want to observe\\n    /// @param secondsAgo Number of seconds in the past from which to calculate the time-weighted means\\n    /// @return arithmeticMeanTick The arithmetic mean tick from (block.timestamp - secondsAgo) to block.timestamp\\n    /// @return harmonicMeanLiquidity The harmonic mean liquidity from (block.timestamp - secondsAgo) to block.timestamp\\n    function consult(\\n        address pool,\\n        uint32 secondsAgo\\n    )\\n        internal\\n        view\\n        returns (int24 arithmeticMeanTick, uint128 harmonicMeanLiquidity)\\n    {\\n        require(secondsAgo != 0, \\\"BP\\\");\\n\\n        uint32[] memory secondsAgos = new uint32[](2);\\n        secondsAgos[0] = secondsAgo;\\n        secondsAgos[1] = 0;\\n\\n        (\\n            int56[] memory tickCumulatives,\\n            uint160[] memory secondsPerLiquidityCumulativeX128s\\n        ) = IUniswapV3Pool(pool).observe(secondsAgos);\\n\\n        int56 tickCumulativesDelta = tickCumulatives[1] - tickCumulatives[0];\\n        uint160 secondsPerLiquidityCumulativesDelta = secondsPerLiquidityCumulativeX128s[\\n                1\\n            ] - secondsPerLiquidityCumulativeX128s[0];\\n\\n        // Safe casting of secondsAgo to int56 for division\\n        int56 secondsAgoInt56 = int56(uint56(secondsAgo));\\n        arithmeticMeanTick = int24(tickCumulativesDelta / secondsAgoInt56);\\n        // Always round to negative infinity\\n        if (\\n            tickCumulativesDelta < 0 &&\\n            (tickCumulativesDelta % secondsAgoInt56 != 0)\\n        ) arithmeticMeanTick--;\\n\\n        // Safe casting of secondsAgo to uint192 for multiplication\\n        uint192 secondsAgoUint192 = uint192(secondsAgo);\\n        harmonicMeanLiquidity = uint128(\\n            (secondsAgoUint192 * uint192(type(uint160).max)) /\\n                (uint192(secondsPerLiquidityCumulativesDelta) << 32)\\n        );\\n    }\\n\\n    /// @notice Given a pool, it returns the number of seconds ago of the oldest stored observation\\n    /// @param pool Address of Uniswap V3 pool that we want to observe\\n    /// @return secondsAgo The number of seconds ago of the oldest observation stored for the pool\\n    function getOldestObservationSecondsAgo(\\n        address pool\\n    ) internal view returns (uint32 secondsAgo) {\\n        (\\n            ,\\n            ,\\n            uint16 observationIndex,\\n            uint16 observationCardinality,\\n            ,\\n            ,\\n\\n        ) = IUniswapV3Pool(pool).slot0();\\n        require(observationCardinality > 0, \\\"NI\\\");\\n\\n        (uint32 observationTimestamp, , , bool initialized) = IUniswapV3Pool(\\n            pool\\n        ).observations((observationIndex + 1) % observationCardinality);\\n\\n        // The next index might not be initialized if the cardinality is in the process of increasing\\n        // In this case the oldest observation is always in index 0\\n        if (!initialized) {\\n            (observationTimestamp, , , ) = IUniswapV3Pool(pool).observations(0);\\n        }\\n\\n        secondsAgo = uint32(block.timestamp) - observationTimestamp;\\n    }\\n\\n    /// @notice Given a tick and a token amount, calculates the amount of token received in exchange\\n    /// a slightly modified version of the UniSwap library getQuoteAtTick to accept a sqrtRatioX96 as input parameter\\n    /// @param sqrtRatioX96 The sqrt ration\\n    /// @param baseAmount Amount of token to be converted\\n    /// @param baseToken Address of an ERC20 token contract used as the baseAmount denomination\\n    /// @param quoteToken Address of an ERC20 token contract used as the quoteAmount denomination\\n    /// @return quoteAmount Amount of quoteToken received for baseAmount of baseToken\\n    function getQuoteForSqrtRatioX96(\\n        uint160 sqrtRatioX96,\\n        uint256 baseAmount,\\n        address baseToken,\\n        address quoteToken\\n    ) internal pure returns (uint256 quoteAmount) {\\n        // Calculate quoteAmount with better precision if it doesn't overflow when multiplied by itself\\n        if (sqrtRatioX96 <= type(uint128).max) {\\n            uint256 ratioX192 = uint256(sqrtRatioX96) * sqrtRatioX96;\\n            quoteAmount = baseToken < quoteToken\\n                ? Math.mulDiv(ratioX192, baseAmount, 1 << 192)\\n                : Math.mulDiv(1 << 192, baseAmount, ratioX192);\\n        } else {\\n            uint256 ratioX128 = Math.mulDiv(\\n                sqrtRatioX96,\\n                sqrtRatioX96,\\n                1 << 64\\n            );\\n            quoteAmount = baseToken < quoteToken\\n                ? Math.mulDiv(ratioX128, baseAmount, 1 << 128)\\n                : Math.mulDiv(1 << 128, baseAmount, ratioX128);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/lib/uniswap/PoolAddress.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.24;\\n\\n/**\\n * @notice Adapted Uniswap V3 pool address computation to be compliant with Solidity 0.8.x and later.\\n * @dev Changes were made to address the stricter type conversion rules in newer Solidity versions.\\n *      Original Uniswap V3 code directly converted a uint256 to an address, which is disallowed in Solidity 0.8.x.\\n *      Adaptation Steps:\\n *        1. The `pool` address is computed by first hashing pool parameters.\\n *        2. The resulting `uint256` hash is then explicitly cast to `uint160` before casting to `address`.\\n *           This two-step conversion process is necessary due to the Solidity 0.8.x restriction.\\n *           Direct conversion from `uint256` to `address` is disallowed to prevent mistakes\\n *           that can occur due to the size mismatch between the types.\\n *        3. Added a require statement to ensure `token0` is less than `token1`, maintaining\\n *           Uniswap's invariant and preventing pool address calculation errors.\\n * @param factory The Uniswap V3 factory contract address.\\n * @param key The PoolKey containing token addresses and fee tier.\\n * @return pool The computed address of the Uniswap V3 pool.\\n * @custom:modification Explicit type conversion from `uint256` to `uint160` then to `address`.\\n *\\n * function computeAddress(address factory, PoolKey memory key) internal pure returns (address pool) {\\n *     require(key.token0 < key.token1);\\n *     pool = address(\\n *         uint160( // Explicit conversion to uint160 added for compatibility with Solidity 0.8.x\\n *             uint256(\\n *                 keccak256(\\n *                     abi.encodePacked(\\n *                         hex'ff',\\n *                         factory,\\n *                         keccak256(abi.encode(key.token0, key.token1, key.fee)),\\n *                         POOL_INIT_CODE_HASH\\n *                     )\\n *                 )\\n *             )\\n *         )\\n *     );\\n * }\\n */\\n\\n/// @dev This code is copied from Uniswap V3 which uses an older compiler version.\\n/// @title Provides functions for deriving a pool address from the factory, tokens, and the fee\\nlibrary PoolAddress {\\n    bytes32 internal constant POOL_INIT_CODE_HASH =\\n        0xe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b54;\\n\\n    /// @notice The identifying key of the pool\\n    struct PoolKey {\\n        address token0;\\n        address token1;\\n        uint24 fee;\\n    }\\n\\n    /// @notice Returns PoolKey: the ordered tokens with the matched fee levels\\n    /// @param tokenA The first token of a pool, unsorted\\n    /// @param tokenB The second token of a pool, unsorted\\n    /// @param fee The fee level of the pool\\n    /// @return Poolkey The pool details with ordered token0 and token1 assignments\\n    function getPoolKey(\\n        address tokenA,\\n        address tokenB,\\n        uint24 fee\\n    ) internal pure returns (PoolKey memory) {\\n        if (tokenA > tokenB) (tokenA, tokenB) = (tokenB, tokenA);\\n        return PoolKey({token0: tokenA, token1: tokenB, fee: fee});\\n    }\\n\\n    /// @notice Deterministically computes the pool address given the factory and PoolKey\\n    /// @param factory The Uniswap V3 factory contract address\\n    /// @param key The PoolKey\\n    /// @return pool The contract address of the V3 pool\\n    function computeAddress(\\n        address factory,\\n        PoolKey memory key\\n    ) internal pure returns (address pool) {\\n        require(key.token0 < key.token1);\\n        pool = address(\\n            uint160( // Convert uint256 to uint160 first\\n                uint256(\\n                    keccak256(\\n                        abi.encodePacked(\\n                            hex\\\"ff\\\",\\n                            factory,\\n                            keccak256(\\n                                abi.encode(key.token0, key.token1, key.fee)\\n                            ),\\n                            POOL_INIT_CODE_HASH\\n                        )\\n                    )\\n                )\\n            )\\n        );\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/lib/uniswap/TickMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity 0.8.24;\\n\\n/**\\n * @notice Adapted Uniswap V3 TickMath library computation to be compliant with Solidity 0.8.x and later.\\n *\\n * Documentation for Auditors:\\n *\\n * Solidity Version: Updated the Solidity version pragma to ^0.8.0. This change ensures compatibility\\n * with Solidity version 0.8.x.\\n *\\n * Safe Arithmetic Operations: Solidity 0.8.x automatically checks for arithmetic overflows/underflows.\\n * Therefore, the code no longer needs to use the SafeMath library (or similar) for basic arithmetic operations.\\n * This change simplifies the code and reduces the potential for errors related to manual overflow/underflow checking.\\n *\\n * Explicit Type Conversion: The explicit conversion of `MAX_TICK` from `int24` to `uint256` in the `require` statement\\n * is safe and necessary for comparison with `absTick`, which is a `uint256`. This conversion is compliant with\\n * Solidity 0.8.x's type system and does not introduce any arithmetic risk.\\n *\\n * Overflow/Underflow: With the introduction of automatic overflow/underflow checks in Solidity 0.8.x, \\n * the code is inherently safer and less prone to certain types of arithmetic errors.\\n *\\n * Removal of SafeMath Library: Since Solidity 0.8.x handles arithmetic operations safely, \\n * the use of the SafeMath library is omitted in this update.\\n *\\n * Git-style diff for the TickMath library:\\n *\\n * ```diff\\n * - pragma solidity >=0.5.0 <0.8.0;\\n * + pragma solidity ^0.8.0;\\n *\\n *   function getSqrtRatioAtTick(int24 tick) internal pure returns (uint160 sqrtPriceX96) {\\n *       uint256 absTick = tick < 0 ? uint256(-int256(tick)) : uint256(int256(tick));\\n * -     require(absTick <= uint256(MAX_TICK), 'T');\\n *       // Explicit type conversion for Solidity 0.8.x compatibility\\n * +     require(absTick <= uint256(int256(MAX_TICK)), 'T'); \\n *       \\n *       // ... (rest of the function)\\n *   }\\n *\\n * function getTickAtSqrtRatio(\\n *     uint160 sqrtPriceX96\\n * ) internal pure returns (int24 tick) {\\n *     // [Code for calculating the tick based on sqrtPriceX96 remains unchanged]\\n *\\n * -   tick = tickLow == tickHi\\n * -       ? tickLow\\n * -       : getSqrtRatioAtTick(tickHi) <= sqrtPriceX96\\n * -       ? tickHi\\n * -       : tickLow;\\n * +   if (tickLow == tickHi) {\\n * +       tick = tickLow;\\n * +   } else {\\n * +       tick = (getSqrtRatioAtTick(tickHi) <= sqrtPriceX96) ? tickHi : tickLow;\\n * +   }\\n * }\\n * ```\\n *\\n * Note: Other than the pragma version change and the explicit type conversion in the `require` statement, \\n * the original functions within the TickMath library are compatible with Solidity 0.8.x without \\n * requiring any further modifications. This is due to the fact that the logic within these \\n * functions already adheres to safe arithmetic practices and does not involve operations\\n * that would be affected by the 0.8.x compiler's built-in checks.\\n */\\n\\n/// @title Math library for computing sqrt prices from ticks and vice versa\\n/// @notice Computes sqrt price for ticks of size 1.0001, i.e. sqrt(1.0001^tick) as fixed point Q64.96 numbers. Supports\\n/// prices between 2**-128 and 2**128\\nlibrary TickMath {\\n    /// @dev The minimum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**-128\\n    int24 internal constant MIN_TICK = -887272;\\n    /// @dev The maximum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**128\\n    int24 internal constant MAX_TICK = -MIN_TICK;\\n\\n    /// @dev The minimum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MIN_TICK)\\n    uint160 internal constant MIN_SQRT_RATIO = 4295128739;\\n    /// @dev The maximum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MAX_TICK)\\n    uint160 internal constant MAX_SQRT_RATIO =\\n        1461446703485210103287273052203988822378723970342;\\n\\n    /// @notice Calculates sqrt(1.0001^tick) * 2^96\\n    /// @dev Throws if |tick| > max tick\\n    /// @param tick The input tick for the above formula\\n    /// @return sqrtPriceX96 A Fixed point Q64.96 number representing the sqrt of the \\n    /// ratio of the two assets (token1/token0) at the given tick\\n    function getSqrtRatioAtTick(\\n        int24 tick\\n    ) internal pure returns (uint160 sqrtPriceX96) {\\n        uint256 absTick = tick < 0\\n            ? uint256(-int256(tick))\\n            : uint256(int256(tick));\\n        require(absTick <= uint256(int256(MAX_TICK)), \\\"T\\\"); // Explicit type conversion for Solidity 0.8.x compatibility\\n\\n        uint256 ratio = absTick & 0x1 != 0\\n            ? 0xfffcb933bd6fad37aa2d162d1a594001\\n            : 0x100000000000000000000000000000000;\\n        if (absTick & 0x2 != 0)\\n            ratio = (ratio * 0xfff97272373d413259a46990580e213a) >> 128;\\n        if (absTick & 0x4 != 0)\\n            ratio = (ratio * 0xfff2e50f5f656932ef12357cf3c7fdcc) >> 128;\\n        if (absTick & 0x8 != 0)\\n            ratio = (ratio * 0xffe5caca7e10e4e61c3624eaa0941cd0) >> 128;\\n        if (absTick & 0x10 != 0)\\n            ratio = (ratio * 0xffcb9843d60f6159c9db58835c926644) >> 128;\\n        if (absTick & 0x20 != 0)\\n            ratio = (ratio * 0xff973b41fa98c081472e6896dfb254c0) >> 128;\\n        if (absTick & 0x40 != 0)\\n            ratio = (ratio * 0xff2ea16466c96a3843ec78b326b52861) >> 128;\\n        if (absTick & 0x80 != 0)\\n            ratio = (ratio * 0xfe5dee046a99a2a811c461f1969c3053) >> 128;\\n        if (absTick & 0x100 != 0)\\n            ratio = (ratio * 0xfcbe86c7900a88aedcffc83b479aa3a4) >> 128;\\n        if (absTick & 0x200 != 0)\\n            ratio = (ratio * 0xf987a7253ac413176f2b074cf7815e54) >> 128;\\n        if (absTick & 0x400 != 0)\\n            ratio = (ratio * 0xf3392b0822b70005940c7a398e4b70f3) >> 128;\\n        if (absTick & 0x800 != 0)\\n            ratio = (ratio * 0xe7159475a2c29b7443b29c7fa6e889d9) >> 128;\\n        if (absTick & 0x1000 != 0)\\n            ratio = (ratio * 0xd097f3bdfd2022b8845ad8f792aa5825) >> 128;\\n        if (absTick & 0x2000 != 0)\\n            ratio = (ratio * 0xa9f746462d870fdf8a65dc1f90e061e5) >> 128;\\n        if (absTick & 0x4000 != 0)\\n            ratio = (ratio * 0x70d869a156d2a1b890bb3df62baf32f7) >> 128;\\n        if (absTick & 0x8000 != 0)\\n            ratio = (ratio * 0x31be135f97d08fd981231505542fcfa6) >> 128;\\n        if (absTick & 0x10000 != 0)\\n            ratio = (ratio * 0x9aa508b5b7a84e1c677de54f3e99bc9) >> 128;\\n        if (absTick & 0x20000 != 0)\\n            ratio = (ratio * 0x5d6af8dedb81196699c329225ee604) >> 128;\\n        if (absTick & 0x40000 != 0)\\n            ratio = (ratio * 0x2216e584f5fa1ea926041bedfe98) >> 128;\\n        if (absTick & 0x80000 != 0)\\n            ratio = (ratio * 0x48a170391f7dc42444e8fa2) >> 128;\\n\\n        if (tick > 0) ratio = type(uint256).max / ratio;\\n\\n        // this divides by 1<<32 rounding up to go from a Q128.128 to a Q128.96.\\n        // we then downcast because we know the result always fits within 160 bits due to our tick input constraint\\n        // we round up in the division so getTickAtSqrtRatio of the output price is always consistent\\n        sqrtPriceX96 = uint160(\\n            (ratio >> 32) + (ratio % (1 << 32) == 0 ? 0 : 1)\\n        );\\n    }\\n\\n    /// @notice Calculates the greatest tick value such that getRatioAtTick(tick) <= ratio\\n    /// @dev Throws in case sqrtPriceX96 < MIN_SQRT_RATIO, as MIN_SQRT_RATIO is the lowest value getRatioAtTick may\\n    /// ever return.\\n    /// @param sqrtPriceX96 The sqrt ratio for which to compute the tick as a Q64.96\\n    /// @return tick The greatest tick for which the ratio is less than or equal to the input ratio\\n    function getTickAtSqrtRatio(\\n        uint160 sqrtPriceX96\\n    ) internal pure returns (int24 tick) {\\n        // second inequality must be < because the price can never reach the price at the max tick\\n        require(\\n            sqrtPriceX96 >= MIN_SQRT_RATIO && sqrtPriceX96 < MAX_SQRT_RATIO,\\n            \\\"R\\\"\\n        );\\n        uint256 ratio = uint256(sqrtPriceX96) << 32;\\n\\n        uint256 r = ratio;\\n        uint256 msb = 0;\\n\\n        assembly {\\n            let f := shl(7, gt(r, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(6, gt(r, 0xFFFFFFFFFFFFFFFF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(5, gt(r, 0xFFFFFFFF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(4, gt(r, 0xFFFF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(3, gt(r, 0xFF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(2, gt(r, 0xF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(1, gt(r, 0x3))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := gt(r, 0x1)\\n            msb := or(msb, f)\\n        }\\n\\n        if (msb >= 128) r = ratio >> (msb - 127);\\n        else r = ratio << (127 - msb);\\n\\n        int256 log_2 = (int256(msb) - 128) << 64;\\n\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(63, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(62, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(61, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(60, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(59, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(58, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(57, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(56, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(55, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(54, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(53, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(52, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(51, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(50, f))\\n        }\\n\\n        int256 log_sqrt10001 = log_2 * 255738958999603826347141; // 128.128 number\\n\\n        int24 tickLow = int24(\\n            (log_sqrt10001 - 3402992956809132418596140100660247210) >> 128\\n        );\\n        int24 tickHi = int24(\\n            (log_sqrt10001 + 291339464771989622907027621153398088495) >> 128\\n        );\\n\\n        // Adjusted logic for determining the tick\\n        if (tickLow == tickHi) {\\n            tick = tickLow;\\n        } else {\\n            tick = (getSqrtRatioAtTick(tickHi) <= sqrtPriceX96)\\n                ? tickHi\\n                : tickLow;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/mocks/PoolHelper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.24;\\n\\n// UniSwap\\nimport \\\"@uniswap/v3-core/contracts/interfaces/IUniswapV3Pool.sol\\\";\\n\\n// OpenZeppelin\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable2Step.sol\\\";\\n\\n// lib\\nimport \\\"../lib/Constants.sol\\\";\\nimport \\\"../lib/interfaces/IDragonX.sol\\\";\\nimport \\\"../lib/interfaces/ITitanX.sol\\\";\\nimport \\\"../lib/interfaces/INonfungiblePositionManager.sol\\\";\\n\\nimport \\\"../BabyDragonX.sol\\\";\\n\\ncontract PoolHelper {\\n    uint24 constant LOWER_FEE_TIER = 100;\\n    address public babyDragonAddress;\\n    address public poolAddress;\\n\\n    constructor(address babyDragonAddress_) {\\n        babyDragonAddress = babyDragonAddress_;\\n    }\\n\\n    function initialize(uint256 initialLiquidityAmount) external {\\n        IDragonX dragonX = IDragonX(DRAGONX_ADDRESS);\\n        BabyDragonX babyDragonX = BabyDragonX(babyDragonAddress);\\n\\n        // Mint initial liquidity\\n        babyDragonX.transferFrom(\\n            msg.sender,\\n            address(this),\\n            initialLiquidityAmount\\n        );\\n\\n        // Setup initial liquidity pool\\n        // Transfer the specified amount of DragonX tokens from the caller to this contract.\\n        dragonX.transferFrom(msg.sender, address(this), initialLiquidityAmount);\\n\\n        // Approve the Uniswap non-fungible position manager to spend DragonX.\\n        dragonX.approve(UNI_NONFUNGIBLEPOSITIONMANAGER, initialLiquidityAmount);\\n\\n        // Approve the UniSwap non-fungible position manager to spend BabyDragonX.\\n        babyDragonX.approve(\\n            UNI_NONFUNGIBLEPOSITIONMANAGER,\\n            initialLiquidityAmount\\n        );\\n\\n        // Create the initial liquidity pool in Uniswap V3.\\n        _createPool(initialLiquidityAmount);\\n\\n        // Mint the initial position in the pool.\\n        _mintInitialPosition(initialLiquidityAmount);\\n    }\\n\\n    function _getTokenConfig(\\n        uint256 initialLiquidityAmount\\n    )\\n        private\\n        view\\n        returns (\\n            address token0,\\n            address token1,\\n            uint256 amount0,\\n            uint256 amount1\\n        )\\n    {\\n        // Cache state variables\\n        address dragonAddress = DRAGONX_ADDRESS;\\n\\n        amount0 = initialLiquidityAmount;\\n        amount1 = initialLiquidityAmount;\\n\\n        if (dragonAddress < babyDragonAddress) {\\n            token0 = dragonAddress;\\n            token1 = babyDragonAddress;\\n        } else {\\n            token0 = babyDragonAddress;\\n            token1 = dragonAddress;\\n        }\\n    }\\n\\n    function _createPool(uint256 initialLiquidityAmount) private {\\n        (address token0, address token1, , ) = _getTokenConfig(\\n            initialLiquidityAmount\\n        );\\n        INonfungiblePositionManager manager = INonfungiblePositionManager(\\n            UNI_NONFUNGIBLEPOSITIONMANAGER\\n        );\\n\\n        poolAddress = manager.createAndInitializePoolIfNecessary(\\n            token0,\\n            token1,\\n            LOWER_FEE_TIER,\\n            INITIAL_SQRT_PRICE_DRAGONX_BABYDRAGONX\\n        );\\n\\n        // Increase cardinality for observations enabling TWAP\\n        IUniswapV3Pool(poolAddress).increaseObservationCardinalityNext(100);\\n    }\\n\\n    function _mintInitialPosition(uint256 initialLiquidityAmount) private {\\n        INonfungiblePositionManager manager = INonfungiblePositionManager(\\n            UNI_NONFUNGIBLEPOSITIONMANAGER\\n        );\\n\\n        (\\n            address token0,\\n            address token1,\\n            uint256 amount0Desired,\\n            uint256 amount1Desired\\n        ) = _getTokenConfig(initialLiquidityAmount);\\n\\n        INonfungiblePositionManager.MintParams\\n            memory params = INonfungiblePositionManager.MintParams({\\n                token0: token0,\\n                token1: token1,\\n                fee: LOWER_FEE_TIER,\\n                tickLower: MIN_TICK,\\n                tickUpper: MAX_TICK,\\n                amount0Desired: amount0Desired,\\n                amount1Desired: amount1Desired,\\n                amount0Min: (amount0Desired * 90) / 100,\\n                amount1Min: (amount1Desired * 90) / 100,\\n                recipient: address(this),\\n                deadline: block.timestamp + 600\\n            });\\n\\n        manager.mint(params);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/mocks/TriggerBot.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.24;\\n\\n// Library\\nimport \\\"../BabyDragonBuyAndBurn.sol\\\";\\n\\n// A simple contract to trigger functions by a contract\\ncontract TriggerBot {\\n    function triggerBabyDragonBuyAndBurn(\\n        address babyDragonBuyAndBurnAddress\\n    ) external {\\n        BabyDragonBuyAndBurn(babyDragonBuyAndBurnAddress)\\n            .buyAndBurnBabyDragonX();\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 9999\r\n    },\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"none\"\r\n    },\r\n    \"evmVersion\": \"paris\",\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"babyDragonBuyAndBurnAddress_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientAllowance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSpender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"dragon\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"babyDragon\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"CollectedFees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"babyDragonBuyAndBurnAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collectFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"finalizeMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMintRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"initialLiquidityAmount\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialized\",\"outputs\":[{\"internalType\":\"enum BabyDragonX.Initialized\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpTokenInfo\",\"outputs\":[{\"internalType\":\"uint80\",\"name\":\"tokenId\",\"type\":\"uint80\"},{\"internalType\":\"uint128\",\"name\":\"liquidity\",\"type\":\"uint128\"},{\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"titanAmount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintPhaseBegin\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintPhaseEnd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintingFinalized\",\"outputs\":[{\"internalType\":\"enum BabyDragonX.MintingFinalized\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"pools\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"babyDragonBuyAndBurnAddress_\",\"type\":\"address\"}],\"name\":\"setBabyDragonBuyAndBurnAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"poolAddress_\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isPool\",\"type\":\"bool\"}],\"name\":\"setPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalBabyDragonBurned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDragonSentToBabyDragonBuyAndBurn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "BabyDragonX", "CompilerVersion": "v0.8.24+commit.e11b9ed9", "OptimizationUsed": "1", "Runs": "9999", "ConstructorArguments": "000000000000000000000000836cad9ea4e47c6a8969c2f48f908b32864a6617", "EVMVersion": "paris", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}