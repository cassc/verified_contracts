{"SourceCode": "// SPDX-License-Identifier: UNLICENSED\r\npragma solidity ^0.8.9;\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address account) external view returns (uint);\r\n    function transfer(address recipient, uint amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n    function approve(address spender, uint amount) external returns (bool);\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint amount\r\n    ) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n}\r\n\r\n\r\ninterface IUniswapRouter {\r\n    function swapExactTokensForTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapExactETHForTokens(\r\n        uint amountOutMin, \r\n        address[] calldata path, \r\n        address to, \r\n        uint deadline\r\n    ) external payable returns (uint[] memory amounts);\r\n}\r\n\r\ncontract MultiWalletTokenSwapper {\r\n    address private owner;\r\n    address private WETH = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\r\n\r\n    IUniswapRouter private uniswapRouter;\r\n\r\n    constructor(\r\n        address _router\r\n    ) {\r\n        owner = msg.sender;\r\n        uniswapRouter = IUniswapRouter(_router);\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"Only the owner can call this function\");\r\n        _;\r\n    }\r\n\r\n    function setAddressWETH(address _weth) external onlyOwner {\r\n        WETH = _weth;\r\n    }\r\n\r\n    function setRouterAddress(address _router) external onlyOwner {\r\n        uniswapRouter = IUniswapRouter(_router);\r\n    }\r\n\r\n    function approval(address _token, uint _amount) external onlyOwner {\r\n        require((IERC20(_token).approve(address(uniswapRouter), _amount)) , \"FAILED\");\r\n    }\r\n\r\n    function allowanceCheck(address _token, address ownerToken, address spender) view external returns(uint256){\r\n        return IERC20(_token).allowance(ownerToken, spender);\r\n    }\r\n    \r\n    // INPUT\r\n    // tokenIn --> Token Address which you want to swap\r\n    // tokenOut --> Token Address which you want to receive\r\n    // amountIn --> Amount for each address that you want to swap\r\n    // amountOut --> Minimum Amount for each which you want to receive \r\n    // to --> Array of addresses for which you want to perform swap\r\n    // deadline --> Timelimit for transaction\r\n    // zeroFlag --> Keep it as false, except when trying for USDT or if you want to set approval to zero before transaction\r\n    function swapTokens(\r\n        address tokenIn,\r\n        address tokenOut,\r\n        uint[] memory amountIn,\r\n        uint[] memory amountOut,\r\n        address[] memory to,\r\n        uint256 deadline,\r\n        bool zeroFlag\r\n    ) external onlyOwner {\r\n        require(amountIn.length == to.length, \"Number of Address should be equal to List of Amounts\");\r\n        \r\n        IERC20 tokenA = IERC20(tokenIn);\r\n        address[] memory path;\r\n        if (tokenIn == WETH || tokenOut == WETH) {\r\n            path = new address[](2);\r\n            path[0] = tokenIn;\r\n            path[1] = tokenOut;\r\n        } else {\r\n            path = new address[](3);\r\n            path[0] = tokenIn;\r\n            path[1] = WETH;\r\n            path[2] = tokenOut;\r\n        }\r\n\r\n        uint totalAmount = 0;\r\n        for(uint256 i=0; i < amountIn.length; i++) {\r\n            totalAmount += amountIn[i];\r\n        }\r\n        if(zeroFlag){\r\n            tokenA.approve(address(uniswapRouter), 0);\r\n        }\r\n        tokenA.approve(address(uniswapRouter), totalAmount);\r\n\r\n        for(uint256 i=0; i < amountIn.length; i++) {\r\n            \r\n            tokenA.transferFrom(to[i], address(this), amountIn[i]);\r\n            \r\n            uniswapRouter.swapExactTokensForTokens(\r\n                amountIn[i],\r\n                amountOut[i],\r\n                path,\r\n                to[i],\r\n                deadline\r\n            );\r\n        }\r\n    }\r\n\r\n\r\n    function swapETHForTokens(\r\n        address tokenOut,\r\n        uint256 amountOutMin,\r\n        uint256 deadline\r\n    ) external payable {\r\n        address[] memory path;\r\n        path = new address[](2);\r\n        path[0] = WETH;\r\n        path[1] = tokenOut;\r\n        \r\n        uniswapRouter.swapExactETHForTokens{value: msg.value}(amountOutMin, path, msg.sender, deadline);\r\n    }\r\n\r\n    function checkBalance(address _address) external view returns (uint256) {\r\n        return IERC20(_address).balanceOf(msg.sender);\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_router\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"ownerToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowanceCheck\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"approval\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"checkBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_weth\",\"type\":\"address\"}],\"name\":\"setAddressWETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_router\",\"type\":\"address\"}],\"name\":\"setRouterAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapETHForTokens\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"amountIn\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amountOut\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"to\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"zeroFlag\",\"type\":\"bool\"}],\"name\":\"swapTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "MultiWalletTokenSwapper", "CompilerVersion": "v0.8.9+commit.e5eed63a", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "0000000000000000000000007a250d5630b4cf539739df2c5dacb4c659f2488d", "EVMVersion": "Default", "Library": "", "LicenseType": "Unlicense", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://70d1ae9891e022b179be8d54d4060e1d9dc9dd1537a0120c79b044c904b30e7b"}