{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"master.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/// @title DeployAggregator\\r\\n/// @notice This contract deploys an Aggregator contract when the deployAggregator function is called\\r\\ncontract DeployAggregator {\\r\\n    address[] private deployedContracts;\\r\\n\\r\\n    event AggregatorDeployed(address indexed aggregatorAddress);\\r\\n\\r\\n    /// @notice Constructor to set the deployer as the owner\\r\\n    constructor() {}\\r\\n\\r\\n    /// @notice Deploys a new Aggregator contract, adds the specified address as permitted, and stores its address\\r\\n    /// @param permittedAddress The address to be added as permitted in the new Aggregator contract\\r\\n    function deployAggregator(address permittedAddress) public {\\r\\n        Aggregator newAggregator = new Aggregator();\\r\\n        newAggregator.addPermitted(permittedAddress);\\r\\n        deployedContracts.push(address(newAggregator));\\r\\n        emit AggregatorDeployed(address(newAggregator));\\r\\n    }\\r\\n}\\r\\n\\r\\n/// @title Aggregator\\r\\n/// @notice As per https://github.com/Uniswap/swap-router-contracts/blob/main/contracts/base/MulticallExtended.sol\\r\\ncontract Aggregator {\\r\\n    struct Call {\\r\\n        address target;\\r\\n        bytes callData;\\r\\n    }\\r\\n\\r\\n    modifier onlyPermitted {\\r\\n        require(permitted[msg.sender] == true, \\\"User is not permitted to execute Aggregation\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    mapping(address => bool) public permitted;\\r\\n    address public owner;\\r\\n\\r\\n    constructor(){\\r\\n        permitted[msg.sender] = true;\\r\\n        owner = msg.sender;\\r\\n    }\\r\\n\\r\\n    function addPermitted(address addressToAdd) public {\\r\\n        require(msg.sender == owner, \\\"Only owner can add permitted addresses\\\");\\r\\n        permitted[addressToAdd] = true;\\r\\n    }\\r\\n\\r\\n    function aggregate(Call[] memory calls) public onlyPermitted returns (uint256 blockNumber, bytes[] memory returnData) {\\r\\n        blockNumber = block.number;\\r\\n        returnData = new bytes[](calls.length);\\r\\n        for(uint256 i = 0; i < calls.length; i++) {\\r\\n            (bool success, bytes memory ret) = calls[i].target.call(calls[i].callData);\\r\\n            require(success, \\\"Call failed\\\");\\r\\n            returnData[i] = ret;\\r\\n        }\\r\\n    }\\r\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"aggregatorAddress\",\"type\":\"address\"}],\"name\":\"AggregatorDeployed\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"permittedAddress\",\"type\":\"address\"}],\"name\":\"deployAggregator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "DeployAggregator", "CompilerVersion": "v0.8.0+commit.c7dfd78e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}