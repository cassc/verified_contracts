{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"src/AccumulatorProxy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.19;\\n\\nimport {IStrategy} from \\\"src/interfaces/IStrategy.sol\\\";\\n\\n/// @notice Small contract that act as a proxy to be compatible with the old strategy signature.\\n/// @dev Temporary contract to be removed after the accumulator migration.\\ncontract AccumulatorProxy {\\n    address public immutable strategy;\\n\\n    constructor(address _strategy) {\\n        strategy = _strategy;\\n    }\\n\\n    function claim3Crv(bool) external {\\n        IStrategy(strategy).claimNativeRewards();\\n    }\\n}\\n\"\r\n    },\r\n    \"src/interfaces/IStrategy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.19;\\n\\ninterface IStrategy {\\n    function locker() external view returns (address);\\n\\n    function deposit(address _token, uint256 amount) external;\\n    function withdraw(address _token, uint256 amount) external;\\n\\n    function claimProtocolFees() external;\\n    function claimNativeRewards() external;\\n    function harvest(address _asset, bool _distributeSDT, bool _claimExtra) external;\\n\\n    function rewardDistributors(address _gauge) external view returns (address);\\n\\n    /// Factory functions\\n    function toggleVault(address vault) external;\\n    function setGauge(address token, address gauge) external;\\n    function setLGtype(address gauge, uint256 gaugeType) external;\\n    function addRewardToken(address _token, address _rewardDistributor) external;\\n    function acceptRewardDistributorOwnership(address rewardDistributor) external;\\n    function setRewardDistributor(address gauge, address rewardDistributor) external;\\n    function addRewardReceiver(address gauge, address rewardReceiver) external;\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [\r\n      \"solady/=lib/solady/src/\",\r\n      \"ds-test/=lib/forge-std/lib/ds-test/src/\",\r\n      \"erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/\",\r\n      \"forge-std/=lib/forge-std/src/\",\r\n      \"openzeppelin-contracts/=lib/openzeppelin-contracts/\",\r\n      \"openzeppelin/=lib/openzeppelin-contracts/contracts/\"\r\n    ],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": false,\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"appendCBOR\": true\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"paris\",\r\n    \"viaIR\": false,\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_strategy\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"name\":\"claim3Crv\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"strategy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "AccumulatorProxy", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000069d61428d089c2f35bf6a472f540d0f82d1ea2cd", "EVMVersion": "paris", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}