{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the owner.\r\n     */\r\n    function _checkOwner() internal view virtual {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\nabstract contract Pausable is Context {\r\n    /**\r\n     * @dev Emitted when the pause is triggered by `account`.\r\n     */\r\n    event Paused(address account);\r\n\r\n    /**\r\n     * @dev Emitted when the pause is lifted by `account`.\r\n     */\r\n    event Unpaused(address account);\r\n\r\n    bool private _paused;\r\n\r\n    /**\r\n     * @dev Initializes the contract in unpaused state.\r\n     */\r\n    constructor() {\r\n        _paused = false;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is not paused.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    modifier whenNotPaused() {\r\n        _requireNotPaused();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is paused.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    modifier whenPaused() {\r\n        _requirePaused();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the contract is paused, and false otherwise.\r\n     */\r\n    function paused() public view virtual returns (bool) {\r\n        return _paused;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the contract is paused.\r\n     */\r\n    function _requireNotPaused() internal view virtual {\r\n        require(!paused(), \"Pausable: paused\");\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the contract is not paused.\r\n     */\r\n    function _requirePaused() internal view virtual {\r\n        require(paused(), \"Pausable: not paused\");\r\n    }\r\n\r\n    /**\r\n     * @dev Triggers stopped state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    function _pause() internal virtual whenNotPaused {\r\n        _paused = true;\r\n        emit Paused(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns to normal state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    function _unpause() internal virtual whenPaused {\r\n        _paused = false;\r\n        emit Unpaused(_msgSender());\r\n    }\r\n}\r\n\r\nlibrary Address {\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize/address.code.length, which returns 0\r\n        // for contracts in construction, since the code is only stored at the end\r\n        // of the constructor execution.\r\n\r\n        return account.code.length > 0;\r\n    }\r\n\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address to, uint256 amount) external;\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external;\r\n}\r\n\r\ninterface Aggregator {\r\n    function latestRoundData()\r\n        external\r\n        view\r\n        returns (\r\n            uint80 roundId,\r\n            int256 answer,\r\n            uint256 startedAt,\r\n            uint256 updatedAt,\r\n            uint80 answeredInRound\r\n        );\r\n}\r\n\r\ncontract CatsPreSale is Ownable, Pausable {\r\n    struct PresaleDetails {\r\n        uint256 stage;\r\n        uint256 totalTokens;\r\n        uint256 inSale;\r\n        uint256 totalTokenSold;\r\n        uint256 totalUSDAmount;\r\n        uint256 priceMultipler;\r\n        uint256 priceDivider;\r\n        uint256 startTime;\r\n        uint256 endTime;\r\n    }\r\n\r\n    uint256 public totalTokensForPresale = 1_700_000 * 10**18;\r\n    uint256 public inSale = 1_700_000 * 10**18;\r\n    uint256 public totalTokenSold = 0;\r\n    uint256 public totalUSDAmount;\r\n\r\n    bool public isPresaleCompleted;\r\n    uint256 public presaleStartTime;\r\n    address public saleToken;\r\n\r\n    address public dataOracle = 0x5f4eC3Df9cbd43714FE2740f5E3616155c5b8419;\r\n    address public usdtToken = 0xdAC17F958D2ee523a2206206994597C13D831ec7;\r\n    address public targetAddress = 0xb5D11E5AD4A7f094156F4fbe3891D2F30cD54d76;\r\n\r\n    IERC20 usdtTokenInterface = IERC20(usdtToken);\r\n\r\n    uint256 public claimStart;\r\n\r\n    uint256 public currentPresaleStage;\r\n    uint256 public totalPresaleStages = 10;\r\n\r\n    uint256 public remainingTokens;\r\n\r\n    uint256 public totalUsers;\r\n\r\n    mapping(address => uint256) public userDeposits;\r\n    mapping(address => uint256) public userClaimedAmount;\r\n    mapping(address => bool) public isUserExist;\r\n    mapping(address => bool) public hasClaimed;\r\n    mapping(uint256 => PresaleDetails) public presaleDetails;\r\n\r\n    event TokensBought(address indexed user, uint256 indexed tokensBought, uint256 indexed amountPaid, string method, uint256 stage, uint256 timestamp);\r\n    event TokensClaimed(address indexed user, uint256 amount, uint256 timestamp);\r\n\r\n    function stagewiseToken(uint256 _stage) internal pure returns (uint256 tokens) {\r\n        if (_stage == 1) {\r\n            tokens = 250_000 * 10**18;\r\n        } else if (_stage == 2) {\r\n            tokens = 227_272 * 10**18;\r\n        } else if (_stage == 3) {\r\n            tokens = 206_611 * 10**18;\r\n        } else if (_stage == 4) {\r\n            tokens = 187_969 * 10**18;\r\n        } else if (_stage == 5) {\r\n            tokens = 171_232 * 10**18;\r\n        } else if (_stage == 6) {\r\n            tokens = 155_279 * 10**18;\r\n        } else if (_stage == 7) {\r\n            tokens = 141_242 * 10**18;\r\n        } else if (_stage == 8) {\r\n            tokens = 128_534 * 10**18;\r\n        } else if (_stage == 9) {\r\n            tokens = 116_822 * 10**18;\r\n        } else if (_stage == 10) {\r\n            tokens = 106_157 * 10**18;\r\n        } else {\r\n            tokens = 0;\r\n        }\r\n    }\r\n\r\n    function stagewisePrice(uint256 _stage) internal pure returns (uint256 priceMultipler, uint256 priceDivider) {\r\n        if (_stage == 1) {\r\n            priceMultipler = 2;\r\n            priceDivider = 1;\r\n        } else if (_stage == 2) {\r\n            priceMultipler = 22;\r\n            priceDivider = 10;\r\n        } else if (_stage == 3) {\r\n            priceMultipler = 242;\r\n            priceDivider = 100;\r\n        } else if (_stage == 4) {\r\n            priceMultipler = 266;\r\n            priceDivider = 100;\r\n        } else if (_stage == 5) {\r\n            priceMultipler = 292;\r\n            priceDivider = 100;\r\n        } else if (_stage == 6) {\r\n            priceMultipler = 322;\r\n            priceDivider = 100;\r\n        } else if (_stage == 7) {\r\n            priceMultipler = 354;\r\n            priceDivider = 100;\r\n        } else if (_stage == 8) {\r\n            priceMultipler = 389;\r\n            priceDivider = 100;\r\n        } else if (_stage == 9) {\r\n            priceMultipler = 428;\r\n            priceDivider = 100;\r\n        } else if (_stage == 10) {\r\n            priceMultipler = 471;\r\n            priceDivider = 100;\r\n        } else {\r\n            priceMultipler = 1;\r\n            priceDivider = 1;\r\n        }\r\n    }\r\n\r\n    constructor() {\r\n        presaleStartTime = block.timestamp;\r\n        currentPresaleStage++;\r\n        (uint256 _priceMultipler, uint256 _priceDivider) = stagewisePrice(currentPresaleStage);\r\n        presaleDetails[currentPresaleStage] = PresaleDetails({stage: currentPresaleStage, totalTokens: stagewiseToken(currentPresaleStage), inSale: stagewiseToken(currentPresaleStage), totalTokenSold: 0, totalUSDAmount: 0, priceMultipler: _priceMultipler, priceDivider: _priceDivider, startTime: block.timestamp, endTime: 0});\r\n    }\r\n\r\n    function startClaim(uint256 tokensAmount, address _saleToken) external onlyOwner {\r\n        require(_saleToken != address(0), \"Zero token address\");\r\n        claimStart = block.timestamp;\r\n        saleToken = _saleToken;\r\n        IERC20(_saleToken).transferFrom(_msgSender(), address(this), tokensAmount);\r\n    }\r\n\r\n    function claim() external whenNotPaused {\r\n        require(isPresaleCompleted, \"Presale not Completed yet\");\r\n        require(saleToken != address(0), \"Sale token not added\");\r\n        require(block.timestamp >= claimStart, \"Claim has not started yet\");\r\n        require(!hasClaimed[_msgSender()], \"Already claimed\");\r\n        uint256 amount = userDeposits[_msgSender()];\r\n        require(amount != 0, \"Nothing to claim.\");\r\n        userClaimedAmount[_msgSender()] = amount;\r\n        userDeposits[_msgSender()] = 0;\r\n        hasClaimed[_msgSender()] = true;\r\n        IERC20(saleToken).transfer(_msgSender(), amount);\r\n        emit TokensClaimed(_msgSender(), amount, block.timestamp);\r\n    }\r\n\r\n    function getTokenAmountForETHInCurrentPresale(uint256 _ethAmount) public view returns (uint256 tokenAmount) {\r\n        uint256 usdAmount = (_ethAmount * getETHLatestPrice()) / 10**18;\r\n        tokenAmount = (usdAmount * presaleDetails[currentPresaleStage].priceDivider) / presaleDetails[currentPresaleStage].priceMultipler;\r\n    }\r\n\r\n    function getTokenAmountForUSDTInCurrentPresale(uint256 _usdAmount) public view returns (uint256 tokenAmount) {\r\n        tokenAmount = (_usdAmount * presaleDetails[currentPresaleStage].priceDivider) / presaleDetails[currentPresaleStage].priceMultipler;\r\n    }\r\n\r\n    function getETHAmountForTokenInCurrentPresale(uint256 _tokenAmount) public view returns (uint256 ethAmount) {\r\n        uint256 amount = (_tokenAmount * 10**18) / getETHLatestPrice();\r\n        ethAmount = (amount * presaleDetails[currentPresaleStage].priceMultipler) / presaleDetails[currentPresaleStage].priceDivider;\r\n    }\r\n\r\n    function getUSDTAmountForTokenInCurrentPresale(uint256 _tokenAmount) public view returns (uint256 usdtAmount) {\r\n        usdtAmount = (_tokenAmount * presaleDetails[currentPresaleStage].priceMultipler) / presaleDetails[currentPresaleStage].priceDivider;\r\n    }\r\n\r\n    function getETHLatestPrice() public view returns (uint256) {\r\n        (, int256 price, , , ) = Aggregator(dataOracle).latestRoundData();\r\n        price = (price * (10**10));\r\n        return uint256(price);\r\n    }\r\n\r\n    function buyWithETH() external payable whenNotPaused {\r\n        require(isPresaleStarted(), \"Presale is not started yet!\");\r\n        require(!isPresaleCompleted, \"Presale Completed\");\r\n        require(msg.value > 0, \"Less payment\");\r\n        uint256 usdAmount = (msg.value * getETHLatestPrice()) / 10**18;\r\n        require(usdAmount > 0, \"USD Amount can not be zero\");\r\n        uint256 tokenAmount = getTokenAmountForETHInCurrentPresale(msg.value);\r\n        require(tokenAmount > 0, \"Token Amount can not be zero\");\r\n        require(presaleDetails[currentPresaleStage].inSale >= tokenAmount, \"Less tokens in current presale!\");\r\n\r\n        if (!isUserExist[msg.sender]) {\r\n            isUserExist[msg.sender] = true;\r\n            totalUsers++;\r\n        }\r\n\r\n        userDeposits[_msgSender()] += tokenAmount;\r\n\r\n        inSale -= tokenAmount;\r\n        totalTokenSold += tokenAmount;\r\n        totalUSDAmount += usdAmount;\r\n\r\n        presaleDetails[currentPresaleStage].inSale -= tokenAmount;\r\n        presaleDetails[currentPresaleStage].totalTokenSold += tokenAmount;\r\n        presaleDetails[currentPresaleStage].totalUSDAmount += usdAmount;\r\n\r\n        sendValue(payable(targetAddress), msg.value);\r\n\r\n        emit TokensBought(msg.sender, tokenAmount, msg.value, \"buyWithETH\", currentPresaleStage, block.timestamp);\r\n\r\n        if (presaleDetails[currentPresaleStage].inSale < 1 * 10**18) {\r\n            _updatePresaleStage();\r\n        }\r\n    }\r\n\r\n    function buyWithUSDT(uint256 usdAmount) external whenNotPaused {\r\n        usdAmount = usdAmount * 10**12;\r\n        require(isPresaleStarted(), \"Presale is not started yet!\");\r\n        require(!isPresaleCompleted, \"Presale Completed\");\r\n        require(usdAmount > 0, \"USD Amount can not be zero\");\r\n        uint256 tokenAmount = getTokenAmountForUSDTInCurrentPresale(usdAmount);\r\n        require(tokenAmount > 0, \"Token Amount can not be zero\");\r\n        require(presaleDetails[currentPresaleStage].inSale >= tokenAmount, \"Less tokens in current presale!\");\r\n\r\n        if (!isUserExist[msg.sender]) {\r\n            isUserExist[msg.sender] = true;\r\n            totalUsers++;\r\n        }\r\n\r\n        userDeposits[_msgSender()] += tokenAmount;\r\n\r\n        inSale -= tokenAmount;\r\n        totalTokenSold += tokenAmount;\r\n        totalUSDAmount += usdAmount;\r\n\r\n        presaleDetails[currentPresaleStage].inSale -= tokenAmount;\r\n        presaleDetails[currentPresaleStage].totalTokenSold += tokenAmount;\r\n        presaleDetails[currentPresaleStage].totalUSDAmount += usdAmount;\r\n\r\n        usdtTokenInterface.transferFrom(_msgSender(), targetAddress, usdAmount / 10**12);\r\n\r\n        emit TokensBought(msg.sender, tokenAmount, usdAmount, \"buyWithUSDT\", currentPresaleStage, block.timestamp);\r\n\r\n        if (presaleDetails[currentPresaleStage].inSale < 1 * 10**18) {\r\n            _updatePresaleStage();\r\n        }\r\n    }\r\n\r\n    function _updatePresaleStage() internal {\r\n        presaleDetails[currentPresaleStage].endTime = block.timestamp;\r\n        remainingTokens += presaleDetails[currentPresaleStage].inSale;\r\n        if (currentPresaleStage == totalPresaleStages) {\r\n            isPresaleCompleted = true;\r\n            return;\r\n        }\r\n        currentPresaleStage++;\r\n        (uint256 _priceMultipler, uint256 _priceDivider) = stagewisePrice(currentPresaleStage);\r\n        presaleDetails[currentPresaleStage] = PresaleDetails({stage: currentPresaleStage, totalTokens: stagewiseToken(currentPresaleStage), inSale: stagewiseToken(currentPresaleStage), totalTokenSold: 0, totalUSDAmount: 0, priceMultipler: _priceMultipler, priceDivider: _priceDivider, startTime: block.timestamp, endTime: 0});\r\n        if (currentPresaleStage == totalPresaleStages) {\r\n            presaleDetails[currentPresaleStage].totalTokens += remainingTokens;\r\n            presaleDetails[currentPresaleStage].inSale += remainingTokens;\r\n        }\r\n    }\r\n\r\n    function addTokensInLastStage(uint256 tokens) external onlyOwner {\r\n        require(!isPresaleCompleted, \"Presale is already completed!\");\r\n        require(currentPresaleStage == totalPresaleStages, \"Presale is not in its last stage.\");\r\n        presaleDetails[currentPresaleStage].totalTokens += tokens;\r\n        presaleDetails[currentPresaleStage].inSale += tokens;\r\n        inSale += tokens;\r\n        totalTokensForPresale += tokens;\r\n    }\r\n\r\n    function completeCurrentPresaleStage() external onlyOwner {\r\n        _updatePresaleStage();\r\n    }\r\n\r\n    function updateCurrentPresalePrice(uint256 _multipler, uint256 _divider) external onlyOwner {\r\n        require(_multipler != 0 || _divider != 0, \"multipler or divider cannot be zero\");\r\n        presaleDetails[currentPresaleStage].priceMultipler = _multipler;\r\n        presaleDetails[currentPresaleStage].priceDivider = _divider;\r\n    }\r\n\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Low balance\");\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"ETH Payment failed\");\r\n    }\r\n\r\n    function pause() external onlyOwner {\r\n        _pause();\r\n    }\r\n\r\n    function unpause() external onlyOwner {\r\n        _unpause();\r\n    }\r\n\r\n    function setDataOracle(address _dataOracle) external onlyOwner {\r\n        dataOracle = _dataOracle;\r\n    }\r\n\r\n    function updateSaleStatus() external onlyOwner {\r\n        isPresaleCompleted = !isPresaleCompleted;\r\n    }\r\n\r\n    function setTargetaddress(address _targetAddress) external onlyOwner {\r\n        targetAddress = _targetAddress;\r\n    }\r\n\r\n    function setUSDTAddress(address _usdtAddress) external onlyOwner {\r\n        usdtToken = _usdtAddress;\r\n        usdtTokenInterface = IERC20(usdtToken);\r\n    }\r\n\r\n    function isPresaleStarted() public view returns (bool) {\r\n        return presaleStartTime >= block.timestamp ? false : true;\r\n    }\r\n\r\n    function setPresaleStartTime(uint256 _startTime) external onlyOwner {\r\n        require(_startTime > block.timestamp, \"Presale is already started!\");\r\n        presaleStartTime = _startTime;\r\n        presaleDetails[currentPresaleStage].startTime = _startTime;\r\n    }\r\n\r\n    function withdrawTokens(address token, uint256 amount) external onlyOwner {\r\n        IERC20(token).transfer(targetAddress, amount);\r\n    }\r\n\r\n    function withdrawETHs() external onlyOwner {\r\n        (bool success, ) = payable(targetAddress).call{value: address(this).balance}(\"\");\r\n        require(success, \"Failed to withdraw\");\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokensBought\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amountPaid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"method\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stage\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"TokensBought\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"TokensClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"addTokensInLastStage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyWithETH\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"usdAmount\",\"type\":\"uint256\"}],\"name\":\"buyWithUSDT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimStart\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"completeCurrentPresaleStage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentPresaleStage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dataOracle\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenAmount\",\"type\":\"uint256\"}],\"name\":\"getETHAmountForTokenInCurrentPresale\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"ethAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getETHLatestPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_ethAmount\",\"type\":\"uint256\"}],\"name\":\"getTokenAmountForETHInCurrentPresale\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_usdAmount\",\"type\":\"uint256\"}],\"name\":\"getTokenAmountForUSDTInCurrentPresale\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenAmount\",\"type\":\"uint256\"}],\"name\":\"getUSDTAmountForTokenInCurrentPresale\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"usdtAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"hasClaimed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"inSale\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isPresaleCompleted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isPresaleStarted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isUserExist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"presaleDetails\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"stage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalTokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"inSale\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalTokenSold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalUSDAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"priceMultipler\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"priceDivider\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"presaleStartTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"remainingTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"saleToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_dataOracle\",\"type\":\"address\"}],\"name\":\"setDataOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_startTime\",\"type\":\"uint256\"}],\"name\":\"setPresaleStartTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_targetAddress\",\"type\":\"address\"}],\"name\":\"setTargetaddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_usdtAddress\",\"type\":\"address\"}],\"name\":\"setUSDTAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokensAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_saleToken\",\"type\":\"address\"}],\"name\":\"startClaim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"targetAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalPresaleStages\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalTokenSold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalTokensForPresale\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalUSDAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalUsers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_multipler\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_divider\",\"type\":\"uint256\"}],\"name\":\"updateCurrentPresalePrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateSaleStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdtToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userClaimedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userDeposits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawETHs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "CatsPreSale", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://b1d641f7b828a64305e59f64aae44521a092aba8e25ab5192a159857e8879256"}