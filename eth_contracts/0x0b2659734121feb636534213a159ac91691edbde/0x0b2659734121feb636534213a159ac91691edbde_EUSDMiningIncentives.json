{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"lybra/miner/EUSDMiningIncentives.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\npragma solidity ^0.8.17;\\r\\n/**\\r\\n * @title EUSDMiningIncentives is a stripped down version of Synthetix StakingRewards.sol, to reward esLBR to eUSD&peUSD minters.\\r\\n * Differences from the original contract,\\r\\n * - totalStaked and stakedOf(user) are different from the original version.\\r\\n * - When a user's borrowing changes in any of the Lst vaults, the `refreshReward()` function needs to be called to update the data.\\r\\n */\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"../interfaces/IesLBR.sol\\\";\\r\\nimport \\\"../interfaces/IEUSD.sol\\\";\\r\\nimport \\\"../interfaces/ILybra.sol\\\";\\r\\nimport \\\"../interfaces/Iconfigurator.sol\\\";\\r\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\r\\n\\r\\ninterface IesLBRBoost {\\r\\n    function getUserBoost(\\r\\n        address user,\\r\\n        uint256 userUpdatedAt,\\r\\n        uint256 finishAt\\r\\n    ) external view returns (uint256);\\r\\n}\\r\\n\\r\\ncontract EUSDMiningIncentives is Ownable {\\r\\n    Iconfigurator public immutable configurator;\\r\\n    IesLBRBoost public esLBRBoost;\\r\\n    IEUSD public immutable EUSD;\\r\\n    address public esLBR;\\r\\n    address public LBR;\\r\\n    address public wETH;\\r\\n    address[] public vaults;\\r\\n\\r\\n    // Duration of rewards to be paid out (in seconds)\\r\\n    uint256 public duration = 604_800;\\r\\n    // Timestamp of when the rewards finish\\r\\n    uint256 public finishAt;\\r\\n    // Minimum of last updated time and reward finish time\\r\\n    uint256 public updatedAt;\\r\\n    // Reward to be paid out per second\\r\\n    uint256 public rewardRatio;\\r\\n    // Sum of (reward ratio * dt * 1e18 / total supply)\\r\\n    uint256 public rewardPerTokenStored;\\r\\n    // User address => rewardPerTokenStored\\r\\n    mapping(address => uint256) public userRewardPerTokenPaid;\\r\\n    // User address => rewards to be claimed\\r\\n    mapping(address => uint256) public rewards;\\r\\n    mapping(address => uint256) public userUpdatedAt;\\r\\n    uint256 public extraRatio = 10 * 1e18;\\r\\n    uint256 public biddingFeeRatio = 3000;\\r\\n    address public ethlbrStakePool;\\r\\n    uint256 public minDlpRatio = 500;\\r\\n    AggregatorV3Interface internal lpPriceFeed;\\r\\n    AggregatorV3Interface internal lbrPriceFeed;\\r\\n    bool public isEUSDBuyoutAllowed = true;\\r\\n    bool public v1Supported = true;\\r\\n    address immutable oldLybra;\\r\\n\\r\\n    event VaultsChanged(address[] vaults, uint256 time);\\r\\n    event LBROracleChanged(address newOracle, uint256 time);\\r\\n    event LpOracleChanged(address newOracle, uint256 time);\\r\\n    event TokenChanged(address newLBR, address newEsLBR, uint256 time);\\r\\n    event ClaimReward(address indexed user, uint256 amount, uint256 time);\\r\\n    event ClaimedOtherEarnings(address indexed user, address indexed Victim, uint256 buyAmount, uint256 biddingFee, bool useEUSD, uint256 time);\\r\\n    event NotifyRewardChanged(uint256 addAmount, uint256 time);\\r\\n\\r\\n    //wETH = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2\\r\\n    constructor(address _config, address _lpOracle, address _lbrOracle, address _weth, address _oldEUSD) {\\r\\n        configurator = Iconfigurator(_config);\\r\\n        EUSD = IEUSD(configurator.getEUSDAddress());\\r\\n        lpPriceFeed = AggregatorV3Interface(_lpOracle);\\r\\n        lbrPriceFeed = AggregatorV3Interface(_lbrOracle);\\r\\n        wETH = _weth;\\r\\n        oldLybra = _oldEUSD;\\r\\n    }\\r\\n\\r\\n    modifier updateReward(address _account) {\\r\\n        rewardPerTokenStored = rewardPerToken();\\r\\n        updatedAt = lastTimeRewardApplicable();\\r\\n\\r\\n        if (_account != address(0)) {\\r\\n            rewards[_account] = earned(_account);\\r\\n            userRewardPerTokenPaid[_account] = rewardPerTokenStored;\\r\\n            userUpdatedAt[_account] = block.timestamp;\\r\\n        }\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function setToken(address _lbr, address _eslbr) external onlyOwner {\\r\\n        LBR = _lbr;\\r\\n        esLBR = _eslbr;\\r\\n        emit TokenChanged(_lbr, _eslbr, block.timestamp);\\r\\n    }\\r\\n\\r\\n    function setLBROracle(address _lbrOracle) external onlyOwner {\\r\\n        lbrPriceFeed = AggregatorV3Interface(_lbrOracle);\\r\\n        emit LBROracleChanged(_lbrOracle, block.timestamp);\\r\\n    }\\r\\n\\r\\n    function setLpOracle(address _lpOracle) external onlyOwner {\\r\\n        lpPriceFeed = AggregatorV3Interface(_lpOracle);\\r\\n        emit LpOracleChanged(_lpOracle, block.timestamp);\\r\\n    }\\r\\n\\r\\n    function setPools(address[] memory _vaults) external onlyOwner {\\r\\n        require(_vaults.length <= 10, \\\"EL\\\");\\r\\n        for (uint i = 0; i < _vaults.length; i++) {\\r\\n            require(configurator.mintVault(_vaults[i]), \\\"NOT_VAULT\\\");\\r\\n        }\\r\\n        vaults = _vaults;\\r\\n        emit VaultsChanged(_vaults, block.timestamp);\\r\\n    }\\r\\n\\r\\n    function setBiddingCost(uint256 _biddingRatio) external onlyOwner {\\r\\n        require(_biddingRatio <= 8000, \\\"BCE\\\");\\r\\n        biddingFeeRatio = _biddingRatio;\\r\\n    }\\r\\n\\r\\n    function setExtraRatio(uint256 ratio) external onlyOwner {\\r\\n        require(ratio <= 1e20, \\\"BCE\\\");\\r\\n        extraRatio = ratio;\\r\\n    }\\r\\n\\r\\n    function setMinDlpRatio(uint256 ratio) external onlyOwner {\\r\\n        require(ratio <= 1_000, \\\"BCE\\\");\\r\\n        minDlpRatio = ratio;\\r\\n    }\\r\\n\\r\\n    function setBoost(address _boost) external onlyOwner {\\r\\n        esLBRBoost = IesLBRBoost(_boost);\\r\\n    }\\r\\n\\r\\n    function setV1Supported(bool _bool) external onlyOwner {\\r\\n        v1Supported = _bool;\\r\\n    }\\r\\n\\r\\n    function setRewardsDuration(uint256 _duration) external onlyOwner {\\r\\n        require(finishAt < block.timestamp, \\\"reward duration not finished\\\");\\r\\n        duration = _duration;\\r\\n    }\\r\\n\\r\\n    function setEthlbrStakeInfo(address _pool) external onlyOwner {\\r\\n        ethlbrStakePool = _pool;\\r\\n    }\\r\\n    function setEUSDBuyoutAllowed(bool _bool) external onlyOwner {\\r\\n        isEUSDBuyoutAllowed = _bool;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Returns the total amount of minted eUSD&peUSD in the asset pools.\\r\\n     * @return The total amount of minted eUSD&peUSD.\\r\\n     * @dev It iterates through the vaults array and retrieves the total circulation of each asset pool using the getPoolTotalCirculation()\\r\\n     * function from the ILybra interface. The total staked amount is calculated by multiplying the total circulation by the vault's\\r\\n     * weight (obtained from configurator.getVaultWeight()). \\r\\n     */\\r\\n    function totalStaked() public view returns (uint256) {\\r\\n        uint256 amount;\\r\\n        for (uint i = 0; i < vaults.length; i++) {\\r\\n            ILybra vault = ILybra(vaults[i]);\\r\\n            amount += vault.getPoolTotalCirculation() * configurator.getVaultWeight(vaults[i]) / 1e20;\\r\\n        }\\r\\n        if(v1Supported) {\\r\\n            amount += IEUSD(oldLybra).totalSupply() * configurator.getVaultWeight(oldLybra) / 1e20;\\r\\n        }\\r\\n        return amount;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Returns the total amount of borrowed eUSD and peUSD by the user.\\r\\n     */\\r\\n    function stakedOf(address user) public view returns (uint256) {\\r\\n        uint256 amount;\\r\\n        for (uint i = 0; i < vaults.length; i++) {\\r\\n            ILybra vault = ILybra(vaults[i]);\\r\\n            amount += vault.getBorrowedOf(user) * configurator.getVaultWeight(vaults[i]) / 1e20;\\r\\n        }\\r\\n        if(v1Supported) {\\r\\n            amount += ILybra(oldLybra).getBorrowedOf(user) * configurator.getVaultWeight(oldLybra) / 1e20;\\r\\n        }\\r\\n        return amount;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Returns the value of the user's staked LP tokens in the ETH-LBR liquidity pool.\\r\\n     * @param user The user's address.\\r\\n     * @return The value of the user's staked LP tokens.\\r\\n     */\\r\\n    function stakedLBRLpValue(address user) public view returns (uint256) {\\r\\n        (, int lpPrice, , , ) = lpPriceFeed.latestRoundData();\\r\\n        return IEUSD(ethlbrStakePool).balanceOf(user) * uint256(lpPrice) / 1e8;\\r\\n    }\\r\\n\\r\\n    function lastTimeRewardApplicable() public view returns (uint256) {\\r\\n        return _min(finishAt, block.timestamp);\\r\\n    }\\r\\n\\r\\n    function rewardPerToken() public view returns (uint256) {\\r\\n        if (totalStaked() == 0) {\\r\\n            return rewardPerTokenStored;\\r\\n        }\\r\\n\\r\\n        return rewardPerTokenStored + (rewardRatio * (lastTimeRewardApplicable() - updatedAt) * 1e18) / totalStaked();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Update user's claimable reward data and record the timestamp.\\r\\n     */\\r\\n    function refreshReward(address _account) external updateReward(_account) {}\\r\\n\\r\\n    function getBoost(address _account) public view returns (uint256) {\\r\\n        uint256 redemptionBoost;\\r\\n        if (configurator.isRedemptionProvider(_account)) {\\r\\n            redemptionBoost = extraRatio;\\r\\n        }\\r\\n        return 100 * 1e18 + redemptionBoost + esLBRBoost.getUserBoost(_account, userUpdatedAt[_account], finishAt);\\r\\n    }\\r\\n\\r\\n    function earned(address _account) public view returns (uint256) {\\r\\n        return ((stakedOf(_account) * getBoost(_account) * (rewardPerToken() - userRewardPerTokenPaid[_account])) / 1e38) + rewards[_account];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Checks if the user's earnings can be claimed by others.\\r\\n     * @param user The user's address.\\r\\n     * @return  A boolean indicating if the user's earnings can be claimed by others.\\r\\n     */\\r\\n    function isOtherEarningsClaimable(address user) public view returns (bool) {\\r\\n        uint256 staked = stakedOf(user);\\r\\n        if(staked == 0) return true;\\r\\n        return (stakedLBRLpValue(user) * 10_000) / staked < minDlpRatio;\\r\\n    }\\r\\n\\r\\n    function getReward() external updateReward(msg.sender) {\\r\\n        require(!isOtherEarningsClaimable(msg.sender), \\\"Insufficient DLP, unable to claim rewards\\\");\\r\\n        uint256 reward = rewards[msg.sender];\\r\\n        if (reward > 0) {\\r\\n            rewards[msg.sender] = 0;\\r\\n            IesLBR(esLBR).mint(msg.sender, reward);\\r\\n            emit ClaimReward(msg.sender, reward, block.timestamp);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Purchasing the esLBR earnings from users who have insufficient DLP.\\r\\n     * @param user The address of the user whose earnings will be purchased.\\r\\n     * @param useEUSD Boolean indicating if the purchase will be made using eUSD.\\r\\n     * Requirements:\\r\\n     * The user's earnings must be claimable by others.\\r\\n     * If using eUSD, the purchase must be permitted.\\r\\n     * The user must have non-zero rewards.\\r\\n     * If using eUSD, the caller must have sufficient eUSD balance and allowance.\\r\\n     */\\r\\n    function _buyOtherEarnings(address user, bool useEUSD) internal updateReward(user) {\\r\\n        require(isOtherEarningsClaimable(user), \\\"The rewards of the user cannot be bought out\\\");\\r\\n        require(rewards[user] != 0, \\\"ZA\\\");\\r\\n        if(useEUSD) {\\r\\n            require(isEUSDBuyoutAllowed, \\\"The purchase using eUSD is not permitted.\\\");\\r\\n        }\\r\\n        uint256 reward = rewards[user];\\r\\n        rewards[user] = 0;\\r\\n        uint256 biddingFee = (reward * biddingFeeRatio) / 10_000;\\r\\n        if(useEUSD) {\\r\\n            (, int lbrPrice, , , ) = lbrPriceFeed.latestRoundData();\\r\\n            biddingFee = biddingFee * uint256(lbrPrice) / 1e8;\\r\\n            bool success = EUSD.transferFrom(msg.sender, address(owner()), biddingFee);\\r\\n            require(success, \\\"TF\\\");\\r\\n        } else {\\r\\n            IesLBR(LBR).burn(msg.sender, biddingFee);\\r\\n        }\\r\\n        IesLBR(esLBR).mint(msg.sender, reward);\\r\\n        emit ClaimedOtherEarnings(msg.sender, user, reward, biddingFee, useEUSD, block.timestamp);\\r\\n    }\\r\\n\\r\\n    function buyOthersEarnings(address[] memory users, bool useEUSD) external {\\r\\n        for(uint256 i; i < users.length; i++) {\\r\\n            _buyOtherEarnings(users[i], useEUSD);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function notifyRewardAmount(\\r\\n        uint256 amount\\r\\n    ) external onlyOwner updateReward(address(0)) {\\r\\n        require(amount != 0, \\\"amount = 0\\\");\\r\\n        if (block.timestamp >= finishAt) {\\r\\n            rewardRatio = amount / duration;\\r\\n        } else {\\r\\n            uint256 remainingRewards = (finishAt - block.timestamp) * rewardRatio;\\r\\n            rewardRatio = (amount + remainingRewards) / duration;\\r\\n        }\\r\\n\\r\\n        require(rewardRatio != 0, \\\"reward ratio = 0\\\");\\r\\n\\r\\n        finishAt = block.timestamp + duration;\\r\\n        updatedAt = block.timestamp;\\r\\n        emit NotifyRewardChanged(amount, block.timestamp);\\r\\n    }\\r\\n\\r\\n    function _min(uint256 x, uint256 y) private pure returns (uint256) {\\r\\n        return x <= y ? x : y;\\r\\n    }\\r\\n}\"\r\n    },\r\n    \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\"\r\n    },\r\n    \"lybra/interfaces/Iconfigurator.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\r\\n\\r\\npragma solidity ^0.8.17;\\r\\n\\r\\ninterface Iconfigurator {\\r\\n    function mintVault(address pool) external view returns(bool);\\r\\n    function mintVaultMaxSupply(address pool) external view returns(uint256);\\r\\n    function vaultMintPaused(address pool) external view returns(bool);\\r\\n    function vaultBurnPaused(address pool) external view returns(bool);\\r\\n    function tokenMiner(address pool) external view returns(bool);\\r\\n    function getSafeCollateralRatio(address pool) external view returns(uint256);\\r\\n    function getBadCollateralRatio(address pool) external view returns(uint256);\\r\\n    function getVaultWeight(address pool) external view returns (uint256);\\r\\n    function vaultMintFeeApy(address pool) external view returns(uint256);\\r\\n    function vaultKeeperRatio(address pool) external view returns(uint256);\\r\\n    function redemptionFee() external view returns(uint256);\\r\\n    function getEUSDAddress() external view returns(address);\\r\\n    function peUSD() external view returns(address);\\r\\n    function eUSDMiningIncentives() external view returns(address);\\r\\n    function getProtocolRewardsPool() external view returns(address);\\r\\n    function flashloanFee() external view returns(uint256);\\r\\n    function getEUSDMaxLocked() external view returns (uint256);\\r\\n    function stableToken() external view returns (address);\\r\\n    function isRedemptionProvider(address user) external view returns (bool);\\r\\n    function becomeRedemptionProvider(bool _bool) external;\\r\\n    function refreshMintReward(address user) external;\\r\\n    function distributeRewards() external;\\r\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\r\\n}\"\r\n    },\r\n    \"lybra/interfaces/ILybra.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\r\\npragma solidity ^0.8.17;\\r\\n\\r\\ninterface ILybra {\\r\\n    function totalDepositedAsset() external view returns (uint256);\\r\\n    function safeCollateralRatio() external view returns (uint256);\\r\\n    function depositedAsset(address user) external view returns (uint256);\\r\\n    function getBorrowedOf(address user) external view returns (uint256);\\r\\n    function getVaultType() external view returns (uint8);\\r\\n    function totaldepositedAsset() external view returns (uint256);\\r\\n    function getPoolTotalCirculation() external view returns (uint256);\\r\\n    function getAssetPrice() external view returns (uint256);\\r\\n    function getAsset() external view returns (address);\\r\\n    function getAsset2EtherExchangeRate() external view returns (uint256);\\r\\n    function burn(address onBehalfOf, uint256 amount) external;\\r\\n}\\r\\n\"\r\n    },\r\n    \"lybra/interfaces/IEUSD.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\r\\npragma solidity ^0.8.17;\\r\\n\\r\\ninterface IEUSD {\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    function getTotalShares() external view returns (uint256);\\r\\n\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    function sharesOf(address _account) external view returns (uint256);\\r\\n\\r\\n    function allowance(\\r\\n        address owner,\\r\\n        address spender\\r\\n    ) external view returns (uint256);\\r\\n\\r\\n    function approve(address _spender, uint256 _amount) external returns (bool);\\r\\n\\r\\n    function transferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) external returns (bool);\\r\\n\\r\\n    function transferShares(\\r\\n        address _recipient,\\r\\n        uint256 _sharesAmount\\r\\n    ) external returns (uint256);\\r\\n\\r\\n    function getSharesByMintedEUSD(\\r\\n        uint256 _EUSDAmount\\r\\n    ) external view returns (uint256);\\r\\n\\r\\n    function getMintedEUSDByShares(\\r\\n        uint256 _sharesAmount\\r\\n    ) external view returns (uint256);\\r\\n\\r\\n    function mint(\\r\\n        address _recipient,\\r\\n        uint256 _mintAmount\\r\\n    ) external returns (uint256 newTotalShares);\\r\\n\\r\\n    function burnShares(\\r\\n        address _account,\\r\\n        uint256 burnAmount\\r\\n    ) external returns (uint256 newTotalShares);\\r\\n\\r\\n    function burn(\\r\\n        address _account,\\r\\n        uint256 burnAmount\\r\\n    ) external returns (uint256 newTotalShares);\\r\\n\\r\\n    function transfer(address to, uint256 amount) external returns (bool);\\r\\n}\\r\\n\"\r\n    },\r\n    \"lybra/interfaces/IesLBR.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\r\\npragma solidity ^0.8.17;\\r\\n\\r\\ninterface IesLBR {\\r\\n    function totalSupply() external view returns (uint256);\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n    function mint(address user, uint256 amount) external returns(bool);\\r\\n    function burn(address user, uint256 amount) external returns(bool);\\r\\n    function getPastVotes(address account, uint256 timepoint) external view returns (uint256);\\r\\n    function getPastTotalSupply(uint256 timepoint) external view returns (uint256);\\r\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_config\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_lpOracle\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_lbrOracle\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_weth\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_oldEUSD\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"ClaimReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"Victim\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"buyAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"biddingFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"useEUSD\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"ClaimedOtherEarnings\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newOracle\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"LBROracleChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newOracle\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"LpOracleChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"addAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"NotifyRewardChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newLBR\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newEsLBR\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"TokenChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"vaults\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"VaultsChanged\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"EUSD\",\"outputs\":[{\"internalType\":\"contract IEUSD\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LBR\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"biddingFeeRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"users\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"useEUSD\",\"type\":\"bool\"}],\"name\":\"buyOthersEarnings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"configurator\",\"outputs\":[{\"internalType\":\"contract Iconfigurator\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"duration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"earned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"esLBR\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"esLBRBoost\",\"outputs\":[{\"internalType\":\"contract IesLBRBoost\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ethlbrStakePool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"extraRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"finishAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"getBoost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isEUSDBuyoutAllowed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"isOtherEarningsClaimable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastTimeRewardApplicable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minDlpRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"notifyRewardAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"refreshReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPerToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPerTokenStored\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_biddingRatio\",\"type\":\"uint256\"}],\"name\":\"setBiddingCost\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_boost\",\"type\":\"address\"}],\"name\":\"setBoost\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_bool\",\"type\":\"bool\"}],\"name\":\"setEUSDBuyoutAllowed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"}],\"name\":\"setEthlbrStakeInfo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"}],\"name\":\"setExtraRatio\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lbrOracle\",\"type\":\"address\"}],\"name\":\"setLBROracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lpOracle\",\"type\":\"address\"}],\"name\":\"setLpOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"}],\"name\":\"setMinDlpRatio\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_vaults\",\"type\":\"address[]\"}],\"name\":\"setPools\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_duration\",\"type\":\"uint256\"}],\"name\":\"setRewardsDuration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lbr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_eslbr\",\"type\":\"address\"}],\"name\":\"setToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_bool\",\"type\":\"bool\"}],\"name\":\"setV1Supported\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"stakedLBRLpValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"stakedOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updatedAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userRewardPerTokenPaid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userUpdatedAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"v1Supported\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"vaults\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wETH\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "EUSDMiningIncentives", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000c8353594eeedc5ce5a4544d3d9907b694c4690ff0000000000000000000000001932d36f5dd86327ceacd470271709a9318033380000000000000000000000001932d36f5dd86327ceacd470271709a931803338000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc200000000000000000000000097de57ec338ab5d51557da3434828c5dbfada371", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}