{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/STONER.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.15;\\n\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\\ninterface IERC20 {\\n\\n    function totalSupply() external view returns (uint256);\\n    function balanceOf(address account) external view returns (uint256);\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n    function allowance(address owner, address spender) external view returns (uint256);\\n    function approve(address spender, uint256 amount) external returns (bool);\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\\ninterface IERC20Metadata is IERC20 {\\n    \\n    function name() external view returns (string memory);\\n    function symbol() external view returns (string memory);\\n    function decimals() external view returns (uint8);\\n}\\n\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n    string private _name;\\n    string private _symbol;\\n\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        unchecked {\\n            _approve(sender, _msgSender(), currentAllowance - amount);\\n        }\\n\\n        return true;\\n    }\\n\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[sender] = senderBalance - amount;\\n        }\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    function _createInitialSupply(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n}\\n\\ncontract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    constructor () {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    modifier onlyOwner() {\\n        require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    function renounceOwnership() external virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\\ninterface IDexRouter {\\n    function factory() external pure returns (address);\\n    function WETH() external pure returns (address);\\n\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable;\\n\\n    function addLiquidityETH(\\n        address token,\\n        uint256 amountTokenDesired,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline\\n    )\\n        external\\n        payable\\n        returns (\\n            uint256 amountToken,\\n            uint256 amountETH,\\n            uint256 liquidity\\n        );\\n}\\n\\ninterface IDexFactory {\\n    function createPair(address tokenA, address tokenB)\\n        external\\n        returns (address pair);\\n}\\n\\ncontract STONER is ERC20, Ownable {\\n\\n    uint256 public maxBuy;\\n    uint256 public maxSell;\\n    uint256 public maxWallet;\\n\\n    IDexRouter public immutable dexRouter;\\n    address public dexPair;\\n\\n    bool private swapping;\\n    uint256 public swapTokensAtAmount;\\n\\n    address operationsAddress;\\n    address devAddress;\\n\\n    uint256 public tradingActiveBlock = 0; // 0 means trading is not active\\n    uint256 public blockForPenaltyEnd;\\n    mapping (address => bool) public boughtEarly;\\n    uint256 public botsCaught;\\n\\n    bool public limitsInEffect = true;\\n    bool public tradingActive = false;\\n    bool public swapEnabled = false;\\n\\n    // Anti-bot and anti-whale mappings and variables\\n    mapping(address => uint256) private _holderLastTransferTimestamp; // to hold last Transfers temporarily during launch\\n    bool public transferDelayEnabled = false;\\n\\n    uint256 public buyTotalFees;\\n    uint256 public buyOperationsFee;\\n    uint256 public buyLiquidityFee;\\n    uint256 public buyDevFee;\\n    uint256 public buyBurnFee;\\n\\n    uint256 public sellTotalFees;\\n    uint256 public sellOperationsFee;\\n    uint256 public sellLiquidityFee;\\n    uint256 public sellDevFee;\\n    uint256 public sellBurnFee;\\n\\n    uint256 public tokensForOperations;\\n    uint256 public tokensForLiquidity;\\n    uint256 public tokensForDev;\\n    uint256 public tokensForBurn;\\n\\n    /******************/\\n\\n    // exlcude from fees and max transaction amount\\n    mapping (address => bool) private _isExcludedFromFees;\\n    mapping (address => bool) public _isExcludedMaxTransactionAmount;\\n\\n    // store addresses that a automatic market maker pairs. Any transfer *to* these addresses\\n    // could be subject to a maximum transfer amount\\n    mapping (address => bool) public automatedMarketMakerPairs;\\n\\n    event SetAutomatedMarketMakerPair(address indexed pair, bool indexed value);\\n\\n    event TradingActive();\\n\\n    event LimitsRemoved();\\n\\n    event ExcludeFromFees(address indexed account, bool isExcluded);\\n\\n    event UpdatedMaxBuyAmount(uint256 newAmount);\\n\\n    event UpdatedMaxSellAmount(uint256 newAmount);\\n\\n    event UpdatedMaxWalletAmount(uint256 newAmount);\\n\\n    event UpdatedOperationsAddress(address indexed newWallet);\\n\\n    event MaxTransactionExclusion(address _address, bool excluded);\\n\\n    event BuyBackTriggered(uint256 amount);\\n\\n    event OwnerForcedSwapBack(uint256 timestamp);\\n\\n    event CaughtEarlyBuyer(address sniper);\\n\\n    event SwapAndLiquify(\\n        uint256 tokensSwapped,\\n        uint256 ethReceived,\\n        uint256 tokensIntoLiquidity\\n    );\\n\\n    event TokensRecovered(address token, uint256 amount);\\n\\n    constructor() ERC20(\\\"StonerAI \\\",\\\"STONER\\\") {\\n\\n        address newOwner = msg.sender;\\n        IDexRouter _dexRouter = IDexRouter(_getRouterAddress());\\n        dexRouter = _dexRouter;\\n\\n        // create pair\\n        dexPair = IDexFactory(_dexRouter.factory()).createPair(address(this), _dexRouter.WETH());\\n        _excludeFromMaxTransaction(address(dexPair), true);\\n        _setAutomatedMarketMakerPair(address(dexPair), true);\\n\\n        uint256 totalSupply = 420_000_000 * 10 ** decimals();\\n\\n\\n        maxBuy = totalSupply * 2 / 100;\\n        maxSell = totalSupply * 2 / 100;\\n        maxWallet = totalSupply * 2 / 100;\\n        swapTokensAtAmount = totalSupply * 5 / 10000;\\n\\n        buyOperationsFee = 1;\\n        buyLiquidityFee = 1;\\n        buyDevFee = 2;\\n        buyBurnFee = 0;\\n        buyTotalFees = buyOperationsFee + buyLiquidityFee + buyDevFee + buyBurnFee;\\n\\n        sellOperationsFee = 25;\\n        sellLiquidityFee = 2;\\n        sellDevFee = 30;\\n        sellBurnFee = 0;\\n        sellTotalFees = sellOperationsFee + sellLiquidityFee + sellDevFee + sellBurnFee;\\n\\n        _excludeFromMaxTransaction(newOwner, true);\\n        _excludeFromMaxTransaction(address(this), true);\\n        _excludeFromMaxTransaction(address(0xdead), true);\\n\\n        excludeFromFees(newOwner, true);\\n        excludeFromFees(address(this), true);\\n        excludeFromFees(address(0xdead), true);\\n\\n        operationsAddress = address(newOwner);\\n        devAddress = address(newOwner);\\n\\n        _createInitialSupply(newOwner, totalSupply);\\n        transferOwnership(newOwner);\\n    }\\n\\n\\n\\n    function enableTrading() external onlyOwner returns (bool){\\n        require(!tradingActive, \\\"Cannot reenable trading\\\");\\n        tradingActive = true;\\n        swapEnabled = true;\\n        tradingActiveBlock = block.number;\\n        emit TradingActive();\\n        return true;\\n    }\\n\\n    \\n\\n    function _transfer(address from, address to, uint256 amount) internal override {\\n\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n        require(amount > 0, \\\"amount must be greater than 0\\\");\\n\\n        if(!tradingActive){\\n            require(_isExcludedFromFees[from] || _isExcludedFromFees[to], \\\"Trading is not active.\\\");\\n        }\\n\\n        if(blockForPenaltyEnd > 0){\\n            require(!boughtEarly[from] || to == owner() || to == address(0xdead), \\\"Bots cannot transfer tokens in or out except to owner or dead address.\\\");\\n        }\\n\\n        if(limitsInEffect){\\n            if (from != owner() && to != owner() && to != address(0) && to != address(0xdead) && !_isExcludedFromFees[from] && !_isExcludedFromFees[to]){\\n\\n                // at launch if the transfer delay is enabled, ensure the block timestamps for purchasers is set -- during launch.\\n                if (transferDelayEnabled){\\n                    if (to != address(dexRouter) && to != address(dexPair)){\\n                        require(_holderLastTransferTimestamp[tx.origin] < block.number - 3 && _holderLastTransferTimestamp[to] < block.number - 3, \\\"_transfer:: Transfer Delay enabled.  Try again later.\\\");\\n                        _holderLastTransferTimestamp[tx.origin] = block.number;\\n                        _holderLastTransferTimestamp[to] = block.number;\\n                    }\\n                }\\n\\n                //when buy\\n                if (automatedMarketMakerPairs[from] && !_isExcludedMaxTransactionAmount[to]) {\\n                        require(amount <= maxBuy, \\\"Buy transfer amount exceeds the max buy.\\\");\\n                        require(amount + balanceOf(to) <= maxWallet, \\\"Cannot Exceed max wallet\\\");\\n                }\\n                //when sell\\n                else if (automatedMarketMakerPairs[to] && !_isExcludedMaxTransactionAmount[from]) {\\n                        require(amount <= maxSell, \\\"Sell transfer amount exceeds the max sell.\\\");\\n                }\\n                else if (!_isExcludedMaxTransactionAmount[to]){\\n                    require(amount + balanceOf(to) <= maxWallet, \\\"Cannot Exceed max wallet\\\");\\n                }\\n            }\\n        }\\n\\n        uint256 contractTokenBalance = balanceOf(address(this));\\n\\n        bool canSwap = contractTokenBalance >= swapTokensAtAmount;\\n\\n        if(canSwap && swapEnabled && !swapping && !automatedMarketMakerPairs[from] && !_isExcludedFromFees[from] && !_isExcludedFromFees[to]) {\\n            swapping = true;\\n\\n            swapBack();\\n\\n            swapping = false;\\n        }\\n\\n        bool takeFee = true;\\n        // if any account belongs to _isExcludedFromFee account then remove the fee\\n        if(_isExcludedFromFees[from] || _isExcludedFromFees[to]) {\\n            takeFee = false;\\n        }\\n\\n        uint256 fees = 0;\\n        // only take fees on buys/sells, do not take on wallet transfers\\n        if(takeFee){\\n            // bot/sniper penalty.\\n            if(earlyBuyPenaltyInEffect() && automatedMarketMakerPairs[from] && !automatedMarketMakerPairs[to] && buyTotalFees > 0){\\n\\n                if(!boughtEarly[to]){\\n                    boughtEarly[to] = true;\\n                    botsCaught += 1;\\n                    emit CaughtEarlyBuyer(to);\\n                }\\n\\n                fees = amount * 99 / 100;\\n                tokensForLiquidity += fees * buyLiquidityFee / buyTotalFees;\\n                tokensForOperations += fees * buyOperationsFee / buyTotalFees;\\n                tokensForDev += fees * buyDevFee / buyTotalFees;\\n                tokensForBurn += fees * buyBurnFee / buyTotalFees;\\n            }\\n\\n            // on sell\\n            else if (automatedMarketMakerPairs[to] && sellTotalFees > 0){\\n                fees = amount * sellTotalFees / 100;\\n                tokensForLiquidity += fees * sellLiquidityFee / sellTotalFees;\\n                tokensForOperations += fees * sellOperationsFee / sellTotalFees;\\n                tokensForDev += fees * sellDevFee / sellTotalFees;\\n                tokensForBurn += fees * sellBurnFee / sellTotalFees;\\n            }\\n\\n            // on buy\\n            else if(automatedMarketMakerPairs[from] && buyTotalFees > 0) {\\n                fees = amount * buyTotalFees / 100;\\n                tokensForLiquidity += fees * buyLiquidityFee / buyTotalFees;\\n                tokensForOperations += fees * buyOperationsFee / buyTotalFees;\\n                tokensForDev += fees * buyDevFee / buyTotalFees;\\n                tokensForBurn += fees * buyBurnFee / buyTotalFees;\\n            }\\n\\n            if(fees > 0){\\n                super._transfer(from, address(this), fees);\\n            }\\n\\n            amount -= fees;\\n        }\\n\\n        super._transfer(from, to, amount);\\n    }\\n\\n    function earlyBuyPenaltyInEffect() public view returns (bool){\\n        return block.number < blockForPenaltyEnd;\\n    }\\n\\n    function swapTokensForEth(uint256 tokenAmount) private {\\n\\n        // generate the uniswap pair path of token -> weth\\n        address[] memory path = new address[](2);\\n        path[0] = address(this);\\n        path[1] = dexRouter.WETH();\\n\\n        _approve(address(this), address(dexRouter), tokenAmount);\\n\\n        // make the swap\\n        dexRouter.swapExactTokensForETHSupportingFeeOnTransferTokens(\\n            tokenAmount,\\n            0, // accept any amount of ETH\\n            path,\\n            address(this),\\n            block.timestamp\\n        );\\n    }\\n\\n    function addLiquidity(uint256 tokenAmount, uint256 ethAmount) private {\\n        // approve token transfer to cover all possible scenarios\\n        _approve(address(this), address(dexRouter), tokenAmount);\\n\\n        // add the liquidity\\n        dexRouter.addLiquidityETH{value: ethAmount}(\\n            address(this),\\n            tokenAmount,\\n            0, // slippage is unavoidable\\n            0, // slippage is unavoidable\\n            address(0xdead),\\n            block.timestamp\\n        );\\n    }\\n\\n    function swapBack() private {\\n\\n        if(tokensForBurn > 0 && balanceOf(address(this)) >= tokensForBurn) {\\n            _burn(address(this), tokensForBurn);\\n        }\\n        tokensForBurn = 0;\\n\\n        uint256 contractBalance = balanceOf(address(this));\\n        uint256 totalTokensToSwap = tokensForLiquidity + tokensForOperations + tokensForDev;\\n\\n        if(contractBalance == 0 || totalTokensToSwap == 0) {return;}\\n\\n        if(contractBalance > swapTokensAtAmount * 20){\\n            contractBalance = swapTokensAtAmount * 20;\\n        }\\n\\n        bool success;\\n\\n        // Halve the amount of liquidity tokens\\n        uint256 liquidityTokens = contractBalance * tokensForLiquidity / totalTokensToSwap / 2;\\n\\n        swapTokensForEth(contractBalance - liquidityTokens);\\n\\n        uint256 ethBalance = address(this).balance;\\n        uint256 ethForLiquidity = ethBalance;\\n\\n        uint256 ethForOperations = ethBalance * tokensForOperations / (totalTokensToSwap - (tokensForLiquidity/2));\\n        uint256 ethForDev = ethBalance * tokensForDev / (totalTokensToSwap - (tokensForLiquidity/2));\\n\\n        ethForLiquidity -= ethForOperations + ethForDev;\\n\\n        tokensForLiquidity = 0;\\n        tokensForOperations = 0;\\n        tokensForDev = 0;\\n        tokensForBurn = 0;\\n\\n        if(liquidityTokens > 0 && ethForLiquidity > 0){\\n            addLiquidity(liquidityTokens, ethForLiquidity);\\n        }\\n\\n        (success,) = address(devAddress).call{value: ethForDev}(\\\"\\\");\\n\\n        (success,) = address(operationsAddress).call{value: address(this).balance}(\\\"\\\");\\n    }\\n\\n    function _getRouterAddress() private view returns (address){\\n        address _router = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\\n        \\n        if (block.chainid == 11155111)\\n            _router = 0xC532a74256D3Db42D0Bf7a0400fEFDbad7694008;\\n        else if (block.chainid == 8453)\\n            _router = 0x4752ba5DBc23f44D87826276BF6Fd6b1C372aD24;\\n        else if (block.chainid == 56)\\n            _router = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\\n\\n        return _router;\\n    }\\n\\n    // remove limits after token is stable\\n    function removeLimits() external onlyOwner {\\n        limitsInEffect = false;\\n        transferDelayEnabled = false;\\n        emit LimitsRemoved();\\n    }\\n\\n    function manageEarly(address wallet, bool flag) external onlyOwner {\\n        boughtEarly[wallet] = flag;\\n    }\\n\\n\\n    function disableTransferDelay() external onlyOwner {\\n        transferDelayEnabled = false;\\n    }\\n\\n    function updateMaxBuy(uint256 newNum) external onlyOwner {\\n        require(newNum >= (totalSupply() * 2 / 1000)/1e18, \\\"Cannot set max buy amount lower than 0.2%\\\");\\n        maxBuy = newNum * (10**18);\\n        emit UpdatedMaxBuyAmount(maxBuy);\\n    }\\n\\n    function updateMaxSell(uint256 newNum) external onlyOwner {\\n        require(newNum >= (totalSupply() * 2 / 1000)/1e18, \\\"Cannot set max sell amount lower than 0.2%\\\");\\n        maxSell = newNum * (10**18);\\n        emit UpdatedMaxSellAmount(maxSell);\\n    }\\n\\n    function updateMaxWallet(uint256 newNum) external onlyOwner {\\n        require(newNum >= (totalSupply() * 3 / 1000)/1e18, \\\"Cannot set max wallet amount lower than 0.3%\\\");\\n        maxWallet = newNum * (10**18);\\n        emit UpdatedMaxWalletAmount(maxWallet);\\n    }\\n\\n    function updateSwapTokens(uint256 newAmount) external onlyOwner {\\n        require(newAmount >= totalSupply() * 1 / 100000, \\\"Swap amount cannot be lower than 0.001% total supply.\\\");\\n        require(newAmount <= totalSupply() * 1 / 1000, \\\"Swap amount cannot be higher than 0.1% total supply.\\\");\\n        swapTokensAtAmount = newAmount;\\n    }\\n\\n    function _excludeFromMaxTransaction(address updAds, bool isExcluded) private {\\n        _isExcludedMaxTransactionAmount[updAds] = isExcluded;\\n        emit MaxTransactionExclusion(updAds, isExcluded);\\n    }\\n\\n    function excludeFromMax(address updAds, bool isEx) external onlyOwner {\\n        if(!isEx){\\n            require(updAds != dexPair, \\\"Cannot remove uniswap pair from max txn\\\");\\n        }\\n        _isExcludedMaxTransactionAmount[updAds] = isEx;\\n    }\\n\\n    function setAMM(address pair, bool value) external onlyOwner returns(address){\\n        require(pair != dexPair, \\\"The pair cannot be removed\\\");\\n\\n        _setAutomatedMarketMakerPair(pair, value);\\n        emit SetAutomatedMarketMakerPair(pair, value);\\n        return msg.sender;\\n    }\\n\\n    function _setAutomatedMarketMakerPair(address pair, bool value) private {\\n        automatedMarketMakerPairs[pair] = value;\\n        _excludeFromMaxTransaction(pair, value);\\n        emit SetAutomatedMarketMakerPair(pair, value);\\n    }\\n\\n    function updateBuyFees(uint256 _operationsFee, uint256 _DevFee) external onlyOwner {\\n        buyOperationsFee = _operationsFee;\\n        buyDevFee = _DevFee;\\n        buyTotalFees = buyOperationsFee + buyLiquidityFee + buyDevFee + buyBurnFee;\\n        require(buyTotalFees <= 100, \\\"bad fees\\\");\\n    }\\n\\n    function updateSellFees(uint256 _operationsFee, uint256 _DevFee) external onlyOwner {\\n        sellOperationsFee = _operationsFee;\\n        sellDevFee = _DevFee;\\n        sellTotalFees = sellOperationsFee + sellLiquidityFee + sellDevFee + sellBurnFee;\\n        require(sellTotalFees <= 100, \\\"bad fees\\\");\\n    }\\n\\n    event FinalTax();\\n    function finalTax() external onlyOwner returns(address){\\n        sellOperationsFee = 20;\\n        sellLiquidityFee = 0;\\n        sellDevFee = 0;\\n        sellBurnFee = 0;\\n        sellTotalFees = sellOperationsFee + sellLiquidityFee + sellDevFee + sellBurnFee;\\n        require(sellTotalFees <= 100, \\\"Must keep fees at 20% or less\\\");\\n        buyOperationsFee = 25;\\n        buyLiquidityFee = 0;\\n        buyDevFee = 0;\\n        buyBurnFee = 0;\\n        buyTotalFees = buyOperationsFee + buyLiquidityFee + buyDevFee + buyBurnFee;\\n        require(buyTotalFees <= 100, \\\"Must keep fees at 20% or less\\\");\\n        emit FinalTax();\\n        return msg.sender;\\n    }\\n\\n    function excludeFromFees(address account, bool excluded) public onlyOwner {\\n        _isExcludedFromFees[account] = excluded;\\n        emit ExcludeFromFees(account, excluded);\\n    }\\n\\n\\n    function recoverTokens(address _to, address _token) external onlyOwner returns (bool _sent) {\\n        require(_token != address(0), \\\"_token address cannot be 0\\\");\\n        require(_token != address(this), \\\"Can't withdraw native tokens\\\");\\n        uint256 _contractBalance = IERC20(_token).balanceOf(address(this));\\n        _sent = IERC20(_token).transfer(_to, _contractBalance);\\n        emit TokensRecovered(_token, _contractBalance);\\n    }\\n\\n    function withdrawETH() external onlyOwner {\\n        bool success;\\n        (success,) = address(msg.sender).call{value: address(this).balance}(\\\"\\\");\\n    }\\n\\n    event OpsAddressSet(address indexed operationsAddress);\\n    function setOpsAddress(address _operationsAddress) external onlyOwner returns(address){\\n        require(_operationsAddress != address(0), \\\"_operationsAddress address cannot be 0\\\");\\n        operationsAddress = payable(_operationsAddress);\\n        emit OpsAddressSet(_operationsAddress);\\n        return _operationsAddress;\\n    }\\n\\n    event DevAddressSet(address indexed devAddress);\\n    function setDevAddress(address _devAddress) external onlyOwner returns(bool){\\n        require(_devAddress != address(0), \\\"_devAddress address cannot be 0\\\");\\n        devAddress = payable(_devAddress);\\n        emit DevAddressSet(_devAddress);\\n        return true;\\n    }\\n\\n\\n    receive() external payable {}\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"paris\",\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"BuyBackTriggered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sniper\",\"type\":\"address\"}],\"name\":\"CaughtEarlyBuyer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"devAddress\",\"type\":\"address\"}],\"name\":\"DevAddressSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isExcluded\",\"type\":\"bool\"}],\"name\":\"ExcludeFromFees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"FinalTax\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"LimitsRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"excluded\",\"type\":\"bool\"}],\"name\":\"MaxTransactionExclusion\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operationsAddress\",\"type\":\"address\"}],\"name\":\"OpsAddressSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"OwnerForcedSwapBack\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"SetAutomatedMarketMakerPair\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensSwapped\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethReceived\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensIntoLiquidity\",\"type\":\"uint256\"}],\"name\":\"SwapAndLiquify\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokensRecovered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"TradingActive\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newAmount\",\"type\":\"uint256\"}],\"name\":\"UpdatedMaxBuyAmount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newAmount\",\"type\":\"uint256\"}],\"name\":\"UpdatedMaxSellAmount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newAmount\",\"type\":\"uint256\"}],\"name\":\"UpdatedMaxWalletAmount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newWallet\",\"type\":\"address\"}],\"name\":\"UpdatedOperationsAddress\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_isExcludedMaxTransactionAmount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"automatedMarketMakerPairs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"blockForPenaltyEnd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"botsCaught\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"boughtEarly\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyBurnFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyDevFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyLiquidityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyOperationsFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyTotalFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dexPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dexRouter\",\"outputs\":[{\"internalType\":\"contract IDexRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disableTransferDelay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"earlyBuyPenaltyInEffect\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableTrading\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"excluded\",\"type\":\"bool\"}],\"name\":\"excludeFromFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"updAds\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isEx\",\"type\":\"bool\"}],\"name\":\"excludeFromMax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"finalTax\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitsInEffect\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"flag\",\"type\":\"bool\"}],\"name\":\"manageEarly\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxBuy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSell\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxWallet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"recoverTokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"_sent\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellBurnFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellDevFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellLiquidityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellOperationsFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellTotalFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setAMM\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_devAddress\",\"type\":\"address\"}],\"name\":\"setDevAddress\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operationsAddress\",\"type\":\"address\"}],\"name\":\"setOpsAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapTokensAtAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokensForBurn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokensForDev\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokensForLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokensForOperations\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingActiveBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferDelayEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_operationsFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_DevFee\",\"type\":\"uint256\"}],\"name\":\"updateBuyFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newNum\",\"type\":\"uint256\"}],\"name\":\"updateMaxBuy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newNum\",\"type\":\"uint256\"}],\"name\":\"updateMaxSell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newNum\",\"type\":\"uint256\"}],\"name\":\"updateMaxWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_operationsFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_DevFee\",\"type\":\"uint256\"}],\"name\":\"updateSellFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newAmount\",\"type\":\"uint256\"}],\"name\":\"updateSwapTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "STONER", "CompilerVersion": "v0.8.24+commit.e11b9ed9", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "paris", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}