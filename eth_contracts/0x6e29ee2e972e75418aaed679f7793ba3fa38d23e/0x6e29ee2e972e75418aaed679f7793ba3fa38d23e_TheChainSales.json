{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"settings\": {\r\n    \"evmVersion\": \"shanghai\",\r\n    \"libraries\": {},\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 2000\r\n    },\r\n    \"remappings\": [],\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  },\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/interfaces/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC721/IERC721.sol\\\";\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"src/TheChainSales.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\nimport {IERC721} from \\\"@openzeppelin/contracts/interfaces/IERC721.sol\\\";\\n\\nimport {OwnableOperators} from \\\"./utils/OwnableOperators.sol\\\";\\n\\nimport {ITheChainCollection} from \\\"./interfaces/ITheChainCollection.sol\\\";\\nimport {ITheChainSales} from \\\"./interfaces/ITheChainSales.sol\\\";\\n\\ncontract TheChainSales is ITheChainSales, OwnableOperators {\\n\\terror InvalidOrder();\\n\\terror TooEarly();\\n\\terror InvalidPayment();\\n\\terror FailedPayment();\\n\\n\\terror TokenNotEscrowed();\\n\\terror UnknownOrder();\\n\\terror OrderExpired();\\n\\n\\tstruct ShareHolder {\\n\\t\\taddress account;\\n\\t\\tuint96 share;\\n\\t}\\n\\n\\taddress public immutable THE_CHAIN;\\n\\n\\tmapping(uint256 => Order) public orders;\\n\\n\\tShareHolder public theChainShare;\\n\\n\\tuint256 private _lastOrderId;\\n\\n\\tuint256 public startsAt;\\n\\n\\tconstructor(address theChain, ShareHolder memory initShare) {\\n\\t\\tTHE_CHAIN = theChain;\\n\\t\\ttheChainShare = initShare;\\n\\t}\\n\\n\\tfunction getOrders(uint256[] calldata orderIds) external view override returns (Order[] memory) {\\n\\t\\tuint256 length = orderIds.length;\\n\\t\\tOrder[] memory results = new Order[](length);\\n\\t\\tfor (uint i; i < length; i++) {\\n\\t\\t\\tresults[i] = orders[orderIds[i]];\\n\\t\\t}\\n\\n\\t\\treturn results;\\n\\t}\\n\\n\\t// =============================================================\\n\\t//                       \\t   Interactions\\n\\t// =============================================================\\n\\n\\tfunction fulfillOrder(uint256 orderId) external payable override {\\n\\t\\tOrder memory order = _requireOrderExists(orderId);\\n\\n\\t\\tif (order.startsAt > block.timestamp || startsAt > block.timestamp) {\\n\\t\\t\\trevert TooEarly();\\n\\t\\t}\\n\\n\\t\\tif (msg.value != order.price) {\\n\\t\\t\\trevert InvalidPayment();\\n\\t\\t}\\n\\n\\t\\t// we delete the order\\n\\t\\tdelete orders[orderId];\\n\\n\\t\\t// we close it\\n\\t\\temit OrderClosed(orderId, msg.sender, false);\\n\\n\\t\\tShareHolder memory theChainShare_ = theChainShare;\\n\\n\\t\\t// the chain\\n\\t\\tuint256 share = (msg.value * theChainShare_.share) / 10000;\\n\\t\\tif (share > 0) {\\n\\t\\t\\t_transferValue(theChainShare_.account, share);\\n\\t\\t}\\n\\n\\t\\t// creator\\n\\t\\t_transferValue(order.creator, msg.value - share);\\n\\n\\t\\t// transfer\\n\\t\\tIERC721(THE_CHAIN).transferFrom(address(this), msg.sender, order.tokenId);\\n\\t}\\n\\n\\tfunction createOrder(address creator, uint96 price, uint128 tokenId, uint128 saleStartsAt) external onlyOperator {\\n\\t\\t_requireEscrowed(tokenId);\\n\\n\\t\\tuint256 orderId = ++_lastOrderId;\\n\\n\\t\\torders[orderId] = Order(creator, price, tokenId, saleStartsAt);\\n\\n\\t\\temit NewOrder(orderId, creator, tokenId, price, saleStartsAt);\\n\\t}\\n\\n\\t// =============================================================\\n\\t//                    \\tCreators & Owner\\n\\t// =============================================================\\n\\n\\tfunction cancelOrder(uint256 orderId, address recipient) external {\\n\\t\\t// only the contract owner or the creator can cancel an order\\n\\t\\tif (msg.sender != owner()) {\\n\\t\\t\\tif (msg.sender != orders[orderId].creator) {\\n\\t\\t\\t\\trevert NotAuthorized();\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\t_cancelOrder(orderId, recipient);\\n\\t}\\n\\n\\tfunction cancelOrders(uint256[] memory orderIds, address recipient) external onlyOwner {\\n\\t\\tuint256 length = orderIds.length;\\n\\t\\tfor (uint256 i; i < length; i++) {\\n\\t\\t\\t_cancelOrder(orderIds[i], recipient);\\n\\t\\t}\\n\\t}\\n\\n\\t// =============================================================\\n\\t//                       \\t Owner\\n\\t// =============================================================\\n\\n\\tfunction editTheChainShares(ShareHolder calldata newShares) external onlyOwner {\\n\\t\\ttheChainShare = newShares;\\n\\t}\\n\\n\\t/// @notice Allows owner to update when the sales starts\\n\\t/// @param newStartsAt the new timestamp (in seconds)\\n\\tfunction setStartsAt(uint256 newStartsAt) external onlyOwner {\\n\\t\\tstartsAt = newStartsAt;\\n\\t}\\n\\n\\t// =============================================================\\n\\t//                       \\t Internals\\n\\t// =============================================================\\n\\n\\tfunction _transferValue(address payee, uint256 value) internal {\\n\\t\\t(bool success, ) = payee.call{value: value, gas: 30_000}(\\\"\\\");\\n\\t\\tif (!success) {\\n\\t\\t\\trevert FailedPayment();\\n\\t\\t}\\n\\t}\\n\\n\\tfunction _requireOrderExists(uint256 orderId) internal view returns (Order memory) {\\n\\t\\tOrder memory order = orders[orderId];\\n\\n\\t\\tif (order.creator == address(0)) {\\n\\t\\t\\tif (orderId <= _lastOrderId) {\\n\\t\\t\\t\\trevert OrderExpired();\\n\\t\\t\\t} else {\\n\\t\\t\\t\\trevert UnknownOrder();\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\t_requireEscrowed(order.tokenId);\\n\\n\\t\\treturn order;\\n\\t}\\n\\n\\tfunction _requireEscrowed(uint256 tokenId) internal view {\\n\\t\\tif (IERC721(THE_CHAIN).ownerOf(tokenId) != address(this)) {\\n\\t\\t\\trevert TokenNotEscrowed();\\n\\t\\t}\\n\\t}\\n\\n\\tfunction _cancelOrder(uint256 orderId, address recipient) internal {\\n\\t\\tOrder memory order = _requireOrderExists(orderId);\\n\\n\\t\\t// we delete the order\\n\\t\\tdelete orders[orderId];\\n\\n\\t\\t// we close it\\n\\t\\temit OrderClosed(orderId, msg.sender, true);\\n\\n\\t\\t// transfer to recipient\\n\\t\\tIERC721(THE_CHAIN).transferFrom(address(this), recipient, order.tokenId);\\n\\t}\\n}\\n\"\r\n    },\r\n    \"src/interfaces/ITheChainCollection.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\ninterface ITheChainCollection {\\n\\tstruct HashData {\\n\\t\\tbytes32 previousHash;\\n\\t\\taddress creator;\\n\\t\\tuint96 tokenId;\\n\\t\\tstring uri;\\n\\t}\\n\\n\\tfunction mint(\\n\\t\\tuint256 tokenId,\\n\\t\\taddress creator,\\n\\t\\taddress transferTo,\\n\\t\\tbytes32 currentHash,\\n\\t\\tbytes32 previousHash,\\n\\t\\tstring calldata uri\\n\\t) external;\\n}\\n\"\r\n    },\r\n    \"src/interfaces/ITheChainSales.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\ninterface ITheChainSales {\\n\\tevent NewOrder(uint256 orderId, address creator, uint256 tokenId, uint256 price, uint256 startsAt);\\n\\n\\tevent OrderClosed(uint256 orderId, address operator, bool canceled);\\n\\n\\tstruct Order {\\n\\t\\taddress creator;\\n\\t\\tuint96 price;\\n\\t\\tuint128 tokenId;\\n\\t\\tuint128 startsAt;\\n\\t}\\n\\n\\tfunction getOrders(uint256[] calldata orderIds) external view returns (Order[] memory);\\n\\n\\tfunction fulfillOrder(uint256 orderId) external payable;\\n\\n\\tfunction createOrder(address creator, uint96 price, uint128 tokenId, uint128 startsAt) external;\\n}\\n\"\r\n    },\r\n    \"src/utils/OwnableOperators.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport {WithOperators} from \\\"./WithOperators.sol\\\";\\n\\n/// @title OwnableOperators\\n/// @author dev by @dievardump\\n/// @notice This contract adds ownable & operators management\\nabstract contract OwnableOperators is Ownable, WithOperators {\\n\\tmodifier onlyOperator() virtual override {\\n\\t\\tif (msg.sender != owner()) {\\n\\t\\t\\tif (!operators[msg.sender]) {\\n\\t\\t\\t\\trevert NotAuthorized();\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\t_;\\n\\t}\\n\\n\\t/// @notice Allows to add operators to this contract\\n\\t/// @param operatorsList the new operators to add\\n\\t/// @param isOperator if the operators should be added or removed\\n\\tfunction setOperators(address[] memory operatorsList, bool isOperator) public onlyOwner {\\n\\t\\t_setOperators(operatorsList, isOperator);\\n\\t}\\n}\\n\"\r\n    },\r\n    \"src/utils/WithOperators.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\n/// @title WithOperators\\n/// @author dev by @dievardump\\n/// @notice This contract adds operators management\\nabstract contract WithOperators {\\n\\terror NotAuthorized();\\n\\n\\t/// @notice the address of the minter module\\n\\tmapping(address => bool) public operators;\\n\\n\\tmodifier onlyOperator() virtual {\\n\\t\\tif (!operators[msg.sender]) {\\n\\t\\t\\trevert NotAuthorized();\\n\\t\\t}\\n\\t\\t_;\\n\\t}\\n\\n\\t/// @notice Allows to add operators to this contract\\n\\t/// @param operatorsList the new operators to add\\n\\t/// @param isOperator if the operators should be added or removed\\n\\tfunction _setOperators(address[] memory operatorsList, bool isOperator) internal virtual {\\n\\t\\tuint256 length = operatorsList.length;\\n\\t\\tfor (uint256 i; i < length; i++) {\\n\\t\\t\\toperators[operatorsList[i]] = isOperator;\\n\\t\\t}\\n\\t}\\n}\\n\"\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"theChain\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"share\",\"type\":\"uint96\"}],\"internalType\":\"struct TheChainSales.ShareHolder\",\"name\":\"initShare\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"FailedPayment\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidOrder\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidPayment\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotAuthorized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OrderExpired\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TokenNotEscrowed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TooEarly\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UnknownOrder\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startsAt\",\"type\":\"uint256\"}],\"name\":\"NewOrder\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"canceled\",\"type\":\"bool\"}],\"name\":\"OrderClosed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"THE_CHAIN\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"cancelOrder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"orderIds\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"cancelOrders\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"price\",\"type\":\"uint96\"},{\"internalType\":\"uint128\",\"name\":\"tokenId\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"saleStartsAt\",\"type\":\"uint128\"}],\"name\":\"createOrder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"share\",\"type\":\"uint96\"}],\"internalType\":\"struct TheChainSales.ShareHolder\",\"name\":\"newShares\",\"type\":\"tuple\"}],\"name\":\"editTheChainShares\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"}],\"name\":\"fulfillOrder\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"orderIds\",\"type\":\"uint256[]\"}],\"name\":\"getOrders\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"price\",\"type\":\"uint96\"},{\"internalType\":\"uint128\",\"name\":\"tokenId\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"startsAt\",\"type\":\"uint128\"}],\"internalType\":\"struct ITheChainSales.Order[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"operators\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"orders\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"price\",\"type\":\"uint96\"},{\"internalType\":\"uint128\",\"name\":\"tokenId\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"startsAt\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"operatorsList\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"isOperator\",\"type\":\"bool\"}],\"name\":\"setOperators\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newStartsAt\",\"type\":\"uint256\"}],\"name\":\"setStartsAt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startsAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"theChainShare\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"share\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "TheChainSales", "CompilerVersion": "v0.8.20+commit.a1b79de6", "OptimizationUsed": "1", "Runs": "2000", "ConstructorArguments": "000000000000000000000000da39c7dce54956d5d152650119c87dbc4fbb6dba000000000000000000000000fbe6ae3b7719fe6d0b1678ec35a02836064716be00000000000000000000000000000000000000000000000000000000000005dc", "EVMVersion": "shanghai", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}