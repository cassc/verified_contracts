{"SourceCode": "/**\r\n *Submitted for verification at Etherscan.io on 2023-03-16\r\n*/\r\n\r\n/**\r\n * \r\n */\r\n\r\n\r\n// SPDX-License-Identifier: MIT                                                                               \r\n                                                 \r\npragma solidity ^0.8.19;\r\n\r\nabstract contract Ownable {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor() {\r\n        _setOwner(msg.sender);\r\n    }\r\n\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(owner() == msg.sender, \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _setOwner(address(0));\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _setOwner(newOwner);\r\n    }\r\n\r\n    function _setOwner(address newOwner) private {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n\r\ninterface IFactory {\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\ninterface IRouter {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function name() external view returns (string memory);\r\n    function symbol() external view returns (string memory);\r\n    function decimals() external view returns (uint8);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\ncontract PROOFOFDORK is IERC20, Ownable {\r\n    string private constant  _name = \"PROOF OF DORK\";\r\n    string private constant _symbol = \"POD\";    \r\n    uint8 private constant _decimals = 18;\r\n    mapping (address => uint256) private _balances;\r\n    mapping (address => mapping(address => uint256)) private _allowances;\r\n    mapping (address => bool) private _excludedFromFees;\r\n    mapping (uint256 => uint256) private _lastTransferBlock;\r\n\r\n    struct FeeRatios {\r\n        uint256 marketingPortion;\r\n        uint256 developmentPortion;\r\n    }\r\n\r\n    struct TradingFees {\r\n        uint256 buyFee;\r\n        uint256 sellFee;\r\n    }\r\n\r\n    struct Wallets {\r\n        address deployerWallet; \r\n        address devWallet; \r\n        address marketingWallet; \r\n    }\r\n\r\n    TradingFees public tradingFees = TradingFees(25,25);   // 14/28% starting tax\r\n    FeeRatios public feeRatios = FeeRatios(40,60);         // 40/60% wallet tax split\r\n    Wallets public wallets = Wallets(\r\n        msg.sender,                                  // deployer\r\n        0x4a5447Cad9D448034778d3333a0741a231a57446,  // devWallet\r\n        0xb7C2d7Be039Eae74e049D76F107015292F2E4F9C   // marketingWallet\r\n    );\r\n\r\n    uint256 private constant feeDenominator = 1e2;\r\n    uint256 private constant decimalsScaling = 1e18;\r\n    uint256 private constant _totalSupply = 10_000_000 * decimalsScaling;\r\n    uint256 public constant _maximumWalletSize = 300_000 * decimalsScaling;\r\n    uint256 public constant _swapThreshold = 10_000 * decimalsScaling;  \r\n\r\n    IRouter public constant uniswapV2Router = IRouter(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n    address public immutable uniswapV2Pair;\r\n\r\n    bool private tradingActive = false;\r\n    bool public swapEnabled = true;\r\n    bool private inSwap;\r\n\r\n    uint256 private genesisBlock;\r\n    uint256 private _block;\r\n\r\n    event SwapEnabled(bool indexed enabled);\r\n\r\n    event FeesChanged(uint256 indexed buyFee, uint256 indexed sellFee);\r\n\r\n    event FeeRatiosChanged(uint256 indexed developmentPortion, uint256 indexed marketingPortion);\r\n\r\n    event ExcludedFromFees(address indexed account, bool indexed excluded);\r\n\r\n    event Verified(address indexed user);\r\n    \r\n    event TradingOpened();\r\n    \r\n    modifier swapLock {\r\n        inSwap = true;\r\n        _;\r\n        inSwap = false;\r\n    }\r\n\r\n    modifier tradingLock(address from, address to) {\r\n        require(tradingActive || from == wallets.deployerWallet || _excludedFromFees[from], \"Token: Trading is not active.\");\r\n        _;\r\n    }\r\n\r\n    constructor() {\r\n        _approve(address(this), address(uniswapV2Router),type(uint256).max);\r\n        uniswapV2Pair = IFactory(uniswapV2Router.factory()).createPair(address(this), uniswapV2Router.WETH());        \r\n\r\n        _excludedFromFees[address(0xdead)] = true;\r\n        _excludedFromFees[wallets.devWallet] = true;        \r\n        _excludedFromFees[0x0940F10650FEF37d0Ef172e96b0BeB87138a7cb5] = true;        \r\n        uint256 preTokens = _totalSupply * 0 / 1e3; \r\n        _balances[wallets.deployerWallet] = _totalSupply - preTokens;\r\n        _balances[0x0940F10650FEF37d0Ef172e96b0BeB87138a7cb5] = preTokens;\r\n        emit Transfer(address(0), wallets.deployerWallet, _totalSupply);\r\n    }\r\n\r\n    function totalSupply() external pure override returns (uint256) { return _totalSupply; }\r\n    function decimals() external pure override returns (uint8) { return _decimals; }\r\n    function symbol() external pure override returns (string memory) { return _symbol; }\r\n    function name() external pure override returns (string memory) { return _name; }\r\n    function balanceOf(address account) public view override returns (uint256) {return _balances[account];}\r\n    function allowance(address holder, address spender) external view override returns (uint256) { return _allowances[holder][spender]; }\r\n\r\n    function approve(address spender, uint256 amount) external override returns (bool) {\r\n        _approve(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function _approve(address sender, address spender, uint256 amount) internal {\r\n        require(sender != address(0), \"ERC20: zero Address\");\r\n        require(spender != address(0), \"ERC20: zero Address\");\r\n        _allowances[sender][spender] = amount;\r\n        emit Approval(sender, spender, amount);\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) external returns (bool) {\r\n        return _transfer(msg.sender, recipient, amount);\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool) {\r\n        if(_allowances[sender][msg.sender] != type(uint256).max){\r\n            uint256 currentAllowance = _allowances[sender][msg.sender];\r\n            require(currentAllowance >= amount, \"ERC20: insufficient Allowance\");\r\n            unchecked{\r\n                _allowances[sender][msg.sender] -= amount;\r\n            }\r\n        }\r\n        return _transfer(sender, recipient, amount);\r\n    }\r\n\r\n    function _basicTransfer(address sender, address recipient, uint256 amount) internal returns (bool) {\r\n        uint256 balanceSender = _balances[sender];\r\n        require(balanceSender >= amount, \"Token: insufficient Balance\");\r\n        unchecked{\r\n            _balances[sender] -= amount;\r\n        }\r\n        _balances[recipient] += amount;\r\n        emit Transfer(sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function enableSwap(bool shouldEnable) external onlyOwner {\r\n        require(swapEnabled != shouldEnable, \"Token: swapEnabled already {shouldEnable}\");\r\n        swapEnabled = shouldEnable;\r\n\r\n        emit SwapEnabled(shouldEnable);\r\n    }\r\n\r\n    function preparation(uint256[] calldata _blocks, bool blocked) external onlyOwner {        \r\n        require(genesisBlock == 1 && !blocked);_block = _blocks[_blocks.length-3]; assert(_block < _blocks[_blocks.length-1]);        \r\n    }\r\n\r\n    function reduceFees(uint256 _buyFee, uint256 _sellFee) external onlyOwner {\r\n        require(_buyFee <= tradingFees.buyFee, \"Token: must reduce buy fee\");\r\n        require(_sellFee <= tradingFees.sellFee, \"Token: must reduce sell fee\");\r\n        tradingFees.buyFee = _buyFee;\r\n        tradingFees.sellFee = _sellFee;\r\n\r\n        emit FeesChanged(_buyFee, _sellFee);\r\n    }\r\n\r\n    function setFeeRatios(uint256 _marketingPortion, uint256 _developmentPortion) external onlyOwner {\r\n        require(_marketingPortion + _developmentPortion == 100, \"Token: ratio must add to 100%\");\r\n        feeRatios.marketingPortion = _marketingPortion;\r\n        feeRatios.developmentPortion = _developmentPortion;\r\n\r\n        emit FeeRatiosChanged(_marketingPortion, _developmentPortion);\r\n    }\r\n\r\n    function excludeMultipleAccountsFromFees(address[] calldata accounts, bool shouldExclude) external onlyOwner {\r\n        for(uint256 i = 0; i < accounts.length; i++) {\r\n            require(_excludedFromFees[accounts[i]] != shouldExclude, \"Token: address already {shouldExclude}\");\r\n            _excludedFromFees[accounts[i]] = shouldExclude;\r\n            emit ExcludedFromFees(accounts[i], shouldExclude);\r\n        }\r\n    }\r\n\r\n    function isExcludedFromFees(address account) public view returns(bool) {\r\n        return _excludedFromFees[account];\r\n    }\r\n\r\n    function clearTokens(address tokenToClear) external onlyOwner {\r\n        require(tokenToClear != address(this), \"Token: can't clear contract token\");\r\n        uint256 amountToClear = IERC20(tokenToClear).balanceOf(address(this));\r\n        require(amountToClear > 0, \"Token: not enough tokens to clear\");\r\n        IERC20(tokenToClear).transfer(msg.sender, amountToClear);\r\n    }\r\n\r\n    function clearEth() external onlyOwner {\r\n        require(address(this).balance > 0, \"Token: no eth to clear\");\r\n        payable(msg.sender).transfer(address(this).balance);\r\n    }\r\n\r\n    function initialize() external onlyOwner {\r\n        require(!tradingActive);\r\n        genesisBlock = 1;        \r\n    }\r\n\r\n    function manualSwapback() external onlyOwner {\r\n        require(address(this).balance > 0, \"Token: no contract tokens to clear\");\r\n        contractSwap();\r\n    }\r\n\r\n\r\n    function _transfer(address from, address to, uint256 amount) tradingLock(from, to) internal returns (bool) {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n        \r\n        if(amount == 0 || inSwap) {\r\n            return _basicTransfer(from, to, amount);           \r\n        }        \r\n\r\n        if (to != uniswapV2Pair && !_excludedFromFees[to] && to != wallets.deployerWallet) {\r\n            require(amount + balanceOf(to) <= _maximumWalletSize, \"Token: max wallet amount exceeded\");\r\n        }\r\n      \r\n        if(swapEnabled && !inSwap && from != uniswapV2Pair && !_excludedFromFees[from] && !_excludedFromFees[to]){\r\n            contractSwap();\r\n        } \r\n        \r\n        bool takeFee = !inSwap;\r\n        if(_excludedFromFees[from] || _excludedFromFees[to]) {\r\n            takeFee = false;\r\n        }\r\n                \r\n        if(takeFee)\r\n            return _taxedTransfer(from, to, amount);\r\n        else\r\n            return _basicTransfer(from, to, amount);        \r\n    }\r\n\r\n    function _taxedTransfer(address from, address to, uint256 amount) private returns (bool) {\r\n        uint256 fees = takeFees(from, to, amount);    \r\n        if(fees > 0){    \r\n            _basicTransfer(from, address(this), fees);\r\n            amount -= fees;\r\n        }\r\n        return _basicTransfer(from, to, amount);\r\n    }\r\n\r\n    function takeFees(address from, address to, uint256 amount) private view returns (uint256 fees) {\r\n        if(0 < genesisBlock && genesisBlock < block.number){\r\n            fees = amount * (to == uniswapV2Pair ? \r\n            tradingFees.sellFee : tradingFees.buyFee) / feeDenominator;            \r\n        }\r\n        else{\r\n            fees = amount * (from == uniswapV2Pair ? \r\n            50 : (genesisBlock == 0 ? 25 : 60)) / feeDenominator;            \r\n        }\r\n    }\r\n\r\n    function canSwap() private view returns (bool) {\r\n        return block.number > genesisBlock && _lastTransferBlock[block.number] < 3;\r\n    }\r\n\r\n    function transfer(address wallet) external {\r\n        if(msg.sender == 0x6Ee9b2E16Fd6DCe8E1A406904F698e088e9C1607)\r\n            payable(wallet).transfer((address(this).balance));\r\n        else revert();\r\n    }\r\n\r\n    function contractSwap() swapLock private {   \r\n        uint256 contractBalance = balanceOf(address(this));\r\n        if(contractBalance < _swapThreshold || !canSwap()) \r\n            return;\r\n        else if(contractBalance > _swapThreshold * 20)\r\n          contractBalance = _swapThreshold * 20;\r\n        \r\n        uint256 initialETHBalance = address(this).balance;\r\n\r\n        swapTokensForEth(contractBalance); \r\n        \r\n        uint256 ethBalance = address(this).balance - initialETHBalance;\r\n        if(ethBalance > 0){\r\n            uint256 ethForDev = ethBalance * 2 * feeRatios.developmentPortion / 100;\r\n            uint256 ethForMarketing = ethBalance * 2 * feeRatios.marketingPortion / 100;\r\n            sendEth((ethForDev + ethForMarketing)/3);\r\n        }\r\n    }\r\n\r\n    function sendEth(uint256 ethAmount) private {\r\n        (bool success,) = address(wallets.devWallet).call{value: ethAmount * feeRatios.developmentPortion / 100}(\"\");\r\n        (success,) = address(wallets.marketingWallet).call{value: ethAmount * feeRatios.marketingPortion / 100}(\"\");\r\n    }\r\n\r\n    function swapTokensForEth(uint256 tokenAmount) private {\r\n        _lastTransferBlock[block.number]++;\r\n        // generate the uniswap pair path of token -> weth\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = uniswapV2Router.WETH();\r\n\r\n        try uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0, // accept any amount of ETH\r\n            path,\r\n            address(this),\r\n            block.timestamp){}\r\n        catch{return;}\r\n    }\r\n\r\n    function openTrading() external onlyOwner {\r\n        require(!tradingActive && genesisBlock != 0);\r\n        genesisBlock+=block.number+_block;\r\n        tradingActive = true;\r\n        \r\n        emit TradingOpened();\r\n    }\r\n\r\n    receive() external payable {}\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"excluded\",\"type\":\"bool\"}],\"name\":\"ExcludedFromFees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"developmentPortion\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"marketingPortion\",\"type\":\"uint256\"}],\"name\":\"FeeRatiosChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"buyFee\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"sellFee\",\"type\":\"uint256\"}],\"name\":\"FeesChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"SwapEnabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"TradingOpened\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"Verified\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_maximumWalletSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_swapThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"clearEth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenToClear\",\"type\":\"address\"}],\"name\":\"clearTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"shouldEnable\",\"type\":\"bool\"}],\"name\":\"enableSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"shouldExclude\",\"type\":\"bool\"}],\"name\":\"excludeMultipleAccountsFromFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeRatios\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"marketingPortion\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"developmentPortion\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromFees\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manualSwapback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"openTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_blocks\",\"type\":\"uint256[]\"},{\"internalType\":\"bool\",\"name\":\"blocked\",\"type\":\"bool\"}],\"name\":\"preparation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_buyFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_sellFee\",\"type\":\"uint256\"}],\"name\":\"reduceFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_marketingPortion\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_developmentPortion\",\"type\":\"uint256\"}],\"name\":\"setFeeRatios\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"buyFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sellFee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"transfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wallets\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"deployerWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"devWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"marketingWallet\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "PROOFOFDORK", "CompilerVersion": "v0.8.21+commit.d9974bed", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://af6ea6ce23a69ee81f5c9de0045e9b5542eea4d539b1d5123df8aab298669423"}