{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"BuyBack.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.12;\\nimport {ERC20} from \\\"ERC20.sol\\\";\\nimport {Owned} from \\\"Owned.sol\\\";\\nimport {ERC4626} from \\\"ERC4626.sol\\\";\\nimport {IBuyBack} from \\\"IBuyBack.sol\\\";\\nimport {IBurner} from \\\"IBurner.sol\\\";\\nimport {IVester} from \\\"IVester.sol\\\";\\nimport {IGelatoTopUp} from \\\"IGelatoTopUp.sol\\\";\\nimport {ICurve3Pool} from \\\"ICurve3Pool.sol\\\";\\nimport {IUniFactory} from \\\"IUniFactory.sol\\\";\\nimport {IUniV2} from \\\"IUniV2.sol\\\";\\nimport {IUniV3} from \\\"IUniV3.sol\\\";\\nimport {IUniV3_POOL} from \\\"IUniV3Pool.sol\\\";\\nimport {IWETH9} from \\\"IWETH9.sol\\\";\\n\\n////////////////////////////////////////////////////////////////////////////////////////////\\n//                  LIBRARIES\\n////////////////////////////////////////////////////////////////////////////////////////////\\n\\nlibrary BuyBackErrors {\\n    error NotOwner(); // 0x30cd7471\\n    error NotKeeper(); // 0xf512b278\\n    error GelatoDepositFailed(); //\\n}\\n\\n////////////////////////////////////////////////////////////////////////////////////////////\\n//    \u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\\n//    \u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2588\u2588\u2588\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\\n//    \u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2588\u2588\u2588\u2588\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\\n//    \u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2588\u2588\u2588\u2588\u2588\u2588\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2588\u258c\u2591,,\u2580\u2588\u2588\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2588\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\\n//    \u2588\u2593\u2593\u2593\u2588\u2588\u2588\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2588\u258c\u2592\u2592\u2592\u2592\u2592\u2591\u2580\u2588\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2588\u2593`\u2559\u2588\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\\n//    \u2588\u2593\u2593\u2593\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u258c\u2592\u2592\u2592\u2592\u2592\u2592\u2591\u2591\u2588\u2588\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2588\u255c\u2591\u2592\u2592\u2588\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\\n//    \u2588\u2588\u2593\u2593\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2593\u2593\u2593\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2588\u2592\u2592\u2592\u2592\u2592\u2592\u2591\u2591\u2591\u2580\u2588\u2593\u2593\u2593\u2593\u2593\u2593\u2588\u2591\u2591\u2592\u2592\u2592\u2593\u2588\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\\n//    \u2588\u2588\u2593\u2593\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2588\u2592\u2592\u2592\u2592\u2592\u2592\u2591\u2591\u2591\u2591\u2591\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u00d1\u2584\u2592\u2592\u2592\u2588\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\\n//    \u2588\u2588\u2588\u2593\u2593\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2580\u2592\u2588\u2588\u258c\u2592\u2580\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2584\u2593\u2592\u2588\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2588\u2591\u2591\u2591\u2591\u2591@\u2593\u2588\u2588\u2584\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2592\u2593\u2588\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\\n//    \u2593\u2588\u2588\u2593\u2593\u2593\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2592\u2592\u2580\u2588\u2588\u2592\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2588\u258c \u2591\u2560\u2592\u2560\u2588\u2588\u2588\u2588\u2588\u258c\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2592\u2593\u2588\u2588\u2588\u2588\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\\n//    \u2588\u2588\u2588\u2588\u2593\u2593\u2593\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2580\u2580\u2580\u2591\u2591\u2591 \u2591\u2559\u2580\u2588\u2588\u2588\u2593\u2593\u2593\u2593\u2593\u2588\u2592\u2591\u2591\u2591\u2580\u2584\u2593\u2588\u2588\u2593\u2588\u2580\u2591\u2591\u2591\u2591\u2559\u2563 \u2591\u2580\u2593\u2588\u2588\u2588\u2588\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\\n//    \u2588\u2593\u2593\u2588\u2588\u2588\u2593\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2580\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2593\u2593\u2593\u2593\u2588\u2580\u2591\u2591\u2591\u2591\u2591\u2591\u2559\u2559\u2580'\u2591,\u2584\u2584\u2556\u2556\u2584\u2584\u2584\u00b5\u2584\u2588\u2584\u2584\u2591\u2590\u2588\u2593\u2593\u2593\u2593\u2593\u2593\u2593\\n//    \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2593\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2580\u2591\u2584\u2588\u2588\u2588\u2588\u2588\u2584\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2593\u2588\u2588\u2588\u2593\u2593\u2593\u258c\u2591\u2591\u2591 `    \u2591\u2553\u2584\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2584\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\\n//    \u2588\u2588\u2588\u2588\u2593\u2593\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258c\u2591\u2588\u2588\u2593\u2593\u2588\u2588\u2593\u2588\u2584,\u2591\u2591\u2591 \u2559\u2588\u2588\u2593\u2588\u2593\u2593\u2588\u2591\u2591\u2591\u2591\u2591  \u2591\u2591\u2553\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2593\u2588\u2593\u2593\u2593\u2593\u2593\u2593\u2593\\n//    \u2588\u2592\u2593\u2588\u2593\u2593\u2593\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 \u2591\u2591\u2580\u2593\u2593\u2588\u2588\u2593\u2588\u2580M \u2591\u2591\u2591\u2562\u255f\u2580\u2590\u2588\u2593\u2593\u2593\u2591' \u2591 \u2591\u2591\u2591\u2588\u2588\u2588\u2563\u2563\u2593\u2588\u2593\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258c\u2593\u258c \u255f\u2593\u2593\u2593\u2593\u2593\u2593\\n//    \u2593\u2588\u2563\u2593\u2588\u2588\u2593\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2592\u2591\u2591\u2591\u2591\u2591\u2591\u255c\u2591\u2591.\u2591\u2591\u2591\u2591\u2591\u2592\u2593\u2588\u2592\u2591\u2593\u2588\u2593\u258c \u2592\u2592\u2591\u2591 \u2584\u2588\u2588\u2588\u2588\u2593\u2563\u2593\u2588\u2562\u2593\u2588\u2588\u2588\u2588\u2588\u2588\u258c\u256b\u258c\u2593\u2588U\u2591\u2588\u2593\u2593\u2593\u2593\u2593\\n//    \u2593\u2593\u2588\u2592\u2593\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2591\u2591\u2591\u2591\u2591  \u2591\u2591 \u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2593\u258c\u2591\u2591\u2593\u2588\u2593\u2591\u2591\u2591\u2591\u2591\u2591\u2590\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2593\u2588\u2588\u2588\u258c \u2593\u2588\u2593\u2593\u2593\u2593\\n//    \u2593\u2593\u2593\u2588\u2592\u2593\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258c\u2591  \u2591\u2591   \u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2559\u2559\u2591\u2591\u2584\u2593\u2593\u2588\u258c\u2591\u2591\u2591\u2591\u2591 \u2593\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258c\u2591\u2590\u2588\u2593\u2593\u2593\u2593\\n//    \u2593\u2593\u2593\u2593\u2588\u2592\u2593\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2592'  \u2591\u2591     \u2591\u2591\u2591\u2591g\u2588\u2588\u2588\u2588\u2588\u2588\u2593\u2588\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2590\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2580\u2591  \u2588\u2593\u2593\u2593\u2593\\n//    \u2593\u2562\u2593\u2593\u2588\u2588\u2592\u2592\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2553  \u2591\u2591      '\u2591]\u2588\u2588\u2588\u2588\u2588\u2588\u2593\u2593\u2588\u2591 \u2591\u2591\u2591\u2591 \u2591\u2580\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2580\u2591\u2591  \u2553\u2593\u2593\u2593\u2593\u2593\\n//    \u2592\u2562\u2562\u2562\u2588\u2593\u2588\u2592\u2593\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2584,      ,\u2584\u2588\u2588\u2588\u2588\u2588\u2588\u2593\u2593\u2593\u2593\u2593\u2584\u2556\u2591\u2591 \u2591\u2591\u2591\u2559\u2580\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2580\u2591g\u2592\u2591,\u2584\u2584\u2588\u2588\u2593\u2593\u2593\u2593\\n//    \u2592\u2562\u256b\u2563\u2593\u2588\u2588\u2588\u2592\u2593\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2584 \u2593\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2593\u2593\u2593\u2593\u2593\u2593\u2588\u2588\u2559\u2568m\u2584, \u2591\u2591\u2580\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2584\u00d1\u2592\u2584\u2588\u2588\u2588\u2593\u2593\u2562\u2593\u2593\u2593\u2593\u2593\\n//    \u2592\u256b\u256b\u2588\u2588\u2588\u2588\u2588\u2588\u2593\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2593\u2593\u2593\u2593\u2588\u2580\u2591\u2591\u2591\u2591'\u2320\u2559\u2591\u2591\u2591\u2592\u2591\u2580\u2588\u2588\u2580\u2593\u2588\u2588\u2580\u2591\u2592\u2580\u2580\u2588\u2588\u2588\u2588\u2593\u2593\u2593\u2593\u2593\u2593\u2593\\n//    \u2562\u2593\u2588\u2588\u2588\u2588\u2588\u2593\u2580'\u2592\u2592\u2580\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2593\u2593\u2593\u2588\u2580\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591  \u2591\u2591\u2591\u2591\u2591\u2580\u2588\u2588\u2593\u2593\u2593\u2593\u2593\u2593\\n//    \u2593\u2588\u2588\u2588\u2588\u2588\u2592\u2591\u2591\u2591\u2592\u2592\u2593\u2588\u2593\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2580\u2591`' \u2591\u2591 \u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2592\u2591\u2591\u2591  \u2591    \u2591\u2580\u2588\u2593\u2593\u2593\u2593\u2593\\n//    \u2588\u2588\u2588\u2588\u2588\u2588\u2584\u2591\u2591\u2591\u2591\u2592\u2592\u2592\u2580\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2580\u2593\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2584\u2591\u2591  \u2591   \u2591\u2591\u2591\u2591\u2591\u2591 \u2591\u2591\u2591\u2591\u2591\u2591    \u2591    \u2580\u2593\u2563\u2593\u2593\\n//    \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588W\u2591\u2591\u2591\u2591\u2591\u2584\u2588\u2580\u2580\u2588\u2580\u2580\u2580\u2588\u2588\u2588\u2580\u2559\u2591\u2559\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258c\u2591        \u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591       \u2559\u2588\u2588\u2588\\n//    \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2591w\u2591\u255f\u2588\u2593\u2593\u2584 \u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2593\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588,      \u2591,\u2591 \u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591 \u2591\u2591  `\u2591\u2580\\n//    \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2584\u2588\u2588\u2588\u2588\u258c\u2592\u2593\u258c`  \u2591\u2591\u2591\u2591\u2591 \u2591\u2591\u2560\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258c     \u2591\u2591\u2591  \u2591\u2588\u2588\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591 \u2591\\n//    \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258c\u2559\u2588\u2592\u2562\u2588W  \u2591 \u2591\u2591\u2591 \u2591\u2591\u2591\u2593\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2556\u2591  \u2591\u2591 \u2591 \u2591\u2588\u2588\u258c\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591 \u2591\u2591  \u2591\u2591\u2591\\n//    \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2593\u2584\u00bf\u2590\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2584,\u2591    \u2591\u2591\u2580\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2556\u2591\u2591 \u2591\u2591 \u2591\u2588\u2588\u2588\u2592\u2591\u2591\u2591\u2591\u2591\u2591 \u2591 \u2591\u2591\u2591 \u2591 \u2591\\n//    \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258c\u2580\u2588\u2588\u2588\u2588\u258c\u2591\u2591 \u2591\u2580\u2580\u2593\u2584\u2591\u2591 \u2591\u2591\u2591\u2559\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2584,   \u2514\u2588\u2588\u2588\u258c\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591   \u2591 \u2591\u2591\\n//    \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2591 \u2588\u2588\u2593\u2592\u2592\u2592\u2592\u2591 \u2591\u2591\u2591\u2559\u2580\u2580\u255c\u2591\u2591\u2591 \u2580\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2591  \u2591j\u2588\u2588\u2588\u2588\u2591   \u2591  \u2591 \u2591\u2591\u2591\u2591\u2591\u2591\\n//    \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2591\u2591\u2590\u2588\u2593\u2588\u2580\u2591\u2592\u2591\u2591\u2591\u2591    \u2591 '   \u2593\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2591 \u2591\u2591\u2591\u2591\u2588\u2588\u2588\u2588\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591 \u2591\u2591 \u2591\u2591\u2591\\n//    \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258c\u2591\u2591  \u2559\u2580\u2588\u2593\u2584\u2553\u2584   \u2591       \u2553\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588     \u2591\u2588\u2588\u2588\u2588\u258c  \u2591  \u2591\u2591\u2591\u2591\\n//    \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2518      ` \u2588\u2588\u2588\u2588\u2588\u2588\u258c%\u2584,\u2553,\u2565\u2559\u2580\u2590\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588M      \u2588\u2588\u2588\u2588\u258c              ,\\n////////////////////////////////////////////////////////////////////////////////////////////\\n//                  BUY BACK CONTRACT\\n////////////////////////////////////////////////////////////////////////////////////////////\\n\\ncontract BuyBack is IBuyBack, Owned {\\n    ////////////////////////////////////////////////////////////////////////////////////////////\\n    //                  CONSTANTS\\n    ////////////////////////////////////////////////////////////////////////////////////////////\\n    enum AMM {\\n        UNIv2,\\n        UNIv3,\\n        CURVE\\n    }\\n\\n    uint256 public constant KEEPER_MIN_ETH = 2E17;\\n    uint256 public constant MIN_TOPUP_ETH = 5E17;\\n    uint256 public constant MIN_SEND_TO_TREASURY = 1E9;\\n    uint256 public constant MIN_BURN = 1E22;\\n\\n    /// crv pool usdc index\\n    int128 internal constant USDC_CRV_INDEX = 1;\\n    uint256 internal constant DEFAULT_DECIMALS_FACTOR = 1E18;\\n    uint256 internal constant BP = 1E4;\\n\\n    /// Gelato addresses\\n    address internal constant GELATO_WALLET =\\n        0x2807B4aE232b624023f87d0e237A3B1bf200Fd99;\\n    address internal constant GELATO_KEEPER =\\n        0x701137e5b01c7543828DF340d05b9f9BEd277F7d;\\n    address internal constant GELATO_ETH =\\n        0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n\\n    /// Gro addresses\\n    address public constant GRO_TREASURY =\\n        0x359F4fe841f246a095a82cb26F5819E10a91fe0d;\\n    address public constant GRO_BURNER =\\n        0x1F09e308bb18795f62ea7B114041E12b426b8880;\\n    address public constant GRO_VESTER =\\n        0x748218256AfE0A19a88EBEB2E0C5Ce86d2178360;\\n\\n    /// token addresses\\n    address internal constant WETH =\\n        address(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);\\n    address internal constant USDC =\\n        address(0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48);\\n    address internal constant GRO =\\n        address(0x3Ec8798B81485A254928B70CDA1cf0A2BB0B74D7);\\n    address internal constant CRV_3POOL =\\n        address(0xbEbc44782C7dB0a1A60Cb6fe97d0b483032FF1C7);\\n    ERC20 internal constant CRV_3POOL_TOKEN =\\n        ERC20(address(0x6c3F90f043a72FA612cbac8115EE7e52BDe6E490));\\n\\n    /// AMM addresses\\n    address internal constant THREE_POOL =\\n        0xbEbc44782C7dB0a1A60Cb6fe97d0b483032FF1C7;\\n    address internal constant UNI_V2 =\\n        address(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\\n    address internal constant UNI_V3 =\\n        address(0xE592427A0AEce92De3Edee1F18E0157C05861564);\\n    address internal constant UNI_V2_FACTORY =\\n        address(0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f);\\n    address internal constant USDC_ETH_V3 =\\n        address(0x88e6A0c2dDD26FEEb64F039a2c41296FcB3f5640);\\n\\n    ////////////////////////////////////////////////////////////////////////////////////////////\\n    //                  CONTRACT VARIABLES\\n    ////////////////////////////////////////////////////////////////////////////////////////////\\n\\n    // keep track of the total amount of USDC\\n    uint256 public treasury;\\n    uint256 public burner;\\n    uint256 public keeper;\\n\\n    /// Percentage division between recievers of buy back actions\\n    ///     denoted in BP, should add up to 100%\\n    struct distributionSplit {\\n        uint16 treasury;\\n        uint16 burner;\\n        uint16 keeper;\\n    }\\n\\n    /// Information regarding tokens that are being used\\n    struct tokenData {\\n        address wrapped; // if 4626, address of the vault\\n        uint256 minSellAmount;\\n        AMM amm;\\n        uint24 fee; // amm fee, used for uniV3\\n    }\\n\\n    // list of tokens\\n    address[] public tokens;\\n    mapping(address => tokenData) public tokenInfo;\\n\\n    mapping(address => bool) public keepers;\\n    distributionSplit public tokenDistribution;\\n\\n    ////////////////////////////////////////////////////////////////////////////////////////////\\n    //                  EVENTS\\n    ////////////////////////////////////////////////////////////////////////////////////////////\\n    event LogNewTokenAdded(\\n        address token,\\n        address wrapped,\\n        uint256 minSellAmount,\\n        AMM amm,\\n        uint24 fee\\n    );\\n    event LogTokenRemoved(address token);\\n    event tokenSold(\\n        address token,\\n        uint256 amountToSell,\\n        uint256 amountToTreasury,\\n        uint256 amountToKeeper,\\n        uint256 amountToBurner\\n    );\\n    event TopUpKeeper(uint256 tokenAmount);\\n    event SendToTreasury(uint256 tokenAmount);\\n    event BurnTokens(uint256 tokenAmount, uint256 groAmount);\\n    event LogDepositReceived(address sender, uint256 value);\\n\\n    ////////////////////////////////////////////////////////////////////////////////////////////\\n    //                  CONSTRUCTOR\\n    ////////////////////////////////////////////////////////////////////////////////////////////\\n\\n    constructor() Owned(msg.sender) {\\n        ERC20(GRO).approve(GRO_BURNER, type(uint256).max);\\n    }\\n\\n    ////////////////////////////////////////////////////////////////////////////////////////////\\n    //                  SETTERS\\n    ////////////////////////////////////////////////////////////////////////////////////////////\\n\\n    function setKeeper(address _keeper) external {\\n        if (msg.sender != owner) revert BuyBackErrors.NotOwner();\\n        keepers[_keeper] = true;\\n    }\\n\\n    function revokeKeeper(address _keeper) external {\\n        if (msg.sender != owner) revert BuyBackErrors.NotOwner();\\n        keepers[_keeper] = false;\\n    }\\n\\n    /// @notice sets the distribution of tokens between treasury, burner and keeper\\n    /// @param _treasury percentage of tokens to be sent to treasury\\n    /// @param _burner percentage of tokens to be sent to burner\\n    /// @param _keeper percentage of tokens to be sent to keeper\\n    function setTokenDistribution(\\n        uint16 _treasury,\\n        uint16 _burner,\\n        uint16 _keeper\\n    ) external {\\n        if (msg.sender != owner) revert BuyBackErrors.NotOwner();\\n        tokenDistribution.treasury = _treasury;\\n        tokenDistribution.burner = _burner;\\n        tokenDistribution.keeper = _keeper;\\n    }\\n\\n    /// @notice adds token to list of tokens that can be sold\\n    /// @param _token address of token to be added\\n    /// @param _wrapped address of wrapped token\\n    /// @param _minSellAmount minimum amount of token to be sold\\n    /// @param _amm index of AMM to be used\\n    /// @param _fee fee of AMM to be used\\n    function setToken(\\n        address _token,\\n        address _wrapped,\\n        uint256 _minSellAmount,\\n        uint8 _amm,\\n        uint24 _fee\\n    ) external {\\n        if (msg.sender != owner) revert BuyBackErrors.NotOwner();\\n        tokens.push(_token);\\n        AMM amm = AMM(_amm);\\n        tokenData memory tokenI = tokenData(\\n            _wrapped,\\n            _minSellAmount,\\n            amm,\\n            _fee\\n        );\\n        tokenInfo[_token] = tokenI;\\n        if (_amm == 0) {\\n            ERC20(_token).approve(UNI_V2, type(uint256).max);\\n        } else if (_amm == 1) {\\n            ERC20(_token).approve(UNI_V3, type(uint256).max);\\n        }\\n        emit LogNewTokenAdded(_token, _wrapped, _minSellAmount, amm, _fee);\\n    }\\n\\n    /// @notice removes token from list of tokens that can be sold\\n    /// @param _token address of token to be removed\\n    function removeToken(address _token) external {\\n        if (msg.sender != owner) revert BuyBackErrors.NotOwner();\\n\\n        uint256 noOfTokens = tokens.length;\\n        for (uint256 i = 0; i < noOfTokens; i++) {\\n            if (tokens[i] == _token) {\\n                tokens[i] = tokens[noOfTokens - 1];\\n                tokens.pop();\\n                delete tokenInfo[_token];\\n                emit LogTokenRemoved(_token);\\n            }\\n        }\\n    }\\n\\n    ////////////////////////////////////////////////////////////////////////////////////////////\\n    //                  TRIGGERS\\n    ////////////////////////////////////////////////////////////////////////////////////////////\\n\\n    /// @notice Iterates through tokens and returns first token that can be sold\\n    /// @return address of token that can be sold\\n    function canSellToken() public view override returns (address) {\\n        uint256 noOfTokens = tokens.length;\\n        address token;\\n        for (uint256 i = 0; i < noOfTokens; i++) {\\n            token = tokens[i];\\n            address wrapper = tokenInfo[token].wrapped;\\n            if (wrapper != address(0)) {\\n                if (\\n                    ERC20(wrapper).balanceOf(address(this)) >\\n                    tokenInfo[token].minSellAmount\\n                ) {\\n                    return token;\\n                }\\n            } else if (\\n                ERC20(token).balanceOf(address(this)) >\\n                tokenInfo[token].minSellAmount\\n            ) {\\n                return token;\\n            }\\n        }\\n        return address(0);\\n    }\\n\\n    /// @notice returns bool if the contract can send to treasury if value of USDC > MIN_SEND_TO_TREASURY\\n    function canSendToTreasury() public view override returns (bool) {\\n        if (ERC20(USDC).balanceOf(address(this)) > MIN_SEND_TO_TREASURY)\\n            return true;\\n        return false;\\n    }\\n\\n    /// @notice returns bool if the contract can burn tokens if value of GRO denominated in USDC > MIN_BURN\\n    /// @return bool if the contract can burn tokens\\n    function canBurnTokens() public view override returns (bool) {\\n        if (\\n            getPriceV2(USDC, GRO, ERC20(USDC).balanceOf(address(this))) >\\n            MIN_BURN\\n        ) {\\n            return true;\\n        }\\n        return false;\\n    }\\n\\n    /// @notice returns bool if the contract can top up keeper if gelato wallet balance < KEEPER_MIN_ETH\\n    /// and contract balance > MIN_TOPUP_ETH\\n    /// @return bool if the contract can top up keeper\\n    function canTopUpKeeper() public view override returns (bool) {\\n        if (\\n            IGelatoTopUp(GELATO_WALLET).userTokenBalance(\\n                GELATO_KEEPER,\\n                GELATO_ETH\\n            ) <\\n            KEEPER_MIN_ETH &&\\n            topUpAvailable() > MIN_TOPUP_ETH\\n        ) {\\n            return true;\\n        }\\n        return false;\\n    }\\n\\n    /// @notice returns cumulative amount of ETH in this contract plus USDC value of keeper balance denomiated in ETH\\n    /// @return uint256 of ETH available to top up keeper\\n    function topUpAvailable() public view returns (uint256) {\\n        uint256 balance = address(this).balance;\\n        balance += getPriceV3(keeper);\\n        return balance;\\n    }\\n\\n    /// @notice returns bool if the contract can buy back tokens\\n    /// @return tokenToSell address of token that can be sold\\n    /// @return canTreasury bool if contract can send to treasury\\n    /// @return canBurn bool if contract can burn tokens\\n    /// @return canTopUp bool if contract can top up keeper\\n    function buyBackTrigger()\\n        external\\n        view\\n        returns (\\n            address tokenToSell,\\n            bool canTreasury,\\n            bool canBurn,\\n            bool canTopUp\\n        )\\n    {\\n        tokenToSell = canSellToken();\\n        canTreasury = canSendToTreasury();\\n        canBurn = canBurnTokens();\\n        canTopUp = canTopUpKeeper();\\n    }\\n\\n    ////////////////////////////////////////////////////////////////////////////////////////////\\n    //                  CORE\\n    ////////////////////////////////////////////////////////////////////////////////////////////\\n\\n    /// @notice Unwraps WETH to ETH and send it to Gelato keeper, then sets keeper storage var to 0\\n    function topUpKeeper() public override {\\n        if (msg.sender != owner && !keepers[msg.sender])\\n            revert BuyBackErrors.NotKeeper();\\n        uint256 _keeperAmount = uniV3Swap(USDC, WETH, 500, keeper, true);\\n        if (_keeperAmount == 0) return;\\n        (bool success, ) = GELATO_WALLET.call{value: _keeperAmount}(\\n            abi.encodeWithSignature(\\n                \\\"depositFunds(address,address,uint256)\\\",\\n                GELATO_KEEPER,\\n                GELATO_ETH,\\n                _keeperAmount\\n            )\\n        );\\n        if (!success) revert BuyBackErrors.GelatoDepositFailed();\\n        emit TopUpKeeper(_keeperAmount);\\n        keeper = 0;\\n    }\\n\\n    /// @notice sends USDC to treasury then sets treasury storage var to 0\\n    function sendToTreasury() public override {\\n        if (msg.sender != owner && !keepers[msg.sender])\\n            revert BuyBackErrors.NotKeeper();\\n        uint256 _treasury = treasury;\\n        ERC20(USDC).transfer(GRO_TREASURY, _treasury);\\n        emit SendToTreasury(_treasury);\\n        treasury = 0;\\n    }\\n\\n    /// @notice burns GRO tokens then sets burner storage var to 0\\n    function burnTokens() public override {\\n        if (msg.sender != owner && !keepers[msg.sender])\\n            revert BuyBackErrors.NotKeeper();\\n        uint256 _burner = burner;\\n        uint256 amount = uniV2Swap(USDC, GRO, _burner);\\n        IBurner(GRO_BURNER).reVest(amount);\\n        IVester(GRO_VESTER).exit(amount);\\n        emit BurnTokens(_burner, amount);\\n        burner = 0;\\n    }\\n\\n    /// @notice Unwraps ERC4626 tokens to underlying asset\\n    /// @param _amount amount of tokens to unwrap\\n    /// @param _wrapper address of wrapper contract\\n    function _unwrapToken(\\n        uint256 _amount,\\n        address _wrapper\\n    ) internal returns (uint256, address) {\\n        ERC4626 wrapper = ERC4626(_wrapper);\\n        address asset = address(wrapper.asset());\\n        uint256 amount = wrapper.redeem(_amount, address(this), address(this));\\n        return (amount, asset);\\n    }\\n\\n    /// @notice sell tokens for USDC through predefined AMM\\n    /// @param _token address of token to sell\\n    /// @param _amount amount of token to sell\\n    /// @param _amm AMM to use for swap\\n    /// @param _fee fee to use for swap\\n    /// @return amount of tokens received from swap\\n    function _sellTokens(\\n        address _token,\\n        uint256 _amount,\\n        AMM _amm,\\n        uint24 _fee\\n    ) internal returns (uint256 amount) {\\n        if (_amm == AMM.CURVE) {\\n            amount = curveSwap(_amount);\\n        } else if (_amm == AMM.UNIv2) {\\n            amount = uniV2Swap(_token, USDC, _amount);\\n        } else if (_amm == AMM.UNIv3) {\\n            amount = uniV3Swap(_token, USDC, _fee, _amount, false);\\n        }\\n    }\\n\\n    /// @notice sell tokens for USDC and distribute to treasury, burner, keeper, and owner\\n    /// @param _token address of token to sell\\n    function sellTokens(address _token) public override {\\n        if (msg.sender != owner && !keepers[msg.sender])\\n            revert BuyBackErrors.NotKeeper();\\n\\n        tokenData memory tokenI = tokenInfo[_token];\\n\\n        address wrapper = tokenI.wrapped;\\n        uint256 amountToSell;\\n        if (wrapper != address(0)) {\\n            uint256 wrappedAmount = ERC20(wrapper).balanceOf(address(this));\\n            (amountToSell, _token) = _unwrapToken(wrappedAmount, wrapper);\\n        } else {\\n            amountToSell = ERC20(_token).balanceOf(address(this));\\n        }\\n\\n        if (amountToSell < tokenI.minSellAmount) return;\\n        uint256 amount = _sellTokens(\\n            _token,\\n            amountToSell,\\n            tokenI.amm,\\n            tokenI.fee\\n        );\\n        uint256 amountToTreasury = (amount * tokenDistribution.treasury) / BP;\\n        uint256 amountToBurner = (amount * tokenDistribution.burner) / BP;\\n        uint256 amountToKeeper = amount - (amountToTreasury + amountToBurner);\\n\\n        treasury += amountToTreasury;\\n        burner += amountToBurner;\\n        keeper += amountToKeeper;\\n\\n        emit tokenSold(\\n            _token,\\n            amountToSell,\\n            amountToTreasury,\\n            amountToKeeper,\\n            amountToBurner\\n        );\\n    }\\n\\n    ////////////////////////////////////////////////////////////////////////////////////////////\\n    //                  UTILITY\\n    ////////////////////////////////////////////////////////////////////////////////////////////\\n\\n    function getToken(address _token) external view returns (tokenData memory) {\\n        return tokenInfo[_token];\\n    }\\n\\n    /// @notice Fetch price from Uniswap V2\\n    /// @param _start address of token to sell\\n    /// @param _end address of token to buy\\n    /// @param _amount amount of token to sell\\n    function getPriceV2(\\n        address _start,\\n        address _end,\\n        uint256 _amount\\n    ) internal view returns (uint256 price) {\\n        if (_amount == 0) return 0;\\n        address[] memory path = new address[](2);\\n        path[0] = _start;\\n        path[1] = _end;\\n\\n        uint256[] memory uniSwap = IUniV2(UNI_V2).getAmountsOut(_amount, path);\\n        return uniSwap[uniSwap.length - 1];\\n    }\\n\\n    /// @notice Returns the amount of ETH that can be bought with the given amount of USDC\\n    /// @param _amount The amount of USDC to sell for ETH\\n    /// @return price The amount of ETH that can be bought with the given amount of USDC\\n    function getPriceV3(uint256 _amount) public view returns (uint256 price) {\\n        (uint160 sqrtPriceX96, , , , , , ) = IUniV3_POOL(USDC_ETH_V3).slot0();\\n        price = ((2 ** 192 * DEFAULT_DECIMALS_FACTOR) /\\n            uint256(sqrtPriceX96) ** 2);\\n        return (_amount * 1E18) / price;\\n    }\\n\\n    /// @notice Swap tokens on Uniswap V2\\n    /// @param _start address of token to sell\\n    /// @param _end address of token to buy\\n    /// @param _amount amount of token to sell\\n    function uniV2Swap(\\n        address _start,\\n        address _end,\\n        uint256 _amount\\n    ) internal returns (uint256) {\\n        if (_amount == 0) return 0;\\n        if (ERC20(_start).allowance(address(this), UNI_V2) == 0)\\n            ERC20(_start).approve(UNI_V2, _amount);\\n        address[] memory path = new address[](2);\\n        path[0] = _start;\\n        path[1] = _end;\\n\\n        uint256[] memory swap = IUniV2(UNI_V2).swapExactTokensForTokens(\\n            _amount,\\n            uint256(0),\\n            path,\\n            address(this),\\n            block.timestamp\\n        );\\n        return swap[1];\\n    }\\n\\n    /// @notice Swap tokens on Uniswap V3\\n    /// @param _start address of token to sell\\n    /// @param _end address of token to buy\\n    /// @param _fees fees to use for swap\\n    /// @param _amount amount of token to sell\\n    /// @param _eth whether to unwrap WETH or not\\n    function uniV3Swap(\\n        address _start,\\n        address _end,\\n        uint24 _fees,\\n        uint256 _amount,\\n        bool _eth\\n    ) internal returns (uint256 amount) {\\n        if (_amount == 0) return 0;\\n        amount = IUniV3(UNI_V3).exactInput(\\n            IUniV3.ExactInputParams(\\n                abi.encodePacked(_start, uint24(_fees), _end),\\n                address(this),\\n                block.timestamp,\\n                _amount,\\n                uint256(1)\\n            )\\n        );\\n        if (_eth) {\\n            IWETH9(WETH).withdraw(amount);\\n        }\\n    }\\n\\n    /// @notice Swap tokens on Curve\\n    /// @param _amount amount of token to sell\\n    function curveSwap(uint256 _amount) internal returns (uint256) {\\n        if (_amount == 0) return 0;\\n        ICurve3Pool(THREE_POOL).remove_liquidity_one_coin(\\n            _amount,\\n            USDC_CRV_INDEX,\\n            0\\n        );\\n        return ERC20(USDC).balanceOf(address(this));\\n    }\\n\\n    ////////////////////////////////////////////////////////////////////////////////////////////\\n    //                  FALLBACK\\n    ////////////////////////////////////////////////////////////////////////////////////////////\\n\\n    receive() external payable {\\n        emit LogDepositReceived(msg.sender, msg.value);\\n    }\\n\\n    fallback() external payable {\\n        emit LogDepositReceived(msg.sender, msg.value);\\n    }\\n\\n    /// @notice This function is used to sweep any tokens that are stuck in the contract\\n    function sweep(address asset) external onlyOwner {\\n        ERC20(asset).transfer(\\n            msg.sender,\\n            ERC20(asset).balanceOf(address(this))\\n        );\\n    }\\n}\\n\"\r\n    },\r\n    \"ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\n/// @notice Modern and gas efficient ERC20 + EIP-2612 implementation.\\n/// @author solmate/src (https://github.com/Rari-Capital/solmate/blob/main/src/tokens/ERC20.sol)\\n/// @author Modified from Uniswap (https://github.com/Uniswap/uniswap-v2-core/blob/master/contracts/UniswapV2ERC20.sol)\\n/// @dev Do not manually set balances without updating totalSupply, as the sum of all user balances must not exceed it.\\nabstract contract ERC20 {\\n    /*///////////////////////////////////////////////////////////////\\n                                  EVENTS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    event Transfer(address indexed from, address indexed to, uint256 amount);\\n\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 amount\\n    );\\n\\n    /*///////////////////////////////////////////////////////////////\\n                             METADATA STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    string public name;\\n\\n    string public symbol;\\n\\n    uint8 public immutable decimals;\\n\\n    /*///////////////////////////////////////////////////////////////\\n                              ERC20 STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    uint256 public totalSupply;\\n\\n    mapping(address => uint256) public balanceOf;\\n\\n    mapping(address => mapping(address => uint256)) public allowance;\\n\\n    /*///////////////////////////////////////////////////////////////\\n                             EIP-2612 STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    bytes32 public constant PERMIT_TYPEHASH =\\n        keccak256(\\n            \\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\"\\n        );\\n\\n    uint256 internal immutable INITIAL_CHAIN_ID;\\n\\n    bytes32 internal immutable INITIAL_DOMAIN_SEPARATOR;\\n\\n    mapping(address => uint256) public nonces;\\n\\n    /*///////////////////////////////////////////////////////////////\\n                               CONSTRUCTOR\\n    //////////////////////////////////////////////////////////////*/\\n\\n    constructor(\\n        string memory _name,\\n        string memory _symbol,\\n        uint8 _decimals\\n    ) {\\n        name = _name;\\n        symbol = _symbol;\\n        decimals = _decimals;\\n\\n        INITIAL_CHAIN_ID = block.chainid;\\n        INITIAL_DOMAIN_SEPARATOR = computeDomainSeparator();\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                              ERC20 LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function approve(address spender, uint256 amount)\\n        public\\n        virtual\\n        returns (bool)\\n    {\\n        allowance[msg.sender][spender] = amount;\\n\\n        emit Approval(msg.sender, spender, amount);\\n\\n        return true;\\n    }\\n\\n    function transfer(address to, uint256 amount)\\n        public\\n        virtual\\n        returns (bool)\\n    {\\n        balanceOf[msg.sender] -= amount;\\n\\n        // Cannot overflow because the sum of all user\\n        // balances can't exceed the max uint256 value.\\n        unchecked {\\n            balanceOf[to] += amount;\\n        }\\n\\n        emit Transfer(msg.sender, to, amount);\\n\\n        return true;\\n    }\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual returns (bool) {\\n        uint256 allowed = allowance[from][msg.sender]; // Saves gas for limited approvals.\\n\\n        if (allowed != type(uint256).max)\\n            allowance[from][msg.sender] = allowed - amount;\\n\\n        balanceOf[from] -= amount;\\n\\n        // Cannot overflow because the sum of all user\\n        // balances can't exceed the max uint256 value.\\n        unchecked {\\n            balanceOf[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        return true;\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                              EIP-2612 LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public virtual {\\n        require(deadline >= block.timestamp, \\\"PERMIT_DEADLINE_EXPIRED\\\");\\n\\n        // Unchecked because the only math done is incrementing\\n        // the owner's nonce which cannot realistically overflow.\\n        unchecked {\\n            bytes32 digest = keccak256(\\n                abi.encodePacked(\\n                    \\\"\\\\x19\\\\x01\\\",\\n                    DOMAIN_SEPARATOR(),\\n                    keccak256(\\n                        abi.encode(\\n                            PERMIT_TYPEHASH,\\n                            owner,\\n                            spender,\\n                            value,\\n                            nonces[owner]++,\\n                            deadline\\n                        )\\n                    )\\n                )\\n            );\\n\\n            address recoveredAddress = ecrecover(digest, v, r, s);\\n\\n            require(\\n                recoveredAddress != address(0) && recoveredAddress == owner,\\n                \\\"INVALID_SIGNER\\\"\\n            );\\n\\n            allowance[recoveredAddress][spender] = value;\\n        }\\n\\n        emit Approval(owner, spender, value);\\n    }\\n\\n    function DOMAIN_SEPARATOR() public view virtual returns (bytes32) {\\n        return\\n            block.chainid == INITIAL_CHAIN_ID\\n                ? INITIAL_DOMAIN_SEPARATOR\\n                : computeDomainSeparator();\\n    }\\n\\n    function computeDomainSeparator() internal view virtual returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encode(\\n                    keccak256(\\n                        \\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"\\n                    ),\\n                    keccak256(bytes(name)),\\n                    keccak256(\\\"1\\\"),\\n                    block.chainid,\\n                    address(this)\\n                )\\n            );\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                       INTERNAL MINT/BURN LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function _mint(address to, uint256 amount) internal virtual {\\n        totalSupply += amount;\\n\\n        // Cannot overflow because the sum of all user\\n        // balances can't exceed the max uint256 value.\\n        unchecked {\\n            balanceOf[to] += amount;\\n        }\\n\\n        emit Transfer(address(0), to, amount);\\n    }\\n\\n    function _burn(address from, uint256 amount) internal virtual {\\n        balanceOf[from] -= amount;\\n\\n        // Cannot underflow because a user's balance\\n        // will never be larger than the total supply.\\n        unchecked {\\n            totalSupply -= amount;\\n        }\\n\\n        emit Transfer(from, address(0), amount);\\n    }\\n}\\n\"\r\n    },\r\n    \"Owned.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\n/// @notice Simple single owner authorization mixin.\\n/// @author solmate/src (https://github.com/transmissions11/solmate/blob/main/src/auth/Owned.sol)\\nabstract contract Owned {\\n    /*//////////////////////////////////////////////////////////////\\n                                 EVENTS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    event OwnershipTransferred(address indexed user, address indexed newOwner);\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            OWNERSHIP STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    address public owner;\\n\\n    modifier onlyOwner() virtual {\\n        require(msg.sender == owner, \\\"UNAUTHORIZED\\\");\\n\\n        _;\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                               CONSTRUCTOR\\n    //////////////////////////////////////////////////////////////*/\\n\\n    constructor(address _owner) {\\n        owner = _owner;\\n\\n        emit OwnershipTransferred(address(0), _owner);\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                             OWNERSHIP LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        owner = newOwner;\\n\\n        emit OwnershipTransferred(msg.sender, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"ERC4626.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// Adpated from OZ Draft Implementation\\n\\npragma solidity ^0.8.12;\\n\\nimport {ERC20} from \\\"ERC20.sol\\\";\\n\\nabstract contract ERC4626 is ERC20 {\\n    event Deposit(\\n        address indexed caller,\\n        address indexed owner,\\n        uint256 assets,\\n        uint256 shares\\n    );\\n\\n    event Withdraw(\\n        address indexed caller,\\n        address indexed receiver,\\n        address indexed owner,\\n        uint256 assets,\\n        uint256 shares\\n    );\\n\\n    /**\\n     * @dev Returns the address of the underlying token used for the Vault for accounting, depositing, and withdrawing.\\n     *\\n     * - MUST be an ERC-20 token contract.\\n     * - MUST NOT revert.\\n     */\\n    function asset() external view virtual returns (ERC20);\\n\\n    /**\\n     * @dev Returns the total amount of the underlying asset that is \u201cmanaged\u201d by Vault.\\n     *\\n     * - SHOULD include any compounding that occurs from yield.\\n     * - MUST be inclusive of any fees that are charged against assets in the Vault.\\n     * - MUST NOT revert.\\n     */\\n    function totalAssets()\\n        external\\n        view\\n        virtual\\n        returns (uint256 totalManagedAssets);\\n\\n    /**\\n     * @dev Returns the amount of shares that the Vault would exchange for the amount of assets provided, in an ideal\\n     * scenario where all the conditions are met.\\n     *\\n     * - MUST NOT be inclusive of any fees that are charged against assets in the Vault.\\n     * - MUST NOT show any variations depending on the caller.\\n     * - MUST NOT reflect slippage or other on-chain conditions, when performing the actual exchange.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: This calculation MAY NOT reflect the \u201cper-user\u201d price-per-share, and instead should reflect the\\n     * \u201caverage-user\u2019s\u201d price-per-share, meaning what the average user should expect to see when exchanging to and\\n     * from.\\n     */\\n    function convertToShares(\\n        uint256 assets\\n    ) external view virtual returns (uint256 shares);\\n\\n    /**\\n     * @dev Returns the amount of assets that the Vault would exchange for the amount of shares provided, in an ideal\\n     * scenario where all the conditions are met.\\n     *\\n     * - MUST NOT be inclusive of any fees that are charged against assets in the Vault.\\n     * - MUST NOT show any variations depending on the caller.\\n     * - MUST NOT reflect slippage or other on-chain conditions, when performing the actual exchange.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: This calculation MAY NOT reflect the \u201cper-user\u201d price-per-share, and instead should reflect the\\n     * \u201caverage-user\u2019s\u201d price-per-share, meaning what the average user should expect to see when exchanging to and\\n     * from.\\n     */\\n    function convertToAssets(\\n        uint256 shares\\n    ) external view virtual returns (uint256 assets);\\n\\n    /**\\n     * @dev Returns the maximum amount of the underlying asset that can be deposited into the Vault for the receiver,\\n     * through a deposit call.\\n     *\\n     * - MUST return a limited value if receiver is subject to some deposit limit.\\n     * - MUST return 2 ** 256 - 1 if there is no limit on the maximum amount of assets that may be deposited.\\n     * - MUST NOT revert.\\n     */\\n    function maxDeposit(\\n        address receiver\\n    ) external view virtual returns (uint256 maxAssets);\\n\\n    /**\\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their deposit at the current block, given\\n     * current on-chain conditions.\\n     *\\n     * - MUST return as close to and no more than the exact amount of Vault shares that would be minted in a deposit\\n     *   call in the same transaction. I.e. deposit should return the same or more shares as previewDeposit if called\\n     *   in the same transaction.\\n     * - MUST NOT account for deposit limits like those returned from maxDeposit and should always act as though the\\n     *   deposit would be accepted, regardless if the user has enough tokens approved, etc.\\n     * - MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: any unfavorable discrepancy between convertToShares and previewDeposit SHOULD be considered slippage in\\n     * share price or some other type of condition, meaning the depositor will lose assets by depositing.\\n     */\\n    function previewDeposit(\\n        uint256 assets\\n    ) external view virtual returns (uint256 shares);\\n\\n    /**\\n     * @dev Mints shares Vault shares to receiver by depositing exactly amount of underlying tokens.\\n     *\\n     * - MUST emit the Deposit event.\\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\\n     *   deposit execution, and are accounted for during deposit.\\n     * - MUST revert if all of assets cannot be deposited (due to deposit limit being reached, slippage, the user not\\n     *   approving enough underlying tokens to the Vault contract, etc).\\n     *\\n     * NOTE: most implementations will require pre-approval of the Vault with the Vault\u2019s underlying asset token.\\n     */\\n    function deposit(\\n        uint256 assets,\\n        address receiver\\n    ) external virtual returns (uint256 shares);\\n\\n    /**\\n     * @dev Returns the maximum amount of the Vault shares that can be minted for the receiver, through a mint call.\\n     * - MUST return a limited value if receiver is subject to some mint limit.\\n     * - MUST return 2 ** 256 - 1 if there is no limit on the maximum amount of shares that may be minted.\\n     * - MUST NOT revert.\\n     */\\n    function maxMint(\\n        address receiver\\n    ) external view virtual returns (uint256 maxShares);\\n\\n    /**\\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their mint at the current block, given\\n     * current on-chain conditions.\\n     *\\n     * - MUST return as close to and no fewer than the exact amount of assets that would be deposited in a mint call\\n     *   in the same transaction. I.e. mint should return the same or fewer assets as previewMint if called in the\\n     *   same transaction.\\n     * - MUST NOT account for mint limits like those returned from maxMint and should always act as though the mint\\n     *   would be accepted, regardless if the user has enough tokens approved, etc.\\n     * - MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: any unfavorable discrepancy between convertToAssets and previewMint SHOULD be considered slippage in\\n     * share price or some other type of condition, meaning the depositor will lose assets by minting.\\n     */\\n    function previewMint(\\n        uint256 shares\\n    ) external view virtual returns (uint256 assets);\\n\\n    /**\\n     * @dev Mints exactly shares Vault shares to receiver by depositing amount of underlying tokens.\\n     *\\n     * - MUST emit the Deposit event.\\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the mint\\n     *   execution, and are accounted for during mint.\\n     * - MUST revert if all of shares cannot be minted (due to deposit limit being reached, slippage, the user not\\n     *   approving enough underlying tokens to the Vault contract, etc).\\n     *\\n     * NOTE: most implementations will require pre-approval of the Vault with the Vault\u2019s underlying asset token.\\n     */\\n    function mint(\\n        uint256 shares,\\n        address receiver\\n    ) external virtual returns (uint256 assets);\\n\\n    /**\\n     * @dev Returns the maximum amount of the underlying asset that can be withdrawn from the owner balance in the\\n     * Vault, through a withdraw call.\\n     *\\n     * - MUST return a limited value if owner is subject to some withdrawal limit or timelock.\\n     * - MUST NOT revert.\\n     */\\n    function maxWithdraw(\\n        address owner\\n    ) external view virtual returns (uint256 maxAssets);\\n\\n    /**\\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their withdrawal at the current block,\\n     * given current on-chain conditions.\\n     *\\n     * - MUST return as close to and no fewer than the exact amount of Vault shares that would be burned in a withdraw\\n     *   call in the same transaction. I.e. withdraw should return the same or fewer shares as previewWithdraw if\\n     *   called\\n     *   in the same transaction.\\n     * - MUST NOT account for withdrawal limits like those returned from maxWithdraw and should always act as though\\n     *   the withdrawal would be accepted, regardless if the user has enough shares, etc.\\n     * - MUST be inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: any unfavorable discrepancy between convertToShares and previewWithdraw SHOULD be considered slippage in\\n     * share price or some other type of condition, meaning the depositor will lose assets by depositing.\\n     */\\n    function previewWithdraw(\\n        uint256 assets\\n    ) external view virtual returns (uint256 shares);\\n\\n    /**\\n     * @dev Burns shares from owner and sends exactly assets of underlying tokens to receiver.\\n     *\\n     * - MUST emit the Withdraw event.\\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\\n     *   withdraw execution, and are accounted for during withdraw.\\n     * - MUST revert if all of assets cannot be withdrawn (due to withdrawal limit being reached, slippage, the owner\\n     *   not having enough shares, etc).\\n     *\\n     * Note that some implementations will require pre-requesting to the Vault before a withdrawal may be performed.\\n     * Those methods should be performed separately.\\n     */\\n    function withdraw(\\n        uint256 assets,\\n        address receiver,\\n        address owner\\n    ) external virtual returns (uint256 shares);\\n\\n    /**\\n     * @dev Returns the maximum amount of Vault shares that can be redeemed from the owner balance in the Vault,\\n     * through a redeem call.\\n     *\\n     * - MUST return a limited value if owner is subject to some withdrawal limit or timelock.\\n     * - MUST return balanceOf(owner) if owner is not subject to any withdrawal limit or timelock.\\n     * - MUST NOT revert.\\n     */\\n    function maxRedeem(\\n        address owner\\n    ) external view virtual returns (uint256 maxShares);\\n\\n    /**\\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their redeemption at the current block,\\n     * given current on-chain conditions.\\n     *\\n     * - MUST return as close to and no more than the exact amount of assets that would be withdrawn in a redeem call\\n     *   in the same transaction. I.e. redeem should return the same or more assets as previewRedeem if called in the\\n     *   same transaction.\\n     * - MUST NOT account for redemption limits like those returned from maxRedeem and should always act as though the\\n     *   redemption would be accepted, regardless if the user has enough shares, etc.\\n     * - MUST be inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: any unfavorable discrepancy between convertToAssets and previewRedeem SHOULD be considered slippage in\\n     * share price or some other type of condition, meaning the depositor will lose assets by redeeming.\\n     */\\n    function previewRedeem(\\n        uint256 shares\\n    ) external view virtual returns (uint256 assets);\\n\\n    /**\\n     * @dev Burns exactly shares from owner and sends assets of underlying tokens to receiver.\\n     *\\n     * - MUST emit the Withdraw event.\\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\\n     *   redeem execution, and are accounted for during redeem.\\n     * - MUST revert if all of shares cannot be redeemed (due to withdrawal limit being reached, slippage, the owner\\n     *   not having enough shares, etc).\\n     *\\n     * NOTE: some implementations will require pre-requesting to the Vault before a withdrawal may be performed.\\n     * Those methods should be performed separately.\\n     */\\n    function redeem(\\n        uint256 shares,\\n        address receiver,\\n        address owner\\n    ) external virtual returns (uint256 assets);\\n}\\n\"\r\n    },\r\n    \"IBuyBack.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.12;\\n\\nabstract contract IBuyBack {\\n    function canSellToken() external view virtual returns (address);\\n\\n    function canSendToTreasury() public view virtual returns (bool);\\n\\n    function canBurnTokens() external view virtual returns (bool);\\n\\n    function canTopUpKeeper() external view virtual returns (bool);\\n\\n    function sellTokens(address _token) external virtual;\\n\\n    function burnTokens() external virtual;\\n\\n    function sendToTreasury() external virtual;\\n\\n    function topUpKeeper() external virtual;\\n}\\n\"\r\n    },\r\n    \"IBurner.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.12;\\n\\n/// Gro burner interface - used to move gro tokens into the vesting contract\\ninterface IBurner {\\n    function reVest(uint256 amount) external;\\n}\\n\"\r\n    },\r\n    \"IVester.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.12;\\n\\n/// Gro Vester interface - used to move vesting tokens into the bonus contract\\ninterface IVester {\\n    function exit(uint256 amount) external;\\n}\\n\"\r\n    },\r\n    \"IGelatoTopUp.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.12;\\n\\n/// Gelato top up wallet interface\\ninterface IGelatoTopUp {\\n    function depositFunds(\\n        address _receiver,\\n        address _token,\\n        uint256 _amount\\n    ) external;\\n\\n    function userTokenBalance(\\n        address _user,\\n        address _token\\n    ) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"ICurve3Pool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.12;\\n\\n/// Curve 3pool interface\\ninterface ICurve3Pool {\\n    function get_virtual_price() external view returns (uint256);\\n\\n    function calc_withdraw_one_coin(\\n        uint256 _token_amount,\\n        int128 i\\n    ) external view returns (uint256);\\n\\n    function remove_liquidity_one_coin(\\n        uint256 _token_amount,\\n        int128 i,\\n        uint256 min_amount\\n    ) external;\\n\\n    function balanceOf(address account) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"IUniFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.12;\\n\\ninterface IUniFactory {\\n    function getPair(\\n        address _tokenA,\\n        address _tokenB\\n    ) external view returns (address);\\n}\\n\"\r\n    },\r\n    \"IUniV2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.12;\\n\\n/// Uniswap v2 router interface\\ninterface IUniV2 {\\n    function getAmountsOut(\\n        uint256 amountIn,\\n        address[] calldata path\\n    ) external view returns (uint256[] memory amounts);\\n\\n    function swapExactTokensForTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n}\\n\"\r\n    },\r\n    \"IUniV3.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.12;\\n\\ninterface IUniV3 {\\n    struct ExactInputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n    }\\n\\n    function exactInput(\\n        ExactInputParams calldata params\\n    ) external payable returns (uint256 amountOut);\\n}\\n\"\r\n    },\r\n    \"IUniV3Pool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.12;\\n\\ninterface IUniV3_POOL {\\n    function slot0()\\n        external\\n        view\\n        returns (\\n            uint160 sqrtPriceX96,\\n            int24 tick,\\n            uint16 observationIndex,\\n            uint16 observationCardinality,\\n            uint16 observationCardinalityNext,\\n            uint8 feeProtocol,\\n            bool unlocked\\n        );\\n}\\n\"\r\n    },\r\n    \"IWETH9.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.12;\\n\\ninterface IWETH9 {\\n    /// @notice Deposit ether to get wrapped ether\\n    function deposit() external payable;\\n\\n    /// @notice Withdraw wrapped ether to get ether\\n    function withdraw(uint256) external;\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"evmVersion\": \"istanbul\",\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"libraries\": {\r\n      \"BuyBack.sol\": {}\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"GelatoDepositFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotKeeper\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotOwner\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"groAmount\",\"type\":\"uint256\"}],\"name\":\"BurnTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"LogDepositReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"wrapped\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minSellAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum BuyBack.AMM\",\"name\":\"amm\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"}],\"name\":\"LogNewTokenAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"LogTokenRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"SendToTreasury\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"TopUpKeeper\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountToSell\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountToTreasury\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountToKeeper\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountToBurner\",\"type\":\"uint256\"}],\"name\":\"tokenSold\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"GRO_BURNER\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"GRO_TREASURY\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"GRO_VESTER\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"KEEPER_MIN_ETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_BURN\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_SEND_TO_TREASURY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_TOPUP_ETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burner\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyBackTrigger\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"tokenToSell\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"canTreasury\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"canBurn\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"canTopUp\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"canBurnTokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"canSellToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"canSendToTreasury\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"canTopUpKeeper\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"getPriceV3\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"getToken\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"wrapped\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minSellAmount\",\"type\":\"uint256\"},{\"internalType\":\"enum BuyBack.AMM\",\"name\":\"amm\",\"type\":\"uint8\"},{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"}],\"internalType\":\"struct BuyBack.tokenData\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"keeper\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"keepers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"removeToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_keeper\",\"type\":\"address\"}],\"name\":\"revokeKeeper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"sellTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sendToTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_keeper\",\"type\":\"address\"}],\"name\":\"setKeeper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_wrapped\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_minSellAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_amm\",\"type\":\"uint8\"},{\"internalType\":\"uint24\",\"name\":\"_fee\",\"type\":\"uint24\"}],\"name\":\"setToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_treasury\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"_burner\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"_keeper\",\"type\":\"uint16\"}],\"name\":\"setTokenDistribution\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"sweep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenDistribution\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"treasury\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"burner\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"keeper\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"wrapped\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minSellAmount\",\"type\":\"uint256\"},{\"internalType\":\"enum BuyBack.AMM\",\"name\":\"amm\",\"type\":\"uint8\"},{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"topUpAvailable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"topUpKeeper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "BuyBack", "CompilerVersion": "v0.8.12+commit.f00d7308", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "Unlicense", "Proxy": "0", "Implementation": "", "SwarmSource": ""}