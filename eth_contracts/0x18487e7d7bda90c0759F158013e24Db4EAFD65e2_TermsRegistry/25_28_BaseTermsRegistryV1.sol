// SPDX-License-Identifier: Apache-2.0

// Generated by impl.ts. Will be overwritten.
// Filename: './BaseTermsRegistryV1.sol'

pragma solidity ^0.8.4;

import "../../api/impl/ITermsRegistry.sol";
import "../../api/IAspenFeatures.sol";
import "../../api/IAspenVersioned.sol";
import "../../api/agreement/IAgreementsRegistry.sol";
import "../../api/IMulticallable.sol";

/// Inherit from this base to implement introspection
abstract contract BaseTermsRegistryV1 is IAspenFeaturesV0, IAspenVersionedV2, IAgreementsRegistryV1, IMulticallableV0 {
    function supportedFeatures() override public pure returns (string[] memory features) {
        features = new string[](4);
        features[0] = "IAspenFeatures.sol:IAspenFeaturesV0";
        features[1] = "IAspenVersioned.sol:IAspenVersionedV2";
        features[2] = "agreement/IAgreementsRegistry.sol:IAgreementsRegistryV1";
        features[3] = "IMulticallable.sol:IMulticallableV0";
    }

    /// This needs to be public to be callable from initialize via delegatecall
    function minorVersion() virtual override public pure returns (uint256 minor, uint256 patch);

    function implementationVersion() override public pure returns (uint256 major, uint256 minor, uint256 patch) {
        (minor, patch) = minorVersion();
        major = 1;
    }

    function implementationInterfaceId() virtual override public pure returns (string memory interfaceId) {
        interfaceId = "impl/ITermsRegistry.sol:ITermsRegistryV1";
    }

    function supportsInterface(bytes4 interfaceID) virtual override public view returns (bool) {
        return (interfaceID != 0x0) && ((interfaceID != 0xffffffff) && ((interfaceID == 0x01ffc9a7) || ((interfaceID == type(IAspenFeaturesV0).interfaceId) || ((interfaceID == type(IAspenVersionedV2).interfaceId) || ((interfaceID == type(IAgreementsRegistryV1).interfaceId) || ((interfaceID == type(IMulticallableV0).interfaceId) || (interfaceID == type(ITermsRegistryV1).interfaceId)))))));
    }

    function isIAspenFeaturesV0() override public pure returns (bool) {
        return true;
    }
}