{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/MirrorbotV3Uni.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\n\\r\\n    interface IUniversalRouter {\\r\\n        function execute(bytes calldata commands, bytes[] calldata inputs, uint256 deadline) external payable;\\r\\n    }   \\r\\n\\r\\n\\r\\ncontract MirrorBotV3 is Ownable{\\r\\n\\r\\n        using SafeMath for uint256;\\r\\n        uint256 private  adminFeeInETH;\\r\\n        uint256 private  ownerShare; \\r\\n        address private  adminAddress;\\r\\n        address private constant UNIVERSAL_ROUTER_ADDRESS = 0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD; \\r\\n        IUniversalRouter public  immutable uniswapRouter;\\r\\n        address private wrapETH = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\\r\\n        event ExecutionResult(bool success);\\r\\n        \\r\\n    constructor(uint256 _adminFeeInETH) Ownable(msg.sender)  {\\r\\n        uniswapRouter = IUniversalRouter(UNIVERSAL_ROUTER_ADDRESS);  \\r\\n        adminFeeInETH = _adminFeeInETH;\\r\\n        adminAddress = msg.sender;   \\r\\n    }\\r\\n\\r\\n    mapping(address => uint256) private  influencerMapping; \\r\\n\\r\\n    function setAdminAddress (address _adminAddress) external onlyOwner  {\\r\\n        adminAddress = _adminAddress;\\r\\n    }\\r\\n\\r\\n    function setAdminFEE (uint256 _adminFeeInETH) external  onlyOwner  {\\r\\n        adminFeeInETH = _adminFeeInETH;\\r\\n    }\\r\\n\\r\\n    function _adminAdress () external  view returns (address) {\\r\\n        return adminAddress;\\r\\n    }\\r\\n\\r\\n    function _getAdminFee () external view returns (uint256) {\\r\\n        return adminFeeInETH;\\r\\n    }\\r\\n\\r\\n    function _getInfluencerValue(address _influencerAddress) external  view returns (uint256) {\\r\\n        return influencerMapping[_influencerAddress];\\r\\n    }\\r\\n\\r\\n    modifier onlyAdmin() {\\r\\n    require(msg.sender == adminAddress , \\\"Unauthorized access\\\");\\r\\n    _;\\r\\n    }\\r\\n\\r\\n    function processInfluencerPayment(address influencer, uint256 influencerFee) internal   {\\r\\n        require(influencer != address(0), \\\"Invalid influencer address\\\");\\r\\n        influencerMapping[influencer] = influencerMapping[influencer].add(influencerFee);  \\r\\n    }\\r\\n\\r\\n    function withdrawInfluencerFee() external  {\\r\\n        require(influencerMapping[msg.sender] > 0, \\\"No fees to withdraw\\\");\\r\\n        address payable influencer = payable(msg.sender);\\r\\n        uint256 influencerFee = influencerMapping[influencer];\\r\\n        influencer.transfer(influencerFee);\\r\\n        influencerMapping[influencer] = 0;\\r\\n    }\\r\\n\\r\\n    function withdrawInfluencerFeeByAdmin(address __influencer) external onlyAdmin {\\r\\n        require(influencerMapping[__influencer] > 0, \\\"No fees to withdraw\\\");\\r\\n        address payable influencer = payable(msg.sender);\\r\\n        uint256 influencerFee = influencerMapping[__influencer];\\r\\n        influencer.transfer(influencerFee);\\r\\n        influencerMapping[__influencer] = 0;\\r\\n    }\\r\\n\\r\\n\\r\\n    function withdrawBalanceByOwner() external onlyOwner {\\r\\n        require(ownerShare > 0, \\\"No Owner balance to withdraw\\\");\\r\\n        payable(owner()).transfer(ownerShare);\\r\\n        ownerShare = 0;\\r\\n    }\\r\\n\\r\\n    function getOwnerBlance () external view  returns (uint256) {\\r\\n        return ownerShare;\\r\\n    }\\r\\n\\r\\n    function calculateInfluencerFee(uint256 amount, uint256 feePercentage) internal pure returns (uint256) {\\r\\n        return  (amount.mul (feePercentage)).div(100);\\r\\n    }\\r\\n\\r\\n    // function getTokenBalance(address tokenAddress) external view returns (uint256) {\\r\\n    //     IERC20 token = IERC20(tokenAddress);\\r\\n    //     uint256 balance = token.balanceOf(msg.sender);\\r\\n    //     return balance;\\r\\n    // }\\r\\n\\r\\n    function buyv2(\\r\\n        uint256 amountOutMin,\\r\\n        address[] memory path,\\r\\n        address influencer,\\r\\n        uint256 influencerFeePercentage,\\r\\n        address masterInfluencer,\\r\\n        uint256 masterInfluencerFeePercentage\\r\\n\\r\\n    ) external payable {\\r\\n\\r\\n        require(influencerFeePercentage <= 100, \\\"Influencer fee percentage must be <= 100\\\");\\r\\n        require(masterInfluencerFeePercentage <= 100, \\\"Master influencer fee percentage must be <= 100\\\");\\r\\n        uint256 adminFee = adminFeeInETH;\\r\\n        uint256 influencerFee = calculateInfluencerFee(adminFee, influencerFeePercentage);\\r\\n        uint256 masterInfluencerFee = 0;\\r\\n        if (masterInfluencer != address(0)) {\\r\\n            masterInfluencerFee = calculateInfluencerFee(adminFee, masterInfluencerFeePercentage);\\r\\n        }\\r\\n        ownerShare += (adminFee.sub(influencerFee)).sub(masterInfluencerFee); \\r\\n        uint256 remainingAmount = msg.value.sub(adminFee);\\r\\n        bytes memory commands = abi.encodePacked(bytes1(0x0b), bytes1(0x08));\\r\\n        bytes memory wrapEthInputs = abi.encode(\\r\\n            0x0000000000000000000000000000000000000002,\\r\\n            remainingAmount\\r\\n        );\\r\\n        bytes memory swapExactInInputs = abi.encode(\\r\\n            msg.sender,\\r\\n            remainingAmount,               \\r\\n            amountOutMin,            \\r\\n            path,                    \\r\\n            false                    \\r\\n        );\\r\\n        bytes[] memory inputsArray = new bytes[](2);\\r\\n        inputsArray[0] = wrapEthInputs;\\r\\n        inputsArray[1] = swapExactInInputs;\\r\\n    uniswapRouter.execute{value: remainingAmount}(commands, inputsArray, block.timestamp + 10);\\r\\n    processInfluencerPayments(influencer, influencerFee, masterInfluencer, masterInfluencerFee);\\r\\n   \\r\\n    }\\r\\n\\r\\n    // function swapv2(\\r\\n    //     uint256 amountIn,\\r\\n    //     uint256 amountOutMin,\\r\\n    //     address[] memory path,\\r\\n    //     address influencer,\\r\\n    //     uint256 influencerFeePercentage,\\r\\n    //     address masterInfluencer,\\r\\n    //     uint256 masterInfluencerFeePercentage\\r\\n    // ) external payable {\\r\\n\\r\\n    //     uint256 adminFee = adminFeeInETH; \\r\\n    //     require(influencerFeePercentage <= 100, \\\"Influencer fee percentage must be <= 100\\\");\\r\\n    //     require(masterInfluencerFeePercentage <= 100, \\\"Master influencer fee percentage must be <= 100\\\");\\r\\n    //     require(msg.value >= adminFee, \\\"Insufficient balance for fee \\\"); \\r\\n    //     uint256 influencerFee = calculateInfluencerFee( adminFee, influencerFeePercentage);\\r\\n    //     uint256 masterInfluencerFee = 0;\\r\\n    //     if (masterInfluencer != address(0)) {\\r\\n    //         masterInfluencerFee = calculateInfluencerFee(adminFee, masterInfluencerFeePercentage);\\r\\n    //     }\\r\\n    //     ownerShare += (adminFee.sub(influencerFee)).sub(masterInfluencerFee); \\r\\n\\r\\n    //     bytes memory commands = abi.encodePacked(bytes1(0x08));\\r\\n    //     bytes memory swapExactInInputs = abi.encode(\\r\\n    //         msg.sender,\\r\\n    //         amountIn,\\r\\n    //         amountOutMin,            \\r\\n    //         path,                    \\r\\n    //         false                    \\r\\n    //     );\\r\\n\\r\\n    //     bytes[] memory inputsArray = new bytes[](1);\\r\\n    //     inputsArray[0] = swapExactInInputs;\\r\\n\\r\\n    // uniswapRouter.execute(commands, inputsArray, block.timestamp + 10);  \\r\\n    // processInfluencerPayments(influencer, influencerFee, masterInfluencer, masterInfluencerFee);\\r\\n   \\r\\n    // }\\r\\n\\r\\n    function sellV2(\\r\\n        uint256 amountIn,\\r\\n        uint256 amountOutMin,\\r\\n        address[] memory path,\\r\\n        address influencer,\\r\\n        uint256 influencerFeePercentage,\\r\\n        address masterInfluencer,\\r\\n        uint256 masterInfluencerFeePercentage      \\r\\n    ) external payable {\\r\\n        uint256 adminFee = adminFeeInETH;\\r\\n        require(influencerFeePercentage <= 100, \\\"Influencer fee percentage must be <= 100\\\");\\r\\n        require(masterInfluencerFeePercentage <= 100, \\\"Master influencer fee percentage must be <= 100\\\");\\r\\n        require(msg.value >= adminFee, \\\"Insufficient balance for fee \\\");   \\r\\n        uint256 influencerFee = calculateInfluencerFee( adminFee, influencerFeePercentage);\\r\\n        uint256 masterInfluencerFee = 0;\\r\\n        if (masterInfluencer != address(0)) {\\r\\n            masterInfluencerFee = calculateInfluencerFee(adminFee, masterInfluencerFeePercentage);\\r\\n        }\\r\\n        ownerShare += (adminFee.sub(influencerFee)).sub(masterInfluencerFee); \\r\\n        \\r\\n        bytes memory commands = abi.encodePacked( bytes1(0x08),bytes1(0x0c));\\r\\n        bytes memory swapExactInInputs = abi.encode(\\r\\n            0x0000000000000000000000000000000000000002,\\r\\n            amountIn,               \\r\\n            amountOutMin,            \\r\\n            path,                    \\r\\n            false                    \\r\\n        );\\r\\n        bytes memory unwrapEthInputs = abi.encode(msg.sender,amountOutMin);  \\r\\n        bytes[] memory inputsArray = new bytes[](2);\\r\\n        inputsArray[0] = swapExactInInputs;\\r\\n        inputsArray[1] = unwrapEthInputs;\\r\\n\\r\\n    uniswapRouter.execute(commands, inputsArray, block.timestamp + 10);\\r\\n    processInfluencerPayments(influencer, influencerFee, masterInfluencer, masterInfluencerFee);\\r\\n \\r\\n    }\\r\\n   \\r\\n    \\r\\n    // function swapV3(\\r\\n    //     uint256 amountIn,\\r\\n    //     uint256 amountOutMin,\\r\\n    //     address tokenIn,\\r\\n    //     address tokenOut,\\r\\n    //     uint24  fee,\\r\\n    //     address influencer,\\r\\n    //     uint256 influencerFeePercentage,\\r\\n    //     address masterInfluencer,\\r\\n    //     uint256 masterInfluencerFeePercentage\\r\\n    // ) external payable {\\r\\n\\r\\n    //     uint256 adminFee = adminFeeInETH;\\r\\n    //     require(influencerFeePercentage <= 100, \\\"Influencer fee percentage must be <= 100\\\");\\r\\n    //     require(masterInfluencerFeePercentage <= 100, \\\"Master influencer fee percentage must be <= 100\\\");\\r\\n    //     require(msg.value >= adminFee, \\\"Insufficient balance for fee\\\");\\r\\n    //     uint256 influencerFee = calculateInfluencerFee(adminFee, influencerFeePercentage);\\r\\n    //     uint256 masterInfluencerFee = masterInfluencer != address(0) ? calculateInfluencerFee(adminFee, masterInfluencerFeePercentage) : 0;\\r\\n    //     ownerShare += (adminFee.sub(influencerFee)).sub(masterInfluencerFee); \\r\\n    //     bytes memory v3SwapExactInCommand = abi.encodePacked( bytes1(0x00));\\r\\n    //     bytes memory path = abi.encodePacked(tokenIn,fee ,tokenOut);\\r\\n    //     bytes memory swapExactInInputs = abi.encode(\\r\\n    //         msg.sender,\\r\\n    //         amountIn,\\r\\n    //         amountOutMin,\\r\\n    //         path,\\r\\n    //         false\\r\\n    //     );\\r\\n    //     bytes[] memory inputsArray = new bytes[](1);\\r\\n    //     inputsArray[0] = swapExactInInputs;\\r\\n\\r\\n    // uniswapRouter.execute(v3SwapExactInCommand, inputsArray, block.timestamp + 10);\\r\\n    // processInfluencerPayments(influencer, influencerFee, masterInfluencer, masterInfluencerFee);\\r\\n  \\r\\n    // }\\r\\n\\r\\n    function sellV3 (\\r\\n        uint256 amountIn,\\r\\n        uint256 amountOutMin,\\r\\n        address tokenIn,\\r\\n        uint24 fee,\\r\\n        address influencer,\\r\\n        uint256 influencerFeePercentage,\\r\\n        address masterInfluencer,\\r\\n        uint256 masterInfluencerFeePercentage\\r\\n    ) external payable  {\\r\\n\\r\\n        uint256 adminFee = adminFeeInETH; \\r\\n        require(influencerFeePercentage <= 100, \\\"Influencer fee percentage must be <= 100\\\");\\r\\n        require(masterInfluencerFeePercentage <=100, \\\"masterInfluencer fee percentage must be <= 100\\\" );\\r\\n        require(msg.value >= adminFee, \\\"Insufficient balance for fee \\\");\\r\\n        uint256 influencerFee = calculateInfluencerFee(adminFee, influencerFeePercentage);\\r\\n        uint256 masterInfluencerFee = masterInfluencer != address(0) ? calculateInfluencerFee(adminFee, masterInfluencerFeePercentage) : 0;\\r\\n        ownerShare += (adminFee.sub(influencerFee)).sub(masterInfluencerFee); \\r\\n        bytes memory v3SwapExactInCommand = abi.encodePacked(bytes1(0x00), bytes1 (0x0c));\\r\\n        bytes memory path = abi.encodePacked(tokenIn,fee,wrapETH);\\r\\n        bytes memory swapExactInInputs = abi.encode( \\r\\n            0x0000000000000000000000000000000000000002,\\r\\n            amountIn,\\r\\n            amountOutMin,\\r\\n            path,\\r\\n            false\\r\\n        );\\r\\n        bytes memory unwrapEthInputs = abi.encode(\\r\\n            msg.sender,\\r\\n            amountOutMin\\r\\n        );  \\r\\n        bytes[] memory inputsArray = new bytes[](2);\\r\\n        inputsArray[0] = swapExactInInputs;\\r\\n        inputsArray[1] = unwrapEthInputs;\\r\\n\\r\\n    uniswapRouter.execute(v3SwapExactInCommand, inputsArray, block.timestamp + 10);\\r\\n    processInfluencerPayments(influencer, influencerFee, masterInfluencer, masterInfluencerFee);\\r\\n  \\r\\n    }\\r\\n\\r\\n\\r\\n    function buyV3(\\r\\n        uint256 amountOutMin,\\r\\n        address tokenOut,\\r\\n        uint24 fee,\\r\\n        address influencerAddress,\\r\\n        uint256 influencerFeePercentage,\\r\\n        address masterInfluencerAddress,\\r\\n        uint256 masterInfluencerFeePercentage\\r\\n    ) external payable {\\r\\n        uint256 adminFee = adminFeeInETH;\\r\\n        require(msg.value >= adminFee, \\\"Insufficient balance for fee\\\");\\r\\n        require(influencerFeePercentage <= 100, \\\"Influencer fee percentage must be <= 100\\\");\\r\\n        require(masterInfluencerFeePercentage <=100, \\\"masterInfluencer fee percentage must be <= 100\\\");\\r\\n\\r\\n\\r\\n        uint256 influencerFee = calculateInfluencerFee(adminFee, influencerFeePercentage);\\r\\n        uint256 masterInfluencerFee = (masterInfluencerAddress != address(0)) ? \\r\\n        calculateInfluencerFee(adminFee, masterInfluencerFeePercentage) : 0;\\r\\n        ownerShare += (adminFee.sub(influencerFee)).sub(masterInfluencerFee); \\r\\n        uint256 remainingAmount = msg.value.sub(adminFee);\\r\\n\\r\\n        executeUniswapTransaction(amountOutMin, tokenOut, fee, remainingAmount);\\r\\n        processInfluencerPayments(influencerAddress, influencerFee, masterInfluencerAddress, masterInfluencerFee);\\r\\n    }\\r\\n\\r\\n    function executeUniswapTransaction(\\r\\n        uint256 amountOutMin,\\r\\n        address tokenOut,\\r\\n        uint24 fee,\\r\\n        uint256 remainingAmount\\r\\n    )   internal {\\r\\n    \\r\\n        bytes memory v3SwapExactInCommand = abi.encodePacked(bytes1(0x0b), bytes1(0x00));\\r\\n        bytes memory wrapEthInputs = abi.encode(\\r\\n            0x0000000000000000000000000000000000000002,\\r\\n            remainingAmount \\r\\n        );\\r\\n\\r\\n    bytes memory path = abi.encodePacked(wrapETH, fee, tokenOut);\\r\\n    bytes memory swapExactInInputs = abi.encode(\\r\\n        msg.sender,\\r\\n        remainingAmount,\\r\\n        amountOutMin,\\r\\n        path,\\r\\n        false\\r\\n    );\\r\\n\\r\\n    bytes[] memory inputsArray = new bytes[](2);\\r\\n    inputsArray[0] = wrapEthInputs;\\r\\n    inputsArray[1] = swapExactInInputs;\\r\\n\\r\\n    uniswapRouter.execute{value: remainingAmount}(v3SwapExactInCommand, inputsArray, block.timestamp + 10);\\r\\n    }\\r\\n\\r\\n    function processInfluencerPayments(\\r\\n        address influencerAddress,\\r\\n        uint256 influencerFee,\\r\\n        address masterInfluencerAddress,\\r\\n        uint256 masterInfluencerFee\\r\\n    ) internal {\\r\\n        processInfluencerPayment(influencerAddress, influencerFee);\\r\\n        if (masterInfluencerAddress != address(0)) {\\r\\n            processInfluencerPayment(masterInfluencerAddress, masterInfluencerFee);\\r\\n        }\\r\\n    }\\r\\n   \\r\\n    receive() external payable {   \\r\\n    }\\r\\n\\r\\n}\\r\\n\\r\\n\\r\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_adminFeeInETH\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"name\":\"ExecutionResult\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_adminAdress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_getAdminFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_influencerAddress\",\"type\":\"address\"}],\"name\":\"_getInfluencerValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"},{\"internalType\":\"address\",\"name\":\"influencerAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"influencerFeePercentage\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"masterInfluencerAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"masterInfluencerFeePercentage\",\"type\":\"uint256\"}],\"name\":\"buyV3\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"influencer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"influencerFeePercentage\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"masterInfluencer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"masterInfluencerFeePercentage\",\"type\":\"uint256\"}],\"name\":\"buyv2\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwnerBlance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"influencer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"influencerFeePercentage\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"masterInfluencer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"masterInfluencerFeePercentage\",\"type\":\"uint256\"}],\"name\":\"sellV2\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"},{\"internalType\":\"address\",\"name\":\"influencer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"influencerFeePercentage\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"masterInfluencer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"masterInfluencerFeePercentage\",\"type\":\"uint256\"}],\"name\":\"sellV3\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_adminAddress\",\"type\":\"address\"}],\"name\":\"setAdminAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_adminFeeInETH\",\"type\":\"uint256\"}],\"name\":\"setAdminFEE\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapRouter\",\"outputs\":[{\"internalType\":\"contract IUniversalRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawBalanceByOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawInfluencerFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"__influencer\",\"type\":\"address\"}],\"name\":\"withdrawInfluencerFeeByAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "MirrorBotV3", "CompilerVersion": "v0.8.23+commit.f704f362", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000000000000000000000000000000aa87bee538000", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}