{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/contracts/MBASECTPPrice.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.18;\\n\\ncontract MBASECTPPrice{\\n    struct Data{\\n        uint start;\\n        uint end;\\n        uint priceInCents;\\n    }\\n    mapping(uint level => Data) public rangeAndPrice;\\n\\n    uint[] private range;\\n    address public owner;\\n    uint public CTPPrice;\\n    uint public maxSupply;\\n    uint public currentCirculatingSupply;\\n    mapping(uint=>mapping(uint=>uint)) private price;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n    event CirculatingSupplyUpdated(uint previousSupply, uint previousPrice, uint newSupply, uint newPrice);\\n\\n    constructor(uint[] memory rangeList, uint[] memory priceList){ \\n        owner = msg.sender;\\n        CTPPrice = 2727;// rate during deployment this contract   \\n        currentCirculatingSupply = 127659568; //total supply during deployment of this contract\\n        maxSupply = 250000000;\\n        range = rangeList;\\n\\n        for(uint i=0; i < range.length-1; i++){\\n            uint start = range[i];\\n            uint end = range[i+1];\\n            rangeAndPrice[i+1] = Data(start, end-1, priceList[i]);\\n            price[start][end] = priceList[i];\\n        }\\n    }\\n    \\n    modifier  onlyOwner{\\n        require(msg.sender == owner);\\n        _;\\n    }\\n\\n    function circulatingSupply(uint tokenAmount) public onlyOwner{\\n        require((tokenAmount >= 0 && tokenAmount <= maxSupply), \\\"Invalid circulating supply\\\");\\n        uint oldSupply = currentCirculatingSupply;\\n        uint oldPrice = CTPPrice;\\n        for(uint i=0; i < range.length-1; i++){\\n            uint start = range[i];\\n            uint end = range[i+1];\\n            if(tokenAmount >= start && tokenAmount < end){\\n                CTPPrice =  price[start][end];\\n                currentCirculatingSupply = tokenAmount;\\n                break;\\n            }\\n        }\\n        emit CirculatingSupplyUpdated(oldSupply, oldPrice, currentCirculatingSupply, CTPPrice);\\n    }\\n\\n    function getPriceByRange(uint start, uint end) public view returns(uint){\\n        uint priceInRange = price[start][end+1];\\n\\n        require(start>=0 && priceInRange > 0, \\\"Invalid range\\\");\\n\\n        return priceInRange;\\n    }\\n\\n    function getRangeAndPriceList() public view returns(Data[] memory){\\n        Data[] memory data = new Data[](50);\\n        for(uint i; i < range.length-1; i++){\\n            data[i] = rangeAndPrice[i+1];\\n        }\\n        return data;\\n    }\\n\\n    function transferOwnership(address newOwner) public onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner can't be the zero address\\\");\\n\\n        address oldOwner = owner;\\n        owner = newOwner;\\n\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"paris\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"rangeList\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"priceList\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previousSupply\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previousPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newSupply\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newPrice\",\"type\":\"uint256\"}],\"name\":\"CirculatingSupplyUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CTPPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"circulatingSupply\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentCirculatingSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"}],\"name\":\"getPriceByRange\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRangeAndPriceList\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"priceInCents\",\"type\":\"uint256\"}],\"internalType\":\"struct MBASECTPPrice.Data[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"}],\"name\":\"rangeAndPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"priceInCents\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "MBASECTPPrice", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000006c00000000000000000000000000000000000000000000000000000000000000033000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000039387010000000000000000000000000000000000000000000000000000000004c4b4010000000000000000000000000000000000000000000000000000000005a995c10000000000000000000000000000000000000000000000000000000006422c410000000000000000000000000000000000000000000000000000000006ce300100000000000000000000000000000000000000000000000000000000074ed5990000000000000000000000000000000000000000000000000000000007c536490000000000000000000000000000000000000000000000000000000008324c11000000000000000000000000000000000000000000000000000000000896fd690000000000000000000000000000000000000000000000000000000008f4157100000000000000000000000000000000000000000000000000000000094a4fa900000000000000000000000000000000000000000000000000000000099a54090000000000000000000000000000000000000000000000000000000009e4bae9000000000000000000000000000000000000000000000000000000000a2a10e9000000000000000000000000000000000000000000000000000000000a6acf21000000000000000000000000000000000000000000000000000000000aa766d9000000000000000000000000000000000000000000000000000000000ae03da1000000000000000000000000000000000000000000000000000000000b15b139000000000000000000000000000000000000000000000000000000000b4813a9000000000000000000000000000000000000000000000000000000000b77af29000000000000000000000000000000000000000000000000000000000ba4ca09000000000000000000000000000000000000000000000000000000000bcfa2c9000000000000000000000000000000000000000000000000000000000bf87019000000000000000000000000000000000000000000000000000000000c1f64c1000000000000000000000000000000000000000000000000000000000c44abb9000000000000000000000000000000000000000000000000000000000c686ff9000000000000000000000000000000000000000000000000000000000c8ad4a9000000000000000000000000000000000000000000000000000000000cabfcf1000000000000000000000000000000000000000000000000000000000ccc0811000000000000000000000000000000000000000000000000000000000ceb1161000000000000000000000000000000000000000000000000000000000d093051000000000000000000000000000000000000000000000000000000000d267c51000000000000000000000000000000000000000000000000000000000d4308e9000000000000000000000000000000000000000000000000000000000d5ee9a1000000000000000000000000000000000000000000000000000000000d7a2e19000000000000000000000000000000000000000000000000000000000d94e5f1000000000000000000000000000000000000000000000000000000000daf1ce1000000000000000000000000000000000000000000000000000000000dc8dea1000000000000000000000000000000000000000000000000000000000de236e9000000000000000000000000000000000000000000000000000000000dfb3171000000000000000000000000000000000000000000000000000000000e13d609000000000000000000000000000000000000000000000000000000000e2c2c81000000000000000000000000000000000000000000000000000000000e443ca9000000000000000000000000000000000000000000000000000000000e5c0e51000000000000000000000000000000000000000000000000000000000e73a561000000000000000000000000000000000000000000000000000000000e8b09a9000000000000000000000000000000000000000000000000000000000ea23f11000000000000000000000000000000000000000000000000000000000eb94981000000000000000000000000000000000000000000000000000000000ed02ce1000000000000000000000000000000000000000000000000000000000ee6b2810000000000000000000000000000000000000000000000000000000000000032000000000000000000000000000000000000000000000000000000000000028a000000000000000000000000000000000000000000000000000000000000033a00000000000000000000000000000000000000000000000000000000000004180000000000000000000000000000000000000000000000000000000000000533000000000000000000000000000000000000000000000000000000000000069b00000000000000000000000000000000000000000000000000000000000008630000000000000000000000000000000000000000000000000000000000000aa70000000000000000000000000000000000000000000000000000000000000d88000000000000000000000000000000000000000000000000000000000000112f00000000000000000000000000000000000000000000000000000000000015d30000000000000000000000000000000000000000000000000000000000001bb700000000000000000000000000000000000000000000000000000000000023330000000000000000000000000000000000000000000000000000000000002cb300000000000000000000000000000000000000000000000000000000000038c500000000000000000000000000000000000000000000000000000000000048190000000000000000000000000000000000000000000000000000000000005b91000000000000000000000000000000000000000000000000000000000000744a00000000000000000000000000000000000000000000000000000000000093af000000000000000000000000000000000000000000000000000000000000bb8f000000000000000000000000000000000000000000000000000000000000ee340000000000000000000000000000000000000000000000000000000000012e840000000000000000000000000000000000000000000000000000000000018032000000000000000000000000000000000000000000000000000000000001e7ed0000000000000000000000000000000000000000000000000000000000026bab00000000000000000000000000000000000000000000000000000000000312fa000000000000000000000000000000000000000000000000000000000003e776000000000000000000000000000000000000000000000000000000000004f5510000000000000000000000000000000000000000000000000000000000064c08000000000000000000000000000000000000000000000000000000000007ff4800000000000000000000000000000000000000000000000000000000000a280c00000000000000000000000000000000000000000000000000000000000ce60f000000000000000000000000000000000000000000000000000000000010619e000000000000000000000000000000000000000000000000000000000014cde500000000000000000000000000000000000000000000000000000000001a6be20000000000000000000000000000000000000000000000000000000000218e2200000000000000000000000000000000000000000000000000000000002a9d780000000000000000000000000000000000000000000000000000000000361f07000000000000000000000000000000000000000000000000000000000044bbe20000000000000000000000000000000000000000000000000000000000574ac500000000000000000000000000000000000000000000000000000000006edc6600000000000000000000000000000000000000000000000000000000008ccb1c0000000000000000000000000000000000000000000000000000000000b2cebf0000000000000000000000000000000000000000000000000000000000e315ee000000000000000000000000000000000000000000000000000000000120661700000000000000000000000000000000000000000000000000000000016e44370000000000000000000000000000000000000000000000000000000001d1288d00000000000000000000000000000000000000000000000000000000024ec04d0000000000000000000000000000000000000000000000000000000002ee41050000000000000000000000000000000000000000000000000000000003b8d2930000000000000000000000000000000000000000000000000000000004ba15ac", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}