{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"src/staking/Staking.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL 1.1\\npragma solidity =0.8.22;\\n\\nimport \\\"./interfaces/IStaking.sol\\\";\\nimport \\\"../interfaces/ISalt.sol\\\";\\nimport \\\"./StakingRewards.sol\\\";\\nimport \\\"../pools/PoolUtils.sol\\\";\\n\\n\\n// Staking SALT provides xSALT at a 1:1 ratio.\\n// Unstaking xSALT to reclaim SALT has a default unstake duration of 52 weeks and a minimum duration of two weeks.\\n// Expedited unstaking for two weeks allows a default 20% of the SALT to be reclaimed, while unstaking for a full year allows the full 100% to be reclaimed.\\n\\ncontract Staking is IStaking, StakingRewards\\n    {\\n\\tevent SALTStaked(address indexed user, uint256 amountStaked);\\n\\tevent UnstakeInitiated(address indexed user, uint256 indexed unstakeID, uint256 amountUnstaked, uint256 claimableSALT, uint256 numWeeks);\\n\\tevent UnstakeCancelled(address indexed user, uint256 indexed unstakeID);\\n\\tevent SALTRecovered(address indexed user, uint256 indexed unstakeID, uint256 saltRecovered, uint256 expeditedUnstakeFee);\\n\\tevent XSALTTransferredFromAirdrop(address indexed toUser, uint256 amountTransferred);\\n\\n\\tusing SafeERC20 for ISalt;\\n\\n\\t// The unstakeIDs for each user - including completed and cancelled unstakes.\\n\\tmapping(address => uint256[]) private _userUnstakeIDs;\\n\\n\\t// Mapping of unstake IDs to their corresponding Unstake data.\\n    mapping(uint256=>Unstake) private _unstakesByID;\\n\\tuint256 public nextUnstakeID;\\n\\n\\n\\tconstructor( IExchangeConfig _exchangeConfig, IPoolsConfig _poolsConfig, IStakingConfig _stakingConfig )\\n\\t\\tStakingRewards( _exchangeConfig, _poolsConfig, _stakingConfig )\\n\\t\\t{\\n\\t\\t}\\n\\n\\n\\t// Stake a given amount of SALT and immediately receive the same amount of xSALT.\\n\\t// Requires exchange access for the sending wallet.\\n\\tfunction stakeSALT( uint256 amountToStake ) external nonReentrant\\n\\t\\t{\\n\\t\\trequire( exchangeConfig.walletHasAccess(msg.sender), \\\"Sender does not have exchange access\\\" );\\n\\n\\t\\t// Increase the user's staking share so that they will receive more future SALT rewards.\\n\\t\\t// No cooldown as it takes default 52 weeks to unstake the xSALT to receive the full amount of staked SALT back.\\n\\t\\t_increaseUserShare( msg.sender, PoolUtils.STAKED_SALT, amountToStake, false );\\n\\n\\t\\t// Transfer the SALT from the user's wallet\\n\\t\\tsalt.safeTransferFrom( msg.sender, address(this), amountToStake );\\n\\n\\t\\temit SALTStaked(msg.sender, amountToStake);\\n\\t\\t}\\n\\n\\n\\t// Unstake a given amount of xSALT over a certain duration.\\n\\t// Unstaking immediately reduces the user's xSALT balance even though there will be the specified delay to convert it back to SALT\\n\\t// With a full unstake duration the user receives 100% of their staked amount.\\n\\t// With expedited unstaking the user receives less.\\n\\tfunction unstake( uint256 amountUnstaked, uint256 numWeeks ) external nonReentrant returns (uint256 unstakeID)\\n\\t\\t{\\n\\t\\trequire( userShareForPool(msg.sender, PoolUtils.STAKED_SALT) >= amountUnstaked, \\\"Cannot unstake more than the amount staked\\\" );\\n\\n\\t\\tuint256 claimableSALT = calculateUnstake( amountUnstaked, numWeeks );\\n\\t\\tuint256 completionTime = block.timestamp + numWeeks * ( 1 weeks );\\n\\n\\t\\tunstakeID = nextUnstakeID++;\\n\\t\\tUnstake memory u = Unstake( UnstakeState.PENDING, msg.sender, amountUnstaked, claimableSALT, completionTime, unstakeID );\\n\\n\\t\\t_unstakesByID[unstakeID] = u;\\n\\t\\t_userUnstakeIDs[msg.sender].push( unstakeID );\\n\\n\\t\\t// Decrease the user's staking share so that they will receive less future SALT rewards\\n\\t\\t// This call will send any pending SALT rewards to msg.sender as well.\\n\\t\\t// Note: _decreaseUserShare checks to make sure that the user has the specified staking share balance.\\n\\t\\t_decreaseUserShare( msg.sender, PoolUtils.STAKED_SALT, amountUnstaked, false );\\n\\n\\t\\temit UnstakeInitiated(msg.sender, unstakeID, amountUnstaked, claimableSALT, numWeeks);\\n\\t\\t}\\n\\n\\n\\t// Cancel a pending unstake.\\n\\t// Caller will be able to use the xSALT again immediately\\n\\tfunction cancelUnstake( uint256 unstakeID ) external nonReentrant\\n\\t\\t{\\n\\t\\tUnstake storage u = _unstakesByID[unstakeID];\\n\\n\\t\\trequire( u.status == UnstakeState.PENDING, \\\"Only PENDING unstakes can be cancelled\\\" );\\n\\t\\trequire( block.timestamp < u.completionTime, \\\"Unstakes that have already completed cannot be cancelled\\\" );\\n\\t\\trequire( msg.sender == u.wallet, \\\"Sender is not the original staker\\\" );\\n\\n\\t\\t// Update the user's share of the rewards for staked SALT\\n\\t\\t_increaseUserShare( msg.sender, PoolUtils.STAKED_SALT, u.unstakedXSALT, false );\\n\\n\\t\\tu.status = UnstakeState.CANCELLED;\\n\\t\\temit UnstakeCancelled(msg.sender, unstakeID);\\n\\t\\t}\\n\\n\\n\\t// Recover claimable SALT from a completed unstake\\n\\tfunction recoverSALT( uint256 unstakeID ) external nonReentrant\\n\\t\\t{\\n\\t\\tUnstake storage u = _unstakesByID[unstakeID];\\n\\t\\trequire( u.status == UnstakeState.PENDING, \\\"Only PENDING unstakes can be claimed\\\" );\\n\\t\\trequire( block.timestamp >= u.completionTime, \\\"Unstake has not completed yet\\\" );\\n\\t\\trequire( msg.sender == u.wallet, \\\"Sender is not the original staker\\\" );\\n\\n\\t\\tu.status = UnstakeState.CLAIMED;\\n\\n\\t\\t// See if the user unstaked early and received only a portion of their original stake.\\n\\t\\t// The portion they did not receive will be considered the expeditedUnstakeFee.\\n\\t\\tuint256 expeditedUnstakeFee = u.unstakedXSALT - u.claimableSALT;\\n\\n\\t\\t// Burn 100% of the expeditedUnstakeFee\\n\\t\\tif ( expeditedUnstakeFee > 0 )\\n\\t\\t\\t{\\n\\t\\t\\t// Send the expeditedUnstakeFee to the SALT contract and burn it\\n\\t\\t\\tsalt.safeTransfer( address(salt), expeditedUnstakeFee );\\n            salt.burnTokensInContract();\\n            }\\n\\n\\t\\t// Send the reclaimed SALT back to the user\\n\\t\\tsalt.safeTransfer( msg.sender, u.claimableSALT );\\n\\n\\t\\temit SALTRecovered(msg.sender, unstakeID, u.claimableSALT, expeditedUnstakeFee);\\n\\t\\t}\\n\\n\\n\\t// === VIEWS ===\\n\\n\\tfunction userXSalt( address wallet ) external view returns (uint256)\\n\\t\\t{\\n\\t\\treturn userShareForPool(wallet, PoolUtils.STAKED_SALT);\\n\\t\\t}\\n\\n\\n\\t// Retrieve all unstakes associated with a user within a specific range.\\n\\tfunction unstakesForUser( address user, uint256 start, uint256 end ) public view returns (Unstake[] memory)\\n\\t\\t{\\n        // Check if start and end are within the bounds of the array\\n        require(end >= start, \\\"Invalid range: end cannot be less than start\\\");\\n\\n        uint256[] memory userUnstakes = _userUnstakeIDs[user];\\n\\n        require(userUnstakes.length > end, \\\"Invalid range: end is out of bounds\\\");\\n        require(start < userUnstakes.length, \\\"Invalid range: start is out of bounds\\\");\\n\\n        Unstake[] memory unstakes = new Unstake[](end - start + 1);\\n\\n        uint256 index;\\n        for(uint256 i = start; i <= end; i++)\\n            unstakes[index++] = _unstakesByID[ userUnstakes[i]];\\n\\n        return unstakes;\\n    }\\n\\n\\n\\t// Retrieve all unstakes associated with a user.\\n\\tfunction unstakesForUser( address user ) external view returns (Unstake[] memory)\\n\\t\\t{\\n\\t\\t// Check to see how many unstakes the user has\\n\\t\\tuint256[] memory unstakeIDs = _userUnstakeIDs[user];\\n\\t\\tif ( unstakeIDs.length == 0 )\\n\\t\\t\\treturn new Unstake[](0);\\n\\n\\t\\t// Return them all\\n\\t\\treturn unstakesForUser( user, 0, unstakeIDs.length - 1 );\\n\\t\\t}\\n\\n\\n\\t// Returns the unstakeIDs for the user\\n\\tfunction userUnstakeIDs( address user ) external view returns (uint256[] memory)\\n\\t\\t{\\n\\t\\treturn _userUnstakeIDs[user];\\n\\t\\t}\\n\\n\\n\\tfunction unstakeByID(uint256 id) external view returns (Unstake memory)\\n\\t\\t{\\n\\t\\treturn _unstakesByID[id];\\n\\t\\t}\\n\\n\\n\\t// Calculate the reclaimable amount of SALT based on the amount of unstaked xSALT and unstake duration\\n\\t// By default, unstaking for two weeks allows 20% of the SALT to be reclaimed, while unstaking for a full year allows the full 100% to be reclaimed.\\n\\tfunction calculateUnstake( uint256 unstakedXSALT, uint256 numWeeks ) public view returns (uint256)\\n\\t\\t{\\n\\t\\tuint256 minUnstakeWeeks = stakingConfig.minUnstakeWeeks();\\n        uint256 maxUnstakeWeeks = stakingConfig.maxUnstakeWeeks();\\n        uint256 minUnstakePercent = stakingConfig.minUnstakePercent();\\n\\n\\t\\trequire( numWeeks >= minUnstakeWeeks, \\\"Unstaking duration too short\\\" );\\n\\t\\trequire( numWeeks <= maxUnstakeWeeks, \\\"Unstaking duration too long\\\" );\\n\\n\\t\\tuint256 percentAboveMinimum = 100 - minUnstakePercent;\\n\\t\\tuint256 unstakeRange = maxUnstakeWeeks - minUnstakeWeeks;\\n\\n\\t\\tuint256 numerator = unstakedXSALT * ( minUnstakePercent * unstakeRange + percentAboveMinimum * ( numWeeks - minUnstakeWeeks ) );\\n    \\treturn numerator / ( 100 * unstakeRange );\\n\\t\\t}\\n\\t}\"\r\n    },\r\n    \"src/staking/interfaces/IStaking.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL 1.1\\npragma solidity =0.8.22;\\n\\nimport \\\"./IStakingRewards.sol\\\";\\n\\n\\n// Enum representing the possible states of an unstake request:\\n// NONE: The default state, indicating that no unstake request has been made.\\n// PENDING: The state indicating that an unstake request has been made, but has not yet completed.\\n// CANCELLED: The state indicating that a pending unstake request has been cancelled by the user.\\n// CLAIMED: The state indicating that a pending unstake request has been completed and the user can claim their SALT tokens.\\nenum UnstakeState { NONE, PENDING, CANCELLED, CLAIMED }\\n\\n struct Unstake\\n\\t{\\n\\tUnstakeState status;\\t\\t\\t// see above\\n\\n\\taddress wallet;\\t\\t\\t\\t\\t// the wallet of the user performing the unstake\\n\\tuint256 unstakedXSALT;\\t\\t// the amount of xSALT that was unstaked\\n\\tuint256 claimableSALT;\\t\\t// claimable SALT at completion time\\n\\tuint256 completionTime;\\t// the timestamp when the unstake completes\\n\\tuint256\\tunstakeID;\\t\\t\\t// the unstake ID\\n\\t}\\n\\n\\ninterface IStaking is IStakingRewards\\n\\t{\\n\\tfunction stakeSALT( uint256 amountToStake ) external;\\n\\tfunction unstake( uint256 amountUnstaked, uint256 numWeeks ) external returns (uint256 unstakeID);\\n\\tfunction cancelUnstake( uint256 unstakeID ) external;\\n\\tfunction recoverSALT( uint256 unstakeID ) external;\\n\\n\\t// Views\\n\\tfunction userXSalt( address wallet ) external view returns (uint256);\\n\\tfunction unstakesForUser( address wallet, uint256 start, uint256 end ) external view returns (Unstake[] calldata);\\n\\tfunction unstakesForUser( address wallet ) external view returns (Unstake[] calldata);\\n\\tfunction userUnstakeIDs( address user ) external view returns (uint256[] calldata);\\n\\tfunction unstakeByID(uint256 id) external view returns (Unstake calldata);\\n\\tfunction calculateUnstake( uint256 unstakedXSALT, uint256 numWeeks ) external view returns (uint256);\\n\\t}\\n\"\r\n    },\r\n    \"src/interfaces/ISalt.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL 1.1\\npragma solidity =0.8.22;\\n\\nimport \\\"openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\\\";\\n\\n\\ninterface ISalt is IERC20\\n\\t{\\n\\tfunction burnTokensInContract() external;\\n\\n\\t// Views\\n\\tfunction totalBurned() external view returns (uint256);\\n\\t}\\n\"\r\n    },\r\n    \"src/staking/StakingRewards.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL 1.1\\npragma solidity =0.8.22;\\n\\nimport \\\"openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"openzeppelin-contracts/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"openzeppelin-contracts/contracts/utils/math/Math.sol\\\";\\nimport \\\"../pools/interfaces/IPoolsConfig.sol\\\";\\nimport \\\"../interfaces/IExchangeConfig.sol\\\";\\nimport \\\"./interfaces/IStakingRewards.sol\\\";\\nimport \\\"./interfaces/IStakingConfig.sol\\\";\\nimport \\\"../interfaces/ISalt.sol\\\";\\n\\n// This contract allows users to receive rewards (as SALT tokens) for staking SALT or liquidity shares.\\n// A user's reward is proportional to their share of the stake and is based on their share at the time that rewards are added.\\n//\\n// What staked shares represent is specific to the contracts that derive from StakingRewards.\\n//\\n// 1. Staking.sol: shares represent the amount of SALT staked (staked to the STAKED_SALT pool)\\n// 2. Liquidity.sol: shares represent the amount of liquidity deposited and staked to specific pools\\n//\\n// Regarding virtualRewards: the idea is that the ratio of totalRewards/totalShare before the user increases share needs to equal (totalRewards+virtualRewards)/(totalShare+shareIncrease).\\n// Namely that the ratio of rewards to shares before and after needs to remain the same. It's akin to a liquidity pool where the two tokens are \\\"rewards\\\" and \\\"shares\\\". When a user want add shares they borrow the rewards needed to create the correct proportion of virtualRewards / addedShares.\\n// When rewards are added, it increases the value of the shares, in terms of the rewards.\\n// On claim, users pay back any \\\"borrowed\\\" rewards (the virtual rewards).\\n\\nabstract contract StakingRewards is IStakingRewards, ReentrancyGuard\\n    {\\n\\tevent UserShareIncreased(address indexed wallet, bytes32 indexed poolID, uint256 amountIncreased);\\n\\tevent UserShareDecreased(address indexed wallet, bytes32 indexed poolID, uint256 amountDecreased, uint256 claimedRewards);\\n\\tevent RewardsClaimed(address indexed wallet, uint256 claimedRewards);\\n\\tevent SaltRewardsAdded(bytes32 indexed poolID, uint256 amountAdded);\\n\\n\\tusing SafeERC20 for ISalt;\\n\\n\\tISalt immutable public salt;\\n\\tIExchangeConfig immutable public exchangeConfig;\\n    IStakingConfig immutable public stakingConfig;\\n    IPoolsConfig immutable public poolsConfig;\\n\\n\\t// A nested mapping that stores the UserShareInfo data for each user and each poolID.\\n\\tmapping(address=>mapping(bytes32=>UserShareInfo)) private _userShareInfo;\\n\\n    // A mapping that stores the total pending SALT rewards for each poolID.\\n    mapping(bytes32=>uint256) public totalRewards;\\n\\n    // A mapping that stores the total shares for each poolID.\\n    mapping(bytes32=>uint256) public totalShares;\\n\\n\\n\\t// Constructs a new StakingRewards contract with providing configs\\n \\tconstructor( IExchangeConfig _exchangeConfig, IPoolsConfig _poolsConfig, IStakingConfig _stakingConfig )\\n\\t\\t{\\n\\t\\texchangeConfig = _exchangeConfig;\\n    \\tpoolsConfig = _poolsConfig;\\n\\t\\tstakingConfig = _stakingConfig;\\n\\n\\t\\tsalt = _exchangeConfig.salt(); // cached for efficiency\\n        }\\n\\n\\n\\t// Increase a user's share for the given whitelisted pool.\\n\\tfunction _increaseUserShare( address wallet, bytes32 poolID, uint256 increaseShareAmount, bool useCooldown ) internal\\n\\t\\t{\\n\\t\\trequire( poolsConfig.isWhitelisted( poolID ), \\\"Invalid pool\\\" );\\n\\t\\trequire( increaseShareAmount != 0, \\\"Cannot increase zero share\\\" );\\n\\n\\t\\tUserShareInfo storage user = _userShareInfo[wallet][poolID];\\n\\n\\t\\tif ( useCooldown )\\n\\t\\tif ( msg.sender != address(exchangeConfig.dao()) ) // DAO doesn't use the cooldown\\n\\t\\t\\t{\\n\\t\\t\\trequire( block.timestamp >= user.cooldownExpiration, \\\"Must wait for the cooldown to expire\\\" );\\n\\n\\t\\t\\t// Update the cooldown expiration for future transactions\\n\\t\\t\\tuser.cooldownExpiration = block.timestamp + stakingConfig.modificationCooldown();\\n\\t\\t\\t}\\n\\n\\t\\tuint256 existingTotalShares = totalShares[poolID];\\n\\n\\t\\t// Determine the amount of virtualRewards to add based on the current ratio of rewards/shares.\\n\\t\\t// The ratio of virtualRewards/increaseShareAmount is the same as totalRewards/totalShares for the pool.\\n\\t\\t// The virtual rewards will be deducted later when calculating the user's owed rewards.\\n        if ( existingTotalShares != 0 ) // prevent / 0\\n        \\t{\\n\\t\\t\\t// Round up in favor of the protocol.\\n\\t\\t\\tuint256 virtualRewardsToAdd = Math.ceilDiv( totalRewards[poolID] * increaseShareAmount, existingTotalShares );\\n\\n\\t\\t\\tuser.virtualRewards += virtualRewardsToAdd;\\n\\t        totalRewards[poolID] += virtualRewardsToAdd;\\n\\t        }\\n\\n\\t\\t// Update the deposit balances\\n\\t\\tuser.userShare += increaseShareAmount;\\n\\t\\ttotalShares[poolID] = existingTotalShares + increaseShareAmount;\\n\\n\\t\\temit UserShareIncreased(wallet, poolID, increaseShareAmount);\\n\\t\\t}\\n\\n\\n\\t// Decrease a user's share for the pool and have any pending rewards sent to them.\\n\\t// Does not require the pool to be valid (in case the pool was recently unwhitelisted).\\n\\tfunction _decreaseUserShare( address wallet, bytes32 poolID, uint256 decreaseShareAmount, bool useCooldown ) internal\\n\\t\\t{\\n\\t\\trequire( decreaseShareAmount != 0, \\\"Cannot decrease zero share\\\" );\\n\\n\\t\\tUserShareInfo storage user = _userShareInfo[wallet][poolID];\\n\\t\\trequire( decreaseShareAmount <= user.userShare, \\\"Cannot decrease more than existing user share\\\" );\\n\\n\\t\\tif ( useCooldown )\\n\\t\\tif ( msg.sender != address(exchangeConfig.dao()) ) // DAO doesn't use the cooldown\\n\\t\\t\\t{\\n\\t\\t\\trequire( block.timestamp >= user.cooldownExpiration, \\\"Must wait for the cooldown to expire\\\" );\\n\\n\\t\\t\\t// Update the cooldown expiration for future transactions\\n\\t\\t\\tuser.cooldownExpiration = block.timestamp + stakingConfig.modificationCooldown();\\n\\t\\t\\t}\\n\\n\\t\\t// Determine the share of the rewards for the amountToDecrease (will include previously added virtual rewards)\\n\\t\\tuint256 rewardsForAmount = ( totalRewards[poolID] * decreaseShareAmount ) / totalShares[poolID];\\n\\n\\t\\t// For the amountToDecrease determine the proportion of virtualRewards (proportional to all virtualRewards for the user)\\n\\n\\t\\t// Round virtualRewardsToRemoveFromClaimable up in favor of the protocol\\n\\t\\tuint256 virtualRewardsToRemoveFromClaimable = Math.ceilDiv(user.virtualRewards * decreaseShareAmount,  user.userShare );\\n\\n\\t\\t// Round virtualRewardsToRemoveFromUserVirtRewards down in favor of the protocol\\n\\t\\tuint256 virtualRewardsToRemoveFromUserVirtRewards = (user.virtualRewards * decreaseShareAmount) / user.userShare;\\n\\n\\t\\t// Update totals\\n\\t\\ttotalRewards[poolID] -= rewardsForAmount;\\n\\t\\ttotalShares[poolID] -= decreaseShareAmount;\\n\\n\\t\\t// Update the user's share and virtual rewards\\n\\t\\tuser.userShare -= decreaseShareAmount;\\n\\t\\tuser.virtualRewards -= virtualRewardsToRemoveFromUserVirtRewards;\\n\\n\\t\\tuint256 claimableRewards = 0;\\n\\n\\t\\t// Some of the rewardsForAmount are actually virtualRewards and can't be claimed.\\n\\n\\t\\t// In the event that virtualRewardsToRemoveFromClaimable are greater than actual rewards - claimableRewards will stay zero.\\n\\t\\tif ( virtualRewardsToRemoveFromClaimable < rewardsForAmount )\\n\\t\\t\\tclaimableRewards = rewardsForAmount - virtualRewardsToRemoveFromClaimable;\\n\\n\\t\\t// Send the claimable rewards\\n\\t\\tif ( claimableRewards != 0 )\\n\\t\\t\\tsalt.safeTransfer( wallet, claimableRewards );\\n\\n\\t\\temit UserShareDecreased(wallet, poolID, decreaseShareAmount, claimableRewards);\\n\\t\\t}\\n\\n\\n\\t// ===== PUBLIC FUNCTIONS =====\\n\\n\\t// Claim all available SALT rewards from multiple pools for the user.\\n\\t// The claimed rewards are added to the user's virtual rewards balance - so that they can't be claimed again later.\\n     function claimAllRewards( bytes32[] calldata poolIDs ) external nonReentrant returns (uint256 claimableRewards)\\n    \\t{\\n\\t\\tmapping(bytes32=>UserShareInfo) storage userInfo = _userShareInfo[msg.sender];\\n\\n\\t\\tclaimableRewards = 0;\\n\\t\\tfor( uint256 i = 0; i < poolIDs.length; i++ )\\n\\t\\t\\t{\\n\\t\\t\\tbytes32 poolID = poolIDs[i];\\n\\n\\t\\t\\tuint256 pendingRewards = userRewardForPool( msg.sender, poolID );\\n\\n\\t\\t\\t// Increase the virtualRewards balance for the user to account for them receiving the rewards without withdrawing\\n\\t\\t\\tuserInfo[poolID].virtualRewards += pendingRewards;\\n\\n\\t\\t\\tclaimableRewards += pendingRewards;\\n\\t\\t\\t}\\n\\n\\t\\tif ( claimableRewards > 0 )\\n\\t\\t\\t{\\n\\t\\t\\t// Send the actual rewards\\n\\t\\t\\tsalt.safeTransfer( msg.sender, claimableRewards );\\n\\n\\t\\t\\temit RewardsClaimed(msg.sender, claimableRewards);\\n\\t\\t\\t}\\n    \\t}\\n\\n\\n\\t// Adds SALT rewards for specific whitelisted pools.\\n\\t// There is some risk of addSALTRewards being frontrun to hunt rewards, but there are multiple mechanisms in place to prevent this from being effective.\\n\\t// 1. There is a cooldown period of default one hour before shares can be withdrawn once deposited.\\n\\t// 2. Staked SALT has a default unstake period of 52 weeks.\\n\\t// 3. Rewards are first placed into a RewardsEmitter which deposits rewards via addSALTRewards at the default rate of 1% per day.\\n\\t// 4. Rewards are deposited fairly often, with outstanding rewards being transferred with a frequency proportional to the activity of the exchange.\\n\\t// Example: if $100k rewards were being deposited in a bulk transaction, it would only equate to $1000 (1%) the first day,\\n\\t// or $10 in claimable rewards during a 15 minute upkeep period.\\n \\tfunction addSALTRewards( AddedReward[] calldata addedRewards ) external nonReentrant\\n\\t\\t{\\n\\t\\tuint256 sum = 0;\\n\\t\\tfor( uint256 i = 0; i < addedRewards.length; i++ )\\n\\t\\t\\t{\\n\\t\\t\\tAddedReward memory addedReward = addedRewards[i];\\n\\n\\t\\t\\tbytes32 poolID = addedReward.poolID;\\n\\t\\t\\trequire( poolsConfig.isWhitelisted( poolID ), \\\"Invalid pool\\\" );\\n\\n\\t\\t\\tuint256 amountToAdd = addedReward.amountToAdd;\\n\\n\\t\\t\\ttotalRewards[ poolID ] += amountToAdd;\\n\\t\\t\\tsum = sum + amountToAdd;\\n\\n\\t\\t\\temit SaltRewardsAdded(poolID, amountToAdd);\\n\\t\\t\\t}\\n\\n\\t\\t// Transfer in the SALT for all the specified rewards\\n\\t\\tif ( sum > 0 )\\n\\t\\t\\t{\\n\\t\\t\\t// Transfer the SALT rewards from the sender\\n\\t\\t\\tsalt.safeTransferFrom( msg.sender, address(this), sum );\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\n\\t// === VIEWS ===\\n\\n\\t// Returns the total shares for specified pools.\\n\\tfunction totalSharesForPools( bytes32[] calldata poolIDs ) external view returns (uint256[] memory shares)\\n\\t\\t{\\n\\t\\tshares = new uint256[]( poolIDs.length );\\n\\n\\t\\tfor( uint256 i = 0; i < shares.length; i++ )\\n\\t\\t\\tshares[i] = totalShares[ poolIDs[i] ];\\n\\t\\t}\\n\\n\\n\\t// Returns the total rewards for specified pools.\\n\\tfunction totalRewardsForPools( bytes32[] calldata poolIDs ) external view returns (uint256[] memory rewards)\\n\\t\\t{\\n\\t\\trewards = new uint256[]( poolIDs.length );\\n\\n\\t\\tfor( uint256 i = 0; i < rewards.length; i++ )\\n\\t\\t\\trewards[i] = totalRewards[ poolIDs[i] ];\\n\\t\\t}\\n\\n\\n\\t// Returns the user's pending rewards for a specified pool.\\n\\tfunction userRewardForPool( address wallet, bytes32 poolID ) public view returns (uint256)\\n\\t\\t{\\n\\t\\t// If there are no shares for the pool, the user can't have any shares either and there can't be any rewards\\n\\t\\tif ( totalShares[poolID] == 0 )\\n\\t\\t\\treturn 0;\\n\\n\\t\\tUserShareInfo memory user = _userShareInfo[wallet][poolID];\\n\\t\\tif ( user.userShare == 0 )\\n\\t\\t\\treturn 0;\\n\\n\\t\\t// Determine the share of the rewards for the user based on their deposited share\\n\\t\\tuint256 rewardsShare = ( totalRewards[poolID] * user.userShare ) / totalShares[poolID];\\n\\n\\t\\t// Reduce by the virtualRewards - as they were only added to keep the share / rewards ratio the same when the used added their share\\n\\n\\t\\t// In the event that virtualRewards exceeds rewardsShare due to precision loss - just return zero\\n\\t\\tif ( user.virtualRewards > rewardsShare )\\n\\t\\t\\treturn 0;\\n\\n\\t\\treturn rewardsShare - user.virtualRewards;\\n\\t\\t}\\n\\n\\n\\t// Returns the user's pending rewards for specified pools.\\n\\tfunction userRewardsForPools( address wallet, bytes32[] calldata poolIDs ) external view returns (uint256[] memory rewards)\\n\\t\\t{\\n\\t\\trewards = new uint256[]( poolIDs.length );\\n\\n\\t\\tfor( uint256 i = 0; i < rewards.length; i++ )\\n\\t\\t\\trewards[i] = userRewardForPool( wallet, poolIDs[i] );\\n\\t\\t}\\n\\n\\n\\t// Get the user's shares for a specified pool.\\n\\tfunction userShareForPool( address wallet, bytes32 poolID ) public view returns (uint256)\\n\\t\\t{\\n\\t\\treturn _userShareInfo[wallet][poolID].userShare;\\n\\t\\t}\\n\\n\\n\\t// Get the user's shares for specified pools.\\n\\tfunction userShareForPools( address wallet, bytes32[] calldata poolIDs ) external view returns (uint256[] memory shares)\\n\\t\\t{\\n\\t\\tshares = new uint256[]( poolIDs.length );\\n\\n\\t\\tfor( uint256 i = 0; i < shares.length; i++ )\\n\\t\\t\\tshares[i] = _userShareInfo[wallet][ poolIDs[i] ].userShare;\\n\\t\\t}\\n\\n\\n\\t// Get the user's virtual rewards for a specified pool.\\n\\tfunction userVirtualRewardsForPool( address wallet, bytes32 poolID ) public view returns (uint256)\\n\\t\\t{\\n\\t\\treturn _userShareInfo[wallet][poolID].virtualRewards;\\n\\t\\t}\\n\\n\\n\\t// Get the cooldown time remaining for the user for specified pools.\\n\\tfunction userCooldowns( address wallet, bytes32[] calldata poolIDs ) external view returns (uint256[] memory cooldowns)\\n\\t\\t{\\n\\t\\tcooldowns = new uint256[]( poolIDs.length );\\n\\n\\t\\tmapping(bytes32=>UserShareInfo) storage userInfo = _userShareInfo[wallet];\\n\\n\\t\\tfor( uint256 i = 0; i < cooldowns.length; i++ )\\n\\t\\t\\t{\\n\\t\\t\\tuint256 cooldownExpiration = userInfo[ poolIDs[i] ].cooldownExpiration;\\n\\n\\t\\t\\tif ( block.timestamp >= cooldownExpiration )\\n\\t\\t\\t\\tcooldowns[i] = 0;\\n\\t\\t\\telse\\n\\t\\t\\t\\tcooldowns[i] = cooldownExpiration - block.timestamp;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\"\r\n    },\r\n    \"src/pools/PoolUtils.sol\": {\r\n      \"content\": \"pragma solidity =0.8.22;\\n\\nimport \\\"openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\\\";\\n\\n\\nlibrary PoolUtils\\n\\t{\\n\\t// Token reserves less than dust are treated as if they don't exist at all.\\n\\t// With the 18 decimals that are used for most tokens, DUST has a value of 0.0000000000000001\\n\\tuint256 constant public DUST = 100;\\n\\n\\t// A special pool that represents staked SALT that is not associated with any actual liquidity pool.\\n    bytes32 constant public STAKED_SALT = bytes32(0);\\n\\n\\n    // Return the unique poolID for the given two tokens.\\n    // Tokens are sorted before being hashed to make reversed pairs equivalent.\\n    function _poolID( IERC20 tokenA, IERC20 tokenB ) internal pure returns (bytes32 poolID)\\n    \\t{\\n        // See if the token orders are flipped\\n        if ( uint160(address(tokenB)) < uint160(address(tokenA)) )\\n            return keccak256(abi.encodePacked(address(tokenB), address(tokenA)));\\n\\n        return keccak256(abi.encodePacked(address(tokenA), address(tokenB)));\\n    \\t}\\n\\n\\n    // Return the unique poolID and whether or not it is flipped\\n    function _poolIDAndFlipped( IERC20 tokenA, IERC20 tokenB ) internal pure returns (bytes32 poolID, bool flipped)\\n    \\t{\\n        // See if the token orders are flipped\\n        if ( uint160(address(tokenB)) < uint160(address(tokenA)) )\\n            return (keccak256(abi.encodePacked(address(tokenB), address(tokenA))), true);\\n\\n        return (keccak256(abi.encodePacked(address(tokenA), address(tokenB))), false);\\n    \\t}\\n\\t}\\n\"\r\n    },\r\n    \"src/staking/interfaces/IStakingRewards.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL 1.1\\npragma solidity =0.8.22;\\n\\n\\nstruct AddedReward\\n\\t{\\n\\tbytes32 poolID;\\t\\t\\t\\t\\t\\t\\t// The pool to add rewards to\\n\\tuint256 amountToAdd;\\t\\t\\t\\t// The amount of rewards (as SALT) to add\\n\\t}\\n\\nstruct UserShareInfo\\n\\t{\\n\\tuint256 userShare;\\t\\t\\t\\t\\t// A user's share for a given poolID\\n\\tuint256 virtualRewards;\\t\\t\\t\\t// The amount of rewards that were added to maintain proper rewards/share ratio - and will be deducted from a user's pending rewards.\\n\\tuint256 cooldownExpiration;\\t\\t// The timestamp when the user can modify their share\\n\\t}\\n\\n\\ninterface IStakingRewards\\n\\t{\\n\\tfunction claimAllRewards( bytes32[] calldata poolIDs ) external returns (uint256 rewardsAmount);\\n\\tfunction addSALTRewards( AddedReward[] calldata addedRewards ) external;\\n\\n\\t// Views\\n\\tfunction totalShares(bytes32 poolID) external view returns (uint256);\\n\\tfunction totalSharesForPools( bytes32[] calldata poolIDs ) external view returns (uint256[] calldata shares);\\n\\tfunction totalRewardsForPools( bytes32[] calldata poolIDs ) external view returns (uint256[] calldata rewards);\\n\\n\\tfunction userRewardForPool( address wallet, bytes32 poolID ) external view returns (uint256);\\n\\tfunction userShareForPool( address wallet, bytes32 poolID ) external view returns (uint256);\\n\\tfunction userVirtualRewardsForPool( address wallet, bytes32 poolID ) external view returns (uint256);\\n\\n\\tfunction userRewardsForPools( address wallet, bytes32[] calldata poolIDs ) external view returns (uint256[] calldata rewards);\\n\\tfunction userShareForPools( address wallet, bytes32[] calldata poolIDs ) external view returns (uint256[] calldata shares);\\n\\tfunction userCooldowns( address wallet, bytes32[] calldata poolIDs ) external view returns (uint256[] calldata cooldowns);\\n\\t}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/math/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"src/pools/interfaces/IPoolsConfig.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL 1.1\\npragma solidity =0.8.22;\\n\\nimport \\\"openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./IPools.sol\\\";\\n\\n\\ninterface IPoolsConfig\\n\\t{\\n\\tfunction whitelistPool( IERC20 tokenA, IERC20 tokenB ) external; // onlyOwner\\n\\tfunction unwhitelistPool( IERC20 tokenA, IERC20 tokenB ) external; // onlyOwner\\n\\tfunction changeMaximumWhitelistedPools(bool increase) external; // onlyOwner\\n\\n\\t// Views\\n    function maximumWhitelistedPools() external view returns (uint256);\\n\\n\\tfunction numberOfWhitelistedPools() external view returns (uint256);\\n\\tfunction isWhitelisted( bytes32 poolID ) external view returns (bool);\\n\\tfunction whitelistedPools() external view returns (bytes32[] calldata);\\n\\tfunction underlyingTokenPair( bytes32 poolID ) external view returns (IERC20 tokenA, IERC20 tokenB);\\n\\n\\t// Returns true if the token has been whitelisted (meaning it has been pooled with either WETH and USDC)\\n\\tfunction tokenHasBeenWhitelisted( IERC20 token, IERC20 weth, IERC20 usdc ) external view returns (bool);\\n\\t}\"\r\n    },\r\n    \"src/interfaces/IExchangeConfig.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL 1.1\\npragma solidity =0.8.22;\\n\\nimport \\\"openzeppelin-contracts/contracts/finance/VestingWallet.sol\\\";\\nimport \\\"../staking/interfaces/ILiquidity.sol\\\";\\nimport \\\"../launch/interfaces/IInitialDistribution.sol\\\";\\nimport \\\"../rewards/interfaces/IRewardsEmitter.sol\\\";\\nimport \\\"../rewards/interfaces/ISaltRewards.sol\\\";\\nimport \\\"../rewards/interfaces/IEmissions.sol\\\";\\nimport \\\"../interfaces/IAccessManager.sol\\\";\\nimport \\\"../launch/interfaces/IAirdrop.sol\\\";\\nimport \\\"../dao/interfaces/IDAO.sol\\\";\\nimport \\\"../interfaces/ISalt.sol\\\";\\nimport \\\"./IUpkeep.sol\\\";\\n\\n\\ninterface IExchangeConfig\\n\\t{\\n\\tfunction setContracts( IDAO _dao, IUpkeep _upkeep, IInitialDistribution _initialDistribution, VestingWallet _teamVestingWallet, VestingWallet _daoVestingWallet ) external; // onlyOwner\\n\\tfunction setAccessManager( IAccessManager _accessManager ) external; // onlyOwner\\n\\n\\t// Views\\n\\tfunction salt() external view returns (ISalt);\\n\\tfunction wbtc() external view returns (IERC20);\\n\\tfunction weth() external view returns (IERC20);\\n\\tfunction usdc() external view returns (IERC20);\\n\\tfunction usdt() external view returns (IERC20);\\n\\n\\tfunction daoVestingWallet() external view returns (VestingWallet);\\n    function teamVestingWallet() external view returns (VestingWallet);\\n    function initialDistribution() external view returns (IInitialDistribution);\\n\\n\\tfunction accessManager() external view returns (IAccessManager);\\n\\tfunction dao() external view returns (IDAO);\\n\\tfunction upkeep() external view returns (IUpkeep);\\n\\tfunction teamWallet() external view returns (address);\\n\\n\\tfunction walletHasAccess( address wallet ) external view returns (bool);\\n\\t}\\n\"\r\n    },\r\n    \"src/staking/interfaces/IStakingConfig.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL 1.1\\npragma solidity =0.8.22;\\n\\n\\ninterface IStakingConfig\\n\\t{\\n\\tfunction changeMinUnstakeWeeks(bool increase) external; // onlyOwner\\n\\tfunction changeMaxUnstakeWeeks(bool increase) external; // onlyOwner\\n\\tfunction changeMinUnstakePercent(bool increase) external; // onlyOwner\\n\\tfunction changeModificationCooldown(bool increase) external; // onlyOwner\\n\\n\\t// Views\\n    function minUnstakeWeeks() external view returns (uint256);\\n    function maxUnstakeWeeks() external view returns (uint256);\\n    function minUnstakePercent() external view returns (uint256);\\n    function modificationCooldown() external view returns (uint256);\\n\\t}\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"src/pools/interfaces/IPools.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL 1.1\\npragma solidity =0.8.22;\\n\\nimport \\\"../../staking/interfaces/ILiquidity.sol\\\";\\nimport \\\"../../dao/interfaces/IDAO.sol\\\";\\nimport \\\"./IPoolStats.sol\\\";\\n\\n\\ninterface IPools is IPoolStats\\n\\t{\\n\\tfunction startExchangeApproved() external;\\n\\tfunction setContracts( IDAO _dao, ILiquidity _liquidity ) external; // onlyOwner\\n\\n\\tfunction addLiquidity( IERC20 tokenA, IERC20 tokenB, uint256 maxAmountA, uint256 maxAmountB, uint256 minAddedAmountA, uint256 minAddedAmountB, uint256 totalLiquidity ) external returns (uint256 addedAmountA, uint256 addedAmountB, uint256 addedLiquidity);\\n\\tfunction removeLiquidity( IERC20 tokenA, IERC20 tokenB, uint256 liquidityToRemove, uint256 minReclaimedA, uint256 minReclaimedB, uint256 totalLiquidity ) external returns (uint256 reclaimedA, uint256 reclaimedB);\\n\\n\\tfunction deposit( IERC20 token, uint256 amount ) external;\\n\\tfunction withdraw( IERC20 token, uint256 amount ) external;\\n\\tfunction swap( IERC20 swapTokenIn, IERC20 swapTokenOut, uint256 swapAmountIn, uint256 minAmountOut, uint256 deadline ) external returns (uint256 swapAmountOut);\\n\\tfunction depositSwapWithdraw(IERC20 swapTokenIn, IERC20 swapTokenOut, uint256 swapAmountIn, uint256 minAmountOut, uint256 deadline ) external returns (uint256 swapAmountOut);\\n\\tfunction depositDoubleSwapWithdraw( IERC20 swapTokenIn, IERC20 swapTokenMiddle, IERC20 swapTokenOut, uint256 swapAmountIn, uint256 minAmountOut, uint256 deadline ) external returns (uint256 swapAmountOut);\\n\\tfunction depositZapSwapWithdraw(IERC20 swapTokenIn, IERC20 swapTokenOut, uint256 swapAmountIn ) external returns (uint256 swapAmountOut);\\n\\n\\t// Views\\n\\tfunction exchangeIsLive() external view returns (bool);\\n\\tfunction getPoolReserves(IERC20 tokenA, IERC20 tokenB) external view returns (uint256 reserveA, uint256 reserveB);\\n\\tfunction depositedUserBalance(address user, IERC20 token) external view returns (uint256);\\n\\t}\\n\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/finance/VestingWallet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (finance/VestingWallet.sol)\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"../utils/Address.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @title VestingWallet\\n * @dev This contract handles the vesting of Eth and ERC20 tokens for a given beneficiary. Custody of multiple tokens\\n * can be given to this contract, which will release the token to the beneficiary following a given vesting schedule.\\n * The vesting schedule is customizable through the {vestedAmount} function.\\n *\\n * Any token transferred to this contract will follow the vesting schedule as if they were locked from the beginning.\\n * Consequently, if the vesting has already started, any amount of tokens sent to this contract will (at least partly)\\n * be immediately releasable.\\n */\\ncontract VestingWallet is Context {\\n    event EtherReleased(uint256 amount);\\n    event ERC20Released(address indexed token, uint256 amount);\\n\\n    uint256 private _released;\\n    mapping(address => uint256) private _erc20Released;\\n    address private immutable _beneficiary;\\n    uint64 private immutable _start;\\n    uint64 private immutable _duration;\\n\\n    /**\\n     * @dev Set the beneficiary, start timestamp and vesting duration of the vesting wallet.\\n     */\\n    constructor(address beneficiaryAddress, uint64 startTimestamp, uint64 durationSeconds) payable {\\n        require(beneficiaryAddress != address(0), \\\"VestingWallet: beneficiary is zero address\\\");\\n        _beneficiary = beneficiaryAddress;\\n        _start = startTimestamp;\\n        _duration = durationSeconds;\\n    }\\n\\n    /**\\n     * @dev The contract should be able to receive Eth.\\n     */\\n    receive() external payable virtual {}\\n\\n    /**\\n     * @dev Getter for the beneficiary address.\\n     */\\n    function beneficiary() public view virtual returns (address) {\\n        return _beneficiary;\\n    }\\n\\n    /**\\n     * @dev Getter for the start timestamp.\\n     */\\n    function start() public view virtual returns (uint256) {\\n        return _start;\\n    }\\n\\n    /**\\n     * @dev Getter for the vesting duration.\\n     */\\n    function duration() public view virtual returns (uint256) {\\n        return _duration;\\n    }\\n\\n    /**\\n     * @dev Amount of eth already released\\n     */\\n    function released() public view virtual returns (uint256) {\\n        return _released;\\n    }\\n\\n    /**\\n     * @dev Amount of token already released\\n     */\\n    function released(address token) public view virtual returns (uint256) {\\n        return _erc20Released[token];\\n    }\\n\\n    /**\\n     * @dev Getter for the amount of releasable eth.\\n     */\\n    function releasable() public view virtual returns (uint256) {\\n        return vestedAmount(uint64(block.timestamp)) - released();\\n    }\\n\\n    /**\\n     * @dev Getter for the amount of releasable `token` tokens. `token` should be the address of an\\n     * IERC20 contract.\\n     */\\n    function releasable(address token) public view virtual returns (uint256) {\\n        return vestedAmount(token, uint64(block.timestamp)) - released(token);\\n    }\\n\\n    /**\\n     * @dev Release the native token (ether) that have already vested.\\n     *\\n     * Emits a {EtherReleased} event.\\n     */\\n    function release() public virtual {\\n        uint256 amount = releasable();\\n        _released += amount;\\n        emit EtherReleased(amount);\\n        Address.sendValue(payable(beneficiary()), amount);\\n    }\\n\\n    /**\\n     * @dev Release the tokens that have already vested.\\n     *\\n     * Emits a {ERC20Released} event.\\n     */\\n    function release(address token) public virtual {\\n        uint256 amount = releasable(token);\\n        _erc20Released[token] += amount;\\n        emit ERC20Released(token, amount);\\n        SafeERC20.safeTransfer(IERC20(token), beneficiary(), amount);\\n    }\\n\\n    /**\\n     * @dev Calculates the amount of ether that has already vested. Default implementation is a linear vesting curve.\\n     */\\n    function vestedAmount(uint64 timestamp) public view virtual returns (uint256) {\\n        return _vestingSchedule(address(this).balance + released(), timestamp);\\n    }\\n\\n    /**\\n     * @dev Calculates the amount of tokens that has already vested. Default implementation is a linear vesting curve.\\n     */\\n    function vestedAmount(address token, uint64 timestamp) public view virtual returns (uint256) {\\n        return _vestingSchedule(IERC20(token).balanceOf(address(this)) + released(token), timestamp);\\n    }\\n\\n    /**\\n     * @dev Virtual implementation of the vesting formula. This returns the amount vested, as a function of time, for\\n     * an asset given its total historical allocation.\\n     */\\n    function _vestingSchedule(uint256 totalAllocation, uint64 timestamp) internal view virtual returns (uint256) {\\n        if (timestamp < start()) {\\n            return 0;\\n        } else if (timestamp > start() + duration()) {\\n            return totalAllocation;\\n        } else {\\n            return (totalAllocation * (timestamp - start())) / duration();\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"src/staking/interfaces/ILiquidity.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL 1.1\\npragma solidity =0.8.22;\\n\\nimport \\\"openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./IStakingRewards.sol\\\";\\n\\n\\ninterface ILiquidity is IStakingRewards\\n\\t{\\n\\tfunction depositLiquidityAndIncreaseShare( IERC20 tokenA, IERC20 tokenB, uint256 maxAmountA, uint256 maxAmountB, uint256 minAddedAmountA, uint256 minAddedAmountB, uint256 minAddedLiquidity, uint256 deadline, bool useZapping ) external returns (uint256 addedLiquidity);\\n\\tfunction withdrawLiquidityAndClaim( IERC20 tokenA, IERC20 tokenB, uint256 liquidityToWithdraw, uint256 minReclaimedA, uint256 minReclaimedB, uint256 deadline ) external returns (uint256 reclaimedA, uint256 reclaimedB);\\n\\t}\\n\"\r\n    },\r\n    \"src/launch/interfaces/IInitialDistribution.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL 1.1\\npragma solidity =0.8.22;\\n\\nimport \\\"./IBootstrapBallot.sol\\\";\\nimport \\\"./IAirdrop.sol\\\";\\n\\n\\ninterface IInitialDistribution\\n\\t{\\n\\tfunction distributionApproved( IAirdrop airdrop1, IAirdrop airdrop2 ) external;\\n\\n\\t// Views\\n\\tfunction bootstrapBallot() external view returns (IBootstrapBallot);\\n\\t}\\n\"\r\n    },\r\n    \"src/rewards/interfaces/IRewardsEmitter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL 1.1\\npragma solidity =0.8.22;\\n\\nimport \\\"../../staking/interfaces/IStakingRewards.sol\\\";\\n\\n\\ninterface IRewardsEmitter\\n\\t{\\n\\tfunction addSALTRewards( AddedReward[] calldata addedRewards ) external;\\n\\tfunction performUpkeep( uint256 timeSinceLastUpkeep ) external;\\n\\n\\t// Views\\n\\tfunction pendingRewardsForPools( bytes32[] calldata pools ) external view returns (uint256[] calldata);\\n\\t}\\n\"\r\n    },\r\n    \"src/rewards/interfaces/ISaltRewards.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL 1.1\\npragma solidity =0.8.22;\\n\\nimport \\\"./IRewardsEmitter.sol\\\";\\n\\n\\ninterface ISaltRewards\\n\\t{\\n\\tfunction sendInitialSaltRewards( uint256 liquidityBootstrapAmount, bytes32[] calldata poolIDs ) external;\\n    function performUpkeep( bytes32[] calldata poolIDs, uint256[] calldata profitsForPools ) external;\\n\\n    // Views\\n    function stakingRewardsEmitter() external view returns (IRewardsEmitter);\\n    function liquidityRewardsEmitter() external view returns (IRewardsEmitter);\\n    }\"\r\n    },\r\n    \"src/rewards/interfaces/IEmissions.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL 1.1\\npragma solidity =0.8.22;\\n\\n\\ninterface IEmissions\\n\\t{\\n\\tfunction performUpkeep( uint256 timeSinceLastUpkeep ) external;\\n    }\"\r\n    },\r\n    \"src/interfaces/IAccessManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL 1.1\\npragma solidity =0.8.22;\\n\\n\\ninterface IAccessManager\\n\\t{\\n\\tfunction excludedCountriesUpdated() external;\\n\\tfunction grantAccess(bytes calldata signature) external;\\n\\n\\t// Views\\n\\tfunction geoVersion() external view returns (uint256);\\n\\tfunction walletHasAccess(address wallet) external view returns (bool);\\n\\t}\\n\"\r\n    },\r\n    \"src/launch/interfaces/IAirdrop.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL 1.1\\npragma solidity =0.8.22;\\n\\n\\ninterface IAirdrop\\n\\t{\\n\\tfunction authorizeWallet( address wallet, uint256 saltAmount ) external;\\n\\tfunction allowClaiming() external;\\n\\tfunction claim() external;\\n\\n\\t// Views\\n\\tfunction claimedByUser( address wallet) external view returns (uint256);\\n\\tfunction claimingAllowed() external view returns (bool);\\n\\tfunction claimingStartTimestamp() external view returns (uint256);\\n\\tfunction claimableAmount(address wallet) external view returns (uint256);\\n    function airdropForUser( address wallet ) external view returns (uint256);\\n\\t}\\n\"\r\n    },\r\n    \"src/dao/interfaces/IDAO.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL 1.1\\npragma solidity =0.8.22;\\n\\nimport \\\"../../rewards/interfaces/ISaltRewards.sol\\\";\\nimport \\\"../../pools/interfaces/IPools.sol\\\";\\nimport \\\"../../interfaces/ISalt.sol\\\";\\n\\ninterface IDAO\\n\\t{\\n\\tfunction finalizeBallot( uint256 ballotID ) external;\\n\\tfunction manuallyRemoveBallot( uint256 ballotID ) external;\\n\\n\\tfunction withdrawFromDAO( IERC20 token ) external returns (uint256 withdrawnAmount);\\n\\n\\t// Views\\n\\tfunction pools() external view returns (IPools);\\n\\tfunction websiteURL() external view returns (string memory);\\n\\tfunction countryIsExcluded( string calldata country ) external view returns (bool);\\n\\t}\"\r\n    },\r\n    \"src/interfaces/IUpkeep.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL 1.1\\npragma solidity =0.8.22;\\n\\n\\ninterface IUpkeep\\n\\t{\\n\\tfunction performUpkeep() external;\\n\\n\\t// Views\\n\\tfunction currentRewardsForCallingPerformUpkeep() external view returns (uint256);\\n\\tfunction lastUpkeepTimeEmissions() external view returns (uint256);\\n\\tfunction lastUpkeepTimeRewardsEmitters() external view returns (uint256);\\n\\t}\\n\"\r\n    },\r\n    \"src/pools/interfaces/IPoolStats.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL 1.1\\npragma solidity =0.8.22;\\n\\n\\ninterface IPoolStats\\n\\t{\\n\\t// These are the indicies (in terms of a poolIDs location in the current whitelistedPoolIDs array) of pools involved in an arbitrage path\\n\\tstruct ArbitrageIndicies\\n\\t\\t{\\n\\t\\tuint64 index1;\\n\\t\\tuint64 index2;\\n\\t\\tuint64 index3;\\n\\t\\t}\\n\\n\\tfunction clearProfitsForPools() external;\\n\\tfunction updateArbitrageIndicies() external;\\n\\n\\t// Views\\n\\tfunction profitsForWhitelistedPools() external view returns (uint256[] memory _calculatedProfits);\\n\\tfunction arbitrageIndicies(bytes32 poolID) external view returns (ArbitrageIndicies memory);\\n\\t}\\n\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"src/launch/interfaces/IBootstrapBallot.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL 1.1\\npragma solidity =0.8.22;\\n\\n\\ninterface IBootstrapBallot\\n\\t{\\n\\tfunction vote( bool voteStartExchangeYes, uint256 saltAmount, bytes calldata signature ) external;\\n\\tfunction finalizeBallot() external;\\n\\n\\tfunction authorizeAirdrop2( uint256 saltAmount, bytes calldata signature ) external;\\n\\tfunction finalizeAirdrop2() external;\\n\\n\\t// Views\\n\\tfunction claimableTimestamp1() external view returns (uint256);\\n\\tfunction claimableTimestamp2() external view returns (uint256);\\n\\n\\tfunction hasVoted(address user) external view returns (bool);\\n\\tfunction ballotFinalized() external view returns (bool);\\n\\n\\tfunction startExchangeYes() external view returns (uint256);\\n\\tfunction startExchangeNo() external view returns (uint256);\\n\\t}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [\r\n      \"chainlink/=lib/chainlink/\",\r\n      \"ds-test/=lib/openzeppelin-contracts/lib/forge-std/lib/ds-test/src/\",\r\n      \"erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/\",\r\n      \"forge-std/=lib/openzeppelin-contracts/lib/forge-std/src/\",\r\n      \"openzeppelin-contracts/=lib/openzeppelin-contracts/\",\r\n      \"openzeppelin/=lib/openzeppelin-contracts/contracts/\",\r\n      \"v3-core/=lib/v3-core/contracts/\"\r\n    ],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 10000\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": false,\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"appendCBOR\": true\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"paris\",\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract IExchangeConfig\",\"name\":\"_exchangeConfig\",\"type\":\"address\"},{\"internalType\":\"contract IPoolsConfig\",\"name\":\"_poolsConfig\",\"type\":\"address\"},{\"internalType\":\"contract IStakingConfig\",\"name\":\"_stakingConfig\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"claimedRewards\",\"type\":\"uint256\"}],\"name\":\"RewardsClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"unstakeID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"saltRecovered\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"expeditedUnstakeFee\",\"type\":\"uint256\"}],\"name\":\"SALTRecovered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountStaked\",\"type\":\"uint256\"}],\"name\":\"SALTStaked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"poolID\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountAdded\",\"type\":\"uint256\"}],\"name\":\"SaltRewardsAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"unstakeID\",\"type\":\"uint256\"}],\"name\":\"UnstakeCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"unstakeID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountUnstaked\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"claimableSALT\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"numWeeks\",\"type\":\"uint256\"}],\"name\":\"UnstakeInitiated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"poolID\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountDecreased\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"claimedRewards\",\"type\":\"uint256\"}],\"name\":\"UserShareDecreased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"poolID\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountIncreased\",\"type\":\"uint256\"}],\"name\":\"UserShareIncreased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"toUser\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountTransferred\",\"type\":\"uint256\"}],\"name\":\"XSALTTransferredFromAirdrop\",\"type\":\"event\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"poolID\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"amountToAdd\",\"type\":\"uint256\"}],\"internalType\":\"struct AddedReward[]\",\"name\":\"addedRewards\",\"type\":\"tuple[]\"}],\"name\":\"addSALTRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"unstakedXSALT\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numWeeks\",\"type\":\"uint256\"}],\"name\":\"calculateUnstake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"unstakeID\",\"type\":\"uint256\"}],\"name\":\"cancelUnstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"poolIDs\",\"type\":\"bytes32[]\"}],\"name\":\"claimAllRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"claimableRewards\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exchangeConfig\",\"outputs\":[{\"internalType\":\"contract IExchangeConfig\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextUnstakeID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolsConfig\",\"outputs\":[{\"internalType\":\"contract IPoolsConfig\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"unstakeID\",\"type\":\"uint256\"}],\"name\":\"recoverSALT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"salt\",\"outputs\":[{\"internalType\":\"contract ISalt\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountToStake\",\"type\":\"uint256\"}],\"name\":\"stakeSALT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingConfig\",\"outputs\":[{\"internalType\":\"contract IStakingConfig\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"totalRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"poolIDs\",\"type\":\"bytes32[]\"}],\"name\":\"totalRewardsForPools\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"rewards\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"totalShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"poolIDs\",\"type\":\"bytes32[]\"}],\"name\":\"totalSharesForPools\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"shares\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountUnstaked\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numWeeks\",\"type\":\"uint256\"}],\"name\":\"unstake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"unstakeID\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"unstakeByID\",\"outputs\":[{\"components\":[{\"internalType\":\"enum UnstakeState\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"unstakedXSALT\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimableSALT\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"completionTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unstakeID\",\"type\":\"uint256\"}],\"internalType\":\"struct Unstake\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"unstakesForUser\",\"outputs\":[{\"components\":[{\"internalType\":\"enum UnstakeState\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"unstakedXSALT\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimableSALT\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"completionTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unstakeID\",\"type\":\"uint256\"}],\"internalType\":\"struct Unstake[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"}],\"name\":\"unstakesForUser\",\"outputs\":[{\"components\":[{\"internalType\":\"enum UnstakeState\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"unstakedXSALT\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimableSALT\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"completionTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unstakeID\",\"type\":\"uint256\"}],\"internalType\":\"struct Unstake[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"internalType\":\"bytes32[]\",\"name\":\"poolIDs\",\"type\":\"bytes32[]\"}],\"name\":\"userCooldowns\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"cooldowns\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"poolID\",\"type\":\"bytes32\"}],\"name\":\"userRewardForPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"internalType\":\"bytes32[]\",\"name\":\"poolIDs\",\"type\":\"bytes32[]\"}],\"name\":\"userRewardsForPools\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"rewards\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"poolID\",\"type\":\"bytes32\"}],\"name\":\"userShareForPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"internalType\":\"bytes32[]\",\"name\":\"poolIDs\",\"type\":\"bytes32[]\"}],\"name\":\"userShareForPools\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"shares\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"userUnstakeIDs\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"poolID\",\"type\":\"bytes32\"}],\"name\":\"userVirtualRewardsForPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"userXSalt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "Staking", "CompilerVersion": "v0.8.22+commit.4fc1097e", "OptimizationUsed": "1", "Runs": "10000", "ConstructorArguments": "000000000000000000000000c1c4cd45572ebc537120f25be396f2c6d2825e620000000000000000000000001e1abc5affa2fadbdf8c10cfa4c432e6f6b674de0000000000000000000000002a2bc9fdf452f7ba7e33b8d5db3955a6d6cdf335", "EVMVersion": "paris", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}