{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/apestaking/P2PPairStaking.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.0;\\n\\nimport \\\"../dependencies/openzeppelin/upgradeability/Initializable.sol\\\";\\nimport \\\"../dependencies/openzeppelin/upgradeability/OwnableUpgradeable.sol\\\";\\nimport \\\"../dependencies/openzeppelin/upgradeability/ReentrancyGuardUpgradeable.sol\\\";\\nimport \\\"../dependencies/yoga-labs/ApeCoinStaking.sol\\\";\\nimport \\\"../interfaces/IP2PPairStaking.sol\\\";\\nimport \\\"../dependencies/openzeppelin/contracts/SafeCast.sol\\\";\\nimport \\\"../interfaces/IAutoCompoundApe.sol\\\";\\nimport \\\"../interfaces/ICApe.sol\\\";\\nimport {IERC721} from \\\"../dependencies/openzeppelin/contracts/IERC721.sol\\\";\\nimport {IERC20, SafeERC20} from \\\"../dependencies/openzeppelin/contracts/SafeERC20.sol\\\";\\nimport {PercentageMath} from \\\"../protocol/libraries/math/PercentageMath.sol\\\";\\nimport {SignatureChecker} from \\\"../dependencies/looksrare/contracts/libraries/SignatureChecker.sol\\\";\\n\\ncontract P2PPairStaking is\\n    Initializable,\\n    OwnableUpgradeable,\\n    ReentrancyGuardUpgradeable,\\n    IP2PPairStaking\\n{\\n    using SafeERC20 for IERC20;\\n    using PercentageMath for uint256;\\n    using SafeCast for uint256;\\n\\n    //keccak256(\\\"ListingOrder(uint8 stakingType,address offerer,address token,uint256 tokenId,uint256 share,uint256 startTime,uint256 endTime)\\\");\\n    bytes32 internal constant LISTING_ORDER_HASH =\\n        0x227f9dd14259caacdbcf45411b33cf1c018f31bd3da27e613a66edf8ae45814f;\\n\\n    //keccak256(\\\"MatchedOrder(uint8 stakingType,address apeToken,uint32 apeTokenId,uint32 apeShare,uint32 bakcTokenId,uint32 bakcShare,address apeCoinOfferer,uint32 apeCoinShare,uint256 apePrincipleAmount)\\\");\\n    bytes32 internal constant MATCHED_ORDER_HASH =\\n        0x7db3dae7d89c86e6881a66a131841305c008b207e41ff86a804b4bb056652808;\\n\\n    //keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\");\\n    bytes32 internal constant EIP712_DOMAIN =\\n        0x8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f;\\n\\n    uint256 internal constant WAD = 1e18;\\n\\n    address internal immutable bayc;\\n    address internal immutable mayc;\\n    address internal immutable bakc;\\n    address internal immutable nBayc;\\n    address internal immutable nMayc;\\n    address internal immutable nBakc;\\n    address internal immutable apeCoin;\\n    address internal immutable cApe;\\n    ApeCoinStaking internal immutable apeCoinStaking;\\n\\n    bytes32 internal DOMAIN_SEPARATOR;\\n    mapping(bytes32 => ListingOrderStatus) public listingOrderStatus;\\n    mapping(bytes32 => MatchedOrder) public matchedOrders;\\n    mapping(address => mapping(uint32 => uint256)) private apeMatchedCount;\\n    mapping(address => uint256) private cApeShareBalance;\\n    address public matchingOperator;\\n    uint256 public compoundFee;\\n    uint256 private baycMatchedCap;\\n    uint256 private maycMatchedCap;\\n    uint256 private bakcMatchedCap;\\n\\n    constructor(\\n        address _bayc,\\n        address _mayc,\\n        address _bakc,\\n        address _nBayc,\\n        address _nMayc,\\n        address _nBakc,\\n        address _apeCoin,\\n        address _cApe,\\n        address _apeCoinStaking\\n    ) {\\n        bayc = _bayc;\\n        mayc = _mayc;\\n        bakc = _bakc;\\n        nBayc = _nBayc;\\n        nMayc = _nMayc;\\n        nBakc = _nBakc;\\n        apeCoin = _apeCoin;\\n        cApe = _cApe;\\n        apeCoinStaking = ApeCoinStaking(_apeCoinStaking);\\n    }\\n\\n    function initialize() public initializer {\\n        __Ownable_init();\\n        __ReentrancyGuard_init();\\n\\n        DOMAIN_SEPARATOR = keccak256(\\n            abi.encode(\\n                EIP712_DOMAIN,\\n                //keccak256(\\\"ParaSpace\\\"),\\n                0x88d989289235fb06c18e3c2f7ea914f41f773e86fb0073d632539f566f4df353,\\n                //keccak256(bytes(\\\"1\\\")),\\n                0xc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc6,\\n                block.chainid,\\n                address(this)\\n            )\\n        );\\n        updateApeCoinStakingCap();\\n\\n        //approve ApeCoin for apeCoinStaking\\n        uint256 allowance = IERC20(apeCoin).allowance(\\n            address(this),\\n            address(apeCoinStaking)\\n        );\\n        if (allowance == 0) {\\n            IERC20(apeCoin).safeApprove(\\n                address(apeCoinStaking),\\n                type(uint256).max\\n            );\\n        }\\n\\n        //approve ApeCoin for cApe\\n        allowance = IERC20(apeCoin).allowance(address(this), cApe);\\n        if (allowance == 0) {\\n            IERC20(apeCoin).safeApprove(cApe, type(uint256).max);\\n        }\\n    }\\n\\n    function cancelListing(ListingOrder calldata listingOrder)\\n        external\\n        nonReentrant\\n    {\\n        require(msg.sender == listingOrder.offerer, \\\"not order offerer\\\");\\n        bytes32 orderHash = getListingOrderHash(listingOrder);\\n        require(\\n            listingOrderStatus[orderHash] != ListingOrderStatus.Cancelled,\\n            \\\"order already cancelled\\\"\\n        );\\n        listingOrderStatus[orderHash] = ListingOrderStatus.Cancelled;\\n\\n        emit OrderCancelled(orderHash, listingOrder.offerer);\\n    }\\n\\n    function matchPairStakingList(\\n        ListingOrder calldata apeOrder,\\n        ListingOrder calldata apeCoinOrder\\n    ) external nonReentrant returns (bytes32 orderHash) {\\n        //1 validate all order\\n        _validateApeOrder(apeOrder);\\n        bytes32 apeCoinListingOrderHash = _validateApeCoinOrder(apeCoinOrder);\\n\\n        //2 check if orders can match\\n        require(\\n            apeOrder.stakingType <= StakingType.MAYCStaking,\\n            \\\"invalid stake type\\\"\\n        );\\n        require(\\n            apeOrder.stakingType == apeCoinOrder.stakingType,\\n            \\\"orders type match failed\\\"\\n        );\\n        require(\\n            apeOrder.share + apeCoinOrder.share ==\\n                PercentageMath.PERCENTAGE_FACTOR,\\n            \\\"orders share match failed\\\"\\n        );\\n\\n        //3 transfer token\\n        _handleApeTransfer(apeOrder);\\n        uint256 apeAmount = _handleCApeTransferAndConvert(apeCoinOrder);\\n\\n        //4 create match order\\n        MatchedOrder memory matchedOrder = MatchedOrder({\\n            stakingType: apeOrder.stakingType,\\n            apeToken: apeOrder.token,\\n            apeTokenId: apeOrder.tokenId,\\n            apeShare: apeOrder.share,\\n            bakcTokenId: 0,\\n            bakcShare: 0,\\n            apeCoinOfferer: apeCoinOrder.offerer,\\n            apeCoinShare: apeCoinOrder.share,\\n            apePrincipleAmount: apeAmount,\\n            apeCoinListingOrderHash: apeCoinListingOrderHash\\n        });\\n        orderHash = getMatchedOrderHash(matchedOrder);\\n        matchedOrders[orderHash] = matchedOrder;\\n        apeMatchedCount[apeOrder.token][apeOrder.tokenId] += 1;\\n\\n        //5 stake for ApeCoinStaking\\n        ApeCoinStaking.SingleNft[]\\n            memory singleNft = new ApeCoinStaking.SingleNft[](1);\\n        singleNft[0].tokenId = apeOrder.tokenId;\\n        singleNft[0].amount = apeAmount.toUint224();\\n        if (apeOrder.stakingType == StakingType.BAYCStaking) {\\n            apeCoinStaking.depositBAYC(singleNft);\\n        } else {\\n            apeCoinStaking.depositMAYC(singleNft);\\n        }\\n\\n        //6 update ape coin listing order status\\n        listingOrderStatus[apeCoinListingOrderHash] = ListingOrderStatus\\n            .Matched;\\n\\n        //7 emit event\\n        emit PairStakingMatched(orderHash);\\n\\n        return orderHash;\\n    }\\n\\n    function matchBAKCPairStakingList(\\n        ListingOrder calldata apeOrder,\\n        ListingOrder calldata bakcOrder,\\n        ListingOrder calldata apeCoinOrder\\n    ) external nonReentrant returns (bytes32 orderHash) {\\n        //1 validate all order\\n        _validateApeOrder(apeOrder);\\n        _validateBakcOrder(bakcOrder);\\n        bytes32 apeCoinListingOrderHash = _validateApeCoinOrder(apeCoinOrder);\\n\\n        //2 check if orders can match\\n        require(\\n            apeOrder.stakingType == StakingType.BAKCPairStaking,\\n            \\\"invalid stake type\\\"\\n        );\\n        require(\\n            apeOrder.stakingType == bakcOrder.stakingType &&\\n                apeOrder.stakingType == apeCoinOrder.stakingType,\\n            \\\"orders type match failed\\\"\\n        );\\n        require(\\n            apeOrder.share + bakcOrder.share + apeCoinOrder.share ==\\n                PercentageMath.PERCENTAGE_FACTOR,\\n            \\\"share match failed\\\"\\n        );\\n\\n        //3 transfer token\\n        _handleApeTransfer(apeOrder);\\n        IERC721(bakc).safeTransferFrom(nBakc, address(this), bakcOrder.tokenId);\\n        uint256 apeAmount = _handleCApeTransferAndConvert(apeCoinOrder);\\n\\n        //4 create match order\\n        MatchedOrder memory matchedOrder = MatchedOrder({\\n            stakingType: apeOrder.stakingType,\\n            apeToken: apeOrder.token,\\n            apeTokenId: apeOrder.tokenId,\\n            apeShare: apeOrder.share,\\n            bakcTokenId: bakcOrder.tokenId,\\n            bakcShare: bakcOrder.share,\\n            apeCoinOfferer: apeCoinOrder.offerer,\\n            apeCoinShare: apeCoinOrder.share,\\n            apePrincipleAmount: apeAmount,\\n            apeCoinListingOrderHash: apeCoinListingOrderHash\\n        });\\n        orderHash = getMatchedOrderHash(matchedOrder);\\n        matchedOrders[orderHash] = matchedOrder;\\n        apeMatchedCount[apeOrder.token][apeOrder.tokenId] += 1;\\n\\n        //5 stake for ApeCoinStaking\\n        ApeCoinStaking.PairNftDepositWithAmount[]\\n            memory _stakingPairs = new ApeCoinStaking.PairNftDepositWithAmount[](\\n                1\\n            );\\n        _stakingPairs[0].mainTokenId = apeOrder.tokenId;\\n        _stakingPairs[0].bakcTokenId = bakcOrder.tokenId;\\n        _stakingPairs[0].amount = apeAmount.toUint184();\\n        ApeCoinStaking.PairNftDepositWithAmount[]\\n            memory _otherPairs = new ApeCoinStaking.PairNftDepositWithAmount[](\\n                0\\n            );\\n        if (apeOrder.token == bayc) {\\n            apeCoinStaking.depositBAKC(_stakingPairs, _otherPairs);\\n        } else {\\n            apeCoinStaking.depositBAKC(_otherPairs, _stakingPairs);\\n        }\\n\\n        //6 update ape coin listing order status\\n        listingOrderStatus[apeCoinListingOrderHash] = ListingOrderStatus\\n            .Matched;\\n\\n        //7 emit event\\n        emit PairStakingMatched(orderHash);\\n\\n        return orderHash;\\n    }\\n\\n    function breakUpMatchedOrder(bytes32 orderHash) external nonReentrant {\\n        MatchedOrder memory order = matchedOrders[orderHash];\\n\\n        //1 check if have permission to break up\\n        address apeNToken = _getApeNTokenAddress(order.apeToken);\\n        address apeNTokenOwner = IERC721(apeNToken).ownerOf(order.apeTokenId);\\n        address nBakcOwner = IERC721(nBakc).ownerOf(order.bakcTokenId);\\n        require(\\n            msg.sender == matchingOperator ||\\n                msg.sender == apeNTokenOwner ||\\n                msg.sender == order.apeCoinOfferer ||\\n                (msg.sender == nBakcOwner &&\\n                    order.stakingType == StakingType.BAKCPairStaking),\\n            \\\"no permission to break up\\\"\\n        );\\n\\n        //2 claim pending reward and compound\\n        bytes32[] memory orderHashes = new bytes32[](1);\\n        orderHashes[0] = orderHash;\\n        _claimForMatchedOrdersAndCompound(orderHashes);\\n\\n        //3 delete matched order\\n        delete matchedOrders[orderHash];\\n\\n        //4 exit from ApeCoinStaking\\n        if (order.stakingType < StakingType.BAKCPairStaking) {\\n            ApeCoinStaking.SingleNft[]\\n                memory _nfts = new ApeCoinStaking.SingleNft[](1);\\n            _nfts[0].tokenId = order.apeTokenId;\\n            _nfts[0].amount = order.apePrincipleAmount.toUint224();\\n            if (order.stakingType == StakingType.BAYCStaking) {\\n                apeCoinStaking.withdrawSelfBAYC(_nfts);\\n            } else {\\n                apeCoinStaking.withdrawSelfMAYC(_nfts);\\n            }\\n        } else {\\n            ApeCoinStaking.PairNftWithdrawWithAmount[]\\n                memory _nfts = new ApeCoinStaking.PairNftWithdrawWithAmount[](\\n                    1\\n                );\\n            _nfts[0].mainTokenId = order.apeTokenId;\\n            _nfts[0].bakcTokenId = order.bakcTokenId;\\n            _nfts[0].amount = order.apePrincipleAmount.toUint184();\\n            _nfts[0].isUncommit = true;\\n            ApeCoinStaking.PairNftWithdrawWithAmount[]\\n                memory _otherPairs = new ApeCoinStaking.PairNftWithdrawWithAmount[](\\n                    0\\n                );\\n            if (order.apeToken == bayc) {\\n                apeCoinStaking.withdrawBAKC(_nfts, _otherPairs);\\n            } else {\\n                apeCoinStaking.withdrawBAKC(_otherPairs, _nfts);\\n            }\\n        }\\n        //5 transfer token\\n        uint256 matchedCount = apeMatchedCount[order.apeToken][\\n            order.apeTokenId\\n        ];\\n        if (matchedCount == 1) {\\n            IERC721(order.apeToken).safeTransferFrom(\\n                address(this),\\n                apeNToken,\\n                order.apeTokenId\\n            );\\n        }\\n        apeMatchedCount[order.apeToken][order.apeTokenId] = matchedCount - 1;\\n\\n        IAutoCompoundApe(cApe).deposit(\\n            order.apeCoinOfferer,\\n            order.apePrincipleAmount\\n        );\\n        if (order.stakingType == StakingType.BAKCPairStaking) {\\n            IERC721(bakc).safeTransferFrom(\\n                address(this),\\n                nBakc,\\n                order.bakcTokenId\\n            );\\n        }\\n\\n        //6 reset ape coin listing order status\\n        if (\\n            listingOrderStatus[order.apeCoinListingOrderHash] !=\\n            ListingOrderStatus.Cancelled\\n        ) {\\n            listingOrderStatus[\\n                order.apeCoinListingOrderHash\\n            ] = ListingOrderStatus.Pending;\\n        }\\n\\n        //7 emit event\\n        emit PairStakingBreakUp(orderHash);\\n    }\\n\\n    function claimForMatchedOrderAndCompound(bytes32[] calldata orderHashes)\\n        external\\n        nonReentrant\\n    {\\n        _claimForMatchedOrdersAndCompound(orderHashes);\\n    }\\n\\n    function _claimForMatchedOrdersAndCompound(bytes32[] memory orderHashes)\\n        internal\\n    {\\n        //ignore getShareByPooledApe return 0 case.\\n        uint256 cApeExchangeRate = ICApe(cApe).getPooledApeByShares(WAD);\\n        uint256 _compoundFee = compoundFee;\\n        uint256 totalReward;\\n        uint256 totalFeeShare;\\n        uint256 orderCounts = orderHashes.length;\\n        for (uint256 index = 0; index < orderCounts; index++) {\\n            bytes32 orderHash = orderHashes[index];\\n            (\\n                uint256 reward,\\n                uint256 feeShare\\n            ) = _claimForMatchedOrderAndCompound(\\n                    orderHash,\\n                    cApeExchangeRate,\\n                    _compoundFee\\n                );\\n            totalReward += reward;\\n            totalFeeShare += feeShare;\\n        }\\n        if (totalReward > 0) {\\n            IAutoCompoundApe(cApe).deposit(address(this), totalReward);\\n            _depositCApeShareForUser(address(this), totalFeeShare);\\n        }\\n    }\\n\\n    function claimCApeReward(address receiver) external nonReentrant {\\n        uint256 cApeAmount = pendingCApeReward(msg.sender);\\n        if (cApeAmount > 0) {\\n            IERC20(cApe).safeTransfer(receiver, cApeAmount);\\n            delete cApeShareBalance[msg.sender];\\n            emit CApeClaimed(msg.sender, receiver, cApeAmount);\\n        }\\n    }\\n\\n    function updateApeCoinStakingCap() public {\\n        (\\n            ,\\n            ApeCoinStaking.PoolUI memory baycPool,\\n            ApeCoinStaking.PoolUI memory maycPool,\\n            ApeCoinStaking.PoolUI memory bakcPool\\n        ) = apeCoinStaking.getPoolsUI();\\n\\n        baycMatchedCap = baycPool.currentTimeRange.capPerPosition;\\n        maycMatchedCap = maycPool.currentTimeRange.capPerPosition;\\n        bakcMatchedCap = bakcPool.currentTimeRange.capPerPosition;\\n    }\\n\\n    function pendingCApeReward(address user) public view returns (uint256) {\\n        uint256 amount = 0;\\n        uint256 shareBalance = cApeShareBalance[user];\\n        if (shareBalance > 0) {\\n            amount = ICApe(cApe).getPooledApeByShares(shareBalance);\\n        }\\n        return amount;\\n    }\\n\\n    function getApeCoinStakingCap(StakingType stakingType)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        if (stakingType == StakingType.BAYCStaking) {\\n            return baycMatchedCap;\\n        } else if (stakingType == StakingType.MAYCStaking) {\\n            return maycMatchedCap;\\n        } else {\\n            return bakcMatchedCap;\\n        }\\n    }\\n\\n    function getListingOrderHash(ListingOrder calldata order)\\n        public\\n        pure\\n        returns (bytes32)\\n    {\\n        return\\n            keccak256(\\n                abi.encode(\\n                    LISTING_ORDER_HASH,\\n                    order.stakingType,\\n                    order.offerer,\\n                    order.token,\\n                    order.tokenId,\\n                    order.share,\\n                    order.startTime,\\n                    order.endTime\\n                )\\n            );\\n    }\\n\\n    function getMatchedOrderHash(MatchedOrder memory order)\\n        public\\n        pure\\n        returns (bytes32)\\n    {\\n        return\\n            keccak256(\\n                abi.encode(\\n                    MATCHED_ORDER_HASH,\\n                    order.stakingType,\\n                    order.apeToken,\\n                    order.apeTokenId,\\n                    order.apeShare,\\n                    order.bakcTokenId,\\n                    order.bakcShare,\\n                    order.apeCoinOfferer,\\n                    order.apeCoinShare,\\n                    order.apePrincipleAmount\\n                )\\n            );\\n    }\\n\\n    function _getApeNTokenAddress(address apeToken)\\n        internal\\n        view\\n        returns (address)\\n    {\\n        if (apeToken == bayc) {\\n            return nBayc;\\n        } else if (apeToken == mayc) {\\n            return nMayc;\\n        } else {\\n            revert(\\\"unsupported ape token\\\");\\n        }\\n    }\\n\\n    function _claimForMatchedOrderAndCompound(\\n        bytes32 orderHash,\\n        uint256 cApeExchangeRate,\\n        uint256 _compoundFee\\n    ) internal returns (uint256, uint256) {\\n        MatchedOrder memory order = matchedOrders[orderHash];\\n        uint256 balanceBefore = IERC20(apeCoin).balanceOf(address(this));\\n        if (order.stakingType < StakingType.BAKCPairStaking) {\\n            uint256[] memory _nfts = new uint256[](1);\\n            _nfts[0] = order.apeTokenId;\\n            if (order.stakingType == StakingType.BAYCStaking) {\\n                apeCoinStaking.claimSelfBAYC(_nfts);\\n            } else {\\n                apeCoinStaking.claimSelfMAYC(_nfts);\\n            }\\n        } else {\\n            ApeCoinStaking.PairNft[]\\n                memory _nfts = new ApeCoinStaking.PairNft[](1);\\n            _nfts[0].mainTokenId = order.apeTokenId;\\n            _nfts[0].bakcTokenId = order.bakcTokenId;\\n            ApeCoinStaking.PairNft[]\\n                memory _otherPairs = new ApeCoinStaking.PairNft[](0);\\n            if (order.apeToken == bayc) {\\n                apeCoinStaking.claimSelfBAKC(_nfts, _otherPairs);\\n            } else {\\n                apeCoinStaking.claimSelfBAKC(_otherPairs, _nfts);\\n            }\\n        }\\n        uint256 balanceAfter = IERC20(apeCoin).balanceOf(address(this));\\n        uint256 rewardAmount = balanceAfter - balanceBefore;\\n        if (rewardAmount == 0) {\\n            return (0, 0);\\n        }\\n\\n        uint256 rewardShare = (rewardAmount * WAD) / cApeExchangeRate;\\n        //compound fee\\n        uint256 _compoundFeeShare = rewardShare.percentMul(_compoundFee);\\n        rewardShare -= _compoundFeeShare;\\n\\n        _depositCApeShareForUser(\\n            IERC721(_getApeNTokenAddress(order.apeToken)).ownerOf(\\n                order.apeTokenId\\n            ),\\n            rewardShare.percentMul(order.apeShare)\\n        );\\n        _depositCApeShareForUser(\\n            IERC721(nBakc).ownerOf(order.bakcTokenId),\\n            rewardShare.percentMul(order.bakcShare)\\n        );\\n        _depositCApeShareForUser(\\n            order.apeCoinOfferer,\\n            rewardShare.percentMul(order.apeCoinShare)\\n        );\\n\\n        emit OrderClaimedAndCompounded(orderHash, rewardAmount);\\n\\n        return (rewardAmount, _compoundFeeShare);\\n    }\\n\\n    function _depositCApeShareForUser(address user, uint256 amount) internal {\\n        if (amount > 0) {\\n            cApeShareBalance[user] += amount;\\n        }\\n    }\\n\\n    function _handleApeTransfer(ListingOrder calldata order) internal {\\n        address currentOwner = IERC721(order.token).ownerOf(order.tokenId);\\n        if (currentOwner != address(this)) {\\n            address nTokenAddress = _getApeNTokenAddress(order.token);\\n            IERC721(order.token).safeTransferFrom(\\n                nTokenAddress,\\n                address(this),\\n                order.tokenId\\n            );\\n        }\\n    }\\n\\n    function _handleCApeTransferAndConvert(ListingOrder calldata apeCoinOrder)\\n        internal\\n        returns (uint256)\\n    {\\n        uint256 apeAmount = getApeCoinStakingCap(apeCoinOrder.stakingType);\\n        IERC20(cApe).safeTransferFrom(\\n            apeCoinOrder.offerer,\\n            address(this),\\n            apeAmount\\n        );\\n        IAutoCompoundApe(cApe).withdraw(apeAmount);\\n        return apeAmount;\\n    }\\n\\n    function _validateOrderBasicInfo(ListingOrder calldata listingOrder)\\n        internal\\n        view\\n        returns (bytes32 orderHash)\\n    {\\n        require(\\n            listingOrder.startTime <= block.timestamp,\\n            \\\"ape order not start\\\"\\n        );\\n        require(listingOrder.endTime >= block.timestamp, \\\"ape offer expired\\\");\\n\\n        orderHash = getListingOrderHash(listingOrder);\\n        require(\\n            listingOrderStatus[orderHash] != ListingOrderStatus.Cancelled,\\n            \\\"order already cancelled\\\"\\n        );\\n\\n        if (\\n            msg.sender != listingOrder.offerer && msg.sender != matchingOperator\\n        ) {\\n            require(\\n                validateOrderSignature(\\n                    listingOrder.offerer,\\n                    orderHash,\\n                    listingOrder.v,\\n                    listingOrder.r,\\n                    listingOrder.s\\n                ),\\n                \\\"invalid signature\\\"\\n            );\\n        }\\n    }\\n\\n    function _validateApeOrder(ListingOrder calldata apeOrder) internal view {\\n        _validateOrderBasicInfo(apeOrder);\\n\\n        address nToken = _getApeNTokenAddress(apeOrder.token);\\n        require(\\n            IERC721(nToken).ownerOf(apeOrder.tokenId) == apeOrder.offerer,\\n            \\\"ape order invalid NToken owner\\\"\\n        );\\n    }\\n\\n    function _validateBakcOrder(ListingOrder calldata bakcOrder) internal view {\\n        _validateOrderBasicInfo(bakcOrder);\\n\\n        require(bakcOrder.token == bakc, \\\"bakc order invalid token\\\");\\n        require(\\n            IERC721(nBakc).ownerOf(bakcOrder.tokenId) == bakcOrder.offerer,\\n            \\\"bakc order invalid NToken owner\\\"\\n        );\\n    }\\n\\n    function _validateApeCoinOrder(ListingOrder calldata apeCoinOrder)\\n        internal\\n        view\\n        returns (bytes32 orderHash)\\n    {\\n        orderHash = _validateOrderBasicInfo(apeCoinOrder);\\n        require(apeCoinOrder.token == cApe, \\\"ape coin order invalid token\\\");\\n        require(\\n            listingOrderStatus[orderHash] != ListingOrderStatus.Matched,\\n            \\\"ape coin order already matched\\\"\\n        );\\n    }\\n\\n    function validateOrderSignature(\\n        address signer,\\n        bytes32 orderHash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public view returns (bool) {\\n        return\\n            SignatureChecker.verify(\\n                orderHash,\\n                signer,\\n                v,\\n                r,\\n                s,\\n                DOMAIN_SEPARATOR\\n            );\\n    }\\n\\n    function onERC721Received(\\n        address,\\n        address,\\n        uint256,\\n        bytes memory\\n    ) external pure returns (bytes4) {\\n        return this.onERC721Received.selector;\\n    }\\n\\n    function setMatchingOperator(address _matchingOperator) external onlyOwner {\\n        require(_matchingOperator != address(0), \\\"zero address\\\");\\n        address oldOperator = matchingOperator;\\n        if (oldOperator != _matchingOperator) {\\n            matchingOperator = _matchingOperator;\\n            emit MatchingOperatorUpdated(oldOperator, _matchingOperator);\\n        }\\n    }\\n\\n    function setCompoundFee(uint256 _compoundFee) external onlyOwner {\\n        require(\\n            _compoundFee < PercentageMath.HALF_PERCENTAGE_FACTOR,\\n            \\\"Fee Too High\\\"\\n        );\\n        uint256 oldValue = compoundFee;\\n        if (oldValue != _compoundFee) {\\n            compoundFee = _compoundFee;\\n            emit CompoundFeeUpdated(oldValue, _compoundFee);\\n        }\\n    }\\n\\n    function claimCompoundFee(address receiver) external onlyOwner {\\n        this.claimCApeReward(receiver);\\n    }\\n\\n    function rescueERC20(\\n        address token,\\n        address to,\\n        uint256 amount\\n    ) external onlyOwner {\\n        IERC20(token).safeTransfer(to, amount);\\n        emit RescueERC20(token, to, amount);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/dependencies/looksrare/contracts/libraries/SignatureChecker.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {Address} from \\\"../../../openzeppelin/contracts/Address.sol\\\";\\nimport {IERC1271} from \\\"../../../openzeppelin/contracts/IERC1271.sol\\\";\\n\\n/**\\n * @title SignatureChecker\\n * @notice This library allows verification of signatures for both EOAs and contracts.\\n */\\nlibrary SignatureChecker {\\n    /**\\n     * @notice Recovers the signer of a signature (for EOA)\\n     * @param hash the hash containing the signed mesage\\n     * @param v parameter (27 or 28). This prevents maleability since the public key recovery equation has two possible solutions.\\n     * @param r parameter\\n     * @param s parameter\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        // https://ethereum.stackexchange.com/questions/83174/is-it-best-practice-to-check-signature-malleability-in-ecrecover\\n        // https://crypto.iacr.org/2019/affevents/wac/medias/Heninger-BiasedNonceSense.pdf\\n        require(\\n            uint256(s) <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0,\\n            \\\"Signature: Invalid s parameter\\\"\\n        );\\n\\n        require(v == 27 || v == 28, \\\"Signature: Invalid v parameter\\\");\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        require(signer != address(0), \\\"Signature: Invalid signer\\\");\\n\\n        return signer;\\n    }\\n\\n    /**\\n     * @notice Returns whether the signer matches the signed message\\n     * @param hash the hash containing the signed mesage\\n     * @param signer the signer address to confirm message validity\\n     * @param v parameter (27 or 28)\\n     * @param r parameter\\n     * @param s parameter\\n     * @param domainSeparator paramer to prevent signature being executed in other chains and environments\\n     * @return true --> if valid // false --> if invalid\\n     */\\n    function verify(\\n        bytes32 hash,\\n        address signer,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s,\\n        bytes32 domainSeparator\\n    ) internal view returns (bool) {\\n        // \\\\x19\\\\x01 is the standardized encoding prefix\\n        // https://eips.ethereum.org/EIPS/eip-712#specification\\n        bytes32 digest = keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, hash));\\n        if (Address.isContract(signer)) {\\n            // 0x1626ba7e is the interfaceId for signature contracts (see IERC1271)\\n            return IERC1271(signer).isValidSignature(digest, abi.encodePacked(r, s, v)) == 0x1626ba7e;\\n        } else {\\n            return recover(digest, v, r, s) == signer;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/dependencies/openzeppelin/contracts/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/dependencies/openzeppelin/contracts/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return payable(msg.sender);\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/dependencies/openzeppelin/contracts/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (bool)\\n    {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/dependencies/openzeppelin/contracts/ERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./IERC721Metadata.sol\\\";\\nimport \\\"./Address.sol\\\";\\nimport \\\"./Context.sol\\\";\\nimport \\\"./Strings.sol\\\";\\nimport \\\"./ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override(ERC165)\\n        returns (bool)\\n    {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256)\\n    {\\n        require(\\n            owner != address(0),\\n            \\\"ERC721: address zero is not a valid owner\\\"\\n        );\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (address)\\n    {\\n        address owner = _owners[tokenId];\\n        require(\\n            owner != address(0),\\n            \\\"ERC721: owner query for nonexistent token\\\"\\n        );\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (string memory)\\n    {\\n        require(\\n            _exists(tokenId),\\n            \\\"ERC721Metadata: URI query for nonexistent token\\\"\\n        );\\n\\n        string memory baseURI = _baseURI();\\n        return\\n            bytes(baseURI).length > 0\\n                ? string(abi.encodePacked(baseURI, tokenId.toString()))\\n                : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (address)\\n    {\\n        require(\\n            _exists(tokenId),\\n            \\\"ERC721: approved query for nonexistent token\\\"\\n        );\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved)\\n        public\\n        virtual\\n        override\\n    {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (bool)\\n    {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(\\n            _isApprovedOrOwner(_msgSender(), tokenId),\\n            \\\"ERC721: transfer caller is not owner nor approved\\\"\\n        );\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(\\n            _isApprovedOrOwner(_msgSender(), tokenId),\\n            \\\"ERC721: transfer caller is not owner nor approved\\\"\\n        );\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(\\n            _checkOnERC721Received(from, to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId)\\n        internal\\n        view\\n        virtual\\n        returns (bool)\\n    {\\n        require(\\n            _exists(tokenId),\\n            \\\"ERC721: operator query for nonexistent token\\\"\\n        );\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner ||\\n            isApprovedForAll(owner, spender) ||\\n            getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(\\n            ERC721.ownerOf(tokenId) == from,\\n            \\\"ERC721: transfer from incorrect owner\\\"\\n        );\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits a {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try\\n                IERC721Receiver(to).onERC721Received(\\n                    _msgSender(),\\n                    from,\\n                    tokenId,\\n                    _data\\n                )\\n            returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\n                        \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n                    );\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"contracts/dependencies/openzeppelin/contracts/ERC721Enumerable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/ERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ERC721.sol\\\";\\nimport \\\"./IERC721Enumerable.sol\\\";\\n\\n/**\\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\\n * enumerability of all the token ids in the contract as well as all token ids owned by each\\n * account.\\n */\\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\\n    // Mapping from owner to list of owned token IDs\\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\\n\\n    // Mapping from token ID to index of the owner tokens list\\n    mapping(uint256 => uint256) private _ownedTokensIndex;\\n\\n    // Array with all token ids, used for enumeration\\n    uint256[] private _allTokens;\\n\\n    // Mapping from token id to position in the allTokens array\\n    mapping(uint256 => uint256) private _allTokensIndex;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override(ERC721)\\n        returns (bool)\\n    {\\n        return\\n            interfaceId == type(IERC721Enumerable).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256)\\n    {\\n        require(\\n            index < ERC721.balanceOf(owner),\\n            \\\"ERC721Enumerable: owner index out of bounds\\\"\\n        );\\n        return _ownedTokens[owner][index];\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _allTokens.length;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenByIndex}.\\n     */\\n    function tokenByIndex(uint256 index)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256)\\n    {\\n        require(\\n            index < ERC721Enumerable.totalSupply(),\\n            \\\"ERC721Enumerable: global index out of bounds\\\"\\n        );\\n        return _allTokens[index];\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(from, to, tokenId);\\n\\n        if (from == address(0)) {\\n            _addTokenToAllTokensEnumeration(tokenId);\\n        } else if (from != to) {\\n            _removeTokenFromOwnerEnumeration(from, tokenId);\\n        }\\n        if (to == address(0)) {\\n            _removeTokenFromAllTokensEnumeration(tokenId);\\n        } else if (to != from) {\\n            _addTokenToOwnerEnumeration(to, tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\\n     * @param to address representing the new owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\\n     */\\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\\n        uint256 length = ERC721.balanceOf(to);\\n        _ownedTokens[to][length] = tokenId;\\n        _ownedTokensIndex[tokenId] = length;\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's token tracking data structures.\\n     * @param tokenId uint256 ID of the token to be added to the tokens list\\n     */\\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\\n        _allTokensIndex[tokenId] = _allTokens.length;\\n        _allTokens.push(tokenId);\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\\n     * @param from address representing the previous owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\\n     */\\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId)\\n        private\\n    {\\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary\\n        if (tokenIndex != lastTokenIndex) {\\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\\n\\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n        }\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _ownedTokensIndex[tokenId];\\n        delete _ownedTokens[from][lastTokenIndex];\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's token tracking data structures.\\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\\n     */\\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = _allTokens.length - 1;\\n        uint256 tokenIndex = _allTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\\n\\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _allTokensIndex[tokenId];\\n        _allTokens.pop();\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/dependencies/openzeppelin/contracts/IERC1271.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC1271.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC1271 standard signature validation method for\\n * contracts as defined in https://eips.ethereum.org/EIPS/eip-1271[ERC-1271].\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC1271 {\\n    /**\\n     * @dev Should return whether the signature provided is valid for the provided data\\n     * @param hash      Hash of the data to be signed\\n     * @param signature Signature byte array associated with _data\\n     */\\n    function isValidSignature(bytes32 hash, bytes memory signature) external view returns (bytes4 magicValue);\\n}\"\r\n    },\r\n    \"contracts/dependencies/openzeppelin/contracts/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/dependencies/openzeppelin/contracts/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount)\\n        external\\n        returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n}\\n\"\r\n    },\r\n    \"contracts/dependencies/openzeppelin/contracts/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(\\n        address indexed from,\\n        address indexed to,\\n        uint256 indexed tokenId\\n    );\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(\\n        address indexed owner,\\n        address indexed approved,\\n        uint256 indexed tokenId\\n    );\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(\\n        address indexed owner,\\n        address indexed operator,\\n        bool approved\\n    );\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId)\\n        external\\n        view\\n        returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator)\\n        external\\n        view\\n        returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/dependencies/openzeppelin/contracts/IERC721Enumerable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/dependencies/openzeppelin/contracts/IERC721Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"contracts/dependencies/openzeppelin/contracts/IERC721Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"contracts/dependencies/openzeppelin/contracts/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\ncontract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(\\n        address indexed previousOwner,\\n        address indexed newOwner\\n    );\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(\\n            newOwner != address(0),\\n            \\\"Ownable: new owner is the zero address\\\"\\n        );\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/dependencies/openzeppelin/contracts/SafeCast.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeCast.sol)\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        require(\\n            value <= type(uint224).max,\\n            \\\"SafeCast: value doesn't fit in 224 bits\\\"\\n        );\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint184 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint184).\\n     *\\n     * Counterpart to Solidity's `uint184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint184(uint256 value) internal pure returns (uint184) {\\n        require(value <= type(uint184).max, \\\"SafeCast: value doesn't fit in 184 bits\\\");\\n        return uint184(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        require(\\n            value <= type(uint128).max,\\n            \\\"SafeCast: value doesn't fit in 128 bits\\\"\\n        );\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        require(\\n            value <= type(uint96).max,\\n            \\\"SafeCast: value doesn't fit in 96 bits\\\"\\n        );\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(\\n            value <= type(uint64).max,\\n            \\\"SafeCast: value doesn't fit in 64 bits\\\"\\n        );\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint48 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint48).\\n     *\\n     * Counterpart to Solidity's `uint48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint48(uint256 value) internal pure returns (uint48) {\\n        require(value <= type(uint48).max, \\\"SafeCast: value doesn't fit in 48 bits\\\");\\n        return uint48(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        require(\\n            value <= type(uint32).max,\\n            \\\"SafeCast: value doesn't fit in 32 bits\\\"\\n        );\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        require(\\n            value <= type(uint16).max,\\n            \\\"SafeCast: value doesn't fit in 16 bits\\\"\\n        );\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        require(\\n            value <= type(uint8).max,\\n            \\\"SafeCast: value doesn't fit in 8 bits\\\"\\n        );\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt128(int256 value) internal pure returns (int128) {\\n        require(\\n            value >= type(int128).min && value <= type(int128).max,\\n            \\\"SafeCast: value doesn't fit in 128 bits\\\"\\n        );\\n        return int128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt64(int256 value) internal pure returns (int64) {\\n        require(\\n            value >= type(int64).min && value <= type(int64).max,\\n            \\\"SafeCast: value doesn't fit in 64 bits\\\"\\n        );\\n        return int64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt32(int256 value) internal pure returns (int32) {\\n        require(\\n            value >= type(int32).min && value <= type(int32).max,\\n            \\\"SafeCast: value doesn't fit in 32 bits\\\"\\n        );\\n        return int32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt16(int256 value) internal pure returns (int16) {\\n        require(\\n            value >= type(int16).min && value <= type(int16).max,\\n            \\\"SafeCast: value doesn't fit in 16 bits\\\"\\n        );\\n        return int16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt8(int256 value) internal pure returns (int8) {\\n        require(\\n            value >= type(int8).min && value <= type(int8).max,\\n            \\\"SafeCast: value doesn't fit in 8 bits\\\"\\n        );\\n        return int8(value);\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        require(\\n            value <= uint256(type(int256).max),\\n            \\\"SafeCast: value doesn't fit in an int256\\\"\\n        );\\n        return int256(value);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/dependencies/openzeppelin/contracts/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./draft-IERC20Permit.sol\\\";\\nimport \\\"./Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\"\r\n    },\r\n    \"contracts/dependencies/openzeppelin/contracts/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length)\\n        internal\\n        pure\\n        returns (string memory)\\n    {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/dependencies/openzeppelin/contracts/draft-IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\"\r\n    },\r\n    \"contracts/dependencies/openzeppelin/upgradeability/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\"\r\n    },\r\n    \"contracts/dependencies/openzeppelin/upgradeability/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../contracts/Address.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) ||\\n                (!Address.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(\\n            !_initializing && _initialized < version,\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/dependencies/openzeppelin/upgradeability/OwnableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ContextUpgradeable.sol\\\";\\nimport \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\"\r\n    },\r\n    \"contracts/dependencies/openzeppelin/upgradeability/ReentrancyGuardUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\"\r\n    },\r\n    \"contracts/dependencies/yoga-labs/ApeCoinStaking.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../openzeppelin/contracts/IERC20.sol\\\";\\nimport \\\"../openzeppelin/contracts/SafeERC20.sol\\\";\\nimport \\\"../openzeppelin/contracts/SafeCast.sol\\\";\\nimport \\\"../openzeppelin/contracts/Ownable.sol\\\";\\nimport \\\"../openzeppelin/contracts/ERC721Enumerable.sol\\\";\\n\\n/**\\n * @title ApeCoin Staking Contract\\n * @notice Stake ApeCoin across four different pools that release hourly rewards\\n * @author HorizenLabs\\n */\\ncontract ApeCoinStaking is Ownable {\\n    using SafeCast for uint256;\\n    using SafeCast for int256;\\n\\n    /// @notice State for ApeCoin, BAYC, MAYC, and Pair Pools\\n    struct Pool {\\n        uint48 lastRewardedTimestampHour;\\n        uint16 lastRewardsRangeIndex;\\n        uint96 stakedAmount;\\n        uint96 accumulatedRewardsPerShare;\\n        TimeRange[] timeRanges;\\n    }\\n\\n    /// @notice Pool rules valid for a given duration of time.\\n    /// @dev All TimeRange timestamp values must represent whole hours\\n    struct TimeRange {\\n        uint48 startTimestampHour;\\n        uint48 endTimestampHour;\\n        uint96 rewardsPerHour;\\n        uint96 capPerPosition;\\n    }\\n\\n    /// @dev Convenience struct for front-end applications\\n    struct PoolUI {\\n        uint256 poolId;\\n        uint256 stakedAmount;\\n        TimeRange currentTimeRange;\\n    }\\n\\n    /// @dev Per address amount and reward tracking\\n    struct Position {\\n        uint256 stakedAmount;\\n        int256 rewardsDebt;\\n    }\\n    mapping (address => Position) public addressPosition;\\n\\n    /// @dev Struct for depositing and withdrawing from the BAYC and MAYC NFT pools\\n    struct SingleNft {\\n        uint32 tokenId;\\n        uint224 amount;\\n    }\\n    /// @dev Struct for depositing from the BAKC (Pair) pool\\n    struct PairNftDepositWithAmount {\\n        uint32 mainTokenId;\\n        uint32 bakcTokenId;\\n        uint184 amount;\\n    }\\n    /// @dev Struct for withdrawing from the BAKC (Pair) pool\\n    struct PairNftWithdrawWithAmount {\\n        uint32 mainTokenId;\\n        uint32 bakcTokenId;\\n        uint184 amount;\\n        bool isUncommit;\\n    }\\n    /// @dev Struct for claiming from an NFT pool\\n    struct PairNft {\\n        uint128 mainTokenId;\\n        uint128 bakcTokenId;\\n    }\\n    /// @dev NFT paired status.  Can be used bi-directionally (BAYC/MAYC -> BAKC) or (BAKC -> BAYC/MAYC)\\n    struct PairingStatus {\\n        uint248 tokenId;\\n        bool isPaired;\\n    }\\n\\n    // @dev UI focused payload\\n    struct DashboardStake {\\n        uint256 poolId;\\n        uint256 tokenId;\\n        uint256 deposited;\\n        uint256 unclaimed;\\n        uint256 rewards24hr;\\n        DashboardPair pair;\\n    }\\n    /// @dev Sub struct for DashboardStake\\n    struct DashboardPair {\\n        uint256 mainTokenId;\\n        uint256 mainTypePoolId;\\n    }\\n    /// @dev Placeholder for pair status, used by ApeCoin Pool\\n    DashboardPair private NULL_PAIR = DashboardPair(0, 0);\\n\\n    /// @notice Internal ApeCoin amount for distributing staking reward claims\\n    IERC20 public immutable apeCoin;\\n    uint256 private constant APE_COIN_PRECISION = 1e18;\\n    uint256 private constant MIN_DEPOSIT = 1 * APE_COIN_PRECISION;\\n    uint256 private constant SECONDS_PER_HOUR = 3600;\\n    uint256 private constant SECONDS_PER_MINUTE = 60;\\n\\n    uint256 constant APECOIN_POOL_ID = 0;\\n    uint256 constant BAYC_POOL_ID = 1;\\n    uint256 constant MAYC_POOL_ID = 2;\\n    uint256 constant BAKC_POOL_ID = 3;\\n    Pool[4] public pools;\\n\\n    /// @dev NFT contract mapping per pool\\n    mapping(uint256 => ERC721Enumerable) public nftContracts;\\n    /// @dev poolId => tokenId => nft position\\n    mapping(uint256 => mapping(uint256 => Position)) public nftPosition;\\n    /// @dev main type pool ID: 1: BAYC 2: MAYC => main token ID => bakc token ID\\n    mapping(uint256 => mapping(uint256 => PairingStatus)) public mainToBakc;\\n    /// @dev bakc Token ID => main type pool ID: 1: BAYC 2: MAYC => main token ID\\n    mapping(uint256 => mapping(uint256 => PairingStatus)) public bakcToMain;\\n\\n    /** Custom Events */\\n    event UpdatePool(\\n        uint256 indexed poolId,\\n        uint256 lastRewardedBlock,\\n        uint256 stakedAmount,\\n        uint256 accumulatedRewardsPerShare\\n    );\\n    event Deposit(\\n        address indexed user,\\n        uint256 amount,\\n        address recipient\\n    );\\n    event DepositNft(\\n        address indexed user,\\n        uint256 indexed poolId,\\n        uint256 amount,\\n        uint256 tokenId\\n    );\\n    event DepositPairNft(\\n        address indexed user,\\n        uint256 amount,\\n        uint256 mainTypePoolId,\\n        uint256 mainTokenId,\\n        uint256 bakcTokenId\\n    );\\n    event Withdraw(\\n        address indexed user,\\n        uint256 amount,\\n        address recipient\\n    );\\n    event WithdrawNft(\\n        address indexed user,\\n        uint256 indexed poolId,\\n        uint256 amount,\\n        address recipient,\\n        uint256 tokenId\\n    );\\n    event WithdrawPairNft(\\n        address indexed user,\\n        uint256 amount,\\n        uint256 mainTypePoolId,\\n        uint256 mainTokenId,\\n        uint256 bakcTokenId\\n    );\\n    event ClaimRewards(\\n        address indexed user,\\n        uint256 amount,\\n        address recipient\\n    );\\n    event ClaimRewardsNft(\\n        address indexed user,\\n        uint256 indexed poolId,\\n        uint256 amount,\\n        uint256 tokenId\\n    );\\n    event ClaimRewardsPairNft(\\n        address indexed user,\\n        uint256 amount,\\n        uint256 mainTypePoolId,\\n        uint256 mainTokenId,\\n        uint256 bakcTokenId\\n    );\\n\\n    error DepositMoreThanOneAPE();\\n    error InvalidPoolId();\\n    error StartMustBeGreaterThanEnd();\\n    error StartNotWholeHour();\\n    error EndNotWholeHour();\\n    error StartMustEqualLastEnd();\\n    error CallerNotOwner();\\n    error MainTokenNotOwnedOrPaired();\\n    error BAKCNotOwnedOrPaired();\\n    error BAKCAlreadyPaired();\\n    error ExceededCapAmount();\\n    error NotOwnerOfMain();\\n    error NotOwnerOfBAKC();\\n    error ProvidedTokensNotPaired();\\n    error ExceededStakedAmount();\\n    error NeitherTokenInPairOwnedByCaller();\\n    error SplitPairCantPartiallyWithdraw();\\n    error UncommitWrongParameters();\\n\\n    /**\\n     * @notice Construct a new ApeCoinStaking instance\\n     * @param _apeCoinContractAddress The ApeCoin ERC20 contract address\\n     * @param _baycContractAddress The BAYC NFT contract address\\n     * @param _maycContractAddress The MAYC NFT contract address\\n     * @param _bakcContractAddress The BAKC NFT contract address\\n     */\\n    constructor(\\n        address _apeCoinContractAddress,\\n        address _baycContractAddress,\\n        address _maycContractAddress,\\n        address _bakcContractAddress\\n    ) {\\n        apeCoin = IERC20(_apeCoinContractAddress);\\n        nftContracts[BAYC_POOL_ID] = ERC721Enumerable(_baycContractAddress);\\n        nftContracts[MAYC_POOL_ID] = ERC721Enumerable(_maycContractAddress);\\n        nftContracts[BAKC_POOL_ID] = ERC721Enumerable(_bakcContractAddress);\\n    }\\n\\n    // Deposit/Commit Methods\\n\\n    /**\\n     * @notice Deposit ApeCoin to the ApeCoin Pool\\n     * @param _amount Amount in ApeCoin\\n     * @param _recipient Address the deposit it stored to\\n     * @dev ApeCoin deposit must be >= 1 ApeCoin\\n     */\\n    function depositApeCoin(uint256 _amount, address _recipient) public {\\n        if (_amount < MIN_DEPOSIT) revert DepositMoreThanOneAPE();\\n        updatePool(APECOIN_POOL_ID);\\n\\n        Position storage position = addressPosition[_recipient];\\n        _deposit(APECOIN_POOL_ID, position, _amount);\\n\\n        apeCoin.transferFrom(msg.sender, address(this), _amount);\\n\\n        emit Deposit(msg.sender, _amount, _recipient);\\n    }\\n\\n    /**\\n     * @notice Deposit ApeCoin to the ApeCoin Pool\\n     * @param _amount Amount in ApeCoin\\n     * @dev Deposit on behalf of msg.sender. ApeCoin deposit must be >= 1 ApeCoin\\n     */\\n    function depositSelfApeCoin(uint256 _amount) external {\\n        depositApeCoin(_amount, msg.sender);\\n    }\\n\\n    /**\\n     * @notice Deposit ApeCoin to the BAYC Pool\\n     * @param _nfts Array of SingleNft structs\\n     * @dev Commits 1 or more BAYC NFTs, each with an ApeCoin amount to the BAYC pool.\\\\\\n     * Each BAYC committed must attach an ApeCoin amount >= 1 ApeCoin and <= the BAYC pool cap amount.\\n     */\\n    function depositBAYC(SingleNft[] calldata _nfts) external {\\n        _depositNft(BAYC_POOL_ID, _nfts);\\n    }\\n\\n    /**\\n     * @notice Deposit ApeCoin to the MAYC Pool\\n     * @param _nfts Array of SingleNft structs\\n     * @dev Commits 1 or more MAYC NFTs, each with an ApeCoin amount to the MAYC pool.\\\\\\n     * Each MAYC committed must attach an ApeCoin amount >= 1 ApeCoin and <= the MAYC pool cap amount.\\n     */\\n    function depositMAYC(SingleNft[] calldata _nfts) external {\\n        _depositNft(MAYC_POOL_ID, _nfts);\\n    }\\n\\n    /**\\n     * @notice Deposit ApeCoin to the Pair Pool, where Pair = (BAYC + BAKC) or (MAYC + BAKC)\\n     * @param _baycPairs Array of PairNftDepositWithAmount structs\\n     * @param _maycPairs Array of PairNftDepositWithAmount structs\\n     * @dev Commits 1 or more Pairs, each with an ApeCoin amount to the Pair pool.\\\\\\n     * Each BAKC committed must attach an ApeCoin amount >= 1 ApeCoin and <= the Pair pool cap amount.\\\\\\n     * Example 1: BAYC + BAKC + 1 ApeCoin:  [[0, 0, \\\"1000000000000000000\\\"],[]]\\\\\\n     * Example 2: MAYC + BAKC + 1 ApeCoin:  [[], [0, 0, \\\"1000000000000000000\\\"]]\\\\\\n     * Example 3: (BAYC + BAKC + 1 ApeCoin) and (MAYC + BAKC + 1 ApeCoin): [[0, 0, \\\"1000000000000000000\\\"], [0, 1, \\\"1000000000000000000\\\"]]\\n     */\\n    function depositBAKC(PairNftDepositWithAmount[] calldata _baycPairs, PairNftDepositWithAmount[] calldata _maycPairs) external {\\n        updatePool(BAKC_POOL_ID);\\n        _depositPairNft(BAYC_POOL_ID, _baycPairs);\\n        _depositPairNft(MAYC_POOL_ID, _maycPairs);\\n    }\\n\\n    // Claim Rewards Methods\\n\\n    /**\\n     * @notice Claim rewards for msg.sender and send to recipient\\n     * @param _recipient Address to send claim reward to\\n     */\\n    function claimApeCoin(address _recipient) public {\\n        updatePool(APECOIN_POOL_ID);\\n\\n        Position storage position = addressPosition[msg.sender];\\n        uint256 rewardsToBeClaimed = _claim(APECOIN_POOL_ID, position, _recipient);\\n\\n        emit ClaimRewards(msg.sender, rewardsToBeClaimed, _recipient);\\n    }\\n\\n    /// @notice Claim and send rewards\\n    function claimSelfApeCoin() external {\\n        claimApeCoin(msg.sender);\\n    }\\n\\n    /**\\n     * @notice Claim rewards for array of BAYC NFTs and send to recipient\\n     * @param _nfts Array of NFTs owned and committed by the msg.sender\\n     * @param _recipient Address to send claim reward to\\n     */\\n    function claimBAYC(uint256[] calldata _nfts, address _recipient) external {\\n        _claimNft(BAYC_POOL_ID, _nfts, _recipient);\\n    }\\n\\n    /**\\n     * @notice Claim rewards for array of BAYC NFTs\\n     * @param _nfts Array of NFTs owned and committed by the msg.sender\\n     */\\n    function claimSelfBAYC(uint256[] calldata _nfts) external {\\n        _claimNft(BAYC_POOL_ID, _nfts, msg.sender);\\n    }\\n\\n    /**\\n     * @notice Claim rewards for array of MAYC NFTs and send to recipient\\n     * @param _nfts Array of NFTs owned and committed by the msg.sender\\n     * @param _recipient Address to send claim reward to\\n     */\\n    function claimMAYC(uint256[] calldata _nfts, address _recipient) external {\\n        _claimNft(MAYC_POOL_ID, _nfts, _recipient);\\n    }\\n\\n    /**\\n     * @notice Claim rewards for array of MAYC NFTs\\n     * @param _nfts Array of NFTs owned and committed by the msg.sender\\n     */\\n    function claimSelfMAYC(uint256[] calldata _nfts) external {\\n        _claimNft(MAYC_POOL_ID, _nfts, msg.sender);\\n    }\\n\\n    /**\\n     * @notice Claim rewards for array of Paired NFTs and send to recipient\\n     * @param _baycPairs Array of Paired BAYC NFTs owned and committed by the msg.sender\\n     * @param _maycPairs Array of Paired MAYC NFTs owned and committed by the msg.sender\\n     * @param _recipient Address to send claim reward to\\n     */\\n    function claimBAKC(PairNft[] calldata _baycPairs, PairNft[] calldata _maycPairs, address _recipient) public {\\n        updatePool(BAKC_POOL_ID);\\n        _claimPairNft(BAYC_POOL_ID, _baycPairs, _recipient);\\n        _claimPairNft(MAYC_POOL_ID, _maycPairs, _recipient);\\n    }\\n\\n    /**\\n     * @notice Claim rewards for array of Paired NFTs\\n     * @param _baycPairs Array of Paired BAYC NFTs owned and committed by the msg.sender\\n     * @param _maycPairs Array of Paired MAYC NFTs owned and committed by the msg.sender\\n     */\\n    function claimSelfBAKC(PairNft[] calldata _baycPairs, PairNft[] calldata _maycPairs) external {\\n        claimBAKC(_baycPairs, _maycPairs, msg.sender);\\n    }\\n\\n    // Uncommit/Withdraw Methods\\n\\n    /**\\n     * @notice Withdraw staked ApeCoin from the ApeCoin pool.  Performs an automatic claim as part of the withdraw process.\\n     * @param _amount Amount of ApeCoin\\n     * @param _recipient Address to send withdraw amount and claim to\\n     */\\n    function withdrawApeCoin(uint256 _amount, address _recipient) public {\\n        updatePool(APECOIN_POOL_ID);\\n\\n        Position storage position = addressPosition[msg.sender];\\n        if (_amount == position.stakedAmount) {\\n            uint256 rewardsToBeClaimed = _claim(APECOIN_POOL_ID, position, _recipient);\\n            emit ClaimRewards(msg.sender, rewardsToBeClaimed, _recipient);\\n        }\\n        _withdraw(APECOIN_POOL_ID, position, _amount);\\n\\n        apeCoin.transfer(_recipient, _amount);\\n\\n        emit Withdraw(msg.sender, _amount, _recipient);\\n    }\\n\\n    /**\\n     * @notice Withdraw staked ApeCoin from the ApeCoin pool.  If withdraw is total staked amount, performs an automatic claim.\\n     * @param _amount Amount of ApeCoin\\n     */\\n    function withdrawSelfApeCoin(uint256 _amount) external {\\n        withdrawApeCoin(_amount, msg.sender);\\n    }\\n\\n    /**\\n     * @notice Withdraw staked ApeCoin from the BAYC pool.  If withdraw is total staked amount, performs an automatic claim.\\n     * @param _nfts Array of BAYC NFT's with staked amounts\\n     * @param _recipient Address to send withdraw amount and claim to\\n     */\\n    function withdrawBAYC(SingleNft[] calldata _nfts, address _recipient) external {\\n        _withdrawNft(BAYC_POOL_ID, _nfts, _recipient);\\n    }\\n\\n    /**\\n     * @notice Withdraw staked ApeCoin from the BAYC pool.  If withdraw is total staked amount, performs an automatic claim.\\n     * @param _nfts Array of BAYC NFT's with staked amounts\\n     */\\n    function withdrawSelfBAYC(SingleNft[] calldata _nfts) external {\\n        _withdrawNft(BAYC_POOL_ID, _nfts, msg.sender);\\n    }\\n\\n    /**\\n     * @notice Withdraw staked ApeCoin from the MAYC pool.  If withdraw is total staked amount, performs an automatic claim.\\n     * @param _nfts Array of MAYC NFT's with staked amounts\\n     * @param _recipient Address to send withdraw amount and claim to\\n     */\\n    function withdrawMAYC(SingleNft[] calldata _nfts, address _recipient) external {\\n        _withdrawNft(MAYC_POOL_ID, _nfts, _recipient);\\n    }\\n\\n    /**\\n     * @notice Withdraw staked ApeCoin from the MAYC pool.  If withdraw is total staked amount, performs an automatic claim.\\n     * @param _nfts Array of MAYC NFT's with staked amounts\\n     */\\n    function withdrawSelfMAYC(SingleNft[] calldata _nfts) external {\\n        _withdrawNft(MAYC_POOL_ID, _nfts, msg.sender);\\n    }\\n\\n    /**\\n     * @notice Withdraw staked ApeCoin from the Pair pool.  If withdraw is total staked amount, performs an automatic claim.\\n     * @param _baycPairs Array of Paired BAYC NFT's with staked amounts and isUncommit boolean\\n     * @param _maycPairs Array of Paired MAYC NFT's with staked amounts and isUncommit boolean\\n     * @dev if pairs have split ownership and BAKC is attempting a withdraw, the withdraw must be for the total staked amount\\n     */\\n    function withdrawBAKC(PairNftWithdrawWithAmount[] calldata _baycPairs, PairNftWithdrawWithAmount[] calldata _maycPairs) external {\\n        updatePool(BAKC_POOL_ID);\\n        _withdrawPairNft(BAYC_POOL_ID, _baycPairs);\\n        _withdrawPairNft(MAYC_POOL_ID, _maycPairs);\\n    }\\n\\n    // Time Range Methods\\n\\n    /**\\n     * @notice Add single time range with a given rewards per hour for a given pool\\n     * @dev In practice one Time Range will represent one quarter (defined by `_startTimestamp`and `_endTimeStamp` as whole hours)\\n     * where the rewards per hour is constant for a given pool.\\n     * @param _poolId Available pool values 0-3\\n     * @param _amount Total amount of ApeCoin to be distributed over the range\\n     * @param _startTimestamp Whole hour timestamp representation\\n     * @param _endTimeStamp Whole hour timestamp representation\\n     * @param _capPerPosition Per position cap amount determined by poolId\\n     */\\n    function addTimeRange(\\n        uint256 _poolId,\\n        uint256 _amount,\\n        uint256 _startTimestamp,\\n        uint256 _endTimeStamp,\\n        uint256 _capPerPosition) external onlyOwner\\n    {\\n        if (_poolId > BAKC_POOL_ID) revert InvalidPoolId();\\n        if (_startTimestamp >= _endTimeStamp) revert StartMustBeGreaterThanEnd();\\n        if (getMinute(_startTimestamp) > 0 || getSecond(_startTimestamp) > 0) revert StartNotWholeHour();\\n        if (getMinute(_endTimeStamp) > 0 || getSecond(_endTimeStamp) > 0) revert EndNotWholeHour();\\n\\n        Pool storage pool = pools[_poolId];\\n        uint256 length = pool.timeRanges.length;\\n        if (length > 0) {\\n            if (_startTimestamp != pool.timeRanges[length - 1].endTimestampHour) revert StartMustEqualLastEnd();\\n        }\\n\\n        uint256 hoursInSeconds = _endTimeStamp - _startTimestamp;\\n        uint256 rewardsPerHour = _amount * SECONDS_PER_HOUR / hoursInSeconds;\\n\\n        TimeRange memory next = TimeRange(_startTimestamp.toUint48(), _endTimeStamp.toUint48(),\\n            rewardsPerHour.toUint96(), _capPerPosition.toUint96());\\n        pool.timeRanges.push(next);\\n    }\\n\\n    /**\\n     * @notice Removes the last Time Range for a given pool.\\n     * @param _poolId Available pool values 0-3\\n     */\\n    function removeLastTimeRange(uint256 _poolId) external onlyOwner {\\n        pools[_poolId].timeRanges.pop();\\n    }\\n\\n    /**\\n     * @notice Lookup method for a TimeRange struct\\n     * @return TimeRange A Pool's timeRanges struct by index.\\n     * @param _poolId Available pool values 0-3\\n     * @param _index Target index in a Pool's timeRanges array\\n     */\\n    function getTimeRangeBy(uint256 _poolId, uint256 _index) public view returns (TimeRange memory) {\\n        return pools[_poolId].timeRanges[_index];\\n    }\\n\\n    // Pool Methods\\n\\n    /**\\n     * @notice Lookup available rewards for a pool over a given time range\\n     * @return uint256 The amount of ApeCoin rewards to be distributed by pool for a given time range\\n     * @return uint256 The amount of time ranges\\n     * @param _poolId Available pool values 0-3\\n     * @param _from Whole hour timestamp representation\\n     * @param _to Whole hour timestamp representation\\n     */\\n    function rewardsBy(uint256 _poolId, uint256 _from, uint256 _to) public view returns (uint256, uint256) {\\n        Pool memory pool = pools[_poolId];\\n\\n        uint256 currentIndex = pool.lastRewardsRangeIndex;\\n        if(_to < pool.timeRanges[0].startTimestampHour) return (0, currentIndex);\\n\\n        while(_from > pool.timeRanges[currentIndex].endTimestampHour && _to > pool.timeRanges[currentIndex].endTimestampHour) {\\n        unchecked {\\n            ++currentIndex;\\n        }\\n        }\\n\\n        uint256 rewards;\\n        TimeRange memory current;\\n        uint256 startTimestampHour;\\n        uint256 endTimestampHour;\\n        uint256 length = pool.timeRanges.length;\\n        for(uint256 i = currentIndex; i < length;) {\\n            current = pool.timeRanges[i];\\n            startTimestampHour = _from <= current.startTimestampHour ? current.startTimestampHour : _from;\\n            endTimestampHour = _to <= current.endTimestampHour ? _to : current.endTimestampHour;\\n\\n            rewards = rewards + (endTimestampHour - startTimestampHour) * current.rewardsPerHour / SECONDS_PER_HOUR;\\n\\n            if(_to <= endTimestampHour) {\\n                return (rewards, i);\\n            }\\n        unchecked {\\n            ++i;\\n        }\\n        }\\n\\n        return (rewards, length - 1);\\n    }\\n\\n    /**\\n     * @notice Updates reward variables `lastRewardedTimestampHour`, `accumulatedRewardsPerShare` and `lastRewardsRangeIndex`\\n     * for a given pool.\\n     * @param _poolId Available pool values 0-3\\n     */\\n    function updatePool(uint256 _poolId) public {\\n        Pool storage pool = pools[_poolId];\\n\\n        if (block.timestamp < pool.timeRanges[0].startTimestampHour) return;\\n        if (block.timestamp <= pool.lastRewardedTimestampHour + SECONDS_PER_HOUR) return;\\n\\n        uint48 lastTimestampHour = pool.timeRanges[pool.timeRanges.length-1].endTimestampHour;\\n        uint48 previousTimestampHour = getPreviousTimestampHour().toUint48();\\n\\n        if (pool.stakedAmount == 0) {\\n            pool.lastRewardedTimestampHour = previousTimestampHour > lastTimestampHour ? lastTimestampHour : previousTimestampHour;\\n            return;\\n        }\\n\\n        (uint256 rewards, uint256 index) = rewardsBy(_poolId, pool.lastRewardedTimestampHour, previousTimestampHour);\\n        if (pool.lastRewardsRangeIndex != index) {\\n            pool.lastRewardsRangeIndex = index.toUint16();\\n        }\\n        pool.accumulatedRewardsPerShare = (pool.accumulatedRewardsPerShare + (rewards * APE_COIN_PRECISION) / pool.stakedAmount).toUint96();\\n        pool.lastRewardedTimestampHour = previousTimestampHour > lastTimestampHour ? lastTimestampHour : previousTimestampHour;\\n\\n        emit UpdatePool(_poolId, pool.lastRewardedTimestampHour, pool.stakedAmount, pool.accumulatedRewardsPerShare);\\n    }\\n\\n    // Read Methods\\n\\n    function getCurrentTimeRangeIndex(Pool memory pool) private view returns (uint256) {\\n        uint256 current = pool.lastRewardsRangeIndex;\\n\\n        if (block.timestamp < pool.timeRanges[current].startTimestampHour) return current;\\n        for(current = pool.lastRewardsRangeIndex; current < pool.timeRanges.length; ++current) {\\n            TimeRange memory currentTimeRange = pool.timeRanges[current];\\n            if (currentTimeRange.startTimestampHour <= block.timestamp && block.timestamp <= currentTimeRange.endTimestampHour) return current;\\n        }\\n        revert(\\\"distribution ended\\\");\\n    }\\n\\n    /**\\n     * @notice Fetches a PoolUI struct (poolId, stakedAmount, currentTimeRange) for each reward pool\\n     * @return PoolUI for ApeCoin.\\n     * @return PoolUI for BAYC.\\n     * @return PoolUI for MAYC.\\n     * @return PoolUI for BAKC.\\n     */\\n    function getPoolsUI() public view returns (PoolUI memory, PoolUI memory, PoolUI memory, PoolUI memory) {\\n        Pool memory apeCoinPool = pools[0];\\n        Pool memory baycPool = pools[1];\\n        Pool memory maycPool = pools[2];\\n        Pool memory bakcPool = pools[3];\\n        uint256 current = getCurrentTimeRangeIndex(apeCoinPool);\\n        return (PoolUI(0,apeCoinPool.stakedAmount, apeCoinPool.timeRanges[current]),\\n        PoolUI(1,baycPool.stakedAmount, baycPool.timeRanges[current]),\\n        PoolUI(2,maycPool.stakedAmount, maycPool.timeRanges[current]),\\n        PoolUI(3,bakcPool.stakedAmount, bakcPool.timeRanges[current]));\\n    }\\n\\n    /**\\n     * @notice Fetches an address total staked amount, used by voting contract\\n     * @return amount uint256 staked amount for all pools.\\n     * @param _address An Ethereum address\\n     */\\n    function stakedTotal(address _address) external view returns (uint256) {\\n        uint256 total = addressPosition[_address].stakedAmount;\\n\\n        total += _stakedTotal(BAYC_POOL_ID, _address);\\n        total += _stakedTotal(MAYC_POOL_ID, _address);\\n        total += _stakedTotalPair(_address);\\n\\n        return total;\\n    }\\n\\n    function _stakedTotal(uint256 _poolId, address _addr) private view returns (uint256) {\\n        uint256 total = 0;\\n        uint256 nftCount = nftContracts[_poolId].balanceOf(_addr);\\n        for(uint256 i = 0; i < nftCount; ++i) {\\n            uint256 tokenId = nftContracts[_poolId].tokenOfOwnerByIndex(_addr, i);\\n            total += nftPosition[_poolId][tokenId].stakedAmount;\\n        }\\n\\n        return total;\\n    }\\n\\n    function _stakedTotalPair(address _addr) private view returns (uint256) {\\n        uint256 total = 0;\\n\\n        uint256 nftCount = nftContracts[BAYC_POOL_ID].balanceOf(_addr);\\n        for(uint256 i = 0; i < nftCount; ++i) {\\n            uint256 baycTokenId = nftContracts[BAYC_POOL_ID].tokenOfOwnerByIndex(_addr, i);\\n            if (mainToBakc[BAYC_POOL_ID][baycTokenId].isPaired) {\\n                uint256 bakcTokenId = mainToBakc[BAYC_POOL_ID][baycTokenId].tokenId;\\n                total += nftPosition[BAKC_POOL_ID][bakcTokenId].stakedAmount;\\n            }\\n        }\\n\\n        nftCount = nftContracts[MAYC_POOL_ID].balanceOf(_addr);\\n        for(uint256 i = 0; i < nftCount; ++i) {\\n            uint256 maycTokenId = nftContracts[MAYC_POOL_ID].tokenOfOwnerByIndex(_addr, i);\\n            if (mainToBakc[MAYC_POOL_ID][maycTokenId].isPaired) {\\n                uint256 bakcTokenId = mainToBakc[MAYC_POOL_ID][maycTokenId].tokenId;\\n                total += nftPosition[BAKC_POOL_ID][bakcTokenId].stakedAmount;\\n            }\\n        }\\n\\n        return total;\\n    }\\n\\n    /**\\n     * @notice Fetches a DashboardStake = [poolId, tokenId, deposited, unclaimed, rewards24Hrs, paired] \\\\\\n     * for each pool, for an Ethereum address\\n     * @return dashboardStakes An array of DashboardStake structs\\n     * @param _address An Ethereum address\\n     */\\n    function getAllStakes(address _address) public view returns (DashboardStake[] memory) {\\n\\n        DashboardStake memory apeCoinStake = getApeCoinStake(_address);\\n        DashboardStake[] memory baycStakes = getBaycStakes(_address);\\n        DashboardStake[] memory maycStakes = getMaycStakes(_address);\\n        DashboardStake[] memory bakcStakes = getBakcStakes(_address);\\n        DashboardStake[] memory splitStakes = getSplitStakes(_address);\\n\\n        uint256 count = (baycStakes.length + maycStakes.length + bakcStakes.length + splitStakes.length + 1);\\n        DashboardStake[] memory allStakes = new DashboardStake[](count);\\n\\n        uint256 offset = 0;\\n        allStakes[offset] = apeCoinStake;\\n        ++offset;\\n\\n        for(uint256 i = 0; i < baycStakes.length; ++i) {\\n            allStakes[offset] = baycStakes[i];\\n            ++offset;\\n        }\\n\\n        for(uint256 i = 0; i < maycStakes.length; ++i) {\\n            allStakes[offset] = maycStakes[i];\\n            ++offset;\\n        }\\n\\n        for(uint256 i = 0; i < bakcStakes.length; ++i) {\\n            allStakes[offset] = bakcStakes[i];\\n            ++offset;\\n        }\\n\\n        for(uint256 i = 0; i < splitStakes.length; ++i) {\\n            allStakes[offset] = splitStakes[i];\\n            ++offset;\\n        }\\n\\n        return allStakes;\\n    }\\n\\n    /**\\n     * @notice Fetches a DashboardStake for the ApeCoin pool\\n     * @return dashboardStake A dashboardStake struct\\n     * @param _address An Ethereum address\\n     */\\n    function getApeCoinStake(address _address) public view returns (DashboardStake memory) {\\n        uint256 tokenId = 0;\\n        uint256 deposited = addressPosition[_address].stakedAmount;\\n        uint256 unclaimed = deposited > 0 ? this.pendingRewards(0, _address, tokenId) : 0;\\n        uint256 rewards24Hrs = deposited > 0 ? _estimate24HourRewards(0, _address, 0) : 0;\\n\\n        return DashboardStake(APECOIN_POOL_ID, tokenId, deposited, unclaimed, rewards24Hrs, NULL_PAIR);\\n    }\\n\\n    /**\\n     * @notice Fetches an array of DashboardStakes for the BAYC pool\\n     * @return dashboardStakes An array of DashboardStake structs\\n     */\\n    function getBaycStakes(address _address) public view returns (DashboardStake[] memory) {\\n        return _getStakes(_address, BAYC_POOL_ID);\\n    }\\n\\n    /**\\n     * @notice Fetches an array of DashboardStakes for the MAYC pool\\n     * @return dashboardStakes An array of DashboardStake structs\\n     */\\n    function getMaycStakes(address _address) public view returns (DashboardStake[] memory) {\\n        return _getStakes(_address, MAYC_POOL_ID);\\n    }\\n\\n    /**\\n     * @notice Fetches an array of DashboardStakes for the BAKC pool\\n     * @return dashboardStakes An array of DashboardStake structs\\n     */\\n    function getBakcStakes(address _address) public view returns (DashboardStake[] memory) {\\n        return _getStakes(_address, BAKC_POOL_ID);\\n    }\\n\\n    /**\\n     * @notice Fetches an array of DashboardStakes for the Pair Pool when ownership is split \\\\\\n     * ie (BAYC/MAYC) and BAKC in pair pool have different owners.\\n     * @return dashboardStakes An array of DashboardStake structs\\n     * @param _address An Ethereum address\\n     */\\n    function getSplitStakes(address _address) public view returns (DashboardStake[] memory) {\\n        uint256 baycSplits = _getSplitStakeCount(nftContracts[BAYC_POOL_ID].balanceOf(_address), _address, BAYC_POOL_ID);\\n        uint256 maycSplits = _getSplitStakeCount(nftContracts[MAYC_POOL_ID].balanceOf(_address), _address, MAYC_POOL_ID);\\n        uint256 totalSplits = baycSplits + maycSplits;\\n\\n        if(totalSplits == 0) {\\n            return new DashboardStake[](0);\\n        }\\n\\n        DashboardStake[] memory baycSplitStakes = _getSplitStakes(baycSplits, _address, BAYC_POOL_ID);\\n        DashboardStake[] memory maycSplitStakes = _getSplitStakes(maycSplits, _address, MAYC_POOL_ID);\\n\\n        DashboardStake[] memory splitStakes = new DashboardStake[](totalSplits);\\n        uint256 offset = 0;\\n        for(uint256 i = 0; i < baycSplitStakes.length; ++i) {\\n            splitStakes[offset] = baycSplitStakes[i];\\n            ++offset;\\n        }\\n\\n        for(uint256 i = 0; i < maycSplitStakes.length; ++i) {\\n            splitStakes[offset] = maycSplitStakes[i];\\n            ++offset;\\n        }\\n\\n        return splitStakes;\\n    }\\n\\n    function _getSplitStakes(uint256 splits, address _address, uint256 _mainPoolId) private view returns (DashboardStake[] memory) {\\n\\n        DashboardStake[] memory dashboardStakes = new DashboardStake[](splits);\\n        uint256 counter;\\n\\n        for(uint256 i = 0; i < nftContracts[_mainPoolId].balanceOf(_address); ++i) {\\n            uint256 mainTokenId = nftContracts[_mainPoolId].tokenOfOwnerByIndex(_address, i);\\n            if(mainToBakc[_mainPoolId][mainTokenId].isPaired) {\\n                uint256 bakcTokenId = mainToBakc[_mainPoolId][mainTokenId].tokenId;\\n                address currentOwner = nftContracts[BAKC_POOL_ID].ownerOf(bakcTokenId);\\n\\n                /* Split Pair Check*/\\n                if (currentOwner != _address) {\\n                    uint256 deposited = nftPosition[BAKC_POOL_ID][bakcTokenId].stakedAmount;\\n                    uint256 unclaimed = deposited > 0 ? this.pendingRewards(BAKC_POOL_ID, currentOwner, bakcTokenId) : 0;\\n                    uint256 rewards24Hrs = deposited > 0 ? _estimate24HourRewards(BAKC_POOL_ID, currentOwner, bakcTokenId): 0;\\n\\n                    DashboardPair memory pair = NULL_PAIR;\\n                    if(bakcToMain[bakcTokenId][_mainPoolId].isPaired) {\\n                        pair = DashboardPair(bakcToMain[bakcTokenId][_mainPoolId].tokenId, _mainPoolId);\\n                    }\\n\\n                    DashboardStake memory dashboardStake = DashboardStake(BAKC_POOL_ID, bakcTokenId, deposited, unclaimed, rewards24Hrs, pair);\\n                    dashboardStakes[counter] = dashboardStake;\\n                    ++counter;\\n                }\\n            }\\n        }\\n\\n        return dashboardStakes;\\n    }\\n\\n    function _getSplitStakeCount(uint256 nftCount, address _address, uint256 _mainPoolId) private view returns (uint256) {\\n        uint256 splitCount;\\n        for(uint256 i = 0; i < nftCount; ++i) {\\n            uint256 mainTokenId = nftContracts[_mainPoolId].tokenOfOwnerByIndex(_address, i);\\n            if(mainToBakc[_mainPoolId][mainTokenId].isPaired) {\\n                uint256 bakcTokenId = mainToBakc[_mainPoolId][mainTokenId].tokenId;\\n                address currentOwner = nftContracts[BAKC_POOL_ID].ownerOf(bakcTokenId);\\n                if (currentOwner != _address) {\\n                    ++splitCount;\\n                }\\n            }\\n        }\\n\\n        return splitCount;\\n    }\\n\\n    function _getStakes(address _address, uint256 _poolId) private view returns (DashboardStake[] memory) {\\n        uint256 nftCount = nftContracts[_poolId].balanceOf(_address);\\n        DashboardStake[] memory dashboardStakes = nftCount > 0 ? new DashboardStake[](nftCount) : new DashboardStake[](0);\\n\\n        if(nftCount == 0) {\\n            return dashboardStakes;\\n        }\\n\\n        for(uint256 i = 0; i < nftCount; ++i) {\\n            uint256 tokenId = nftContracts[_poolId].tokenOfOwnerByIndex(_address, i);\\n            uint256 deposited = nftPosition[_poolId][tokenId].stakedAmount;\\n            uint256 unclaimed = deposited > 0 ? this.pendingRewards(_poolId, _address, tokenId) : 0;\\n            uint256 rewards24Hrs = deposited > 0 ? _estimate24HourRewards(_poolId, _address, tokenId): 0;\\n\\n            DashboardPair memory pair = NULL_PAIR;\\n            if(_poolId == BAKC_POOL_ID) {\\n                if(bakcToMain[tokenId][BAYC_POOL_ID].isPaired) {\\n                    pair = DashboardPair(bakcToMain[tokenId][BAYC_POOL_ID].tokenId, BAYC_POOL_ID);\\n                } else if(bakcToMain[tokenId][MAYC_POOL_ID].isPaired) {\\n                    pair = DashboardPair(bakcToMain[tokenId][MAYC_POOL_ID].tokenId, MAYC_POOL_ID);\\n                }\\n            }\\n\\n            DashboardStake memory dashboardStake = DashboardStake(_poolId, tokenId, deposited, unclaimed, rewards24Hrs, pair);\\n            dashboardStakes[i] = dashboardStake;\\n        }\\n\\n        return dashboardStakes;\\n    }\\n\\n    function _estimate24HourRewards(uint256 _poolId, address _address, uint256 _tokenId) private view returns (uint256) {\\n        Pool memory pool = pools[_poolId];\\n        Position memory position = _poolId == 0 ? addressPosition[_address]: nftPosition[_poolId][_tokenId];\\n\\n        TimeRange memory rewards = getTimeRangeBy(_poolId, pool.lastRewardsRangeIndex);\\n        return (position.stakedAmount * uint256(rewards.rewardsPerHour) * 24) / uint256(pool.stakedAmount);\\n    }\\n\\n    /**\\n     * @notice Fetches the current amount of claimable ApeCoin rewards for a given position from a given pool.\\n     * @return uint256 value of pending rewards\\n     * @param _poolId Available pool values 0-3\\n     * @param _address Address to lookup Position for\\n     * @param _tokenId An NFT id\\n     */\\n    function pendingRewards(uint256 _poolId, address _address, uint256 _tokenId) external view returns (uint256) {\\n        Pool memory pool = pools[_poolId];\\n        Position memory position = _poolId == 0 ? addressPosition[_address]: nftPosition[_poolId][_tokenId];\\n\\n        (uint256 rewardsSinceLastCalculated,) = rewardsBy(_poolId, pool.lastRewardedTimestampHour, getPreviousTimestampHour());\\n        uint256 accumulatedRewardsPerShare = pool.accumulatedRewardsPerShare;\\n\\n        if (block.timestamp > pool.lastRewardedTimestampHour + SECONDS_PER_HOUR && pool.stakedAmount != 0) {\\n            accumulatedRewardsPerShare = accumulatedRewardsPerShare + rewardsSinceLastCalculated * APE_COIN_PRECISION / pool.stakedAmount;\\n        }\\n        return ((position.stakedAmount * accumulatedRewardsPerShare).toInt256() - position.rewardsDebt).toUint256() / APE_COIN_PRECISION;\\n    }\\n\\n    // Convenience methods for timestamp calculation\\n\\n    /// @notice the minutes (0 to 59) of a timestamp\\n    function getMinute(uint256 timestamp) internal pure returns (uint256 minute) {\\n        uint256 secs = timestamp % SECONDS_PER_HOUR;\\n        minute = secs / SECONDS_PER_MINUTE;\\n    }\\n\\n    /// @notice the seconds (0 to 59) of a timestamp\\n    function getSecond(uint256 timestamp) internal pure returns (uint256 second) {\\n        second = timestamp % SECONDS_PER_MINUTE;\\n    }\\n\\n    /// @notice the previous whole hour of a timestamp\\n    function getPreviousTimestampHour() internal view returns (uint256) {\\n        return block.timestamp - (getMinute(block.timestamp) * 60 + getSecond(block.timestamp));\\n    }\\n\\n    // Private Methods - shared logic\\n    function _deposit(uint256 _poolId, Position storage _position, uint256 _amount) private {\\n        Pool storage pool = pools[_poolId];\\n\\n        _position.stakedAmount += _amount;\\n        pool.stakedAmount += _amount.toUint96();\\n        _position.rewardsDebt += (_amount * pool.accumulatedRewardsPerShare).toInt256();\\n    }\\n\\n    function _depositNft(uint256 _poolId, SingleNft[] calldata _nfts) private {\\n        updatePool(_poolId);\\n        uint256 tokenId;\\n        uint256 amount;\\n        Position storage position;\\n        uint256 length = _nfts.length;\\n        uint256 totalDeposit;\\n        for(uint256 i; i < length;) {\\n            tokenId = _nfts[i].tokenId;\\n            position = nftPosition[_poolId][tokenId];\\n            if (position.stakedAmount == 0) {\\n                if (nftContracts[_poolId].ownerOf(tokenId) != msg.sender) revert CallerNotOwner();\\n            }\\n            amount = _nfts[i].amount;\\n            _depositNftGuard(_poolId, position, amount);\\n            totalDeposit += amount;\\n            emit DepositNft(msg.sender, _poolId, amount, tokenId);\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n        if (totalDeposit > 0) apeCoin.transferFrom(msg.sender, address(this), totalDeposit);\\n    }\\n\\n    function _depositPairNft(uint256 mainTypePoolId, PairNftDepositWithAmount[] calldata _nfts) private {\\n        uint256 length = _nfts.length;\\n        uint256 totalDeposit;\\n        PairNftDepositWithAmount memory pair;\\n        Position storage position;\\n        for(uint256 i; i < length;) {\\n            pair = _nfts[i];\\n            position = nftPosition[BAKC_POOL_ID][pair.bakcTokenId];\\n\\n            if(position.stakedAmount == 0) {\\n                if (nftContracts[mainTypePoolId].ownerOf(pair.mainTokenId) != msg.sender\\n                    || mainToBakc[mainTypePoolId][pair.mainTokenId].isPaired) revert MainTokenNotOwnedOrPaired();\\n                if (nftContracts[BAKC_POOL_ID].ownerOf(pair.bakcTokenId) != msg.sender\\n                    || bakcToMain[pair.bakcTokenId][mainTypePoolId].isPaired) revert BAKCNotOwnedOrPaired();\\n\\n                mainToBakc[mainTypePoolId][pair.mainTokenId] = PairingStatus(pair.bakcTokenId, true);\\n                bakcToMain[pair.bakcTokenId][mainTypePoolId] = PairingStatus(pair.mainTokenId, true);\\n            } else if (pair.mainTokenId != bakcToMain[pair.bakcTokenId][mainTypePoolId].tokenId\\n                || pair.bakcTokenId != mainToBakc[mainTypePoolId][pair.mainTokenId].tokenId)\\n                revert BAKCAlreadyPaired();\\n\\n            _depositNftGuard(BAKC_POOL_ID, position, pair.amount);\\n            totalDeposit += pair.amount;\\n            emit DepositPairNft(msg.sender, pair.amount, mainTypePoolId, pair.mainTokenId, pair.bakcTokenId);\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n        if (totalDeposit > 0) apeCoin.transferFrom(msg.sender, address(this), totalDeposit);\\n    }\\n\\n    function _depositNftGuard(uint256 _poolId, Position storage _position, uint256 _amount) private {\\n        if (_amount < MIN_DEPOSIT) revert DepositMoreThanOneAPE();\\n        if (_amount + _position.stakedAmount > pools[_poolId].timeRanges[pools[_poolId].lastRewardsRangeIndex].capPerPosition)\\n            revert ExceededCapAmount();\\n\\n        _deposit(_poolId, _position, _amount);\\n    }\\n\\n    function _claim(uint256 _poolId, Position storage _position, address _recipient) private returns (uint256 rewardsToBeClaimed) {\\n        Pool storage pool = pools[_poolId];\\n\\n        int256 accumulatedApeCoins = (_position.stakedAmount * uint256(pool.accumulatedRewardsPerShare)).toInt256();\\n        rewardsToBeClaimed = (accumulatedApeCoins - _position.rewardsDebt).toUint256() / APE_COIN_PRECISION;\\n\\n        _position.rewardsDebt = accumulatedApeCoins;\\n\\n        if (rewardsToBeClaimed != 0) {\\n            apeCoin.transfer(_recipient, rewardsToBeClaimed);\\n        }\\n    }\\n\\n    function _claimNft(uint256 _poolId, uint256[] calldata _nfts, address _recipient) private {\\n        updatePool(_poolId);\\n        uint256 tokenId;\\n        uint256 rewardsToBeClaimed;\\n        uint256 length = _nfts.length;\\n        for(uint256 i; i < length;) {\\n            tokenId = _nfts[i];\\n            if (nftContracts[_poolId].ownerOf(tokenId) != msg.sender) revert CallerNotOwner();\\n            Position storage position = nftPosition[_poolId][tokenId];\\n            rewardsToBeClaimed = _claim(_poolId, position, _recipient);\\n            emit ClaimRewardsNft(msg.sender, _poolId, rewardsToBeClaimed, tokenId);\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    function _claimPairNft(uint256 mainTypePoolId, PairNft[] calldata _pairs, address _recipient) private {\\n        uint256 length = _pairs.length;\\n        uint256 mainTokenId;\\n        uint256 bakcTokenId;\\n        Position storage position;\\n        PairingStatus storage mainToSecond;\\n        PairingStatus storage secondToMain;\\n        for(uint256 i; i < length;) {\\n            mainTokenId = _pairs[i].mainTokenId;\\n            if (nftContracts[mainTypePoolId].ownerOf(mainTokenId) != msg.sender) revert NotOwnerOfMain();\\n\\n            bakcTokenId = _pairs[i].bakcTokenId;\\n            if (nftContracts[BAKC_POOL_ID].ownerOf(bakcTokenId) != msg.sender) revert NotOwnerOfBAKC();\\n\\n            mainToSecond = mainToBakc[mainTypePoolId][mainTokenId];\\n            secondToMain = bakcToMain[bakcTokenId][mainTypePoolId];\\n\\n            if (mainToSecond.tokenId != bakcTokenId || !mainToSecond.isPaired\\n            || secondToMain.tokenId != mainTokenId || !secondToMain.isPaired) revert ProvidedTokensNotPaired();\\n\\n            position = nftPosition[BAKC_POOL_ID][bakcTokenId];\\n            uint256 rewardsToBeClaimed = _claim(BAKC_POOL_ID, position, _recipient);\\n            emit ClaimRewardsPairNft(msg.sender, rewardsToBeClaimed, mainTypePoolId, mainTokenId, bakcTokenId);\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    function _withdraw(uint256 _poolId, Position storage _position, uint256 _amount) private {\\n        if (_amount > _position.stakedAmount) revert ExceededStakedAmount();\\n\\n        Pool storage pool = pools[_poolId];\\n\\n        _position.stakedAmount -= _amount;\\n        pool.stakedAmount -= _amount.toUint96();\\n        _position.rewardsDebt -= (_amount * pool.accumulatedRewardsPerShare).toInt256();\\n    }\\n\\n    function _withdrawNft(uint256 _poolId, SingleNft[] calldata _nfts, address _recipient) private {\\n        updatePool(_poolId);\\n        uint256 tokenId;\\n        uint256 amount;\\n        uint256 length = _nfts.length;\\n        uint256 totalWithdraw;\\n        Position storage position;\\n        for(uint256 i; i < length;) {\\n            tokenId = _nfts[i].tokenId;\\n            if (nftContracts[_poolId].ownerOf(tokenId) != msg.sender) revert CallerNotOwner();\\n\\n            amount = _nfts[i].amount;\\n            position = nftPosition[_poolId][tokenId];\\n            if (amount == position.stakedAmount) {\\n                uint256 rewardsToBeClaimed = _claim(_poolId, position, _recipient);\\n                emit ClaimRewardsNft(msg.sender, _poolId, rewardsToBeClaimed, tokenId);\\n            }\\n            _withdraw(_poolId, position, amount);\\n            totalWithdraw += amount;\\n            emit WithdrawNft(msg.sender, _poolId, amount, _recipient, tokenId);\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n        if (totalWithdraw > 0) apeCoin.transfer(_recipient, totalWithdraw);\\n    }\\n\\n    function _withdrawPairNft(uint256 mainTypePoolId, PairNftWithdrawWithAmount[] calldata _nfts) private {\\n        address mainTokenOwner;\\n        address bakcOwner;\\n        PairNftWithdrawWithAmount memory pair;\\n        PairingStatus storage mainToSecond;\\n        PairingStatus storage secondToMain;\\n        Position storage position;\\n        uint256 length = _nfts.length;\\n        for(uint256 i; i < length;) {\\n            pair = _nfts[i];\\n            mainTokenOwner = nftContracts[mainTypePoolId].ownerOf(pair.mainTokenId);\\n            bakcOwner = nftContracts[BAKC_POOL_ID].ownerOf(pair.bakcTokenId);\\n\\n            if (mainTokenOwner != msg.sender) {\\n                if (bakcOwner != msg.sender) revert NeitherTokenInPairOwnedByCaller();\\n            }\\n\\n            mainToSecond = mainToBakc[mainTypePoolId][pair.mainTokenId];\\n            secondToMain = bakcToMain[pair.bakcTokenId][mainTypePoolId];\\n\\n            if (mainToSecond.tokenId != pair.bakcTokenId || !mainToSecond.isPaired\\n            || secondToMain.tokenId != pair.mainTokenId || !secondToMain.isPaired) revert ProvidedTokensNotPaired();\\n\\n            position = nftPosition[BAKC_POOL_ID][pair.bakcTokenId];\\n            if(!pair.isUncommit) {\\n                if(pair.amount == position.stakedAmount) revert UncommitWrongParameters();\\n            }\\n            if (mainTokenOwner != bakcOwner) {\\n                if (!pair.isUncommit) revert SplitPairCantPartiallyWithdraw();\\n            }\\n\\n            if (pair.isUncommit) {\\n                uint256 rewardsToBeClaimed = _claim(BAKC_POOL_ID, position, bakcOwner);\\n                mainToBakc[mainTypePoolId][pair.mainTokenId] = PairingStatus(0, false);\\n                bakcToMain[pair.bakcTokenId][mainTypePoolId] = PairingStatus(0, false);\\n                emit ClaimRewardsPairNft(msg.sender, rewardsToBeClaimed, mainTypePoolId, pair.mainTokenId, pair.bakcTokenId);\\n            }\\n            uint256 finalAmountToWithdraw = pair.isUncommit ? position.stakedAmount: pair.amount;\\n            _withdraw(BAKC_POOL_ID, position, finalAmountToWithdraw);\\n            apeCoin.transfer(mainTokenOwner, finalAmountToWithdraw);\\n            emit WithdrawPairNft(msg.sender, finalAmountToWithdraw, mainTypePoolId, pair.mainTokenId, pair.bakcTokenId);\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IAutoCompoundApe.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.0;\\n\\nimport \\\"../dependencies/openzeppelin/contracts/IERC20.sol\\\";\\n\\ninterface IAutoCompoundApe is IERC20 {\\n    /**\\n     * @dev Emitted during deposit()\\n     * @param user The address of the user deposit for\\n     * @param amountDeposited The amount being deposit\\n     * @param amountShare The share being deposit\\n     **/\\n    event Deposit(\\n        address indexed caller,\\n        address indexed user,\\n        uint256 amountDeposited,\\n        uint256 amountShare\\n    );\\n\\n    /**\\n     * @dev Emitted during withdraw()\\n     * @param user The address of the user\\n     * @param amountWithdraw The amount being withdraw\\n     * @param amountShare The share being withdraw\\n     **/\\n    event Redeem(\\n        address indexed user,\\n        uint256 amountWithdraw,\\n        uint256 amountShare\\n    );\\n\\n    /**\\n     * @dev Emitted during rescueERC20()\\n     * @param token The address of the token\\n     * @param to The address of the recipient\\n     * @param amount The amount being rescued\\n     **/\\n    event RescueERC20(\\n        address indexed token,\\n        address indexed to,\\n        uint256 amount\\n    );\\n\\n    /**\\n     * @notice deposit an `amount` of ape into compound pool.\\n     * @param onBehalf The address of user will receive the pool share\\n     * @param amount The amount of ape to be deposit\\n     **/\\n    function deposit(address onBehalf, uint256 amount) external;\\n\\n    /**\\n     * @notice withdraw an `amount` of ape from compound pool.\\n     * @param amount The amount of ape to be withdraw\\n     **/\\n    function withdraw(uint256 amount) external;\\n\\n    /**\\n     * @notice collect ape reward in ApeCoinStaking and deposit to earn compound interest.\\n     **/\\n    function harvestAndCompound() external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ICApe.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.0;\\n\\nimport \\\"../dependencies/openzeppelin/contracts/IERC20.sol\\\";\\n\\ninterface ICApe is IERC20 {\\n    /**\\n     * @return the amount of shares that corresponds to `amount` protocol-controlled Ape.\\n     */\\n    function getShareByPooledApe(uint256 amount)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /**\\n     * @return the amount of Ape that corresponds to `sharesAmount` token shares.\\n     */\\n    function getPooledApeByShares(uint256 sharesAmount)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /**\\n     * @return the amount of shares belongs to _account.\\n     */\\n    function sharesOf(address _account) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IP2PPairStaking.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.0;\\n\\nimport \\\"../dependencies/openzeppelin/contracts/IERC20.sol\\\";\\n\\ninterface IP2PPairStaking {\\n    enum StakingType {\\n        BAYCStaking,\\n        MAYCStaking,\\n        BAKCPairStaking\\n    }\\n\\n    enum ListingOrderStatus {\\n        Pending,\\n        Matched,\\n        Cancelled\\n    }\\n\\n    struct ListingOrder {\\n        StakingType stakingType;\\n        address offerer;\\n        address token;\\n        uint32 tokenId;\\n        uint32 share;\\n        uint256 startTime;\\n        uint256 endTime;\\n        uint8 v;\\n        bytes32 r;\\n        bytes32 s;\\n    }\\n\\n    struct MatchedOrder {\\n        StakingType stakingType;\\n        address apeToken;\\n        uint32 apeTokenId;\\n        uint32 apeShare;\\n        uint32 bakcTokenId;\\n        uint32 bakcShare;\\n        address apeCoinOfferer;\\n        uint32 apeCoinShare;\\n        uint256 apePrincipleAmount;\\n        bytes32 apeCoinListingOrderHash;\\n    }\\n\\n    /**\\n     * @dev Emit an event whenever an listing order is successfully cancelled.\\n     * @param orderHash The hash of the cancelled order.\\n     * @param offerer   The offerer of the cancelled order.\\n     */\\n    event OrderCancelled(bytes32 orderHash, address indexed offerer);\\n\\n    /**\\n     * @dev Emitted when a order matched.\\n     * @param orderHash The hash of the matched order\\n     **/\\n    event PairStakingMatched(bytes32 orderHash);\\n\\n    /**\\n     * @dev Emitted when a matched order break up.\\n     * @param orderHash The hash of the break up order\\n     **/\\n    event PairStakingBreakUp(bytes32 orderHash);\\n\\n    /**\\n     * @dev Emitted when user claimed pending cApe reward.\\n     * @param user The address of the user\\n     * @param receiver The address of the cApe receiver\\n     * @param amount The amount of the cApe been claimed\\n     **/\\n    event CApeClaimed(address user, address receiver, uint256 amount);\\n\\n    /**\\n     * @dev Emitted when we claimed pending reward for matched order and compound.\\n     * @param orderHash The hash of the break up order\\n     **/\\n    event OrderClaimedAndCompounded(bytes32 orderHash, uint256 totalReward);\\n\\n    /**\\n     * @dev Emitted during rescueERC20()\\n     * @param token The address of the token\\n     * @param to The address of the recipient\\n     * @param amount The amount being rescued\\n     **/\\n    event RescueERC20(\\n        address indexed token,\\n        address indexed to,\\n        uint256 amount\\n    );\\n\\n    /**\\n     * @dev Emitted during setMatchingOperator()\\n     * @param oldOperator The address of the old matching operator\\n     * @param newOperator The address of the new matching operator\\n     **/\\n    event MatchingOperatorUpdated(address oldOperator, address newOperator);\\n\\n    /**\\n     * @dev Emitted during setCompoundFee()\\n     * @param oldFee The value of the old compound fee\\n     * @param newFee The value of the new compound fee\\n     **/\\n    event CompoundFeeUpdated(uint256 oldFee, uint256 newFee);\\n\\n    /**\\n     * @notice Cancel a listing order, order canceled cannot be matched.\\n     * @param listingOrder the detail info of the order to be canceled\\n     */\\n    function cancelListing(ListingOrder calldata listingOrder) external;\\n\\n    /**\\n     * @notice match an apeOrder with an apeCoinOrder to pair staking\\n     * @param apeOrder the ape owner's listing order\\n     * @param apeCoinOrder the Ape Coin owner's listing order\\n     * @return orderHash matched order hash\\n     */\\n    function matchPairStakingList(\\n        ListingOrder calldata apeOrder,\\n        ListingOrder calldata apeCoinOrder\\n    ) external returns (bytes32 orderHash);\\n\\n    /**\\n     * @notice match an apeOrder, an bakcOrder with an apeCoinOrder to pair staking\\n     * @param apeOrder the ape owner's listing order\\n     * @param bakcOrder the bakc owner's listing order\\n     * @param apeCoinOrder the Ape Coin owner's listing order\\n     * @return orderHash matched order hash\\n     */\\n    function matchBAKCPairStakingList(\\n        ListingOrder calldata apeOrder,\\n        ListingOrder calldata bakcOrder,\\n        ListingOrder calldata apeCoinOrder\\n    ) external returns (bytes32 orderHash);\\n\\n    /**\\n     * @notice break up an matched pair staking order, only participant of the matched order can call.\\n     * @param orderHash the hash of the matched order to be break up\\n     */\\n    function breakUpMatchedOrder(bytes32 orderHash) external;\\n\\n    /**\\n     * @notice claim pending reward for matched pair staking orders and deposit as cApe for user to compound.\\n     * @param orderHashes the hash of the matched orders to be break up\\n     */\\n    function claimForMatchedOrderAndCompound(bytes32[] calldata orderHashes)\\n        external;\\n\\n    /**\\n     * @param user The address of the user\\n     * @return amount Returns the amount of cApe owned by user\\n     */\\n    function pendingCApeReward(address user)\\n        external\\n        view\\n        returns (uint256 amount);\\n\\n    /**\\n     * @notice claim user compounded cApe\\n     * @param receiver The address of the cApe receiver\\n     */\\n    function claimCApeReward(address receiver) external;\\n\\n    /**\\n     * @notice get Ape Coin Staking cap for every position.\\n     * @param stakingType the pair staking type\\n     * @return Ape Coin Staking cap\\n     */\\n    function getApeCoinStakingCap(StakingType stakingType)\\n        external\\n        returns (uint256);\\n\\n    /**\\n     * @notice set a new matching operator, only owner can call this function\\n     * @param _matchingOperator The address of the new matching operator\\n     */\\n    function setMatchingOperator(address _matchingOperator) external;\\n}\\n\"\r\n    },\r\n    \"contracts/protocol/libraries/math/PercentageMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title PercentageMath library\\n *\\n * @notice Provides functions to perform percentage calculations\\n * @dev Percentages are defined by default with 2 decimals of precision (100.00). The precision is indicated by PERCENTAGE_FACTOR\\n * @dev Operations are rounded. If a value is >=.5, will be rounded up, otherwise rounded down.\\n **/\\nlibrary PercentageMath {\\n    // Maximum percentage factor (100.00%)\\n    uint256 internal constant PERCENTAGE_FACTOR = 1e4;\\n\\n    // Half percentage factor (50.00%)\\n    uint256 internal constant HALF_PERCENTAGE_FACTOR = 0.5e4;\\n\\n    /**\\n     * @notice Executes a percentage multiplication\\n     * @dev assembly optimized for improved gas savings, see https://twitter.com/transmissions11/status/1451131036377571328\\n     * @param value The value of which the percentage needs to be calculated\\n     * @param percentage The percentage of the value to be calculated\\n     * @return result value percentmul percentage\\n     **/\\n    function percentMul(uint256 value, uint256 percentage)\\n        internal\\n        pure\\n        returns (uint256 result)\\n    {\\n        // to avoid overflow, value <= (type(uint256).max - HALF_PERCENTAGE_FACTOR) / percentage\\n        assembly {\\n            if iszero(\\n                or(\\n                    iszero(percentage),\\n                    iszero(\\n                        gt(\\n                            value,\\n                            div(sub(not(0), HALF_PERCENTAGE_FACTOR), percentage)\\n                        )\\n                    )\\n                )\\n            ) {\\n                revert(0, 0)\\n            }\\n\\n            result := div(\\n                add(mul(value, percentage), HALF_PERCENTAGE_FACTOR),\\n                PERCENTAGE_FACTOR\\n            )\\n        }\\n    }\\n\\n    /**\\n     * @notice Executes a percentage division\\n     * @dev assembly optimized for improved gas savings, see https://twitter.com/transmissions11/status/1451131036377571328\\n     * @param value The value of which the percentage needs to be calculated\\n     * @param percentage The percentage of the value to be calculated\\n     * @return result value percentdiv percentage\\n     **/\\n    function percentDiv(uint256 value, uint256 percentage)\\n        internal\\n        pure\\n        returns (uint256 result)\\n    {\\n        // to avoid overflow, value <= (type(uint256).max - halfPercentage) / PERCENTAGE_FACTOR\\n        assembly {\\n            if or(\\n                iszero(percentage),\\n                iszero(\\n                    iszero(\\n                        gt(\\n                            value,\\n                            div(\\n                                sub(not(0), div(percentage, 2)),\\n                                PERCENTAGE_FACTOR\\n                            )\\n                        )\\n                    )\\n                )\\n            ) {\\n                revert(0, 0)\\n            }\\n\\n            result := div(\\n                add(mul(value, PERCENTAGE_FACTOR), div(percentage, 2)),\\n                percentage\\n            )\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [\r\n      \"contracts/=contracts/\",\r\n      \"ds-test/=lib/ds-test/src/\",\r\n      \"forge-std/=lib/forge-std/src/\",\r\n      \"pnm-contracts/=lib/pnm-contracts/\"\r\n    ],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"ipfs\"\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_bayc\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_mayc\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_bakc\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_nBayc\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_nMayc\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_nBakc\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_apeCoin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_cApe\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_apeCoinStaking\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"CApeClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newFee\",\"type\":\"uint256\"}],\"name\":\"CompoundFeeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldOperator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newOperator\",\"type\":\"address\"}],\"name\":\"MatchingOperatorUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"orderHash\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"offerer\",\"type\":\"address\"}],\"name\":\"OrderCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"orderHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalReward\",\"type\":\"uint256\"}],\"name\":\"OrderClaimedAndCompounded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"orderHash\",\"type\":\"bytes32\"}],\"name\":\"PairStakingBreakUp\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"orderHash\",\"type\":\"bytes32\"}],\"name\":\"PairStakingMatched\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RescueERC20\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"orderHash\",\"type\":\"bytes32\"}],\"name\":\"breakUpMatchedOrder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"enum IP2PPairStaking.StakingType\",\"name\":\"stakingType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"offerer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"tokenId\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"share\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct IP2PPairStaking.ListingOrder\",\"name\":\"listingOrder\",\"type\":\"tuple\"}],\"name\":\"cancelListing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"claimCApeReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"claimCompoundFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"orderHashes\",\"type\":\"bytes32[]\"}],\"name\":\"claimForMatchedOrderAndCompound\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"compoundFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum IP2PPairStaking.StakingType\",\"name\":\"stakingType\",\"type\":\"uint8\"}],\"name\":\"getApeCoinStakingCap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"enum IP2PPairStaking.StakingType\",\"name\":\"stakingType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"offerer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"tokenId\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"share\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct IP2PPairStaking.ListingOrder\",\"name\":\"order\",\"type\":\"tuple\"}],\"name\":\"getListingOrderHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"enum IP2PPairStaking.StakingType\",\"name\":\"stakingType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"apeToken\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"apeTokenId\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"apeShare\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"bakcTokenId\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"bakcShare\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"apeCoinOfferer\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"apeCoinShare\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"apePrincipleAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"apeCoinListingOrderHash\",\"type\":\"bytes32\"}],\"internalType\":\"struct IP2PPairStaking.MatchedOrder\",\"name\":\"order\",\"type\":\"tuple\"}],\"name\":\"getMatchedOrderHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"listingOrderStatus\",\"outputs\":[{\"internalType\":\"enum IP2PPairStaking.ListingOrderStatus\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"enum IP2PPairStaking.StakingType\",\"name\":\"stakingType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"offerer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"tokenId\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"share\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct IP2PPairStaking.ListingOrder\",\"name\":\"apeOrder\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"enum IP2PPairStaking.StakingType\",\"name\":\"stakingType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"offerer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"tokenId\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"share\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct IP2PPairStaking.ListingOrder\",\"name\":\"bakcOrder\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"enum IP2PPairStaking.StakingType\",\"name\":\"stakingType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"offerer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"tokenId\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"share\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct IP2PPairStaking.ListingOrder\",\"name\":\"apeCoinOrder\",\"type\":\"tuple\"}],\"name\":\"matchBAKCPairStakingList\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"orderHash\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"enum IP2PPairStaking.StakingType\",\"name\":\"stakingType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"offerer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"tokenId\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"share\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct IP2PPairStaking.ListingOrder\",\"name\":\"apeOrder\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"enum IP2PPairStaking.StakingType\",\"name\":\"stakingType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"offerer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"tokenId\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"share\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct IP2PPairStaking.ListingOrder\",\"name\":\"apeCoinOrder\",\"type\":\"tuple\"}],\"name\":\"matchPairStakingList\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"orderHash\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"matchedOrders\",\"outputs\":[{\"internalType\":\"enum IP2PPairStaking.StakingType\",\"name\":\"stakingType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"apeToken\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"apeTokenId\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"apeShare\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"bakcTokenId\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"bakcShare\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"apeCoinOfferer\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"apeCoinShare\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"apePrincipleAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"apeCoinListingOrderHash\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"matchingOperator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"pendingCApeReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"rescueERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_compoundFee\",\"type\":\"uint256\"}],\"name\":\"setCompoundFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_matchingOperator\",\"type\":\"address\"}],\"name\":\"setMatchingOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateApeCoinStakingCap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"orderHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"validateOrderSignature\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "P2PPairStaking", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000bc4ca0eda7647a8ab7c2061c2e118a18a936f13d00000000000000000000000060e4d786628fea6478f785a6d7e704777c86a7c6000000000000000000000000ba30e5f9bb24caa003e9f2f0497ad287fdf956230000000000000000000000007285e8f0186a0a41e73cef7603ad7b80a2d5a79300000000000000000000000050d9090d6ce6307b7ec8904cd3dca17b4da56353000000000000000000000000dbe12df880bf3755dee42a7dabf6cc5d5ae1966d0000000000000000000000004d224452801aced8b2f0aebe155379bb5d5943810000000000000000000000002e9045e7c001056cbcf5ed837f96a8630075a04d0000000000000000000000005954ab967bc958940b7eb73ee84797dc8a2afbb9", "EVMVersion": "london", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}