{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"lib/chainlink-brownie-contracts/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"lib/solidity-lib/contracts/libraries/TransferHelper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity >=0.6.0;\\n\\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\\nlibrary TransferHelper {\\n    function safeApprove(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            'TransferHelper::safeApprove: approve failed'\\n        );\\n    }\\n\\n    function safeTransfer(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            'TransferHelper::safeTransfer: transfer failed'\\n        );\\n    }\\n\\n    function safeTransferFrom(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            'TransferHelper::transferFrom: transferFrom failed'\\n        );\\n    }\\n\\n    function safeTransferETH(address to, uint256 value) internal {\\n        (bool success, ) = to.call{value: value}(new bytes(0));\\n        require(success, 'TransferHelper::safeTransferETH: ETH transfer failed');\\n    }\\n}\\n\"\r\n    },\r\n    \"src/HiroRouterV1.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.0;\\n\\nimport \\\"@uniswap/contracts/libraries/TransferHelper.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\n\\ncontract HiroRouterV1 {\\n    address public feeTreasury;\\n\\n    // Example for 0.25% baseFee:\\n    //     baseFeeDivisor = 1 / 0.0025\\n    //     => 400\\n    uint256 public baseFeeDivisor; // fee = amount / baseFeeDivisor\\n\\n    string public version;\\n\\n    constructor(\\n        address _feeTreasury,\\n        uint256 _baseFeeDivisor,\\n        string memory _version\\n    ) {\\n        baseFeeDivisor = _baseFeeDivisor;\\n        feeTreasury = _feeTreasury;\\n        version = _version;\\n    }\\n\\n    event Payment(\\n        address indexed sender,\\n        address indexed receiver,\\n        address token, /* the token that payee receives, use address(0) for AVAX*/\\n        uint256 amount,\\n        uint256 fees,\\n        bytes32 memo\\n    );\\n\\n    event Convert(address indexed priceFeed, int256 exchangeRate);\\n\\n    /*\\n    Basic payment router when sending tokens directly without DEX. \\n    Most gas efficient. \\n\\n    Additional support for converting tokens via priceFeeds.\\n\\n    ## Example: Pay without pricefeeds, e.g. USDC transfer\\n\\n    payWithToken(\\n      \\\"tx-123\\\",   // memo\\n      5*10**18,   // 5$\\n      [],         // no pricefeeds\\n      0xUSDC,     // usdc token address\\n      0xAlice     // receiver token address\\n    )\\n\\n    ## Example: Pay with pricefeeds (EUR / USD)\\n\\n    The user entered the amount in EUR, which gets converted into\\n    USD by the on-chain pricefeed.\\n\\n    payWithToken(\\n        \\\"tx-123\\\",   // memo\\n        4.5*10**18, // 4.5 EUR (~5$). \\n        [0xEURUSD], // \\n        0xUSDC,     // usdc token address\\n        0xAlice     // receiver token address\\n    )  \\n\\n\\n    ## Example: Pay with extra fee\\n\\n    3rd parties can receive an extra fee that is taken directly from\\n    the receivable amount. \\n    \\n    payWithToken(\\n        \\\"tx-123\\\",   // memo\\n        4.5*10**18, // 4.5 EUR (~5$). \\n        [0xEURUSD], // \\n        0xUSDC,     // usdc token address\\n        0xAlice,    // receiver token address\\n        0x3rdParty  // extra fee for 3rd party provider\\n        200,        // extra fee divisor (x = 1 / 0.005) => 0.5%\\n    )\\n    */\\n    function payWithToken(\\n        bytes32 _memo,\\n        uint256 _amount,\\n        address[] calldata _priceFeeds,\\n        address _token,\\n        address _receiver,\\n        address _extraFeeReceiver,\\n        uint256 _extraFeeDivisor\\n    ) external returns (bool) {\\n        require(_amount != 0, \\\"invalid amount\\\");\\n\\n        // transform amount with _priceFeeds\\n        if (_priceFeeds.length > 0) {\\n            {\\n                int256 price;\\n                address priceFeed;\\n                (_amount, priceFeed, price) = exchangeRate(\\n                    _priceFeeds,\\n                    _amount\\n                );\\n                emit Convert(priceFeed, price);\\n            }\\n        }\\n\\n        ensureAllowance(_token, _amount);\\n\\n        uint256 totalFee = 0;\\n\\n        if (_memo != \\\"\\\") {\\n            totalFee += transferFee(\\n                _amount,\\n                baseFeeDivisor,\\n                _token,\\n                msg.sender,\\n                feeTreasury\\n            );\\n        }\\n\\n        if (_extraFeeReceiver != address(0)) {\\n            require(_extraFeeDivisor > 2, \\\"extraFee too high\\\");\\n\\n            totalFee += transferFee(\\n                _amount,\\n                _extraFeeDivisor,\\n                _token,\\n                msg.sender,\\n                _extraFeeReceiver\\n            );\\n        }\\n\\n        // Transfer to receiver\\n        TransferHelper.safeTransferFrom(\\n            _token,\\n            msg.sender,\\n            _receiver,\\n            _amount - totalFee\\n        );\\n\\n        emit Payment(msg.sender, _receiver, _token, _amount, totalFee, _memo);\\n\\n        return true;\\n    }\\n\\n    /*\\n    Make life easier for frontends.\\n    */\\n    function ensureAllowance(address _token, uint256 _amount) private view {\\n        require(\\n            IERC20(_token).allowance(msg.sender, address(this)) >= _amount,\\n            \\\"insufficient allowance\\\"\\n        );\\n    }\\n\\n    function transferFee(\\n        uint256 _amount,\\n        uint256 _feeDivisor,\\n        address _token,\\n        address _from,\\n        address _to\\n    ) private returns (uint256) {\\n        uint256 fee = _amount / _feeDivisor;\\n        // Transfer hiro-fee to treasury\\n        if (fee > 0) {\\n            TransferHelper.safeTransferFrom(_token, _from, _to, fee);\\n            return fee;\\n        } else {\\n            return 0;\\n        }\\n    }\\n\\n    function exchangeRate(address[] calldata _priceFeeds, uint256 _amount)\\n        public\\n        view\\n        returns (\\n            uint256 converted,\\n            address priceFeed,\\n            int256 price\\n        )\\n    {\\n        require(_priceFeeds.length < 2, \\\"invalid pricefeeds\\\");\\n\\n        // TODO: base / quote pricefeed to calc EUR/ETH via EUR/USD ETH/USD\\n        AggregatorV3Interface priceFeed = AggregatorV3Interface(_priceFeeds[0]);\\n\\n        uint256 decimals = uint256(10**uint256(priceFeed.decimals()));\\n        (, int256 price, , , ) = priceFeed.latestRoundData();\\n        uint256 converted = (_amount * uint256(price)) / decimals;\\n\\n        return (converted, _priceFeeds[0], price);\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [\r\n      \"@chainlink/=lib/chainlink-brownie-contracts/\",\r\n      \"@ensdomains/=node_modules/@ensdomains/\",\r\n      \"@openzeppelin/=lib/openzeppelin-contracts/\",\r\n      \"@uniswap/=lib/solidity-lib/\",\r\n      \"chainlink-brownie-contracts/=lib/chainlink-brownie-contracts/contracts/src/v0.8/dev/vendor/@arbitrum/nitro-contracts/src/\",\r\n      \"ds-test/=lib/ds-test/src/\",\r\n      \"forge-std/=lib/forge-std/src/\",\r\n      \"hardhat/=node_modules/hardhat/\",\r\n      \"openzeppelin-contracts/=lib/openzeppelin-contracts/\",\r\n      \"solidity-lib/=lib/solidity-lib/contracts/\"\r\n    ],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"ipfs\"\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeTreasury\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_baseFeeDivisor\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_version\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"priceFeed\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"exchangeRate\",\"type\":\"int256\"}],\"name\":\"Convert\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fees\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"memo\",\"type\":\"bytes32\"}],\"name\":\"Payment\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"baseFeeDivisor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_priceFeeds\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"exchangeRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"converted\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"priceFeed\",\"type\":\"address\"},{\"internalType\":\"int256\",\"name\":\"price\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeTreasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_memo\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_priceFeeds\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_extraFeeReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_extraFeeDivisor\",\"type\":\"uint256\"}],\"name\":\"payWithToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "HiroRouterV1", "CompilerVersion": "v0.8.13+commit.abaa5c0e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000237ada0db0f24dbf5ab323b0a3f48f2b4806a6d500000000000000000000000000000000000000000000000000000000000001f400000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000003302e310000000000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}