{"SourceCode": "/**\r\n * This is the utility token for the Prodigy Bot, a Telegram multichain trading tool suite.\r\n *\r\n * https://prodigybot.io/\r\n * https://t.me/ProdigySniper/\r\n * https://t.me/ProdigySniperBot/\r\n *\r\n * $$$$$$$\\                            $$\\ $$\\                     $$\\                  $$\\     \r\n * $$  __$$\\                           $$ |\\__|                    $$ |                 $$ |    \r\n * $$ |  $$ | $$$$$$\\   $$$$$$\\   $$$$$$$ |$$\\  $$$$$$\\  $$\\   $$\\ $$$$$$$\\   $$$$$$\\ $$$$$$\\   \r\n * $$$$$$$  |$$  __$$\\ $$  __$$\\ $$  __$$ |$$ |$$  __$$\\ $$ |  $$ |$$  __$$\\ $$  __$$\\\\_$$  _|  \r\n * $$  ____/ $$ |  \\__|$$ /  $$ |$$ /  $$ |$$ |$$ /  $$ |$$ |  $$ |$$ |  $$ |$$ /  $$ | $$ |    \r\n * $$ |      $$ |      $$ |  $$ |$$ |  $$ |$$ |$$ |  $$ |$$ |  $$ |$$ |  $$ |$$ |  $$ | $$ |$$\\ \r\n * $$ |      $$ |      \\$$$$$$  |\\$$$$$$$ |$$ |\\$$$$$$$ |\\$$$$$$$ |$$$$$$$  |\\$$$$$$  | \\$$$$  |\r\n * \\__|      \\__|       \\______/  \\_______|\\__| \\____$$ | \\____$$ |\\_______/  \\______/   \\____/ \r\n *                                             $$\\   $$ |$$\\   $$ |                             \r\n *                                             \\$$$$$$  |\\$$$$$$  |                             \r\n *                                              \\______/  \\______/                              \r\n */\r\n\r\n// SPDX-License-Identifier: MIT\r\npragma solidity >=0.7.0 <0.9.0;\r\n\r\n/**\r\n * @notice Simple ERC20 implementation from Solady.\r\n * @author Solady (https://github.com/vectorized/solady/blob/main/src/tokens/ERC20.sol)\r\n * @notice EIP-2612 has been removed due to concerns of userbase not being familiar with the security risks of signatures.\r\n * @notice Hooks removed since they could be called twice during tax events.\r\n * @notice Burn is removed as there is no intended use.\r\n */\r\nabstract contract ERC20 {\r\n    /*\u00b4:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0\u2022.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:*/\r\n    /*                       CUSTOM ERRORS                        */\r\n    /*.\u2022\u00b0:\u00b0.\u00b4+\u02da.*\u00b0.\u02da:*.\u00b4\u2022*.+\u00b0.\u2022\u00b0:\u00b4*.\u00b4\u2022*.\u2022\u00b0.\u2022\u00b0:\u00b0.\u00b4:\u2022\u02da\u00b0.*\u00b0.\u02da:*.\u00b4+\u00b0.\u2022*/\r\n\r\n    /// @dev The total supply has overflowed.\r\n    error TotalSupplyOverflow();\r\n\r\n    /// @dev The allowance has overflowed.\r\n    error AllowanceOverflow();\r\n\r\n    /// @dev The allowance has underflowed.\r\n    error AllowanceUnderflow();\r\n\r\n    /// @dev Insufficient balance.\r\n    error InsufficientBalance();\r\n\r\n    /// @dev Insufficient allowance.\r\n    error InsufficientAllowance();\r\n\r\n    /*\u00b4:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0\u2022.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:*/\r\n    /*                           EVENTS                           */\r\n    /*.\u2022\u00b0:\u00b0.\u00b4+\u02da.*\u00b0.\u02da:*.\u00b4\u2022*.+\u00b0.\u2022\u00b0:\u00b4*.\u00b4\u2022*.\u2022\u00b0.\u2022\u00b0:\u00b0.\u00b4:\u2022\u02da\u00b0.*\u00b0.\u02da:*.\u00b4+\u00b0.\u2022*/\r\n\r\n    /// @dev Emitted when `amount` tokens is transferred from `from` to `to`.\r\n    event Transfer(address indexed from, address indexed to, uint256 amount);\r\n\r\n    /// @dev Emitted when `amount` tokens is approved by `owner` to be used by `spender`.\r\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\r\n\r\n    /// @dev `keccak256(bytes(\"Transfer(address,address,uint256)\"))`.\r\n    uint256 private constant _TRANSFER_EVENT_SIGNATURE =\r\n        0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef;\r\n\r\n    /// @dev `keccak256(bytes(\"Approval(address,address,uint256)\"))`.\r\n    uint256 private constant _APPROVAL_EVENT_SIGNATURE =\r\n        0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925;\r\n\r\n    /*\u00b4:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0\u2022.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:*/\r\n    /*                          STORAGE                           */\r\n    /*.\u2022\u00b0:\u00b0.\u00b4+\u02da.*\u00b0.\u02da:*.\u00b4\u2022*.+\u00b0.\u2022\u00b0:\u00b4*.\u00b4\u2022*.\u2022\u00b0.\u2022\u00b0:\u00b0.\u00b4:\u2022\u02da\u00b0.*\u00b0.\u02da:*.\u00b4+\u00b0.\u2022*/\r\n\r\n    /// @dev The storage slot for the total supply.\r\n    uint256 private constant _TOTAL_SUPPLY_SLOT = 0x05345cdf77eb68f44c;\r\n\r\n    /// @dev The balance slot of `owner` is given by:\r\n    /// ```\r\n    ///     mstore(0x0c, _BALANCE_SLOT_SEED)\r\n    ///     mstore(0x00, owner)\r\n    ///     let balanceSlot := keccak256(0x0c, 0x20)\r\n    /// ```\r\n    uint256 private constant _BALANCE_SLOT_SEED = 0x87a211a2;\r\n\r\n    /// @dev The allowance slot of (`owner`, `spender`) is given by:\r\n    /// ```\r\n    ///     mstore(0x20, spender)\r\n    ///     mstore(0x0c, _ALLOWANCE_SLOT_SEED)\r\n    ///     mstore(0x00, owner)\r\n    ///     let allowanceSlot := keccak256(0x0c, 0x34)\r\n    /// ```\r\n    uint256 private constant _ALLOWANCE_SLOT_SEED = 0x7f5e9f20;\r\n\r\n    /// @dev The nonce slot of `owner` is given by:\r\n    /// ```\r\n    ///     mstore(0x0c, _NONCES_SLOT_SEED)\r\n    ///     mstore(0x00, owner)\r\n    ///     let nonceSlot := keccak256(0x0c, 0x20)\r\n    /// ```\r\n    uint256 private constant _NONCES_SLOT_SEED = 0x38377508;\r\n\r\n    /*\u00b4:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0\u2022.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:*/\r\n    /*                       ERC20 METADATA                       */\r\n    /*.\u2022\u00b0:\u00b0.\u00b4+\u02da.*\u00b0.\u02da:*.\u00b4\u2022*.+\u00b0.\u2022\u00b0:\u00b4*.\u00b4\u2022*.\u2022\u00b0.\u2022\u00b0:\u00b0.\u00b4:\u2022\u02da\u00b0.*\u00b0.\u02da:*.\u00b4+\u00b0.\u2022*/\r\n\r\n    /// @dev Returns the name of the token.\r\n    function name() public view virtual returns (string memory);\r\n\r\n    /// @dev Returns the symbol of the token.\r\n    function symbol() public view virtual returns (string memory);\r\n\r\n    /// @dev Returns the decimals places of the token.\r\n    function decimals() public view virtual returns (uint8) {\r\n        return 18;\r\n    }\r\n\r\n    /*\u00b4:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0\u2022.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:*/\r\n    /*                           ERC20                            */\r\n    /*.\u2022\u00b0:\u00b0.\u00b4+\u02da.*\u00b0.\u02da:*.\u00b4\u2022*.+\u00b0.\u2022\u00b0:\u00b4*.\u00b4\u2022*.\u2022\u00b0.\u2022\u00b0:\u00b0.\u00b4:\u2022\u02da\u00b0.*\u00b0.\u02da:*.\u00b4+\u00b0.\u2022*/\r\n\r\n    /// @dev Returns the amount of tokens in existence.\r\n    function totalSupply() public view virtual returns (uint256 result) {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            result := sload(_TOTAL_SUPPLY_SLOT)\r\n        }\r\n    }\r\n\r\n    /// @dev Returns the amount of tokens owned by `owner`.\r\n    function balanceOf(address owner) public view virtual returns (uint256 result) {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            mstore(0x0c, _BALANCE_SLOT_SEED)\r\n            mstore(0x00, owner)\r\n            result := sload(keccak256(0x0c, 0x20))\r\n        }\r\n    }\r\n\r\n    /// @dev Returns the amount of tokens that `spender` can spend on behalf of `owner`.\r\n    function allowance(address owner, address spender)\r\n        public\r\n        view\r\n        virtual\r\n        returns (uint256 result)\r\n    {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            mstore(0x20, spender)\r\n            mstore(0x0c, _ALLOWANCE_SLOT_SEED)\r\n            mstore(0x00, owner)\r\n            result := sload(keccak256(0x0c, 0x34))\r\n        }\r\n    }\r\n\r\n    /// @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n    ///\r\n    /// Emits a {Approval} event.\r\n    function approve(address spender, uint256 amount) public virtual returns (bool) {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            // Compute the allowance slot and store the amount.\r\n            mstore(0x20, spender)\r\n            mstore(0x0c, _ALLOWANCE_SLOT_SEED)\r\n            mstore(0x00, caller())\r\n            sstore(keccak256(0x0c, 0x34), amount)\r\n            // Emit the {Approval} event.\r\n            mstore(0x00, amount)\r\n            log3(0x00, 0x20, _APPROVAL_EVENT_SIGNATURE, caller(), shr(96, mload(0x2c)))\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /// @dev Atomically increases the allowance granted to `spender` by the caller.\r\n    ///\r\n    /// Emits a {Approval} event.\r\n    function increaseAllowance(address spender, uint256 difference) public virtual returns (bool) {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            // Compute the allowance slot and load its value.\r\n            mstore(0x20, spender)\r\n            mstore(0x0c, _ALLOWANCE_SLOT_SEED)\r\n            mstore(0x00, caller())\r\n            let allowanceSlot := keccak256(0x0c, 0x34)\r\n            let allowanceBefore := sload(allowanceSlot)\r\n            // Add to the allowance.\r\n            let allowanceAfter := add(allowanceBefore, difference)\r\n            // Revert upon overflow.\r\n            if lt(allowanceAfter, allowanceBefore) {\r\n                mstore(0x00, 0xf9067066) // `AllowanceOverflow()`.\r\n                revert(0x1c, 0x04)\r\n            }\r\n            // Store the updated allowance.\r\n            sstore(allowanceSlot, allowanceAfter)\r\n            // Emit the {Approval} event.\r\n            mstore(0x00, allowanceAfter)\r\n            log3(0x00, 0x20, _APPROVAL_EVENT_SIGNATURE, caller(), shr(96, mload(0x2c)))\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /// @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n    ///\r\n    /// Emits a {Approval} event.\r\n    function decreaseAllowance(address spender, uint256 difference) public virtual returns (bool) {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            // Compute the allowance slot and load its value.\r\n            mstore(0x20, spender)\r\n            mstore(0x0c, _ALLOWANCE_SLOT_SEED)\r\n            mstore(0x00, caller())\r\n            let allowanceSlot := keccak256(0x0c, 0x34)\r\n            let allowanceBefore := sload(allowanceSlot)\r\n            // Revert if will underflow.\r\n            if lt(allowanceBefore, difference) {\r\n                mstore(0x00, 0x8301ab38) // `AllowanceUnderflow()`.\r\n                revert(0x1c, 0x04)\r\n            }\r\n            // Subtract and store the updated allowance.\r\n            let allowanceAfter := sub(allowanceBefore, difference)\r\n            sstore(allowanceSlot, allowanceAfter)\r\n            // Emit the {Approval} event.\r\n            mstore(0x00, allowanceAfter)\r\n            log3(0x00, 0x20, _APPROVAL_EVENT_SIGNATURE, caller(), shr(96, mload(0x2c)))\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /// @dev Transfer `amount` tokens from the caller to `to`.\r\n    ///\r\n    /// Requirements:\r\n    /// - `from` must at least have `amount`.\r\n    ///\r\n    /// Emits a {Transfer} event.\r\n    function transfer(address to, uint256 amount) public virtual returns (bool) {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            // Compute the balance slot and load its value.\r\n            mstore(0x0c, _BALANCE_SLOT_SEED)\r\n            mstore(0x00, caller())\r\n            let fromBalanceSlot := keccak256(0x0c, 0x20)\r\n            let fromBalance := sload(fromBalanceSlot)\r\n            // Revert if insufficient balance.\r\n            if gt(amount, fromBalance) {\r\n                mstore(0x00, 0xf4d678b8) // `InsufficientBalance()`.\r\n                revert(0x1c, 0x04)\r\n            }\r\n            // Subtract and store the updated balance.\r\n            sstore(fromBalanceSlot, sub(fromBalance, amount))\r\n            // Compute the balance slot of `to`.\r\n            mstore(0x00, to)\r\n            let toBalanceSlot := keccak256(0x0c, 0x20)\r\n            // Add and store the updated balance of `to`.\r\n            // Will not overflow because the sum of all user balances\r\n            // cannot exceed the maximum uint256 value.\r\n            sstore(toBalanceSlot, add(sload(toBalanceSlot), amount))\r\n            // Emit the {Transfer} event.\r\n            mstore(0x20, amount)\r\n            log3(0x20, 0x20, _TRANSFER_EVENT_SIGNATURE, caller(), shr(96, mload(0x0c)))\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /// @dev Transfers `amount` tokens from `from` to `to`.\r\n    ///\r\n    /// Note: Does not update the allowance if it is the maximum uint256 value.\r\n    ///\r\n    /// Requirements:\r\n    /// - `from` must at least have `amount`.\r\n    /// - The caller must have at least `amount` of allowance to transfer the tokens of `from`.\r\n    ///\r\n    /// Emits a {Transfer} event.\r\n    function transferFrom(address from, address to, uint256 amount) public virtual returns (bool) {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            let from_ := shl(96, from)\r\n            // Compute the allowance slot and load its value.\r\n            mstore(0x20, caller())\r\n            mstore(0x0c, or(from_, _ALLOWANCE_SLOT_SEED))\r\n            let allowanceSlot := keccak256(0x0c, 0x34)\r\n            let allowance_ := sload(allowanceSlot)\r\n            // If the allowance is not the maximum uint256 value.\r\n            if iszero(eq(allowance_, not(0))) {\r\n                // Revert if the amount to be transferred exceeds the allowance.\r\n                if gt(amount, allowance_) {\r\n                    mstore(0x00, 0x13be252b) // `InsufficientAllowance()`.\r\n                    revert(0x1c, 0x04)\r\n                }\r\n                // Subtract and store the updated allowance.\r\n                sstore(allowanceSlot, sub(allowance_, amount))\r\n            }\r\n            // Compute the balance slot and load its value.\r\n            mstore(0x0c, or(from_, _BALANCE_SLOT_SEED))\r\n            let fromBalanceSlot := keccak256(0x0c, 0x20)\r\n            let fromBalance := sload(fromBalanceSlot)\r\n            // Revert if insufficient balance.\r\n            if gt(amount, fromBalance) {\r\n                mstore(0x00, 0xf4d678b8) // `InsufficientBalance()`.\r\n                revert(0x1c, 0x04)\r\n            }\r\n            // Subtract and store the updated balance.\r\n            sstore(fromBalanceSlot, sub(fromBalance, amount))\r\n            // Compute the balance slot of `to`.\r\n            mstore(0x00, to)\r\n            let toBalanceSlot := keccak256(0x0c, 0x20)\r\n            // Add and store the updated balance of `to`.\r\n            // Will not overflow because the sum of all user balances\r\n            // cannot exceed the maximum uint256 value.\r\n            sstore(toBalanceSlot, add(sload(toBalanceSlot), amount))\r\n            // Emit the {Transfer} event.\r\n            mstore(0x20, amount)\r\n            log3(0x20, 0x20, _TRANSFER_EVENT_SIGNATURE, shr(96, from_), shr(96, mload(0x0c)))\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /*\u00b4:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0\u2022.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:*/\r\n    /*                  INTERNAL MINT FUNCTIONS                   */\r\n    /*.\u2022\u00b0:\u00b0.\u00b4+\u02da.*\u00b0.\u02da:*.\u00b4\u2022*.+\u00b0.\u2022\u00b0:\u00b4*.\u00b4\u2022*.\u2022\u00b0.\u2022\u00b0:\u00b0.\u00b4:\u2022\u02da\u00b0.*\u00b0.\u02da:*.\u00b4+\u00b0.\u2022*/\r\n\r\n    /// @dev Mints `amount` tokens to `to`, increasing the total supply.\r\n    ///\r\n    /// Emits a {Transfer} event.\r\n    function _mint(address to, uint256 amount) internal virtual {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            let totalSupplyBefore := sload(_TOTAL_SUPPLY_SLOT)\r\n            let totalSupplyAfter := add(totalSupplyBefore, amount)\r\n            // Revert if the total supply overflows.\r\n            if lt(totalSupplyAfter, totalSupplyBefore) {\r\n                mstore(0x00, 0xe5cfe957) // `TotalSupplyOverflow()`.\r\n                revert(0x1c, 0x04)\r\n            }\r\n            // Store the updated total supply.\r\n            sstore(_TOTAL_SUPPLY_SLOT, totalSupplyAfter)\r\n            // Compute the balance slot and load its value.\r\n            mstore(0x0c, _BALANCE_SLOT_SEED)\r\n            mstore(0x00, to)\r\n            let toBalanceSlot := keccak256(0x0c, 0x20)\r\n            // Add and store the updated balance.\r\n            sstore(toBalanceSlot, add(sload(toBalanceSlot), amount))\r\n            // Emit the {Transfer} event.\r\n            mstore(0x20, amount)\r\n            log3(0x20, 0x20, _TRANSFER_EVENT_SIGNATURE, 0, shr(96, mload(0x0c)))\r\n        }\r\n    }\r\n\r\n    /*\u00b4:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0\u2022.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:*/\r\n    /*                INTERNAL TRANSFER FUNCTIONS                 */\r\n    /*.\u2022\u00b0:\u00b0.\u00b4+\u02da.*\u00b0.\u02da:*.\u00b4\u2022*.+\u00b0.\u2022\u00b0:\u00b4*.\u00b4\u2022*.\u2022\u00b0.\u2022\u00b0:\u00b0.\u00b4:\u2022\u02da\u00b0.*\u00b0.\u02da:*.\u00b4+\u00b0.\u2022*/\r\n\r\n    /// @dev Moves `amount` of tokens from `from` to `to`.\r\n    function _transfer(address from, address to, uint256 amount) internal virtual {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            let from_ := shl(96, from)\r\n            // Compute the balance slot and load its value.\r\n            mstore(0x0c, or(from_, _BALANCE_SLOT_SEED))\r\n            let fromBalanceSlot := keccak256(0x0c, 0x20)\r\n            let fromBalance := sload(fromBalanceSlot)\r\n            // Revert if insufficient balance.\r\n            if gt(amount, fromBalance) {\r\n                mstore(0x00, 0xf4d678b8) // `InsufficientBalance()`.\r\n                revert(0x1c, 0x04)\r\n            }\r\n            // Subtract and store the updated balance.\r\n            sstore(fromBalanceSlot, sub(fromBalance, amount))\r\n            // Compute the balance slot of `to`.\r\n            mstore(0x00, to)\r\n            let toBalanceSlot := keccak256(0x0c, 0x20)\r\n            // Add and store the updated balance of `to`.\r\n            // Will not overflow because the sum of all user balances\r\n            // cannot exceed the maximum uint256 value.\r\n            sstore(toBalanceSlot, add(sload(toBalanceSlot), amount))\r\n            // Emit the {Transfer} event.\r\n            mstore(0x20, amount)\r\n            log3(0x20, 0x20, _TRANSFER_EVENT_SIGNATURE, shr(96, from_), shr(96, mload(0x0c)))\r\n        }\r\n    }\r\n\r\n    /*\u00b4:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0\u2022.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:*/\r\n    /*                INTERNAL ALLOWANCE FUNCTIONS                */\r\n    /*.\u2022\u00b0:\u00b0.\u00b4+\u02da.*\u00b0.\u02da:*.\u00b4\u2022*.+\u00b0.\u2022\u00b0:\u00b4*.\u00b4\u2022*.\u2022\u00b0.\u2022\u00b0:\u00b0.\u00b4:\u2022\u02da\u00b0.*\u00b0.\u02da:*.\u00b4+\u00b0.\u2022*/\r\n\r\n    /// @dev Updates the allowance of `owner` for `spender` based on spent `amount`.\r\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            // Compute the allowance slot and load its value.\r\n            mstore(0x20, spender)\r\n            mstore(0x0c, _ALLOWANCE_SLOT_SEED)\r\n            mstore(0x00, owner)\r\n            let allowanceSlot := keccak256(0x0c, 0x34)\r\n            let allowance_ := sload(allowanceSlot)\r\n            // If the allowance is not the maximum uint256 value.\r\n            if iszero(eq(allowance_, not(0))) {\r\n                // Revert if the amount to be transferred exceeds the allowance.\r\n                if gt(amount, allowance_) {\r\n                    mstore(0x00, 0x13be252b) // `InsufficientAllowance()`.\r\n                    revert(0x1c, 0x04)\r\n                }\r\n                // Subtract and store the updated allowance.\r\n                sstore(allowanceSlot, sub(allowance_, amount))\r\n            }\r\n        }\r\n    }\r\n\r\n    /// @dev Sets `amount` as the allowance of `spender` over the tokens of `owner`.\r\n    ///\r\n    /// Emits a {Approval} event.\r\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            let owner_ := shl(96, owner)\r\n            // Compute the allowance slot and store the amount.\r\n            mstore(0x20, spender)\r\n            mstore(0x0c, or(owner_, _ALLOWANCE_SLOT_SEED))\r\n            sstore(keccak256(0x0c, 0x34), amount)\r\n            // Emit the {Approval} event.\r\n            mstore(0x00, amount)\r\n            log3(0x00, 0x20, _APPROVAL_EVENT_SIGNATURE, shr(96, owner_), shr(96, mload(0x2c)))\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * @notice Simple single owner authorization mixin.\r\n * @author Solady (https://github.com/vectorized/solady/blob/main/src/auth/Ownable.sol)\r\n */\r\nabstract contract Ownable {\r\n    /*\u00b4:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0\u2022.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:*/\r\n    /*                       CUSTOM ERRORS                        */\r\n    /*.\u2022\u00b0:\u00b0.\u00b4+\u02da.*\u00b0.\u02da:*.\u00b4\u2022*.+\u00b0.\u2022\u00b0:\u00b4*.\u00b4\u2022*.\u2022\u00b0.\u2022\u00b0:\u00b0.\u00b4:\u2022\u02da\u00b0.*\u00b0.\u02da:*.\u00b4+\u00b0.\u2022*/\r\n\r\n    /// @dev The caller is not authorized to call the function.\r\n    error Unauthorized();\r\n\r\n    /// @dev The `newOwner` cannot be the zero address.\r\n    error NewOwnerIsZeroAddress();\r\n\r\n    /// @dev The `pendingOwner` does not have a valid handover request.\r\n    error NoHandoverRequest();\r\n\r\n    /*\u00b4:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0\u2022.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:*/\r\n    /*                           EVENTS                           */\r\n    /*.\u2022\u00b0:\u00b0.\u00b4+\u02da.*\u00b0.\u02da:*.\u00b4\u2022*.+\u00b0.\u2022\u00b0:\u00b4*.\u00b4\u2022*.\u2022\u00b0.\u2022\u00b0:\u00b0.\u00b4:\u2022\u02da\u00b0.*\u00b0.\u02da:*.\u00b4+\u00b0.\u2022*/\r\n\r\n    /// @dev The ownership is transferred from `oldOwner` to `newOwner`.\r\n    /// This event is intentionally kept the same as OpenZeppelin's Ownable to be\r\n    /// compatible with indexers and [EIP-173](https://eips.ethereum.org/EIPS/eip-173),\r\n    /// despite it not being as lightweight as a single argument event.\r\n    event OwnershipTransferred(address indexed oldOwner, address indexed newOwner);\r\n\r\n    /// @dev An ownership handover to `pendingOwner` has been requested.\r\n    event OwnershipHandoverRequested(address indexed pendingOwner);\r\n\r\n    /// @dev The ownership handover to `pendingOwner` has been canceled.\r\n    event OwnershipHandoverCanceled(address indexed pendingOwner);\r\n\r\n    /// @dev `keccak256(bytes(\"OwnershipTransferred(address,address)\"))`.\r\n    uint256 private constant _OWNERSHIP_TRANSFERRED_EVENT_SIGNATURE =\r\n        0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0;\r\n\r\n    /// @dev `keccak256(bytes(\"OwnershipHandoverRequested(address)\"))`.\r\n    uint256 private constant _OWNERSHIP_HANDOVER_REQUESTED_EVENT_SIGNATURE =\r\n        0xdbf36a107da19e49527a7176a1babf963b4b0ff8cde35ee35d6cd8f1f9ac7e1d;\r\n\r\n    /// @dev `keccak256(bytes(\"OwnershipHandoverCanceled(address)\"))`.\r\n    uint256 private constant _OWNERSHIP_HANDOVER_CANCELED_EVENT_SIGNATURE =\r\n        0xfa7b8eab7da67f412cc9575ed43464468f9bfbae89d1675917346ca6d8fe3c92;\r\n\r\n    /*\u00b4:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0\u2022.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:*/\r\n    /*                          STORAGE                           */\r\n    /*.\u2022\u00b0:\u00b0.\u00b4+\u02da.*\u00b0.\u02da:*.\u00b4\u2022*.+\u00b0.\u2022\u00b0:\u00b4*.\u00b4\u2022*.\u2022\u00b0.\u2022\u00b0:\u00b0.\u00b4:\u2022\u02da\u00b0.*\u00b0.\u02da:*.\u00b4+\u00b0.\u2022*/\r\n\r\n    /// @dev The owner slot is given by: `not(_OWNER_SLOT_NOT)`.\r\n    /// It is intentionally chosen to be a high value\r\n    /// to avoid collision with lower slots.\r\n    /// The choice of manual storage layout is to enable compatibility\r\n    /// with both regular and upgradeable contracts.\r\n    uint256 private constant _OWNER_SLOT_NOT = 0x8b78c6d8;\r\n\r\n    /// The ownership handover slot of `newOwner` is given by:\r\n    /// ```\r\n    ///     mstore(0x00, or(shl(96, user), _HANDOVER_SLOT_SEED))\r\n    ///     let handoverSlot := keccak256(0x00, 0x20)\r\n    /// ```\r\n    /// It stores the expiry timestamp of the two-step ownership handover.\r\n    uint256 private constant _HANDOVER_SLOT_SEED = 0x389a75e1;\r\n\r\n    /*\u00b4:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0\u2022.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:*/\r\n    /*                     INTERNAL FUNCTIONS                     */\r\n    /*.\u2022\u00b0:\u00b0.\u00b4+\u02da.*\u00b0.\u02da:*.\u00b4\u2022*.+\u00b0.\u2022\u00b0:\u00b4*.\u00b4\u2022*.\u2022\u00b0.\u2022\u00b0:\u00b0.\u00b4:\u2022\u02da\u00b0.*\u00b0.\u02da:*.\u00b4+\u00b0.\u2022*/\r\n\r\n    /// @dev Initializes the owner directly without authorization guard.\r\n    /// This function must be called upon initialization,\r\n    /// regardless of whether the contract is upgradeable or not.\r\n    /// This is to enable generalization to both regular and upgradeable contracts,\r\n    /// and to save gas in case the initial owner is not the caller.\r\n    /// For performance reasons, this function will not check if there\r\n    /// is an existing owner.\r\n    function _initializeOwner(address newOwner) internal virtual {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            // Clean the upper 96 bits.\r\n            newOwner := shr(96, shl(96, newOwner))\r\n            // Store the new value.\r\n            sstore(not(_OWNER_SLOT_NOT), newOwner)\r\n            // Emit the {OwnershipTransferred} event.\r\n            log3(0, 0, _OWNERSHIP_TRANSFERRED_EVENT_SIGNATURE, 0, newOwner)\r\n        }\r\n    }\r\n\r\n    /// @dev Sets the owner directly without authorization guard.\r\n    function _setOwner(address newOwner) internal virtual {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            let ownerSlot := not(_OWNER_SLOT_NOT)\r\n            // Clean the upper 96 bits.\r\n            newOwner := shr(96, shl(96, newOwner))\r\n            // Emit the {OwnershipTransferred} event.\r\n            log3(0, 0, _OWNERSHIP_TRANSFERRED_EVENT_SIGNATURE, sload(ownerSlot), newOwner)\r\n            // Store the new value.\r\n            sstore(ownerSlot, newOwner)\r\n        }\r\n    }\r\n\r\n    /// @dev Throws if the sender is not the owner.\r\n    function _checkOwner() internal view virtual {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            // If the caller is not the stored owner, revert.\r\n            if iszero(eq(caller(), sload(not(_OWNER_SLOT_NOT)))) {\r\n                mstore(0x00, 0x82b42900) // `Unauthorized()`.\r\n                revert(0x1c, 0x04)\r\n            }\r\n        }\r\n    }\r\n\r\n    /// @dev Returns how long a two-step ownership handover is valid for in seconds.\r\n    /// Override to return a different value if needed.\r\n    /// Made internal to conserve bytecode. Wrap it in a public function if needed.\r\n    function _ownershipHandoverValidFor() internal view virtual returns (uint64) {\r\n        return 48 * 3600;\r\n    }\r\n\r\n    /*\u00b4:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0\u2022.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:*/\r\n    /*                  PUBLIC UPDATE FUNCTIONS                   */\r\n    /*.\u2022\u00b0:\u00b0.\u00b4+\u02da.*\u00b0.\u02da:*.\u00b4\u2022*.+\u00b0.\u2022\u00b0:\u00b4*.\u00b4\u2022*.\u2022\u00b0.\u2022\u00b0:\u00b0.\u00b4:\u2022\u02da\u00b0.*\u00b0.\u02da:*.\u00b4+\u00b0.\u2022*/\r\n\r\n    /// @dev Allows the owner to transfer the ownership to `newOwner`.\r\n    function transferOwnership(address newOwner) public payable virtual onlyOwner {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            if iszero(shl(96, newOwner)) {\r\n                mstore(0x00, 0x7448fbae) // `NewOwnerIsZeroAddress()`.\r\n                revert(0x1c, 0x04)\r\n            }\r\n        }\r\n        _setOwner(newOwner);\r\n    }\r\n\r\n    /// @dev Allows the owner to renounce their ownership.\r\n    function renounceOwnership() public payable virtual onlyOwner {\r\n        _setOwner(address(0));\r\n    }\r\n\r\n    /// @dev Request a two-step ownership handover to the caller.\r\n    /// The request will automatically expire in 48 hours (172800 seconds) by default.\r\n    function requestOwnershipHandover() public payable virtual {\r\n        unchecked {\r\n            uint256 expires = block.timestamp + _ownershipHandoverValidFor();\r\n            /// @solidity memory-safe-assembly\r\n            assembly {\r\n                // Compute and set the handover slot to `expires`.\r\n                mstore(0x0c, _HANDOVER_SLOT_SEED)\r\n                mstore(0x00, caller())\r\n                sstore(keccak256(0x0c, 0x20), expires)\r\n                // Emit the {OwnershipHandoverRequested} event.\r\n                log2(0, 0, _OWNERSHIP_HANDOVER_REQUESTED_EVENT_SIGNATURE, caller())\r\n            }\r\n        }\r\n    }\r\n\r\n    /// @dev Cancels the two-step ownership handover to the caller, if any.\r\n    function cancelOwnershipHandover() public payable virtual {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            // Compute and set the handover slot to 0.\r\n            mstore(0x0c, _HANDOVER_SLOT_SEED)\r\n            mstore(0x00, caller())\r\n            sstore(keccak256(0x0c, 0x20), 0)\r\n            // Emit the {OwnershipHandoverCanceled} event.\r\n            log2(0, 0, _OWNERSHIP_HANDOVER_CANCELED_EVENT_SIGNATURE, caller())\r\n        }\r\n    }\r\n\r\n    /// @dev Allows the owner to complete the two-step ownership handover to `pendingOwner`.\r\n    /// Reverts if there is no existing ownership handover requested by `pendingOwner`.\r\n    function completeOwnershipHandover(address pendingOwner) public payable virtual onlyOwner {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            // Compute and set the handover slot to 0.\r\n            mstore(0x0c, _HANDOVER_SLOT_SEED)\r\n            mstore(0x00, pendingOwner)\r\n            let handoverSlot := keccak256(0x0c, 0x20)\r\n            // If the handover does not exist, or has expired.\r\n            if gt(timestamp(), sload(handoverSlot)) {\r\n                mstore(0x00, 0x6f5e8818) // `NoHandoverRequest()`.\r\n                revert(0x1c, 0x04)\r\n            }\r\n            // Set the handover slot to 0.\r\n            sstore(handoverSlot, 0)\r\n        }\r\n        _setOwner(pendingOwner);\r\n    }\r\n\r\n    /*\u00b4:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0\u2022.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:*/\r\n    /*                   PUBLIC READ FUNCTIONS                    */\r\n    /*.\u2022\u00b0:\u00b0.\u00b4+\u02da.*\u00b0.\u02da:*.\u00b4\u2022*.+\u00b0.\u2022\u00b0:\u00b4*.\u00b4\u2022*.\u2022\u00b0.\u2022\u00b0:\u00b0.\u00b4:\u2022\u02da\u00b0.*\u00b0.\u02da:*.\u00b4+\u00b0.\u2022*/\r\n\r\n    /// @dev Returns the owner of the contract.\r\n    function owner() public view virtual returns (address result) {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            result := sload(not(_OWNER_SLOT_NOT))\r\n        }\r\n    }\r\n\r\n    /// @dev Returns the expiry timestamp for the two-step ownership handover to `pendingOwner`.\r\n    function ownershipHandoverExpiresAt(address pendingOwner)\r\n        public\r\n        view\r\n        virtual\r\n        returns (uint256 result)\r\n    {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            // Compute the handover slot.\r\n            mstore(0x0c, _HANDOVER_SLOT_SEED)\r\n            mstore(0x00, pendingOwner)\r\n            // Load the handover slot.\r\n            result := sload(keccak256(0x0c, 0x20))\r\n        }\r\n    }\r\n\r\n    /*\u00b4:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0\u2022.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:*/\r\n    /*                         MODIFIERS                          */\r\n    /*.\u2022\u00b0:\u00b0.\u00b4+\u02da.*\u00b0.\u02da:*.\u00b4\u2022*.+\u00b0.\u2022\u00b0:\u00b4*.\u00b4\u2022*.\u2022\u00b0.\u2022\u00b0:\u00b0.\u00b4:\u2022\u02da\u00b0.*\u00b0.\u02da:*.\u00b4+\u00b0.\u2022*/\r\n\r\n    /// @dev Marks a function as only callable by the owner.\r\n    modifier onlyOwner() virtual {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n}\r\n\r\n/**\r\n * @notice Interface for UniV2 router.\r\n */\r\ninterface IDexRouter {\r\n\tfunction factory() external pure returns (address);\r\n\tfunction WETH() external pure returns (address);\r\n\tfunction addLiquidityETH(address token, uint amountTokenDesired, uint amountTokenMin, uint amountETHMin, address to, uint deadline) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n\tfunction swapExactTokensForETHSupportingFeeOnTransferTokens(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline) external;\r\n}\r\n\r\n/**\r\n * @notice The prodigy bot utility token.\r\n * @author ProdigyBot\r\n */\r\ncontract ProdigyBot is ERC20, Ownable {\r\n\r\n\tstruct FeeSettings {\r\n\t\tuint8 buyLiqFee;\r\n\t\tuint8 buyDevFee;\r\n\t\tuint8 sellLiqFee;\r\n\t\tuint8 sellDevFee;\r\n\t}\r\n\r\n\tbool public autoLiqActive = true;\r\n\tbool public swapActive = true;\r\n\tbool private _inSwap = false;\r\n\taddress public autoliqReceiver;\r\n\taddress public devFeeReceiver;\r\n\taddress private _pair;\r\n\tbool public limited;\r\n\tuint256 public launchBlock;\r\n\tuint256 private _maxTx;\r\n\tuint256 private _swapTrigger;\r\n\tuint256 private _swapAmount;\r\n\tFeeSettings public fees;\r\n\taddress private _router;\r\n\tmapping (address => bool) private _taxExempt;\r\n\tmapping (address => bool) private _silicon;\r\n\r\n\terror ExceedsLimits();\r\n\terror ReentrantSwap();\r\n\r\n\tmodifier notSwapping {\r\n\t\tif (_inSwap) {\r\n\t\t\trevert ReentrantSwap();\r\n\t\t}\r\n\t\t_inSwap = true;\r\n\t\t_;\r\n\t\t_inSwap = false;\r\n\t}\r\n\r\n\tconstructor(address router) {\r\n\t\t// Init the owner.\r\n\t\t_initializeOwner(msg.sender);\r\n\t\t/**\r\n\t\t * Init the total supply.\r\n\t\t * See implementation in ERC20 contract above.\r\n\t\t * This is only called in this constructor.\r\n\t\t * It cannot be called againt.\r\n\t\t */\r\n\t\t_mint(msg.sender, 1_000_000 ether);\r\n\t\t_router = router;\r\n\t\t// Approve for contract swaps and initial liq add.\r\n\t\t_approve(address(this), router, type(uint256).max);\r\n\t\t_approve(msg.sender, router, type(uint256).max);\r\n\t\t// Initial fees.\r\n\t\t_taxExempt[msg.sender] = true;\r\n\t\t_taxExempt[address(this)] = true;\r\n\t\tfees.buyDevFee = 3;\r\n\t\tfees.buyLiqFee = 2;\r\n\t\tfees.sellDevFee = 3;\r\n\t\tfees.sellLiqFee = 2;\r\n\t\t// Initial swapback value.\r\n\t\t_swapAmount = totalSupply();\r\n\t\t_swapTrigger = totalSupply() / 1000;\r\n\t}\r\n\r\n\tfunction name() public pure override returns (string memory) {\r\n\t\treturn \"Prodigy Bot\";\r\n\t}\r\n\r\n    function symbol() public pure override returns (string memory) {\r\n\t\treturn \"PRO\";\r\n\t}\r\n\r\n\tfunction release(address pair) external onlyOwner {\r\n\t\trequire(launchBlock == 0, \"Already launched!\");\r\n\t\tlaunchBlock = block.number;\r\n\t\t_pair = pair;\r\n\t}\r\n\r\n\t/**\r\n\t * @notice While normaly trading through router uses `transferFrom`, direct trades with pair use `transfer`.\r\n\t * Thus, limits and tax status must be checked on both.\r\n\t * While there is some duplicity, transfer must not update allowances, but transferFrom must.\r\n\t */\r\n\tfunction transfer(address to, uint256 amount) public override returns (bool) {\r\n\t\t_checkForLimits(msg.sender, to, amount);\r\n\r\n\t\t// Transfer with fee.\r\n\t\tbool isEitherBot = _silicon[msg.sender] || _silicon[to];\r\n\t\tif (isEitherBot || _hasFee(msg.sender, to)) {\r\n\t\t\tuint256 fee = _feeAmount(msg.sender == _pair, amount, isEitherBot);\r\n\t\t\tif (fee > 0) {\r\n\t\t\t\tunchecked {\r\n\t\t\t\t\t// Fee is always less than amount and at most 10% of it.\r\n\t\t\t\t\tamount = amount - fee;\r\n\t\t\t\t}\r\n\t\t\t\tsuper._transfer(msg.sender, address(this), fee);\r\n\t\t\t}\r\n\t\t\tif (to == _pair) {\r\n\t\t\t\t_checkPerformSwap();\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Base class ERC20 checks for balance.\r\n\t\treturn super.transfer(to, amount);\r\n\t}\r\n\r\n\tfunction transferFrom(address from, address to, uint256 amount) public override returns (bool) {\r\n\t\t_checkForLimits(from, to, amount);\r\n\r\n\t\t// Transfer from with fee.\r\n\t\tbool isEitherBot = _silicon[from] || _silicon[to];\r\n\t\tif (isEitherBot || _hasFee(from, to)) {\r\n\t\t\t_transferFrom(from, to, amount, isEitherBot);\r\n\t\t\treturn true;\r\n\t\t}\r\n\r\n\t\t// Regular non taxed transferFrom. Straight from base class.\r\n\t\t// Base class ERC20 checks for allowance and balance of sender.\r\n\t\t// It also updates the allowance.\r\n\t\treturn super.transferFrom(from, to, amount);\r\n\t}\r\n\r\n\tfunction _transferFrom(address from, address to, uint256 amount, bool isEitherBot) private {\r\n\t\t/**\r\n\t\t * In the case of a transfer from with fees, we deal here with approval.\r\n\t\t * Since there are actually two transfers, but we want one read and one allowance update.\r\n\t\t */\r\n\t\tuint256 allowed = allowance(from, msg.sender);\r\n\t\tif (allowance(from, msg.sender) < amount) {\r\n\t\t\trevert InsufficientAllowance();\r\n\t\t}\r\n\t\t// Do not spend allowance if it's set to uint256 max.\r\n\t\tif (allowed != type(uint256).max) {\r\n\t\t\t_spendAllowance(from, msg.sender, amount);\r\n\t\t}\r\n\r\n\t\tuint256 fee = _feeAmount(from == _pair, amount, isEitherBot);\r\n\t\tif (fee > 0) {\r\n\t\t\tunchecked {\r\n\t\t\t\t// Fee is always less than amount and at most 10% of it.\r\n\t\t\t\tamount = amount - fee;\r\n\t\t\t}\r\n\t\t\t/**\r\n\t\t\t * Fee is a separate transfer event.\r\n\t\t\t * This costs extra gas but the events must report all individual token transactions.\r\n\t\t\t * This also makes etherscan keep proper track of balances and is a good practise.\r\n\t\t\t */\r\n\t\t\tsuper._transfer(from, address(this), fee);\r\n\t\t}\r\n\t\tif (to == _pair) {\r\n\t\t\t_checkPerformSwap();\r\n\t\t}\r\n\t\tsuper._transfer(from, to, amount);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Wallet and tx limitations for launch.\r\n\t */\r\n\tfunction _checkForLimits(address sender, address recipient, uint256 amount) private view {\r\n\t\tif (limited && sender != owner() && sender != address(this)) {\r\n\t\t\t// Same max for tx and wallet.\r\n\t\t\tuint256 max = _maxTx;\r\n\t\t\tbool recipientImmune = _isImmuneToWalletLimit(recipient);\r\n\t\t\tif (amount > max || (!recipientImmune && balanceOf(recipient) + amount > max)) {\r\n\t\t\t\trevert ExceedsLimits();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Check whether transaction is subject to AMM trading fee.\r\n\t */\r\n\tfunction _hasFee(address sender, address recipient) private view returns (bool) {\r\n\t\taddress pair = _pair;\r\n\t\treturn (sender == pair || recipient == pair || launchBlock == 0) && !_taxExempt[sender] && !_taxExempt[recipient];\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Calculate fee amount for an AMM trade.\r\n\t */\r\n\tfunction _feeAmount(bool isBuy, uint256 amount, bool isEitherBot) private view returns (uint256) {\r\n\t\tif (amount == 0) {\r\n\t\t\treturn 0;\r\n\t\t}\r\n\t\tuint256 feePct = _getFeePct(isBuy, isEitherBot);\r\n\t\tif (feePct > 0) {\r\n\t\t\treturn amount * feePct / 100;\r\n\t\t}\r\n\t\treturn 0;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Check whether to perform a contract swap.\r\n\t */\r\n\tfunction _checkPerformSwap() private {\r\n\t\tuint256 contractBalance = balanceOf(address(this));\r\n\t\tif (swapActive && !_inSwap && contractBalance >= _swapTrigger) {\r\n\t\t\tuint256 swappingAmount = _swapAmount;\r\n\t\t\tif (swappingAmount > 0) {\r\n\t\t\t\tswappingAmount = swappingAmount > contractBalance ? contractBalance : swappingAmount;\r\n\t\t\t\t_swapAndLiq(swappingAmount);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Calculate trade fee percent.\r\n\t */\r\n\tfunction _getFeePct(bool isBuy, bool isEitherBot) private view returns (uint256) {\r\n\t\t// For MEV bots and such.\r\n\t\tif (isEitherBot) {\r\n\t\t\treturn isBuy ? 25 : 80;\r\n\t\t}\r\n\t\t// Before launch.\r\n\t\tif (launchBlock == 0) {\r\n\t\t\treturn isBuy ? 25 : 66;\r\n\t\t}\r\n\t\t// Buy fees.\r\n\t\tif (isBuy) {\r\n\t\t\treturn fees.buyDevFee + fees.buyLiqFee;\r\n\t\t}\r\n\t\t// Sell fees.\r\n\t\treturn fees.sellDevFee + fees.sellLiqFee;\r\n\t}\r\n\r\n\t/**\r\n\t * @notice These special addresses are immune to wallet token limits even during limited.\r\n\t */\r\n\tfunction _isImmuneToWalletLimit(address receiver) private view returns (bool) {\r\n\t\treturn receiver == address(this)\r\n\t\t\t|| receiver == address(0)\r\n\t\t\t|| receiver == address(0xdead)\r\n\t\t\t|| receiver == _pair\r\n\t\t\t|| receiver == owner();\r\n\t}\r\n\r\n\tfunction _swapAndLiq(uint256 swapAmount) private notSwapping {\r\n\t\t// If this is active, sales that lead to swaps will add some liquidity from the taxed tokens.\r\n\t\tif (autoLiqActive) {\r\n\t\t\tuint256 total = fees.sellDevFee + fees.sellLiqFee;\r\n\t\t\tuint256 forLiquidity = (swapAmount * fees.sellLiqFee / total) / 2;\r\n\t\t\tuint256 balanceBefore = address(this).balance;\r\n\t\t\t_swap(swapAmount - forLiquidity);\r\n\t\t\tuint256 balanceChange = address(this).balance - balanceBefore;\r\n\t\t\t_addLiquidity(forLiquidity, balanceChange * forLiquidity / swapAmount);\r\n\t\t} else {\r\n\t\t\t_swap(swapAmount);\r\n\t\t}\r\n\t\t_collectDevProceedings();\r\n\t}\r\n\r\n\treceive() external payable {}\r\n\r\n\tfunction _swap(uint256 amount) private {\r\n\t\taddress[] memory path = new address[](2);\r\n\t\tpath[0] = address(this);\r\n\t\tIDexRouter router = IDexRouter(_router);\r\n\t\tpath[1] = router.WETH();\r\n\t\trouter.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n\t\t\tamount,\r\n\t\t\t0,\r\n\t\t\tpath,\r\n\t\t\taddress(this),\r\n\t\t\tblock.timestamp\r\n\t\t);\r\n\t}\r\n\r\n\tfunction _addLiquidity(uint256 tokens, uint256 eth) private {\r\n\t\tIDexRouter(_router).addLiquidityETH{value: eth}(\r\n\t\t\taddress(this),\r\n\t\t\ttokens,\r\n\t\t\t0,\r\n\t\t\t0,\r\n\t\t\tautoliqReceiver,\r\n\t\t\tblock.timestamp\r\n\t\t);\r\n\t}\r\n\r\n\t/**\r\n\t * @notice Sends fees accrued to developer wallet for server, development, and marketing expenses.\r\n\t */\r\n\tfunction _collectDevProceedings() private {\r\n\t\tdevFeeReceiver.call{value: address(this).balance}(\"\");\r\n\t}\r\n\r\n\t/**\r\n\t * @notice Control automated malicious value subtracting bots such as MEV so they cannot profit out of the token.\r\n\t */\r\n\tfunction isSiliconBased(address silly, bool isIt) external onlyOwner {\r\n\t\trequire(!isIt || launchBlock == 0 || block.number - launchBlock < 14000, \"Can only be done during launch.\");\r\n\t\t_silicon[silly] = isIt;\r\n\t}\r\n\r\n\tfunction manySuchCases(address[] calldata malevolent) external onlyOwner {\r\n\t\trequire(launchBlock == 0 || block.number - launchBlock < 14000, \"Can only be done during launch.\");\r\n\t\tfor (uint256 i = 0; i < malevolent.length; i++) {\r\n\t\t\t_silicon[malevolent[i]] = true;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @notice Whether the transactions and wallets are limited or not.\r\n\t */\r\n\tfunction setIsLimited(bool isIt) external onlyOwner {\r\n\t\tlimited = isIt;\r\n\t}\r\n\r\n\tfunction setBuyConfig(uint8 buyLiqFee, uint8 buyDevFee) external onlyOwner {\r\n\t\trequire(buyLiqFee + buyDevFee < 11, \"Cannot set above 10%\");\r\n\t\tfees.buyLiqFee = buyLiqFee;\r\n\t\tfees.buyDevFee = buyDevFee;\r\n\t}\r\n\r\n\tfunction SetSellConfig(uint8 sellLiqFee, uint8 sellDevFee) external onlyOwner {\r\n\t\trequire(sellLiqFee + sellDevFee < 11, \"Cannot set above 10%\");\r\n\t\tfees.sellLiqFee = sellLiqFee;\r\n\t\tfees.sellDevFee = sellDevFee;\r\n\t}\r\n\r\n\tfunction setAutoliqActive(bool isActive) external onlyOwner {\r\n\t\tautoLiqActive = isActive;\r\n\t}\r\n\r\n\tfunction setAutoliqReceiver(address receiver) external onlyOwner {\r\n\t\tautoliqReceiver = receiver;\r\n\t}\r\n\r\n\tfunction setDevFeeReceiver(address receiver) external onlyOwner {\r\n\t\trequire(receiver != address(0), \"Cannot set the zero address.\");\r\n\t\tdevFeeReceiver = receiver;\r\n\t}\r\n\r\n\tfunction setSwapActive(bool canSwap) external onlyOwner {\r\n\t\tswapActive = canSwap;\r\n\t}\r\n\r\n\tfunction setTaxExempt(address contributor, bool isExempt) external onlyOwner {\r\n\t\t_taxExempt[contributor] = isExempt;\r\n\t}\r\n\r\n\tfunction setMaxTx(uint256 newMax) external onlyOwner {\r\n\t\trequire(newMax >= totalSupply() / 1000, \"Max TX must be at least 0.1%!\");\r\n\t\t_maxTx = newMax;\r\n\t}\r\n\r\n\tfunction setSwapAmount(uint256 newAmount) external onlyOwner {\r\n\t\trequire(newAmount > 0, \"Amount cannot be 0, use setSwapActive to false instead.\");\r\n\t\trequire(newAmount <= totalSupply() / 100, \"Swap amount cannot be over 1% of the supply.\");\r\n\t\t_swapAmount = newAmount;\r\n\t}\r\n\r\n\tfunction setSwapTrigger(uint256 newAmount) external onlyOwner {\r\n\t\trequire(newAmount > 0, \"Amount cannot be 0, use setSwapActive to false instead.\");\r\n\t\t_swapTrigger = newAmount;\r\n\t}\r\n\r\n\tfunction whatIsThis(uint256 wahoo, uint256 bading) external view returns (uint256) {\r\n\t\treturn wahoo + bading;\r\n\t}\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AllowanceOverflow\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AllowanceUnderflow\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ExceedsLimits\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientAllowance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NewOwnerIsZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoHandoverRequest\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrantSwap\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TotalSupplyOverflow\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Unauthorized\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pendingOwner\",\"type\":\"address\"}],\"name\":\"OwnershipHandoverCanceled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pendingOwner\",\"type\":\"address\"}],\"name\":\"OwnershipHandoverRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"sellLiqFee\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"sellDevFee\",\"type\":\"uint8\"}],\"name\":\"SetSellConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"result\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoLiqActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoliqReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"result\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cancelOwnershipHandover\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pendingOwner\",\"type\":\"address\"}],\"name\":\"completeOwnershipHandover\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"difference\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devFeeReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fees\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"buyLiqFee\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"buyDevFee\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"sellLiqFee\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"sellDevFee\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"difference\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"silly\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isIt\",\"type\":\"bool\"}],\"name\":\"isSiliconBased\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limited\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"malevolent\",\"type\":\"address[]\"}],\"name\":\"manySuchCases\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"result\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pendingOwner\",\"type\":\"address\"}],\"name\":\"ownershipHandoverExpiresAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"result\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"}],\"name\":\"release\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"requestOwnershipHandover\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"}],\"name\":\"setAutoliqActive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"setAutoliqReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"buyLiqFee\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"buyDevFee\",\"type\":\"uint8\"}],\"name\":\"setBuyConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"setDevFeeReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"isIt\",\"type\":\"bool\"}],\"name\":\"setIsLimited\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newMax\",\"type\":\"uint256\"}],\"name\":\"setMaxTx\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"canSwap\",\"type\":\"bool\"}],\"name\":\"setSwapActive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newAmount\",\"type\":\"uint256\"}],\"name\":\"setSwapAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newAmount\",\"type\":\"uint256\"}],\"name\":\"setSwapTrigger\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contributor\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isExempt\",\"type\":\"bool\"}],\"name\":\"setTaxExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"result\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"wahoo\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bading\",\"type\":\"uint256\"}],\"name\":\"whatIsThis\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "ProdigyBot", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000007a250d5630b4cf539739df2c5dacb4c659f2488d", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://6f4fa484a56cdf1496c666e8d983fceb9739de4b29fbd8088643726add35a38b"}