{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\n// solhint-disable-next-line compiler-version\\npragma solidity >=0.4.24 <0.8.0;\\n\\nimport \\\"../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || _isConstructor() || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /// @dev Returns true if and only if the function is running in the constructor\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IErc20MessageBroker.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.12 <0.8.20;\\npragma abicoder v2;\\n\\nstruct CCIPBroker {\\n    uint64 sourceChainSelector;\\n    address receiverContract;\\n    bool allowMessagesTo;\\n    bool allowMessagesFrom;\\n}\\n\\ninterface IErc20MessageBroker  {\\n    function sendMessage( \\n        bytes32 token,\\n        uint256 amount,\\n        uint64 destChainId,\\n        address depositor,\\n        address recipient) external payable returns (bytes32);\\n    function getFee(bytes32 token,\\n        uint256 amount,\\n        uint64 destChainId,\\n        address recipient) external returns (uint256); \\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IMintBurnToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.6;\\n\\ninterface IMintBurnToken {\\n    function mint(address account, uint256 amount) external;\\n\\n    function burn(address account, uint256 amount) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IWormhole.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.12 <0.8.0;\\npragma abicoder v2;\\n\\ninterface IWormhole {\\n    struct VM {\\n        uint8 version;\\n        uint32 timestamp;\\n        uint32 nonce;\\n        uint16 emitterChainId;\\n        bytes32 emitterAddress;\\n        uint64 sequence;\\n        uint8 consistencyLevel;\\n        bytes payload;\\n        uint32 guardianSetIndex;\\n        Signature[] signatures;\\n        bytes32 hash;\\n    }\\n\\n    struct Signature {\\n        bytes32 r;\\n        bytes32 s;\\n        uint8 v;\\n        uint8 guardianIndex;\\n    }\\n\\n    function parseAndVerifyVM(bytes calldata encodedVM)\\n        external\\n        view\\n        returns (\\n            VM memory vm,\\n            bool valid,\\n            string memory reason\\n        );\\n\\n    function publishMessage(\\n        uint32 nonce,\\n        bytes memory payload,\\n        uint8 consistencyLevel\\n    ) external payable returns (uint64 sequence);\\n}\\n\"\r\n    },\r\n    \"contracts/LnAdminableContract.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.12 <= 0.8.19;\\n\\ncontract LnAdminableContract \\n{    \\n    event CandidateChanged(address oldCandidate, address newCandidate);\\n    event AdminChanged(address oldAdmin, address newAdmin);\\n\\n    address public admin;\\n    address public candidate;\\n\\n    function setCandidate(address _candidate) external onlyAdmin {\\n        address old = candidate;\\n        candidate = _candidate;\\n        emit CandidateChanged(old, candidate);\\n    }\\n\\n    function becomeAdmin() external {\\n        require(msg.sender == candidate, \\\"LnAdminUpgradeable: only candidate can become admin\\\");\\n        address old = admin;\\n        admin = candidate;\\n        emit AdminChanged(old, admin);\\n    }\\n\\n    modifier onlyAdmin {\\n        require((msg.sender == admin), \\\"LnAdminUpgradeable: only the contract admin can perform this action\\\");\\n        _;\\n    }\\n}\"\r\n    },\r\n    \"contracts/LnErc20Bridge.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.6;\\npragma abicoder v2;\\n\\nimport \\\"./interfaces/IMintBurnToken.sol\\\";\\nimport \\\"./interfaces/IWormhole.sol\\\";\\nimport \\\"./upgradeable/LnAdminUpgradeable.sol\\\";\\nimport \\\"./interfaces/IErc20MessageBroker.sol\\\";\\n\\n/**\\n * @title LnErc20Bridge\\n *\\n * @dev An upgradeable contract for moving ERC20 tokens across blockchains. It makes use of the\\n * Wormhole messaging functionality for verifying deposit proofs. Before Wormhole was integrated,\\n * the contract uses a centralized relayer for deposit verification.\\n *\\n * @dev The bridge can operate in two different modes for each token: transfer mode and mint/burn\\n * mode, depending on the nature of the token.\\n *\\n * @dev Note that transaction hashes shall NOT be used for re-entrance prevention as doing\\n * so will result in false negatives when multiple transfers are made in a single\\n * transaction (with the use of contracts).\\n *\\n * @dev Chain IDs in this contract currently refer to the ones introduced in EIP-155. However,\\n * a list of custom IDs might be used instead when non-EVM compatible chains are added.\\n */\\ncontract LnErc20Bridge is LnAdminUpgradeable {\\n    // using SafeERC20 for IERC20;\\n    /**\\n     * These events are no longer used. Archiving them here for reference but they won't show up in\\n     * ABI. You need to manually edit the ABI if you want to index old events in subgraphs, for\\n     * example.\\n\\n    event TokenDeposited(\\n        uint256 srcChainId,\\n        uint256 destChainId,\\n        uint256 depositId,\\n        bytes32 depositor,\\n        bytes32 recipient,\\n        bytes32 currency,\\n        uint256 amount\\n     );\\n\\n    event TokenDeposited(\\n        uint256 srcChainId,\\n        uint256 destChainId,\\n        uint256 depositId,\\n        bytes32 depositor,\\n        bytes32 recipient,\\n        bytes32 currency,\\n        uint256 amount,\\n        uint64 wormholeSequence\\n     );\\n\\n    event TokenWithdrawn(\\n        uint256 srcChainId,\\n        uint256 destChainId,\\n        uint256 depositId,\\n        address depositor,\\n        address recipient,\\n        bytes32 currency,\\n        uint256 amount\\n    );\\n     * event ForcedWithdrawal(uint256 srcChainId, uint256 depositId, address actualRecipient);\\n     * event RelayerChanged(address oldRelayer, address newRelayer);\\n     */\\n\\n    event TokenDeposited(\\n        uint256 srcChainId,\\n        uint256 destChainId,\\n        uint256 depositId,\\n        bytes32 depositor,\\n        bytes32 recipient,\\n        bytes32 currency,\\n        uint256 amount\\n     );\\n\\n    event TokenDeposited(\\n        uint256 srcChainId,\\n        uint256 destChainId,\\n        uint256 depositId,\\n        bytes32 depositor,\\n        bytes32 recipient,\\n        bytes32 currency,\\n        uint256 amount,\\n        uint64 wormholeSequence\\n     );\\n\\n    event TokenWithdrawn(\\n        uint256 srcChainId,\\n        uint256 destChainId,\\n        uint256 depositId,\\n        bytes32 depositor,\\n        bytes32 recipient,\\n        bytes32 currency,\\n        uint256 amount\\n    );\\n\\n    event TokenDeposited(\\n        uint256 srcChainId,\\n        uint256 destChainId,\\n        bytes32 depositId,\\n        address depositor,\\n        address recipient,\\n        bytes32 currency,\\n        uint256 amount\\n    );\\n\\n    event TokenWithdrawn(\\n        uint256 srcChainId,\\n        uint256 destChainId,\\n        bytes32 depositId,\\n        address depositor,\\n        address recipient,\\n        bytes32 currency,\\n        uint256 amount\\n    );\\n\\n    event TokenAdded(bytes32 tokenKey, address tokenAddress, uint8 lockType);\\n    event TokenRemoved(bytes32 tokenKey);\\n    event ChainSupportForTokenAdded(bytes32 tokenKey, uint256 chainId);\\n    event ChainSupportForTokenDropped(bytes32 tokenKey, uint256 chainId);\\n    event WormholeSetup(address coreContract, uint8 consistencyLevel);\\n    event BridgeAddressForChainUpdated(uint256 chainId, address bridgeAddress);\\n    event WormholeNetworkIdUpdated(uint256 chainId, uint16 wormholeNetworkId);\\n    \\n    struct TokenInfo {\\n        address tokenAddress;\\n        uint8 lockType;\\n    }  \\n\\n    //.DEPRECATED\\n    struct WormholeConfig {\\n        IWormhole coreContract;\\n        uint8 consistencyLevel;\\n    }\\n\\n    modifier onlyWithdrawThroughMessageBroker(){ \\n        require(msg.sender == address(erc20MessageBroker) && address(erc20MessageBroker) != address(0), \\\"Only registered message broker can withdraw\\\");\\n        _;\\n    }\\n\\n\\n    uint256 public currentChainId;\\n    address private DEPRECATED_DO_NOT_USE_0; //.DEPRECATED\\n\\n    uint256 public depositCount; //.DEPRECATED\\n    mapping(bytes32 => TokenInfo) public tokenInfos;\\n    mapping(bytes32 => mapping(uint256 => bool)) public tokenSupportedOnChain;\\n    mapping(uint256 => mapping(uint256 => bool)) public withdrawnDeposits; //.DEPRECATED \\n\\n    bytes32 private DEPRECATED_DO_NOT_USE_1; //.DEPRECATED\\n\\n    WormholeConfig private wormhole; //.DEPRECATED\\n    IErc20MessageBroker private erc20MessageBroker; //.ADDED  \\n    mapping(uint256 => bytes32) public bridgeContractsByChainId; //.DEPRECATED\\n    mapping(uint256 => uint16) public wormholeNetworkIdsByChainId; //.DEPRECATED\\n\\n    uint8 public constant TOKEN_LOCK_TYPE_TRANSFER = 1;\\n    uint8 public constant TOKEN_LOCK_TYPE_MINT_BURN = 2;\\n\\n    bytes4 private constant TRANSFER_SELECTOR = bytes4(keccak256(bytes(\\\"transfer(address,uint256)\\\")));\\n    bytes4 private constant TRANSFERFROM_SELECTOR = bytes4(keccak256(bytes(\\\"transferFrom(address,address,uint256)\\\")));\\n\\n    bool private paused;\\n    modifier notPaused(){\\n        require(msg.sender == admin || !paused, \\\"Contract is currently paused\\\");\\n        _;\\n    }\\n\\n    function unpause() external onlyAdmin{\\n        paused = false;\\n    }\\n\\n    function pause() external onlyAdmin{\\n        paused = true;\\n    }\\n\\n    function getTokenAddress(bytes32 tokenKey) public view returns (address) {\\n        return tokenInfos[tokenKey].tokenAddress;\\n    }\\n\\n    function getTokenLockType(bytes32 tokenKey) public view returns (uint8) {\\n        return tokenInfos[tokenKey].lockType;\\n    }\\n\\n    function isTokenSupportedOnChain(bytes32 tokenKey, uint256 chainId) public view returns (bool) {\\n        return tokenSupportedOnChain[tokenKey][chainId];\\n    }\\n\\n    function __LnErc20Bridge_init(address _admin) public initializer {\\n        __LnAdminUpgradeable_init(_admin);\\n\\n        uint256 chainId;\\n        assembly {\\n            chainId := chainid()\\n        }\\n        currentChainId = chainId;\\n    }\\n    \\n    function setUpCCIP(address _erc20MessageBroker) external onlyAdmin\\n    {\\n        erc20MessageBroker = IErc20MessageBroker(_erc20MessageBroker);\\n    }\\n\\n    function addToken(\\n        bytes32 tokenKey,\\n        address tokenAddress,\\n        uint8 lockType\\n        \\n    ) external onlyAdmin {\\n        require(tokenAddress != address(0), \\\"LnErc20Bridge: zero address\\\");\\n        require(\\n            lockType == TOKEN_LOCK_TYPE_TRANSFER || lockType == TOKEN_LOCK_TYPE_MINT_BURN,\\n            \\\"LnErc20Bridge: unknown token lock type\\\"\\n        );\\n\\n        tokenInfos[tokenKey] = TokenInfo({tokenAddress: tokenAddress, lockType: lockType});\\n        emit TokenAdded(tokenKey, tokenAddress, lockType);\\n    }\\n\\n    function removeToken(bytes32 tokenKey) external onlyAdmin {\\n        require(tokenInfos[tokenKey].tokenAddress != address(0), \\\"LnErc20Bridge: token does not exists\\\");\\n        delete tokenInfos[tokenKey];\\n        emit TokenRemoved(tokenKey);\\n    }\\n\\n    function addChainSupportForToken(bytes32 tokenKey, uint256 chainId) external onlyAdmin {\\n        require(!tokenSupportedOnChain[tokenKey][chainId], \\\"LnErc20Bridge: already supported\\\");\\n        tokenSupportedOnChain[tokenKey][chainId] = true;\\n        emit ChainSupportForTokenAdded(tokenKey, chainId);\\n    }\\n\\n    function dropChainSupportForToken(bytes32 tokenKey, uint256 chainId) external onlyAdmin {\\n        require(tokenSupportedOnChain[tokenKey][chainId], \\\"LnErc20Bridge: not supported\\\");\\n        tokenSupportedOnChain[tokenKey][chainId] = false;\\n        emit ChainSupportForTokenDropped(tokenKey, chainId);\\n    }\\n\\n    function deposit(\\n        bytes32 token,\\n        uint256 amount,\\n        uint64 destChainId,\\n        address recipient\\n    ) external payable notPaused {\\n        TokenInfo memory tokenInfo = tokenInfos[token];\\n        require(tokenInfo.tokenAddress != address(0), \\\"LnErc20Bridge: token not found\\\");\\n        require(amount > 0, \\\"LnErc20Bridge: amount must be positive\\\");\\n        require(destChainId != currentChainId, \\\"LnErc20Bridge: dest must be different from src\\\");\\n        require(isTokenSupportedOnChain(token, destChainId), \\\"LnErc20Bridge: token not supported on chain\\\");\\n        require(recipient != address(0), \\\"LnErc20Bridge: zero address\\\");\\n        if (tokenInfo.lockType == TOKEN_LOCK_TYPE_TRANSFER) {\\n            safeTransferFrom(tokenInfo.tokenAddress, msg.sender, address(this), amount);\\n        } else if (tokenInfo.lockType == TOKEN_LOCK_TYPE_MINT_BURN) {\\n            IMintBurnToken(tokenInfo.tokenAddress).burn(msg.sender, amount);\\n        } else {\\n            require(false, \\\"LnErc20Bridge: unknown token lock type\\\");\\n        }       \\n        uint256 estimatedTotalCost = erc20MessageBroker.getFee(token, amount, destChainId, recipient); \\n        require(msg.value >= estimatedTotalCost, \\\"Insufficient funds sent\\\");\\n        // Send the CCIP message through the router and store the returned CCIP message ID\\n        bytes32 messageId = erc20MessageBroker.sendMessage{value: msg.value}(token, amount, destChainId, msg.sender, recipient); \\n        emit TokenDeposited(\\n            currentChainId,\\n            destChainId,\\n            messageId,\\n            msg.sender,\\n            recipient,\\n            token,\\n            amount\\n        );\\n    }\\n\\n    function withdraw(\\n            bytes32 messageId,\\n            uint256 srcChainId,\\n            uint256 destChainId,\\n            address depositor,\\n            address recipient,\\n            bytes32 currency,\\n            uint256 amount) external onlyWithdrawThroughMessageBroker notPaused\\n    {\\n        TokenInfo memory tokenInfo = tokenInfos[currency];\\n        require(tokenInfo.tokenAddress != address(0), \\\"LnErc20Bridge: token not found\\\");        \\n        // Transfer the required funds to the destination if the bridge is configured as 'TOKEN_LOCK_TYPE_TRANSFER' and therefore the funds are retrievable on the contract\\n        if (tokenInfo.lockType == TOKEN_LOCK_TYPE_TRANSFER) {\\n            safeTransfer(tokenInfo.tokenAddress, recipient, amount);\\n        } \\n        // Mint the required funds to the destination if the bridge is configured as 'TOKEN_LOCK_TYPE_MINT_BURN'\\n        else if (tokenInfo.lockType == TOKEN_LOCK_TYPE_MINT_BURN) {\\n            IMintBurnToken(tokenInfo.tokenAddress).mint(recipient, amount);\\n        } else {\\n            require(false, \\\"LnErc20Bridge: unknown token lock type\\\");\\n        }\\n        emit TokenWithdrawn(srcChainId, destChainId, messageId, depositor, recipient, currency, amount);\\n    }\\n\\n    function safeTransfer(\\n        address token,\\n        address recipient,\\n        uint256 amount\\n    ) private {\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(TRANSFER_SELECTOR, recipient, amount));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"LnErc20Bridge: transfer failed\\\");\\n    }\\n\\n    function safeTransferFrom(\\n        address token,\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) private {\\n        (bool success, bytes memory data) = \\n            token.call(abi.encodeWithSelector(TRANSFERFROM_SELECTOR, sender, recipient, amount));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"LnErc20Bridge: transfer from failed\\\");\\n    }\\n    uint256[46] private __gap;\\n}\"\r\n    },\r\n    \"contracts/upgradeable/LnAdminUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.12 <0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\\\";\\nimport {LnAdminableContract} from \\\"../LnAdminableContract.sol\\\";\\n\\n/**\\n * @title LnAdminUpgradeable\\n *\\n * @dev This is an upgradeable version of `LnAdmin` by replacing the constructor with\\n * an initializer and reserving storage slots.\\n */\\ncontract LnAdminUpgradeable is Initializable, LnAdminableContract {    \\n    function __LnAdminUpgradeable_init(address _admin) public initializer {\\n        require(_admin != address(0), \\\"LnAdminUpgradeable: zero address\\\");\\n        admin = _admin;\\n        emit AdminChanged(address(0), _admin);\\n    }\\n    // Reserved storage space to allow for layout changes in the future.\\n    uint256[48] private __gap;\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"bridgeAddress\",\"type\":\"address\"}],\"name\":\"BridgeAddressForChainUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldCandidate\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newCandidate\",\"type\":\"address\"}],\"name\":\"CandidateChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"tokenKey\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"}],\"name\":\"ChainSupportForTokenAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"tokenKey\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"}],\"name\":\"ChainSupportForTokenDropped\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"tokenKey\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"lockType\",\"type\":\"uint8\"}],\"name\":\"TokenAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"srcChainId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"destChainId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"depositId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"depositor\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"recipient\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"currency\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenDeposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"srcChainId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"destChainId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"depositId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"depositor\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"recipient\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"currency\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"wormholeSequence\",\"type\":\"uint64\"}],\"name\":\"TokenDeposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"srcChainId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"destChainId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"depositId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"depositor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"currency\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenDeposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"tokenKey\",\"type\":\"bytes32\"}],\"name\":\"TokenRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"srcChainId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"destChainId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"depositId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"depositor\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"recipient\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"currency\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"srcChainId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"destChainId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"depositId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"depositor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"currency\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"wormholeNetworkId\",\"type\":\"uint16\"}],\"name\":\"WormholeNetworkIdUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"coreContract\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"consistencyLevel\",\"type\":\"uint8\"}],\"name\":\"WormholeSetup\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"TOKEN_LOCK_TYPE_MINT_BURN\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TOKEN_LOCK_TYPE_TRANSFER\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"__LnAdminUpgradeable_init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"__LnErc20Bridge_init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"tokenKey\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"}],\"name\":\"addChainSupportForToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"tokenKey\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"lockType\",\"type\":\"uint8\"}],\"name\":\"addToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"becomeAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"bridgeContractsByChainId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"candidate\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentChainId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"token\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"destChainId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"tokenKey\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"}],\"name\":\"dropChainSupportForToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"tokenKey\",\"type\":\"bytes32\"}],\"name\":\"getTokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"tokenKey\",\"type\":\"bytes32\"}],\"name\":\"getTokenLockType\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"tokenKey\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"}],\"name\":\"isTokenSupportedOnChain\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"tokenKey\",\"type\":\"bytes32\"}],\"name\":\"removeToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_candidate\",\"type\":\"address\"}],\"name\":\"setCandidate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_erc20MessageBroker\",\"type\":\"address\"}],\"name\":\"setUpCCIP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"tokenInfos\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"lockType\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenSupportedOnChain\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"messageId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"srcChainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"destChainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"depositor\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"currency\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"withdrawnDeposits\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"wormholeNetworkIdsByChainId\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "LnErc20Bridge", "CompilerVersion": "v0.7.6+commit.7338295f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}