{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"src/LGArtLabDrop.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\nimport { ILGArtLabDrop } from \\\"./interfaces/ILGArtLabDrop.sol\\\";\\n\\nimport {\\n    INonFungibleLGArtLabDropToken\\n} from \\\"./interfaces/INonFungibleLGArtLabDropToken.sol\\\";\\n\\nimport { IERC20 } from \\\"openzeppelin-contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport {\\n    SafeERC20\\n} from \\\"openzeppelin-contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nimport { Ownable } from \\\"openzeppelin-contracts/access/Ownable.sol\\\";\\n\\nimport { Pausable } from \\\"openzeppelin-contracts/security/Pausable.sol\\\";\\n\\nimport { PublicDrop, PaymentTokenType } from \\\"./lib/LGArtLabDropStructs.sol\\\";\\n\\nimport { SafeTransferLib } from \\\"solmate/utils/SafeTransferLib.sol\\\";\\n\\nimport { ReentrancyGuard } from \\\"solmate/utils/ReentrancyGuard.sol\\\";\\n\\nimport { IERC721 } from \\\"openzeppelin-contracts/token/ERC721/IERC721.sol\\\";\\n\\nimport {\\n    IERC165\\n} from \\\"openzeppelin-contracts/utils/introspection/IERC165.sol\\\";\\n\\nimport { ECDSA } from \\\"openzeppelin-contracts/utils/cryptography/ECDSA.sol\\\";\\n\\nimport {\\n    MerkleProof\\n} from \\\"openzeppelin-contracts/utils/cryptography/MerkleProof.sol\\\";\\n\\n/**\\n * @title  LGArtLabDrop\\n */\\ncontract LGArtLabDrop is ILGArtLabDrop, ReentrancyGuard, Pausable, Ownable {\\n    using ECDSA for bytes32;\\n    using SafeERC20 for IERC20;\\n\\n    address[6] private _paymentTokens;\\n\\n    /// @notice Track the public drops.\\n    mapping(address => mapping(uint256 => PublicDrop)) private _publicDrops;\\n\\n    /// @notice Track the creator payout addresses.\\n    mapping(address => address) private _creatorPayoutAddresses;\\n\\n    /// @notice Track the allowed fee recipients.\\n    mapping(address => mapping(address => bool)) private _allowedFeeRecipients;\\n\\n    /// @notice Track the enumerated allowed fee recipients.\\n    mapping(address => address[]) private _enumeratedFeeRecipients;\\n\\n    /// @notice Track the allowed payers.\\n    mapping(address => mapping(address => bool)) private _allowedPayers;\\n\\n    /// @notice Track the enumerated allowed payers.\\n    mapping(address => address[]) private _enumeratedPayers;\\n\\n    /// @notice Constant for an unlimited `maxTokenSupplyForStage`.\\n    ///         Used in `mintPublic` where no `maxTokenSupplyForStage`\\n    ///         is stored in the `PublicDrop` struct.\\n    uint256 internal constant _UNLIMITED_MAX_TOKEN_SUPPLY_FOR_STAGE =\\n        type(uint256).max;\\n\\n    /// @notice Constant for a public mint's `dropStageIndex`.\\n    ///         Used in `mintPublic` where no `dropStageIndex`\\n    ///         is stored in the `PublicDrop` struct.\\n    uint256 internal constant _PUBLIC_DROP_STAGE_INDEX = 0;\\n    \\n    /// @notice Constant for drop platform fee max limit bps value.\\n    uint256 internal constant _MAX_LIMIT_FEE_BPS = 2_000;\\n\\n\\n    /**\\n     * @notice Ensure only tokens implementing INonFungibleLGArtLabDropToken can\\n     *         call the update methods.\\n     */\\n    modifier onlyINonFungibleLGArtLabDropToken() virtual {\\n        if (\\n            !IERC165(msg.sender).supportsInterface(\\n                type(INonFungibleLGArtLabDropToken).interfaceId\\n            )\\n        ) {\\n            revert OnlyINonFungibleLGArtLabDropToken(msg.sender);\\n        }\\n        _;\\n    }\\n\\n    /**\\n     * @notice Constructor for the contract deployment.\\n     */\\n    constructor(\\n        address[6] memory paymentTokens\\n    ) {\\n        /**\\n         * paymentTokens[0]: zero address(NATIVE TOKEN)\\n         * paymentTokens[1]: WETH address\\n         * paymentTokens[2]: USDC address\\n         * paymentTokens[3]: USDT address\\n         * paymentTokens[4]: DAI address\\n         * paymentTokens[5]: any other ERC20 token address deployer wants\\n         */\\n        for(uint8 i = 1; i < paymentTokens.length; i++) {\\n            if(paymentTokens[i] == address(0)) {\\n                revert PaymentTokenCannotBeZeroAddress();\\n            }\\n            _paymentTokens[i] = paymentTokens[i];\\n        }\\n        emit PaymentTokenInitialized(_paymentTokens);\\n    }\\n\\n    /**\\n     * @notice set payment token for drop contract.\\n     *\\n     * @param paymentTokenType    The payment token type enum.\\n     * @param tokenAddress             The token address to set.\\n     */\\n    function setPaymentToken(PaymentTokenType paymentTokenType, address tokenAddress) external onlyOwner {\\n        if(paymentTokenType == PaymentTokenType.NATIVE) {\\n            return;\\n        }\\n        if (tokenAddress == address(0)) {\\n            revert PaymentTokenCannotBeZeroAddress();\\n        }\\n        _paymentTokens[uint256(paymentTokenType)] = tokenAddress;\\n        emit PaymentTokenSet(paymentTokenType, tokenAddress);\\n    }\\n\\n    function getPaymentTokens() external view returns(address[6] memory) {\\n        return _paymentTokens;\\n    }\\n\\n    function pause() public onlyOwner {\\n        _pause();\\n    }\\n\\n    function unpause() public onlyOwner {\\n        _unpause();\\n    }\\n\\n    /**\\n     * @notice Mint a public drop using payment token.\\n     * @dev    this drop contract uses ERC721 based token for mint.\\n     *\\n     * @param nftContract      The nft contract to mint.\\n     * @param projectId        The project id to mint.\\n     * @param feeRecipient     The fee recipient.\\n     * @param minterIfNotPayer The mint recipient if different than the payer.\\n     * @param tax              The local tax value for payment\\n     * @param quantity         The mint quantity.\\n     */\\n    function mintPublic(\\n        address nftContract,\\n        uint256 projectId,\\n        address feeRecipient,\\n        address minterIfNotPayer,\\n        uint256 tax,\\n        uint256 quantity\\n    ) external payable whenNotPaused {\\n        // Get the public drop data.\\n        PublicDrop memory publicDrop = _publicDrops[nftContract][projectId];\\n\\n        // Ensure that the drop has started.\\n        _checkActive(publicDrop.startTime, publicDrop.endTime);\\n\\n        // Put the mint price on the stack.\\n        uint256 mintPrice = publicDrop.mintPrice;\\n\\n        // Get the minter address.\\n        address minter = minterIfNotPayer != address(0)\\n            ? minterIfNotPayer\\n            : msg.sender;\\n\\n        // Validate payment is correct for number minted.\\n        if(publicDrop.paymentToken == PaymentTokenType.NATIVE) {\\n            _checkCorrectNativeTokenPayment(quantity, mintPrice, tax);\\n        } else {\\n            _checkCorrectPayment(minter, quantity, mintPrice, tax, publicDrop.paymentToken);\\n        }\\n        \\n        // Ensure the payer is allowed if not the minter.\\n        if (minter != msg.sender) {\\n            if (!_allowedPayers[nftContract][msg.sender]) {\\n                revert PayerNotAllowed();\\n            }\\n        }\\n\\n        // Check that the minter is allowed to mint the desired quantity.\\n        _checkMintQuantity(\\n            nftContract,\\n            projectId,\\n            minter,\\n            quantity,\\n            publicDrop.maxTotalMintableByWallet,\\n            _UNLIMITED_MAX_TOKEN_SUPPLY_FOR_STAGE\\n        );\\n\\n        // Check that the fee recipient is allowed if restricted.\\n        _checkFeeRecipientIsAllowed(\\n            nftContract,\\n            feeRecipient,\\n            publicDrop.restrictFeeRecipients\\n        );\\n\\n        // Mint the token(s), split the payout, emit an event.\\n        _mintAndPay(\\n            nftContract,\\n            projectId,\\n            minter,\\n            quantity,\\n            mintPrice,\\n            tax,\\n            _PUBLIC_DROP_STAGE_INDEX,\\n            publicDrop.feeBps,\\n            feeRecipient,\\n            publicDrop.paymentToken\\n        );\\n    }\\n\\n    /**\\n     * @notice Check that the drop stage is active.\\n     *\\n     * @param startTime The drop stage start time.\\n     * @param endTime   The drop stage end time.\\n     */\\n    function _checkActive(uint256 startTime, uint256 endTime) internal view {\\n        if (\\n            _cast(block.timestamp < startTime) |\\n                _cast(block.timestamp > endTime) ==\\n            1\\n        ) {\\n            // Revert if the drop stage is not active.\\n            revert NotActive(block.timestamp, startTime, endTime);\\n        }\\n    }\\n\\n    /**\\n     * @notice Check that the fee recipient is allowed.\\n     *\\n     * @param nftContract           The nft contract.\\n     * @param feeRecipient          The fee recipient.\\n     * @param restrictFeeRecipients If the fee recipients are restricted.\\n     */\\n    function _checkFeeRecipientIsAllowed(\\n        address nftContract,\\n        address feeRecipient,\\n        bool restrictFeeRecipients\\n    ) internal view {\\n        // Ensure the fee recipient is not the zero address.\\n        if (feeRecipient == address(0)) {\\n            revert FeeRecipientCannotBeZeroAddress();\\n        }\\n\\n        // Revert if the fee recipient is restricted and not allowed.\\n        if (restrictFeeRecipients) {\\n            if (!_allowedFeeRecipients[nftContract][feeRecipient]) {\\n                revert FeeRecipientNotAllowed();\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Check that the wallet is allowed to mint the desired quantity.\\n     *\\n     * @param nftContract              The nft contract.\\n     * @param projectId                The project id.\\n     * @param minter                   The mint recipient.\\n     * @param quantity                 The number of tokens to mint.\\n     * @param maxTotalMintableByWallet The max allowed mints per wallet.\\n     * @param maxTokenSupplyForStage   The max token supply for the drop stage.\\n     */\\n    function _checkMintQuantity(\\n        address nftContract,\\n        uint256 projectId,\\n        address minter,\\n        uint256 quantity,\\n        uint256 maxTotalMintableByWallet,\\n        uint256 maxTokenSupplyForStage\\n    ) internal view {\\n        // Mint quantity of zero is not valid.\\n        if(quantity == 0) {\\n            revert MintQuantityCannotBeZero();\\n        }\\n        // since it doesn't support batch mint, revert if mint quantity is not one.\\n        if(quantity != 1) {\\n            revert MintQuantityShouldBeOne();\\n        }\\n\\n        // Get the mint stats.\\n        (\\n            uint256 minterNumMinted,\\n            uint256 currentTotalSupply,\\n            uint256 maxSupply\\n        ) = INonFungibleLGArtLabDropToken(nftContract).getMintStats(\\n                projectId,\\n                minter\\n            );\\n        // Ensure mint quantity doesn't exceed maxTotalMintableByWallet.\\n        if (quantity + minterNumMinted > maxTotalMintableByWallet) {\\n            revert MintQuantityExceedsMaxMintedPerWallet(\\n                quantity + minterNumMinted,\\n                maxTotalMintableByWallet\\n            );\\n        }\\n\\n        // Ensure mint quantity doesn't exceed maxSupply.\\n        if (quantity + currentTotalSupply > maxSupply) {\\n            revert MintQuantityExceedsMaxSupply(\\n                quantity + currentTotalSupply,\\n                maxSupply\\n            );\\n        }\\n\\n        // Ensure mint quantity doesn't exceed maxTokenSupplyForStage.\\n        if (quantity + currentTotalSupply > maxTokenSupplyForStage) {\\n            revert MintQuantityExceedsMaxTokenSupplyForStage(\\n                quantity + currentTotalSupply,\\n                maxTokenSupplyForStage\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @notice Revert if the payment is not the quantity times the mint price.\\n     *\\n     * @param quantity  The number of tokens to mint.\\n     * @param mintPrice The mint price.\\n     * @param tax       The tax amount.\\n     */\\n    function _checkCorrectNativeTokenPayment(\\n        uint256 quantity,\\n        uint256 mintPrice,\\n        uint256 tax\\n    ) internal view {\\n        if (msg.value != ((quantity * mintPrice) + tax)) {\\n            revert IncorrectPayment(msg.value, (quantity * mintPrice) + tax);\\n        }\\n    }\\n\\n    /**\\n     * @notice Revert if the payment is not the quantity times the mint price.\\n     *\\n     * @param minter    The nft minter.\\n     * @param quantity  The number of tokens to mint.\\n     * @param mintPrice The mint price.\\n     * @param tax       The tax amount.\\n     * @param paymentToken  The payment toke type enum value.\\n     */\\n    function _checkCorrectPayment(\\n        address minter,\\n        uint256 quantity,\\n        uint256 mintPrice,\\n        uint256 tax,\\n        PaymentTokenType paymentToken\\n    ) internal view {\\n        uint256 paymentTokenIndex = uint256(paymentToken);\\n\\n        if (_paymentTokens[paymentTokenIndex] == address(0)) {\\n            revert PaymentTokenCannotBeZeroAddress();\\n        }\\n\\n        IERC20 token = IERC20(_paymentTokens[paymentTokenIndex]);\\n        uint256 userBalance = token.balanceOf(minter);\\n        uint256 userAllowance = token.allowance(minter, address(this));\\n\\n        uint256 requiredTokenAmount = (quantity * mintPrice) + tax;\\n\\n        // Revert if the payment amount doesn't match the total cost.\\n        if (\\n            userAllowance < requiredTokenAmount ||\\n            userBalance < requiredTokenAmount\\n        ) {\\n            revert InsufficientPaymentTokenBalanceOrAllowance(\\n                userBalance,\\n                userAllowance,\\n                requiredTokenAmount\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @notice Split the payment payout for the creator and fee recipient.\\n     *\\n     * @param nftContract  The nft contract.\\n     * @param feeRecipient The fee recipient.\\n     * @param feeBps       The fee basis points.\\n     */\\n\\n    function _splitPayoutNativeToken(\\n        address nftContract,\\n        address feeRecipient,\\n        uint256 feeBps,\\n        uint256 tax\\n    ) internal {\\n        if (feeBps > 10_000) {\\n            revert InvalidFeeBps(feeBps);\\n        }\\n\\n        // Get the creator payout address.\\n        address creatorPayoutAddress = _creatorPayoutAddresses[nftContract];\\n\\n        // Ensure the creator payout address is not the zero address.\\n        if (creatorPayoutAddress == address(0)) {\\n            revert CreatorPayoutAddressCannotBeZeroAddress();\\n        }\\n\\n        // msg.value has already been validated by this point, so can use it directly.\\n\\n        // If the fee is zero, transfer to the creator (msg.value - tax) and transfer tax to the feeRecipient.\\n        if (feeBps == 0) {\\n            SafeTransferLib.safeTransferETH(creatorPayoutAddress, msg.value - tax);\\n            if (tax > 0) {\\n                SafeTransferLib.safeTransferETH(feeRecipient, tax);\\n            }\\n            return;\\n        }\\n\\n\\n        // Get the fee amount.\\n        // Note that the fee amount is rounded down in favor of the creator.\\n        uint256 feeAmount = ((msg.value - tax) * feeBps) / 10_000;\\n\\n        if (tax > msg.value - tax - feeAmount) {\\n            revert InvalidTaxAmount(tax, msg.value - tax - feeAmount);\\n        }\\n\\n        // Get the creator payout amount. Fee amount is <= (msg.value - tax) per above.\\n        uint256 payoutAmount;\\n        unchecked {\\n            payoutAmount = msg.value - feeAmount - tax;\\n        }\\n\\n        // Transfer the fee amount to the fee recipient.\\n        if (feeAmount > 0) {\\n            SafeTransferLib.safeTransferETH(feeRecipient, feeAmount);\\n        }\\n\\n        // Transfer the tax value to the fee recipient.\\n        if (tax > 0) {\\n            SafeTransferLib.safeTransferETH(feeRecipient, tax);\\n        }\\n\\n        // Transfer the creator payout amount to the creator.\\n        SafeTransferLib.safeTransferETH(creatorPayoutAddress, payoutAmount);\\n    }\\n\\n    /**\\n     * @notice Split the payment payout for the creator and fee recipient.\\n     *\\n     * @param nftContract  The nft contract.\\n     * @param feeRecipient The fee recipient.\\n     * @param mintPrice    the mint price\\n     * @param feeBps       The fee basis points.\\n     */\\n    function _splitPayout(\\n        address nftContract,\\n        address feeRecipient,\\n        uint256 mintPrice,\\n        uint256 feeBps,\\n        uint256 tax,\\n        PaymentTokenType paymentToken\\n    ) internal {\\n        // Revert if the fee basis points is greater than 10_000.\\n        if (feeBps > 10_000) {\\n            revert InvalidFeeBps(feeBps);\\n        }\\n\\n        // Get the creator payout address.\\n        address creatorPayoutAddress = _creatorPayoutAddresses[nftContract];\\n        uint256 paymentTokenIndex = uint256(paymentToken);\\n\\n        // Ensure the creator payout address is not the zero address.\\n        if (creatorPayoutAddress == address(0)) {\\n            revert CreatorPayoutAddressCannotBeZeroAddress();\\n        }\\n\\n        if (_paymentTokens[paymentTokenIndex] == address(0)) {\\n            revert PaymentTokenCannotBeZeroAddress();\\n        }\\n\\n        IERC20 token = IERC20(_paymentTokens[paymentTokenIndex]);\\n\\n        // If the fee is zero, just transfer to the creator and return.\\n        if (feeBps == 0) {\\n            token.safeTransferFrom(msg.sender, creatorPayoutAddress, mintPrice);\\n            if (tax > 0) {\\n                token.safeTransferFrom(msg.sender, feeRecipient, tax);\\n            }\\n            return;\\n        }\\n\\n        // Get the fee amount.\\n        // Note that the fee amount is rounded down in favor of the creator.\\n        uint256 feeAmount = (mintPrice * feeBps) / 10_000;\\n\\n        if (tax > mintPrice - feeAmount) {\\n            revert InvalidTaxAmount(tax, mintPrice - feeAmount);\\n        }\\n\\n        // Get the creator payout amount. Fee amount is <= (mintPrice - tax) per above.\\n        uint256 payoutAmount;\\n        unchecked {\\n            payoutAmount = mintPrice - feeAmount;\\n        }\\n        // Transfer the fee amount to the fee recipient.\\n        if (feeAmount > 0) {\\n            token.safeTransferFrom(msg.sender, feeRecipient, feeAmount);\\n        }\\n\\n        if (tax > 0) {\\n            token.safeTransferFrom(msg.sender, feeRecipient, tax);\\n        }\\n\\n        // Transfer the creator payout amount to the creator.\\n        token.safeTransferFrom(msg.sender, creatorPayoutAddress, payoutAmount);\\n    }\\n\\n    /**\\n     * @notice Mints a number of tokens, splits the payment,\\n     *         and emits an event.\\n     *\\n     * @param nftContract    The nft contract.\\n     * @param projectId      The project id.\\n     * @param minter         The mint recipient.\\n     * @param quantity       The number of tokens to mint.\\n     * @param mintPrice      The mint price.\\n     * @param tax            The tax value for payment.\\n     * @param dropStageIndex The drop stage index.\\n     * @param feeBps         The fee basis points.\\n     * @param feeRecipient   The fee recipient.\\n     */\\n    function _mintAndPay(\\n        address nftContract,\\n        uint256 projectId,\\n        address minter,\\n        uint256 quantity,\\n        uint256 mintPrice,\\n        uint256 tax,\\n        uint256 dropStageIndex,\\n        uint256 feeBps,\\n        address feeRecipient,\\n        PaymentTokenType paymentToken\\n    ) internal nonReentrant {\\n        // Mint the token(s).\\n        INonFungibleLGArtLabDropToken(nftContract).mintDrop(projectId, minter);\\n\\n        if(paymentToken == PaymentTokenType.NATIVE) {\\n            _splitPayoutNativeToken(nftContract, feeRecipient, feeBps, tax);\\n        } else {\\n            _splitPayout(nftContract, feeRecipient, mintPrice, feeBps, tax, paymentToken);\\n        }\\n\\n        // Emit an event for the mint.\\n        emit DropMint(\\n            nftContract,\\n            projectId,\\n            minter,\\n            feeRecipient,\\n            msg.sender,\\n            quantity,\\n            mintPrice,\\n            feeBps,\\n            dropStageIndex\\n        );\\n    }\\n\\n    /**\\n     * @notice Returns the public drop data for the nft contract.\\n     *\\n     * @param nftContract     The nft contract.\\n     * @param projectId       The project id.\\n     */\\n    function getPublicDrop(\\n        address nftContract,\\n        uint256 projectId\\n    ) external view returns (PublicDrop memory) {\\n        return _publicDrops[nftContract][projectId];\\n    }\\n\\n    /**\\n     * @notice Returns the creator payout address for the nft contract.\\n     *\\n     * @param nftContract The nft contract.\\n     */\\n    function getCreatorPayoutAddress(\\n        address nftContract\\n    ) external view returns (address) {\\n        return _creatorPayoutAddresses[nftContract];\\n    }\\n\\n    /**\\n     * @notice Returns if the specified fee recipient is allowed\\n     *         for the nft contract.\\n     *\\n     * @param nftContract     The nft contract.\\n     * @param feeRecipient    The fee recipient.\\n     */\\n    function getFeeRecipientIsAllowed(\\n        address nftContract,\\n        address feeRecipient\\n    ) external view returns (bool) {\\n        return _allowedFeeRecipients[nftContract][feeRecipient];\\n    }\\n\\n    /**\\n     * @notice Returns an enumeration of allowed fee recipients for an\\n     *         nft contract when fee recipients are enforced.\\n     *\\n     * @param nftContract The nft contract.\\n     */\\n    function getAllowedFeeRecipients(\\n        address nftContract\\n    ) external view returns (address[] memory) {\\n        return _enumeratedFeeRecipients[nftContract];\\n    }\\n\\n    /**\\n     * @notice Returns the payers for the nft contract.\\n     *\\n     * @param nftContract The nft contract.\\n     */\\n    function getPayers(\\n        address nftContract\\n    ) external view returns (address[] memory) {\\n        return _enumeratedPayers[nftContract];\\n    }\\n\\n    /**\\n     * @notice Returns if the specified payer is allowed\\n     *         for the nft contract.\\n     *\\n     * @param nftContract The nft contract.\\n     * @param payer       The payer.\\n     */\\n    function getPayerIsAllowed(\\n        address nftContract,\\n        address payer\\n    ) external view returns (bool) {\\n        return _allowedPayers[nftContract][payer];\\n    }\\n\\n    /**\\n     * @notice Emits an event to notify update of the drop URI.\\n     *\\n     *         This method assume msg.sender is an nft contract and its\\n     *         ERC165 interface id matches INonFungibleLGArtLabDropToken.\\n     *\\n     *         Note: Be sure only authorized users can call this from\\n     *         token contracts that implement INonFungibleLGArtLabDropToken.\\n     *\\n     * @param projectId     The project id.\\n     * @param dropURI       The new drop URI.\\n     */\\n    function updateDropURI(\\n        uint256 projectId,\\n        string calldata dropURI\\n    ) external onlyINonFungibleLGArtLabDropToken {\\n        // Emit an event with the update.\\n        emit DropURIUpdated(msg.sender, dropURI);\\n    }\\n\\n    /**\\n     * @notice Updates the public drop data for the nft contract\\n     *         and emits an event.\\n     *\\n     *         This method assume msg.sender is an nft contract and its\\n     *         ERC165 interface id matches INonFungibleLGArtLabDropToken.\\n     *\\n     *         Note: Be sure only authorized users can call this from\\n     *         token contracts that implement INonFungibleLGArtLabDropToken.\\n     *\\n     * @param projectIds       The project id array.\\n     * @param publicDrops      The public drop data array.\\n     */\\n    function updatePublicDrops(\\n        uint256[] calldata projectIds,\\n        PublicDrop[] calldata publicDrops\\n    ) external override onlyINonFungibleLGArtLabDropToken {\\n        if (publicDrops.length > 10) {\\n            revert ExceedsMaxDropUpdateLimit();\\n        }\\n\\n        if (publicDrops.length != projectIds.length) {\\n            revert ArrayLengthMismatch(publicDrops.length, projectIds.length);\\n        }\\n\\n        for (uint8 i = 0; i < publicDrops.length; i++) {\\n            if (publicDrops[i].feeBps > _MAX_LIMIT_FEE_BPS) {\\n                // Revert if the fee basis points is greater than _MAX_LIMIT_FEE_BPS.\\n                revert InvalidFeeBps(publicDrops[i].feeBps);\\n            }\\n            // Set the public drop data.\\n            _publicDrops[msg.sender][projectIds[i]] = publicDrops[i];\\n        }\\n\\n        // Emit an event with the update.\\n        emit PublicDropUpdated(msg.sender, publicDrops);\\n    }\\n\\n    /**\\n     * @notice Updates the creator payout address and emits an event.\\n     *\\n     *         This method assume msg.sender is an nft contract and its\\n     *         ERC165 interface id matches INonFungibleLGArtLabDropToken.\\n     *\\n     *         Note: Be sure only authorized users can call this from\\n     *         token contracts that implement INonFungibleLGArtLabDropToken.\\n     *\\n     * @param payoutAddress     The creator payout address.\\n     */\\n    function updateCreatorPayoutAddress(\\n        address payoutAddress\\n    ) external onlyINonFungibleLGArtLabDropToken {\\n        if (payoutAddress == address(0)) {\\n            revert CreatorPayoutAddressCannotBeZeroAddress();\\n        }\\n        // Set the creator payout address.\\n        _creatorPayoutAddresses[msg.sender] = payoutAddress;\\n\\n        // Emit an event with the update.\\n        emit CreatorPayoutAddressUpdated(msg.sender, payoutAddress);\\n    }\\n\\n    /**\\n     * @notice Updates the allowed fee recipient and emits an event.\\n     *\\n     *         This method assume msg.sender is an nft contract and its\\n     *         ERC165 interface id matches INonFungibleLGArtLabDropToken.\\n     *\\n     *         Note: Be sure only authorized users can call this from\\n     *         token contracts that implement INonFungibleLGArtLabDropToken.\\n     *\\n     * @param feeRecipient The fee recipient.\\n     * @param allowed      If the fee recipient is allowed.\\n     */\\n    function updateAllowedFeeRecipient(\\n        address feeRecipient,\\n        bool allowed\\n    ) external onlyINonFungibleLGArtLabDropToken {\\n        if (feeRecipient == address(0)) {\\n            revert FeeRecipientCannotBeZeroAddress();\\n        }\\n\\n        // Track the enumerated storage.\\n        address[] storage enumeratedStorage = _enumeratedFeeRecipients[\\n            msg.sender\\n        ];\\n        mapping(address => bool)\\n            storage feeRecipientsMap = _allowedFeeRecipients[msg.sender];\\n        if (allowed) {\\n            if (feeRecipientsMap[feeRecipient]) {\\n                revert DuplicateFeeRecipient();\\n            }\\n            feeRecipientsMap[feeRecipient] = true;\\n            enumeratedStorage.push(feeRecipient);\\n        } else {\\n            if (!feeRecipientsMap[feeRecipient]) {\\n                revert FeeRecipientNotPresent();\\n            }\\n            delete _allowedFeeRecipients[msg.sender][feeRecipient];\\n            _removeFromEnumeration(feeRecipient, enumeratedStorage);\\n        }\\n\\n        // Emit an event with the update.\\n        emit AllowedFeeRecipientUpdated(msg.sender, feeRecipient, allowed);\\n    }\\n\\n    /**\\n     * @notice Updates the allowed payer and emits an event.\\n     *\\n     *         This method assume msg.sender is an nft contract and its\\n     *         ERC165 interface id matches INonFungibleLGArtLabDropToken.\\n     *\\n     *         Note: Be sure only authorized users can call this from\\n     *         token contracts that implement INonFungibleLGArtLabDropToken.\\n     *\\n     * @param payer   The payer to add or remove.\\n     * @param allowed Whether to add or remove the payer.\\n     */\\n    function updatePayer(\\n        address payer,\\n        bool allowed\\n    ) external onlyINonFungibleLGArtLabDropToken {\\n        if (payer == address(0)) {\\n            revert PayerCannotBeZeroAddress();\\n        }\\n\\n        // Track the enumerated storage.\\n        address[] storage enumeratedStorage = _enumeratedPayers[msg.sender];\\n        mapping(address => bool) storage payersMap = _allowedPayers[msg.sender];\\n\\n        if (allowed) {\\n            if (payersMap[payer]) {\\n                revert DuplicatePayer();\\n            }\\n            payersMap[payer] = true;\\n            enumeratedStorage.push(payer);\\n        } else {\\n            if (!payersMap[payer]) {\\n                revert PayerNotPresent();\\n            }\\n            delete _allowedPayers[msg.sender][payer];\\n            _removeFromEnumeration(payer, enumeratedStorage);\\n        }\\n\\n        // Emit an event with the update.\\n        emit PayerUpdated(msg.sender, payer, allowed);\\n    }\\n\\n    /**\\n     * @notice Remove an address from a supplied enumeration.\\n     *\\n     * @param toRemove    The address to remove.\\n     * @param enumeration The enumerated addresses to parse.\\n     */\\n    function _removeFromEnumeration(\\n        address toRemove,\\n        address[] storage enumeration\\n    ) internal {\\n        // Cache the length.\\n        uint256 enumerationLength = enumeration.length;\\n        for (uint256 i = 0; i < enumerationLength; ) {\\n            // Check if the enumerated element is the one we are deleting.\\n            if (enumeration[i] == toRemove) {\\n                // Swap with the last element.\\n                enumeration[i] = enumeration[enumerationLength - 1];\\n                // Delete the (now duplicated) last element.\\n                enumeration.pop();\\n                // Exit the loop.\\n                break;\\n            }\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Internal pure function to cast a `bool` value to a `uint256` value.\\n     *\\n     * @param b The `bool` value to cast.\\n     *\\n     * @return u The `uint256` value.\\n     */\\n    function _cast(bool b) internal pure returns (uint256 u) {\\n        assembly {\\n            u := b\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"src/interfaces/ILGArtLabDrop.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\nimport { PublicDrop } from \\\"../lib/LGArtLabDropStructs.sol\\\";\\n\\nimport {\\n    LGArtLabDropErrorsAndEvents\\n} from \\\"../lib/LGArtLabDropErrorsAndEvents.sol\\\";\\n\\ninterface ILGArtLabDrop is LGArtLabDropErrorsAndEvents {\\n    /**\\n     * @notice Mint a public drop.\\n     *\\n     * @param nftContract      The nftContract\\n     * @param projectId        The project id to mint\\n     * @param feeRecipient     The fee recipient.\\n     * @param minterIfNotPayer The mint recipient if different than the payer.\\n     * @param tax              The tax value for payment.\\n     * @param quantity         The mint quantity.\\n     */\\n    function mintPublic(\\n        address nftContract,\\n        uint256 projectId,\\n        address feeRecipient,\\n        address minterIfNotPayer,\\n        uint256 tax,\\n        uint256 quantity\\n    ) external payable;\\n\\n    /**\\n     * @notice Emits an event to notify update of the drop URI.\\n     *\\n     *         This method assume msg.sender is an nft contract and its\\n     *         ERC165 interface id matches INonFungibleLGArtLabDropToken.\\n     *\\n     *         Note: Be sure only authorized users can call this from\\n     *         token contracts that implement INonFungibleLGArtLabDropToken.\\n     *\\n     * @param dropURI The new drop URI.\\n     */\\n    function updateDropURI(uint256 projectId, string calldata dropURI) external;\\n\\n    /**\\n     * @notice Updates the public drop data for the nft contract\\n     *         and emits an event.\\n     *\\n     *         This method assume msg.sender is an nft contract and its\\n     *         ERC165 interface id matches INonFungibleLGArtLabDropToken.\\n     *\\n     *         Note: Be sure only authorized users can call this from\\n     *         token contracts that implement INonFungibleLGArtLabDropToken.\\n     *\\n     * @param publicDrops    The public drop data.\\n     */\\n    function updatePublicDrops(\\n        uint256[] calldata projectIds,\\n        PublicDrop[] calldata publicDrops\\n    ) external;\\n\\n    /**\\n     * @notice Updates the creator payout address and emits an event.\\n     *\\n     *         This method assume msg.sender is an nft contract and its\\n     *         ERC165 interface id matches INonFungibleLGArtLabDropToken.\\n     *\\n     *         Note: Be sure only authorized users can call this from\\n     *         token contracts that implement INonFungibleLGArtLabDropToken.\\n     *\\n     * @param payoutAddress The creator payout address.\\n     */\\n    function updateCreatorPayoutAddress(address payoutAddress) external;\\n\\n    /**\\n     * @notice Updates the allowed fee recipient and emits an event.\\n     *\\n     *         This method assume msg.sender is an nft contract and its\\n     *         ERC165 interface id matches INonFungibleLGArtLabDropToken.\\n     *\\n     *         Note: Be sure only authorized users can call this from\\n     *         token contracts that implement INonFungibleLGArtLabDropToken.\\n     *\\n     * @param feeRecipient The fee recipient.\\n     * @param allowed      If the fee recipient is allowed.\\n     */\\n    function updateAllowedFeeRecipient(\\n        address feeRecipient,\\n        bool allowed\\n    ) external;\\n\\n    /**\\n     * @notice Updates the allowed payer and emits an event.\\n     *\\n     *         This method assume msg.sender is an nft contract and its\\n     *         ERC165 interface id matches INonFungibleLGArtLabDropToken.\\n     *\\n     *         Note: Be sure only authorized users can call this from\\n     *         token contracts that implement INonFungibleLGArtLabDropToken.\\n     *\\n     * @param payer   The payer to add or remove.\\n     * @param allowed Whether to add or remove the payer.\\n     */\\n    function updatePayer(address payer, bool allowed) external;\\n\\n    /**\\n     * @notice Returns the public drop data for the nft contract.\\n     *\\n     */\\n    function getPublicDrop(\\n        address nftContract,\\n        uint256 projectId\\n    ) external view returns (PublicDrop memory);\\n\\n    /**\\n     * @notice Returns the creator payout address for the nft contract.\\n     *\\n     */\\n    function getCreatorPayoutAddress(\\n        address nftContract\\n    ) external view returns (address);\\n\\n    /**\\n     * @notice Returns if the specified fee recipient is allowed\\n     *         for the nft contract.\\n     *\\n     * @param feeRecipient The fee recipient.\\n     */\\n    function getFeeRecipientIsAllowed(\\n        address nftContract,\\n        address feeRecipient\\n    ) external view returns (bool);\\n\\n    /**\\n     * @notice Returns an enumeration of allowed fee recipients for an\\n     *         nft contract when fee recipients are enforced\\n     *\\n     */\\n    function getAllowedFeeRecipients(\\n        address nftContract\\n    ) external view returns (address[] memory);\\n\\n    /**\\n     * @notice Returns the payers for the nft contract.\\n     *\\n     */\\n    function getPayers(\\n        address nftContract\\n    ) external view returns (address[] memory);\\n\\n    /**\\n     * @notice Returns if the specified payer is allowed\\n     *         for the nft contract.\\n     *\\n     * @param payer       The payer.\\n     */\\n    function getPayerIsAllowed(\\n        address nftContract,\\n        address payer\\n    ) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"src/interfaces/INonFungibleLGArtLabDropToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\nimport {\\n    ILGArtLabDropTokenContractMetadata\\n} from \\\"./ILGArtLabDropTokenContractMetadata.sol\\\";\\n\\nimport { PublicDrop } from \\\"../lib/LGArtLabDropStructs.sol\\\";\\n\\ninterface INonFungibleLGArtLabDropToken is ILGArtLabDropTokenContractMetadata {\\n    /**\\n     * @dev Revert with an error if a contract is not an allowed\\n     *      drop address.\\n     */\\n    error OnlyAllowedDrop();\\n\\n    /**\\n     * @dev Emit an event when allowed drop contracts are updated.\\n     */\\n    event AllowedDropUpdated(address[] allowedDrop);\\n\\n    /**\\n     * @notice Update the allowed drop contracts.\\n     *         Only the owner can use this function.\\n     *\\n     * @param allowedDrop The allowed drop addresses.\\n     */\\n    function updateAllowedDrop(address[] calldata allowedDrop) external;\\n\\n    /**\\n     * @notice Mint tokens, restricted to the drop contract.\\n     *\\n     * @dev    NOTE: If a token registers itself with multiple drop\\n     *         contracts, the implementation of this function should guard\\n     *         against reentrancy. If the implementing token uses\\n     *         _safeMint(), or a feeRecipient with a malicious receive() hook\\n     *         is specified, the token or fee recipients may be able to execute\\n     *         another mint in the same transaction via a separate drop\\n     *         contract.\\n     *         This is dangerous if an implementing token does not correctly\\n     *         update the minterNumMinted and currentTotalSupply values before\\n     *         transferring minted tokens, as drop references these values\\n     *         to enforce token limits on a per-wallet and per-stage basis.\\n     *\\n     * @param projectId The project id to mint.\\n     * @param minter    The address to mint to.\\n     */\\n    function mintDrop(uint256 projectId, address minter) external;\\n\\n    /**\\n     * @notice Returns a set of mint stats for the address.\\n     *         This assists drop in enforcing maxSupply,\\n     *         maxTotalMintableByWallet, and maxTokenSupplyForStage checks.\\n     *\\n     * @dev    NOTE: Implementing contracts should always update these numbers\\n     *         before transferring any tokens with _safeMint() to mitigate\\n     *         consequences of malicious onERC721Received() hooks.\\n     *\\n     * @param projectId  The project id.\\n     * @param minter     The minter address.\\n     */\\n    function getMintStats(\\n        uint256 projectId,\\n        address minter\\n    )\\n        external\\n        view\\n        returns (\\n            uint256 minterNumMinted,\\n            uint256 currentTotalSupply,\\n            uint256 maxSupply\\n        );\\n\\n    /**\\n     * @notice Update the public drop data for this nft contract on drop.\\n     *         Only the owner can use this function.\\n     *\\n     * @param dropImpl      The allowed drop contract.\\n     * @param projectIds    The project ids array.\\n     * @param publicDrops   The public drop data array.\\n     */\\n    function updatePublicDrops(\\n        address dropImpl,\\n        uint256[] calldata projectIds,\\n        PublicDrop[] calldata publicDrops\\n    ) external;\\n\\n    /**\\n     * @notice Update the drop URI for this nft contract on drop.\\n     *         Only the owner can use this function.\\n     *\\n     * @param dropImpl  The allowed drop contract.\\n     * @param projectId The project id.\\n     * @param dropURI   The new drop URI.\\n     */\\n    function updateDropURI(\\n        address dropImpl,\\n        uint256 projectId,\\n        string calldata dropURI\\n    ) external;\\n\\n    /**\\n     * @notice Update the creator payout address for this nft contract on\\n     *         drop.\\n     *         Only the owner can set the creator payout address.\\n     *\\n     * @param dropImpl   The allowed drop contract.\\n     * @param payoutAddress The new payout address.\\n     */\\n    function updateCreatorPayoutAddress(\\n        address dropImpl,\\n        address payoutAddress\\n    ) external;\\n\\n    /**\\n     * @notice Update the allowed fee recipient for this nft contract\\n     *         on drop.\\n     *\\n     * @param dropImpl      The allowed drop contract.\\n     * @param feeRecipient  The new fee recipient.\\n     * @param allowed       Whether the fee recipient is allowed.\\n     */\\n    function updateAllowedFeeRecipient(\\n        address dropImpl,\\n        address feeRecipient,\\n        bool allowed\\n    ) external;\\n\\n    /**\\n     * @notice Update the allowed payers for this nft contract on drop.\\n     *         Only the owner can use this function.\\n     *\\n     * @param dropImpl    The allowed drop contract.\\n     * @param payer       The payer to update.\\n     * @param allowed     Whether the payer is allowed.\\n     */\\n    function updatePayer(\\n        address dropImpl,\\n        address payer,\\n        bool allowed\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/security/Pausable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\"\r\n    },\r\n    \"src/lib/LGArtLabDropStructs.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\n/**\\n * @notice A struct defining public drop data.\\n *         Designed to fit efficiently in one storage slot.\\n *\\n * @param mintPrice                The mint price per token. (Up to 1.2m\\n *                                 of native token, e.g. ETH, MATIC)\\n * @param startTime                The start time, ensure this is not zero.\\n * @param endTIme                  The end time, ensure this is not zero.\\n * @param maxTotalMintableByWallet Maximum total number of mints a user is\\n *                                 allowed. (The limit for this field is\\n *                                 2^16 - 1)\\n * @param feeBps                   Fee out of 10_000 basis points to be\\n *                                 collected.\\n * @param restrictFeeRecipients    If false, allow any fee recipient;\\n *                                 if true, check fee recipient is allowed.\\n * @param paymentToken             Drop payment token type enum value. \\n *                                 see `enum PaymentTokenType`\\n */\\nstruct PublicDrop {\\n    uint80 mintPrice; // 80/256 bits\\n    uint48 startTime; // 128/256 bits\\n    uint48 endTime; // 176/256 bits\\n    uint16 maxTotalMintableByWallet; // 224/256 bits\\n    uint16 feeBps; // 240/256 bits\\n    bool restrictFeeRecipients; // 248/256 bits\\n    PaymentTokenType paymentToken; // 256/256 bits\\n}\\n\\n/**\\n * @notice A struct defining token's project info\\n *\\n * @param totalMinted\\n * @param maxSupply\\n * @param currentTokenIndex\\n */\\nstruct ProjectInfo {\\n    uint256 totalMinted;\\n    uint256 maxSupply;\\n    uint256 currentTokenIndex;\\n}\\n\\n/**\\n * @notice A enum defining drop payment token's type\\n */\\nenum PaymentTokenType {\\n    // 0: Native token. ETH on mainnet, MATIC on polygon, etc.\\n    NATIVE,\\n\\n    // 1: Wrapped ETH\\n    WETH,\\n\\n    // 2: USD Coin\\n    USDC,\\n\\n    // 3: Tether\\n    USDT,\\n\\n    // 4: DAI\\n    DAI,\\n    \\n    // 5: Custom ERC20 Token\\n    CUSTOM\\n}\\n\"\r\n    },\r\n    \"lib/solmate/src/utils/SafeTransferLib.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\nimport {ERC20} from \\\"../tokens/ERC20.sol\\\";\\n\\n/// @notice Safe ETH and ERC20 transfer library that gracefully handles missing return values.\\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/utils/SafeTransferLib.sol)\\n/// @dev Use with caution! Some functions in this library knowingly create dirty bits at the destination of the free memory pointer.\\n/// @dev Note that none of the functions in this library check that a token has code at all! That responsibility is delegated to the caller.\\nlibrary SafeTransferLib {\\n    /*//////////////////////////////////////////////////////////////\\n                             ETH OPERATIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function safeTransferETH(address to, uint256 amount) internal {\\n        bool success;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Transfer the ETH and store if it succeeded or not.\\n            success := call(gas(), to, amount, 0, 0, 0, 0)\\n        }\\n\\n        require(success, \\\"ETH_TRANSFER_FAILED\\\");\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            ERC20 OPERATIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function safeTransferFrom(\\n        ERC20 token,\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        bool success;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Get a pointer to some free memory.\\n            let freeMemoryPointer := mload(0x40)\\n\\n            // Write the abi-encoded calldata into memory, beginning with the function selector.\\n            mstore(freeMemoryPointer, 0x23b872dd00000000000000000000000000000000000000000000000000000000)\\n            mstore(add(freeMemoryPointer, 4), and(from, 0xffffffffffffffffffffffffffffffffffffffff)) // Append and mask the \\\"from\\\" argument.\\n            mstore(add(freeMemoryPointer, 36), and(to, 0xffffffffffffffffffffffffffffffffffffffff)) // Append and mask the \\\"to\\\" argument.\\n            mstore(add(freeMemoryPointer, 68), amount) // Append the \\\"amount\\\" argument. Masking not required as it's a full 32 byte type.\\n\\n            success := and(\\n                // Set success to whether the call reverted, if not we check it either\\n                // returned exactly 1 (can't just be non-zero data), or had no return data.\\n                or(and(eq(mload(0), 1), gt(returndatasize(), 31)), iszero(returndatasize())),\\n                // We use 100 because the length of our calldata totals up like so: 4 + 32 * 3.\\n                // We use 0 and 32 to copy up to 32 bytes of return data into the scratch space.\\n                // Counterintuitively, this call must be positioned second to the or() call in the\\n                // surrounding and() call or else returndatasize() will be zero during the computation.\\n                call(gas(), token, 0, freeMemoryPointer, 100, 0, 32)\\n            )\\n        }\\n\\n        require(success, \\\"TRANSFER_FROM_FAILED\\\");\\n    }\\n\\n    function safeTransfer(\\n        ERC20 token,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        bool success;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Get a pointer to some free memory.\\n            let freeMemoryPointer := mload(0x40)\\n\\n            // Write the abi-encoded calldata into memory, beginning with the function selector.\\n            mstore(freeMemoryPointer, 0xa9059cbb00000000000000000000000000000000000000000000000000000000)\\n            mstore(add(freeMemoryPointer, 4), and(to, 0xffffffffffffffffffffffffffffffffffffffff)) // Append and mask the \\\"to\\\" argument.\\n            mstore(add(freeMemoryPointer, 36), amount) // Append the \\\"amount\\\" argument. Masking not required as it's a full 32 byte type.\\n\\n            success := and(\\n                // Set success to whether the call reverted, if not we check it either\\n                // returned exactly 1 (can't just be non-zero data), or had no return data.\\n                or(and(eq(mload(0), 1), gt(returndatasize(), 31)), iszero(returndatasize())),\\n                // We use 68 because the length of our calldata totals up like so: 4 + 32 * 2.\\n                // We use 0 and 32 to copy up to 32 bytes of return data into the scratch space.\\n                // Counterintuitively, this call must be positioned second to the or() call in the\\n                // surrounding and() call or else returndatasize() will be zero during the computation.\\n                call(gas(), token, 0, freeMemoryPointer, 68, 0, 32)\\n            )\\n        }\\n\\n        require(success, \\\"TRANSFER_FAILED\\\");\\n    }\\n\\n    function safeApprove(\\n        ERC20 token,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        bool success;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Get a pointer to some free memory.\\n            let freeMemoryPointer := mload(0x40)\\n\\n            // Write the abi-encoded calldata into memory, beginning with the function selector.\\n            mstore(freeMemoryPointer, 0x095ea7b300000000000000000000000000000000000000000000000000000000)\\n            mstore(add(freeMemoryPointer, 4), and(to, 0xffffffffffffffffffffffffffffffffffffffff)) // Append and mask the \\\"to\\\" argument.\\n            mstore(add(freeMemoryPointer, 36), amount) // Append the \\\"amount\\\" argument. Masking not required as it's a full 32 byte type.\\n\\n            success := and(\\n                // Set success to whether the call reverted, if not we check it either\\n                // returned exactly 1 (can't just be non-zero data), or had no return data.\\n                or(and(eq(mload(0), 1), gt(returndatasize(), 31)), iszero(returndatasize())),\\n                // We use 68 because the length of our calldata totals up like so: 4 + 32 * 2.\\n                // We use 0 and 32 to copy up to 32 bytes of return data into the scratch space.\\n                // Counterintuitively, this call must be positioned second to the or() call in the\\n                // surrounding and() call or else returndatasize() will be zero during the computation.\\n                call(gas(), token, 0, freeMemoryPointer, 68, 0, 32)\\n            )\\n        }\\n\\n        require(success, \\\"APPROVE_FAILED\\\");\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/solmate/src/utils/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\n/// @notice Gas optimized reentrancy protection for smart contracts.\\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/utils/ReentrancyGuard.sol)\\n/// @author Modified from OpenZeppelin (https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/security/ReentrancyGuard.sol)\\nabstract contract ReentrancyGuard {\\n    uint256 private locked = 1;\\n\\n    modifier nonReentrant() virtual {\\n        require(locked == 1, \\\"REENTRANCY\\\");\\n\\n        locked = 2;\\n\\n        _;\\n\\n        locked = 1;\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV // Deprecated in v4.8\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \u00f7 2 + 1, and for v in (302): v \u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/cryptography/MerkleProof.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/cryptography/MerkleProof.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev These functions deal with verification of Merkle Tree proofs.\\n *\\n * The proofs can be generated using the JavaScript library\\n * https://github.com/miguelmota/merkletreejs[merkletreejs].\\n * Note: the hashing algorithm should be keccak256 and pair sorting should be enabled.\\n *\\n * See `test/utils/cryptography/MerkleProof.test.js` for some examples.\\n *\\n * WARNING: You should avoid using leaf values that are 64 bytes long prior to\\n * hashing, or use a hash function other than keccak256 for hashing leaves.\\n * This is because the concatenation of a sorted pair of internal nodes in\\n * the merkle tree could be reinterpreted as a leaf value.\\n */\\nlibrary MerkleProof {\\n    /**\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\n     * defined by `root`. For this, a `proof` must be provided, containing\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\n     */\\n    function verify(\\n        bytes32[] memory proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        return processProof(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {verify}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function verifyCalldata(\\n        bytes32[] calldata proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        return processProofCalldata(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\\n     * hash matches the root of the tree. When processing the proof, the pairs\\n     * of leafs & pre-images are assumed to be sorted.\\n     *\\n     * _Available since v4.4._\\n     */\\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            computedHash = _hashPair(computedHash, proof[i]);\\n        }\\n        return computedHash;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {processProof}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processProofCalldata(bytes32[] calldata proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            computedHash = _hashPair(computedHash, proof[i]);\\n        }\\n        return computedHash;\\n    }\\n\\n    /**\\n     * @dev Returns true if the `leaves` can be proved to be a part of a Merkle tree defined by\\n     * `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function multiProofVerify(\\n        bytes32[] memory proof,\\n        bool[] memory proofFlags,\\n        bytes32 root,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bool) {\\n        return processMultiProof(proof, proofFlags, leaves) == root;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {multiProofVerify}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function multiProofVerifyCalldata(\\n        bytes32[] calldata proof,\\n        bool[] calldata proofFlags,\\n        bytes32 root,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bool) {\\n        return processMultiProofCalldata(proof, proofFlags, leaves) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the root of a tree reconstructed from `leaves` and the sibling nodes in `proof`,\\n     * consuming from one or the other at each step according to the instructions given by\\n     * `proofFlags`.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processMultiProof(\\n        bytes32[] memory proof,\\n        bool[] memory proofFlags,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bytes32 merkleRoot) {\\n        // This function rebuild the root hash by traversing the tree up from the leaves. The root is rebuilt by\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\n        // the merkle tree.\\n        uint256 leavesLen = leaves.length;\\n        uint256 totalHashes = proofFlags.length;\\n\\n        // Check proof validity.\\n        require(leavesLen + proof.length - 1 == totalHashes, \\\"MerkleProof: invalid multiproof\\\");\\n\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\n        bytes32[] memory hashes = new bytes32[](totalHashes);\\n        uint256 leafPos = 0;\\n        uint256 hashPos = 0;\\n        uint256 proofPos = 0;\\n        // At each step, we compute the next hash using two values:\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\n        //   get the next hash.\\n        // - depending on the flag, either another value for the \\\"main queue\\\" (merging branches) or an element from the\\n        //   `proof` array.\\n        for (uint256 i = 0; i < totalHashes; i++) {\\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\\n            bytes32 b = proofFlags[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];\\n            hashes[i] = _hashPair(a, b);\\n        }\\n\\n        if (totalHashes > 0) {\\n            return hashes[totalHashes - 1];\\n        } else if (leavesLen > 0) {\\n            return leaves[0];\\n        } else {\\n            return proof[0];\\n        }\\n    }\\n\\n    /**\\n     * @dev Calldata version of {processMultiProof}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processMultiProofCalldata(\\n        bytes32[] calldata proof,\\n        bool[] calldata proofFlags,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bytes32 merkleRoot) {\\n        // This function rebuild the root hash by traversing the tree up from the leaves. The root is rebuilt by\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\n        // the merkle tree.\\n        uint256 leavesLen = leaves.length;\\n        uint256 totalHashes = proofFlags.length;\\n\\n        // Check proof validity.\\n        require(leavesLen + proof.length - 1 == totalHashes, \\\"MerkleProof: invalid multiproof\\\");\\n\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\n        bytes32[] memory hashes = new bytes32[](totalHashes);\\n        uint256 leafPos = 0;\\n        uint256 hashPos = 0;\\n        uint256 proofPos = 0;\\n        // At each step, we compute the next hash using two values:\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\n        //   get the next hash.\\n        // - depending on the flag, either another value for the \\\"main queue\\\" (merging branches) or an element from the\\n        //   `proof` array.\\n        for (uint256 i = 0; i < totalHashes; i++) {\\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\\n            bytes32 b = proofFlags[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];\\n            hashes[i] = _hashPair(a, b);\\n        }\\n\\n        if (totalHashes > 0) {\\n            return hashes[totalHashes - 1];\\n        } else if (leavesLen > 0) {\\n            return leaves[0];\\n        } else {\\n            return proof[0];\\n        }\\n    }\\n\\n    function _hashPair(bytes32 a, bytes32 b) private pure returns (bytes32) {\\n        return a < b ? _efficientHash(a, b) : _efficientHash(b, a);\\n    }\\n\\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, a)\\n            mstore(0x20, b)\\n            value := keccak256(0x00, 0x40)\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"src/lib/LGArtLabDropErrorsAndEvents.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\nimport { PublicDrop, PaymentTokenType } from \\\"./LGArtLabDropStructs.sol\\\";\\n\\ninterface LGArtLabDropErrorsAndEvents {\\n    /**\\n     * @dev Revert with an error if the drop stage is not active.\\n     */\\n    error NotActive(\\n        uint256 currentTimestamp,\\n        uint256 startTimestamp,\\n        uint256 endTimestamp\\n    );\\n\\n    /**\\n     * @dev Revert with an error if the mint quantity is not one.\\n     */\\n    error MintQuantityShouldBeOne();\\n\\n    /**\\n     * @dev Revert with an error if the mint quantity is zero.\\n     */\\n    error MintQuantityCannotBeZero();\\n\\n    /**\\n     * @dev Revert with an error if the mint quantity exceeds the max allowed\\n     *      to be minted per wallet.\\n     */\\n    error MintQuantityExceedsMaxMintedPerWallet(uint256 total, uint256 allowed);\\n\\n    /**\\n     * @dev Revert with an error if the mint quantity exceeds the max token\\n     *      supply.\\n     */\\n    error MintQuantityExceedsMaxSupply(uint256 total, uint256 maxSupply);\\n\\n    /**\\n     * @dev Revert with an error if the mint quantity exceeds the max token\\n     *      supply for the stage.\\n     *      Note: The `maxTokenSupplyForStage` for public mint is\\n     *      always `type(uint).max`.\\n     */\\n    error MintQuantityExceedsMaxTokenSupplyForStage(\\n        uint256 total,\\n        uint256 maxTokenSupplyForStage\\n    );\\n\\n    /**\\n     * @dev Revert if the fee recipient is the zero address.\\n     */\\n    error FeeRecipientCannotBeZeroAddress();\\n\\n    /**\\n     * @dev Revert if the fee recipient is not already included.\\n     */\\n    error FeeRecipientNotPresent();\\n\\n    /**\\n     * @dev Revert if the fee basis points is greater than 10_000.\\n     */\\n    error InvalidFeeBps(uint256 feeBps);\\n\\n    /**\\n     * @dev Revert if the tax amount is greater than paymentAmount (mintPrice - feeAmount)\\n     */\\n    error InvalidTaxAmount(uint256 taxAmount, uint256 paymentAmount);\\n\\n\\n    /**\\n     * @dev \\n     */\\n    error ArrayLengthMismatch(uint256 length1, uint256 length2);\\n    \\n    /**\\n     * @dev Revert if exceeds max drop update limit.\\n     */\\n    error ExceedsMaxDropUpdateLimit();\\n\\n    /**\\n     * @dev Revert if the fee recipient is already included.\\n     */\\n    error DuplicateFeeRecipient();\\n\\n    /**\\n     * @dev Revert if the fee recipient is restricted and not allowed.\\n     */\\n    error FeeRecipientNotAllowed();\\n\\n    /**\\n     * @dev Revert if the creator payout address is the zero address.\\n     */\\n    error CreatorPayoutAddressCannotBeZeroAddress();\\n\\n    /**\\n     * @dev Revert if the payment token address is the zero address.\\n     */\\n    error PaymentTokenCannotBeZeroAddress();\\n\\n    /**\\n     * @dev Revert if the payment token balance of allowance is insufficient.\\n     */\\n    error InsufficientPaymentTokenBalanceOrAllowance(\\n        uint256 userBalance,\\n        uint256 userAllowance,\\n        uint256 requiredAmount\\n    );\\n    /**\\n     * @dev Revert with an error if the received payment is incorrect.\\n     */\\n    error IncorrectPayment(uint256 got, uint256 want);\\n\\n    /**\\n     * @dev Revert if a supplied signer address is the zero address.\\n     */\\n    error SignerCannotBeZeroAddress();\\n\\n    /**\\n     * @dev Revert with an error if signer's signature is invalid.\\n     */\\n    error InvalidSignature(address recoveredSigner);\\n\\n    /**\\n     * @dev Revert with an error if a signer is not included in\\n     *      the enumeration when removing.\\n     */\\n    error SignerNotPresent();\\n\\n    /**\\n     * @dev Revert with an error if a payer is not included in\\n     *      the enumeration when removing.\\n     */\\n    error PayerNotPresent();\\n\\n    /**\\n     * @dev Revert with an error if a payer is already included in mapping\\n     *      when adding.\\n     *      Note: only applies when adding a single payer, as duplicates in\\n     *      enumeration can be removed with updatePayer.\\n     */\\n    error DuplicatePayer();\\n\\n    /**\\n     * @dev Revert with an error if the payer is not allowed. The minter must\\n     *      pay for their own mint.\\n     */\\n    error PayerNotAllowed();\\n\\n    /**\\n     * @dev Revert if a supplied payer address is the zero address.\\n     */\\n    error PayerCannotBeZeroAddress();\\n\\n    /**\\n     * @dev Revert with an error if the sender does not\\n     *      match the INonFungibleSeaDropToken interface.\\n     */\\n    error OnlyINonFungibleLGArtLabDropToken(address sender);\\n\\n    /**\\n     * @dev An event with details of a SeaDrop mint, for analytical purposes.\\n     *\\n     * @param nftContract    The nft contract.\\n     * @param projectId      The project id.\\n     * @param minter         The mint recipient.\\n     * @param feeRecipient   The fee recipient.\\n     * @param payer          The address who payed for the tx.\\n     * @param quantityMinted The number of tokens minted.\\n     * @param unitMintPrice  The amount paid for each token.\\n     * @param feeBps         The fee out of 10_000 basis points collected.\\n     * @param dropStageIndex The drop stage index. Items minted\\n     *                       through mintPublic() have\\n     *                       dropStageIndex of 0.\\n     */\\n    event DropMint(\\n        address indexed nftContract,\\n        uint256 indexed projectId,\\n        address indexed minter,\\n        address feeRecipient,\\n        address payer,\\n        uint256 quantityMinted,\\n        uint256 unitMintPrice,\\n        uint256 feeBps,\\n        uint256 dropStageIndex\\n    );\\n\\n    /**\\n     * @dev Emit an event when payment token array initialized.\\n     */\\n    event PaymentTokenInitialized(address[6] paymentTokens);\\n\\n    /**\\n     * @dev Emit an event when payment token updated.\\n     */\\n\\n    event PaymentTokenSet(PaymentTokenType paymentTokenType, address tokenAddress);\\n\\n    /**\\n     * @dev An event with updated public drop data for an nft contract.\\n     */\\n    event PublicDropUpdated(\\n        address indexed nftContract,\\n        PublicDrop[] publicDrops\\n    );\\n\\n    /**\\n     * @dev An event with updated drop URI for an nft contract.\\n     */\\n    event DropURIUpdated(address indexed nftContract, string newDropURI);\\n\\n    /**\\n     * @dev An event with the updated creator payout address for an nft\\n     *      contract.\\n     */\\n    event CreatorPayoutAddressUpdated(\\n        address indexed nftContract,\\n        address indexed newPayoutAddress\\n    );\\n\\n    /**\\n     * @dev An event with the updated allowed fee recipient for an nft\\n     *      contract.\\n     */\\n    event AllowedFeeRecipientUpdated(\\n        address indexed nftContract,\\n        address indexed feeRecipient,\\n        bool indexed allowed\\n    );\\n\\n    /**\\n     * @dev An event with the updated payer for an nft contract.\\n     */\\n    event PayerUpdated(\\n        address indexed nftContract,\\n        address indexed payer,\\n        bool indexed allowed\\n    );\\n}\\n\"\r\n    },\r\n    \"src/interfaces/ILGArtLabDropTokenContractMetadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\nimport { IERC2981 } from \\\"openzeppelin-contracts/interfaces/IERC2981.sol\\\";\\n\\ninterface ILGArtLabDropTokenContractMetadata is IERC2981 {\\n    /**\\n     * @notice Throw if the max supply exceeds uint64\\n     */\\n    error CannotExceedMaxSupplyOfUint64(uint256 newMaxSupply);\\n\\n    /**\\n     * @dev Revert with an error when attempting to set the provenance\\n     *      hash after the mint has started.\\n     */\\n    error ProvenanceHashCannotBeSetAfterMintStarted();\\n\\n    /**\\n     * @dev Revert if the royalty basis points is greater than 10_000.\\n     */\\n    error InvalidRoyaltyBasisPoints(uint256 basisPoints);\\n\\n    /**\\n     * @dev Revert if the royalty address is being set to the zero address.\\n     */\\n    error RoyaltyAddressCannotBeZeroAddress();\\n\\n    /**\\n     * @dev Emit an event for token metadata reveals/updates,\\n     *      according to EIP-4906.\\n     *\\n     * @param _fromTokenId The start token id.\\n     * @param _toTokenId   The end token id.\\n     */\\n    event BatchMetadataUpdate(uint256 _fromTokenId, uint256 _toTokenId);\\n\\n    /**\\n     * @dev Emit an event when the URI for the collection-level metadata\\n     *      is updated.\\n     */\\n    event ContractURIUpdated(string newContractURI);\\n\\n    /**\\n     * @dev Emit an event when the max token supply is updated.\\n     */\\n    event MaxSupplyUpdated(uint256 newMaxSupply);\\n\\n    /**\\n     * @dev Emit an event when the project max token supply is updated.\\n     */\\n\\n    event ProjectMaxSupplyUpdated(uint256 projectId, uint256 newMaxSupply);\\n\\n    /**\\n     * @dev Emit an event with the previous and new provenance hash after\\n     *      being updated.\\n     */\\n    event ProvenanceHashUpdated(bytes32 previousHash, bytes32 newHash);\\n\\n    /**\\n     * @dev Emit an event when the royalties info is updated.\\n     */\\n    event RoyaltyInfoUpdated(address receiver, uint256 bps);\\n\\n    /**\\n     * @notice A struct defining royalty info for the contract.\\n     */\\n    struct RoyaltyInfo {\\n        address royaltyAddress;\\n        uint96 royaltyBps;\\n    }\\n\\n    /**\\n     * @notice Sets the base URI for the token metadata and emits an event.\\n     *\\n     * @param tokenURI The new base URI to set.\\n     */\\n    function setBaseURI(string calldata tokenURI) external;\\n\\n    /**\\n     * @notice Sets the contract URI for contract metadata.\\n     *\\n     * @param newContractURI The new contract URI.\\n     */\\n    function setContractURI(string calldata newContractURI) external;\\n\\n    /**\\n     * @notice Sets the max supply and emits an event.\\n     *\\n     * @param newMaxSupply The new max supply to set.\\n     */\\n    function setMaxSupply(uint256 newMaxSupply) external;\\n\\n    /**\\n     * @notice Sets the provenance hash and emits an event.\\n     *\\n     *         The provenance hash is used for random reveals, which\\n     *         is a hash of the ordered metadata to show it has not been\\n     *         modified after mint started.\\n     *\\n     *         This function will revert after the first item has been minted.\\n     *\\n     * @param newProvenanceHash The new provenance hash to set.\\n     */\\n    function setProvenanceHash(\\n        uint256 projectId,\\n        bytes32 newProvenanceHash\\n    ) external;\\n\\n    /**\\n     * @notice Sets the address and basis points for royalties.\\n     *\\n     * @param newInfo The struct to configure royalties.\\n     */\\n    function setRoyaltyInfo(RoyaltyInfo calldata newInfo) external;\\n\\n    /**\\n     * @notice Returns the base URI for token metadata.\\n     */\\n    function baseURI(uint256 projectId) external view returns (string memory);\\n\\n    /**\\n     * @notice Returns the contract URI.\\n     */\\n    function contractURI() external view returns (string memory);\\n\\n    /**\\n     * @notice Returns the max token supply.\\n     */\\n    function maxSupply() external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the provenance hash.\\n     *         The provenance hash is used for random reveals, which\\n     *         is a hash of the ordered metadata to show it is unmodified\\n     *         after mint has started.\\n     */\\n    function provenanceHash(uint256 projectId) external view returns (bytes32);\\n\\n    /**\\n     * @notice Returns the address that receives royalties.\\n     */\\n    function royaltyAddress() external view returns (address);\\n\\n    /**\\n     * @notice Returns the royalty basis points out of 10_000.\\n     */\\n    function royaltyBasisPoints() external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/solmate/src/tokens/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\n/// @notice Modern and gas efficient ERC20 + EIP-2612 implementation.\\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/tokens/ERC20.sol)\\n/// @author Modified from Uniswap (https://github.com/Uniswap/uniswap-v2-core/blob/master/contracts/UniswapV2ERC20.sol)\\n/// @dev Do not manually set balances without updating totalSupply, as the sum of all user balances must not exceed it.\\nabstract contract ERC20 {\\n    /*//////////////////////////////////////////////////////////////\\n                                 EVENTS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    event Transfer(address indexed from, address indexed to, uint256 amount);\\n\\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            METADATA STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    string public name;\\n\\n    string public symbol;\\n\\n    uint8 public immutable decimals;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                              ERC20 STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    uint256 public totalSupply;\\n\\n    mapping(address => uint256) public balanceOf;\\n\\n    mapping(address => mapping(address => uint256)) public allowance;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            EIP-2612 STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    uint256 internal immutable INITIAL_CHAIN_ID;\\n\\n    bytes32 internal immutable INITIAL_DOMAIN_SEPARATOR;\\n\\n    mapping(address => uint256) public nonces;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                               CONSTRUCTOR\\n    //////////////////////////////////////////////////////////////*/\\n\\n    constructor(\\n        string memory _name,\\n        string memory _symbol,\\n        uint8 _decimals\\n    ) {\\n        name = _name;\\n        symbol = _symbol;\\n        decimals = _decimals;\\n\\n        INITIAL_CHAIN_ID = block.chainid;\\n        INITIAL_DOMAIN_SEPARATOR = computeDomainSeparator();\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                               ERC20 LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function approve(address spender, uint256 amount) public virtual returns (bool) {\\n        allowance[msg.sender][spender] = amount;\\n\\n        emit Approval(msg.sender, spender, amount);\\n\\n        return true;\\n    }\\n\\n    function transfer(address to, uint256 amount) public virtual returns (bool) {\\n        balanceOf[msg.sender] -= amount;\\n\\n        // Cannot overflow because the sum of all user\\n        // balances can't exceed the max uint256 value.\\n        unchecked {\\n            balanceOf[to] += amount;\\n        }\\n\\n        emit Transfer(msg.sender, to, amount);\\n\\n        return true;\\n    }\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual returns (bool) {\\n        uint256 allowed = allowance[from][msg.sender]; // Saves gas for limited approvals.\\n\\n        if (allowed != type(uint256).max) allowance[from][msg.sender] = allowed - amount;\\n\\n        balanceOf[from] -= amount;\\n\\n        // Cannot overflow because the sum of all user\\n        // balances can't exceed the max uint256 value.\\n        unchecked {\\n            balanceOf[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        return true;\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                             EIP-2612 LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public virtual {\\n        require(deadline >= block.timestamp, \\\"PERMIT_DEADLINE_EXPIRED\\\");\\n\\n        // Unchecked because the only math done is incrementing\\n        // the owner's nonce which cannot realistically overflow.\\n        unchecked {\\n            address recoveredAddress = ecrecover(\\n                keccak256(\\n                    abi.encodePacked(\\n                        \\\"\\\\x19\\\\x01\\\",\\n                        DOMAIN_SEPARATOR(),\\n                        keccak256(\\n                            abi.encode(\\n                                keccak256(\\n                                    \\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\"\\n                                ),\\n                                owner,\\n                                spender,\\n                                value,\\n                                nonces[owner]++,\\n                                deadline\\n                            )\\n                        )\\n                    )\\n                ),\\n                v,\\n                r,\\n                s\\n            );\\n\\n            require(recoveredAddress != address(0) && recoveredAddress == owner, \\\"INVALID_SIGNER\\\");\\n\\n            allowance[recoveredAddress][spender] = value;\\n        }\\n\\n        emit Approval(owner, spender, value);\\n    }\\n\\n    function DOMAIN_SEPARATOR() public view virtual returns (bytes32) {\\n        return block.chainid == INITIAL_CHAIN_ID ? INITIAL_DOMAIN_SEPARATOR : computeDomainSeparator();\\n    }\\n\\n    function computeDomainSeparator() internal view virtual returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encode(\\n                    keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"),\\n                    keccak256(bytes(name)),\\n                    keccak256(\\\"1\\\"),\\n                    block.chainid,\\n                    address(this)\\n                )\\n            );\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                        INTERNAL MINT/BURN LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function _mint(address to, uint256 amount) internal virtual {\\n        totalSupply += amount;\\n\\n        // Cannot overflow because the sum of all user\\n        // balances can't exceed the max uint256 value.\\n        unchecked {\\n            balanceOf[to] += amount;\\n        }\\n\\n        emit Transfer(address(0), to, amount);\\n    }\\n\\n    function _burn(address from, uint256 amount) internal virtual {\\n        balanceOf[from] -= amount;\\n\\n        // Cannot underflow because a user's balance\\n        // will never be larger than the total supply.\\n        unchecked {\\n            totalSupply -= amount;\\n        }\\n\\n        emit Transfer(from, address(0), amount);\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/interfaces/IERC2981.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (interfaces/IERC2981.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Interface for the NFT Royalty Standard.\\n *\\n * A standardized way to retrieve royalty payment information for non-fungible tokens (NFTs) to enable universal\\n * support for royalty payments across all NFT marketplaces and ecosystem participants.\\n *\\n * _Available since v4.5._\\n */\\ninterface IERC2981 is IERC165 {\\n    /**\\n     * @dev Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of\\n     * exchange. The royalty amount is denominated and should be paid in that same unit of exchange.\\n     */\\n    function royaltyInfo(uint256 tokenId, uint256 salePrice)\\n        external\\n        view\\n        returns (address receiver, uint256 royaltyAmount);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/math/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [\r\n      \"ERC721A/=lib/ERC721A/contracts/\",\r\n      \"ERC721A-Upgradeable/=lib/ERC721A-Upgradeable/contracts/\",\r\n      \"ds-test/=lib/ds-test/src/\",\r\n      \"forge-std/=lib/forge-std/src/\",\r\n      \"murky/=lib/murky/src/\",\r\n      \"openzeppelin-contracts/=lib/openzeppelin-contracts/contracts/\",\r\n      \"openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/\",\r\n      \"operator-filter-registry/=lib/operator-filter-registry/src/\",\r\n      \"drop/=src/\",\r\n      \"solmate/=lib/solmate/src/\",\r\n      \"utility-contracts/=lib/utility-contracts/src/\",\r\n      \"create2-scripts/=lib/create2-helpers/script/\",\r\n      \"@openzeppelin/contracts/=lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/\",\r\n      \"create2-helpers/=lib/create2-helpers/\",\r\n      \"erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/\"\r\n    ],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1000000\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": false,\r\n      \"bytecodeHash\": \"none\"\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"london\",\r\n    \"viaIR\": false,\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address[6]\",\"name\":\"paymentTokens\",\"type\":\"address[6]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"length1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"length2\",\"type\":\"uint256\"}],\"name\":\"ArrayLengthMismatch\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CreatorPayoutAddressCannotBeZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DuplicateFeeRecipient\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DuplicatePayer\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ExceedsMaxDropUpdateLimit\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FeeRecipientCannotBeZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FeeRecipientNotAllowed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FeeRecipientNotPresent\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"got\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"want\",\"type\":\"uint256\"}],\"name\":\"IncorrectPayment\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"userBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"userAllowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"requiredAmount\",\"type\":\"uint256\"}],\"name\":\"InsufficientPaymentTokenBalanceOrAllowance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"feeBps\",\"type\":\"uint256\"}],\"name\":\"InvalidFeeBps\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recoveredSigner\",\"type\":\"address\"}],\"name\":\"InvalidSignature\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"taxAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"paymentAmount\",\"type\":\"uint256\"}],\"name\":\"InvalidTaxAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintQuantityCannotBeZero\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"allowed\",\"type\":\"uint256\"}],\"name\":\"MintQuantityExceedsMaxMintedPerWallet\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxSupply\",\"type\":\"uint256\"}],\"name\":\"MintQuantityExceedsMaxSupply\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxTokenSupplyForStage\",\"type\":\"uint256\"}],\"name\":\"MintQuantityExceedsMaxTokenSupplyForStage\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintQuantityShouldBeOne\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"currentTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTimestamp\",\"type\":\"uint256\"}],\"name\":\"NotActive\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"OnlyINonFungibleLGArtLabDropToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PayerCannotBeZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PayerNotAllowed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PayerNotPresent\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PaymentTokenCannotBeZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SignerCannotBeZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SignerNotPresent\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nftContract\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"feeRecipient\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"allowed\",\"type\":\"bool\"}],\"name\":\"AllowedFeeRecipientUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nftContract\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newPayoutAddress\",\"type\":\"address\"}],\"name\":\"CreatorPayoutAddressUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nftContract\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"projectId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"feeRecipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"payer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"quantityMinted\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"unitMintPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feeBps\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"dropStageIndex\",\"type\":\"uint256\"}],\"name\":\"DropMint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nftContract\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"newDropURI\",\"type\":\"string\"}],\"name\":\"DropURIUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nftContract\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"payer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"allowed\",\"type\":\"bool\"}],\"name\":\"PayerUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[6]\",\"name\":\"paymentTokens\",\"type\":\"address[6]\"}],\"name\":\"PaymentTokenInitialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"enum PaymentTokenType\",\"name\":\"paymentTokenType\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"PaymentTokenSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nftContract\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint80\",\"name\":\"mintPrice\",\"type\":\"uint80\"},{\"internalType\":\"uint48\",\"name\":\"startTime\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"endTime\",\"type\":\"uint48\"},{\"internalType\":\"uint16\",\"name\":\"maxTotalMintableByWallet\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"feeBps\",\"type\":\"uint16\"},{\"internalType\":\"bool\",\"name\":\"restrictFeeRecipients\",\"type\":\"bool\"},{\"internalType\":\"enum PaymentTokenType\",\"name\":\"paymentToken\",\"type\":\"uint8\"}],\"indexed\":false,\"internalType\":\"struct PublicDrop[]\",\"name\":\"publicDrops\",\"type\":\"tuple[]\"}],\"name\":\"PublicDropUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftContract\",\"type\":\"address\"}],\"name\":\"getAllowedFeeRecipients\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftContract\",\"type\":\"address\"}],\"name\":\"getCreatorPayoutAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"feeRecipient\",\"type\":\"address\"}],\"name\":\"getFeeRecipientIsAllowed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"payer\",\"type\":\"address\"}],\"name\":\"getPayerIsAllowed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftContract\",\"type\":\"address\"}],\"name\":\"getPayers\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPaymentTokens\",\"outputs\":[{\"internalType\":\"address[6]\",\"name\":\"\",\"type\":\"address[6]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"projectId\",\"type\":\"uint256\"}],\"name\":\"getPublicDrop\",\"outputs\":[{\"components\":[{\"internalType\":\"uint80\",\"name\":\"mintPrice\",\"type\":\"uint80\"},{\"internalType\":\"uint48\",\"name\":\"startTime\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"endTime\",\"type\":\"uint48\"},{\"internalType\":\"uint16\",\"name\":\"maxTotalMintableByWallet\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"feeBps\",\"type\":\"uint16\"},{\"internalType\":\"bool\",\"name\":\"restrictFeeRecipients\",\"type\":\"bool\"},{\"internalType\":\"enum PaymentTokenType\",\"name\":\"paymentToken\",\"type\":\"uint8\"}],\"internalType\":\"struct PublicDrop\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"projectId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"feeRecipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"minterIfNotPayer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tax\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"}],\"name\":\"mintPublic\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum PaymentTokenType\",\"name\":\"paymentTokenType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"setPaymentToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeRecipient\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"allowed\",\"type\":\"bool\"}],\"name\":\"updateAllowedFeeRecipient\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"payoutAddress\",\"type\":\"address\"}],\"name\":\"updateCreatorPayoutAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"projectId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"dropURI\",\"type\":\"string\"}],\"name\":\"updateDropURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"payer\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"allowed\",\"type\":\"bool\"}],\"name\":\"updatePayer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"projectIds\",\"type\":\"uint256[]\"},{\"components\":[{\"internalType\":\"uint80\",\"name\":\"mintPrice\",\"type\":\"uint80\"},{\"internalType\":\"uint48\",\"name\":\"startTime\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"endTime\",\"type\":\"uint48\"},{\"internalType\":\"uint16\",\"name\":\"maxTotalMintableByWallet\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"feeBps\",\"type\":\"uint16\"},{\"internalType\":\"bool\",\"name\":\"restrictFeeRecipients\",\"type\":\"bool\"},{\"internalType\":\"enum PaymentTokenType\",\"name\":\"paymentToken\",\"type\":\"uint8\"}],\"internalType\":\"struct PublicDrop[]\",\"name\":\"publicDrops\",\"type\":\"tuple[]\"}],\"name\":\"updatePublicDrops\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "LGArtLabDrop", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "1000000", "ConstructorArguments": "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb48000000000000000000000000dac17f958d2ee523a2206206994597c13d831ec70000000000000000000000006b175474e89094c44da98b954eedeac495271d0f0000000000000000000000000000000000000000000000000000000000000001", "EVMVersion": "london", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}