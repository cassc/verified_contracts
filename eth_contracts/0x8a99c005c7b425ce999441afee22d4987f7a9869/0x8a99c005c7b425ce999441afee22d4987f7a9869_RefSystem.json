{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"src/RefSystem.sol\": {\r\n      \"content\": \"// ALL CONTRACTS DEPLOYED USING OUR FACTORY ARE ANTI-RUG BY DEFAULT: CONTRACT RENOUNCED, LIQ LOCKED FOR 30 DAYS ON UNCX, CANT CHANGE ANY VARIABLE BUT TAX RECEIVER!\\n// Saintbot\\n// Deploy and manage fair launch anti-rug tokens seamlessly and lightning-fast with low gas on our free-to-use Telegram bot.\\n// Website: saintbot.app/\\n// Twitter: twitter.com/TeamSaintbot\\n// Telegram Bot: https://t.me/saintbot_deployer_bot\\n// Docs: https://saintbots-organization.gitbook.io/saintbot-docs/\\n\\n// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.10;\\n\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n}\\n\\ncontract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    constructor() {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    modifier onlyOwner() {\\n        require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\\ncontract RefSystem is Ownable {\\n    // Store keccak256 identification that tracks back to the user who created the referral\\n    mapping(bytes32 => address) private ref;\\n\\n    address public refCreator;\\n\\n    bool public limitedRefCreation = true;\\n    bool internal paused = false;\\n\\n    function addNewRef(bytes memory _refCode, address _revenueReceiver) external {\\n        if (paused) revert();\\n\\n        if (limitedRefCreation) {\\n            // Only ref creator can create ref\\n            if (msg.sender != refCreator) revert Auth();\\n        }\\n\\n        uint256 size;\\n\\n        assembly {\\n            size := extcodesize(_revenueReceiver)\\n        }\\n\\n        // Hash the input\\n        bytes32 newCode = keccak256(_refCode);\\n\\n        // Ref code cant exist yet\\n        if (ref[newCode] != address(0)) revert AlreadyExist();\\n        // Receiver cant be a contract\\n        if (size != 0) revert Contract();\\n        // Cant send ETH to burn address\\n        if (_revenueReceiver == address(0)) revert BurnAddress();\\n        // Needs to be at least 3 characters\\n        if (_refCode.length < 3 || _refCode.length > 11) revert Length();\\n\\n        ref[newCode] = _revenueReceiver;\\n\\n        emit NewRefCreated(newCode, _refCode, _revenueReceiver);\\n    }\\n\\n    function getRefReceiver(bytes memory _refCode) public view returns (address receiverWallet) {\\n        receiverWallet = ref[keccak256(_refCode)];\\n    }\\n\\n    function onlyRefCreator(bool _toggle) external onlyOwner {\\n        limitedRefCreation = _toggle;\\n    }\\n\\n    function rescueRef(bytes memory _refCode, address _newAddress) external onlyOwner {\\n        ref[keccak256(_refCode)] = _newAddress;\\n    }\\n\\n    function updateRefCreator(address _refCreator) external onlyOwner {\\n        refCreator = _refCreator;\\n    }\\n\\n    function updatePaused(bool _paused) external onlyOwner {\\n        paused = _paused;\\n    }\\n\\n    event NewRefCreated(bytes32 refHash, bytes code, address refReceiver);\\n\\n    error AlreadyExist();\\n    error Auth();\\n    error Contract();\\n    error BurnAddress();\\n    error Length();\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [\r\n      \"ds-test/=lib/forge-std/lib/ds-test/src/\",\r\n      \"erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/\",\r\n      \"forge-std/=lib/forge-std/src/\",\r\n      \"openzeppelin-contracts/=lib/openzeppelin-contracts/\",\r\n      \"lib/forge-std:ds-test/=lib/forge-std/lib/ds-test/src/\",\r\n      \"lib/openzeppelin-contracts:ds-test/=lib/openzeppelin-contracts/lib/forge-std/lib/ds-test/src/\",\r\n      \"lib/openzeppelin-contracts:erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/\",\r\n      \"lib/openzeppelin-contracts:forge-std/=lib/openzeppelin-contracts/lib/forge-std/src/\",\r\n      \"lib/openzeppelin-contracts:openzeppelin/=lib/openzeppelin-contracts/contracts/\"\r\n    ],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": false,\r\n      \"bytecodeHash\": \"ipfs\"\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"name\":\"AlreadyExist\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Auth\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BurnAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Contract\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Length\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"refHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"code\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"refReceiver\",\"type\":\"address\"}],\"name\":\"NewRefCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_refCode\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"_revenueReceiver\",\"type\":\"address\"}],\"name\":\"addNewRef\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_refCode\",\"type\":\"bytes\"}],\"name\":\"getRefReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"receiverWallet\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitedRefCreation\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_toggle\",\"type\":\"bool\"}],\"name\":\"onlyRefCreator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"refCreator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_refCode\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"_newAddress\",\"type\":\"address\"}],\"name\":\"rescueRef\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_paused\",\"type\":\"bool\"}],\"name\":\"updatePaused\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_refCreator\",\"type\":\"address\"}],\"name\":\"updateRefCreator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "RefSystem", "CompilerVersion": "v0.8.10+commit.fc410830", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}