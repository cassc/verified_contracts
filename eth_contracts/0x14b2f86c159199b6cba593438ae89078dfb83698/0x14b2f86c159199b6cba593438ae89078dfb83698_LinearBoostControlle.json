{"SourceCode": "// Sources flattened with hardhat v2.11.2 https://hardhat.org\r\n\r\n// File @openzeppelin/contracts/utils/Context.sol@v4.7.0\r\n\r\n// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/access/Ownable.sol@v4.7.0\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the owner.\r\n     */\r\n    function _checkOwner() internal view virtual {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n\r\n// File contracts/core/sdlPool/LinearBoostController.sol\r\n\r\n\r\npragma solidity 0.8.15;\r\n\r\n/**\r\n * @title Linear Boost Controller\r\n * @notice Handles boost calculations\r\n */\r\ncontract LinearBoostController is Ownable {\r\n    uint64 public maxLockingDuration;\r\n    uint64 public maxBoost;\r\n\r\n    event SetMaxLockingDuration(uint256 _maxLockingDuration);\r\n    event SetMaxBoost(uint256 _maxBoost);\r\n\r\n    error MaxLockingDurationExceeded();\r\n\r\n    /**\r\n     * @notice initializes the contract state\r\n     * @param _maxLockingDuration maximum locking duration in seconds\r\n     * @param _maxBoost maximum boost multiplier\r\n     */\r\n    constructor(uint64 _maxLockingDuration, uint64 _maxBoost) {\r\n        maxLockingDuration = _maxLockingDuration;\r\n        maxBoost = _maxBoost;\r\n    }\r\n\r\n    /**\r\n     * @notice returns the amount of boost balance received for `_amount` of SDL with `_lockingDuration`\r\n     * @dev reverts if `_lockingDuration` exceeds maxLockingDuration\r\n     * @param _amount amount of tokens to lock\r\n     * @param _lockingDuration duration of the locking period\r\n     * @return amount of boost balance received in addition to the unboosted balance\r\n     */\r\n    function getBoostAmount(uint256 _amount, uint64 _lockingDuration) external view returns (uint256) {\r\n        if (_lockingDuration > maxLockingDuration) revert MaxLockingDurationExceeded();\r\n        return (_amount * uint256(maxBoost) * uint256(_lockingDuration)) / uint256(maxLockingDuration);\r\n    }\r\n\r\n    /**\r\n     * @notice sets the maximum locking duration\r\n     * @param _maxLockingDuration max locking duration in seconds\r\n     */\r\n    function setMaxLockingDuration(uint64 _maxLockingDuration) external onlyOwner {\r\n        maxLockingDuration = _maxLockingDuration;\r\n        emit SetMaxLockingDuration(_maxLockingDuration);\r\n    }\r\n\r\n    /**\r\n     * @notice sets the maximum boost multiplier\r\n     * @dev a multiplier of 1 would mean that a staker's balance is doubled if they lock for the max\r\n     * locking duration\r\n     * @param _maxBoost max boost multiplier\r\n     */\r\n    function setMaxBoost(uint64 _maxBoost) external onlyOwner {\r\n        maxBoost = _maxBoost;\r\n        emit SetMaxBoost(_maxBoost);\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_maxLockingDuration\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"_maxBoost\",\"type\":\"uint64\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"MaxLockingDurationExceeded\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_maxBoost\",\"type\":\"uint256\"}],\"name\":\"SetMaxBoost\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_maxLockingDuration\",\"type\":\"uint256\"}],\"name\":\"SetMaxLockingDuration\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"_lockingDuration\",\"type\":\"uint64\"}],\"name\":\"getBoostAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxBoost\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxLockingDuration\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_maxBoost\",\"type\":\"uint64\"}],\"name\":\"setMaxBoost\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_maxLockingDuration\",\"type\":\"uint64\"}],\"name\":\"setMaxLockingDuration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "LinearBoostController", "CompilerVersion": "v0.8.15+commit.e14f2714", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000000000000000000000000000000000000784ce000000000000000000000000000000000000000000000000000000000000000008", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://bfd72ca30abd7c6fd063f2477ad2a3ea08ec49b2e361b5056fcf09a190113c24"}