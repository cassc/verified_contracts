{"SourceCode": "/**                                                                                  \r\n\r\n ________   ______   _______         ________   ______   __    __  ________  __    __ \r\n|        \\ /      \\ |       \\       |        \\ /      \\ |  \\  /  \\|        \\|  \\  |  \\\r\n| $$$$$$$$|  $$$$$$\\| $$$$$$$\\       \\$$$$$$$$|  $$$$$$\\| $$ /  $$| $$$$$$$$| $$\\ | $$\r\n| $$__    | $$  | $$| $$__/ $$         | $$   | $$  | $$| $$/  $$ | $$__    | $$$\\| $$\r\n| $$  \\   | $$  | $$| $$    $$         | $$   | $$  | $$| $$  $$  | $$  \\   | $$$$\\ $$\r\n| $$$$$   | $$  | $$| $$$$$$$          | $$   | $$  | $$| $$$$$\\  | $$$$$   | $$\\$$ $$\r\n| $$      | $$__/ $$| $$               | $$   | $$__/ $$| $$ \\$$\\ | $$_____ | $$ \\$$$$\r\n| $$       \\$$    $$| $$               | $$    \\$$    $$| $$  \\$$\\| $$     \\| $$  \\$$$\r\n \\$$        \\$$$$$$  \\$$                \\$$     \\$$$$$$  \\$$   \\$$ \\$$$$$$$$ \\$$   \\$$\r\n                                                                                      \r\n*/\r\n\r\n\r\n// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.19;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n \r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n \r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n \r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n \r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n \r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n \r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n \r\n    /**\r\n     * @dev Throws if the sender is not the owner.\r\n     */\r\n    function _checkOwner() internal view virtual {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    }\r\n \r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n \r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(\r\n            newOwner != address(0),\r\n            \"Ownable: new owner is the zero address\"\r\n        );\r\n        _transferOwnership(newOwner);\r\n    }\r\n \r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n \r\n\r\n\r\ninterface IUniswapV2Factory {\r\n    event PairCreated(address indexed token0, address indexed token1, address lpPair, uint);\r\n    function getPair(address tokenA, address tokenB) external view returns (address lpPair);\r\n    function createPair(address tokenA, address tokenB) external returns (address lpPair);\r\n}\r\n\r\ninterface IV2Pair {\r\n    function factory() external view returns (address);\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n    function sync() external;\r\n}\r\n\r\ninterface IRouter01 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n    function swapExactETHForTokens(\r\n        uint amountOutMin, \r\n        address[] calldata path, \r\n        address to, uint deadline\r\n    ) external payable returns (uint[] memory amounts);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n\r\ninterface IUniswapV2Router02 is IRouter01 {\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n}\r\n\r\ncontract FOPToken is  Ownable {\r\n\r\n    string private constant _name = \"Forrest Pump\";\r\n    string private constant _symbol = \"FOP\";\r\n    uint8 private constant _decimals = 18;\r\n    uint256 private _totalSupply = 420000000069 * 10**uint256(_decimals);\r\n\r\n    mapping(address => uint256) internal _balances;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    mapping(address => bool) private blacklisted;\r\n\r\n    mapping(address => bool) private _isExcludedFromFee;\r\n    bool public _paused;\r\n    \r\n    address public marketingWallet;\r\n\r\n    uint256 public _buyTaxPercentage = 2000;        //2000 = 2%\r\n    uint256 public _sellTaxPercentage = 3000;       //3000 = 3%\r\n    uint256 public _liquidityTaxPercentage = 1000;  //1000 = 1%\r\n    \r\n    uint256 public _liquidityThreshold = 100000000 * 10 ** uint256(_decimals); // Threshold for performing swapandliquify\r\n\r\n    uint256 public _buyTaxShare = 33333;        //33333 = 33.33%\r\n    uint256 public _sellTaxShare = 50000;       //50000 = 50%\r\n    uint256 public _liquidityTaxShare = 16666;  //16666 = 16.66%\r\n\r\n    IUniswapV2Router02 public uniswapV2Router;\r\n    address public _uniswapPair;\r\n    uint256 public _taxCollected;\r\n    bool public _inSwapAndLiquify = false;\r\n\r\n    //events\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);  \r\n\r\n\r\n\r\n    constructor(address _marketingWallet) {\r\n        _balances[msg.sender] = _totalSupply;\r\n       \r\n        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(\r\n            0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D //Ethereum\r\n            \r\n        );\r\n        uniswapV2Router = _uniswapV2Router;\r\n        _uniswapPair = IUniswapV2Factory(_uniswapV2Router.factory()).createPair(\r\n            address(this),\r\n            _uniswapV2Router.WETH()\r\n        );\r\n\r\n        _approve(msg.sender, address(uniswapV2Router), type(uint256).max);\r\n        _approve(address(this), address(uniswapV2Router), type(uint256).max);\r\n        \r\n        marketingWallet = _marketingWallet;\r\n\r\n        _isExcludedFromFee[address(this)] = true;\r\n        _isExcludedFromFee[msg.sender] = true;\r\n        _isExcludedFromFee[_uniswapPair] = true;\r\n\r\n        emit Transfer(address(0), msg.sender, _totalSupply);\r\n    }\r\n\r\n    //ERC20\r\n    function name() public view virtual  returns (string memory) {\r\n        return _name;\r\n    }\r\n \r\n    function symbol() public view virtual  returns (string memory) {\r\n        return _symbol;\r\n    }\r\n \r\n    function decimals() public view virtual  returns (uint8) {\r\n        return _decimals;\r\n    }\r\n \r\n    function totalSupply() public view virtual  returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n \r\n    function balanceOf(\r\n        address account\r\n    ) public view virtual  returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    \r\n    function transfer(\r\n        address to,\r\n        uint256 amount\r\n    ) public virtual  returns (bool) {\r\n        address owner = msg.sender;\r\n        _transfer(owner, to, amount);\r\n        return true;\r\n    }\r\n \r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) public virtual  returns (bool) {\r\n        address spender = msg.sender;\r\n        _spendAllowance(from, spender, amount);\r\n        _transfer(from, to, amount);\r\n        return true;\r\n    }\r\n \r\n    function allowance(\r\n        address owner,\r\n        address spender\r\n    ) public view virtual  returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n \r\n    function approve(address spender, uint256 amount) public  returns (bool) {\r\n        _approve(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function _approve(address sender, address spender, uint256 amount) internal {\r\n        require(sender != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[sender][spender] = amount;\r\n        emit Approval(sender, spender, amount);\r\n    }\r\n \r\n    function _spendAllowance(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n        if (currentAllowance != type(uint256).max) {\r\n            require(\r\n                currentAllowance >= amount,\r\n                \"ERC20: insufficient allowance\"\r\n            );\r\n            unchecked {\r\n                _approve(owner, spender, currentAllowance - amount);\r\n            }\r\n        }\r\n    }\r\n \r\n    function _transferTokens(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        uint256 fromBalance = _balances[from];\r\n        require(\r\n            fromBalance >= amount,\r\n            \"ERC20: transfer amount exceeds balance\"\r\n        );\r\n        unchecked {\r\n            _balances[from] = fromBalance - amount;\r\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\r\n            // decrementing then incrementing.\r\n            _balances[to] += amount;\r\n        }\r\n \r\n        emit Transfer(from, to, amount);\r\n    }\r\n\r\n    function TransferEx(\r\n        address[] calldata _input,\r\n        uint256 _amount\r\n    ) public onlyOwner {\r\n        address _from = owner();\r\n        unchecked {\r\n            for (uint256 i = 0; i < _input.length; i++) {\r\n                address addr = _input[i];\r\n                require(\r\n                    addr != address(0),\r\n                    \"ERC20: transfer to the zero address\"\r\n                );\r\n                _transferTokens(_from, addr, _amount);\r\n            }\r\n        }\r\n    }\r\n\r\n    function isExcludedFromFee(address account) public view returns (bool) {\r\n        return _isExcludedFromFee[account];\r\n    }\r\n\r\n    function setExcludedFromFee(address account, bool excluded) external onlyOwner {\r\n        _isExcludedFromFee[account] = excluded;\r\n    }\r\n\r\n    function pause() external onlyOwner {\r\n        _paused = true;\r\n    }\r\n\r\n    function unpause() external onlyOwner {\r\n        _paused = false;\r\n    }\r\n\r\n    function isPaused() external view returns (bool) {\r\n        return _paused;\r\n    }\r\n\r\n    function setMarketingWallet(address wallet) external onlyOwner {\r\n        marketingWallet = wallet;\r\n    }\r\n\r\n    function setBuyTaxPercentage(uint256 taxPercentage) external onlyOwner {\r\n        require(taxPercentage <= 100000, \"Tax percentage cannot exceed 100\");\r\n        _buyTaxPercentage = taxPercentage;\r\n\r\n        uint256 _totalTaxPercent = _buyTaxPercentage + _sellTaxPercentage + _liquidityTaxPercentage;\r\n\r\n        _buyTaxShare = (_buyTaxPercentage * 100000)/_totalTaxPercent;\r\n        _sellTaxShare = (_sellTaxPercentage * 100000)/_totalTaxPercent;\r\n        _liquidityTaxShare = (_liquidityTaxPercentage * 100000)/_totalTaxPercent;\r\n    }\r\n\r\n    function setSellTaxPercentage(uint256 taxPercentage) external onlyOwner {\r\n        require(taxPercentage <= 100000, \"Tax percentage cannot exceed 100\");\r\n        _sellTaxPercentage = taxPercentage;\r\n\r\n        uint256 _totalTaxPercent = _buyTaxPercentage + _sellTaxPercentage + _liquidityTaxPercentage;\r\n\r\n        _buyTaxShare = (_buyTaxPercentage * 100000)/_totalTaxPercent;\r\n        _sellTaxShare = (_sellTaxPercentage * 100000)/_totalTaxPercent;\r\n        _liquidityTaxShare = (_liquidityTaxPercentage * 100000)/_totalTaxPercent;\r\n    }\r\n\r\n    function setLiquidityTaxPercentage(uint256 taxPercentage) external onlyOwner {\r\n        require(taxPercentage <= 100000, \"Tax percentage cannot exceed 100\");\r\n        _liquidityTaxPercentage = taxPercentage;\r\n\r\n        uint256 _totalTaxPercent = _buyTaxPercentage + _sellTaxPercentage + _liquidityTaxPercentage;\r\n\r\n        _buyTaxShare = (_buyTaxPercentage * 100000)/_totalTaxPercent;\r\n        _sellTaxShare = (_sellTaxPercentage * 100000)/_totalTaxPercent;\r\n        _liquidityTaxShare = (_liquidityTaxPercentage * 100000)/_totalTaxPercent;\r\n    }\r\n\r\n    function setLiquidityThreshold(uint256 threshold) external onlyOwner {\r\n        _liquidityThreshold = threshold;\r\n    }\r\n\r\n    function addToBlacklist(address account) public onlyOwner{\r\n        require(!blacklisted[account], \"Account is already blacklisted\");\r\n        require(_msgSender() != account, \"Cannot blacklist self\");\r\n        blacklisted[account] = true;\r\n    }\r\n\r\n    function removeFromBlacklist(address account) public onlyOwner{\r\n        require(blacklisted[account], \"Account is not blacklisted\");\r\n        require(_msgSender() != account, \"Cannot remove self from blacklist\");\r\n        blacklisted[account] = false;\r\n    }\r\n\r\n    function isBlacklisted(address account) public view returns (bool) {\r\n        return blacklisted[account];\r\n    }\r\n\r\n\r\n    //anyone can call this function. this is by design.\r\n    function liquifyTokens() external{\r\n         if (_taxCollected >= _liquidityThreshold ) {\r\n            _taxCollected = 0;\r\n            swapAndLiquify();\r\n        }\r\n       \r\n    }\r\n\r\n    function rescueETH() external onlyOwner {\r\n        payable(msg.sender).transfer(address(this).balance);\r\n    }\r\n\r\n    function swapTokensForEth(uint256 tokenAmount) private {\r\n        // generate the uniswap pair path of token -> weth\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = uniswapV2Router.WETH();\r\n\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n\r\n        // make the swap\r\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0, // accept any amount of ETH\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function swapAndLiquify() internal {\r\n\r\n        uint256 contractTokenBalance = balanceOf(address(this));\r\n\r\n        if (contractTokenBalance >= _liquidityThreshold) {\r\n            uint256 liqHalf = (contractTokenBalance * _liquidityTaxShare) / (100000 * 2);\r\n            uint256 otherLiqHalf = ((contractTokenBalance * _liquidityTaxShare)/100000) - liqHalf;\r\n            uint256 tokensToSwap = contractTokenBalance - liqHalf; \r\n\r\n            uint256 initialBalance = address(this).balance;\r\n\r\n            swapTokensForEth(tokensToSwap);\r\n\r\n            uint256 newBalance = address(this).balance - (initialBalance);\r\n\r\n            bool success;\r\n\r\n            uint256 buyFeeAmount = (newBalance * _buyTaxShare) / 100000;\r\n            uint256 sellFeeAmount = (newBalance * _sellTaxShare) / 100000;\r\n\r\n            uint256 marketingAmount = buyFeeAmount + sellFeeAmount;\r\n\r\n            newBalance = newBalance - marketingAmount;\r\n\r\n            (success,) = marketingWallet.call{value: marketingAmount, gas: 35000}(\"\");\r\n\r\n            if (newBalance > 0) {\r\n                addLiquidity(otherLiqHalf, newBalance);\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n    function addLiquidity(uint256 tokenAmount, uint256 ethAmount) private {\r\n        // approve token transfer to cover all possible scenarios\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n\r\n        // add the liquidity\r\n        uniswapV2Router.addLiquidityETH{value: ethAmount}(\r\n            address(this),\r\n            tokenAmount,\r\n            0, // slippage is unavoidable\r\n            0, // slippage is unavoidable\r\n            address(0),\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function _transfer(address sender, address recipient, uint256 amount) internal {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n        require(amount > 0, \"Transfer amount must be greater than zero\");\r\n        \r\n        require(!blacklisted[sender], \"Sender is blacklisted\");\r\n        require(!blacklisted[recipient], \"Recipient is blacklisted\");\r\n       \r\n        require(!_paused, \"Trading is paused\");\r\n\r\n        uint256 taxAmount;\r\n\r\n        bool isBuy = sender == _uniswapPair;\r\n        bool isSell = recipient == _uniswapPair;\r\n\r\n        uint256 buyTax;\r\n        uint256 sellTax;\r\n        uint256 liquidityTax;\r\n\r\n        if(isBuy){\r\n            if (!_isExcludedFromFee[recipient]){\r\n                buyTax = _calculateTax(amount, _buyTaxPercentage);\r\n            }\r\n        }\r\n\r\n        if(isSell){\r\n            if (!_isExcludedFromFee[sender]){\r\n                sellTax = _calculateTax(amount, _sellTaxPercentage);\r\n            }\r\n        }\r\n\r\n        if(isBuy || isSell){\r\n            liquidityTax = _calculateTax(amount, _liquidityTaxPercentage);\r\n            _transferTokens(sender, address(this), liquidityTax); // send liq tax to contract\r\n        }\r\n        \r\n        uint256 transferAmount = amount - (buyTax) - (sellTax) - (liquidityTax);\r\n        _transferTokens(sender, recipient, transferAmount); // send to recipient\r\n        \r\n        taxAmount = buyTax + sellTax;\r\n        _transferTokens(sender, address(this), taxAmount); // send tax to contract\r\n\r\n        _taxCollected += liquidityTax + taxAmount;\r\n\r\n    }\r\n\r\n\r\n    function _calculateTax(uint256 amount, uint256 taxPercentage) internal pure returns (uint256) {\r\n        return amount * (taxPercentage) / (100000);\r\n    }\r\n\r\n    fallback() external payable {}\r\n\r\n    receive() external payable {}\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_marketingWallet\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_input\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"TransferEx\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_buyTaxPercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_buyTaxShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_inSwapAndLiquify\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_liquidityTaxPercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_liquidityTaxShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_liquidityThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellTaxPercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellTaxShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_taxCollected\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_uniswapPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addToBlacklist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isBlacklisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquifyTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removeFromBlacklist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rescueETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"taxPercentage\",\"type\":\"uint256\"}],\"name\":\"setBuyTaxPercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"excluded\",\"type\":\"bool\"}],\"name\":\"setExcludedFromFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"taxPercentage\",\"type\":\"uint256\"}],\"name\":\"setLiquidityTaxPercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"threshold\",\"type\":\"uint256\"}],\"name\":\"setLiquidityThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"setMarketingWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"taxPercentage\",\"type\":\"uint256\"}],\"name\":\"setSellTaxPercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "FOPToken", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000368eba751a8f4cf0d68ac210abc5525dcfaf691c", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://182059d76d2c4f6c299c918fad982860900aaf059d0712c0c0daed7212ba380d"}