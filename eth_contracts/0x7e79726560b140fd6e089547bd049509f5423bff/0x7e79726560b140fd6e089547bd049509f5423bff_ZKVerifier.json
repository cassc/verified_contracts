{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/L1/ZKVerifier.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.15;\\n\\nimport { Semver } from \\\"../universal/Semver.sol\\\";\\n\\ncontract ZKVerifier is Semver {\\n    uint256 internal immutable HASH_SCALAR_VALUE;\\n    uint256 internal immutable M_56_PX_VALUE;\\n    uint256 internal immutable M_56_PY_VALUE;\\n\\n    constructor(\\n        uint256 _hashScalar,\\n        uint256 _m56Px,\\n        uint256 _m56Py\\n    ) Semver(0, 1, 4) {\\n        HASH_SCALAR_VALUE = _hashScalar;\\n        M_56_PX_VALUE = _m56Px;\\n        M_56_PY_VALUE = _m56Py;\\n    }\\n\\n    function pairing(G1Point[] memory p1, G2Point[] memory p2) internal view returns (bool) {\\n        uint256 length = p1.length * 6;\\n        uint256[] memory input = new uint256[](length);\\n        uint256[1] memory result;\\n        bool ret;\\n\\n        require(p1.length == p2.length);\\n\\n        for (uint256 i = 0; i < p1.length; i++) {\\n            input[0 + i * 6] = p1[i].x;\\n            input[1 + i * 6] = p1[i].y;\\n            input[2 + i * 6] = p2[i].x[0];\\n            input[3 + i * 6] = p2[i].x[1];\\n            input[4 + i * 6] = p2[i].y[0];\\n            input[5 + i * 6] = p2[i].y[1];\\n        }\\n\\n        assembly {\\n            ret := staticcall(gas(), 8, add(input, 0x20), mul(length, 0x20), result, 0x20)\\n        }\\n        require(ret);\\n        return result[0] != 0;\\n    }\\n\\n    uint256 constant q_mod =\\n        21888242871839275222246405745257275088548364400416034343698204186575808495617;\\n\\n    function fr_invert(uint256 a) internal view returns (uint256) {\\n        return fr_pow(a, q_mod - 2);\\n    }\\n\\n    function fr_pow(uint256 a, uint256 power) internal view returns (uint256) {\\n        uint256[6] memory input;\\n        uint256[1] memory result;\\n        bool ret;\\n\\n        input[0] = 32;\\n        input[1] = 32;\\n        input[2] = 32;\\n        input[3] = a;\\n        input[4] = power;\\n        input[5] = q_mod;\\n\\n        assembly {\\n            ret := staticcall(gas(), 0x05, input, 0xc0, result, 0x20)\\n        }\\n        require(ret);\\n\\n        return result[0];\\n    }\\n\\n    function fr_div(uint256 a, uint256 b) internal view returns (uint256) {\\n        require(b != 0);\\n        return mulmod(a, fr_invert(b), q_mod);\\n    }\\n\\n    function fr_mul_add(\\n        uint256 a,\\n        uint256 b,\\n        uint256 c\\n    ) internal pure returns (uint256) {\\n        return addmod(mulmod(a, b, q_mod), c, q_mod);\\n    }\\n\\n    function fr_mul_add_pm(\\n        uint256[84] memory m,\\n        uint256[] calldata proof,\\n        uint256 opcode,\\n        uint256 t\\n    ) internal pure returns (uint256) {\\n        for (uint256 i = 0; i < 32; i += 2) {\\n            uint256 a = opcode & 0xff;\\n            if (a != 0xff) {\\n                opcode >>= 8;\\n                uint256 b = opcode & 0xff;\\n                opcode >>= 8;\\n                t = addmod(mulmod(proof[a], m[b], q_mod), t, q_mod);\\n            } else {\\n                break;\\n            }\\n        }\\n\\n        return t;\\n    }\\n\\n    function fr_mul_add_mt(\\n        uint256[84] memory m,\\n        uint256 base,\\n        uint256 opcode,\\n        uint256 t\\n    ) internal pure returns (uint256) {\\n        for (uint256 i = 0; i < 32; i += 1) {\\n            uint256 a = opcode & 0xff;\\n            if (a != 0xff) {\\n                opcode >>= 8;\\n                t = addmod(mulmod(base, t, q_mod), m[a], q_mod);\\n            } else {\\n                break;\\n            }\\n        }\\n\\n        return t;\\n    }\\n\\n    function fr_reverse(uint256 input) internal pure returns (uint256 v) {\\n        v = input;\\n\\n        // swap bytes\\n        v =\\n            ((v & 0xFF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00) >> 8) |\\n            ((v & 0x00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF) << 8);\\n\\n        // swap 2-byte long pairs\\n        v =\\n            ((v & 0xFFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000) >> 16) |\\n            ((v & 0x0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF) << 16);\\n\\n        // swap 4-byte long pairs\\n        v =\\n            ((v & 0xFFFFFFFF00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF00000000) >> 32) |\\n            ((v & 0x00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF) << 32);\\n\\n        // swap 8-byte long pairs\\n        v =\\n            ((v & 0xFFFFFFFFFFFFFFFF0000000000000000FFFFFFFFFFFFFFFF0000000000000000) >> 64) |\\n            ((v & 0x0000000000000000FFFFFFFFFFFFFFFF0000000000000000FFFFFFFFFFFFFFFF) << 64);\\n\\n        // swap 16-byte long pairs\\n        v = (v >> 128) | (v << 128);\\n    }\\n\\n    uint256 constant p_mod =\\n        21888242871839275222246405745257275088696311157297823662689037894645226208583;\\n\\n    struct G1Point {\\n        uint256 x;\\n        uint256 y;\\n    }\\n\\n    struct G2Point {\\n        uint256[2] x;\\n        uint256[2] y;\\n    }\\n\\n    function ecc_from(uint256 x, uint256 y) internal pure returns (G1Point memory r) {\\n        r.x = x;\\n        r.y = y;\\n    }\\n\\n    function ecc_add(\\n        uint256 ax,\\n        uint256 ay,\\n        uint256 bx,\\n        uint256 by\\n    ) internal view returns (uint256, uint256) {\\n        bool ret = false;\\n        G1Point memory r;\\n        uint256[4] memory input_points;\\n\\n        input_points[0] = ax;\\n        input_points[1] = ay;\\n        input_points[2] = bx;\\n        input_points[3] = by;\\n\\n        assembly {\\n            ret := staticcall(gas(), 6, input_points, 0x80, r, 0x40)\\n        }\\n        require(ret);\\n\\n        return (r.x, r.y);\\n    }\\n\\n    function ecc_sub(\\n        uint256 ax,\\n        uint256 ay,\\n        uint256 bx,\\n        uint256 by\\n    ) internal view returns (uint256, uint256) {\\n        return ecc_add(ax, ay, bx, p_mod - by);\\n    }\\n\\n    function ecc_mul(\\n        uint256 px,\\n        uint256 py,\\n        uint256 s\\n    ) internal view returns (uint256, uint256) {\\n        uint256[3] memory input;\\n        bool ret = false;\\n        G1Point memory r;\\n\\n        input[0] = px;\\n        input[1] = py;\\n        input[2] = s;\\n\\n        assembly {\\n            ret := staticcall(gas(), 7, input, 0x60, r, 0x40)\\n        }\\n        require(ret);\\n\\n        return (r.x, r.y);\\n    }\\n\\n    function _ecc_mul_add(uint256[5] memory input) internal view {\\n        bool ret = false;\\n\\n        assembly {\\n            ret := staticcall(gas(), 7, input, 0x60, add(input, 0x20), 0x40)\\n        }\\n        require(ret);\\n\\n        assembly {\\n            ret := staticcall(gas(), 6, add(input, 0x20), 0x80, add(input, 0x60), 0x40)\\n        }\\n        require(ret);\\n    }\\n\\n    function ecc_mul_add(\\n        uint256 px,\\n        uint256 py,\\n        uint256 s,\\n        uint256 qx,\\n        uint256 qy\\n    ) internal view returns (uint256, uint256) {\\n        uint256[5] memory input;\\n        input[0] = px;\\n        input[1] = py;\\n        input[2] = s;\\n        input[3] = qx;\\n        input[4] = qy;\\n\\n        _ecc_mul_add(input);\\n\\n        return (input[3], input[4]);\\n    }\\n\\n    function ecc_mul_add_pm(\\n        uint256[84] memory m,\\n        uint256[] calldata proof,\\n        uint256 opcode,\\n        uint256 t0,\\n        uint256 t1\\n    ) internal view returns (uint256, uint256) {\\n        uint256[5] memory input;\\n        input[3] = t0;\\n        input[4] = t1;\\n        for (uint256 i = 0; i < 32; i += 2) {\\n            uint256 a = opcode & 0xff;\\n            if (a != 0xff) {\\n                opcode >>= 8;\\n                uint256 b = opcode & 0xff;\\n                opcode >>= 8;\\n                input[0] = proof[a];\\n                input[1] = proof[a + 1];\\n                input[2] = m[b];\\n                _ecc_mul_add(input);\\n            } else {\\n                break;\\n            }\\n        }\\n\\n        return (input[3], input[4]);\\n    }\\n\\n    function update_hash_scalar(\\n        uint256 v,\\n        uint256[144] memory absorbing,\\n        uint256 pos\\n    ) internal pure {\\n        absorbing[pos++] = 0x02;\\n        absorbing[pos++] = v;\\n    }\\n\\n    function update_hash_point(\\n        uint256 x,\\n        uint256 y,\\n        uint256[144] memory absorbing,\\n        uint256 pos\\n    ) internal pure {\\n        absorbing[pos++] = 0x01;\\n        absorbing[pos++] = x;\\n        absorbing[pos++] = y;\\n    }\\n\\n    function to_scalar(bytes32 r) private pure returns (uint256 v) {\\n        uint256 tmp = uint256(r);\\n        tmp = fr_reverse(tmp);\\n        v = tmp % 0x30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001;\\n    }\\n\\n    function hash(uint256[144] memory absorbing, uint256 length)\\n        private\\n        view\\n        returns (bytes32[1] memory v)\\n    {\\n        bool success;\\n        assembly {\\n            success := staticcall(sub(gas(), 2000), 2, absorbing, length, v, 32)\\n            switch success\\n            case 0 {\\n                invalid()\\n            }\\n        }\\n        assert(success);\\n    }\\n\\n    function squeeze_challenge(uint256[144] memory absorbing, uint32 length)\\n        internal\\n        view\\n        returns (uint256 v)\\n    {\\n        absorbing[length] = 0;\\n        bytes32 res = hash(absorbing, length * 32 + 1)[0];\\n        v = to_scalar(res);\\n        absorbing[0] = uint256(res);\\n        length = 1;\\n    }\\n\\n    function get_verify_circuit_g2_s() internal pure returns (G2Point memory s) {\\n        s.x[0] = uint256(\\n            11029560635643983818885738975758839003131865733814273016801144285524936684972\\n        );\\n        s.x[1] = uint256(\\n            10665153487364924395451186075663597035495902496253353881119509267933768999122\\n        );\\n        s.y[0] = uint256(\\n            18790173187318184075281544452912101572166071561689308149111466352378718492148\\n        );\\n        s.y[1] = uint256(\\n            18755874088236213082062601512863221433227017725453112019151604716957419045549\\n        );\\n    }\\n\\n    function get_verify_circuit_g2_n() internal pure returns (G2Point memory n) {\\n        n.x[0] = uint256(\\n            11559732032986387107991004021392285783925812861821192530917403151452391805634\\n        );\\n        n.x[1] = uint256(\\n            10857046999023057135944570762232829481370756359578518086990519993285655852781\\n        );\\n        n.y[0] = uint256(\\n            17805874995975841540914202342111839520379459829704422454583296818431106115052\\n        );\\n        n.y[1] = uint256(\\n            13392588948715843804641432497768002650278120570034223513918757245338268106653\\n        );\\n    }\\n\\n    function get_target_circuit_g2_s() internal pure returns (G2Point memory s) {\\n        s.x[0] = uint256(\\n            11029560635643983818885738975758839003131865733814273016801144285524936684972\\n        );\\n        s.x[1] = uint256(\\n            10665153487364924395451186075663597035495902496253353881119509267933768999122\\n        );\\n        s.y[0] = uint256(\\n            18790173187318184075281544452912101572166071561689308149111466352378718492148\\n        );\\n        s.y[1] = uint256(\\n            18755874088236213082062601512863221433227017725453112019151604716957419045549\\n        );\\n    }\\n\\n    function get_target_circuit_g2_n() internal pure returns (G2Point memory n) {\\n        n.x[0] = uint256(\\n            11559732032986387107991004021392285783925812861821192530917403151452391805634\\n        );\\n        n.x[1] = uint256(\\n            10857046999023057135944570762232829481370756359578518086990519993285655852781\\n        );\\n        n.y[0] = uint256(\\n            17805874995975841540914202342111839520379459829704422454583296818431106115052\\n        );\\n        n.y[1] = uint256(\\n            13392588948715843804641432497768002650278120570034223513918757245338268106653\\n        );\\n    }\\n\\n    function get_wx_wg(uint256[] calldata proof, uint256[6] memory instances)\\n        internal\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256\\n        )\\n    {\\n        uint256[84] memory m;\\n        uint256[144] memory absorbing;\\n        uint256 t0 = 0;\\n        uint256 t1 = 0;\\n\\n        (t0, t1) = (\\n            ecc_mul(\\n                17789833092049612098151701936050358897264906311798010005527050942756852717298,\\n                10895600437035740537762783734736154159991587515994553016519128117735745182853,\\n                instances[0]\\n            )\\n        );\\n        (t0, t1) = (\\n            ecc_mul_add(\\n                10543918255196573445400399528935519333175023389167175628125725368018220699826,\\n                12766487347162664556283708113947771881161039794532633041152166890738441603652,\\n                instances[1],\\n                t0,\\n                t1\\n            )\\n        );\\n        (t0, t1) = (\\n            ecc_mul_add(\\n                17008203783108743202559440655757700533653854901598142405028623347702668473277,\\n                21814804208982435371780097106882418706885400711730256673026973858149650971299,\\n                instances[2],\\n                t0,\\n                t1\\n            )\\n        );\\n        (t0, t1) = (\\n            ecc_mul_add(\\n                16811698451652309858363601322080891018704447409836823044944128338389236089077,\\n                18899539994854832158038246139972325143494193687503547200838261777721006548399,\\n                instances[3],\\n                t0,\\n                t1\\n            )\\n        );\\n        (t0, t1) = (\\n            ecc_mul_add(\\n                5494852631096636459288403096263717084869030781267238852252122493224146048270,\\n                15370627062079108379015892130008397963684601860044622201721093508656326957966,\\n                instances[4],\\n                t0,\\n                t1\\n            )\\n        );\\n        (m[0], m[1]) = (\\n            ecc_mul_add(\\n                15605904389647533645433956766425544672547314322654580577432084020959766066522,\\n                2981854610112145395053419471185791838523574193883358734299031423326998004318,\\n                instances[5],\\n                t0,\\n                t1\\n            )\\n        );\\n        update_hash_scalar(HASH_SCALAR_VALUE, absorbing, 0);\\n        update_hash_point(m[0], m[1], absorbing, 2);\\n        for (t0 = 0; t0 <= 4; t0++) {\\n            update_hash_point(proof[0 + t0 * 2], proof[1 + t0 * 2], absorbing, 5 + t0 * 3);\\n        }\\n        m[2] = (squeeze_challenge(absorbing, 20));\\n        for (t0 = 0; t0 <= 13; t0++) {\\n            update_hash_point(proof[10 + t0 * 2], proof[11 + t0 * 2], absorbing, 1 + t0 * 3);\\n        }\\n        m[3] = (squeeze_challenge(absorbing, 43));\\n        m[4] = (squeeze_challenge(absorbing, 1));\\n        for (t0 = 0; t0 <= 9; t0++) {\\n            update_hash_point(proof[38 + t0 * 2], proof[39 + t0 * 2], absorbing, 1 + t0 * 3);\\n        }\\n        m[5] = (squeeze_challenge(absorbing, 31));\\n        for (t0 = 0; t0 <= 3; t0++) {\\n            update_hash_point(proof[58 + t0 * 2], proof[59 + t0 * 2], absorbing, 1 + t0 * 3);\\n        }\\n        m[6] = (squeeze_challenge(absorbing, 13));\\n        for (t0 = 0; t0 <= 70; t0++) {\\n            update_hash_scalar(proof[66 + t0 * 1], absorbing, 1 + t0 * 2);\\n        }\\n        m[7] = (squeeze_challenge(absorbing, 143));\\n        for (t0 = 0; t0 <= 3; t0++) {\\n            update_hash_point(proof[137 + t0 * 2], proof[138 + t0 * 2], absorbing, 1 + t0 * 3);\\n        }\\n        m[8] = (squeeze_challenge(absorbing, 13));\\n        m[9] = (\\n            mulmod(\\n                m[6],\\n                13446667982376394161563610564587413125564757801019538732601045199901075958935,\\n                q_mod\\n            )\\n        );\\n        m[10] = (\\n            mulmod(\\n                m[6],\\n                16569469942529664681363945218228869388192121720036659574609237682362097667612,\\n                q_mod\\n            )\\n        );\\n        m[11] = (\\n            mulmod(\\n                m[6],\\n                14803907026430593724305438564799066516271154714737734572920456128449769927233,\\n                q_mod\\n            )\\n        );\\n        m[12] = (fr_pow(m[6], 67108864));\\n        m[13] = (addmod(m[12], q_mod - 1, q_mod));\\n        m[14] = (\\n            mulmod(\\n                21888242545679039938882419398440172875981108180010270949818755658014750055173,\\n                m[13],\\n                q_mod\\n            )\\n        );\\n        t0 = (addmod(m[6], q_mod - 1, q_mod));\\n        m[14] = (fr_div(m[14], t0));\\n        m[15] = (\\n            mulmod(\\n                3495999257316610708652455694658595065970881061159015347599790211259094641512,\\n                m[13],\\n                q_mod\\n            )\\n        );\\n        t0 = (\\n            addmod(\\n                m[6],\\n                q_mod -\\n                    14803907026430593724305438564799066516271154714737734572920456128449769927233,\\n                q_mod\\n            )\\n        );\\n        m[15] = (fr_div(m[15], t0));\\n        m[16] = (\\n            mulmod(\\n                12851378806584061886934576302961450669946047974813165594039554733293326536714,\\n                m[13],\\n                q_mod\\n            )\\n        );\\n        t0 = (\\n            addmod(\\n                m[6],\\n                q_mod -\\n                    11377606117859914088982205826922132024839443553408109299929510653283289974216,\\n                q_mod\\n            )\\n        );\\n        m[16] = (fr_div(m[16], t0));\\n        m[17] = (\\n            mulmod(\\n                14638077285440018490948843142723135319134576188472316769433007423695824509066,\\n                m[13],\\n                q_mod\\n            )\\n        );\\n        t0 = (\\n            addmod(\\n                m[6],\\n                q_mod -\\n                    3693565015985198455139889557180396682968596245011005461846595820698933079918,\\n                q_mod\\n            )\\n        );\\n        m[17] = (fr_div(m[17], t0));\\n        m[18] = (\\n            mulmod(\\n                18027939092386982308810165776478549635922357517986691900813373197616541191289,\\n                m[13],\\n                q_mod\\n            )\\n        );\\n        t0 = (\\n            addmod(\\n                m[6],\\n                q_mod -\\n                    17329448237240114492580865744088056414251735686965494637158808787419781175510,\\n                q_mod\\n            )\\n        );\\n        m[18] = (fr_div(m[18], t0));\\n        m[19] = (\\n            mulmod(\\n                912591536032578604421866340844550116335029274442283291811906603256731601654,\\n                m[13],\\n                q_mod\\n            )\\n        );\\n        t0 = (\\n            addmod(\\n                m[6],\\n                q_mod -\\n                    6047398202650739717314770882059679662647667807426525133977681644606291529311,\\n                q_mod\\n            )\\n        );\\n        m[19] = (fr_div(m[19], t0));\\n        m[20] = (\\n            mulmod(\\n                17248638560015646562374089181598815896736916575459528793494921668169819478628,\\n                m[13],\\n                q_mod\\n            )\\n        );\\n        t0 = (\\n            addmod(\\n                m[6],\\n                q_mod -\\n                    16569469942529664681363945218228869388192121720036659574609237682362097667612,\\n                q_mod\\n            )\\n        );\\n        m[20] = (fr_div(m[20], t0));\\n        t0 = (addmod(m[15], m[16], q_mod));\\n        t0 = (addmod(t0, m[17], q_mod));\\n        t0 = (addmod(t0, m[18], q_mod));\\n        m[15] = (addmod(t0, m[19], q_mod));\\n        t0 = (fr_mul_add(proof[74], proof[72], proof[73]));\\n        t0 = (fr_mul_add(proof[75], proof[67], t0));\\n        t0 = (fr_mul_add(proof[76], proof[68], t0));\\n        t0 = (fr_mul_add(proof[77], proof[69], t0));\\n        t0 = (fr_mul_add(proof[78], proof[70], t0));\\n        m[16] = (fr_mul_add(proof[79], proof[71], t0));\\n        t0 = (mulmod(proof[67], proof[68], q_mod));\\n        m[16] = (fr_mul_add(proof[80], t0, m[16]));\\n        t0 = (mulmod(proof[69], proof[70], q_mod));\\n        m[16] = (fr_mul_add(proof[81], t0, m[16]));\\n        t0 = (addmod(1, q_mod - proof[97], q_mod));\\n        m[17] = (mulmod(m[14], t0, q_mod));\\n        t0 = (mulmod(proof[100], proof[100], q_mod));\\n        t0 = (addmod(t0, q_mod - proof[100], q_mod));\\n        m[18] = (mulmod(m[20], t0, q_mod));\\n        t0 = (addmod(proof[100], q_mod - proof[99], q_mod));\\n        m[19] = (mulmod(t0, m[14], q_mod));\\n        m[21] = (mulmod(m[3], m[6], q_mod));\\n        t0 = (addmod(m[20], m[15], q_mod));\\n        m[15] = (addmod(1, q_mod - t0, q_mod));\\n        m[22] = (addmod(proof[67], m[4], q_mod));\\n        t0 = (fr_mul_add(proof[91], m[3], m[22]));\\n        m[23] = (mulmod(t0, proof[98], q_mod));\\n        t0 = (addmod(m[22], m[21], q_mod));\\n        m[22] = (mulmod(t0, proof[97], q_mod));\\n        m[24] = (\\n            mulmod(\\n                4131629893567559867359510883348571134090853742863529169391034518566172092834,\\n                m[21],\\n                q_mod\\n            )\\n        );\\n        m[25] = (addmod(proof[68], m[4], q_mod));\\n        t0 = (fr_mul_add(proof[92], m[3], m[25]));\\n        m[23] = (mulmod(t0, m[23], q_mod));\\n        t0 = (addmod(m[25], m[24], q_mod));\\n        m[22] = (mulmod(t0, m[22], q_mod));\\n        m[24] = (\\n            mulmod(\\n                4131629893567559867359510883348571134090853742863529169391034518566172092834,\\n                m[24],\\n                q_mod\\n            )\\n        );\\n        m[25] = (addmod(proof[69], m[4], q_mod));\\n        t0 = (fr_mul_add(proof[93], m[3], m[25]));\\n        m[23] = (mulmod(t0, m[23], q_mod));\\n        t0 = (addmod(m[25], m[24], q_mod));\\n        m[22] = (mulmod(t0, m[22], q_mod));\\n        m[24] = (\\n            mulmod(\\n                4131629893567559867359510883348571134090853742863529169391034518566172092834,\\n                m[24],\\n                q_mod\\n            )\\n        );\\n        t0 = (addmod(m[23], q_mod - m[22], q_mod));\\n        m[22] = (mulmod(t0, m[15], q_mod));\\n        m[21] = (\\n            mulmod(\\n                m[21],\\n                11166246659983828508719468090013646171463329086121580628794302409516816350802,\\n                q_mod\\n            )\\n        );\\n        m[23] = (addmod(proof[70], m[4], q_mod));\\n        t0 = (fr_mul_add(proof[94], m[3], m[23]));\\n        m[24] = (mulmod(t0, proof[101], q_mod));\\n        t0 = (addmod(m[23], m[21], q_mod));\\n        m[23] = (mulmod(t0, proof[100], q_mod));\\n        m[21] = (\\n            mulmod(\\n                4131629893567559867359510883348571134090853742863529169391034518566172092834,\\n                m[21],\\n                q_mod\\n            )\\n        );\\n        m[25] = (addmod(proof[71], m[4], q_mod));\\n        t0 = (fr_mul_add(proof[95], m[3], m[25]));\\n        m[24] = (mulmod(t0, m[24], q_mod));\\n        t0 = (addmod(m[25], m[21], q_mod));\\n        m[23] = (mulmod(t0, m[23], q_mod));\\n        m[21] = (\\n            mulmod(\\n                4131629893567559867359510883348571134090853742863529169391034518566172092834,\\n                m[21],\\n                q_mod\\n            )\\n        );\\n        m[25] = (addmod(proof[66], m[4], q_mod));\\n        t0 = (fr_mul_add(proof[96], m[3], m[25]));\\n        m[24] = (mulmod(t0, m[24], q_mod));\\n        t0 = (addmod(m[25], m[21], q_mod));\\n        m[23] = (mulmod(t0, m[23], q_mod));\\n        m[21] = (\\n            mulmod(\\n                4131629893567559867359510883348571134090853742863529169391034518566172092834,\\n                m[21],\\n                q_mod\\n            )\\n        );\\n        t0 = (addmod(m[24], q_mod - m[23], q_mod));\\n        m[21] = (mulmod(t0, m[15], q_mod));\\n        t0 = (addmod(proof[104], m[3], q_mod));\\n        m[23] = (mulmod(proof[103], t0, q_mod));\\n        t0 = (addmod(proof[106], m[4], q_mod));\\n        m[23] = (mulmod(m[23], t0, q_mod));\\n        m[24] = (mulmod(proof[67], proof[82], q_mod));\\n        m[2] = (mulmod(0, m[2], q_mod));\\n        m[24] = (addmod(m[2], m[24], q_mod));\\n        m[25] = (addmod(m[2], proof[83], q_mod));\\n        m[26] = (addmod(proof[104], q_mod - proof[106], q_mod));\\n        t0 = (addmod(1, q_mod - proof[102], q_mod));\\n        m[27] = (mulmod(m[14], t0, q_mod));\\n        t0 = (mulmod(proof[102], proof[102], q_mod));\\n        t0 = (addmod(t0, q_mod - proof[102], q_mod));\\n        m[28] = (mulmod(m[20], t0, q_mod));\\n        t0 = (addmod(m[24], m[3], q_mod));\\n        m[24] = (mulmod(proof[102], t0, q_mod));\\n        m[25] = (addmod(m[25], m[4], q_mod));\\n        t0 = (mulmod(m[24], m[25], q_mod));\\n        t0 = (addmod(m[23], q_mod - t0, q_mod));\\n        m[23] = (mulmod(t0, m[15], q_mod));\\n        m[24] = (mulmod(m[14], m[26], q_mod));\\n        t0 = (addmod(proof[104], q_mod - proof[105], q_mod));\\n        t0 = (mulmod(m[26], t0, q_mod));\\n        m[26] = (mulmod(t0, m[15], q_mod));\\n        t0 = (addmod(proof[109], m[3], q_mod));\\n        m[29] = (mulmod(proof[108], t0, q_mod));\\n        t0 = (addmod(proof[111], m[4], q_mod));\\n        m[29] = (mulmod(m[29], t0, q_mod));\\n        m[30] = (fr_mul_add(proof[82], proof[68], m[2]));\\n        m[31] = (addmod(proof[109], q_mod - proof[111], q_mod));\\n        t0 = (addmod(1, q_mod - proof[107], q_mod));\\n        m[32] = (mulmod(m[14], t0, q_mod));\\n        t0 = (mulmod(proof[107], proof[107], q_mod));\\n        t0 = (addmod(t0, q_mod - proof[107], q_mod));\\n        m[33] = (mulmod(m[20], t0, q_mod));\\n        t0 = (addmod(m[30], m[3], q_mod));\\n        t0 = (mulmod(proof[107], t0, q_mod));\\n        t0 = (mulmod(t0, m[25], q_mod));\\n        t0 = (addmod(m[29], q_mod - t0, q_mod));\\n        m[29] = (mulmod(t0, m[15], q_mod));\\n        m[30] = (mulmod(m[14], m[31], q_mod));\\n        t0 = (addmod(proof[109], q_mod - proof[110], q_mod));\\n        t0 = (mulmod(m[31], t0, q_mod));\\n        m[31] = (mulmod(t0, m[15], q_mod));\\n        t0 = (addmod(proof[114], m[3], q_mod));\\n        m[34] = (mulmod(proof[113], t0, q_mod));\\n        t0 = (addmod(proof[116], m[4], q_mod));\\n        m[34] = (mulmod(m[34], t0, q_mod));\\n        m[35] = (fr_mul_add(proof[82], proof[69], m[2]));\\n        m[36] = (addmod(proof[114], q_mod - proof[116], q_mod));\\n        t0 = (addmod(1, q_mod - proof[112], q_mod));\\n        m[37] = (mulmod(m[14], t0, q_mod));\\n        t0 = (mulmod(proof[112], proof[112], q_mod));\\n        t0 = (addmod(t0, q_mod - proof[112], q_mod));\\n        m[38] = (mulmod(m[20], t0, q_mod));\\n        t0 = (addmod(m[35], m[3], q_mod));\\n        t0 = (mulmod(proof[112], t0, q_mod));\\n        t0 = (mulmod(t0, m[25], q_mod));\\n        t0 = (addmod(m[34], q_mod - t0, q_mod));\\n        m[34] = (mulmod(t0, m[15], q_mod));\\n        m[35] = (mulmod(m[14], m[36], q_mod));\\n        t0 = (addmod(proof[114], q_mod - proof[115], q_mod));\\n        t0 = (mulmod(m[36], t0, q_mod));\\n        m[36] = (mulmod(t0, m[15], q_mod));\\n        t0 = (addmod(proof[119], m[3], q_mod));\\n        m[39] = (mulmod(proof[118], t0, q_mod));\\n        t0 = (addmod(proof[121], m[4], q_mod));\\n        m[39] = (mulmod(m[39], t0, q_mod));\\n        m[40] = (fr_mul_add(proof[82], proof[70], m[2]));\\n        m[41] = (addmod(proof[119], q_mod - proof[121], q_mod));\\n        t0 = (addmod(1, q_mod - proof[117], q_mod));\\n        m[42] = (mulmod(m[14], t0, q_mod));\\n        t0 = (mulmod(proof[117], proof[117], q_mod));\\n        t0 = (addmod(t0, q_mod - proof[117], q_mod));\\n        m[43] = (mulmod(m[20], t0, q_mod));\\n        t0 = (addmod(m[40], m[3], q_mod));\\n        t0 = (mulmod(proof[117], t0, q_mod));\\n        t0 = (mulmod(t0, m[25], q_mod));\\n        t0 = (addmod(m[39], q_mod - t0, q_mod));\\n        m[25] = (mulmod(t0, m[15], q_mod));\\n        m[39] = (mulmod(m[14], m[41], q_mod));\\n        t0 = (addmod(proof[119], q_mod - proof[120], q_mod));\\n        t0 = (mulmod(m[41], t0, q_mod));\\n        m[40] = (mulmod(t0, m[15], q_mod));\\n        t0 = (addmod(proof[124], m[3], q_mod));\\n        m[41] = (mulmod(proof[123], t0, q_mod));\\n        t0 = (addmod(proof[126], m[4], q_mod));\\n        m[41] = (mulmod(m[41], t0, q_mod));\\n        m[44] = (fr_mul_add(proof[84], proof[67], m[2]));\\n        m[45] = (addmod(m[2], proof[85], q_mod));\\n        m[46] = (addmod(proof[124], q_mod - proof[126], q_mod));\\n        t0 = (addmod(1, q_mod - proof[122], q_mod));\\n        m[47] = (mulmod(m[14], t0, q_mod));\\n        t0 = (mulmod(proof[122], proof[122], q_mod));\\n        t0 = (addmod(t0, q_mod - proof[122], q_mod));\\n        m[48] = (mulmod(m[20], t0, q_mod));\\n        t0 = (addmod(m[44], m[3], q_mod));\\n        m[44] = (mulmod(proof[122], t0, q_mod));\\n        t0 = (addmod(m[45], m[4], q_mod));\\n        t0 = (mulmod(m[44], t0, q_mod));\\n        t0 = (addmod(m[41], q_mod - t0, q_mod));\\n        m[41] = (mulmod(t0, m[15], q_mod));\\n        m[44] = (mulmod(m[14], m[46], q_mod));\\n        t0 = (addmod(proof[124], q_mod - proof[125], q_mod));\\n        t0 = (mulmod(m[46], t0, q_mod));\\n        m[45] = (mulmod(t0, m[15], q_mod));\\n        t0 = (addmod(proof[129], m[3], q_mod));\\n        m[46] = (mulmod(proof[128], t0, q_mod));\\n        t0 = (addmod(proof[131], m[4], q_mod));\\n        m[46] = (mulmod(m[46], t0, q_mod));\\n        m[49] = (fr_mul_add(proof[86], proof[67], m[2]));\\n        m[50] = (addmod(m[2], proof[87], q_mod));\\n        m[51] = (addmod(proof[129], q_mod - proof[131], q_mod));\\n        t0 = (addmod(1, q_mod - proof[127], q_mod));\\n        m[52] = (mulmod(m[14], t0, q_mod));\\n        t0 = (mulmod(proof[127], proof[127], q_mod));\\n        t0 = (addmod(t0, q_mod - proof[127], q_mod));\\n        m[53] = (mulmod(m[20], t0, q_mod));\\n        t0 = (addmod(m[49], m[3], q_mod));\\n        m[49] = (mulmod(proof[127], t0, q_mod));\\n        t0 = (addmod(m[50], m[4], q_mod));\\n        t0 = (mulmod(m[49], t0, q_mod));\\n        t0 = (addmod(m[46], q_mod - t0, q_mod));\\n        m[46] = (mulmod(t0, m[15], q_mod));\\n        m[49] = (mulmod(m[14], m[51], q_mod));\\n        t0 = (addmod(proof[129], q_mod - proof[130], q_mod));\\n        t0 = (mulmod(m[51], t0, q_mod));\\n        m[50] = (mulmod(t0, m[15], q_mod));\\n        t0 = (addmod(proof[134], m[3], q_mod));\\n        m[51] = (mulmod(proof[133], t0, q_mod));\\n        t0 = (addmod(proof[136], m[4], q_mod));\\n        m[51] = (mulmod(m[51], t0, q_mod));\\n        m[54] = (fr_mul_add(proof[88], proof[67], m[2]));\\n        m[2] = (addmod(m[2], proof[89], q_mod));\\n        m[55] = (addmod(proof[134], q_mod - proof[136], q_mod));\\n        t0 = (addmod(1, q_mod - proof[132], q_mod));\\n        m[56] = (mulmod(m[14], t0, q_mod));\\n        t0 = (mulmod(proof[132], proof[132], q_mod));\\n        t0 = (addmod(t0, q_mod - proof[132], q_mod));\\n        m[20] = (mulmod(m[20], t0, q_mod));\\n        t0 = (addmod(m[54], m[3], q_mod));\\n        m[3] = (mulmod(proof[132], t0, q_mod));\\n        t0 = (addmod(m[2], m[4], q_mod));\\n        t0 = (mulmod(m[3], t0, q_mod));\\n        t0 = (addmod(m[51], q_mod - t0, q_mod));\\n        m[2] = (mulmod(t0, m[15], q_mod));\\n        m[3] = (mulmod(m[14], m[55], q_mod));\\n        t0 = (addmod(proof[134], q_mod - proof[135], q_mod));\\n        t0 = (mulmod(m[55], t0, q_mod));\\n        m[4] = (mulmod(t0, m[15], q_mod));\\n        t0 = (fr_mul_add(m[5], 0, m[16]));\\n        t0 = (\\n            fr_mul_add_mt(\\n                m,\\n                m[5],\\n                24064768791442479290152634096194013545513974547709823832001394403118888981009,\\n                t0\\n            )\\n        );\\n        t0 = (fr_mul_add_mt(m, m[5], 4704208815882882920750, t0));\\n        m[2] = (fr_div(t0, m[13]));\\n        m[3] = (mulmod(m[8], m[8], q_mod));\\n        m[4] = (mulmod(m[3], m[8], q_mod));\\n        (t0, t1) = (ecc_mul(proof[143], proof[144], m[4]));\\n        (t0, t1) = (ecc_mul_add_pm(m, proof, 281470825071501, t0, t1));\\n        (m[14], m[15]) = (ecc_add(t0, t1, proof[137], proof[138]));\\n        m[5] = (mulmod(m[4], m[11], q_mod));\\n        m[11] = (mulmod(m[4], m[7], q_mod));\\n        m[13] = (mulmod(m[11], m[7], q_mod));\\n        m[16] = (mulmod(m[13], m[7], q_mod));\\n        m[17] = (mulmod(m[16], m[7], q_mod));\\n        m[18] = (mulmod(m[17], m[7], q_mod));\\n        m[19] = (mulmod(m[18], m[7], q_mod));\\n        t0 = (mulmod(m[19], proof[135], q_mod));\\n        t0 = (fr_mul_add_pm(m, proof, 79227007564587019091207590530, t0));\\n        m[20] = (fr_mul_add(proof[105], m[4], t0));\\n        m[10] = (mulmod(m[3], m[10], q_mod));\\n        m[20] = (fr_mul_add(proof[99], m[3], m[20]));\\n        m[9] = (mulmod(m[8], m[9], q_mod));\\n        m[21] = (mulmod(m[8], m[7], q_mod));\\n        for (t0 = 0; t0 < 8; t0++) {\\n            m[22 + t0 * 1] = (mulmod(m[21 + t0 * 1], m[7 + t0 * 0], q_mod));\\n        }\\n        t0 = (mulmod(m[29], proof[133], q_mod));\\n        t0 = (fr_mul_add_pm(m, proof, 1461480058012745347196003969984389955172320353408, t0));\\n        m[20] = (addmod(m[20], t0, q_mod));\\n        m[3] = (addmod(m[3], m[21], q_mod));\\n        m[21] = (mulmod(m[7], m[7], q_mod));\\n        m[30] = (mulmod(m[21], m[7], q_mod));\\n        for (t0 = 0; t0 < 50; t0++) {\\n            m[31 + t0 * 1] = (mulmod(m[30 + t0 * 1], m[7 + t0 * 0], q_mod));\\n        }\\n        m[81] = (mulmod(m[80], proof[90], q_mod));\\n        m[82] = (mulmod(m[79], m[12], q_mod));\\n        m[83] = (mulmod(m[82], m[12], q_mod));\\n        m[12] = (mulmod(m[83], m[12], q_mod));\\n        t0 = (fr_mul_add(m[79], m[2], m[81]));\\n        t0 = (\\n            fr_mul_add_pm(\\n                m,\\n                proof,\\n                28637501128329066231612878461967933875285131620580756137874852300330784214624,\\n                t0\\n            )\\n        );\\n        t0 = (\\n            fr_mul_add_pm(\\n                m,\\n                proof,\\n                21474593857386732646168474467085622855647258609351047587832868301163767676495,\\n                t0\\n            )\\n        );\\n        t0 = (\\n            fr_mul_add_pm(\\n                m,\\n                proof,\\n                14145600374170319983429588659751245017860232382696106927048396310641433325177,\\n                t0\\n            )\\n        );\\n        t0 = (fr_mul_add_pm(m, proof, 18446470583433829957, t0));\\n        t0 = (addmod(t0, proof[66], q_mod));\\n        m[2] = (addmod(m[20], t0, q_mod));\\n        m[19] = (addmod(m[19], m[54], q_mod));\\n        m[20] = (addmod(m[29], m[53], q_mod));\\n        m[18] = (addmod(m[18], m[51], q_mod));\\n        m[28] = (addmod(m[28], m[50], q_mod));\\n        m[17] = (addmod(m[17], m[48], q_mod));\\n        m[27] = (addmod(m[27], m[47], q_mod));\\n        m[16] = (addmod(m[16], m[45], q_mod));\\n        m[26] = (addmod(m[26], m[44], q_mod));\\n        m[13] = (addmod(m[13], m[42], q_mod));\\n        m[25] = (addmod(m[25], m[41], q_mod));\\n        m[11] = (addmod(m[11], m[39], q_mod));\\n        m[24] = (addmod(m[24], m[38], q_mod));\\n        m[4] = (addmod(m[4], m[36], q_mod));\\n        m[23] = (addmod(m[23], m[35], q_mod));\\n        m[22] = (addmod(m[22], m[34], q_mod));\\n        m[3] = (addmod(m[3], m[33], q_mod));\\n        m[8] = (addmod(m[8], m[32], q_mod));\\n        (t0, t1) = (ecc_mul(proof[143], proof[144], m[5]));\\n        (t0, t1) = (\\n            ecc_mul_add_pm(\\n                m,\\n                proof,\\n                10933423423422768024429730621579321771439401845242250760130969989159573132066,\\n                t0,\\n                t1\\n            )\\n        );\\n        (t0, t1) = (\\n            ecc_mul_add_pm(m, proof, 1461486238301980199876269201563775120819706402602, t0, t1)\\n        );\\n        (t0, t1) = (\\n            ecc_mul_add(\\n                5631304900279594708207577329069240426704954596482218502768352363602244010198,\\n                3522708784500173063141023483902975800044899953785444835727269387293279274164,\\n                m[78],\\n                t0,\\n                t1\\n            )\\n        );\\n        (t0, t1) = (\\n            ecc_mul_add(\\n                21802187684970109241607258147370295120854869223732255251756328570807304721847,\\n                15237269163633931881258174620167924568373193514011004489179865433808206919535,\\n                m[77],\\n                t0,\\n                t1\\n            )\\n        );\\n        (t0, t1) = (\\n            ecc_mul_add(\\n                7015312950853575733378202381101181138419420484691827111888836883656445873540,\\n                13214451818073201746109373586139435072784087878230873580637116067409833253869,\\n                m[76],\\n                t0,\\n                t1\\n            )\\n        );\\n        (t0, t1) = (\\n            ecc_mul_add(\\n                8875290982126581117169476014762185676959503094457222757180266633231098422655,\\n                16658612061027315784709714701528999953885073192696800907733882175438727280488,\\n                m[75],\\n                t0,\\n                t1\\n            )\\n        );\\n        (t0, t1) = (\\n            ecc_mul_add(\\n                14303253065828884214244962411774594394939730558481746554884501972871650777281,\\n                20280172603254715089032054569666991389693871275337876447609795617260462684999,\\n                m[74],\\n                t0,\\n                t1\\n            )\\n        );\\n        (t0, t1) = (\\n            ecc_mul_add(\\n                16422035665163677723702082823482432069720607684573585210415303920246506093315,\\n                9793393098370529162991829973981347609939343033011950481395336563485709277554,\\n                m[73],\\n                t0,\\n                t1\\n            )\\n        );\\n        (t0, t1) = (\\n            ecc_mul_add(\\n                19886509832083393598366465489701294384803664485460545523068306491024326504725,\\n                3485984208124097149766319408505384162933092797198027169851040569744728509599,\\n                m[72],\\n                t0,\\n                t1\\n            )\\n        );\\n        (t0, t1) = (\\n            ecc_mul_add(\\n                14568079492644817047677751551427098532431019595548498261375782030524138591067,\\n                12502254616746968379936814454120981559238220208108783117821668421140888091912,\\n                m[71],\\n                t0,\\n                t1\\n            )\\n        );\\n        (t0, t1) = (\\n            ecc_mul_add(\\n                17108853774466418779129374196319580280286578385405087585516556746536875115907,\\n                19908760740801913322265695807368645417588084579607860033571444712857010186774,\\n                m[70],\\n                t0,\\n                t1\\n            )\\n        );\\n        (t0, t1) = (\\n            ecc_mul_add(\\n                11691934824011527864744948250740538231773442820806051689004692986799416351463,\\n                9666173287714138315600426908471006007081642390484687282425779441148942857178,\\n                m[69],\\n                t0,\\n                t1\\n            )\\n        );\\n        (t0, t1) = (\\n            ecc_mul_add(\\n                19886509832083393598366465489701294384803664485460545523068306491024326504725,\\n                3485984208124097149766319408505384162933092797198027169851040569744728509599,\\n                m[68],\\n                t0,\\n                t1\\n            )\\n        );\\n        (t0, t1) = (\\n            ecc_mul_add(\\n                11404399605615092634676309725185307113649537305429435628605347712175932434590,\\n                9922502566003738014881652170048397944295358276657521480420733572890676943869,\\n                m[67],\\n                t0,\\n                t1\\n            )\\n        );\\n        (t0, t1) = (\\n            ecc_mul_add(\\n                21627166622184628562834675422084345034193467320009306763329316593023720936150,\\n                2103102746100002335801212537254725041663108226492711350135413308275232360031,\\n                m[66],\\n                t0,\\n                t1\\n            )\\n        );\\n        (t0, t1) = (\\n            ecc_mul_add(\\n                568462146324925334364777509199672146609025097965130219337894326417364148474,\\n                9456720619750743439311951382388531487714800707396750882568165460640095082680,\\n                m[65],\\n                t0,\\n                t1\\n            )\\n        );\\n        (t0, t1) = (\\n            ecc_mul_add(\\n                21099324456940388227241377016313463517927803983676171781194388707018806062914,\\n                10584022555470528248553696389724318513725952278467058058413941607304873249933,\\n                m[64],\\n                t0,\\n                t1\\n            )\\n        );\\n        (t0, t1) = (\\n            ecc_mul_add(\\n                8774533147672308325501456546754510530790571592717557081974138688131655464225,\\n                4096202454427384571014982526038961216623335062582321937980880210743353116961,\\n                m[63],\\n                t0,\\n                t1\\n            )\\n        );\\n        (t0, t1) = (\\n            ecc_mul_add(\\n                9146027543241505750404485909691156685716025315398864559563663480915468386646,\\n                11319433823656605429226268420832981572537028778988368091983653592806568615385,\\n                m[62],\\n                t0,\\n                t1\\n            )\\n        );\\n        (t0, t1) = (\\n            ecc_mul_add(\\n                18056938584379853827159803002321761943878530650811253236400635790684113168538,\\n                20652554130222350781815293545352317626279032395744759345425764490019681709811,\\n                m[61],\\n                t0,\\n                t1\\n            )\\n        );\\n        (t0, t1) = (\\n            ecc_mul_add(\\n                9300598433087894486351617302854566119493030210672820277878405455719667853156,\\n                18918648064031626393135000647897848703191870898299288846506432677047666356245,\\n                m[60],\\n                t0,\\n                t1\\n            )\\n        );\\n        (t0, t1) = (\\n            ecc_mul_add(\\n                13121094361229530562876703845037556024850884742094426137011404517198546098525,\\n                5930172537651686544351746601150315597423637135299507288242652701476729181813,\\n                m[59],\\n                t0,\\n                t1\\n            )\\n        );\\n        (t0, t1) = (\\n            ecc_mul_add(\\n                4708706208794466628682087247497451067863475998313450030914472901274160722864,\\n                7969186399956530399844662649330402127389596934829186492004088041920259891200,\\n                m[58],\\n                t0,\\n                t1\\n            )\\n        );\\n        (t0, t1) = (\\n            ecc_mul_add(\\n                11222474342246472762342984653360997340158616377674469557576288428879498390755,\\n                6564479924915349288368971464378961986642703162010246756611090316728014770982,\\n                m[57],\\n                t0,\\n                t1\\n            )\\n        );\\n        (t0, t1) = (ecc_mul_add(M_56_PX_VALUE, M_56_PY_VALUE, m[56], t0, t1));\\n        (t0, t1) = (\\n            ecc_mul_add_pm(\\n                m,\\n                proof,\\n                6277008573546246765208814532330797927747086570010716419876,\\n                t0,\\n                t1\\n            )\\n        );\\n        (m[0], m[1]) = (ecc_add(t0, t1, m[0], m[1]));\\n        (t0, t1) = (ecc_mul(1, 2, m[2]));\\n        (m[0], m[1]) = (ecc_sub(m[0], m[1], t0, t1));\\n        return (m[14], m[15], m[0], m[1]);\\n    }\\n\\n    function verify(\\n        uint256[] calldata proof,\\n        uint256[] calldata target_circuit_final_pair,\\n        bytes32 publicInputHash\\n    ) public view returns (bool) {\\n        uint256[6] memory instances;\\n        instances[0] = target_circuit_final_pair[0] & ((1 << 136) - 1);\\n        instances[1] =\\n            (target_circuit_final_pair[0] >> 136) +\\n            ((target_circuit_final_pair[1] & 1) << 136);\\n        instances[2] = target_circuit_final_pair[2] & ((1 << 136) - 1);\\n        instances[3] =\\n            (target_circuit_final_pair[2] >> 136) +\\n            ((target_circuit_final_pair[3] & 1) << 136);\\n\\n        instances[4] = uint256(publicInputHash) >> (8 * 16);\\n        instances[5] = uint256(publicInputHash) & uint256(2**128 - 1);\\n\\n        uint256 x0 = 0;\\n        uint256 x1 = 0;\\n        uint256 y0 = 0;\\n        uint256 y1 = 0;\\n\\n        G1Point[] memory g1_points = new G1Point[](2);\\n        G2Point[] memory g2_points = new G2Point[](2);\\n\\n        (x0, y0, x1, y1) = get_wx_wg(proof, instances);\\n        g1_points[0].x = x0;\\n        g1_points[0].y = y0;\\n        g1_points[1].x = x1;\\n        g1_points[1].y = y1;\\n        g2_points[0] = get_verify_circuit_g2_s();\\n        g2_points[1] = get_verify_circuit_g2_n();\\n\\n        if (!pairing(g1_points, g2_points)) {\\n            return false;\\n        }\\n\\n        g1_points[0].x = target_circuit_final_pair[0];\\n        g1_points[0].y = target_circuit_final_pair[1];\\n        g1_points[1].x = target_circuit_final_pair[2];\\n        g1_points[1].y = target_circuit_final_pair[3];\\n        g2_points[0] = get_target_circuit_g2_s();\\n        g2_points[1] = get_target_circuit_g2_n();\\n\\n        if (!pairing(g1_points, g2_points)) {\\n            return false;\\n        }\\n\\n        return true;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/universal/Semver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.15;\\n\\nimport { Strings } from \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\n/**\\n * @title Semver\\n * @notice Semver is a simple contract for managing contract versions.\\n */\\ncontract Semver {\\n    /**\\n     * @notice Contract version number (major).\\n     */\\n    uint256 private immutable MAJOR_VERSION;\\n\\n    /**\\n     * @notice Contract version number (minor).\\n     */\\n    uint256 private immutable MINOR_VERSION;\\n\\n    /**\\n     * @notice Contract version number (patch).\\n     */\\n    uint256 private immutable PATCH_VERSION;\\n\\n    /**\\n     * @param _major Version number (major).\\n     * @param _minor Version number (minor).\\n     * @param _patch Version number (patch).\\n     */\\n    constructor(\\n        uint256 _major,\\n        uint256 _minor,\\n        uint256 _patch\\n    ) {\\n        MAJOR_VERSION = _major;\\n        MINOR_VERSION = _minor;\\n        PATCH_VERSION = _patch;\\n    }\\n\\n    /**\\n     * @notice Returns the full semver contract version.\\n     *\\n     * @return Semver contract version as a string.\\n     */\\n    function version() public view virtual returns (string memory) {\\n        return\\n            string(\\n                abi.encodePacked(\\n                    Strings.toString(MAJOR_VERSION),\\n                    \\\".\\\",\\n                    Strings.toString(MINOR_VERSION),\\n                    \\\".\\\",\\n                    Strings.toString(PATCH_VERSION)\\n                )\\n            );\\n    }\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts/utils/math/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts/utils/math/SignedMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [\r\n      \"@openzeppelin/=node_modules/@openzeppelin/\",\r\n      \"@openzeppelin/contracts-upgradeable/=node_modules/@openzeppelin/contracts-upgradeable/\",\r\n      \"@openzeppelin/contracts/=node_modules/@openzeppelin/contracts/\",\r\n      \"@rari-capital/=node_modules/@rari-capital/\",\r\n      \"@rari-capital/solmate/=node_modules/@rari-capital/solmate/\",\r\n      \"ds-test/=node_modules/ds-test/src/\",\r\n      \"forge-std/=node_modules/forge-std/src/\"\r\n    ],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 10000\r\n    },\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"none\"\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_hashScalar\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_m56Px\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_m56Py\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"proof\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"target_circuit_final_pair\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes32\",\"name\":\"publicInputHash\",\"type\":\"bytes32\"}],\"name\":\"verify\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "ZKVerifier", "CompilerVersion": "v0.8.15+commit.e14f2714", "OptimizationUsed": "1", "Runs": "10000", "ConstructorArguments": "0163b85414bb5a9c97d8249f96b9c4ffd8db3e8081133101a14fc8546b704e2b2aa452092865578d9b68a69f053df3db7a563b7cc7d17c9cce524632ccb30d850afcccd2c2ebc8ffb530403bb07d4e1bcfc1aa910d4dd08d7cd81fcafef5e556", "EVMVersion": "london", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}