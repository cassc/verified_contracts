/**
 *Submitted for verification at BscScan.com on 2023-04-20
*/

pragma solidity >=0.7.0 <0.9.0;
// SPDX-License-Identifier: MIT

/**
 * Generated by : https://www.cues.sg
 * Cues.sg : We make technology accessible.
 * Contract Type : Staking
*/
/**
 * @title ERC721 token receiver interface
 * @dev Interface for any contract that wants to support safeTransfers
 * from ERC721 asset contracts.
 */
interface IERC721Receiver {
	/**
	 * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}
	 * by `operator` from `from`, this function is called.
	 *
	 * It must return its Solidity selector to confirm the token transfer.
	 * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.
	 *
	 * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.
	 */
	function onERC721Received(
		address operator,
		address from,
		uint256 tokenId,
		bytes calldata data
	) external returns (bytes4);
}

interface ERC20{
	function balanceOf(address account) external view returns (uint256);
	function transfer(address recipient, uint256 amount) external returns (bool);
}

interface ERC721{
	function safeTransferFrom(address from, address to, uint256 tokenId) external;
}

contract AIXStaking {

	address owner;
	uint256 public interestAmtInBank = uint256(0);
	struct record { address staker; uint256 stakeTime; uint256 lastUpdateTime; uint256 accumulatedInterestToUpdateTime; uint256 amtWithdrawn; }
	mapping(uint256 => record) public informationAboutStakeScheme;
	mapping(uint256 => uint256) public tokenStore;
	uint256 public numberOfTokensCurrentlyStaked = uint256(0);
	uint256 public interestTax = uint256(50000);
	uint256 public dailyInterestRate = uint256(80000);
	uint256 public dailyInterestRate_1 = uint256(80000);
	uint256 public dailyInterestRate_2 = uint256(80000);
	uint256 public dailyInterestRate_3 = uint256(80000);
	uint256 public dailyInterestRate_4 = uint256(80000);
	uint256 public dailyInterestRate_5 = uint256(80000);
	uint256 public dailyInterestRate_6 = uint256(80000);
	uint256 public dailyInterestRate_7 = uint256(80000);
	uint256 public dailyInterestRate_8 = uint256(80000);
	uint256 public dailyInterestRate_9 = uint256(80000);
	uint256 public dailyInterestRate_10 = uint256(80000);
	uint256 public dailyInterestRate_11 = uint256(80000);
	uint256 public dailyInterestRate_12 = uint256(80000);
	uint256 public dailyInterestRate_13 = uint256(80000);
	uint256 public dailyInterestRate_14 = uint256(80000);
	uint256 public dailyInterestRate_15 = uint256(80000);
	uint256 public dailyInterestRate_16 = uint256(80000);
	uint256 public dailyInterestRate_17 = uint256(80000);
	uint256 public dailyInterestRate_18 = uint256(80000);
	uint256 public dailyInterestRate_19 = uint256(80000);
	uint256 public dailyInterestRate_20 = uint256(80000);
	uint256 public dailyInterestRate_21 = uint256(80000);
	uint256 public dailyInterestRate_22 = uint256(80000);
	uint256 public dailyInterestRate_23 = uint256(80000);
	uint256 public dailyInterestRate_24 = uint256(80000);
	uint256 public dailyInterestRate_25 = uint256(80000);
	uint256 public dailyInterestRate_26 = uint256(80000);
	uint256 public dailyInterestRate_27 = uint256(80000);
	uint256 public dailyInterestRate_28 = uint256(80000);
	uint256 public dailyInterestRate_29 = uint256(80000);
	uint256 public dailyInterestRate_30 = uint256(80000);
	uint256 public dailyInterestRate_31 = uint256(80000);
	uint256 public dailyInterestRate_32 = uint256(80000);
	uint256 public dailyInterestRate_33 = uint256(80000);
	uint256 public dailyInterestRate_34 = uint256(80000);
	uint256 public dailyInterestRate_35 = uint256(80000);
	uint256 public dailyInterestRate_36 = uint256(80000);
	uint256 public dailyInterestRate_37 = uint256(80000);
	uint256 public dailyInterestRate_38 = uint256(80000);
	uint256 public dailyInterestRate_39 = uint256(80000);
	uint256 public dailyInterestRate_40 = uint256(80000);
	uint256 public totalWithdrawals = uint256(0);
	event Staked (uint256 indexed tokenId);
	event Unstaked (uint256 indexed tokenId);

	constructor() {
		owner = msg.sender;
	}

	//This function allows the owner to specify an address that will take over ownership rights instead. Please double check the address provided as once the function is executed, only the new owner will be able to change the address back.
	function changeOwner(address _newOwner) public onlyOwner {
		owner = _newOwner;
	}

	modifier onlyOwner() {
		require(msg.sender == owner);
		_;
	}

	function minUIntPair(uint _i, uint _j) internal pure returns (uint){
		if (_i < _j){
			return _i;
		}else{
			return _j;
		}
	}	

	function onERC721Received( address, address, uint256, bytes calldata ) public pure returns (bytes4) {
		return this.onERC721Received.selector;
	}

/**
 * Function changeValueOf_interestTax
 * Notes for _interestTax : 10000 is one percent
 * The function takes in 1 variable, (zero or a positive integer) _interestTax. It can only be called by functions outside of this contract. It does the following :
 * checks that the function is called by the owner of the contract
 * updates interestTax as _interestTax
*/
	function changeValueOf_interestTax(uint256 _interestTax) external onlyOwner {
		interestTax  = _interestTax;
	}

/**
 * Function stake
 * Daily Interest Rate : Variable dailyInterestRate
 * This interest rate is modified under certain circumstances, as articulated in the consolidatedInterestRate function
 * Address Map : informationAboutStakeScheme
 * The function takes in 1 variable, (zero or a positive integer) _tokenId. It can be called by functions both inside and outside of this contract. It does the following :
 * updates informationAboutStakeScheme (Element _tokenId) as Struct comprising (the address that called this function), current time, current time, 0, 0
 * calls ERC721(Address 0x8104e2493a4B21dC9e3145d0a5DA1D10c212e011)'s at safeTransferFrom function  with variable sender as (the address that called this function), variable recipient as (the address of this contract), variable amount as _tokenId
 * emits event Staked with inputs _tokenId
 * updates tokenStore (Element numberOfTokensCurrentlyStaked) as _tokenId
 * updates numberOfTokensCurrentlyStaked as (numberOfTokensCurrentlyStaked) + (1)
*/
	function stake(uint256 _tokenId) public {
		informationAboutStakeScheme[_tokenId]  = record (msg.sender, block.timestamp, block.timestamp, uint256(0), uint256(0));
		ERC721(address(0x8104e2493a4B21dC9e3145d0a5DA1D10c212e011)).safeTransferFrom(msg.sender, address(this), _tokenId);
		emit Staked(_tokenId);
		tokenStore[numberOfTokensCurrentlyStaked]  = _tokenId;
		numberOfTokensCurrentlyStaked  = (numberOfTokensCurrentlyStaked + uint256(1));
	}

/**
 * Function unstake
 * The function takes in 1 variable, (zero or a positive integer) _tokenId. It can be called by functions both inside and outside of this contract. It does the following :
 * creates an internal variable thisRecord with initial value informationAboutStakeScheme with element _tokenId
 * creates an internal variable interestToRemove with initial value (thisRecord with element accumulatedInterestToUpdateTime) + ((((minimum of current time, ((thisRecord with element stakeTime) + ((30000) * (864)))) - (thisRecord with element lastUpdateTime)) * (consolidatedInterestRate with variable _tokenId as _tokenId) * (1000000000000)) / (864))
 * checks that (ERC20(Address 0x55d398326f99059fF775485246999027B3197955)'s at balanceOf function  with variable recipient as (the address of this contract)) is greater than or equals to (((interestToRemove) * ((1000000) - (interestTax))) / (1000000))
 * if (((interestToRemove) * ((1000000) - (interestTax))) / (1000000)) is strictly greater than 0 then (calls ERC20(Address 0x55d398326f99059fF775485246999027B3197955)'s at transfer function  with variable recipient as (the address that called this function), variable amount as (((interestToRemove) * ((1000000) - (interestTax))) / (1000000)))
 * updates interestAmtInBank as (interestAmtInBank) + (((interestToRemove) * (interestTax) * (100)) / (100000000))
 * updates totalWithdrawals as (totalWithdrawals) + (((interestToRemove) * ((1000000) - (interestTax))) / (1000000))
 * checks that (thisRecord with element staker) is equals to (the address that called this function)
 * deletes item _tokenId from mapping informationAboutStakeScheme
 * calls ERC721(Address 0x8104e2493a4B21dC9e3145d0a5DA1D10c212e011)'s at safeTransferFrom function  with variable sender as (the address of this contract), variable recipient as (the address that called this function), variable amount as _tokenId
 * emits event Unstaked with inputs _tokenId
 * repeat numberOfTokensCurrentlyStaked times with loop variable i0 :  (if (tokenStore with element Loop Variable i0) is equals to _tokenId then (updates tokenStore (Element Loop Variable i0) as tokenStore with element (numberOfTokensCurrentlyStaked) - (1); then updates numberOfTokensCurrentlyStaked as (numberOfTokensCurrentlyStaked) - (1); and then terminates the for-next loop))
*/
	function unstake(uint256 _tokenId) public {
		record memory thisRecord = informationAboutStakeScheme[_tokenId];
		uint256 interestToRemove = (thisRecord.accumulatedInterestToUpdateTime + (((minUIntPair(block.timestamp, (thisRecord.stakeTime + (uint256(30000) * uint256(864)))) - thisRecord.lastUpdateTime) * consolidatedInterestRate(_tokenId) * uint256(1000000000000)) / uint256(864)));
		require((ERC20(address(0x55d398326f99059fF775485246999027B3197955)).balanceOf(address(this)) >= ((interestToRemove * (uint256(1000000) - interestTax)) / uint256(1000000))), "Insufficient amount of the token in this contract to transfer out. Please contact the contract owner to top up the token.");
		if ((((interestToRemove * (uint256(1000000) - interestTax)) / uint256(1000000)) > uint256(0))){
			ERC20(address(0x55d398326f99059fF775485246999027B3197955)).transfer(msg.sender, ((interestToRemove * (uint256(1000000) - interestTax)) / uint256(1000000)));
		}
		interestAmtInBank  = (interestAmtInBank + ((interestToRemove * interestTax * uint256(100)) / uint256(100000000)));
		totalWithdrawals  = (totalWithdrawals + ((interestToRemove * (uint256(1000000) - interestTax)) / uint256(1000000)));
		require((thisRecord.staker == msg.sender), "You do not own this token");
		delete informationAboutStakeScheme[_tokenId];
		ERC721(address(0x8104e2493a4B21dC9e3145d0a5DA1D10c212e011)).safeTransferFrom(address(this), msg.sender, _tokenId);
		emit Unstaked(_tokenId);
		for (uint i0 = 0; i0 < numberOfTokensCurrentlyStaked; i0++){
			if ((tokenStore[i0] == _tokenId)){
				tokenStore[i0]  = tokenStore[(numberOfTokensCurrentlyStaked - uint256(1))];
				numberOfTokensCurrentlyStaked  = (numberOfTokensCurrentlyStaked - uint256(1));
				break;
			}
		}
	}

/**
 * Function multipleStake
 * The function takes in 1 variable, (a list of zeros or positive integers) tokenIds. It can be called by functions both inside and outside of this contract. It does the following :
 * repeat length of tokenIds times with loop variable i0 :  (calls stake with variable _tokenId as (tokenIds with element Loop Variable i0))
*/
	function multipleStake(uint256[] memory tokenIds) public {
		for (uint i0 = 0; i0 < (tokenIds).length; i0++){
			stake(tokenIds[i0]);
		}
	}

/**
 * Function multipleUnstake
 * The function takes in 1 variable, (a list of zeros or positive integers) tokenIds. It can be called by functions both inside and outside of this contract. It does the following :
 * repeat length of tokenIds times with loop variable i0 :  (calls unstake with variable _tokenId as (tokenIds with element Loop Variable i0))
*/
	function multipleUnstake(uint256[] memory tokenIds) public {
		for (uint i0 = 0; i0 < (tokenIds).length; i0++){
			unstake(tokenIds[i0]);
		}
	}

/**
 * Function unstakeAllThatIOwn
 * The function takes in 0 variables. It can be called by functions both inside and outside of this contract. It does the following :
 * repeat numberOfTokensCurrentlyStaked times with loop variable i0 :  (creates an internal variable _tokenID with initial value tokenStore with element Loop Variable i0; and then if (informationAboutStakeScheme with element _tokenID with element staker) is equals to (the address that called this function) then (calls unstake with variable _tokenId as _tokenID))
*/
	function unstakeAllThatIOwn() public {
		for (uint i0 = numberOfTokensCurrentlyStaked - 1; i0 >= 0; i0--){
			uint256 _tokenID = tokenStore[i0];
			if ((informationAboutStakeScheme[_tokenID].staker == msg.sender)){
				unstake(_tokenID);
			}
		}
	}

/**
 * Function multipleWithdrawInterest
 * The function takes in 1 variable, (a list of zeros or positive integers) tokenIds. It can be called by functions both inside and outside of this contract. It does the following :
 * repeat length of tokenIds times with loop variable i0 :  (calls withdrawInterestWithoutUnstaking with variable _withdrawalAmt as (interestEarnedUpToNowBeforeTaxesAndNotYetWithdrawn with variable _tokenId as (tokenIds with element Loop Variable i0)), variable _tokenId as (tokenIds with element Loop Variable i0))
*/
	function multipleWithdrawInterest(uint256[] memory tokenIds) public {
		for (uint i0 = 0; i0 < (tokenIds).length; i0++){
			withdrawInterestWithoutUnstaking(interestEarnedUpToNowBeforeTaxesAndNotYetWithdrawn(tokenIds[i0]), tokenIds[i0]);
		}
	}

/**
 * Function withdrawAllInterestWithoutUnstaking
 * The function takes in 0 variables. It can be called by functions both inside and outside of this contract. It does the following :
 * repeat numberOfTokensCurrentlyStaked times with loop variable i0 :  (creates an internal variable _tokenID with initial value tokenStore with element Loop Variable i0; and then if (informationAboutStakeScheme with element _tokenID with element staker) is equals to (the address that called this function) then (calls withdrawInterestWithoutUnstaking with variable _withdrawalAmt as (interestEarnedUpToNowBeforeTaxesAndNotYetWithdrawn with variable _tokenId as _tokenID), variable _tokenId as _tokenID))
*/
	function withdrawAllInterestWithoutUnstaking() public {
		for (uint i0 = 0; i0 < numberOfTokensCurrentlyStaked; i0++){
			uint256 _tokenID = tokenStore[i0];
			if ((informationAboutStakeScheme[_tokenID].staker == msg.sender)){
				withdrawInterestWithoutUnstaking(interestEarnedUpToNowBeforeTaxesAndNotYetWithdrawn(_tokenID), _tokenID);
			}
		}
	}

/**
 * Function updateRecordsWithLatestInterestRates
 * The function takes in 0 variables. It can only be called by other functions in this contract. It does the following :
 * repeat numberOfTokensCurrentlyStaked times with loop variable i0 :  (creates an internal variable thisRecord with initial value informationAboutStakeScheme with element tokenStore with element Loop Variable i0; and then updates informationAboutStakeScheme (Element tokenStore with element Loop Variable i0) as Struct comprising (thisRecord with element staker), (thisRecord with element stakeTime), (minimum of current time, ((thisRecord with element stakeTime) + ((30000) * (864)))), ((thisRecord with element lastUpdateTime) + ((((minimum of current time, ((thisRecord with element stakeTime) + ((30000) * (864)))) - (thisRecord with element lastUpdateTime)) * (consolidatedInterestRate with variable _tokenId as (Loop Variable i0)) * (1000000000000)) / (864))), (thisRecord with element amtWithdrawn))
*/
	function updateRecordsWithLatestInterestRates() internal {
		for (uint i0 = 0; i0 < numberOfTokensCurrentlyStaked; i0++){
			record memory thisRecord = informationAboutStakeScheme[tokenStore[i0]];
			informationAboutStakeScheme[tokenStore[i0]]  = record (thisRecord.staker, thisRecord.stakeTime, minUIntPair(block.timestamp, (thisRecord.stakeTime + (uint256(30000) * uint256(864)))), (thisRecord.lastUpdateTime + (((minUIntPair(block.timestamp, (thisRecord.stakeTime + (uint256(30000) * uint256(864)))) - thisRecord.lastUpdateTime) * consolidatedInterestRate(i0) * uint256(1000000000000)) / uint256(864))), thisRecord.amtWithdrawn);
		}
	}

/**
 * Function numberOfStakedTokenIDsOfAnAddress
 * The function takes in 1 variable, (an address) _address. It can be called by functions both inside and outside of this contract. It does the following :
 * creates an internal variable _counter with initial value 0
 * repeat numberOfTokensCurrentlyStaked times with loop variable i0 :  (creates an internal variable _tokenID with initial value tokenStore with element Loop Variable i0; and then if (informationAboutStakeScheme with element _tokenID with element staker) is equals to _address then (updates _counter as (_counter) + (1)))
 * returns _counter as output
*/
	function numberOfStakedTokenIDsOfAnAddress(address _address) public view returns (uint256) {
		uint256 _counter = uint256(0);
		for (uint i0 = 0; i0 < numberOfTokensCurrentlyStaked; i0++){
			uint256 _tokenID = tokenStore[i0];
			if ((informationAboutStakeScheme[_tokenID].staker == _address)){
				_counter  = (_counter + uint256(1));
			}
		}
		return _counter;
	}

/**
 * Function stakedTokenIDsOfAnAddress
 * The function takes in 1 variable, (an address) _address. It can only be called by other functions in this contract. It does the following :
 * creates an internal variable tokenIDs
 * creates an internal variable _counter with initial value 0
 * repeat numberOfTokensCurrentlyStaked times with loop variable i0 :  (creates an internal variable _tokenID with initial value tokenStore with element Loop Variable i0; and then if (informationAboutStakeScheme with element _tokenID with element staker) is equals to _address then (updates tokenIDs (Element _counter) as _tokenID; and then updates _counter as (_counter) + (1)))
 * returns tokenIDs as output
*/
	function stakedTokenIDsOfAnAddress(address _address) internal view returns (uint256[] memory) {
		uint256[] memory tokenIDs;
		uint256 _counter = uint256(0);
		for (uint i0 = 0; i0 < numberOfTokensCurrentlyStaked; i0++){
			uint256 _tokenID = tokenStore[i0];
			if ((informationAboutStakeScheme[_tokenID].staker == _address)){
				tokenIDs[_counter]  = _tokenID;
				_counter  = (_counter + uint256(1));
			}
		}
		return tokenIDs;
	}

/**
 * Function whichStakedTokenIDsOfAnAddress
 * The function takes in 2 variables, (an address) _address, and (zero or a positive integer) _counterIn. It can be called by functions both inside and outside of this contract. It does the following :
 * creates an internal variable _counter with initial value 0
 * repeat numberOfTokensCurrentlyStaked times with loop variable i0 :  (creates an internal variable _tokenID with initial value tokenStore with element Loop Variable i0; and then if (informationAboutStakeScheme with element _tokenID with element staker) is equals to _address then (if _counterIn is equals to _counter then (returns _tokenID as output); and then updates _counter as (_counter) + (1)))
 * returns 9999999 as output
*/
	function whichStakedTokenIDsOfAnAddress(address _address, uint256 _counterIn) public view returns (uint256) {
		uint256 _counter = uint256(0);
		for (uint i0 = 0; i0 < numberOfTokensCurrentlyStaked; i0++){
			uint256 _tokenID = tokenStore[i0];
			if ((informationAboutStakeScheme[_tokenID].staker == _address)){
				if ((_counterIn == _counter)){
					return _tokenID;
				}
				_counter  = (_counter + uint256(1));
			}
		}
		return uint256(9999999);
	}

/**
 * Function interestEarnedUpToNowBeforeTaxesAndNotYetWithdrawn
 * The function takes in 1 variable, (zero or a positive integer) _tokenId. It can be called by functions both inside and outside of this contract. It does the following :
 * creates an internal variable thisRecord with initial value informationAboutStakeScheme with element _tokenId
 * returns (thisRecord with element accumulatedInterestToUpdateTime) + ((((minimum of current time, ((thisRecord with element stakeTime) + ((30000) * (864)))) - (thisRecord with element lastUpdateTime)) * (consolidatedInterestRate with variable _tokenId as _tokenId) * (1000000000000)) / (864)) as output
*/
	function interestEarnedUpToNowBeforeTaxesAndNotYetWithdrawn(uint256 _tokenId) public view returns (uint256) {
		record memory thisRecord = informationAboutStakeScheme[_tokenId];
		return (thisRecord.accumulatedInterestToUpdateTime + (((minUIntPair(block.timestamp, (thisRecord.stakeTime + (uint256(30000) * uint256(864)))) - thisRecord.lastUpdateTime) * consolidatedInterestRate(_tokenId) * uint256(1000000000000)) / uint256(864)));
	}

/**
 * Function withdrawInterestWithoutUnstaking
 * The function takes in 2 variables, (zero or a positive integer) _withdrawalAmt, and (zero or a positive integer) _tokenId. It can be called by functions both inside and outside of this contract. It does the following :
 * creates an internal variable totalInterestEarnedTillNow with initial value interestEarnedUpToNowBeforeTaxesAndNotYetWithdrawn with variable _tokenId as _tokenId
 * checks that _withdrawalAmt is less than or equals to totalInterestEarnedTillNow
 * creates an internal variable thisRecord with initial value informationAboutStakeScheme with element _tokenId
 * checks that (thisRecord with element staker) is equals to (the address that called this function)
 * updates informationAboutStakeScheme (Element _tokenId) as Struct comprising (thisRecord with element staker), (thisRecord with element stakeTime), (minimum of current time, ((thisRecord with element stakeTime) + ((30000) * (864)))), ((totalInterestEarnedTillNow) - (_withdrawalAmt)), ((thisRecord with element amtWithdrawn) + (_withdrawalAmt))
 * checks that (ERC20(Address 0x55d398326f99059fF775485246999027B3197955)'s at balanceOf function  with variable recipient as (the address of this contract)) is greater than or equals to (((_withdrawalAmt) * ((1000000) - (interestTax))) / (1000000))
 * if (((_withdrawalAmt) * ((1000000) - (interestTax))) / (1000000)) is strictly greater than 0 then (calls ERC20(Address 0x55d398326f99059fF775485246999027B3197955)'s at transfer function  with variable recipient as (the address that called this function), variable amount as (((_withdrawalAmt) * ((1000000) - (interestTax))) / (1000000)))
 * updates interestAmtInBank as (interestAmtInBank) + (((_withdrawalAmt) * (interestTax) * (100)) / (100000000))
 * updates totalWithdrawals as (totalWithdrawals) + (((_withdrawalAmt) * ((1000000) - (interestTax))) / (1000000))
*/
	function withdrawInterestWithoutUnstaking(uint256 _withdrawalAmt, uint256 _tokenId) public {
		uint256 totalInterestEarnedTillNow = interestEarnedUpToNowBeforeTaxesAndNotYetWithdrawn(_tokenId);
		require((_withdrawalAmt <= totalInterestEarnedTillNow), "Withdrawn amount must be less than withdrawable amount");
		record memory thisRecord = informationAboutStakeScheme[_tokenId];
		require((thisRecord.staker == msg.sender), "You do not own this token");
		informationAboutStakeScheme[_tokenId]  = record (thisRecord.staker, thisRecord.stakeTime, minUIntPair(block.timestamp, (thisRecord.stakeTime + (uint256(30000) * uint256(864)))), (totalInterestEarnedTillNow - _withdrawalAmt), (thisRecord.amtWithdrawn + _withdrawalAmt));
		require((ERC20(address(0x55d398326f99059fF775485246999027B3197955)).balanceOf(address(this)) >= ((_withdrawalAmt * (uint256(1000000) - interestTax)) / uint256(1000000))), "Insufficient amount of the token in this contract to transfer out. Please contact the contract owner to top up the token.");
		if ((((_withdrawalAmt * (uint256(1000000) - interestTax)) / uint256(1000000)) > uint256(0))){
			ERC20(address(0x55d398326f99059fF775485246999027B3197955)).transfer(msg.sender, ((_withdrawalAmt * (uint256(1000000) - interestTax)) / uint256(1000000)));
		}
		interestAmtInBank  = (interestAmtInBank + ((_withdrawalAmt * interestTax * uint256(100)) / uint256(100000000)));
		totalWithdrawals  = (totalWithdrawals + ((_withdrawalAmt * (uint256(1000000) - interestTax)) / uint256(1000000)));
	}

/**
 * Function withdrawAllInterestFromATokenWithoutUnstaking
 * The function takes in 1 variable, (zero or a positive integer) _tokenId. It can only be called by functions outside of this contract. It does the following :
 * calls withdrawInterestWithoutUnstaking with variable _withdrawalAmt as (interestEarnedUpToNowBeforeTaxesAndNotYetWithdrawn with variable _tokenId as _tokenId), variable _tokenId as _tokenId
*/
	function withdrawAllInterestFromATokenWithoutUnstaking(uint256 _tokenId) external {
		withdrawInterestWithoutUnstaking(interestEarnedUpToNowBeforeTaxesAndNotYetWithdrawn(_tokenId), _tokenId);
	}

/**
 * Function totalAccumulatedInterest
 * The function takes in 0 variables. It can be called by functions both inside and outside of this contract. It does the following :
 * creates an internal variable total with initial value 0
 * repeat numberOfTokensCurrentlyStaked times with loop variable i0 :  (updates total as (total) + (interestEarnedUpToNowBeforeTaxesAndNotYetWithdrawn with variable _tokenId as (Loop Variable i0)))
 * returns total as output
*/
	function totalAccumulatedInterest() public view returns (uint256) {
		uint256 total = uint256(0);
		for (uint i0 = 0; i0 < numberOfTokensCurrentlyStaked; i0++){
			total  = (total + interestEarnedUpToNowBeforeTaxesAndNotYetWithdrawn(i0));
		}
		return total;
	}

/**
 * Function consolidatedInterestRate
 * The function takes in 1 variable, (zero or a positive integer) _tokenId. It can be called by functions both inside and outside of this contract. It does the following :
 * if _tokenId is equals to 39 then (returns dailyInterestRate_40 as output)
 * if _tokenId is equals to 38 then (returns dailyInterestRate_39 as output)
 * if _tokenId is equals to 37 then (returns dailyInterestRate_38 as output)
 * if _tokenId is equals to 36 then (returns dailyInterestRate_37 as output)
 * if _tokenId is equals to 35 then (returns dailyInterestRate_36 as output)
 * if _tokenId is equals to 34 then (returns dailyInterestRate_35 as output)
 * if _tokenId is equals to 33 then (returns dailyInterestRate_34 as output)
 * if _tokenId is equals to 32 then (returns dailyInterestRate_33 as output)
 * if _tokenId is equals to 31 then (returns dailyInterestRate_32 as output)
 * if _tokenId is equals to 30 then (returns dailyInterestRate_31 as output)
 * if _tokenId is equals to 29 then (returns dailyInterestRate_30 as output)
 * if _tokenId is equals to 28 then (returns dailyInterestRate_29 as output)
 * if _tokenId is equals to 27 then (returns dailyInterestRate_28 as output)
 * if _tokenId is equals to 26 then (returns dailyInterestRate_27 as output)
 * if _tokenId is equals to 25 then (returns dailyInterestRate_26 as output)
 * if _tokenId is equals to 24 then (returns dailyInterestRate_25 as output)
 * if _tokenId is equals to 23 then (returns dailyInterestRate_24 as output)
 * if _tokenId is equals to 22 then (returns dailyInterestRate_23 as output)
 * if _tokenId is equals to 21 then (returns dailyInterestRate_22 as output)
 * if _tokenId is equals to 20 then (returns dailyInterestRate_21 as output)
 * if _tokenId is equals to 19 then (returns dailyInterestRate_20 as output)
 * if _tokenId is equals to 18 then (returns dailyInterestRate_19 as output)
 * if _tokenId is equals to 17 then (returns dailyInterestRate_18 as output)
 * if _tokenId is equals to 16 then (returns dailyInterestRate_17 as output)
 * if _tokenId is equals to 15 then (returns dailyInterestRate_16 as output)
 * if _tokenId is equals to 14 then (returns dailyInterestRate_15 as output)
 * if _tokenId is equals to 13 then (returns dailyInterestRate_14 as output)
 * if _tokenId is equals to 12 then (returns dailyInterestRate_13 as output)
 * if _tokenId is equals to 11 then (returns dailyInterestRate_12 as output)
 * if _tokenId is equals to 10 then (returns dailyInterestRate_11 as output)
 * if _tokenId is equals to 9 then (returns dailyInterestRate_10 as output)
 * if _tokenId is equals to 8 then (returns dailyInterestRate_9 as output)
 * if _tokenId is equals to 7 then (returns dailyInterestRate_8 as output)
 * if _tokenId is equals to 6 then (returns dailyInterestRate_7 as output)
 * if _tokenId is equals to 5 then (returns dailyInterestRate_6 as output)
 * if _tokenId is equals to 4 then (returns dailyInterestRate_5 as output)
 * if _tokenId is equals to 3 then (returns dailyInterestRate_4 as output)
 * if _tokenId is equals to 2 then (returns dailyInterestRate_3 as output)
 * if _tokenId is equals to 1 then (returns dailyInterestRate_2 as output)
 * if _tokenId is equals to 0 then (returns dailyInterestRate_1 as output)
 * returns dailyInterestRate as output
*/
	function consolidatedInterestRate(uint256 _tokenId) public view returns (uint256) {
		if ((_tokenId == uint256(39))){
			return dailyInterestRate_40;
		}
		if ((_tokenId == uint256(38))){
			return dailyInterestRate_39;
		}
		if ((_tokenId == uint256(37))){
			return dailyInterestRate_38;
		}
		if ((_tokenId == uint256(36))){
			return dailyInterestRate_37;
		}
		if ((_tokenId == uint256(35))){
			return dailyInterestRate_36;
		}
		if ((_tokenId == uint256(34))){
			return dailyInterestRate_35;
		}
		if ((_tokenId == uint256(33))){
			return dailyInterestRate_34;
		}
		if ((_tokenId == uint256(32))){
			return dailyInterestRate_33;
		}
		if ((_tokenId == uint256(31))){
			return dailyInterestRate_32;
		}
		if ((_tokenId == uint256(30))){
			return dailyInterestRate_31;
		}
		if ((_tokenId == uint256(29))){
			return dailyInterestRate_30;
		}
		if ((_tokenId == uint256(28))){
			return dailyInterestRate_29;
		}
		if ((_tokenId == uint256(27))){
			return dailyInterestRate_28;
		}
		if ((_tokenId == uint256(26))){
			return dailyInterestRate_27;
		}
		if ((_tokenId == uint256(25))){
			return dailyInterestRate_26;
		}
		if ((_tokenId == uint256(24))){
			return dailyInterestRate_25;
		}
		if ((_tokenId == uint256(23))){
			return dailyInterestRate_24;
		}
		if ((_tokenId == uint256(22))){
			return dailyInterestRate_23;
		}
		if ((_tokenId == uint256(21))){
			return dailyInterestRate_22;
		}
		if ((_tokenId == uint256(20))){
			return dailyInterestRate_21;
		}
		if ((_tokenId == uint256(19))){
			return dailyInterestRate_20;
		}
		if ((_tokenId == uint256(18))){
			return dailyInterestRate_19;
		}
		if ((_tokenId == uint256(17))){
			return dailyInterestRate_18;
		}
		if ((_tokenId == uint256(16))){
			return dailyInterestRate_17;
		}
		if ((_tokenId == uint256(15))){
			return dailyInterestRate_16;
		}
		if ((_tokenId == uint256(14))){
			return dailyInterestRate_15;
		}
		if ((_tokenId == uint256(13))){
			return dailyInterestRate_14;
		}
		if ((_tokenId == uint256(12))){
			return dailyInterestRate_13;
		}
		if ((_tokenId == uint256(11))){
			return dailyInterestRate_12;
		}
		if ((_tokenId == uint256(10))){
			return dailyInterestRate_11;
		}
		if ((_tokenId == uint256(9))){
			return dailyInterestRate_10;
		}
		if ((_tokenId == uint256(8))){
			return dailyInterestRate_9;
		}
		if ((_tokenId == uint256(7))){
			return dailyInterestRate_8;
		}
		if ((_tokenId == uint256(6))){
			return dailyInterestRate_7;
		}
		if ((_tokenId == uint256(5))){
			return dailyInterestRate_6;
		}
		if ((_tokenId == uint256(4))){
			return dailyInterestRate_5;
		}
		if ((_tokenId == uint256(3))){
			return dailyInterestRate_4;
		}
		if ((_tokenId == uint256(2))){
			return dailyInterestRate_3;
		}
		if ((_tokenId == uint256(1))){
			return dailyInterestRate_2;
		}
		if ((_tokenId == uint256(0))){
			return dailyInterestRate_1;
		}
		return dailyInterestRate;
	}

/**
 * Function modifyDailyInterestRate
 * Notes for _dailyInterestRate : 10000 is one coin
 * The function takes in 1 variable, (zero or a positive integer) _dailyInterestRate. It can be called by functions both inside and outside of this contract. It does the following :
 * checks that the function is called by the owner of the contract
 * calls updateRecordsWithLatestInterestRates
 * updates dailyInterestRate as _dailyInterestRate
*/
	function modifyDailyInterestRate(uint256 _dailyInterestRate) public onlyOwner {
		updateRecordsWithLatestInterestRates();
		dailyInterestRate  = _dailyInterestRate;
	}

/**
 * Function modifyDailyInterestRate_1
 * Notes for _dailyInterestRate : 10000 is one coin
 * The function takes in 1 variable, (zero or a positive integer) _dailyInterestRate. It can be called by functions both inside and outside of this contract. It does the following :
 * checks that the function is called by the owner of the contract
 * calls updateRecordsWithLatestInterestRates
 * updates dailyInterestRate_1 as _dailyInterestRate
*/
	function modifyDailyInterestRate_1(uint256 _dailyInterestRate) public onlyOwner {
		updateRecordsWithLatestInterestRates();
		dailyInterestRate_1  = _dailyInterestRate;
	}

/**
 * Function modifyDailyInterestRate_2
 * Notes for _dailyInterestRate : 10000 is one coin
 * The function takes in 1 variable, (zero or a positive integer) _dailyInterestRate. It can be called by functions both inside and outside of this contract. It does the following :
 * checks that the function is called by the owner of the contract
 * calls updateRecordsWithLatestInterestRates
 * updates dailyInterestRate_2 as _dailyInterestRate
*/
	function modifyDailyInterestRate_2(uint256 _dailyInterestRate) public onlyOwner {
		updateRecordsWithLatestInterestRates();
		dailyInterestRate_2  = _dailyInterestRate;
	}

/**
 * Function modifyDailyInterestRate_3
 * Notes for _dailyInterestRate : 10000 is one coin
 * The function takes in 1 variable, (zero or a positive integer) _dailyInterestRate. It can be called by functions both inside and outside of this contract. It does the following :
 * checks that the function is called by the owner of the contract
 * calls updateRecordsWithLatestInterestRates
 * updates dailyInterestRate_3 as _dailyInterestRate
*/
	function modifyDailyInterestRate_3(uint256 _dailyInterestRate) public onlyOwner {
		updateRecordsWithLatestInterestRates();
		dailyInterestRate_3  = _dailyInterestRate;
	}

/**
 * Function modifyDailyInterestRate_4
 * Notes for _dailyInterestRate : 10000 is one coin
 * The function takes in 1 variable, (zero or a positive integer) _dailyInterestRate. It can be called by functions both inside and outside of this contract. It does the following :
 * checks that the function is called by the owner of the contract
 * calls updateRecordsWithLatestInterestRates
 * updates dailyInterestRate_4 as _dailyInterestRate
*/
	function modifyDailyInterestRate_4(uint256 _dailyInterestRate) public onlyOwner {
		updateRecordsWithLatestInterestRates();
		dailyInterestRate_4  = _dailyInterestRate;
	}

/**
 * Function modifyDailyInterestRate_5
 * Notes for _dailyInterestRate : 10000 is one coin
 * The function takes in 1 variable, (zero or a positive integer) _dailyInterestRate. It can be called by functions both inside and outside of this contract. It does the following :
 * checks that the function is called by the owner of the contract
 * calls updateRecordsWithLatestInterestRates
 * updates dailyInterestRate_5 as _dailyInterestRate
*/
	function modifyDailyInterestRate_5(uint256 _dailyInterestRate) public onlyOwner {
		updateRecordsWithLatestInterestRates();
		dailyInterestRate_5  = _dailyInterestRate;
	}

/**
 * Function modifyDailyInterestRate_6
 * Notes for _dailyInterestRate : 10000 is one coin
 * The function takes in 1 variable, (zero or a positive integer) _dailyInterestRate. It can be called by functions both inside and outside of this contract. It does the following :
 * checks that the function is called by the owner of the contract
 * calls updateRecordsWithLatestInterestRates
 * updates dailyInterestRate_6 as _dailyInterestRate
*/
	function modifyDailyInterestRate_6(uint256 _dailyInterestRate) public onlyOwner {
		updateRecordsWithLatestInterestRates();
		dailyInterestRate_6  = _dailyInterestRate;
	}

/**
 * Function modifyDailyInterestRate_7
 * Notes for _dailyInterestRate : 10000 is one coin
 * The function takes in 1 variable, (zero or a positive integer) _dailyInterestRate. It can be called by functions both inside and outside of this contract. It does the following :
 * checks that the function is called by the owner of the contract
 * calls updateRecordsWithLatestInterestRates
 * updates dailyInterestRate_7 as _dailyInterestRate
*/
	function modifyDailyInterestRate_7(uint256 _dailyInterestRate) public onlyOwner {
		updateRecordsWithLatestInterestRates();
		dailyInterestRate_7  = _dailyInterestRate;
	}

/**
 * Function modifyDailyInterestRate_8
 * Notes for _dailyInterestRate : 10000 is one coin
 * The function takes in 1 variable, (zero or a positive integer) _dailyInterestRate. It can be called by functions both inside and outside of this contract. It does the following :
 * checks that the function is called by the owner of the contract
 * calls updateRecordsWithLatestInterestRates
 * updates dailyInterestRate_8 as _dailyInterestRate
*/
	function modifyDailyInterestRate_8(uint256 _dailyInterestRate) public onlyOwner {
		updateRecordsWithLatestInterestRates();
		dailyInterestRate_8  = _dailyInterestRate;
	}

/**
 * Function modifyDailyInterestRate_9
 * Notes for _dailyInterestRate : 10000 is one coin
 * The function takes in 1 variable, (zero or a positive integer) _dailyInterestRate. It can be called by functions both inside and outside of this contract. It does the following :
 * checks that the function is called by the owner of the contract
 * calls updateRecordsWithLatestInterestRates
 * updates dailyInterestRate_9 as _dailyInterestRate
*/
	function modifyDailyInterestRate_9(uint256 _dailyInterestRate) public onlyOwner {
		updateRecordsWithLatestInterestRates();
		dailyInterestRate_9  = _dailyInterestRate;
	}

/**
 * Function modifyDailyInterestRate_10
 * Notes for _dailyInterestRate : 10000 is one coin
 * The function takes in 1 variable, (zero or a positive integer) _dailyInterestRate. It can be called by functions both inside and outside of this contract. It does the following :
 * checks that the function is called by the owner of the contract
 * calls updateRecordsWithLatestInterestRates
 * updates dailyInterestRate_10 as _dailyInterestRate
*/
	function modifyDailyInterestRate_10(uint256 _dailyInterestRate) public onlyOwner {
		updateRecordsWithLatestInterestRates();
		dailyInterestRate_10  = _dailyInterestRate;
	}

/**
 * Function modifyDailyInterestRate_11
 * Notes for _dailyInterestRate : 10000 is one coin
 * The function takes in 1 variable, (zero or a positive integer) _dailyInterestRate. It can be called by functions both inside and outside of this contract. It does the following :
 * checks that the function is called by the owner of the contract
 * calls updateRecordsWithLatestInterestRates
 * updates dailyInterestRate_11 as _dailyInterestRate
*/
	function modifyDailyInterestRate_11(uint256 _dailyInterestRate) public onlyOwner {
		updateRecordsWithLatestInterestRates();
		dailyInterestRate_11  = _dailyInterestRate;
	}

/**
 * Function modifyDailyInterestRate_12
 * Notes for _dailyInterestRate : 10000 is one coin
 * The function takes in 1 variable, (zero or a positive integer) _dailyInterestRate. It can be called by functions both inside and outside of this contract. It does the following :
 * checks that the function is called by the owner of the contract
 * calls updateRecordsWithLatestInterestRates
 * updates dailyInterestRate_12 as _dailyInterestRate
*/
	function modifyDailyInterestRate_12(uint256 _dailyInterestRate) public onlyOwner {
		updateRecordsWithLatestInterestRates();
		dailyInterestRate_12  = _dailyInterestRate;
	}

/**
 * Function modifyDailyInterestRate_13
 * Notes for _dailyInterestRate : 10000 is one coin
 * The function takes in 1 variable, (zero or a positive integer) _dailyInterestRate. It can be called by functions both inside and outside of this contract. It does the following :
 * checks that the function is called by the owner of the contract
 * calls updateRecordsWithLatestInterestRates
 * updates dailyInterestRate_13 as _dailyInterestRate
*/
	function modifyDailyInterestRate_13(uint256 _dailyInterestRate) public onlyOwner {
		updateRecordsWithLatestInterestRates();
		dailyInterestRate_13  = _dailyInterestRate;
	}

/**
 * Function modifyDailyInterestRate_14
 * Notes for _dailyInterestRate : 10000 is one coin
 * The function takes in 1 variable, (zero or a positive integer) _dailyInterestRate. It can be called by functions both inside and outside of this contract. It does the following :
 * checks that the function is called by the owner of the contract
 * calls updateRecordsWithLatestInterestRates
 * updates dailyInterestRate_14 as _dailyInterestRate
*/
	function modifyDailyInterestRate_14(uint256 _dailyInterestRate) public onlyOwner {
		updateRecordsWithLatestInterestRates();
		dailyInterestRate_14  = _dailyInterestRate;
	}

/**
 * Function modifyDailyInterestRate_15
 * Notes for _dailyInterestRate : 10000 is one coin
 * The function takes in 1 variable, (zero or a positive integer) _dailyInterestRate. It can be called by functions both inside and outside of this contract. It does the following :
 * checks that the function is called by the owner of the contract
 * calls updateRecordsWithLatestInterestRates
 * updates dailyInterestRate_15 as _dailyInterestRate
*/
	function modifyDailyInterestRate_15(uint256 _dailyInterestRate) public onlyOwner {
		updateRecordsWithLatestInterestRates();
		dailyInterestRate_15  = _dailyInterestRate;
	}

/**
 * Function modifyDailyInterestRate_16
 * Notes for _dailyInterestRate : 10000 is one coin
 * The function takes in 1 variable, (zero or a positive integer) _dailyInterestRate. It can be called by functions both inside and outside of this contract. It does the following :
 * checks that the function is called by the owner of the contract
 * calls updateRecordsWithLatestInterestRates
 * updates dailyInterestRate_16 as _dailyInterestRate
*/
	function modifyDailyInterestRate_16(uint256 _dailyInterestRate) public onlyOwner {
		updateRecordsWithLatestInterestRates();
		dailyInterestRate_16  = _dailyInterestRate;
	}

/**
 * Function modifyDailyInterestRate_17
 * Notes for _dailyInterestRate : 10000 is one coin
 * The function takes in 1 variable, (zero or a positive integer) _dailyInterestRate. It can be called by functions both inside and outside of this contract. It does the following :
 * checks that the function is called by the owner of the contract
 * calls updateRecordsWithLatestInterestRates
 * updates dailyInterestRate_17 as _dailyInterestRate
*/
	function modifyDailyInterestRate_17(uint256 _dailyInterestRate) public onlyOwner {
		updateRecordsWithLatestInterestRates();
		dailyInterestRate_17  = _dailyInterestRate;
	}

/**
 * Function modifyDailyInterestRate_18
 * Notes for _dailyInterestRate : 10000 is one coin
 * The function takes in 1 variable, (zero or a positive integer) _dailyInterestRate. It can be called by functions both inside and outside of this contract. It does the following :
 * checks that the function is called by the owner of the contract
 * calls updateRecordsWithLatestInterestRates
 * updates dailyInterestRate_18 as _dailyInterestRate
*/
	function modifyDailyInterestRate_18(uint256 _dailyInterestRate) public onlyOwner {
		updateRecordsWithLatestInterestRates();
		dailyInterestRate_18  = _dailyInterestRate;
	}

/**
 * Function modifyDailyInterestRate_19
 * Notes for _dailyInterestRate : 10000 is one coin
 * The function takes in 1 variable, (zero or a positive integer) _dailyInterestRate. It can be called by functions both inside and outside of this contract. It does the following :
 * checks that the function is called by the owner of the contract
 * calls updateRecordsWithLatestInterestRates
 * updates dailyInterestRate_19 as _dailyInterestRate
*/
	function modifyDailyInterestRate_19(uint256 _dailyInterestRate) public onlyOwner {
		updateRecordsWithLatestInterestRates();
		dailyInterestRate_19  = _dailyInterestRate;
	}

/**
 * Function modifyDailyInterestRate_20
 * Notes for _dailyInterestRate : 10000 is one coin
 * The function takes in 1 variable, (zero or a positive integer) _dailyInterestRate. It can be called by functions both inside and outside of this contract. It does the following :
 * checks that the function is called by the owner of the contract
 * calls updateRecordsWithLatestInterestRates
 * updates dailyInterestRate_20 as _dailyInterestRate
*/
	function modifyDailyInterestRate_20(uint256 _dailyInterestRate) public onlyOwner {
		updateRecordsWithLatestInterestRates();
		dailyInterestRate_20  = _dailyInterestRate;
	}

/**
 * Function modifyDailyInterestRate_21
 * Notes for _dailyInterestRate : 10000 is one coin
 * The function takes in 1 variable, (zero or a positive integer) _dailyInterestRate. It can be called by functions both inside and outside of this contract. It does the following :
 * checks that the function is called by the owner of the contract
 * calls updateRecordsWithLatestInterestRates
 * updates dailyInterestRate_21 as _dailyInterestRate
*/
	function modifyDailyInterestRate_21(uint256 _dailyInterestRate) public onlyOwner {
		updateRecordsWithLatestInterestRates();
		dailyInterestRate_21  = _dailyInterestRate;
	}

/**
 * Function modifyDailyInterestRate_22
 * Notes for _dailyInterestRate : 10000 is one coin
 * The function takes in 1 variable, (zero or a positive integer) _dailyInterestRate. It can be called by functions both inside and outside of this contract. It does the following :
 * checks that the function is called by the owner of the contract
 * calls updateRecordsWithLatestInterestRates
 * updates dailyInterestRate_22 as _dailyInterestRate
*/
	function modifyDailyInterestRate_22(uint256 _dailyInterestRate) public onlyOwner {
		updateRecordsWithLatestInterestRates();
		dailyInterestRate_22  = _dailyInterestRate;
	}

/**
 * Function modifyDailyInterestRate_23
 * Notes for _dailyInterestRate : 10000 is one coin
 * The function takes in 1 variable, (zero or a positive integer) _dailyInterestRate. It can be called by functions both inside and outside of this contract. It does the following :
 * checks that the function is called by the owner of the contract
 * calls updateRecordsWithLatestInterestRates
 * updates dailyInterestRate_23 as _dailyInterestRate
*/
	function modifyDailyInterestRate_23(uint256 _dailyInterestRate) public onlyOwner {
		updateRecordsWithLatestInterestRates();
		dailyInterestRate_23  = _dailyInterestRate;
	}

/**
 * Function modifyDailyInterestRate_24
 * Notes for _dailyInterestRate : 10000 is one coin
 * The function takes in 1 variable, (zero or a positive integer) _dailyInterestRate. It can be called by functions both inside and outside of this contract. It does the following :
 * checks that the function is called by the owner of the contract
 * calls updateRecordsWithLatestInterestRates
 * updates dailyInterestRate_24 as _dailyInterestRate
*/
	function modifyDailyInterestRate_24(uint256 _dailyInterestRate) public onlyOwner {
		updateRecordsWithLatestInterestRates();
		dailyInterestRate_24  = _dailyInterestRate;
	}

/**
 * Function modifyDailyInterestRate_25
 * Notes for _dailyInterestRate : 10000 is one coin
 * The function takes in 1 variable, (zero or a positive integer) _dailyInterestRate. It can be called by functions both inside and outside of this contract. It does the following :
 * checks that the function is called by the owner of the contract
 * calls updateRecordsWithLatestInterestRates
 * updates dailyInterestRate_25 as _dailyInterestRate
*/
	function modifyDailyInterestRate_25(uint256 _dailyInterestRate) public onlyOwner {
		updateRecordsWithLatestInterestRates();
		dailyInterestRate_25  = _dailyInterestRate;
	}

/**
 * Function modifyDailyInterestRate_26
 * Notes for _dailyInterestRate : 10000 is one coin
 * The function takes in 1 variable, (zero or a positive integer) _dailyInterestRate. It can be called by functions both inside and outside of this contract. It does the following :
 * checks that the function is called by the owner of the contract
 * calls updateRecordsWithLatestInterestRates
 * updates dailyInterestRate_26 as _dailyInterestRate
*/
	function modifyDailyInterestRate_26(uint256 _dailyInterestRate) public onlyOwner {
		updateRecordsWithLatestInterestRates();
		dailyInterestRate_26  = _dailyInterestRate;
	}

/**
 * Function modifyDailyInterestRate_27
 * Notes for _dailyInterestRate : 10000 is one coin
 * The function takes in 1 variable, (zero or a positive integer) _dailyInterestRate. It can be called by functions both inside and outside of this contract. It does the following :
 * checks that the function is called by the owner of the contract
 * calls updateRecordsWithLatestInterestRates
 * updates dailyInterestRate_27 as _dailyInterestRate
*/
	function modifyDailyInterestRate_27(uint256 _dailyInterestRate) public onlyOwner {
		updateRecordsWithLatestInterestRates();
		dailyInterestRate_27  = _dailyInterestRate;
	}

/**
 * Function modifyDailyInterestRate_28
 * Notes for _dailyInterestRate : 10000 is one coin
 * The function takes in 1 variable, (zero or a positive integer) _dailyInterestRate. It can be called by functions both inside and outside of this contract. It does the following :
 * checks that the function is called by the owner of the contract
 * calls updateRecordsWithLatestInterestRates
 * updates dailyInterestRate_28 as _dailyInterestRate
*/
	function modifyDailyInterestRate_28(uint256 _dailyInterestRate) public onlyOwner {
		updateRecordsWithLatestInterestRates();
		dailyInterestRate_28  = _dailyInterestRate;
	}

/**
 * Function modifyDailyInterestRate_29
 * Notes for _dailyInterestRate : 10000 is one coin
 * The function takes in 1 variable, (zero or a positive integer) _dailyInterestRate. It can be called by functions both inside and outside of this contract. It does the following :
 * checks that the function is called by the owner of the contract
 * calls updateRecordsWithLatestInterestRates
 * updates dailyInterestRate_29 as _dailyInterestRate
*/
	function modifyDailyInterestRate_29(uint256 _dailyInterestRate) public onlyOwner {
		updateRecordsWithLatestInterestRates();
		dailyInterestRate_29  = _dailyInterestRate;
	}

/**
 * Function modifyDailyInterestRate_30
 * Notes for _dailyInterestRate : 10000 is one coin
 * The function takes in 1 variable, (zero or a positive integer) _dailyInterestRate. It can be called by functions both inside and outside of this contract. It does the following :
 * checks that the function is called by the owner of the contract
 * calls updateRecordsWithLatestInterestRates
 * updates dailyInterestRate_30 as _dailyInterestRate
*/
	function modifyDailyInterestRate_30(uint256 _dailyInterestRate) public onlyOwner {
		updateRecordsWithLatestInterestRates();
		dailyInterestRate_30  = _dailyInterestRate;
	}

/**
 * Function modifyDailyInterestRate_31
 * Notes for _dailyInterestRate : 10000 is one coin
 * The function takes in 1 variable, (zero or a positive integer) _dailyInterestRate. It can be called by functions both inside and outside of this contract. It does the following :
 * checks that the function is called by the owner of the contract
 * calls updateRecordsWithLatestInterestRates
 * updates dailyInterestRate_31 as _dailyInterestRate
*/
	function modifyDailyInterestRate_31(uint256 _dailyInterestRate) public onlyOwner {
		updateRecordsWithLatestInterestRates();
		dailyInterestRate_31  = _dailyInterestRate;
	}

/**
 * Function modifyDailyInterestRate_32
 * Notes for _dailyInterestRate : 10000 is one coin
 * The function takes in 1 variable, (zero or a positive integer) _dailyInterestRate. It can be called by functions both inside and outside of this contract. It does the following :
 * checks that the function is called by the owner of the contract
 * calls updateRecordsWithLatestInterestRates
 * updates dailyInterestRate_32 as _dailyInterestRate
*/
	function modifyDailyInterestRate_32(uint256 _dailyInterestRate) public onlyOwner {
		updateRecordsWithLatestInterestRates();
		dailyInterestRate_32  = _dailyInterestRate;
	}

/**
 * Function modifyDailyInterestRate_33
 * Notes for _dailyInterestRate : 10000 is one coin
 * The function takes in 1 variable, (zero or a positive integer) _dailyInterestRate. It can be called by functions both inside and outside of this contract. It does the following :
 * checks that the function is called by the owner of the contract
 * calls updateRecordsWithLatestInterestRates
 * updates dailyInterestRate_33 as _dailyInterestRate
*/
	function modifyDailyInterestRate_33(uint256 _dailyInterestRate) public onlyOwner {
		updateRecordsWithLatestInterestRates();
		dailyInterestRate_33  = _dailyInterestRate;
	}

/**
 * Function modifyDailyInterestRate_34
 * Notes for _dailyInterestRate : 10000 is one coin
 * The function takes in 1 variable, (zero or a positive integer) _dailyInterestRate. It can be called by functions both inside and outside of this contract. It does the following :
 * checks that the function is called by the owner of the contract
 * calls updateRecordsWithLatestInterestRates
 * updates dailyInterestRate_34 as _dailyInterestRate
*/
	function modifyDailyInterestRate_34(uint256 _dailyInterestRate) public onlyOwner {
		updateRecordsWithLatestInterestRates();
		dailyInterestRate_34  = _dailyInterestRate;
	}

/**
 * Function modifyDailyInterestRate_35
 * Notes for _dailyInterestRate : 10000 is one coin
 * The function takes in 1 variable, (zero or a positive integer) _dailyInterestRate. It can be called by functions both inside and outside of this contract. It does the following :
 * checks that the function is called by the owner of the contract
 * calls updateRecordsWithLatestInterestRates
 * updates dailyInterestRate_35 as _dailyInterestRate
*/
	function modifyDailyInterestRate_35(uint256 _dailyInterestRate) public onlyOwner {
		updateRecordsWithLatestInterestRates();
		dailyInterestRate_35  = _dailyInterestRate;
	}

/**
 * Function modifyDailyInterestRate_36
 * Notes for _dailyInterestRate : 10000 is one coin
 * The function takes in 1 variable, (zero or a positive integer) _dailyInterestRate. It can be called by functions both inside and outside of this contract. It does the following :
 * checks that the function is called by the owner of the contract
 * calls updateRecordsWithLatestInterestRates
 * updates dailyInterestRate_36 as _dailyInterestRate
*/
	function modifyDailyInterestRate_36(uint256 _dailyInterestRate) public onlyOwner {
		updateRecordsWithLatestInterestRates();
		dailyInterestRate_36  = _dailyInterestRate;
	}

/**
 * Function modifyDailyInterestRate_37
 * Notes for _dailyInterestRate : 10000 is one coin
 * The function takes in 1 variable, (zero or a positive integer) _dailyInterestRate. It can be called by functions both inside and outside of this contract. It does the following :
 * checks that the function is called by the owner of the contract
 * calls updateRecordsWithLatestInterestRates
 * updates dailyInterestRate_37 as _dailyInterestRate
*/
	function modifyDailyInterestRate_37(uint256 _dailyInterestRate) public onlyOwner {
		updateRecordsWithLatestInterestRates();
		dailyInterestRate_37  = _dailyInterestRate;
	}

/**
 * Function modifyDailyInterestRate_38
 * Notes for _dailyInterestRate : 10000 is one coin
 * The function takes in 1 variable, (zero or a positive integer) _dailyInterestRate. It can be called by functions both inside and outside of this contract. It does the following :
 * checks that the function is called by the owner of the contract
 * calls updateRecordsWithLatestInterestRates
 * updates dailyInterestRate_38 as _dailyInterestRate
*/
	function modifyDailyInterestRate_38(uint256 _dailyInterestRate) public onlyOwner {
		updateRecordsWithLatestInterestRates();
		dailyInterestRate_38  = _dailyInterestRate;
	}

/**
 * Function modifyDailyInterestRate_39
 * Notes for _dailyInterestRate : 10000 is one coin
 * The function takes in 1 variable, (zero or a positive integer) _dailyInterestRate. It can be called by functions both inside and outside of this contract. It does the following :
 * checks that the function is called by the owner of the contract
 * calls updateRecordsWithLatestInterestRates
 * updates dailyInterestRate_39 as _dailyInterestRate
*/
	function modifyDailyInterestRate_39(uint256 _dailyInterestRate) public onlyOwner {
		updateRecordsWithLatestInterestRates();
		dailyInterestRate_39  = _dailyInterestRate;
	}

/**
 * Function modifyDailyInterestRate_40
 * Notes for _dailyInterestRate : 10000 is one coin
 * The function takes in 1 variable, (zero or a positive integer) _dailyInterestRate. It can be called by functions both inside and outside of this contract. It does the following :
 * checks that the function is called by the owner of the contract
 * calls updateRecordsWithLatestInterestRates
 * updates dailyInterestRate_40 as _dailyInterestRate
*/
	function modifyDailyInterestRate_40(uint256 _dailyInterestRate) public onlyOwner {
		updateRecordsWithLatestInterestRates();
		dailyInterestRate_40  = _dailyInterestRate;
	}

/**
 * Function interestTaxWithdrawAmt
 * The function takes in 0 variables. It can be called by functions both inside and outside of this contract. It does the following :
 * checks that the function is called by the owner of the contract
 * checks that (ERC20(Address 0x55d398326f99059fF775485246999027B3197955)'s at balanceOf function  with variable recipient as (the address of this contract)) is greater than or equals to interestAmtInBank
 * if interestAmtInBank is strictly greater than 0 then (calls ERC20(Address 0x55d398326f99059fF775485246999027B3197955)'s at transfer function  with variable recipient as (the address that called this function), variable amount as interestAmtInBank)
 * updates interestAmtInBank as 0
*/
	function interestTaxWithdrawAmt() public onlyOwner {
		require((ERC20(address(0x55d398326f99059fF775485246999027B3197955)).balanceOf(address(this)) >= interestAmtInBank), "Insufficient amount of the token in this contract to transfer out. Please contact the contract owner to top up the token.");
		if ((interestAmtInBank > uint256(0))){
			ERC20(address(0x55d398326f99059fF775485246999027B3197955)).transfer(msg.sender, interestAmtInBank);
		}
		interestAmtInBank  = uint256(0);
	}

/**
 * Function withdrawToken
 * The function takes in 1 variable, (zero or a positive integer) _amt. It can be called by functions both inside and outside of this contract. It does the following :
 * checks that the function is called by the owner of the contract
 * checks that (ERC20(Address 0x55d398326f99059fF775485246999027B3197955)'s at balanceOf function  with variable recipient as (the address of this contract)) is greater than or equals to ((_amt) + (interestAmtInBank) + (totalAccumulatedInterest))
 * if _amt is strictly greater than 0 then (calls ERC20(Address 0x55d398326f99059fF775485246999027B3197955)'s at transfer function  with variable recipient as (the address that called this function), variable amount as _amt)
*/
	function withdrawToken(uint256 _amt) public onlyOwner {
		require((ERC20(address(0x55d398326f99059fF775485246999027B3197955)).balanceOf(address(this)) >= (_amt + interestAmtInBank + totalAccumulatedInterest())), "Insufficient amount of the token in this contract to transfer out. Please contact the contract owner to top up the token.");
		if ((_amt > uint256(0))){
			ERC20(address(0x55d398326f99059fF775485246999027B3197955)).transfer(msg.sender, _amt);
		}
	}
}