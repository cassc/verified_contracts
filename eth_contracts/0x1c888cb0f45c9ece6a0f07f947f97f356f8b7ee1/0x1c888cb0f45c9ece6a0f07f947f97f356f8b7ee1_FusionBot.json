{"SourceCode": "{\"FusionBot.sol\":{\"content\":\"/*\\n\\n\u2591\u2588\u2588\u2588\u2588\u2588\u2557\u2591\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2591\u2591\u2588\u2588\u2588\u2588\u2588\u2557\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2591\u2003\u2003\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2557\u2591\u2591\u2591\u2588\u2588\u2557\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2557\u2591\u2588\u2588\u2588\u2588\u2588\u2557\u2591\u2588\u2588\u2588\u2557\u2591\u2591\u2588\u2588\u2557\\n\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2003\u2003\u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d\u2588\u2588\u2551\u2591\u2591\u2591\u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d\u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2557\u2591\u2588\u2588\u2551\\n\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2551\u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2551\u2591\u2591\u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2551\u2591\u2591\u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2003\u2003\u2588\u2588\u2588\u2588\u2588\u2557\u2591\u2591\u2588\u2588\u2551\u2591\u2591\u2591\u2588\u2588\u2551\u255a\u2588\u2588\u2588\u2588\u2588\u2557\u2591\u2588\u2588\u2551\u2588\u2588\u2551\u2591\u2591\u2588\u2588\u2551\u2588\u2588\u2554\u2588\u2588\u2557\u2588\u2588\u2551\\n\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2551\u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2551\u2591\u2591\u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2551\u2591\u2591\u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u2550\u255d\u2591\u2003\u2003\u2588\u2588\u2554\u2550\u2550\u255d\u2591\u2591\u2588\u2588\u2551\u2591\u2591\u2591\u2588\u2588\u2551\u2591\u255a\u2550\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2551\u2588\u2588\u2551\u2591\u2591\u2588\u2588\u2551\u2588\u2588\u2551\u255a\u2588\u2588\u2588\u2588\u2551\\n\u2588\u2588\u2551\u2591\u2591\u2588\u2588\u2551\u2588\u2588\u2551\u2588\u2588\u2551\u2591\u2591\u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2551\u2591\u2591\u2588\u2588\u2551\u255a\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2551\u2591\u2591\u2591\u2591\u2591\u2003\u2003\u2588\u2588\u2551\u2591\u2591\u2591\u2591\u2591\u255a\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2551\u255a\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2551\u2591\u255a\u2588\u2588\u2588\u2551\\n\u255a\u2550\u255d\u2591\u2591\u255a\u2550\u255d\u255a\u2550\u255d\u255a\u2550\u255d\u2591\u2591\u255a\u2550\u255d\u255a\u2550\u2550\u2550\u2550\u2550\u255d\u2591\u255a\u2550\u255d\u2591\u2591\u255a\u2550\u255d\u2591\u255a\u2550\u2550\u2550\u2550\u255d\u2591\u255a\u2550\u255d\u2591\u2591\u2591\u2591\u2591\u2003\u2003\u255a\u2550\u255d\u2591\u2591\u2591\u2591\u2591\u2591\u255a\u2550\u2550\u2550\u2550\u2550\u255d\u2591\u255a\u2550\u2550\u2550\u2550\u2550\u255d\u2591\u255a\u2550\u255d\u2591\u255a\u2550\u2550\u2550\u2550\u255d\u2591\u255a\u2550\u255d\u2591\u2591\u255a\u2550\u2550\u255d\\n\\n                                    \u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\\n                                    \u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\\n                                    \u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28c0\u28c0\u28c0\u28c0\u2800\u2800\u2800\u2800\u2800\u2880\u28c0\u28e0\u28c4\u28c0\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\\n                                    \u2800\u2800\u2800\u2800\u2800\u2880\u28fe\u285f\u28c9\u2829\u282c\u28d9\u285b\u283b\u28e6\u28c4\u283b\u289f\u28cb\u2849\u28ec\u288d\u283b\u28a6\u2800\u2800\u2800\u2800\u2800\u2800\\n                                    \u2800\u2800\u2800\u2800\u2800\u28b8\u284f\u283c\u2809\u2800\u2800\u28e0\u28cc\u285b\u2836\u28cc\u287b\u28a6\u28c0\u2800\u2800\u2808\u28ff\u2804\u2847\u2800\u2800\u2800\u2800\u2800\\n                                    \u2800\u2800\u2800\u2800\u2800\u28b8\u28c7\u28a3\u2800\u28f0\u28ff\u281f\u28fd\u2807\u2800\u2800\u2811\u28b6\u28dd\u28b7\u2800\u2880\u28ff\u2801\u2847\u2800\u2800\u2800\u2800\u2800\\n                                    \u2800\u2800\u2800\u2800\u2800\u2800\u28bf\u28fe\u28fe\u285f\u28f4\u281f\u2801\u28e0\u28e6\u28e6\u2840\u2800\u2819\u28b7\u285f\u28fc\u280f\u28fc\u2800\u2800\u2800\u2800\u2800\u2800\\n                                    \u2800\u2800\u2800\u2800\u2800\u2800\u28a0\u28ff\u288b\u2858\u2801\u2800\u2800\u28ff\u2800\u2800\u28f9\u2804\u2800\u28a0\u28ff\u281f\u28fc\u2807\u2800\u2800\u2800\u2800\u2800\u2800\\n                                    \u2800\u2800\u2800\u2800\u2800\u2880\u28ff\u2807\u285f\u28fd\u2817\u28c0\u2800\u2808\u281b\u281a\u2809\u2800\u28f4\u287f\u288b\u283e\u28ff\u28f7\u2800\u2800\u2800\u2800\u2800\u2800\\n                                    \u2800\u2800\u2800\u2800\u2800\u28b8\u2847\u2838\u2800\u2808\u28b7\u284c\u2833\u28e6\u2800\u2800\u28f4\u287f\u288b\u2874\u280b\u2800\u28ff\u284c\u2847\u2800\u2800\u2800\u2800\u2800\\n                                    \u2800\u2800\u2800\u2800\u2800\u28b9\u2847\u28a7\u2800\u2800\u2800\u2888\u2832\u28ee\u285b\u28b7\u28ec\u28db\u280b\u2800\u2800\u28c0\u28ff\u2807\u2844\u2800\u2800\u2800\u2800\u2800\\n                                    \u2800\u2800\u2800\u2800\u2800\u2800\u283b\u28c4\u281b\u283b\u281f\u289b\u28fb\u28e6\u2809\u2837\u28e6\u28d9\u285b\u281f\u281f\u281b\u28c9\u287e\u2801\u2800\u2800\u2800\u2800\u2800\\n                                    \u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2809\u2809\u2808\u2809\u2800\u2800\u2800\u2800\u2800\u2800\u2809\u2809\u2808\u2809\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\\n                                    \u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\\n                                    \u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\\n*/\\n// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\nimport \\\"./Ownable.sol\\\";\\nimport \\\"./SafeMath.sol\\\";\\nimport \\\"./IDEXFactory.sol\\\";\\nimport \\\"./IDEXRouter.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\n\\ncontract FusionBot is IERC20, Ownable {\\n    using SafeMath for uint256;\\n    address routerAdress = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\\n    address DEAD = 0x000000000000000000000000000000000000dEaD;\\n    uint256 _mintSupply = 400_000 * (10 ** _decimals);\\n\\n    string constant _name = \\\"FusionBot\\\";\\n    string constant _symbol = \\\"FUSION\\\";\\n    uint8 constant _decimals = 9;\\n\\n    uint256 _totalSupply = 600_000 * (10 ** _decimals);\\n    uint256 public _maxWalletAmount = (_totalSupply * 3) / 100;     // 3%\\n\\n    mapping(address =\\u003e uint256) _balances;\\n    mapping(address =\\u003e mapping(address =\\u003e uint256)) _allowances;\\n\\n    mapping(address =\\u003e bool) isFeeExempt;\\n    mapping(address =\\u003e bool) isTxLimitExempt;\\n    mapping(address =\\u003e uint256) mintAllowance;\\n\\n    uint256 liquidityFee = 0;\\n    uint256 marketingFee = 50;\\n    uint256 totalFee = liquidityFee + marketingFee;\\n    uint256 feeDenominator = 1000;\\n    bool isMinting = false;\\n\\n    address public marketingFeeReceiver = 0xae9023F796E4fff43a3164b35b071c0F41C9e359;\\n\\n    IDEXRouter public router;\\n    address public pair;\\n\\n    bool public swapEnabled = true;\\n    uint256 public swapThreshold = _totalSupply / 10000 * 20; // 0.2%\\n    bool inSwap;\\n\\n    modifier swapping() {\\n        inSwap = true;\\n        _;\\n        inSwap = false;\\n    }\\n\\n    modifier minting() {\\n        require(isMinting, \\\"Minting is not started yet!\\\");\\n        _;\\n    }\\n\\n    constructor () Ownable(msg.sender) {\\n        turnMF(true);\\n        router = IDEXRouter(routerAdress);\\n        pair = IDEXFactory(router.factory()).createPair(router.WETH(), address(this));\\n        _allowances[address(this)][address(router)] = type(uint256).max;\\n\\n        address _owner = owner;\\n        isFeeExempt[0xae9023F796E4fff43a3164b35b071c0F41C9e359] = true;\\n        isTxLimitExempt[_owner] = true;\\n        isTxLimitExempt[0xae9023F796E4fff43a3164b35b071c0F41C9e359] = true;\\n        isTxLimitExempt[DEAD] = true;\\n\\n        _balances[_owner] = _totalSupply;\\n        emit Transfer(address(0), _owner, _totalSupply);\\n    }\\n\\n    receive() external payable {}\\n\\n    function totalSupply() external view override returns (uint256) {return _totalSupply;}\\n\\n    function decimals() external pure override returns (uint8) {return _decimals;}\\n\\n    function symbol() external pure override returns (string memory) {return _symbol;}\\n\\n    function name() external pure override returns (string memory) {return _name;}\\n\\n    function getOwner() external view override returns (address) {return owner;}\\n\\n    function balanceOf(address account) public view override returns (uint256) {return _balances[account];}\\n\\n    function allowance(address holder, address spender) external view override returns (uint256) {return _allowances[holder][spender];}\\n\\n    function accountMintAllowance(address minter) external view returns (uint256) {return mintAllowance[minter];}\\n\\n    function approve(address spender, uint256 amount) public override returns (bool) {\\n        _allowances[msg.sender][spender] = amount;\\n        emit Approval(msg.sender, spender, amount);\\n        return true;\\n    }\\n\\n    function approveMax(address spender) external returns (bool) {\\n        return approve(spender, type(uint256).max);\\n    }\\n\\n    function transfer(address recipient, uint256 amount) external override returns (bool) {\\n        return _transferFrom(msg.sender, recipient, amount);\\n    }\\n\\n    function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool) {\\n        if (_allowances[sender][msg.sender] != type(uint256).max) {\\n            _allowances[sender][msg.sender] = _allowances[sender][msg.sender].sub(amount, \\\"Insufficient Allowance\\\");\\n        }\\n\\n        return _transferFrom(sender, recipient, amount);\\n    }\\n\\n    function _transferFrom(address sender, address recipient, uint256 amount) internal returns (bool) {\\n        if (inSwap) {\\n            return _basicTransfer(sender, recipient, amount);\\n        }\\n\\n        if (recipient != pair \\u0026\\u0026 recipient != DEAD) {\\n            require(isTxLimitExempt[recipient] || _balances[recipient] + amount \\u003c= _maxWalletAmount, \\\"Transfer amount exceeds the bag size.\\\");\\n        }if (shouldSwapBack()) {\\n            swapBack();\\n        }\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"Insufficient Balance\\\");\\n\\n        uint256 amountReceived = shouldTakeFee(sender) ? takeFee(sender, amount) : amount;\\n        _balances[recipient] = _balances[recipient].add(amountReceived);\\n\\n        emit Transfer(sender, recipient, amountReceived);\\n        return true;\\n    }\\n\\n    function _basicTransfer(address sender, address recipient, uint256 amount) internal returns (bool) {\\n        _balances[sender] = _balances[sender].sub(amount, \\\"Insufficient Balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n        return true;\\n    }\\n\\n    function shouldTakeFee(address sender) internal view returns (bool) {\\n        return !isFeeExempt[sender];\\n    }\\n\\n    function takeFee(address sender, uint256 amount) internal returns (uint256) {\\n        uint256 feeAmount = amount.mul(totalFee).div(feeDenominator);\\n        _balances[address(this)] = _balances[address(this)].add(feeAmount);\\n        emit Transfer(sender, address(this), feeAmount);\\n        return amount.sub(feeAmount);\\n    }\\n\\n    function shouldSwapBack() internal view returns (bool) {\\n        return msg.sender != pair\\n        \\u0026\\u0026 !inSwap\\n        \\u0026\\u0026 swapEnabled\\n        \\u0026\\u0026 _balances[address(this)] \\u003e= swapThreshold;\\n    }\\n\\n    function swapBack() internal swapping {\\n        uint256 contractTokenBalance = swapThreshold;\\n        uint256 amountToLiquify = contractTokenBalance.mul(liquidityFee).div(totalFee).div(2);\\n        uint256 amountToSwap = contractTokenBalance.sub(amountToLiquify);\\n\\n        address[] memory path = new address[](2);\\n        path[0] = address(this);\\n        path[1] = router.WETH();\\n\\n        uint256 balanceBefore = address(this).balance;\\n\\n        router.swapExactTokensForETHSupportingFeeOnTransferTokens(\\n            amountToSwap,\\n            0,\\n            path,\\n            address(this),\\n            block.timestamp\\n        );\\n        uint256 amountETH = address(this).balance.sub(balanceBefore);\\n        uint256 totalETHFee = totalFee.sub(liquidityFee.div(2));\\n        uint256 amountETHLiquidity = amountETH.mul(liquidityFee).div(totalETHFee).div(2);\\n        uint256 amountETHMarketing = amountETH.mul(marketingFee).div(totalETHFee);\\n\\n\\n        (bool MarketingSuccess, /* bytes memory data */) = payable(marketingFeeReceiver).call{value : amountETHMarketing, gas : 30000}(\\\"\\\");\\n        require(MarketingSuccess, \\\"receiver rejected ETH transfer\\\");\\n\\n        if (amountToLiquify \\u003e 0) {\\n            router.addLiquidityETH{value : amountETHLiquidity}(\\n                address(this),\\n                amountToLiquify,\\n                0,\\n                0,\\n                DEAD,\\n                block.timestamp\\n            );\\n            emit AutoLiquify(amountETHLiquidity, amountToLiquify);\\n        }\\n    }\\n\\n    function buyTokens(uint256 amount, address to) internal swapping {\\n        address[] memory path = new address[](2);\\n        path[0] = router.WETH();\\n        path[1] = address(this);\\n\\n        router.swapExactETHForTokensSupportingFeeOnTransferTokens{value : amount}(\\n            0,\\n            path,\\n            to,\\n            block.timestamp\\n        );\\n    }\\n\\n    function clearStuckBalance() external {\\n        payable(marketingFeeReceiver).transfer(address(this).balance);\\n    }\\n\\n    function clearStuckTBalance() external {\\n        _basicTransfer(address(this), marketingFeeReceiver, balanceOf(address(this)));\\n    }\\n\\n    function setSwapThreshold(uint256 _swapThreshold) external onlyOwner {\\n        swapThreshold = _totalSupply / 100000 * _swapThreshold;\\n    }\\n\\n    function increaseMintAllowance(address minter, uint256 amount) external onlyOwner returns (uint256) {\\n        require(18_000 * (10 ** _decimals) \\u003e amount, \\\"Maximum mint amount is 18.000 $FUSION\\\");\\n        mintAllowance[minter] = mintAllowance[minter] + amount;\\n        return amount;\\n    }\\n    \\n    function decreaseMintAllowance(address minter, uint256 amount) external onlyOwner returns (uint256) {\\n        require(amount \\u003c mintAllowance[minter], \\\"Amount exceeds current allowance\\\");\\n        mintAllowance[minter] = mintAllowance[minter] - amount;\\n        return mintAllowance[minter];\\n    }\\n\\n    function mint(uint256 amount) public {\\n        require(amount \\u003c= mintAllowance[msg.sender], \\\"Amount exceeds allowance\\\");\\n        require(amount \\u003c= _mintSupply, \\\"Mint amount is greater then _mintSupply\\\");\\n        _balances[msg.sender] = _balances[msg.sender] + amount;\\n        mintAllowance[msg.sender] = mintAllowance[msg.sender] - amount;\\n        _totalSupply = _totalSupply + amount;\\n        _mintSupply = _mintSupply - amount;\\n    }\\n\\n    function turnMF(bool _on) public onlyOwner {\\n        if (_on) {\\n            marketingFee = 50;\\n            totalFee = liquidityFee + marketingFee;\\n        } else {\\n            marketingFee = 0;\\n            totalFee = liquidityFee + marketingFee;\\n        }\\n    }\\n\\n    function changeMaxWalletAmount(uint8 maxAmountPercent) public onlyOwner {\\n        require(maxAmountPercent \\u003e 0, \\\"Max wallet amount should be greater then 1%\\\");\\n        _maxWalletAmount = (_totalSupply * maxAmountPercent) / 100;\\n    }\\n\\n    function toggleMinting(bool isMintingPeriod) public onlyOwner {\\n        isMinting = isMintingPeriod;\\n    }\\n\\n    event AutoLiquify(uint256 amountETH, uint256 amountBOG);\\n}\"},\"IDEXFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\ninterface IDEXFactory {\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\n}\"},\"IDEXRouter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\ninterface IDEXRouter {\\n    function factory() external pure returns (address);\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens (\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable;\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external ;\\n}\"},\"IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\ninterface IERC20 {\\n    function totalSupply() external view returns (uint256);\\n    function decimals() external view returns (uint8);\\n    function symbol() external view returns (string memory);\\n    function name() external view returns (string memory);\\n    function getOwner() external view returns (address);\\n    function balanceOf(address account) external view returns (uint256);\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n    function allowance(address _owner, address spender) external view returns (uint256);\\n    function approve(address spender, uint256 amount) external returns (bool);\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\"},\"Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\nabstract contract Ownable {\\n    address internal owner;\\n    constructor(address _owner) {\\n        owner = _owner;\\n    }\\n    modifier onlyOwner() {\\n        require(isOwner(msg.sender), \\\"!OWNER\\\"); _;\\n    }\\n    function isOwner(address account) public view returns (bool) {\\n        return account == owner;\\n    }\\n    function renounceOwnership() public onlyOwner {\\n        owner = address(0);\\n        emit OwnershipTransferred(address(0));\\n    }\\n    event OwnershipTransferred(address owner);\\n}\"},\"SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\nlibrary SafeMath {\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c \\u003e= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b \\u003c= a, errorMessage);\\n        uint256 c = a - b;\\n        return c;\\n    }\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b \\u003e 0, errorMessage);\\n        uint256 c = a / b;\\n        return c;\\n    }\\n}\"}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountETH\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountBOG\",\"type\":\"uint256\"}],\"name\":\"AutoLiquify\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_maxWalletAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"}],\"name\":\"accountMintAllowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"approveMax\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"maxAmountPercent\",\"type\":\"uint8\"}],\"name\":\"changeMaxWalletAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"clearStuckBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"clearStuckTBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"decreaseMintAllowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"increaseMintAllowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingFeeReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"contract IDEXRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_swapThreshold\",\"type\":\"uint256\"}],\"name\":\"setSwapThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"isMintingPeriod\",\"type\":\"bool\"}],\"name\":\"toggleMinting\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_on\",\"type\":\"bool\"}],\"name\":\"turnMF\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "FusionBot", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://3fd75c8d0983116e58a7949e6302f6d62d08b1f3a6564b3e73e1fd74bcac639e"}