{"SourceCode": "// File: @openzeppelin/contracts/utils/math/SignedMath.sol\r\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/SignedMath.sol)\r\n\r\npragma solidity ^0.8.20;\r\n\r\n/**\r\n * @dev Standard signed math utilities missing in the Solidity language.\r\n */\r\nlibrary SignedMath {\r\n    /**\r\n     * @dev Returns the largest of two signed numbers.\r\n     */\r\n    function max(int256 a, int256 b) internal pure returns (int256) {\r\n        return a > b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the smallest of two signed numbers.\r\n     */\r\n    function min(int256 a, int256 b) internal pure returns (int256) {\r\n        return a < b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the average of two signed numbers without overflow.\r\n     * The result is rounded towards zero.\r\n     */\r\n    function average(int256 a, int256 b) internal pure returns (int256) {\r\n        // Formula from the book \"Hacker's Delight\"\r\n        int256 x = (a & b) + ((a ^ b) >> 1);\r\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the absolute unsigned value of a signed value.\r\n     */\r\n    function abs(int256 n) internal pure returns (uint256) {\r\n        unchecked {\r\n            // must be unchecked in order to support `n = type(int256).min`\r\n            return uint256(n >= 0 ? n : -n);\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/math/Math.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\r\n\r\npragma solidity ^0.8.20;\r\n\r\n/**\r\n * @dev Standard math utilities missing in the Solidity language.\r\n */\r\nlibrary Math {\r\n    /**\r\n     * @dev Muldiv operation overflow.\r\n     */\r\n    error MathOverflowedMulDiv();\r\n\r\n    enum Rounding {\r\n        Floor, // Toward negative infinity\r\n        Ceil, // Toward positive infinity\r\n        Trunc, // Toward zero\r\n        Expand // Away from zero\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n     */\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            uint256 c = a + b;\r\n            if (c < a) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\r\n     */\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b > a) return (false, 0);\r\n            return (true, a - b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n     */\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n            // benefit is lost if 'b' is also tested.\r\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n            if (a == 0) return (true, 0);\r\n            uint256 c = a * b;\r\n            if (c / a != b) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n     */\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a / b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n     */\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a % b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the largest of two numbers.\r\n     */\r\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a > b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the smallest of two numbers.\r\n     */\r\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a < b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the average of two numbers. The result is rounded towards\r\n     * zero.\r\n     */\r\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // (a + b) / 2 can overflow.\r\n        return (a & b) + (a ^ b) / 2;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the ceiling of the division of two numbers.\r\n     *\r\n     * This differs from standard division with `/` in that it rounds towards infinity instead\r\n     * of rounding towards zero.\r\n     */\r\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (b == 0) {\r\n            // Guarantee the same behavior as in a regular Solidity division.\r\n            return a / b;\r\n        }\r\n\r\n        // (a + b - 1) / b can overflow on addition, so we distribute.\r\n        return a == 0 ? 0 : (a - 1) / b + 1;\r\n    }\r\n\r\n    /**\r\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\r\n     * denominator == 0.\r\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\r\n     * Uniswap Labs also under MIT license.\r\n     */\r\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\r\n        unchecked {\r\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\r\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\r\n            // variables such that product = prod1 * 2^256 + prod0.\r\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\r\n            uint256 prod1; // Most significant 256 bits of the product\r\n            assembly {\r\n                let mm := mulmod(x, y, not(0))\r\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\r\n            }\r\n\r\n            // Handle non-overflow cases, 256 by 256 division.\r\n            if (prod1 == 0) {\r\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\r\n                // The surrounding unchecked block does not change this fact.\r\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\r\n                return prod0 / denominator;\r\n            }\r\n\r\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\r\n            if (denominator <= prod1) {\r\n                revert MathOverflowedMulDiv();\r\n            }\r\n\r\n            ///////////////////////////////////////////////\r\n            // 512 by 256 division.\r\n            ///////////////////////////////////////////////\r\n\r\n            // Make division exact by subtracting the remainder from [prod1 prod0].\r\n            uint256 remainder;\r\n            assembly {\r\n                // Compute remainder using mulmod.\r\n                remainder := mulmod(x, y, denominator)\r\n\r\n                // Subtract 256 bit number from 512 bit number.\r\n                prod1 := sub(prod1, gt(remainder, prod0))\r\n                prod0 := sub(prod0, remainder)\r\n            }\r\n\r\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\r\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\r\n\r\n            uint256 twos = denominator & (0 - denominator);\r\n            assembly {\r\n                // Divide denominator by twos.\r\n                denominator := div(denominator, twos)\r\n\r\n                // Divide [prod1 prod0] by twos.\r\n                prod0 := div(prod0, twos)\r\n\r\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\r\n                twos := add(div(sub(0, twos), twos), 1)\r\n            }\r\n\r\n            // Shift in bits from prod1 into prod0.\r\n            prod0 |= prod1 * twos;\r\n\r\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\r\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\r\n            // four bits. That is, denominator * inv = 1 mod 2^4.\r\n            uint256 inverse = (3 * denominator) ^ 2;\r\n\r\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\r\n            // works in modular arithmetic, doubling the correct bits in each step.\r\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\r\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\r\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\r\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\r\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\r\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\r\n\r\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\r\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\r\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\r\n            // is no longer required.\r\n            result = prod0 * inverse;\r\n            return result;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\r\n     */\r\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\r\n        uint256 result = mulDiv(x, y, denominator);\r\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\r\n            result += 1;\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\r\n     * towards zero.\r\n     *\r\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\r\n     */\r\n    function sqrt(uint256 a) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\r\n        //\r\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\r\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\r\n        //\r\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\r\n        // \u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\r\n        // \u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\r\n        //\r\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\r\n        uint256 result = 1 << (log2(a) >> 1);\r\n\r\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\r\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\r\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\r\n        // into the expected uint128 result.\r\n        unchecked {\r\n            result = (result + a / result) >> 1;\r\n            result = (result + a / result) >> 1;\r\n            result = (result + a / result) >> 1;\r\n            result = (result + a / result) >> 1;\r\n            result = (result + a / result) >> 1;\r\n            result = (result + a / result) >> 1;\r\n            result = (result + a / result) >> 1;\r\n            return min(result, a / result);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Calculates sqrt(a), following the selected rounding direction.\r\n     */\r\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\r\n        unchecked {\r\n            uint256 result = sqrt(a);\r\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\r\n     * Returns 0 if given 0.\r\n     */\r\n    function log2(uint256 value) internal pure returns (uint256) {\r\n        uint256 result = 0;\r\n        unchecked {\r\n            if (value >> 128 > 0) {\r\n                value >>= 128;\r\n                result += 128;\r\n            }\r\n            if (value >> 64 > 0) {\r\n                value >>= 64;\r\n                result += 64;\r\n            }\r\n            if (value >> 32 > 0) {\r\n                value >>= 32;\r\n                result += 32;\r\n            }\r\n            if (value >> 16 > 0) {\r\n                value >>= 16;\r\n                result += 16;\r\n            }\r\n            if (value >> 8 > 0) {\r\n                value >>= 8;\r\n                result += 8;\r\n            }\r\n            if (value >> 4 > 0) {\r\n                value >>= 4;\r\n                result += 4;\r\n            }\r\n            if (value >> 2 > 0) {\r\n                value >>= 2;\r\n                result += 2;\r\n            }\r\n            if (value >> 1 > 0) {\r\n                result += 1;\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\r\n     * Returns 0 if given 0.\r\n     */\r\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\r\n        unchecked {\r\n            uint256 result = log2(value);\r\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\r\n     * Returns 0 if given 0.\r\n     */\r\n    function log10(uint256 value) internal pure returns (uint256) {\r\n        uint256 result = 0;\r\n        unchecked {\r\n            if (value >= 10 ** 64) {\r\n                value /= 10 ** 64;\r\n                result += 64;\r\n            }\r\n            if (value >= 10 ** 32) {\r\n                value /= 10 ** 32;\r\n                result += 32;\r\n            }\r\n            if (value >= 10 ** 16) {\r\n                value /= 10 ** 16;\r\n                result += 16;\r\n            }\r\n            if (value >= 10 ** 8) {\r\n                value /= 10 ** 8;\r\n                result += 8;\r\n            }\r\n            if (value >= 10 ** 4) {\r\n                value /= 10 ** 4;\r\n                result += 4;\r\n            }\r\n            if (value >= 10 ** 2) {\r\n                value /= 10 ** 2;\r\n                result += 2;\r\n            }\r\n            if (value >= 10 ** 1) {\r\n                result += 1;\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\r\n     * Returns 0 if given 0.\r\n     */\r\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\r\n        unchecked {\r\n            uint256 result = log10(value);\r\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\r\n     * Returns 0 if given 0.\r\n     *\r\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\r\n     */\r\n    function log256(uint256 value) internal pure returns (uint256) {\r\n        uint256 result = 0;\r\n        unchecked {\r\n            if (value >> 128 > 0) {\r\n                value >>= 128;\r\n                result += 16;\r\n            }\r\n            if (value >> 64 > 0) {\r\n                value >>= 64;\r\n                result += 8;\r\n            }\r\n            if (value >> 32 > 0) {\r\n                value >>= 32;\r\n                result += 4;\r\n            }\r\n            if (value >> 16 > 0) {\r\n                value >>= 16;\r\n                result += 2;\r\n            }\r\n            if (value >> 8 > 0) {\r\n                result += 1;\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\r\n     * Returns 0 if given 0.\r\n     */\r\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\r\n        unchecked {\r\n            uint256 result = log256(value);\r\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\r\n     */\r\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\r\n        return uint8(rounding) % 2 == 1;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Strings.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Strings.sol)\r\n\r\npragma solidity ^0.8.20;\r\n\r\n\r\n\r\n/**\r\n * @dev String operations.\r\n */\r\nlibrary Strings {\r\n    bytes16 private constant HEX_DIGITS = \"0123456789abcdef\";\r\n    uint8 private constant ADDRESS_LENGTH = 20;\r\n\r\n    /**\r\n     * @dev The `value` string doesn't fit in the specified `length`.\r\n     */\r\n    error StringsInsufficientHexLength(uint256 value, uint256 length);\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\r\n     */\r\n    function toString(uint256 value) internal pure returns (string memory) {\r\n        unchecked {\r\n            uint256 length = Math.log10(value) + 1;\r\n            string memory buffer = new string(length);\r\n            uint256 ptr;\r\n            /// @solidity memory-safe-assembly\r\n            assembly {\r\n                ptr := add(buffer, add(32, length))\r\n            }\r\n            while (true) {\r\n                ptr--;\r\n                /// @solidity memory-safe-assembly\r\n                assembly {\r\n                    mstore8(ptr, byte(mod(value, 10), HEX_DIGITS))\r\n                }\r\n                value /= 10;\r\n                if (value == 0) break;\r\n            }\r\n            return buffer;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\r\n     */\r\n    function toStringSigned(int256 value) internal pure returns (string memory) {\r\n        return string.concat(value < 0 ? \"-\" : \"\", toString(SignedMath.abs(value)));\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\r\n     */\r\n    function toHexString(uint256 value) internal pure returns (string memory) {\r\n        unchecked {\r\n            return toHexString(value, Math.log256(value) + 1);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\r\n     */\r\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\r\n        uint256 localValue = value;\r\n        bytes memory buffer = new bytes(2 * length + 2);\r\n        buffer[0] = \"0\";\r\n        buffer[1] = \"x\";\r\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\r\n            buffer[i] = HEX_DIGITS[localValue & 0xf];\r\n            localValue >>= 4;\r\n        }\r\n        if (localValue != 0) {\r\n            revert StringsInsufficientHexLength(value, length);\r\n        }\r\n        return string(buffer);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal\r\n     * representation.\r\n     */\r\n    function toHexString(address addr) internal pure returns (string memory) {\r\n        return toHexString(uint256(uint160(addr)), ADDRESS_LENGTH);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the two strings are equal.\r\n     */\r\n    function equal(string memory a, string memory b) internal pure returns (bool) {\r\n        return bytes(a).length == bytes(b).length && keccak256(bytes(a)) == keccak256(bytes(b));\r\n    }\r\n}\r\n\r\n// File: @rmrk-team/evm-contracts/contracts/implementations/utils/RMRKTokenURIEnumerated.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.21;\r\n\r\n\r\n/**\r\n * @title RMRKTokenURIEnumerated\r\n * @author RMRK team\r\n * @notice Implementation of enumerable token URI.\r\n */\r\ncontract RMRKTokenURIEnumerated {\r\n    using Strings for uint256;\r\n\r\n    string private _baseTokenURI;\r\n\r\n    constructor(string memory baseTokenURI) {\r\n        _baseTokenURI = baseTokenURI;\r\n    }\r\n\r\n    /**\r\n     * @notice Used to retrieve the metadata URI of a token.\r\n     * @param tokenId ID of the token to retrieve the metadata URI for\r\n     * @return Metadata URI of the specified token\r\n     */\r\n    function tokenURI(\r\n        uint256 tokenId\r\n    ) public view virtual returns (string memory) {\r\n        return string(abi.encodePacked(_baseTokenURI, tokenId.toString()));\r\n    }\r\n}\r\n\r\n// File: .deps/flat.sol\r\n\r\n\r\n/**\r\n *Submitted for verification at Etherscan.io on 2023-10-06\r\n*/\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\r\n\r\npragma solidity ^0.8.20;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Returns the value of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the value of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\r\n     * caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\r\n     * allowance mechanism. `value` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n}\r\n\r\n// File: @rmrk-team/evm-contracts/contracts/implementations/utils/RMRKTokenURIPerToken.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.21;\r\n\r\n/**\r\n * @title RMRKTokenURIPerToken\r\n * @author RMRK team\r\n * @notice Implementation of token URI per token.\r\n */\r\ncontract RMRKTokenURIPerToken {\r\n    mapping(uint256 => string) private _tokenURIs;\r\n\r\n    /**\r\n     * @notice Used to retrieve the metadata URI of a token.\r\n     * @param tokenId ID of the token to retrieve the metadata URI for\r\n     * @return Metadata URI of the specified token\r\n     */\r\n    function tokenURI(\r\n        uint256 tokenId\r\n    ) public view virtual returns (string memory) {\r\n        return _tokenURIs[tokenId];\r\n    }\r\n\r\n    /**\r\n     * @notice Used to set the token URI configuration.\r\n     * @param tokenId ID of the token to set the metadata URI for\r\n     * @param tokenURI_ Metadata URI to apply to all tokens, either as base or as full URI for every token\r\n     */\r\n    function _setTokenURI(\r\n        uint256 tokenId,\r\n        string memory tokenURI_\r\n    ) internal virtual {\r\n        _tokenURIs[tokenId] = tokenURI_;\r\n    }\r\n}\r\n\r\n// File: @rmrk-team/evm-contracts/contracts/RMRK/library/RMRKErrors.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.21;\r\n\r\n/// @title RMRKErrors\r\n/// @author RMRK team\r\n/// @notice A collection of errors used in the RMRK suite\r\n/// @dev Errors are kept in a centralised file in order to provide a central point of reference and to avoid error\r\n///  naming collisions due to inheritance\r\n\r\n/// Attempting to grant the token to 0x0 address\r\nerror ERC721AddressZeroIsNotaValidOwner();\r\n/// Attempting to grant approval to the current owner of the token\r\nerror ERC721ApprovalToCurrentOwner();\r\n/// Attempting to grant approval when not being owner or approved for all should not be permitted\r\nerror ERC721ApproveCallerIsNotOwnerNorApprovedForAll();\r\n/// Attempting to get approvals for a token owned by 0x0 (considered non-existent)\r\nerror ERC721ApprovedQueryForNonexistentToken();\r\n/// Attempting to grant approval to self\r\nerror ERC721ApproveToCaller();\r\n/// Attempting to use an invalid token ID\r\nerror ERC721InvalidTokenId();\r\n/// Attempting to mint to 0x0 address\r\nerror ERC721MintToTheZeroAddress();\r\n/// Attempting to manage a token without being its owner or approved by the owner\r\nerror ERC721NotApprovedOrOwner();\r\n/// Attempting to mint an already minted token\r\nerror ERC721TokenAlreadyMinted();\r\n/// Attempting to transfer the token from an address that is not the owner\r\nerror ERC721TransferFromIncorrectOwner();\r\n/// Attempting to safe transfer to an address that is unable to receive the token\r\nerror ERC721TransferToNonReceiverImplementer();\r\n/// Attempting to transfer the token to a 0x0 address\r\nerror ERC721TransferToTheZeroAddress();\r\n/// Attempting to grant approval of assets to their current owner\r\nerror RMRKApprovalForAssetsToCurrentOwner();\r\n/// Attempting to grant approval of assets without being the caller or approved for all\r\nerror RMRKApproveForAssetsCallerIsNotOwnerNorApprovedForAll();\r\n/// Attempting to incorrectly configue a Catalog item\r\nerror RMRKBadConfig();\r\n/// Attempting to set the priorities with an array of length that doesn't match the length of active assets array\r\nerror RMRKBadPriorityListLength();\r\n/// Attempting to add an asset entry with `Part`s, without setting the `Catalog` address\r\nerror RMRKCatalogRequiredForParts();\r\n/// Attempting to transfer a soulbound (non-transferrable) token\r\nerror RMRKCannotTransferSoulbound();\r\n/// Attempting to accept a child that has already been accepted\r\nerror RMRKChildAlreadyExists();\r\n/// Attempting to interact with a child, using index that is higher than the number of children\r\nerror RMRKChildIndexOutOfRange();\r\n/// Attempting to find the index of a child token on a parent which does not own it.\r\nerror RMRKChildNotFoundInParent();\r\n/// Attempting to pass collaborator address array and collaborator permission array of different lengths\r\nerror RMRKCollaboratorArraysNotEqualLength();\r\n/// Attempting to register a collection that is already registered\r\nerror RMRKCollectionAlreadyRegistered();\r\n/// Attempting to manage or interact with colleciton that is not registered\r\nerror RMRKCollectionNotRegistered();\r\n/// Attempting to equip a `Part` with a child not approved by the Catalog\r\nerror RMRKEquippableEquipNotAllowedByCatalog();\r\n/// Attempting to pass an epired ECDSA deadline\r\nerror RMRKExpiredDeadline();\r\n/// Attempting to use ID 0, which is not supported\r\n/// @dev The ID 0 in RMRK suite is reserved for empty values. Guarding against its use ensures the expected operation\r\nerror RMRKIdZeroForbidden();\r\n/// Attempting to interact with an asset, using index greater than number of assets\r\nerror RMRKIndexOutOfRange();\r\n/// Attempting to reclaim a child that can't be reclaimed\r\nerror RMRKInvalidChildReclaim();\r\n/// Attempting to use and invalid ECDSA signature\r\nerror RMRKInvalidSignature();\r\n/// Attempting to interact with an end-user account when the contract account is expected\r\nerror RMRKIsNotContract();\r\n/// Attempting to interact with a contract that had its operation locked\r\nerror RMRKLocked();\r\n/// Attempting to add a pending child after the number of pending children has reached the limit (default limit is 128)\r\nerror RMRKMaxPendingChildrenReached();\r\n/// Attempting to add a pending asset after the number of pending assets has reached the limit (default limit is\r\n///  128)\r\nerror RMRKMaxPendingAssetsReached();\r\n/// Attempting to burn a total number of recursive children higher than maximum set\r\n/// @param childContract Address of the collection smart contract in which the maximum number of recursive burns was reached\r\n/// @param childId ID of the child token at which the maximum number of recursive burns was reached\r\nerror RMRKMaxRecursiveBurnsReached(address childContract, uint256 childId);\r\n/// Attempting to mint a number of tokens that would cause the total supply to be greater than maximum supply\r\nerror RMRKMintOverMax();\r\n/// Attempting to mint a nested token to a smart contract that doesn't support nesting\r\nerror RMRKMintToNonRMRKNestableImplementer();\r\n/// Attempting to mint zero tokens\r\nerror RMRKMintZero();\r\n/// Attempting to pass complementary arrays of different lengths\r\nerror RMRKMismachedArrayLength();\r\n/// Attempting to transfer a child before it is unequipped\r\nerror RMRKMustUnequipFirst();\r\n/// Attempting to nest a child over the nestable limit (current limit is 100 levels of nesting)\r\nerror RMRKNestableTooDeep();\r\n/// Attempting to nest the token to own descendant, which would create a loop and leave the looped tokens in limbo\r\nerror RMRKNestableTransferToDescendant();\r\n/// Attempting to nest the token to a smart contract that doesn't support nesting\r\nerror RMRKNestableTransferToNonRMRKNestableImplementer();\r\n/// Attempting to nest the token into itself\r\nerror RMRKNestableTransferToSelf();\r\n/// Attempting to interact with an asset that can not be found\r\nerror RMRKNoAssetMatchingId();\r\n/// Attempting to manage an asset without owning it or having been granted permission by the owner to do so\r\nerror RMRKNotApprovedForAssetsOrOwner();\r\n/// Attempting to interact with a token without being its owner or having been granted permission by the\r\n///  owner to do so\r\n/// @dev When a token is nested, only the direct owner (NFT parent) can mange it. In that case, approved addresses are\r\n///  not allowed to manage it, in order to ensure the expected behaviour\r\nerror RMRKNotApprovedOrDirectOwner();\r\n/// Attempting to manage a collection without being the collection's collaborator\r\nerror RMRKNotCollectionCollaborator();\r\n/// Attemting to manage a collection without being the collection's issuer\r\nerror RMRKNotCollectionIssuer();\r\n/// Attempting to manage a collection without being the collection's issuer or collaborator\r\nerror RMRKNotCollectionIssuerOrCollaborator();\r\n/// Attempting to compose an asset wihtout having an associated Catalog\r\nerror RMRKNotComposableAsset();\r\n/// Attempting to unequip an item that isn't equipped\r\nerror RMRKNotEquipped();\r\n/// Attempting to interact with a management function without being the smart contract's owner\r\nerror RMRKNotOwner();\r\n/// Attempting to interact with a function without being the owner or contributor of the collection\r\nerror RMRKNotOwnerOrContributor();\r\n/// Attempting to manage a collection without being the specific address\r\nerror RMRKNotSpecificAddress();\r\n/// Attempting to manage a token without being its owner\r\nerror RMRKNotTokenOwner();\r\n/// Attempting to transfer the ownership to the 0x0 address\r\nerror RMRKNewOwnerIsZeroAddress();\r\n/// Attempting to assign a 0x0 address as a contributor\r\nerror RMRKNewContributorIsZeroAddress();\r\n/// Attemtping to use `Ownable` interface without implementing it\r\nerror RMRKOwnableNotImplemented();\r\n/// Attempting an operation requiring the token being nested, while it is not\r\nerror RMRKParentIsNotNFT();\r\n/// Attempting to add a `Part` with an ID that is already used\r\nerror RMRKPartAlreadyExists();\r\n/// Attempting to use a `Part` that doesn't exist\r\nerror RMRKPartDoesNotExist();\r\n/// Attempting to use a `Part` that is `Fixed` when `Slot` kind of `Part` should be used\r\nerror RMRKPartIsNotSlot();\r\n/// Attempting to interact with a pending child using an index greater than the size of pending array\r\nerror RMRKPendingChildIndexOutOfRange();\r\n/// Attempting to add an asset using an ID that has already been used\r\nerror RMRKAssetAlreadyExists();\r\n/// Attempting to equip an item into a slot that already has an item equipped\r\nerror RMRKSlotAlreadyUsed();\r\n/// Attempting to equip an item into a `Slot` that the target asset does not implement\r\nerror RMRKTargetAssetCannotReceiveSlot();\r\n/// Attempting to equip a child into a `Slot` and parent that the child's collection doesn't support\r\nerror RMRKTokenCannotBeEquippedWithAssetIntoSlot();\r\n/// Attempting to compose a NFT of a token without active assets\r\nerror RMRKTokenDoesNotHaveAsset();\r\n/// Attempting to determine the asset with the top priority on a token without assets\r\nerror RMRKTokenHasNoAssets();\r\n/// Attempting to accept or transfer a child which does not match the one at the specified index\r\nerror RMRKUnexpectedChildId();\r\n/// Attempting to reject all pending assets but more assets than expected are pending\r\nerror RMRKUnexpectedNumberOfAssets();\r\n/// Attempting to reject all pending children but children assets than expected are pending\r\nerror RMRKUnexpectedNumberOfChildren();\r\n/// Attempting to accept or reject an asset which does not match the one at the specified index\r\nerror RMRKUnexpectedAssetId();\r\n/// Attempting an operation expecting a parent to the token which is not the actual one\r\nerror RMRKUnexpectedParent();\r\n/// Attempting not to pass an empty array of equippable addresses when adding or setting the equippable addresses\r\nerror RMRKZeroLengthIdsPassed();\r\n/// Attempting to set the royalties to a value higher than 100% (10000 in basis points)\r\nerror RMRKRoyaltiesTooHigh();\r\n/// Attempting to do a bulk operation on a token that is not owned by the caller\r\nerror RMRKCanOnlyDoBulkOperationsOnOwnedTokens();\r\n/// Attempting to do a bulk operation with multiple tokens at a time\r\nerror RMRKCanOnlyDoBulkOperationsWithOneTokenAtATime();\r\n/// Attempting to pay with native token with a value different than expected\r\nerror RMRKWrongValueSent();\r\n\r\n// File: @openzeppelin/contracts/utils/Context.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @rmrk-team/evm-contracts/contracts/RMRK/access/Ownable.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.21;\r\n\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @author RMRK team\r\n * @notice A minimal ownable smart contractf or owner and contributors.\r\n * @dev This smart contract is based on \"openzeppelin's access/Ownable.sol\".\r\n */\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n    mapping(address => uint256) private _contributors;\r\n\r\n    /**\r\n     * @notice Used to anounce the transfer of ownership.\r\n     * @param previousOwner Address of the account that transferred their ownership role\r\n     * @param newOwner Address of the account receiving the ownership role\r\n     */\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    /**\r\n     * @notice Event that signifies that an address was granted contributor role or that the permission has been\r\n     *  revoked.\r\n     * @dev This can only be triggered by a current owner, so there is no need to include that information in the event.\r\n     * @param contributor Address of the account that had contributor role status updated\r\n     * @param isContributor A boolean value signifying whether the role has been granted (`true`) or revoked (`false`)\r\n     */\r\n    event ContributorUpdate(address indexed contributor, bool isContributor);\r\n\r\n    /**\r\n     * @dev Reverts if called by any account other than the owner or an approved contributor.\r\n     */\r\n    modifier onlyOwnerOrContributor() {\r\n        _onlyOwnerOrContributor();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Reverts if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        _onlyOwner();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Initializes the contract by setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @notice Returns the address of the current owner.\r\n     * @return Address of the current owner\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @notice Leaves the contract without owner. Functions using the `onlyOwner` modifier will be disabled.\r\n     * @dev Can only be called by the current owner.\r\n     * @dev Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is\r\n     *  only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @notice Transfers ownership of the contract to a new owner.\r\n     * @dev Can only be called by the current owner.\r\n     * @param newOwner Address of the new owner's account\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        if (newOwner == address(0)) revert RMRKNewOwnerIsZeroAddress();\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @notice Transfers ownership of the contract to a new owner.\r\n     * @dev Internal function without access restriction.\r\n     * @dev Emits ***OwnershipTransferred*** event.\r\n     * @param newOwner Address of the new owner's account\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n\r\n    /**\r\n     * @notice Adds or removes a contributor to the smart contract.\r\n     * @dev Can only be called by the owner.\r\n     * @dev Emits ***ContributorUpdate*** event.\r\n     * @param contributor Address of the contributor's account\r\n     * @param grantRole A boolean value signifying whether the contributor role is being granted (`true`) or revoked\r\n     *  (`false`)\r\n     */\r\n    function manageContributor(\r\n        address contributor,\r\n        bool grantRole\r\n    ) external onlyOwner {\r\n        if (contributor == address(0)) revert RMRKNewContributorIsZeroAddress();\r\n        grantRole\r\n            ? _contributors[contributor] = 1\r\n            : _contributors[contributor] = 0;\r\n        emit ContributorUpdate(contributor, grantRole);\r\n    }\r\n\r\n    /**\r\n     * @notice Used to check if the address is one of the contributors.\r\n     * @param contributor Address of the contributor whose status we are checking\r\n     * @return Boolean value indicating whether the address is a contributor or not\r\n     */\r\n    function isContributor(address contributor) public view returns (bool) {\r\n        return _contributors[contributor] == 1;\r\n    }\r\n\r\n    /**\r\n     * @notice Used to verify that the caller is either the owner or a contributor.\r\n     * @dev If the caller is not the owner or a contributor, the execution will be reverted.\r\n     */\r\n    function _onlyOwnerOrContributor() private view {\r\n        if (owner() != _msgSender() && !isContributor(_msgSender()))\r\n            revert RMRKNotOwnerOrContributor();\r\n    }\r\n\r\n    /**\r\n     * @notice Used to verify that the caller is the owner.\r\n     * @dev If the caller is not the owner, the execution will be reverted.\r\n     */\r\n    function _onlyOwner() private view {\r\n        if (owner() != _msgSender()) revert RMRKNotOwner();\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Address.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\r\n\r\npragma solidity ^0.8.1;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     *\r\n     * Furthermore, `isContract` will also return true if the target contract within\r\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\r\n     * which only has an effect at the end of a transaction.\r\n     * ====\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\r\n     *\r\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\r\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\r\n     * constructor.\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize/address.code.length, which returns 0\r\n        // for contracts in construction, since the code is only stored at the end\r\n        // of the constructor execution.\r\n\r\n        return account.code.length > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain `call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\r\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\r\n     *\r\n     * _Available since v4.8._\r\n     */\r\n    function verifyCallResultFromTarget(\r\n        address target,\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        if (success) {\r\n            if (returndata.length == 0) {\r\n                // only check isContract if the call was successful and the return data is empty\r\n                // otherwise we already know that it was a contract\r\n                require(isContract(target), \"Address: call to non-contract\");\r\n            }\r\n            return returndata;\r\n        } else {\r\n            _revert(returndata, errorMessage);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\r\n     * revert reason or using the provided one.\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            _revert(returndata, errorMessage);\r\n        }\r\n    }\r\n\r\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\r\n        // Look for revert reason and bubble it up if present\r\n        if (returndata.length > 0) {\r\n            // The easiest way to bubble the revert reason is using memory via assembly\r\n            /// @solidity memory-safe-assembly\r\n            assembly {\r\n                let returndata_size := mload(returndata)\r\n                revert(add(32, returndata), returndata_size)\r\n            }\r\n        } else {\r\n            revert(errorMessage);\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @title ERC721 token receiver interface\r\n * @dev Interface for any contract that wants to support safeTransfers\r\n * from ERC721 asset contracts.\r\n */\r\ninterface IERC721Receiver {\r\n    /**\r\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\r\n     * by `operator` from `from`, this function is called.\r\n     *\r\n     * It must return its Solidity selector to confirm the token transfer.\r\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\r\n     *\r\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\r\n     */\r\n    function onERC721Received(\r\n        address operator,\r\n        address from,\r\n        uint256 tokenId,\r\n        bytes calldata data\r\n    ) external returns (bytes4);\r\n}\r\n\r\n// File: @rmrk-team/evm-contracts/contracts/RMRK/core/RMRKCore.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.21;\r\n\r\n/**\r\n * @title RMRKCore\r\n * @author RMRK team\r\n * @notice Smart contract of the RMRK core module.\r\n * @dev This is currently just a passthrough contract which allows for granular editing of base-level ERC721 functions.\r\n */\r\ncontract RMRKCore {\r\n    /**\r\n     * @notice Version of the @rmrk-team/evm-contracts package\r\n     * @return Version identifier of the smart contract\r\n     */\r\n    string public constant VERSION = \"2.1.1\";\r\n    bytes4 public constant RMRK_INTERFACE = 0x524D524B; // \"RMRK\" in ASCII hex\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/introspection/IERC165.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC165 standard, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\r\n *\r\n * Implementers can declare support of contract interfaces, which can then be\r\n * queried by others ({ERC165Checker}).\r\n *\r\n * For an implementation, see {ERC165}.\r\n */\r\ninterface IERC165 {\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\n// File: @openzeppelin/contracts/interfaces/IERC2981.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC2981.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Interface for the NFT Royalty Standard.\r\n *\r\n * A standardized way to retrieve royalty payment information for non-fungible tokens (NFTs) to enable universal\r\n * support for royalty payments across all NFT marketplaces and ecosystem participants.\r\n *\r\n * _Available since v4.5._\r\n */\r\ninterface IERC2981 is IERC165 {\r\n    /**\r\n     * @dev Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of\r\n     * exchange. The royalty amount is denominated and should be paid in that same unit of exchange.\r\n     */\r\n    function royaltyInfo(\r\n        uint256 tokenId,\r\n        uint256 salePrice\r\n    ) external view returns (address receiver, uint256 royaltyAmount);\r\n}\r\n\r\n// File: @rmrk-team/evm-contracts/contracts/RMRK/extension/RMRKRoyalties.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.21;\r\n\r\n\r\n\r\n/**\r\n * @title RMRKRoyalties\r\n * @author RMRK team\r\n * @notice Smart contract of the RMRK Royalties module.\r\n */\r\nabstract contract RMRKRoyalties {\r\n    /** is IERC2981 **/ // Inheritance is commmnted to prevent linearization issues\r\n    address private _royaltyRecipient;\r\n    uint256 private _royaltyPercentageBps;\r\n\r\n    /**\r\n     * @notice Used to initiate the smart contract.\r\n     * @dev `royaltyPercentageBps` is expressed in basis points, so 1 basis point equals 0.01% and 500 basis points\r\n     *  equal 5%.\r\n     * @param royaltyRecipient Address to which royalties should be sent\r\n     * @param royaltyPercentageBps The royalty percentage expressed in basis points\r\n     */\r\n    constructor(address royaltyRecipient, uint256 royaltyPercentageBps) {\r\n        _setRoyaltyRecipient(royaltyRecipient);\r\n        if (royaltyPercentageBps >= 10000) revert RMRKRoyaltiesTooHigh();\r\n        _royaltyPercentageBps = royaltyPercentageBps;\r\n    }\r\n\r\n    /**\r\n     * @notice Used to update recipient of royalties.\r\n     * @dev Custom access control has to be implemented to ensure that only the intended actors can update the\r\n     *  beneficiary.\r\n     * @param newRoyaltyRecipient Address of the new recipient of royalties\r\n     */\r\n    function updateRoyaltyRecipient(\r\n        address newRoyaltyRecipient\r\n    ) external virtual;\r\n\r\n    /**\r\n     * @notice Used to update the royalty recipient.\r\n     * @param newRoyaltyRecipient Address of the new recipient of royalties\r\n     */\r\n    function _setRoyaltyRecipient(address newRoyaltyRecipient) internal {\r\n        _royaltyRecipient = newRoyaltyRecipient;\r\n    }\r\n\r\n    /**\r\n     * @notice Used to retrieve the recipient of royalties.\r\n     * @return Address of the recipient of royalties\r\n     */\r\n    function getRoyaltyRecipient() public view virtual returns (address) {\r\n        return _royaltyRecipient;\r\n    }\r\n\r\n    /**\r\n     * @notice Used to retrieve the specified royalty percentage.\r\n     * @return The royalty percentage expressed in the basis points\r\n     */\r\n    function getRoyaltyPercentage() public view virtual returns (uint256) {\r\n        return _royaltyPercentageBps;\r\n    }\r\n\r\n    /**\r\n     * @notice Used to retrieve the information about who shall receive royalties of a sale of the specified token and\r\n     *  how much they will be.\r\n     * @param tokenId ID of the token for which the royalty info is being retrieved\r\n     * @param salePrice Price of the token sale\r\n     * @return receiver The beneficiary receiving royalties of the sale\r\n     * @return royaltyAmount The value of the royalties recieved by the `receiver` from the sale\r\n     */\r\n    function royaltyInfo(\r\n        uint256 tokenId,\r\n        uint256 salePrice\r\n    ) external view virtual returns (address receiver, uint256 royaltyAmount) {\r\n        receiver = _royaltyRecipient;\r\n        royaltyAmount = (salePrice * _royaltyPercentageBps) / 10000;\r\n    }\r\n}\r\n\r\n// File: @rmrk-team/evm-contracts/contracts/implementations/utils/RMRKImplementationBase.sol\r\n\r\n\r\npragma solidity ^0.8.21;\r\n\r\n\r\n\r\n\r\n/**\r\n * @title RMRKImplementationBase\r\n * @author RMRK team\r\n * @notice Smart contract of the RMRK minting utils module.\r\n * @dev This smart contract includes the top-level utilities for managing minting and implements Ownable by default.\r\n */\r\nabstract contract RMRKImplementationBase is RMRKRoyalties, Ownable {\r\n    string private _collectionMetadata;\r\n    string private _name;\r\n    string private _symbol;\r\n\r\n    uint256 private _nextId;\r\n    uint256 internal _totalSupply;\r\n    uint256 internal _maxSupply;\r\n    uint256 internal _totalAssets;\r\n\r\n    /**\r\n     * @notice Initializes the smart contract with a given maximum supply and minting price.\r\n     * @param name_ Name of the token collection\r\n     * @param symbol_ Symbol of the token collection\r\n     * @param collectionMetadata_ The collection metadata URI\r\n     * @param maxSupply_ The maximum supply of tokens\r\n     * @param royaltyRecipient Address to which royalties should be sent\r\n     * @param royaltyPercentageBps The royalty percentage expressed in basis points\r\n     */\r\n    constructor(\r\n        string memory name_,\r\n        string memory symbol_,\r\n        string memory collectionMetadata_,\r\n        uint256 maxSupply_,\r\n        address royaltyRecipient,\r\n        uint256 royaltyPercentageBps\r\n    ) RMRKRoyalties(royaltyRecipient, royaltyPercentageBps) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n        _collectionMetadata = collectionMetadata_;\r\n        _maxSupply = maxSupply_;\r\n    }\r\n\r\n    /**\r\n     * @notice Used to retrieve the total supply of the tokens in a collection.\r\n     * @return The number of tokens in a collection\r\n     */\r\n    function totalSupply() public view virtual returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @notice Used to retrieve the maximum supply of the collection.\r\n     * @return The maximum supply of tokens in the collection\r\n     */\r\n    function maxSupply() public view virtual returns (uint256) {\r\n        return _maxSupply;\r\n    }\r\n\r\n    /**\r\n     * @notice Used to retrieve the total number of assets.\r\n     * @return The total number of assets\r\n     */\r\n    function totalAssets() public view virtual returns (uint256) {\r\n        return _totalAssets;\r\n    }\r\n\r\n    /**\r\n     * @notice Used to retrieve the metadata of the collection.\r\n     * @return string The metadata URI of the collection\r\n     */\r\n    function collectionMetadata() public view virtual returns (string memory) {\r\n        return _collectionMetadata;\r\n    }\r\n\r\n    /**\r\n     * @notice Used to retrieve the collection name.\r\n     * @return Name of the collection\r\n     */\r\n    function name() public view virtual returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @notice Used to retrieve the collection symbol.\r\n     * @return Symbol of the collection\r\n     */\r\n    function symbol() public view virtual returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @inheritdoc RMRKRoyalties\r\n     */\r\n    function updateRoyaltyRecipient(\r\n        address newRoyaltyRecipient\r\n    ) public virtual override onlyOwner {\r\n        _setRoyaltyRecipient(newRoyaltyRecipient);\r\n    }\r\n\r\n    /**\r\n     * @notice Used to calculate the token IDs of tokens to be minted.\r\n     * @param numToMint Amount of tokens to be minted\r\n     * @return nextToken The ID of the first token to be minted in the current minting cycle\r\n     * @return totalSupplyOffset The ID of the last token to be minted in the current minting cycle\r\n     */\r\n    function _prepareMint(\r\n        uint256 numToMint\r\n    ) internal virtual returns (uint256 nextToken, uint256 totalSupplyOffset) {\r\n        if (numToMint == uint256(0)) revert RMRKMintZero();\r\n        if (numToMint + _nextId > _maxSupply) revert RMRKMintOverMax();\r\n\r\n        unchecked {\r\n            nextToken = _nextId + 1;\r\n            _nextId += numToMint;\r\n            _totalSupply += numToMint;\r\n            totalSupplyOffset = _nextId + 1;\r\n        }\r\n    }\r\n}\r\n\r\n// File: @rmrk-team/evm-contracts/contracts/RMRK/nestable/IERC7401.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.21;\r\n\r\n\r\n/**\r\n * @title IERC7401\r\n * @author RMRK team\r\n * @notice Interface smart contract of the RMRK nestable module.\r\n */\r\ninterface IERC7401 is IERC165 {\r\n    /**\r\n     * @notice The core struct of RMRK ownership.\r\n     * @dev The `DirectOwner` struct is used to store information of the next immediate owner, be it the parent token or\r\n     *  the externally owned account.\r\n     * @dev If the token is owned by the externally owned account, the `tokenId` should equal `0`.\r\n     * @param tokenId ID of the parent token\r\n     * @param ownerAddress Address of the owner of the token. If the owner is another token, then the address should be\r\n     *  the one of the parent token's collection smart contract. If the owner is externally owned account, the address\r\n     *  should be the address of this account\r\n     * @param isNft A boolean value signifying whether the token is owned by another token (`true`) or by an externally\r\n     *  owned account (`false`)\r\n     */\r\n    struct DirectOwner {\r\n        uint256 tokenId;\r\n        address ownerAddress;\r\n    }\r\n\r\n    /**\r\n     * @notice Used to notify listeners that the token is being transferred.\r\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\r\n     * @param from Address of the previous immediate owner, which is a smart contract if the token was nested.\r\n     * @param to Address of the new immediate owner, which is a smart contract if the token is being nested.\r\n     * @param fromTokenId ID of the previous parent token. If the token was not nested before, the value should be `0`\r\n     * @param toTokenId ID of the new parent token. If the token is not being nested, the value should be `0`\r\n     * @param tokenId ID of the token being transferred\r\n     */\r\n    event NestTransfer(\r\n        address indexed from,\r\n        address indexed to,\r\n        uint256 fromTokenId,\r\n        uint256 toTokenId,\r\n        uint256 indexed tokenId\r\n    );\r\n\r\n    /**\r\n     * @notice Used to notify listeners that a new token has been added to a given token's pending children array.\r\n     * @dev Emitted when a child NFT is added to a token's pending array.\r\n     * @param tokenId ID of the token that received a new pending child token\r\n     * @param childIndex Index of the proposed child token in the parent token's pending children array\r\n     * @param childAddress Address of the proposed child token's collection smart contract\r\n     * @param childId ID of the child token in the child token's collection smart contract\r\n     */\r\n    event ChildProposed(\r\n        uint256 indexed tokenId,\r\n        uint256 childIndex,\r\n        address indexed childAddress,\r\n        uint256 indexed childId\r\n    );\r\n\r\n    /**\r\n     * @notice Used to notify listeners that a new child token was accepted by the parent token.\r\n     * @dev Emitted when a parent token accepts a token from its pending array, migrating it to the active array.\r\n     * @param tokenId ID of the token that accepted a new child token\r\n     * @param childIndex Index of the newly accepted child token in the parent token's active children array\r\n     * @param childAddress Address of the child token's collection smart contract\r\n     * @param childId ID of the child token in the child token's collection smart contract\r\n     */\r\n    event ChildAccepted(\r\n        uint256 indexed tokenId,\r\n        uint256 childIndex,\r\n        address indexed childAddress,\r\n        uint256 indexed childId\r\n    );\r\n\r\n    /**\r\n     * @notice Used to notify listeners that all pending child tokens of a given token have been rejected.\r\n     * @dev Emitted when a token removes all a child tokens from its pending array.\r\n     * @param tokenId ID of the token that rejected all of the pending children\r\n     */\r\n    event AllChildrenRejected(uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @notice Used to notify listeners a child token has been transferred from parent token.\r\n     * @dev Emitted when a token transfers a child from itself, transferring ownership to the root owner.\r\n     * @param tokenId ID of the token that transferred a child token\r\n     * @param childIndex Index of a child in the array from which it is being transferred\r\n     * @param childAddress Address of the child token's collection smart contract\r\n     * @param childId ID of the child token in the child token's collection smart contract\r\n     * @param fromPending A boolean value signifying whether the token was in the pending child tokens array (`true`) or\r\n     *  in the active child tokens array (`false`)\r\n     * @param toZero A boolean value signifying whether the token is being transferred to the `0x0` address (`true`) or\r\n     *  not (`false`)\r\n     */\r\n    event ChildTransferred(\r\n        uint256 indexed tokenId,\r\n        uint256 childIndex,\r\n        address indexed childAddress,\r\n        uint256 indexed childId,\r\n        bool fromPending,\r\n        bool toZero\r\n    );\r\n\r\n    /**\r\n     * @notice The core child token struct, holding the information about the child tokens.\r\n     * @return tokenId ID of the child token in the child token's collection smart contract\r\n     * @return contractAddress Address of the child token's smart contract\r\n     */\r\n    struct Child {\r\n        uint256 tokenId;\r\n        address contractAddress;\r\n    }\r\n\r\n    /**\r\n     * @notice Used to retrieve the *root* owner of a given token.\r\n     * @dev The *root* owner of the token is an externally owned account (EOA). If the given token is child of another\r\n     *  NFT, this will return an EOA address. Otherwise, if the token is owned by an EOA, this EOA wil be returned.\r\n     * @param tokenId ID of the token for which the *root* owner has been retrieved\r\n     * @return owner The *root* owner of the token\r\n     */\r\n    function ownerOf(uint256 tokenId) external view returns (address owner);\r\n\r\n    /**\r\n     * @notice Used to retrieve the immediate owner of the given token.\r\n     * @dev If the immediate owner is another token, the address returned, should be the one of the parent token's\r\n     *  collection smart contract.\r\n     * @param tokenId ID of the token for which the RMRK owner is being retrieved\r\n     * @return Address of the given token's owner\r\n     * @return The ID of the parent token. Should be `0` if the owner is an externally owned account\r\n     * @return The boolean value signifying whether the owner is an NFT or not\r\n     */\r\n    function directOwnerOf(\r\n        uint256 tokenId\r\n    ) external view returns (address, uint256, bool);\r\n\r\n    /**\r\n     * @notice Used to burn a given token.\r\n     * @dev When a token is burned, all of its child tokens are recursively burned as well.\r\n     * @dev When specifying the maximum recursive burns, the execution will be reverted if there are more children to be\r\n     *  burned.\r\n     * @dev Setting the `maxRecursiveBurn` value to 0 will only attempt to burn the specified token and revert if there\r\n     *  are any child tokens present.\r\n     * @dev The approvals are cleared when the token is burned.\r\n     * @dev Requirements:\r\n     *\r\n     *  - `tokenId` must exist.\r\n     * @dev Emits a {Transfer} event.\r\n     * @param tokenId ID of the token to burn\r\n     * @param maxRecursiveBurns Maximum number of tokens to recursively burn\r\n     * @return Number of recursively burned children\r\n     */\r\n    function burn(\r\n        uint256 tokenId,\r\n        uint256 maxRecursiveBurns\r\n    ) external returns (uint256);\r\n\r\n    /**\r\n     * @notice Used to add a child token to a given parent token.\r\n     * @dev This adds the child token into the given parent token's pending child tokens array.\r\n     * @dev Requirements:\r\n     *\r\n     *  - `directOwnerOf` on the child contract must resolve to the called contract.\r\n     *  - the pending array of the parent contract must not be full.\r\n     * @param parentId ID of the parent token to receive the new child token\r\n     * @param childId ID of the new proposed child token\r\n     * @param data Additional data with no specified format\r\n     */\r\n    function addChild(\r\n        uint256 parentId,\r\n        uint256 childId,\r\n        bytes memory data\r\n    ) external;\r\n\r\n    /**\r\n     * @notice Used to accept a pending child token for a given parent token.\r\n     * @dev This moves the child token from parent token's pending child tokens array into the active child tokens\r\n     *  array.\r\n     * @param parentId ID of the parent token for which the child token is being accepted\r\n     * @param childIndex Index of a child tokem in the given parent's pending children array\r\n     * @param childAddress Address of the collection smart contract of the child token expected to be located at the\r\n     *  specified index of the given parent token's pending children array\r\n     * @param childId ID of the child token expected to be located at the specified index of the given parent token's\r\n     *  pending children array\r\n     */\r\n    function acceptChild(\r\n        uint256 parentId,\r\n        uint256 childIndex,\r\n        address childAddress,\r\n        uint256 childId\r\n    ) external;\r\n\r\n    /**\r\n     * @notice Used to reject all pending children of a given parent token.\r\n     * @dev Removes the children from the pending array mapping.\r\n     * @dev This does not update the ownership storage data on children. If necessary, ownership can be reclaimed by the\r\n     *  rootOwner of the previous parent.\r\n     * @dev Requirements:\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `parentId` must exist\r\n     * @param parentId ID of the parent token for which to reject all of the pending tokens.\r\n     * @param maxRejections Maximum number of expected children to reject, used to prevent from rejecting children which\r\n     *  arrive just before this operation.\r\n     */\r\n    function rejectAllChildren(\r\n        uint256 parentId,\r\n        uint256 maxRejections\r\n    ) external;\r\n\r\n    /**\r\n     * @notice Used to transfer a child token from a given parent token.\r\n     * @dev When transferring a child token, the owner of the token is set to `to`, or is not updated in the event of\r\n     *  `to` being the `0x0` address.\r\n     * @param tokenId ID of the parent token from which the child token is being transferred\r\n     * @param to Address to which to transfer the token to\r\n     * @param destinationId ID of the token to receive this child token (MUST be 0 if the destination is not a token)\r\n     * @param childIndex Index of a token we are transferring, in the array it belongs to (can be either active array or\r\n     *  pending array)\r\n     * @param childAddress Address of the child token's collection smart contract.\r\n     * @param childId ID of the child token in its own collection smart contract.\r\n     * @param isPending A boolean value indicating whether the child token being transferred is in the pending array of\r\n     *  the parent token (`true`) or in the active array (`false`)\r\n     * @param data Additional data with no specified format, sent in call to `_to`\r\n     */\r\n    function transferChild(\r\n        uint256 tokenId,\r\n        address to,\r\n        uint256 destinationId,\r\n        uint256 childIndex,\r\n        address childAddress,\r\n        uint256 childId,\r\n        bool isPending,\r\n        bytes memory data\r\n    ) external;\r\n\r\n    /**\r\n     * @notice Used to retrieve the active child tokens of a given parent token.\r\n     * @dev Returns array of Child structs existing for parent token.\r\n     * @dev The Child struct consists of the following values:\r\n     *  [\r\n     *      tokenId,\r\n     *      contractAddress\r\n     *  ]\r\n     * @param parentId ID of the parent token for which to retrieve the active child tokens\r\n     * @return An array of Child structs containing the parent token's active child tokens\r\n     */\r\n    function childrenOf(\r\n        uint256 parentId\r\n    ) external view returns (Child[] memory);\r\n\r\n    /**\r\n     * @notice Used to retrieve the pending child tokens of a given parent token.\r\n     * @dev Returns array of pending Child structs existing for given parent.\r\n     * @dev The Child struct consists of the following values:\r\n     *  [\r\n     *      tokenId,\r\n     *      contractAddress\r\n     *  ]\r\n     * @param parentId ID of the parent token for which to retrieve the pending child tokens\r\n     * @return An array of Child structs containing the parent token's pending child tokens\r\n     */\r\n    function pendingChildrenOf(\r\n        uint256 parentId\r\n    ) external view returns (Child[] memory);\r\n\r\n    /**\r\n     * @notice Used to retrieve a specific active child token for a given parent token.\r\n     * @dev Returns a single Child struct locating at `index` of parent token's active child tokens array.\r\n     * @dev The Child struct consists of the following values:\r\n     *  [\r\n     *      tokenId,\r\n     *      contractAddress\r\n     *  ]\r\n     * @param parentId ID of the parent token for which the child is being retrieved\r\n     * @param index Index of the child token in the parent token's active child tokens array\r\n     * @return A Child struct containing data about the specified child\r\n     */\r\n    function childOf(\r\n        uint256 parentId,\r\n        uint256 index\r\n    ) external view returns (Child memory);\r\n\r\n    /**\r\n     * @notice Used to retrieve a specific pending child token from a given parent token.\r\n     * @dev Returns a single Child struct locating at `index` of parent token's active child tokens array.\r\n     * @dev The Child struct consists of the following values:\r\n     *  [\r\n     *      tokenId,\r\n     *      contractAddress\r\n     *  ]\r\n     * @param parentId ID of the parent token for which the pending child token is being retrieved\r\n     * @param index Index of the child token in the parent token's pending child tokens array\r\n     * @return A Child struct containting data about the specified child\r\n     */\r\n    function pendingChildOf(\r\n        uint256 parentId,\r\n        uint256 index\r\n    ) external view returns (Child memory);\r\n\r\n    /**\r\n     * @notice Used to transfer the token into another token.\r\n     * @param from Address of the direct owner of the token to be transferred\r\n     * @param to Address of the receiving token's collection smart contract\r\n     * @param tokenId ID of the token being transferred\r\n     * @param destinationId ID of the token to receive the token being transferred\r\n     * @param data Additional data with no specified format, sent in the addChild call\r\n     */\r\n    function nestTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        uint256 destinationId,\r\n        bytes memory data\r\n    ) external;\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC721/IERC721.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Required interface of an ERC721 compliant contract.\r\n */\r\ninterface IERC721 is IERC165 {\r\n    /**\r\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\r\n     */\r\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\r\n     */\r\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\r\n\r\n    /**\r\n     * @dev Returns the number of tokens in ``owner``'s account.\r\n     */\r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n\r\n    /**\r\n     * @dev Returns the owner of the `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function ownerOf(uint256 tokenId) external view returns (address owner);\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\r\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\r\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\r\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address from, address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\r\n     * The approval is cleared when the token is transferred.\r\n     *\r\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The caller must own the token or be an approved operator.\r\n     * - `tokenId` must exist.\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Approve or remove `operator` as an operator for the caller.\r\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The `operator` cannot be the caller.\r\n     *\r\n     * Emits an {ApprovalForAll} event.\r\n     */\r\n    function setApprovalForAll(address operator, bool approved) external;\r\n\r\n    /**\r\n     * @dev Returns the account approved for `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function getApproved(uint256 tokenId) external view returns (address operator);\r\n\r\n    /**\r\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\r\n     *\r\n     * See {setApprovalForAll}\r\n     */\r\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\r\n}\r\n\r\n// File: @rmrk-team/evm-contracts/contracts/RMRK/nestable/RMRKNestable.sol\r\n\r\n\r\n\r\n//Generally all interactions should propagate downstream\r\n\r\npragma solidity ^0.8.21;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title RMRKNestable\r\n * @author RMRK team\r\n * @notice Smart contract of the RMRK Nestable module.\r\n * @dev This contract is hierarchy agnostic and can support an arbitrary number of nested levels up and down, as long as\r\n *  gas limits allow it.\r\n */\r\ncontract RMRKNestable is Context, IERC165, IERC721, IERC7401, RMRKCore {\r\n    using Address for address;\r\n\r\n    uint256 private constant _MAX_LEVELS_TO_CHECK_FOR_INHERITANCE_LOOP = 100;\r\n\r\n    // Mapping owner address to token count\r\n    mapping(address => uint256) private _balances;\r\n\r\n    // Mapping from token ID to approver address to approved address\r\n    // The approver is necessary so approvals are invalidated for nested children on transfer\r\n    // WARNING: If a child NFT returns to a previous root owner, old permissions would be active again\r\n    mapping(uint256 => mapping(address => address)) private _tokenApprovals;\r\n\r\n    // Mapping from owner to operator approvals\r\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\r\n\r\n    // ------------------- NESTABLE --------------\r\n\r\n    // Mapping from token ID to DirectOwner struct\r\n    mapping(uint256 => DirectOwner) private _RMRKOwners;\r\n\r\n    // Mapping of tokenId to array of active children structs\r\n    mapping(uint256 => Child[]) internal _activeChildren;\r\n\r\n    // Mapping of tokenId to array of pending children structs\r\n    mapping(uint256 => Child[]) internal _pendingChildren;\r\n\r\n    // Mapping of child token address to child token ID to whether they are pending or active on any token\r\n    // We might have a first extra mapping from token ID, but since the same child cannot be nested into multiple tokens\r\n    //  we can strip it for size/gas savings.\r\n    mapping(address => mapping(uint256 => uint256)) internal _childIsInActive;\r\n\r\n    // -------------------------- MODIFIERS ----------------------------\r\n\r\n    /**\r\n     * @notice Used to verify that the caller is either the owner of the token or approved to manage it by its owner.\r\n     * @dev If the caller is not the owner of the token or approved to manage it by its owner, the execution will be\r\n     *  reverted.\r\n     * @param tokenId ID of the token to check\r\n     */\r\n    function _onlyApprovedOrOwner(uint256 tokenId) private view {\r\n        if (!_isApprovedOrOwner(_msgSender(), tokenId))\r\n            revert ERC721NotApprovedOrOwner();\r\n    }\r\n\r\n    /**\r\n     * @notice Used to verify that the caller is either the owner of the token or approved to manage it by its owner.\r\n     * @param tokenId ID of the token to check\r\n     */\r\n    modifier onlyApprovedOrOwner(uint256 tokenId) {\r\n        _onlyApprovedOrOwner(tokenId);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @notice Used to verify that the caller is approved to manage the given token or it its direct owner.\r\n     * @dev This does not delegate to ownerOf, which returns the root owner, but rater uses an owner from DirectOwner\r\n     *  struct.\r\n     * @dev The execution is reverted if the caller is not immediate owner or approved to manage the given token.\r\n     * @dev Used for parent-scoped transfers.\r\n     * @param tokenId ID of the token to check.\r\n     */\r\n    function _onlyApprovedOrDirectOwner(uint256 tokenId) private view {\r\n        if (!_isApprovedOrDirectOwner(_msgSender(), tokenId))\r\n            revert RMRKNotApprovedOrDirectOwner();\r\n    }\r\n\r\n    /**\r\n     * @notice Used to verify that the caller is approved to manage the given token or is its direct owner.\r\n     * @param tokenId ID of the token to check\r\n     */\r\n    modifier onlyApprovedOrDirectOwner(uint256 tokenId) {\r\n        _onlyApprovedOrDirectOwner(tokenId);\r\n        _;\r\n    }\r\n\r\n    // ------------------------------- ERC721 ---------------------------------\r\n    /**\r\n     * @inheritdoc IERC165\r\n     */\r\n    function supportsInterface(\r\n        bytes4 interfaceId\r\n    ) public view virtual returns (bool) {\r\n        return\r\n            interfaceId == type(IERC165).interfaceId ||\r\n            interfaceId == type(IERC721).interfaceId ||\r\n            interfaceId == type(IERC7401).interfaceId;\r\n    }\r\n\r\n    /**\r\n     * @notice Used to retrieve the number of tokens in `owner`'s account.\r\n     * @param owner Address of the account being checked\r\n     * @return The balance of the given account\r\n     */\r\n    function balanceOf(address owner) public view virtual returns (uint256) {\r\n        if (owner == address(0)) revert ERC721AddressZeroIsNotaValidOwner();\r\n        return _balances[owner];\r\n    }\r\n\r\n    ////////////////////////////////////////\r\n    //              TRANSFERS\r\n    ////////////////////////////////////////\r\n\r\n    /**\r\n     * @notice Transfers a given token from `from` to `to`.\r\n     * @dev Requirements:\r\n     *\r\n     *  - `from` cannot be the zero address.\r\n     *  - `to` cannot be the zero address.\r\n     *  - `tokenId` token must be owned by `from`.\r\n     *  - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     * @dev Emits a {Transfer} event.\r\n     * @param from Address from which to transfer the token from\r\n     * @param to Address to which to transfer the token to\r\n     * @param tokenId ID of the token to transfer\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) public virtual onlyApprovedOrDirectOwner(tokenId) {\r\n        _transfer(from, to, tokenId, \"\");\r\n    }\r\n\r\n    /**\r\n     * @notice Used to safely transfer a given token token from `from` to `to`.\r\n     * @dev Requirements:\r\n     *\r\n     *  - `from` cannot be the zero address.\r\n     *  - `to` cannot be the zero address.\r\n     *  - `tokenId` token must exist and be owned by `from`.\r\n     *  - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     *  - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     * @dev Emits a {Transfer} event.\r\n     * @param from Address to transfer the tokens from\r\n     * @param to Address to transfer the tokens to\r\n     * @param tokenId ID of the token to transfer\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) public virtual {\r\n        safeTransferFrom(from, to, tokenId, \"\");\r\n    }\r\n\r\n    /**\r\n     * @notice Used to safely transfer a given token token from `from` to `to`.\r\n     * @dev Requirements:\r\n     *\r\n     *  - `from` cannot be the zero address.\r\n     *  - `to` cannot be the zero address.\r\n     *  - `tokenId` token must exist and be owned by `from`.\r\n     *  - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     *  - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     * @dev Emits a {Transfer} event.\r\n     * @param from Address to transfer the tokens from\r\n     * @param to Address to transfer the tokens to\r\n     * @param tokenId ID of the token to transfer\r\n     * @param data Additional data without a specified format to be sent along with the token transaction\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory data\r\n    ) public virtual onlyApprovedOrDirectOwner(tokenId) {\r\n        _safeTransfer(from, to, tokenId, data);\r\n    }\r\n\r\n    /**\r\n     * @inheritdoc IERC7401\r\n     */\r\n    function nestTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        uint256 destinationId,\r\n        bytes memory data\r\n    ) public virtual onlyApprovedOrDirectOwner(tokenId) {\r\n        _nestTransfer(from, to, tokenId, destinationId, data);\r\n    }\r\n\r\n    /**\r\n     * @notice Used to safely transfer the token form `from` to `to`.\r\n     * @dev The function checks that contract recipients are aware of the ERC721 protocol to prevent tokens from being\r\n     *  forever locked.\r\n     * @dev This internal function is equivalent to {safeTransferFrom}, and can be used to e.g. implement alternative\r\n     *  mechanisms to perform token transfer, such as signature-based.\r\n     * @dev Requirements:\r\n     *\r\n     *  - `from` cannot be the zero address.\r\n     *  - `to` cannot be the zero address.\r\n     *  - `tokenId` token must exist and be owned by `from`.\r\n     *  - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     * @dev Emits a {Transfer} event.\r\n     * @param from Address of the account currently owning the given token\r\n     * @param to Address to transfer the token to\r\n     * @param tokenId ID of the token to transfer\r\n     * @param data Additional data with no specified format, sent in call to `to`\r\n     */\r\n    function _safeTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory data\r\n    ) internal virtual {\r\n        _transfer(from, to, tokenId, data);\r\n        if (!_checkOnERC721Received(from, to, tokenId, data))\r\n            revert ERC721TransferToNonReceiverImplementer();\r\n    }\r\n\r\n    /**\r\n     * @notice Used to transfer the token from `from` to `to`.\r\n     * @dev As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\r\n     * @dev Requirements:\r\n     *\r\n     *  - `to` cannot be the zero address.\r\n     *  - `tokenId` token must be owned by `from`.\r\n     * @dev Emits a {Transfer} event.\r\n     * @param from Address of the account currently owning the given token\r\n     * @param to Address to transfer the token to\r\n     * @param tokenId ID of the token to transfer\r\n     * @param data Additional data with no specified format, sent in call to `to`\r\n     */\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory data\r\n    ) internal virtual {\r\n        (address immediateOwner, uint256 parentId, ) = directOwnerOf(tokenId);\r\n        if (immediateOwner != from) revert ERC721TransferFromIncorrectOwner();\r\n        if (to == address(0)) revert ERC721TransferToTheZeroAddress();\r\n\r\n        _beforeTokenTransfer(from, to, tokenId);\r\n        _beforeNestedTokenTransfer(from, to, parentId, 0, tokenId, data);\r\n\r\n        _balances[from] -= 1;\r\n        _updateOwnerAndClearApprovals(tokenId, 0, to);\r\n        _balances[to] += 1;\r\n\r\n        emit Transfer(from, to, tokenId);\r\n        emit NestTransfer(from, to, parentId, 0, tokenId);\r\n\r\n        _afterTokenTransfer(from, to, tokenId);\r\n        _afterNestedTokenTransfer(from, to, parentId, 0, tokenId, data);\r\n    }\r\n\r\n    /**\r\n     * @notice Used to transfer a token into another token.\r\n     * @dev Attempting to nest a token into `0x0` address will result in reverted transaction.\r\n     * @dev Attempting to nest a token into itself will result in reverted transaction.\r\n     * @param from Address of the account currently owning the given token\r\n     * @param to Address of the receiving token's collection smart contract\r\n     * @param tokenId ID of the token to transfer\r\n     * @param destinationId ID of the token receiving the given token\r\n     * @param data Additional data with no specified format, sent in the addChild call\r\n     */\r\n    function _nestTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        uint256 destinationId,\r\n        bytes memory data\r\n    ) internal virtual {\r\n        (address immediateOwner, uint256 parentId, ) = directOwnerOf(tokenId);\r\n        if (immediateOwner != from) revert ERC721TransferFromIncorrectOwner();\r\n        if (to == address(0)) revert ERC721TransferToTheZeroAddress();\r\n        if (to == address(this) && tokenId == destinationId)\r\n            revert RMRKNestableTransferToSelf();\r\n\r\n        // Destination contract checks:\r\n        // It seems redundant, but otherwise it would revert with no error\r\n        if (!to.isContract()) revert RMRKIsNotContract();\r\n        if (!IERC165(to).supportsInterface(type(IERC7401).interfaceId))\r\n            revert RMRKNestableTransferToNonRMRKNestableImplementer();\r\n        _checkForInheritanceLoop(tokenId, to, destinationId);\r\n\r\n        _beforeTokenTransfer(from, to, tokenId);\r\n        _beforeNestedTokenTransfer(\r\n            immediateOwner,\r\n            to,\r\n            parentId,\r\n            destinationId,\r\n            tokenId,\r\n            data\r\n        );\r\n        _balances[from] -= 1;\r\n        _updateOwnerAndClearApprovals(tokenId, destinationId, to);\r\n        _balances[to] += 1;\r\n\r\n        // Sending to NFT:\r\n        _sendToNFT(immediateOwner, to, parentId, destinationId, tokenId, data);\r\n    }\r\n\r\n    /**\r\n     * @notice Used to send a token to another token.\r\n     * @dev If the token being sent is currently owned by an externally owned account, the `parentId` should equal `0`.\r\n     * @dev Emits {Transfer} event.\r\n     * @dev Emits {NestTransfer} event.\r\n     * @param from Address from which the token is being sent\r\n     * @param to Address of the collection smart contract of the token to receive the given token\r\n     * @param parentId ID of the current parent token of the token being sent\r\n     * @param destinationId ID of the tokento receive the token being sent\r\n     * @param tokenId ID of the token being sent\r\n     * @param data Additional data with no specified format, sent in the addChild call\r\n     */\r\n    function _sendToNFT(\r\n        address from,\r\n        address to,\r\n        uint256 parentId,\r\n        uint256 destinationId,\r\n        uint256 tokenId,\r\n        bytes memory data\r\n    ) private {\r\n        IERC7401 destContract = IERC7401(to);\r\n        destContract.addChild(destinationId, tokenId, data);\r\n\r\n        emit Transfer(from, to, tokenId);\r\n        emit NestTransfer(from, to, parentId, destinationId, tokenId);\r\n\r\n        _afterTokenTransfer(from, to, tokenId);\r\n        _afterNestedTokenTransfer(\r\n            from,\r\n            to,\r\n            parentId,\r\n            destinationId,\r\n            tokenId,\r\n            data\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @notice Used to check if nesting a given token into a specified token would create an inheritance loop.\r\n     * @dev If a loop would occur, the tokens would be unmanageable, so the execution is reverted if one is detected.\r\n     * @dev The check for inheritance loop is bounded to guard against too much gas being consumed.\r\n     * @param currentId ID of the token that would be nested\r\n     * @param targetContract Address of the collection smart contract of the token into which the given token would be\r\n     *  nested\r\n     * @param targetId ID of the token into which the given token would be nested\r\n     */\r\n    function _checkForInheritanceLoop(\r\n        uint256 currentId,\r\n        address targetContract,\r\n        uint256 targetId\r\n    ) private view {\r\n        for (uint256 i; i < _MAX_LEVELS_TO_CHECK_FOR_INHERITANCE_LOOP; ) {\r\n            (\r\n                address nextOwner,\r\n                uint256 nextOwnerTokenId,\r\n                bool isNft\r\n            ) = IERC7401(targetContract).directOwnerOf(targetId);\r\n            // If there's a final address, we're good. There's no loop.\r\n            if (!isNft) {\r\n                return;\r\n            }\r\n            // Ff the current nft is an ancestor at some point, there is an inheritance loop\r\n            if (nextOwner == address(this) && nextOwnerTokenId == currentId) {\r\n                revert RMRKNestableTransferToDescendant();\r\n            }\r\n            // We reuse the parameters to save some contract size\r\n            targetContract = nextOwner;\r\n            targetId = nextOwnerTokenId;\r\n            unchecked {\r\n                ++i;\r\n            }\r\n        }\r\n        revert RMRKNestableTooDeep();\r\n    }\r\n\r\n    ////////////////////////////////////////\r\n    //              MINTING\r\n    ////////////////////////////////////////\r\n\r\n    /**\r\n     * @notice Used to safely mint the token to the specified address while passing the additional data to contract\r\n     *  recipients.\r\n     * @param to Address to which to mint the token\r\n     * @param tokenId ID of the token to mint\r\n     * @param data Additional data to send with the tokens\r\n     */\r\n    function _safeMint(\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory data\r\n    ) internal virtual {\r\n        _mint(to, tokenId, data);\r\n        if (!_checkOnERC721Received(address(0), to, tokenId, data))\r\n            revert ERC721TransferToNonReceiverImplementer();\r\n    }\r\n\r\n    /**\r\n     * @notice Used to mint a specified token to a given address.\r\n     * @dev WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible.\r\n     * @dev Requirements:\r\n     *\r\n     *  - `tokenId` must not exist.\r\n     *  - `to` cannot be the zero address.\r\n     * @dev Emits a {Transfer} event.\r\n     * @dev Emits a {NestTransfer} event.\r\n     * @param to Address to mint the token to\r\n     * @param tokenId ID of the token to mint\r\n     * @param data Additional data with no specified format, sent in call to `to`\r\n     */\r\n    function _mint(\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory data\r\n    ) internal virtual {\r\n        _innerMint(to, tokenId, 0, data);\r\n\r\n        emit Transfer(address(0), to, tokenId);\r\n        emit NestTransfer(address(0), to, 0, 0, tokenId);\r\n\r\n        _afterTokenTransfer(address(0), to, tokenId);\r\n        _afterNestedTokenTransfer(address(0), to, 0, 0, tokenId, data);\r\n    }\r\n\r\n    /**\r\n     * @notice Used to mint a child token to a given parent token.\r\n     * @param to Address of the collection smart contract of the token into which to mint the child token\r\n     * @param tokenId ID of the token to mint\r\n     * @param destinationId ID of the token into which to mint the new child token\r\n     * @param data Additional data with no specified format, sent in the addChild call\r\n     */\r\n    function _nestMint(\r\n        address to,\r\n        uint256 tokenId,\r\n        uint256 destinationId,\r\n        bytes memory data\r\n    ) internal virtual {\r\n        // It seems redundant, but otherwise it would revert with no error\r\n        if (!to.isContract()) revert RMRKIsNotContract();\r\n        if (!IERC165(to).supportsInterface(type(IERC7401).interfaceId))\r\n            revert RMRKMintToNonRMRKNestableImplementer();\r\n\r\n        _innerMint(to, tokenId, destinationId, data);\r\n        _sendToNFT(address(0), to, 0, destinationId, tokenId, data);\r\n    }\r\n\r\n    /**\r\n     * @notice Used to mint a child token into a given parent token.\r\n     * @dev Requirements:\r\n     *\r\n     *  - `to` cannot be the zero address.\r\n     *  - `tokenId` must not exist.\r\n     *  - `tokenId` must not be `0`.\r\n     * @param to Address of the collection smart contract of the token into which to mint the child token\r\n     * @param tokenId ID of the token to mint\r\n     * @param destinationId ID of the token into which to mint the new token\r\n     * @param data Additional data with no specified format, sent in call to `to`\r\n     */\r\n    function _innerMint(\r\n        address to,\r\n        uint256 tokenId,\r\n        uint256 destinationId,\r\n        bytes memory data\r\n    ) private {\r\n        if (to == address(0)) revert ERC721MintToTheZeroAddress();\r\n        if (_exists(tokenId)) revert ERC721TokenAlreadyMinted();\r\n        if (tokenId == uint256(0)) revert RMRKIdZeroForbidden();\r\n\r\n        _beforeTokenTransfer(address(0), to, tokenId);\r\n        _beforeNestedTokenTransfer(\r\n            address(0),\r\n            to,\r\n            0,\r\n            destinationId,\r\n            tokenId,\r\n            data\r\n        );\r\n\r\n        _balances[to] += 1;\r\n        _RMRKOwners[tokenId] = DirectOwner({\r\n            ownerAddress: to,\r\n            tokenId: destinationId\r\n        });\r\n    }\r\n\r\n    ////////////////////////////////////////\r\n    //              Ownership\r\n    ////////////////////////////////////////\r\n\r\n    /**\r\n     * @inheritdoc IERC7401\r\n     */\r\n    function ownerOf(\r\n        uint256 tokenId\r\n    ) public view virtual override(IERC7401, IERC721) returns (address) {\r\n        (address owner, uint256 ownerTokenId, bool isNft) = directOwnerOf(\r\n            tokenId\r\n        );\r\n        if (isNft) {\r\n            owner = IERC7401(owner).ownerOf(ownerTokenId);\r\n        }\r\n        return owner;\r\n    }\r\n\r\n    /**\r\n     * @inheritdoc IERC7401\r\n     */\r\n    function directOwnerOf(\r\n        uint256 tokenId\r\n    ) public view virtual returns (address, uint256, bool) {\r\n        DirectOwner memory owner = _RMRKOwners[tokenId];\r\n        if (owner.ownerAddress == address(0)) revert ERC721InvalidTokenId();\r\n\r\n        return (owner.ownerAddress, owner.tokenId, owner.tokenId != 0);\r\n    }\r\n\r\n    ////////////////////////////////////////\r\n    //              BURNING\r\n    ////////////////////////////////////////\r\n\r\n    /**\r\n     * @notice Used to burn a given token.\r\n     * @dev In case the token has any child tokens, the execution will be reverted.\r\n     * @param tokenId ID of the token to burn\r\n     */\r\n    function burn(uint256 tokenId) public virtual {\r\n        burn(tokenId, 0);\r\n    }\r\n\r\n    /**\r\n     * @inheritdoc IERC7401\r\n     */\r\n    function burn(\r\n        uint256 tokenId,\r\n        uint256 maxChildrenBurns\r\n    ) public virtual onlyApprovedOrDirectOwner(tokenId) returns (uint256) {\r\n        return _burn(tokenId, maxChildrenBurns);\r\n    }\r\n\r\n    /**\r\n     * @notice Used to burn a token.\r\n     * @dev When a token is burned, its children are recursively burned as well.\r\n     * @dev The approvals are cleared when the token is burned.\r\n     * @dev Requirements:\r\n     *\r\n     *  - `tokenId` must exist.\r\n     * @dev Emits a {Transfer} event.\r\n     * @dev Emits a {NestTransfer} event.\r\n     * @param tokenId ID of the token to burn\r\n     * @param maxChildrenBurns Maximum children to recursively burn\r\n     * @return The number of recursive burns it took to burn all of the children\r\n     */\r\n    function _burn(\r\n        uint256 tokenId,\r\n        uint256 maxChildrenBurns\r\n    ) internal virtual returns (uint256) {\r\n        (address immediateOwner, uint256 parentId, ) = directOwnerOf(tokenId);\r\n        address rootOwner = ownerOf(tokenId);\r\n\r\n        _beforeTokenTransfer(immediateOwner, address(0), tokenId);\r\n        _beforeNestedTokenTransfer(\r\n            immediateOwner,\r\n            address(0),\r\n            parentId,\r\n            0,\r\n            tokenId,\r\n            \"\"\r\n        );\r\n\r\n        _balances[immediateOwner] -= 1;\r\n        _approve(address(0), tokenId);\r\n        _cleanApprovals(tokenId);\r\n\r\n        Child[] memory children = childrenOf(tokenId);\r\n\r\n        delete _activeChildren[tokenId];\r\n        delete _pendingChildren[tokenId];\r\n        delete _tokenApprovals[tokenId][rootOwner];\r\n\r\n        uint256 pendingRecursiveBurns;\r\n        uint256 totalChildBurns;\r\n\r\n        uint256 length = children.length; //gas savings\r\n        for (uint256 i; i < length; ) {\r\n            if (totalChildBurns >= maxChildrenBurns)\r\n                revert RMRKMaxRecursiveBurnsReached(\r\n                    children[i].contractAddress,\r\n                    children[i].tokenId\r\n                );\r\n            delete _childIsInActive[children[i].contractAddress][\r\n                children[i].tokenId\r\n            ];\r\n            unchecked {\r\n                // At this point we know pendingRecursiveBurns must be at least 1\r\n                pendingRecursiveBurns = maxChildrenBurns - totalChildBurns;\r\n            }\r\n            // We substract one to the next level to count for the token being burned, then add it again on returns\r\n            // This is to allow the behavior of 0 recursive burns meaning only the current token is deleted.\r\n            totalChildBurns +=\r\n                IERC7401(children[i].contractAddress).burn(\r\n                    children[i].tokenId,\r\n                    pendingRecursiveBurns - 1\r\n                ) +\r\n                1;\r\n            unchecked {\r\n                ++i;\r\n            }\r\n        }\r\n        // Can't remove before burning child since child will call back to get root owner\r\n        delete _RMRKOwners[tokenId];\r\n\r\n        emit Transfer(immediateOwner, address(0), tokenId);\r\n        emit NestTransfer(immediateOwner, address(0), parentId, 0, tokenId);\r\n\r\n        _afterTokenTransfer(immediateOwner, address(0), tokenId);\r\n        _afterNestedTokenTransfer(\r\n            immediateOwner,\r\n            address(0),\r\n            parentId,\r\n            0,\r\n            tokenId,\r\n            \"\"\r\n        );\r\n\r\n        return totalChildBurns;\r\n    }\r\n\r\n    ////////////////////////////////////////\r\n    //              APPROVALS\r\n    ////////////////////////////////////////\r\n\r\n    /**\r\n     * @notice Used to grant a one-time approval to manage one's token.\r\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\r\n     * @dev The approval is cleared when the token is transferred.\r\n     * @dev Only a single account can be approved at a time, so approving the zero address clears previous approvals.\r\n     * @dev Requirements:\r\n     *\r\n     * - The caller must own the token or be an approved operator.\r\n     * - `tokenId` must exist.\r\n     * @dev Emits an {Approval} event.\r\n     * @param to Address receiving the approval\r\n     * @param tokenId ID of the token for which the approval is being granted\r\n     */\r\n    function approve(address to, uint256 tokenId) public virtual {\r\n        address owner = ownerOf(tokenId);\r\n        if (to == owner) revert ERC721ApprovalToCurrentOwner();\r\n\r\n        if (_msgSender() != owner && !isApprovedForAll(owner, _msgSender()))\r\n            revert ERC721ApproveCallerIsNotOwnerNorApprovedForAll();\r\n\r\n        _approve(to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @notice Used to retrieve the account approved to manage given token.\r\n     * @dev Requirements:\r\n     *\r\n     *  - `tokenId` must exist.\r\n     * @param tokenId ID of the token to check for approval\r\n     * @return Address of the account approved to manage the token\r\n     */\r\n    function getApproved(\r\n        uint256 tokenId\r\n    ) public view virtual returns (address) {\r\n        _requireMinted(tokenId);\r\n\r\n        return _tokenApprovals[tokenId][ownerOf(tokenId)];\r\n    }\r\n\r\n    /**\r\n     * @notice Used to approve or remove `operator` as an operator for the caller.\r\n     * @dev Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\r\n     * @dev Requirements:\r\n     *\r\n     * - The `operator` cannot be the caller.\r\n     * @dev Emits an {ApprovalForAll} event.\r\n     * @param operator Address of the operator being managed\r\n     * @param approved A boolean value signifying whether the approval is being granted (`true`) or (`revoked`)\r\n     */\r\n    function setApprovalForAll(address operator, bool approved) public virtual {\r\n        if (_msgSender() == operator) revert ERC721ApproveToCaller();\r\n        _operatorApprovals[_msgSender()][operator] = approved;\r\n        emit ApprovalForAll(_msgSender(), operator, approved);\r\n    }\r\n\r\n    /**\r\n     * @notice Used to check if the given address is allowed to manage the tokens of the specified address.\r\n     * @param owner Address of the owner of the tokens\r\n     * @param operator Address being checked for approval\r\n     * @return A boolean value signifying whether the *operator* is allowed to manage the tokens of the *owner* (`true`)\r\n     *  or not (`false`)\r\n     */\r\n    function isApprovedForAll(\r\n        address owner,\r\n        address operator\r\n    ) public view virtual returns (bool) {\r\n        return _operatorApprovals[owner][operator];\r\n    }\r\n\r\n    /**\r\n     * @notice Used to grant an approval to manage a given token.\r\n     * @dev Emits an {Approval} event.\r\n     * @param to Address to which the approval is being granted\r\n     * @param tokenId ID of the token for which the approval is being granted\r\n     */\r\n    function _approve(address to, uint256 tokenId) internal virtual {\r\n        address owner = ownerOf(tokenId);\r\n        _tokenApprovals[tokenId][owner] = to;\r\n        emit Approval(owner, to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @notice Used to update the owner of the token and clear the approvals associated with the previous owner.\r\n     * @dev The `destinationId` should equal `0` if the new owner is an externally owned account.\r\n     * @param tokenId ID of the token being updated\r\n     * @param destinationId ID of the token to receive the given token\r\n     * @param to Address of account to receive the token\r\n     */\r\n    function _updateOwnerAndClearApprovals(\r\n        uint256 tokenId,\r\n        uint256 destinationId,\r\n        address to\r\n    ) internal {\r\n        _RMRKOwners[tokenId] = DirectOwner({\r\n            ownerAddress: to,\r\n            tokenId: destinationId\r\n        });\r\n\r\n        // Clear approvals from the previous owner\r\n        _approve(address(0), tokenId);\r\n        _cleanApprovals(tokenId);\r\n    }\r\n\r\n    /**\r\n     * @notice Used to remove approvals for the current owner of the given token.\r\n     * @param tokenId ID of the token to clear the approvals for\r\n     */\r\n    function _cleanApprovals(uint256 tokenId) internal virtual {}\r\n\r\n    ////////////////////////////////////////\r\n    //              UTILS\r\n    ////////////////////////////////////////\r\n\r\n    /**\r\n     * @notice Used to check whether the given account is allowed to manage the given token.\r\n     * @dev Requirements:\r\n     *\r\n     *  - `tokenId` must exist.\r\n     * @param spender Address that is being checked for approval\r\n     * @param tokenId ID of the token being checked\r\n     * @return A boolean value indicating whether the `spender` is approved to manage the given token\r\n     */\r\n    function _isApprovedOrOwner(\r\n        address spender,\r\n        uint256 tokenId\r\n    ) internal view virtual returns (bool) {\r\n        address owner = ownerOf(tokenId);\r\n        return (spender == owner ||\r\n            isApprovedForAll(owner, spender) ||\r\n            getApproved(tokenId) == spender);\r\n    }\r\n\r\n    /**\r\n     * @notice Used to check whether the account is approved to manage the token or its direct owner.\r\n     * @param spender Address that is being checked for approval or direct ownership\r\n     * @param tokenId ID of the token being checked\r\n     * @return A boolean value indicating whether the `spender` is approved to manage the given token or its\r\n     *  direct owner\r\n     */\r\n    function _isApprovedOrDirectOwner(\r\n        address spender,\r\n        uint256 tokenId\r\n    ) internal view virtual returns (bool) {\r\n        (address owner, uint256 parentId, ) = directOwnerOf(tokenId);\r\n        // When the parent is an NFT, only it can do operations\r\n        if (parentId != 0) {\r\n            return (spender == owner);\r\n        }\r\n        // Otherwise, the owner or approved address can\r\n        return (spender == owner ||\r\n            isApprovedForAll(owner, spender) ||\r\n            getApproved(tokenId) == spender);\r\n    }\r\n\r\n    /**\r\n     * @notice Used to enforce that the given token has been minted.\r\n     * @dev Reverts if the `tokenId` has not been minted yet.\r\n     * @dev The validation checks whether the owner of a given token is a `0x0` address and considers it not minted if\r\n     *  it is. This means that both tokens that haven't been minted yet as well as the ones that have already been\r\n     *  burned will cause the transaction to be reverted.\r\n     * @param tokenId ID of the token to check\r\n     */\r\n    function _requireMinted(uint256 tokenId) internal view virtual {\r\n        if (!_exists(tokenId)) revert ERC721InvalidTokenId();\r\n    }\r\n\r\n    /**\r\n     * @notice Used to check whether the given token exists.\r\n     * @dev Tokens start existing when they are minted (`_mint`) and stop existing when they are burned (`_burn`).\r\n     * @param tokenId ID of the token being checked\r\n     * @return A boolean value signifying whether the token exists\r\n     */\r\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\r\n        return _RMRKOwners[tokenId].ownerAddress != address(0);\r\n    }\r\n\r\n    /**\r\n     * @notice Used to invoke {IERC721Receiver-onERC721Received} on a target address.\r\n     * @dev The call is not executed if the target address is not a contract.\r\n     * @param from Address representing the previous owner of the given token\r\n     * @param to Yarget address that will receive the tokens\r\n     * @param tokenId ID of the token to be transferred\r\n     * @param data Optional data to send along with the call\r\n     * @return Boolean value signifying whether the call correctly returned the expected magic value\r\n     */\r\n    function _checkOnERC721Received(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory data\r\n    ) private returns (bool) {\r\n        if (to.isContract()) {\r\n            try\r\n                IERC721Receiver(to).onERC721Received(\r\n                    _msgSender(),\r\n                    from,\r\n                    tokenId,\r\n                    data\r\n                )\r\n            returns (bytes4 retval) {\r\n                return retval == IERC721Receiver.onERC721Received.selector;\r\n            } catch (bytes memory reason) {\r\n                if (reason.length == uint256(0)) {\r\n                    revert ERC721TransferToNonReceiverImplementer();\r\n                } else {\r\n                    /// @solidity memory-safe-assembly\r\n                    assembly {\r\n                        revert(add(32, reason), mload(reason))\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            return true;\r\n        }\r\n    }\r\n\r\n    ////////////////////////////////////////\r\n    //      CHILD MANAGEMENT PUBLIC\r\n    ////////////////////////////////////////\r\n\r\n    /**\r\n     * @inheritdoc IERC7401\r\n     */\r\n    function addChild(\r\n        uint256 parentId,\r\n        uint256 childId,\r\n        bytes memory data\r\n    ) public virtual {\r\n        _requireMinted(parentId);\r\n\r\n        address childAddress = _msgSender();\r\n        if (!childAddress.isContract()) revert RMRKIsNotContract();\r\n\r\n        Child memory child = Child({\r\n            contractAddress: childAddress,\r\n            tokenId: childId\r\n        });\r\n\r\n        _beforeAddChild(parentId, childAddress, childId, data);\r\n\r\n        uint256 length = pendingChildrenOf(parentId).length;\r\n\r\n        if (length < 128) {\r\n            _pendingChildren[parentId].push(child);\r\n        } else {\r\n            revert RMRKMaxPendingChildrenReached();\r\n        }\r\n\r\n        // Previous length matches the index for the new child\r\n        emit ChildProposed(parentId, length, childAddress, childId);\r\n\r\n        _afterAddChild(parentId, childAddress, childId, data);\r\n    }\r\n\r\n    /**\r\n     * @inheritdoc IERC7401\r\n     */\r\n    function acceptChild(\r\n        uint256 parentId,\r\n        uint256 childIndex,\r\n        address childAddress,\r\n        uint256 childId\r\n    ) public virtual onlyApprovedOrOwner(parentId) {\r\n        _acceptChild(parentId, childIndex, childAddress, childId);\r\n    }\r\n\r\n    /**\r\n     * @notice Used to accept a pending child token for a given parent token.\r\n     * @dev This moves the child token from parent token's pending child tokens array into the active child tokens\r\n     *  array.\r\n     * @dev Requirements:\r\n     *\r\n     *  - `tokenId` must exist\r\n     *  - `index` must be in range of the pending children array\r\n     * @dev Emits ***ChildAccepted*** event.\r\n     * @param parentId ID of the parent token for which the child token is being accepted\r\n     * @param childIndex Index of a child tokem in the given parent's pending children array\r\n     * @param childAddress Address of the collection smart contract of the child token expected to be located at the\r\n     *  specified index of the given parent token's pending children array\r\n     * @param childId ID of the child token expected to be located at the specified index of the given parent token's\r\n     *  pending children array\r\n     */\r\n    function _acceptChild(\r\n        uint256 parentId,\r\n        uint256 childIndex,\r\n        address childAddress,\r\n        uint256 childId\r\n    ) internal virtual {\r\n        Child memory child = pendingChildOf(parentId, childIndex);\r\n        _checkExpectedChild(child, childAddress, childId);\r\n        if (_childIsInActive[childAddress][childId] != 0)\r\n            revert RMRKChildAlreadyExists();\r\n\r\n        _beforeAcceptChild(parentId, childIndex, childAddress, childId);\r\n\r\n        // Remove from pending:\r\n        _removeChildByIndex(_pendingChildren[parentId], childIndex);\r\n\r\n        // Add to active:\r\n        _activeChildren[parentId].push(child);\r\n        _childIsInActive[childAddress][childId] = 1; // We use 1 as true\r\n\r\n        emit ChildAccepted(parentId, childIndex, childAddress, childId);\r\n\r\n        _afterAcceptChild(parentId, childIndex, childAddress, childId);\r\n    }\r\n\r\n    /**\r\n     * @inheritdoc IERC7401\r\n     */\r\n    function rejectAllChildren(\r\n        uint256 tokenId,\r\n        uint256 maxRejections\r\n    ) public virtual onlyApprovedOrOwner(tokenId) {\r\n        _rejectAllChildren(tokenId, maxRejections);\r\n    }\r\n\r\n    /**\r\n     * @notice Used to reject all pending children of a given parent token.\r\n     * @dev Removes the children from the pending array mapping.\r\n     * @dev This does not update the ownership storage data on children. If necessary, ownership can be reclaimed by the\r\n     *  rootOwner of the previous parent.\r\n     * @dev Requirements:\r\n     *\r\n     *  - `tokenId` must exist\r\n     * @dev Emits ***AllChildrenRejected*** event.\r\n     * @param tokenId ID of the parent token for which to reject all of the pending tokens.\r\n     * @param maxRejections Maximum number of expected children to reject, used to prevent from rejecting children which\r\n     *  arrive just before this operation.\r\n     */\r\n    function _rejectAllChildren(\r\n        uint256 tokenId,\r\n        uint256 maxRejections\r\n    ) internal virtual {\r\n        if (_pendingChildren[tokenId].length > maxRejections)\r\n            revert RMRKUnexpectedNumberOfChildren();\r\n\r\n        _beforeRejectAllChildren(tokenId);\r\n        delete _pendingChildren[tokenId];\r\n        emit AllChildrenRejected(tokenId);\r\n        _afterRejectAllChildren(tokenId);\r\n    }\r\n\r\n    /**\r\n     * @inheritdoc IERC7401\r\n     */\r\n    function transferChild(\r\n        uint256 tokenId,\r\n        address to,\r\n        uint256 destinationId,\r\n        uint256 childIndex,\r\n        address childAddress,\r\n        uint256 childId,\r\n        bool isPending,\r\n        bytes memory data\r\n    ) public virtual onlyApprovedOrOwner(tokenId) {\r\n        _transferChild(\r\n            tokenId,\r\n            to,\r\n            destinationId,\r\n            childIndex,\r\n            childAddress,\r\n            childId,\r\n            isPending,\r\n            data\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @notice Used to transfer a child token from a given parent token.\r\n     * @dev When transferring a child token, the owner of the token is set to `to`, or is not updated in the event of\r\n     *  `to` being the `0x0` address.\r\n     * @dev Requirements:\r\n     *\r\n     *  - `tokenId` must exist.\r\n     * @dev Emits {ChildTransferred} event.\r\n     * @param tokenId ID of the parent token from which the child token is being transferred\r\n     * @param to Address to which to transfer the token to\r\n     * @param destinationId ID of the token to receive this child token (MUST be 0 if the destination is not a token)\r\n     * @param childIndex Index of a token we are transferring, in the array it belongs to (can be either active array or\r\n     *  pending array)\r\n     * @param childAddress Address of the child token's collection smart contract.\r\n     * @param childId ID of the child token in its own collection smart contract.\r\n     * @param isPending A boolean value indicating whether the child token being transferred is in the pending array of\r\n     *  the parent token (`true`) or in the active array (`false`)\r\n     * @param data Additional data with no specified format, sent in call to `_to`\r\n     */\r\n    function _transferChild(\r\n        uint256 tokenId,\r\n        address to,\r\n        uint256 destinationId, // newParentId\r\n        uint256 childIndex,\r\n        address childAddress,\r\n        uint256 childId,\r\n        bool isPending,\r\n        bytes memory data\r\n    ) internal virtual {\r\n        Child memory child;\r\n        if (isPending) {\r\n            child = pendingChildOf(tokenId, childIndex);\r\n        } else {\r\n            child = childOf(tokenId, childIndex);\r\n        }\r\n        _checkExpectedChild(child, childAddress, childId);\r\n\r\n        _beforeTransferChild(\r\n            tokenId,\r\n            childIndex,\r\n            childAddress,\r\n            childId,\r\n            isPending,\r\n            data\r\n        );\r\n\r\n        if (isPending) {\r\n            _removeChildByIndex(_pendingChildren[tokenId], childIndex);\r\n        } else {\r\n            delete _childIsInActive[childAddress][childId];\r\n            _removeChildByIndex(_activeChildren[tokenId], childIndex);\r\n        }\r\n\r\n        if (to != address(0)) {\r\n            if (destinationId == uint256(0)) {\r\n                IERC721(childAddress).safeTransferFrom(\r\n                    address(this),\r\n                    to,\r\n                    childId,\r\n                    data\r\n                );\r\n            } else {\r\n                // Destination is an NFT\r\n                IERC7401(child.contractAddress).nestTransferFrom(\r\n                    address(this),\r\n                    to,\r\n                    child.tokenId,\r\n                    destinationId,\r\n                    data\r\n                );\r\n            }\r\n        }\r\n\r\n        emit ChildTransferred(\r\n            tokenId,\r\n            childIndex,\r\n            childAddress,\r\n            childId,\r\n            isPending,\r\n            to == address(0)\r\n        );\r\n        _afterTransferChild(\r\n            tokenId,\r\n            childIndex,\r\n            childAddress,\r\n            childId,\r\n            isPending,\r\n            data\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @notice Used to verify that the child being accessed is the intended child.\r\n     * @dev The Child struct consists of the following values:\r\n     *  [\r\n     *      tokenId,\r\n     *      contractAddress\r\n     *  ]\r\n     * @param child A Child struct of a child being accessed\r\n     * @param expectedAddress The address expected to be the one of the child\r\n     * @param expectedId The token ID expected to be the one of the child\r\n     */\r\n    function _checkExpectedChild(\r\n        Child memory child,\r\n        address expectedAddress,\r\n        uint256 expectedId\r\n    ) private pure {\r\n        if (\r\n            expectedAddress != child.contractAddress ||\r\n            expectedId != child.tokenId\r\n        ) revert RMRKUnexpectedChildId();\r\n    }\r\n\r\n    ////////////////////////////////////////\r\n    //      CHILD MANAGEMENT GETTERS\r\n    ////////////////////////////////////////\r\n\r\n    /**\r\n     * @inheritdoc IERC7401\r\n     */\r\n\r\n    function childrenOf(\r\n        uint256 parentId\r\n    ) public view virtual returns (Child[] memory) {\r\n        Child[] memory children = _activeChildren[parentId];\r\n        return children;\r\n    }\r\n\r\n    /**\r\n     * @inheritdoc IERC7401\r\n     */\r\n\r\n    function pendingChildrenOf(\r\n        uint256 parentId\r\n    ) public view virtual returns (Child[] memory) {\r\n        Child[] memory pendingChildren = _pendingChildren[parentId];\r\n        return pendingChildren;\r\n    }\r\n\r\n    /**\r\n     * @inheritdoc IERC7401\r\n     */\r\n    function childOf(\r\n        uint256 parentId,\r\n        uint256 index\r\n    ) public view virtual returns (Child memory) {\r\n        if (childrenOf(parentId).length <= index)\r\n            revert RMRKChildIndexOutOfRange();\r\n        Child memory child = _activeChildren[parentId][index];\r\n        return child;\r\n    }\r\n\r\n    /**\r\n     * @inheritdoc IERC7401\r\n     */\r\n    function pendingChildOf(\r\n        uint256 parentId,\r\n        uint256 index\r\n    ) public view virtual returns (Child memory) {\r\n        if (pendingChildrenOf(parentId).length <= index)\r\n            revert RMRKPendingChildIndexOutOfRange();\r\n        Child memory child = _pendingChildren[parentId][index];\r\n        return child;\r\n    }\r\n\r\n    // HOOKS\r\n\r\n    /**\r\n     * @notice Hook that is called before any token transfer. This includes minting and burning.\r\n     * @dev Calling conditions:\r\n     *\r\n     *  - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be transferred to `to`.\r\n     *  - When `from` is zero, `tokenId` will be minted to `to`.\r\n     *  - When `to` is zero, ``from``'s `tokenId` will be burned.\r\n     *  - `from` and `to` are never zero at the same time.\r\n     *\r\n     *  To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     * @param from Address from which the token is being transferred\r\n     * @param to Address to which the token is being transferred\r\n     * @param tokenId ID of the token being transferred\r\n     */\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) internal virtual {}\r\n\r\n    /**\r\n     * @notice Hook that is called after any transfer of tokens. This includes minting and burning.\r\n     * @dev Calling conditions:\r\n     *\r\n     *  - When `from` and `to` are both non-zero.\r\n     *  - `from` and `to` are never zero at the same time.\r\n     *\r\n     *  To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     * @param from Address from which the token has been transferred\r\n     * @param to Address to which the token has been transferred\r\n     * @param tokenId ID of the token that has been transferred\r\n     */\r\n    function _afterTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) internal virtual {}\r\n\r\n    /**\r\n     * @notice Hook that is called before nested token transfer.\r\n     * @dev To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     * @param from Address from which the token is being transferred\r\n     * @param to Address to which the token is being transferred\r\n     * @param fromTokenId ID of the token from which the given token is being transferred\r\n     * @param toTokenId ID of the token to which the given token is being transferred\r\n     * @param tokenId ID of the token being transferred\r\n     * @param data Additional data with no specified format, sent in the addChild call\r\n     */\r\n    function _beforeNestedTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 fromTokenId,\r\n        uint256 toTokenId,\r\n        uint256 tokenId,\r\n        bytes memory data\r\n    ) internal virtual {}\r\n\r\n    /**\r\n     * @notice Hook that is called after nested token transfer.\r\n     * @dev To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     * @param from Address from which the token was transferred\r\n     * @param to Address to which the token was transferred\r\n     * @param fromTokenId ID of the token from which the given token was transferred\r\n     * @param toTokenId ID of the token to which the given token was transferred\r\n     * @param tokenId ID of the token that was transferred\r\n     * @param data Additional data with no specified format, sent in the addChild call\r\n     */\r\n    function _afterNestedTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 fromTokenId,\r\n        uint256 toTokenId,\r\n        uint256 tokenId,\r\n        bytes memory data\r\n    ) internal virtual {}\r\n\r\n    /**\r\n     * @notice Hook that is called before a child is added to the pending tokens array of a given token.\r\n     * @dev The Child struct consists of the following values:\r\n     *  [\r\n     *      tokenId,\r\n     *      contractAddress\r\n     *  ]\r\n     * @dev To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     * @param tokenId ID of the token that will receive a new pending child token\r\n     * @param childAddress Address of the collection smart contract of the child token expected to be located at the\r\n     *  specified index of the given parent token's pending children array\r\n     * @param childId ID of the child token expected to be located at the specified index of the given parent token's\r\n     *  pending children array\r\n     * @param data Additional data with no specified format\r\n     */\r\n    function _beforeAddChild(\r\n        uint256 tokenId,\r\n        address childAddress,\r\n        uint256 childId,\r\n        bytes memory data\r\n    ) internal virtual {}\r\n\r\n    /**\r\n     * @notice Hook that is called after a child is added to the pending tokens array of a given token.\r\n     * @dev The Child struct consists of the following values:\r\n     *  [\r\n     *      tokenId,\r\n     *      contractAddress\r\n     *  ]\r\n     * @dev To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     * @param tokenId ID of the token that has received a new pending child token\r\n     * @param childAddress Address of the collection smart contract of the child token expected to be located at the\r\n     *  specified index of the given parent token's pending children array\r\n     * @param childId ID of the child token expected to be located at the specified index of the given parent token's\r\n     *  pending children array\r\n     * @param data Additional data with no specified format\r\n     */\r\n    function _afterAddChild(\r\n        uint256 tokenId,\r\n        address childAddress,\r\n        uint256 childId,\r\n        bytes memory data\r\n    ) internal virtual {}\r\n\r\n    /**\r\n     * @notice Hook that is called before a child is accepted to the active tokens array of a given token.\r\n     * @dev The Child struct consists of the following values:\r\n     *  [\r\n     *      tokenId,\r\n     *      contractAddress\r\n     *  ]\r\n     * @dev To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     * @param parentId ID of the token that will accept a pending child token\r\n     * @param childIndex Index of the child token to accept in the given parent token's pending children array\r\n     * @param childAddress Address of the collection smart contract of the child token expected to be located at the\r\n     *  specified index of the given parent token's pending children array\r\n     * @param childId ID of the child token expected to be located at the specified index of the given parent token's\r\n     *  pending children array\r\n     */\r\n    function _beforeAcceptChild(\r\n        uint256 parentId,\r\n        uint256 childIndex,\r\n        address childAddress,\r\n        uint256 childId\r\n    ) internal virtual {}\r\n\r\n    /**\r\n     * @notice Hook that is called after a child is accepted to the active tokens array of a given token.\r\n     * @dev The Child struct consists of the following values:\r\n     *  [\r\n     *      tokenId,\r\n     *      contractAddress\r\n     *  ]\r\n     * @dev To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     * @param parentId ID of the token that has accepted a pending child token\r\n     * @param childIndex Index of the child token that was accpeted in the given parent token's pending children array\r\n     * @param childAddress Address of the collection smart contract of the child token that was expected to be located\r\n     *  at the specified index of the given parent token's pending children array\r\n     * @param childId ID of the child token that was expected to be located at the specified index of the given parent\r\n     *  token's pending children array\r\n     */\r\n    function _afterAcceptChild(\r\n        uint256 parentId,\r\n        uint256 childIndex,\r\n        address childAddress,\r\n        uint256 childId\r\n    ) internal virtual {}\r\n\r\n    /**\r\n     * @notice Hook that is called before a child is transferred from a given child token array of a given token.\r\n     * @dev The Child struct consists of the following values:\r\n     *  [\r\n     *      tokenId,\r\n     *      contractAddress\r\n     *  ]\r\n     * @dev To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     * @param tokenId ID of the token that will transfer a child token\r\n     * @param childIndex Index of the child token that will be transferred from the given parent token's children array\r\n     * @param childAddress Address of the collection smart contract of the child token that is expected to be located\r\n     *  at the specified index of the given parent token's children array\r\n     * @param childId ID of the child token that is expected to be located at the specified index of the given parent\r\n     *  token's children array\r\n     * @param isPending A boolean value signifying whether the child token is being transferred from the pending child\r\n     *  tokens array (`true`) or from the active child tokens array (`false`)\r\n     * @param data Additional data with no specified format, sent in the addChild call\r\n     */\r\n    function _beforeTransferChild(\r\n        uint256 tokenId,\r\n        uint256 childIndex,\r\n        address childAddress,\r\n        uint256 childId,\r\n        bool isPending,\r\n        bytes memory data\r\n    ) internal virtual {}\r\n\r\n    /**\r\n     * @notice Hook that is called after a child is transferred from a given child token array of a given token.\r\n     * @dev The Child struct consists of the following values:\r\n     *  [\r\n     *      tokenId,\r\n     *      contractAddress\r\n     *  ]\r\n     * @dev To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     * @param tokenId ID of the token that has transferred a child token\r\n     * @param childIndex Index of the child token that was transferred from the given parent token's children array\r\n     * @param childAddress Address of the collection smart contract of the child token that was expected to be located\r\n     *  at the specified index of the given parent token's children array\r\n     * @param childId ID of the child token that was expected to be located at the specified index of the given parent\r\n     *  token's children array\r\n     * @param isPending A boolean value signifying whether the child token was transferred from the pending child tokens\r\n     *  array (`true`) or from the active child tokens array (`false`)\r\n     * @param data Additional data with no specified format, sent in the addChild call\r\n     */\r\n    function _afterTransferChild(\r\n        uint256 tokenId,\r\n        uint256 childIndex,\r\n        address childAddress,\r\n        uint256 childId,\r\n        bool isPending,\r\n        bytes memory data\r\n    ) internal virtual {}\r\n\r\n    /**\r\n     * @notice Hook that is called before a pending child tokens array of a given token is cleared.\r\n     * @dev To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     * @param tokenId ID of the token that will reject all of the pending child tokens\r\n     */\r\n    function _beforeRejectAllChildren(uint256 tokenId) internal virtual {}\r\n\r\n    /**\r\n     * @notice Hook that is called after a pending child tokens array of a given token is cleared.\r\n     * @dev To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     * @param tokenId ID of the token that has rejected all of the pending child tokens\r\n     */\r\n    function _afterRejectAllChildren(uint256 tokenId) internal virtual {}\r\n\r\n    // HELPERS\r\n\r\n    /**\r\n     * @notice Used to remove a specified child token form an array using its index within said array.\r\n     * @dev The caller must ensure that the length of the array is valid compared to the index passed.\r\n     * @dev The Child struct consists of the following values:\r\n     *  [\r\n     *      tokenId,\r\n     *      contractAddress\r\n     *  ]\r\n     * @param array An array od Child struct containing info about the child tokens in a given child tokens array\r\n     * @param index An index of the child token to remove in the accompanying array\r\n     */\r\n    function _removeChildByIndex(Child[] storage array, uint256 index) private {\r\n        array[index] = array[array.length - 1];\r\n        array.pop();\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\r\n * @dev See https://eips.ethereum.org/EIPS/eip-721\r\n */\r\ninterface IERC721Metadata is IERC721 {\r\n    /**\r\n     * @dev Returns the token collection name.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the token collection symbol.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\r\n     */\r\n    function tokenURI(uint256 tokenId) external view returns (string memory);\r\n}\r\n\r\n// File: @rmrk-team/evm-contracts/contracts/implementations/abstract/RMRKAbstractNestable.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.21;\r\n\r\n\r\n\r\n\r\n/**\r\n * @title RMRKAbstractNestable\r\n * @author RMRK team\r\n * @notice Abstract implementation of RMRK nestable module.\r\n */\r\nabstract contract RMRKAbstractNestable is RMRKImplementationBase, RMRKNestable {\r\n    /**\r\n     * @inheritdoc IERC165\r\n     */\r\n    function supportsInterface(\r\n        bytes4 interfaceId\r\n    ) public view virtual override returns (bool) {\r\n        return\r\n            super.supportsInterface(interfaceId) ||\r\n            interfaceId == type(IERC2981).interfaceId ||\r\n            interfaceId == type(IERC721Metadata).interfaceId ||\r\n            interfaceId == RMRK_INTERFACE;\r\n    }\r\n\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) internal virtual override {\r\n        super._beforeTokenTransfer(from, to, tokenId);\r\n        if (to == address(0)) {\r\n            unchecked {\r\n                _totalSupply -= 1;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\npragma solidity ^0.8.21;\r\n\r\ncontract YesPFP is RMRKAbstractNestable, RMRKTokenURIEnumerated {\r\n    uint256 private _pricePerMint;\r\n    address private _erc20TokenAddress;\r\n\r\n    constructor(\r\n      string memory collectionMetadata,\r\n      uint256 maxSupply,\r\n      address royaltyRecipient,\r\n      uint16 royaltyPercentageBps,\r\n      string memory baseTokenURI,\r\n      uint256 pricePerMint_,\r\n      address erc20TokenAddress_\r\n    )\r\n        RMRKImplementationBase(\r\n            \"Yes PFP\",\r\n            \"YES\",\r\n            collectionMetadata,\r\n            maxSupply,\r\n            royaltyRecipient,\r\n            royaltyPercentageBps\r\n        )\r\n      RMRKTokenURIEnumerated(baseTokenURI)\r\n    {\r\n      _pricePerMint = pricePerMint_;\r\n      _erc20TokenAddress = erc20TokenAddress_;\r\n    }\r\n\r\n     // Methods\r\n    // Suggested Mint Functions\r\n    /**\r\n     * @notice Used to mint the desired number of tokens to the specified address.\r\n     * @dev The \"data\" value of the \"_safeMint\" method is set to an empty value.\r\n     * @dev Can only be called while the open sale is open.\r\n     * @param to Address to which to mint the token\r\n     * @param numToMint Number of tokens to mint\r\n     * @return The ID of the first token to be minted in the current minting cycle\r\n     */\r\n    function mint(\r\n        address to,\r\n        uint256 numToMint\r\n    ) public returns (uint256) {\r\n        (uint256 nextToken, uint256 totalSupplyOffset) = _prepareMint(\r\n            numToMint\r\n        );\r\n        _chargeMints(numToMint);\r\n\r\n        for (uint256 i = nextToken; i < totalSupplyOffset; ) {\r\n            _safeMint(to, i, \"\");\r\n            unchecked {\r\n                ++i;\r\n            }\r\n        }\r\n\r\n        return nextToken;\r\n    }\r\n        \r\n    /**\r\n     * @notice Used to mint a desired number of child tokens to a given parent token.\r\n     * @dev The \"data\" value of the \"_safeMint\" method is set to an empty value.\r\n     * @dev Can only be called while the open sale is open.\r\n     * @param to Address of the collection smart contract of the token into which to mint the child token\r\n     * @param numToMint Number of tokens to mint\r\n     * @param destinationId ID of the token into which to mint the new child token\r\n     * @return The ID of the first token to be minted in the current minting cycle\r\n     */\r\n    function nestMint(\r\n        address to,\r\n        uint256 numToMint,\r\n        uint256 destinationId\r\n    ) public returns (uint256) {\r\n        (uint256 nextToken, uint256 totalSupplyOffset) = _prepareMint(\r\n            numToMint\r\n        );\r\n        _chargeMints(numToMint);\r\n\r\n        for (uint256 i = nextToken; i < totalSupplyOffset; ) {\r\n            _nestMint(to, i, destinationId, \"\");\r\n            unchecked {\r\n                ++i;\r\n            }\r\n        }\r\n\r\n        return nextToken;\r\n    }\r\n    \r\n        /**\r\n         * @notice Used to charge the minter for the amount of tokens they desire to mint.\r\n         * @param numToMint The amount of tokens to charge the caller for\r\n         */\r\n        function _chargeMints(uint256 numToMint) internal {\r\n            uint256 price = numToMint * _pricePerMint;\r\n            IERC20(_erc20TokenAddress).transferFrom(\r\n                msg.sender,\r\n                address(0x000000000000000000000000000000000000dEaD),\r\n                price\r\n            );\r\n        }\r\n    \r\n        /**\r\n         * @notice Used to retrieve the address of the ERC20 token this smart contract supports.\r\n         * @return Address of the ERC20 token's smart contract\r\n         */\r\n        function YESTokenAddress() public view virtual returns (address) {\r\n            return _erc20TokenAddress;\r\n        }\r\n    \r\n        /**\r\n         * @notice Used to retrieve the price per mint.\r\n         * @return The price per mint of a single token expressed in the lowest denomination of a native currency\r\n         */\r\n        function pricePerMint() public view returns (uint256) {\r\n            return _pricePerMint;\r\n        }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"collectionMetadata\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"maxSupply\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"royaltyRecipient\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"royaltyPercentageBps\",\"type\":\"uint16\"},{\"internalType\":\"string\",\"name\":\"baseTokenURI\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"pricePerMint_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"erc20TokenAddress_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ERC721AddressZeroIsNotaValidOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC721ApprovalToCurrentOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC721ApproveCallerIsNotOwnerNorApprovedForAll\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC721ApproveToCaller\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC721InvalidTokenId\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC721MintToTheZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC721NotApprovedOrOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC721TokenAlreadyMinted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC721TransferFromIncorrectOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC721TransferToNonReceiverImplementer\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC721TransferToTheZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RMRKChildAlreadyExists\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RMRKChildIndexOutOfRange\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RMRKIdZeroForbidden\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RMRKIsNotContract\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RMRKMaxPendingChildrenReached\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"childContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"childId\",\"type\":\"uint256\"}],\"name\":\"RMRKMaxRecursiveBurnsReached\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RMRKMintOverMax\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RMRKMintToNonRMRKNestableImplementer\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RMRKMintZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RMRKNestableTooDeep\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RMRKNestableTransferToDescendant\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RMRKNestableTransferToNonRMRKNestableImplementer\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RMRKNestableTransferToSelf\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RMRKNewContributorIsZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RMRKNewOwnerIsZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RMRKNotApprovedOrDirectOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RMRKNotOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RMRKPendingChildIndexOutOfRange\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RMRKRoyaltiesTooHigh\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RMRKUnexpectedChildId\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RMRKUnexpectedNumberOfChildren\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"AllChildrenRejected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"childIndex\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"childAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"childId\",\"type\":\"uint256\"}],\"name\":\"ChildAccepted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"childIndex\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"childAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"childId\",\"type\":\"uint256\"}],\"name\":\"ChildProposed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"childIndex\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"childAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"childId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"fromPending\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"toZero\",\"type\":\"bool\"}],\"name\":\"ChildTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"contributor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isContributor\",\"type\":\"bool\"}],\"name\":\"ContributorUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fromTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"toTokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"NestTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"RMRK_INTERFACE\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VERSION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"YESTokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"parentId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"childIndex\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"childAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"childId\",\"type\":\"uint256\"}],\"name\":\"acceptChild\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"parentId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"childId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"addChild\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxChildrenBurns\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"parentId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"childOf\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"}],\"internalType\":\"struct IERC7401.Child\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"parentId\",\"type\":\"uint256\"}],\"name\":\"childrenOf\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"}],\"internalType\":\"struct IERC7401.Child[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collectionMetadata\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"directOwnerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRoyaltyPercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRoyaltyRecipient\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contributor\",\"type\":\"address\"}],\"name\":\"isContributor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contributor\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"grantRole\",\"type\":\"bool\"}],\"name\":\"manageContributor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"numToMint\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"numToMint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"destinationId\",\"type\":\"uint256\"}],\"name\":\"nestMint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"destinationId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"nestTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"parentId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"pendingChildOf\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"}],\"internalType\":\"struct IERC7401.Child\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"parentId\",\"type\":\"uint256\"}],\"name\":\"pendingChildrenOf\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"}],\"internalType\":\"struct IERC7401.Child[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pricePerMint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxRejections\",\"type\":\"uint256\"}],\"name\":\"rejectAllChildren\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"salePrice\",\"type\":\"uint256\"}],\"name\":\"royaltyInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"royaltyAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAssets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"destinationId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"childIndex\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"childAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"childId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isPending\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"transferChild\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newRoyaltyRecipient\",\"type\":\"address\"}],\"name\":\"updateRoyaltyRecipient\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "YesPFP", "CompilerVersion": "v0.8.22+commit.4fc1097e", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "00000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000002710000000000000000000000000b13c603056a1f04d6889976d24f04fda04b27b1c000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000001400000000000000000000000000000000000000000000000000000000000000001000000000000000000000000fc10cd3895f2c66d6639ec33ae6360d6cfca7d6d000000000000000000000000000000000000000000000000000000000000002668747470733a2f2f796573746f6b656e2e78797a2f6d657461646174612f6c6f676f2e706e670000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001e68747470733a2f2f796573746f6b656e2e78797a2f6d657461646174612f0000", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://1463ca57dd4bdbb435ffb56927f3a7eb04a1ea2ea9ec1cffcfadac33054c7622"}