{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\n//Contract to manage DRBT Memberships\r\n\r\npragma solidity 0.8.22;\r\n\r\ncontract DRBT_Membership {\r\n    address public owner;\r\n    struct MembershipOption {\r\n        uint256 ethAmount;\r\n        uint256 validityPeriod;\r\n    }\r\n    mapping(uint256 => MembershipOption) public membershipOptions; // Option ID to MembershipOption\r\n    mapping(address => mapping(uint256 => uint256)) public userExpirations; // User address to (Option ID to Expiration Timestamp)\r\n    uint256 public numberOfOptions;\r\n\r\n    constructor() {\r\n        owner = msg.sender;\r\n        // Initialize with default options\r\n        membershipOptions[1] = MembershipOption(0.15 ether, 31 days);\r\n        membershipOptions[2] = MembershipOption(0.05 ether, 31 days);\r\n        membershipOptions[3] = MembershipOption(0.2 ether, 31 days);\r\n        membershipOptions[4] = MembershipOption(0.07 ether, 31 days);\r\n        membershipOptions[5] = MembershipOption(0.05 ether, 3 days);\r\n        numberOfOptions = 5;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"Only the owner can perform this action\");\r\n        _;\r\n    }\r\n\r\n    // Function buy a membership\r\n    function buyMembership(uint256 optionId) external payable {\r\n        require(optionId > 0 && optionId <= numberOfOptions, \"Invalid option ID\");\r\n        MembershipOption memory option = membershipOptions[optionId];\r\n        require(msg.value == option.ethAmount, \"Incorrect ETH amount sent\");\r\n\r\n        uint256 expiration = userExpirations[msg.sender][optionId];\r\n        if (expiration == 0 || expiration < block.timestamp) {\r\n            userExpirations[msg.sender][optionId] = block.timestamp + option.validityPeriod;\r\n        } else {\r\n            userExpirations[msg.sender][optionId] += option.validityPeriod;\r\n        }\r\n    }\r\n\r\n    // Function to check memberships for a wallet\r\n    function checkMembership(address userAddress)\r\n        external\r\n        view\r\n        returns (uint256[] memory, uint256[] memory)\r\n    {\r\n        uint256[] memory activeOptionIds = new uint256[](numberOfOptions);\r\n        uint256[] memory expirationTimestamps = new uint256[](numberOfOptions);\r\n        uint256 count = 0;\r\n\r\n        for (uint256 i = 1; i <= numberOfOptions; i++) {\r\n            if (userExpirations[userAddress][i] > block.timestamp) {\r\n                activeOptionIds[count] = i;\r\n                expirationTimestamps[count] = userExpirations[userAddress][i];\r\n                count++;\r\n            }\r\n        }\r\n\r\n        uint256[] memory validOptionIds = new uint256[](count);\r\n        uint256[] memory validExpirations = new uint256[](count);\r\n        for (uint256 j = 0; j < count; j++) {\r\n            validOptionIds[j] = activeOptionIds[j];\r\n            validExpirations[j] = expirationTimestamps[j];\r\n        }\r\n\r\n        return (validOptionIds, validExpirations);\r\n    }\r\n\r\n    // Function to set a membership option\r\n    function setMembershipOption(uint256 optionId, uint256 ethAmount, uint256 validityPeriod) external onlyOwner {\r\n        require(optionId > 0, \"Invalid option ID\");\r\n        membershipOptions[optionId] = MembershipOption(ethAmount, validityPeriod);\r\n        if (optionId > numberOfOptions) {\r\n            numberOfOptions = optionId;\r\n        }\r\n    }\r\n\r\n    // Function to manually add time to an option for a given wallet\r\n    function addTimeToMembership(address userAddress, uint256 optionId, uint256 additionalTime) external onlyOwner {\r\n        require(membershipOptions[optionId].validityPeriod > 0, \"Option does not exist\");\r\n\r\n        uint256 currentExpiration = userExpirations[userAddress][optionId];\r\n        if (currentExpiration == 0 || currentExpiration < block.timestamp) {\r\n            userExpirations[userAddress][optionId] = block.timestamp + additionalTime;\r\n        } else {\r\n            userExpirations[userAddress][optionId] += additionalTime;\r\n        }\r\n    }\r\n\r\n    function withdraw() external onlyOwner {\r\n        payable(owner).transfer(address(this).balance);\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"optionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"additionalTime\",\"type\":\"uint256\"}],\"name\":\"addTimeToMembership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"optionId\",\"type\":\"uint256\"}],\"name\":\"buyMembership\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"checkMembership\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"membershipOptions\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"ethAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"validityPeriod\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numberOfOptions\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"optionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ethAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"validityPeriod\",\"type\":\"uint256\"}],\"name\":\"setMembershipOption\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userExpirations\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "DRBT_Membership", "CompilerVersion": "v0.8.22+commit.4fc1097e", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://e0b5922019b92c4a6ab4520453eddb9e9f764a7d5122456d8f602ecb913bd672"}