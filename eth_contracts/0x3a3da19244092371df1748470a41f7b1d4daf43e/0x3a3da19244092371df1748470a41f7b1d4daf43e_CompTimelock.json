{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/Timelock.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BSD-3-Clause\\r\\n// solhint-disable private-vars-leading-underscore\\r\\n/**\\r\\n * Copyright 2020 Compound Labs, Inc.\\r\\n *\\r\\n * Redistribution and use in source and binary forms, with or without modification, are permitted provided that the\\r\\n * following conditions are met:\\r\\n *\\r\\n * 1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following\\r\\n *    disclaimer.\\r\\n *\\r\\n * 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the\\r\\n *    following disclaimer in the documentation and/or other materials provided with the distribution.\\r\\n *\\r\\n * 3. Neither the name of the copyright holder nor the names of its contributors may be used to endorse or promote\\r\\n *    products derived from this software without specific prior written permission.\\r\\n *\\r\\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \\\"AS IS\\\" AND ANY EXPRESS OR IMPLIED WARRANTIES,\\r\\n * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\\r\\n * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\\r\\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\\r\\n * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\\r\\n * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\\r\\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\\r\\n */\\r\\n\\r\\npragma solidity ^0.8.19;\\r\\n\\r\\ncontract CompTimelock {\\r\\n    event NewAdmin(address indexed newAdmin);\\r\\n    event NewPendingAdmin(address indexed newPendingAdmin);\\r\\n    event NewDelay(uint256 indexed newDelay);\\r\\n    event CancelTransaction(\\r\\n        bytes32 indexed txHash,\\r\\n        address indexed target,\\r\\n        uint256 value,\\r\\n        string signature,\\r\\n        bytes data,\\r\\n        uint256 eta\\r\\n    );\\r\\n    event ExecuteTransaction(\\r\\n        bytes32 indexed txHash,\\r\\n        address indexed target,\\r\\n        uint256 value,\\r\\n        string signature,\\r\\n        bytes data,\\r\\n        uint256 eta\\r\\n    );\\r\\n    event QueueTransaction(\\r\\n        bytes32 indexed txHash,\\r\\n        address indexed target,\\r\\n        uint256 value,\\r\\n        string signature,\\r\\n        bytes data,\\r\\n        uint256 eta\\r\\n    );\\r\\n\\r\\n    uint256 public constant GRACE_PERIOD = 14 days;\\r\\n    uint256 public constant MINIMUM_DELAY = 1 hours;\\r\\n    uint256 public constant MAXIMUM_DELAY = 2 days;\\r\\n\\r\\n    address public admin;\\r\\n    address public pendingAdmin;\\r\\n    uint256 public delay;\\r\\n\\r\\n    mapping(bytes32 => bool) public queuedTransactions;\\r\\n\\r\\n    constructor(address admin_) {\\r\\n        admin = admin_;\\r\\n        delay = 1 hours;\\r\\n    }\\r\\n\\r\\n    receive() external payable {}\\r\\n\\r\\n    function setDelay(uint256 delay_) public {\\r\\n        require(\\r\\n            msg.sender == address(this),\\r\\n            \\\"Timelock::setDelay: Call must come from Timelock.\\\"\\r\\n        );\\r\\n        require(\\r\\n            delay_ >= MINIMUM_DELAY,\\r\\n            \\\"Timelock::setDelay: Delay must exceed minimum delay.\\\"\\r\\n        );\\r\\n        require(\\r\\n            delay_ <= MAXIMUM_DELAY,\\r\\n            \\\"Timelock::setDelay: Delay must not exceed maximum delay.\\\"\\r\\n        );\\r\\n        delay = delay_;\\r\\n\\r\\n        emit NewDelay(delay);\\r\\n    }\\r\\n\\r\\n    function acceptAdmin() public {\\r\\n        require(\\r\\n            msg.sender == pendingAdmin,\\r\\n            \\\"Timelock::acceptAdmin: Call must come from pendingAdmin.\\\"\\r\\n        );\\r\\n        admin = msg.sender;\\r\\n        pendingAdmin = address(0);\\r\\n\\r\\n        emit NewAdmin(admin);\\r\\n    }\\r\\n\\r\\n    function setPendingAdmin(address pendingAdmin_) public {\\r\\n        require(\\r\\n            msg.sender == address(this),\\r\\n            \\\"Timelock::setPendingAdmin: Call must come from Timelock.\\\"\\r\\n        );\\r\\n        pendingAdmin = pendingAdmin_;\\r\\n\\r\\n        emit NewPendingAdmin(pendingAdmin);\\r\\n    }\\r\\n\\r\\n    function queueTransaction(\\r\\n        address target,\\r\\n        uint256 value,\\r\\n        string memory signature,\\r\\n        bytes memory data,\\r\\n        uint256 eta\\r\\n    ) public returns (bytes32) {\\r\\n        require(\\r\\n            msg.sender == admin,\\r\\n            \\\"Timelock::queueTransaction: Call must come from admin.\\\"\\r\\n        );\\r\\n        require(\\r\\n            eta >= getBlockTimestamp() + delay,\\r\\n            \\\"Timelock::queueTransaction: Estimated execution block must satisfy delay.\\\"\\r\\n        );\\r\\n\\r\\n        bytes32 txHash = keccak256(\\r\\n            abi.encode(target, value, signature, data, eta)\\r\\n        );\\r\\n        queuedTransactions[txHash] = true;\\r\\n\\r\\n        emit QueueTransaction(txHash, target, value, signature, data, eta);\\r\\n        return txHash;\\r\\n    }\\r\\n\\r\\n    function cancelTransaction(\\r\\n        address target,\\r\\n        uint256 value,\\r\\n        string memory signature,\\r\\n        bytes memory data,\\r\\n        uint256 eta\\r\\n    ) public {\\r\\n        require(\\r\\n            msg.sender == admin,\\r\\n            \\\"Timelock::cancelTransaction: Call must come from admin.\\\"\\r\\n        );\\r\\n\\r\\n        bytes32 txHash = keccak256(\\r\\n            abi.encode(target, value, signature, data, eta)\\r\\n        );\\r\\n        queuedTransactions[txHash] = false;\\r\\n\\r\\n        emit CancelTransaction(txHash, target, value, signature, data, eta);\\r\\n    }\\r\\n\\r\\n    function executeTransaction(\\r\\n        address target,\\r\\n        uint256 value,\\r\\n        string memory signature,\\r\\n        bytes memory data,\\r\\n        uint256 eta\\r\\n    ) public payable returns (bytes memory) {\\r\\n        require(\\r\\n            msg.sender == admin,\\r\\n            \\\"Timelock::executeTransaction: Call must come from admin.\\\"\\r\\n        );\\r\\n\\r\\n        bytes32 txHash = keccak256(\\r\\n            abi.encode(target, value, signature, data, eta)\\r\\n        );\\r\\n        require(\\r\\n            queuedTransactions[txHash],\\r\\n            \\\"Timelock::executeTransaction: Transaction hasn't been queued.\\\"\\r\\n        );\\r\\n        require(\\r\\n            getBlockTimestamp() >= eta,\\r\\n            \\\"Timelock::executeTransaction: Transaction hasn't surpassed time lock.\\\"\\r\\n        );\\r\\n        require(\\r\\n            getBlockTimestamp() <= eta + GRACE_PERIOD,\\r\\n            \\\"Timelock::executeTransaction: Transaction is stale.\\\"\\r\\n        );\\r\\n\\r\\n        queuedTransactions[txHash] = false;\\r\\n\\r\\n        bytes memory callData;\\r\\n\\r\\n        if (bytes(signature).length == 0) {\\r\\n            callData = data;\\r\\n        } else {\\r\\n            callData = abi.encodePacked(\\r\\n                bytes4(keccak256(bytes(signature))),\\r\\n                data\\r\\n            );\\r\\n        }\\r\\n\\r\\n        // solium-disable-next-line security/no-call-value\\r\\n        (bool success, bytes memory returnData) = target.call{value: value}(\\r\\n            callData\\r\\n        );\\r\\n        require(\\r\\n            success,\\r\\n            \\\"Timelock::executeTransaction: Transaction execution reverted.\\\"\\r\\n        );\\r\\n\\r\\n        emit ExecuteTransaction(txHash, target, value, signature, data, eta);\\r\\n\\r\\n        return returnData;\\r\\n    }\\r\\n\\r\\n    function getBlockTimestamp() internal view returns (uint256) {\\r\\n        // solium-disable-next-line security/no-block-members\\r\\n        return block.timestamp;\\r\\n    }\\r\\n}\\r\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"viaIR\": true,\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"admin_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"txHash\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"signature\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"eta\",\"type\":\"uint256\"}],\"name\":\"CancelTransaction\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"txHash\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"signature\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"eta\",\"type\":\"uint256\"}],\"name\":\"ExecuteTransaction\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"NewAdmin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"newDelay\",\"type\":\"uint256\"}],\"name\":\"NewDelay\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newPendingAdmin\",\"type\":\"address\"}],\"name\":\"NewPendingAdmin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"txHash\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"signature\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"eta\",\"type\":\"uint256\"}],\"name\":\"QueueTransaction\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"GRACE_PERIOD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAXIMUM_DELAY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINIMUM_DELAY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"signature\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"eta\",\"type\":\"uint256\"}],\"name\":\"cancelTransaction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"delay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"signature\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"eta\",\"type\":\"uint256\"}],\"name\":\"executeTransaction\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"signature\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"eta\",\"type\":\"uint256\"}],\"name\":\"queueTransaction\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"queuedTransactions\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"delay_\",\"type\":\"uint256\"}],\"name\":\"setDelay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pendingAdmin_\",\"type\":\"address\"}],\"name\":\"setPendingAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "CompTimelock", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000024f5be25cc59079347cf7fae2562bc9bbd44b890", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}