{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\nimport {IERC20Permit} from \\\"../extensions/IERC20Permit.sol\\\";\\nimport {Address} from \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev An operation with an ERC20 token failed.\\n     */\\n    error SafeERC20FailedOperation(address token);\\n\\n    /**\\n     * @dev Indicates a failed `decreaseAllowance` request.\\n     */\\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        forceApprove(token, spender, oldAllowance + value);\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\\n     * value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\\n        unchecked {\\n            uint256 currentAllowance = token.allowance(address(this), spender);\\n            if (currentAllowance < requestedDecrease) {\\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\\n            }\\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data);\\n        if (returndata.length != 0 && !abi.decode(returndata, (bool))) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return success && (returndata.length == 0 || abi.decode(returndata, (bool))) && address(token).code.length > 0;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error AddressInsufficientBalance(address account);\\n\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedInnerCall();\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            revert FailedInnerCall();\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {FailedInnerCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\\n     * unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {FailedInnerCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert FailedInnerCall();\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    constructor() {\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if (_status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/BuildingManager.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.26;\\r\\n\\r\\nimport '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\\r\\nimport '@openzeppelin/contracts/access/Ownable.sol';\\r\\nimport '@openzeppelin/contracts/utils/ReentrancyGuard.sol';\\r\\nimport './BuildingRewardManagement.sol';\\r\\nimport './interfaces/IUniswapV2Router02.sol';\\r\\nimport './interfaces/IERC20Burnable.sol';\\r\\n\\r\\ncontract BuildingManager is Ownable, ReentrancyGuard {\\r\\n  BuildingRewardManagement public buildingRewardManagement;\\r\\n  using SafeERC20 for IERC20Burnable;\\r\\n  using SafeERC20 for IERC20;\\r\\n  IERC20Burnable public token;\\r\\n  IERC20 public USDC;\\r\\n  IUniswapV2Router02 public router;\\r\\n\\r\\n  address public reservePool;\\r\\n\\r\\n  address[] public payees;\\r\\n  uint256[] public shares;\\r\\n  uint8 public distributionFee;\\r\\n  uint8 public marketingFee;\\r\\n  uint8 public burnFee;\\r\\n  uint8 public affiliateFee;\\r\\n\\r\\n  bool public swapping = false;\\r\\n  bool public swapLiquify = true;\\r\\n  uint256 public swapTokensAmount;\\r\\n\\r\\n  mapping(address => bool) private _isMalicious;\\r\\n  mapping(address => bool) private _isExcluded;\\r\\n  mapping(address => uint256) private _affiliateRewards;\\r\\n\\r\\n  event UpdateRouter(address indexed newAddress, address indexed oldAddress);\\r\\n\\r\\n  event Exclude(address indexed _account, bool isExcluded);\\r\\n\\r\\n  event CreationBuilding(address indexed creator, uint8 indexed level, uint256 creationTime);\\r\\n  event CashoutBuilding(address indexed user, uint256 time, uint256 amount);\\r\\n  event CashoutAll(address indexed user, uint256 time, uint256 amount);\\r\\n\\r\\n  constructor(\\r\\n    address[] memory _payees,\\r\\n    uint256[] memory _shares,\\r\\n    address _V2Router,\\r\\n    address _reservePool, // supplyManager\\r\\n    address _token,\\r\\n    address _USDC,\\r\\n    uint8[] memory fees,\\r\\n    uint256 swapAmount,\\r\\n    uint256 _typesNumber,\\r\\n    uint256[] memory _buildingPrices,\\r\\n    uint256[] memory _rewardPerBuildings\\r\\n  ) Ownable(msg.sender) {\\r\\n    require(_payees.length == _shares.length, 'Payees and shares length mismatch');\\r\\n    require(_payees.length > 0, 'No payees');\\r\\n\\r\\n    for (uint256 i = 0; i < _payees.length; i++) {\\r\\n      require(_payees[i] != address(0), 'Payee is the zero address');\\r\\n      require(_shares[i] > 0, 'Share is 0');\\r\\n      payees.push(_payees[i]);\\r\\n      shares.push(_shares[i]);\\r\\n    }\\r\\n    require(_V2Router != address(0), 'ROUTER CANNOT BE ZERO');\\r\\n    IUniswapV2Router02 v2Router = IUniswapV2Router02(_V2Router);\\r\\n    router = v2Router;\\r\\n\\r\\n    require(_reservePool != address(0), 'RESERVE ADDRESS CANNOT BE ZERO');\\r\\n    reservePool = _reservePool;\\r\\n\\r\\n    require(address(_token) != address(0), 'TOKEN ADDRESS CANNOT BE ZERO');\\r\\n    token = IERC20Burnable(_token);\\r\\n\\r\\n    require(address(_USDC) != address(0), 'USDC ADDRESS CANNOT BE ZERO');\\r\\n    USDC = IERC20(_USDC);\\r\\n\\r\\n    require(_typesNumber > 0, 'CONSTR: LEVEL SIZE INCORRECT');\\r\\n    buildingRewardManagement = new BuildingRewardManagement(_typesNumber, _buildingPrices, _rewardPerBuildings);\\r\\n\\r\\n    exclude(address(this), true);\\r\\n    require(fees[0] != 0 && fees[1] != 0 && fees[2] != 0, 'CONSTR: Fees equal 0');\\r\\n    distributionFee = fees[0];\\r\\n    marketingFee = fees[1];\\r\\n    burnFee = fees[2];\\r\\n    affiliateFee = fees[3];\\r\\n\\r\\n    require(swapAmount > 0, 'CONSTR: Swap amount incorrect');\\r\\n    swapTokensAmount = swapAmount * (10 ** 18);\\r\\n  }\\r\\n\\r\\n  function updateV2Router(address newAddress) public onlyOwner {\\r\\n    require(newAddress != address(router), 'TKN: The router already has that address');\\r\\n    emit UpdateRouter(newAddress, address(router));\\r\\n    router = IUniswapV2Router02(newAddress);\\r\\n  }\\r\\n\\r\\n  function exclude(address _account, bool excluded) public onlyOwner {\\r\\n    require(_isExcluded[_account] != excluded, \\\"TKN: _account is already the value of 'excluded'\\\");\\r\\n    _isExcluded[_account] = excluded;\\r\\n\\r\\n    emit Exclude(_account, excluded);\\r\\n  }\\r\\n\\r\\n  function protectAgainstMalicious(address _account, bool value) external onlyOwner {\\r\\n    _isMalicious[_account] = value;\\r\\n  }\\r\\n\\r\\n  function isExcluded(address _account) public view returns (bool) {\\r\\n    return _isExcluded[_account];\\r\\n  }\\r\\n\\r\\n  function swapTokensForUSDC(uint256 tokenAmount) private {\\r\\n    address[] memory path = new address[](3);\\r\\n    path[0] = address(token);\\r\\n    path[1] = router.WETH();\\r\\n    path[2] = address(USDC);\\r\\n\\r\\n    token.approve(address(router), tokenAmount);\\r\\n    router.swapExactTokensForTokensSupportingFeeOnTransferTokens(\\r\\n      tokenAmount,\\r\\n      0, // accept any amount of USDC\\r\\n      path,\\r\\n      address(this),\\r\\n      block.timestamp\\r\\n    );\\r\\n  }\\r\\n\\r\\n  function distributeUSDC(uint256 usdcAmount) private {\\r\\n    uint256 totalShares = 0;\\r\\n    for (uint i = 0; i < shares.length; i++) {\\r\\n      totalShares += shares[i];\\r\\n    }\\r\\n    for (uint i = 0; i < payees.length; i++) {\\r\\n      uint256 payeeShare = (usdcAmount * shares[i]) / totalShares;\\r\\n      USDC.safeTransfer(payees[i], payeeShare);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  function createBuildingWithTokensAndAffiliation(uint8 _type, address _affiliateAddress) public nonReentrant {\\r\\n    require(affiliateFee > 0, 'Affiliation is disabled');\\r\\n    address sender = _msgSender();\\r\\n    require(sender != address(0), 'BUILDING CREATION: creation from the zero address');\\r\\n    require(!_isMalicious[sender], 'BUILDING CREATION: Malicious address');\\r\\n    uint256 buildingPrice = buildingRewardManagement.getPriceOfBuilding(_type);\\r\\n    require(buildingPrice != 0, 'PRICE CANNOT BE ZERO');\\r\\n    require(token.balanceOf(sender) >= buildingPrice, 'BUILDING CREATION: Balance too low for creation.');\\r\\n    require(sender != _affiliateAddress, \\\"BUILDING CREATION: msgSender can't be the affiliated address\\\");\\r\\n    require(buildingRewardManagement.isBuildingOwner(_affiliateAddress), 'NO BUILDING OWNER');\\r\\n\\r\\n    uint256 affiliateReward = buildingPrice / affiliateFee;\\r\\n    uint256 paymentAfterAffiliateReward = buildingPrice - affiliateReward;\\r\\n\\r\\n    token.transferFrom(sender, _affiliateAddress, affiliateReward);\\r\\n    _affiliateRewards[_affiliateAddress] += affiliateReward;\\r\\n\\r\\n    uint256 contractTokenBalance = token.balanceOf(address(this));\\r\\n    bool swapAmountOk = contractTokenBalance >= swapTokensAmount;\\r\\n\\r\\n    if (swapAmountOk && swapLiquify && !swapping && sender != owner()) {\\r\\n      swapping = true;\\r\\n\\r\\n      uint256 amountToReserve = (contractTokenBalance * distributionFee) / 100;\\r\\n      token.safeTransfer(reservePool, amountToReserve);\\r\\n\\r\\n      uint256 MarketingAmtToSwap = contractTokenBalance - amountToReserve;\\r\\n      swapTokensForUSDC(MarketingAmtToSwap);\\r\\n      uint256 usdcAcquired = USDC.balanceOf(address(this));\\r\\n      distributeUSDC(usdcAcquired);\\r\\n\\r\\n      swapping = false;\\r\\n    }\\r\\n\\r\\n    uint256 creationTime = buildingRewardManagement.createBuilding(sender, _type);\\r\\n    token.transferFrom(sender, address(this), paymentAfterAffiliateReward);\\r\\n    emit CreationBuilding(sender, _type, creationTime);\\r\\n  }\\r\\n\\r\\n  function createBuildingWithTokens(uint8 _type) public nonReentrant {\\r\\n    address sender = _msgSender();\\r\\n    require(sender != address(0), 'BUILDING CREATION: creation from the zero address');\\r\\n    require(!_isMalicious[sender], 'BUILDING CREATION: Malicious address');\\r\\n    uint256 buildingPrice = buildingRewardManagement.getPriceOfBuilding(_type);\\r\\n    require(buildingPrice != 0, 'PRICE CANNOT BE ZERO');\\r\\n    require(token.balanceOf(sender) >= buildingPrice, 'BUILDING CREATION: Balance too low for creation.');\\r\\n    uint256 contractTokenBalance = token.balanceOf(address(this));\\r\\n\\r\\n    bool swapAmountOk = contractTokenBalance >= swapTokensAmount;\\r\\n    if (swapAmountOk && swapLiquify && !swapping && sender != owner()) {\\r\\n      swapping = true;\\r\\n\\r\\n      // Burn tokens\\r\\n      uint256 burnAmount = (contractTokenBalance * burnFee) / 100;\\r\\n      if (burnAmount > 0) token.burn(burnAmount);\\r\\n\\r\\n      // Marketing\\r\\n      uint256 marketingAmountToSwap = (contractTokenBalance * marketingFee) / 100;\\r\\n      if (marketingAmountToSwap > 0) swapTokensForUSDC(marketingAmountToSwap);\\r\\n\\r\\n      // Send USDC to payees\\r\\n      uint256 usdcAcquired = USDC.balanceOf(address(this));\\r\\n      if (usdcAcquired > 0) distributeUSDC(usdcAcquired);\\r\\n\\r\\n      // Send remaining tokens to reserve\\r\\n      uint256 amountToReserve = (contractTokenBalance * distributionFee) / 100;\\r\\n      if (amountToReserve > 0) token.safeTransfer(reservePool, amountToReserve);\\r\\n\\r\\n      swapping = false;\\r\\n    }\\r\\n\\r\\n    uint256 creationTime = buildingRewardManagement.createBuilding(sender, _type);\\r\\n    token.transferFrom(sender, address(this), buildingPrice);\\r\\n    emit CreationBuilding(sender, _type, creationTime);\\r\\n  }\\r\\n\\r\\n  function createBuildingForUser(address _account, uint8 _type) public onlyOwner {\\r\\n    require(_account != address(0), 'BUILDING CREATION: creation from the zero address');\\r\\n    require(!_isMalicious[_account], 'BUILDING CREATION: Malicious address');\\r\\n\\r\\n    uint256 creationTime = buildingRewardManagement.createBuilding(_account, _type);\\r\\n    emit CreationBuilding(_account, _type, creationTime);\\r\\n  }\\r\\n\\r\\n  function cashoutReward(uint256 index) public nonReentrant {\\r\\n    address sender = _msgSender();\\r\\n    require(sender != address(0), 'CSHT: creation from the zero address');\\r\\n    require(!_isMalicious[sender], 'CSHT: Malicious address');\\r\\n    uint256 rewardAmount = buildingRewardManagement.getBuildingRewardAmountOf(sender, index);\\r\\n    require(rewardAmount > 0, \\\"CSHT: You don't have enough reward to cash out\\\");\\r\\n    buildingRewardManagement.cashoutBuildingReward(sender, index);\\r\\n    token.transferFrom(reservePool, sender, rewardAmount);\\r\\n    emit CashoutBuilding(sender, block.timestamp, rewardAmount);\\r\\n  }\\r\\n\\r\\n  function cashoutRewardByCreatime(uint256 blocktime) public nonReentrant {\\r\\n    address sender = _msgSender();\\r\\n    require(sender != address(0), 'CSHT: creation from the zero address');\\r\\n    require(!_isMalicious[sender], 'CSHT: Malicious address');\\r\\n    uint256 rewardAmount = buildingRewardManagement.getBuildingRewardByCreatime(sender, blocktime);\\r\\n    require(rewardAmount > 0, \\\"CSHT: You don't have enough reward to cash out\\\");\\r\\n    buildingRewardManagement.cashoutBuildingReward(sender, blocktime);\\r\\n    token.transferFrom(reservePool, sender, rewardAmount);\\r\\n    emit CashoutBuilding(sender, block.timestamp, rewardAmount);\\r\\n  }\\r\\n\\r\\n  function cashoutAll() public nonReentrant {\\r\\n    address sender = _msgSender();\\r\\n    require(sender != address(0), 'CSHT: creation from the zero address');\\r\\n    require(!_isMalicious[sender], 'CSHT: Malicious address');\\r\\n\\r\\n    uint256 rewardAmount = buildingRewardManagement.getRewardAmountOf(sender);\\r\\n    require(rewardAmount > 0, \\\"CSHT: You don't have any rewards to cash out\\\");\\r\\n    buildingRewardManagement.cashoutAllBuildingsReward(sender);\\r\\n    token.transferFrom(reservePool, sender, rewardAmount);\\r\\n    emit CashoutAll(sender, block.timestamp, rewardAmount);\\r\\n  }\\r\\n\\r\\n  function updateReservePool(address _newAddress) public onlyOwner {\\r\\n    reservePool = _newAddress;\\r\\n  }\\r\\n\\r\\n  function updateDistributionFee(uint8 value) external onlyOwner {\\r\\n    distributionFee = value;\\r\\n  }\\r\\n\\r\\n  function updateAffiliateFee(uint8 value) external onlyOwner {\\r\\n    affiliateFee = value;\\r\\n  }\\r\\n\\r\\n  function updateMarketingFee(uint8 value) external onlyOwner {\\r\\n    marketingFee = value;\\r\\n  }\\r\\n\\r\\n  function updateBurnFee(uint8 value) external onlyOwner {\\r\\n    burnFee = value;\\r\\n  }\\r\\n\\r\\n  function changeSwapLiquify(bool newVal) external onlyOwner {\\r\\n    swapLiquify = newVal;\\r\\n  }\\r\\n\\r\\n  function changeBuildingManager(BuildingRewardManagement _newManager) external onlyOwner {\\r\\n    buildingRewardManagement = _newManager;\\r\\n  }\\r\\n\\r\\n  function changeToken(IERC20Burnable _newToken) external onlyOwner {\\r\\n    token = _newToken;\\r\\n  }\\r\\n\\r\\n  function createNewRewardBuildingEntity(uint256 _buildingPrice, uint256 _buildingRewardPerSecond) external onlyOwner {\\r\\n    buildingRewardManagement.createNewRewardBuildingEntity(_buildingPrice, _buildingRewardPerSecond);\\r\\n  }\\r\\n\\r\\n  function updateRewardBuildingEntity(uint256 _buildingType, uint256 _buildingPrice, uint256 _buildingRewardPerSecond) external onlyOwner {\\r\\n    buildingRewardManagement.updateRewardBuildingEntity(_buildingType, _buildingPrice, _buildingRewardPerSecond);\\r\\n  }\\r\\n\\r\\n  function addBuildings(address[] memory buildings, uint8 _type) public onlyOwner {\\r\\n    buildingRewardManagement.addBuildings(buildings, _type);\\r\\n  }\\r\\n\\r\\n  function removeBuildings(address[] memory buildings) public onlyOwner {\\r\\n    buildingRewardManagement.removeBuildings(buildings);\\r\\n  }\\r\\n\\r\\n  function changeMinimumClaimInterval(uint256 _newVal) public onlyOwner {\\r\\n    buildingRewardManagement.changeMinimumClaimInterval(_newVal);\\r\\n  }\\r\\n\\r\\n  // Manual call to swapTokensForUSDC\\r\\n  function swapTokensForUSDCManual(uint256 tokenAmount) public onlyOwner {\\r\\n    swapTokensForUSDC(tokenAmount);\\r\\n  }\\r\\n\\r\\n  // Manual call to distributeUSDC\\r\\n  function distributeUSDCManual(uint256 usdcAmount) public onlyOwner {\\r\\n    distributeUSDC(usdcAmount);\\r\\n  }\\r\\n\\r\\n  // Change USDC\\r\\n  function changeUSDC(IERC20 _newUSDC) public onlyOwner {\\r\\n    USDC = _newUSDC;\\r\\n  }\\r\\n\\r\\n  function getBuildingPrice(uint8 _type) public view returns (uint256) {\\r\\n    return buildingRewardManagement.getPriceOfBuilding(_type);\\r\\n  }\\r\\n\\r\\n  function getRewardPerBuilding(uint8 _type) public view returns (uint256) {\\r\\n    return buildingRewardManagement.getrewardOfBuilding(_type);\\r\\n  }\\r\\n\\r\\n  function getTotalRewardStaked() public view returns (uint256) {\\r\\n    return buildingRewardManagement.totalRewardStacked();\\r\\n  }\\r\\n\\r\\n  function getTotalBuildingTypes() public view returns (uint256) {\\r\\n    return buildingRewardManagement.totalBuildingTypes();\\r\\n  }\\r\\n\\r\\n  function getTotalBuildingsCreated() public view returns (uint256) {\\r\\n    return buildingRewardManagement.totalBuildingsCreated();\\r\\n  }\\r\\n\\r\\n  function getBuildingNumberOf(address _account) public view returns (uint256) {\\r\\n    return buildingRewardManagement.getBuildingNumberOf(_account);\\r\\n  }\\r\\n\\r\\n  function getBuildingNumberOfType(address _account, uint256 _buildingIndex) public view returns (uint256) {\\r\\n    return buildingRewardManagement.getBuildingNumberOfType(_account, _buildingIndex);\\r\\n  }\\r\\n\\r\\n  function getBuildingCreatimeOf(address _account, uint256 _buildingIndex) public view returns (uint256) {\\r\\n    return buildingRewardManagement.getBuildingCreatimeOf(_account, _buildingIndex);\\r\\n  }\\r\\n\\r\\n  function getBuildingLastClaimOf(address _account, uint256 _buildingIndex) public view returns (uint256) {\\r\\n    return buildingRewardManagement.getBuildingLastClaimOf(_account, _buildingIndex);\\r\\n  }\\r\\n\\r\\n  function getBuildingTypeOf(address _account, uint256 _buildingIndex) public view returns (uint256) {\\r\\n    return buildingRewardManagement.getBuildingTypeOf(_account, _buildingIndex);\\r\\n  }\\r\\n\\r\\n  function getRewardAmountOf(address _account) public view returns (uint256) {\\r\\n    return buildingRewardManagement.getRewardAmountOf(_account);\\r\\n  }\\r\\n\\r\\n  function getRewardAmount() public view returns (uint256) {\\r\\n    require(_msgSender() != address(0), \\\"SENDER CAN'T BE ZERO\\\");\\r\\n    require(buildingRewardManagement.isBuildingOwner(_msgSender()), 'NO BUILDING OWNER');\\r\\n    return buildingRewardManagement.getRewardAmountOf(_msgSender());\\r\\n  }\\r\\n\\r\\n  function getBuildingRewardAmountOf(address _account, uint256 _buildingIndex) public view returns (uint256) {\\r\\n    return buildingRewardManagement.getBuildingRewardAmountOf(_account, _buildingIndex);\\r\\n  }\\r\\n\\r\\n  function getTotalDailyRewards(address _account) public view returns (uint256) {\\r\\n    return buildingRewardManagement.getTotalDailyRewards(_account);\\r\\n  }\\r\\n\\r\\n  function getTotalBuildingAmount(address _account) public view returns (uint256) {\\r\\n    return buildingRewardManagement.getTotalBuildingAmount(_account);\\r\\n  }\\r\\n\\r\\n  function getBuildingClaimEligibility(address _account, uint256 _buildingIndex) public view returns (bool) {\\r\\n    return buildingRewardManagement.getBuildingClaimEligibility(_account, _buildingIndex);\\r\\n  }\\r\\n\\r\\n  function getMinimumClaimInterval() public view returns (uint256) {\\r\\n    return buildingRewardManagement.minimumClaimInterval();\\r\\n  }\\r\\n\\r\\n  function isBuildingOwner(address account) public view returns (bool) {\\r\\n    return buildingRewardManagement.isBuildingOwner(account);\\r\\n  }\\r\\n\\r\\n  function getAffiliateReward(address _affiliateAddress) public view returns (uint256) {\\r\\n    return _affiliateRewards[_affiliateAddress];\\r\\n  }\\r\\n\\r\\n  function getBuildingOwners() external view returns (address[] memory) {\\r\\n    return buildingRewardManagement.getBuildingOwners();\\r\\n  }\\r\\n\\r\\n  function getBuildingOwnersRange(uint256 _start, uint256 _end) external view returns (address[] memory) {\\r\\n    return buildingRewardManagement.getBuildingOwnersRange(_start, _end);\\r\\n  }\\r\\n\\r\\n  function getBuildingNumbersRange(uint256 _start, uint256 _end) external view returns (uint256[] memory) {\\r\\n    return buildingRewardManagement.getBuildingNumbersRange(_start, _end);\\r\\n  }\\r\\n\\r\\n  function getTotalDailyRewardsRange(uint256 _start, uint256 _end) external view returns (uint256[] memory) {\\r\\n    return buildingRewardManagement.getTotalDailyRewardsRange(_start, _end);\\r\\n  }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/BuildingRewardManagement.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.26;\\r\\n\\r\\nimport '@openzeppelin/contracts/access/Ownable.sol';\\r\\n\\r\\ncontract BuildingRewardManagement is Ownable {\\r\\n  struct BuildingEntity {\\r\\n    uint256 creationTime;\\r\\n    uint256 lastClaimTime;\\r\\n    uint256 typee;\\r\\n  }\\r\\n\\r\\n  struct RewardBuildingEntity {\\r\\n    uint256 price;\\r\\n    uint256 rewardPerSecond;\\r\\n  }\\r\\n  mapping(uint256 => RewardBuildingEntity) private buildingTypes;\\r\\n  mapping(address => BuildingEntity[]) private buildingsOfUser;\\r\\n\\r\\n  uint256 public totalBuildingsCreated = 0;\\r\\n  uint256 public totalBuildingTypes = 0;\\r\\n  uint256 public totalRewardStacked = 0;\\r\\n\\r\\n  uint256 public minimumClaimInterval = 60;\\r\\n  uint256 public maintenanceInterval = 0;\\r\\n\\r\\n  // Store all building owners\\r\\n  address[] public buildingOwners;\\r\\n\\r\\n  constructor(uint256 _typesNumber, uint256[] memory _buildingPrices, uint256[] memory _buildingRewardsPerSecond) Ownable(msg.sender) {\\r\\n    require(_typesNumber > 0, 'TYPES ARRAY EMPTY');\\r\\n    require(\\r\\n      _typesNumber == _buildingPrices.length && _typesNumber == _buildingRewardsPerSecond.length,\\r\\n      'ARRAY TYPES AND PARAMETERS NOT SAME LENGTH'\\r\\n    );\\r\\n\\r\\n    for (uint256 i = 0; i < _typesNumber; i++) {\\r\\n      buildingTypes[i] = RewardBuildingEntity(_buildingPrices[i] * (10 ** 18), _buildingRewardsPerSecond[i]);\\r\\n      totalBuildingTypes++;\\r\\n    }\\r\\n  }\\r\\n\\r\\n  function createBuilding(address _account, uint256 _type) external onlyOwner returns (uint256) {\\r\\n    require(buildingTypes[_type].rewardPerSecond > 0, 'TYPE NOT VALID');\\r\\n\\r\\n    // Add the owner to the list of building owners\\r\\n    if (!_isBuildingOwner(_account)) buildingOwners.push(_account);\\r\\n\\r\\n    uint256 creaTime = block.timestamp;\\r\\n    buildingsOfUser[_account].push(BuildingEntity({creationTime: creaTime, lastClaimTime: creaTime, typee: _type}));\\r\\n    totalBuildingsCreated++;\\r\\n\\r\\n    return creaTime;\\r\\n  }\\r\\n\\r\\n  function _getBuildingWithCreatime(\\r\\n    BuildingEntity[] storage buildings,\\r\\n    uint256 _creationTime\\r\\n  ) private view returns (BuildingEntity storage) {\\r\\n    uint256 numberOfBuildings = buildings.length;\\r\\n    require(numberOfBuildings > 0, \\\"CASHOUT ERROR: You don't have buildings to cash out\\\");\\r\\n    bool found = false;\\r\\n    int256 index = binary_search(buildings, 0, numberOfBuildings, _creationTime);\\r\\n    uint256 validIndex;\\r\\n    if (index >= 0) {\\r\\n      found = true;\\r\\n      validIndex = uint256(index);\\r\\n    }\\r\\n    require(found, 'BUILDING SEARCH: No BUILDING Found with this blocktime');\\r\\n    return buildings[validIndex];\\r\\n  }\\r\\n\\r\\n  function binary_search(BuildingEntity[] memory arr, uint256 low, uint256 high, uint256 x) private view returns (int256) {\\r\\n    if (high >= low) {\\r\\n      uint256 mid = (high + low) / 2;\\r\\n      if (arr[mid].creationTime == x) {\\r\\n        return int256(mid);\\r\\n      } else if (arr[mid].creationTime > x) {\\r\\n        return binary_search(arr, low, mid - 1, x);\\r\\n      } else {\\r\\n        return binary_search(arr, mid + 1, high, x);\\r\\n      }\\r\\n    } else {\\r\\n      return -1;\\r\\n    }\\r\\n  }\\r\\n\\r\\n  // function testStr(string memory str) private pure returns (bool) {\\r\\n  //   bytes memory b = bytes(str);\\r\\n  //   if (b.length > 13) return false;\\r\\n\\r\\n  //   for (uint256 i; i < b.length; i++) {\\r\\n  //     bytes1 char = b[i];\\r\\n\\r\\n  //     if (\\r\\n  //       !(char >= 0x30 && char <= 0x39) && //9-0\\r\\n  //       !(char >= 0x41 && char <= 0x5A) && //A-Z\\r\\n  //       !(char >= 0x61 && char <= 0x7A) && //a-z\\r\\n  //       !(char == 0x2E) //.\\r\\n  //     ) return false;\\r\\n  //   }\\r\\n\\r\\n  //   return true;\\r\\n  // }\\r\\n\\r\\n  function cashoutBuildingReward(address _account, uint256 _buildingIndex) external onlyOwner returns (uint256) {\\r\\n    require(_isBuildingOwner(_account), 'GET REWARD OF: NO BUILDING OWNER');\\r\\n    if (checkActivity(_account)) {\\r\\n      return 0;\\r\\n    }\\r\\n    BuildingEntity[] storage buildings = buildingsOfUser[_account];\\r\\n    require(_buildingIndex < buildings.length, 'BUILDING: CREATIME must be higher than zero');\\r\\n    BuildingEntity storage building = buildings[_buildingIndex];\\r\\n    uint256 nowTime = block.timestamp;\\r\\n    uint256 rewardUnit = (nowTime - building.lastClaimTime);\\r\\n    require(rewardUnit > minimumClaimInterval, 'CLAIM NOT ELIGIBLE, WAIT BEFORE ELIGIBILITY');\\r\\n    uint256 rewardBuilding = computeRewardAvailable(building.lastClaimTime, buildingTypes[building.typee].rewardPerSecond);\\r\\n    building.lastClaimTime = nowTime;\\r\\n    return rewardBuilding;\\r\\n  }\\r\\n\\r\\n  function cashoutBuildingRewardByCreatime(address _account, uint256 _creationTime) external onlyOwner returns (uint256) {\\r\\n    require(_isBuildingOwner(_account), 'GET REWARD OF: NO BUILDING OWNER');\\r\\n    if (checkActivity(_account)) {\\r\\n      return 0;\\r\\n    }\\r\\n    require(_creationTime > 0, 'BUILDING: CREATIME must be higher than zero');\\r\\n    BuildingEntity[] storage buildings = buildingsOfUser[_account];\\r\\n    BuildingEntity storage building = _getBuildingWithCreatime(buildings, _creationTime);\\r\\n    uint256 nowTime = block.timestamp;\\r\\n    uint256 rewardUnit = (nowTime - building.lastClaimTime);\\r\\n    require(rewardUnit > minimumClaimInterval, 'CLAIM NOT ELIGIBLE, WAIT BEFORE ELIGIBILITY');\\r\\n    uint256 rewardBuilding = computeRewardAvailable(building.lastClaimTime, buildingTypes[building.typee].rewardPerSecond);\\r\\n    building.lastClaimTime = nowTime;\\r\\n    totalRewardStacked += rewardBuilding;\\r\\n    return rewardBuilding;\\r\\n  }\\r\\n\\r\\n  function cashoutAllBuildingsReward(address _account) external onlyOwner returns (uint256) {\\r\\n    require(_isBuildingOwner(_account), 'GET REWARD OF: NO BUILDING OWNER');\\r\\n    if (checkActivity(_account)) {\\r\\n      return 0;\\r\\n    }\\r\\n    BuildingEntity[] storage buildings = buildingsOfUser[_account];\\r\\n    uint256 numberOfBuildings = buildings.length;\\r\\n    BuildingEntity storage building;\\r\\n    uint256 rewardsTotal = 0;\\r\\n    uint256 nowTime = block.timestamp;\\r\\n    uint256 rewardUnit;\\r\\n    for (uint256 i = 0; i < numberOfBuildings; i++) {\\r\\n      building = buildings[i];\\r\\n      rewardUnit = nowTime - building.lastClaimTime;\\r\\n      if (rewardUnit > minimumClaimInterval) {\\r\\n        rewardsTotal += computeRewardAvailable(building.lastClaimTime, buildingTypes[building.typee].rewardPerSecond);\\r\\n        building.lastClaimTime = nowTime;\\r\\n      }\\r\\n    }\\r\\n    totalRewardStacked += rewardsTotal;\\r\\n    return rewardsTotal;\\r\\n  }\\r\\n\\r\\n  function computeRewardAvailable(uint256 _lastClaimTime, uint256 _rewardPerSecond) private view returns (uint256) {\\r\\n    return (block.timestamp - _lastClaimTime) * _rewardPerSecond;\\r\\n  }\\r\\n\\r\\n  function computeTotalRewardSecond(address _account) external view returns (uint256) {\\r\\n    uint256 total = 0;\\r\\n    if (_isBuildingOwner(_account)) {\\r\\n      BuildingEntity[] storage buildings = buildingsOfUser[_account];\\r\\n      for (uint256 i = 0; i < buildings.length; i++) {\\r\\n        total += buildingTypes[buildings[i].typee].rewardPerSecond;\\r\\n      }\\r\\n    }\\r\\n    return total;\\r\\n  }\\r\\n\\r\\n  function uint2str(uint256 _i) internal pure returns (string memory _uintAsString) {\\r\\n    if (_i == 0) {\\r\\n      return '0';\\r\\n    }\\r\\n    uint256 j = _i;\\r\\n    uint256 len;\\r\\n    while (j != 0) {\\r\\n      len++;\\r\\n      j /= 10;\\r\\n    }\\r\\n    bytes memory bstr = new bytes(len);\\r\\n    uint256 k = len;\\r\\n    while (_i != 0) {\\r\\n      k = k - 1;\\r\\n      uint8 temp = (48 + uint8(_i - (_i / 10) * 10));\\r\\n      bytes1 b1 = bytes1(temp);\\r\\n      bstr[k] = b1;\\r\\n      _i /= 10;\\r\\n    }\\r\\n    return string(bstr);\\r\\n  }\\r\\n\\r\\n  function addBuildings(address[] memory _buildings, uint256 _type) external onlyOwner {\\r\\n    require(buildingTypes[_type].rewardPerSecond > 0, 'LEVEL NOT VALID');\\r\\n    uint256 creaTime = block.timestamp;\\r\\n    for (uint256 i = 0; i < _buildings.length; i++) {\\r\\n      buildingsOfUser[_buildings[i]].push(BuildingEntity({creationTime: creaTime, lastClaimTime: creaTime, typee: _type}));\\r\\n      totalBuildingsCreated++;\\r\\n    }\\r\\n  }\\r\\n\\r\\n  function removeBuildings(address[] memory buildingrs) external onlyOwner {\\r\\n    for (uint256 i = 0; i < buildingrs.length; i++) {\\r\\n      totalBuildingsCreated -= buildingsOfUser[buildingrs[i]].length;\\r\\n      delete buildingsOfUser[buildingrs[i]];\\r\\n    }\\r\\n  }\\r\\n\\r\\n  function checkActivity(address _account) internal returns (bool) {\\r\\n    if (isMaintenanceOn()) {\\r\\n      BuildingEntity[] memory buildings = buildingsOfUser[_account];\\r\\n      if (buildings[buildings.length - 1].creationTime + maintenanceInterval < block.timestamp) {\\r\\n        totalBuildingsCreated -= buildings.length;\\r\\n        delete buildings;\\r\\n        return true;\\r\\n      }\\r\\n    }\\r\\n    return false;\\r\\n  }\\r\\n\\r\\n  function createNewRewardBuildingEntity(uint256 _buildingprice, uint256 _buildingRewardPerSecond) external onlyOwner {\\r\\n    totalBuildingTypes++;\\r\\n    buildingTypes[totalBuildingTypes] = RewardBuildingEntity(_buildingprice, _buildingRewardPerSecond);\\r\\n  }\\r\\n\\r\\n  function updateRewardBuildingEntity(uint256 _buildingType, uint256 _buildingprice, uint256 _buildingRewardPerSecond) external onlyOwner {\\r\\n    buildingTypes[_buildingType] = RewardBuildingEntity(_buildingprice, _buildingRewardPerSecond);\\r\\n  }\\r\\n\\r\\n  function changeMinimumClaimInterval(uint256 _newVal) external onlyOwner {\\r\\n    minimumClaimInterval = _newVal;\\r\\n  }\\r\\n\\r\\n  function getRewardAmountOf(address _account) external view returns (uint256) {\\r\\n    require(_isBuildingOwner(_account), 'GET REWARD OF: NO BUILDING OWNER');\\r\\n    uint256 buildingsCount;\\r\\n\\r\\n    BuildingEntity[] memory buildings = buildingsOfUser[_account];\\r\\n    BuildingEntity memory building;\\r\\n    buildingsCount = buildings.length;\\r\\n    uint256 rewardsTotal = 0;\\r\\n    for (uint256 i = 0; i < buildings.length; i++) {\\r\\n      building = buildings[i];\\r\\n      rewardsTotal += computeRewardAvailable(building.lastClaimTime, buildingTypes[building.typee].rewardPerSecond);\\r\\n    }\\r\\n    return rewardsTotal;\\r\\n  }\\r\\n\\r\\n  function getTotalBuildingAmount(address _account) external view returns (uint256) {\\r\\n    uint256 totalAmount = 0;\\r\\n    uint256 buildingCount = buildingsOfUser[_account].length;\\r\\n    for (uint256 i = 0; i < buildingCount; i++) {\\r\\n      uint256 buildingType = buildingsOfUser[_account][i].typee;\\r\\n      uint256 price = buildingTypes[buildingType].price;\\r\\n      totalAmount += price;\\r\\n    }\\r\\n    return totalAmount;\\r\\n  }\\r\\n\\r\\n  function getTotalDailyRewards(address _account) public view returns (uint256) {\\r\\n    uint256 dailyTotalRewards = 0;\\r\\n    uint256 buildingCount = buildingsOfUser[_account].length;\\r\\n\\r\\n    for (uint256 i = 0; i < buildingCount; i++) {\\r\\n      uint256 buildingType = buildingsOfUser[_account][i].typee;\\r\\n      uint256 rewardPerSecond = buildingTypes[buildingType].rewardPerSecond;\\r\\n      dailyTotalRewards += rewardPerSecond;\\r\\n    }\\r\\n    return dailyTotalRewards;\\r\\n  }\\r\\n\\r\\n  function getBuildingRewardByCreatime(address _account, uint256 _creationTime) external view returns (uint256) {\\r\\n    require(_isBuildingOwner(_account), 'GET REWARD OF: NO BUILDING OWNER');\\r\\n    BuildingEntity[] storage buildings = buildingsOfUser[_account];\\r\\n    BuildingEntity storage building = _getBuildingWithCreatime(buildings, _creationTime);\\r\\n    uint256 rewards = computeRewardAvailable(building.lastClaimTime, buildingTypes[building.typee].rewardPerSecond);\\r\\n    return rewards;\\r\\n  }\\r\\n\\r\\n  function getBuildingRewardAmountOf(address _account, uint256 _buildingIndex) external view returns (uint256) {\\r\\n    require(_isBuildingOwner(_account), 'GET REWARD OF: NO BUILDING OWNER');\\r\\n    BuildingEntity[] storage buildings = buildingsOfUser[_account];\\r\\n    require(_buildingIndex < buildings.length, 'Index greater than building array size');\\r\\n    BuildingEntity storage building = buildings[_buildingIndex];\\r\\n    uint256 rewards = computeRewardAvailable(building.lastClaimTime, buildingTypes[building.typee].rewardPerSecond);\\r\\n    return rewards;\\r\\n  }\\r\\n\\r\\n  function getBuildingNumberOf(address _account) public view returns (uint256) {\\r\\n    return buildingsOfUser[_account].length;\\r\\n  }\\r\\n\\r\\n  function getBuildingNumberOfType(address _account, uint256 _type) public view returns (uint256) {\\r\\n    require(_isBuildingOwner(_account), 'GET BUILDING NUMBER TYPE OF : NO BUILDING OWNER');\\r\\n    BuildingEntity[] memory buildings = buildingsOfUser[_account];\\r\\n    uint256 cpt = 0;\\r\\n    for (uint i = 0; i < buildings.length; i++) {\\r\\n      if (buildings[i].typee == _type) {\\r\\n        cpt++;\\r\\n      }\\r\\n    }\\r\\n    return cpt;\\r\\n  }\\r\\n\\r\\n  function getBuildingCreatimeOf(address _account, uint256 _buildingIndex) public view returns (uint256) {\\r\\n    require(_isBuildingOwner(_account), 'GET REWARD OF: NO BUILDING OWNER');\\r\\n    require(_buildingIndex < buildingsOfUser[_account].length, 'Index greater than building array size');\\r\\n    return buildingsOfUser[_account][_buildingIndex].creationTime;\\r\\n  }\\r\\n\\r\\n  function getBuildingLastClaimOf(address _account, uint256 _buildingIndex) public view returns (uint256) {\\r\\n    require(_isBuildingOwner(_account), 'GET REWARD OF: NO BUILDING OWNER');\\r\\n    require(_buildingIndex < buildingsOfUser[_account].length, 'Index greater than building array size');\\r\\n    return buildingsOfUser[_account][_buildingIndex].lastClaimTime;\\r\\n  }\\r\\n\\r\\n  function getBuildingTypeOf(address _account, uint256 _buildingIndex) public view returns (uint256) {\\r\\n    require(_isBuildingOwner(_account), 'GET REWARD OF: NO BUILDING OWNER');\\r\\n    require(_buildingIndex < buildingsOfUser[_account].length, 'Index greater than building array size');\\r\\n    return buildingsOfUser[_account][_buildingIndex].typee;\\r\\n  }\\r\\n\\r\\n  function _isBuildingOwner(address _account) private view returns (bool) {\\r\\n    return buildingsOfUser[_account].length > 0;\\r\\n  }\\r\\n\\r\\n  function isBuildingOwner(address _account) external view returns (bool) {\\r\\n    return _isBuildingOwner(_account);\\r\\n  }\\r\\n\\r\\n  function getPriceOfBuilding(uint8 _type) external view returns (uint256) {\\r\\n    return buildingTypes[_type].price;\\r\\n  }\\r\\n\\r\\n  function getrewardOfBuilding(uint8 _type) external view returns (uint256) {\\r\\n    return buildingTypes[_type].rewardPerSecond;\\r\\n  }\\r\\n\\r\\n  function getBuildingClaimEligibility(address _account, uint256 _buildingIndex) external view returns (bool) {\\r\\n    require(_isBuildingOwner(_account), 'GET REWARD OF: NO BUILDING OWNER');\\r\\n    require(_buildingIndex < buildingsOfUser[_account].length, 'Index greater than building array size');\\r\\n    return block.timestamp - buildingsOfUser[_account][_buildingIndex].lastClaimTime > minimumClaimInterval;\\r\\n  }\\r\\n\\r\\n  function isMaintenanceOn() public view returns (bool) {\\r\\n    return maintenanceInterval > 0;\\r\\n  }\\r\\n\\r\\n  function getBuildingOwners() external view returns (address[] memory) {\\r\\n    return buildingOwners;\\r\\n  }\\r\\n\\r\\n  // Ranged version of getBuildingOwners\\r\\n  function getBuildingOwnersRange(uint256 _start, uint256 _end) external view returns (address[] memory) {\\r\\n    require(_start < _end, 'INVALID RANGE');\\r\\n    require(_end <= buildingOwners.length, 'OUT OF RANGE');\\r\\n\\r\\n    address[] memory owners = new address[](_end - _start);\\r\\n    for (uint256 i = _start; i < _end; i++) owners[i - _start] = buildingOwners[i];\\r\\n\\r\\n    return owners;\\r\\n  }\\r\\n\\r\\n  // Number of buildings owned by each building owner, ranged\\r\\n  function getBuildingNumbersRange(uint256 _start, uint256 _end) external view returns (uint256[] memory) {\\r\\n    require(_start < _end, 'INVALID RANGE');\\r\\n    require(_end <= buildingOwners.length, 'OUT OF RANGE');\\r\\n\\r\\n    uint256[] memory numbers = new uint256[](_end - _start);\\r\\n    for (uint256 i = _start; i < _end; i++) numbers[i - _start] = buildingsOfUser[buildingOwners[i]].length;\\r\\n\\r\\n    return numbers;\\r\\n  }\\r\\n\\r\\n  // Total daily rewards for each building owner, ranged\\r\\n  function getTotalDailyRewardsRange(uint256 _start, uint256 _end) external view returns (uint256[] memory) {\\r\\n    require(_start < _end, 'INVALID RANGE');\\r\\n    require(_end <= buildingOwners.length, 'OUT OF RANGE');\\r\\n\\r\\n    uint256[] memory rewards = new uint256[](_end - _start);\\r\\n    for (uint256 i = _start; i < _end; i++) rewards[i - _start] = getTotalDailyRewards(buildingOwners[i]);\\r\\n\\r\\n    return rewards;\\r\\n  }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interfaces/IERC20Burnable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.26;\\r\\n\\r\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\r\\n\\r\\ninterface IERC20Burnable is IERC20 {\\r\\n  function burn(uint256 amount) external;\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interfaces/IUniswapV2Router01.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.26;\\r\\n\\r\\ninterface IUniswapV2Router01 {\\r\\n  function factory() external pure returns (address);\\r\\n  function WETH() external pure returns (address);\\r\\n\\r\\n  function addLiquidity(\\r\\n    address tokenA,\\r\\n    address tokenB,\\r\\n    uint amountADesired,\\r\\n    uint amountBDesired,\\r\\n    uint amountAMin,\\r\\n    uint amountBMin,\\r\\n    address to,\\r\\n    uint deadline\\r\\n  ) external returns (uint amountA, uint amountB, uint liquidity);\\r\\n  function addLiquidityETH(\\r\\n    address token,\\r\\n    uint amountTokenDesired,\\r\\n    uint amountTokenMin,\\r\\n    uint amountETHMin,\\r\\n    address to,\\r\\n    uint deadline\\r\\n  ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\r\\n  function removeLiquidity(\\r\\n    address tokenA,\\r\\n    address tokenB,\\r\\n    uint liquidity,\\r\\n    uint amountAMin,\\r\\n    uint amountBMin,\\r\\n    address to,\\r\\n    uint deadline\\r\\n  ) external returns (uint amountA, uint amountB);\\r\\n  function removeLiquidityETH(\\r\\n    address token,\\r\\n    uint liquidity,\\r\\n    uint amountTokenMin,\\r\\n    uint amountETHMin,\\r\\n    address to,\\r\\n    uint deadline\\r\\n  ) external returns (uint amountToken, uint amountETH);\\r\\n  function removeLiquidityWithPermit(\\r\\n    address tokenA,\\r\\n    address tokenB,\\r\\n    uint liquidity,\\r\\n    uint amountAMin,\\r\\n    uint amountBMin,\\r\\n    address to,\\r\\n    uint deadline,\\r\\n    bool approveMax,\\r\\n    uint8 v,\\r\\n    bytes32 r,\\r\\n    bytes32 s\\r\\n  ) external returns (uint amountA, uint amountB);\\r\\n  function removeLiquidityETHWithPermit(\\r\\n    address token,\\r\\n    uint liquidity,\\r\\n    uint amountTokenMin,\\r\\n    uint amountETHMin,\\r\\n    address to,\\r\\n    uint deadline,\\r\\n    bool approveMax,\\r\\n    uint8 v,\\r\\n    bytes32 r,\\r\\n    bytes32 s\\r\\n  ) external returns (uint amountToken, uint amountETH);\\r\\n  function swapExactTokensForTokens(\\r\\n    uint amountIn,\\r\\n    uint amountOutMin,\\r\\n    address[] calldata path,\\r\\n    address to,\\r\\n    uint deadline\\r\\n  ) external returns (uint[] memory amounts);\\r\\n  function swapTokensForExactTokens(\\r\\n    uint amountOut,\\r\\n    uint amountInMax,\\r\\n    address[] calldata path,\\r\\n    address to,\\r\\n    uint deadline\\r\\n  ) external returns (uint[] memory amounts);\\r\\n  function swapExactETHForTokens(\\r\\n    uint amountOutMin,\\r\\n    address[] calldata path,\\r\\n    address to,\\r\\n    uint deadline\\r\\n  ) external payable returns (uint[] memory amounts);\\r\\n  function swapTokensForExactETH(\\r\\n    uint amountOut,\\r\\n    uint amountInMax,\\r\\n    address[] calldata path,\\r\\n    address to,\\r\\n    uint deadline\\r\\n  ) external returns (uint[] memory amounts);\\r\\n  function swapExactTokensForETH(\\r\\n    uint amountIn,\\r\\n    uint amountOutMin,\\r\\n    address[] calldata path,\\r\\n    address to,\\r\\n    uint deadline\\r\\n  ) external returns (uint[] memory amounts);\\r\\n  function swapETHForExactTokens(\\r\\n    uint amountOut,\\r\\n    address[] calldata path,\\r\\n    address to,\\r\\n    uint deadline\\r\\n  ) external payable returns (uint[] memory amounts);\\r\\n\\r\\n  function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\r\\n  function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\r\\n  function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\r\\n  function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\r\\n  function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interfaces/IUniswapV2Router02.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.26;\\r\\n\\r\\nimport './IUniswapV2Router01.sol';\\r\\n\\r\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\r\\n  function removeLiquidityETHSupportingFeeOnTransferTokens(\\r\\n    address token,\\r\\n    uint liquidity,\\r\\n    uint amountTokenMin,\\r\\n    uint amountETHMin,\\r\\n    address to,\\r\\n    uint deadline\\r\\n  ) external returns (uint amountETH);\\r\\n  function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\r\\n    address token,\\r\\n    uint liquidity,\\r\\n    uint amountTokenMin,\\r\\n    uint amountETHMin,\\r\\n    address to,\\r\\n    uint deadline,\\r\\n    bool approveMax,\\r\\n    uint8 v,\\r\\n    bytes32 r,\\r\\n    bytes32 s\\r\\n  ) external returns (uint amountETH);\\r\\n\\r\\n  function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\r\\n    uint amountIn,\\r\\n    uint amountOutMin,\\r\\n    address[] calldata path,\\r\\n    address to,\\r\\n    uint deadline\\r\\n  ) external;\\r\\n  function swapExactETHForTokensSupportingFeeOnTransferTokens(\\r\\n    uint amountOutMin,\\r\\n    address[] calldata path,\\r\\n    address to,\\r\\n    uint deadline\\r\\n  ) external payable;\\r\\n  function swapExactTokensForETHSupportingFeeOnTransferTokens(\\r\\n    uint amountIn,\\r\\n    uint amountOutMin,\\r\\n    address[] calldata path,\\r\\n    address to,\\r\\n    uint deadline\\r\\n  ) external;\\r\\n}\\r\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"viaIR\": true,\r\n    \"evmVersion\": \"paris\",\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_payees\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_shares\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"_V2Router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_reservePool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_USDC\",\"type\":\"address\"},{\"internalType\":\"uint8[]\",\"name\":\"fees\",\"type\":\"uint8[]\"},{\"internalType\":\"uint256\",\"name\":\"swapAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_typesNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"_buildingPrices\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_rewardPerBuildings\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"AddressEmptyCode\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AddressInsufficientBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedInnerCall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"SafeERC20FailedOperation\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"CashoutAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"CashoutBuilding\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"creationTime\",\"type\":\"uint256\"}],\"name\":\"CreationBuilding\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isExcluded\",\"type\":\"bool\"}],\"name\":\"Exclude\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldAddress\",\"type\":\"address\"}],\"name\":\"UpdateRouter\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"USDC\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"buildings\",\"type\":\"address[]\"},{\"internalType\":\"uint8\",\"name\":\"_type\",\"type\":\"uint8\"}],\"name\":\"addBuildings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"affiliateFee\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buildingRewardManagement\",\"outputs\":[{\"internalType\":\"contract BuildingRewardManagement\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnFee\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cashoutAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"cashoutReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"blocktime\",\"type\":\"uint256\"}],\"name\":\"cashoutRewardByCreatime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract BuildingRewardManagement\",\"name\":\"_newManager\",\"type\":\"address\"}],\"name\":\"changeBuildingManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newVal\",\"type\":\"uint256\"}],\"name\":\"changeMinimumClaimInterval\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"newVal\",\"type\":\"bool\"}],\"name\":\"changeSwapLiquify\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20Burnable\",\"name\":\"_newToken\",\"type\":\"address\"}],\"name\":\"changeToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_newUSDC\",\"type\":\"address\"}],\"name\":\"changeUSDC\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"_type\",\"type\":\"uint8\"}],\"name\":\"createBuildingForUser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_type\",\"type\":\"uint8\"}],\"name\":\"createBuildingWithTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_type\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"_affiliateAddress\",\"type\":\"address\"}],\"name\":\"createBuildingWithTokensAndAffiliation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_buildingPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_buildingRewardPerSecond\",\"type\":\"uint256\"}],\"name\":\"createNewRewardBuildingEntity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"usdcAmount\",\"type\":\"uint256\"}],\"name\":\"distributeUSDCManual\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"distributionFee\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"excluded\",\"type\":\"bool\"}],\"name\":\"exclude\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_affiliateAddress\",\"type\":\"address\"}],\"name\":\"getAffiliateReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_buildingIndex\",\"type\":\"uint256\"}],\"name\":\"getBuildingClaimEligibility\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_buildingIndex\",\"type\":\"uint256\"}],\"name\":\"getBuildingCreatimeOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_buildingIndex\",\"type\":\"uint256\"}],\"name\":\"getBuildingLastClaimOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"getBuildingNumberOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_buildingIndex\",\"type\":\"uint256\"}],\"name\":\"getBuildingNumberOfType\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_end\",\"type\":\"uint256\"}],\"name\":\"getBuildingNumbersRange\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBuildingOwners\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_end\",\"type\":\"uint256\"}],\"name\":\"getBuildingOwnersRange\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_type\",\"type\":\"uint8\"}],\"name\":\"getBuildingPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_buildingIndex\",\"type\":\"uint256\"}],\"name\":\"getBuildingRewardAmountOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_buildingIndex\",\"type\":\"uint256\"}],\"name\":\"getBuildingTypeOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMinimumClaimInterval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRewardAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"getRewardAmountOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_type\",\"type\":\"uint8\"}],\"name\":\"getRewardPerBuilding\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"getTotalBuildingAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalBuildingTypes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalBuildingsCreated\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"getTotalDailyRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_end\",\"type\":\"uint256\"}],\"name\":\"getTotalDailyRewardsRange\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalRewardStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isBuildingOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"isExcluded\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingFee\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"payees\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"protectAgainstMalicious\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"buildings\",\"type\":\"address[]\"}],\"name\":\"removeBuildings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reservePool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"shares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapLiquify\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapTokensAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"swapTokensForUSDCManual\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapping\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20Burnable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"value\",\"type\":\"uint8\"}],\"name\":\"updateAffiliateFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"value\",\"type\":\"uint8\"}],\"name\":\"updateBurnFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"value\",\"type\":\"uint8\"}],\"name\":\"updateDistributionFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"value\",\"type\":\"uint8\"}],\"name\":\"updateMarketingFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newAddress\",\"type\":\"address\"}],\"name\":\"updateReservePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_buildingType\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_buildingPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_buildingRewardPerSecond\",\"type\":\"uint256\"}],\"name\":\"updateRewardBuildingEntity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"updateV2Router\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "BuildingManager", "CompilerVersion": "v0.8.26+commit.8a97fa7a", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000000000000000000000000000000000000000016000000000000000000000000000000000000000000000000000000000000002000000000000000000000000007a250d5630b4cf539739df2c5dacb4c659f2488d000000000000000000000000a65e24944e16eb6bef4257fdabcfdb2bddeb94060000000000000000000000009afffb7fd2de2d8024e9c3746be75476270eca68000000000000000000000000dac17f958d2ee523a2206206994597c13d831ec700000000000000000000000000000000000000000000000000000000000002a00000000000000000000000000000000000000000000000000000000000000fa00000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000034000000000000000000000000000000000000000000000000000000000000003e00000000000000000000000000000000000000000000000000000000000000004000000000000000000000000981e7fda63e58e94076ee4ae78bf9d2af830ded40000000000000000000000008c8f343aed881fe60243b057cabc4985c210d7f3000000000000000000000000de425503230a8aade13e91a3e75fc3641d8003b9000000000000000000000000f407b1f56ee7620d6c61d0f90bbd1fcc79eb272da0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000003e800000000000000000000000000000000000000000000000000000000000007d00000000000000000000000000000000000000000000000000000000000000fa00000000000000000000000000000000000000000000000000000000000001f40000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000018acbea49383200000000000000000000000000000000000000000000000000036d535df80b1b00000000000000000000000000000000000000000000000000078a1dcebb4ba600000000000000000000000000000000000000000000000000107329c30d0225", "EVMVersion": "paris", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}