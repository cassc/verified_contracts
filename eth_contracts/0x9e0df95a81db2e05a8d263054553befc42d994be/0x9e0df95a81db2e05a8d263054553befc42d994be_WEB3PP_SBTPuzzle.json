{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\ncontract WEB3PP_SBTPuzzle {\r\n    event Transfer(\r\n        address indexed from,\r\n        address indexed to,\r\n        uint256 indexed tokenId\r\n    );\r\n\r\n    string public constant name = \"Web3 is Pure and Powerful\";\r\n    string public constant symbol = \"SBTPuzzle\";\r\n\r\n    address public owner;\r\n\r\n    constructor() {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    function addressToUint256(address input) internal pure returns (uint256) {\r\n        return uint256(uint160(input));\r\n    }\r\n\r\n    function uint256ToAddress(uint256 input) internal pure returns (address) {\r\n        require(input < 1 << 160, \"SOUL_INVALID\");\r\n        return address(uint160(input));\r\n    }\r\n\r\n    function toString(bytes memory data) internal pure returns (string memory) {\r\n        bytes memory alphabet = \"0123456789abcdef\";\r\n\r\n        bytes memory str = new bytes(2 + data.length * 2);\r\n        str[0] = \"0\";\r\n        str[1] = \"x\";\r\n        for (uint256 i = 0; i < data.length; i++) {\r\n            str[2 + i * 2] = alphabet[uint256(uint8(data[i] >> 4))];\r\n            str[3 + i * 2] = alphabet[uint256(uint8(data[i] & 0x0f))];\r\n        }\r\n        return string(str);\r\n    }\r\n\r\n    function balanceOf(address) external pure returns (uint256) {\r\n        return 1;\r\n    }\r\n\r\n    function ownerOf(uint256 tokenId) external pure returns (address) {\r\n        return uint256ToAddress(tokenId >> 32);\r\n    }\r\n\r\n    function getApproved(uint256) external pure returns (address) {}\r\n\r\n    function isApprovedForAll(address, address) external pure returns (bool) {}\r\n\r\n    function tokenURI(uint256 tokenId)\r\n        external\r\n        pure\r\n        virtual\r\n        returns (string memory)\r\n    {\r\n        return\r\n            string(\r\n                abi.encodePacked(\r\n                    \"https://www.mendelverse.com/api/contacts/\",\r\n                    toString(abi.encodePacked(uint32(tokenId)))\r\n                )\r\n            );\r\n    }\r\n\r\n    function claim(uint32 refNum) public {\r\n        emit Transfer(\r\n            address(0),\r\n            msg.sender,\r\n            (addressToUint256(msg.sender) << 32) | refNum\r\n        );\r\n    }\r\n\r\n    function claimTo(address account, uint32 refNum) public {\r\n        require(msg.sender == owner, \"Ping Pong\");\r\n        emit Transfer(\r\n            address(0),\r\n            account,\r\n            (addressToUint256(account) << 32) | refNum\r\n        );\r\n    }\r\n\r\n    function trash(uint32 refNum) public {\r\n        emit Transfer(\r\n            msg.sender,\r\n            address(0),\r\n            (addressToUint256(msg.sender) << 32) | refNum\r\n        );\r\n    }\r\n\r\n    function supportsInterface(bytes4) external pure returns (bool supported) {\r\n        supported = true;\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"refNum\",\"type\":\"uint32\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"refNum\",\"type\":\"uint32\"}],\"name\":\"claimTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"supported\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"refNum\",\"type\":\"uint32\"}],\"name\":\"trash\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "WEB3PP_SBTPuzzle", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://c28811296303732ed0e0f7ca996a4dfd0a4d7bb7778672d140af91b9e431aae9"}