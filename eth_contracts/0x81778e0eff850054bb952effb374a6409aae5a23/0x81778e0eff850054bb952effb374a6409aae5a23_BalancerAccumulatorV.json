{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.10;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\r\n}\r\n\r\n/**\r\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\r\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\r\n *\r\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\r\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\r\n * need to send a transaction, and thus is not required to hold Ether at all.\r\n */\r\ninterface IERC20Permit {\r\n    /**\r\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\r\n     * given ``owner``'s signed approval.\r\n     *\r\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\r\n     * ordering also apply here.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `deadline` must be a timestamp in the future.\r\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\r\n     * over the EIP712-formatted function arguments.\r\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\r\n     *\r\n     * For more information on the signature format, see the\r\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\r\n     * section].\r\n     */\r\n    function permit(\r\n        address owner,\r\n        address spender,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Returns the current nonce for `owner`. This value must be\r\n     * included whenever a signature is generated for {permit}.\r\n     *\r\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\r\n     * prevents a signature from being used multiple times.\r\n     */\r\n    function nonces(address owner) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\r\n     */\r\n    // solhint-disable-next-line func-name-mixedcase\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n}\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     *\r\n     * Furthermore, `isContract` will also return true if the target contract within\r\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\r\n     * which only has an effect at the end of a transaction.\r\n     * ====\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\r\n     *\r\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\r\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\r\n     * constructor.\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize/address.code.length, which returns 0\r\n        // for contracts in construction, since the code is only stored at the end\r\n        // of the constructor execution.\r\n\r\n        return account.code.length > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain `call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\r\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\r\n     *\r\n     * _Available since v4.8._\r\n     */\r\n    function verifyCallResultFromTarget(\r\n        address target,\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        if (success) {\r\n            if (returndata.length == 0) {\r\n                // only check isContract if the call was successful and the return data is empty\r\n                // otherwise we already know that it was a contract\r\n                require(isContract(target), \"Address: call to non-contract\");\r\n            }\r\n            return returndata;\r\n        } else {\r\n            _revert(returndata, errorMessage);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\r\n     * revert reason or using the provided one.\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            _revert(returndata, errorMessage);\r\n        }\r\n    }\r\n\r\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\r\n        // Look for revert reason and bubble it up if present\r\n        if (returndata.length > 0) {\r\n            // The easiest way to bubble the revert reason is using memory via assembly\r\n            /// @solidity memory-safe-assembly\r\n            assembly {\r\n                let returndata_size := mload(returndata)\r\n                revert(add(32, returndata), returndata_size)\r\n            }\r\n        } else {\r\n            revert(errorMessage);\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using Address for address;\r\n\r\n    /**\r\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\r\n     * non-reverting calls are assumed to be successful.\r\n     */\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\r\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\r\n     */\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        require(\r\n            (value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\r\n     * non-reverting calls are assumed to be successful.\r\n     */\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 oldAllowance = token.allowance(address(this), spender);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\r\n    }\r\n\r\n    /**\r\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\r\n     * non-reverting calls are assumed to be successful.\r\n     */\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        unchecked {\r\n            uint256 oldAllowance = token.allowance(address(this), spender);\r\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\r\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\r\n     * non-reverting calls are assumed to be successful. Compatible with tokens that require the approval to be set to\r\n     * 0 before setting it to a non-zero value.\r\n     */\r\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\r\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\r\n\r\n        if (!_callOptionalReturnBool(token, approvalCall)) {\r\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\r\n            _callOptionalReturn(token, approvalCall);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\r\n     * Revert on invalid signature.\r\n     */\r\n    function safePermit(\r\n        IERC20Permit token,\r\n        address owner,\r\n        address spender,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) internal {\r\n        uint256 nonceBefore = token.nonces(owner);\r\n        token.permit(owner, spender, value, deadline, v, r, s);\r\n        uint256 nonceAfter = token.nonces(owner);\r\n        require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     *\r\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\r\n     */\r\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\r\n        // and not revert is the subcall reverts.\r\n\r\n        (bool success, bytes memory returndata) = address(token).call(data);\r\n        return\r\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\r\n    }\r\n}\r\n\r\ninterface ILocker {\r\n    function claimRewards(address, address) external;\r\n    function claimAllRewards(address[] memory, address) external;\r\n}\r\n\r\ninterface ILiquidityGauge {\r\n    struct Reward {\r\n        address token;\r\n        address distributor;\r\n        uint256 period_finish;\r\n        uint256 rate;\r\n        uint256 last_update;\r\n        uint256 integral;\r\n    }\r\n    function admin() external returns(address);\r\n    function add_reward(address, address) external;\r\n    function reward_data(address) external returns (Reward memory);\r\n    function deposit_reward_token(address, uint256) external;\r\n    function set_reward_distributor(address, address) external;\r\n}\r\n\r\ninterface ISDTDistributor {\r\n    function distribute(address) external;\r\n}\r\n\r\ninterface IVeBoost {\r\n    function approve(address, uint256) external;\r\n    function boost(address, uint256, uint256, address) external;\r\n    function delegable_balance(address) external returns (uint256);\r\n    function permit(address, address, uint256, uint256, uint8, bytes32, bytes32) external;\r\n    function received_balance(address) external returns (uint256);\r\n}\r\n\r\ninterface IVeBoostDelegation {\r\n    function veTOKEN_BOOST() external returns (address);\r\n}\r\n\r\n/// @title A contract that accumulates rewards and notifies them to the LGV4 and to the delegators\r\n/// @author StakeDAO\r\ncontract BalancerAccumulatorV3 {\r\n    using SafeERC20 for IERC20;\r\n\r\n    /* ========== ERRORS ======== */\r\n    error ONLY_GOV();\r\n    error NOT_ALLOWED();\r\n    error ZERO_AMOUNT();\r\n    error ZERO_ADDRESS();\r\n\r\n    /* ========== STATE VARIABLES ========== */\r\n\r\n    address public governance;\r\n    address public locker;\r\n    address public gauge;\r\n    address public sdtDistributor;\r\n    uint256 public claimerFee;\r\n    IVeBoostDelegation public veBoostDelegation;\r\n    IVeBoost public veBoost;\r\n    address public constant VE_BAL = 0xC128a9954e6c874eA3d62ce62B468bA073093F25;\r\n    uint256 public multiplier = 1e18;\r\n    address public constant BAL = 0xba100000625a3754423978a60c9317c58a424e3D;\r\n    address[] public rewardTokens;\r\n\r\n    /* ========== EVENTS ========== */\r\n\r\n    event SdtDistributorSet(address oldDistributor, address newDistributor);\r\n    event GaugeSet(address oldGauge, address newGauge);\r\n    event RewardNotified(address gauge, address tokenReward, uint256 amountNotified, uint256 claimerFee);\r\n    event LockerSet(address oldLocker, address newLocker);\r\n    event GovernanceSet(address oldGov, address newGov);\r\n    event ClaimerFeeSet(uint256 oldF, uint256 newF);\r\n    event MultiplicatorSet(uint256 oldM, uint256 newM);\r\n    event TokenDeposited(address token, uint256 amount);\r\n    event ERC20Rescued(address token, uint256 amount);\r\n    event VeBoostSet(address oldVeBoost, address newVeBoost);\r\n    event VeBoostDelegationSet(address oldVeBoostDelegation, address newVeBoostDelegation);\r\n\r\n    /* ========== CONSTRUCTOR ========== */\r\n    constructor(address _gauge, address _veBoostDelegation, address _locker) {\r\n        gauge = _gauge;\r\n        governance = msg.sender;\r\n        veBoostDelegation = IVeBoostDelegation(_veBoostDelegation);\r\n        veBoost = IVeBoost(veBoostDelegation.veTOKEN_BOOST());\r\n        locker = _locker;\r\n        rewardTokens.push(BAL);\r\n        rewardTokens.push(0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48); // USDC\r\n    }\r\n\r\n    /* ========== MUTATIVE FUNCTIONS ========== */\r\n    /// @notice Claims rewards from the locker and notify all to the LGV4\r\n    function claimAndNotify(address _token) external {\r\n        // if acc holds any BAL before the claim, reserve a part to the veBAL delegators\r\n        _sendBalToVeBoostDelegation();\r\n        ILocker(locker).claimRewards(_token, address(this));\r\n        _notifyReward(_token);\r\n        _distributeSDT();\r\n    }\r\n\r\n    /// @notice Claims rewards from the locker and notify all to the LGV4\r\n    function claimAllRewardsAndNotify() external {\r\n        // if acc holds any BAL before the claim, reserve a part to the veBAL delegators\r\n        _sendBalToVeBoostDelegation();\r\n        ILocker(locker).claimAllRewards(rewardTokens, address(this));\r\n        uint256 rewardTokensLength = rewardTokens.length;\r\n        for (uint256 i; i < rewardTokensLength;) {\r\n            _notifyReward(rewardTokens[i]);\r\n            unchecked {\r\n                ++i;\r\n            }\r\n        }\r\n        _distributeSDT();\r\n    }\r\n\r\n    /// @notice Notify the reward rewards from the locker and notify all to the LGV4\r\n    function notifyReward(address _token) external {\r\n        // if the acc holds any BAL before the claim, reserve a part to the veBAL delegators\r\n        _sendBalToVeBoostDelegation();\r\n        _notifyReward(_token);\r\n        _distributeSDT();\r\n    }\r\n\r\n    /// @notice Deposit token into the accumulator\r\n    /// @param _token token to deposit\r\n    /// @param _amount amount to deposit\r\n    function depositToken(address _token, uint256 _amount) external {\r\n        if (_amount == 0) revert ZERO_AMOUNT();\r\n        IERC20(_token).safeTransferFrom(msg.sender, address(this), _amount);\r\n        emit TokenDeposited(_token, _amount);\r\n    }\r\n\r\n    /* ========== INTERNAL FUNCTIONS ========== */\r\n    /// @notice Notify the new reward to the LGV4\r\n    /// @param _tokenReward token to notify\r\n    function _notifyReward(address _tokenReward) internal {\r\n        if (ILiquidityGauge(gauge).reward_data(_tokenReward).distributor != address(this)) revert NOT_ALLOWED();\r\n        \r\n        uint256 amount = IERC20(_tokenReward).balanceOf(address(this));\r\n        if (amount == 0) revert ZERO_AMOUNT();\r\n        uint256 claimerReward = (amount * claimerFee) / 10_000;\r\n        IERC20(_tokenReward).safeTransfer(msg.sender, claimerReward);\r\n        amount -= claimerReward;\r\n        IERC20(_tokenReward).approve(gauge, amount);\r\n        ILiquidityGauge(gauge).deposit_reward_token(_tokenReward, amount);\r\n\r\n        emit RewardNotified(gauge, _tokenReward, amount, claimerReward);\r\n    }\r\n\r\n    /// @notice Internal function to notify SDT to the gauge\r\n    function _distributeSDT() internal {\r\n        if (sdtDistributor != address(0)) {\r\n            ISDTDistributor(sdtDistributor).distribute(gauge);\r\n        }\r\n    }\r\n\r\n    /// @notice Internal function to send BAL reward to the veBAL delegators \r\n    function _sendBalToVeBoostDelegation() internal {\r\n        uint256 amount = IERC20(BAL).balanceOf(address(this));\r\n        if (amount == 0) return;\r\n        // calculate reward for veBoost delegators\r\n        // fetch the delegation boost\r\n        uint256 boostReceived = veBoost.received_balance(locker);\r\n        if (boostReceived != 0) {\r\n            uint256 lockerVeBal = IERC20(VE_BAL).balanceOf(locker);\r\n            // calculate the percentage of reward to reserve for acc\r\n            uint256 accPercentage = 100e18 * lockerVeBal / (boostReceived + lockerVeBal);\r\n            uint256 accAmount = (amount * 1e18 / 100 * accPercentage) / 1e36;\r\n            // apply multiplier to the accumulator amount to increase/decrease it\r\n            if (multiplier > 1e18) {\r\n                accAmount = accAmount * multiplier / 1e18;\r\n            } else if (multiplier < 1e18) {\r\n                accAmount = 1e18 / multiplier * accAmount;\r\n            }\r\n            uint256 delegatorsAmount = amount - accAmount;\r\n            IERC20(BAL).safeTransfer(address(veBoostDelegation), delegatorsAmount);\r\n        }\r\n        // if no one delegated boost to the locker it reserves the whole amount here\r\n    }\r\n\r\n    /* ========== SETTER FUNCTIONS ========== */\r\n    /// @notice Add a reward token\r\n    /// @dev Can be called only by the governance\r\n    /// @param _token reward token to add\r\n    function addRewardToken(address _token) external {\r\n        if (msg.sender != governance) revert ONLY_GOV();\r\n        rewardTokens.push(_token);\r\n    }\r\n\r\n    /// @notice Set a new reward tokens array\r\n    /// @dev Can be called only by the governance\r\n    /// @param _tokens reward tokens to set\r\n    function setRewardTokens(address[] calldata _tokens) external {\r\n        if (msg.sender != governance) revert ONLY_GOV();\r\n        rewardTokens = _tokens;\r\n    }\r\n\r\n    /// @notice Sets gauge for the accumulator which will receive and distribute the rewards\r\n    /// @dev Can be called only by the governance\r\n    /// @param _gauge gauge address\r\n    function setGauge(address _gauge) external {\r\n        if (msg.sender != governance) revert ONLY_GOV();\r\n        if (_gauge == address(0)) revert ZERO_ADDRESS();\r\n        emit GaugeSet(gauge, _gauge);\r\n        gauge = _gauge;\r\n    }\r\n\r\n    /// @notice Sets SdtDistributor to distribute from the Accumulator SDT Rewards to Gauge.\r\n    /// @dev Can be called only by the governance\r\n    /// @param _sdtDistributor gauge address\r\n    function setSdtDistributor(address _sdtDistributor) external {\r\n        if (msg.sender != governance) revert ONLY_GOV();\r\n        if (_sdtDistributor == address(0)) revert ZERO_ADDRESS();\r\n        emit SdtDistributorSet(sdtDistributor, _sdtDistributor);\r\n        sdtDistributor = _sdtDistributor;\r\n    }\r\n\r\n    /// @notice Allows the governance to set the new governance\r\n    /// @dev Can be called only by the governance\r\n    /// @param _governance governance address\r\n    function setGovernance(address _governance) external {\r\n        if (msg.sender != governance) revert ONLY_GOV();\r\n        if (_governance == address(0)) revert ZERO_ADDRESS();\r\n        emit GovernanceSet(governance, _governance);\r\n        governance = _governance;\r\n    }\r\n\r\n    /// @notice Allows the governance to set the locker\r\n    /// @dev Can be called only by the governance\r\n    /// @param _locker locker address\r\n    function setLocker(address _locker) external {\r\n        if (msg.sender != governance) revert ONLY_GOV();\r\n        if (_locker == address(0)) revert ZERO_ADDRESS();\r\n        emit LockerSet(locker, _locker);\r\n        locker = _locker;\r\n    }\r\n\r\n    /// @notice Allows the governance to set the claimer fee\r\n    /// @dev Can be called only by the governance\r\n    /// @param _claimerFee claimer fee\r\n    function setClaimerFee(uint256 _claimerFee) external {\r\n        if (msg.sender != governance) revert ONLY_GOV();\r\n        emit ClaimerFeeSet(claimerFee, _claimerFee);\r\n        claimerFee = _claimerFee;\r\n    }\r\n\r\n    /// @notice Allows the governance to set the multiplicator\r\n    /// @dev Can be called only by the governance\r\n    /// @param _multiplier token reward address\r\n    function setMultiplier(uint256 _multiplier) external {\r\n        if (msg.sender != governance) revert ONLY_GOV();\r\n        emit MultiplicatorSet(multiplier, _multiplier);\r\n        multiplier = _multiplier;\r\n    }\r\n\r\n    /// @notice Allows the governance to set a new veBoost\r\n    /// @dev Can be called only by the governance\r\n    /// @param _veBoost balancer veBoost address\r\n    function setVeBoost(address _veBoost) external {\r\n        if (msg.sender != governance) revert ONLY_GOV();\r\n        emit VeBoostSet(address(veBoost), _veBoost);\r\n        veBoost = IVeBoost(_veBoost);\r\n    }\r\n\r\n    /// @notice Allows the governance to set a new veBoost delegation\r\n    /// @dev Can be called only by the governance\r\n    /// @param _veBoostDelegation stake dao veBoostDelegation address\r\n    function setVeBoostDelegation(address _veBoostDelegation) external {\r\n        if (msg.sender != governance) revert ONLY_GOV();\r\n        emit VeBoostDelegationSet(address(veBoostDelegation), _veBoostDelegation);\r\n        veBoostDelegation = IVeBoostDelegation(_veBoostDelegation);\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_gauge\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_veBoostDelegation\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_locker\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"NOT_ALLOWED\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ONLY_GOV\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZERO_ADDRESS\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZERO_AMOUNT\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldF\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newF\",\"type\":\"uint256\"}],\"name\":\"ClaimerFeeSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ERC20Rescued\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldGauge\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newGauge\",\"type\":\"address\"}],\"name\":\"GaugeSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldGov\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newGov\",\"type\":\"address\"}],\"name\":\"GovernanceSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldLocker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newLocker\",\"type\":\"address\"}],\"name\":\"LockerSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldM\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newM\",\"type\":\"uint256\"}],\"name\":\"MultiplicatorSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"gauge\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenReward\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountNotified\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"claimerFee\",\"type\":\"uint256\"}],\"name\":\"RewardNotified\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldDistributor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newDistributor\",\"type\":\"address\"}],\"name\":\"SdtDistributorSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenDeposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldVeBoostDelegation\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newVeBoostDelegation\",\"type\":\"address\"}],\"name\":\"VeBoostDelegationSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldVeBoost\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newVeBoost\",\"type\":\"address\"}],\"name\":\"VeBoostSet\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BAL\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VE_BAL\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"addRewardToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimAllRewardsAndNotify\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"claimAndNotify\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimerFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"depositToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gauge\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"locker\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"multiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"notifyReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rewardTokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sdtDistributor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_claimerFee\",\"type\":\"uint256\"}],\"name\":\"setClaimerFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_gauge\",\"type\":\"address\"}],\"name\":\"setGauge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_governance\",\"type\":\"address\"}],\"name\":\"setGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_locker\",\"type\":\"address\"}],\"name\":\"setLocker\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_multiplier\",\"type\":\"uint256\"}],\"name\":\"setMultiplier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"}],\"name\":\"setRewardTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sdtDistributor\",\"type\":\"address\"}],\"name\":\"setSdtDistributor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_veBoost\",\"type\":\"address\"}],\"name\":\"setVeBoost\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_veBoostDelegation\",\"type\":\"address\"}],\"name\":\"setVeBoostDelegation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"veBoost\",\"outputs\":[{\"internalType\":\"contract IVeBoost\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"veBoostDelegation\",\"outputs\":[{\"internalType\":\"contract IVeBoostDelegation\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "BalancerAccumulatorV3", "CompilerVersion": "v0.8.10+commit.fc410830", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000003e8c72655e48591d93e6dfda16823db0ff23d859000000000000000000000000da9846665bdb44b0d0caffd0d1d4a539932bebdf000000000000000000000000ea79d1a83da6db43a85942767c389fe0acf336a5", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://008e29aefcc93729b84ec7c9c7d8464134ff76dfd5e9027f674ba63af6886f1e"}