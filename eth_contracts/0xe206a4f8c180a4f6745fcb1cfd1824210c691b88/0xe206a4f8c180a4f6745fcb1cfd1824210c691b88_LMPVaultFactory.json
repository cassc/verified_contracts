{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"src/vault/LMPVaultFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n// Copyright (c) 2023 Tokemak Ops Ltd. All rights reserved.\\npragma solidity 0.8.17;\\n\\nimport { EnumerableSet } from \\\"openzeppelin-contracts/utils/structs/EnumerableSet.sol\\\";\\nimport { ISystemRegistry } from \\\"src/interfaces/ISystemRegistry.sol\\\";\\nimport { ILMPVaultFactory } from \\\"src/interfaces/vault/ILMPVaultFactory.sol\\\";\\nimport { ILMPVaultRegistry } from \\\"src/interfaces/vault/ILMPVaultRegistry.sol\\\";\\nimport { ILMPVault, LMPVault } from \\\"src/vault/LMPVault.sol\\\";\\nimport { SecurityBase } from \\\"src/security/SecurityBase.sol\\\";\\nimport { Clones } from \\\"openzeppelin-contracts/proxy/Clones.sol\\\";\\nimport { LMPVaultMainRewarder } from \\\"src/rewarders/LMPVaultMainRewarder.sol\\\";\\nimport { Roles } from \\\"src/libs/Roles.sol\\\";\\nimport { Errors } from \\\"src/utils/Errors.sol\\\";\\nimport { SystemComponent } from \\\"src/SystemComponent.sol\\\";\\nimport { LMPStrategy } from \\\"src/strategy/LMPStrategy.sol\\\";\\n\\ncontract LMPVaultFactory is SystemComponent, ILMPVaultFactory, SecurityBase {\\n    using Clones for address;\\n    using EnumerableSet for EnumerableSet.Bytes32Set;\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    /// =====================================================\\n    /// Immutable Vars\\n    /// =====================================================\\n\\n    /// @notice Strategy templates that can be used with this vault template\\n    /// @dev Exposed via `getStrategyTemplates() and isStrategyTemplate()`\\n    EnumerableSet.AddressSet internal _strategyTemplates;\\n\\n    ILMPVaultRegistry public immutable vaultRegistry;\\n\\n    address public immutable template;\\n\\n    /// =====================================================\\n    /// Public Vars\\n    /// =====================================================\\n\\n    mapping(bytes32 => address) public vaultTypeToPrototype;\\n\\n    uint256 public defaultRewardRatio;\\n\\n    uint256 public defaultRewardBlockDuration;\\n\\n    /// =====================================================\\n    /// Modifiers\\n    /// =====================================================\\n\\n    modifier onlyVaultCreator() {\\n        if (!_hasRole(Roles.CREATE_POOL_ROLE, msg.sender)) {\\n            revert Errors.AccessDenied();\\n        }\\n        _;\\n    }\\n\\n    /// =====================================================\\n    /// Events\\n    /// =====================================================\\n\\n    event DefaultRewardRatioSet(uint256 rewardRatio);\\n    event DefaultBlockDurationSet(uint256 blockDuration);\\n    event StrategyTemplateAdded(address template);\\n    event StrategyTemplateRemoved(address template);\\n\\n    /// =====================================================\\n    /// Errors\\n    /// =====================================================\\n\\n    error InvalidStrategy();\\n\\n    /// =====================================================\\n    /// Functions - Constructor\\n    /// =====================================================\\n\\n    constructor(\\n        ISystemRegistry _systemRegistry,\\n        address _template,\\n        uint256 _defaultRewardRatio,\\n        uint256 _defaultRewardBlockDuration\\n    ) SystemComponent(_systemRegistry) SecurityBase(address(_systemRegistry.accessController())) {\\n        Errors.verifyNotZero(_template, \\\"template\\\");\\n\\n        // slither-disable-next-line missing-zero-check\\n        template = _template;\\n        vaultRegistry = systemRegistry.lmpVaultRegistry();\\n\\n        // Zero is valid here\\n        _setDefaultRewardRatio(_defaultRewardRatio);\\n        _setDefaultRewardBlockDuration(_defaultRewardBlockDuration);\\n    }\\n\\n    /// =====================================================\\n    /// Functions - External\\n    /// =====================================================\\n\\n    function addStrategyTemplate(address strategyTemplate) external onlyOwner {\\n        if (!_strategyTemplates.add(strategyTemplate)) {\\n            revert Errors.ItemExists();\\n        }\\n\\n        emit StrategyTemplateAdded(strategyTemplate);\\n    }\\n\\n    function removeStrategyTemplate(address strategyTemplate) external onlyOwner {\\n        if (!_strategyTemplates.remove(strategyTemplate)) {\\n            revert Errors.ItemNotFound();\\n        }\\n\\n        emit StrategyTemplateRemoved(strategyTemplate);\\n    }\\n\\n    function setDefaultRewardRatio(uint256 rewardRatio) external onlyOwner {\\n        _setDefaultRewardRatio(rewardRatio);\\n    }\\n\\n    function setDefaultRewardBlockDuration(uint256 blockDuration) external onlyOwner {\\n        _setDefaultRewardBlockDuration(blockDuration);\\n    }\\n\\n    function createVault(\\n        address strategyTemplate,\\n        string memory symbolSuffix,\\n        string memory descPrefix,\\n        bytes32 salt,\\n        bytes calldata extraParams\\n    ) external onlyVaultCreator returns (address newVaultAddress) {\\n        // verify params\\n        Errors.verifyNotZero(salt, \\\"salt\\\");\\n\\n        if (!_strategyTemplates.contains(strategyTemplate)) {\\n            revert InvalidStrategy();\\n        }\\n\\n        address newToken = template.predictDeterministicAddress(salt);\\n        address newStrategy = strategyTemplate.predictDeterministicAddress(salt);\\n\\n        LMPVaultMainRewarder mainRewarder = new LMPVaultMainRewarder{ salt: salt }(\\n            systemRegistry,\\n            address(systemRegistry.toke()),\\n            defaultRewardRatio,\\n            defaultRewardBlockDuration,\\n            true, // allowExtraRewards\\n            newToken\\n        );\\n\\n        newVaultAddress = template.cloneDeterministic(salt);\\n\\n        LMPVault(newVaultAddress).initialize(newStrategy, symbolSuffix, descPrefix, extraParams);\\n        LMPVault(newVaultAddress).setRewarder(address(mainRewarder));\\n        LMPStrategy(strategyTemplate.cloneDeterministic(salt)).initialize(newVaultAddress);\\n\\n        // add to VaultRegistry\\n        vaultRegistry.addVault(newVaultAddress);\\n    }\\n\\n    function getStrategyTemplates() public view returns (address[] memory) {\\n        return _strategyTemplates.values();\\n    }\\n\\n    function isStrategyTemplate(address addr) public view returns (bool) {\\n        return _strategyTemplates.contains(addr);\\n    }\\n\\n    /// =====================================================\\n    /// Functions - Private\\n    /// =====================================================\\n\\n    function _setDefaultRewardRatio(uint256 rewardRatio) private {\\n        defaultRewardRatio = rewardRatio;\\n\\n        emit DefaultRewardRatioSet(rewardRatio);\\n    }\\n\\n    function _setDefaultRewardBlockDuration(uint256 blockDuration) private {\\n        defaultRewardBlockDuration = blockDuration;\\n\\n        emit DefaultBlockDurationSet(blockDuration);\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/structs/EnumerableSet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\"\r\n    },\r\n    \"src/interfaces/ISystemRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n// Copyright (c) 2023 Tokemak Ops Ltd. All rights reserved.\\n\\npragma solidity 0.8.17;\\n\\nimport { IWETH9 } from \\\"src/interfaces/utils/IWETH9.sol\\\";\\nimport { IAccToke } from \\\"src/interfaces/staking/IAccToke.sol\\\";\\nimport { ILMPVaultRegistry } from \\\"./vault/ILMPVaultRegistry.sol\\\";\\nimport { IAccessController } from \\\"./security/IAccessController.sol\\\";\\nimport { ISwapRouter } from \\\"src/interfaces/swapper/ISwapRouter.sol\\\";\\nimport { ICurveResolver } from \\\"src/interfaces/utils/ICurveResolver.sol\\\";\\nimport { ILMPVaultRouter } from \\\"src/interfaces/vault/ILMPVaultRouter.sol\\\";\\nimport { ILMPVaultFactory } from \\\"src/interfaces/vault/ILMPVaultFactory.sol\\\";\\nimport { ISystemSecurity } from \\\"src/interfaces/security/ISystemSecurity.sol\\\";\\nimport { IDestinationRegistry } from \\\"./destinations/IDestinationRegistry.sol\\\";\\nimport { IRootPriceOracle } from \\\"src/interfaces/oracles/IRootPriceOracle.sol\\\";\\nimport { ILMPVaultRegistry } from \\\"src/interfaces/vault/ILMPVaultRegistry.sol\\\";\\nimport { IDestinationVaultRegistry } from \\\"./vault/IDestinationVaultRegistry.sol\\\";\\nimport { IAccessController } from \\\"src/interfaces/security/IAccessController.sol\\\";\\nimport { IDestinationRegistry } from \\\"src/interfaces/destinations/IDestinationRegistry.sol\\\";\\nimport { IStatsCalculatorRegistry } from \\\"src/interfaces/stats/IStatsCalculatorRegistry.sol\\\";\\nimport { IAsyncSwapperRegistry } from \\\"src/interfaces/liquidation/IAsyncSwapperRegistry.sol\\\";\\nimport { IDestinationVaultRegistry } from \\\"src/interfaces/vault/IDestinationVaultRegistry.sol\\\";\\nimport { IERC20Metadata } from \\\"openzeppelin-contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport { IIncentivesPricingStats } from \\\"src/interfaces/stats/IIncentivesPricingStats.sol\\\";\\n\\n/// @notice Root most registry contract for the system\\ninterface ISystemRegistry {\\n    /// @notice Get the TOKE contract for the system\\n    /// @return toke instance of TOKE used in the system\\n    function toke() external view returns (IERC20Metadata);\\n\\n    /// @notice Get the referenced WETH contract for the system\\n    /// @return weth contract pointer\\n    function weth() external view returns (IWETH9);\\n\\n    /// @notice Get the AccToke staking contract\\n    /// @return accToke instance of the accToke contract for the system\\n    function gpToke() external view returns (IAccToke);\\n\\n    /// @notice Get the LMP Vault registry for this system\\n    /// @return registry instance of the registry for this system\\n    function lmpVaultRegistry() external view returns (ILMPVaultRegistry registry);\\n\\n    /// @notice Get the destination Vault registry for this system\\n    /// @return registry instance of the registry for this system\\n    function destinationVaultRegistry() external view returns (IDestinationVaultRegistry registry);\\n\\n    /// @notice Get the access Controller for this system\\n    /// @return controller instance of the access controller for this system\\n    function accessController() external view returns (IAccessController controller);\\n\\n    /// @notice Get the destination template registry for this system\\n    /// @return registry instance of the registry for this system\\n    function destinationTemplateRegistry() external view returns (IDestinationRegistry registry);\\n\\n    /// @notice LMP Vault Router\\n    /// @return router instance of the lmp vault router\\n    function lmpVaultRouter() external view returns (ILMPVaultRouter router);\\n\\n    /// @notice Vault factory lookup by type\\n    /// @return vaultFactory instance of the vault factory for this vault type\\n    function getLMPVaultFactoryByType(bytes32 vaultType) external view returns (ILMPVaultFactory vaultFactory);\\n\\n    /// @notice Get the stats calculator registry for this system\\n    /// @return registry instance of the registry for this system\\n    function statsCalculatorRegistry() external view returns (IStatsCalculatorRegistry registry);\\n\\n    /// @notice Get the root price oracle for this system\\n    /// @return oracle instance of the root price oracle for this system\\n    function rootPriceOracle() external view returns (IRootPriceOracle oracle);\\n\\n    /// @notice Get the async swapper registry for this system\\n    /// @return registry instance of the registry for this system\\n    function asyncSwapperRegistry() external view returns (IAsyncSwapperRegistry registry);\\n\\n    /// @notice Get the swap router for this system\\n    /// @return router instance of the swap router for this system\\n    function swapRouter() external view returns (ISwapRouter router);\\n\\n    /// @notice Get the curve resolver for this system\\n    /// @return resolver instance of the curve resolver for this system\\n    function curveResolver() external view returns (ICurveResolver resolver);\\n\\n    /// @notice Register given address as a Reward Token\\n    /// @dev Reverts if address is 0 or token was already registered\\n    /// @param rewardToken token address to add\\n    function addRewardToken(address rewardToken) external;\\n\\n    /// @notice Removes given address from Reward Token list\\n    /// @dev Reverts if address was not registered\\n    /// @param rewardToken token address to remove\\n    function removeRewardToken(address rewardToken) external;\\n\\n    /// @notice Verify if given address is registered as Reward Token\\n    /// @param rewardToken token address to verify\\n    /// @return bool that indicates true if token is registered and false if not\\n    function isRewardToken(address rewardToken) external view returns (bool);\\n\\n    /// @notice Get the system security instance for this system\\n    /// @return security instance of system security for this system\\n    function systemSecurity() external view returns (ISystemSecurity security);\\n\\n    /// @notice Get the Incentive Pricing Stats\\n    /// @return incentivePricing the incentive pricing contract\\n    function incentivePricing() external view returns (IIncentivesPricingStats);\\n}\\n\"\r\n    },\r\n    \"src/interfaces/vault/ILMPVaultFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n// Copyright (c) 2023 Tokemak Ops Ltd. All rights reserved.\\npragma solidity 0.8.17;\\n\\ninterface ILMPVaultFactory {\\n    ///////////////////////////////////////////////////////////////////\\n    //                        Vault Creation\\n    ///////////////////////////////////////////////////////////////////\\n\\n    /**\\n     * @notice Spin up a new LMPVault\\n     * @param strategy Strategy template address\\n     * @param symbolSuffix Symbol suffix of the new token\\n     * @param descPrefix Description prefix of the new token\\n     * @param salt Vault creation salt\\n     * @param extraParams Any extra data needed for the vault\\n     */\\n    function createVault(\\n        address strategy,\\n        string memory symbolSuffix,\\n        string memory descPrefix,\\n        bytes32 salt,\\n        bytes calldata extraParams\\n    ) external returns (address newVaultAddress);\\n\\n    function addStrategyTemplate(address strategyTemplate) external;\\n\\n    function removeStrategyTemplate(address strategyTemplate) external;\\n}\\n\"\r\n    },\r\n    \"src/interfaces/vault/ILMPVaultRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n// Copyright (c) 2023 Tokemak Ops Ltd. All rights reserved.\\npragma solidity 0.8.17;\\n\\n/// @title Keep track of Vaults created through the Vault Factory\\ninterface ILMPVaultRegistry {\\n    ///////////////////////////////////////////////////////////////////\\n    //                        Errors\\n    ///////////////////////////////////////////////////////////////////\\n\\n    error VaultNotFound(address vaultAddress);\\n    error VaultAlreadyExists(address vaultAddress);\\n\\n    ///////////////////////////////////////////////////////////////////\\n    //                        Events\\n    ///////////////////////////////////////////////////////////////////\\n    event VaultAdded(address indexed asset, address indexed vault);\\n    event VaultRemoved(address indexed asset, address indexed vault);\\n\\n    ///////////////////////////////////////////////////////////////////\\n    //                        Functions\\n    ///////////////////////////////////////////////////////////////////\\n\\n    /// @notice Checks if an address is a valid vault\\n    /// @param vaultAddress Vault address to be added\\n    function isVault(address vaultAddress) external view returns (bool);\\n\\n    /// @notice Registers a vault\\n    /// @param vaultAddress Vault address to be added\\n    function addVault(address vaultAddress) external;\\n\\n    /// @notice Removes vault registration\\n    /// @param vaultAddress Vault address to be removed\\n    function removeVault(address vaultAddress) external;\\n\\n    /// @notice Returns a list of all registered vaults\\n    function listVaults() external view returns (address[] memory);\\n\\n    /// @notice Returns a list of all registered vaults for a given asset\\n    /// @param asset Asset address\\n    function listVaultsForAsset(address asset) external view returns (address[] memory);\\n\\n    /// @notice Returns a list of all registered vaults for a given type\\n    /// @param _vaultType Vault type\\n    function listVaultsForType(bytes32 _vaultType) external view returns (address[] memory);\\n}\\n\"\r\n    },\r\n    \"src/vault/LMPVault.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n// Copyright (c) 2023 Tokemak Ops Ltd. All rights reserved.\\npragma solidity 0.8.17;\\n\\n// solhint-disable max-states-count\\n\\nimport { Roles } from \\\"src/libs/Roles.sol\\\";\\nimport { Errors } from \\\"src/utils/Errors.sol\\\";\\nimport { LMPDebt } from \\\"src/vault/libs/LMPDebt.sol\\\";\\nimport { Pausable } from \\\"src/security/Pausable.sol\\\";\\nimport { VaultTypes } from \\\"src/vault/VaultTypes.sol\\\";\\nimport { NonReentrant } from \\\"src/utils/NonReentrant.sol\\\";\\nimport { SecurityBase } from \\\"src/security/SecurityBase.sol\\\";\\nimport { ILMPVault } from \\\"src/interfaces/vault/ILMPVault.sol\\\";\\nimport { AutoPoolFees } from \\\"src/vault/libs/AutoPoolFees.sol\\\";\\nimport { AutoPoolToken } from \\\"src/vault/libs/AutoPoolToken.sol\\\";\\nimport { AutoPool4626 } from \\\"src/vault/libs/AutoPool4626.sol\\\";\\nimport { IStrategy } from \\\"src/interfaces/strategy/IStrategy.sol\\\";\\nimport { Math } from \\\"openzeppelin-contracts/utils/math/Math.sol\\\";\\nimport { WithdrawalQueue } from \\\"src/strategy/WithdrawalQueue.sol\\\";\\nimport { LMPDestinations } from \\\"src/vault/libs/LMPDestinations.sol\\\";\\nimport { ISystemRegistry } from \\\"src/interfaces/ISystemRegistry.sol\\\";\\nimport { IERC20 } from \\\"openzeppelin-contracts/token/ERC20/IERC20.sol\\\";\\nimport { ISystemComponent } from \\\"src/interfaces/ISystemComponent.sol\\\";\\nimport { ILMPStrategy } from \\\"src/interfaces/strategy/ILMPStrategy.sol\\\";\\nimport { IERC4626 } from \\\"openzeppelin-contracts/interfaces/IERC4626.sol\\\";\\nimport { IMainRewarder } from \\\"src/interfaces/rewarders/IMainRewarder.sol\\\";\\nimport { StructuredLinkedList } from \\\"src/strategy/StructuredLinkedList.sol\\\";\\nimport { IDestinationVault } from \\\"src/interfaces/vault/IDestinationVault.sol\\\";\\nimport { SafeERC20 } from \\\"openzeppelin-contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport { Initializable } from \\\"openzeppelin-contracts/proxy/utils/Initializable.sol\\\";\\nimport { EnumerableSet } from \\\"openzeppelin-contracts/utils/structs/EnumerableSet.sol\\\";\\nimport { IERC20Metadata } from \\\"openzeppelin-contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport { IERC3156FlashBorrower } from \\\"openzeppelin-contracts/interfaces/IERC3156FlashBorrower.sol\\\";\\n\\ncontract LMPVault is ISystemComponent, Initializable, ILMPVault, IStrategy, SecurityBase, Pausable, NonReentrant {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    using Math for uint256;\\n    using SafeERC20 for IERC20Metadata;\\n    using WithdrawalQueue for StructuredLinkedList.List;\\n    using AutoPoolToken for AutoPoolToken.TokenData;\\n\\n    /// Be careful around the use of totalSupply and balanceOf. If you go directly to the _tokenData struct you may miss\\n    /// out on the profit share unlock logic or the checking the balance of the pool itself\\n\\n    /// =====================================================\\n    /// Constant Vars\\n    /// =====================================================\\n\\n    /// @notice 100% == 10000\\n    uint256 public constant FEE_DIVISOR = 10_000;\\n\\n    /// =====================================================\\n    /// Immutable Vars\\n    /// =====================================================\\n\\n    /// @notice Overarching baseAsset type\\n    bytes32 public immutable vaultType = VaultTypes.LST;\\n\\n    /// @notice Instance of this system this vault is tied to\\n    /// @dev Exposed via `getSystemRegistry()`\\n    ISystemRegistry internal immutable _systemRegistry;\\n\\n    /// @notice The asset that is deposited into the vault\\n    /// @dev Exposed via `asset()`\\n    IERC20Metadata internal immutable _baseAsset;\\n\\n    /// @notice Decimals of the base asset. Used as the decimals for the vault itself\\n    /// @dev Exposed via `decimals()`\\n    uint8 internal immutable _baseAssetDecimals;\\n\\n    bool public immutable _checkUsers;\\n\\n    /// =====================================================\\n    /// Internal Vars\\n    /// =====================================================\\n\\n    /// @notice Balances, allowances, and supply for the pool\\n    /// @dev Want to keep this var in this position\\n    AutoPoolToken.TokenData internal _tokenData;\\n\\n    /// @notice Pool/token name\\n    string internal _name;\\n\\n    /// @notice Pool/token symbol\\n    string internal _symbol;\\n\\n    /// @notice Full list of possible destinations that could be deployed to\\n    /// @dev Exposed via `getDestinations()`\\n    EnumerableSet.AddressSet internal _destinations;\\n\\n    /// @notice Destinations that are queued for removal\\n    /// @dev Exposed via `getRemovalQueue`\\n    EnumerableSet.AddressSet internal _removalQueue;\\n\\n    /// @notice Lookup of destinationVaultAddress -> Info .. Debt reporting snapshot info\\n    /// @dev Exposed via `getDestinationInfo`\\n    mapping(address => LMPDebt.DestinationInfo) internal _destinationInfo;\\n\\n    /// @notice Whether or not the vault has been shutdown\\n    /// @dev Exposed via `isShutdown()`\\n    bool internal _shutdown;\\n\\n    /// @notice Reason for shutdown (or `Active` if not shutdown)\\n    /// @dev Exposed via `shutdownStatus()`\\n    VaultShutdownStatus internal _shutdownStatus;\\n\\n    /// @notice Ordered list of destinations to withdraw from\\n    /// @dev Exposed via `getWithdrawalQueue()`\\n    StructuredLinkedList.List internal _withdrawalQueue;\\n\\n    /// @notice Ordered list of destinations to debt report on. Ordered from oldest to newest\\n    /// @dev Exposed via `getDebtReportingQueue()`\\n    StructuredLinkedList.List internal _debtReportQueue;\\n\\n    /// @notice State and settings related to gradual profit unlock\\n    /// @dev Exposed via `getProfitUnlockSettings()`\\n    ILMPVault.ProfitUnlockSettings internal _profitUnlockSettings;\\n\\n    /// @notice State and settings related to periodic and streaming fees\\n    /// @dev Exposed via `getFeeSettings()`\\n    ILMPVault.AutoPoolFeeSettings internal _feeSettings;\\n\\n    /// @notice Asset tracking for idle and debt values\\n    /// @dev Exposed via `getAssetBreakdown()`\\n    ILMPVault.AssetBreakdown internal _assetBreakdown;\\n\\n    /// @notice Rewarders that have been replaced.\\n    /// @dev Exposed via `getPastRewarders()`\\n    EnumerableSet.AddressSet internal _pastRewarders;\\n\\n    /// =====================================================\\n    /// Public Vars\\n    /// =====================================================\\n\\n    /// @notice Factory contract that created this vault\\n    address public factory;\\n\\n    /// @notice Main rewarder for this contract\\n    IMainRewarder public rewarder;\\n\\n    /// @notice The strategy logic for the LMP\\n    ILMPStrategy public lmpStrategy;\\n\\n    /// @notice Temporary restriction of depositors\\n    mapping(address => bool) public allowedUsers;\\n\\n    /// =====================================================\\n    /// Events\\n    /// =====================================================\\n\\n    event NewNavShareFeeMark(uint256 navPerShare, uint256 timestamp);\\n    event SymbolAndDescSet(string symbol, string desc);\\n\\n    /// =====================================================\\n    /// Errors\\n    /// =====================================================\\n\\n    error WithdrawShareCalcInvalid(uint256 currentShares, uint256 cachedShares);\\n    error RewarderAlreadySet();\\n    error RebalanceDestinationsMatch(address destinationVault);\\n    error InvalidDestination(address destination);\\n    error NavChanged(uint256 oldNav, uint256 newNav);\\n    error NavOpsInProgress();\\n    error VaultShutdown();\\n    error NavDecreased(uint256 oldNav, uint256 newNav);\\n    error InvalidUser();\\n\\n    /// =====================================================\\n    /// Modifiers\\n    /// =====================================================\\n\\n    modifier onlyAllowedUsers() {\\n        if (_checkUsers && !allowedUsers[msg.sender]) {\\n            revert InvalidUser();\\n        }\\n        _;\\n    }\\n\\n    /// @notice Reverts if nav/share decreases during a deposit/mint/withdraw/redeem\\n    /// @dev Increases are allowed. Ignored when supply is 0\\n    modifier noNavPerShareDecrease(TotalAssetPurpose purpose) {\\n        (uint256 oldNav, uint256 startingTotalSupply) = _snapStartNav(purpose);\\n        _;\\n        _ensureNoNavPerShareDecrease(oldNav, startingTotalSupply, purpose);\\n    }\\n\\n    /// @notice Reverts if any nav/share changing operations are in progress across the system\\n    /// @dev Any rebalance or debtReporting on any pool\\n    modifier ensureNoNavOps() {\\n        if (_systemRegistry.systemSecurity().navOpsInProgress() > 0) {\\n            revert NavOpsInProgress();\\n        }\\n        _;\\n    }\\n\\n    /// @notice Globally track operations that change nav/share in a vault\\n    /// @dev Doesn't revert, only meant to track so that `ensureNoNavOps()` can revert when appropriate\\n    modifier trackNavOps() {\\n        _systemRegistry.systemSecurity().enterNavOperation();\\n        _;\\n        // slither-disable-next-line reentrancy-no-eth\\n        _systemRegistry.systemSecurity().exitNavOperation();\\n    }\\n\\n    /// =====================================================\\n    /// Functions - Constructor\\n    /// =====================================================\\n\\n    constructor(\\n        ISystemRegistry systemRegistry,\\n        address _vaultAsset,\\n        bool checkUsers\\n    ) SecurityBase(address(systemRegistry.accessController())) Pausable(systemRegistry) {\\n        Errors.verifyNotZero(address(systemRegistry), \\\"systemRegistry\\\");\\n        _systemRegistry = systemRegistry;\\n\\n        uint8 dec = IERC20Metadata(_vaultAsset).decimals();\\n\\n        _baseAssetDecimals = dec;\\n        _baseAsset = IERC20Metadata(_vaultAsset);\\n        _symbol = string(abi.encodePacked(\\\"lmp\\\", IERC20Metadata(_vaultAsset).symbol()));\\n        _name = string(abi.encodePacked(IERC20Metadata(_vaultAsset).name(), \\\" Pool Token\\\"));\\n\\n        _checkUsers = checkUsers;\\n\\n        _disableInitializers();\\n    }\\n\\n    /// =====================================================\\n    /// Functions - External\\n    /// =====================================================\\n\\n    function initialize(\\n        address strategy,\\n        string memory symbolSuffix,\\n        string memory descPrefix,\\n        bytes memory\\n    ) external virtual initializer {\\n        Errors.verifyNotEmpty(symbolSuffix, \\\"symbolSuffix\\\");\\n        Errors.verifyNotEmpty(descPrefix, \\\"descPrefix\\\");\\n        Errors.verifyNotZero(strategy, \\\"lmpStrategyAddress\\\");\\n\\n        factory = msg.sender;\\n\\n        _symbol = string(abi.encodePacked(symbolSuffix));\\n        _name = string(abi.encodePacked(descPrefix));\\n\\n        AutoPoolFees.initializeFeeSettings(_feeSettings);\\n\\n        lmpStrategy = ILMPStrategy(strategy);\\n    }\\n\\n    /// @notice Mints Vault shares to receiver by depositing exactly amount of underlying tokens\\n    /// @dev No nav/share changing operations, debt reportings or rebalances,\\n    /// can be happening throughout the entire system\\n    function deposit(\\n        uint256 assets,\\n        address receiver\\n    )\\n        external\\n        virtual\\n        override\\n        nonReentrant\\n        noNavPerShareDecrease(TotalAssetPurpose.Deposit)\\n        ensureNoNavOps\\n        onlyAllowedUsers\\n        returns (uint256 shares)\\n    {\\n        Errors.verifyNotZero(assets, \\\"assets\\\");\\n\\n        // Handles the vault being paused, returns 0\\n        if (assets > maxDeposit(receiver)) {\\n            revert ERC4626DepositExceedsMax(assets, maxDeposit(receiver));\\n        }\\n\\n        uint256 ta = LMPDebt._totalAssetsTimeChecked(_debtReportQueue, _destinationInfo, TotalAssetPurpose.Deposit);\\n        shares = convertToShares(assets, ta, totalSupply(), Math.Rounding.Down);\\n\\n        Errors.verifyNotZero(shares, \\\"shares\\\");\\n\\n        _transferAndMint(assets, shares, receiver);\\n    }\\n\\n    /// @notice Mints exactly shares Vault shares to receiver by depositing amount of underlying tokens.\\n    function mint(\\n        uint256 shares,\\n        address receiver\\n    )\\n        public\\n        virtual\\n        override\\n        nonReentrant\\n        noNavPerShareDecrease(TotalAssetPurpose.Deposit)\\n        ensureNoNavOps\\n        onlyAllowedUsers\\n        returns (uint256 assets)\\n    {\\n        // Handles the vault being paused, returns 0\\n        if (shares > maxMint(receiver)) {\\n            revert ERC4626MintExceedsMax(shares, maxMint(receiver));\\n        }\\n\\n        uint256 ta = LMPDebt._totalAssetsTimeChecked(_debtReportQueue, _destinationInfo, TotalAssetPurpose.Deposit);\\n        assets = convertToAssets(shares, ta, totalSupply(), Math.Rounding.Up);\\n\\n        _transferAndMint(assets, shares, receiver);\\n    }\\n\\n    /// @notice Burns shares from owner and sends exactly assets of underlying tokens to receiver.\\n    function withdraw(\\n        uint256 assets,\\n        address receiver,\\n        address owner\\n    )\\n        public\\n        virtual\\n        override\\n        nonReentrant\\n        whenNotPaused\\n        noNavPerShareDecrease(TotalAssetPurpose.Withdraw)\\n        ensureNoNavOps\\n        onlyAllowedUsers\\n        returns (uint256 shares)\\n    {\\n        Errors.verifyNotZero(assets, \\\"assets\\\");\\n\\n        //slither-disable-next-line unused-return\\n        (uint256 actualAssets, uint256 actualShares,) = LMPDebt.withdraw(\\n            assets,\\n            LMPDebt._totalAssetsTimeChecked(_debtReportQueue, _destinationInfo, TotalAssetPurpose.Withdraw),\\n            _assetBreakdown,\\n            _withdrawalQueue,\\n            _destinationInfo\\n        );\\n\\n        shares = actualShares;\\n\\n        // TODO: Pretty sure we can just pass assets here instead of actualAssets.\\n        // We know it can't be less because of check above, and _withdraw will ensure\\n        // its not more.\\n        _completeWithdrawal(actualAssets, shares, owner, receiver);\\n    }\\n\\n    /// @notice Burns exactly shares from owner and sends assets of underlying tokens to receiver.\\n    function redeem(\\n        uint256 shares,\\n        address receiver,\\n        address owner\\n    )\\n        public\\n        virtual\\n        override\\n        nonReentrant\\n        whenNotPaused\\n        noNavPerShareDecrease(TotalAssetPurpose.Withdraw)\\n        ensureNoNavOps\\n        onlyAllowedUsers\\n        returns (uint256 assets)\\n    {\\n        uint256 maxShares = maxRedeem(owner);\\n        if (shares > maxShares) {\\n            revert ERC4626ExceededMaxRedeem(owner, shares, maxShares);\\n        }\\n\\n        uint256 ta = LMPDebt._totalAssetsTimeChecked(_debtReportQueue, _destinationInfo, TotalAssetPurpose.Withdraw);\\n        uint256 possibleAssets = convertToAssets(shares, ta, totalSupply(), Math.Rounding.Down);\\n        Errors.verifyNotZero(possibleAssets, \\\"possibleAssets\\\");\\n\\n        //slither-disable-next-line unused-return\\n        (uint256 actualAssets, uint256 actualShares,) =\\n            LMPDebt.redeem(possibleAssets, ta, _assetBreakdown, _withdrawalQueue, _destinationInfo);\\n\\n        assets = actualAssets;\\n\\n        assert(actualShares <= shares);\\n\\n        _completeWithdrawal(assets, shares, owner, receiver);\\n    }\\n\\n    /// @notice Enable or disable the high water mark on the rebalance fee\\n    /// @dev Will revert if set to the same value\\n    function setRebalanceFeeHighWaterMarkEnabled(bool enabled) external hasRole(Roles.LMP_FEE_SETTER_ROLE) {\\n        AutoPoolFees.setRebalanceFeeHighWaterMarkEnabled(_feeSettings, enabled);\\n    }\\n\\n    /// @notice Set the fee that will be taken when profit is realized\\n    /// @dev Resets the high water to current value\\n    /// @param fee Percent. 100% == 10000\\n    function setStreamingFeeBps(uint256 fee) external nonReentrant hasRole(Roles.LMP_FEE_SETTER_ROLE) {\\n        AutoPoolFees.setStreamingFeeBps(_feeSettings, fee);\\n    }\\n\\n    /// @notice Set the periodic fee taken.\\n    /// @dev Depending on time until next fee take, may update periodicFeeBps directly or queue fee.\\n    /// @param fee Fee to update periodic fee to.\\n    function setPeriodicFeeBps(uint256 fee) external hasRole(Roles.LMP_PERIODIC_FEE_SETTER_ROLE) {\\n        AutoPoolFees.setPeriodicFeeBps(_feeSettings, fee);\\n    }\\n\\n    /// @notice Set the address that will receive fees\\n    /// @param newFeeSink Address that will receive fees\\n    function setFeeSink(address newFeeSink) external hasRole(Roles.LMP_FEE_SETTER_ROLE) {\\n        AutoPoolFees.setFeeSink(_feeSettings, newFeeSink);\\n    }\\n\\n    /// @notice Sets the address that will receive periodic fees.\\n    /// @dev Zero address allowable.  Disables fees.\\n    /// @param newPeriodicFeeSink New periodic fee address.\\n    function setPeriodicFeeSink(address newPeriodicFeeSink) external hasRole(Roles.LMP_PERIODIC_FEE_SETTER_ROLE) {\\n        AutoPoolFees.setPeriodicFeeSink(_feeSettings, newPeriodicFeeSink);\\n    }\\n\\n    function setProfitUnlockPeriod(uint48 newUnlockPeriodSeconds) external hasRole(Roles.AUTO_POOL_ADMIN) {\\n        AutoPoolFees.setProfitUnlockPeriod(_profitUnlockSettings, _tokenData, newUnlockPeriodSeconds);\\n    }\\n\\n    function toggleAllowedUser(address user) external hasRole(Roles.AUTO_POOL_ADMIN) {\\n        allowedUsers[user] = !allowedUsers[user];\\n    }\\n\\n    /// @notice Set the rewarder contract used by the vault.\\n    /// @param _rewarder Address of new rewarder.\\n    function setRewarder(address _rewarder) external {\\n        // Factory needs to be able to call for vault creation.\\n        if (msg.sender != factory && !_hasRole(Roles.LMP_REWARD_MANAGER_ROLE, msg.sender)) {\\n            revert Errors.AccessDenied();\\n        }\\n\\n        Errors.verifyNotZero(_rewarder, \\\"rewarder\\\");\\n\\n        address toBeReplaced = address(rewarder);\\n        // Check that the new rewarder has not been a rewarder before, and that the current rewarder and\\n        //      new rewarder addresses are not the same.\\n        if (_pastRewarders.contains(_rewarder) || toBeReplaced == _rewarder) {\\n            revert Errors.ItemExists();\\n        }\\n\\n        if (toBeReplaced != address(0)) {\\n            // slither-disable-next-line unused-return\\n            _pastRewarders.add(toBeReplaced);\\n        }\\n\\n        rewarder = IMainRewarder(_rewarder);\\n        emit RewarderSet(_rewarder, toBeReplaced);\\n    }\\n\\n    /// @inheritdoc ILMPVault\\n    function getPastRewarders() external view returns (address[] memory) {\\n        return _pastRewarders.values();\\n    }\\n\\n    /// @inheritdoc ILMPVault\\n    function isPastRewarder(address _pastRewarder) external view returns (bool) {\\n        return _pastRewarders.contains(_pastRewarder);\\n    }\\n\\n    /// @notice Allow the updating of symbol/desc for the vault (only AFTER shutdown)\\n    function setSymbolAndDescAfterShutdown(\\n        string memory newSymbol,\\n        string memory newName\\n    ) external hasRole(Roles.AUTO_POOL_ADMIN) {\\n        Errors.verifyNotEmpty(newSymbol, \\\"newSymbol\\\");\\n        Errors.verifyNotEmpty(newName, \\\"newName\\\");\\n\\n        // make sure the vault is no longer active\\n        if (_shutdownStatus == VaultShutdownStatus.Active) {\\n            revert InvalidShutdownStatus(_shutdownStatus);\\n        }\\n\\n        emit SymbolAndDescSet(newSymbol, newName);\\n\\n        _symbol = newSymbol;\\n        _name = newName;\\n    }\\n\\n    /// @inheritdoc ILMPVault\\n    function isShutdown() external view returns (bool) {\\n        return _shutdown;\\n    }\\n\\n    /// @inheritdoc ILMPVault\\n    function shutdownStatus() external view returns (VaultShutdownStatus) {\\n        return _shutdownStatus;\\n    }\\n\\n    /// @notice Returns state and settings related to gradual profit unlock\\n    function getProfitUnlockSettings() external view returns (ILMPVault.ProfitUnlockSettings memory) {\\n        return _profitUnlockSettings;\\n    }\\n\\n    /// @notice Returns state and settings related to periodic and streaming fees\\n    function getFeeSettings() external view returns (ILMPVault.AutoPoolFeeSettings memory) {\\n        return _feeSettings;\\n    }\\n\\n    /// @notice Returns the name of the token\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /// @notice Returns the symbol of the token\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /// @notice Returns the decimals of the token, same as the underlying asset\\n    function decimals() public view virtual override returns (uint8) {\\n        return _baseAssetDecimals;\\n    }\\n\\n    /// @notice Returns the address of the underlying token used for the Vault for accounting, depositing, and\\n    /// withdrawing.\\n    function asset() public view virtual override returns (address) {\\n        return address(_baseAsset);\\n    }\\n\\n    /// @notice Returns the total amount of the underlying asset that is \u201cmanaged\u201d by Vault.\\n    /// @dev Utilizes the \\\"Global\\\" purpose internally\\n    function totalAssets() public view override returns (uint256) {\\n        return AutoPool4626.totalAssets(_assetBreakdown, TotalAssetPurpose.Global);\\n    }\\n\\n    /// @notice Returns the total amount of the underlying asset that is \u201cmanaged\u201d by the Vault with respect to its\\n    /// usage\\n    /// @dev Value changes based on purpose. Global is an avg. Deposit is valued higher. Withdraw is valued lower.\\n    /// @param purpose The calculation the total assets will be used in\\n    function totalAssets(TotalAssetPurpose purpose) public view returns (uint256) {\\n        return AutoPool4626.totalAssets(_assetBreakdown, purpose);\\n    }\\n\\n    function getAssetBreakdown() public view override returns (ILMPVault.AssetBreakdown memory) {\\n        return _assetBreakdown;\\n    }\\n\\n    /// @notice Returns the amount of shares that the Vault would exchange for the amount of assets provided,\\n    /// in an ideal scenario where all the conditions are met\\n    function convertToShares(uint256 assets) public view virtual returns (uint256 shares) {\\n        shares = convertToShares(assets, totalAssets(TotalAssetPurpose.Global), totalSupply(), Math.Rounding.Down);\\n    }\\n\\n    /// @notice Returns the amount of shares that the Vault would exchange for the amount of assets provided,\\n    /// in an ideal scenario where all the conditions are met\\n    function convertToShares(\\n        uint256 assets,\\n        uint256 totalAssetsForPurpose,\\n        uint256 supply,\\n        Math.Rounding rounding\\n    ) public view virtual returns (uint256 shares) {\\n        // slither-disable-next-line incorrect-equality\\n        shares = (assets == 0 || supply == 0) ? assets : assets.mulDiv(supply, totalAssetsForPurpose, rounding);\\n    }\\n\\n    /// @notice Returns the amount of assets that the Vault would exchange for the amount of shares provided, in an\\n    /// ideal\\n    /// scenario where all the conditions are met.\\n    function convertToAssets(uint256 shares) external view virtual returns (uint256 assets) {\\n        assets = convertToAssets(shares, totalAssets(TotalAssetPurpose.Global), totalSupply(), Math.Rounding.Down);\\n    }\\n\\n    /// @notice Returns the amount of assets that the Vault would exchange for the amount of shares provided, in an\\n    /// ideal\\n    /// scenario where all the conditions are met.\\n    function convertToAssets(\\n        uint256 shares,\\n        uint256 totalAssetsForPurpose,\\n        uint256 supply,\\n        Math.Rounding rounding\\n    ) public view virtual returns (uint256 assets) {\\n        // slither-disable-next-line incorrect-equality\\n        assets = (supply == 0) ? shares : shares.mulDiv(totalAssetsForPurpose, supply, rounding);\\n    }\\n\\n    /// @notice Returns the amount of unlocked profit shares that will be burned\\n    function unlockedShares() external view returns (uint256 shares) {\\n        shares = AutoPoolFees.unlockedShares(_profitUnlockSettings, _tokenData);\\n    }\\n\\n    /// @notice Returns the amount of tokens in existence.\\n    /// @dev Subtracts any unlocked profit shares that will be burned\\n    function totalSupply() public view virtual override(IERC20) returns (uint256 shares) {\\n        shares = AutoPool4626.totalSupply(_tokenData, _profitUnlockSettings);\\n    }\\n\\n    /// @notice Returns the amount of tokens owned by account.\\n    /// @dev Subtracts any unlocked profit shares that will be burned when account is the Vault itself\\n    function balanceOf(address account) public view override(IERC20) returns (uint256) {\\n        return AutoPool4626.balanceOf(_tokenData, _profitUnlockSettings, account);\\n    }\\n\\n    /// @notice Returns the amount of tokens owned by wallet.\\n    /// @dev Does not subtract any unlocked profit shares that should be burned when wallet is the Vault itself\\n    function balanceOfActual(address account) public view returns (uint256) {\\n        return _tokenData.balances[account];\\n    }\\n\\n    /// @notice Returns the remaining number of tokens that `spender` will be allowed to spend on\\n    /// behalf of `owner` through {transferFrom}. This is zero by default\\n    /// @dev This value changes when `approve` or `transferFrom` are called\\n    function allowance(address owner, address spender) public view virtual returns (uint256) {\\n        return _tokenData.allowances[owner][spender];\\n    }\\n\\n    /// @notice Sets a `value` amount of tokens as the allowance of `spender` over the caller's tokens.\\n    function approve(address spender, uint256 value) public virtual returns (bool) {\\n        return _tokenData.approve(spender, value);\\n    }\\n\\n    /// @notice Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism.\\n    /// `value` is then deducted from the caller's allowance.\\n    function transferFrom(address from, address to, uint256 value) public virtual whenNotPaused returns (bool) {\\n        return _tokenData.transferFrom(from, to, value);\\n    }\\n\\n    /// @notice Moves a `value` amount of tokens from the caller's account to `to`\\n    function transfer(address to, uint256 value) public virtual whenNotPaused returns (bool) {\\n        return _tokenData.transfer(to, value);\\n    }\\n\\n    /// @notice Returns the next unused nonce for an address.\\n    function nonces(address owner) public view virtual returns (uint256) {\\n        return _tokenData.nonces[owner];\\n    }\\n\\n    function getSystemRegistry() external view override returns (address) {\\n        return address(_systemRegistry);\\n    }\\n\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() public view virtual returns (bytes32) {\\n        return keccak256(\\n            abi.encode(\\n                AutoPoolToken.TYPE_HASH,\\n                keccak256(bytes(\\\"Tokemak\\\")),\\n                keccak256(bytes(\\\"1\\\")),\\n                block.chainid,\\n                address(this)\\n            )\\n        );\\n    }\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public virtual {\\n        _tokenData.permit(owner, spender, value, deadline, v, r, s);\\n    }\\n\\n    /// @notice Returns the maximum amount of the underlying asset that can be\\n    /// deposited into the Vault for the receiver, through a deposit call\\n    function maxDeposit(address wallet) public view virtual override returns (uint256 maxAssets) {\\n        maxAssets =\\n            convertToAssets(maxMint(wallet), totalAssets(TotalAssetPurpose.Deposit), totalSupply(), Math.Rounding.Up);\\n    }\\n\\n    /// @notice Simulate the effects of the deposit at the current block, given current on-chain conditions.\\n    function previewDeposit(uint256 assets) public view virtual returns (uint256 shares) {\\n        shares = convertToShares(assets, totalAssets(TotalAssetPurpose.Deposit), totalSupply(), Math.Rounding.Down);\\n    }\\n\\n    /// @notice Returns the maximum amount of the Vault shares that\\n    /// can be minted for the receiver, through a mint call.\\n    function maxMint(address wallet) public view virtual override returns (uint256 maxShares) {\\n        maxShares =\\n            AutoPool4626.maxMint(_assetBreakdown, _tokenData, _profitUnlockSettings, wallet, paused(), _shutdown);\\n    }\\n\\n    /// @notice Returns the maximum amount of the underlying asset that can\\n    /// be withdrawn from the owner balance in the Vault, through a withdraw call\\n    function maxWithdraw(address owner) public view virtual returns (uint256 maxAssets) {\\n        maxAssets = paused() ? 0 : previewRedeem(balanceOf(owner));\\n    }\\n\\n    /// @notice Returns the maximum amount of Vault shares that can be redeemed\\n    /// from the owner balance in the Vault, through a redeem call\\n    function maxRedeem(address owner) public view virtual returns (uint256 maxShares) {\\n        maxShares = _maxRedeem(owner);\\n    }\\n\\n    /// @notice Simulate the effects of a mint at the current block, given current on-chain conditions\\n    function previewMint(uint256 shares) public view virtual returns (uint256 assets) {\\n        assets = convertToAssets(shares, totalAssets(TotalAssetPurpose.Deposit), totalSupply(), Math.Rounding.Up);\\n    }\\n\\n    /// @notice Simulate the effects of their withdrawal at the current block, given current on-chain conditions.\\n    function previewWithdraw(uint256 assets) public view virtual returns (uint256 shares) {\\n        shares = convertToShares(assets, totalAssets(TotalAssetPurpose.Withdraw), totalSupply(), Math.Rounding.Up);\\n    }\\n\\n    /// @notice Simulate the effects of their redemption at the current block, given current on-chain conditions.\\n    function previewRedeem(uint256 shares) public view virtual override returns (uint256) {\\n        return convertToAssets(shares, totalAssets(TotalAssetPurpose.Withdraw), totalSupply(), Math.Rounding.Down);\\n    }\\n\\n    function _completeWithdrawal(uint256 assets, uint256 shares, address owner, address receiver) internal virtual {\\n        if (msg.sender != owner) {\\n            uint256 allowed = allowance(owner, msg.sender);\\n            if (allowed != type(uint256).max) {\\n                if (shares > allowed) revert AmountExceedsAllowance(shares, allowed);\\n\\n                unchecked {\\n                    _tokenData.approve(owner, msg.sender, allowed - shares);\\n                }\\n            }\\n        }\\n\\n        _tokenData.burn(owner, shares);\\n\\n        // if totalSupply is now 0, reset the high water mark\\n        // slither-disable-next-line incorrect-\\n        uint256 ts = totalSupply();\\n        if (ts == 0) {\\n            _feeSettings.navPerShareLastFeeMark = FEE_DIVISOR;\\n\\n            emit NewNavShareFeeMark(FEE_DIVISOR, block.timestamp);\\n        }\\n\\n        emit Withdraw(msg.sender, receiver, owner, assets, shares);\\n\\n        emit Nav(_assetBreakdown.totalIdle, _assetBreakdown.totalDebt, ts);\\n\\n        _baseAsset.safeTransfer(receiver, assets);\\n    }\\n\\n    /// @notice Transfer out non-tracked tokens\\n    function recover(\\n        address[] calldata tokens,\\n        uint256[] calldata amounts,\\n        address[] calldata destinations\\n    ) external virtual override hasRole(Roles.TOKEN_RECOVERY_ROLE) {\\n        AutoPool4626.recover(tokens, amounts, destinations);\\n    }\\n\\n    /// @inheritdoc ILMPVault\\n    function shutdown(VaultShutdownStatus reason) external hasRole(Roles.AUTO_POOL_ADMIN) {\\n        if (reason == VaultShutdownStatus.Active) {\\n            revert InvalidShutdownStatus(reason);\\n        }\\n\\n        _shutdown = true;\\n        _shutdownStatus = reason;\\n\\n        emit Shutdown(reason);\\n    }\\n\\n    function _maxRedeem(address owner) internal view virtual returns (uint256 maxShares) {\\n        maxShares = paused() ? 0 : balanceOf(owner);\\n    }\\n\\n    function _transferAndMint(uint256 assets, uint256 shares, address receiver) internal virtual {\\n        AutoPool4626.transferAndMint(\\n            _baseAsset, _assetBreakdown, _tokenData, _profitUnlockSettings, assets, shares, receiver\\n        );\\n    }\\n\\n    function updateDebtReporting(uint256 numToProcess)\\n        external\\n        nonReentrant\\n        hasRole(Roles.LMP_UPDATE_DEBT_REPORTING_ROLE)\\n        trackNavOps\\n    {\\n        // Persist our change in idle and debt\\n        uint256 startingIdle = _assetBreakdown.totalIdle;\\n        uint256 startingDebt = _assetBreakdown.totalDebt;\\n\\n        // slither-disable-next-line reentrancy-no-eth\\n        LMPDebt.IdleDebtUpdates memory result =\\n            LMPDebt._updateDebtReporting(_debtReportQueue, _destinations, _destinationInfo, numToProcess);\\n\\n        uint256 newIdle = startingIdle + result.totalIdleIncrease;\\n        uint256 newDebt = startingDebt + result.totalDebtIncrease - result.totalDebtDecrease;\\n\\n        _assetBreakdown.totalIdle = newIdle;\\n        _assetBreakdown.totalDebt = newDebt;\\n        _assetBreakdown.totalDebtMin =\\n            _assetBreakdown.totalDebtMin + result.totalMinDebtIncrease - result.totalMinDebtDecrease;\\n        _assetBreakdown.totalDebtMax =\\n            _assetBreakdown.totalDebtMax + result.totalMaxDebtIncrease - result.totalMaxDebtDecrease;\\n\\n        uint256 newTotalSupply = _feeAndProfitHandling(newIdle + newDebt, startingIdle + startingDebt);\\n\\n        emit Nav(newIdle, newDebt, newTotalSupply);\\n    }\\n\\n    function _feeAndProfitHandling(\\n        uint256 newTotalAssets,\\n        uint256 startingTotalAssets\\n    ) internal returns (uint256 newTotalSupply) {\\n        // Collect any fees and lock any profit if appropriate\\n        // idle+debt here represent the new totalAssets we just need them separate\\n        // for fee calcs\\n        AutoPoolFees.burnUnlockedShares(_profitUnlockSettings, _tokenData);\\n\\n        uint256 startingTotalSupply = totalSupply();\\n\\n        newTotalSupply = _collectFees(newTotalAssets, startingTotalSupply);\\n\\n        newTotalSupply = AutoPoolFees.calculateProfitLocking(\\n            _profitUnlockSettings,\\n            _tokenData,\\n            newTotalSupply - startingTotalSupply, // new feeShares\\n            newTotalAssets,\\n            startingTotalAssets,\\n            newTotalSupply,\\n            balanceOfActual(address(this))\\n        );\\n    }\\n\\n    function _collectFees(uint256 currentTotalAssets, uint256 currentTotalSupply) internal virtual returns (uint256) {\\n        return AutoPoolFees.collectFees(currentTotalAssets, currentTotalSupply, _feeSettings, _tokenData);\\n    }\\n\\n    function getDestinations() public view override(ILMPVault, IStrategy) returns (address[] memory) {\\n        return _destinations.values();\\n    }\\n\\n    function getWithdrawalQueue() public view returns (address[] memory) {\\n        return _withdrawalQueue.getList();\\n    }\\n\\n    function getDebtReportingQueue() public view returns (address[] memory) {\\n        return _debtReportQueue.getList();\\n    }\\n\\n    /// @inheritdoc ILMPVault\\n    function isDestinationRegistered(address destination) external view returns (bool) {\\n        return _destinations.contains(destination);\\n    }\\n\\n    function addDestinations(address[] calldata destinations) public hasRole(Roles.DESTINATION_VAULTS_UPDATER) {\\n        LMPDestinations.addDestinations(_removalQueue, _destinations, destinations, _systemRegistry);\\n    }\\n\\n    function removeDestinations(address[] calldata destinations) public hasRole(Roles.DESTINATION_VAULTS_UPDATER) {\\n        LMPDestinations.removeDestinations(_removalQueue, _destinations, destinations);\\n    }\\n\\n    function getRemovalQueue() public view override returns (address[] memory) {\\n        return _removalQueue.values();\\n    }\\n\\n    function removeFromRemovalQueue(address vaultToRemove) public override hasRole(Roles.REBALANCER_ROLE) {\\n        LMPDestinations.removeFromRemovalQueue(_removalQueue, vaultToRemove);\\n    }\\n\\n    /// @inheritdoc ILMPVault\\n    function getDestinationInfo(address destVault) external view returns (LMPDebt.DestinationInfo memory) {\\n        return _destinationInfo[destVault];\\n    }\\n\\n    /// @inheritdoc IStrategy\\n    function flashRebalance(\\n        IERC3156FlashBorrower receiver,\\n        RebalanceParams memory rebalanceParams,\\n        bytes calldata data\\n    ) public whenNotPaused nonReentrant hasRole(Roles.SOLVER_ROLE) trackNavOps {\\n        LMPDebt.IdleDebtUpdates memory result = _processRebalance(receiver, rebalanceParams, data);\\n\\n        uint256 idle = _assetBreakdown.totalIdle;\\n        uint256 debt = _assetBreakdown.totalDebt;\\n        uint256 startTotalAssets = idle + debt;\\n\\n        idle = idle + result.totalIdleIncrease - result.totalIdleDecrease;\\n        debt = debt + result.totalDebtIncrease - result.totalDebtDecrease;\\n\\n        _assetBreakdown.totalIdle = idle;\\n        _assetBreakdown.totalDebt = debt;\\n        _assetBreakdown.totalDebtMin =\\n            _assetBreakdown.totalDebtMin + result.totalMinDebtIncrease - result.totalMinDebtDecrease;\\n        _assetBreakdown.totalDebtMax =\\n            _assetBreakdown.totalDebtMax + result.totalMaxDebtIncrease - result.totalMaxDebtDecrease;\\n\\n        uint256 newTotalSupply = _feeAndProfitHandling(idle + debt, startTotalAssets);\\n\\n        // Ensure the destinations are in the queues they should be\\n        LMPDestinations._manageQueuesForDestination(\\n            rebalanceParams.destinationOut, false, _withdrawalQueue, _debtReportQueue\\n        );\\n        LMPDestinations._manageQueuesForDestination(\\n            rebalanceParams.destinationIn, true, _withdrawalQueue, _debtReportQueue\\n        );\\n\\n        // Signal to the strategy that everything went well\\n        // and it can gather its final state/stats\\n        lmpStrategy.rebalanceSuccessfullyExecuted(rebalanceParams);\\n\\n        emit Nav(idle, debt, newTotalSupply);\\n    }\\n\\n    function _processRebalance(\\n        IERC3156FlashBorrower receiver,\\n        RebalanceParams memory rebalanceParams,\\n        bytes calldata data\\n    ) internal virtual returns (LMPDebt.IdleDebtUpdates memory result) {\\n        // make sure there's something to do\\n        if (rebalanceParams.amountIn == 0 && rebalanceParams.amountOut == 0) {\\n            revert Errors.InvalidParams();\\n        }\\n\\n        if (rebalanceParams.destinationIn == rebalanceParams.destinationOut) {\\n            revert RebalanceDestinationsMatch(rebalanceParams.destinationOut);\\n        }\\n\\n        // Get out destination summary stats\\n        IStrategy.SummaryStats memory outSummary = lmpStrategy.getRebalanceOutSummaryStats(rebalanceParams);\\n        result = LMPDebt.flashRebalance(\\n            _destinationInfo[rebalanceParams.destinationOut],\\n            _destinationInfo[rebalanceParams.destinationIn],\\n            receiver,\\n            rebalanceParams,\\n            outSummary,\\n            lmpStrategy,\\n            LMPDebt.FlashRebalanceParams({\\n                totalIdle: _assetBreakdown.totalIdle,\\n                totalDebt: _assetBreakdown.totalDebt,\\n                baseAsset: _baseAsset,\\n                shutdown: _shutdown\\n            }),\\n            data\\n        );\\n    }\\n\\n    /// @inheritdoc ILMPVault\\n    function isDestinationQueuedForRemoval(address dest) external view returns (bool) {\\n        return _removalQueue.contains(dest);\\n    }\\n\\n    function oldestDebtReporting() public view returns (uint256) {\\n        address destVault = _debtReportQueue.peekHead();\\n        return _destinationInfo[destVault].lastReport;\\n    }\\n\\n    function _snapStartNav(TotalAssetPurpose purpose)\\n        private\\n        view\\n        returns (uint256 oldNav, uint256 startingTotalSupply)\\n    {\\n        startingTotalSupply = totalSupply();\\n        // slither-disable-next-line incorrect-equality\\n        if (startingTotalSupply == 0) {\\n            return (0, 0);\\n        }\\n        oldNav = (totalAssets(purpose) * FEE_DIVISOR) / startingTotalSupply;\\n    }\\n\\n    /// @notice Vault nav/share shouldn't decrease on withdraw/redeem within rounding tolerance\\n    /// @dev No check when no shares\\n    function _ensureNoNavPerShareDecrease(\\n        uint256 oldNav,\\n        uint256 startingTotalSupply,\\n        TotalAssetPurpose purpose\\n    ) internal view virtual {\\n        uint256 ts = totalSupply();\\n        // slither-disable-next-line incorrect-equality\\n        if (ts == 0 || startingTotalSupply == 0) {\\n            return;\\n        }\\n        uint256 newNav = (totalAssets(purpose) * FEE_DIVISOR) / ts;\\n        if (newNav < oldNav) {\\n            revert NavDecreased(oldNav, newNav);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"src/security/SecurityBase.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n// Copyright (c) 2023 Tokemak Ops Ltd. All rights reserved.\\npragma solidity 0.8.17;\\n\\nimport { IAccessController } from \\\"src/interfaces/security/IAccessController.sol\\\";\\nimport { Context } from \\\"openzeppelin-contracts/utils/Context.sol\\\";\\nimport { Errors } from \\\"src/utils/Errors.sol\\\";\\n\\ncontract SecurityBase {\\n    IAccessController public immutable accessController;\\n\\n    error UndefinedAddress();\\n\\n    constructor(address _accessController) {\\n        if (_accessController == address(0)) revert UndefinedAddress();\\n\\n        accessController = IAccessController(_accessController);\\n    }\\n\\n    modifier onlyOwner() {\\n        accessController.verifyOwner(msg.sender);\\n        _;\\n    }\\n\\n    modifier hasRole(bytes32 role) {\\n        if (!accessController.hasRole(role, msg.sender)) revert Errors.AccessDenied();\\n        _;\\n    }\\n\\n    ///////////////////////////////////////////////////////////////////\\n    //\\n    //  Forward all the regular methods to central security module\\n    //\\n    ///////////////////////////////////////////////////////////////////\\n\\n    function _hasRole(bytes32 role, address account) internal view returns (bool) {\\n        return accessController.hasRole(role, account);\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/proxy/Clones.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (proxy/Clones.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\\n * deploying minimal proxy contracts, also known as \\\"clones\\\".\\n *\\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\\n *\\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\\n * deterministic method.\\n *\\n * _Available since v3.4._\\n */\\nlibrary Clones {\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create opcode, which should never revert.\\n     */\\n    function clone(address implementation) internal returns (address instance) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Cleans the upper 96 bits of the `implementation` word, then packs the first 3 bytes\\n            // of the `implementation` address with the bytecode before the address.\\n            mstore(0x00, or(shr(0xe8, shl(0x60, implementation)), 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000))\\n            // Packs the remaining 17 bytes of `implementation` with the bytecode after the address.\\n            mstore(0x20, or(shl(0x78, implementation), 0x5af43d82803e903d91602b57fd5bf3))\\n            instance := create(0, 0x09, 0x37)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create failed\\\");\\n    }\\n\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\\n     * the clone. Using the same `implementation` and `salt` multiple time will revert, since\\n     * the clones cannot be deployed twice at the same address.\\n     */\\n    function cloneDeterministic(address implementation, bytes32 salt) internal returns (address instance) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Cleans the upper 96 bits of the `implementation` word, then packs the first 3 bytes\\n            // of the `implementation` address with the bytecode before the address.\\n            mstore(0x00, or(shr(0xe8, shl(0x60, implementation)), 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000))\\n            // Packs the remaining 17 bytes of `implementation` with the bytecode after the address.\\n            mstore(0x20, or(shl(0x78, implementation), 0x5af43d82803e903d91602b57fd5bf3))\\n            instance := create2(0, 0x09, 0x37, salt)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create2 failed\\\");\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(\\n        address implementation,\\n        bytes32 salt,\\n        address deployer\\n    ) internal pure returns (address predicted) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(add(ptr, 0x38), deployer)\\n            mstore(add(ptr, 0x24), 0x5af43d82803e903d91602b57fd5bf3ff)\\n            mstore(add(ptr, 0x14), implementation)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73)\\n            mstore(add(ptr, 0x58), salt)\\n            mstore(add(ptr, 0x78), keccak256(add(ptr, 0x0c), 0x37))\\n            predicted := keccak256(add(ptr, 0x43), 0x55)\\n        }\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(address implementation, bytes32 salt)\\n        internal\\n        view\\n        returns (address predicted)\\n    {\\n        return predictDeterministicAddress(implementation, salt, address(this));\\n    }\\n}\\n\"\r\n    },\r\n    \"src/rewarders/LMPVaultMainRewarder.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n// Copyright (c) 2023 Tokemak Ops Ltd. All rights reserved.\\npragma solidity 0.8.17;\\n\\nimport { SafeERC20, IERC20 } from \\\"openzeppelin-contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nimport { MainRewarder, ISystemRegistry, Errors } from \\\"src/rewarders/MainRewarder.sol\\\";\\nimport { Roles } from \\\"src/libs/Roles.sol\\\";\\n\\n/**\\n * @title LMPVaultMainRewarder\\n * @notice Main rewarder for LMP Vault contracts.  This is used to enforce role based\\n *      access control for LMP rewarders.\\n */\\ncontract LMPVaultMainRewarder is MainRewarder {\\n    using SafeERC20 for IERC20;\\n\\n    /// @notice IERC20 instance of token being staked in rewarder.\\n    IERC20 public immutable stakingToken;\\n\\n    // slither-disable-start similar-names\\n    constructor(\\n        ISystemRegistry _systemRegistry,\\n        address _rewardToken,\\n        uint256 _newRewardRatio,\\n        uint256 _durationInBlock,\\n        bool _allowExtraReward,\\n        address _stakingToken\\n    )\\n        MainRewarder(\\n            _systemRegistry,\\n            _rewardToken,\\n            _newRewardRatio,\\n            _durationInBlock,\\n            Roles.LMP_REWARD_MANAGER_ROLE,\\n            _allowExtraReward\\n        )\\n    {\\n        Errors.verifyNotZero(_stakingToken, \\\"_stakingToken\\\");\\n\\n        stakingToken = IERC20(_stakingToken);\\n    }\\n    // slither-disable-end similar-names\\n\\n    /**\\n     * @notice Withdraws autopilot vault token from rewarder.\\n     * @dev Balance updates, reward calculations taken care of in inherited contract.\\n     * @param account Account that is withdrawing assets.\\n     * @param amount Amount of assets to be withdrawn.\\n     * @param claim Whether or not to claim rewards.\\n     */\\n    function withdraw(address account, uint256 amount, bool claim) public {\\n        if (msg.sender != account && msg.sender != address(systemRegistry.lmpVaultRouter())) {\\n            revert Errors.AccessDenied();\\n        }\\n\\n        _withdraw(account, amount, claim);\\n\\n        stakingToken.safeTransfer(account, amount);\\n    }\\n\\n    /**\\n     * @notice Stakes autopilot vault token to rewarder.\\n     * @dev Balance updates, reward calculations taken care of in inherited contract.\\n     * @param account Account staking.\\n     * @param amount Amount of autopilot vault token to stake.\\n     */\\n    function stake(address account, uint256 amount) public {\\n        _stake(account, amount);\\n\\n        // slither-disable-next-line arbitrary-send-erc20\\n        stakingToken.safeTransferFrom(msg.sender, address(this), amount);\\n    }\\n\\n    /**\\n     * @notice Gets reward for msg.sender.\\n     * @dev Used to enforce msg.sender check.\\n     * @param account Account to claim rewards for\\n     */\\n    function getReward(address account, bool claimExtras) public {\\n        if (msg.sender != account && msg.sender != address(systemRegistry.lmpVaultRouter())) {\\n            revert Errors.AccessDenied();\\n        }\\n\\n        _getReward(account, claimExtras);\\n    }\\n}\\n\"\r\n    },\r\n    \"src/libs/Roles.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n// Copyright (c) 2023 Tokemak Ops Ltd. All rights reserved.\\n\\npragma solidity 0.8.17;\\n\\nlibrary Roles {\\n    // --------------------------------------------------------------------\\n    // Central roles list used by all contracts that call AccessController\\n    // --------------------------------------------------------------------\\n\\n    bytes32 public constant REBALANCER_ROLE = keccak256(\\\"REBALANCER_ROLE\\\");\\n    bytes32 public constant CREATE_POOL_ROLE = keccak256(\\\"CREATE_POOL_ROLE\\\");\\n    bytes32 public constant CREATE_DESTINATION_VAULT_ROLE = keccak256(\\\"CREATE_DESTINATION_VAULT_ROLE\\\");\\n    bytes32 public constant REGISTRY_UPDATER = keccak256(\\\"REGISTRY_UPDATER\\\");\\n\\n    bytes32 public constant TOKEN_RECOVERY_ROLE = keccak256(\\\"TOKEN_RECOVERY_ROLE\\\");\\n    bytes32 public constant DESTINATION_VAULTS_UPDATER = keccak256(\\\"DESTINATION_VAULTS_UPDATER\\\");\\n    bytes32 public constant SET_WITHDRAWAL_QUEUE_ROLE = keccak256(\\\"SET_WITHDRAWAL_QUEUE_ROLE\\\");\\n\\n    bytes32 public constant DESTINATION_VAULT_OPERATOR_ROLE = keccak256(\\\"DESTINATION_VAULT_OPERATOR_ROLE\\\");\\n\\n    bytes32 public constant DV_REWARD_MANAGER_ROLE = keccak256(\\\"DV_REWARD_MANAGER_ROLE\\\");\\n    bytes32 public constant LMP_REWARD_MANAGER_ROLE = keccak256(\\\"LMP_REWARD_MANAGER_ROLE\\\");\\n    bytes32 public constant EXTRA_REWARD_MANAGER_ROLE = keccak256(\\\"EXTRA_REWARD_MANAGER_ROLE\\\");\\n\\n    bytes32 public constant LIQUIDATOR_ROLE = keccak256(\\\"LIQUIDATOR_ROLE\\\");\\n\\n    bytes32 public constant CREATE_STATS_CALC_ROLE = keccak256(\\\"CREATE_STATS_CALC_ROLE\\\");\\n    bytes32 public constant STATS_CALC_TEMPLATE_MGMT_ROLE = keccak256(\\\"STATS_CALC_TEMPLATE_MGMT_ROLE\\\");\\n    bytes32 public constant STATS_SNAPSHOT_ROLE = keccak256(\\\"STATS_SNAPSHOT_ROLE\\\");\\n    bytes32 public constant STATS_INCENTIVE_TOKEN_UPDATER = keccak256(\\\"STATS_INCENTIVE_TOKEN_UPDATER\\\");\\n\\n    bytes32 public constant SOLVER_ROLE = keccak256(\\\"SOLVER_ROLE\\\");\\n\\n    bytes32 public constant LMP_FEE_SETTER_ROLE = keccak256(\\\"LMP_FEE_SETTER_ROLE\\\");\\n    bytes32 public constant LMP_PERIODIC_FEE_SETTER_ROLE = keccak256(\\\"LMP_PERIODIC_FEE_SETTER_ROLE\\\");\\n\\n    bytes32 public constant EMERGENCY_PAUSER = keccak256(\\\"EMERGENCY_PAUSER\\\");\\n\\n    bytes32 public constant ORACLE_MANAGER_ROLE = keccak256(\\\"ORACLE_MANAGER_ROLE\\\");\\n\\n    bytes32 public constant LSD_BACKING_UPDATER = keccak256(\\\"LSD_BACKING_UPDATER\\\");\\n\\n    bytes32 public constant LMP_UPDATE_DEBT_REPORTING_ROLE = keccak256(\\\"LMP_UPDATE_DEBT_REPORTING_ROLE\\\");\\n\\n    bytes32 public constant AUTO_POOL_ADMIN = keccak256(\\\"AUTO_POOL_ADMIN\\\");\\n}\\n\"\r\n    },\r\n    \"src/utils/Errors.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n// Copyright (c) 2023 Tokemak Ops Ltd. All rights reserved.\\npragma solidity 0.8.17;\\n\\nimport { Address } from \\\"openzeppelin-contracts/utils/Address.sol\\\";\\n\\nlibrary Errors {\\n    using Address for address;\\n    ///////////////////////////////////////////////////////////////////\\n    //                       Set errors\\n    ///////////////////////////////////////////////////////////////////\\n\\n    error AccessDenied();\\n    error ZeroAddress(string paramName);\\n    error ZeroAmount();\\n    error InsufficientBalance(address token);\\n    error AssetNotAllowed(address token);\\n    error NotImplemented();\\n    error InvalidAddress(address addr);\\n    error InvalidParam(string paramName);\\n    error InvalidParams();\\n    error AlreadySet(string param);\\n    error AlreadyRegistered(address param);\\n    error SlippageExceeded(uint256 expected, uint256 actual);\\n    error ArrayLengthMismatch(uint256 length1, uint256 length2, string details);\\n\\n    error ItemNotFound();\\n    error ItemExists();\\n    error MissingRole(bytes32 role, address user);\\n    error RegistryItemMissing(string item);\\n    error NotRegistered();\\n    // Used to check storage slot is empty before setting.\\n    error MustBeZero();\\n    // Used to check storage slot set before deleting.\\n    error MustBeSet();\\n\\n    error ApprovalFailed(address token);\\n    error FlashLoanFailed(address token, uint256 amount);\\n\\n    error SystemMismatch(address source1, address source2);\\n\\n    error InvalidToken(address token);\\n\\n    function verifyNotZero(address addr, string memory paramName) internal pure {\\n        if (addr == address(0)) {\\n            revert ZeroAddress(paramName);\\n        }\\n    }\\n\\n    function verifyNotZero(bytes32 key, string memory paramName) internal pure {\\n        if (key == bytes32(0)) {\\n            revert InvalidParam(paramName);\\n        }\\n    }\\n\\n    function verifyNotEmpty(string memory val, string memory paramName) internal pure {\\n        if (bytes(val).length == 0) {\\n            revert InvalidParam(paramName);\\n        }\\n    }\\n\\n    function verifyNotZero(uint256 num, string memory paramName) internal pure {\\n        if (num == 0) {\\n            revert InvalidParam(paramName);\\n        }\\n    }\\n\\n    function verifySystemsMatch(address component1, address component2) internal view {\\n        bytes memory call = abi.encodeWithSignature(\\\"getSystemRegistry()\\\");\\n\\n        address registry1 = abi.decode(component1.functionStaticCall(call), (address));\\n        address registry2 = abi.decode(component2.functionStaticCall(call), (address));\\n\\n        if (registry1 != registry2) {\\n            revert SystemMismatch(component1, component2);\\n        }\\n    }\\n\\n    function verifyArrayLengths(uint256 length1, uint256 length2, string memory details) internal pure {\\n        if (length1 != length2) {\\n            revert ArrayLengthMismatch(length1, length2, details);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"src/SystemComponent.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n// Copyright (c) 2023 Tokemak Ops Ltd. All rights reserved.\\npragma solidity 0.8.17;\\n\\nimport { ISystemComponent } from \\\"src/interfaces/ISystemComponent.sol\\\";\\nimport { ISystemRegistry } from \\\"src/interfaces/ISystemRegistry.sol\\\";\\nimport { Errors } from \\\"src/utils/Errors.sol\\\";\\n\\ncontract SystemComponent is ISystemComponent {\\n    ISystemRegistry internal immutable systemRegistry;\\n\\n    constructor(ISystemRegistry _systemRegistry) {\\n        Errors.verifyNotZero(address(_systemRegistry), \\\"_systemRegistry\\\");\\n        systemRegistry = _systemRegistry;\\n    }\\n\\n    function getSystemRegistry() external view returns (address) {\\n        return address(systemRegistry);\\n    }\\n}\\n\"\r\n    },\r\n    \"src/strategy/LMPStrategy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n// Copyright (c) 2023 Tokemak Ops Ltd. All rights reserved.\\npragma solidity 0.8.17;\\n\\nimport { ISystemRegistry } from \\\"src/interfaces/ISystemRegistry.sol\\\";\\nimport { Initializable } from \\\"openzeppelin-contracts/proxy/utils/Initializable.sol\\\";\\nimport { IDestinationVault } from \\\"src/interfaces/vault/IDestinationVault.sol\\\";\\nimport { Errors } from \\\"src/utils/Errors.sol\\\";\\nimport { IStrategy } from \\\"src/interfaces/strategy/IStrategy.sol\\\";\\nimport { ILMPStrategy } from \\\"src/interfaces/strategy/ILMPStrategy.sol\\\";\\nimport { ILMPVault } from \\\"src/interfaces/vault/ILMPVault.sol\\\";\\nimport { SecurityBase } from \\\"src/security/SecurityBase.sol\\\";\\nimport { IDexLSTStats } from \\\"src/interfaces/stats/IDexLSTStats.sol\\\";\\nimport { ViolationTracking } from \\\"src/strategy/ViolationTracking.sol\\\";\\nimport { NavTracking } from \\\"src/strategy/NavTracking.sol\\\";\\nimport { IRootPriceOracle } from \\\"src/interfaces/oracles/IRootPriceOracle.sol\\\";\\nimport { ILSTStats } from \\\"src/interfaces/stats/ILSTStats.sol\\\";\\nimport { LMPStrategyConfig } from \\\"src/strategy/LMPStrategyConfig.sol\\\";\\nimport { IIncentivesPricingStats } from \\\"src/interfaces/stats/IIncentivesPricingStats.sol\\\";\\nimport { IERC20Metadata } from \\\"openzeppelin-contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport { Math } from \\\"openzeppelin-contracts/utils/math/Math.sol\\\";\\nimport { LMPDebt } from \\\"src/vault/libs/LMPDebt.sol\\\";\\nimport { ISystemComponent } from \\\"src/interfaces/ISystemComponent.sol\\\";\\nimport { Initializable } from \\\"openzeppelin-contracts/proxy/utils/Initializable.sol\\\";\\n\\ncontract LMPStrategy is Initializable, ILMPStrategy, SecurityBase {\\n    using ViolationTracking for ViolationTracking.State;\\n    using NavTracking for NavTracking.State;\\n    using SubSaturateMath for uint256;\\n    using SubSaturateMath for int256;\\n    using Math for uint256;\\n\\n    // when removing liquidity, rewards can be expired by this amount if the pool as incentive credits\\n    uint256 private constant EXPIRED_REWARD_TOLERANCE = 2 days;\\n\\n    /* ******************************** */\\n    /* Immutable Config                 */\\n    /* ******************************** */\\n    /// @notice Tokemak system-level registry. Used to lookup other services (e.g., pricing)\\n    ISystemRegistry public immutable systemRegistry;\\n\\n    /// @notice the number of days to pause rebalancing due to NAV decay\\n    uint16 public immutable pauseRebalancePeriodInDays;\\n\\n    /// @notice destinations trading a premium above maxPremium will be blocked from new capital deployments\\n    int256 public immutable maxPremium; // 100% = 1e18\\n\\n    /// @notice destinations trading a discount above maxDiscount will be blocked from new capital deployments\\n    int256 public immutable maxDiscount; // 100% = 1e18\\n\\n    /// @notice the allowed staleness of stats data before a revert occurs\\n    uint40 public immutable staleDataToleranceInSeconds;\\n\\n    /// @notice the swap cost offset period to initialize the strategy with\\n    uint16 public immutable swapCostOffsetInitInDays;\\n\\n    /// @notice the number of violations required to trigger a tightening of the swap cost offset period (1 to 10)\\n    uint16 public immutable swapCostOffsetTightenThresholdInViolations;\\n\\n    /// @notice the number of days to decrease the swap offset period for each tightening step\\n    uint16 public immutable swapCostOffsetTightenStepInDays;\\n\\n    /// @notice the number of days since a rebalance required to trigger a relaxing of the swap cost offset period\\n    uint16 public immutable swapCostOffsetRelaxThresholdInDays;\\n\\n    /// @notice the number of days to increase the swap offset period for each relaxing step\\n    uint16 public immutable swapCostOffsetRelaxStepInDays;\\n\\n    // slither-disable-start similar-names\\n    /// @notice the maximum the swap cost offset period can reach. This is the loosest the strategy will be\\n    uint16 public immutable swapCostOffsetMaxInDays;\\n\\n    /// @notice the minimum the swap cost offset period can reach. This is the most conservative the strategy will be\\n    uint16 public immutable swapCostOffsetMinInDays;\\n\\n    /// @notice the number of days for the first NAV decay comparison (e.g., 30 days)\\n    uint8 public immutable navLookback1InDays;\\n\\n    /// @notice the number of days for the second NAV decay comparison (e.g., 60 days)\\n    uint8 public immutable navLookback2InDays;\\n\\n    /// @notice the number of days for the third NAV decay comparison (e.g., 90 days)\\n    uint8 public immutable navLookback3InDays;\\n    // slither-disable-end similar-names\\n\\n    /// @notice the maximum slippage that is allowed for a normal rebalance\\n    uint256 public immutable maxNormalOperationSlippage; // 100% = 1e18\\n\\n    /// @notice the maximum amount of slippage to allow when a destination is trimmed due to constraint violations\\n    /// recommend setting this higher than maxNormalOperationSlippage\\n    uint256 public immutable maxTrimOperationSlippage; // 100% = 1e18\\n\\n    /// @notice the maximum amount of slippage to allow when a destinationVault has been shutdown\\n    /// shutdown for a vault is abnormal and means there is an issue at that destination\\n    /// recommend setting this higher than maxNormalOperationSlippage\\n    uint256 public immutable maxEmergencyOperationSlippage; // 100% = 1e18\\n\\n    /// @notice the maximum amount of slippage to allow when the LMPVault has been shutdown\\n    uint256 public immutable maxShutdownOperationSlippage; // 100% = 1e18\\n\\n    /// @notice the maximum discount used for price return\\n    int256 public immutable maxAllowedDiscount; // 18 precision\\n\\n    /// @notice model weight used for LSTs base yield, 1e6 is the highest\\n    uint256 public immutable weightBase;\\n\\n    /// @notice model weight used for DEX fee yield, 1e6 is the highest\\n    uint256 public immutable weightFee;\\n\\n    /// @notice model weight used for incentive yield\\n    uint256 public immutable weightIncentive;\\n\\n    /// @notice model weight used slashing costs\\n    uint256 public immutable weightSlashing;\\n\\n    /// @notice model weight applied to an LST discount when exiting the position\\n    int256 public immutable weightPriceDiscountExit;\\n\\n    /// @notice model weight applied to an LST discount when entering the position\\n    int256 public immutable weightPriceDiscountEnter;\\n\\n    /// @notice model weight applied to an LST premium when entering or exiting the position\\n    int256 public immutable weightPricePremium;\\n\\n    /// @notice model weight applied to an LST premium when entering or exiting the position\\n    uint256 public immutable lstPriceGapTolerance;\\n\\n    /// @notice initial value of the swap cost offset to use\\n    uint16 public immutable swapCostOffsetInit;\\n\\n    /* ******************************** */\\n    /* State Variables                  */\\n    /* ******************************** */\\n\\n    /// @notice The LMPVault that this strategy is associated with\\n    ILMPVault public lmpVault;\\n\\n    /// @notice The timestamp for when rebalancing was last paused\\n    uint40 public lastPausedTimestamp;\\n\\n    /// @notice The last timestamp that a destination was added to\\n    mapping(address => uint40) public lastAddTimestampByDestination;\\n\\n    /// @notice The last timestamp a rebalance was completed\\n    uint40 public lastRebalanceTimestamp;\\n\\n    /// @notice Rebalance violation tracking state\\n    ViolationTracking.State public violationTrackingState;\\n\\n    /// @notice NAV tracking state\\n    NavTracking.State public navTrackingState;\\n\\n    uint16 private _swapCostOffsetPeriod;\\n\\n    /* ******************************** */\\n    /* Events                           */\\n    /* ******************************** */\\n    event RebalanceComplete();\\n\\n    /* ******************************** */\\n    /* Errors                           */\\n    /* ******************************** */\\n    error NotLMPVault();\\n    error StrategyPaused();\\n    error RebalanceDestinationsMatch();\\n    error RebalanceDestinationUnderlyerMismatch(address destination, address trueUnderlyer, address providedUnderlyer);\\n    error LstStatsReservesMismatch();\\n    error StaleData(string name);\\n    error SwapCostExceeded();\\n    error MaxSlippageExceeded();\\n    error MaxDiscountExceeded();\\n    error MaxPremiumExceeded();\\n    error OnlyRebalanceToIdleAvailable();\\n    error InvalidRebalanceToIdle();\\n    error CannotConvertUintToInt();\\n    error InsufficientAssets(address asset);\\n    error SystemRegistryMismatch();\\n    error UnregisteredDestination(address dest);\\n    error LSTPriceGapToleranceExceeded();\\n\\n    struct InterimStats {\\n        uint256 baseApr;\\n        int256 priceReturn;\\n        int256 maxDiscount;\\n        int256 maxPremium;\\n    }\\n\\n    struct RebalanceValueStats {\\n        uint256 inPrice;\\n        uint256 outPrice;\\n        uint256 inEthValue;\\n        uint256 outEthValue;\\n        uint256 swapCost;\\n        uint256 slippage;\\n    }\\n\\n    enum RebalanceDirection {\\n        In,\\n        Out\\n    }\\n\\n    modifier onlyLMPVault() {\\n        if (msg.sender != address(lmpVault)) revert NotLMPVault();\\n        _;\\n    }\\n\\n    constructor(\\n        ISystemRegistry _systemRegistry,\\n        LMPStrategyConfig.StrategyConfig memory conf\\n    ) SecurityBase(address(_systemRegistry.accessController())) {\\n        systemRegistry = _systemRegistry;\\n\\n        LMPStrategyConfig.validate(conf);\\n\\n        pauseRebalancePeriodInDays = conf.pauseRebalancePeriodInDays;\\n        maxPremium = conf.maxPremium;\\n        maxDiscount = conf.maxDiscount;\\n        staleDataToleranceInSeconds = conf.staleDataToleranceInSeconds;\\n        swapCostOffsetInitInDays = conf.swapCostOffset.initInDays;\\n        swapCostOffsetTightenThresholdInViolations = conf.swapCostOffset.tightenThresholdInViolations;\\n        swapCostOffsetTightenStepInDays = conf.swapCostOffset.tightenStepInDays;\\n        swapCostOffsetRelaxThresholdInDays = conf.swapCostOffset.relaxThresholdInDays;\\n        swapCostOffsetRelaxStepInDays = conf.swapCostOffset.relaxStepInDays;\\n        swapCostOffsetMaxInDays = conf.swapCostOffset.maxInDays;\\n        swapCostOffsetMinInDays = conf.swapCostOffset.minInDays;\\n        navLookback1InDays = conf.navLookback.lookback1InDays;\\n        navLookback2InDays = conf.navLookback.lookback2InDays;\\n        navLookback3InDays = conf.navLookback.lookback3InDays;\\n        maxNormalOperationSlippage = conf.slippage.maxNormalOperationSlippage;\\n        maxTrimOperationSlippage = conf.slippage.maxTrimOperationSlippage;\\n        maxEmergencyOperationSlippage = conf.slippage.maxEmergencyOperationSlippage;\\n        maxShutdownOperationSlippage = conf.slippage.maxShutdownOperationSlippage;\\n        maxAllowedDiscount = conf.maxAllowedDiscount;\\n        weightBase = conf.modelWeights.baseYield;\\n        weightFee = conf.modelWeights.feeYield;\\n        weightIncentive = conf.modelWeights.incentiveYield;\\n        weightSlashing = conf.modelWeights.slashing;\\n        weightPriceDiscountExit = conf.modelWeights.priceDiscountExit;\\n        weightPriceDiscountEnter = conf.modelWeights.priceDiscountEnter;\\n        weightPricePremium = conf.modelWeights.pricePremium;\\n        lstPriceGapTolerance = conf.lstPriceGapTolerance;\\n        swapCostOffsetInit = conf.swapCostOffset.initInDays;\\n\\n        _disableInitializers();\\n    }\\n\\n    function initialize(address _lmpVault) external virtual initializer {\\n        _initialize(_lmpVault);\\n    }\\n\\n    function _initialize(address _lmpVault) internal virtual {\\n        Errors.verifyNotZero(_lmpVault, \\\"_lmpVault\\\");\\n\\n        if (ISystemComponent(_lmpVault).getSystemRegistry() != address(systemRegistry)) {\\n            revert SystemRegistryMismatch();\\n        }\\n\\n        lmpVault = ILMPVault(_lmpVault);\\n\\n        lastRebalanceTimestamp = uint40(block.timestamp);\\n        _swapCostOffsetPeriod = swapCostOffsetInit;\\n    }\\n\\n    /// @inheritdoc ILMPStrategy\\n    function verifyRebalance(\\n        IStrategy.RebalanceParams memory params,\\n        IStrategy.SummaryStats memory outSummary\\n    ) public returns (bool success, string memory message) {\\n        validateRebalanceParams(params);\\n\\n        RebalanceValueStats memory valueStats = getRebalanceValueStats(params);\\n\\n        // moves from a destination back to eth only happen under specific scenarios\\n        // if the move is valid, the constraints are different than if assets are moving to a normal destination\\n        if (params.destinationIn == address(lmpVault)) {\\n            verifyRebalanceToIdle(params, valueStats.slippage);\\n            // exit early b/c the remaining constraints only apply when moving to a normal destination\\n            return (true, \\\"\\\");\\n        }\\n\\n        // rebalances back to idle are allowed even when a strategy is paused\\n        // all other rebalances should be blocked in a paused state\\n        ensureNotPaused();\\n        // Verify spot & safe price for the individual tokens in the pool are not far apart.\\n        if (!verifyLSTPriceGap(params, lstPriceGapTolerance)) revert LSTPriceGapToleranceExceeded();\\n\\n        // ensure that we're not exceeding top-level max slippage\\n        if (valueStats.slippage > maxNormalOperationSlippage) {\\n            revert MaxSlippageExceeded();\\n        }\\n\\n        IStrategy.SummaryStats memory inSummary = getRebalanceInSummaryStats(params);\\n\\n        // ensure that the destination that is being added to doesn't exceed top-level premium/discount constraints\\n        if (inSummary.maxDiscount > maxDiscount) revert MaxDiscountExceeded();\\n        if (-inSummary.maxPremium > maxPremium) revert MaxPremiumExceeded();\\n\\n        uint256 swapOffsetPeriod = swapCostOffsetPeriodInDays();\\n\\n        // if the swap is only moving lp tokens from one destination to another\\n        // make the swap offset period more conservative b/c the gas costs/complexity is lower\\n        // Discard the fractional part resulting from div by 2 to be conservative\\n        if (params.tokenIn == params.tokenOut) {\\n            swapOffsetPeriod = swapOffsetPeriod / 2;\\n        }\\n        // slither-disable-start divide-before-multiply\\n        // equation is `compositeReturn * ethValue` / 1e18, which is multiply before divide\\n        // compositeReturn and ethValue are both 1e18 precision\\n        int256 predictedAnnualizedGain = (inSummary.compositeReturn * convertUintToInt(valueStats.inEthValue))\\n            .subSaturate(outSummary.compositeReturn * convertUintToInt(valueStats.outEthValue)) / 1e18;\\n\\n        // slither-disable-end divide-before-multiply\\n        int256 predictedGainAtOffsetEnd = (predictedAnnualizedGain * convertUintToInt(swapOffsetPeriod) / 365);\\n\\n        // if the predicted gain in Eth by the end of the swap offset period is less than\\n        // the swap cost then revert b/c the vault will not offset slippage in sufficient time\\n        // slither-disable-next-line timestamp\\n        if (predictedGainAtOffsetEnd <= convertUintToInt(valueStats.swapCost)) revert SwapCostExceeded();\\n\\n        return (true, \\\"\\\");\\n    }\\n\\n    function validateRebalanceParams(IStrategy.RebalanceParams memory params) internal view {\\n        Errors.verifyNotZero(params.destinationIn, \\\"destinationIn\\\");\\n        Errors.verifyNotZero(params.destinationOut, \\\"destinationOut\\\");\\n        Errors.verifyNotZero(params.tokenIn, \\\"tokenIn\\\");\\n        Errors.verifyNotZero(params.tokenOut, \\\"tokenOut\\\");\\n        Errors.verifyNotZero(params.amountIn, \\\"amountIn\\\");\\n        Errors.verifyNotZero(params.amountOut, \\\"amountOut\\\");\\n\\n        ensureDestinationRegistered(params.destinationIn);\\n        ensureDestinationRegistered(params.destinationOut);\\n\\n        // when a vault is shutdown, rebalancing can only pull assets from destinations back to the vault\\n        if (lmpVault.isShutdown() && params.destinationIn != address(lmpVault)) revert OnlyRebalanceToIdleAvailable();\\n\\n        if (params.destinationIn == params.destinationOut) revert RebalanceDestinationsMatch();\\n\\n        address baseAsset = lmpVault.asset();\\n\\n        // if the in/out destination is the LMPVault then the in/out token must be the baseAsset\\n        // if the in/out is not the LMPVault then the in/out token must match the destinations underlying token\\n        if (params.destinationIn == address(lmpVault)) {\\n            if (params.tokenIn != baseAsset) {\\n                revert RebalanceDestinationUnderlyerMismatch(params.destinationIn, params.tokenIn, baseAsset);\\n            }\\n        } else {\\n            IDestinationVault inDest = IDestinationVault(params.destinationIn);\\n            if (params.tokenIn != inDest.underlying()) {\\n                revert RebalanceDestinationUnderlyerMismatch(params.destinationIn, inDest.underlying(), params.tokenIn);\\n            }\\n        }\\n\\n        if (params.destinationOut == address(lmpVault)) {\\n            if (params.tokenOut != baseAsset) {\\n                revert RebalanceDestinationUnderlyerMismatch(params.destinationOut, params.tokenOut, baseAsset);\\n            }\\n            if (params.amountOut > lmpVault.getAssetBreakdown().totalIdle) {\\n                revert InsufficientAssets(params.tokenOut);\\n            }\\n        } else {\\n            IDestinationVault outDest = IDestinationVault(params.destinationOut);\\n            if (params.tokenOut != outDest.underlying()) {\\n                revert RebalanceDestinationUnderlyerMismatch(\\n                    params.destinationOut, outDest.underlying(), params.tokenOut\\n                );\\n            }\\n            if (params.amountOut > outDest.balanceOf(address(lmpVault))) {\\n                revert InsufficientAssets(params.tokenOut);\\n            }\\n        }\\n    }\\n\\n    function ensureDestinationRegistered(address dest) private view {\\n        if (dest == address(lmpVault)) return;\\n        if (!(lmpVault.isDestinationRegistered(dest) || lmpVault.isDestinationQueuedForRemoval(dest))) {\\n            revert UnregisteredDestination(dest);\\n        }\\n    }\\n\\n    function getRebalanceValueStats(IStrategy.RebalanceParams memory params)\\n        internal\\n        returns (RebalanceValueStats memory)\\n    {\\n        uint8 tokenOutDecimals = IERC20Metadata(params.tokenOut).decimals();\\n        uint8 tokenInDecimals = IERC20Metadata(params.tokenIn).decimals();\\n        address lmpVaultAddress = address(lmpVault);\\n\\n        // Prices are all in terms of the base asset, so when its a rebalance back to the vault\\n        // or out of the vault, We can just take things as 1:1\\n\\n        // Get the price of one unit of the underlying lp token, the params.tokenOut/tokenIn\\n        // Prices are calculated using the spot of price of the constituent tokens\\n        // validated to be within a tolerance of the safe price of those tokens\\n        uint256 outPrice = params.destinationOut != lmpVaultAddress\\n            ? IDestinationVault(params.destinationOut).getValidatedSpotPrice()\\n            : 10 ** tokenOutDecimals;\\n\\n        uint256 inPrice = params.destinationIn != lmpVaultAddress\\n            ? IDestinationVault(params.destinationIn).getValidatedSpotPrice()\\n            : 10 ** tokenInDecimals;\\n\\n        // prices are 1e18 and we want values in 1e18, so divide by token decimals\\n        uint256 outEthValue = params.destinationOut != lmpVaultAddress\\n            ? outPrice * params.amountOut / 10 ** tokenOutDecimals\\n            : params.amountOut;\\n\\n        // amountIn is a minimum to receive, but it is OK if we receive more\\n        uint256 inEthValue = params.destinationIn != lmpVaultAddress\\n            ? inPrice * params.amountIn / 10 ** tokenInDecimals\\n            : params.amountIn;\\n\\n        uint256 swapCost = outEthValue.subSaturate(inEthValue);\\n        uint256 slippage = outEthValue == 0 ? 0 : swapCost * 1e18 / outEthValue;\\n\\n        return RebalanceValueStats({\\n            inPrice: inPrice,\\n            outPrice: outPrice,\\n            inEthValue: inEthValue,\\n            outEthValue: outEthValue,\\n            swapCost: swapCost,\\n            slippage: slippage\\n        });\\n    }\\n\\n    // Calculate the largest difference between spot & safe price for the underlying LST tokens.\\n    // This does not support Curve meta pools\\n    function verifyLSTPriceGap(IStrategy.RebalanceParams memory params, uint256 tolerance) internal returns (bool) {\\n        // Pricer\\n        IRootPriceOracle pricer = systemRegistry.rootPriceOracle();\\n\\n        IDestinationVault dest;\\n        address[] memory lstTokens;\\n        uint256 numLsts;\\n        address dvPoolAddress;\\n\\n        // Out Destination\\n        if (params.destinationOut != address(lmpVault)) {\\n            dest = IDestinationVault(params.destinationOut);\\n            lstTokens = dest.underlyingTokens();\\n            numLsts = lstTokens.length;\\n            dvPoolAddress = dest.getPool();\\n            for (uint256 i = 0; i < numLsts; ++i) {\\n                uint256 priceSafe = pricer.getPriceInEth(lstTokens[i]);\\n                uint256 priceSpot = pricer.getSpotPriceInEth(lstTokens[i], dvPoolAddress);\\n                // For out destination, the pool tokens should not be lower than safe price by tolerance\\n                if ((priceSafe == 0) || (priceSpot == 0)) {\\n                    return false;\\n                } else if (priceSafe > priceSpot) {\\n                    if (((priceSafe * 1.0e18 / priceSpot - 1.0e18) * 10_000) / 1.0e18 > tolerance) {\\n                        return false;\\n                    }\\n                }\\n            }\\n        }\\n\\n        // In Destination\\n        dest = IDestinationVault(params.destinationIn);\\n        lstTokens = dest.underlyingTokens();\\n        numLsts = lstTokens.length;\\n        dvPoolAddress = dest.getPool();\\n        for (uint256 i = 0; i < numLsts; ++i) {\\n            uint256 priceSafe = pricer.getPriceInEth(lstTokens[i]);\\n            uint256 priceSpot = pricer.getSpotPriceInEth(lstTokens[i], dvPoolAddress);\\n            // For in destination, the pool tokens should not be higher than safe price by tolerance\\n            if ((priceSafe == 0) || (priceSpot == 0)) {\\n                return false;\\n            } else if (priceSpot > priceSafe) {\\n                if (((priceSpot * 1.0e18 / priceSafe - 1.0e18) * 10_000) / 1.0e18 > tolerance) {\\n                    return false;\\n                }\\n            }\\n        }\\n\\n        return true;\\n    }\\n\\n    function verifyRebalanceToIdle(IStrategy.RebalanceParams memory params, uint256 slippage) internal {\\n        IDestinationVault outDest = IDestinationVault(params.destinationOut);\\n\\n        // multiple scenarios can be active at a given time. We want to use the highest\\n        // slippage among the active scenarios.\\n        uint256 maxSlippage = 0;\\n\\n        // Scenario 1: the destination has been shutdown -- done when a fast exit is required\\n        if (outDest.isShutdown()) {\\n            maxSlippage = maxEmergencyOperationSlippage;\\n        }\\n\\n        // Scenario 2: the LMPVault has been shutdown\\n        if (lmpVault.isShutdown() && maxShutdownOperationSlippage > maxSlippage) {\\n            maxSlippage = maxShutdownOperationSlippage;\\n        }\\n\\n        // Scenario 3: position is a dust position and should be trimmed\\n        if (verifyCleanUpOperation(params) && maxNormalOperationSlippage > maxSlippage) {\\n            maxSlippage = maxNormalOperationSlippage;\\n        }\\n\\n        // Scenario 4: the destination has been moved out of the LMPs active destinations\\n        if (lmpVault.isDestinationQueuedForRemoval(params.destinationOut) && maxNormalOperationSlippage > maxSlippage) {\\n            maxSlippage = maxNormalOperationSlippage;\\n        }\\n\\n        // Scenario 5: the destination needs to be trimmed because it violated a constraint\\n        if (maxTrimOperationSlippage > maxSlippage) {\\n            uint256 trimAmount = getDestinationTrimAmount(outDest); // this is expensive, can it be refactored?\\n            if (trimAmount < 1e18 && verifyTrimOperation(params, trimAmount)) {\\n                maxSlippage = maxTrimOperationSlippage;\\n            }\\n        }\\n\\n        // if none of the scenarios are active then this rebalance is invalid\\n        if (maxSlippage == 0) revert InvalidRebalanceToIdle();\\n\\n        if (slippage > maxSlippage) revert MaxSlippageExceeded();\\n    }\\n\\n    function verifyCleanUpOperation(IStrategy.RebalanceParams memory params) internal view returns (bool) {\\n        IDestinationVault outDest = IDestinationVault(params.destinationOut);\\n\\n        LMPDebt.DestinationInfo memory destInfo = lmpVault.getDestinationInfo(params.destinationOut);\\n        // revert if information is too old\\n        ensureNotStaleData(\\\"DestInfo\\\", destInfo.lastReport);\\n        // shares of the destination currently held by the LMPVault\\n        uint256 currentShares = outDest.balanceOf(address(lmpVault));\\n        // withdrawals reduce totalAssets, but do not update the destinationInfo\\n        // adjust the current debt based on the currently owned shares\\n        uint256 currentDebt =\\n            destInfo.ownedShares == 0 ? 0 : destInfo.cachedDebtValue * currentShares / destInfo.ownedShares;\\n\\n        // If the current position is < 2% of total assets, trim to idle is allowed\\n        // slither-disable-next-line divide-before-multiply\\n        if ((currentDebt * 1e18) < ((lmpVault.totalAssets() * 1e18) / 50)) {\\n            return true;\\n        }\\n\\n        return false;\\n    }\\n\\n    function verifyTrimOperation(IStrategy.RebalanceParams memory params, uint256 trimAmount) internal returns (bool) {\\n        // if the position can be trimmed to zero, then no checks are necessary\\n        if (trimAmount == 0) {\\n            return true;\\n        }\\n\\n        IDestinationVault outDest = IDestinationVault(params.destinationOut);\\n\\n        LMPDebt.DestinationInfo memory destInfo = lmpVault.getDestinationInfo(params.destinationOut);\\n        // revert if information is too old\\n        ensureNotStaleData(\\\"DestInfo\\\", destInfo.lastReport);\\n\\n        // shares of the destination currently held by the LMPVault\\n        uint256 currentShares = outDest.balanceOf(address(lmpVault));\\n\\n        // withdrawals reduce totalAssets, but do not update the destinationInfo\\n        // adjust the current debt based on the currently owned shares\\n        uint256 currentDebt =\\n            destInfo.ownedShares == 0 ? 0 : destInfo.cachedDebtValue * currentShares / destInfo.ownedShares;\\n\\n        // prior validation ensures that currentShares >= amountOut\\n        uint256 sharesAfterRebalance = currentShares - params.amountOut;\\n\\n        // current value of the destination shares, not cached from debt reporting\\n        uint256 destValueAfterRebalance = outDest.debtValue(sharesAfterRebalance);\\n\\n        // calculate the total value of the lmpVault after the rebalance is made\\n        // note that only the out destination value is adjusted to current\\n        // amountIn is a minimum to receive, but it is OK if we receive more\\n        uint256 lmpAssetsAfterRebalance =\\n            (lmpVault.totalAssets() + params.amountIn + destValueAfterRebalance - currentDebt);\\n\\n        // trimming may occur over multiple rebalances, so we only want to ensure we aren't removing too much\\n        if (lmpAssetsAfterRebalance > 0) {\\n            return destValueAfterRebalance * 1e18 / lmpAssetsAfterRebalance >= trimAmount;\\n        } else {\\n            // LMP assets after rebalance are 0\\n            return true;\\n        }\\n    }\\n\\n    function getDestinationTrimAmount(IDestinationVault dest) internal returns (uint256) {\\n        uint256 discountThresholdOne = 3e5; // 3% 1e7 precision, discount required to consider trimming\\n        uint256 discountDaysThreshold = 7; // number of last 10 days that it was >= discountThreshold\\n        uint256 discountThresholdTwo = 5e5; // 5% 1e7 precision, discount required to completely exit\\n\\n        // this is always the out destination and guaranteed not to be the LMPVault idle asset\\n        IDexLSTStats.DexLSTStatsData memory stats = dest.getStats().current();\\n\\n        ILSTStats.LSTStatsData[] memory lstStats = stats.lstStatsData;\\n        uint256 numLsts = lstStats.length;\\n\\n        uint256 minTrim = 1e18; // 100% -- no trim required\\n        for (uint256 i = 0; i < numLsts; ++i) {\\n            ILSTStats.LSTStatsData memory targetLst = lstStats[i];\\n            (uint256 numViolationsOne, uint256 numViolationsTwo) =\\n                getDiscountAboveThreshold(targetLst.discountHistory, discountThresholdOne, discountThresholdTwo);\\n\\n            if (targetLst.discount >= int256(discountThresholdTwo * 1e11) && numViolationsTwo >= discountDaysThreshold)\\n            {\\n                // this is the worst possible trim, so we can exit without checking other LSTs\\n                return 0;\\n            }\\n\\n            // discountThreshold is 1e7 precision for the discount history, but here it is compared to a 1e18, so pad it\\n            if (targetLst.discount >= int256(discountThresholdOne * 1e11) && numViolationsOne >= discountDaysThreshold)\\n            {\\n                minTrim = minTrim.min(1e17); // 10%\\n            }\\n        }\\n\\n        return minTrim;\\n    }\\n\\n    function getDiscountAboveThreshold(\\n        uint24[10] memory discountHistory,\\n        uint256 threshold1,\\n        uint256 threshold2\\n    ) internal pure returns (uint256 count1, uint256 count2) {\\n        count1 = 0;\\n        count2 = 0;\\n        uint256 len = discountHistory.length;\\n        for (uint256 i = 0; i < len; ++i) {\\n            if (discountHistory[i] >= threshold1) {\\n                count1 += 1;\\n            }\\n            if (discountHistory[i] >= threshold2) {\\n                count2 += 1;\\n            }\\n        }\\n    }\\n\\n    /// @inheritdoc ILMPStrategy\\n    function getRebalanceOutSummaryStats(IStrategy.RebalanceParams memory rebalanceParams)\\n        external\\n        returns (IStrategy.SummaryStats memory outSummary)\\n    {\\n        outSummary = _getRebalanceOutSummaryStats(rebalanceParams);\\n    }\\n\\n    function _getRebalanceOutSummaryStats(IStrategy.RebalanceParams memory rebalanceParams)\\n        internal\\n        virtual\\n        returns (IStrategy.SummaryStats memory outSummary)\\n    {\\n        // Use safe price\\n        IRootPriceOracle pricer = systemRegistry.rootPriceOracle();\\n        uint256 outPrice = pricer.getPriceInEth(rebalanceParams.tokenOut);\\n        outSummary = (\\n            getDestinationSummaryStats(\\n                rebalanceParams.destinationOut, outPrice, RebalanceDirection.Out, rebalanceParams.amountOut\\n            )\\n        );\\n    }\\n\\n    // Summary stats for destination In\\n    function getRebalanceInSummaryStats(IStrategy.RebalanceParams memory rebalanceParams)\\n        internal\\n        virtual\\n        returns (IStrategy.SummaryStats memory inSummary)\\n    {\\n        // Use safe price\\n        IRootPriceOracle pricer = systemRegistry.rootPriceOracle();\\n        uint256 inPrice = pricer.getPriceInEth(rebalanceParams.tokenIn);\\n        inSummary = (\\n            getDestinationSummaryStats(\\n                rebalanceParams.destinationIn, inPrice, RebalanceDirection.In, rebalanceParams.amountIn\\n            )\\n        );\\n    }\\n\\n    function getDestinationSummaryStats(\\n        address destAddress,\\n        uint256 price,\\n        RebalanceDirection direction,\\n        uint256 amount\\n    ) internal returns (IStrategy.SummaryStats memory) {\\n        // NOTE: creating this as empty to save on variables later\\n        // has the distinct downside that if you forget to update a value, you get the zero value\\n        // slither-disable-next-line uninitialized-local\\n        IStrategy.SummaryStats memory result;\\n\\n        if (destAddress == address(lmpVault)) {\\n            result.destination = destAddress;\\n            result.ownedShares = lmpVault.getAssetBreakdown().totalIdle;\\n            result.pricePerShare = price;\\n            return result;\\n        }\\n\\n        IDestinationVault dest = IDestinationVault(destAddress);\\n        IDexLSTStats.DexLSTStatsData memory stats = dest.getStats().current();\\n\\n        ensureNotStaleData(\\\"DexStats\\\", stats.lastSnapshotTimestamp);\\n\\n        uint256 numLstStats = stats.lstStatsData.length;\\n        if (numLstStats != stats.reservesInEth.length) revert LstStatsReservesMismatch();\\n\\n        int256[] memory priceReturns = calculatePriceReturns(stats);\\n\\n        // temporary holder to reduce variables\\n        InterimStats memory interimStats;\\n\\n        uint256 reservesTotal = 0;\\n        for (uint256 i = 0; i < numLstStats; ++i) {\\n            uint256 reserveValue = stats.reservesInEth[i];\\n            reservesTotal += reserveValue;\\n\\n            if (priceReturns[i] != 0) {\\n                interimStats.priceReturn += calculateWeightedPriceReturn(priceReturns[i], reserveValue, direction);\\n            }\\n\\n            // For tokens like WETH/ETH who have no data, tokens we've configured as NO_OP's in the\\n            // destinations/calculators, we can just skip the rest of these calcs as they have no stats\\n            if (stats.lstStatsData[i].baseApr == 0 && stats.lstStatsData[i].lastSnapshotTimestamp == 0) {\\n                continue;\\n            }\\n\\n            ensureNotStaleData(\\\"lstData\\\", stats.lstStatsData[i].lastSnapshotTimestamp);\\n\\n            interimStats.baseApr += stats.lstStatsData[i].baseApr * reserveValue;\\n\\n            int256 discount = stats.lstStatsData[i].discount;\\n            // slither-disable-next-line timestamp\\n            if (discount < interimStats.maxPremium) {\\n                interimStats.maxPremium = discount;\\n            }\\n            // slither-disable-next-line timestamp\\n            if (discount > interimStats.maxDiscount) {\\n                interimStats.maxDiscount = discount;\\n            }\\n        }\\n\\n        // if reserves are 0, then leave baseApr + priceReturn as 0\\n        if (reservesTotal > 0) {\\n            result.baseApr = interimStats.baseApr / reservesTotal;\\n            result.priceReturn = interimStats.priceReturn / convertUintToInt(reservesTotal);\\n        }\\n\\n        result.destination = destAddress;\\n        result.feeApr = stats.feeApr;\\n        result.incentiveApr = calculateIncentiveApr(stats.stakingIncentiveStats, direction, destAddress, amount, price);\\n        result.safeTotalSupply = stats.stakingIncentiveStats.safeTotalSupply;\\n        result.ownedShares = dest.balanceOf(address(lmpVault));\\n        result.pricePerShare = price;\\n        result.maxPremium = interimStats.maxPremium;\\n        result.maxDiscount = interimStats.maxDiscount;\\n\\n        uint256 returnExPrice = (\\n            result.baseApr * weightBase / 1e6 + result.feeApr * weightFee / 1e6\\n                + result.incentiveApr * weightIncentive / 1e6\\n        );\\n\\n        result.compositeReturn = convertUintToInt(returnExPrice) + result.priceReturn; // price already weighted\\n\\n        return result;\\n    }\\n\\n    function calculateWeightedPriceReturn(\\n        int256 priceReturn,\\n        uint256 reserveValue,\\n        RebalanceDirection direction\\n    ) internal view returns (int256) {\\n        // slither-disable-next-line timestamp\\n        if (priceReturn > 0) {\\n            // LST trading at a discount\\n            if (direction == RebalanceDirection.Out) {\\n                return priceReturn * convertUintToInt(reserveValue) * weightPriceDiscountExit / 1e6;\\n            } else {\\n                return priceReturn * convertUintToInt(reserveValue) * weightPriceDiscountEnter / 1e6;\\n            }\\n        } else {\\n            // LST trading at 0 or a premium\\n            return priceReturn * convertUintToInt(reserveValue) * weightPricePremium / 1e6;\\n        }\\n    }\\n\\n    function calculateIncentiveApr(\\n        IDexLSTStats.StakingIncentiveStats memory stats,\\n        RebalanceDirection direction,\\n        address destAddress,\\n        uint256 lpAmountToAddOrRemove,\\n        uint256 lpPrice\\n    ) internal view returns (uint256) {\\n        IIncentivesPricingStats pricing = systemRegistry.incentivePricing();\\n\\n        bool hasCredits = stats.incentiveCredits > 0;\\n        uint256 totalRewards = 0;\\n\\n        uint256 numRewards = stats.annualizedRewardAmounts.length;\\n        for (uint256 i = 0; i < numRewards; ++i) {\\n            address rewardToken = stats.rewardTokens[i];\\n            // Move ahead only if the rewardToken is not 0\\n            if (rewardToken != address(0)) {\\n                uint256 tokenPrice = getIncentivePrice(pricing, rewardToken);\\n\\n                // skip processing if the token is worthless or unregistered\\n                if (tokenPrice == 0) continue;\\n\\n                uint256 periodFinish = stats.periodFinishForRewards[i];\\n                uint256 rewardRate = stats.annualizedRewardAmounts[i];\\n                uint256 rewardDivisor = 10 ** IERC20Metadata(rewardToken).decimals();\\n\\n                if (direction == RebalanceDirection.Out) {\\n                    // if the destination has credits then extend the periodFinish by the expiredTolerance\\n                    // this allows destinations that consistently had rewards some leniency\\n                    if (hasCredits) {\\n                        periodFinish += EXPIRED_REWARD_TOLERANCE;\\n                    }\\n\\n                    // slither-disable-next-line timestamp\\n                    if (periodFinish > block.timestamp) {\\n                        // tokenPrice is 1e18 and we want 1e18 out, so divide by the token decimals\\n                        totalRewards += rewardRate * tokenPrice / rewardDivisor;\\n                    }\\n                } else {\\n                    // when adding to a destination, count incentives only when either of the following conditions are\\n                    // met:\\n                    // 1) the incentive lasts at least 7 days\\n                    // 2) the incentive lasts >3 days and the destination has a positive incentive credit balance\\n                    if (\\n                        // slither-disable-next-line timestamp\\n                        periodFinish >= block.timestamp + 7 days\\n                            || (hasCredits && periodFinish > block.timestamp + 3 days)\\n                    ) {\\n                        // tokenPrice is 1e18 and we want 1e18 out, so divide by the token decimals\\n                        totalRewards += rewardRate * tokenPrice / rewardDivisor;\\n                    }\\n                }\\n            }\\n        }\\n\\n        if (totalRewards == 0) {\\n            return 0;\\n        }\\n\\n        uint256 lpTokenDivisor = 10 ** IDestinationVault(destAddress).decimals();\\n        uint256 totalSupplyInEth = 0;\\n        // When comparing in & out destinations, we want to consider the supply with our allocation\\n        // included to estimate the resulting incentive rate\\n        if (direction == RebalanceDirection.Out) {\\n            totalSupplyInEth = stats.safeTotalSupply * lpPrice / lpTokenDivisor;\\n        } else {\\n            totalSupplyInEth = (stats.safeTotalSupply + lpAmountToAddOrRemove) * lpPrice / lpTokenDivisor;\\n        }\\n\\n        // Adjust for totalSupplyInEth is 0\\n        if (totalSupplyInEth != 0) {\\n            return (totalRewards * 1e18) / totalSupplyInEth;\\n        } else {\\n            return (totalRewards);\\n        }\\n    }\\n\\n    function getIncentivePrice(IIncentivesPricingStats pricing, address token) internal view returns (uint256) {\\n        (uint256 fastPrice, uint256 slowPrice) = pricing.getPriceOrZero(token, staleDataToleranceInSeconds);\\n        return fastPrice.min(slowPrice);\\n    }\\n\\n    function calculatePriceReturns(IDexLSTStats.DexLSTStatsData memory stats) internal view returns (int256[] memory) {\\n        ILSTStats.LSTStatsData[] memory lstStatsData = stats.lstStatsData;\\n\\n        uint256 numLsts = lstStatsData.length;\\n        int256[] memory priceReturns = new int256[](numLsts);\\n\\n        for (uint256 i = 0; i < numLsts; ++i) {\\n            ILSTStats.LSTStatsData memory data = lstStatsData[i];\\n\\n            uint256 scalingFactor = 1e18; // default scalingFactor is 1\\n\\n            int256 discount = data.discount;\\n            if (discount > maxAllowedDiscount) {\\n                discount = maxAllowedDiscount;\\n            }\\n\\n            // discount value that is negative indicates LST price premium\\n            // scalingFactor = 1e18 for premiums and discounts that are small\\n            // discountTimestampByPercent array holds the timestamp in position i for discount = (i+1)%\\n            uint40[5] memory discountTimestampByPercent = data.discountTimestampByPercent;\\n\\n            // 1e16 means a 1% LST discount where full scale is 1e18.\\n            if (discount > 1e16) {\\n                // linear approximation for exponential function with approx. half life of 30 days\\n                uint256 halfLifeSec = 30 * 24 * 60 * 60;\\n                uint256 len = data.discountTimestampByPercent.length;\\n                for (uint256 j = 1; j < len; ++j) {\\n                    // slither-disable-next-line timestamp\\n                    if (discount <= convertUintToInt((j + 1) * 1e16)) {\\n                        // current timestamp should be strictly >= timestamp in discountTimestampByPercent\\n                        uint256 timeSinceDiscountSec =\\n                            uint256(uint40(block.timestamp) - discountTimestampByPercent[j - 1]);\\n                        scalingFactor >>= (timeSinceDiscountSec / halfLifeSec);\\n                        // slither-disable-next-line weak-prng\\n                        timeSinceDiscountSec %= halfLifeSec;\\n                        scalingFactor -= scalingFactor * timeSinceDiscountSec / halfLifeSec / 2;\\n                        break;\\n                    }\\n                }\\n            }\\n            priceReturns[i] = discount * convertUintToInt(scalingFactor) / 1e18;\\n        }\\n\\n        return priceReturns;\\n    }\\n\\n    /// @inheritdoc ILMPStrategy\\n    function navUpdate(uint256 navPerShare) external onlyLMPVault {\\n        uint40 blockTime = uint40(block.timestamp);\\n        navTrackingState.insert(navPerShare, blockTime);\\n\\n        clearExpiredPause();\\n\\n        // check if the strategy needs to be paused due to NAV decay\\n        // the check only happens after there are enough data points\\n        // skip the check if the strategy is already paused\\n        // slither-disable-next-line timestamp\\n        if (navTrackingState.len > navLookback3InDays && !paused()) {\\n            uint256 nav1 = navTrackingState.getDaysAgo(navLookback1InDays);\\n            uint256 nav2 = navTrackingState.getDaysAgo(navLookback2InDays);\\n            uint256 nav3 = navTrackingState.getDaysAgo(navLookback3InDays);\\n\\n            if (navPerShare < nav1 && navPerShare < nav2 && navPerShare < nav3) {\\n                lastPausedTimestamp = blockTime;\\n            }\\n        }\\n    }\\n\\n    /// @inheritdoc ILMPStrategy\\n    function rebalanceSuccessfullyExecuted(IStrategy.RebalanceParams memory params) external onlyLMPVault {\\n        // clearExpirePause sets _swapCostOffsetPeriod, so skip when possible to avoid double write\\n        if (!clearExpiredPause()) _swapCostOffsetPeriod = swapCostOffsetPeriodInDays();\\n\\n        address lmpAddress = address(lmpVault);\\n\\n        // update the destination that had assets added\\n        // moves into idle are not tracked for violations\\n        if (params.destinationIn != lmpAddress) {\\n            // Update to lastRebalanceTimestamp excludes rebalances to idle as those skip swapCostOffset logic\\n            lastRebalanceTimestamp = uint40(block.timestamp);\\n            lastAddTimestampByDestination[params.destinationIn] = lastRebalanceTimestamp;\\n        }\\n\\n        // violations are only tracked when moving between non-idle assets\\n        if (params.destinationOut != lmpAddress && params.destinationIn != lmpAddress) {\\n            uint40 lastAddForRemoveDestination = lastAddTimestampByDestination[params.destinationOut];\\n            if (\\n                // slither-disable-start timestamp\\n                lastRebalanceTimestamp - lastAddForRemoveDestination < uint40(swapCostOffsetPeriodInDays()) * 1 days\\n            ) {\\n                // slither-disable-end timestamp\\n\\n                violationTrackingState.insert(true);\\n            } else {\\n                violationTrackingState.insert(false);\\n            }\\n        }\\n\\n        // tighten if X of the last 10 rebalances were violations\\n        if (\\n            violationTrackingState.len == 10\\n                && violationTrackingState.violationCount >= swapCostOffsetTightenThresholdInViolations\\n        ) {\\n            tightenSwapCostOffset();\\n            violationTrackingState.reset();\\n        }\\n    }\\n\\n    function swapCostOffsetPeriodInDays() public view returns (uint16) {\\n        // if the system is in an expired pause state then ensure that swap cost offset\\n        // is set to the most conservative value (shortest number of days)\\n        if (expiredPauseState()) {\\n            return swapCostOffsetMinInDays;\\n        }\\n\\n        // truncation is desirable because we only want the number of times it has exceeded the threshold\\n        // slither-disable-next-line divide-before-multiply\\n        uint40 numRelaxPeriods = swapCostOffsetRelaxThresholdInDays == 0\\n            ? 0\\n            : (uint40(block.timestamp) - lastRebalanceTimestamp) / 1 days / uint40(swapCostOffsetRelaxThresholdInDays);\\n        uint40 relaxDays = numRelaxPeriods * uint40(swapCostOffsetRelaxStepInDays);\\n        uint40 newSwapCostOffset = uint40(_swapCostOffsetPeriod) + relaxDays;\\n\\n        // slither-disable-next-line timestamp\\n        if (newSwapCostOffset > swapCostOffsetMaxInDays) {\\n            return swapCostOffsetMaxInDays;\\n        }\\n\\n        return uint16(newSwapCostOffset);\\n    }\\n\\n    function tightenSwapCostOffset() internal {\\n        uint16 currentSwapOffset = swapCostOffsetPeriodInDays();\\n        uint16 newSwapCostOffset = 0;\\n\\n        if (currentSwapOffset > swapCostOffsetTightenStepInDays) {\\n            newSwapCostOffset = currentSwapOffset - swapCostOffsetTightenStepInDays;\\n        }\\n\\n        // slither-disable-next-line timestamp\\n        if (newSwapCostOffset < swapCostOffsetMinInDays) {\\n            _swapCostOffsetPeriod = swapCostOffsetMinInDays;\\n        } else {\\n            _swapCostOffsetPeriod = newSwapCostOffset;\\n        }\\n    }\\n\\n    function paused() public view returns (bool) {\\n        // slither-disable-next-line incorrect-equality,timestamp\\n        if (lastPausedTimestamp == 0) return false;\\n        uint40 pauseRebalanceInSeconds = uint40(pauseRebalancePeriodInDays) * 1 days;\\n\\n        // slither-disable-next-line timestamp\\n        return uint40(block.timestamp) - lastPausedTimestamp <= pauseRebalanceInSeconds;\\n    }\\n\\n    function ensureNotPaused() internal view {\\n        if (paused()) revert StrategyPaused();\\n    }\\n\\n    function expiredPauseState() internal view returns (bool) {\\n        // slither-disable-next-line timestamp\\n        return lastPausedTimestamp > 0 && !paused();\\n    }\\n\\n    function clearExpiredPause() internal returns (bool) {\\n        if (!expiredPauseState()) return false;\\n\\n        lastPausedTimestamp = 0;\\n        _swapCostOffsetPeriod = swapCostOffsetMinInDays;\\n        return true;\\n    }\\n\\n    function ensureNotStaleData(string memory name, uint256 dataTimestamp) internal view {\\n        // slither-disable-next-line timestamp\\n        if (block.timestamp - dataTimestamp > staleDataToleranceInSeconds) revert StaleData(name);\\n    }\\n\\n    function convertUintToInt(uint256 value) internal pure returns (int256) {\\n        // slither-disable-next-line timestamp\\n        if (value > uint256(type(int256).max)) revert CannotConvertUintToInt();\\n        return int256(value);\\n    }\\n}\\n\\nlibrary SubSaturateMath {\\n    function subSaturate(uint256 self, uint256 other) internal pure returns (uint256) {\\n        if (other >= self) return 0;\\n        return self - other;\\n    }\\n\\n    function subSaturate(int256 self, int256 other) internal pure returns (int256) {\\n        if (other >= self) return 0;\\n        return self - other;\\n    }\\n}\\n\"\r\n    },\r\n    \"src/interfaces/utils/IWETH9.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\nimport { IERC20 } from \\\"openzeppelin-contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IWETH9 is IERC20 {\\n    function symbol() external view returns (string memory);\\n\\n    function deposit() external payable;\\n    function withdraw(uint256 amount) external;\\n}\\n\"\r\n    },\r\n    \"src/interfaces/staking/IAccToke.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n// Copyright (c) 2023 Tokemak Ops Ltd. All rights reserved.\\npragma solidity 0.8.17;\\n\\nimport { IERC20Metadata } from \\\"openzeppelin-contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\\ninterface IAccToke {\\n    ///////////////////////////////////////////////////////////////////\\n    //                        Variables\\n    ///////////////////////////////////////////////////////////////////\\n\\n    function startEpoch() external view returns (uint256);\\n    function minStakeDuration() external view returns (uint256);\\n\\n    struct Lockup {\\n        uint128 amount;\\n        uint128 end;\\n        uint256 points;\\n    }\\n\\n    function getLockups(address user) external view returns (Lockup[] memory);\\n    function toke() external view returns (IERC20Metadata);\\n\\n    ///////////////////////////////////////////////////////////////////\\n    //                        Errors\\n    ///////////////////////////////////////////////////////////////////\\n\\n    error ZeroAddress();\\n    error StakingDurationTooShort();\\n    error StakingDurationTooLong();\\n    error StakingPointsExceeded();\\n    error IncorrectStakingAmount();\\n    error InsufficientFunds();\\n    error LockupDoesNotExist();\\n    error NotUnlockableYet();\\n    error AlreadyUnlocked();\\n    error ExtendDurationTooShort();\\n    error TransfersDisabled();\\n    error TransferFailed();\\n    error NoRewardsToClaim();\\n    error InsufficientAmount();\\n    error InvalidLockupIds();\\n    error InvalidDurationLength();\\n\\n    ///////////////////////////////////////////////////////////////////\\n    //                        Events\\n    ///////////////////////////////////////////////////////////////////\\n    event SetMaxStakeDuration(uint256 oldDuration, uint256 newDuration);\\n    event Stake(address indexed user, uint256 lockupId, uint256 amount, uint256 end, uint256 points);\\n    event Unstake(address indexed user, uint256 lockupId, uint256 amount, uint256 end, uint256 points);\\n    event Extend(\\n        address indexed user,\\n        uint256 lockupId,\\n        uint256 amount,\\n        uint256 oldEnd,\\n        uint256 newEnd,\\n        uint256 oldPoints,\\n        uint256 newPoints\\n    );\\n    event RewardsAdded(uint256 amount, uint256 accRewardPerShare);\\n    event RewardsCollected(address indexed user, uint256 amount);\\n    event RewardsClaimed(address indexed user, uint256 amount);\\n\\n    ///////////////////////////////////////////////////////////////////\\n    //\\n    //                        Staking Methods\\n    //\\n    ///////////////////////////////////////////////////////////////////\\n\\n    /**\\n     * @notice Stake TOKE to an address that may not be the same as the sender of the funds. This can be used to give\\n     * staked funds to someone else.\\n     *\\n     * If staking before the start of staking (epoch), then the lockup start and end dates are shifted forward so that\\n     * the lockup starts at the epoch.\\n     *\\n     * @param amount TOKE to lockup in the stake\\n     * @param duration in seconds for the stake\\n     * @param to address to receive ownership of the stake\\n     */\\n    function stake(uint256 amount, uint256 duration, address to) external;\\n\\n    /**\\n     * @notice Stake TOKE\\n     *\\n     * If staking before the start of staking (epoch), then the lockup start and end dates are shifted forward so that\\n     * the lockup starts at the epoch.\\n     *\\n     * @notice Stake TOKE for myself.\\n     * @param amount TOKE to lockup in the stake\\n     * @param duration in seconds for the stake\\n     */\\n    function stake(uint256 amount, uint256 duration) external;\\n\\n    /**\\n     * @notice Collect staked TOKE for a lockup and any earned rewards.\\n     * @param lockupIds the id of the lockup to unstake\\n     */\\n    function unstake(uint256[] memory lockupIds) external;\\n\\n    /**\\n     * @notice Extend a stake lockup for additional points.\\n     *\\n     * The stake end time is computed from the current time + duration, just like it is for new stakes. So a new stake\\n     * for seven days duration and an old stake extended with a seven days duration would have the same end.\\n     *\\n     * If an extend is made before the start of staking, the start time for the new stake is shifted forwards to the\\n     * start of staking, which also shifts forward the end date.\\n     *\\n     * @param lockupIds the id of the old lockup to extend\\n     * @param durations number of seconds from now to stake for\\n     */\\n    function extend(uint256[] memory lockupIds, uint256[] memory durations) external;\\n\\n    ///////////////////////////////////////////////////////////////////\\n    //\\n    //                        Rewards\\n    //\\n    ///////////////////////////////////////////////////////////////////\\n\\n    /// @notice The total amount of rewards earned for all stakes\\n    function totalRewardsEarned() external returns (uint256);\\n\\n    /// @notice Total rewards claimed by all stakers\\n    function totalRewardsClaimed() external returns (uint256);\\n\\n    /// @notice Rewards claimed by a specific wallet\\n    /// @param user Address of the wallet to check\\n    function rewardsClaimed(address user) external returns (uint256);\\n\\n    /**\\n     * @notice Preview the number of points that would be returned for the\\n     * given amount and duration.\\n     *\\n     * @param amount TOKE to be staked\\n     * @param duration number of seconds to stake for\\n     * @return points staking points that would be returned\\n     * @return end staking period end date\\n     */\\n    function previewPoints(uint256 amount, uint256 duration) external view returns (uint256, uint256);\\n\\n    /// @notice Preview the reward amount a caller can claim\\n    function previewRewards() external view returns (uint256);\\n\\n    /// @notice Preview the reward amount a specified wallet can claim\\n    function previewRewards(address user) external view returns (uint256);\\n\\n    /// @notice Claim rewards for the caller\\n    function collectRewards() external returns (uint256);\\n\\n    /// @notice Check if amount can be staked\\n    function isStakeableAmount(uint256 amount) external pure returns (bool);\\n}\\n\"\r\n    },\r\n    \"src/interfaces/security/IAccessController.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n// Copyright (c) 2023 Tokemak Ops Ltd. All rights reserved.\\npragma solidity 0.8.17;\\n\\nimport { IAccessControlEnumerable } from \\\"openzeppelin-contracts/access/IAccessControlEnumerable.sol\\\";\\n\\ninterface IAccessController is IAccessControlEnumerable {\\n    error AccessDenied();\\n\\n    function setupRole(bytes32 role, address account) external;\\n\\n    function verifyOwner(address account) external view;\\n}\\n\"\r\n    },\r\n    \"src/interfaces/swapper/ISwapRouter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n// Copyright (c) 2023 Tokemak Ops Ltd. All rights reserved.\\npragma solidity 0.8.17;\\n\\nimport { ISyncSwapper } from \\\"./ISyncSwapper.sol\\\";\\n\\ninterface ISwapRouter {\\n    struct SwapData {\\n        address token;\\n        address pool;\\n        ISyncSwapper swapper;\\n        bytes data;\\n    }\\n\\n    error MaxSlippageExceeded();\\n    error SwapRouteLookupFailed();\\n    error SwapFailed();\\n\\n    event SwapRouteSet(address indexed token, SwapData[] routes);\\n    event SwapForQuoteSuccessful(\\n        address indexed assetToken,\\n        uint256 sellAmount,\\n        address indexed quoteToken,\\n        uint256 minBuyAmount,\\n        uint256 buyAmount\\n    );\\n\\n    /**\\n     * @notice Sets a new swap route for a given asset token.\\n     * @param assetToken The asset token for which the swap route is being set.\\n     * @param _swapRoute The new swap route as an array of SwapData. The last element represents the quoteToken.\\n     * @dev Each 'hop' in the swap route is validated using the respective swapper's validate function. The validate\\n     * function ensures that the encoded data contains the correct 'fromAddress' and 'toAddress' (swapData.token), and\\n     * verifies that these tokens are in the pool.\\n     */\\n    function setSwapRoute(address assetToken, SwapData[] calldata _swapRoute) external;\\n\\n    /**\\n     * @notice Swaps the asset token for the quote token.\\n     * @dev We're adopting an \\\"exact in, variable out\\\" model for all our swaps. This ensures that the entire sellAmount\\n     * is used, eliminating the need for additional balance checks and refunds. This model is expected to be followed by\\n     * all swapper implementations to maintain consistency and to optimize for gas efficiency.\\n     * @param assetToken The address of the asset token to swap.\\n     * @param sellAmount The exact amount of the asset token to swap.\\n     * @param quoteToken The address of the quote token.\\n     * @param minBuyAmount The minimum amount of the quote token expected to be received from the swap.\\n     * @return The amount received from the swap.\\n     */\\n    function swapForQuote(\\n        address assetToken,\\n        uint256 sellAmount,\\n        address quoteToken,\\n        uint256 minBuyAmount\\n    ) external returns (uint256);\\n}\\n\"\r\n    },\r\n    \"src/interfaces/utils/ICurveResolver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n// Copyright (c) 2023 Tokemak Ops Ltd. All rights reserved.\\n\\npragma solidity 0.8.17;\\n\\ninterface ICurveResolver {\\n    /// @notice Resolve details of a Curve pool regardless of type or version\\n    /// @dev This resolves tokens without unwrapping to underlying in the case of meta pools.\\n    /// If you need a dynamic array of tokens use Arrays.convertFixedCurveTokenArrayToDynamic(tokens,numTokens)\\n    /// @param poolAddress pool address to lookup\\n    /// @return tokens tokens that make up the pool\\n    /// @return numTokens the number of tokens. tokens are not unwrapped.\\n    /// @return isStableSwap is this a StableSwap pool. false = CryptoSwap\\n    function resolve(address poolAddress)\\n        external\\n        view\\n        returns (address[8] memory tokens, uint256 numTokens, bool isStableSwap);\\n\\n    /// @notice Resolve details of a Curve pool regardless of type or version\\n    /// @dev This resolves tokens without unwrapping to underlying in the case of meta pools.\\n    /// If you need a dynamic array of tokens use Arrays.convertFixedCurveTokenArrayToDynamic(tokens,numTokens)\\n    /// @param poolAddress pool address to lookup\\n    /// @return tokens tokens that make up the pool\\n    /// @return numTokens the number of tokens. tokens are not unwrapped\\n    /// @return lpToken lp token of the pool\\n    /// @return isStableSwap is this a StableSwap pool. false = CryptoSwap\\n    function resolveWithLpToken(address poolAddress)\\n        external\\n        view\\n        returns (address[8] memory tokens, uint256 numTokens, address lpToken, bool isStableSwap);\\n\\n    /// @notice Get the lp token of a Curve pool\\n    /// @param poolAddress pool address to lookup\\n    function getLpToken(address poolAddress) external view returns (address);\\n\\n    /// @notice Get the reserves of a Curve pools' tokens\\n    /// @dev Actual balances length might differ from 8 and should be verified by the caller\\n    /// @param poolAddress pool address to lookup\\n    /// @return balances reserves of the pool tokens\\n    function getReservesInfo(address poolAddress) external view returns (uint256[8] memory balances);\\n}\\n\"\r\n    },\r\n    \"src/interfaces/vault/ILMPVaultRouter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n// Copyright (c) 2023 Tokemak Ops Ltd. All rights reserved.\\npragma solidity 0.8.17;\\n\\nimport { ILMPVault } from \\\"src/interfaces/vault/ILMPVault.sol\\\";\\nimport { ILMPVaultRouterBase } from \\\"src/interfaces/vault/ILMPVaultRouterBase.sol\\\";\\nimport { IAsyncSwapper, SwapParams } from \\\"src/interfaces/liquidation/IAsyncSwapper.sol\\\";\\n\\n/**\\n * @title ILMPVaultRouter Interface\\n * @notice Extends the ILMPVaultRouterBase with specific flows to save gas\\n */\\ninterface ILMPVaultRouter is ILMPVaultRouterBase {\\n    /**\\n     * ***************************   Deposit ********************************\\n     */\\n\\n    /**\\n     * @notice swap and deposit max assets to a LMPVault.\\n     * @dev The goal is to deposit whatever amount is received from the swap into the vault such as depositMax.\\n     * Balances are checked in the swapper function.\\n     * @param swapper The address of the swapper contract.\\n     * @param swapParams The swap parameters.\\n     * @param vault The ILMPVault contract.\\n     * @param to The address to receive the deposited amount.\\n     * @param minSharesOut The minimum amount of shares to be received as output.\\n     * @return sharesOut The amount of shares deposited into the vault.\\n     */\\n    function swapAndDepositToVault(\\n        address swapper,\\n        SwapParams memory swapParams,\\n        ILMPVault vault,\\n        address to,\\n        uint256 minSharesOut\\n    ) external returns (uint256 sharesOut);\\n\\n    /**\\n     * @notice deposit max assets to a LMPVault.\\n     * @param vault The LMPVault to deposit assets to.\\n     * @param to The destination of ownership shares.\\n     * @param minSharesOut The min amount of `vault` shares received by `to`.\\n     * @return sharesOut the amount of shares received by `to`.\\n     * @dev throws MinSharesError\\n     */\\n    function depositMax(ILMPVault vault, address to, uint256 minSharesOut) external returns (uint256 sharesOut);\\n\\n    /**\\n     * *************************   Withdraw   **********************************\\n     */\\n\\n    /**\\n     * @notice withdraw `amount` to a LMPVault.\\n     * @param fromVault The LMPVault to withdraw assets from.\\n     * @param toVault The LMPVault to deposit assets to.\\n     * @param to The destination of ownership shares.\\n     * @param amount The amount of assets to withdraw from fromVault.\\n     * @param maxSharesIn The max amount of fromVault shares withdrawn by caller.\\n     * @param minSharesOut The min amount of toVault shares received by `to`.\\n     * @return sharesOut the amount of shares received by `to`.\\n     * @dev throws MaxSharesError, MinSharesError\\n     */\\n    function withdrawToDeposit(\\n        ILMPVault fromVault,\\n        ILMPVault toVault,\\n        address to,\\n        uint256 amount,\\n        uint256 maxSharesIn,\\n        uint256 minSharesOut\\n    ) external returns (uint256 sharesOut);\\n\\n    /**\\n     * *************************   Redeem    ********************************\\n     */\\n\\n    /**\\n     * @notice redeem `shares` to a LMPVault.\\n     * @param fromVault The LMPVault to redeem shares from.\\n     * @param toVault The LMPVault to deposit assets to.\\n     * @param to The destination of ownership shares.\\n     * @param shares The amount of shares to redeem from fromVault.\\n     * @param minSharesOut The min amount of toVault shares received by `to`.\\n     * @return sharesOut the amount of shares received by `to`.\\n     * @dev throws MinAmountError, MinSharesError\\n     */\\n    function redeemToDeposit(\\n        ILMPVault fromVault,\\n        ILMPVault toVault,\\n        address to,\\n        uint256 shares,\\n        uint256 minSharesOut\\n    ) external returns (uint256 sharesOut);\\n\\n    /**\\n     * @notice redeem max shares to a LMPVault.\\n     * @param vault The LMPVault to redeem shares from.\\n     * @param to The destination of assets.\\n     * @param minAmountOut The min amount of assets received by `to`.\\n     * @return amountOut the amount of assets received by `to`.\\n     * @dev throws MinAmountError\\n     */\\n    function redeemMax(ILMPVault vault, address to, uint256 minAmountOut) external returns (uint256 amountOut);\\n}\\n\"\r\n    },\r\n    \"src/interfaces/security/ISystemSecurity.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n// Copyright (c) 2023 Tokemak Ops Ltd. All rights reserved.\\npragma solidity 0.8.17;\\n\\ninterface ISystemSecurity {\\n    /// @notice Get the number of NAV/share operations currently in progress\\n    /// @return Number of operations\\n    function navOpsInProgress() external view returns (uint256);\\n\\n    /// @notice Called at the start of any NAV/share changing operation\\n    function enterNavOperation() external;\\n\\n    /// @notice Called at the end of any NAV/share changing operation\\n    function exitNavOperation() external;\\n\\n    /// @notice Whether or not the system as a whole is paused\\n    function isSystemPaused() external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"src/interfaces/destinations/IDestinationRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n// Copyright (c) 2023 Tokemak Ops Ltd. All rights reserved.\\npragma solidity 0.8.17;\\n\\nimport { IDestinationAdapter } from \\\"src/interfaces/destinations/IDestinationAdapter.sol\\\";\\n\\ninterface IDestinationRegistry {\\n    event Register(bytes32[] indexed destinationTypes, address[] indexed targets);\\n    event Replace(bytes32[] indexed destinationTypes, address[] indexed targets);\\n    event Unregister(bytes32[] indexed destinationTypes);\\n\\n    event Whitelist(bytes32[] indexed destinationTypes);\\n    event RemoveFromWhitelist(bytes32[] indexed destinationTypes);\\n\\n    error InvalidAddress(address addr);\\n    error NotAllowedDestination();\\n    error DestinationAlreadySet();\\n\\n    /**\\n     * @notice Adds a new addresses of the given destination types\\n     * @dev Fails if trying to overwrite previous value of the same destination type\\n     * @param destinationTypes Ones from the destination type whitelist\\n     * @param targets addresses of the deployed DestinationAdapters, cannot be 0\\n     */\\n    function register(bytes32[] calldata destinationTypes, address[] calldata targets) external;\\n\\n    /**\\n     * @notice Replaces an addresses of the given destination types\\n     * @dev Fails if given destination type was not set previously\\n     * @param destinationTypes Ones from the destination type whitelist\\n     * @param targets addresses of the deployed DestinationAdapters, cannot be 0\\n     */\\n    function replace(bytes32[] calldata destinationTypes, address[] calldata targets) external;\\n\\n    /**\\n     * @notice Removes an addresses of the given pre-registered destination types\\n     * @param destinationTypes Ones from the destination types whitelist\\n     */\\n    function unregister(bytes32[] calldata destinationTypes) external;\\n\\n    /**\\n     * @notice Gives an address of the given destination type\\n     * @dev Should revert on missing destination\\n     * @param destination One from the destination type whitelist\\n     */\\n    function getAdapter(bytes32 destination) external returns (IDestinationAdapter);\\n\\n    /**\\n     * @notice Adds given destination types to the whitelist\\n     * @param destinationTypes Types to whitelist\\n     */\\n    function addToWhitelist(bytes32[] calldata destinationTypes) external;\\n\\n    /**\\n     * @notice Removes given pre-whitelisted destination types\\n     * @param destinationTypes Ones from the destination type whitelist\\n     */\\n    function removeFromWhitelist(bytes32[] calldata destinationTypes) external;\\n\\n    /**\\n     * @notice Checks if the given destination type is whitelisted\\n     * @param destinationType Type to verify\\n     */\\n    function isWhitelistedDestination(bytes32 destinationType) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"src/interfaces/oracles/IRootPriceOracle.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n// Copyright (c) 2023 Tokemak Ops Ltd. All rights reserved.\\n\\npragma solidity 0.8.17;\\n\\n/// @notice Retrieve a price for any token used in the system\\ninterface IRootPriceOracle {\\n    /// @notice Returns a fair price for the provided token in ETH\\n    /// @param token token to get the price of\\n    /// @return price the price of the token in ETH\\n    function getPriceInEth(address token) external returns (uint256 price);\\n\\n    /// @notice Returns a spot price for the provided token in ETH, utilizing specified liquidity pool\\n    /// @param token token to get the spot price of\\n    /// @param pool liquidity pool to be used for price determination\\n    /// @return price the spot price of the token in ETH based on the provided pool\\n    function getSpotPriceInEth(address token, address pool) external returns (uint256);\\n\\n    /// @notice Returns a price for base token in quote token.\\n    /// @dev Requires both tokens to be registered.\\n    /// @param base Address of base token.\\n    /// @param quote Address of quote token.\\n    /// @return price Price of the base token in quote token.\\n    function getPriceInQuote(address base, address quote) external returns (uint256 price);\\n\\n    /// @notice Retrieve the price of LP token based on the reserves\\n    /// @param lpToken LP token to get the price of\\n    /// @param pool liquidity pool to be used for price determination\\n    /// @param quoteToken token to quote the price in\\n    function getRangePricesLP(\\n        address lpToken,\\n        address pool,\\n        address quoteToken\\n    ) external returns (uint256 spotPriceInQuote, uint256 safePriceInQuote, bool isSpotSafe);\\n\\n    /// @notice Returns floor or ceiling price of the supplied lp token in terms of requested quote.\\n    /// @param pool Address of pool to get spot pricing from.\\n    /// @param lpToken Address of the lp token to price.\\n    /// @param inQuote Address of desired quote token.\\n    /// @param ceiling Bool indicating whether to get floor or ceiling price.\\n    /// @return floorOrCeilingPerLpToken Floor or ceiling price of the lp token.\\n    function getFloorCeilingPrice(\\n        address pool,\\n        address lpToken,\\n        address inQuote,\\n        bool ceiling\\n    ) external returns (uint256 floorOrCeilingPerLpToken);\\n\\n    function getFloorPrice(address, address, address) external returns (uint256 price);\\n\\n    function getCeilingPrice(address, address, address) external returns (uint256 price);\\n}\\n\"\r\n    },\r\n    \"src/interfaces/vault/IDestinationVaultRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n// Copyright (c) 2023 Tokemak Ops Ltd. All rights reserved.\\npragma solidity 0.8.17;\\n\\nimport { IDestinationVaultFactory } from \\\"src/interfaces/vault/IDestinationVaultFactory.sol\\\";\\n\\n/// @notice Tracks valid Destination Vaults for the system\\ninterface IDestinationVaultRegistry {\\n    /// @notice Determines if a given address is a valid Destination Vault in the system\\n    /// @param destinationVault address to check\\n    /// @return True if vault is registered\\n    function isRegistered(address destinationVault) external view returns (bool);\\n\\n    /// @notice Registers a new Destination Vault\\n    /// @dev Should be locked down to only a factory\\n    /// @param newDestinationVault Address of the new vault\\n    function register(address newDestinationVault) external;\\n\\n    /// @notice Checks if an address is a valid Destination Vault and reverts if not\\n    /// @param destinationVault Destination Vault address to checked\\n    function verifyIsRegistered(address destinationVault) external view;\\n\\n    /// @notice Returns a list of all registered vaults\\n    function listVaults() external view returns (address[] memory);\\n\\n    /// @notice Factory that is allowed to create and registry Destination Vaults\\n    function factory() external view returns (IDestinationVaultFactory);\\n}\\n\"\r\n    },\r\n    \"src/interfaces/stats/IStatsCalculatorRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n// Copyright (c) 2023 Tokemak Ops Ltd. All rights reserved.\\npragma solidity 0.8.17;\\n\\nimport { IStatsCalculator } from \\\"src/interfaces/stats/IStatsCalculator.sol\\\";\\n\\n/// @notice Track stat calculators for this instance of the system\\ninterface IStatsCalculatorRegistry {\\n    /// @notice Get a registered calculator\\n    /// @dev Should revert if missing\\n    /// @param aprId key of the calculator to get\\n    /// @return calculator instance of the calculator\\n    function getCalculator(bytes32 aprId) external view returns (IStatsCalculator calculator);\\n\\n    /// @notice Register a new stats calculator\\n    /// @param calculator address of the calculator\\n    function register(address calculator) external;\\n}\\n\"\r\n    },\r\n    \"src/interfaces/liquidation/IAsyncSwapperRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n// Copyright (c) 2023 Tokemak Ops Ltd. All rights reserved.\\npragma solidity 0.8.17;\\n\\ninterface IAsyncSwapperRegistry {\\n    event SwapperAdded(address indexed item);\\n    event SwapperRemoved(address indexed item);\\n\\n    /// @notice Registers an item\\n    /// @param item Item address to be added\\n    function register(address item) external;\\n\\n    /// @notice Removes item registration\\n    /// @param item Item address to be removed\\n    function unregister(address item) external;\\n\\n    /// @notice Returns a list of all registered items\\n    function list() external view returns (address[] memory);\\n\\n    /// @notice Checks if an address is a valid item\\n    /// @param item Item address to be checked\\n    function isRegistered(address item) external view returns (bool);\\n\\n    /// @notice Checks if an address is a valid swapper and reverts if not\\n    /// @param item Swapper address to be checked\\n    function verifyIsRegistered(address item) external view;\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"src/interfaces/stats/IIncentivesPricingStats.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n// Copyright (c) 2023 Tokemak Ops Ltd. All rights reserved.\\npragma solidity 0.8.17;\\n\\n/// @title EWMA pricing for incentive tokens\\ninterface IIncentivesPricingStats {\\n    event TokenAdded(address indexed token);\\n    event TokenRemoved(address indexed token);\\n    event TokenSnapshot(\\n        address indexed token,\\n        uint40 lastSnapshot,\\n        uint256 fastFilterPrice,\\n        uint256 slowFilterPrice,\\n        uint256 initCount,\\n        bool initComplete\\n    );\\n\\n    error TokenAlreadyRegistered(address token);\\n    error TokenNotFound(address token);\\n    error IncentiveTokenPriceStale(address token);\\n    error TokenSnapshotNotReady(address token);\\n\\n    struct TokenSnapshotInfo {\\n        uint40 lastSnapshot;\\n        bool _initComplete;\\n        uint8 _initCount;\\n        uint256 _initAcc;\\n        uint256 fastFilterPrice;\\n        uint256 slowFilterPrice;\\n    }\\n\\n    /// @notice add a token to snapshot\\n    /// @dev the token must be configured in the RootPriceOracle before adding here\\n    /// @param token the address of the token to add\\n    function setRegisteredToken(address token) external;\\n\\n    /// @notice remove a token from being snapshot\\n    /// @param token the address of the token to remove\\n    function removeRegisteredToken(address token) external;\\n\\n    /// @notice get the addresses for all currently registered tokens\\n    /// @return tokens all of the registered token addresses\\n    function getRegisteredTokens() external view returns (address[] memory tokens);\\n\\n    /// @notice get all of the registered tokens with the latest snapshot info\\n    /// @return tokenAddresses token addresses in the same order as info\\n    /// @return info a list of snapshot info for the tokens\\n    function getTokenPricingInfo()\\n        external\\n        view\\n        returns (address[] memory tokenAddresses, TokenSnapshotInfo[] memory info);\\n\\n    /// @notice update the snapshot for the specified tokens\\n    /// @dev if a token is not ready to be snapshot the entire call will fail\\n    function snapshot(address[] calldata tokensToSnapshot) external;\\n\\n    /// @notice get the latest prices for an incentive token. Reverts if token is not registered\\n    /// @return fastPrice the price based on the faster filter (weighted toward current prices)\\n    /// @return slowPrice the price based on the slower filter (weighted toward older prices, relative to fast)\\n    function getPrice(address token, uint40 staleCheck) external view returns (uint256 fastPrice, uint256 slowPrice);\\n\\n    /// @notice get the latest prices for an incentive token or zero if the token is not registered\\n    /// @return fastPrice the price based on the faster filter (weighted toward current prices)\\n    /// @return slowPrice the price based on the slower filter (weighted toward older prices, relative to fast)\\n    function getPriceOrZero(\\n        address token,\\n        uint40 staleCheck\\n    ) external view returns (uint256 fastPrice, uint256 slowPrice);\\n}\\n\"\r\n    },\r\n    \"src/vault/libs/LMPDebt.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n// Copyright (c) 2023 Tokemak Ops Ltd. All rights reserved.\\n\\npragma solidity 0.8.17;\\n\\nimport { Errors } from \\\"src/utils/Errors.sol\\\";\\nimport { LibAdapter } from \\\"src/libs/LibAdapter.sol\\\";\\nimport { IDestinationVault } from \\\"src/interfaces/vault/IDestinationVault.sol\\\";\\nimport { Math } from \\\"openzeppelin-contracts/utils/math/Math.sol\\\";\\nimport { EnumerableSet } from \\\"openzeppelin-contracts/utils/structs/EnumerableSet.sol\\\";\\nimport { IStrategy } from \\\"src/interfaces/strategy/IStrategy.sol\\\";\\nimport { SafeERC20 } from \\\"openzeppelin-contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport { IERC20Metadata as IERC20 } from \\\"openzeppelin-contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport { ISystemRegistry } from \\\"src/interfaces/ISystemRegistry.sol\\\";\\nimport { IDestinationVaultRegistry } from \\\"src/interfaces/vault/IDestinationVaultRegistry.sol\\\";\\nimport { IERC3156FlashBorrower } from \\\"openzeppelin-contracts/interfaces/IERC3156FlashBorrower.sol\\\";\\nimport { ILMPStrategy } from \\\"src/interfaces/strategy/ILMPStrategy.sol\\\";\\nimport { StructuredLinkedList } from \\\"src/strategy/StructuredLinkedList.sol\\\";\\nimport { WithdrawalQueue } from \\\"src/strategy/WithdrawalQueue.sol\\\";\\nimport { ILMPVault } from \\\"src/interfaces/vault/ILMPVault.sol\\\";\\nimport { IMainRewarder } from \\\"src/interfaces/rewarders/IMainRewarder.sol\\\";\\nimport { EnumerableSet } from \\\"openzeppelin-contracts/utils/structs/EnumerableSet.sol\\\";\\n\\nlibrary LMPDebt {\\n    using Math for uint256;\\n    using SafeERC20 for IERC20;\\n    using WithdrawalQueue for StructuredLinkedList.List;\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    /// @notice Max time a cached debt report can be used\\n    uint256 public constant MAX_DEBT_REPORT_AGE_SECONDS = 1 days;\\n\\n    error VaultShutdown();\\n    error WithdrawShareCalcInvalid(uint256 currentShares, uint256 cachedShares);\\n    error RebalanceDestinationsMatch(address destinationVault);\\n    error RebalanceFailed(string message);\\n    error InvalidPrices();\\n    error InvalidTotalAssetPurpose();\\n    error InvalidDestination(address destination);\\n    error TooFewAssets(uint256 requested, uint256 actual);\\n\\n    event DestinationDebtReporting(\\n        address destination, LMPDebt.IdleDebtUpdates debtInfo, uint256 claimed, uint256 claimGasUsed\\n    );\\n\\n    struct DestinationInfo {\\n        /// @notice Current underlying value at the destination vault\\n        /// @dev Used for calculating totalDebt, mid point of min and max\\n        uint256 cachedDebtValue;\\n        /// @notice Current minimum underlying value at the destination vault\\n        /// @dev Used for calculating totalDebt during withdrawal\\n        uint256 cachedMinDebtValue;\\n        /// @notice Current maximum underlying value at the destination vault\\n        /// @dev Used for calculating totalDebt of the deposit\\n        uint256 cachedMaxDebtValue;\\n        /// @notice Last block timestamp this info was updated\\n        uint256 lastReport;\\n        /// @notice How many shares of the destination vault we owned at last report\\n        uint256 ownedShares;\\n    }\\n\\n    struct IdleDebtUpdates {\\n        bool pricesWereSafe;\\n        uint256 totalIdleDecrease;\\n        uint256 totalIdleIncrease;\\n        uint256 totalDebtIncrease;\\n        uint256 totalDebtDecrease;\\n        uint256 totalMinDebtIncrease;\\n        uint256 totalMinDebtDecrease;\\n        uint256 totalMaxDebtIncrease;\\n        uint256 totalMaxDebtDecrease;\\n    }\\n\\n    struct RebalanceOutParams {\\n        /// Address that will received the withdrawn underlyer\\n        address receiver;\\n        /// The \\\"out\\\" destination vault\\n        address destinationOut;\\n        /// The amount of tokenOut that will be withdrawn\\n        uint256 amountOut;\\n        /// The underlyer for destinationOut\\n        address tokenOut;\\n        IERC20 _baseAsset;\\n        bool _shutdown;\\n    }\\n\\n    /// @dev In memory struct only for managing vars in _withdraw\\n    struct WithdrawInfo {\\n        uint256 currentIdle;\\n        uint256 assetsFromIdle;\\n        uint256 totalAssetsToPull;\\n        uint256 assetsToPull;\\n        uint256 assetsPulled;\\n        uint256 idleIncrease;\\n        uint256 debtDecrease;\\n        uint256 debtMinDecrease;\\n        uint256 debtMaxDecrease;\\n        uint256 totalMinDebt;\\n        uint256 destinationRound;\\n        uint256 lastRoundSlippage;\\n        uint256 expectedAssets;\\n    }\\n\\n    struct FlashRebalanceParams {\\n        uint256 totalIdle;\\n        uint256 totalDebt;\\n        IERC20 baseAsset;\\n        bool shutdown;\\n    }\\n\\n    struct FlashResultInfo {\\n        uint256 tokenInBalanceBefore;\\n        uint256 tokenInBalanceAfter;\\n        bytes32 flashResult;\\n    }\\n\\n    function flashRebalance(\\n        DestinationInfo storage destInfoOut,\\n        DestinationInfo storage destInfoIn,\\n        IERC3156FlashBorrower receiver,\\n        IStrategy.RebalanceParams memory params,\\n        IStrategy.SummaryStats memory destSummaryOut,\\n        ILMPStrategy lmpStrategy,\\n        FlashRebalanceParams memory flashParams,\\n        bytes calldata data\\n    ) external returns (IdleDebtUpdates memory result) {\\n        // Handle decrease (shares going \\\"Out\\\", cashing in shares and sending underlying back to swapper)\\n        // If the tokenOut is _asset we assume they are taking idle\\n        // which is already in the contract\\n        result = _handleRebalanceOut(\\n            LMPDebt.RebalanceOutParams({\\n                receiver: address(receiver),\\n                destinationOut: params.destinationOut,\\n                amountOut: params.amountOut,\\n                tokenOut: params.tokenOut,\\n                _baseAsset: flashParams.baseAsset,\\n                _shutdown: flashParams.shutdown\\n            }),\\n            destInfoOut\\n        );\\n\\n        if (!result.pricesWereSafe) {\\n            revert InvalidPrices();\\n        }\\n\\n        // Handle increase (shares coming \\\"In\\\", getting underlying from the swapper and trading for new shares)\\n        if (params.amountIn > 0) {\\n            FlashResultInfo memory flashResultInfo;\\n            // get \\\"before\\\" counts\\n            flashResultInfo.tokenInBalanceBefore = IERC20(params.tokenIn).balanceOf(address(this));\\n\\n            // Give control back to the solver so they can make use of the \\\"out\\\" assets\\n            // and get our \\\"in\\\" asset\\n            flashResultInfo.flashResult = receiver.onFlashLoan(msg.sender, params.tokenIn, params.amountIn, 0, data);\\n\\n            // We assume the solver will send us the assets\\n            flashResultInfo.tokenInBalanceAfter = IERC20(params.tokenIn).balanceOf(address(this));\\n\\n            // Make sure the call was successful and verify we have at least the assets we think\\n            // we were getting\\n            if (\\n                flashResultInfo.flashResult != keccak256(\\\"ERC3156FlashBorrower.onFlashLoan\\\")\\n                    || flashResultInfo.tokenInBalanceAfter < flashResultInfo.tokenInBalanceBefore + params.amountIn\\n            ) {\\n                revert Errors.FlashLoanFailed(params.tokenIn, params.amountIn);\\n            }\\n\\n            {\\n                // make sure we have a valid path\\n                (bool success, string memory message) = lmpStrategy.verifyRebalance(params, destSummaryOut);\\n                if (!success) {\\n                    revert RebalanceFailed(message);\\n                }\\n            }\\n\\n            if (params.tokenIn != address(flashParams.baseAsset)) {\\n                IdleDebtUpdates memory inDebtResult = _handleRebalanceIn(\\n                    destInfoIn,\\n                    IDestinationVault(params.destinationIn),\\n                    params.tokenIn,\\n                    flashResultInfo.tokenInBalanceAfter\\n                );\\n                if (!inDebtResult.pricesWereSafe) {\\n                    revert InvalidPrices();\\n                }\\n                result.totalDebtDecrease += inDebtResult.totalDebtDecrease;\\n                result.totalDebtIncrease += inDebtResult.totalDebtIncrease;\\n                result.totalMinDebtDecrease += inDebtResult.totalMinDebtDecrease;\\n                result.totalMinDebtIncrease += inDebtResult.totalMinDebtIncrease;\\n                result.totalMaxDebtDecrease += inDebtResult.totalMaxDebtDecrease;\\n                result.totalMaxDebtIncrease += inDebtResult.totalMaxDebtIncrease;\\n            } else {\\n                result.totalIdleIncrease += flashResultInfo.tokenInBalanceAfter - flashResultInfo.tokenInBalanceBefore;\\n            }\\n        }\\n    }\\n\\n    /// @notice Perform deposit and debt info update for the \\\"in\\\" destination during a rebalance\\n    /// @dev This \\\"in\\\" function performs less validations than its \\\"out\\\" version\\n    /// @param dvIn The \\\"in\\\" destination vault\\n    /// @param tokenIn The underlyer for dvIn\\n    /// @param depositAmount The amount of tokenIn that will be deposited\\n    /// @return result Changes in debt values\\n    function handleRebalanceIn(\\n        DestinationInfo storage destInfo,\\n        IDestinationVault dvIn,\\n        address tokenIn,\\n        uint256 depositAmount\\n    ) external returns (IdleDebtUpdates memory result) {\\n        result = _handleRebalanceIn(destInfo, dvIn, tokenIn, depositAmount);\\n    }\\n\\n    /// @notice Perform deposit and debt info update for the \\\"in\\\" destination during a rebalance\\n    /// @dev This \\\"in\\\" function performs less validations than its \\\"out\\\" version\\n    /// @param dvIn The \\\"in\\\" destination vault\\n    /// @param tokenIn The underlyer for dvIn\\n    /// @param depositAmount The amount of tokenIn that will be deposited\\n    /// @return result Changes in debt values\\n    function _handleRebalanceIn(\\n        DestinationInfo storage destInfo,\\n        IDestinationVault dvIn,\\n        address tokenIn,\\n        uint256 depositAmount\\n    ) private returns (IdleDebtUpdates memory result) {\\n        LibAdapter._approve(IERC20(tokenIn), address(dvIn), depositAmount);\\n\\n        // Snapshot our current shares so we know how much to back out\\n        uint256 originalShareBal = dvIn.balanceOf(address(this));\\n\\n        // deposit to dv\\n        uint256 newShares = dvIn.depositUnderlying(depositAmount);\\n\\n        // Update the debt info snapshot\\n        result = _recalculateDestInfo(destInfo, dvIn, originalShareBal, originalShareBal + newShares);\\n    }\\n\\n    /**\\n     * @notice Perform withdraw and debt info update for the \\\"out\\\" destination during a rebalance\\n     * @dev This \\\"out\\\" function performs more validations and handles idle as opposed to \\\"in\\\" which does not\\n     *  debtDecrease The previous amount of debt destinationOut accounted for in totalDebt\\n     *  debtIncrease The current amount of debt destinationOut should account for in totalDebt\\n     *  idleDecrease Amount of baseAsset that was sent from the vault. > 0 only when tokenOut == baseAsset\\n     *  idleIncrease Amount of baseAsset that was claimed from Destination Vault\\n     * @param params Rebalance out params\\n     * @param destOutInfo The \\\"out\\\" destination vault info\\n     * @return assetChange debt and idle change data\\n     */\\n    function _handleRebalanceOut(\\n        RebalanceOutParams memory params,\\n        DestinationInfo storage destOutInfo\\n    ) private returns (IdleDebtUpdates memory assetChange) {\\n        // Handle decrease (shares going \\\"Out\\\", cashing in shares and sending underlying back to swapper)\\n        // If the tokenOut is _asset we assume they are taking idle\\n        // which is already in the contract\\n        if (params.amountOut > 0) {\\n            if (params.tokenOut != address(params._baseAsset)) {\\n                IDestinationVault dvOut = IDestinationVault(params.destinationOut);\\n\\n                // Snapshot our current shares so we know how much to back out\\n                uint256 originalShareBal = dvOut.balanceOf(address(this));\\n\\n                // Burning our shares will claim any pending baseAsset\\n                // rewards and send them to us.\\n                // Get our starting balance\\n                uint256 beforeBaseAssetBal = params._baseAsset.balanceOf(address(this));\\n\\n                // Withdraw underlying from the destination vault\\n                // Shares are sent directly to the flashRebalance receiver\\n                // slither-disable-next-line unused-return\\n                dvOut.withdrawUnderlying(params.amountOut, params.receiver);\\n\\n                // Update the debt info snapshot\\n                assetChange =\\n                    _recalculateDestInfo(destOutInfo, dvOut, originalShareBal, originalShareBal - params.amountOut);\\n\\n                // Capture any rewards we may have claimed as part of withdrawing\\n                assetChange.totalIdleIncrease = params._baseAsset.balanceOf(address(this)) - beforeBaseAssetBal;\\n            } else {\\n                // If we are shutdown then the only operations we should be performing are those that get\\n                // the base asset back to the vault. We shouldn't be sending out more\\n                if (params._shutdown) {\\n                    revert VaultShutdown();\\n                }\\n                // Working with idle baseAsset which should be in the vault already\\n                // Just send it out\\n                IERC20(params.tokenOut).safeTransfer(params.receiver, params.amountOut);\\n                assetChange.totalIdleDecrease = params.amountOut;\\n\\n                // We weren't dealing with any debt or pricing, just idle, so we can just mark\\n                // it as safe\\n                assetChange.pricesWereSafe = true;\\n            }\\n        }\\n    }\\n\\n    function recalculateDestInfo(\\n        DestinationInfo storage destInfo,\\n        IDestinationVault destVault,\\n        uint256 originalShares,\\n        uint256 currentShares\\n    ) external returns (IdleDebtUpdates memory result) {\\n        result = _recalculateDestInfo(destInfo, destVault, originalShares, currentShares);\\n    }\\n\\n    /// @dev Will not revert on unsafe prices. Up to the caller.\\n    function _recalculateDestInfo(\\n        DestinationInfo storage destInfo,\\n        IDestinationVault destVault,\\n        uint256 originalShares,\\n        uint256 currentShares\\n    ) private returns (IdleDebtUpdates memory result) {\\n        // TODO: Trace the use of this fn and ensure that every is handling is pricesWereSafe\\n\\n        // Figure out what to back out of our totalDebt number.\\n        // We could have had withdraws since the last snapshot which means our\\n        // cached currentDebt number should be decreased based on the remaining shares\\n        // totalDebt is decreased using the same proportion of shares method during withdrawals\\n        // so this should represent whatever is remaining.\\n\\n        // Prices are per LP token and whether or not the prices are safe to use\\n        // If they aren't safe then just continue and we'll get it on the next go around\\n        (uint256 spotPrice, uint256 safePrice, bool isSpotSafe) = destVault.getRangePricesLP();\\n\\n        // We won't update anything\\n        if (!isSpotSafe) {\\n            return result;\\n        }\\n\\n        // Calculate what we're backing out based on the original shares\\n        uint256 minPrice = spotPrice > safePrice ? safePrice : spotPrice;\\n        uint256 maxPrice = spotPrice > safePrice ? spotPrice : safePrice;\\n\\n        // If we previously had shares, calculate how much of our cached numbers\\n        // still remain as this will be deducted from the overall debt numbers\\n        // TODO: Evaluate whether to round these up so we don't accumulate small amounts\\n        // over time\\n        uint256 prevOwnedShares = destInfo.ownedShares;\\n        if (prevOwnedShares > 0) {\\n            result.totalDebtDecrease = (destInfo.cachedDebtValue * originalShares) / prevOwnedShares;\\n            result.totalMinDebtDecrease = (destInfo.cachedMinDebtValue * originalShares) / prevOwnedShares;\\n            result.totalMaxDebtDecrease = (destInfo.cachedMaxDebtValue * originalShares) / prevOwnedShares;\\n        }\\n\\n        // The overall debt value is the mid point of min and max\\n        uint256 div = 10 ** destVault.decimals();\\n        uint256 newDebtValue = (minPrice * currentShares + maxPrice * currentShares) / (div * 2);\\n\\n        result.pricesWereSafe = true;\\n        result.totalDebtIncrease = newDebtValue;\\n        result.totalMinDebtIncrease = minPrice * currentShares / div;\\n        result.totalMaxDebtIncrease = maxPrice * currentShares / div;\\n\\n        // Save our current new values\\n        destInfo.cachedDebtValue = newDebtValue;\\n        destInfo.cachedMinDebtValue = result.totalMinDebtIncrease;\\n        destInfo.cachedMaxDebtValue = result.totalMaxDebtIncrease;\\n        destInfo.lastReport = block.timestamp;\\n        destInfo.ownedShares = currentShares;\\n    }\\n\\n    function _totalAssetsTimeChecked(\\n        StructuredLinkedList.List storage debtReportQueue,\\n        mapping(address => LMPDebt.DestinationInfo) storage destinationInfo,\\n        ILMPVault.TotalAssetPurpose purpose\\n    ) external returns (uint256) {\\n        IDestinationVault destVault = IDestinationVault(debtReportQueue.peekHead());\\n        uint256 recalculatedTotalAssets = ILMPVault(address(this)).totalAssets(purpose);\\n        uint256 divisor = 10 ** ILMPVault(address(this)).decimals();\\n\\n        while (address(destVault) != address(0)) {\\n            uint256 lastReport = destinationInfo[address(destVault)].lastReport;\\n\\n            if (lastReport + MAX_DEBT_REPORT_AGE_SECONDS > block.timestamp) {\\n                // Its not stale\\n\\n                // This report is OK, we don't need to recalculate anything\\n                break;\\n            } else {\\n                // It is stale, recalculate\\n\\n                //slither-disable-next-line unused-return\\n                uint256 currentShares = destVault.balanceOf(address(this));\\n                uint256 staleDebt;\\n                uint256 extremePrice;\\n\\n                // Figure out exactly which price to use based on its purpose\\n                if (purpose == ILMPVault.TotalAssetPurpose.Deposit) {\\n                    // We use max value so that anything deposited is worth less\\n                    extremePrice = destVault.getUnderlyerCeilingPrice();\\n\\n                    // Round down. We are subtracting this value out of the total so some left\\n                    // behind just increases the value which is what we want\\n                    staleDebt = destinationInfo[address(destVault)].cachedMaxDebtValue.mulDiv(\\n                        currentShares, destinationInfo[address(destVault)].ownedShares, Math.Rounding.Down\\n                    );\\n                } else if (purpose == ILMPVault.TotalAssetPurpose.Withdraw) {\\n                    // We use min value so that we value the shares as worth less\\n                    extremePrice = destVault.getUnderlyerFloorPrice();\\n                    // Round up. We are subtracting this value out of the total so if we take a little\\n                    // extra it just decreases the value which is what we want\\n                    staleDebt = destinationInfo[address(destVault)].cachedMinDebtValue.mulDiv(\\n                        currentShares, destinationInfo[address(destVault)].ownedShares, Math.Rounding.Up\\n                    );\\n                } else {\\n                    revert InvalidTotalAssetPurpose();\\n                }\\n\\n                // Back out our stale debt, add in its new value\\n                // Our goal is to find the most conservative value in each situation. If the current\\n                // value we have represents that, then use it. Otherwise, use the new one.\\n                uint256 newValue = (currentShares * extremePrice) / divisor;\\n\\n                if (purpose == ILMPVault.TotalAssetPurpose.Deposit && staleDebt > newValue) {\\n                    newValue = staleDebt;\\n                } else if (purpose == ILMPVault.TotalAssetPurpose.Withdraw && staleDebt < newValue) {\\n                    newValue = staleDebt;\\n                }\\n\\n                recalculatedTotalAssets = recalculatedTotalAssets + newValue - staleDebt;\\n            }\\n\\n            destVault = IDestinationVault(debtReportQueue.getAdjacent(address(destVault), true));\\n        }\\n\\n        return recalculatedTotalAssets;\\n    }\\n\\n    function _updateDebtReporting(\\n        StructuredLinkedList.List storage debtReportQueue,\\n        EnumerableSet.AddressSet storage _destinations,\\n        mapping(address => LMPDebt.DestinationInfo) storage destinationInfo,\\n        uint256 numToProcess\\n    ) external returns (IdleDebtUpdates memory result) {\\n        // For destinations we can't process atm due to price discrepancies\\n        address[] memory reprocesses = new address[](numToProcess);\\n        uint256 reprocessCount = 0;\\n\\n        numToProcess = Math.min(numToProcess, debtReportQueue.sizeOf());\\n\\n        for (uint256 i = 0; i < numToProcess; ++i) {\\n            IDestinationVault destVault = IDestinationVault(debtReportQueue.popHead());\\n\\n            if (!_destinations.contains(address(destVault))) {\\n                revert InvalidDestination(address(destVault));\\n            }\\n\\n            // Get the reward value we've earned. DV rewards are always in terms of base asset\\n            // We track the gas used purely for off-chain stats purposes\\n            // Main rewarder on DV's store the earned and liquidated rewards\\n            // Extra rewarders are disabled at the DV level\\n            uint256 claimGasUsed = gasleft();\\n            uint256 beforeBaseAsset = IERC20(ILMPVault(address(this)).asset()).balanceOf(address(this));\\n            IMainRewarder(destVault.rewarder()).getReward(address(this), false);\\n            uint256 claimedRewardValue =\\n                IERC20(ILMPVault(address(this)).asset()).balanceOf(address(this)) - beforeBaseAsset;\\n            result.totalIdleIncrease += claimedRewardValue;\\n\\n            // Recalculate the debt info figuring out the change in\\n            // total debt value we can roll up later\\n            uint256 currentShareBalance = destVault.balanceOf(address(this));\\n\\n            LMPDebt.IdleDebtUpdates memory debtResult = _recalculateDestInfo(\\n                destinationInfo[address(destVault)], destVault, currentShareBalance, currentShareBalance\\n            );\\n\\n            // If they aren't safe then just continue and we'll get it on the next go around\\n            // No updates were made in recalculateDestInfo if prices weren't safe\\n            if (!debtResult.pricesWereSafe) {\\n                reprocesses[reprocessCount] = address(destVault);\\n                ++reprocessCount;\\n                continue;\\n            }\\n\\n            result.totalDebtDecrease += debtResult.totalDebtDecrease;\\n            result.totalDebtIncrease += debtResult.totalDebtIncrease;\\n            result.totalMinDebtDecrease += debtResult.totalMinDebtDecrease;\\n            result.totalMinDebtIncrease += debtResult.totalMinDebtIncrease;\\n            result.totalMaxDebtDecrease += debtResult.totalMaxDebtDecrease;\\n            result.totalMaxDebtIncrease += debtResult.totalMaxDebtIncrease;\\n\\n            // If we no longer have shares, then there's no reason to continue reporting on the destination.\\n            // The strategy will only call for the info if its moving \\\"out\\\" of the destination\\n            // and that will only happen if we have shares.\\n            // A rebalance where we move \\\"in\\\" to the position will refresh the data at that time\\n            if (currentShareBalance > 0) {\\n                debtReportQueue.addToTail(address(destVault));\\n            }\\n\\n            claimGasUsed -= gasleft();\\n\\n            emit DestinationDebtReporting(address(destVault), debtResult, claimedRewardValue, claimGasUsed);\\n        }\\n\\n        // Add the destinations that had bad prices back to the queue in their original order\\n        if (reprocessCount > 0) {\\n            for (uint256 i = reprocessCount - 1; i >= 0; --i) {\\n                debtReportQueue.addToHead(address(reprocesses[i]));\\n            }\\n        }\\n    }\\n\\n    function _initiateWithdrawInfo(\\n        uint256 assets,\\n        ILMPVault.AssetBreakdown storage assetBreakdown\\n    ) private view returns (WithdrawInfo memory info) {\\n        uint256 idle = assetBreakdown.totalIdle;\\n        info = WithdrawInfo({\\n            currentIdle: idle,\\n            assetsFromIdle: assets >= idle ? idle : assets,\\n            totalAssetsToPull: 0,\\n            assetsToPull: 0,\\n            assetsPulled: 0,\\n            idleIncrease: 0,\\n            debtDecrease: 0,\\n            debtMinDecrease: 0,\\n            debtMaxDecrease: 0,\\n            totalMinDebt: assetBreakdown.totalDebtMin,\\n            destinationRound: 0,\\n            lastRoundSlippage: 0,\\n            expectedAssets: 0\\n        });\\n\\n        info.totalAssetsToPull = assets - info.assetsFromIdle;\\n        info.assetsToPull = assets - info.assetsFromIdle;\\n\\n        if (info.totalAssetsToPull > info.totalMinDebt) {\\n            revert TooFewAssets(assets, info.currentIdle + info.totalMinDebt);\\n        }\\n    }\\n\\n    function withdraw(\\n        uint256 assets,\\n        uint256 applicableTotalAssets,\\n        ILMPVault.AssetBreakdown storage assetBreakdown,\\n        StructuredLinkedList.List storage withdrawalQueue,\\n        mapping(address => LMPDebt.DestinationInfo) storage destinationInfo\\n    ) external returns (uint256 actualAssets, uint256 actualShares, uint256 debtBurned) {\\n        WithdrawInfo memory info = _initiateWithdrawInfo(assets, assetBreakdown);\\n\\n        // If not enough funds in idle, then pull what we need from the destinations in\\n        // the while loop below\\n\\n        // This flow is not bounded by a set number of shares. The user has requested X assets\\n        // and a variable number of shares to burn so we don't have easy break out points like we do\\n        // during redeem (like using debt burned). When we get slippage here and don't meet the requested assets\\n        // we need to keep going if we can. This is tricky if we consider that (most of) our destinations are\\n        // LP positions and we'll be swapping assets, so we can expect some slippage. Even\\n        // if our minDebtValue numbers are up to date and perfectly accurate slippage could ensure we\\n        // are always receiving less than we expect/calculate and we never hit the requested assets\\n        // even though the owner would have shares to cover it. Under normal/expected conditions, our\\n        // minDebtValue is lower than actual and we expect overall value to be going up, so we burn a tad\\n        // more than we should and receive a tad more than we expect. This should cover us. However,\\n        // in other conditions we have to be sure we aren't endlessly trying to approach 0 so we are tracking\\n        // the slippage we received on the last pull, repricing, and applying an increasing multiplier until we either\\n        // pull enough to cover or pull them all and/or move to the next destination.\\n\\n        uint256 dvSharesToBurn;\\n        while (info.assetsToPull > 0) {\\n            IDestinationVault destVault = IDestinationVault(withdrawalQueue.peekHead());\\n            if (address(destVault) == address(0)) {\\n                // TODO: This may be some NULL value too, check the underlying library\\n                break;\\n            }\\n\\n            uint256 dvShares = destVault.balanceOf(address(this));\\n            {\\n                uint256 dvSharesValue;\\n                if (info.destinationRound == 0) {\\n                    // First time pulling\\n\\n                    // We use the min debt value here because its a withdrawal and we're trying to cover an amount\\n                    // of assets. Undervaluing the shares may mean we pull more but given that we expect slippage\\n                    // that is desirable.\\n                    dvSharesValue = destinationInfo[address(destVault)].cachedMinDebtValue * dvShares\\n                        / destinationInfo[address(destVault)].ownedShares;\\n                } else {\\n                    // When we've pulled from this destination before, i.e. destinationRound > 0, then we\\n                    // know a more accurate exchange rate and its worse than we were expecting.\\n                    // We even will pad it a bit as we want to account for any additional slippage we\\n                    // may receive by say being farther down an AMM curve.\\n\\n                    // dvSharesToBurn is the last value we used when pulling from this destination\\n                    // info.expectedAssets is how much we expected to get on that last pull\\n                    // info.expectedAssets - info.lastRoundSlippage is how much we actually received\\n\\n                    uint256 paddedSlippage = info.lastRoundSlippage * (info.destinationRound + 10_000) / 10_000;\\n\\n                    if (paddedSlippage < info.expectedAssets) {\\n                        dvSharesValue = (info.expectedAssets - paddedSlippage) * dvShares / dvSharesToBurn;\\n                    } else {\\n                        // This will just mean we pull all shares\\n                        dvSharesValue = 0;\\n                    }\\n                }\\n\\n                if (dvSharesValue > info.assetsToPull) {\\n                    dvSharesToBurn = (dvShares * info.assetsToPull) / dvSharesValue;\\n                    // Only need to set it here because the only time we'll use it is if\\n                    // we don't exhaust all shares and have to try the destination again\\n                    info.expectedAssets = info.assetsToPull;\\n                } else {\\n                    dvSharesToBurn = dvShares;\\n                }\\n            }\\n\\n            // Destination Vaults always burn the exact amount we instruct them to\\n\\n            uint256 pulledAssets = destVault.withdrawBaseAsset(dvSharesToBurn, address(this));\\n\\n            info.assetsPulled += pulledAssets;\\n\\n            // Calculate the totalDebt we'll need to remove based on the shares we're burning\\n            // We're rounding up here so take care when actually applying to totalDebt\\n            // The assets we calculated to pull are from the minDebt number we track so\\n            // we'll use that one to ensure we properly account for slippage (the `pulled` var below)\\n            // The other two debt numbers we just need to keep up to date.\\n            uint256 debtMinDecrease = destinationInfo[address(destVault)].cachedMinDebtValue.mulDiv(\\n                dvSharesToBurn, destinationInfo[address(destVault)].ownedShares, Math.Rounding.Up\\n            );\\n            info.debtMinDecrease += debtMinDecrease;\\n\\n            info.debtDecrease += destinationInfo[address(destVault)].cachedDebtValue.mulDiv(\\n                dvSharesToBurn, destinationInfo[address(destVault)].ownedShares, Math.Rounding.Up\\n            );\\n            info.debtMaxDecrease += destinationInfo[address(destVault)].cachedMaxDebtValue.mulDiv(\\n                dvSharesToBurn, destinationInfo[address(destVault)].ownedShares, Math.Rounding.Up\\n            );\\n\\n            // If we've exhausted all shares we can remove the withdrawal from the queue\\n            // We need to leave it in the debt report queue though so that our destination specific\\n            // debt tracking values can be updated\\n            if (dvShares == dvSharesToBurn) {\\n                withdrawalQueue.popAddress(address(destVault));\\n                info.destinationRound = 0;\\n                info.lastRoundSlippage = 0;\\n            } else {\\n                // If we didn't burn all the shares and we received enough to cover our\\n                // expected that means we'll break out below as we've hit our target\\n                unchecked {\\n                    if (pulledAssets < info.expectedAssets) {\\n                        info.lastRoundSlippage = info.expectedAssets - pulledAssets;\\n                        if (info.destinationRound == 0) {\\n                            info.destinationRound = 100;\\n                        } else {\\n                            info.destinationRound *= 2;\\n                        }\\n                    }\\n                }\\n            }\\n\\n            // It's possible we'll get back more assets than we anticipate from a swap\\n            // so if we do, throw it in idle and stop processing. You don't get more than we've calculated\\n            if (info.assetsPulled >= info.totalAssetsToPull) {\\n                info.idleIncrease += info.assetsPulled - info.totalAssetsToPull;\\n                info.assetsPulled = info.totalAssetsToPull;\\n                break;\\n            }\\n\\n            info.assetsToPull -= pulledAssets;\\n\\n            // // Any deficiency in the amount we received is slippage. debtDecrease is what we expected\\n            // // to receive. If we received any extra, that's great we'll roll it forward so we burn\\n            // // less on the next loop.\\n            // uint256 pulled = Math.max(debtMinDecrease, pulledAssets);\\n            // if (pulled >= info.assetsToPull) {\\n            //     // We either have enough assets, or we've burned the max debt we're allowed\\n            //     info.assetsToPull = 0;\\n            //     break;\\n            // } else {\\n            //     info.assetsToPull -= pulled;\\n            // }\\n        }\\n\\n        // info.assetsToPull isn't safe to use past this point.\\n        // It may or may not be accurate from the previous loop\\n\\n        debtBurned = info.assetsFromIdle + info.debtMinDecrease;\\n        actualAssets = info.assetsFromIdle + info.assetsPulled;\\n\\n        if (actualAssets < assets) {\\n            revert TooFewAssets(assets, actualAssets);\\n        }\\n\\n        actualShares = ILMPVault(address(this)).convertToShares(\\n            Math.max(actualAssets, debtBurned),\\n            applicableTotalAssets,\\n            ILMPVault(address(this)).totalSupply(),\\n            Math.Rounding.Up\\n        );\\n\\n        // Subtract what's taken out of idle from totalIdle\\n        // We may also have some increase to account for it we over pulled\\n        // or received better execution than we were anticipating\\n        // slither-disable-next-line events-maths\\n        assetBreakdown.totalIdle = info.currentIdle + info.idleIncrease - info.assetsFromIdle;\\n\\n        // Save off our various debt numbers\\n        if (info.debtDecrease > assetBreakdown.totalDebt) {\\n            assetBreakdown.totalDebt = 0;\\n        } else {\\n            assetBreakdown.totalDebt -= info.debtDecrease;\\n        }\\n\\n        if (info.debtMinDecrease > info.totalMinDebt) {\\n            assetBreakdown.totalDebtMin = 0;\\n        } else {\\n            assetBreakdown.totalDebtMin -= info.debtMinDecrease;\\n        }\\n\\n        if (info.debtMaxDecrease > assetBreakdown.totalDebtMax) {\\n            assetBreakdown.totalDebtMax = 0;\\n        } else {\\n            assetBreakdown.totalDebtMax -= info.debtMaxDecrease;\\n        }\\n    }\\n\\n    /// @notice Perform a removal of assets via the redeem path where the shares are the limiting factor.\\n    /// This means we break out whenever we reach either `assets` retrieved or debt value equivalent to `assets` burned\\n    function redeem(\\n        uint256 assets,\\n        uint256 applicableTotalAssets,\\n        ILMPVault.AssetBreakdown storage assetBreakdown,\\n        StructuredLinkedList.List storage withdrawalQueue,\\n        mapping(address => LMPDebt.DestinationInfo) storage destinationInfo\\n    ) external returns (uint256 actualAssets, uint256 actualShares, uint256 debtBurned) {\\n        WithdrawInfo memory info = _initiateWithdrawInfo(assets, assetBreakdown);\\n\\n        // If not enough funds in idle, then pull what we need from destinations\\n        while (info.assetsToPull > 0) {\\n            IDestinationVault destVault = IDestinationVault(withdrawalQueue.peekHead());\\n            if (address(destVault) == address(0)) {\\n                // TODO: This may be some NULL value too, check the underlying library\\n                break;\\n            }\\n\\n            uint256 dvShares = destVault.balanceOf(address(this));\\n            uint256 dvSharesToBurn = dvShares;\\n            {\\n                // Valuing these shares higher, rounding up, will result in us burning less of them\\n                // in the event we don't burn all of them. Good thing.\\n                uint256 dvSharesValue = destinationInfo[address(destVault)].cachedMinDebtValue.mulDiv(\\n                    dvSharesToBurn, destinationInfo[address(destVault)].ownedShares, Math.Rounding.Up\\n                );\\n\\n                // If the dv shares we own are worth more than we need, limit the shares to burn\\n                // Any extra we get will be dropped into idle\\n                if (dvSharesValue > info.assetsToPull) {\\n                    uint256 limitedShares = (dvSharesToBurn * info.assetsToPull) / dvSharesValue;\\n\\n                    // Final set for the actual shares we'll burn later\\n                    dvSharesToBurn = limitedShares;\\n                }\\n            }\\n\\n            // Destination Vaults always burn the exact amount we instruct them to\\n\\n            uint256 pulledAssets = destVault.withdrawBaseAsset(dvSharesToBurn, address(this));\\n\\n            info.assetsPulled += pulledAssets;\\n\\n            // Calculate the totalDebt we'll need to remove based on the shares we're burning\\n            // We're rounding up here so take care when actually applying to totalDebt\\n            // The assets we calculated to pull are from the minDebt number we track so\\n            // we'll use that one to ensure we properly account for slippage (the `pulled` var below)\\n            // The other two debt numbers we just need to keep up to date.\\n            uint256 debtMinDecrease = destinationInfo[address(destVault)].cachedMinDebtValue.mulDiv(\\n                dvSharesToBurn, destinationInfo[address(destVault)].ownedShares, Math.Rounding.Up\\n            );\\n            info.debtMinDecrease += debtMinDecrease;\\n\\n            info.debtDecrease += destinationInfo[address(destVault)].cachedDebtValue.mulDiv(\\n                dvSharesToBurn, destinationInfo[address(destVault)].ownedShares, Math.Rounding.Up\\n            );\\n            info.debtMaxDecrease += destinationInfo[address(destVault)].cachedMaxDebtValue.mulDiv(\\n                dvSharesToBurn, destinationInfo[address(destVault)].ownedShares, Math.Rounding.Up\\n            );\\n\\n            // If we've exhausted all shares we can remove the withdrawal from the queue\\n            // We need to leave it in the debt report queue though so that our destination specific\\n            // debt tracking values can be updated\\n            if (dvShares == dvSharesToBurn) {\\n                withdrawalQueue.popAddress(address(destVault));\\n            }\\n\\n            // It's possible we'll get back more assets than we anticipate from a swap\\n            // so if we do, throw it in idle and stop processing. You don't get more than we've calculated\\n            if (info.assetsPulled >= info.totalAssetsToPull) {\\n                info.idleIncrease += info.assetsPulled - info.totalAssetsToPull;\\n                info.assetsPulled = info.totalAssetsToPull;\\n                break;\\n            }\\n\\n            // Any deficiency in the amount we received is slippage. debtDecrease is what we expected\\n            // to receive. If we received any extra, that's great we'll roll it forward so we burn\\n            // less on the next loop.\\n            uint256 pulled = Math.max(debtMinDecrease, pulledAssets);\\n            if (pulled >= info.assetsToPull) {\\n                // We either have enough assets, or we've burned the max debt we're allowed\\n                info.assetsToPull = 0;\\n                break;\\n            } else {\\n                info.assetsToPull -= pulled;\\n            }\\n        }\\n\\n        // info.totalAssetsToPull isn't safe to use past this point.\\n        // It may or may not be accurate from the previous loop\\n\\n        debtBurned = info.assetsFromIdle + info.debtMinDecrease;\\n\\n        actualShares = ILMPVault(address(this)).convertToShares(\\n            debtBurned, applicableTotalAssets, ILMPVault(address(this)).totalSupply(), Math.Rounding.Up\\n        );\\n        actualAssets = info.assetsFromIdle + info.assetsPulled;\\n\\n        // Subtract what's taken out of idle from totalIdle\\n        // We may also have some increase to account for it we over pulled\\n        // or received better execution than we were anticipating\\n        // slither-disable-next-line events-maths\\n        assetBreakdown.totalIdle = info.currentIdle + info.idleIncrease - info.assetsFromIdle;\\n\\n        // Save off our various debt numbers\\n        if (info.debtDecrease > assetBreakdown.totalDebt) {\\n            assetBreakdown.totalDebt = 0;\\n        } else {\\n            assetBreakdown.totalDebt -= info.debtDecrease;\\n        }\\n\\n        if (info.debtMinDecrease > info.totalMinDebt) {\\n            assetBreakdown.totalDebtMin = 0;\\n        } else {\\n            assetBreakdown.totalDebtMin -= info.debtMinDecrease;\\n        }\\n\\n        if (info.debtMaxDecrease > assetBreakdown.totalDebtMax) {\\n            assetBreakdown.totalDebtMax = 0;\\n        } else {\\n            assetBreakdown.totalDebtMax -= info.debtMaxDecrease;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"src/security/Pausable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n// Copyright (c) 2023 Tokemak Ops Ltd. All rights reserved.\\npragma solidity 0.8.17;\\n\\nimport { Roles } from \\\"src/libs/Roles.sol\\\";\\nimport { Errors } from \\\"src/utils/Errors.sol\\\";\\nimport { SystemComponent } from \\\"src/SystemComponent.sol\\\";\\nimport { SecurityBase } from \\\"src/security/SecurityBase.sol\\\";\\nimport { ISystemRegistry } from \\\"src/interfaces/ISystemRegistry.sol\\\";\\nimport { IAccessController } from \\\"src/interfaces/security/IAccessController.sol\\\";\\nimport { ISystemSecurity } from \\\"src/interfaces/security/ISystemSecurity.sol\\\";\\n\\n/**\\n * @notice Contract which allows children to implement an emergency stop mechanism that can be trigger\\n * by an account that has been granted the EMERGENCY_PAUSER role.\\n * Makes available the `whenNotPaused` and `whenPaused` modifiers.\\n * Respects a system level pause from the System Security.\\n */\\nabstract contract Pausable {\\n    IAccessController private immutable _accessController;\\n    ISystemSecurity private immutable _systemSecurity;\\n\\n    /// @dev Emitted when the pause is triggered by `account`.\\n    event Paused(address account);\\n\\n    /// @dev Emitted when the pause is lifted by `account`.\\n    event Unpaused(address account);\\n\\n    error IsPaused();\\n    error IsNotPaused();\\n\\n    bool private _paused;\\n\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    modifier isPauser() {\\n        if (!_accessController.hasRole(Roles.EMERGENCY_PAUSER, msg.sender)) {\\n            revert Errors.AccessDenied();\\n        }\\n        _;\\n    }\\n\\n    constructor(ISystemRegistry systemRegistry) {\\n        Errors.verifyNotZero(address(systemRegistry), \\\"systemRegistry\\\");\\n\\n        // Validate the registry is in a state we can use it\\n        IAccessController accessController = systemRegistry.accessController();\\n        if (address(accessController) == address(0)) {\\n            revert Errors.RegistryItemMissing(\\\"accessController\\\");\\n        }\\n        ISystemSecurity systemSecurity = systemRegistry.systemSecurity();\\n        if (address(systemSecurity) == address(0)) {\\n            revert Errors.RegistryItemMissing(\\\"systemSecurity\\\");\\n        }\\n\\n        _accessController = accessController;\\n        _systemSecurity = systemSecurity;\\n    }\\n\\n    /// @notice Returns true if the contract or system is paused, and false otherwise.\\n    function paused() public view virtual returns (bool) {\\n        return _paused || _systemSecurity.isSystemPaused();\\n    }\\n\\n    /// @notice Pauses the contract\\n    /// @dev Reverts if already paused or not EMERGENCY_PAUSER role\\n    function pause() external virtual isPauser {\\n        if (_paused) {\\n            revert IsPaused();\\n        }\\n\\n        _paused = true;\\n\\n        emit Paused(msg.sender);\\n    }\\n\\n    /// @notice Unpauses the contract\\n    /// @dev Reverts if not paused or not EMERGENCY_PAUSER role\\n    function unpause() external virtual isPauser {\\n        if (!_paused) {\\n            revert IsNotPaused();\\n        }\\n\\n        _paused = false;\\n\\n        emit Unpaused(msg.sender);\\n    }\\n\\n    /// @dev Throws if the contract or system is paused.\\n    function _requireNotPaused() internal view virtual {\\n        if (paused()) {\\n            revert IsPaused();\\n        }\\n    }\\n\\n    /// @dev Throws if the contract or system is not paused.\\n    function _requirePaused() internal view virtual {\\n        if (!paused()) {\\n            revert IsNotPaused();\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"src/vault/VaultTypes.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n// Copyright (c) 2023 Tokemak Ops Ltd. All rights reserved.\\npragma solidity 0.8.17;\\n\\nlibrary VaultTypes {\\n    bytes32 public constant LST = keccak256(\\\"LST\\\");\\n    bytes32 public constant STABLE = keccak256(\\\"STABLE\\\");\\n}\\n\"\r\n    },\r\n    \"src/utils/NonReentrant.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n// Copyright (c) 2023 Tokemak Ops Ltd. All rights reserved.\\n\\npragma solidity 0.8.17;\\n\\nimport { Errors } from \\\"src/utils/Errors.sol\\\";\\n\\n/// @title Copy of OZ's ReentrancyGuard with a read only variant added\\nabstract contract NonReentrant {\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    error ReentrancyGuardReentrantCall();\\n\\n    constructor() {\\n        _status = NOT_ENTERED;\\n    }\\n\\n    modifier nonReentrantReadOnly() {\\n        if (_status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n        _;\\n    }\\n\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if (_status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"src/interfaces/vault/ILMPVault.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n// Copyright (c) 2023 Tokemak Ops Ltd. All rights reserved.\\npragma solidity 0.8.17;\\n\\nimport { IERC4626 } from \\\"openzeppelin-contracts/interfaces/IERC4626.sol\\\";\\nimport { IERC20Permit } from \\\"openzeppelin-contracts/token/ERC20/extensions/draft-IERC20Permit.sol\\\";\\nimport { IDestinationVault } from \\\"src/interfaces/vault/IDestinationVault.sol\\\";\\nimport { IStrategy } from \\\"src/interfaces/strategy/IStrategy.sol\\\";\\nimport { LMPDebt } from \\\"src/vault/libs/LMPDebt.sol\\\";\\nimport { IMainRewarder } from \\\"src/interfaces/rewarders/IMainRewarder.sol\\\";\\nimport { Math } from \\\"openzeppelin-contracts/utils/math/Math.sol\\\";\\n\\ninterface ILMPVault is IERC4626, IERC20Permit {\\n    enum VaultShutdownStatus {\\n        Active,\\n        Deprecated,\\n        Exploit\\n    }\\n\\n    /// @param unlockPeriodInSeconds Time it takes for profit to unlock in seconds\\n    /// @param fullProfitUnlockTime Time at which all profit will have been unlocked\\n    /// @param lastProfitUnlockTime Last time profits were unlocked\\n    /// @param profitUnlockRate Per second rate at which profit shares unlocks. Rate when calculated is denominated in\\n    /// MAX_BPS_PROFIT. TODO: Get into uint112\\n    struct ProfitUnlockSettings {\\n        uint48 unlockPeriodInSeconds;\\n        uint48 fullProfitUnlockTime;\\n        uint48 lastProfitUnlockTime;\\n        uint256 profitUnlockRate;\\n    }\\n\\n    /// @param feeSink Where claimed fees are sent\\n    /// @param totalAssetsHighMarkThe last totalAssets amount we took fees at\\n    /// @param totalAssetsHighMarkTimestamp The last timestamp we updated the high water mark\\n    /// @param nextPeriodicFeeTake Timestamp of next periodic fee to be taken.\\n    /// @param periodicFeeSink Address that receives periodic fee.\\n    /// @param periodicFeeBps Current periodic fee.  100% == 10000.\\n    /// @param pendingPeriodicFeeBps Pending periodic fee. Used as placeholder for new `periodicFeeBps` within\\n    /// range of fee take time.\\n    /// @param streamingFeeBps Current streaming fee taken on profit. 100% == 10000\\n    /// @param navPerShareLastFeeMark The last nav/share height we took fees at\\n    /// @param navPerShareLastFeeMarkTimestamp The last timestamp we took fees at\\n    /// @param rebalanceFeeHighWaterMarkEnabled Returns whether the nav/share high water mark is enabled for the\\n    /// rebalance fee\\n    struct AutoPoolFeeSettings {\\n        address feeSink;\\n        uint256 totalAssetsHighMark;\\n        uint256 totalAssetsHighMarkTimestamp;\\n        uint256 nextPeriodicFeeTake;\\n        address periodicFeeSink;\\n        uint256 periodicFeeBps;\\n        uint256 pendingPeriodicFeeBps;\\n        uint256 streamingFeeBps;\\n        uint256 navPerShareLastFeeMark;\\n        uint256 navPerShareLastFeeMarkTimestamp;\\n        bool rebalanceFeeHighWaterMarkEnabled;\\n    }\\n\\n    /// @param totalIdle The amount of baseAsset deposited into the contract pending deployment\\n    /// @param totalDebt The current (though cached) value of assets we've deployed\\n    /// @param totalDebtMin The current (though cached) value of assets we use for valuing during deposits\\n    /// @param totalDebtMax The current (though cached) value of assets we use for valuing during withdrawals\\n    struct AssetBreakdown {\\n        uint256 totalIdle;\\n        uint256 totalDebt;\\n        uint256 totalDebtMin;\\n        uint256 totalDebtMax;\\n    }\\n\\n    enum TotalAssetPurpose {\\n        Global,\\n        Deposit,\\n        Withdraw\\n    }\\n\\n    /* ******************************** */\\n    /*      Events                      */\\n    /* ******************************** */\\n    event TokensPulled(address[] tokens, uint256[] amounts, address[] destinations);\\n    event TokensRecovered(address[] tokens, uint256[] amounts, address[] destinations);\\n    event Nav(uint256 idle, uint256 debt, uint256 totalSupply);\\n    event RewarderSet(address newRewarder, address oldRewarder);\\n    event DestinationDebtReporting(address destination, uint256 debtValue, uint256 claimed, uint256 claimGasUsed);\\n    event RewarderSet(address rewarder);\\n    event FeeCollected(uint256 fees, address feeSink, uint256 mintedShares, uint256 profit, uint256 idle, uint256 debt);\\n    event PeriodicFeeCollected(uint256 fees, address feeSink, uint256 mintedShares);\\n    event Shutdown(VaultShutdownStatus reason);\\n\\n    /* ******************************** */\\n    /*      Errors                      */\\n    /* ******************************** */\\n\\n    error ERC4626MintExceedsMax(uint256 shares, uint256 maxMint);\\n    error ERC4626DepositExceedsMax(uint256 assets, uint256 maxDeposit);\\n    error ERC4626ExceededMaxWithdraw(address owner, uint256 assets, uint256 max);\\n    error ERC4626ExceededMaxRedeem(address owner, uint256 shares, uint256 max);\\n    error AmountExceedsAllowance(uint256 shares, uint256 allowed);\\n    error InvalidShutdownStatus(VaultShutdownStatus status);\\n\\n    error WithdrawalFailed();\\n    error DepositFailed();\\n    error InsufficientFundsInDestinations(uint256 deficit);\\n    error WithdrawalIncomplete();\\n\\n    /// @notice Query the type of vault\\n    function vaultType() external view returns (bytes32);\\n\\n    /// @notice Allow token recoverer to collect dust / unintended transfers (non-tracked assets only)\\n    function recover(address[] calldata tokens, uint256[] calldata amounts, address[] calldata destinations) external;\\n\\n    /// @notice Set the order of destination vaults used for withdrawals\\n    // NOTE: will be done going directly to strategy (IStrategy) vault points to.\\n    //       How it'll delegate is still being decided\\n    // function setWithdrawalQueue(address[] calldata destinations) external;\\n\\n    /// @notice Get a list of destination vaults with pending assets to clear out\\n    function getRemovalQueue() external view returns (address[] memory);\\n\\n    function getFeeSettings() external view returns (AutoPoolFeeSettings memory);\\n\\n    /// @notice Remove emptied destination vault from pending removal queue\\n    function removeFromRemovalQueue(address vaultToRemove) external;\\n\\n    /// @notice Initiate the shutdown procedures for this vault\\n    function shutdown(VaultShutdownStatus reason) external;\\n\\n    /// @notice True if the vault has been shutdown\\n    function isShutdown() external view returns (bool);\\n\\n    /// @notice Returns the reason for shutdown (or `Active` if not shutdown)\\n    function shutdownStatus() external view returns (VaultShutdownStatus);\\n\\n    /// @notice gets the list of supported destination vaults for the LMP/Strategy\\n    /// @return _destinations List of supported destination vaults\\n    function getDestinations() external view returns (address[] memory _destinations);\\n\\n    function convertToShares(\\n        uint256 assets,\\n        uint256 totalAssetsForPurpose,\\n        uint256 supply,\\n        Math.Rounding rounding\\n    ) external view returns (uint256 shares);\\n\\n    function convertToAssets(\\n        uint256 shares,\\n        uint256 totalAssetsForPurpose,\\n        uint256 supply,\\n        Math.Rounding rounding\\n    ) external view returns (uint256 assets);\\n\\n    function totalAssets(TotalAssetPurpose purpose) external view returns (uint256);\\n\\n    function getAssetBreakdown() external view returns (AssetBreakdown memory);\\n\\n    /// @notice get a destinations last reported debt value\\n    /// @param destVault the address of the target destination\\n    /// @return destinations last reported debt value\\n    function getDestinationInfo(address destVault) external view returns (LMPDebt.DestinationInfo memory);\\n\\n    /// @notice check if a destination is registered with the vault\\n    function isDestinationRegistered(address destination) external view returns (bool);\\n\\n    /// @notice get if a destinationVault is queued for removal by the LMPVault\\n    function isDestinationQueuedForRemoval(address destination) external view returns (bool);\\n\\n    /// @notice Returns instance of vault rewarder.\\n    function rewarder() external view returns (IMainRewarder);\\n\\n    /// @notice Returns all past rewarders.\\n    function getPastRewarders() external view returns (address[] memory _pastRewarders);\\n\\n    /// @notice Returns boolean telling whether address passed in is past rewarder.\\n    function isPastRewarder(address _pastRewarder) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"src/vault/libs/AutoPoolFees.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n// Copyright (c) 2023 Tokemak Ops Ltd. All rights reserved.\\n\\npragma solidity 0.8.17;\\n\\nimport { ILMPVault } from \\\"src/interfaces/vault/ILMPVault.sol\\\";\\nimport { Math } from \\\"openzeppelin-contracts/utils/math/Math.sol\\\";\\nimport { AutoPoolToken } from \\\"src/vault/libs/AutoPoolToken.sol\\\";\\n\\nlibrary AutoPoolFees {\\n    using Math for uint256;\\n    using AutoPoolToken for AutoPoolToken.TokenData;\\n\\n    /// @notice Profit denomination\\n    uint256 public constant MAX_BPS_PROFIT = 1_000_000_000;\\n\\n    /// @notice 100% == 10000\\n    uint256 public constant FEE_DIVISOR = 10_000;\\n\\n    /// @notice Time between periodic fee takes.  ~ half year.\\n    uint256 public constant PERIODIC_FEE_TAKE_TIMEFRAME = 182 days;\\n\\n    /// @notice Max periodic fee, 10%.  100% = 10_000.\\n    uint256 public constant MAX_PERIODIC_FEE_BPS = 1000;\\n\\n    /// @notice Time before a periodic fee is taken that the fee % can be changed.\\n    uint256 public constant PERIODIC_FEE_CHANGE_CUTOFF = 45 days;\\n\\n    event FeeCollected(uint256 fees, address feeSink, uint256 mintedShares, uint256 profit, uint256 totalAssets);\\n    event PeriodicFeeCollected(uint256 fees, address feeSink, uint256 mintedShares);\\n    event Deposit(address indexed sender, address indexed owner, uint256 assets, uint256 shares);\\n    event PeriodicFeeSet(uint256 newFee);\\n    event PendingPeriodicFeeSet(uint256 pendingPeriodicFeeBps);\\n    event PeriodicFeeSinkSet(address newPeriodicFeeSink);\\n    event NextPeriodicFeeTakeSet(uint256 nextPeriodicFeeTake);\\n    event RebalanceFeeHighWaterMarkEnabledSet(bool enabled);\\n    event NewNavShareFeeMark(uint256 navPerShare, uint256 timestamp);\\n    event NewTotalAssetsHighWatermark(uint256 assets, uint256 timestamp);\\n    event StreamingFeeSet(uint256 newFee);\\n    event FeeSinkSet(address newFeeSink);\\n    event NewProfitUnlockTime(uint48 timeSeconds);\\n\\n    error InvalidFee(uint256 newFee);\\n    error AlreadySet();\\n\\n    /// @notice Returns the amount of unlocked profit shares that will be burned\\n    function unlockedShares(\\n        ILMPVault.ProfitUnlockSettings storage profitUnlockSettings,\\n        AutoPoolToken.TokenData storage tokenData\\n    ) public view returns (uint256 shares) {\\n        uint256 fullTime = profitUnlockSettings.fullProfitUnlockTime;\\n        if (fullTime > block.timestamp) {\\n            shares = profitUnlockSettings.profitUnlockRate\\n                * (block.timestamp - profitUnlockSettings.lastProfitUnlockTime) / MAX_BPS_PROFIT;\\n        } else if (fullTime != 0) {\\n            shares = tokenData.balances[address(this)];\\n        }\\n    }\\n\\n    function initializeFeeSettings(ILMPVault.AutoPoolFeeSettings storage settings) external {\\n        uint256 nextFeeTimeframe = uint48(block.timestamp + PERIODIC_FEE_TAKE_TIMEFRAME);\\n        settings.nextPeriodicFeeTake = nextFeeTimeframe;\\n        settings.navPerShareLastFeeMark = FEE_DIVISOR;\\n        settings.navPerShareLastFeeMarkTimestamp = block.timestamp;\\n        emit NextPeriodicFeeTakeSet(nextFeeTimeframe);\\n    }\\n\\n    function burnUnlockedShares(\\n        ILMPVault.ProfitUnlockSettings storage profitUnlockSettings,\\n        AutoPoolToken.TokenData storage tokenData\\n    ) external {\\n        uint256 shares = unlockedShares(profitUnlockSettings, tokenData);\\n        if (shares == 0) {\\n            return;\\n        }\\n        if (profitUnlockSettings.fullProfitUnlockTime > block.timestamp) {\\n            profitUnlockSettings.lastProfitUnlockTime = uint48(block.timestamp);\\n        }\\n        tokenData.burn(address(this), shares);\\n    }\\n\\n    function _calculateEffectiveNavPerShareLastFeeMark(\\n        ILMPVault.AutoPoolFeeSettings storage settings,\\n        uint256 currentBlock,\\n        uint256 currentNavPerShare,\\n        uint256 aumCurrent\\n    ) private view returns (uint256) {\\n        uint256 workingHigh = settings.navPerShareLastFeeMark;\\n\\n        if (workingHigh == 0) {\\n            // If we got 0, we shouldn't increase it\\n            return 0;\\n        }\\n\\n        if (!settings.rebalanceFeeHighWaterMarkEnabled) {\\n            // No calculations or checks to do in this case\\n            return workingHigh;\\n        }\\n\\n        uint256 daysSinceLastFeeEarned = (currentBlock - settings.navPerShareLastFeeMarkTimestamp) / 60 / 60 / 24;\\n\\n        if (daysSinceLastFeeEarned > 600) {\\n            return currentNavPerShare;\\n        }\\n        if (daysSinceLastFeeEarned > 60 && daysSinceLastFeeEarned <= 600) {\\n            uint8 decimals = ILMPVault(address(this)).decimals();\\n\\n            uint256 one = 10 ** decimals;\\n            uint256 aumHighMark = settings.totalAssetsHighMark;\\n\\n            // AUM_min = min(AUM_high, AUM_current)\\n            uint256 minAssets = aumCurrent < aumHighMark ? aumCurrent : aumHighMark;\\n\\n            // AUM_max = max(AUM_high, AUM_current);\\n            uint256 maxAssets = aumCurrent > aumHighMark ? aumCurrent : aumHighMark;\\n\\n            /// 0.999 * (AUM_min / AUM_max)\\n            // dividing by `one` because we need end up with a number in the 100's wei range\\n            uint256 g1 = ((999 * minAssets * one) / (maxAssets * one));\\n\\n            /// 0.99 * (1 - AUM_min / AUM_max)\\n            // dividing by `10 ** (decimals() - 1)` because we need to divide 100 out for our % and then\\n            // we want to end up with a number in the 10's wei range\\n            uint256 g2 = (99 * (one - (minAssets * one / maxAssets))) / 10 ** (decimals - 1);\\n\\n            uint256 gamma = g1 + g2;\\n\\n            uint256 daysDiff = daysSinceLastFeeEarned - 60;\\n            for (uint256 i = 0; i < daysDiff / 25; ++i) {\\n                // slither-disable-next-line divide-before-multiply\\n                workingHigh = workingHigh * (gamma ** 25 / 1e72) / 1000;\\n            }\\n            // slither-disable-next-line weak-prng\\n            for (uint256 i = 0; i < daysDiff % 25; ++i) {\\n                // slither-disable-next-line divide-before-multiply\\n                workingHigh = workingHigh * gamma / 1000;\\n            }\\n        }\\n        return workingHigh;\\n    }\\n\\n    function collectFees(\\n        uint256 totalAssets,\\n        uint256 currentTotalSupply,\\n        ILMPVault.AutoPoolFeeSettings storage settings,\\n        AutoPoolToken.TokenData storage tokenData\\n    ) external returns (uint256) {\\n        // If there's no supply then there should be no assets and so nothing\\n        // to actually take fees on\\n        // slither-disable-next-line incorrect-equality\\n        if (currentTotalSupply == 0) {\\n            return 0;\\n        }\\n\\n        // slither-disable-next-line incorrect-equality\\n        if (settings.totalAssetsHighMark == 0) {\\n            // Initialize our high water mark to the current assets\\n            settings.totalAssetsHighMark = totalAssets;\\n        }\\n\\n        // slither-disable-start timestamp\\n        // If current timestamp is greater than nextPeriodicFeeTake, operations need to happen for periodic fee.\\n\\n        if (block.timestamp > settings.nextPeriodicFeeTake) {\\n            address periodicSink = settings.periodicFeeSink;\\n\\n            // If there is a periodic fee and fee sink set, take the fee.\\n            if (settings.periodicFeeBps > 0 && periodicSink != address(0)) {\\n                uint256 periodicShares =\\n                    _collectPeriodicFees(periodicSink, settings.periodicFeeBps, currentTotalSupply, totalAssets);\\n\\n                currentTotalSupply += periodicShares;\\n                tokenData.mint(periodicSink, periodicShares);\\n            }\\n\\n            // If there is a pending periodic fee set, replace periodic fee with pending after fees already taken.\\n            uint256 pendingMgmtFeeBps = settings.pendingPeriodicFeeBps;\\n\\n            if (pendingMgmtFeeBps > 0) {\\n                emit PeriodicFeeSet(pendingMgmtFeeBps);\\n                emit PendingPeriodicFeeSet(0);\\n\\n                settings.periodicFeeBps = pendingMgmtFeeBps;\\n                settings.pendingPeriodicFeeBps = 0;\\n            }\\n\\n            // Needs to be updated any time timestamp > `nextTakePeriodicFee` to keep up to date.\\n            settings.nextPeriodicFeeTake += uint48(PERIODIC_FEE_TAKE_TIMEFRAME);\\n            emit NextPeriodicFeeTakeSet(settings.nextPeriodicFeeTake);\\n        }\\n\\n        // slither-disable-end timestamp\\n        uint256 currentNavPerShare = (totalAssets * FEE_DIVISOR) / currentTotalSupply;\\n\\n        // If the high mark is disabled then this just returns the `navPerShareLastFeeMark`\\n        // Otherwise, it'll check if it needs to decay\\n        uint256 effectiveNavPerShareLastFeeMark =\\n            _calculateEffectiveNavPerShareLastFeeMark(settings, block.timestamp, currentNavPerShare, totalAssets);\\n\\n        if (currentNavPerShare > effectiveNavPerShareLastFeeMark) {\\n            // Even if we aren't going to take the fee (haven't set a sink)\\n            // We still want to calculate so we can emit for off-chain analysis\\n            uint256 streamingFeeBps = settings.streamingFeeBps;\\n            uint256 profit = (currentNavPerShare - effectiveNavPerShareLastFeeMark) * currentTotalSupply;\\n            uint256 fees = profit.mulDiv(streamingFeeBps, (FEE_DIVISOR ** 2), Math.Rounding.Up);\\n\\n            if (fees > 0) {\\n                currentTotalSupply = _mintStreamingFee(\\n                    tokenData, fees, streamingFeeBps, profit, currentTotalSupply, totalAssets, settings.feeSink\\n                );\\n                currentNavPerShare = (totalAssets * FEE_DIVISOR) / currentTotalSupply;\\n            }\\n        }\\n\\n        // Two situations we're covering here\\n        //   1. If the high mark is disabled then we just always need to know the last\\n        //      time we evaluated fees so we can catch any run up. i.e. the `navPerShareLastFeeMark`\\n        //      can go down\\n        //   2. When the high mark is enabled, then we only want to set `navPerShareLastFeeMark`\\n        //      when it is greater than the last time we captured fees (or would have)\\n        if (currentNavPerShare > effectiveNavPerShareLastFeeMark || !settings.rebalanceFeeHighWaterMarkEnabled) {\\n            settings.navPerShareLastFeeMark = currentNavPerShare;\\n            settings.navPerShareLastFeeMarkTimestamp = block.timestamp;\\n            emit NewNavShareFeeMark(currentNavPerShare, block.timestamp);\\n        }\\n\\n        // Set our new high water mark for totalAssets, regardless if we took fees\\n        if (settings.totalAssetsHighMark < totalAssets) {\\n            settings.totalAssetsHighMark = totalAssets;\\n            settings.totalAssetsHighMarkTimestamp = block.timestamp;\\n            emit NewTotalAssetsHighWatermark(settings.totalAssetsHighMark, settings.totalAssetsHighMarkTimestamp);\\n        }\\n\\n        return currentTotalSupply;\\n    }\\n\\n    function _mintStreamingFee(\\n        AutoPoolToken.TokenData storage tokenData,\\n        uint256 fees,\\n        uint256 streamingFeeBps,\\n        uint256 profit,\\n        uint256 currentTotalSupply,\\n        uint256 totalAssets,\\n        address sink\\n    ) private returns (uint256) {\\n        if (sink == address(0)) {\\n            return currentTotalSupply;\\n        }\\n\\n        // Calculated separate from other mints as normal share mint is round down\\n        // Note: We use Lido's formula: from https://docs.lido.fi/guides/lido-tokens-integration-guide/#fees\\n        // suggested by: https://github.com/sherlock-audit/2023-06-tokemak-judging/blob/main/486-H/624-best.md\\n        // but we scale down `profit` by FEE_DIVISOR\\n        uint256 streamingFeeShares = Math.mulDiv(\\n            streamingFeeBps * profit / FEE_DIVISOR,\\n            currentTotalSupply,\\n            (totalAssets * FEE_DIVISOR) - (streamingFeeBps * profit / FEE_DIVISOR),\\n            Math.Rounding.Up\\n        );\\n        tokenData.mint(sink, streamingFeeShares);\\n        currentTotalSupply += streamingFeeShares;\\n\\n        emit Deposit(address(this), sink, 0, streamingFeeShares);\\n        emit FeeCollected(fees, sink, streamingFeeShares, profit, totalAssets);\\n\\n        return currentTotalSupply;\\n    }\\n\\n    /// @dev Collects periodic fees.\\n    function _collectPeriodicFees(\\n        address periodicSink,\\n        uint256 periodicFeeBps,\\n        uint256 currentTotalSupply,\\n        uint256 assets\\n    ) private returns (uint256 newShares) {\\n        // Periodic fee * assets used multiple places below, gas savings when calc here.\\n        uint256 periodicFeeMultAssets = periodicFeeBps * assets;\\n\\n        // We calculate the shares using the same formula as streaming fees, without scaling down\\n        newShares = Math.mulDiv(\\n            periodicFeeMultAssets,\\n            currentTotalSupply,\\n            (assets * FEE_DIVISOR) - (periodicFeeMultAssets),\\n            Math.Rounding.Up\\n        );\\n\\n        // Fee in assets that we are taking.\\n        uint256 fees = periodicFeeMultAssets.ceilDiv(FEE_DIVISOR);\\n        emit Deposit(address(this), periodicSink, 0, newShares);\\n        emit PeriodicFeeCollected(fees, periodicSink, newShares);\\n\\n        return newShares;\\n    }\\n\\n    /// @dev If set to 0, existing shares will unlock immediately and increase nav/share. This is intentional\\n    function setProfitUnlockPeriod(\\n        ILMPVault.ProfitUnlockSettings storage settings,\\n        AutoPoolToken.TokenData storage tokenData,\\n        uint48 newUnlockPeriodInSeconds\\n    ) external {\\n        settings.unlockPeriodInSeconds = newUnlockPeriodInSeconds;\\n\\n        // If we are turning off the unlock, setting it to 0, then\\n        // unlock all existing shares\\n        if (newUnlockPeriodInSeconds == 0) {\\n            uint256 currentShares = tokenData.balances[address(this)];\\n            if (currentShares > 0) {\\n                settings.lastProfitUnlockTime = uint48(block.timestamp);\\n                tokenData.burn(address(this), currentShares);\\n            }\\n\\n            // Reset vars so old values aren't used during a subsequent lockup\\n            settings.fullProfitUnlockTime = 0;\\n            settings.profitUnlockRate = 0;\\n        }\\n\\n        emit NewProfitUnlockTime(newUnlockPeriodInSeconds);\\n    }\\n\\n    function calculateProfitLocking(\\n        ILMPVault.ProfitUnlockSettings storage settings,\\n        AutoPoolToken.TokenData storage tokenData,\\n        uint256 feeShares,\\n        uint256 newTotalAssets,\\n        uint256 startTotalAssets,\\n        uint256 startTotalSupply,\\n        uint256 previousLockShares\\n    ) external returns (uint256) {\\n        uint256 unlockPeriod = settings.unlockPeriodInSeconds;\\n\\n        // If there were existing shares and we set the unlock period to 0 they are immediately unlocked\\n        // so we don't have to worry about existing shares here. And if the period is 0 then we\\n        // won't be locking any new shares\\n        if (unlockPeriod == 0) {\\n            return startTotalSupply;\\n        }\\n\\n        uint256 newLockShares = 0;\\n        uint256 previousLockToBurn = 0;\\n        uint256 effectiveTs = startTotalSupply;\\n\\n        // The total supply we would need to not see a change in nav/share\\n        uint256 targetTotalSupply = newTotalAssets * (effectiveTs - feeShares) / startTotalAssets;\\n\\n        if (effectiveTs > targetTotalSupply) {\\n            // Our actual total supply is greater than our target.\\n            // This means we would see a decrease in nav/share\\n            // See if we can burn any profit shares to offset that\\n            if (previousLockShares > 0) {\\n                uint256 diff = effectiveTs - targetTotalSupply;\\n                if (previousLockShares >= diff) {\\n                    previousLockToBurn = diff;\\n                    effectiveTs -= diff;\\n                } else {\\n                    previousLockToBurn = previousLockShares;\\n                    effectiveTs -= previousLockShares;\\n                }\\n            }\\n        }\\n\\n        if (targetTotalSupply > effectiveTs) {\\n            // Our actual total supply is less than our target.\\n            // This means we would see an increase in nav/share (due to gains) which we can't allow\\n            // We need to mint shares to the vault to offset\\n            newLockShares = targetTotalSupply - effectiveTs;\\n            effectiveTs += newLockShares;\\n        }\\n\\n        // We know how many shares should be locked at this point\\n        // Mint or burn what we need to match if necessary\\n        uint256 totalLockShares = previousLockShares - previousLockToBurn + newLockShares;\\n        if (totalLockShares > previousLockShares) {\\n            uint256 mintAmount = totalLockShares - previousLockShares;\\n            tokenData.mint(address(this), mintAmount);\\n            startTotalSupply += mintAmount;\\n        } else if (totalLockShares < previousLockShares) {\\n            uint256 burnAmount = previousLockShares - totalLockShares;\\n            tokenData.burn(address(this), burnAmount);\\n            startTotalSupply -= burnAmount;\\n        }\\n\\n        // If we're going to end up with no profit shares, zero the rate\\n        // We don't need to 0 the other timing vars if we just zero the rate\\n        if (totalLockShares == 0) {\\n            settings.profitUnlockRate = 0;\\n        }\\n\\n        // We have shares and they are going to unlocked later\\n        if (totalLockShares > 0 && unlockPeriod > 0) {\\n            _updateProfitUnlockTimings(\\n                settings, unlockPeriod, previousLockToBurn, previousLockShares, newLockShares, totalLockShares\\n            );\\n        }\\n\\n        return startTotalSupply;\\n    }\\n\\n    function _updateProfitUnlockTimings(\\n        ILMPVault.ProfitUnlockSettings storage settings,\\n        uint256 unlockPeriod,\\n        uint256 previousLockToBurn,\\n        uint256 previousLockShares,\\n        uint256 newLockShares,\\n        uint256 totalLockShares\\n    ) private {\\n        uint256 previousLockTime;\\n        uint256 fullUnlockTime = settings.fullProfitUnlockTime;\\n\\n        // Determine how much time is left for the remaining previous profit shares\\n        if (fullUnlockTime > block.timestamp) {\\n            previousLockTime = (previousLockShares - previousLockToBurn) * (fullUnlockTime - block.timestamp);\\n        }\\n\\n        // Amount of time it will take to unlock all shares, weighted avg over current and new shares\\n        uint256 newUnlockPeriod = (previousLockTime + newLockShares * unlockPeriod) / totalLockShares;\\n\\n        // Rate at which totalLockShares will unlock\\n        settings.profitUnlockRate = totalLockShares * MAX_BPS_PROFIT / newUnlockPeriod;\\n\\n        // Time the full of amount of totalLockShares will be unlocked\\n        settings.fullProfitUnlockTime = uint48(block.timestamp + newUnlockPeriod);\\n        settings.lastProfitUnlockTime = uint48(block.timestamp);\\n    }\\n\\n    /// @notice Enable or disable the high water mark on the rebalance fee\\n    /// @dev Will revert if set to the same value\\n    function setRebalanceFeeHighWaterMarkEnabled(\\n        ILMPVault.AutoPoolFeeSettings storage feeSettings,\\n        bool enabled\\n    ) external {\\n        if (feeSettings.rebalanceFeeHighWaterMarkEnabled == enabled) {\\n            revert AlreadySet();\\n        }\\n\\n        feeSettings.rebalanceFeeHighWaterMarkEnabled = enabled;\\n\\n        emit RebalanceFeeHighWaterMarkEnabledSet(enabled);\\n    }\\n\\n    /// @notice Set the fee that will be taken when profit is realized\\n    /// @dev Resets the high water to current value\\n    /// @param fee Percent. 100% == 10000\\n    function setStreamingFeeBps(ILMPVault.AutoPoolFeeSettings storage feeSettings, uint256 fee) external {\\n        if (fee >= FEE_DIVISOR) {\\n            revert InvalidFee(fee);\\n        }\\n\\n        feeSettings.streamingFeeBps = fee;\\n\\n        ILMPVault vault = ILMPVault(address(this));\\n\\n        // Set the high mark when we change the fee so we aren't able to go farther back in\\n        // time than one debt reporting and claim fee's against past profits\\n        uint256 supply = vault.totalSupply();\\n        if (supply > 0) {\\n            feeSettings.navPerShareLastFeeMark = (vault.totalAssets() * FEE_DIVISOR) / supply;\\n        } else {\\n            // The default high mark is 1:1. We don't want to be able to take\\n            // fee's before the first debt reporting\\n            // Before a rebalance, everything will be in idle and we don't want to take\\n            // fee's on pure idle\\n            feeSettings.navPerShareLastFeeMark = FEE_DIVISOR;\\n        }\\n\\n        emit StreamingFeeSet(fee);\\n    }\\n\\n    /// @notice Set the periodic fee taken.\\n    /// @dev Depending on time until next fee take, may update periodicFeeBps directly or queue fee.\\n    /// @param fee Fee to update periodic fee to.\\n    function setPeriodicFeeBps(ILMPVault.AutoPoolFeeSettings storage feeSettings, uint256 fee) external {\\n        if (fee > MAX_PERIODIC_FEE_BPS) {\\n            revert InvalidFee(fee);\\n        }\\n\\n        /**\\n         * If the current timestamp is greater than the next fee take minus 45 days, we are withing the timeframe\\n         *      that we do not want to be able to set a new periodic fee, so we set `pendingPeriodicFeeBps` instead.\\n         *      This will be set as `periodicFeeBps` when periodic fees are taken.\\n         *\\n         * Fee checked to fit into uint16 above, able to be wrapped without safe cast here.\\n         */\\n        // slither-disable-next-line timestamp\\n        if (block.timestamp > feeSettings.nextPeriodicFeeTake - PERIODIC_FEE_CHANGE_CUTOFF) {\\n            emit PendingPeriodicFeeSet(fee);\\n            feeSettings.pendingPeriodicFeeBps = uint16(fee);\\n        } else {\\n            emit PeriodicFeeSet(fee);\\n            feeSettings.periodicFeeBps = uint16(fee);\\n        }\\n    }\\n\\n    /// @notice Set the address that will receive fees\\n    /// @param newFeeSink Address that will receive fees\\n    function setFeeSink(ILMPVault.AutoPoolFeeSettings storage feeSettings, address newFeeSink) external {\\n        emit FeeSinkSet(newFeeSink);\\n\\n        // Zero is valid. One way to disable taking fees\\n        // slither-disable-next-line missing-zero-check\\n        feeSettings.feeSink = newFeeSink;\\n    }\\n\\n    /// @notice Sets the address that will receive periodic fees.\\n    /// @dev Zero address allowable.  Disables fees.\\n    /// @param newPeriodicFeeSink New periodic fee address.\\n    function setPeriodicFeeSink(\\n        ILMPVault.AutoPoolFeeSettings storage feeSettings,\\n        address newPeriodicFeeSink\\n    ) external {\\n        emit PeriodicFeeSinkSet(newPeriodicFeeSink);\\n\\n        // slither-disable-next-line missing-zero-check\\n        feeSettings.periodicFeeSink = newPeriodicFeeSink;\\n    }\\n}\\n\"\r\n    },\r\n    \"src/vault/libs/AutoPoolToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n// Copyright (c) 2023 Tokemak Ops Ltd. All rights reserved.\\n\\npragma solidity 0.8.17;\\n\\nimport { ECDSA } from \\\"openzeppelin-contracts/utils/cryptography/ECDSA.sol\\\";\\nimport { IERC20Permit } from \\\"openzeppelin-contracts/token/ERC20/extensions/draft-IERC20Permit.sol\\\";\\n\\n/// @notice ERC20 token functionality converted into a library. Based on OZ's v5\\n/// https://github.com/OpenZeppelin/openzeppelin-contracts/blob/v5.0.1/contracts/token/ERC20/ERC20.sol\\nlibrary AutoPoolToken {\\n    struct TokenData {\\n        /// @notice Token balances\\n        /// @dev account => balance\\n        mapping(address => uint256) balances;\\n        /// @notice Account spender allowances\\n        /// @dev account => spender => allowance\\n        mapping(address => mapping(address => uint256)) allowances;\\n        /// @notice Total supply of the pool. Be careful when using this directly from the struct. The pool itself\\n        /// modifies this number based on unlocked profited shares\\n        uint256 totalSupply;\\n        /// @notice ERC20 Permit nonces\\n        /// @dev account -> nonce. Exposed via `nonces(owner)`\\n        mapping(address => uint256) nonces;\\n    }\\n\\n    /// @notice EIP2612 permit type hash\\n    bytes32 public constant PERMIT_TYPEHASH =\\n        keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\");\\n\\n    /// @notice EIP712 domain type hash\\n    bytes32 public constant TYPE_HASH =\\n        keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\");\\n\\n    /// @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n    /// @param sender Address whose tokens are being transferred.\\n    /// @param balance Current balance for the interacting account.\\n    /// @param needed Minimum amount required to perform a transfer.\\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\\n\\n    /// @dev Indicates a failure with the token `sender`. Used in transfers.\\n    /// @param sender Address whose tokens are being transferred.\\n    error ERC20InvalidSender(address sender);\\n\\n    /// @dev Indicates a failure with the token `receiver`. Used in transfers.\\n    /// @param receiver Address to which tokens are being transferred.\\n    error ERC20InvalidReceiver(address receiver);\\n\\n    /// @dev Indicates a failure with the `spender`\u2019s `allowance`. Used in transfers.\\n    ///@param spender Address that may be allowed to operate on tokens without being their owner.\\n    /// @param allowance Amount of tokens a `spender` is allowed to operate with.\\n    ///@param needed Minimum amount required to perform a transfer.\\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\\n\\n    /// @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n    /// @param approver Address initiating an approval operation.\\n    error ERC20InvalidApprover(address approver);\\n\\n    /// @dev Indicates a failure with the `spender` to be approved. Used in approvals.\\n    /// @param spender Address that may be allowed to operate on tokens without being their owner.\\n    error ERC20InvalidSpender(address spender);\\n\\n    /// @dev Permit deadline has expired.\\n    error ERC2612ExpiredSignature(uint256 deadline);\\n    /// @dev Mismatched signature.\\n    error ERC2612InvalidSigner(address signer, address owner);\\n    /// @dev The nonce used for an `account` is not the expected current nonce.\\n    error InvalidAccountNonce(address account, uint256 currentNonce);\\n\\n    /// @dev Emitted when `value` tokens are moved from one account `from` to another `to`.\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /// @dev Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}.\\n    /// `value` is the new allowance.\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /// @dev Sets a `value` amount of tokens as the allowance of `spender` over the caller's tokens.\\n    function approve(TokenData storage data, address spender, uint256 value) external returns (bool) {\\n        address owner = msg.sender;\\n        approve(data, owner, spender, value);\\n        return true;\\n    }\\n\\n    /// @dev Sets `value` as the allowance of `spender` over the `owner` s tokens.\\n    function approve(TokenData storage data, address owner, address spender, uint256 value) public {\\n        _approve(data, owner, spender, value, true);\\n    }\\n\\n    function transfer(TokenData storage data, address to, uint256 value) external returns (bool) {\\n        address owner = msg.sender;\\n        _transfer(data, owner, to, value);\\n        return true;\\n    }\\n\\n    /// @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism.\\n    /// value` is then deducted from the caller's allowance.\\n    function transferFrom(TokenData storage data, address from, address to, uint256 value) external returns (bool) {\\n        address spender = msg.sender;\\n        _spendAllowance(data, from, spender, value);\\n        _transfer(data, from, to, value);\\n        return true;\\n    }\\n\\n    /// @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\\n    function mint(TokenData storage data, address account, uint256 value) external {\\n        if (account == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n        _update(data, address(0), account, value);\\n    }\\n\\n    /// @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\\n    function burn(TokenData storage data, address account, uint256 value) external {\\n        if (account == address(0)) {\\n            revert ERC20InvalidSender(address(0));\\n        }\\n        _update(data, account, address(0), value);\\n    }\\n\\n    function permit(\\n        TokenData storage data,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external {\\n        if (block.timestamp > deadline) {\\n            revert ERC2612ExpiredSignature(deadline);\\n        }\\n\\n        uint256 nonce;\\n        // For each account, the nonce has an initial value of 0, can only be incremented by one, and cannot be\\n        // decremented or reset. This guarantees that the nonce never overflows.\\n        unchecked {\\n            // It is important to do x++ and not ++x here. Nonces starts at 0\\n            nonce = data.nonces[owner]++;\\n        }\\n\\n        bytes32 structHash = keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, value, nonce, deadline));\\n\\n        bytes32 hash = ECDSA.toTypedDataHash(IERC20Permit(address(this)).DOMAIN_SEPARATOR(), structHash);\\n\\n        address signer = ECDSA.recover(hash, v, r, s);\\n        if (signer != owner) {\\n            revert ERC2612InvalidSigner(signer, owner);\\n        }\\n\\n        approve(data, owner, spender, value);\\n    }\\n\\n    /// @dev Moves a `value` amount of tokens from `from` to `to`.\\n    function _transfer(TokenData storage data, address from, address to, uint256 value) private {\\n        if (from == address(0)) {\\n            revert ERC20InvalidSender(address(0));\\n        }\\n        if (to == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n        _update(data, from, to, value);\\n    }\\n\\n    /// @dev Updates `owner` s allowance for `spender` based on spent `value`.\\n    function _spendAllowance(TokenData storage data, address owner, address spender, uint256 value) private {\\n        uint256 currentAllowance = data.allowances[owner][spender];\\n        if (currentAllowance != type(uint256).max) {\\n            if (currentAllowance < value) {\\n                revert ERC20InsufficientAllowance(spender, currentAllowance, value);\\n            }\\n            unchecked {\\n                _approve(data, owner, spender, currentAllowance - value, false);\\n            }\\n        }\\n    }\\n\\n    /// @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\\n    /// (or `to`) is the zero address.\\n    function _update(TokenData storage data, address from, address to, uint256 value) private {\\n        if (from == address(0)) {\\n            // Overflow check required: The rest of the code assumes that totalSupply never overflows\\n            data.totalSupply += value;\\n        } else {\\n            uint256 fromBalance = data.balances[from];\\n            if (fromBalance < value) {\\n                revert ERC20InsufficientBalance(from, fromBalance, value);\\n            }\\n            unchecked {\\n                // Overflow not possible: value <= fromBalance <= totalSupply.\\n                data.balances[from] = fromBalance - value;\\n            }\\n        }\\n\\n        if (to == address(0)) {\\n            unchecked {\\n                // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.\\n                data.totalSupply -= value;\\n            }\\n        } else {\\n            unchecked {\\n                // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.\\n                data.balances[to] += value;\\n            }\\n        }\\n\\n        emit Transfer(from, to, value);\\n    }\\n\\n    /// @dev Variant of `_approve` with an optional flag to enable or disable the Approval event.\\n    function _approve(TokenData storage data, address owner, address spender, uint256 value, bool emitEvent) private {\\n        if (owner == address(0)) {\\n            revert ERC20InvalidApprover(address(0));\\n        }\\n        if (spender == address(0)) {\\n            revert ERC20InvalidSpender(address(0));\\n        }\\n        data.allowances[owner][spender] = value;\\n        if (emitEvent) {\\n            emit Approval(owner, spender, value);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"src/vault/libs/AutoPool4626.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n// Copyright (c) 2023 Tokemak Ops Ltd. All rights reserved.\\n\\npragma solidity 0.8.17;\\n\\nimport { Errors } from \\\"src/utils/Errors.sol\\\";\\nimport { AutoPoolFees } from \\\"src/vault/libs/AutoPoolFees.sol\\\";\\nimport { AutoPoolToken } from \\\"src/vault/libs/AutoPoolToken.sol\\\";\\nimport { ILMPVault } from \\\"src/interfaces/vault/ILMPVault.sol\\\";\\nimport { IERC20Metadata } from \\\"openzeppelin-contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport { SafeERC20 } from \\\"openzeppelin-contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport { StructuredLinkedList } from \\\"src/strategy/StructuredLinkedList.sol\\\";\\nimport { WithdrawalQueue } from \\\"src/strategy/WithdrawalQueue.sol\\\";\\n\\nlibrary AutoPool4626 {\\n    using SafeERC20 for IERC20Metadata;\\n    using WithdrawalQueue for StructuredLinkedList.List;\\n    using AutoPoolToken for AutoPoolToken.TokenData;\\n\\n    /// =====================================================\\n    /// Errors\\n    /// =====================================================\\n\\n    error InvalidTotalAssetPurpose();\\n\\n    event Deposit(address indexed sender, address indexed owner, uint256 assets, uint256 shares);\\n    event Nav(uint256 idle, uint256 debt, uint256 totalSupply);\\n    event TokensRecovered(address[] tokens, uint256[] amounts, address[] destinations);\\n\\n    /// @notice Returns the amount of tokens owned by account.\\n    /// @dev Subtracts any unlocked profit shares that will be burned when account is the Vault itself\\n    function balanceOf(\\n        AutoPoolToken.TokenData storage tokenData,\\n        ILMPVault.ProfitUnlockSettings storage profitUnlockSettings,\\n        address account\\n    ) public view returns (uint256) {\\n        if (account == address(this)) {\\n            return tokenData.balances[account] - AutoPoolFees.unlockedShares(profitUnlockSettings, tokenData);\\n        }\\n        return tokenData.balances[account];\\n    }\\n\\n    /// @notice Returns the total amount of the underlying asset that is \u201cmanaged\u201d by Vault.\\n    /// @dev Utilizes the \\\"Global\\\" purpose internally\\n    function totalAssets(ILMPVault.AssetBreakdown storage assetBreakdown) public view returns (uint256) {\\n        return totalAssets(assetBreakdown, ILMPVault.TotalAssetPurpose.Global);\\n    }\\n\\n    /// @notice Returns the total amount of the underlying asset that is \u201cmanaged\u201d by the Vault with respect to its\\n    /// usage\\n    /// @dev Value changes based on purpose. Global is an avg. Deposit is valued higher. Withdraw is valued lower.\\n    /// @param purpose The calculation the total assets will be used in\\n    function totalAssets(\\n        ILMPVault.AssetBreakdown storage assetBreakdown,\\n        ILMPVault.TotalAssetPurpose purpose\\n    ) public view returns (uint256) {\\n        if (purpose == ILMPVault.TotalAssetPurpose.Global) {\\n            return assetBreakdown.totalIdle + assetBreakdown.totalDebt;\\n        } else if (purpose == ILMPVault.TotalAssetPurpose.Deposit) {\\n            return assetBreakdown.totalIdle + assetBreakdown.totalDebtMax;\\n        } else if (purpose == ILMPVault.TotalAssetPurpose.Withdraw) {\\n            return assetBreakdown.totalIdle + assetBreakdown.totalDebtMin;\\n        } else {\\n            revert InvalidTotalAssetPurpose();\\n        }\\n    }\\n\\n    function maxMint(\\n        ILMPVault.AssetBreakdown storage assetBreakdown,\\n        AutoPoolToken.TokenData storage tokenData,\\n        ILMPVault.ProfitUnlockSettings storage profitUnlockSettings,\\n        address,\\n        bool paused,\\n        bool shutdown\\n    ) public view returns (uint256) {\\n        // If we are temporarily paused, or in full shutdown mode,\\n        // no new shares are able to be minted\\n        if (paused || shutdown) {\\n            return 0;\\n        }\\n\\n        // First deposit\\n        if (totalSupply(tokenData, profitUnlockSettings) == 0) {\\n            return type(uint112).max;\\n        }\\n\\n        // We know totalSupply greater than zero now so if totalAssets is zero\\n        // the vault is in an invalid state and users would be able to mint shares for free\\n        if (totalAssets(assetBreakdown, ILMPVault.TotalAssetPurpose.Global) == 0) {\\n            return 0;\\n        }\\n\\n        return type(uint112).max;\\n    }\\n\\n    /// @notice Returns the amount of tokens in existence.\\n    /// @dev Subtracts any unlocked profit shares that will be burned\\n    function totalSupply(\\n        AutoPoolToken.TokenData storage tokenData,\\n        ILMPVault.ProfitUnlockSettings storage profitUnlockSettings\\n    ) public view returns (uint256 shares) {\\n        shares = tokenData.totalSupply - AutoPoolFees.unlockedShares(profitUnlockSettings, tokenData);\\n    }\\n\\n    function transferAndMint(\\n        IERC20Metadata baseAsset,\\n        ILMPVault.AssetBreakdown storage assetBreakdown,\\n        AutoPoolToken.TokenData storage tokenData,\\n        ILMPVault.ProfitUnlockSettings storage profitUnlockSettings,\\n        uint256 assets,\\n        uint256 shares,\\n        address receiver\\n    ) public {\\n        // From OZ documentation:\\n        // ----------------------\\n        // If _asset is ERC777, `transferFrom` can trigger a reentrancy BEFORE the transfer happens through the\\n        // `tokensToSend` hook. On the other hand, the `tokenReceived` hook, that is triggered after the transfer,\\n        // calls the vault, which is assumed not malicious.\\n        //\\n        // Conclusion: we need to do the transfer before we mint so that any reentrancy would happen before the\\n        // assets are transferred and before the shares are minted, which is a valid state.\\n        // slither-disable-next-line reentrancy-no-eth\\n\\n        baseAsset.safeTransferFrom(msg.sender, address(this), assets);\\n\\n        assetBreakdown.totalIdle += assets;\\n\\n        tokenData.mint(receiver, shares);\\n\\n        emit Deposit(msg.sender, receiver, assets, shares);\\n\\n        emit Nav(assetBreakdown.totalIdle, assetBreakdown.totalDebt, totalSupply(tokenData, profitUnlockSettings));\\n    }\\n\\n    /// @notice Transfer out non-tracked tokens\\n    function recover(address[] calldata tokens, uint256[] calldata amounts, address[] calldata destinations) external {\\n        // Makes sure our params are valid\\n        uint256 len = tokens.length;\\n\\n        Errors.verifyNotZero(len, \\\"len\\\");\\n        Errors.verifyArrayLengths(len, amounts.length, \\\"tokens+amounts\\\");\\n        Errors.verifyArrayLengths(len, destinations.length, \\\"tokens+destinations\\\");\\n\\n        emit TokensRecovered(tokens, amounts, destinations);\\n\\n        for (uint256 i = 0; i < len; ++i) {\\n            (address tokenAddress, uint256 amount, address destination) = (tokens[i], amounts[i], destinations[i]);\\n\\n            // temporarily removing for guarded launch\\n            // // Ensure this isn't an asset we care about\\n            // if (\\n            //     tokenAddress == address(this) || tokenAddress == address(_baseAsset)\\n            //         || _destinations.contains(tokenAddress)\\n            // ) {\\n            //     revert Errors.AssetNotAllowed(tokenAddress);\\n            // }\\n\\n            if (tokenAddress != 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE) {\\n                IERC20Metadata(tokenAddress).safeTransfer(destination, amount);\\n            } else {\\n                payable(destination).call{ value: amount };\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"src/interfaces/strategy/IStrategy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n// Copyright (c) 2023 Tokemak Ops Ltd. All rights reserved.\\npragma solidity 0.8.17;\\n\\nimport { IDestinationVault } from \\\"../vault/IDestinationVault.sol\\\";\\nimport { IERC3156FlashBorrower } from \\\"openzeppelin-contracts/interfaces/IERC3156FlashBorrower.sol\\\";\\n\\ninterface IStrategy {\\n    /* ******************************** */\\n    /*      Events                      */\\n    /* ******************************** */\\n    event DestinationVaultAdded(address destination);\\n    event DestinationVaultRemoved(address destination);\\n    event WithdrawalQueueSet(address[] destinations);\\n    event AddedToRemovalQueue(address destination);\\n    event RemovedFromRemovalQueue(address destination);\\n\\n    error InvalidDestinationVault();\\n\\n    error RebalanceFailed(string message);\\n\\n    /// @notice gets the list of supported destination vaults for the LMP/Strategy\\n    /// @return _destinations List of supported destination vaults\\n    function getDestinations() external view returns (address[] memory _destinations);\\n\\n    /// @notice add supported destination vaults for the LMP/Strategy\\n    /// @param _destinations The list of destination vaults to add\\n    function addDestinations(address[] calldata _destinations) external;\\n\\n    /// @notice remove supported destination vaults for the LMP/Strategy\\n    /// @param _destinations The list of destination vaults to remove\\n    function removeDestinations(address[] calldata _destinations) external;\\n\\n    /// @param destinationIn The address / lp token of the destination vault that will increase\\n    /// @param tokenIn The address of the underlyer token that will be provided by the swapper\\n    /// @param amountIn The amount of the underlying LP tokens that will be received\\n    /// @param destinationOut The address of the destination vault that will decrease\\n    /// @param tokenOut The address of the underlyer token that will be received by the swapper\\n    /// @param amountOut The amount of the tokenOut that will be received by the swapper\\n    struct RebalanceParams {\\n        address destinationIn;\\n        address tokenIn;\\n        uint256 amountIn;\\n        address destinationOut;\\n        address tokenOut;\\n        uint256 amountOut;\\n    }\\n\\n    /// @param destination The address / lp token of the destination vault\\n    /// @param baseApr Base Apr is the yield generated by staking rewards\\n    /// @param feeApr Yield for pool trading fees\\n    /// @param incentiveApr Incentives for LP\\n    /// @param safeTotalSupply Safe supply for LP tokens\\n    /// @param priceReturn Return from price movement to & away from peg\\n    /// @param maxDiscount Max discount to peg\\n    /// @param maxPremium Max premium to peg\\n    /// @param ownedShares Shares owned for this destination\\n    /// @param compositeReturn Total return combined from the individual yield components\\n    /// @param pricePerShare Price per share\\n    /// @param slashingCost The loss due to slashing of the backing\\n    struct SummaryStats {\\n        address destination;\\n        uint256 baseApr;\\n        uint256 feeApr;\\n        uint256 incentiveApr;\\n        uint256 safeTotalSupply;\\n        int256 priceReturn;\\n        int256 maxDiscount;\\n        int256 maxPremium;\\n        uint256 ownedShares;\\n        int256 compositeReturn;\\n        uint256 pricePerShare;\\n        uint256 slashingCost;\\n    }\\n\\n    /// @notice rebalance the LMP from the tokenOut (decrease) to the tokenIn (increase)\\n    /// This uses a flash loan to receive the tokenOut to reduce the working capital requirements of the swapper\\n    /// @param receiver The contract receiving the tokens, needs to implement the\\n    /// `onFlashLoan(address user, address token, uint256 amount, uint256 fee, bytes calldata)` interface\\n    /// @param params Parameters by which to perform the rebalance\\n    /// @param data A data parameter to be passed on to the `receiver` for any custom use\\n    function flashRebalance(\\n        IERC3156FlashBorrower receiver,\\n        RebalanceParams calldata params,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/math/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"src/strategy/WithdrawalQueue.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n// Copyright (c) 2023 Tokemak Ops Ltd. All rights reserved.\\npragma solidity 0.8.17; // their version was using 8.12?\\n\\nimport { StructuredLinkedList } from \\\"src/strategy/StructuredLinkedList.sol\\\";\\n\\n// https://github.com/Layr-Labs/eigenlayer-contracts/blob/master/src/contracts/libraries/StructuredLinkedList.sol\\nlibrary WithdrawalQueue {\\n    using StructuredLinkedList for StructuredLinkedList.List;\\n\\n    error CannotInsertZeroAddress();\\n    error UnexpectedNodeRemoved();\\n    error AddToHeadFailed();\\n    error AddToTailFailed();\\n    error NodeDoesNotExist();\\n\\n    /// @notice Returns true if the address is in the queue.\\n    function addressExists(StructuredLinkedList.List storage queue, address addr) public view returns (bool) {\\n        return StructuredLinkedList.nodeExists(queue, _addressToUint(addr));\\n    }\\n\\n    /// @notice Returns the current head.\\n    function peekHead(StructuredLinkedList.List storage queue) public view returns (address) {\\n        return _uintToAddress(StructuredLinkedList.getHead(queue));\\n    }\\n\\n    /// @notice Returns the current tail.\\n    function peekTail(StructuredLinkedList.List storage queue) public view returns (address) {\\n        return _uintToAddress(StructuredLinkedList.getTail(queue));\\n    }\\n\\n    /// @notice Returns the number of items in the queue\\n    function sizeOf(StructuredLinkedList.List storage queue) public view returns (uint256) {\\n        return StructuredLinkedList.sizeOf(queue);\\n    }\\n\\n    /// @notice Return all items in the queue\\n    /// @dev Enumerates from head to tail\\n    function getList(StructuredLinkedList.List storage self) public view returns (address[] memory list) {\\n        uint256 size = self.sizeOf();\\n        list = new address[](size);\\n\\n        if (size > 0) {\\n            uint256 lastNode = self.getHead();\\n            list[0] = _uintToAddress(lastNode);\\n            for (uint256 i = 1; i < size; ++i) {\\n                (bool exists, uint256 node) = self.getAdjacent(lastNode, true);\\n\\n                if (!exists) {\\n                    revert NodeDoesNotExist();\\n                }\\n\\n                list[i] = _uintToAddress(node);\\n                lastNode = node;\\n            }\\n        }\\n    }\\n\\n    /// @notice Returns the current tail.\\n    function popHead(StructuredLinkedList.List storage queue) public returns (address) {\\n        return _uintToAddress(StructuredLinkedList.popFront(queue));\\n    }\\n\\n    /// @notice remove address toRemove from queue if it exists.\\n    function popAddress(StructuredLinkedList.List storage queue, address toRemove) public {\\n        uint256 addrAsUint = _addressToUint(toRemove);\\n        uint256 _removedNode = StructuredLinkedList.remove(queue, addrAsUint);\\n        if (!((_removedNode == addrAsUint) || (_removedNode == 0))) {\\n            revert UnexpectedNodeRemoved();\\n        }\\n    }\\n\\n    /// @notice returns true if there are no addresses in queue.\\n    function isEmpty(StructuredLinkedList.List storage queue) public view returns (bool) {\\n        return !StructuredLinkedList.listExists(queue);\\n    }\\n\\n    /// @notice if addr in queue, move it to the top\\n    // if addr not in queue, add it to the top of the queue.\\n    // if queue is empty, make a new queue with addr as the only node\\n    function addToHead(StructuredLinkedList.List storage queue, address addr) public {\\n        if (addr == address(0)) {\\n            revert CannotInsertZeroAddress();\\n        }\\n        popAddress(queue, addr);\\n        bool success = StructuredLinkedList.pushFront(queue, _addressToUint(addr));\\n        if (!success) {\\n            revert AddToHeadFailed();\\n        }\\n    }\\n\\n    function getAdjacent(\\n        StructuredLinkedList.List storage queue,\\n        address addr,\\n        bool direction\\n    ) public view returns (address) {\\n        (bool exists, uint256 addrNum) = queue.getAdjacent(_addressToUint(addr), direction);\\n        if (!exists) {\\n            return address(0);\\n        }\\n        return _uintToAddress(addrNum);\\n    }\\n\\n    /// @notice if addr in queue, move it to the end\\n    // if addr not in queue, add it to the end of the queue.\\n    // if queue is empty, make a new queue with addr as the only node\\n    function addToTail(StructuredLinkedList.List storage queue, address addr) public {\\n        if (addr == address(0)) {\\n            revert CannotInsertZeroAddress();\\n        }\\n\\n        popAddress(queue, addr);\\n        bool success = StructuredLinkedList.pushBack(queue, _addressToUint(addr));\\n        if (!success) {\\n            revert AddToTailFailed();\\n        }\\n    }\\n\\n    function _addressToUint(address addr) private pure returns (uint256) {\\n        return uint256(uint160(addr));\\n    }\\n\\n    function _uintToAddress(uint256 x) private pure returns (address) {\\n        return address(uint160(x));\\n    }\\n}\\n\"\r\n    },\r\n    \"src/vault/libs/LMPDestinations.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n// Copyright (c) 2023 Tokemak Ops Ltd. All rights reserved.\\n\\npragma solidity 0.8.17;\\n\\nimport { Errors } from \\\"src/utils/Errors.sol\\\";\\nimport { WithdrawalQueue } from \\\"src/strategy/WithdrawalQueue.sol\\\";\\nimport { StructuredLinkedList } from \\\"src/strategy/StructuredLinkedList.sol\\\";\\nimport { IDestinationVault } from \\\"src/interfaces/vault/IDestinationVault.sol\\\";\\nimport { EnumerableSet } from \\\"openzeppelin-contracts/utils/structs/EnumerableSet.sol\\\";\\nimport { ISystemRegistry } from \\\"src/interfaces/ISystemRegistry.sol\\\";\\nimport { IDestinationVaultRegistry } from \\\"src/interfaces/vault/IDestinationVaultRegistry.sol\\\";\\n\\nlibrary LMPDestinations {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    using WithdrawalQueue for StructuredLinkedList.List;\\n\\n    event DestinationVaultAdded(address destination);\\n    event DestinationVaultRemoved(address destination);\\n    event WithdrawalQueueSet(address[] destinations);\\n    event AddedToRemovalQueue(address destination);\\n    event RemovedFromRemovalQueue(address destination);\\n\\n    error TooManyDeployedDestinations();\\n\\n    /// @notice Maximum amount of destinations we can be deployed to a given time\\n    uint256 public constant MAX_DEPLOYED_DESTINATIONS = 50;\\n\\n    function removeFromRemovalQueue(EnumerableSet.AddressSet storage removalQueue, address vaultToRemove) external {\\n        if (!removalQueue.remove(vaultToRemove)) {\\n            revert Errors.ItemNotFound();\\n        }\\n\\n        emit RemovedFromRemovalQueue(vaultToRemove);\\n    }\\n\\n    /// @notice Remove, or queue to remove if necessary, destinations from the vault\\n    /// @dev No need to handle withdrawal queue as it will be popped once it hits balance 0 in withdraw or rebalance.\\n    /// Debt report queue is handled the same way\\n    /// @param removalQueue Destinations that queued for removal in the vault\\n    /// @param destinations Full list of destinations from the vault\\n    /// @param _destinations Destinations to remove\\n    function removeDestinations(\\n        EnumerableSet.AddressSet storage removalQueue,\\n        EnumerableSet.AddressSet storage destinations,\\n        address[] calldata _destinations\\n    ) external {\\n        for (uint256 i = 0; i < _destinations.length; ++i) {\\n            address dAddress = _destinations[i];\\n            IDestinationVault destination = IDestinationVault(dAddress);\\n\\n            // remove from main list (NOTE: done here so balance check below doesn't explode if address is invalid)\\n            if (!destinations.remove(dAddress)) {\\n                revert Errors.ItemNotFound();\\n            }\\n\\n            if (destination.balanceOf(address(this)) > 0 && !removalQueue.contains(dAddress)) {\\n                // we still have funds in it! move it to removalQueue for rebalancer to handle it later\\n                // slither-disable-next-line unused-return\\n                removalQueue.add(dAddress);\\n\\n                emit AddedToRemovalQueue(dAddress);\\n            }\\n\\n            emit DestinationVaultRemoved(dAddress);\\n        }\\n    }\\n\\n    /// @notice Add a destination to the vault\\n    /// @dev No need to add to debtReport and withdrawal queue from the vault as the rebalance will take care of that\\n    /// @param removalQueue Destinations that queued for removal in the vault\\n    /// @param destinations Full list of destinations from the vault\\n    /// @param _destinations New destinations to add\\n    /// @param systemRegistry System registry reference for the vault\\n    function addDestinations(\\n        EnumerableSet.AddressSet storage removalQueue,\\n        EnumerableSet.AddressSet storage destinations,\\n        address[] calldata _destinations,\\n        ISystemRegistry systemRegistry\\n    ) external {\\n        IDestinationVaultRegistry destinationRegistry = systemRegistry.destinationVaultRegistry();\\n\\n        uint256 numDestinations = _destinations.length;\\n        if (numDestinations == 0) {\\n            revert Errors.InvalidParams();\\n        }\\n\\n        address dAddress;\\n        for (uint256 i = 0; i < numDestinations; ++i) {\\n            dAddress = _destinations[i];\\n\\n            // Address must be setup in our registry\\n            if (dAddress == address(0) || !destinationRegistry.isRegistered(dAddress)) {\\n                revert Errors.InvalidAddress(dAddress);\\n            }\\n\\n            // Don't allow duplicates\\n            if (!destinations.add(dAddress)) {\\n                revert Errors.ItemExists();\\n            }\\n\\n            // A destination could be queued for removal but we decided\\n            // to keep it\\n            // slither-disable-next-line unused-return\\n            removalQueue.remove(dAddress);\\n\\n            emit DestinationVaultAdded(dAddress);\\n        }\\n    }\\n\\n    /// @notice Ensure a destination is in the queues it should be after a rebalance or debt report\\n    /// @param destination The destination to manage\\n    /// @param destinationIn Whether the destination was moved into, true, or out of, false.\\n    function _manageQueuesForDestination(\\n        address destination,\\n        bool destinationIn,\\n        StructuredLinkedList.List storage withdrawalQueue,\\n        StructuredLinkedList.List storage debtReportQueue\\n    ) external {\\n        // The vault itself, when we are moving idle around, should never be\\n        // in the queues.\\n        if (destination != address(this)) {\\n            // If we have a balance, we need to continue to report on it\\n            if (IDestinationVault(destination).balanceOf(address(this)) > 0) {\\n                // For debt reporting, we just updated the values so we can put\\n                // it at the end of the queue.\\n                debtReportQueue.addToTail(destination);\\n\\n                // Debt reporting queue is a proxy for destinations we are deployed to\\n                // Easiest to check after doing the add as \\\"addToTail\\\" can move\\n                // the destination when it already exists. Also, we run this fn for the \\\"out\\\"\\n                // destination first so we're sure to free the spots we can\\n                if (debtReportQueue.sizeOf() > MAX_DEPLOYED_DESTINATIONS) {\\n                    revert TooManyDeployedDestinations();\\n                }\\n\\n                // For withdraws, if we moved into the position then we want to put it\\n                // at the end of the queue so we don't exit from our higher projected\\n                // apr positions first. If we exited, that means its a lower apr\\n                // and we want to continue to exit via user withdrawals so put it at the top\\n                if (destinationIn) withdrawalQueue.addToTail(destination);\\n                else withdrawalQueue.addToHead(destination);\\n            } else {\\n                // If we no longer have a balance we don't need to continue to report\\n                // on it and we also have nothing to withdraw from it\\n                debtReportQueue.popAddress(destination);\\n                withdrawalQueue.popAddress(destination);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"src/interfaces/ISystemComponent.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n// Copyright (c) 2023 Tokemak Ops Ltd. All rights reserved.\\npragma solidity 0.8.17;\\n\\n/// @notice Stores a reference to the registry for this system\\ninterface ISystemComponent {\\n    /// @notice The system instance this contract is tied to\\n    function getSystemRegistry() external view returns (address registry);\\n}\\n\"\r\n    },\r\n    \"src/interfaces/strategy/ILMPStrategy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n// Copyright (c) 2023 Tokemak Ops Ltd. All rights reserved.\\npragma solidity 0.8.17;\\n\\nimport { IStrategy } from \\\"src/interfaces/strategy/IStrategy.sol\\\";\\n\\ninterface ILMPStrategy {\\n    /// @notice verify that a rebalance (swap between destinations) meets all the strategy constraints\\n    /// @dev Signature identical to IStrategy.verifyRebalance\\n    function verifyRebalance(\\n        IStrategy.RebalanceParams memory,\\n        IStrategy.SummaryStats memory\\n    ) external returns (bool, string memory message);\\n\\n    /// @notice called by the LMPVault when NAV is updated\\n    /// @dev can only be called by the strategy's registered LMPVault\\n    /// @param navPerShare The navPerShare to record\\n    function navUpdate(uint256 navPerShare) external;\\n\\n    /// @notice called by the LMPVault when a rebalance is completed\\n    /// @dev can only be called by the strategy's registered LMPVault\\n    /// @param rebalanceParams The parameters for the rebalance that was executed\\n    function rebalanceSuccessfullyExecuted(IStrategy.RebalanceParams memory rebalanceParams) external;\\n\\n    /// @notice called by the LMPVault during rebalance process\\n    /// @param rebalanceParams The parameters for the rebalance that was executed\\n    function getRebalanceOutSummaryStats(IStrategy.RebalanceParams memory rebalanceParams)\\n        external\\n        returns (IStrategy.SummaryStats memory outSummary);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/interfaces/IERC4626.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (interfaces/IERC4626.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/IERC20.sol\\\";\\nimport \\\"../token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\\n/**\\n * @dev Interface of the ERC4626 \\\"Tokenized Vault Standard\\\", as defined in\\n * https://eips.ethereum.org/EIPS/eip-4626[ERC-4626].\\n *\\n * _Available since v4.7._\\n */\\ninterface IERC4626 is IERC20, IERC20Metadata {\\n    event Deposit(address indexed sender, address indexed owner, uint256 assets, uint256 shares);\\n\\n    event Withdraw(\\n        address indexed sender,\\n        address indexed receiver,\\n        address indexed owner,\\n        uint256 assets,\\n        uint256 shares\\n    );\\n\\n    /**\\n     * @dev Returns the address of the underlying token used for the Vault for accounting, depositing, and withdrawing.\\n     *\\n     * - MUST be an ERC-20 token contract.\\n     * - MUST NOT revert.\\n     */\\n    function asset() external view returns (address assetTokenAddress);\\n\\n    /**\\n     * @dev Returns the total amount of the underlying asset that is \u201cmanaged\u201d by Vault.\\n     *\\n     * - SHOULD include any compounding that occurs from yield.\\n     * - MUST be inclusive of any fees that are charged against assets in the Vault.\\n     * - MUST NOT revert.\\n     */\\n    function totalAssets() external view returns (uint256 totalManagedAssets);\\n\\n    /**\\n     * @dev Returns the amount of shares that the Vault would exchange for the amount of assets provided, in an ideal\\n     * scenario where all the conditions are met.\\n     *\\n     * - MUST NOT be inclusive of any fees that are charged against assets in the Vault.\\n     * - MUST NOT show any variations depending on the caller.\\n     * - MUST NOT reflect slippage or other on-chain conditions, when performing the actual exchange.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: This calculation MAY NOT reflect the \u201cper-user\u201d price-per-share, and instead should reflect the\\n     * \u201caverage-user\u2019s\u201d price-per-share, meaning what the average user should expect to see when exchanging to and\\n     * from.\\n     */\\n    function convertToShares(uint256 assets) external view returns (uint256 shares);\\n\\n    /**\\n     * @dev Returns the amount of assets that the Vault would exchange for the amount of shares provided, in an ideal\\n     * scenario where all the conditions are met.\\n     *\\n     * - MUST NOT be inclusive of any fees that are charged against assets in the Vault.\\n     * - MUST NOT show any variations depending on the caller.\\n     * - MUST NOT reflect slippage or other on-chain conditions, when performing the actual exchange.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: This calculation MAY NOT reflect the \u201cper-user\u201d price-per-share, and instead should reflect the\\n     * \u201caverage-user\u2019s\u201d price-per-share, meaning what the average user should expect to see when exchanging to and\\n     * from.\\n     */\\n    function convertToAssets(uint256 shares) external view returns (uint256 assets);\\n\\n    /**\\n     * @dev Returns the maximum amount of the underlying asset that can be deposited into the Vault for the receiver,\\n     * through a deposit call.\\n     *\\n     * - MUST return a limited value if receiver is subject to some deposit limit.\\n     * - MUST return 2 ** 256 - 1 if there is no limit on the maximum amount of assets that may be deposited.\\n     * - MUST NOT revert.\\n     */\\n    function maxDeposit(address receiver) external view returns (uint256 maxAssets);\\n\\n    /**\\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their deposit at the current block, given\\n     * current on-chain conditions.\\n     *\\n     * - MUST return as close to and no more than the exact amount of Vault shares that would be minted in a deposit\\n     *   call in the same transaction. I.e. deposit should return the same or more shares as previewDeposit if called\\n     *   in the same transaction.\\n     * - MUST NOT account for deposit limits like those returned from maxDeposit and should always act as though the\\n     *   deposit would be accepted, regardless if the user has enough tokens approved, etc.\\n     * - MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: any unfavorable discrepancy between convertToShares and previewDeposit SHOULD be considered slippage in\\n     * share price or some other type of condition, meaning the depositor will lose assets by depositing.\\n     */\\n    function previewDeposit(uint256 assets) external view returns (uint256 shares);\\n\\n    /**\\n     * @dev Mints shares Vault shares to receiver by depositing exactly amount of underlying tokens.\\n     *\\n     * - MUST emit the Deposit event.\\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\\n     *   deposit execution, and are accounted for during deposit.\\n     * - MUST revert if all of assets cannot be deposited (due to deposit limit being reached, slippage, the user not\\n     *   approving enough underlying tokens to the Vault contract, etc).\\n     *\\n     * NOTE: most implementations will require pre-approval of the Vault with the Vault\u2019s underlying asset token.\\n     */\\n    function deposit(uint256 assets, address receiver) external returns (uint256 shares);\\n\\n    /**\\n     * @dev Returns the maximum amount of the Vault shares that can be minted for the receiver, through a mint call.\\n     * - MUST return a limited value if receiver is subject to some mint limit.\\n     * - MUST return 2 ** 256 - 1 if there is no limit on the maximum amount of shares that may be minted.\\n     * - MUST NOT revert.\\n     */\\n    function maxMint(address receiver) external view returns (uint256 maxShares);\\n\\n    /**\\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their mint at the current block, given\\n     * current on-chain conditions.\\n     *\\n     * - MUST return as close to and no fewer than the exact amount of assets that would be deposited in a mint call\\n     *   in the same transaction. I.e. mint should return the same or fewer assets as previewMint if called in the\\n     *   same transaction.\\n     * - MUST NOT account for mint limits like those returned from maxMint and should always act as though the mint\\n     *   would be accepted, regardless if the user has enough tokens approved, etc.\\n     * - MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: any unfavorable discrepancy between convertToAssets and previewMint SHOULD be considered slippage in\\n     * share price or some other type of condition, meaning the depositor will lose assets by minting.\\n     */\\n    function previewMint(uint256 shares) external view returns (uint256 assets);\\n\\n    /**\\n     * @dev Mints exactly shares Vault shares to receiver by depositing amount of underlying tokens.\\n     *\\n     * - MUST emit the Deposit event.\\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the mint\\n     *   execution, and are accounted for during mint.\\n     * - MUST revert if all of shares cannot be minted (due to deposit limit being reached, slippage, the user not\\n     *   approving enough underlying tokens to the Vault contract, etc).\\n     *\\n     * NOTE: most implementations will require pre-approval of the Vault with the Vault\u2019s underlying asset token.\\n     */\\n    function mint(uint256 shares, address receiver) external returns (uint256 assets);\\n\\n    /**\\n     * @dev Returns the maximum amount of the underlying asset that can be withdrawn from the owner balance in the\\n     * Vault, through a withdraw call.\\n     *\\n     * - MUST return a limited value if owner is subject to some withdrawal limit or timelock.\\n     * - MUST NOT revert.\\n     */\\n    function maxWithdraw(address owner) external view returns (uint256 maxAssets);\\n\\n    /**\\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their withdrawal at the current block,\\n     * given current on-chain conditions.\\n     *\\n     * - MUST return as close to and no fewer than the exact amount of Vault shares that would be burned in a withdraw\\n     *   call in the same transaction. I.e. withdraw should return the same or fewer shares as previewWithdraw if\\n     *   called\\n     *   in the same transaction.\\n     * - MUST NOT account for withdrawal limits like those returned from maxWithdraw and should always act as though\\n     *   the withdrawal would be accepted, regardless if the user has enough shares, etc.\\n     * - MUST be inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: any unfavorable discrepancy between convertToShares and previewWithdraw SHOULD be considered slippage in\\n     * share price or some other type of condition, meaning the depositor will lose assets by depositing.\\n     */\\n    function previewWithdraw(uint256 assets) external view returns (uint256 shares);\\n\\n    /**\\n     * @dev Burns shares from owner and sends exactly assets of underlying tokens to receiver.\\n     *\\n     * - MUST emit the Withdraw event.\\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\\n     *   withdraw execution, and are accounted for during withdraw.\\n     * - MUST revert if all of assets cannot be withdrawn (due to withdrawal limit being reached, slippage, the owner\\n     *   not having enough shares, etc).\\n     *\\n     * Note that some implementations will require pre-requesting to the Vault before a withdrawal may be performed.\\n     * Those methods should be performed separately.\\n     */\\n    function withdraw(\\n        uint256 assets,\\n        address receiver,\\n        address owner\\n    ) external returns (uint256 shares);\\n\\n    /**\\n     * @dev Returns the maximum amount of Vault shares that can be redeemed from the owner balance in the Vault,\\n     * through a redeem call.\\n     *\\n     * - MUST return a limited value if owner is subject to some withdrawal limit or timelock.\\n     * - MUST return balanceOf(owner) if owner is not subject to any withdrawal limit or timelock.\\n     * - MUST NOT revert.\\n     */\\n    function maxRedeem(address owner) external view returns (uint256 maxShares);\\n\\n    /**\\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their redeemption at the current block,\\n     * given current on-chain conditions.\\n     *\\n     * - MUST return as close to and no more than the exact amount of assets that would be withdrawn in a redeem call\\n     *   in the same transaction. I.e. redeem should return the same or more assets as previewRedeem if called in the\\n     *   same transaction.\\n     * - MUST NOT account for redemption limits like those returned from maxRedeem and should always act as though the\\n     *   redemption would be accepted, regardless if the user has enough shares, etc.\\n     * - MUST be inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: any unfavorable discrepancy between convertToAssets and previewRedeem SHOULD be considered slippage in\\n     * share price or some other type of condition, meaning the depositor will lose assets by redeeming.\\n     */\\n    function previewRedeem(uint256 shares) external view returns (uint256 assets);\\n\\n    /**\\n     * @dev Burns exactly shares from owner and sends assets of underlying tokens to receiver.\\n     *\\n     * - MUST emit the Withdraw event.\\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\\n     *   redeem execution, and are accounted for during redeem.\\n     * - MUST revert if all of shares cannot be redeemed (due to withdrawal limit being reached, slippage, the owner\\n     *   not having enough shares, etc).\\n     *\\n     * NOTE: some implementations will require pre-requesting to the Vault before a withdrawal may be performed.\\n     * Those methods should be performed separately.\\n     */\\n    function redeem(\\n        uint256 shares,\\n        address receiver,\\n        address owner\\n    ) external returns (uint256 assets);\\n}\\n\"\r\n    },\r\n    \"src/interfaces/rewarders/IMainRewarder.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n// Copyright (c) 2023 Tokemak Ops Ltd. All rights reserved.\\npragma solidity 0.8.17;\\n\\nimport { IBaseRewarder } from \\\"./IBaseRewarder.sol\\\";\\nimport { IExtraRewarder } from \\\"src/interfaces/rewarders/IExtraRewarder.sol\\\";\\n\\ninterface IMainRewarder is IBaseRewarder {\\n    error ExtraRewardsNotAllowed();\\n\\n    event ExtraRewardAdded(address reward);\\n    event ExtraRewardsCleared();\\n    event ExtraRewardRemoved(address reward);\\n\\n    /**\\n     * @notice Adds an ExtraRewarder contract address to the extraRewards array.\\n     * @param reward The address of the ExtraRewarder contract.\\n     */\\n    function addExtraReward(address reward) external;\\n\\n    /**\\n     * @notice Withdraws the specified amount of tokens from the vault for the specified account, and transfers all\\n     * rewards for the account from this contract and any linked extra reward contracts.\\n     * @param account The address of the account to withdraw tokens and claim rewards for.\\n     * @param amount The amount of tokens to withdraw.\\n     * @param claim If true, claims all rewards for the account from this contract and any linked extra reward\\n     * contracts.\\n     */\\n    function withdraw(address account, uint256 amount, bool claim) external;\\n\\n    /**\\n     * @notice Clears the extraRewards array.\\n     */\\n    function clearExtraRewards() external;\\n\\n    /**\\n     * @notice Claims and transfers all rewards for the specified account from this contract and any linked extra reward\\n     * contracts.\\n     * @dev If claimExtras is true, also claims all rewards from linked extra reward contracts.\\n     * @param account The address of the account to claim rewards for.\\n     * @param claimExtras If true, claims rewards from linked extra reward contracts.\\n     */\\n    function getReward(address account, bool claimExtras) external;\\n\\n    /**\\n     * @notice Number of extra rewards currently registered\\n     */\\n    function extraRewardsLength() external view returns (uint256);\\n\\n    /**\\n     * @notice Get the rewarder at the specified index\\n     */\\n    function getExtraRewarder(uint256 index) external view returns (IExtraRewarder);\\n}\\n\"\r\n    },\r\n    \"src/strategy/StructuredLinkedList.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity =0.8.17;\\n\\n/**\\n * @title StructuredLinkedList\\n * @author Vittorio Minacori (https://github.com/vittominacori)\\n * @dev An utility library for using sorted linked list data structures in your Solidity project.\\n * @notice Adapted from\\n * https://github.com/Layr-Labs/eigenlayer-contracts/blob/master/src/contracts/libraries/StructuredLinkedList.sol\\n */\\nlibrary StructuredLinkedList {\\n    uint256 private constant _NULL = 0;\\n    uint256 private constant _HEAD = 0;\\n\\n    bool private constant _PREV = false;\\n    bool private constant _NEXT = true;\\n\\n    struct List {\\n        uint256 size;\\n        mapping(uint256 => mapping(bool => uint256)) list;\\n    }\\n\\n    /**\\n     * @dev Checks if the list exists\\n     * @param self stored linked list from contract\\n     * @return bool true if list exists, false otherwise\\n     */\\n    function listExists(List storage self) public view returns (bool) {\\n        // if the head nodes previous or next pointers both point to itself, then there are no items in the list\\n        if (self.list[_HEAD][_PREV] != _HEAD || self.list[_HEAD][_NEXT] != _HEAD) {\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Checks if the node exists\\n     * @param self stored linked list from contract\\n     * @param _node a node to search for\\n     * @return bool true if node exists, false otherwise\\n     */\\n    function nodeExists(List storage self, uint256 _node) public view returns (bool) {\\n        if (self.list[_node][_PREV] == _HEAD && self.list[_node][_NEXT] == _HEAD) {\\n            if (self.list[_HEAD][_NEXT] == _node) {\\n                return true;\\n            } else {\\n                return false;\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the number of elements in the list\\n     * @param self stored linked list from contract\\n     * @return uint256\\n     */\\n    // slither-disable-next-line dead-code\\n    function sizeOf(List storage self) public view returns (uint256) {\\n        return self.size;\\n    }\\n\\n    /**\\n     * @dev Gets the head of the list\\n     * @param self stored linked list from contract\\n     * @return uint256 the head of the list\\n     */\\n    function getHead(List storage self) public view returns (uint256) {\\n        return self.list[_HEAD][_NEXT];\\n    }\\n\\n    /**\\n     * @dev Gets the head of the list\\n     * @param self stored linked list from contract\\n     * @return uint256 the head of the list\\n     */\\n    function getTail(List storage self) public view returns (uint256) {\\n        return self.list[_HEAD][_PREV];\\n    }\\n\\n    /**\\n     * @dev Returns the links of a node as a tuple\\n     * @param self stored linked list from contract\\n     * @param _node id of the node to get\\n     * @return bool, uint256, uint256 true if node exists or false otherwise, previous node, next node\\n     */\\n    // slither-disable-next-line dead-code\\n    function getNode(List storage self, uint256 _node) public view returns (bool, uint256, uint256) {\\n        if (!nodeExists(self, _node)) {\\n            return (false, 0, 0);\\n        } else {\\n            return (true, self.list[_node][_PREV], self.list[_node][_NEXT]);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the link of a node `_node` in direction `_direction`.\\n     * @param self stored linked list from contract\\n     * @param _node id of the node to step from\\n     * @param _direction direction to step in\\n     * @return bool, uint256 true if node exists or false otherwise, node in _direction\\n     */\\n    // slither-disable-next-line dead-code\\n    function getAdjacent(List storage self, uint256 _node, bool _direction) public view returns (bool, uint256) {\\n        if (!nodeExists(self, _node)) {\\n            return (false, 0);\\n        } else {\\n            uint256 adjacent = self.list[_node][_direction];\\n            return (adjacent != _HEAD, adjacent);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the link of a node `_node` in direction `_NEXT`.\\n     * @param self stored linked list from contract\\n     * @param _node id of the node to step from\\n     * @return bool, uint256 true if node exists or false otherwise, next node\\n     */\\n    // slither-disable-next-line dead-code\\n    function getNextNode(List storage self, uint256 _node) public view returns (bool, uint256) {\\n        return getAdjacent(self, _node, _NEXT);\\n    }\\n\\n    /**\\n     * @dev Returns the link of a node `_node` in direction `_PREV`.\\n     * @param self stored linked list from contract\\n     * @param _node id of the node to step from\\n     * @return bool, uint256 true if node exists or false otherwise, previous node\\n     */\\n    // slither-disable-next-line dead-code\\n    function getPreviousNode(List storage self, uint256 _node) public view returns (bool, uint256) {\\n        return getAdjacent(self, _node, _PREV);\\n    }\\n\\n    /**\\n     * @dev Insert node `_new` beside existing node `_node` in direction `_NEXT`.\\n     * @param self stored linked list from contract\\n     * @param _node existing node\\n     * @param _new  new node to insert\\n     * @return bool true if success, false otherwise\\n     */\\n    // slither-disable-next-line dead-code\\n    function insertAfter(List storage self, uint256 _node, uint256 _new) public returns (bool) {\\n        return _insert(self, _node, _new, _NEXT);\\n    }\\n\\n    /**\\n     * @dev Insert node `_new` beside existing node `_node` in direction `_PREV`.\\n     * @param self stored linked list from contract\\n     * @param _node existing node\\n     * @param _new  new node to insert\\n     * @return bool true if success, false otherwise\\n     */\\n    // slither-disable-next-line dead-code\\n    function insertBefore(List storage self, uint256 _node, uint256 _new) public returns (bool) {\\n        return _insert(self, _node, _new, _PREV);\\n    }\\n\\n    /**\\n     * @dev Removes an entry from the linked list\\n     * @param self stored linked list from contract\\n     * @param _node node to remove from the list\\n     * @return uint256 the removed node\\n     */\\n    function remove(List storage self, uint256 _node) public returns (uint256) {\\n        if ((_node == _NULL) || (!nodeExists(self, _node))) {\\n            return 0;\\n        }\\n        _createLink(self, self.list[_node][_PREV], self.list[_node][_NEXT], _NEXT);\\n        delete self.list[_node][_PREV];\\n        delete self.list[_node][_NEXT];\\n\\n        self.size -= 1;\\n\\n        return _node;\\n    }\\n\\n    /**\\n     * @dev Pushes an entry to the head of the linked list\\n     * @param self stored linked list from contract\\n     * @param _node new entry to push to the head\\n     * @return bool true if success, false otherwise\\n     */\\n    function pushFront(List storage self, uint256 _node) public returns (bool) {\\n        return _push(self, _node, _NEXT);\\n    }\\n\\n    /**\\n     * @dev Pushes an entry to the tail of the linked list\\n     * @param self stored linked list from contract\\n     * @param _node new entry to push to the tail\\n     * @return bool true if success, false otherwise\\n     */\\n    function pushBack(List storage self, uint256 _node) public returns (bool) {\\n        return _push(self, _node, _PREV);\\n    }\\n\\n    /**\\n     * @dev Pops the first entry from the head of the linked list\\n     * @param self stored linked list from contract\\n     * @return uint256 the removed node\\n     */\\n    // slither-disable-next-line dead-code\\n    function popFront(List storage self) public returns (uint256) {\\n        return _pop(self, _NEXT);\\n    }\\n\\n    /**\\n     * @dev Pops the first entry from the tail of the linked list\\n     * @param self stored linked list from contract\\n     * @return uint256 the removed node\\n     */\\n    // slither-disable-next-line dead-code\\n    function popBack(List storage self) public returns (uint256) {\\n        return _pop(self, _PREV);\\n    }\\n\\n    /**\\n     * @dev Pushes an entry to the head of the linked list\\n     * @param self stored linked list from contract\\n     * @param _node new entry to push to the head\\n     * @param _direction push to the head (_NEXT) or tail (_PREV)\\n     * @return bool true if success, false otherwise\\n     */\\n    function _push(List storage self, uint256 _node, bool _direction) private returns (bool) {\\n        return _insert(self, _HEAD, _node, _direction);\\n    }\\n\\n    /**\\n     * @dev Pops the first entry from the linked list\\n     * @param self stored linked list from contract\\n     * @param _direction pop from the head (_NEXT) or the tail (_PREV)\\n     * @return uint256 the removed node\\n     */\\n    // slither-disable-next-line dead-code\\n    function _pop(List storage self, bool _direction) private returns (uint256) {\\n        uint256 adj;\\n        (, adj) = getAdjacent(self, _HEAD, _direction);\\n        return remove(self, adj);\\n    }\\n\\n    /**\\n     * @dev Insert node `_new` beside existing node `_node` in direction `_direction`.\\n     * @param self stored linked list from contract\\n     * @param _node existing node\\n     * @param _new  new node to insert\\n     * @param _direction direction to insert node in\\n     * @return bool true if success, false otherwise\\n     */\\n    function _insert(List storage self, uint256 _node, uint256 _new, bool _direction) private returns (bool) {\\n        if (!nodeExists(self, _new) && nodeExists(self, _node)) {\\n            uint256 c = self.list[_node][_direction];\\n            _createLink(self, _node, _new, _direction);\\n            _createLink(self, _new, c, _direction);\\n\\n            self.size += 1;\\n\\n            return true;\\n        }\\n\\n        return false;\\n    }\\n\\n    /**\\n     * @dev Creates a bidirectional link between two nodes on direction `_direction`\\n     * @param self stored linked list from contract\\n     * @param _node existing node\\n     * @param _link node to link to in the _direction\\n     * @param _direction direction to insert node in\\n     */\\n    function _createLink(List storage self, uint256 _node, uint256 _link, bool _direction) private {\\n        self.list[_link][!_direction] = _node;\\n        self.list[_node][_direction] = _link;\\n    }\\n}\\n\"\r\n    },\r\n    \"src/interfaces/vault/IDestinationVault.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n// Copyright (c) 2023 Tokemak Ops Ltd. All rights reserved.\\npragma solidity 0.8.17;\\n\\nimport { IERC20Metadata as IERC20 } from \\\"openzeppelin-contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\\nimport { IBaseAssetVault } from \\\"./IBaseAssetVault.sol\\\";\\nimport { IMainRewarder } from \\\"src/interfaces/rewarders/IMainRewarder.sol\\\";\\nimport { IERC20Metadata as IERC20 } from \\\"openzeppelin-contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport { IDexLSTStats } from \\\"src/interfaces/stats/IDexLSTStats.sol\\\";\\n\\ninterface IDestinationVault is IBaseAssetVault, IERC20 {\\n    enum VaultShutdownStatus {\\n        Active,\\n        Deprecated,\\n        Exploit\\n    }\\n\\n    error LogicDefect();\\n    error UnreachableError();\\n    error BaseAmountReceived(uint256 amount);\\n\\n    /* ******************************** */\\n    /* View                             */\\n    /* ******************************** */\\n\\n    /// @notice The asset that is deposited into the vault\\n    function underlying() external view returns (address);\\n\\n    /// @notice The asset that rewards and withdrawals to LMP is done in\\n    /// @inheritdoc IBaseAssetVault\\n    function baseAsset() external view override returns (address);\\n\\n    /// @notice Debt balance of underlying asset that is in contract.  This\\n    ///     value includes only assets that are known as debt by the rest of the\\n    ///     system (i.e. transferred in on rebalance), and does not include\\n    ///     extraneous amounts of underlyer that may have ended up in this contract.\\n    function internalDebtBalance() external view returns (uint256);\\n\\n    /// @notice Debt balance of underlyering asset staked externally.  This value only\\n    ///     includes assets known as debt to the rest of the system, and does not include\\n    ///     any assets staked on behalf of the DV in external contracts.\\n    function externalDebtBalance() external view returns (uint256);\\n\\n    /// @notice Returns true value of _underlyer in DV.  Debt + tokens that may have\\n    ///     been transferred into the contract outside of rebalance.\\n    function internalQueriedBalance() external view returns (uint256);\\n\\n    /// @notice Returns true value of staked _underlyer in external contract.  This\\n    ///     will include any _underlyer that has been staked on behalf of the DV.\\n    function externalQueriedBalance() external view returns (uint256);\\n\\n    /// @notice Balance of underlying debt, sum of `externalDebtBalance()` and `internalDebtBalance()`.\\n    function balanceOfUnderlyingDebt() external view returns (uint256);\\n\\n    /// @notice Rewarder for this vault\\n    function rewarder() external view returns (address);\\n\\n    /// @notice Exchange this destination vault points to\\n    function exchangeName() external view returns (string memory);\\n\\n    /// @notice Tokens that base asset can be swapped into\\n    function underlyingTokens() external view returns (address[] memory);\\n\\n    /* ******************************** */\\n    /* Events                           */\\n    /* ******************************** */\\n\\n    event Donated(address sender, uint256 amount);\\n    event Withdraw(\\n        uint256 target, uint256 actual, uint256 debtLoss, uint256 claimLoss, uint256 fromIdle, uint256 fromDebt\\n    );\\n\\n    /* ******************************** */\\n    /* Errors                           */\\n    /* ******************************** */\\n\\n    error ZeroAddress(string paramName);\\n    error InvalidShutdownStatus(VaultShutdownStatus status);\\n\\n    /* ******************************** */\\n    /* Functions                        */\\n    /* ******************************** */\\n\\n    /// @notice Setup the contract. These will be cloned so no constructor\\n    /// @param baseAsset_ Base asset of the system. WETH/USDC/etc\\n    /// @param underlyer_ Underlying asset the vault will wrap\\n    /// @param rewarder_ Reward tracker for this vault\\n    /// @param incentiveCalculator_ Incentive calculator for this vault\\n    /// @param additionalTrackedTokens_ Additional tokens that should be considered 'tracked'\\n    /// @param params_ Any extra parameters needed to setup the contract\\n    function initialize(\\n        IERC20 baseAsset_,\\n        IERC20 underlyer_,\\n        IMainRewarder rewarder_,\\n        address incentiveCalculator_,\\n        address[] memory additionalTrackedTokens_,\\n        bytes memory params_\\n    ) external;\\n\\n    /// @notice Calculates the current value of our debt\\n    /// @dev Queries the current value of all tokens we have deployed, whether its a single place, multiple, staked, etc\\n    /// @return value The current value of our debt in terms of the baseAsset\\n    function debtValue() external returns (uint256 value);\\n\\n    function getRangePricesLP() external returns (uint256 spotPrice, uint256 safePrice, bool isSpotSafe);\\n\\n    /// @notice Calculates the current value of a portion of the debt based on shares\\n    /// @dev Queries the current value of all tokens we have deployed, whether its a single place, multiple, staked, etc\\n    /// @param shares The number of shares to value\\n    /// @return value The current value of our debt in terms of the baseAsset\\n    function debtValue(uint256 shares) external returns (uint256 value);\\n\\n    /// @notice Collects any earned rewards from staking, incentives, etc. Transfers to sender\\n    /// @dev Should be limited to LIQUIDATOR_ROLE. Rewards must be collected before claimed\\n    /// @return amounts amount of rewards claimed for each token\\n    /// @return tokens tokens claimed\\n    function collectRewards() external returns (uint256[] memory amounts, address[] memory tokens);\\n\\n    /// @notice Pull any non-tracked token to the specified destination\\n    /// @dev Should be limited to TOKEN_RECOVERY_ROLE\\n    function recover(address[] calldata tokens, uint256[] calldata amounts, address[] calldata destinations) external;\\n\\n    /// @notice Recovers any extra underlying both in DV and staked externally not tracked as debt.\\n    /// @dev Should be limited to TOKEN_SAVER_ROLE.\\n    /// @param destination The address to send excess underlyer to.\\n    function recoverUnderlying(address destination) external;\\n\\n    /// @notice Deposit underlying to receive destination vault shares\\n    /// @param amount amount of base lp asset to deposit\\n    function depositUnderlying(uint256 amount) external returns (uint256 shares);\\n\\n    /// @notice Withdraw underlying by burning destination vault shares\\n    /// @param shares amount of destination vault shares to burn\\n    /// @param to destination of the underlying asset\\n    /// @return amount underlyer amount 'to' received\\n    function withdrawUnderlying(uint256 shares, address to) external returns (uint256 amount);\\n\\n    /// @notice Burn specified shares for underlyer swapped to base asset\\n    /// @param shares amount of vault shares to burn\\n    /// @param to destination of the base asset\\n    /// @return amount base asset amount 'to' received\\n    function withdrawBaseAsset(uint256 shares, address to) external returns (uint256 amount);\\n\\n    /// @notice Estimate the base asset amount that can be withdrawn given a certain number of shares. This function\\n    /// performs a \\\"simulation\\\" of the withdrawal process. It will actually execute the withdrawal, but will then revert\\n    /// the transaction, returning the estimated amount in the revert reason.\\n    /// @param shares The number of shares to be used in the estimation.\\n    /// @param to The address to receive the withdrawn amount.\\n    /// @param account Address involved in the withdrawal; Must be set to address(0).\\n    /// @return The estimated base asset amount.\\n    function estimateWithdrawBaseAsset(uint256 shares, address to, address account) external returns (uint256);\\n\\n    /// @notice Initiate the shutdown procedures for this vault\\n    /// @dev Should pull back tokens from staking locations\\n    function shutdown(VaultShutdownStatus reason) external;\\n\\n    /// @notice True if the vault has been shutdown\\n    function isShutdown() external view returns (bool);\\n\\n    /// @notice Returns the reason for shutdown (or `Active` if not shutdown)\\n    function shutdownStatus() external view returns (VaultShutdownStatus);\\n\\n    /// @notice Stats contract for this vault\\n    function getStats() external returns (IDexLSTStats);\\n\\n    /// @notice get the marketplace rewards\\n    /// @return rewardTokens list of reward token addresses\\n    /// @return rewardRates list of reward rates\\n    function getMarketplaceRewards() external returns (uint256[] memory rewardTokens, uint256[] memory rewardRates);\\n\\n    /// @notice Get the address of the underlying pool the vault points to\\n    /// @return poolAddress address of the underlying pool\\n    function getPool() external view returns (address poolAddress);\\n\\n    /// @notice Gets the spot price of the underlying LP token\\n    /// @dev Price validated to be inside our tolerance against safe price. Will revert if outside.\\n    /// @return price Value of 1 unit of the underlying LP token in terms of the base asset\\n    function getValidatedSpotPrice() external returns (uint256 price);\\n\\n    /// @notice Get the lowest price we can get for the LP token\\n    /// @dev This price can be attacked is not validate to be in any range\\n    /// @return price Value of 1 unit of the underlying LP token in terms of the base asset\\n    function getUnderlyerFloorPrice() external returns (uint256 price);\\n\\n    /// @notice Get the highest price we can get for the LP token\\n    /// @dev This price can be attacked is not validate to be in any range\\n    /// @return price Value of 1 unit of the underlying LP token in terms of the base asset\\n    function getUnderlyerCeilingPrice() external returns (uint256 price);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.1) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!Address.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/interfaces/IERC3156FlashBorrower.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (interfaces/IERC3156FlashBorrower.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC3156 FlashBorrower, as defined in\\n * https://eips.ethereum.org/EIPS/eip-3156[ERC-3156].\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC3156FlashBorrower {\\n    /**\\n     * @dev Receive a flash loan.\\n     * @param initiator The initiator of the loan.\\n     * @param token The loan currency.\\n     * @param amount The amount of tokens lent.\\n     * @param fee The additional amount of tokens to repay.\\n     * @param data Arbitrary data structure, intended to contain user-defined parameters.\\n     * @return The keccak256 hash of \\\"IERC3156FlashBorrower.onFlashLoan\\\"\\n     */\\n    function onFlashLoan(\\n        address initiator,\\n        address token,\\n        uint256 amount,\\n        uint256 fee,\\n        bytes calldata data\\n    ) external returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"src/rewarders/MainRewarder.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n// Copyright (c) 2023 Tokemak Ops Ltd. All rights reserved.\\npragma solidity 0.8.17;\\n\\nimport { ReentrancyGuard } from \\\"openzeppelin-contracts/security/ReentrancyGuard.sol\\\";\\nimport { EnumerableSet } from \\\"openzeppelin-contracts/utils/structs/EnumerableSet.sol\\\";\\n\\nimport { ISystemRegistry } from \\\"src/interfaces/ISystemRegistry.sol\\\";\\n\\nimport { IBaseRewarder } from \\\"src/interfaces/rewarders/IBaseRewarder.sol\\\";\\nimport { IMainRewarder } from \\\"src/interfaces/rewarders/IMainRewarder.sol\\\";\\nimport { IExtraRewarder } from \\\"src/interfaces/rewarders/IExtraRewarder.sol\\\";\\nimport { AbstractRewarder } from \\\"src/rewarders/AbstractRewarder.sol\\\";\\n\\nimport { Roles } from \\\"src/libs/Roles.sol\\\";\\nimport { Errors } from \\\"src/utils/Errors.sol\\\";\\n\\n/**\\n * @title MainRewarder\\n * @dev Contract is abstract to enforce proper role designation on construction\\n * @notice The MainRewarder contract extends the AbstractRewarder and\\n * manages the distribution of main rewards along with additional rewards\\n * from ExtraRewarder contracts.\\n */\\nabstract contract MainRewarder is AbstractRewarder, IMainRewarder, ReentrancyGuard {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    /// @notice True if additional reward tokens/contracts are allowed to be added\\n    /// @dev Destination Vaults should not allow extras. LMP should.\\n    bool public immutable allowExtraRewards;\\n\\n    EnumerableSet.AddressSet private _extraRewards;\\n\\n    uint256 private _totalSupply;\\n    mapping(address => uint256) private _balances;\\n\\n    constructor(\\n        ISystemRegistry _systemRegistry,\\n        address _rewardToken,\\n        uint256 _newRewardRatio,\\n        uint256 _durationInBlock,\\n        bytes32 _rewardRole,\\n        bool _allowExtraRewards\\n    ) AbstractRewarder(_systemRegistry, _rewardToken, _newRewardRatio, _durationInBlock, _rewardRole) {\\n        // slither-disable-next-line missing-zero-check\\n        allowExtraRewards = _allowExtraRewards;\\n    }\\n\\n    function extraRewardsLength() external view returns (uint256) {\\n        return _extraRewards.length();\\n    }\\n\\n    function addExtraReward(address reward) external hasRole(rewardRole) {\\n        if (!allowExtraRewards) {\\n            revert ExtraRewardsNotAllowed();\\n        }\\n        Errors.verifyNotZero(reward, \\\"reward\\\");\\n\\n        if (!_extraRewards.add(reward)) {\\n            revert Errors.ItemExists();\\n        }\\n\\n        emit ExtraRewardAdded(reward);\\n    }\\n\\n    function getExtraRewarder(uint256 index) external view returns (IExtraRewarder rewarder) {\\n        return IExtraRewarder(_extraRewards.at(index));\\n    }\\n\\n    function removeExtraRewards(address[] calldata _rewards) external hasRole(rewardRole) {\\n        uint256 length = _rewards.length;\\n        for (uint256 i = 0; i < length; ++i) {\\n            if (!_extraRewards.remove(_rewards[i])) {\\n                revert Errors.ItemNotFound();\\n            }\\n            emit ExtraRewardRemoved(_rewards[i]);\\n        }\\n    }\\n\\n    function clearExtraRewards() external hasRole(rewardRole) {\\n        while (_extraRewards.length() > 0) {\\n            if (!_extraRewards.remove(_extraRewards.at(_extraRewards.length() - 1))) {\\n                revert Errors.ItemNotFound();\\n            }\\n        }\\n\\n        emit ExtraRewardsCleared();\\n    }\\n\\n    function extraRewards() external view returns (address[] memory) {\\n        return _extraRewards.values();\\n    }\\n\\n    function _withdraw(address account, uint256 amount, bool claim) internal {\\n        _updateReward(account);\\n        _withdrawAbstractRewarder(account, amount);\\n\\n        uint256 length = _extraRewards.length();\\n        for (uint256 i = 0; i < length; ++i) {\\n            // No need to worry about reentrancy here\\n            // slither-disable-next-line reentrancy-no-eth\\n            IExtraRewarder(_extraRewards.at(i)).withdraw(account, amount);\\n        }\\n\\n        if (claim) {\\n            _processRewards(account, true);\\n        }\\n\\n        // slither-disable-next-line events-maths\\n        _totalSupply -= amount;\\n        _balances[account] -= amount;\\n    }\\n\\n    function _stake(address account, uint256 amount) internal {\\n        _updateReward(account);\\n        _stakeAbstractRewarder(account, amount);\\n\\n        uint256 length = _extraRewards.length();\\n        for (uint256 i = 0; i < length; ++i) {\\n            // No need to worry about reentrancy here\\n            // slither-disable-next-line reentrancy-no-eth\\n            IExtraRewarder(_extraRewards.at(i)).stake(account, amount);\\n        }\\n\\n        // slither-disable-next-line events-maths\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n    }\\n\\n    function getReward() external nonReentrant {\\n        _updateReward(msg.sender);\\n        _processRewards(msg.sender, true);\\n    }\\n\\n    function _getReward(address account, bool claimExtras) internal nonReentrant {\\n        _updateReward(account);\\n        _processRewards(account, claimExtras);\\n    }\\n\\n    function totalSupply() public view override(AbstractRewarder, IBaseRewarder) returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    function balanceOf(address account) public view override(AbstractRewarder, IBaseRewarder) returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    function _processRewards(address account, bool claimExtras) internal {\\n        _getReward(account);\\n        uint256 length = _extraRewards.length();\\n\\n        //also get rewards from linked rewards\\n        if (claimExtras) {\\n            for (uint256 i = 0; i < length; ++i) {\\n                IExtraRewarder(_extraRewards.at(i)).getReward(account);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"src/interfaces/stats/IDexLSTStats.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n// Copyright (c) 2023 Tokemak Ops Ltd. All rights reserved.\\npragma solidity 0.8.17;\\n\\nimport { Stats } from \\\"src/stats/Stats.sol\\\";\\nimport { ISystemRegistry } from \\\"src/interfaces/ISystemRegistry.sol\\\";\\nimport { ILSTStats } from \\\"src/interfaces/stats/ILSTStats.sol\\\";\\n\\n/// @title Return stats DEXs with LSTs\\ninterface IDexLSTStats {\\n    event DexSnapshotTaken(uint256 snapshotTimestamp, uint256 priorFeeApr, uint256 newFeeApr, uint256 unfilteredFeeApr);\\n\\n    struct StakingIncentiveStats {\\n        // time-weighted average total supply to prevent spikes/attacks from impacting rebalancing\\n        uint256 safeTotalSupply;\\n        // rewardTokens, annualizedRewardAmounts, and periodFinishForRewards will match indexes\\n        // they are split to workaround an issue with forge having nested structs\\n        // address of the reward tokens\\n        address[] rewardTokens;\\n        // the annualized reward rate for the reward token\\n        uint256[] annualizedRewardAmounts;\\n        // the timestamp for when the rewards are set to terminate\\n        uint40[] periodFinishForRewards;\\n        // incentive rewards score. max 48, min 0\\n        uint8 incentiveCredits;\\n    }\\n\\n    struct DexLSTStatsData {\\n        uint256 lastSnapshotTimestamp;\\n        uint256 feeApr;\\n        uint256[] reservesInEth;\\n        StakingIncentiveStats stakingIncentiveStats;\\n        ILSTStats.LSTStatsData[] lstStatsData;\\n    }\\n\\n    /// @notice Get the current stats for the DEX with underlying LST tokens\\n    /// @dev Returned data is a combination of current data and filtered snapshots\\n    /// @return dexLSTStatsData current data on the DEX\\n    function current() external returns (DexLSTStatsData memory dexLSTStatsData);\\n}\\n\"\r\n    },\r\n    \"src/strategy/ViolationTracking.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n// Copyright (c) 2023 Tokemak Ops Ltd. All rights reserved.\\npragma solidity 0.8.17;\\n\\nlibrary ViolationTracking {\\n    uint16 internal constant TAIL_MASK = 1 << 9;\\n    uint16 internal constant HEAD_MASK = 1;\\n\\n    struct State {\\n        uint8 violationCount;\\n        uint8 len;\\n        uint16 violations;\\n    }\\n\\n    function insert(State storage self, bool isViolation) internal {\\n        bool tailValue = (self.violations & TAIL_MASK) > 0;\\n\\n        // push new spot into the queue (default false)\\n        self.violations <<= 1;\\n\\n        // flip the bit to true and increment counter if it is a violation\\n        if (isViolation) {\\n            self.violations |= HEAD_MASK;\\n            self.violationCount += 1;\\n        }\\n\\n        // if we're dropping a violation then decrement the counter\\n        if (tailValue) {\\n            self.violationCount -= 1;\\n        }\\n\\n        if (self.len < 10) {\\n            self.len += 1;\\n        }\\n    }\\n\\n    function reset(State storage self) internal {\\n        self.violationCount = 0;\\n        self.violations = 0;\\n        self.len = 0;\\n    }\\n}\\n\"\r\n    },\r\n    \"src/strategy/NavTracking.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n// Copyright (c) 2023 Tokemak Ops Ltd. All rights reserved.\\npragma solidity 0.8.17;\\n\\nlibrary NavTracking {\\n    uint8 internal constant MAX_NAV_TRACKING = 91;\\n\\n    error NavHistoryInsufficient();\\n    error InvalidNavTimestamp(uint40 current, uint40 provided);\\n\\n    struct State {\\n        uint8 len;\\n        uint8 currentIndex;\\n        uint40 lastFinalizedTimestamp;\\n        uint256[MAX_NAV_TRACKING] history;\\n    }\\n\\n    function insert(State storage self, uint256 navPerShare, uint40 timestamp) internal {\\n        if (timestamp < self.lastFinalizedTimestamp) revert InvalidNavTimestamp(self.lastFinalizedTimestamp, timestamp);\\n\\n        // if it's been a day since the last finalized value, then finalize the current value\\n        // otherwise continue to overwrite the currentIndex\\n        if (timestamp - self.lastFinalizedTimestamp >= 1 days) {\\n            if (self.lastFinalizedTimestamp > 0) {\\n                self.currentIndex = (self.currentIndex + 1) % MAX_NAV_TRACKING;\\n            }\\n            self.lastFinalizedTimestamp = timestamp;\\n        }\\n\\n        self.history[self.currentIndex] = navPerShare;\\n        if (self.len < MAX_NAV_TRACKING) {\\n            self.len += 1;\\n        }\\n\\n        // TODO: emit an event -- allow us to see if there are frequently gaps in reporting\\n    }\\n\\n    // the way this information is used, it is ok for it to not perfectly be daily\\n    // gaps of a few days are acceptable and do not materially degrade the NAV decay checks\\n    function getDaysAgo(State memory self, uint8 daysAgo) internal pure returns (uint256) {\\n        if (daysAgo >= self.len) revert NavHistoryInsufficient();\\n\\n        uint8 targetIndex = (MAX_NAV_TRACKING + self.currentIndex - daysAgo) % MAX_NAV_TRACKING;\\n        return self.history[targetIndex];\\n    }\\n}\\n\"\r\n    },\r\n    \"src/interfaces/stats/ILSTStats.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n// Copyright (c) 2023 Tokemak Ops Ltd. All rights reserved.\\npragma solidity 0.8.17;\\n\\nimport { Stats } from \\\"src/stats/Stats.sol\\\";\\nimport { ISystemRegistry } from \\\"src/interfaces/ISystemRegistry.sol\\\";\\n\\n/// @title Return stats on base LSTs\\ninterface ILSTStats {\\n    struct LSTStatsData {\\n        uint256 lastSnapshotTimestamp;\\n        uint256 baseApr;\\n        int256 discount; // positive number is a discount, negative is a premium\\n        uint24[10] discountHistory; // 7 decimal precision\\n        uint40[5] discountTimestampByPercent; // each index is the timestamp that the token reached that discount\\n        uint256[] slashingCosts;\\n        uint256[] slashingTimestamps;\\n    }\\n\\n    /// @notice Get the current stats for the LST\\n    /// @dev Returned data is a combination of current data and filtered snapshots\\n    /// @return lstStatsData current data on the LST\\n    function current() external returns (LSTStatsData memory lstStatsData);\\n\\n    /// @notice Get the EthPerToken (or Share) for the LST\\n    /// @return ethPerShare the backing eth for the LST\\n    function calculateEthPerToken() external view returns (uint256 ethPerShare);\\n\\n    /// @notice Get if the underlying LST token is rebasing\\n    /// @return rebasing is true if the lst is a rebasing token\\n    function isRebasing() external view returns (bool rebasing);\\n}\\n\"\r\n    },\r\n    \"src/strategy/LMPStrategyConfig.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n// Copyright (c) 2023 Tokemak Ops Ltd. All rights reserved.\\npragma solidity 0.8.17;\\n\\nimport { NavTracking } from \\\"src/strategy/NavTracking.sol\\\";\\nimport { Errors } from \\\"src/utils/Errors.sol\\\";\\n\\nlibrary LMPStrategyConfig {\\n    error InvalidConfig(string paramName);\\n\\n    // TODO: switch swapCostOffset from days to seconds; possibly pauseRebalance too\\n    struct StrategyConfig {\\n        SwapCostOffsetConfig swapCostOffset;\\n        NavLookbackConfig navLookback;\\n        SlippageConfig slippage;\\n        ModelWeights modelWeights;\\n        // number of days to pause rebalancing if a long-term nav decay is detected\\n        uint16 pauseRebalancePeriodInDays;\\n        // destinations trading a premium above maxPremium will be blocked from new capital deployments\\n        int256 maxPremium; // 100% = 1e18\\n        // destinations trading a discount above maxDiscount will be blocked from new capital deployments\\n        int256 maxDiscount; // 100% = 1e18\\n        // if any stats data is older than this, rebalancing will revert\\n        uint40 staleDataToleranceInSeconds;\\n        // the maximum discount incorporated in price return\\n        int256 maxAllowedDiscount;\\n        // the maximum deviation between spot & safe price for individual LSTs\\n        uint256 lstPriceGapTolerance;\\n    }\\n\\n    struct SwapCostOffsetConfig {\\n        // the swap cost offset period to initialize the strategy with\\n        uint16 initInDays;\\n        // the number of violations required to trigger a tightening of the swap cost offset period (1 to 10)\\n        uint16 tightenThresholdInViolations;\\n        // the number of days to decrease the swap offset period for each tightening step\\n        uint16 tightenStepInDays;\\n        // the number of days since a rebalance required to trigger a relaxing of the swap cost offset period\\n        uint16 relaxThresholdInDays;\\n        // the number of days to increase the swap offset period for each relaxing step\\n        uint16 relaxStepInDays;\\n        // the maximum the swap cost offset period can reach. This is the loosest the strategy will be\\n        uint16 maxInDays;\\n        // the minimum the swap cost offset period can reach. This is the most conservative the strategy will be\\n        uint16 minInDays;\\n    }\\n\\n    struct NavLookbackConfig {\\n        // the number of days for the first NAV decay comparison (e.g., 30 days)\\n        uint8 lookback1InDays;\\n        // the number of days for the second NAV decay comparison (e.g., 60 days)\\n        uint8 lookback2InDays;\\n        // the number of days for the third NAV decay comparison (e.g., 90 days)\\n        uint8 lookback3InDays;\\n    }\\n\\n    struct SlippageConfig {\\n        // the maximum slippage that is allowed for a normal rebalance\\n        // under normal circumstances this will not be triggered because the swap offset logic is the primary gate\\n        // but this ensures a sensible slippage level will never be exceeded\\n        uint256 maxNormalOperationSlippage; // 100% = 1e18\\n        // the maximum amount of slippage to allow when a destination is trimmed due to constraint violations\\n        // recommend setting this higher than maxNormalOperationSlippage\\n        uint256 maxTrimOperationSlippage; // 100% = 1e18\\n        // the maximum amount of slippage to allow when a destinationVault has been shutdown\\n        // shutdown for a vault is abnormal and means there is an issue at that destination\\n        // recommend setting this higher than maxNormalOperationSlippage\\n        uint256 maxEmergencyOperationSlippage; // 100% = 1e18\\n        // the maximum amount of slippage to allow when the LMPVault has been shutdown\\n        // TODO: why would a LMP be shutdown??\\n        uint256 maxShutdownOperationSlippage; // 100% = 1e18\\n    }\\n\\n    struct ModelWeights {\\n        uint256 baseYield;\\n        uint256 feeYield;\\n        uint256 incentiveYield;\\n        uint256 slashing;\\n        int256 priceDiscountExit;\\n        int256 priceDiscountEnter;\\n        int256 pricePremium;\\n    }\\n\\n    function validate(StrategyConfig memory config) internal pure {\\n        if (\\n            config.swapCostOffset.initInDays < config.swapCostOffset.minInDays\\n                || config.swapCostOffset.initInDays > config.swapCostOffset.maxInDays\\n        ) revert InvalidConfig(\\\"swapCostOffsetPeriodInit\\\");\\n\\n        if (config.swapCostOffset.maxInDays <= config.swapCostOffset.minInDays) {\\n            revert InvalidConfig(\\\"swapCostOffsetPeriodMax\\\");\\n        }\\n\\n        // the 91st spot holds current (0 days ago), so the farthest back that can be retrieved is 90 days ago\\n        if (\\n            config.navLookback.lookback1InDays >= NavTracking.MAX_NAV_TRACKING\\n                || config.navLookback.lookback2InDays >= NavTracking.MAX_NAV_TRACKING\\n                || config.navLookback.lookback3InDays > NavTracking.MAX_NAV_TRACKING\\n        ) {\\n            revert InvalidConfig(\\\"navLookbackInDays\\\");\\n        }\\n\\n        // lookback should be configured smallest to largest and should not be equal\\n        if (\\n            config.navLookback.lookback1InDays >= config.navLookback.lookback2InDays\\n                || config.navLookback.lookback2InDays >= config.navLookback.lookback3InDays\\n        ) {\\n            revert InvalidConfig(\\\"navLookbackInDays\\\");\\n        }\\n\\n        if (config.maxDiscount > 1e18) {\\n            revert InvalidConfig(\\\"maxDiscount\\\");\\n        }\\n\\n        if (config.maxPremium > 1e18) {\\n            revert InvalidConfig(\\\"maxPremium\\\");\\n        }\\n\\n        // TODO: these will revert with a different error, possibly confusing\\n        Errors.verifyNotZero(config.slippage.maxShutdownOperationSlippage, \\\"maxShutdownOperationSlippage\\\");\\n        Errors.verifyNotZero(config.slippage.maxEmergencyOperationSlippage, \\\"maxEmergencyOperationSlippage\\\");\\n        Errors.verifyNotZero(config.slippage.maxTrimOperationSlippage, \\\"maxTrimOperationSlippage\\\");\\n        Errors.verifyNotZero(config.slippage.maxNormalOperationSlippage, \\\"maxNormalOperationSlippage\\\");\\n        Errors.verifyNotZero(config.navLookback.lookback1InDays, \\\"navLookback1\\\");\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/access/IAccessControlEnumerable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\\n */\\ninterface IAccessControlEnumerable is IAccessControl {\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"src/interfaces/swapper/ISyncSwapper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n// Copyright (c) 2023 Tokemak Ops Ltd. All rights reserved.\\npragma solidity 0.8.17;\\n\\nimport { ISwapRouter } from \\\"src/interfaces/swapper/ISwapRouter.sol\\\";\\n\\ninterface ISyncSwapper {\\n    error DataMismatch(string element);\\n    error InvalidIndex();\\n\\n    /**\\n     * @notice Swaps sellToken for buyToken\\n     * @param pool The address of the pool for the swapper\\n     * @param sellTokenAddress The address of the token to sell\\n     * @param sellAmount The amount of sellToken to sell\\n     * @param buyTokenAddress The address of the token to buy\\n     * @param minBuyAmount The minimum amount of buyToken expected\\n     * @param data Additional data used differently by the different swappers\\n     * @return actualBuyAmount The actual amount received from the swap\\n     */\\n    function swap(\\n        address pool,\\n        address sellTokenAddress,\\n        uint256 sellAmount,\\n        address buyTokenAddress,\\n        uint256 minBuyAmount,\\n        bytes memory data\\n    ) external returns (uint256 actualBuyAmount);\\n\\n    /**\\n     * @notice Validates that the swapData contains the correct information, ensuring that the encoded data contains the\\n     * correct 'fromAddress' and 'toAddress' (swapData.token), and verifies that these tokens are in the pool\\n     * @dev This function should revert with a DataMismatch error if the swapData is invalid\\n     * @param fromAddress The address from which the swap originates\\n     * @param swapData The data associated with the swap that needs to be validated\\n     */\\n    function validate(address fromAddress, ISwapRouter.SwapData memory swapData) external view;\\n}\\n\"\r\n    },\r\n    \"src/interfaces/vault/ILMPVaultRouterBase.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n// Copyright (c) 2023 Tokemak Ops Ltd. All rights reserved.\\npragma solidity >=0.8.7;\\n\\nimport { ILMPVault } from \\\"./ILMPVault.sol\\\";\\nimport { IMainRewarder } from \\\"src/interfaces/rewarders/IMainRewarder.sol\\\";\\nimport { IERC20 } from \\\"openzeppelin-contracts/token/ERC20/IERC20.sol\\\";\\n\\n/**\\n * @title LMPVault Router Base Interface\\n * @notice A canonical router between LMPVaults\\n *\\n * The base router is a multicall style router inspired by Uniswap v3 with built-in features for permit,\\n * WETH9 wrap/unwrap, and ERC20 token pulling/sweeping/approving. It includes methods for the four mutable\\n * ERC4626 functions deposit/mint/withdraw/redeem as well.\\n *\\n * These can all be arbitrarily composed using the multicall functionality of the router.\\n *\\n * NOTE the router is capable of pulling any approved token from your wallet. This is only possible when\\n * your address is msg.sender, but regardless be careful when interacting with the router or ERC4626 Vaults.\\n * The router makes no special considerations for unique ERC20 implementations such as fee on transfer.\\n * There are no built in protections for unexpected behavior beyond enforcing the minSharesOut is received.\\n */\\ninterface ILMPVaultRouterBase {\\n    /// @notice thrown when amount of assets received is below the min set by caller\\n    error MinAmountError();\\n\\n    /// @notice thrown when amount of shares received is below the min set by caller\\n    error MinSharesError();\\n\\n    /// @notice thrown when amount of assets received is above the max set by caller\\n    error MaxAmountError();\\n\\n    /// @notice thrown when amount of shares received is above the max set by caller\\n    error MaxSharesError();\\n\\n    /**\\n     * @notice mint `shares` from an ERC4626 vault.\\n     * @param vault The LMPVault to mint shares from.\\n     * @param to The destination of ownership shares.\\n     * @param shares The amount of shares to mint from `vault`.\\n     * @param maxAmountIn The max amount of assets used to mint.\\n     * @return amountIn the amount of assets used to mint by `to`.\\n     * @dev throws MaxAmountError\\n     */\\n    function mint(\\n        ILMPVault vault,\\n        address to,\\n        uint256 shares,\\n        uint256 maxAmountIn\\n    ) external payable returns (uint256 amountIn);\\n\\n    /**\\n     * @notice deposit `amount` to an ERC4626 vault.\\n     * @param vault The LMPVault to deposit assets to.\\n     * @param to The destination of ownership shares.\\n     * @param amount The amount of assets to deposit to `vault`.\\n     * @param minSharesOut The min amount of `vault` shares received by `to`.\\n     * @return sharesOut the amount of shares received by `to`.\\n     * @dev throws MinSharesError\\n     */\\n    function deposit(\\n        ILMPVault vault,\\n        address to,\\n        uint256 amount,\\n        uint256 minSharesOut\\n    ) external payable returns (uint256 sharesOut);\\n\\n    /**\\n     * @notice withdraw `amount` from an ERC4626 vault.\\n     * @param vault The LMPVault to withdraw assets from.\\n     * @param to The destination of assets.\\n     * @param amount The amount of assets to withdraw from vault.\\n     * @param maxSharesOut The max amount of shares burned for assets requested.\\n     * @param unwrapWETH If true, unwrap WETH9 to ETH before sending to `to`.\\n     * @return sharesOut the amount of shares received by `to`.\\n     * @dev throws MaxSharesError\\n     */\\n    function withdraw(\\n        ILMPVault vault,\\n        address to,\\n        uint256 amount,\\n        uint256 maxSharesOut,\\n        bool unwrapWETH\\n    ) external payable returns (uint256 sharesOut);\\n\\n    /**\\n     * @notice redeem `shares` shares from a LMPVault\\n     * @param vault The LMPVault to redeem shares from.\\n     * @param to The destination of assets.\\n     * @param shares The amount of shares to redeem from vault.\\n     * @param minAmountOut The min amount of assets received by `to`.\\n     * @param unwrapWETH If true, unwrap WETH9 to ETH before sending to `to`.\\n     * @return amountOut the amount of assets received by `to`.\\n     * @dev throws MinAmountError\\n     */\\n    function redeem(\\n        ILMPVault vault,\\n        address to,\\n        uint256 shares,\\n        uint256 minAmountOut,\\n        bool unwrapWETH\\n    ) external payable returns (uint256 amountOut);\\n\\n    /// @notice Stakes vault token to corresponding rewarder.\\n    /// @param vault IERC20 instance of an LMP vault to stake to.\\n    /// @param maxAmount Maximum amount for user to stake.  Amount > balanceOf(user) will stake all present tokens.\\n    /// @return staked Returns total amount staked.\\n    function stakeVaultToken(IERC20 vault, uint256 maxAmount) external returns (uint256 staked);\\n\\n    /// @notice Unstakes vault token from corresponding rewarder.\\n    /// @param vault ILMPVault instance of the vault token to withdraw.\\n    /// @param rewarder Rewarder to withdraw from.\\n    /// @param maxAmount Amount of vault token to withdraw Amount > balanceOf(user) will withdraw all owned tokens.\\n    /// @param claim Claiming rewards or not on unstaking.\\n    /// @return withdrawn Amount of vault token withdrawn.\\n    function withdrawVaultToken(\\n        ILMPVault vault,\\n        IMainRewarder rewarder,\\n        uint256 maxAmount,\\n        bool claim\\n    ) external returns (uint256 withdrawn);\\n\\n    /// @notice Claims rewards on user stake of vault token.\\n    /// @param vault ILMPVault instance of vault token to claim rewards for.\\n    /// @param rewarder Rewarder to claim rewards from.\\n    function claimRewards(ILMPVault vault, IMainRewarder rewarder) external;\\n}\\n\"\r\n    },\r\n    \"src/interfaces/liquidation/IAsyncSwapper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n// Copyright (c) 2023 Tokemak Ops Ltd. All rights reserved.\\npragma solidity 0.8.17;\\n\\nstruct SwapParams {\\n    /// @dev The address of the token to be sold.\\n    address sellTokenAddress;\\n    /// @dev The amount of tokens to be sold.\\n    uint256 sellAmount;\\n    /// @dev The address of the token to be bought.\\n    address buyTokenAddress;\\n    /// @dev The expected minimum amount of tokens to be bought.\\n    uint256 buyAmount;\\n    /// @dev Data payload to be used for complex swap operations.\\n    bytes data;\\n    /// @dev Extra data payload reserved for future development. This field allows for additional information\\n    /// or functionality to be added without changing the struct and interface.\\n    bytes extraData;\\n}\\n\\ninterface IAsyncSwapper {\\n    error TokenAddressZero();\\n    error SwapFailed();\\n    error InsufficientBuyAmountReceived(uint256 buyTokenAmountReceived, uint256 buyAmount);\\n    error InsufficientSellAmount();\\n    error InsufficientBuyAmount();\\n    error InsufficientBalance(uint256 balanceNeeded, uint256 balanceAvailable);\\n\\n    event Swapped(\\n        address indexed sellTokenAddress,\\n        address indexed buyTokenAddress,\\n        uint256 sellAmount,\\n        uint256 buyAmount,\\n        uint256 buyTokenAmountReceived\\n    );\\n\\n    /**\\n     * @notice Swaps sellToken for buyToken\\n     * @param swapParams Encoded swap data\\n     * @return buyTokenAmountReceived The amount of buyToken received from the swap\\n     */\\n    function swap(SwapParams memory swapParams) external returns (uint256 buyTokenAmountReceived);\\n}\\n\"\r\n    },\r\n    \"src/interfaces/destinations/IDestinationAdapter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\n/**\\n * @title IDestinationAdapter\\n * @dev This is a super-interface to unify different types of adapters to be registered in Destination Registry.\\n *      Specific interface type is defined by extending from this interface.\\n */\\ninterface IDestinationAdapter {\\n    error MustBeMoreThanZero();\\n    error ArraysLengthMismatch();\\n    error BalanceMustIncrease();\\n    error MinLpAmountNotReached();\\n    error LpTokenAmountMismatch();\\n    error NoNonZeroAmountProvided();\\n    error InvalidBalanceChange();\\n    error InvalidAddress(address);\\n}\\n\"\r\n    },\r\n    \"src/interfaces/vault/IDestinationVaultFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n// Copyright (c) 2023 Tokemak Ops Ltd. All rights reserved.\\npragma solidity 0.8.17;\\n\\nimport { ISystemComponent } from \\\"src/interfaces/ISystemComponent.sol\\\";\\nimport { ISystemRegistry } from \\\"src/interfaces/ISystemRegistry.sol\\\";\\n\\n/// @notice Creates and registers Destination Vaults for the system\\ninterface IDestinationVaultFactory is ISystemComponent {\\n    /// @notice Creates a vault of the specified type\\n    /// @dev vaultType will be bytes32 encoded and checked that a template is registered\\n    /// @param vaultType human readable key of the vault template\\n    /// @param baseAsset Base asset of the system. WETH/USDC/etc\\n    /// @param underlyer Underlying asset the vault will wrap\\n    /// @param incentiveCalculator Incentive calculator of the vault\\n    /// @param additionalTrackedTokens Any tokens in addition to base and underlyer that should be tracked\\n    /// @param salt Contracts are created via CREATE2 with this value\\n    /// @param params params to be passed to vaults initialize function\\n    /// @return vault address of the newly created destination vault\\n    function create(\\n        string memory vaultType,\\n        address baseAsset,\\n        address underlyer,\\n        address incentiveCalculator,\\n        address[] memory additionalTrackedTokens,\\n        bytes32 salt,\\n        bytes memory params\\n    ) external returns (address vault);\\n}\\n\"\r\n    },\r\n    \"src/interfaces/stats/IStatsCalculator.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n// Copyright (c) 2023 Tokemak Ops Ltd. All rights reserved.\\npragma solidity 0.8.17;\\n\\n/// @title Capture information about a pool or destination\\ninterface IStatsCalculator {\\n    /// @notice thrown when no snapshot is taken\\n    error NoSnapshotTaken();\\n\\n    /// @notice The id for this instance of a calculator\\n    function getAprId() external view returns (bytes32);\\n\\n    /// @notice The id of the underlying asset/pool/destination this calculator represents\\n    /// @dev This may be a generated address\\n    function getAddressId() external view returns (address);\\n\\n    /// @notice Setup the calculator after it has been copied\\n    /// @dev Should only be executed one time\\n    /// @param dependentAprIds apr ids that cover the dependencies of this calculator\\n    /// @param initData setup data specific to this type of calculator\\n    function initialize(bytes32[] calldata dependentAprIds, bytes calldata initData) external;\\n\\n    /// @notice Capture stat data about this setup\\n    function snapshot() external;\\n\\n    /// @notice Indicates if a snapshot should be taken\\n    /// @return takeSnapshot if true then a snapshot should be taken. If false, calling snapshot will do nothing\\n    function shouldSnapshot() external view returns (bool takeSnapshot);\\n}\\n\"\r\n    },\r\n    \"src/libs/LibAdapter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n// Copyright (c) 2023 Tokemak Ops Ltd. All rights reserved.\\npragma solidity 0.8.17;\\n\\nimport { IERC20 } from \\\"openzeppelin-contracts/token/ERC20/IERC20.sol\\\";\\nimport { SafeERC20 } from \\\"openzeppelin-contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nlibrary LibAdapter {\\n    using SafeERC20 for IERC20;\\n\\n    address public constant CURVE_REGISTRY_ETH_ADDRESS_POINTER = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n\\n    error MinLpAmountNotReached();\\n    error LpTokenAmountMismatch();\\n    error NoNonZeroAmountProvided();\\n    error InvalidBalanceChange();\\n\\n    // Utils\\n    function _approve(IERC20 token, address spender, uint256 amount) internal {\\n        uint256 currentAllowance = token.allowance(address(this), spender);\\n        if (currentAllowance > 0) {\\n            token.safeDecreaseAllowance(spender, currentAllowance);\\n        }\\n        token.safeIncreaseAllowance(spender, amount);\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV // Deprecated in v4.8\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \u00f7 2 + 1, and for v in (302): v \u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\"\r\n    },\r\n    \"src/interfaces/rewarders/IBaseRewarder.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n// Copyright (c) 2023 Tokemak Ops Ltd. All rights reserved.\\npragma solidity 0.8.17;\\n\\nimport { IStakeTracking } from \\\"src/interfaces/rewarders/IStakeTracking.sol\\\";\\n\\ninterface IBaseRewarder {\\n    event RewardAdded(\\n        uint256 reward,\\n        uint256 rewardRate,\\n        uint256 lastUpdateBlock,\\n        uint256 periodInBlockFinish,\\n        uint256 historicalRewards\\n    );\\n    event UserRewardUpdated(\\n        address indexed user, uint256 amount, uint256 rewardPerTokenStored, uint256 lastUpdateBlock\\n    );\\n    event Staked(address indexed user, uint256 amount);\\n    event Withdrawn(address indexed user, uint256 amount);\\n    event RewardPaid(address indexed user, uint256 reward);\\n    event QueuedRewardsUpdated(uint256 startingQueuedRewards, uint256 startingNewRewards, uint256 queuedRewards);\\n    event AddedToWhitelist(address indexed wallet);\\n    event RemovedFromWhitelist(address indexed wallet);\\n\\n    event TokeLockDurationUpdated(uint256 newDuration);\\n\\n    /**\\n     * @notice Claims and transfers all rewards for the specified account\\n     */\\n    function getReward() external;\\n\\n    /**\\n     * @notice Stakes the specified amount of tokens for the specified account.\\n     * @param account The address of the account to stake tokens for.\\n     * @param amount The amount of tokens to stake.\\n     */\\n    function stake(address account, uint256 amount) external;\\n\\n    /**\\n     * @notice Calculate the earned rewards for an account.\\n     * @param account Address of the account.\\n     * @return The earned rewards for the given account.\\n     */\\n    function earned(address account) external view returns (uint256);\\n\\n    /**\\n     * @notice Calculates the rewards per token for the current block.\\n     * @dev The total amount of rewards available in the system is fixed, and it needs to be distributed among the users\\n     * based on their token balances and staking duration.\\n     * Rewards per token represent the amount of rewards that each token is entitled to receive at the current block.\\n     * The calculation takes into account the reward rate, the time duration since the last update,\\n     * and the total supply of tokens in the staking pool.\\n     * @return The updated rewards per token value for the current block.\\n     */\\n    function rewardPerToken() external view returns (uint256);\\n\\n    /**\\n     * @notice Get the current reward rate per block.\\n     * @return The current reward rate per block.\\n     */\\n    function rewardRate() external view returns (uint256);\\n\\n    /**\\n     * @notice Get the current TOKE lock duration.\\n     * @return The current TOKE lock duration.\\n     */\\n    function tokeLockDuration() external view returns (uint256);\\n\\n    /**\\n     * @notice Get the last block where rewards are applicable.\\n     * @return The last block number where rewards are applicable.\\n     */\\n    function lastBlockRewardApplicable() external view returns (uint256);\\n\\n    /**\\n     * @notice The total amount of tokens staked\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @notice The amount of tokens staked for the specified account\\n     * @param account The address of the account to get the balance of\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @notice Queue new rewards to be distributed.\\n     * @param newRewards The amount of new rewards to be queued.\\n     */\\n    function queueNewRewards(uint256 newRewards) external;\\n\\n    /**\\n     * @notice Token distributed as rewards\\n     * @return reward token address\\n     */\\n    function rewardToken() external view returns (address);\\n\\n    /**\\n     * @notice Add an address to the whitelist.\\n     * @param wallet The address to be added to the whitelist.\\n     */\\n    function addToWhitelist(address wallet) external;\\n\\n    /**\\n     * @notice Remove an address from the whitelist.\\n     * @param wallet The address to be removed from the whitelist.\\n     */\\n    function removeFromWhitelist(address wallet) external;\\n\\n    /**\\n     * @notice Check if an address is whitelisted.\\n     * @param wallet The address to be checked.\\n     * @return bool indicating if the address is whitelisted.\\n     */\\n    function isWhitelisted(address wallet) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"src/interfaces/rewarders/IExtraRewarder.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n// Copyright (c) 2023 Tokemak Ops Ltd. All rights reserved.\\npragma solidity 0.8.17;\\n\\nimport { IBaseRewarder } from \\\"./IBaseRewarder.sol\\\";\\n\\ninterface IExtraRewarder is IBaseRewarder {\\n    /**\\n     * @notice Withdraws the specified amount of tokens from the vault for the specified account.\\n     * @param account The address of the account to withdraw tokens for.\\n     * @param amount The amount of tokens to withdraw.\\n     */\\n    function withdraw(address account, uint256 amount) external;\\n\\n    /**\\n     * @notice Claims and transfers all rewards for the specified account from this contract.\\n     * @param account The address of the account to claim rewards for.\\n     */\\n    function getReward(address account) external;\\n}\\n\"\r\n    },\r\n    \"src/interfaces/vault/IBaseAssetVault.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n// Copyright (c) 2023 Tokemak Ops Ltd. All rights reserved.\\npragma solidity 0.8.17;\\n\\nimport { IERC20Metadata as IERC20 } from \\\"openzeppelin-contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\\ninterface IBaseAssetVault {\\n    /// @notice Asset that this Vault primarily manages\\n    /// @dev Vault decimals should be the same as the baseAsset\\n    function baseAsset() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"src/rewarders/AbstractRewarder.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n// Copyright (c) 2023 Tokemak Ops Ltd. All rights reserved.\\npragma solidity 0.8.17;\\n\\nimport { IERC20 } from \\\"openzeppelin-contracts/token/ERC20/IERC20.sol\\\";\\nimport { SafeERC20 } from \\\"openzeppelin-contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nimport { ISystemRegistry } from \\\"src/interfaces/ISystemRegistry.sol\\\";\\nimport { SecurityBase } from \\\"src/security/SecurityBase.sol\\\";\\n\\nimport { IBaseRewarder } from \\\"src/interfaces/rewarders/IBaseRewarder.sol\\\";\\n\\nimport { IAccToke } from \\\"src/interfaces/staking/IAccToke.sol\\\";\\n\\nimport { LibAdapter } from \\\"src/libs/LibAdapter.sol\\\";\\nimport { Roles } from \\\"src/libs/Roles.sol\\\";\\nimport { Errors } from \\\"src/utils/Errors.sol\\\";\\n\\n/**\\n * @dev An abstract contract that serves as the base for rewarder contracts.\\n * It implements common functionalities for reward distribution, including calculating rewards per token,\\n * tracking user rewards, and handling stake-related operations.\\n * Inherited by rewarder contracts, such as MainRewarder and ExtraRewarder.\\n * The contract is inspired by the Convex contract but uses block-based duration instead of timestamp-based duration.\\n */\\nabstract contract AbstractRewarder is IBaseRewarder, SecurityBase {\\n    using SafeERC20 for IERC20;\\n\\n    /// @notice The duration of the reward period in blocks.\\n    uint256 public immutable durationInBlock;\\n\\n    ///  @notice It is used to determine if the new rewards should be distributed immediately or queued for later. If\\n    /// the ratio of current rewards to the sum of new and queued rewards is less than newRewardRatio, the new rewards\\n    /// are distributed immediately; otherwise, they are added to the queue.\\n    uint256 public immutable newRewardRatio;\\n\\n    /// @notice An instance of the system registry contract.\\n    ISystemRegistry internal immutable systemRegistry;\\n\\n    /// @notice The address of the token to be distributed as rewards.\\n    address public immutable rewardToken;\\n\\n    /// @notice The block number when the current reward period ends.\\n    uint256 public periodInBlockFinish;\\n\\n    /// @notice The rate of reward distribution per block.\\n    uint256 public rewardRate;\\n\\n    /// @notice The block number when rewards were last updated.\\n    uint256 public lastUpdateBlock;\\n\\n    /// @notice The amount of rewards distributed per staked token stored.\\n    uint256 public rewardPerTokenStored;\\n\\n    /// @notice The amount of rewards waiting in the queue to be distributed.\\n    uint256 public queuedRewards;\\n\\n    /// @notice The amount of current rewards being distributed.\\n    uint256 public currentRewards;\\n\\n    /// @notice The total amount of rewards distributed historically.\\n    uint256 public historicalRewards;\\n\\n    /// @notice The amount of reward per token paid to each user.\\n    mapping(address => uint256) public userRewardPerTokenPaid;\\n\\n    /// @notice The amount of rewards for each user.\\n    mapping(address => uint256) public rewards;\\n\\n    /// @notice The duration for locking the Toke token rewards.\\n    uint256 public tokeLockDuration;\\n\\n    /// @notice Whitelisted addresses for queuing new rewards.\\n    mapping(address => bool) public whitelistedAddresses;\\n\\n    /// @notice Role that manages rewarder contract.\\n    bytes32 internal immutable rewardRole;\\n\\n    /**\\n     * @param _systemRegistry Address of the system registry.\\n     * @param _rewardToken Address of the reward token.\\n     * @param _newRewardRatio The new reward rate.\\n     * @param _durationInBlock The duration of the reward period in blocks.\\n     * @param _rewardRole Role that controls role based functions in Rewarder.\\n     */\\n    constructor(\\n        ISystemRegistry _systemRegistry,\\n        address _rewardToken,\\n        uint256 _newRewardRatio,\\n        uint256 _durationInBlock,\\n        bytes32 _rewardRole\\n    ) SecurityBase(address(_systemRegistry.accessController())) {\\n        Errors.verifyNotZero(_rewardToken, \\\"_rewardToken\\\");\\n        Errors.verifyNotZero(_durationInBlock, \\\"_durationInBlock\\\");\\n        Errors.verifyNotZero(_newRewardRatio, \\\"_newRewardRatio\\\");\\n        Errors.verifyNotZero(_rewardRole, \\\"_rewardRole\\\");\\n\\n        systemRegistry = _systemRegistry;\\n        if (!systemRegistry.isRewardToken(_rewardToken)) {\\n            revert Errors.InvalidParam(\\\"_rewardToken\\\");\\n        }\\n        rewardToken = _rewardToken;\\n        newRewardRatio = _newRewardRatio;\\n        durationInBlock = _durationInBlock;\\n        rewardRole = _rewardRole;\\n    }\\n\\n    /// @notice Restricts access to whitelisted addresses or holders of the liquidator role.\\n    modifier onlyWhitelisted() {\\n        if (!whitelistedAddresses[msg.sender] && !_hasRole(Roles.LIQUIDATOR_ROLE, msg.sender)) {\\n            revert Errors.AccessDenied();\\n        }\\n        _;\\n    }\\n\\n    /**\\n     * @notice Internal function that updates the user's rewards.\\n     * @param account The address of the user to update the rewards for.\\n     */\\n    function _updateReward(address account) internal {\\n        uint256 earnedRewards = 0;\\n        rewardPerTokenStored = rewardPerToken();\\n\\n        // Do not update lastUpdateBlock if rewardPerTokenStored is 0, to prevent the loss of rewards when supply is 0\\n        if (rewardPerTokenStored > 0) {\\n            if (account != address(0)) {\\n                lastUpdateBlock = lastBlockRewardApplicable();\\n                earnedRewards = earned(account);\\n                rewards[account] = earnedRewards;\\n                userRewardPerTokenPaid[account] = rewardPerTokenStored;\\n            }\\n        }\\n\\n        emit UserRewardUpdated(account, earnedRewards, rewardPerTokenStored, lastUpdateBlock);\\n    }\\n\\n    /**\\n     * @notice Determines the last block number applicable for rewards calculation.\\n     * @return The block number used for rewards calculation.\\n     * @dev If the current block number is less than the period finish => current block number,\\n     *      Else => the period finish block number.\\n     */\\n    function lastBlockRewardApplicable() public view returns (uint256) {\\n        return block.number < periodInBlockFinish ? block.number : periodInBlockFinish;\\n    }\\n\\n    /**\\n     * @notice Calculates the current reward per token value.\\n     * @return The reward per token value.\\n     * @dev It takes into account the total supply, reward rate, and duration of the reward period.\\n     */\\n    function rewardPerToken() public view returns (uint256) {\\n        uint256 total = totalSupply();\\n        if (total == 0) {\\n            return rewardPerTokenStored;\\n        }\\n\\n        return rewardPerTokenStored + ((lastBlockRewardApplicable() - lastUpdateBlock) * rewardRate * 1e18 / total);\\n    }\\n\\n    /**\\n     * @notice Calculates the amount of rewards earned by an account.\\n     * @dev\\n     * The function calculates the earned rewards based on the balance of the account,\\n     * the total supply of the staked tokens, the rewards per token and the last reward rate\\n     * the user has been paid at. The reward rate is determined by the `rewardPerToken`\\n     * function and is a measure of the amount of rewards distributed per staked token\\n     * per block.\\n     *\\n     * The amount of earned rewards is calculated as follows:\\n     * - First, it calculates the difference between the current reward per token and\\n     *   the last reward rate the user was paid at, which gives the reward rate per token\\n     *   since the user last claimed rewards.\\n     * - This difference is multiplied by the balance of the account to find the total\\n     *   amount of rewards the account has earned since it last claimed rewards.\\n     * - Finally, the function adds the rewards that have not yet been claimed by the\\n     *   user to find the total amount of earned rewards.\\n     *\\n     * @param account The address of the account to calculate the earned rewards for.\\n     * @return The total amount of rewards that the account has earned.\\n     */\\n    function earned(address account) public view returns (uint256) {\\n        return (balanceOf(account) * (rewardPerToken() - userRewardPerTokenPaid[account]) / 1e18) + rewards[account];\\n    }\\n\\n    /**\\n     * @notice Queues the specified amount of new rewards for distribution to stakers.\\n     * @param newRewards The amount of new rewards.\\n     * @dev The function transfers the new rewards from the caller to this contract,\\n     *      ensuring that the deposited amount matches the declared rewards.\\n     *      Irrespective of whether we're near the start or the end of a reward period, if the accrued rewards\\n     *      are too large relative to the new rewards (i.e., queuedRatio is greater than newRewardRatio), the new\\n     *      rewards will be added to the queue rather than being immediately distributed.\\n     */\\n    function queueNewRewards(uint256 newRewards) external onlyWhitelisted {\\n        uint256 startingQueuedRewards = queuedRewards;\\n        uint256 startingNewRewards = newRewards;\\n\\n        newRewards += startingQueuedRewards;\\n\\n        if (block.number >= periodInBlockFinish) {\\n            notifyRewardAmount(newRewards);\\n            queuedRewards = 0;\\n        } else {\\n            uint256 elapsedBlock = block.number - (periodInBlockFinish - durationInBlock);\\n            uint256 currentAtNow = rewardRate * elapsedBlock;\\n            uint256 queuedRatio = currentAtNow * 1000 / newRewards;\\n\\n            if (queuedRatio < newRewardRatio) {\\n                notifyRewardAmount(newRewards);\\n                queuedRewards = 0;\\n            } else {\\n                queuedRewards = newRewards;\\n            }\\n        }\\n\\n        emit QueuedRewardsUpdated(startingQueuedRewards, startingNewRewards, queuedRewards);\\n\\n        // Transfer the new rewards from the caller to this contract.\\n        IERC20(rewardToken).safeTransferFrom(msg.sender, address(this), startingNewRewards);\\n    }\\n\\n    /**\\n     * @notice Notifies the contract about the amount of reward tokens to be distributed.\\n     * @param reward The amount of reward tokens to be distributed.\\n     * @dev The function updates the rewardRate, lastUpdateBlock, periodInBlockFinish, and historicalRewards.\\n     *      It calculates the remaining reward based on the current block number and adjusts the reward rate\\n     *      accordingly.\\n     *\\n     *      If the current block number is within the reward period, the remaining reward is added to the reward queue\\n     *      and will be distributed gradually over the remaining duration.\\n     *      If the current block number exceeds the reward period, the remaining reward is distributed immediately.\\n     */\\n    function notifyRewardAmount(uint256 reward) internal {\\n        historicalRewards += reward;\\n\\n        // Correctly calculate leftover reward when totalSupply() is 0.\\n        if (totalSupply() == 0) {\\n            if (lastUpdateBlock < periodInBlockFinish) {\\n                // slither-disable-next-line divide-before-multiply\\n                reward += (periodInBlockFinish - lastUpdateBlock) * rewardRate;\\n            }\\n        } else if (block.number < periodInBlockFinish) {\\n            uint256 remaining = periodInBlockFinish - block.number;\\n\\n            // slither-disable-next-line divide-before-multiply\\n            uint256 leftover = remaining * rewardRate;\\n            reward += leftover;\\n        }\\n\\n        _updateReward(address(0));\\n\\n        // slither-disable-next-line divide-before-multiply\\n        rewardRate = reward / durationInBlock;\\n        // If `reward` < `durationInBlock`, it will result in a `rewardRate` of 0, which we want to prevent.\\n        if (rewardRate <= 0) revert Errors.ZeroAmount();\\n\\n        currentRewards = reward;\\n        lastUpdateBlock = block.number;\\n        periodInBlockFinish = block.number + durationInBlock;\\n\\n        emit RewardAdded(reward, rewardRate, lastUpdateBlock, periodInBlockFinish, historicalRewards);\\n    }\\n\\n    /**\\n     * @notice Sets the lock duration for staked Toke tokens.\\n     * @dev If the lock duration is set to 0, it turns off the staking functionality for Toke tokens.\\n     * @dev If the lock duration is greater than 0, it should be long enough to satisfy the minimum staking duration\\n     * requirement of the accToke contract.\\n     * @param _tokeLockDuration The lock duration for staked Toke tokens.\\n     */\\n    function setTokeLockDuration(uint256 _tokeLockDuration) external hasRole(rewardRole) {\\n        // if duration is not set to 0 (that would turn off functionality), make sure it's long enough for accToke\\n        if (_tokeLockDuration > 0) {\\n            Errors.verifyNotZero(address(systemRegistry.gpToke()), \\\"accToke\\\");\\n            if (_tokeLockDuration < systemRegistry.gpToke().minStakeDuration()) {\\n                revert IAccToke.StakingDurationTooShort();\\n            }\\n        }\\n\\n        tokeLockDuration = _tokeLockDuration;\\n        emit TokeLockDurationUpdated(_tokeLockDuration);\\n    }\\n\\n    /**\\n     * @notice Add an address to the whitelist.\\n     * @param wallet The address to be added to the whitelist.\\n     */\\n    function addToWhitelist(address wallet) external override hasRole(rewardRole) {\\n        Errors.verifyNotZero(wallet, \\\"wallet\\\");\\n        if (whitelistedAddresses[wallet]) {\\n            revert Errors.ItemExists();\\n        }\\n        whitelistedAddresses[wallet] = true;\\n\\n        emit AddedToWhitelist(wallet);\\n    }\\n\\n    /**\\n     * @notice Remove an address from the whitelist.\\n     * @param wallet The address to be removed from the whitelist.\\n     */\\n    function removeFromWhitelist(address wallet) external override hasRole(rewardRole) {\\n        if (!whitelistedAddresses[wallet]) {\\n            revert Errors.ItemNotFound();\\n        }\\n\\n        whitelistedAddresses[wallet] = false;\\n\\n        emit RemovedFromWhitelist(wallet);\\n    }\\n\\n    /**\\n     * @notice Check if an address is whitelisted.\\n     * @param wallet The address to be checked.\\n     * @return bool indicating if the address is whitelisted.\\n     */\\n    function isWhitelisted(address wallet) external view override returns (bool) {\\n        return whitelistedAddresses[wallet];\\n    }\\n\\n    /**\\n     * @notice Internal function to distribute rewards to a specific account.\\n     * @param account The address of the user to distribute rewards to.\\n     */\\n    function _getReward(address account) internal {\\n        Errors.verifyNotZero(account, \\\"account\\\");\\n\\n        uint256 reward = earned(account);\\n        (IAccToke accToke, address tokeAddress) = (systemRegistry.gpToke(), address(systemRegistry.toke()));\\n\\n        // slither-disable-next-line incorrect-equality\\n        if (reward == 0) return;\\n\\n        // if NOT toke, or staking is turned off (by duration = 0), just send reward back\\n        if (rewardToken != tokeAddress || tokeLockDuration == 0) {\\n            rewards[account] = 0;\\n            emit RewardPaid(account, reward);\\n\\n            IERC20(rewardToken).safeTransfer(account, reward);\\n        } else if (accToke.isStakeableAmount(reward)) {\\n            rewards[account] = 0;\\n            emit RewardPaid(account, reward);\\n            // authorize accToke to get our reward Toke\\n            LibAdapter._approve(IERC20(tokeAddress), address(accToke), reward);\\n\\n            // stake Toke\\n            accToke.stake(reward, tokeLockDuration, account);\\n        }\\n    }\\n\\n    /**\\n     * @notice Internal function to handle withdrawals.\\n     * @param account The address of the user to handle withdrawal.\\n     * @dev This function primarily checks for valid parameters and emits an event.\\n     *      It adopts a pattern established by Convex. It helps with:\\n     *      - Identifying system errors (if a revert happens here, there is an issue within our system).\\n     *      - Enhancing system monitoring capabilities through emitted events.\\n     * @param amount The amount to be withdrawn.\\n     */\\n    function _withdrawAbstractRewarder(address account, uint256 amount) internal {\\n        Errors.verifyNotZero(account, \\\"account\\\");\\n        Errors.verifyNotZero(amount, \\\"amount\\\");\\n\\n        emit Withdrawn(account, amount);\\n    }\\n\\n    /**\\n     * @notice Internal function to handle staking.\\n     * @dev This function primarily checks for valid parameters and emits an event.\\n     *      It adopts a pattern established by Convex. It helps with:\\n     *      - Identifying system errors (if a revert happens here, there is an issue within our system).\\n     *      - Enhancing system monitoring capabilities through emitted events.\\n     * @param account The address of the user to handle staking.\\n     * @param amount The amount to be staked.\\n     */\\n    function _stakeAbstractRewarder(address account, uint256 amount) internal {\\n        Errors.verifyNotZero(account, \\\"account\\\");\\n        Errors.verifyNotZero(amount, \\\"amount\\\");\\n\\n        emit Staked(account, amount);\\n    }\\n\\n    function totalSupply() public view virtual returns (uint256);\\n\\n    function balanceOf(address account) public view virtual returns (uint256);\\n}\\n\"\r\n    },\r\n    \"src/stats/Stats.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n// Copyright (c) 2023 Tokemak Ops Ltd. All rights reserved.\\npragma solidity 0.8.17;\\n\\nimport { IStatsCalculator } from \\\"src/interfaces/stats/IStatsCalculator.sol\\\";\\nimport { Errors } from \\\"src/utils/Errors.sol\\\";\\n\\nlibrary Stats {\\n    uint256 public constant SECONDS_IN_YEAR = 365 * 24 * 60 * 60;\\n    uint256 public constant DEX_FEE_APR_SNAPSHOT_INTERVAL = 24 * 60 * 60; // daily\\n    uint256 public constant DEX_FEE_APR_FILTER_INIT_INTERVAL = 9 * 24 * 60 * 60; // 9 days\\n    uint256 public constant DEX_FEE_ALPHA = 1e17; // 0.1; must be less than 1e18\\n\\n    uint256 public constant INCENTIVE_INFO_SNAPSHOT_INTERVAL = 24 * 60 * 60; // daily\\n\\n    address public constant CURVE_ETH = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n\\n    /// @notice thrown if end timestamp is before start timestamp\\n    error IncorrectTimestamps();\\n\\n    /// @notice thrown if a divisor is zero\\n    error ZeroDivisor();\\n\\n    /// @notice thrown if expecting a negative change but get a positive change\\n    error NonNegativeChange();\\n\\n    /// @dev When registering dependent calculators, use this value for tokens/pools/etc that should be ignored\\n    bytes32 public constant NOOP_APR_ID = keccak256(abi.encode(\\\"NOOP_APR_ID\\\"));\\n\\n    error CalculatorAssetMismatch(bytes32 aprId, address calculator, address coin);\\n\\n    error DependentAprIdsMismatchTokens(uint256 numDependentAprIds, uint256 numCoins);\\n\\n    /// @notice Generate an id for a stat calc representing a base ERC20\\n    /// @dev For rETH/stETH/cbETH etc. Do not use for pools, LP tokens, staking platforms.\\n    /// @param tokenAddress address of the token\\n    function generateRawTokenIdentifier(address tokenAddress) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\\"erc20\\\", tokenAddress));\\n    }\\n\\n    /// @notice Generate an aprId for a curve pool\\n    /// @param poolAddress address of the curve pool\\n    function generateCurvePoolIdentifier(address poolAddress) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\\"curve\\\", poolAddress));\\n    }\\n\\n    /// @notice Generate an aprId for a balancer pool\\n    /// @param poolAddress address of the balancer pool\\n    function generateBalancerPoolIdentifier(address poolAddress) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\\"balancer\\\", poolAddress));\\n    }\\n\\n    function calculateAnnualizedChangeMinZero(\\n        uint256 startTimestamp,\\n        uint256 startValue,\\n        uint256 endTimestamp,\\n        uint256 endValue\\n    ) internal pure returns (uint256) {\\n        if (startValue == 0) revert ZeroDivisor();\\n        if (endTimestamp <= startTimestamp) revert IncorrectTimestamps();\\n        if (endValue <= startValue) return 0;\\n\\n        uint256 unannualized = (endValue * 1e18) / startValue - 1e18;\\n        uint256 timeDiff = endTimestamp - startTimestamp;\\n\\n        return unannualized * SECONDS_IN_YEAR / timeDiff;\\n    }\\n\\n    function calculateUnannualizedNegativeChange(\\n        uint256 startValue,\\n        uint256 endValue\\n    ) internal pure returns (uint256) {\\n        if (startValue == 0) revert ZeroDivisor();\\n        if (endValue >= startValue) revert NonNegativeChange();\\n\\n        return (startValue - endValue) * 1e18 / startValue;\\n    }\\n\\n    function getFilteredValue(\\n        uint256 alpha,\\n        uint256 priorValue,\\n        uint256 currentValue\\n    ) internal pure returns (uint256) {\\n        if (alpha > 1e18 || alpha == 0) revert Errors.InvalidParam(\\\"alpha\\\");\\n        return ((priorValue * (1e18 - alpha)) + (currentValue * alpha)) / 1e18;\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/access/IAccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\"\r\n    },\r\n    \"src/interfaces/rewarders/IStakeTracking.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity 0.8.17;\\n\\ninterface IStakeTracking {\\n    function totalSupply() external view returns (uint256);\\n    function balanceOf(address account) external view returns (uint256);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [\r\n      \"forge-std/=lib/forge-std/src/\",\r\n      \"ds-test/=lib/forge-std/lib/ds-test/src/\",\r\n      \"src/=src/\",\r\n      \"test/=test/\",\r\n      \"openzeppelin-contracts/=lib/openzeppelin-contracts/contracts/\",\r\n      \"erc4626-tests/=lib/erc4626-tests/\",\r\n      \"prb-math/=lib/prb-math/\",\r\n      \"crytic/properties/=lib/properties/\",\r\n      \"ERC4626/=lib/properties/lib/ERC4626/contracts/\",\r\n      \"properties/=lib/properties/contracts/\",\r\n      \"solmate/=lib/properties/lib/solmate/src/\",\r\n      \"usingtellor/=lib/usingtellor/contracts/\"\r\n    ],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": false,\r\n      \"bytecodeHash\": \"ipfs\"\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {\r\n      \"src/strategy/StructuredLinkedList.sol\": {\r\n        \"StructuredLinkedList\": \"0x6C566a67b34CFed9821FC7433750A1391fa97989\"\r\n      },\r\n      \"src/strategy/WithdrawalQueue.sol\": {\r\n        \"WithdrawalQueue\": \"0xC754773B0e8CaFbD17e978be3c31ef34869ba733\"\r\n      },\r\n      \"src/vault/libs/AutoPool4626.sol\": {\r\n        \"AutoPool4626\": \"0xb73323a5e3c9ffc9050b1c8c90bb6697e07f4a2e\"\r\n      },\r\n      \"src/vault/libs/AutoPoolFees.sol\": {\r\n        \"AutoPoolFees\": \"0x0e3d550f22998bfc0744228cd10c2377764eba31\"\r\n      },\r\n      \"src/vault/libs/AutoPoolToken.sol\": {\r\n        \"AutoPoolToken\": \"0x9a64511219Fd5aE18ED06088dded100a3c579b26\"\r\n      },\r\n      \"src/vault/libs/LMPDebt.sol\": {\r\n        \"LMPDebt\": \"0x6e4FD2077df6754EC257C13D7A4dEbbe717f9d48\"\r\n      },\r\n      \"src/vault/libs/LMPDestinations.sol\": {\r\n        \"LMPDestinations\": \"0x5B6EAaC27CDeba310A335aFeC9d18f9b3137EFA5\"\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract ISystemRegistry\",\"name\":\"_systemRegistry\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_template\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_defaultRewardRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_defaultRewardBlockDuration\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AccessDenied\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"paramName\",\"type\":\"string\"}],\"name\":\"InvalidParam\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidStrategy\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ItemExists\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ItemNotFound\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UndefinedAddress\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"paramName\",\"type\":\"string\"}],\"name\":\"ZeroAddress\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blockDuration\",\"type\":\"uint256\"}],\"name\":\"DefaultBlockDurationSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardRatio\",\"type\":\"uint256\"}],\"name\":\"DefaultRewardRatioSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"template\",\"type\":\"address\"}],\"name\":\"StrategyTemplateAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"template\",\"type\":\"address\"}],\"name\":\"StrategyTemplateRemoved\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"accessController\",\"outputs\":[{\"internalType\":\"contract IAccessController\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"strategyTemplate\",\"type\":\"address\"}],\"name\":\"addStrategyTemplate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"strategyTemplate\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"symbolSuffix\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"descPrefix\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"extraParams\",\"type\":\"bytes\"}],\"name\":\"createVault\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"newVaultAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defaultRewardBlockDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defaultRewardRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStrategyTemplates\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSystemRegistry\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"isStrategyTemplate\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"strategyTemplate\",\"type\":\"address\"}],\"name\":\"removeStrategyTemplate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"blockDuration\",\"type\":\"uint256\"}],\"name\":\"setDefaultRewardBlockDuration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rewardRatio\",\"type\":\"uint256\"}],\"name\":\"setDefaultRewardRatio\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"template\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vaultRegistry\",\"outputs\":[{\"internalType\":\"contract ILMPVaultRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"vaultTypeToPrototype\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "LMPVaultFactory", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000000406d2d96871f798fcf54d5969f69f55f803eea400000000000000000000000049012dfaac52229b429530ef18e11761ecf6c5c600000000000000000000000000000000000000000000000000000000000003200000000000000000000000000000000000000000000000000000000000000064", "EVMVersion": "london", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}