{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Dopamine.sol\": {\r\n      \"content\": \"/** \\nDOPAMINE (DOPA) \\nRevanchist dynastic epochal levels of fuck you wealth. Bet more.\\nTwitter:  https://twitter.com/getdopamine\\nWebsite:  https://getdopamine.xyz\\n**/\\n\\n// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract Dopamine is ERC20, Ownable {\\n\\tuint256 public constant maxSupply = 1_000_000_000_000 * 10 ** 18; // 1t\\n\\tuint256 public constant operationalSupply = 750_000_000_000 * 10 ** 18; // 750b \\n\\tuint256 public constant mintAmount = 18_000_000 * 10 ** 18; // 18m\\n\\tuint256 public constant maxMintCount = 8;\\n\\tuint256 public constant batchMintFee = 5; // in percent\\n\\tuint256 public constant tradingFee  = 2; // in percent\\n\\tuint256 public seed;\\n\\tuint256 public tradingEnabledTime;\\n\\tuint256 public constant highTaxDuration = 2 minutes; // anti-bot first 2 mins\\n\\tuint256 public constant highTaxRate = 20;\\n\\taddress payable public marketingWallet;\\n\\tbool public tradingEnabled;\\n\\tbool public mintingEnabled;\\n\\tmapping(address => uint256) public mintCounts;\\n\\tmapping(address => bool) private blocklist;\\n\\tmapping(address => bool) private isExcludedFromFee;\\n\\n\\tconstructor() ERC20(\\\"Dopamine\\\", \\\"DOPA\\\") {\\n\\t\\tisExcludedFromFee[msg.sender] = true;\\n\\t\\tmarketingWallet = payable(msg.sender);\\n\\t\\t_mint((address(this)), maxSupply);\\n\\t\\t_transfer(address(this), msg.sender, operationalSupply);\\n\\t}\\n\\n\\tstruct Round {\\n\\t\\taddress owner; // address of the current round owner\\n\\t\\tuint256 countdown; // e.g. 300 = 5 minutes \\n\\t\\tuint256 prizePool; // e.g. 100 * 10 ** 18 = 100 DOPA\\n\\t\\tuint256 takeoverCost; // e.g. 100 * 10 ** 18 = 100 DOPA\\n\\t\\tuint256 takeoverCostIncrease; // e.g. 5 = 5% increase each takeover\\n\\t\\tuint256 lastTakeoverTime; // timestamp of the last takeover\\n\\t\\tuint256 sidepot; // e.g. 100 * 10 ** 18 = 100 DOPA\\n\\t\\tuint256 sidepotSpinCost; // e.g. 10 * 10 ** 18 = 10 DOPA\\n\\t}\\n\\n\\tRound public currentRound;\\n\\n\\t// Events\\n\\tevent RoundStarted(\\n\\t\\tuint256 countdown,\\n\\t\\tuint256 prizePool,\\n\\t\\tuint256 takeoverCostIncrease\\n\\t);\\n\\tevent Takeover(address indexed user, uint256 amount);\\n\\tevent Received(address user, uint amount);\\n\\tevent PrizePoolClaimed(address indexed claimer, uint256 amount);\\n\\tevent SidepotSpin(address indexed user, uint256 result);\\n\\tevent SidepotWin(address indexed user, uint256 amount);\\n\\n\\t// Modifiers\\n\\tmodifier onlyWhenRoundHasEnded() {\\n\\t\\trequire(\\n\\t\\t\\tblock.timestamp >= currentRound.lastTakeoverTime + currentRound.countdown,\\n\\t\\t\\t\\\"Dopamine: Round not finished\\\"\\n\\t\\t);\\n\\t\\t_;\\t\\n\\t}\\n\\n\\t// Once turned on can never be turned off\\n\\tfunction enableTrading() external onlyOwner {\\n\\t\\ttradingEnabled = true;\\n\\t\\ttradingEnabledTime = block.timestamp;\\n\\t}\\n\\n\\t// Once turned on can never be turned off\\n\\tfunction enableMinting() external onlyOwner {\\n\\t\\tmintingEnabled = true;\\n\\t}\\n\\n\\tfunction setMarketingWallet(address _marketingWallet) external onlyOwner {\\n\\t\\tmarketingWallet = payable(_marketingWallet);\\n\\t}\\n\\n\\tfunction manageBlocklist(address user, bool blockUser) external onlyOwner {\\n\\t\\tblocklist[user] = blockUser;\\n\\t}\\n\\n\\tfunction manageExcludedFromFee(address user, bool exclude) external onlyOwner {\\n\\t\\tisExcludedFromFee[user] = exclude;\\n\\t}\\n\\n\\t// Game code\\n\\tfunction startNewRound(\\n\\t\\tuint256 _countdown,\\n\\t\\tuint256 _prizePool,\\n\\t\\tuint256 _takeoverCost,\\n\\t\\tuint256 _takeoverCostIncrease,\\n\\t\\tuint256 _sidepot,\\n\\t\\tuint256 _sidepotSpinCost\\n\\t) external onlyOwner onlyWhenRoundHasEnded {\\n\\t\\trequire(\\n\\t\\t\\tIERC20(address(this)).transferFrom(msg.sender, address(this), _prizePool + _sidepot),\\n\\t\\t\\t\\\"Dopamine: Transfer failed\\\"\\n\\t\\t);\\n\\t\\trequire(_prizePool > 0, \\\"Dopamine: Prize pool must be greater than 0\\\");\\n\\t\\trequire(_countdown > 0, \\\"Dopamine: Countdown must be greater than 0\\\");\\n\\t\\trequire(_takeoverCost > 0, \\\"Dopamine: Takeover cost must be greater than 0\\\");\\n\\t\\trequire(_takeoverCostIncrease > 0 && _takeoverCostIncrease <= 25, \\\"Dopamine: Takeover cost increase must be greater than 0 and less than or equal to 25\\\");\\n\\t\\trequire(_sidepot > 0, \\\"Dopamine: Sidepot must be greater than 0\\\");\\n\\t\\trequire(_sidepotSpinCost > 0, \\\"Dopamine: Sidepot spin cost must be greater than 0\\\");\\n\\n\\t\\tcurrentRound = Round(\\n\\t\\t\\taddress(0),\\n\\t\\t\\t_countdown,\\n\\t\\t\\t_prizePool,\\n\\t\\t\\t_takeoverCost,\\n\\t\\t\\t_takeoverCostIncrease,\\n\\t\\t\\tblock.timestamp,\\n\\t\\t\\t_sidepot,\\n\\t\\t\\t_sidepotSpinCost\\n\\t\\t);\\n\\t\\temit RoundStarted(\\n\\t\\t\\t_countdown,\\n\\t\\t\\t_prizePool,\\n\\t\\t\\t_takeoverCostIncrease\\n\\t\\t);\\n\\t}\\n\\n\\tfunction claimPrizePool() external onlyWhenRoundHasEnded  {\\n\\t\\trequire(\\n\\t\\t\\tmsg.sender == currentRound.owner,\\n\\t\\t\\t\\\"Dopamine: Only the winner can claim the prize pool\\\");\\n\\t\\trequire(\\n\\t\\t\\tcurrentRound.prizePool > 0,\\n\\t\\t\\t\\\"Dopamine: Prizepool has already been claimed\\\"\\n\\t\\t);\\n\\t\\t_transfer(address(this), msg.sender, currentRound.prizePool);\\n\\t\\tcurrentRound.prizePool = 0;\\n\\t\\temit PrizePoolClaimed(msg.sender, currentRound.prizePool);\\n\\t}\\n\\n\\tfunction takeover() external {\\n\\t\\trequire(\\n\\t\\t\\tcurrentRound.takeoverCost > 0,\\n\\t\\t\\t\\\"Dopamine: Round has not started\\\"\\n\\t\\t);\\n\\t\\trequire(\\n\\t\\t\\tIERC20(address(this)).transferFrom(msg.sender, address(this), currentRound.takeoverCost),\\n\\t\\t\\t\\\"Dopamine: Transfer failed\\\"\\n\\t\\t);\\n\\t\\trequire(\\n\\t\\t\\tmsg.sender != currentRound.owner,\\n\\t\\t\\t\\\"Dopamine: You already own this round\\\"\\n\\t\\t);\\n\\n\\t\\tuint256 addToSidepot = (currentRound.takeoverCost * 40) / 100;\\n\\t\\tuint256 burnAmount = (currentRound.takeoverCost * 20) / 100;\\n\\t\\tuint256 addToPrizePool = currentRound.takeoverCost - addToSidepot - burnAmount;\\n\\n\\t\\tcurrentRound.owner = msg.sender;\\n\\t\\tcurrentRound.prizePool += addToPrizePool; \\n\\t\\tcurrentRound.takeoverCost = \\n\\t\\t\\t(currentRound.takeoverCost * (100 + currentRound.takeoverCostIncrease)) / 100;\\n\\t\\tcurrentRound.lastTakeoverTime = block.timestamp;\\n\\t\\tcurrentRound.sidepot += addToSidepot;\\n\\n\\t\\t_burn(address(this), burnAmount);\\t\\n\\t\\temit Takeover(msg.sender, currentRound.takeoverCost);\\n\\t}\\n\\n\\tfunction sidepotSpin() external returns (bool) {\\n\\t\\trequire(\\n\\t\\t\\tcurrentRound.sidepot > 0,\\n\\t\\t\\t\\\"Dopamine: Sidepot is empty\\\"\\n\\t\\t);\\n\\t\\trequire(\\n\\t\\t\\tIERC20(address(this)).transferFrom(msg.sender, address(this), currentRound.sidepotSpinCost),\\n\\t\\t\\t\\\"Dopamine: Transfer failed\\\"\\n\\t\\t);\\n\\t\\tcurrentRound.sidepot += currentRound.sidepotSpinCost;\\n\\t\\tuint256 roll = sidepotCheck(100, msg.sender);\\n\\t\\tif (roll == 42) {\\n\\t\\t\\t_transfer(address(this), msg.sender, currentRound.sidepot);\\n\\t\\t\\tcurrentRound.sidepot = 0;\\n\\t\\t\\temit SidepotWin(msg.sender, currentRound.sidepot);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\temit SidepotSpin(msg.sender, roll);\\n\\t\\treturn false;\\n\\t}\\t\\n\\t\\n\\tfunction sidepotCheck(uint max, address _a) private returns (uint) {\\n\\t\\tseed++;\\n\\t\\treturn uint(keccak256(abi.encodePacked(blockhash(block.number - 1), _a, seed))) % max;\\n\\t}\\n\\n\\tfunction mint() external {\\n\\t\\trequire(mintingEnabled, \\\"Dopamine: Minting is not enabled\\\");\\n\\t\\trequire(msg.sender == tx.origin, \\\"Dopamine: Cannot mint from contract\\\");\\n\\t\\trequire(\\n\\t\\t\\tbalanceOf(address(this)) - currentRound.prizePool >= mintAmount,\\n\\t\\t\\t\\\"Dopamine: Not enough DOPA left to mint\\\"\\n\\t\\t);\\n\\t\\trequire(\\n\\t\\t\\tmintCounts[msg.sender] < 8,\\n\\t\\t\\t\\\"Dopamine: Max mint count reached\\\"\\n\\t\\t);\\n\\t\\tmintCounts[msg.sender] += 1;\\n\\t\\t_transfer(address(this), msg.sender, mintAmount);\\n\\t}\\n\\n\\tfunction batchMint() external {\\n\\t\\trequire(mintingEnabled, \\\"Dopamine: Minting is not enabled\\\");\\n\\t\\trequire(msg.sender == tx.origin, \\\"Dopamine: Cannot mint from contract\\\");\\n\\t\\trequire(\\n\\t\\t\\tbalanceOf(address(this)) - currentRound.prizePool >= mintAmount * maxMintCount,\\n\\t\\t\\t\\\"Dopamine: Not enough DOPA left to mint\\\"\\n\\t\\t);\\n\\t\\trequire(\\n\\t\\t\\tmintCounts[msg.sender] < 8,\\n\\t\\t\\t\\\"Dopamine: Max mint count reached\\\"\\n\\t\\t);\\n\\t\\tuint256 totalAmount = mintAmount * (maxMintCount - mintCounts[msg.sender]); // 144m\\n\\t\\tuint256 tax = (totalAmount * batchMintFee) / 100; // 7.2m\\n\\t\\tuint256 afterTaxAmount = totalAmount - tax; // 136.8m\\n\\t\\tmintCounts[msg.sender] = 8;\\n\\t\\t_transfer(address(this), msg.sender, afterTaxAmount);\\n\\t\\t_transfer(address(this), address(marketingWallet), tax);\\n\\t}\\n\\n\\tfunction _transfer(address from, address to, uint256 amount) internal virtual override {\\n\\t\\trequire(from != address(0), \\\"Dopamine: Transfer from the zero address\\\");\\n\\t\\trequire(to != address(0), \\\"Dopamine: Transfer to the zero address\\\");\\n\\t\\trequire(amount > 0, \\\"Dopamine: Transfer amount must be greater than zero\\\");\\n\\t\\tif (\\n\\t\\t\\tisExcludedFromFee[from] || \\n\\t\\t\\tisExcludedFromFee[to] || \\n\\t\\t\\ttradingEnabled == false || \\n\\t\\t\\tfrom == address(this) || \\n\\t\\t\\tto == address(this)) {\\n\\t\\t\\tsuper._transfer(from, to, amount);\\n\\t\\t} else {\\n\\t\\t\\tuint256 tradingFeeRate;\\n\\t\\t\\tif (block.timestamp < tradingEnabledTime + highTaxDuration) {\\n\\t\\t\\t\\t// protect public from snipers in first few minutes\\n\\t\\t\\t\\ttradingFeeRate = highTaxRate;\\n\\t\\t\\t} else {\\n\\t\\t\\t\\ttradingFeeRate = tradingFee;\\n\\t\\t\\t}\\n\\t\\t\\tuint256 fee = (amount * tradingFeeRate) / 100;\\n\\t\\t\\tuint256 afterFeeAmount = amount - fee;\\n\\t\\t\\tsuper._transfer(from, to, afterFeeAmount);\\n\\t\\t\\tsuper._transfer(from, address(marketingWallet), fee);\\n\\t\\t}\\n\\t}\\n\\n\\tfunction _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual override {\\n\\t\\tsuper._beforeTokenTransfer(from, to, amount);\\n\\t\\tif (!tradingEnabled) {\\n\\t\\t\\trequire(from == owner() || to == owner() || from == address(this) || to == address(this), \\\"Dopamine: Trading is not enabled\\\");\\n\\t\\t}\\n\\t\\trequire(!blocklist[from] && !blocklist[to], \\\"Dopamine: Address is blocklisted\\\");\\n\\t}\\n\\n\\tfunction burn(uint256 amount) external {\\n\\t\\t_burn(msg.sender, amount);\\n\\t}\\n\\n\\tfallback() external payable {\\n\\t\\temit Received(msg.sender, msg.value);\\n\\t}\\n\\n\\treceive() external payable {\\n\\t\\temit Received(msg.sender, msg.value);\\n\\t}\\n\\n\\tfunction withdraw() external onlyOwner {\\n\\t\\tuint balance = address(this).balance;\\n\\t\\tpayable(msg.sender).transfer(balance);\\n\\t}\\n\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"claimer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PrizePoolClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Received\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"countdown\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"prizePool\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"takeoverCostIncrease\",\"type\":\"uint256\"}],\"name\":\"RoundStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"result\",\"type\":\"uint256\"}],\"name\":\"SidepotSpin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"SidepotWin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Takeover\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"batchMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"batchMintFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimPrizePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentRound\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"countdown\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"prizePool\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"takeoverCost\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"takeoverCostIncrease\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastTakeoverTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sidepot\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sidepotSpinCost\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableMinting\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"highTaxDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"highTaxRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"blockUser\",\"type\":\"bool\"}],\"name\":\"manageBlocklist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"exclude\",\"type\":\"bool\"}],\"name\":\"manageExcludedFromFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingWallet\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxMintCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"mintCounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintingEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"operationalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"seed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_marketingWallet\",\"type\":\"address\"}],\"name\":\"setMarketingWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sidepotSpin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_countdown\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_prizePool\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_takeoverCost\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_takeoverCostIncrease\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_sidepot\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_sidepotSpinCost\",\"type\":\"uint256\"}],\"name\":\"startNewRound\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"takeover\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingEnabledTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "Dopamine", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}