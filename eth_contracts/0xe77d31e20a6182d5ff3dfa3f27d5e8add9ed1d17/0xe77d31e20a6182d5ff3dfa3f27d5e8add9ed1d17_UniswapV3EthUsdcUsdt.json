{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/interfaces/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/IERC20.sol\\\";\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/Defii.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nimport \\\"./interfaces/IDefiiFactory.sol\\\";\\nimport \\\"./interfaces/IDefii.sol\\\";\\n\\nabstract contract Defii is IDefii {\\n    using SafeERC20 for IERC20;\\n\\n    address public owner;\\n    address public incentiveVault;\\n    address public factory;\\n\\n    constructor() {\\n        // prevent usage implementation as defii\\n        owner = msg.sender;\\n    }\\n\\n    // Current version of Defii contract. Each version have some new features.\\n    // After adding new features to Defii contract, add new version to this comment\\n    // and increase returned version\\n\\n    // version 1: just Defii with enter, harvest, exit\\n    // version 2: Added DefiiFactory.getAllWallets, DefiiFactory.getAllDefiis,\\n    //            DefiiFactory.getAllAllocations, DefiiFactory.getAllInfos\\n    // version 3: Added incentiveVault\\n    // version 4: Added Defii.getBalance and DefiiFactory.getAllBalances\\n    function version() external pure returns (uint16) {\\n        return 4;\\n    }\\n\\n    /// @notice Sets owner and factory addresses. Could run only once, called by factory.\\n    /// @param owner_ Owner (for ACL and transfers out)\\n    /// @param factory_ For validation and info about executor\\n    /// @param incentiveVault_ Address, that collect all incentive tokens\\n    function init(\\n        address owner_,\\n        address factory_,\\n        address incentiveVault_\\n    ) external {\\n        require(owner == address(0), \\\"Already initialized\\\");\\n        owner = owner_;\\n        factory = factory_;\\n        incentiveVault = incentiveVault_;\\n        _postInit();\\n    }\\n\\n    /// @notice Calculates balances of given tokens. Returns difference of token amount before exit and after exit.\\n    /// @dev Should marked as view in ABI\\n    /// @param tokens Owner (for ACL and transfers out)\\n    /// @return balances Info about token balances\\n    function getBalance(address[] calldata tokens)\\n        external\\n        returns (BalanceItem[] memory balances)\\n    {\\n        (, bytes memory result) = address(this).call(\\n            abi.encodeWithSelector(this.getBalanceAndRevert.selector, tokens)\\n        );\\n        balances = abi.decode(result, (BalanceItem[]));\\n    }\\n\\n    /// @notice Use getBalance. This function always reverts.\\n    function getBalanceAndRevert(address[] calldata tokens) external {\\n        BalanceItem[] memory balances = new BalanceItem[](tokens.length);\\n        for (uint256 i = 0; i < tokens.length; i++) {\\n            balances[i] = BalanceItem({\\n                token: tokens[i],\\n                decimals: IERC20Metadata(tokens[i]).decimals(),\\n                balance: IERC20(tokens[i]).balanceOf(address(this)),\\n                incentiveVaultBalance: IERC20(tokens[i]).balanceOf(\\n                    incentiveVault\\n                )\\n            });\\n        }\\n\\n        if (hasAllocation()) {\\n            _exit();\\n        }\\n\\n        for (uint256 i = 0; i < tokens.length; i++) {\\n            uint256 balanceAfter = IERC20(tokens[i]).balanceOf(address(this));\\n            uint256 incentiveVaultBalanceAfter = IERC20(tokens[i]).balanceOf(\\n                incentiveVault\\n            );\\n            if (balanceAfter > balances[i].balance) {\\n                balances[i].balance = balanceAfter - balances[i].balance;\\n            } else {\\n                balances[i].balance = 0;\\n            }\\n            if (\\n                incentiveVaultBalanceAfter > balances[i].incentiveVaultBalance\\n            ) {\\n                balances[i].incentiveVaultBalance =\\n                    incentiveVaultBalanceAfter -\\n                    balances[i].incentiveVaultBalance;\\n            } else {\\n                balances[i].incentiveVaultBalance = 0;\\n            }\\n        }\\n\\n        bytes memory returnData = abi.encode(balances);\\n        uint256 returnDataLength = returnData.length;\\n        assembly {\\n            revert(add(returnData, 0x20), returnDataLength)\\n        }\\n    }\\n\\n    //////\\n    // owner functions\\n    //////\\n\\n    /// @notice Change address of incentive vault.\\n    /// @param incentiveVault_ New incentive vault address\\n    function changeIncentiveVault(address incentiveVault_) external onlyOwner {\\n        incentiveVault = incentiveVault_;\\n    }\\n\\n    /// @notice Enters to DEFI instrument. Could run only by owner.\\n    function enter() external onlyOwner {\\n        _enter();\\n    }\\n\\n    /// @notice Runs custom transaction. Could run only by owner.\\n    /// @param target Address\\n    /// @param value Transaction value (e.g. 1 AVAX)\\n    /// @param data Enocded function call\\n    function runTx(\\n        address target,\\n        uint256 value,\\n        bytes memory data\\n    ) public onlyOwner {\\n        (bool success, ) = target.call{value: value}(data);\\n        require(success, \\\"runTx failed\\\");\\n    }\\n\\n    /// @notice Runs custom multiple transactions. Could run only by owner.\\n    /// @param targets List of address\\n    /// @param values List of transactions value (e.g. 1 AVAX)\\n    /// @param datas List of enocded function calls\\n    function runMultipleTx(\\n        address[] calldata targets,\\n        uint256[] calldata values,\\n        bytes[] calldata datas\\n    ) external onlyOwner {\\n        require(\\n            targets.length == values.length,\\n            \\\"targets and values length not match\\\"\\n        );\\n        require(\\n            targets.length == datas.length,\\n            \\\"targets and datas length not match\\\"\\n        );\\n\\n        for (uint256 i = 0; i < targets.length; i++) {\\n            runTx(targets[i], values[i], datas[i]);\\n        }\\n    }\\n\\n    //////\\n    // owner and executor functions\\n    //////\\n\\n    /// @notice Exit from DEFI instrument. Could run by owner or executor. Don't withdraw funds to owner account.\\n    function exit() external onlyOnwerOrExecutor {\\n        _exit();\\n    }\\n\\n    /// @notice Exit from DEFI instrument. Could run by owner or executor.\\n    function exitAndWithdraw() external onlyOnwerOrExecutor {\\n        _exit();\\n        _withdrawFunds();\\n    }\\n\\n    /// @notice Claim rewards and withdraw to owner.\\n    function harvest() external onlyOnwerOrExecutor {\\n        _harvest();\\n    }\\n\\n    /// @notice Claim rewards, sell it and and withdraw to owner.\\n    /// @param params Encoded params (use encodeParams function for it)\\n    function harvestWithParams(bytes memory params)\\n        external\\n        onlyOnwerOrExecutor\\n    {\\n        _harvestWithParams(params);\\n    }\\n\\n    /// @notice Withdraw funds to owner (some hardcoded assets, which uses in instrument).\\n    function withdrawFunds() external onlyOnwerOrExecutor {\\n        _withdrawFunds();\\n    }\\n\\n    /// @notice Withdraw ERC20 to owner\\n    /// @param token ERC20 address\\n    function withdrawERC20(IERC20 token) public onlyOnwerOrExecutor {\\n        _withdrawERC20(token);\\n    }\\n\\n    /// @notice Withdraw native token to owner (e.g ETH, AVAX, ...)\\n    function withdrawETH() public onlyOnwerOrExecutor {\\n        _withdrawETH();\\n    }\\n\\n    receive() external payable {}\\n\\n    function hasAllocation() public view virtual returns (bool);\\n\\n    //////\\n    // internal functions - common logic\\n    //////\\n\\n    function _withdrawERC20(IERC20 token) internal {\\n        uint256 tokenAmount = token.balanceOf(address(this));\\n        if (tokenAmount > 0) {\\n            token.safeTransfer(owner, tokenAmount);\\n        }\\n    }\\n\\n    function _withdrawETH() internal {\\n        uint256 balance = address(this).balance;\\n        if (balance > 0) {\\n            (bool success, ) = owner.call{value: balance}(\\\"\\\");\\n            require(success, \\\"Transfer failed\\\");\\n        }\\n    }\\n\\n    function _claimIncentive(IERC20 token) internal {\\n        uint256 tokenAmount = token.balanceOf(address(this));\\n        if (tokenAmount > 0) {\\n            token.safeTransfer(incentiveVault, tokenAmount);\\n        }\\n    }\\n\\n    //////\\n    // internal functions - defii specific logic\\n    //////\\n\\n    function _postInit() internal virtual {}\\n\\n    function _enter() internal virtual;\\n\\n    function _exit() internal virtual;\\n\\n    function _harvest() internal virtual {\\n        revert(\\\"Use harvestWithParams\\\");\\n    }\\n\\n    function _withdrawFunds() internal virtual;\\n\\n    function _harvestWithParams(bytes memory) internal virtual {\\n        revert(\\\"Run harvest\\\");\\n    }\\n\\n    //////\\n    // modifiers\\n    //////\\n\\n    modifier onlyOwner() {\\n        require(msg.sender == owner, \\\"Only owner\\\");\\n        _;\\n    }\\n\\n    modifier onlyOnwerOrExecutor() {\\n        require(\\n            msg.sender == owner ||\\n                msg.sender == IDefiiFactory(factory).executor(),\\n            \\\"Only owner or executor\\\"\\n        );\\n        _;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/defiis/UniswapV3EthUsdcUsdt.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.9;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\nimport {IERC721Enumerable} from \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nimport {Defii} from \\\"../Defii.sol\\\";\\nimport {DefiiWithCustomEnter} from \\\"../DefiiWithCustomEnter.sol\\\";\\nimport {DefiiWithCustomExit} from \\\"../DefiiWithCustomExit.sol\\\";\\n\\ncontract UniswapV3EthUsdcUsdt is DefiiWithCustomEnter, DefiiWithCustomExit {\\n    using SafeERC20 for IERC20;\\n\\n    INonfungiblePositionManager constant nfpManager =\\n        INonfungiblePositionManager(0xC36442b4a4522E871399CD717aBDD847Ab11FE88);\\n    ISwapRouter constant router =\\n        ISwapRouter(0xE592427A0AEce92De3Edee1F18E0157C05861564);\\n\\n    IERC20 constant USDC = IERC20(0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48);\\n    IERC20 constant USDT = IERC20(0xdAC17F958D2ee523a2206206994597C13D831ec7);\\n\\n    /// @notice Encode params for enterWithParamas function\\n    /// @param tickLower Left tick for position\\n    /// @param tickUpper Right tick for position\\n    /// @param fee The pool's fee in hundredths of a bip, i.e. 1e-6 (e.g 100 for 0.01%)\\n    /// @return encodedParams Encoded params for enterWithParams function\\n    function enterParams(\\n        int24 tickLower,\\n        int24 tickUpper,\\n        uint24 fee\\n    ) external view returns (bytes memory encodedParams) {\\n        uint256 usdcBalance = USDC.balanceOf(address(this));\\n\\n        IUniswapV3Pool pool = nfpManager.factory().getPool(USDC, USDT, fee);\\n        (uint256 sqrtPriceX96, int24 tickCurrent, , , , , ) = pool.slot0();\\n        uint256 token0AmountToSwap = calcToken0AmountToSwap(\\n            tickLower,\\n            tickUpper,\\n            tickCurrent,\\n            sqrtPriceX96,\\n            usdcBalance\\n        );\\n\\n        encodedParams = abi.encode(\\n            tickLower,\\n            tickUpper,\\n            fee,\\n            findNft(tickLower, tickUpper, fee),\\n            token0AmountToSwap\\n        );\\n    }\\n\\n    function findNft(\\n        int24 tickLower,\\n        int24 tickUpper,\\n        uint24 fee\\n    ) public view returns (uint256) {\\n        uint256 numPositions = nfpManager.balanceOf(address(this));\\n        for (uint256 i = 0; i < numPositions; i++) {\\n            uint256 positionId = nfpManager.tokenOfOwnerByIndex(\\n                address(this),\\n                i\\n            );\\n\\n            (\\n                ,\\n                ,\\n                ,\\n                ,\\n                uint24 positionFee,\\n                int24 positionTickLower,\\n                int24 positionTickUpper,\\n                ,\\n                ,\\n                ,\\n                ,\\n\\n            ) = nfpManager.positions(positionId);\\n\\n            if (\\n                tickLower == positionTickLower &&\\n                tickUpper == positionTickUpper &&\\n                fee == positionFee\\n            ) {\\n                return positionId;\\n            }\\n        }\\n        return 0;\\n    }\\n\\n    function calcToken0AmountToSwap(\\n        int24 tickLower,\\n        int24 tickUpper,\\n        int24 tickCurrent,\\n        uint256 P,\\n        uint256 token0Balance\\n    ) public pure returns (uint256 token0AmountToSwap) {\\n        if (tickLower > tickCurrent) return 0;\\n        if (tickUpper < tickCurrent) return token0Balance;\\n\\n        uint256 Q96 = 0x1000000000000000000000000;\\n        uint256 Q64 = 0x10000000000000000;\\n        uint256 Q32 = 0x100000000;\\n\\n        uint256 pa = TickMath.getSqrtRatioAtTick(tickLower);\\n        uint256 pb = TickMath.getSqrtRatioAtTick(tickUpper);\\n\\n        uint256 num = P * pb;\\n        uint256 denom = pb - P;\\n\\n        // k in Q32 format\\n        uint256 k = ((num / denom) * (P - pa)) / Q96 / Q64;\\n\\n        uint256 token0AmountToLiquidity = (token0Balance * Q32) / (k + Q32);\\n        token0AmountToSwap = token0Balance - token0AmountToLiquidity;\\n    }\\n\\n    function exitParams(uint256 positionId)\\n        external\\n        pure\\n        returns (bytes memory encodedParams)\\n    {\\n        encodedParams = abi.encode(positionId);\\n    }\\n\\n    function hasAllocation() public view override returns (bool) {\\n        uint256 numPositions = nfpManager.balanceOf(address(this));\\n        for (uint256 i = 0; i < numPositions; i++) {\\n            uint256 positionId = nfpManager.tokenOfOwnerByIndex(\\n                address(this),\\n                i\\n            );\\n            (, , , , , , , uint128 positionLiquidity, , , , ) = nfpManager\\n            .positions(positionId);\\n            if (positionLiquidity > 0) {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n\\n    function onERC721Received(\\n        address,\\n        address,\\n        uint256,\\n        bytes memory\\n    ) external view returns (bytes4) {\\n        require(tx.origin == owner, \\\"Only owner could init tx with NFT mint\\\");\\n        return this.onERC721Received.selector;\\n    }\\n\\n    function _postInit() internal override {\\n        USDC.approve(address(nfpManager), type(uint256).max);\\n        USDC.approve(address(router), type(uint256).max);\\n        USDT.safeIncreaseAllowance(address(nfpManager), type(uint256).max);\\n    }\\n\\n    function _enterWithParams(bytes memory params) internal override {\\n        (\\n            int24 tickLower,\\n            int24 tickUpper,\\n            uint24 fee,\\n            uint256 nftId,\\n            uint256 usdcToSwap\\n        ) = abi.decode(params, (int24, int24, uint24, uint256, uint256));\\n\\n        if (usdcToSwap > 0) {\\n            router.exactInputSingle(\\n                ISwapRouter.ExactInputSingleParams({\\n                    tokenIn: address(USDC),\\n                    tokenOut: address(USDT),\\n                    fee: 100,\\n                    recipient: address(this),\\n                    deadline: block.timestamp,\\n                    amountIn: usdcToSwap,\\n                    amountOutMinimum: (usdcToSwap * 999) / 1000, // slippage 0.1 %\\n                    sqrtPriceLimitX96: 0\\n                })\\n            );\\n        }\\n\\n        uint256 usdcAmount = USDC.balanceOf(address(this));\\n        uint256 usdtAmount = USDT.balanceOf(address(this));\\n\\n        if (nftId > 0) {\\n            nfpManager.increaseLiquidity(\\n                INonfungiblePositionManager.IncreaseLiquidityParams({\\n                    tokenId: nftId,\\n                    amount0Desired: usdcAmount,\\n                    amount1Desired: usdtAmount,\\n                    amount0Min: 0,\\n                    amount1Min: 0,\\n                    deadline: block.timestamp\\n                })\\n            );\\n        } else {\\n            nfpManager.mint(\\n                INonfungiblePositionManager.MintParams({\\n                    token0: address(USDC),\\n                    token1: address(USDT),\\n                    fee: fee,\\n                    tickLower: tickLower,\\n                    tickUpper: tickUpper,\\n                    amount0Desired: usdcAmount,\\n                    amount1Desired: usdtAmount,\\n                    amount0Min: 0,\\n                    amount1Min: 0,\\n                    recipient: address(this),\\n                    deadline: block.timestamp\\n                })\\n            );\\n        }\\n    }\\n\\n    function _exit() internal override(Defii, DefiiWithCustomExit) {\\n        uint256 numPositions = nfpManager.balanceOf(address(this));\\n        for (uint256 i = 0; i < numPositions; i++) {\\n            uint256 positionId = nfpManager.tokenOfOwnerByIndex(\\n                address(this),\\n                i\\n            );\\n            _exitOnePosition(positionId);\\n        }\\n    }\\n\\n    function _exitWithParams(bytes memory params) internal override {\\n        uint256 positionId = abi.decode(params, (uint256));\\n        _exitOnePosition(positionId);\\n    }\\n\\n    function _exitOnePosition(uint256 positionId) internal {\\n        (, , , , , , , uint128 positionLiquidity, , , , ) = nfpManager\\n            .positions(positionId);\\n        if (positionLiquidity == 0) {\\n            return;\\n        }\\n        nfpManager.decreaseLiquidity(\\n            INonfungiblePositionManager.DecreaseLiquidityParams({\\n                tokenId: positionId,\\n                liquidity: positionLiquidity,\\n                amount0Min: 0,\\n                amount1Min: 0,\\n                deadline: block.timestamp\\n            })\\n        );\\n        nfpManager.collect(\\n            INonfungiblePositionManager.CollectParams({\\n                tokenId: positionId,\\n                recipient: address(this),\\n                amount0Max: type(uint128).max,\\n                amount1Max: type(uint128).max\\n            })\\n        );\\n    }\\n\\n    function _harvest() internal override {\\n        INonfungiblePositionManager.CollectParams memory collectParams;\\n        uint256 numPositions = nfpManager.balanceOf(address(this));\\n        for (uint256 i = 0; i < numPositions; i++) {\\n            uint256 positionId = nfpManager.tokenOfOwnerByIndex(\\n                address(this),\\n                i\\n            );\\n\\n            collectParams.tokenId = positionId;\\n            collectParams.recipient = address(this);\\n            collectParams.amount0Max = type(uint128).max;\\n            collectParams.amount1Max = type(uint128).max;\\n            nfpManager.collect(collectParams);\\n        }\\n        _withdrawFunds();\\n    }\\n\\n    function _withdrawFunds() internal override {\\n        withdrawERC20(USDC);\\n        withdrawERC20(USDT);\\n    }\\n}\\n\\n/// @title Math library for computing sqrt prices from ticks and vice versa\\n/// @notice Computes sqrt price for ticks of size 1.0001, i.e. sqrt(1.0001^tick) as fixed point Q64.96 numbers. Supports\\n/// prices between 2**-128 and 2**128\\nlibrary TickMath {\\n    /// @dev The minimum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**-128\\n    int24 internal constant MIN_TICK = -887272;\\n    /// @dev The maximum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**128\\n    int24 internal constant MAX_TICK = -MIN_TICK;\\n\\n    /// @dev The minimum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MIN_TICK)\\n    uint160 internal constant MIN_SQRT_RATIO = 4295128739;\\n    /// @dev The maximum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MAX_TICK)\\n    uint160 internal constant MAX_SQRT_RATIO =\\n        1461446703485210103287273052203988822378723970342;\\n\\n    /// @notice Calculates sqrt(1.0001^tick) * 2^96\\n    /// @dev Throws if |tick| > max tick\\n    /// @param tick The input tick for the above formula\\n    /// @return sqrtPriceX96 A Fixed point Q64.96 number representing the sqrt of the ratio of the two assets (token1/token0)\\n    /// at the given tick\\n    function getSqrtRatioAtTick(int24 tick)\\n        internal\\n        pure\\n        returns (uint160 sqrtPriceX96)\\n    {\\n        uint256 absTick = tick < 0\\n            ? uint256(-int256(tick))\\n            : uint256(int256(tick));\\n        require(absTick <= uint24(MAX_TICK), \\\"T\\\");\\n\\n        uint256 ratio = absTick & 0x1 != 0\\n            ? 0xfffcb933bd6fad37aa2d162d1a594001\\n            : 0x100000000000000000000000000000000;\\n        if (absTick & 0x2 != 0)\\n            ratio = (ratio * 0xfff97272373d413259a46990580e213a) >> 128;\\n        if (absTick & 0x4 != 0)\\n            ratio = (ratio * 0xfff2e50f5f656932ef12357cf3c7fdcc) >> 128;\\n        if (absTick & 0x8 != 0)\\n            ratio = (ratio * 0xffe5caca7e10e4e61c3624eaa0941cd0) >> 128;\\n        if (absTick & 0x10 != 0)\\n            ratio = (ratio * 0xffcb9843d60f6159c9db58835c926644) >> 128;\\n        if (absTick & 0x20 != 0)\\n            ratio = (ratio * 0xff973b41fa98c081472e6896dfb254c0) >> 128;\\n        if (absTick & 0x40 != 0)\\n            ratio = (ratio * 0xff2ea16466c96a3843ec78b326b52861) >> 128;\\n        if (absTick & 0x80 != 0)\\n            ratio = (ratio * 0xfe5dee046a99a2a811c461f1969c3053) >> 128;\\n        if (absTick & 0x100 != 0)\\n            ratio = (ratio * 0xfcbe86c7900a88aedcffc83b479aa3a4) >> 128;\\n        if (absTick & 0x200 != 0)\\n            ratio = (ratio * 0xf987a7253ac413176f2b074cf7815e54) >> 128;\\n        if (absTick & 0x400 != 0)\\n            ratio = (ratio * 0xf3392b0822b70005940c7a398e4b70f3) >> 128;\\n        if (absTick & 0x800 != 0)\\n            ratio = (ratio * 0xe7159475a2c29b7443b29c7fa6e889d9) >> 128;\\n        if (absTick & 0x1000 != 0)\\n            ratio = (ratio * 0xd097f3bdfd2022b8845ad8f792aa5825) >> 128;\\n        if (absTick & 0x2000 != 0)\\n            ratio = (ratio * 0xa9f746462d870fdf8a65dc1f90e061e5) >> 128;\\n        if (absTick & 0x4000 != 0)\\n            ratio = (ratio * 0x70d869a156d2a1b890bb3df62baf32f7) >> 128;\\n        if (absTick & 0x8000 != 0)\\n            ratio = (ratio * 0x31be135f97d08fd981231505542fcfa6) >> 128;\\n        if (absTick & 0x10000 != 0)\\n            ratio = (ratio * 0x9aa508b5b7a84e1c677de54f3e99bc9) >> 128;\\n        if (absTick & 0x20000 != 0)\\n            ratio = (ratio * 0x5d6af8dedb81196699c329225ee604) >> 128;\\n        if (absTick & 0x40000 != 0)\\n            ratio = (ratio * 0x2216e584f5fa1ea926041bedfe98) >> 128;\\n        if (absTick & 0x80000 != 0)\\n            ratio = (ratio * 0x48a170391f7dc42444e8fa2) >> 128;\\n\\n        if (tick > 0) ratio = type(uint256).max / ratio;\\n\\n        // this divides by 1<<32 rounding up to go from a Q128.128 to a Q128.96.\\n        // we then downcast because we know the result always fits within 160 bits due to our tick input constraint\\n        // we round up in the division so getTickAtSqrtRatio of the output price is always consistent\\n        sqrtPriceX96 = uint160(\\n            (ratio >> 32) + (ratio % (1 << 32) == 0 ? 0 : 1)\\n        );\\n    }\\n}\\n\\ninterface IUniswapV3Factory {\\n    function getPool(\\n        IERC20 tokenA,\\n        IERC20 tokenB,\\n        uint24 fee\\n    ) external view returns (IUniswapV3Pool pool);\\n}\\n\\ninterface INonfungiblePositionManager is IERC721Enumerable {\\n    function factory() external view returns (IUniswapV3Factory);\\n\\n    struct MintParams {\\n        address token0;\\n        address token1;\\n        uint24 fee;\\n        int24 tickLower;\\n        int24 tickUpper;\\n        uint256 amount0Desired;\\n        uint256 amount1Desired;\\n        uint256 amount0Min;\\n        uint256 amount1Min;\\n        address recipient;\\n        uint256 deadline;\\n    }\\n\\n    function mint(MintParams calldata params)\\n        external\\n        payable\\n        returns (\\n            uint256 tokenId,\\n            uint128 liquidity,\\n            uint256 amount0,\\n            uint256 amount1\\n        );\\n\\n    function positions(uint256 tokenId)\\n        external\\n        view\\n        returns (\\n            uint96 nonce,\\n            address operator,\\n            address token0,\\n            address token1,\\n            uint24 fee,\\n            int24 tickLower,\\n            int24 tickUpper,\\n            uint128 liquidity,\\n            uint256 feeGrowthInside0LastX128,\\n            uint256 feeGrowthInside1LastX128,\\n            uint128 tokensOwed0,\\n            uint128 tokensOwed1\\n        );\\n\\n    struct IncreaseLiquidityParams {\\n        uint256 tokenId;\\n        uint256 amount0Desired;\\n        uint256 amount1Desired;\\n        uint256 amount0Min;\\n        uint256 amount1Min;\\n        uint256 deadline;\\n    }\\n\\n    function increaseLiquidity(IncreaseLiquidityParams calldata params)\\n        external\\n        payable\\n        returns (\\n            uint128 liquidity,\\n            uint256 amount0,\\n            uint256 amount1\\n        );\\n\\n    struct DecreaseLiquidityParams {\\n        uint256 tokenId;\\n        uint128 liquidity;\\n        uint256 amount0Min;\\n        uint256 amount1Min;\\n        uint256 deadline;\\n    }\\n\\n    function decreaseLiquidity(DecreaseLiquidityParams calldata params)\\n        external\\n        payable\\n        returns (uint256 amount0, uint256 amount1);\\n\\n    function burn(uint256 tokenId) external payable;\\n\\n    struct CollectParams {\\n        uint256 tokenId;\\n        address recipient;\\n        uint128 amount0Max;\\n        uint128 amount1Max;\\n    }\\n\\n    function collect(CollectParams calldata params)\\n        external\\n        payable\\n        returns (uint256 amount0, uint256 amount1);\\n}\\n\\ninterface IUniswapV3Pool {\\n    function slot0()\\n        external\\n        view\\n        returns (\\n            uint160 sqrtPriceX96,\\n            int24 tick,\\n            uint16 observationIndex,\\n            uint16 observationCardinality,\\n            uint16 observationCardinalityNext,\\n            uint8 feeProtocol,\\n            bool unlocked\\n        );\\n}\\n\\ninterface ISwapRouter {\\n    struct ExactInputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    function exactInputSingle(ExactInputSingleParams calldata params)\\n        external\\n        payable\\n        returns (uint256 amountOut);\\n}\\n\"\r\n    },\r\n    \"contracts/DefiiWithCustomEnter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.9;\\n\\nimport \\\"./Defii.sol\\\";\\n\\nabstract contract DefiiWithCustomEnter is Defii {\\n    function enterWithParams(bytes memory params) external onlyOwner {\\n        _enterWithParams(params);\\n    }\\n\\n    function _enterWithParams(bytes memory params) internal virtual;\\n\\n    function _enter() internal virtual override {\\n        revert(\\\"Run enterWithParams\\\");\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/DefiiWithCustomExit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.9;\\n\\nimport \\\"./Defii.sol\\\";\\n\\nabstract contract DefiiWithCustomExit is Defii {\\n    function exitWithParams(bytes memory params) external onlyOnwerOrExecutor {\\n        _exitWithParams(params);\\n    }\\n\\n    function exitWithParamsAndWithdraw(\\n        bytes memory params\\n    ) public onlyOnwerOrExecutor {\\n        _exitWithParams(params);\\n        _withdrawFunds();\\n    }\\n\\n    function _exitWithParams(bytes memory params) internal virtual;\\n\\n    function _exit() internal virtual override {\\n        revert(\\\"Run exitWithParams\\\");\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IDefii.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.9;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\n\\nimport \\\"./IDefiiFactory.sol\\\";\\n\\ninterface IDefii {\\n    function hasAllocation() external view returns (bool);\\n\\n    function incentiveVault() external view returns (address);\\n\\n    function version() external pure returns (uint16);\\n\\n    function init(\\n        address owner_,\\n        address factory_,\\n        address incentiveVault_\\n    ) external;\\n\\n    function getBalance(address[] calldata tokens)\\n        external\\n        returns (BalanceItem[] memory balances);\\n\\n    function changeIncentiveVault(address incentiveVault_) external;\\n\\n    function enter() external;\\n\\n    function runTx(\\n        address target,\\n        uint256 value,\\n        bytes memory data\\n    ) external;\\n\\n    function runMultipleTx(\\n        address[] calldata targets,\\n        uint256[] calldata values,\\n        bytes[] calldata datas\\n    ) external;\\n\\n    function exit() external;\\n\\n    function exitAndWithdraw() external;\\n\\n    function harvest() external;\\n\\n    function withdrawERC20(IERC20 token) external;\\n\\n    function withdrawETH() external;\\n\\n    function withdrawFunds() external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IDefiiFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.9;\\n\\nstruct Info {\\n    address wallet;\\n    address defii;\\n    bool hasAllocation;\\n    address incentiveVault;\\n}\\n\\nstruct Balance {\\n    address wallet;\\n    BalanceItem[] balance;\\n}\\n\\nstruct BalanceItem {\\n    address token;\\n    uint256 decimals;\\n    uint256 balance;\\n    uint256 incentiveVaultBalance;\\n}\\n\\ninterface IDefiiFactory {\\n    function executor() external view returns (address executor);\\n\\n    function getDefiiFor(address wallet) external view returns (address defii);\\n\\n    function getAllWallets() external view returns (address[] memory);\\n\\n    function getAllDefiis() external view returns (address[] memory);\\n\\n    function getAllAllocations() external view returns (bool[] memory);\\n\\n    function getAllInfos() external view returns (Info[] memory);\\n\\n    function getAllBalances(address[] calldata tokens)\\n        external\\n        returns (Balance[] memory);\\n\\n    function createDefii() external;\\n\\n    function createDefiiFor(address owner, address incentiveVault) external;\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 100000\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"tickCurrent\",\"type\":\"int24\"},{\"internalType\":\"uint256\",\"name\":\"P\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"token0Balance\",\"type\":\"uint256\"}],\"name\":\"calcToken0AmountToSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"token0AmountToSwap\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"incentiveVault_\",\"type\":\"address\"}],\"name\":\"changeIncentiveVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"}],\"name\":\"enterParams\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"encodedParams\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"params\",\"type\":\"bytes\"}],\"name\":\"enterWithParams\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exitAndWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"positionId\",\"type\":\"uint256\"}],\"name\":\"exitParams\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"encodedParams\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"params\",\"type\":\"bytes\"}],\"name\":\"exitWithParams\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"params\",\"type\":\"bytes\"}],\"name\":\"exitWithParamsAndWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"}],\"name\":\"findNft\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"}],\"name\":\"getBalance\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"incentiveVaultBalance\",\"type\":\"uint256\"}],\"internalType\":\"struct BalanceItem[]\",\"name\":\"balances\",\"type\":\"tuple[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"}],\"name\":\"getBalanceAndRevert\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"harvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"params\",\"type\":\"bytes\"}],\"name\":\"harvestWithParams\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hasAllocation\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"incentiveVault\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"factory_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"incentiveVault_\",\"type\":\"address\"}],\"name\":\"init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"targets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes[]\",\"name\":\"datas\",\"type\":\"bytes[]\"}],\"name\":\"runMultipleTx\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"runTx\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"withdrawERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "UniswapV3EthUsdcUsdt", "CompilerVersion": "v0.8.10+commit.fc410830", "OptimizationUsed": "1", "Runs": "100000", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}