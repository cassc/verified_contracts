{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"src/FomosPrizePool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport {ReentrancyGuard} from \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\nimport {INoFomoNFT} from \\\"./interface/INoFomoNFT.sol\\\";\\nimport {INoFomo} from \\\"./interface/INoFomo.sol\\\";\\nimport {IDropRandomPool} from \\\"./interface/IDropRandomPool.sol\\\";\\nimport {IFomosStaking} from \\\"./interface/IFomosStaking.sol\\\";\\n\\nevent UserPlay(address indexed user, uint256 amount, uint256 currentPeriodId);\\n\\ncontract FomosPrizePool is Ownable, ReentrancyGuard {\\n    address public mintingContract;\\n    address public dropRandomPool;\\n    address public goveranceAddress;\\n    address public stakingPool;\\n\\n    INoFomoNFT public nofomoNFT;\\n    INoFomo public nofomoToken;\\n\\n    uint256 public currentStoredBlock;\\n    uint256 public immutable BLOCK_INTERVAL = 30;\\n\\n    uint256 public bettingAmount = 2_000_000 * 10 ** 18;\\n\\n    bool public isMintingPeriod = true;\\n    address public lastMinter;\\n    // periodId => user => tokenIds\\n    mapping(uint256 => mapping(address => uint256[])) public mintedNFTs;\\n\\n    mapping(uint256 => uint256) public periodIdToStartTokenId;\\n    mapping(uint256 => uint256) public periodIdToTotalMinted;\\n\\n    uint256 public currentPeriodId;\\n\\n    constructor(\\n        address _nofomoToken,\\n        address _nofomoNFT,\\n        address _goveranceAddress\\n    ) Ownable(msg.sender) {\\n        goveranceAddress = _goveranceAddress;\\n        nofomoToken = INoFomo(_nofomoToken);\\n        nofomoNFT = INoFomoNFT(_nofomoNFT);\\n    }\\n\\n    modifier onlyMintingContract() {\\n        require(msg.sender == mintingContract, \\\"only minting contract\\\");\\n        _;\\n    }\\n\\n    modifier flushCycle() {\\n        if (\\n            !isMintingPeriod &&\\n            block.number > currentStoredBlock + BLOCK_INTERVAL\\n        ) {\\n            uint256 currentNofomoTokenAmount = nofomoToken.balanceOf(\\n                address(this)\\n            );\\n            nofomoToken.transfer(\\n                dropRandomPool,\\n                (currentNofomoTokenAmount * 10) / 100\\n            );\\n            nofomoToken.transfer(\\n                lastMinter,\\n                (currentNofomoTokenAmount * 20) / 100\\n            );\\n            emit UserPlay(\\n                lastMinter,\\n                (currentNofomoTokenAmount * 20) / 100,\\n                currentPeriodId\\n            );\\n            nofomoToken.burn((currentNofomoTokenAmount * 30) / 100);\\n            nofomoToken.transfer(\\n                stakingPool,\\n                (currentNofomoTokenAmount * 10) / 100\\n            );\\n            nofomoToken.transfer(\\n                goveranceAddress,\\n                (currentNofomoTokenAmount * 10) / 100\\n            );\\n            IFomosStaking(stakingPool).updateCycle(\\n                currentPeriodId,\\n                periodIdToTotalMinted[currentPeriodId]\\n            );\\n\\n            uint256 periodLength = (block.number - currentStoredBlock) / 30;\\n            if (periodLength >= 10) {\\n                IDropRandomPool(dropRandomPool).lottery(\\n                    periodIdToStartTokenId[currentPeriodId],\\n                    periodIdToTotalMinted[currentPeriodId]\\n                );\\n            }\\n            currentPeriodId += periodLength;\\n            currentStoredBlock += periodLength * BLOCK_INTERVAL;\\n        }\\n        _;\\n    }\\n\\n    function setMintingContract(address _mintingContract) external onlyOwner {\\n        mintingContract = _mintingContract;\\n    }\\n\\n    function setDropRandomPool(address _dropRandomPool) external onlyOwner {\\n        dropRandomPool = _dropRandomPool;\\n    }\\n\\n    function setStakingPool(address _stakingPool) external onlyOwner {\\n        stakingPool = _stakingPool;\\n    }\\n\\n    function updateTokenInMinting() external onlyMintingContract {\\n        require(isMintingPeriod, \\\"only minting period\\\");\\n        address lastMinterInMinting = nofomoNFT.ownerOf(nofomoNFT.tokenId());\\n        nofomoToken.transfer(\\n            lastMinterInMinting,\\n            nofomoToken.balanceOf(address(this)) / 2\\n        );\\n    }\\n\\n    function play(uint256 amount) external nonReentrant flushCycle {\\n        require(isMintingPeriod == false, \\\"only after minting period\\\");\\n        require(\\n            nofomoToken.transferFrom(\\n                msg.sender,\\n                address(this),\\n                bettingAmount * amount\\n            ),\\n            \\\"transfer failed, not enough token\\\"\\n        );\\n        uint256[] memory tokenIds = INoFomoNFT(nofomoNFT).mint(\\n            msg.sender,\\n            amount,\\n            currentPeriodId\\n        );\\n        mintedNFTs[currentPeriodId][msg.sender] = tokenIds;\\n        periodIdToTotalMinted[currentPeriodId] += amount;\\n        if (periodIdToTotalMinted[currentPeriodId] == 0) {\\n            periodIdToStartTokenId[currentPeriodId] = tokenIds[0];\\n        }\\n        lastMinter = msg.sender;\\n    }\\n\\n    function endMintingPeriod(\\n        uint256 _currentPeriodId,\\n        uint256 _currentStordBlock,\\n        address _lastMinter\\n    ) external {\\n        require(\\n            msg.sender == mintingContract || msg.sender == owner(),\\n            \\\"only minting contract\\\"\\n        );\\n        isMintingPeriod = false;\\n        currentPeriodId = _currentPeriodId;\\n        currentStoredBlock = _currentStordBlock;\\n        lastMinter = _lastMinter;\\n    }\\n\\n    receive() external payable {\\n        revert(\\\"Contract cannot receive Ether\\\");\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    constructor() {\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if (_status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"src/interface/INoFomoNFT.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.23;\\n\\ninterface INoFomoNFT {\\n    function mint(\\n        address to,\\n        uint256 amount,\\n        uint256 periodId\\n    ) external returns (uint256[] memory tokenIds);\\n\\n    function getPeriodIdByTokenId(uint256 tokenId) external returns (uint256);\\n\\n    function ownerOf(uint256 tokenId) external returns (address);\\n\\n    function tokenId() external returns (uint256);\\n\\n    function balanceOf(address owner) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"src/interface/INoFomo.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\ninterface INoFomo {\\n    function airdrop(address receipt) external;\\n\\n    function mint() external;\\n\\n    function transfer(\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    function burn(uint256 amount) external;\\n\\n    function liquidityPoolMint(uint256 amount) external returns (bool);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"src/interface/IDropRandomPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\ninterface IDropRandomPool {\\n    function lottery(uint256 startTokenId, uint256 tokenIdsLength) external;\\n}\"\r\n    },\r\n    \"src/interface/IFomosStaking.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\ninterface IFomosStaking {\\n    function updateCycle(\\n        uint256 _periodId,\\n        uint256 distributionAmount\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [\r\n      \"@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\r\n      \"ds-test/=lib/forge-std/lib/ds-test/src/\",\r\n      \"erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/\",\r\n      \"forge-std/=lib/forge-std/src/\",\r\n      \"openzeppelin-contracts/=lib/openzeppelin-contracts/\"\r\n    ],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": false,\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"appendCBOR\": true\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"paris\",\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nofomoToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_nofomoNFT\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_goveranceAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"currentPeriodId\",\"type\":\"uint256\"}],\"name\":\"UserPlay\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BLOCK_INTERVAL\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bettingAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentPeriodId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentStoredBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dropRandomPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_currentPeriodId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_currentStordBlock\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_lastMinter\",\"type\":\"address\"}],\"name\":\"endMintingPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"goveranceAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isMintingPeriod\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastMinter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"mintedNFTs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintingContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nofomoNFT\",\"outputs\":[{\"internalType\":\"contract INoFomoNFT\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nofomoToken\",\"outputs\":[{\"internalType\":\"contract INoFomo\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"periodIdToStartTokenId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"periodIdToTotalMinted\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"play\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_dropRandomPool\",\"type\":\"address\"}],\"name\":\"setDropRandomPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_mintingContract\",\"type\":\"address\"}],\"name\":\"setMintingContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stakingPool\",\"type\":\"address\"}],\"name\":\"setStakingPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateTokenInMinting\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "FomosPrizePool", "CompilerVersion": "v0.8.23+commit.f704f362", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000c500e2f5c254a1542abd2d3206f234afdbb72f2c000000000000000000000000681cec6d69a54e3865f1846e33e645896d6cc7be000000000000000000000000aac0e0e783955821b7cac46357cab8868bb12688", "EVMVersion": "paris", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}