{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @title EtherTaxDistributor\r\n * @dev A contract that automatically distributes received Ether to three predefined wallets based on a threshold amount.\r\n */\r\ncontract EtherTaxDistributor {\r\n    address public owner;\r\n    address payable public wallet1;\r\n    address payable public wallet2;\r\n    address payable public wallet3;\r\n    uint256 public thresholdAmount;\r\n    bool public distributionEnabled;\r\n\r\n    event LogThresholdChange(uint256 newThreshold);\r\n    event FundsReceive(address sender, uint256 amount);\r\n    event ManualWithdrawal(uint256 amountToWallet1, uint256 amountToWallet2, uint256 amountToWallet3);\r\n    event AutomatedWithdrawal(uint256 amount);\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor(\r\n        address payable _wallet1,\r\n        address payable _wallet2,\r\n        address payable _wallet3\r\n    ) payable {\r\n        // Ensure valid wallet addresses are provided\r\n        require(_wallet1 != address(0) && _wallet2 != address(0) && _wallet3 != address(0), \"Invalid wallet address\");\r\n\r\n        owner = msg.sender;\r\n        wallet1 = _wallet1;\r\n        wallet2 = _wallet2;\r\n        wallet3 = _wallet3;\r\n        thresholdAmount = 0.5 ether;\r\n        distributionEnabled = true;\r\n\r\n        // Trigger automatedWithdrawal if the contract balance is greater than or equal to the threshold amount\r\n        if (address(this).balance >= thresholdAmount){\r\n            automatedWithdrawal();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Fallback function to receive Ether\r\n     */\r\n    receive() external payable {\r\n        emit FundsReceive(msg.sender, msg.value);\r\n\r\n        // Check if the contract should trigger automated withdrawal\r\n        if (distributionEnabled) {\r\n            uint256 thisBalance = address(this).balance;\r\n            if (thisBalance >= thresholdAmount) {\r\n                automatedWithdrawal();\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to restrict a function to be called only by the contract owner\r\n     */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"Only the contract owner can call this function.\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Withdraw any excess Ether from the contract\r\n     */\r\n    function withdrawExcessFunds() public onlyOwner {\r\n        uint256 balance = address(this).balance;\r\n        (bool success, ) = msg.sender.call{value: balance}(\"\");\r\n        require(success, \"Failed to withdraw excess funds.\");\r\n    }\r\n\r\n    /**\r\n     * @dev Set the threshold amount for automated distribution\r\n     * @param _newThreshold The new threshold amount in Wei\r\n     */\r\n    function setThreshold(uint256 _newThreshold) public onlyOwner {\r\n        require(_newThreshold > 0, \"Threshold amount must be greater than zero\");\r\n        thresholdAmount = _newThreshold;\r\n        emit LogThresholdChange(_newThreshold);\r\n    }\r\n\r\n    function setWallet1(address payable _newWallet) public onlyOwner {\r\n        require(_newWallet != address(0), \"Invalid wallet address\");\r\n        wallet1 = _newWallet;\r\n    }\r\n\r\n    function setWallet2(address payable _newWallet) public onlyOwner {\r\n        require(_newWallet != address(0), \"Invalid wallet address\");\r\n        wallet2 = _newWallet;\r\n    }\r\n\r\n    function getContractAddress() public view returns (address) {\r\n        return address(this);\r\n    }\r\n\r\n    function setWallet3(address payable _newWallet) public onlyOwner {\r\n        require(_newWallet != address(0), \"Invalid wallet address\");\r\n        wallet3 = _newWallet;\r\n    }\r\n\r\n    /**\r\n     * @dev Manually trigger the distribution of funds to the predefined wallets\r\n     */\r\n    function manualWithdrawal() public onlyOwner {\r\n        require(distributionEnabled, \"Ether distribution is currently disabled\");\r\n        distributeFunds();\r\n        emit ManualWithdrawal(address(this).balance, address(this).balance, address(this).balance);\r\n    }\r\n\r\n    /**\r\n     * @dev Automatically distribute funds to the predefined wallets\r\n     */\r\n    function automatedWithdrawal() private {\r\n        require(distributionEnabled, \"Ether distribution is currently disabled\");\r\n        uint256 thisBalance = address(this).balance;\r\n        require(thisBalance >= thresholdAmount, \"Threshold amount not reached\");\r\n\r\n        distributeFunds();\r\n\r\n        emit AutomatedWithdrawal(thisBalance);\r\n    }\r\n\r\n    /**\r\n     * @dev Distribute funds to the predefined wallets\r\n     */\r\n    function distributeFunds() private {\r\n        require(distributionEnabled, \"Ether distribution is currently disabled\");\r\n        uint256 thisBalance = address(this).balance;\r\n\r\n        uint256 amountToWallet1 = (thisBalance * 3635) / 10000;\r\n        uint256 amountToWallet2 = (thisBalance * 3250) / 10000;\r\n        uint256 amountToWallet3 = (thisBalance * 2965) / 10000;\r\n\r\n        // Disable distribution before transferring Ether to avoid reentrancy attacks\r\n        distributionEnabled = false;\r\n\r\n        wallet1.transfer(amountToWallet1);\r\n        wallet2.transfer(amountToWallet2);\r\n        wallet3.transfer(amountToWallet3);\r\n\r\n        // Enable distribution again for the next cycle\r\n        distributionEnabled = true;\r\n\r\n        emit ManualWithdrawal(amountToWallet1, amountToWallet2, amountToWallet3);\r\n    }\r\n\r\n    /**\r\n     * @dev Change the contract owner\r\n     * @param newOwner The new owner's address\r\n     */\r\n    function changeOwner(address newOwner) public onlyOwner {\r\n        require(newOwner != address(0), \"Invalid address\");\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n    \r\n    /**\r\n     * @dev Destroy the contract and send any remaining balance to the contract owner (multisig)\r\n     */\r\n    function destroyContract() public onlyOwner {\r\n        selfdestruct(payable(owner));\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_wallet1\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_wallet2\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_wallet3\",\"type\":\"address\"}],\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"AutomatedWithdrawal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"FundsReceive\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newThreshold\",\"type\":\"uint256\"}],\"name\":\"LogThresholdChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountToWallet1\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountToWallet2\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountToWallet3\",\"type\":\"uint256\"}],\"name\":\"ManualWithdrawal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"destroyContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"distributionEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getContractAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manualWithdrawal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newThreshold\",\"type\":\"uint256\"}],\"name\":\"setThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_newWallet\",\"type\":\"address\"}],\"name\":\"setWallet1\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_newWallet\",\"type\":\"address\"}],\"name\":\"setWallet2\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_newWallet\",\"type\":\"address\"}],\"name\":\"setWallet3\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"thresholdAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wallet1\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wallet2\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wallet3\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawExcessFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "EtherTaxDistributor", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000457562993734cb16ec54c619413a00728a2473520000000000000000000000005ff9d009478de65cc0e369fab241cae9be1c4c0c000000000000000000000000e3a43c069f494ec44da57bfc6288ddb4b6ad07cb", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://9aefebda0df5eeb95c1eb0eaf867c6a465f5312c68a02322a12bf2011d611840"}