{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"Uniscription.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.4.22 <0.9.0;\\ncontract UniscriptionFactoryV1{\\n    // Struct to store owner and content\\n    struct Uniscription {\\n         address owner;\\n         bytes content;\\n    }\\n    // Array to store all Uniscriptions\\n    Uniscription[] private uniscriptions;\\n\\n    // Mapping to store content hash to index\\n    mapping(bytes32 => uint) private contentHashToIndex;\\n\\n    // Variable to store the fee for creating an Uniscription\\n    uint public fee;\\n\\n    // Variable to store the admin's address\\n    address public admin;\\n\\n    // Variable to store the dataLimit for Gas Saving\\n    uint public dataLimit = 280;\\n\\n    // Mapping to store approved addresses for each Uniscription\\n   mapping(uint => mapping(address => mapping(address => bool))) private uniscriptionApprovals;\\n\\n    // Event to log new Uniscription\\n    event NewUniscription(uint indexed id, address indexed owner, bytes content);\\n\\n    // Event to log Uniscription transfer\\n    event UniscriptionTransfer(uint indexed id, address indexed from, address to);\\n \\n   // Event to log Uniscription approval\\n   event Approval(address indexed owner, address indexed spender, uint indexed id);\\n\\n  modifier onlyOwner() {\\n        require(msg.sender == admin, \\\"Only admin can call this function\\\");\\n        _;\\n    }\\n    // Set initial admin at contract creation\\n    constructor() public{\\n        admin = msg.sender;\\n        createUniscription(msg.sender,\\\"Hello World\\\");\\n    }\\n\\n    // Allow admin to set the fee\\n    function setFee(uint _fee) public  onlyOwner{\\n        \\n        fee = _fee;\\n    }\\n\\n    // Allow admin to set the dataLimit\\n    function setOnChainDataLimit(uint _limit) public onlyOwner{\\n        dataLimit = _limit;\\n    }\\n\\n    // Allow admin to withdraw contract's Ether\\n    function withdraw() public onlyOwner{\\n        payable(admin).transfer(address(this).balance);\\n    }\\n\\n    // Allow admin to transfer admin role\\n    function transferAdmin(address _newAdmin) public onlyOwner{\\n        admin = _newAdmin;\\n    }\\n\\n    // Allow users to create a new Uniscription\\n    function createUniscription(address receiver, bytes memory _content) public payable {\\n        require(msg.sender == tx.origin, \\\"only EOA\\\");\\n        bytes32 contentHash = keccak256(abi.encodePacked(_content));\\n        uint existingIndex = contentHashToIndex[contentHash];\\n        require(existingIndex == 0, \\\"This content already exists.\\\");\\n        require(msg.value >= fee, \\\"You must send the creat fee.\\\");\\n        if(_content.length > dataLimit){\\n            _content=\\\"\\\";\\n        }\\n        uint id = uniscriptions.length + 1;\\n        uniscriptions.push(Uniscription(receiver, _content));\\n        contentHashToIndex[contentHash] = id;\\n        emit NewUniscription(id, msg.sender, _content);\\n    }\\n\\n  \\n    fallback() external payable {\\n        createUniscription(msg.sender,msg.data);\\n    }\\n\\n    // Allow users to transfer their Uniscription\\nfunction transferUniscription(uint _id, address _to) public {\\n        require(msg.sender == uniscriptions[_id-1].owner, \\\"Only the owner can transfer this Uniscription.\\\");\\n        // Transfer the Uniscription\\n        uniscriptions[_id-1].owner = _to;\\n        emit UniscriptionTransfer(_id, msg.sender, _to);\\n    }\\n\\nfunction approve(uint _id, address _spender) public {\\n    require(msg.sender == uniscriptions[_id-1].owner, \\\"Only the owner can approve this Uniscription.\\\");\\n    uniscriptionApprovals[_id][msg.sender][_spender] = true;\\n    emit Approval(msg.sender, _spender, _id);\\n}\\n\\nfunction safeTransferFrom(address _from, address _to, uint _id) public {\\n    require(uniscriptionApprovals[_id][_from][_to], \\\"Transfer not approved for this Uniscription.\\\");\\n    require(_from == uniscriptions[_id-1].owner, \\\"Only the owner can transfer this Uniscription.\\\");\\n    // Transfer the Uniscription\\n    uniscriptions[_id-1].owner = _to;\\n    uniscriptionApprovals[_id][_from][_to]=false;\\n    emit UniscriptionTransfer(_id, _from, _to);\\n}\\n\\n function isApproved(uint _id, address _owner, address _spender) public view returns (bool) {\\n    return uniscriptionApprovals[_id][_owner][_spender];\\n}\\n    // Allow users to get the count of Uniscriptions\\n    function getUniscriptionsCount() public view returns (uint) {\\n        return uniscriptions.length;\\n    }\\n\\n    // Allow users to get specific Uniscription content\\n    function getUniscription(uint _id) public view returns (address, bytes memory) {\\n        return (uniscriptions[_id-1].owner, uniscriptions[_id-1].content);\\n    }\\n\\n    function getUniscriptionByContent(bytes memory _content) public view returns (uint,address) {\\n        bytes32 contentHash = keccak256(abi.encodePacked(_content));\\n        uint id= contentHashToIndex[contentHash];\\n        return (id,uniscriptions[id-1].owner);\\n    }\\n\\n\\n\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"content\",\"type\":\"bytes\"}],\"name\":\"NewUniscription\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"UniscriptionTransfer\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_content\",\"type\":\"bytes\"}],\"name\":\"createUniscription\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dataLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getUniscription\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_content\",\"type\":\"bytes\"}],\"name\":\"getUniscriptionByContent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUniscriptionsCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"isApproved\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"setFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_limit\",\"type\":\"uint256\"}],\"name\":\"setOnChainDataLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newAdmin\",\"type\":\"address\"}],\"name\":\"transferAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"transferUniscription\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "UniscriptionFactoryV1", "CompilerVersion": "v0.8.20+commit.a1b79de6", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}