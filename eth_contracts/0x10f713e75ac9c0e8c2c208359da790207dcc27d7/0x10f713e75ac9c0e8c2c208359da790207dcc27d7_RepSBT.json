{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV // Deprecated in v4.8\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \u00f7 2 + 1, and for v in (302): v \u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/ERC1238/ERC1238.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC1238.sol\\\";\\nimport \\\"./ERC1238Approval.sol\\\";\\nimport \\\"./IERC1238Receiver.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation proposal for non-transferable (Badge) tokens\\n * See https://github.com/ethereum/EIPs/issues/1238\\n */\\ncontract ERC1238 is ERC165, IERC1238, ERC1238Approval {\\n    using Address for address;\\n\\n    // Mapping from token ID to account balances\\n    mapping(uint256 => mapping(address => uint256)) internal _balances;\\n\\n    // Used as the URI by default for all token types by relying on ID substitution,\\n    // e.g. https://token-cdn-domain/{id}.json\\n    string private baseURI;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `baseURI`.\\n     * See {_setBaseURI}\\n     */\\n    constructor(string memory baseURI_) {\\n        _setBaseURI(baseURI_);\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return interfaceId == type(IERC1238).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev This implementation returns the same URI for *all* token types. It relies\\n     * on the token type ID substitution mechanism as in EIP-1155:\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata\\n     *\\n     * Clients calling this function must replace the `\\\\{id\\\\}` substring with the\\n     * actual token type ID.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return baseURI;\\n    }\\n\\n    /**\\n     * @dev See {IERC1238-balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\\n        require(account != address(0), \\\"ERC1238: balance query for the zero address\\\");\\n        return _balances[id][account];\\n    }\\n\\n    /**\\n     * @dev See {IERC1238-balanceOfBatch}.\\n     *\\n     */\\n    function balanceOfBatch(address account, uint256[] memory ids)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256[] memory)\\n    {\\n        uint256 idsLength = ids.length;\\n        uint256[] memory batchBalances = new uint256[](idsLength);\\n\\n        for (uint256 i = 0; i < idsLength; ++i) {\\n            batchBalances[i] = balanceOf(account, ids[i]);\\n        }\\n\\n        return batchBalances;\\n    }\\n\\n    /**\\n     * @dev See {IERC1238-balanceOfBundle}.\\n     *\\n     */\\n    function balanceOfBundle(address[] memory accounts, uint256[][] memory ids)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256[][] memory)\\n    {\\n        uint256 accountsLength = accounts.length;\\n        uint256[][] memory bundleBalances = new uint256[][](accountsLength);\\n\\n        for (uint256 i = 0; i < accountsLength; ++i) {\\n            bundleBalances[i] = balanceOfBatch(accounts[i], ids[i]);\\n        }\\n\\n        return bundleBalances;\\n    }\\n\\n    /**\\n     * @dev Sets a new URI for all token types, by relying on the token type ID\\n     * substitution mechanism as in EIP-1155\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata\\n     *\\n     * By this mechanism, any occurrence of the `\\\\{id\\\\}` substring in either the\\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\\n     * clients with the token type ID.\\n     *\\n     * For example, the `https://token-cdn-domain/\\\\{id\\\\}.json` URI would be\\n     * interpreted by clients as\\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\\n     * for token type ID 0x4cce0.\\n     *\\n     *\\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\\n     * this function emits no events.\\n     */\\n    function _setBaseURI(string memory newBaseURI) internal virtual {\\n        baseURI = newBaseURI;\\n    }\\n\\n    /**\\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to a smart contract (to).\\n     *\\n     *\\n     * Requirements:\\n     * - `to` must be a smart contract and must implement {IERC1238Receiver-onERC1238BatchMint} and return the\\n     * acceptance magic value.\\n     *\\n     * Emits a {MintSingle} event.\\n     */\\n    function _mintToContract(\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to.isContract(), \\\"ERC1238: Recipient is not a contract\\\");\\n\\n        _mint(to, id, amount, data);\\n\\n        _doSafeMintAcceptanceCheck(msg.sender, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to the\\n     * Externally Owned Account (to).\\n     *\\n     * Requirements:\\n     *\\n     * - `v`, `r` and `s` must be a EIP712 signature from `to` as defined by ERC1238Approval to\\n     * approve the minting transaction.\\n     * - `approvalExpiry`, which is part of the signed data, cannot be in the past.\\n     *\\n     * Emits a {MintSingle} event.\\n     */\\n    function _mintToEOA(\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s,\\n        uint256 approvalExpiry,\\n        bytes memory data\\n    ) internal virtual {\\n        require(approvalExpiry >= block.timestamp, \\\"ERC1238: provided approval expiry time cannot be in the past\\\");\\n\\n        bytes32 messageHash = _getMintApprovalMessageHash(to, id, amount, approvalExpiry);\\n        _verifyMintingApproval(to, messageHash, v, r, s);\\n\\n        _mint(to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev [Batched] version of {_mintToContract}. A batch specifies an array of token `id` and\\n     * the amount of tokens for each.\\n     *\\n     * Requirements:\\n     * - `to` must be a smart contract and must implement {IERC1238Receiver-onERC1238BatchMint} and return the\\n     * acceptance magic value.\\n     * - `ids` and `amounts` must have the same length.\\n     *\\n     * Emits a {MintBatch} event.\\n     */\\n    function _mintBatchToContract(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to.isContract(), \\\"ERC1238: Recipient is not a contract\\\");\\n\\n        _mintBatch(to, ids, amounts, data);\\n\\n        _doSafeBatchMintAcceptanceCheck(msg.sender, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev [Batched] version of {_mintToEOA}. A batch specifies an array of token `id` and\\n     * the amount of tokens for each.\\n     *\\n     * Requirements:\\n     * - `v`, `r` and `s` must be a EIP712 signature from `to` as defined by ERC1238Approval to\\n     * approve the batch minting transaction.\\n     * - `approvalExpiry`, which is part of the signed data, cannot be in the past.\\n     *\\n     * Emits a {MintBatch} event.\\n     */\\n    function _mintBatchToEOA(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s,\\n        uint256 approvalExpiry,\\n        bytes memory data\\n    ) internal virtual {\\n        require(approvalExpiry >= block.timestamp, \\\"ERC1238: provided approval expiry time cannot be in the past\\\");\\n\\n        bytes32 messageHash = _getMintBatchApprovalMessageHash(to, ids, amounts, approvalExpiry);\\n        _verifyMintingApproval(to, messageHash, v, r, s);\\n\\n        _mintBatch(to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Mints a bundle, which can be viewed as minting several batches\\n     * to an array of addresses in one transaction.\\n     *\\n     * Requirements:\\n     * - `to` can be a combination of smart contract addresses and EOAs.\\n     * - If `to` is not a contract, an EIP712 signature from `to` as defined by ERC1238Approval\\n     * must be passed at the right index in `data`.\\n     *\\n     * Emits multiple {MintBatch} events.\\n     */\\n    function _mintBundle(\\n        address[] calldata to,\\n        uint256[][] calldata ids,\\n        uint256[][] calldata amounts,\\n        MintApprovalSignature[] calldata mintApprovalSignatures,\\n        bytes[] calldata data\\n    ) internal virtual {\\n        uint256 toLength = to.length;\\n        for (uint256 i = 0; i < toLength; i++) {\\n            if (to[i].isContract()) {\\n                _mintBatchToContract(to[i], ids[i], amounts[i], data[i]);\\n            } else {\\n                MintApprovalSignature calldata signature = mintApprovalSignatures[i];\\n                _mintBatchToEOA(\\n                    to[i],\\n                    ids[i],\\n                    amounts[i],\\n                    signature.v,\\n                    signature.r,\\n                    signature.s,\\n                    signature.approvalExpiry,\\n                    data[i]\\n                );\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `to`.\\n     *\\n     * Emits a {MintSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement {IERC1238Receiver-onERC1238Mint} and return the\\n     * acceptance magic value.\\n     *\\n     * Emits a {MintSingle} event.\\n     */\\n    function _mint(\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal {\\n        address minter = msg.sender;\\n\\n        _beforeMint(minter, to, id, amount, data);\\n\\n        _balances[id][to] += amount;\\n\\n        emit MintSingle(minter, to, id, amount);\\n    }\\n\\n    /**\\n     * @dev [Batched] version of {_mint}.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     *\\n     * Emits a {MintBatch} event.\\n     */\\n    function _mintBatch(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) private {\\n        uint256 idsLength = ids.length;\\n        require(idsLength == amounts.length, \\\"ERC1238: ids and amounts length mismatch\\\");\\n\\n        address minter = msg.sender;\\n\\n        for (uint256 i = 0; i < idsLength; i++) {\\n            _beforeMint(minter, to, ids[i], amounts[i], data);\\n\\n            _balances[ids[i]][to] += amounts[i];\\n        }\\n\\n        emit MintBatch(minter, to, ids, amounts);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens of token type `id` from `from`\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `from` must have at least `amount` tokens of token type `id`.\\n     *\\n     * Emits a {BurnSingle} event.\\n     */\\n    function _burn(\\n        address from,\\n        uint256 id,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC1238: burn from the zero address\\\");\\n\\n        address burner = msg.sender;\\n\\n        _beforeBurn(burner, from, id, amount);\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1238: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n\\n        emit BurnSingle(burner, from, id, amount);\\n    }\\n\\n    /**\\n     * @dev [Batched] version of {_burn}.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     *\\n     * Emits a {BurnBatch} event.\\n     */\\n    function _burnBatch(\\n        address from,\\n        uint256[] memory ids,\\n        uint256[] memory amounts\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC1238: burn from the zero address\\\");\\n\\n        uint256 idsLength = ids.length;\\n        require(idsLength == amounts.length, \\\"ERC1238: ids and amounts length mismatch\\\");\\n\\n        address burner = msg.sender;\\n\\n        for (uint256 i = 0; i < idsLength; i++) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            _beforeBurn(burner, from, id, amount);\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1238: burn amount exceeds balance\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n        }\\n\\n        emit BurnBatch(burner, from, ids, amounts);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before an `amount` of tokens are minted.\\n     *\\n     * Calling conditions:\\n     * - `minter` and `to` cannot be the zero address\\n     *\\n     */\\n    function _beforeMint(\\n        address minter,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called before an `amount` of tokens are burned.\\n     *\\n     * Calling conditions:\\n     * - `burner` and `from` cannot be the zero address\\n     *\\n     */\\n    function _beforeBurn(\\n        address burner,\\n        address from,\\n        uint256 id,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    function _doSafeMintAcceptanceCheck(\\n        address minter,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal {\\n        try IERC1238Receiver(to).onERC1238Mint(minter, id, amount, data) returns (bytes4 response) {\\n            if (response != IERC1238Receiver.onERC1238Mint.selector) {\\n                revert(\\\"ERC1238: ERC1238Receiver rejected tokens\\\");\\n            }\\n        } catch Error(string memory reason) {\\n            revert(reason);\\n        } catch {\\n            revert(\\\"ERC1238: transfer to non ERC1238Receiver implementer\\\");\\n        }\\n    }\\n\\n    function _doSafeBatchMintAcceptanceCheck(\\n        address minter,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal {\\n        try IERC1238Receiver(to).onERC1238BatchMint(minter, ids, amounts, data) returns (bytes4 response) {\\n            if (response != IERC1238Receiver.onERC1238BatchMint.selector) {\\n                revert(\\\"ERC1238: ERC1238Receiver rejected tokens\\\");\\n            }\\n        } catch Error(string memory reason) {\\n            revert(reason);\\n        } catch {\\n            revert(\\\"ERC1238: transfer to non ERC1238Receiver implementer\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/ERC1238/ERC1238Approval.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\n\\nstruct EIP712Domain {\\n    string name;\\n    string version;\\n    uint256 chainId;\\n    address verifyingContract;\\n}\\n\\n// Typed data of a Mint Batch transaction\\n// needing to be approved by `recipient`.\\nstruct MintBatchApproval {\\n    address recipient;\\n    uint256[] ids;\\n    uint256[] amounts;\\n    uint256 approvalExpiry;\\n}\\n\\n// Typed data of a Mint transaction\\n// needing to be approved by `recipient`.\\nstruct MintApproval {\\n    address recipient;\\n    uint256 id;\\n    uint256 amount;\\n    uint256 approvalExpiry;\\n}\\n\\nstruct MintApprovalSignature {\\n    uint8 v;\\n    bytes32 r;\\n    bytes32 s;\\n    uint256 approvalExpiry;\\n}\\n\\n/**\\n * ERC1238 tokens can only be minted to an EOA by providing a message signed by the recipient to\\n * approve the minting, or batch minting, of tokens.\\n *\\n * This contract contains the logic around generating and verifiying these signed messages.\\n *\\n * @dev The implementation is based on EIP-712, a standard for typed structured data hashing and signing.\\n * The standard defines the `hashtruct` function where structs are encoded with their typeHash\\n * (a constant defining their type) and hashed.\\n * See https://eips.ethereum.org/EIPS/eip-712\\n *\\n */\\ncontract ERC1238Approval {\\n    bytes32 private constant EIP712DOMAIN_TYPEHASH =\\n        keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\");\\n\\n    bytes32 private constant MINT_APPROVAL_TYPEHASH =\\n        keccak256(\\\"MintApproval(address recipient,uint256 id,uint256 amount,uint256 approvalExpiry)\\\");\\n\\n    bytes32 private constant MINT_BATCH_APPROVAL_TYPEHASH =\\n        keccak256(\\\"MintBatchApproval(address recipient,uint256[] ids,uint256[] amounts,uint256 approvalExpiry)\\\");\\n\\n    // Domain Separator, as defined by EIP-712 (`hashstruct(eip712Domain)`)\\n    bytes32 public DOMAIN_SEPARATOR;\\n\\n    mapping(bytes32 => bool) private hasApprovalHashBeenUsed;\\n\\n    constructor() {\\n        // The EIP712Domain shares the same name for all ERC128Approval contracts\\n        // but the unique address of this contract as `verifiyingContract`\\n        EIP712Domain memory eip712Domain = EIP712Domain({\\n            name: \\\"ERC1238 Mint Approval\\\",\\n            version: \\\"1\\\",\\n            chainId: block.chainid,\\n            verifyingContract: address(this)\\n        });\\n\\n        DOMAIN_SEPARATOR = keccak256(\\n            abi.encode(\\n                EIP712DOMAIN_TYPEHASH,\\n                keccak256(bytes(eip712Domain.name)),\\n                keccak256(bytes(eip712Domain.version)),\\n                eip712Domain.chainId,\\n                eip712Domain.verifyingContract\\n            )\\n        );\\n    }\\n\\n    /**\\n     * @dev Returns a MintApprovalMessageHash which is the result of `hashstruct(MintApproval)`.\\n     * To verify that `recipient` approved a mint transaction, the hash returned\\n     * must be passed to _verifyMintingApproval as `mintApprovalHash`.\\n     *\\n     */\\n    function _getMintApprovalMessageHash(\\n        address recipient,\\n        uint256 id,\\n        uint256 amount,\\n        uint256 approvalExpiry\\n    ) internal pure returns (bytes32) {\\n        MintApproval memory mintApproval = MintApproval({\\n            recipient: recipient,\\n            id: id,\\n            amount: amount,\\n            approvalExpiry: approvalExpiry\\n        });\\n        return\\n            keccak256(\\n                abi.encode(\\n                    MINT_APPROVAL_TYPEHASH,\\n                    mintApproval.recipient,\\n                    mintApproval.id,\\n                    mintApproval.amount,\\n                    mintApproval.approvalExpiry\\n                )\\n            );\\n    }\\n\\n    /**\\n     * @dev Returns a MintBatchApprovalMessageHash which is the result of `hashstruct(MintBatchApproval)`.\\n     * To verify that `recipient` approved a mint batch transaction, the hash returned\\n     * must be passed to _verifyMintingApproval as `mintApprovalHash`.\\n     *\\n     */\\n    function _getMintBatchApprovalMessageHash(\\n        address recipient,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        uint256 approvalExpiry\\n    ) internal pure returns (bytes32) {\\n        MintBatchApproval memory mintBatchApproval = MintBatchApproval({\\n            recipient: recipient,\\n            ids: ids,\\n            amounts: amounts,\\n            approvalExpiry: approvalExpiry\\n        });\\n\\n        return\\n            keccak256(\\n                abi.encode(\\n                    MINT_BATCH_APPROVAL_TYPEHASH,\\n                    mintBatchApproval.recipient,\\n                    keccak256(abi.encodePacked(mintBatchApproval.ids)),\\n                    keccak256(abi.encodePacked(mintBatchApproval.amounts)),\\n                    mintBatchApproval.approvalExpiry\\n                )\\n            );\\n    }\\n\\n    /**\\n     * @dev Given a mintApprovalHash (either MintApprovalMessageHash or MintBatchApprovalMessageHash),\\n     * this function verifies if the signature (v, r, and s) was signed by `recipient` based on the\\n     * EIP712Domain of this contract, and otherwise reverts.\\n     */\\n    function _verifyMintingApproval(\\n        address recipient,\\n        bytes32 mintApprovalHash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        // Prevent signatures from being replayed\\n        require(!hasApprovalHashBeenUsed[mintApprovalHash], \\\"ERC1238: Approval hash already used\\\");\\n\\n        bytes32 digest = ECDSA.toTypedDataHash(DOMAIN_SEPARATOR, mintApprovalHash);\\n\\n        require(ECDSA.recover(digest, v, r, s) == recipient, \\\"ERC1238: Approval verification failed\\\");\\n\\n        hasApprovalHashBeenUsed[mintApprovalHash] = true;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/ERC1238/extensions/ERC1238URIStorage.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC1238.sol\\\";\\nimport \\\"./IERC1238URIStorage.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Proposal for ERC1238 token with storage based token URI management.\\n */\\nabstract contract ERC1238URIStorage is ERC165, IERC1238URIStorage, ERC1238 {\\n    // Optional mapping for token URIs\\n    mapping(uint256 => string) private _tokenURIs;\\n\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override(ERC1238, ERC165, IERC165)\\n        returns (bool)\\n    {\\n        return interfaceId == type(IERC1238URIStorage).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC1238URIStorage-tokenURI}.\\n     */\\n    function tokenURI(uint256 id) public view virtual override returns (string memory) {\\n        string memory _tokenURI = _tokenURIs[id];\\n\\n        // Returns the token URI if there is a specific one set that overrides the base URI\\n        if (_isTokenURISet(id)) {\\n            return _tokenURI;\\n        }\\n\\n        string memory base = _baseURI();\\n\\n        return base;\\n    }\\n\\n    /**\\n     * @dev Sets `_tokenURI` as the token URI for the tokens of type `id`.\\n     *\\n     */\\n    function _setTokenURI(uint256 id, string memory _tokenURI) internal virtual {\\n        _tokenURIs[id] = _tokenURI;\\n\\n        emit URI(id, _tokenURI);\\n    }\\n\\n    /**\\n     * @dev [Batched] version of {_setTokenURI}.\\n     *\\n     */\\n    function _setBatchTokenURI(uint256[] memory ids, string[] memory tokenURIs) internal {\\n        uint256 idsLength = ids.length;\\n        require(idsLength == tokenURIs.length, \\\"ERC1238Storage: ids and token URIs length mismatch\\\");\\n\\n        for (uint256 i = 0; i < idsLength; i++) {\\n            _setTokenURI(ids[i], tokenURIs[i]);\\n        }\\n    }\\n\\n    /**\\n     * @dev Deletes the tokenURI for the tokens of type `id`.\\n     *\\n     * Requirements:\\n     *  - A token URI must be set.\\n     *\\n     *  Possible improvement:\\n     *  - The URI can only be deleted if all tokens of type `id` have been burned.\\n     */\\n    function _deleteTokenURI(uint256 id) internal virtual {\\n        if (_isTokenURISet(id)) {\\n            delete _tokenURIs[id];\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether a tokenURI is set or not for a specific `id` token type.\\n     *\\n     */\\n    function _isTokenURISet(uint256 id) private view returns (bool) {\\n        return bytes(_tokenURIs[id]).length > 0;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/ERC1238/extensions/IERC1238URIStorage.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1238.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Proposal of an interface for ERC1238 token with storage based token URI management.\\n */\\ninterface IERC1238URIStorage is IERC1238 {\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     */\\n    event URI(uint256 indexed id, string value);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `id` token.\\n     */\\n    function tokenURI(uint256 id) external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"contracts/ERC1238/IERC1238.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Interface proposal for Badge tokens\\n * See https://github.com/ethereum/EIPs/issues/1238\\n */\\ninterface IERC1238 is IERC165 {\\n    /**\\n     * @dev Emitted when `amount` tokens of token type `id` are minted to `to` by `minter`.\\n     */\\n    event MintSingle(address indexed minter, address indexed to, uint256 indexed id, uint256 amount);\\n\\n    /**\\n     * @dev Equivalent to multiple {MintSingle} events, where `minter` and `to` is the same for all token types\\n     */\\n    event MintBatch(address indexed minter, address indexed to, uint256[] ids, uint256[] amounts);\\n\\n    /**\\n     * @dev Emitted when `amount` tokens of token type `id` owned by `owner` are burned by `burner`.\\n     */\\n    event BurnSingle(address indexed burner, address indexed owner, uint256 indexed id, uint256 amount);\\n\\n    /**\\n     * @dev Equivalent to multiple {BurnSingle} events, where `owner` and `burner` is the same for all token types\\n     */\\n    event BurnBatch(address indexed burner, address indexed owner, uint256[] ids, uint256[] amounts);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the balance of `account` for a batch of token `ids`\\n     *\\n     */\\n    function balanceOfBatch(address account, uint256[] calldata ids) external view returns (uint256[] memory);\\n\\n    /**\\n     * @dev Returns the balance of multiple `accounts` for a batch of token `ids`.\\n     * This is equivalent to calling {balanceOfBatch} for several accounts in just one call.\\n     *\\n     * Reuirements:\\n     * - `accounts` and `ids` must have the same length.\\n     *\\n     */\\n    function balanceOfBundle(address[] calldata accounts, uint256[][] calldata ids)\\n        external\\n        view\\n        returns (uint256[][] memory);\\n}\\n\"\r\n    },\r\n    \"contracts/ERC1238/IERC1238Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * Interface for smart contracts wishing to receive ownership of ERC1238 tokens.\\n */\\ninterface IERC1238Receiver is IERC165 {\\n    /**\\n     * @dev Handles the receipt of a single ERC1238 token type.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1238Mint(address,address,uint256,uint256,bytes)\\\"))`\\n     *\\n     * @param minter The address which initiated minting (i.e. msg.sender)\\n     * @param id The ID of the token being transferred\\n     * @param amount The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1238Mint(address,uint256,uint256,bytes)\\\"))` if minting is allowed\\n     */\\n    function onERC1238Mint(\\n        address minter,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of multiple ERC1238 token types.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1238BatchMint(address,address,uint256[],uint256[],bytes)\\\"))`\\n     *\\n     * @param minter The address which initiated minting (i.e. msg.sender)\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param amounts An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1238BatchMint(address,uint256[],uint256[],bytes)\\\"))` if minting is allowed\\n     */\\n    function onERC1238BatchMint(\\n        address minter,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"contracts/RepSBT.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ERC1238/extensions/ERC1238URIStorage.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\ncontract RepSBT is ERC1238, ERC1238URIStorage {\\n    using Address for address;\\n    address public owner;\\n    mapping(address => uint256) private _addressToIds;\\n    uint256 private _num = 0;\\n    address private _signer;\\n\\n    constructor(address owner_, string memory baseURI_) ERC1238(baseURI_) {\\n        owner = owner_;\\n    }\\n\\n    modifier onlyOwner() {\\n        require(msg.sender == owner, \\\"Unauthorized: sender is not the owner\\\");\\n        _;\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override(ERC1238, ERC1238URIStorage)\\n        returns (bool)\\n    {\\n        return super.supportsInterface(interfaceId);\\n    }\\n\\n    function mint(\\n        uint64 _point,\\n        string memory _uri,\\n        bytes memory _signedData,\\n        bytes calldata data\\n    ) external {\\n        require (_balances[_addressToIds[msg.sender]][msg.sender] == 0, \\\"Not allowed users to get more than 1 NFTs\\\");\\n\\n        bytes32 hashData = keccak256(abi.encodePacked(_uri));\\n        bytes32 sigHash = keccak256(abi.encodePacked(hashData, _point));\\n        require (verifySignature(sigHash, _signedData, _signer) == true, 'signed permit test error');\\n\\n        _num = _num + 1;\\n        _mint(msg.sender, _num, 1, data);\\n        _setTokenURI(_num, _uri);\\n        _addressToIds [msg.sender] = _num;\\n    }\\n\\n    function burn() external {\\n        _burnAndDeleteURI(msg.sender, _addressToIds [msg.sender], 1);\\n    }\\n\\n    function setTokenURI(uint64 _point, string memory _uri, bytes memory _signedData) external {\\n        bytes32 hashData = keccak256(abi.encodePacked(_uri));\\n        bytes32 sigHash = keccak256(abi.encodePacked(hashData, _point));\\n        require (verifySignature(sigHash, _signedData, _signer) == true, 'signed permit test error');\\n\\n        _setTokenURI (_addressToIds[msg.sender], _uri);\\n    }\\n\\n    function getTokenURI(address _account) external view returns (string memory) {\\n        return tokenURI(_addressToIds[_account]);\\n    }\\n\\n    function getTokenId(address _account) external view returns (uint256) {\\n        return _addressToIds[_account];\\n    }\\n\\n    function setSignedAddress(address signer_) external onlyOwner {\\n        _signer = signer_;\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` of tokens with id `id` owned by `from` and deletes the associated URI.\\n     *\\n     * Requirements:\\n     *  - A token URI must be set.\\n     *  - All tokens of this type must have been burned.\\n     */\\n    function _burnAndDeleteURI(\\n        address from,\\n        uint256 id,\\n        uint256 amount\\n    ) internal virtual {\\n        super._burn(from, id, amount);\\n\\n        _deleteTokenURI(id);\\n    }\\n\\n    function verifySignature(bytes32 hash, bytes memory signature, address signer) internal pure returns (bool) {\\n        require(signature.length == 65, \\\"Require correct length\\\");\\n\\n        bytes32 r;\\n        bytes32 s;\\n        uint8 v;\\n\\n        // Divide the signature in r, s and v variables\\n        assembly {\\n            r := mload(add(signature, 32))\\n            s := mload(add(signature, 64))\\n            v := byte(0, mload(add(signature, 96)))\\n        }\\n\\n        // Version of signature should be 27 or 28, but 0 and 1 are also possible versions\\n        if (v < 27) {\\n            v += 27;\\n        }\\n\\n        require(v == 27 || v == 28, \\\"Signature version not match\\\");\\n\\n        bytes memory prefix = \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\";\\n        bytes32 prefixedHash = keccak256(abi.encodePacked(prefix, hash));\\n        address addr = ecrecover(prefixedHash, v, r, s);\\n        return addr == signer;\\n    }\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 10\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"baseURI_\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"burner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"BurnBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"burner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"BurnSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"MintBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"MintSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"}],\"name\":\"URI\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[][]\",\"name\":\"ids\",\"type\":\"uint256[][]\"}],\"name\":\"balanceOfBundle\",\"outputs\":[{\"internalType\":\"uint256[][]\",\"name\":\"\",\"type\":\"uint256[][]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"getTokenId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"getTokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_point\",\"type\":\"uint64\"},{\"internalType\":\"string\",\"name\":\"_uri\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"_signedData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"signer_\",\"type\":\"address\"}],\"name\":\"setSignedAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_point\",\"type\":\"uint64\"},{\"internalType\":\"string\",\"name\":\"_uri\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"_signedData\",\"type\":\"bytes\"}],\"name\":\"setTokenURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "RepSBT", "CompilerVersion": "v0.8.10+commit.fc410830", "OptimizationUsed": "1", "Runs": "10", "ConstructorArguments": "000000000000000000000000566454ef325a5ea22a831ebb4ff236f74e1372cd00000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}