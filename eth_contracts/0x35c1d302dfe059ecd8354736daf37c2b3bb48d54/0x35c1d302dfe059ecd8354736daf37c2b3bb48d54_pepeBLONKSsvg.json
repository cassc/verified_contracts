{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/2_PepeBLONKS.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Unlicensed\\r\\npragma solidity ^0.8.7;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\r\\n\\r\\n/// @title pepeBLONKS SVG Contract v2.2\\r\\n/// @author Matto\\r\\n/// @notice This contract builds the SVG text.\\r\\n/// @custom:security-contact monkmatto@protonmail.com\\r\\ncontract pepeBLONKSsvg {\\r\\n  using Strings for string;\\r\\n\\r\\n  function eM(uint256 _ent, uint256 _mod)\\r\\n    internal\\r\\n    pure\\r\\n    returns (uint16) \\r\\n  {\\r\\n    return uint16(_ent % _mod);\\r\\n  }\\r\\n\\r\\n  function bC(uint16 _r, uint16 _g, uint16 _b) \\r\\n    internal\\r\\n    pure\\r\\n    returns (string memory)\\r\\n  {\\r\\n    return string(abi.encodePacked('rgb(',Strings.toString(_r),', ',Strings.toString(_g),', ',Strings.toString(_b),')\\\"/>')); \\r\\n  }\\r\\n\\r\\n  function rA(uint16 _x, uint16 _y, uint16 _w, uint16 _h, uint16 _r, uint16 _g, uint16 _b, uint16 _sw, uint16 _sc)\\r\\n    internal\\r\\n    pure\\r\\n    returns (string memory)\\r\\n  {\\r\\n    return string(abi.encodePacked('<rect x=\\\"',Strings.toString(_x),'\\\" y=\\\"',Strings.toString(_y),'\\\" width=\\\"',Strings.toString(_w),'\\\" height=\\\"',Strings.toString(_h),'\\\" style=\\\"fill: rgb(',Strings.toString(_r),', ',Strings.toString(_g),', ',Strings.toString(_b),'); stroke-width: ',Strings.toString(_sw),'px; stroke: rgb(',Strings.toString(_sc),', ',Strings.toString(_sc),', ',Strings.toString(_sc),');\\\"/>'));\\r\\n  }\\r\\n\\r\\n  function rS(uint16 _x, uint16 _y, uint16 _w, uint16 _h, string memory _style)\\r\\n    internal\\r\\n    pure\\r\\n    returns (string memory)\\r\\n  {\\r\\n    return string(abi.encodePacked('<rect x=\\\"',Strings.toString(_x),'\\\" y=\\\"',Strings.toString(_y),'\\\" width=\\\"',Strings.toString(_w),'\\\" height=\\\"',Strings.toString(_h),'\\\" style=\\\"fill: rgb',_style));\\r\\n  }\\r\\n\\r\\n  function cS(uint16 _v, uint16 _mod)\\r\\n    internal\\r\\n    pure\\r\\n    returns (uint16)\\r\\n  {\\r\\n    if (_v > _mod) {\\r\\n      return _v - _mod;\\r\\n    } else {\\r\\n      return 255 - _mod + _v;\\r\\n    }\\r\\n  }\\r\\n\\r\\n  function patList(uint256 num, uint256 eT) \\r\\n    internal\\r\\n    pure\\r\\n    returns (string memory)\\r\\n  {\\r\\n    uint256 TeT = eT % num;\\r\\n    string memory dStr;\\r\\n    if (TeT % 2 == 0) {\\r\\n      dStr = '\\\"240\\\" to=\\\"-240\\\"';\\r\\n    } else {\\r\\n      dStr = '\\\"-240\\\" to=\\\"240\\\"';\\r\\n    }\\r\\n    string memory str = string(abi.encodePacked('<pattern id=\\\"textPattern', Strings.toString(num), '\\\" x=\\\"0\\\" y=\\\"0\\\" width=\\\"240\\\" height=\\\"25\\\" patternUnits=\\\"userSpaceOnUse\\\"><text font-family=\\\"Comic Sans MS, sans-serif\\\" font-size=\\\"20\\\" x=\\\"0\\\" y=\\\"20\\\" fill=\\\"white\\\">FEELS GOOD MAN</text><animate attributeName=\\\"x\\\" from='));\\r\\n    str = string(abi.encodePacked(str, dStr, ' dur=\\\"', Strings.toString(6 + TeT), 's\\\" repeatCount=\\\"indefinite\\\"/></pattern>'));\\r\\n    return str;\\r\\n  }\\r\\n\\r\\n  function patRect(uint256 num) \\r\\n    internal\\r\\n    pure\\r\\n    returns (string memory)\\r\\n    {\\r\\n    string memory str = string(abi.encodePacked('<rect x=\\\"0\\\" y=\\\"', Strings.toString((num-1) * 25), '\\\" width=\\\"240\\\" height=\\\"25\\\" fill=\\\"url(#textPattern', Strings.toString(num), ')\\\"/>'));\\r\\n    return str;\\r\\n  }\\r\\n\\r\\n  function assembleSVG(uint256 eO, uint256 eT, uint8[11] memory tA, uint16[110] memory loc)\\r\\n    external\\r\\n    pure\\r\\n    returns (string memory)\\r\\n  {\\r\\n    // Variables\\r\\n    string memory b = '<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\"?><svg viewBox=\\\"0 0 1000 1000\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\">';\\r\\n    string[3] memory s;\\r\\n\\r\\n    // Background Colors\\r\\n    uint16 tR = 25 + (eM(eO,10) * 20);\\r\\n    eO /= 10;\\r\\n    uint16 tG = 25 + (eM(eO,10) * 20);\\r\\n    eO /= 10;\\r\\n    uint16 tB = 25 + (eM(eO,10) * 20);\\r\\n    eO /= 10;\\r\\n\\r\\n    // Background\\r\\n    if (tA[0] == 0) {\\r\\n      b = string(abi.encodePacked(b,'<defs><linearGradient id=\\\"bkStyle\\\"><stop offset=\\\"0\\\" style=\\\"stop-color: rgb(255, 0, 0);\\\"/><stop offset=\\\"0.17\\\" style=\\\"stop-color: rgb(255, 170, 0);\\\"/><stop offset=\\\"0.36\\\" style=\\\"stop-color: rgb(255, 251, 0);\\\"/><stop offset=\\\"0.52\\\" style=\\\"stop-color: rgb(115, 255, 0);\\\"/><stop offset=\\\"0.69\\\" style=\\\"stop-color: rgb(0, 81, 255);\\\"/><stop offset=\\\"0.85\\\" style=\\\"stop-color: rgb(29, 1, 255);\\\"/><stop offset=\\\"1\\\" style=\\\"stop-color: rgb(102, 0, 255);\\\"/></linearGradient></defs>'));\\r\\n    } else if (tA[0] == 1) {\\r\\n      b = string(abi.encodePacked(b,'<defs><linearGradient gradientUnits=\\\"userSpaceOnUse\\\" x1=\\\"500\\\" y1=\\\"0\\\" x2=\\\"500\\\" y2=\\\"1000\\\" id=\\\"bkStyle\\\"><stop offset=\\\"0\\\" style=\\\"stop-color: #eeeeee\\\"/><stop offset=\\\"1\\\" style=\\\"stop-color: ',bC(tR, tG, tB),'</linearGradient></defs>'));\\r\\n    } else if (tA[0] == 2) {\\r\\n      b = string(abi.encodePacked(b,'<defs><radialGradient gradientUnits=\\\"userSpaceOnUse\\\" cx=\\\"500\\\" cy=\\\"500\\\" r=\\\"700\\\" id=\\\"bkStyle\\\"><stop offset=\\\"0\\\" style=\\\"stop-color: #eeeeee\\\"/><stop offset=\\\"1\\\" style=\\\"stop-color: ',bC(tR, tG, tB),'</radialGradient></defs>'));\\r\\n    } else {\\r\\n      b = string(abi.encodePacked(b,'<defs><radialGradient gradientUnits=\\\"userSpaceOnUse\\\" cx=\\\"500\\\" cy=\\\"500\\\" r=\\\"490\\\" id=\\\"bkStyle\\\"><stop offset=\\\".5\\\" style=\\\"stop-color: #ffffff\\\"/><stop offset=\\\"1\\\" style=\\\"stop-color: ',bC(tR, tG, tB),'</radialGradient></defs>'));\\r\\n    }\\r\\n    b = string(abi.encodePacked(b,'<rect id=\\\"background\\\" width=\\\"1000\\\" height=\\\"1000\\\"  style=\\\"fill: url(#bkStyle);\\\"/>'));\\r\\n\\r\\n    // FEELS GOOD MAN Text\\r\\n    for (uint256 i = 1; i < 8; i++) {\\r\\n      b = string(abi.encodePacked(b, patList(i, eT)));\\r\\n    }\\r\\n    b = string(abi.encodePacked(b, '<pattern id=\\\"gridPattern\\\" x=\\\"-10\\\" y=\\\"-10\\\" width=\\\"240\\\" height=\\\"175\\\" patternUnits=\\\"userSpaceOnUse\\\">'));\\r\\n    for (uint256 i = 1; i < 8; i++) {\\r\\n      b = string(abi.encodePacked(b, patRect(i)));\\r\\n    }\\r\\n    b = string(abi.encodePacked(b, '</pattern><rect x=\\\"0\\\" y=\\\"0\\\" width=\\\"1000\\\" height=\\\"1000\\\" fill=\\\"url(#gridPattern)\\\"/>'));\\r\\n\\r\\n    // Blonk Colors\\r\\n    tR = 67; // 255 - tR;\\r\\n    tG = 122; // 255 - tG;\\r\\n    tB = 37; // 255 - tB;\\r\\n\\r\\n    // Neck\\r\\n    b = string(abi.encodePacked(b,rA(loc[0], loc[3] + loc[5], loc[1], 1010 - loc[3] - loc[5], tR, tG, tB, 10, 32)));\\r\\n\\r\\n    // Head\\r\\n    tR += 20;\\r\\n    tG += 20;\\r\\n    tB += 20;\\r\\n    b = string(abi.encodePacked(b,rA(loc[2], loc[3], loc[4], loc[5], tR, tG, tB, 19, 42)));\\r\\n\\r\\n    // Eye Colors\\r\\n    tR = 226; // += 20 + eM(eO,10) * 9;\\r\\n    eO /= 10;\\r\\n    tG = 227; // += 20 + eM(eO,10) * 9;\\r\\n    eO /= 10;\\r\\n    tB = 226; // += 20 + eM(eO,10) * 9;\\r\\n    eO /= 10;\\r\\n\\r\\n    // Eyes\\r\\n    b = string(abi.encodePacked(b,rA(loc[6], loc[7], loc[8], loc[9], tR, tG, tB, 6, 55)));\\r\\n    b = string(abi.encodePacked(b,rA(loc[10], loc[11], loc[12], loc[13], tR, tG, tB, 6, 55)));\\r\\n\\r\\n    // Pupils\\r\\n    if (tA[1] == 1) {\\r\\n      s[0] = '(32,32,32); stroke-width: 6px; stroke: rgb(210,42,42);\\\"/>';\\r\\n    } else if (tA[1] == 2) {\\r\\n      s[0] = '(47,201,20); stroke-width: 6px; stroke: rgb(70,219,44);\\\"/>';\\r\\n    } else {\\r\\n      s[0] = '(32,32,32); stroke-width: 6px; stroke: rgb(55,55,55);\\\"/>';\\r\\n    }\\r\\n    b = string(abi.encodePacked(b,rS(loc[16], loc[17], loc[18], loc[19], s[0])));\\r\\n    b = string(abi.encodePacked(b,rS(loc[20], loc[21], loc[22], loc[23], s[0])));\\r\\n\\r\\n    // Nose\\r\\n    // tR = cS(tR, 40) + eM(eO,10) * 9;\\r\\n    eO /= 10;\\r\\n    // tG = cS(tG, 40) + eM(eO,10) * 9;\\r\\n    eO /= 10;\\r\\n    // tB = cS(tB, 40) + eM(eO,10) * 9;\\r\\n    eO /= 10;\\r\\n    // b = string(abi.encodePacked(b,rA(loc[24], loc[25], loc[26], loc[27], tR, tG, tB, 6, 55)));\\r\\n\\r\\n    // Ears\\r\\n    tR = 77; // cS(tR, 40) + eM(eO,10) * 9;\\r\\n    eO /= 10;\\r\\n    tG = 132; // cS(tG, 40) + eM(eO,10) * 9;\\r\\n    eO /= 10;\\r\\n    tB = 47; // cS(tB, 40) + eM(eO,10) * 9;\\r\\n    eO /= 10;\\r\\n    b = string(abi.encodePacked(b,rA(loc[28], loc[30], loc[31], loc[32], tR, tG, tB, 6, 42)));\\r\\n    b = string(abi.encodePacked(b,rA(loc[29], loc[30], loc[31], loc[32], tR, tG, tB, 6, 42)));\\r\\n\\r\\n    // Eyebrows\\r\\n    // b = string(abi.encodePacked(b,rA(loc[37], loc[38], loc[39], loc[40], 55, 55, 55, 0, 0)));\\r\\n    // b = string(abi.encodePacked(b,rA(loc[41], loc[42], loc[43], loc[44], 55, 55, 55, 0, 0)));\\r\\n\\r\\n    // Mouth\\r\\n    tR = 161; // cS(tR, 40) + eM(eT,10) * 9;\\r\\n    eT /= 10;\\r\\n    tG = 81; // cS(tG, 40) + eM(eT,10) * 9;\\r\\n    eT /= 10;\\r\\n    tB = 52; // cS(tB, 40) + eM(eT,10) * 9;\\r\\n    eT /= 10;\\r\\n    b = string(abi.encodePacked(b,rA(loc[33], loc[34], loc[35], loc[36], tR, tG, tB, 6, 55)));\\r\\n\\r\\n    // Teeth\\r\\n    if (tA[2] > 0) {\\r\\n      b = string(abi.encodePacked(b,rA(loc[50], loc[51], loc[52], loc[53], 230, 230, 230, 0, 0)));\\r\\n    }\\r\\n    if (tA[2] == 3) {\\r\\n      b = string(abi.encodePacked(b,rA(loc[93], loc[94], loc[95], loc[96], tR, tG, tB, 0, 0))); // paints mouth over tusks\\r\\n    }\\r\\n\\r\\n    // Mole\\r\\n    if (loc[45] > 0) {\\r\\n      b = string(abi.encodePacked(b,rA(loc[45],loc[106],loc[107],loc[108], 55, 55, 55, 0, 0)));     \\r\\n    } \\r\\n\\r\\n    // Extra Detail\\r\\n    if (tA[3] == 1) {\\r\\n      s[0] = '(50,50,255);\\\"/>';\\r\\n    } else if (tA[3] == 2) {\\r\\n      s[0] = '(222,22,22);\\\"/>';\\r\\n    } else if (tA[3] == 3) {\\r\\n      s[0] = '(150,220,255);\\\"/>';\\r\\n    } else if (tA[3] == 4) {\\r\\n      s[0] = '(42,42,42); fill-opacity: 0.5;\\\"/>';\\r\\n    }\\r\\n    if (tA[3] > 0) {\\r\\n      b = string(abi.encodePacked(b,rS(loc[54], loc[55], loc[56], loc[57], s[0])));\\r\\n      b = string(abi.encodePacked(b,rS(loc[58], loc[59], loc[60], loc[61], s[0])));\\r\\n    }\\r\\n\\r\\n    // Glasses\\r\\n    if (tA[4] == 1) {\\r\\n      s[0] = '(32,32,32);\\\"/>';\\r\\n      s[1] = '(255,255,255); fill-opacity: 0.3; stroke-width: 16px; stroke: rgb(32,32,32);\\\"/>';\\r\\n      s[2] = s[1]; \\r\\n    } else if (tA[4] == 2) {\\r\\n      s[0] = '(243,104,203);\\\"/>';\\r\\n      s[1] = '(22,22,22); fill-opacity: 0.9; stroke-width: 16px; stroke: rgb(243,104,203);\\\"/>';\\r\\n      s[2] = s[1]; \\r\\n    } else if (tA[4] == 3) {\\r\\n      s[0] = '(245,245,245);\\\"/>';\\r\\n      s[2] = '(255,22,22); stroke-width: 16px; stroke: rgb(245,245,245);\\\"/>';\\r\\n      s[1] = '(22,122,255); stroke-width: 16px; stroke: rgb(245,245,245);\\\"/>';\\r\\n    } else if (tA[4] == 4) {\\r\\n      s[0] = '(252,214,18);\\\"/>';\\r\\n      s[1] = '(11,11,11); stroke-width: 16px; stroke: rgb(252,214,18);\\\"/>';\\r\\n      s[2] = s[1]; \\r\\n    }\\r\\n    if (tA[4] != 0) {\\r\\n      b = string(abi.encodePacked(b,rS(loc[62],loc[63],loc[64],loc[65],s[0])));\\r\\n      b = string(abi.encodePacked(b,rS(loc[66],loc[67],loc[47],loc[46],s[1])));\\r\\n      b = string(abi.encodePacked(b,rS(loc[68],loc[67],loc[47],loc[46],s[2])));\\r\\n      b = string(abi.encodePacked(b,rS(loc[69],loc[70],loc[71],loc[65],s[0])));\\r\\n      b = string(abi.encodePacked(b,rS(loc[72],loc[73],loc[74],loc[65],s[0])));\\r\\n    }\\r\\n\\r\\n    // Hair\\r\\n    tR = cS(tR, 20 + eM(eT,10) * 9);\\r\\n    eT /= 10;\\r\\n    tG = cS(tG, 20 + eM(eT,10) * 9);\\r\\n    eT /= 10;\\r\\n    tB = cS(tB, 20 + eM(eT,10) * 9);\\r\\n    eT /= 10;\\r\\n    if (tA[5] > 0) {\\r\\n      b = string(abi.encodePacked(b,rA(loc[75],loc[76],loc[77],loc[78], tR, tG, tB, 0, 0)));\\r\\n    }\\r\\n    if (tA[5] == 3) {\\r\\n      b = string(abi.encodePacked(b,rA(loc[79],loc[80],loc[81],loc[82], tR, tG, tB, 0, 0)));  \\r\\n    }\\r\\n    if (tA[6] > 0) {\\r\\n      b = string(abi.encodePacked(b,rA(loc[87],loc[88],loc[89],loc[90], 252, 214, 18, 0, 0)));\\r\\n    } \\r\\n    if (tA[6] == 2) {\\r\\n      b = string(abi.encodePacked(b,rA(loc[87],loc[91],loc[89],loc[92], 0, 120, 90, 0, 0)));\\r\\n    }\\r\\n    if (tA[5] == 3) {\\r\\n      b = string(abi.encodePacked(b,rA(loc[83],loc[84],loc[85],loc[86], tR, tG, tB, 0, 0))); \\r\\n    }\\r\\n\\r\\n    // Ear rings\\r\\n    s[0] = '(242,242,255); stroke-width: 2px; stroke: rgb(233,233,242);\\\"/>';\\r\\n    if (tA[7] == 4) { \\r\\n      s[0] = '(22,22,22); fill-opacity: 0.5; stroke-width: 8px; stroke: rgb(12,12,12);\\\"/>';\\r\\n      loc[48] = 20;\\r\\n    }\\r\\n    if (tA[7] == 1 || tA[7] == 3 || tA[7] == 4) {\\r\\n      b = string(abi.encodePacked(b,rS(loc[28] + (loc[31] - loc[48]) / 2, loc[49], loc[48], loc[48], s[0])));\\r\\n    }\\r\\n    if (tA[7] == 2 || tA[7] == 3 || tA[7] == 4) {\\r\\n      b = string(abi.encodePacked(b,rS(loc[29] + (loc[31] - loc[48]) / 2, loc[49], loc[48], loc[48], s[0])));\\r\\n    }\\r\\n    loc[49] = loc[30] + 20;\\r\\n    s[0] = '(252,214,18);\\\"/>';\\r\\n    if (tA[8] == 1 || tA[8] == 3) { \\r\\n      b = string(abi.encodePacked(b,rS(loc[28] - 15, loc[49], 30, 15, s[0])));\\r\\n    } \\r\\n    if (tA[8] == 2 || tA[8] == 3) { \\r\\n      b = string(abi.encodePacked(b,rS(loc[29] + loc[31] - 15, loc[49], 30, 15, s[0])));\\r\\n    }\\r\\n\\r\\n    // Other\\r\\n    tR = 0; // cS(tR, 40);\\r\\n    tG = 80; // cS(tG, 40);\\r\\n    tB = 225; // cS(tB, 40);\\r\\n    if (tA[9] == 0) {\\r\\n      b = string(abi.encodePacked(b,rA(loc[98],loc[99],loc[100],1012 - loc[99], tR, tG, tB, 6, 32)));\\r\\n    } else if (tA[9] == 1) {\\r\\n      b = string(abi.encodePacked(b,rA(loc[98],loc[99],loc[100],loc[101], tR, tG, tB, 0, 0))); \\r\\n      b = string(abi.encodePacked(b,rA(loc[102],loc[103],loc[104],loc[105], tR, tG, tB, 0, 0)));\\r\\n      b = string(abi.encodePacked(b,rA(loc[97],loc[103],loc[104],loc[105], tR, tG, tB, 0, 0)));  \\r\\n    } else if (tA[9] == 2) {\\r\\n      b = string(abi.encodePacked(b,rS(loc[98],loc[99],loc[100],loc[101],'(32,32,32);\\\"/>')));\\r\\n    } else if (tA[9] == 3) {\\r\\n      b = string(abi.encodePacked(b,rS(loc[98],loc[99],loc[100],loc[101],'(252,214,18);\\\"/>')));\\r\\n    } else if (tA[9] == 4) {\\r\\n      b = string(abi.encodePacked(b,rS(loc[98],loc[99],loc[100],loc[101],'(8,8,8);\\\"/>')));\\r\\n    } else if (tA[9] == 5) {\\r\\n      b = string(abi.encodePacked(b,rS(loc[98],loc[99],loc[100],loc[101],'(252,214,18);\\\"/>')));\\r\\n      b = string(abi.encodePacked(b,rS(loc[102],loc[99],loc[104],loc[101],'(0,120,90);\\\"/>')));\\r\\n    }\\r\\n    b = string(abi.encodePacked(b,'</svg>'));\\r\\n    return b;\\r\\n  }\\r\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"eO\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"eT\",\"type\":\"uint256\"},{\"internalType\":\"uint8[11]\",\"name\":\"tA\",\"type\":\"uint8[11]\"},{\"internalType\":\"uint16[110]\",\"name\":\"loc\",\"type\":\"uint16[110]\"}],\"name\":\"assembleSVG\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}]", "ContractName": "pepeBLONKSsvg", "CompilerVersion": "v0.8.21+commit.d9974bed", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}