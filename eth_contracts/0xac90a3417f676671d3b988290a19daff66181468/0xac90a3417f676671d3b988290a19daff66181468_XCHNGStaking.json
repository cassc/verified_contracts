{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n}\r\n\r\ncontract XCHNGStaking is Ownable {\r\n    IERC20 public xchngToken;\r\n    struct Stake {\r\n        uint256 amount;\r\n        uint256 unlockTime;\r\n        uint256 vXCHNGAmount;\r\n    }\r\n\r\n    mapping( address => mapping (uint256 => Stake) ) public stakes;\r\n    mapping (address => uint256 ) public stakeIndex;\r\n    mapping(address => uint256) public vXCHNGBalance;\r\n    uint256 public totalXCHNGStaked;\r\n\r\n    event Staked(address indexed user, uint256 amount, uint256 duration, uint256 vXCHNGAmount);\r\n    event Withdrawn(address indexed user, uint256 amount);\r\n\r\n    constructor(address _xchngTokenAddress) {\r\n        xchngToken = IERC20(_xchngTokenAddress);\r\n    }\r\n\r\n    function stake(uint256 _amount, uint256 _duration) public {\r\n        require(_amount > 0, \"Amount must be greater than 0\");\r\n        uint256 durationSeconds = _getDurationSeconds(_duration);\r\n        require(durationSeconds > 0, \"Invalid duration\");\r\n\r\n        uint256 vXCHNGAmount = _calculateVXCHNGAmount(_amount, _duration);\r\n        uint256 _stakeIndex = stakeIndex[msg.sender];\r\n        stakes[msg.sender][_stakeIndex] = Stake(_amount, block.timestamp + durationSeconds, vXCHNGAmount);\r\n        stakeIndex[msg.sender] =  _stakeIndex + 1;\r\n\r\n        vXCHNGBalance[msg.sender] += vXCHNGAmount;\r\n        totalXCHNGStaked += _amount;\r\n\r\n        require(xchngToken.transferFrom(msg.sender, address(this), _amount), \"Transfer failed\");\r\n        emit Staked(msg.sender, _amount, _duration, vXCHNGAmount);\r\n    }\r\n\r\n    function withdraw(uint256 _stakeIndex) public {\r\n        Stake memory userStake = stakes[msg.sender][_stakeIndex];\r\n        require(block.timestamp >= userStake.unlockTime, \"Stake is still locked\");\r\n        require(userStake.amount > 0, \"Empty stakeIndex\");\r\n\r\n        require(xchngToken.transfer(msg.sender, userStake.amount), \"Transfer failed\");\r\n        totalXCHNGStaked -= userStake.amount;\r\n        delete stakes[msg.sender][_stakeIndex];\r\n        vXCHNGBalance[msg.sender] -= userStake.vXCHNGAmount;\r\n\r\n        emit Withdrawn(msg.sender, userStake.amount);\r\n    }\r\n\r\n    function stakeInfo(address _user, uint256 _stakeIndex) public view returns (uint256 amount, uint256 unlockTime, uint256 vXCHNGAmount) {\r\n        Stake memory userStake = stakes[_user][_stakeIndex];\r\n        return (userStake.amount, userStake.unlockTime, userStake.vXCHNGAmount);\r\n    }\r\n\t\r\n    function transfer(address _sender, uint256 _senderIndex, address _recipient) public onlyOwner {\r\n        Stake memory senderStake = stakes[_sender][_senderIndex];\r\n        require(senderStake.amount > 0, \"Invalid _senderIndex\");\r\n\r\n        uint256 _recipientIndex = stakeIndex[_recipient];\r\n        stakes[_recipient][_recipientIndex] = senderStake;\r\n        stakeIndex[_recipient] =  _recipientIndex + 1;\r\n\t\tvXCHNGBalance[_recipient] += senderStake.vXCHNGAmount;\r\n\t\t\r\n        delete stakes[_sender][_senderIndex];\r\n\t\tvXCHNGBalance[_sender] -= senderStake.vXCHNGAmount;\r\n    }\r\n\r\n    function _getDurationSeconds(uint256 _duration) private pure returns (uint256) {\r\n        if (_duration == 6) return 180 days;\r\n        if (_duration == 12) return 365 days;\r\n        if (_duration == 24) return 730 days;\r\n        if (_duration == 48) return 1460 days;\r\n        return 0;\r\n    }\r\n\r\n    function _calculateVXCHNGAmount(uint256 _amount, uint256 _duration) private pure returns (uint256) {\r\n        if (_duration == 6) return _amount;\r\n        if (_duration == 12) return _amount * 3 / 2;\r\n        if (_duration == 24) return _amount * 3;\r\n        if (_duration == 48) return _amount * 8;\r\n        return 0;\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_xchngTokenAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"vXCHNGAmount\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_duration\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stakeIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_stakeIndex\",\"type\":\"uint256\"}],\"name\":\"stakeInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unlockTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vXCHNGAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stakes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unlockTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vXCHNGAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalXCHNGStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_senderIndex\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"transfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"vXCHNGBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_stakeIndex\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"xchngToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "XCHNGStaking", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000b712d62fe84258292d1961b5150a19bc4ab49026", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://66dfeafa387454cf226a87d62a3c698a5accfc01fdd02100dd4dc4c57af2d4ab"}