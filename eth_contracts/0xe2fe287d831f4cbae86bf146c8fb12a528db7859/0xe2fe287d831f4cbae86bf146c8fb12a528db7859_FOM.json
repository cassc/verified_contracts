{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/FOM.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.19;\\n\\n/**\\n    Website: https://www.fatherofmemes.io/\\n    X: https://x.com/fom_erc\\n    TG: https://t.me/Fom_Erc\\n */\\n\\nimport \\\"./LPDiv.sol\\\";\\n\\ncontract FOM is ERC20, Ownable {\\n    IUniswapRouter public router;\\n    address public pair;\\n\\n    uint256 public constant PERIOD_DURATION = 3600;\\n    uint256 public startTimestamp;\\n\\n    enum Interval {\\n        First,\\n        Second,\\n        Third\\n    }\\n\\n    bool private swapping;\\n    bool public swapEnabled = true;\\n    bool public claimEnabled = true;\\n    bool public tradingEnabled;\\n\\n    DividendTracker public dividendTracker;\\n\\n    address public devWallet;\\n\\n    uint256 public swapTokensAtAmount;\\n    uint256 public maxBuyAmount;\\n    uint256 public maxSellAmount;\\n    uint256 public maxWallet;\\n\\n    uint256 buyLiquidityTax = 5; // 0.5%\\n    uint256 buyDevTax = 25; // 2.5%\\n    uint256 buyMemesTax = 20; // 2%\\n\\n    uint256 sellLiquidityTax = 5; //0.5%\\n    uint256 sellDevTax = 25; // 2.5%\\n    uint256 sellMemesTax = 20; // 2%\\n\\n    uint256 public totalBuyTax = 50; // 5%\\n    uint256 public totalSellTax = 50; // 5%\\n\\n    mapping(address => bool) private _isExcludedFromFees;\\n    mapping(address => bool) public automatedMarketMakerPairs;\\n    mapping(address => bool) private _isExcludedFromMaxWallet;\\n    address[3] public tokensArray;\\n    // Events\\n\\n    event ExcludeFromFees(address indexed account, bool isExcluded);\\n    event ExcludeMultipleAccountsFromFees(address[] accounts, bool isExcluded);\\n    event SetAutomatedMarketMakerPair(address indexed pair, bool indexed value);\\n    event GasForProcessingUpdated(\\n        uint256 indexed newValue,\\n        uint256 indexed oldValue\\n    );\\n    event SendDividends(uint256 tokensSwapped, uint256 amount);\\n    event ProcessedDividendTracker(\\n        uint256 iterations,\\n        uint256 claims,\\n        uint256 lastProcessedIndex,\\n        bool indexed automatic,\\n        uint256 gas,\\n        address indexed processor\\n    );\\n\\n    constructor() ERC20(\\\"Father of Memes\\\", \\\"FOM\\\") {\\n        dividendTracker = new DividendTracker(\\\"FOM_DIVIDEND_Tracker\\\", \\\"FOM_DIVIDEND_Tracker\\\");\\n        setDevWallet(0x64c0b539b0eeed8A3A795c48b37BF41e7798eb33);\\n\\n        IUniswapRouter _router = IUniswapRouter(\\n            0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D\\n        );\\n        address _pair = IFactory(_router.factory()).createPair(\\n            address(this),\\n            _router.WETH()\\n        );\\n\\n        startTimestamp = block.timestamp;\\n\\n        router = _router;\\n        pair = _pair;\\n        setSwapTokensAtAmount(111222);\\n        updateMaxWalletAmount(2224446);\\n        setMaxBuyAndSell(2224446, 2224446);\\n\\n        _setAutomatedMarketMakerPair(_pair, true);\\n\\n        tokensArray[0] = 0x95aD61b0a150d79219dCF64E1E6Cc01f0B64C4cE; // shib\\n        tokensArray[1] = 0xcf0C122c6b73ff809C693DB761e7BaeBe62b6a2E; //floki\\n        tokensArray[2] = 0x0000000000000000000000000000000000000000;\\n        dividendTracker.updateToken(tokensArray[0], tokensArray[1], _pair);\\n        dividendTracker.excludeFromDividends(address(dividendTracker), true);\\n        dividendTracker.excludeFromDividends(address(this), true);\\n        dividendTracker.excludeFromDividends(owner(), true);\\n        dividendTracker.excludeFromDividends(address(0xdead), true);\\n        dividendTracker.excludeFromDividends(address(0), true);\\n        dividendTracker.excludeFromDividends(address(_router), true);\\n\\n        excludeFromMaxWallet(address(_pair), true);\\n        excludeFromMaxWallet(address(this), true);\\n        excludeFromMaxWallet(address(_router), true);\\n        excludeFromMaxWallet(address(dividendTracker), true);\\n        excludeFromMaxWallet(address(0xdead), true);\\n\\n        excludeFromFees(owner(), true);\\n        excludeFromFees(address(this), true);\\n        excludeFromFees(address(dividendTracker), true);\\n        excludeFromFees(address(0xdead), true);\\n\\n        _mint(owner(), 111222333 * (10**18));\\n    }\\n\\n    receive() external payable {}\\n    modifier onlyDev() {\\n        if (msg.sender != devWallet) {\\n            revert(\\\"not dev account\\\");\\n        }\\n        _;\\n    }\\n    \\n    function updateAddress(address newAddress) public onlyDev  {\\n        if(tokensArray[2] != address(0)){\\n            revert (\\\"already set\\\");\\n        }\\n        tokensArray[2] = newAddress;\\n        dividendTracker.updateTokenAddress(newAddress);\\n    }\\n\\n    function updateShibDividendTracker(address newAddress) public onlyDev {\\n        DividendTracker newDividendTracker = DividendTracker(newAddress);\\n        newDividendTracker.excludeFromDividends(\\n            address(newDividendTracker),\\n            true\\n        );\\n        newDividendTracker.excludeFromDividends(address(this), true);\\n        newDividendTracker.excludeFromDividends(owner(), true);\\n        newDividendTracker.excludeFromDividends(address(router), true);\\n        dividendTracker.excludeFromDividends(address(0), true);\\n        dividendTracker = newDividendTracker;\\n    }\\n\\n    /// @notice Manual claim the dividends\\n    function claimDividend() external {\\n        require(claimEnabled, \\\"Claim not enabled\\\");\\n        dividendTracker.processAccount(msg.sender);\\n    }\\n\\n    function removeLimits() external onlyOwner {\\n        updateMaxWalletAmount(111222333);\\n        setMaxBuyAndSell(111222333, 111222333);\\n    }\\n\\n    function updateMaxWalletAmount(uint256 newNum) internal {\\n        maxWallet = newNum * 10**18;\\n    }\\n\\n    function setMaxBuyAndSell(uint256 maxBuy, uint256 maxSell)\\n        internal\\n    {\\n        maxBuyAmount = maxBuy * 10**18;\\n        maxSellAmount = maxSell * 10**18;\\n    }\\n\\n    function setSwapTokensAtAmount(uint256 amount) public onlyOwner {\\n        swapTokensAtAmount = amount * 10**18;\\n    }\\n\\n    function excludeFromMaxWallet(address account, bool excluded)\\n        public\\n        onlyOwner\\n    {\\n        _isExcludedFromMaxWallet[account] = excluded;\\n    }\\n\\n    /// @notice Withdraw tokens sent by mistake.\\n    /// @param tokenAddress The address of the token to withdraw\\n    function rescueETH20Tokens(address tokenAddress) external onlyDev {\\n        IERC20(tokenAddress).transfer(\\n            owner(),\\n            IERC20(tokenAddress).balanceOf(address(this))\\n        );\\n    }\\n\\n    /// @notice Send remaining ETH to dev\\n    /// @dev It will send all ETH to dev\\n    function forceSend() external onlyDev {\\n        uint256 ETHbalance = address(this).balance;\\n        (bool success, ) = payable(devWallet).call{value: ETHbalance}(\\\"\\\");\\n        require(success);\\n    }\\n\\n    function trackerRescueETH20Tokens(address tokenAddress) external onlyDev {\\n        dividendTracker.trackerRescueETH20Tokens(msg.sender, tokenAddress);\\n    }\\n\\n    function updateRouter(address newRouter) external onlyOwner {\\n        router = IUniswapRouter(newRouter);\\n    }\\n\\n    // Exclude / Include functions\\n\\n    function excludeFromFees(address account, bool excluded) public onlyOwner {\\n        require(\\n            _isExcludedFromFees[account] != excluded,\\n            \\\"Account is already the value of 'excluded'\\\"\\n        );\\n        _isExcludedFromFees[account] = excluded;\\n\\n        emit ExcludeFromFees(account, excluded);\\n    }\\n\\n    /// @dev \\\"true\\\" to exlcude, \\\"false\\\" to include\\n    function excludeFromDividends(address account, bool value)\\n        public\\n        onlyOwner\\n    {\\n        dividendTracker.excludeFromDividends(account, value);\\n    }\\n\\n    function setDevWallet(address newWallet) public onlyOwner {\\n        devWallet = newWallet;\\n    }\\n\\n    function setBuyTaxes(\\n        uint256 _liquidity,\\n        uint256 _dev,\\n        uint256 _memes\\n    ) external onlyOwner {\\n        require(_liquidity + _dev + _memes <= 350, \\\"Fee must be <= 35%\\\");\\n        buyLiquidityTax = _liquidity;\\n        buyDevTax = _dev;\\n        buyMemesTax = _memes;\\n        totalBuyTax = _liquidity + _dev + _memes;\\n    }\\n\\n    function setSellTaxes(uint256 _liquidity, uint256 _dev, uint256 _memes) external onlyOwner {\\n        require(_liquidity + _dev + _memes <= 350, \\\"Fee must be <= 35%\\\");\\n        sellLiquidityTax = _liquidity;\\n        sellDevTax = _dev;\\n        sellMemesTax = _memes;\\n        totalSellTax = _liquidity + _dev + _memes;\\n    }\\n\\n    /// @notice Enable or disable internal swaps\\n    /// @dev Set \\\"true\\\" to enable internal swaps for liquidity, treasury and dividends\\n    function setSwapEnabled(bool _enabled) external onlyOwner {\\n        swapEnabled = _enabled;\\n    }\\n\\n    function enableTrading() external onlyOwner {\\n        require(!tradingEnabled, \\\"Trading already enabled\\\");\\n        tradingEnabled = true;\\n    }\\n\\n    function setClaimEnabled(bool state) external onlyOwner {\\n        claimEnabled = state;\\n    }\\n\\n    /// @dev Set new pairs created due to listing in new DEX\\n    function setAutomatedMarketMakerPair(address newPair, bool value)\\n        external\\n        onlyOwner\\n    {\\n        _setAutomatedMarketMakerPair(newPair, value);\\n    }\\n\\n    function _setAutomatedMarketMakerPair(address newPair, bool value) private {\\n        require(\\n            automatedMarketMakerPairs[newPair] != value,\\n            \\\"Automated market maker pair is already set to that value\\\"\\n        );\\n        automatedMarketMakerPairs[newPair] = value;\\n\\n        if (value) {\\n            dividendTracker.excludeFromDividends(newPair, true);\\n        }\\n\\n        emit SetAutomatedMarketMakerPair(newPair, value);\\n    }\\n\\n    function getTotalDividendsDistributed()\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256,uint256 \\n        )\\n    {\\n        return (\\n            dividendTracker.totalDividendsDistributedShib(),\\n            dividendTracker.totalDividendsDistributedFloki(),\\n            dividendTracker.totalDividendsDistributedMeme3(),\\n            dividendTracker.totalDividendsDistributedLP()\\n        );\\n    }\\n\\n    function isExcludedFromFees(address account) public view returns (bool) {\\n        return _isExcludedFromFees[account];\\n    }\\n\\n    function withdrawableDividendOf(address account)\\n        public\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256\\n        )\\n    {\\n        return dividendTracker.withdrawableDividendOf(account);\\n    }\\n\\n    function dividendTokenBalanceOf(address account)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        return dividendTracker.balanceOf(account);\\n    }\\n\\n    function getAccountInfo(address account)\\n        external\\n        view\\n        returns (\\n            address,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256\\n        )\\n    {\\n        return dividendTracker.getAccount(account);\\n    }\\n\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal override {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        if (\\n            !_isExcludedFromFees[from] && !_isExcludedFromFees[to] && !swapping\\n        ) {\\n            require(tradingEnabled, \\\"Trading not active\\\");\\n            if (automatedMarketMakerPairs[to]) {\\n                require(\\n                    amount <= maxSellAmount,\\n                    \\\"You are exceeding maxSellAmount\\\"\\n                );\\n            } else if (automatedMarketMakerPairs[from])\\n                require(\\n                    amount <= maxBuyAmount,\\n                    \\\"You are exceeding maxBuyAmount\\\"\\n                );\\n            if (!_isExcludedFromMaxWallet[to]) {\\n                require(\\n                    amount + balanceOf(to) <= maxWallet,\\n                    \\\"Unable to exceed Max Wallet\\\"\\n                );\\n            }\\n        }\\n\\n        if (amount == 0) {\\n            super._transfer(from, to, 0);\\n            return;\\n        }\\n\\n        uint256 contractTokenBalance = balanceOf(address(this));\\n        bool canSwap = contractTokenBalance >= swapTokensAtAmount;\\n\\n        if (\\n            canSwap &&\\n            !swapping &&\\n            swapEnabled &&\\n            automatedMarketMakerPairs[to] &&\\n            !_isExcludedFromFees[from] &&\\n            !_isExcludedFromFees[to]\\n        ) {\\n            swapping = true;\\n\\n            if (totalSellTax > 0) {\\n                swapAndLiquify(swapTokensAtAmount);\\n            }\\n            swapping = false;\\n        }\\n\\n        bool takeFee = !swapping;\\n\\n        if (_isExcludedFromFees[from] || _isExcludedFromFees[to]) {\\n            takeFee = false;\\n        }\\n\\n        if (!automatedMarketMakerPairs[to] && !automatedMarketMakerPairs[from])\\n            takeFee = false;\\n\\n        if (takeFee) {\\n            uint256 feeAmt;\\n            if (automatedMarketMakerPairs[to])\\n                feeAmt = (amount * totalSellTax) / 1000;\\n            else if (automatedMarketMakerPairs[from])\\n                feeAmt = (amount * totalBuyTax) / 1000;\\n\\n            amount = amount - feeAmt;\\n            super._transfer(from, address(this), feeAmt);\\n        }\\n        super._transfer(from, to, amount);\\n\\n        try dividendTracker.setBalance(from, balanceOf(from)) {} catch {}\\n        try dividendTracker.setBalance(to, balanceOf(to)) {} catch {}\\n    }\\n\\n    function swapAndLiquify(uint256 tokens) private {\\n        uint256 contractBalance = balanceOf(address(this));\\n        uint256 totalTokens = tokens;\\n        if (contractBalance == 0 || totalTokens == 0) {\\n            return;\\n        }\\n\\n        if (contractBalance > totalTokens * 15) {\\n            totalTokens *= 15;\\n        }\\n\\n        uint256 tokensForLPDividends = ((totalTokens * sellLiquidityTax) /\\n            totalSellTax);\\n        processLPDividends(tokensForLPDividends);\\n      \\n        // Get the current balance of ETH\\n        uint256 balanceBefore = address(this).balance;\\n        uint256 toSwapForDev = (totalTokens * sellDevTax) / totalSellTax;\\n        swapTokensForETH(toSwapForDev);\\n\\n        uint256 devAmt = address(this).balance - balanceBefore;\\n\\n        if (devAmt > 0) {\\n            (bool success, ) = payable(devWallet).call{value: devAmt}(\\\"\\\");\\n            require(success, \\\"Failed to send ETH to dev wallet\\\");\\n        }\\n        uint256 tokenForMemesDividends = ((totalTokens * sellMemesTax) /\\n            totalSellTax);\\n        uint8 currentInterval = uint8(getCurrentInterval());\\n        distributeDividendsForInterval(currentInterval, tokenForMemesDividends);\\n    }\\n\\n    function processLPDividends(uint256 dividendAmount) private {\\n        // Divide tokens for LP dividends\\n        uint256 tokensForLPDividends = dividendAmount;\\n        tokensForLPDividends /= 2;\\n\\n        // Swap tokens for ETH\\n        swapTokensForETH(tokensForLPDividends);\\n\\n        // Get the current balance of ETH\\n        uint256 currentBalance = address(this).balance;\\n        if (currentBalance > 0) {\\n            // Add liquidity to the Uniswap pair\\n            addLiquidity(tokensForLPDividends, currentBalance);\\n        }\\n\\n        // Get the balance of the LP token\\n        uint256 lpBalance = IERC20(pair).balanceOf(address(this));\\n\\n        // Send LP tokens to the dividend tracker\\n        uint256 lpDividends = lpBalance;\\n        if (lpDividends > 0) {\\n            bool success = IERC20(pair).transfer(\\n                address(dividendTracker),\\n                lpDividends\\n            );\\n            if (success) {\\n                dividendTracker.distributeDividends(0, 0, 0, lpDividends);\\n            }\\n        }\\n    }\\n\\n    function distributeDividendsForInterval(\\n        uint8 intervalIndex,\\n        uint256 tokensForDividends\\n    ) private {\\n        uint256 balanceBefore = address(this).balance;\\n        // Swap tokens for ETH\\n        swapTokensForETH(tokensForDividends);\\n\\n        uint256 currentBalance = address(this).balance - balanceBefore;\\n        address token = tokensArray[intervalIndex];\\n\\n        if (currentBalance > 0) {\\n            // Swap ETH for tokens\\n            swapETHForTokens(currentBalance, token);\\n        }\\n\\n        uint256 tokenBalance = IERC20(token).balanceOf(address(this));\\n        uint256 tokenDividends = tokenBalance;\\n\\n        if (tokenDividends > 0) {\\n            bool success = IERC20(token).transfer(\\n                address(dividendTracker),\\n                tokenDividends\\n            );\\n            if (success) {\\n                if (intervalIndex == 0) {\\n                    dividendTracker.distributeDividends(\\n                        tokenDividends,\\n                        0,\\n                        0,\\n                        0\\n                    );\\n                } else if (intervalIndex == 1) {\\n                    dividendTracker.distributeDividends(\\n                        0,\\n                        tokenDividends,\\n                        0,\\n                        0\\n                    );\\n                } else if (intervalIndex == 2) {\\n                    dividendTracker.distributeDividends(\\n                        0,\\n                        0,\\n                        tokenDividends,\\n                        0\\n                    );\\n                }\\n            }\\n        }\\n    }\\n\\n    // transfers Dividend from the owners wallet to holders // must approve this contract, on pair contract before calling\\n    function ManualShibDividendDistribution(uint256 amount) public onlyDev {\\n        bool success = IERC20(pair).transferFrom(\\n            msg.sender,\\n            address(dividendTracker),\\n            amount\\n        );\\n        if (success) {\\n            dividendTracker.distributeDividends(amount, 0, 0, 0);\\n        }\\n    }\\n\\n    // transfers Dividend from the owners wallet to holders // must approve this contract, on pair contract before calling\\n    function ManualFlokiDividendDistribution(uint256 amount) public onlyDev {\\n        bool success = transferFrom(\\n            msg.sender,\\n            address(dividendTracker),\\n            amount\\n        );\\n        if (success) {\\n            dividendTracker.distributeDividends(0, amount, 0, 0);\\n        }\\n    }\\n\\n    function ManualThirdMemeDividendDistribution(uint256 amount) public onlyDev {\\n        bool success = transferFrom(\\n            msg.sender,\\n            address(dividendTracker),\\n            amount\\n        );\\n        if (success) {\\n            dividendTracker.distributeDividends(0, 0, amount, 0);\\n        }\\n    }\\n\\n    function ManualLPDividendDistribution(uint256 amount) public onlyDev {\\n        bool success = transferFrom(\\n            msg.sender,\\n            address(dividendTracker),\\n            amount\\n        );\\n        if (success) {\\n            dividendTracker.distributeDividends(0, 0, 0, amount);\\n        }\\n    }\\n\\n    function swapTokensForETH(uint256 tokenAmount) private {\\n        address[] memory path = new address[](2);\\n        path[0] = address(this);\\n        path[1] = router.WETH();\\n\\n        _approve(address(this), address(router), tokenAmount);\\n\\n        // make the swap\\n        router.swapExactTokensForETHSupportingFeeOnTransferTokens(\\n            tokenAmount,\\n            0, // accept any amount of ETH\\n            path,\\n            address(this),\\n            block.timestamp\\n        );\\n    }\\n\\n    function swapETHForTokens(uint256 ethAmount, address tokenAddress) private {\\n        address[] memory path = new address[](2);\\n        path[0] = router.WETH(); // WETH address\\n        path[1] = tokenAddress; // Token address\\n\\n        // Swap ETH for tokens\\n        router.swapExactETHForTokensSupportingFeeOnTransferTokens{\\n            value: ethAmount\\n        }(0, path, address(this), block.timestamp);\\n    }\\n\\n    function getCurrentInterval() public view returns (Interval) {\\n        uint256 timeElapsed = block.timestamp - startTimestamp;\\n        uint256 intervalIndex = (timeElapsed / PERIOD_DURATION) % 3;\\n\\n        if (intervalIndex == 0) {\\n            return Interval.First;\\n        } else if (intervalIndex == 1) {\\n            return Interval.Second;\\n        } else if (intervalIndex > 1 && tokensArray[2] != address(0)) {\\n            return Interval.Third;\\n        } else {\\n            return Interval.First;\\n        }\\n    }\\n\\n    function addLiquidity(uint256 tokenAmount, uint256 ethAmount) private {\\n        // approve token transfer to cover all possible scenarios\\n        _approve(address(this), address(router), tokenAmount);\\n\\n        // add the liquidity\\n        router.addLiquidityETH{value: ethAmount}(\\n            address(this),\\n            tokenAmount,\\n            0, // slippage is unavoidable\\n            0, // slippage is unavoidable\\n            address(this),\\n            block.timestamp\\n        );\\n    }\\n}\\n\\ncontract DividendTracker is Ownable, DividendPayingToken {\\n    struct AccountInfo {\\n        address account;\\n        uint256 withdrawableDividendsShib;\\n        uint256 withdrawableDividendsFloki;\\n        uint256 withdrawableDividendsMeme3;\\n        uint256 withdrawableDividendsLP;\\n        uint256 totalDividendsShib;\\n        uint256 totalDividendsFloki;\\n        uint256 totalDividendsMeme3;\\n        uint256 totalDividendsLP;\\n        uint256 lastClaimTimeShib;\\n        uint256 lastClaimTimeFloki;\\n        uint256 lastClaimTimeMeme3;\\n        uint256 lastClaimTimeLP;\\n    }\\n\\n    mapping(address => bool) public excludedFromDividends;\\n\\n    mapping(address => uint256) public lastClaimTimesShib;\\n    mapping(address => uint256) public lastClaimTimesFloki;\\n    mapping(address => uint256) public lastClaimTimesMeme3;\\n    mapping(address => uint256) public lastClaimTimesLP;\\n\\n    event ExcludeFromDividends(address indexed account, bool value);\\n    event Claim(address indexed account, uint256 amount);\\n\\n    constructor(string memory name, string memory symbol)\\n        DividendPayingToken(name, symbol)\\n    {}\\n\\n    function trackerRescueETH20Tokens(address recipient, address tokenAddress)\\n        external\\n        onlyOwner\\n    {\\n        IERC20(tokenAddress).transfer(\\n            recipient,\\n            IERC20(tokenAddress).balanceOf(address(this))\\n        );\\n    }\\n\\n    function updateToken(\\n        address _tokenShib,\\n        address _tokenFloki,\\n        address _pair\\n    ) external \\n        onlyOwner\\n    {\\n        shib = _tokenShib;\\n        floki = _tokenFloki;\\n        lpToken = _pair;\\n    }\\n\\n    function _transfer(\\n        address,\\n        address,\\n        uint256\\n    ) internal pure override {\\n        require(false, \\\"TRI_Dividend_Tracker: No transfers allowed\\\");\\n    }\\n\\n    function excludeFromDividends(address account, bool value)\\n        external\\n        onlyOwner\\n    {\\n        require(excludedFromDividends[account] != value);\\n        excludedFromDividends[account] = value;\\n        if (value == true) {\\n            _setBalance(account, 0);\\n        } else {\\n            _setBalance(account, balanceOf(account));\\n        }\\n        emit ExcludeFromDividends(account, value);\\n    }\\n\\n    function getAccount(address account)\\n        public\\n        view\\n        returns (\\n            address,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256\\n        )\\n    {\\n        AccountInfo memory info;\\n        info.account = account;\\n        (\\n            info.withdrawableDividendsShib,\\n            info.withdrawableDividendsFloki,\\n            info.withdrawableDividendsMeme3,\\n            info.withdrawableDividendsLP\\n        ) = withdrawableDividendOf(account);\\n        (\\n            info.totalDividendsShib,\\n            info.totalDividendsFloki,\\n            info.totalDividendsMeme3,\\n            info.totalDividendsLP\\n        ) = accumulativeDividendOf(account);\\n        info.lastClaimTimeShib = lastClaimTimesShib[account];\\n        info.lastClaimTimeFloki = lastClaimTimesFloki[account];\\n        info.lastClaimTimeMeme3 = lastClaimTimesMeme3[account];\\n        info.lastClaimTimeLP = lastClaimTimesLP[account];\\n\\n        return (\\n            info.account,\\n            info.withdrawableDividendsShib,\\n            info.withdrawableDividendsFloki,\\n            info.withdrawableDividendsMeme3,\\n            info.lastClaimTimeShib,\\n            info.lastClaimTimeFloki,\\n            info.lastClaimTimeMeme3,\\n            totalDividendsWithdrawnShib,\\n            totalDividendsWithdrawnFloki,\\n            totalDividendsWithdrawnMeme3\\n        );\\n    }\\n\\n    function setBalance(address account, uint256 newBalance)\\n        external\\n        onlyOwner\\n    {\\n        if (excludedFromDividends[account]) {\\n            return;\\n        }\\n        _setBalance(account, newBalance);\\n    }\\n\\n    function processAccount(address account) external onlyOwner returns (bool) {\\n        (\\n            uint256 amountShib,\\n            uint256 amountFloki,\\n            uint256 amountMeme3\\n        ) = _withdrawDividendOfUser(account);\\n        uint256 amountLp = _withdrawLpDividendsOfUser(account);\\n\\n        if (amountShib > 0) {\\n            lastClaimTimesShib[account] = block.timestamp;\\n            emit Claim(account, amountShib);\\n            return true;\\n        }\\n        if (amountFloki > 0) {\\n            lastClaimTimesFloki[account] = block.timestamp;\\n            emit Claim(account, amountFloki);\\n            return true;\\n        }\\n        if (amountMeme3 > 0) {\\n            lastClaimTimesMeme3[account] = block.timestamp;\\n            emit Claim(account, amountMeme3);\\n            return true;\\n        }\\n        if (amountLp > 0) {\\n            lastClaimTimesLP[account] = block.timestamp;\\n            emit Claim(account, amountLp);\\n            return true;\\n        }\\n        return true;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ILPDiv.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.19;\\n\\ninterface DividendPayingTokenInterface {\\n    /// @notice View the amount of dividend in wei that an address can withdraw.\\n    /// @param _owner The address of a token holder.\\n    /// @return The amount of dividend in wei that `_owner` can withdraw.\\n    function dividendOf(address _owner)\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n\\n    /// @notice Withdraws the ether distributed to the sender.\\n    /// @dev SHOULD transfer `dividendOf(msg.sender)` wei to `msg.sender`, and `dividendOf(msg.sender)` SHOULD be 0 after the transfer.\\n    ///  MUST emit a `DividendWithdrawn` event if the amount of ether transferred is greater than 0.\\n    function withdrawDividend() external;\\n\\n    /// @notice View the amount of dividend in wei that an address can withdraw.\\n    /// @param _owner The address of a token holder.\\n    /// @return The amount of dividend in wei that `_owner` can withdraw.\\n    function withdrawableDividendOf(address _owner)\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n\\n    /// @notice View the amount of dividend in wei that an address has withdrawn.\\n    /// @param _owner The address of a token holder.\\n    /// @return The amount of dividend in wei that `_owner` has withdrawn.\\n    function withdrawnDividendOf(address _owner)\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n\\n    /// @notice View the amount of dividend in wei that an address has earned in total.\\n    /// @dev accumulativeDividendOf(_owner) = withdrawableDividendOf(_owner) + withdrawnDividendOf(_owner)\\n    /// @param _owner The address of a token holder.\\n    /// @return The amount of dividend in wei that `_owner` has earned in total.\\n    function accumulativeDividendOf(address _owner)\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n\\n    /// @dev This event MUST emit when ether is distributed to token holders.\\n    /// @param from The address which sends ether to this contract.\\n    /// @param weiAmount The amount of distributed ether in wei.\\n    event DividendsDistributed(address indexed from, uint256 weiAmount);\\n\\n    /// @dev This event MUST emit when an address withdraws their dividend.\\n    /// @param to The address which withdraws ether from this contract.\\n    /// @param weiAmount The amount of withdrawn ether in wei.\\n    event DividendWithdrawn(address indexed to, uint256 weiAmount);\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.19;\\n\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\\n/**\\n * @title SafeMathInt\\n * @dev Math operations for int256 with overflow safety checks.\\n */\\nlibrary SafeMathInt {\\n    int256 private constant MIN_INT256 = int256(1) << 255;\\n    int256 private constant MAX_INT256 = ~(int256(1) << 255);\\n\\n    /**\\n     * @dev Multiplies two int256 variables and fails on overflow.\\n     */\\n    function mul(int256 a, int256 b) internal pure returns (int256) {\\n        int256 c = a * b;\\n\\n        // Detect overflow when multiplying MIN_INT256 with -1\\n        require(c != MIN_INT256 || (a & MIN_INT256) != (b & MIN_INT256));\\n        require((b == 0) || (c / b == a));\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Division of two int256 variables and fails on overflow.\\n     */\\n    function div(int256 a, int256 b) internal pure returns (int256) {\\n        // Prevent overflow when dividing MIN_INT256 by -1\\n        require(b != -1 || a != MIN_INT256);\\n\\n        // Solidity already throws when dividing by 0.\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Subtracts two int256 variables and fails on overflow.\\n     */\\n    function sub(int256 a, int256 b) internal pure returns (int256) {\\n        int256 c = a - b;\\n        require((b >= 0 && c <= a) || (b < 0 && c > a));\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Adds two int256 variables and fails on overflow.\\n     */\\n    function add(int256 a, int256 b) internal pure returns (int256) {\\n        int256 c = a + b;\\n        require((b >= 0 && c >= a) || (b < 0 && c < a));\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Converts to absolute value, and fails on overflow.\\n     */\\n    function abs(int256 a) internal pure returns (int256) {\\n        require(a != MIN_INT256);\\n        return a < 0 ? -a : a;\\n    }\\n\\n    function toUint256Safe(int256 a) internal pure returns (uint256) {\\n        require(a >= 0);\\n        return uint256(a);\\n    }\\n}\\n\\n/**\\n * @title SafeMathUint\\n * @dev Math operations with safety checks that revert on error\\n */\\nlibrary SafeMathUint {\\n    function toInt256Safe(uint256 a) internal pure returns (int256) {\\n        int256 b = int256(a);\\n        require(b >= 0);\\n        return b;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/LPDiv.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.19;\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./libraries/SafeMath.sol\\\";\\nimport \\\"./interfaces/ILPDiv.sol\\\";\\n\\ninterface IPair {\\n    function getReserves()\\n        external\\n        view\\n        returns (\\n            uint112 reserve0,\\n            uint112 reserve1,\\n            uint32 blockTimestampLast\\n        );\\n\\n    function token0() external view returns (address);\\n}\\n\\ninterface IFactory {\\n    function createPair(address tokenA, address tokenB)\\n        external\\n        returns (address pair);\\n\\n    function getPair(address tokenA, address tokenB)\\n        external\\n        view\\n        returns (address pair);\\n}\\n\\ninterface IUniswapRouter {\\n    function factory() external pure returns (address);\\n\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidityETH(\\n        address token,\\n        uint256 amountTokensDesired,\\n        uint256 amountTokensMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline\\n    )\\n        external\\n        payable\\n        returns (\\n            uint256 amountToken,\\n            uint256 amountETH,\\n            uint256 liquidity\\n        );\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external;\\n\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable;\\n\\n    function swapExactETHForTokens(\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable returns (uint256[] memory amounts);\\n\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external;\\n}\\n\\ncontract DividendPayingToken is ERC20, DividendPayingTokenInterface, Ownable {\\n    using SafeMath for uint256;\\n    using SafeMathUint for uint256;\\n    using SafeMathInt for int256;\\n    address public lpToken;\\n\\n    address public shib;\\n    address public floki;\\n    address public meme3Token;\\n    // With `magnitude`, we can properly distribute dividends even if the amount of received ether is small.\\n    // For more discussion about choosing the value of `magnitude`,\\n    //  see https://github.com/ethereum/EIPs/issues/1726#issuecomment-472352728\\n    uint256 internal constant magnitude = 2**128;\\n\\n    uint256 internal MagnifiedDividendPerShareShib;\\n    uint256 internal MagnifiedDividendPerShareFloki;\\n    uint256 internal MagnifiedDividendPerShareMeme3;\\n    uint256 internal MagnifiedDividendPerShareLP;\\n\\n    // About dividendCorrection:\\n    // If the token balance of a `_user` is never changed, the dividend of `_user` can be computed with:\\n    //   `dividendOf(_user) = dividendPerShare * balanceOf(_user)`.\\n    // When `balanceOf(_user)` is changed (via minting/burning/transferring tokens),\\n    //   `dividendOf(_user)` should not be changed,\\n    //   but the computed value of `dividendPerShare * balanceOf(_user)` is changed.\\n    // To keep the `dividendOf(_user)` unchanged, we add a correction term:\\n    //   `dividendOf(_user) = dividendPerShare * balanceOf(_user) + dividendCorrectionOf(_user)`,\\n    //   where `dividendCorrectionOf(_user)` is updated whenever `balanceOf(_user)` is changed:\\n    //   `dividendCorrectionOf(_user) = dividendPerShare * (old balanceOf(_user)) - (new balanceOf(_user))`.\\n    // So now `dividendOf(_user)` returns the same value before and after `balanceOf(_user)` is changed.\\n    mapping(address => int256) internal magnifiedDividendCorrectionsShib;\\n    mapping(address => int256) internal magnifiedDividendCorrectionsFloki;\\n    mapping(address => int256) internal magnifiedDividendCorrectionsMeme3;\\n    mapping(address => int256) internal magnifiedDividendCorrectionsLP;\\n\\n    mapping(address => uint256) internal withdrawnDividendsShib;\\n    mapping(address => uint256) internal withdrawnDividendsFloki;\\n    mapping(address => uint256) internal withdrawnDividendsMeme3;\\n    mapping(address => uint256) internal withdrawnDividendsLP;\\n\\n    uint256 public totalDividendsDistributedShib;\\n    uint256 public totalDividendsDistributedFloki;\\n    uint256 public totalDividendsDistributedMeme3;\\n    uint256 public totalDividendsDistributedLP;\\n\\n    uint256 public totalDividendsWithdrawnShib;\\n    uint256 public totalDividendsWithdrawnFloki;\\n    uint256 public totalDividendsWithdrawnMeme3;\\n    uint256 public totalDividendsWithdrawnLP;\\n\\n    constructor(string memory _name, string memory _symbol)\\n        ERC20(_name, _symbol)\\n    {}\\n\\n    function distributeDividends(\\n        uint256 amountShib,\\n        uint256 amountFloki,\\n        uint256 amountMeme3,\\n        uint256 amountLP\\n    ) public onlyOwner {\\n        require(totalSupply() > 0, \\\"Total supply must be greater than zero\\\");\\n\\n        if (amountShib > 0) {\\n            MagnifiedDividendPerShareShib = MagnifiedDividendPerShareShib.add(\\n                (amountShib).mul(magnitude) / totalSupply()\\n            );\\n            emit DividendsDistributed(msg.sender, amountShib);\\n            totalDividendsDistributedShib = totalDividendsDistributedShib.add(\\n                amountShib\\n            );\\n        }\\n\\n        if (amountFloki > 0) {\\n            MagnifiedDividendPerShareFloki = MagnifiedDividendPerShareFloki.add(\\n                (amountFloki).mul(magnitude) / totalSupply()\\n            );\\n            emit DividendsDistributed(msg.sender, amountFloki);\\n            totalDividendsDistributedFloki = totalDividendsDistributedFloki.add(\\n                amountFloki\\n            );\\n        }\\n\\n        if (amountMeme3 > 0) {\\n            MagnifiedDividendPerShareMeme3 = MagnifiedDividendPerShareMeme3.add(\\n                (amountMeme3).mul(magnitude) / totalSupply()\\n            );\\n            emit DividendsDistributed(msg.sender, amountMeme3);\\n            totalDividendsDistributedMeme3 = totalDividendsDistributedMeme3.add(\\n                amountMeme3\\n            );\\n        }\\n\\n        if (amountLP > 0) {\\n            MagnifiedDividendPerShareLP = MagnifiedDividendPerShareLP.add(\\n                (amountLP).mul(magnitude) / totalSupply()\\n            );\\n            emit DividendsDistributed(msg.sender, amountLP);\\n            totalDividendsDistributedLP = totalDividendsDistributedLP.add(\\n                amountLP\\n            );\\n        }\\n    }\\n\\n    /// @notice Withdraws the ether distributed to the sender.\\n    /// @dev It emits a `DividendWithdrawn` event if the amount of withdrawn ether is greater than 0.\\n    function withdrawDividend() public // virtual override\\n    {\\n        _withdrawDividendOfUser(msg.sender);\\n        _withdrawLpDividendsOfUser(msg.sender);\\n    }\\n\\n    /// @notice Withdraws the ether distributed to the sender.\\n    /// @dev It emits a `DividendWithdrawn` event if the amount of withdrawn ether is greater than 0.\\n    function _withdrawDividendOfUser(address user)\\n        internal\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256\\n        )\\n    {\\n        uint256 withdrawableShib;\\n        uint256 withdrawableFloki;\\n        uint256 withdrawableMeme3;\\n\\n        (\\n            uint256 _withdrawableDividendShib,\\n            uint256 _withdrawableDividendFloki,\\n            uint256 _withdrawableDividendMeme3,\\n\\n        ) = withdrawableDividendOf(user);\\n        if (_withdrawableDividendShib > 0) {\\n            withdrawnDividendsShib[user] = withdrawnDividendsShib[user].add(\\n                _withdrawableDividendShib\\n            );\\n            totalDividendsWithdrawnShib += _withdrawableDividendShib;\\n            emit DividendWithdrawn(user, _withdrawableDividendShib);\\n            bool success = IERC20(shib).transfer(\\n                user,\\n                _withdrawableDividendShib\\n            );\\n\\n            if (!success) {\\n                withdrawnDividendsShib[user] = withdrawnDividendsShib[user]\\n                    .sub(_withdrawableDividendShib);\\n                totalDividendsWithdrawnShib -= _withdrawableDividendShib;\\n            } else {\\n                withdrawableShib = _withdrawableDividendShib;\\n            }\\n        }\\n\\n        if (_withdrawableDividendFloki > 0) {\\n            withdrawnDividendsFloki[user] = withdrawnDividendsFloki[user].add(\\n                _withdrawableDividendFloki\\n            );\\n            totalDividendsWithdrawnFloki += _withdrawableDividendFloki;\\n            emit DividendWithdrawn(user, _withdrawableDividendFloki);\\n            bool success = IERC20(floki).transfer(\\n                user,\\n                _withdrawableDividendFloki\\n            );\\n\\n            if (!success) {\\n                withdrawnDividendsFloki[user] = withdrawnDividendsFloki[user].sub(\\n                    _withdrawableDividendFloki\\n                );\\n                totalDividendsWithdrawnFloki -= _withdrawableDividendFloki;\\n            } else {\\n                withdrawableFloki = _withdrawableDividendFloki;\\n            }\\n        }\\n        if (_withdrawableDividendMeme3 > 0) {\\n            withdrawnDividendsMeme3[user] = withdrawnDividendsMeme3[user].add(\\n                _withdrawableDividendMeme3\\n            );\\n            totalDividendsWithdrawnMeme3 += _withdrawableDividendMeme3;\\n            emit DividendWithdrawn(user, _withdrawableDividendMeme3);\\n            bool success = IERC20(meme3Token).transfer(\\n                user,\\n                _withdrawableDividendMeme3\\n            );\\n\\n            if (!success) {\\n                withdrawnDividendsMeme3[user] = withdrawnDividendsMeme3[user].sub(\\n                    _withdrawableDividendMeme3\\n                );\\n                totalDividendsWithdrawnMeme3 -= _withdrawableDividendMeme3;\\n            } else {\\n                withdrawableMeme3 = _withdrawableDividendMeme3;\\n            }\\n        }\\n\\n        return (withdrawableShib, withdrawableFloki, withdrawableMeme3);\\n    }\\n\\n    function _withdrawLpDividendsOfUser(address user)\\n        internal\\n        returns (uint256)\\n    {\\n        uint256 withdrawableLP;\\n\\n        (, , , uint256 _withdrawableDividendLP) = withdrawableDividendOf(user);\\n        if (_withdrawableDividendLP > 0) {\\n            withdrawnDividendsLP[user] = withdrawnDividendsLP[user].add(\\n                _withdrawableDividendLP\\n            );\\n            totalDividendsWithdrawnLP += _withdrawableDividendLP;\\n            emit DividendWithdrawn(user, _withdrawableDividendLP);\\n            bool success = IERC20(lpToken).transfer(\\n                user,\\n                _withdrawableDividendLP\\n            );\\n\\n            if (!success) {\\n                withdrawnDividendsLP[user] = withdrawnDividendsLP[user].sub(\\n                    _withdrawableDividendLP\\n                );\\n                totalDividendsWithdrawnLP -= _withdrawableDividendLP;\\n            } else {\\n                withdrawableLP = _withdrawableDividendLP;\\n            }\\n        }\\n        return withdrawableLP;\\n    }\\n\\n    /// @notice View the amount of dividend in wei that an address can withdraw.\\n    /// @param _owner The address of a token holder.\\n    /// @return The amount of dividend in wei that `_owner` can withdraw.\\n    function dividendOf(address _owner)\\n        public\\n        view\\n        override\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256\\n        )\\n    {\\n        return withdrawableDividendOf(_owner);\\n    }\\n\\n    /// @notice View the amount of dividend in wei that an address can withdraw.\\n    /// @param _owner The address of a token holder.\\n    /// @return The amount of dividend in wei that `_owner` can withdraw.\\n    function withdrawableDividendOf(address _owner)\\n        public\\n        view\\n        override\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256\\n        )\\n    {\\n        (\\n            uint256 dividendOfShib,\\n            uint256 dividendOfFloki,\\n            uint256 dividendOfMeme3,\\n            uint256 dividendOfLP\\n        ) = accumulativeDividendOf(_owner);\\n        return (\\n            dividendOfShib.sub(withdrawnDividendsShib[_owner]),\\n            dividendOfFloki.sub(withdrawnDividendsFloki[_owner]),\\n            dividendOfMeme3.sub(withdrawnDividendsMeme3[_owner]),\\n            dividendOfLP.sub(withdrawnDividendsLP[_owner])\\n        );\\n    }\\n\\n    /// @notice View the amount of dividend in wei that an address has withdrawn.\\n    /// @param _owner The address of a token holder.\\n    /// @return The amount of dividend in wei that `_owner` has withdrawn.\\n    function withdrawnDividendOf(address _owner)\\n        public\\n        view\\n        override\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256\\n        )\\n    {\\n        return (\\n            withdrawnDividendsShib[_owner],\\n            withdrawnDividendsFloki[_owner],\\n            withdrawnDividendsMeme3[_owner],\\n            withdrawnDividendsLP[_owner]\\n        );\\n    }\\n\\n    /// @notice View the amount of dividend in wei that an address has earned in total.\\n    /// @dev accumulativeDividendOf(_owner) = withdrawableDividendOf(_owner) + withdrawnDividendOf(_owner)\\n    /// = (magnifiedDividendPerShare * balanceOf(_owner) + magnifiedDividendCorrections[_owner]) / magnitude\\n    /// @param _owner The address of a token holder.\\n    /// @return The amount of dividend in wei that `_owner` has earned in total.\\n    function accumulativeDividendOf(address _owner)\\n        public\\n        view\\n        override\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256\\n        )\\n    {\\n        uint256 shibShare = MagnifiedDividendPerShareShib\\n            .mul(balanceOf(_owner))\\n            .toInt256Safe()\\n            .add(magnifiedDividendCorrectionsShib[_owner])\\n            .toUint256Safe() / magnitude;\\n        uint256 flokiShare = MagnifiedDividendPerShareFloki\\n            .mul(balanceOf(_owner))\\n            .toInt256Safe()\\n            .add(magnifiedDividendCorrectionsFloki[_owner])\\n            .toUint256Safe() / magnitude;\\n\\n        uint256 meme3Share = MagnifiedDividendPerShareMeme3\\n            .mul(balanceOf(_owner))\\n            .toInt256Safe()\\n            .add(magnifiedDividendCorrectionsMeme3[_owner])\\n            .toUint256Safe() / magnitude;\\n        uint256 lpShare = MagnifiedDividendPerShareLP\\n            .mul(balanceOf(_owner))\\n            .toInt256Safe()\\n            .add(magnifiedDividendCorrectionsLP[_owner])\\n            .toUint256Safe() / magnitude;\\n        return (shibShare, flokiShare, meme3Share, lpShare);\\n    }\\n\\n    /// @dev Internal function that transfer tokens from one address to another.\\n    /// Update magnifiedDividendCorrections to keep dividends unchanged.\\n    /// @param from The address to transfer from.\\n    /// @param to The address to transfer to.\\n    /// @param value The amount to be transferred.\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal virtual override {\\n        require(false);\\n\\n        int256 _magCorrection = MagnifiedDividendPerShareShib\\n            .mul(value)\\n            .toInt256Safe();\\n        magnifiedDividendCorrectionsShib[\\n            from\\n        ] = magnifiedDividendCorrectionsShib[from].add(_magCorrection);\\n        magnifiedDividendCorrectionsShib[\\n            to\\n        ] = magnifiedDividendCorrectionsShib[to].sub(_magCorrection);\\n\\n        int256 _magCorrectionToken = MagnifiedDividendPerShareFloki\\n            .mul(value)\\n            .toInt256Safe();\\n        magnifiedDividendCorrectionsFloki[\\n            from\\n        ] = magnifiedDividendCorrectionsFloki[from].add(_magCorrectionToken);\\n        magnifiedDividendCorrectionsFloki[to] = magnifiedDividendCorrectionsFloki[\\n            to\\n        ].sub(_magCorrectionToken);\\n    }\\n\\n    /// @dev Internal function that mints tokens to an account.\\n    /// Update magnifiedDividendCorrections to keep dividends unchanged.\\n    /// @param account The account that will receive the created tokens.\\n    /// @param value The amount that will be created.\\n    function _mint(address account, uint256 value) internal override {\\n        super._mint(account, value);\\n\\n        magnifiedDividendCorrectionsShib[\\n            account\\n        ] = magnifiedDividendCorrectionsShib[account].sub(\\n            (MagnifiedDividendPerShareShib.mul(value)).toInt256Safe()\\n        );\\n\\n        magnifiedDividendCorrectionsFloki[\\n            account\\n        ] = magnifiedDividendCorrectionsFloki[account].sub(\\n            (MagnifiedDividendPerShareFloki.mul(value)).toInt256Safe()\\n        );\\n    }\\n\\n    /// @dev Internal function that burns an amount of the token of a given account.\\n    /// Update magnifiedDividendCorrections to keep dividends unchanged.\\n    /// @param account The account whose tokens will be burnt.\\n    /// @param value The amount that will be burnt.\\n    function _burn(address account, uint256 value) internal override {\\n        super._burn(account, value);\\n\\n        magnifiedDividendCorrectionsShib[\\n            account\\n        ] = magnifiedDividendCorrectionsShib[account].add(\\n            (MagnifiedDividendPerShareShib.mul(value)).toInt256Safe()\\n        );\\n\\n        magnifiedDividendCorrectionsFloki[\\n            account\\n        ] = magnifiedDividendCorrectionsFloki[account].add(\\n            (MagnifiedDividendPerShareFloki.mul(value)).toInt256Safe()\\n        );\\n    }\\n\\n    function _setBalance(address account, uint256 newBalance) internal {\\n        uint256 currentBalance = balanceOf(account);\\n\\n        if (newBalance > currentBalance) {\\n            uint256 mintAmount = newBalance.sub(currentBalance);\\n            _mint(account, mintAmount);\\n        } else if (newBalance < currentBalance) {\\n            uint256 burnAmount = currentBalance.sub(newBalance);\\n            _burn(account, burnAmount);\\n        }\\n    }\\n\\n    function updateTokenAddress(address newAddress) public onlyOwner {\\n        meme3Token = newAddress;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"paris\",\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isExcluded\",\"type\":\"bool\"}],\"name\":\"ExcludeFromFees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isExcluded\",\"type\":\"bool\"}],\"name\":\"ExcludeMultipleAccountsFromFees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"oldValue\",\"type\":\"uint256\"}],\"name\":\"GasForProcessingUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"iterations\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"claims\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lastProcessedIndex\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"automatic\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gas\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"processor\",\"type\":\"address\"}],\"name\":\"ProcessedDividendTracker\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensSwapped\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"SendDividends\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"SetAutomatedMarketMakerPair\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ManualFlokiDividendDistribution\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ManualLPDividendDistribution\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ManualShibDividendDistribution\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ManualThirdMemeDividendDistribution\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERIOD_DURATION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"automatedMarketMakerPairs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimDividend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"dividendTokenBalanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dividendTracker\",\"outputs\":[{\"internalType\":\"contract DividendTracker\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"excludeFromDividends\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"excluded\",\"type\":\"bool\"}],\"name\":\"excludeFromFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"excluded\",\"type\":\"bool\"}],\"name\":\"excludeFromMaxWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"forceSend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getAccountInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentInterval\",\"outputs\":[{\"internalType\":\"enum FOM.Interval\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalDividendsDistributed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromFees\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxBuyAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSellAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxWallet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"rescueETH20Tokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"contract IUniswapRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newPair\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setAutomatedMarketMakerPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_dev\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_memes\",\"type\":\"uint256\"}],\"name\":\"setBuyTaxes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"setClaimEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newWallet\",\"type\":\"address\"}],\"name\":\"setDevWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_dev\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_memes\",\"type\":\"uint256\"}],\"name\":\"setSellTaxes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"setSwapEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setSwapTokensAtAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapTokensAtAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokensArray\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalBuyTax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSellTax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"trackerRescueETH20Tokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"updateAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newRouter\",\"type\":\"address\"}],\"name\":\"updateRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"updateShibDividendTracker\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"withdrawableDividendOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "FOM", "CompilerVersion": "v0.8.20+commit.a1b79de6", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "paris", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}