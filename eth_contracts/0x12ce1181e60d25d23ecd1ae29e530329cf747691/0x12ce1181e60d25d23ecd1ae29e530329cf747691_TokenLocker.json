{"SourceCode": "// SPDX-License-Identifier: none\r\n\r\npragma solidity 0.6.12;\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval( address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract TokenLocker is Context {\r\n    struct LockStruct {\r\n        IERC20 token;\r\n        address beneficiary;\r\n        uint256 amount;\r\n        uint256 releaseTimestamp;\r\n        bool isActive;\r\n    }\r\n\r\n    mapping (address => uint256[]) private beneficiaryIDs;\r\n\r\n    LockStruct[] private locker;\r\n\r\n    /**\r\n     * @dev Get Lock Info by ID.\r\n     */\r\n    function getLockInfo(uint256 lockID) public view returns (IERC20 token, address beneficiary, uint256 amount, uint256 releaseTimestamp, bool isActive) { \r\n        return (locker[lockID].token, locker[lockID].beneficiary, locker[lockID].amount, locker[lockID].releaseTimestamp, locker[lockID].isActive);\r\n    }\r\n\r\n    function getIDByBeneficiary(address beneficiary, uint256 number) public view returns (uint256) {\r\n        return beneficiaryIDs[beneficiary][number];\r\n    }\r\n\r\n    function lockToken (IERC20 token, address beneficiary, uint256 amount, uint256 releaseTimestamp) public {\r\n        require(releaseTimestamp > block.timestamp, \"TokenTimelock: release time is before current time\");\r\n\r\n        LockStruct memory newLock = LockStruct({\r\n            token: token,\r\n            beneficiary: beneficiary,\r\n            amount: amount,\r\n            releaseTimestamp: releaseTimestamp,\r\n            isActive: true\r\n        });\r\n        locker.push(newLock);\r\n\r\n        beneficiaryIDs[beneficiary].push(locker.length - 1);\r\n\r\n        token.transferFrom(beneficiary, address(this), amount);\r\n    }\r\n\r\n    function extendLock(uint256 lockID, uint256 releaseTimestamp) public virtual {\r\n        require(_msgSender() == locker[lockID].beneficiary, \"TokenTimelock: release time is before current lock.\");\r\n        require(releaseTimestamp > locker[lockID].releaseTimestamp, \"TokenTimelock: release time is before current lock.\");\r\n\r\n        locker[lockID].releaseTimestamp = releaseTimestamp;\r\n    }\r\n\r\n    function increaseLockAmount(uint256 lockID, uint256 addAmount) public virtual {\r\n        require(_msgSender() == locker[lockID].beneficiary, \"TokenTimelock: release time is before current lock.\");\r\n        require(locker[lockID].isActive, \"TokenTimelock: lock ID is inactive.\");\r\n\r\n        locker[lockID].amount = locker[lockID].amount + addAmount;\r\n\r\n        locker[lockID].token.transferFrom(_msgSender(), address(this), addAmount);\r\n    }\r\n\r\n    /**\r\n     * @notice Transfers tokens held by timelock to beneficiary.\r\n     */\r\n    function release(uint256 lockID) public virtual {\r\n        require(_msgSender() == locker[lockID].beneficiary, \"TokenTimelock: release time is before current lock.\");\r\n        require(block.timestamp >= locker[lockID].releaseTimestamp, \"TokenTimelock: current time is before release time.\");\r\n        require(locker[lockID].amount > 0, \"TokenTimelock: no tokens to release\");\r\n\r\n        locker[lockID].token.transfer(locker[lockID].beneficiary, locker[lockID].amount);\r\n\r\n        locker[lockID].amount = 0;\r\n        locker[lockID].isActive = false;\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lockID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"releaseTimestamp\",\"type\":\"uint256\"}],\"name\":\"extendLock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"number\",\"type\":\"uint256\"}],\"name\":\"getIDByBeneficiary\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lockID\",\"type\":\"uint256\"}],\"name\":\"getLockInfo\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"releaseTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lockID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"addAmount\",\"type\":\"uint256\"}],\"name\":\"increaseLockAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"releaseTimestamp\",\"type\":\"uint256\"}],\"name\":\"lockToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lockID\",\"type\":\"uint256\"}],\"name\":\"release\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "TokenLocker", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://96f549e6e92efebc60f140b1d2531946f4a26f992201dc83effb65fd8633cb0c"}