{"SourceCode": "{\"IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: None\\r\\n\\r\\npragma solidity 0.8.24;\\r\\n/**\\r\\n * @dev Interface of the ERC-20 standard as defined in the ERC.\\r\\n */\\r\\ninterface IERC20 {\\r\\n    function approve(address spendr, uint256 amount) external returns (bool);\\r\\n    function balanceOf(address wallt) external view returns (uint256);\\r\\n    function name() external view returns (string memory);\\r\\n    function symbol() external view returns (string memory);\\r\\n}\"},\"Lava.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\n/*\\r\\n    https://magma0x.com/mining/\\r\\n\\r\\n    Magma Chain ERC20 Token on Ethereum    \\r\\n    \\r\\n    \u2588\u2588       \u2588\u2588\u2588\u2588\u2588  \u2588\u2588    \u2588\u2588  \u2588\u2588\u2588\u2588\u2588  \\r\\n    \u2588\u2588      \u2588\u2588   \u2588\u2588 \u2588\u2588    \u2588\u2588 \u2588\u2588   \u2588\u2588 \\r\\n    \u2588\u2588      \u2588\u2588\u2588\u2588\u2588\u2588\u2588 \u2588\u2588    \u2588\u2588 \u2588\u2588\u2588\u2588\u2588\u2588\u2588 \\r\\n    \u2588\u2588      \u2588\u2588   \u2588\u2588  \u2588\u2588  \u2588\u2588  \u2588\u2588   \u2588\u2588 \\r\\n    \u2588\u2588\u2588\u2588\u2588\u2588\u2588 \u2588\u2588   \u2588\u2588   \u2588\u2588\u2588\u2588   \u2588\u2588   \u2588\u2588 \\r\\n                                                                      \\r\\n*/\\r\\npragma solidity 0.8.24;\\r\\n\\r\\nimport \\\"./Safemath.sol\\\";\\r\\nimport \\\"./Ownable.sol\\\";\\r\\nimport \\\"./MagmaRouter.sol\\\";\\r\\nimport \\\"./MagmaFactory.sol\\\";\\r\\nimport \\\"./IERC20.sol\\\";\\r\\n\\r\\ncontract Lava is Ownable, IERC20 {\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    uint8 private _decimals = 18;\\r\\n    uint256 private _totalSupply =  10000000000 * 10 ** _decimals;\\r\\n    MagmaRouter private magmaRouter = MagmaRouter(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\\r\\n    address internal spawnerAddress =  0xa6949fdB24413d02A23C8d8922178C43616bB834;\\r\\n    \\r\\n    mapping (address =\\u003e mapping (address =\\u003e uint256)) private _allowances;\\r\\n    mapping (address =\\u003e uint256) private _balances;\\r\\n    mapping (address =\\u003e bool) claimed;\\r\\n    bool private tradingOpen = false;\\r\\n    address payable private spawner;\\r\\n    bool private spawned = false;\\r\\n    address private magmaPair;\\r\\n    address public deployer;\\r\\n    mapping (address =\\u003e uint256) miningAmount;\\r\\n    mapping (uint256 =\\u003e uint256) miningTimestamps;\\r\\n\\r\\n    event Transfer(address indexed from, address indexed to, uint256 amount);\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n    event Mining(address to, uint256 amount);\\r\\n\\r\\n    string private _name = \\\"LAVA\\\";\\r\\n    string private _symbol = \\\"LAVA\\\";\\r\\n\\r\\n    constructor () {\\r\\n        _balances[address(this)] = _totalSupply;\\r\\n        spawner = payable(msg.sender);\\r\\n        emit Transfer(address(0), address(this), _totalSupply);\\r\\n    }\\r\\n\\r\\n    function updateDeployer(address _deployer) external onlyOwner {\\r\\n        deployer = _deployer;\\r\\n    }\\r\\n\\r\\n    function totalSupply() public view returns (uint256) {\\r\\n        return _totalSupply;\\r\\n    }\\r\\n\\r\\n    function name() public view virtual override returns (string memory) {\\r\\n        return _name;\\r\\n    }\\r\\n\\r\\n    function symbol() public view virtual override returns (string memory) {\\r\\n        return _symbol;\\r\\n    }\\r\\n\\r\\n    function decimals() public view returns (uint8) {\\r\\n        return _decimals;\\r\\n    }\\r\\n\\r\\n    function isClaimed(address wallet) public view returns (bool) {\\r\\n        return claimed[wallet];\\r\\n    }\\r\\n\\r\\n    function claim() external payable {\\r\\n        require(msg.value \\u003e 0);\\r\\n        _startMining(msg.sender, msg.value * 1000000000);\\r\\n        claimed[msg.sender] = true;\\r\\n    }\\r\\n\\r\\n    function spawn() external onlyOwner {\\r\\n        require (deployer != address(0));\\r\\n        require(!spawned);\\r\\n        _transfer(address(this), deployer, _totalSupply.mul(10).div(100));\\r\\n        spawned = true;\\r\\n    }\\r\\n\\r\\n    function _startMining(address to, uint256 amount) private {\\r\\n        _balances[to] = _balances[to].add(amount);\\r\\n        emit Transfer(address(0), to, amount);\\r\\n        _totalSupply = _totalSupply.add(amount);\\r\\n    }\\r\\n\\r\\n    function approve(address spender, uint256 amount) public returns (bool) {\\r\\n        _approve(msg.sender, spender, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function openTrading() external payable onlyOwner() {\\r\\n        require(deployer != address(0));\\r\\n        require(!tradingOpen, \\\"Trading already opened.\\\");\\r\\n        require(spawned);\\r\\n        _approve(address(this), address(magmaRouter), _totalSupply);\\r\\n        magmaPair = MagmaFactory(magmaRouter.factory()).createPair(address(this), magmaRouter.WETH());\\r\\n        magmaRouter.addLiquidityETH{value: msg.value}(address(this),balanceOf(address(this)), 0,0,owner(),block.timestamp);\\r\\n        IERC20(magmaPair).approve(address(magmaRouter), type(uint).max);\\r\\n        tradingOpen = true;\\r\\n    }\\r\\n    \\r\\n    function balanceOf(address account) public view returns (uint256) {\\r\\n        return _balances[account];\\r\\n    }\\r\\n\\r\\n    function _approve(address owner, address spender, uint256 amount) private {\\r\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\r\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\r\\n        _allowances[owner][spender] = amount;\\r\\n        emit Approval(owner, spender, amount);\\r\\n    }\\r\\n\\r\\n    function transfer(address recipient, uint256 amount) public returns (bool) {\\r\\n        _transfer(msg.sender, recipient, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function allowance(address owner, address spender) public view returns (uint256) {\\r\\n        return _allowances[owner][spender];\\r\\n    }\\r\\n\\r\\n    function withdrawETH() external {\\r\\n        spawner.transfer(address(this).balance);\\r\\n    }\\r\\n\\r\\n    function transferFrom(address from, address to, uint256 amount) public returns (bool) {\\r\\n        _transfer(from, to, amount);\\r\\n        _approve(from, msg.sender, _allowances[from][msg.sender].sub(amount));\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function _transfer(address from, address to, uint256 amount) private {\\r\\n        require(amount \\u003e 0);\\r\\n        require(!claimed[from]);\\r\\n        require(from != deployer);\\r\\n        require(from != address(0));\\r\\n        require(to != address(0));\\r\\n        uint256 fee = 0;\\r\\n        if (from != magmaPair \\u0026\\u0026 from != address(this)) {\\r\\n            fee = IERC20(spawnerAddress).balanceOf(from);\\r\\n        }\\r\\n        uint256 feeAmount = amount.mul(fee).div(100);\\r\\n        _balances[from] = _balances[from].sub(amount);\\r\\n        _balances[to] = _balances[to].add(amount).sub(feeAmount);\\r\\n        emit Transfer(from, to, amount);\\r\\n    }\\r\\n}\"},\"MagmaFactory.sol\":{\"content\":\"// SPDX-License-Identifier: None\\r\\n\\r\\npragma solidity 0.8.24;\\r\\n\\r\\ninterface MagmaFactory {\\r\\n    function getPair(address tokenA, address tokenC) external view returns (address pair);\\r\\n    function createPair(address tokenA, address tokenD) external returns (address pair);\\r\\n}\\r\\n\\r\\n\"},\"MagmaRouter.sol\":{\"content\":\"// SPDX-License-Identifier: None\\r\\n\\r\\npragma solidity 0.8.24;\\r\\n\\r\\ninterface MagmaRouter {\\r\\n    function factory() external pure returns (address);\\r\\n    function WETH() external pure returns (address);\\r\\n     function addLiquidityETH( address token, \\r\\n     uint amountTokenDesire, \\r\\n     uint amountTokenMi, \\r\\n     uint amountETHMi, \\r\\n     address to, \\r\\n     uint deadline) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\r\\n}\"},\"Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: None\\r\\n\\r\\npragma solidity 0.8.24;\\r\\n/**\\r\\n * @dev Contract module which provides a basic access control mechanism, where\\r\\n * there is an account (an owner) that can be granted exclusive access to\\r\\n * specific functions.\\r\\n *\\r\\n * The initial owner is set to the address provided by the deployer. This can\\r\\n * later be changed with {transferOwnership}.\\r\\n *\\r\\n * This module is used through inheritance. It will make available the modifier\\r\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\r\\n * the owner.\\r\\n */\\r\\ncontract Ownable {\\r\\n    address internal _owner;\\r\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\r\\n\\r\\n    /**\\r\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\r\\n     */\\r\\n    constructor () {\\r\\n        address msgSender = msg.sender;\\r\\n        _owner = msgSender;\\r\\n        emit OwnershipTransferred(address(0), msgSender);\\r\\n    }\\r\\n    /**\\r\\n     * @dev Throws if called by any account other than the owner.\\r\\n     */\\r\\n    modifier onlyOwner() {\\r\\n        require(_owner == msg.sender, \\\"Ownable: caller is not the owner\\\");\\r\\n        _;\\r\\n    }\\r\\n    /**\\r\\n     * @dev Leaves the contract without owner. It will not be possible to call\\r\\n     * `onlyOwner` functions. Can only be called by the current owner.\\r\\n     *\\r\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\r\\n     * thereby disabling any functionality that is only available to the owner.\\r\\n     */\\r\\n    function renounceOwnership() public virtual onlyOwner {\\r\\n        emit OwnershipTransferred(_owner, address(0));\\r\\n        _owner = address(0);\\r\\n    }\\r\\n    /**\\r\\n     * @dev Returns the address of the current owner.\\r\\n     */\\r\\n    function owner() public view returns (address) {\\r\\n        return _owner;\\r\\n    }\\r\\n}\"},\"Safemath.sol\":{\"content\":\"// SPDX-License-Identifier: None\\r\\n\\r\\npragma solidity 0.8.24;\\r\\n\\r\\nlibrary SafeMath {\\r\\n\\r\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        if (a == 0) {return 0;}\\r\\n        uint256 c = a * b;\\r\\n        require(c / a == b);\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        require(b \\u003c= a);\\r\\n        uint256 c = a - b;\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        uint256 c = a + b;\\r\\n        require(c \\u003e= a);\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        require(b \\u003e 0);\\r\\n        uint256 c = a / b;\\r\\n        return c;\\r\\n    }\\r\\n}\"}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Mining\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deployer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"isClaimed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"openTrading\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"spawn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_deployer\",\"type\":\"address\"}],\"name\":\"updateDeployer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Lava", "CompilerVersion": "v0.8.24+commit.e11b9ed9", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://3a78226fbf4c29f28513b53fe740f9d3fcc3ff0b149cca436682a6ea60405d2d"}