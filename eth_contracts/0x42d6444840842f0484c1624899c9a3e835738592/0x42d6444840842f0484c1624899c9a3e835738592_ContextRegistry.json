{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"settings\": {\r\n    \"evmVersion\": \"paris\",\r\n    \"libraries\": {},\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"none\",\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 800\r\n    },\r\n    \"remappings\": [],\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  },\r\n  \"sources\": {\r\n    \"contracts/ContextRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.18;\\n\\nimport { IContextRegistry } from \\\"./interfaces/IContextRegistry.sol\\\";\\n\\n/// @notice ContextRegistry is a contract that allows the registration of contexts.\\n/// Contexts are strings that represent a specific context for credentials. They\\n/// are ownerless and can be registered and used by anyone.\\ncontract ContextRegistry is IContextRegistry {\\n    error AlreadyExists();\\n\\n    // The global mapping between contexts and their contextID.\\n    mapping(uint160 contextId => string context) private _registry;\\n\\n    /// @dev register a new context\\n    function registerContext(string calldata context) external override returns (uint160) {\\n        uint160 contextID = _getContextID(context);\\n        if (bytes(_registry[contextID]).length != 0) {\\n            revert AlreadyExists();\\n        }\\n        _registry[contextID] = context;\\n        emit ContextRegistered(contextID, context);\\n        return contextID;\\n    }\\n\\n    /// @dev get the context for the given contextID\\n    function getContext(uint160 contextId) external view override returns (string memory) {\\n        return _registry[contextId];\\n    }\\n\\n    /// @dev calculate the contextID for a given context string\\n    function calculateContextID(string calldata context) external pure override returns (uint160) {\\n        return _getContextID(context);\\n    }\\n\\n    /**\\n     * ContextID is the lower 160 bits of the keccak256 hash of the context string.\\n     * @param context The context string to get the contextID for.\\n     */\\n    function _getContextID(string calldata context) private pure returns (uint160) {\\n        return uint160(uint256(keccak256(abi.encodePacked(context))));\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IContextRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.18;\\n\\n/// @title Context Registry Interface\\ninterface IContextRegistry {\\n    // Events\\n    event ContextRegistered(uint160 indexed contextId, string context);\\n\\n    /// @dev registerContext registers a new context and returns the contextId\\n    function registerContext(string calldata context) external returns (uint160);\\n\\n    /// @dev getContext returns the context for the given contextId\\n    function getContext(uint160 contextId) external returns (string memory);\\n\\n    /// @dev calculate the contextID for a given context string\\n    function calculateContextID(string calldata context) external pure returns (uint160);\\n}\\n\"\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"name\":\"AlreadyExists\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint160\",\"name\":\"contextId\",\"type\":\"uint160\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"context\",\"type\":\"string\"}],\"name\":\"ContextRegistered\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"context\",\"type\":\"string\"}],\"name\":\"calculateContextID\",\"outputs\":[{\"internalType\":\"uint160\",\"name\":\"\",\"type\":\"uint160\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint160\",\"name\":\"contextId\",\"type\":\"uint160\"}],\"name\":\"getContext\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"context\",\"type\":\"string\"}],\"name\":\"registerContext\",\"outputs\":[{\"internalType\":\"uint160\",\"name\":\"\",\"type\":\"uint160\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "ContextRegistry", "CompilerVersion": "v0.8.23+commit.f704f362", "OptimizationUsed": "1", "Runs": "800", "ConstructorArguments": "", "EVMVersion": "paris", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}