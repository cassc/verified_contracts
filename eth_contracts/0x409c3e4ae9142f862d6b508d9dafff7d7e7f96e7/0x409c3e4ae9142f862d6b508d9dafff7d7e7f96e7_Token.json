{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"settings\": {\r\n    \"evmVersion\": \"paris\",\r\n    \"libraries\": {},\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1000000\r\n    },\r\n    \"remappings\": [],\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  },\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address from, address to, uint256 amount) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol\": {\r\n      \"content\": \"pragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Factory {\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\\n\\n    function feeTo() external view returns (address);\\n    function feeToSetter() external view returns (address);\\n\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\n    function allPairs(uint) external view returns (address pair);\\n    function allPairsLength() external view returns (uint);\\n\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\n\\n    function setFeeTo(address) external;\\n    function setFeeToSetter(address) external;\\n}\\n\"\r\n    },\r\n    \"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol\": {\r\n      \"content\": \"pragma solidity >=0.6.2;\\n\\ninterface IUniswapV2Router01 {\\n    function factory() external pure returns (address);\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETH(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountToken, uint amountETH);\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountToken, uint amountETH);\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapTokensForExactTokens(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\n}\\n\"\r\n    },\r\n    \"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\": {\r\n      \"content\": \"pragma solidity >=0.6.2;\\n\\nimport './IUniswapV2Router01.sol';\\n\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountETH);\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountETH);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable;\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@uniswap/v2-periphery/contracts/interfaces/IWETH.sol\": {\r\n      \"content\": \"pragma solidity >=0.5.0;\\n\\ninterface IWETH {\\n    function deposit() external payable;\\n    function transfer(address to, uint value) external returns (bool);\\n    function withdraw(uint) external;\\n}\\n\"\r\n    },\r\n    \"src/Kong/Interfaces.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\\ninterface ITreasury {\\n\\tfunction mint(address to_, uint256 amount_) external;\\n\\n\\tfunction TOKEN() external view returns (address);\\n\\n\\tfunction excessReserves() external view returns (uint256);\\n}\\n\\ninterface IDistributor {\\n\\tfunction distribute() external;\\n\\n\\tfunction nextRewardAt(uint256 _rate) external view returns (uint256);\\n\\n\\tfunction nextReward() external view returns (uint256);\\n}\\n\\ninterface IStaking {\\n\\tfunction stake(address _to, uint256 _amount) external;\\n\\n\\tfunction unstake(address _to, uint256 _amount, bool _rebase) external;\\n\\n\\tfunction rebase() external;\\n\\n\\tfunction index() external view returns (uint256);\\n}\\n\\ninterface ITOKEN is IERC20Metadata {\\n\\tfunction mint(address to_, uint256 amount_) external;\\n\\n\\tfunction burnFrom(address account_, uint256 amount_) external;\\n\\n\\tfunction burn(uint256 amount_) external;\\n\\n\\tfunction uniswapV2Pair() external view returns (address);\\n}\\n\\ninterface IsStakingProtocol is IERC20 {\\n\\tfunction rebase(uint256 amount_, uint epoch_) external returns (uint256);\\n\\n\\tfunction circulatingSupply() external view returns (uint256);\\n\\n\\tfunction gonsForBalance(uint amount) external view returns (uint);\\n\\n\\tfunction balanceForGons(uint gons) external view returns (uint);\\n\\n\\tfunction index() external view returns (uint);\\n}\\n\"\r\n    },\r\n    \"src/Kong/Token.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\npragma experimental ABIEncoderV2;\\n\\n/*\\n\\n\\n\\n(Website) https://xxx.xxx\\n(Telegram) https://t.me/xxx\\n(Twitter) https://twitter.com/xxx\\n\\n*/\\n\\nimport \\\"./Interfaces.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol\\\";\\nimport \\\"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\\\";\\nimport \\\"@uniswap/v2-periphery/contracts/interfaces/IWETH.sol\\\";\\n\\ncontract Token is ERC20, Ownable {\\n\\t/// STATE VARIABLES ///\\n\\n\\t/// @notice Address of UniswapV2Router\\n\\tIUniswapV2Router02 public immutable uniswapV2Router;\\n\\t/// @notice Address of /ETH LP - cannot be immutable as we only want to define it when enabling trading.\\n\\taddress public uniswapV2Pair;\\n\\t/// @notice Burn address\\n\\taddress public constant deadAddress = address(0xdead);\\n\\t/// @notice  treasury\\n\\taddress public treasury;\\n\\t/// @notice Team wallet address\\n\\taddress public teamWallet;\\n\\n\\tbool private swapping;\\n\\n\\t/// @notice Bool if trading is active\\n\\tbool public tradingActive = false;\\n\\t/// @notice Bool if swap is enabled\\n\\tbool public swapEnabled = false;\\n\\t/// @notice Bool if limits are in effect\\n\\tbool public limitsInEffect = true;\\n\\n\\t/// @notice Current max wallet amount (If limits in effect)\\n\\tuint256 public maxWallet;\\n\\t/// @notice Current max transaction amount (If limits in effect)\\n\\tuint256 public maxTransactionAmount;\\n\\t/// @notice Current percent of supply to swap tokens at (i.e. 5 = 0.05%)\\n\\tuint256 public swapPercent;\\n\\n\\t/// @notice Current buy side total fees\\n\\tuint256 public buyTotalFees;\\n\\t/// @notice Current buy side backing fee\\n\\tuint256 public buyBackingFee;\\n\\t/// @notice Current buy side liquidity fee\\n\\tuint256 public buyLiquidityFee;\\n\\t/// @notice Current buy side team fee\\n\\tuint256 public buyTeamFee;\\n\\n\\t/// @notice Current sell side total fees\\n\\tuint256 public sellTotalFees;\\n\\t/// @notice Current sell side backing fee\\n\\tuint256 public sellBackingFee;\\n\\t/// @notice Current sell side liquidity fee\\n\\tuint256 public sellLiquidityFee;\\n\\t/// @notice Current sell side team fee\\n\\tuint256 public sellTeamFee;\\n\\n\\t/// @notice Current tokens going for backing\\n\\tuint256 public tokensForBacking;\\n\\t/// @notice Current tokens going for liquidity\\n\\tuint256 public tokensForLiquidity;\\n\\t/// @notice Current tokens going for tean\\n\\tuint256 public tokensForTeam;\\n\\n\\t/// MAPPINGS ///\\n\\n\\t/// @dev Bool if address is excluded from fees\\n\\tmapping(address => bool) private _isExcludedFromFees;\\n\\n\\t/// @notice Bool if address is excluded from max transaction amount\\n\\tmapping(address => bool) public _isExcludedMaxTransactionAmount;\\n\\n\\t/// @notice Bool if address is AMM pair\\n\\tmapping(address => bool) public automatedMarketMakerPairs;\\n\\n\\t/// EVENTS ///\\n\\n\\tevent TradingStarted(address indexed pair, uint256 liquidityTokens, uint256 liquidityWeth);\\n\\n\\tevent ExcludeFromFees(address indexed account, bool isExcluded);\\n\\n\\tevent SetAutomatedMarketMakerPair(address indexed pair, bool indexed value);\\n\\n\\tevent teamWalletUpdated(address indexed newWallet, address indexed oldWallet);\\n\\n\\tevent SwapAndLiquify(uint256 tokensSwapped, uint256 ethReceived, uint256 tokensIntoLiquidity);\\n\\n\\t/// CONSTRUCTOR ///\\n\\t/// @param _teamWallet   Address of team wallet\\n\\tconstructor(address _teamWallet) ERC20(\\\"KONG Token\\\", \\\"KONG\\\") {\\n\\t\\taddress _uniAddr;\\n\\t\\tif (block.chainid == 1 || block.chainid == 31337) {\\n\\t\\t\\t_uniAddr = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D; // Ethereum: Uniswap V2\\n\\t\\t} else if (block.chainid == 11155111) {\\n\\t\\t\\t_uniAddr = 0xC532a74256D3Db42D0Bf7a0400fEFDbad7694008; // Ethereum: Uniswap V2\\n\\t\\t} else {\\n\\t\\t\\trevert(\\\"Chain cannot work with Uniswap\\\");\\n\\t\\t}\\n\\n\\t\\tuniswapV2Router = IUniswapV2Router02(_uniAddr);\\n\\n\\t\\tuint256 startingSupply_ = 1_000_000 * 10 ** 9;\\n\\n\\t\\tmaxWallet = 10_000 * 1e9; // 1%\\n\\t\\tmaxTransactionAmount = 10_000 * 1e9; // 1%\\n\\t\\tswapPercent = 10; // 0.10%\\n\\n\\t\\tbuyBackingFee = 3;\\n\\t\\tbuyLiquidityFee = 0;\\n\\t\\tbuyTeamFee = 7;\\n\\t\\tbuyTotalFees = buyBackingFee + buyLiquidityFee + buyTeamFee;\\n\\n\\t\\tsellBackingFee = 10;\\n\\t\\tsellLiquidityFee = 0;\\n\\t\\tsellTeamFee = 25;\\n\\t\\tsellTotalFees = sellBackingFee + sellLiquidityFee + sellTeamFee;\\n\\n\\t\\tteamWallet = _teamWallet; // set as team wallet\\n\\t\\ttreasury = _teamWallet; // until we deploy the treasury\\n\\n\\t\\t// exclude from paying fees or having max transaction amount\\n\\t\\texcludeFromFees(owner(), true);\\n\\t\\texcludeFromFees(teamWallet, true);\\n\\t\\texcludeFromFees(address(this), true);\\n\\t\\texcludeFromFees(address(0xdead), true);\\n\\n\\t\\texcludeFromMaxTransaction(owner(), true);\\n\\t\\texcludeFromMaxTransaction(teamWallet, true);\\n\\t\\texcludeFromMaxTransaction(address(this), true);\\n\\t\\texcludeFromMaxTransaction(address(0xdead), true);\\n\\n\\t\\t_mint(address(this), startingSupply_);\\n\\t\\t_transfer(address(this), msg.sender, (totalSupply() * 10) / 100);\\n\\t}\\n\\n\\treceive() external payable {}\\n\\n\\t/// AMM PAIR ///\\n\\n\\t/// @notice       Sets if address is AMM pair\\n\\t/// @param pair   Address of pair\\n\\t/// @param value  Bool if AMM pair\\n\\tfunction setAutomatedMarketMakerPair(address pair, bool value) public onlyOwner {\\n\\t\\trequire(pair != uniswapV2Pair, \\\"The pair cannot be removed from automatedMarketMakerPairs\\\");\\n\\n\\t\\t_setAutomatedMarketMakerPair(pair, value);\\n\\t}\\n\\n\\t/// @dev Internal function to set `vlaue` of `pair`\\n\\tfunction _setAutomatedMarketMakerPair(address pair, bool value) private {\\n\\t\\tautomatedMarketMakerPairs[pair] = value;\\n\\n\\t\\temit SetAutomatedMarketMakerPair(pair, value);\\n\\t}\\n\\n\\t/// INTERNAL TRANSFER ///\\n\\n\\t/// @dev Internal function to burn `amount` from `account`\\n\\tfunction _burnFrom(address account, uint256 amount) internal {\\n\\t\\tuint256 decreasedAllowance_ = allowance(account, msg.sender) - amount;\\n\\n\\t\\t_approve(account, msg.sender, decreasedAllowance_);\\n\\t\\t_burn(account, amount);\\n\\t}\\n\\n\\t/// @dev Internal function to transfer - handles fee logic\\n\\tfunction _transfer(address from, address to, uint256 amount) internal override {\\n\\t\\trequire(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n\\t\\trequire(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n\\t\\tif (amount == 0) {\\n\\t\\t\\tsuper._transfer(from, to, 0);\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\tif (limitsInEffect) {\\n\\t\\t\\tif (from != owner() && to != owner() && to != address(0) && to != address(0xdead) && !swapping) {\\n\\t\\t\\t\\tif (!tradingActive) {\\n\\t\\t\\t\\t\\trequire(_isExcludedFromFees[from] || _isExcludedFromFees[to], \\\"Trading is not active.\\\");\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t//when buy\\n\\t\\t\\t\\tif (automatedMarketMakerPairs[from] && !_isExcludedMaxTransactionAmount[to]) {\\n\\t\\t\\t\\t\\trequire(amount <= maxTransactionAmount, \\\"Buy transfer amount exceeds the maxTransactionAmount.\\\");\\n\\t\\t\\t\\t\\trequire(amount + balanceOf(to) <= maxWallet, \\\"Max wallet exceeded\\\");\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t//when sell\\n\\t\\t\\t\\telse if (automatedMarketMakerPairs[to] && !_isExcludedMaxTransactionAmount[from]) {\\n\\t\\t\\t\\t\\trequire(amount <= maxTransactionAmount, \\\"Sell transfer amount exceeds the maxTransactionAmount.\\\");\\n\\t\\t\\t\\t} else if (!_isExcludedMaxTransactionAmount[to]) {\\n\\t\\t\\t\\t\\trequire(amount + balanceOf(to) <= maxWallet, \\\"Max wallet exceeded\\\");\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tuint256 contractTokenBalance = balanceOf(address(this));\\n\\n\\t\\tbool canSwap = contractTokenBalance >= swapTokensAtAmount();\\n\\n\\t\\tif (\\n\\t\\t\\tcanSwap &&\\n\\t\\t\\tswapEnabled &&\\n\\t\\t\\t!swapping &&\\n\\t\\t\\t!automatedMarketMakerPairs[from] &&\\n\\t\\t\\t!_isExcludedFromFees[from] &&\\n\\t\\t\\t!_isExcludedFromFees[to]\\n\\t\\t) {\\n\\t\\t\\tswapping = true;\\n\\n\\t\\t\\tswapBack();\\n\\n\\t\\t\\tswapping = false;\\n\\t\\t}\\n\\n\\t\\tbool takeFee = !swapping;\\n\\n\\t\\t// if any account belongs to _isExcludedFromFee account then remove the fee\\n\\t\\tif (_isExcludedFromFees[from] || _isExcludedFromFees[to]) {\\n\\t\\t\\ttakeFee = false;\\n\\t\\t}\\n\\n\\t\\tuint256 fees = 0;\\n\\t\\t// only take fees on buys/sells, do not take on wallet transfers\\n\\t\\tif (takeFee) {\\n\\t\\t\\t// on sell\\n\\t\\t\\tif (automatedMarketMakerPairs[to] && sellTotalFees > 0) {\\n\\t\\t\\t\\tfees = (amount * sellTotalFees) / 100;\\n\\t\\t\\t\\ttokensForLiquidity += (fees * sellLiquidityFee) / sellTotalFees;\\n\\t\\t\\t\\ttokensForTeam += (fees * sellTeamFee) / sellTotalFees;\\n\\t\\t\\t\\ttokensForBacking += (fees * sellBackingFee) / sellTotalFees;\\n\\t\\t\\t}\\n\\t\\t\\t// on buy\\n\\t\\t\\telse if (automatedMarketMakerPairs[from] && buyTotalFees > 0) {\\n\\t\\t\\t\\tfees = (amount * buyTotalFees) / 100;\\n\\t\\t\\t\\ttokensForLiquidity += (fees * buyLiquidityFee) / buyTotalFees;\\n\\t\\t\\t\\ttokensForTeam += (fees * buyTeamFee) / buyTotalFees;\\n\\t\\t\\t\\ttokensForBacking += (fees * buyBackingFee) / buyTotalFees;\\n\\t\\t\\t}\\n\\n\\t\\t\\tif (fees > 0) {\\n\\t\\t\\t\\tsuper._transfer(from, address(this), fees);\\n\\t\\t\\t}\\n\\n\\t\\t\\tamount -= fees;\\n\\t\\t}\\n\\n\\t\\tsuper._transfer(from, to, amount);\\n\\t}\\n\\n\\t// #region INTERNAL FUNCTION\\n\\n\\t/// @dev INTERNAL function to swap `tokenAmount` for ETH\\n\\t/// @dev Invoked in `swapBack()`\\n\\tfunction swapTokensForEth(uint256 tokenAmount) internal {\\n\\t\\t// generate the uniswap pair path of token -> weth\\n\\t\\taddress[] memory path = new address[](2);\\n\\t\\tpath[0] = address(this);\\n\\t\\tpath[1] = uniswapV2Router.WETH();\\n\\n\\t\\t_approve(address(this), address(uniswapV2Router), tokenAmount);\\n\\n\\t\\t// make the swap\\n\\t\\tuniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\\n\\t\\t\\ttokenAmount,\\n\\t\\t\\t0, // accept any amount of ETH\\n\\t\\t\\tpath,\\n\\t\\t\\taddress(this),\\n\\t\\t\\tblock.timestamp\\n\\t\\t);\\n\\t}\\n\\n\\t/// @dev INTERNAL function to add `tokenAmount` and `ethAmount` to LP\\n\\t/// @dev Invoked in `swapBack()`\\n\\tfunction addLiquidity(uint256 tokenAmount, uint256 ethAmount) internal {\\n\\t\\t// approve token transfer to cover all possible scenarios\\n\\t\\t_approve(address(this), address(uniswapV2Router), tokenAmount);\\n\\n\\t\\t// add the liquidity\\n\\t\\tuniswapV2Router.addLiquidityETH{value: ethAmount}(\\n\\t\\t\\taddress(this),\\n\\t\\t\\ttokenAmount,\\n\\t\\t\\t0, // slippage is unavoidable\\n\\t\\t\\t0, // slippage is unavoidable\\n\\t\\t\\ttreasury,\\n\\t\\t\\tblock.timestamp\\n\\t\\t);\\n\\t}\\n\\n\\t/// @dev INTERNAL function to transfer fees properly\\n\\t/// @dev Invoked in `_transfer()`\\n\\tfunction swapBack() internal {\\n\\t\\tuint256 contractBalance = balanceOf(address(this));\\n\\t\\tuint256 totalTokensToSwap = tokensForLiquidity + tokensForBacking + tokensForTeam;\\n\\t\\tbool success;\\n\\n\\t\\tif (contractBalance == 0 || totalTokensToSwap == 0) {\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\tif (contractBalance > swapTokensAtAmount() * 20) {\\n\\t\\t\\tcontractBalance = swapTokensAtAmount() * 20;\\n\\t\\t}\\n\\n\\t\\t// Halve the amount of liquidity tokens\\n\\t\\tuint256 liquidityTokens = (contractBalance * tokensForLiquidity) / totalTokensToSwap / 2;\\n\\t\\tuint256 amountToSwapForETH = contractBalance - liquidityTokens;\\n\\n\\t\\tuint256 initialETHBalance = address(this).balance;\\n\\n\\t\\tswapTokensForEth(amountToSwapForETH);\\n\\n\\t\\tuint256 ethBalance = address(this).balance - initialETHBalance;\\n\\n\\t\\tuint256 ethForBacking = (ethBalance * tokensForBacking) / totalTokensToSwap - (tokensForLiquidity / 2);\\n\\n\\t\\tuint256 ethForTeam = (ethBalance * tokensForTeam) / totalTokensToSwap - (tokensForLiquidity / 2);\\n\\n\\t\\tuint256 ethForLiquidity = ethBalance - ethForBacking - ethForTeam;\\n\\n\\t\\ttokensForLiquidity = 0;\\n\\t\\ttokensForBacking = 0;\\n\\t\\ttokensForTeam = 0;\\n\\n\\t\\t(success, ) = address(teamWallet).call{value: ethForTeam}(\\\"\\\");\\n\\n\\t\\tif (liquidityTokens > 0 && ethForLiquidity > 0) {\\n\\t\\t\\taddLiquidity(liquidityTokens, ethForLiquidity);\\n\\t\\t\\temit SwapAndLiquify(amountToSwapForETH, ethForLiquidity, tokensForLiquidity);\\n\\t\\t}\\n\\n\\t\\tuint256 _balance = address(this).balance;\\n\\t\\tIWETH(uniswapV2Router.WETH()).deposit{value: _balance}();\\n\\t\\tIERC20(uniswapV2Router.WETH()).transfer(treasury, _balance);\\n\\t}\\n\\n\\t/// VIEW FUNCTION ///\\n\\n\\t/// @notice Returns decimals\\n\\tfunction decimals() public view virtual override returns (uint8) {\\n\\t\\treturn 9;\\n\\t}\\n\\n\\t/// @notice Returns if address is excluded from fees\\n\\tfunction isExcludedFromFees(address account) public view returns (bool) {\\n\\t\\treturn _isExcludedFromFees[account];\\n\\t}\\n\\n\\t/// @notice Returns at what percent of supply to swap tokens at\\n\\tfunction swapTokensAtAmount() public view returns (uint256 amount_) {\\n\\t\\tamount_ = (totalSupply() * swapPercent) / 10000;\\n\\t}\\n\\n\\t/// TREASURY FUNCTION ///\\n\\n\\t/// @notice         Mint (Only by treasury)\\n\\t/// @param account  Address to mint to\\n\\t/// @param amount   Amount to mint\\n\\tfunction mint(address account, uint256 amount) external {\\n\\t\\trequire(msg.sender == treasury, \\\"msg.sender not treasury\\\");\\n\\t\\t_mint(account, amount);\\n\\t}\\n\\n\\t/// USER FUNCTIONS ///\\n\\n\\t/// @notice         Burn\\n\\t/// @param account  Address to burn from\\n\\t/// @param amount   Amount to to burn\\n\\tfunction burnFrom(address account, uint256 amount) external {\\n\\t\\t_burnFrom(account, amount);\\n\\t}\\n\\n\\t/// @notice         Burn\\n\\t/// @param amount   Amount to to burn\\n\\tfunction burn(uint256 amount) external {\\n\\t\\t_burn(msg.sender, amount);\\n\\t}\\n\\n\\t/// OWNER FUNCTIONS ///\\n\\n\\t/// @notice Set address of treasury\\n\\tfunction setTreasury(address _treasury) external onlyOwner {\\n\\t\\ttreasury = _treasury;\\n\\t\\texcludeFromFees(_treasury, true);\\n\\t\\texcludeFromMaxTransaction(_treasury, true);\\n\\t}\\n\\n\\t/// @notice Enable trading - once enabled, can never be turned off. Send in LP amount here and mint so you don't get rekt.\\n\\tfunction enableTrading() external payable onlyOwner {\\n\\t\\trequire(!tradingActive, \\\"Trading is active already\\\");\\n\\t\\trequire(msg.value > 0, \\\"Send liquidity eth\\\");\\n\\n\\t\\tuint256 liquidityTokens = balanceOf(address(this)); // 100% of the balance assigned to this contract\\n\\t\\trequire(liquidityTokens > 0, \\\"No tokens!\\\");\\n\\n\\t\\t// create pair and pool\\n\\t\\tuniswapV2Pair = IUniswapV2Factory(uniswapV2Router.factory()).createPair(address(this), uniswapV2Router.WETH());\\n\\t\\texcludeFromMaxTransaction(address(uniswapV2Pair), true);\\n\\t\\t_setAutomatedMarketMakerPair(address(uniswapV2Pair), true);\\n\\n\\t\\tIERC20Metadata weth = IERC20Metadata(uniswapV2Router.WETH());\\n\\t\\tweth.approve(address(uniswapV2Router), type(uint256).max);\\n\\t\\t_approve(address(this), address(uniswapV2Router), type(uint256).max);\\n\\n\\t\\t// add the liquidity\\n\\t\\tuniswapV2Router.addLiquidityETH{value: msg.value}(\\n\\t\\t\\taddress(this),\\n\\t\\t\\tliquidityTokens,\\n\\t\\t\\t0,\\n\\t\\t\\t0,\\n\\t\\t\\towner(),\\n\\t\\t\\tblock.timestamp\\n\\t\\t);\\n\\n\\t\\ttradingActive = true;\\n\\t\\tswapEnabled = true;\\n\\t\\temit TradingStarted(uniswapV2Pair, liquidityTokens, msg.value);\\n\\t}\\n\\n\\t/// @notice Update percent of supply to swap tokens at\\n\\tfunction updateSwapTokensAtPercent(uint256 newPercent) external onlyOwner returns (bool) {\\n\\t\\trequire(newPercent >= 1, \\\"Swap amount cannot be lower than 0.01% total supply.\\\");\\n\\t\\trequire(newPercent <= 50, \\\"Swap amount cannot be higher than 0.50% total supply.\\\");\\n\\t\\tswapPercent = newPercent;\\n\\t\\treturn true;\\n\\t}\\n\\n\\t/// @notice Update swap enabled\\n\\t/// @dev    Only use to disable contract sales if absolutely necessary (emergency use only)\\n\\tfunction updateSwapEnabled(bool enabled) external onlyOwner {\\n\\t\\tswapEnabled = enabled;\\n\\t}\\n\\n\\t/// @notice Update buy side fees\\n\\tfunction updateBuyFees(uint256 _backingFee, uint256 _liquidityFee, uint256 _teamFee) external onlyOwner {\\n\\t\\tbuyBackingFee = _backingFee;\\n\\t\\tbuyLiquidityFee = _liquidityFee;\\n\\t\\tbuyTeamFee = _teamFee;\\n\\t\\tbuyTotalFees = buyBackingFee + buyLiquidityFee + buyTeamFee;\\n\\t}\\n\\n\\t/// @notice Update sell side fees\\n\\tfunction updateSellFees(uint256 _backingFee, uint256 _liquidityFee, uint256 _teamFee) external onlyOwner {\\n\\t\\tsellBackingFee = _backingFee;\\n\\t\\tsellLiquidityFee = _liquidityFee;\\n\\t\\tsellTeamFee = _teamFee;\\n\\t\\tsellTotalFees = sellBackingFee + sellLiquidityFee + sellTeamFee;\\n\\t}\\n\\n\\t/// @notice Set if an address is excluded from fees\\n\\tfunction excludeFromFees(address account, bool excluded) public onlyOwner {\\n\\t\\t_isExcludedFromFees[account] = excluded;\\n\\t\\temit ExcludeFromFees(account, excluded);\\n\\t}\\n\\n\\t/// @notice Set if an address is excluded from max transaction\\n\\tfunction excludeFromMaxTransaction(address updAds, bool isEx) public onlyOwner {\\n\\t\\t_isExcludedMaxTransactionAmount[updAds] = isEx;\\n\\t}\\n\\n\\t/// @notice Update team wallet\\n\\tfunction updateTeamWallet(address newWallet) external onlyOwner {\\n\\t\\tteamWallet = newWallet;\\n\\t\\texcludeFromFees(newWallet, true);\\n\\t\\texcludeFromMaxTransaction(newWallet, true);\\n\\t\\temit teamWalletUpdated(newWallet, teamWallet);\\n\\t}\\n\\n\\t/// @notice Remove limits in palce\\n\\tfunction removeLimits() external onlyOwner returns (bool) {\\n\\t\\tlimitsInEffect = false;\\n\\t\\treturn true;\\n\\t}\\n\\n\\t/// @notice Withdraw stuck tokens from contract\\n\\tfunction withdrawStuck() external onlyOwner {\\n\\t\\tuint256 balance = IERC20(address(this)).balanceOf(address(this));\\n\\t\\tIERC20(address(this)).transfer(msg.sender, balance);\\n\\t\\tpayable(msg.sender).transfer(address(this).balance);\\n\\t}\\n\\n\\t/// @notice Withdraw stuck token from contract\\n\\tfunction withdrawStuckToken(address _token, address _to) external onlyOwner {\\n\\t\\trequire(_token != address(0), \\\"_token address cannot be 0\\\");\\n\\t\\tuint256 _contractBalance = IERC20(_token).balanceOf(address(this));\\n\\t\\tIERC20(_token).transfer(_to, _contractBalance);\\n\\t}\\n\\n\\t/// @notice Withdraw stuck ETH from contract\\n\\tfunction withdrawStuckEth(address toAddr) external onlyOwner {\\n\\t\\t(bool success, ) = toAddr.call{value: address(this).balance}(\\\"\\\");\\n\\t\\trequire(success);\\n\\t}\\n}\\n\"\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_teamWallet\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isExcluded\",\"type\":\"bool\"}],\"name\":\"ExcludeFromFees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"SetAutomatedMarketMakerPair\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensSwapped\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethReceived\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensIntoLiquidity\",\"type\":\"uint256\"}],\"name\":\"SwapAndLiquify\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"liquidityTokens\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"liquidityWeth\",\"type\":\"uint256\"}],\"name\":\"TradingStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newWallet\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldWallet\",\"type\":\"address\"}],\"name\":\"teamWalletUpdated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_isExcludedMaxTransactionAmount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"automatedMarketMakerPairs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyBackingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyLiquidityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyTeamFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyTotalFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deadAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableTrading\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"excluded\",\"type\":\"bool\"}],\"name\":\"excludeFromFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"updAds\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isEx\",\"type\":\"bool\"}],\"name\":\"excludeFromMaxTransaction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromFees\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitsInEffect\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTransactionAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxWallet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeLimits\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellBackingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellLiquidityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellTeamFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellTotalFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setAutomatedMarketMakerPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"}],\"name\":\"setTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapTokensAtAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokensForBacking\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokensForLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokensForTeam\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_backingFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_liquidityFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_teamFee\",\"type\":\"uint256\"}],\"name\":\"updateBuyFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_backingFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_liquidityFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_teamFee\",\"type\":\"uint256\"}],\"name\":\"updateSellFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"updateSwapEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newPercent\",\"type\":\"uint256\"}],\"name\":\"updateSwapTokensAtPercent\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newWallet\",\"type\":\"address\"}],\"name\":\"updateTeamWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawStuck\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toAddr\",\"type\":\"address\"}],\"name\":\"withdrawStuckEth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"withdrawStuckToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "Token", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "1000000", "ConstructorArguments": "000000000000000000000000f87ad9f026471847cf834becc87279c4a4adda12", "EVMVersion": "paris", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}