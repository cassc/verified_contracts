{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"BAGCOIN.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: ---DG----\\n\\npragma solidity =0.8.23;\\n\\nimport \\\"./ERC20.sol\\\";\\n\\ninterface ILightDGToken {\\n\\n    function transfer(\\n        address _recipient,\\n        uint256 _amount\\n    )\\n        external\\n        returns (bool);\\n\\n    function transferFrom(\\n        address _sender,\\n        address _recipient,\\n        uint256 _amount\\n    )\\n        external\\n        returns (bool);\\n}\\n\\ncontract BAGCOIN is ERC20 {\\n\\n    ILightDGToken immutable public lightDG;\\n    uint256 constant public RATIO = 8;\\n\\n    constructor(\\n        string memory _tokenName,\\n        string memory _tokenSymbol,\\n        address _lightDGTokenAddress\\n    )\\n        ERC20(\\n            _tokenName,\\n            _tokenSymbol\\n        )\\n    {\\n        lightDG = ILightDGToken(\\n            _lightDGTokenAddress\\n        );\\n    }\\n\\n    function getBAGTokens(\\n        uint256 _lightDGAmountToDeposit\\n    )\\n        external\\n    {\\n        lightDG.transferFrom(\\n            msg.sender,\\n            address(this),\\n            _lightDGAmountToDeposit\\n        );\\n\\n        _mint(\\n            msg.sender,\\n            _lightDGAmountToDeposit * RATIO\\n        );\\n    }\\n\\n    function returnBAGTokens(\\n        uint256 _lightDGAmountToReceive\\n    )\\n        external\\n    {\\n        _burn(\\n            msg.sender,\\n            _lightDGAmountToReceive * RATIO\\n        );\\n\\n        lightDG.transfer(\\n            msg.sender,\\n            _lightDGAmountToReceive\\n        );\\n    }\\n}\\n\"\r\n    },\r\n    \"ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: -- DG --\\n\\npragma solidity =0.8.23;\\n\\ncontract ERC20 {\\n\\n    string public name;\\n    string public symbol;\\n    uint8 public decimals;\\n\\n    address internal constant ZERO_ADDY = address(0x0);\\n    uint256 internal constant UINT256_MAX = type(uint256).max;\\n\\n    uint256 public totalSupply;\\n\\n    mapping(address => uint256) public balanceOf;\\n    mapping(address => mapping(address => uint256)) public allowance;\\n    mapping(address => uint256) public nonces;\\n\\n    bytes32 public immutable DOMAIN_SEPARATOR;\\n    bytes32 public constant PERMIT_TYPEHASH = keccak256(\\n        \\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\"\\n    );\\n\\n    event Transfer(\\n        address indexed from,\\n        address indexed to,\\n        uint256 value\\n    );\\n\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n\\n    constructor(\\n        string memory _name,\\n        string memory _symbol\\n    ) {\\n        name = _name;\\n        symbol = _symbol;\\n        decimals = 18;\\n\\n        DOMAIN_SEPARATOR = keccak256(\\n            abi.encode(\\n                keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"),\\n                keccak256(bytes(_name)),\\n                keccak256(bytes(\\\"1\\\")),\\n                block.chainid,\\n                address(this)\\n            )\\n        );\\n    }\\n\\n    function _mint(\\n        address _to,\\n        uint256 _value\\n    )\\n        internal\\n    {\\n        totalSupply =\\n        totalSupply + _value;\\n\\n        unchecked {\\n            balanceOf[_to] =\\n            balanceOf[_to] + _value;\\n        }\\n\\n        emit Transfer(\\n            ZERO_ADDY,\\n            _to,\\n            _value\\n        );\\n    }\\n\\n    function _burn(\\n        address _from,\\n        uint256 _value\\n    )\\n        internal\\n    {\\n        unchecked {\\n            totalSupply =\\n            totalSupply - _value;\\n        }\\n\\n        balanceOf[_from] =\\n        balanceOf[_from] - _value;\\n\\n        emit Transfer(\\n            _from,\\n            ZERO_ADDY,\\n            _value\\n        );\\n    }\\n\\n    function _approve(\\n        address _owner,\\n        address _spender,\\n        uint256 _value\\n    )\\n        private\\n    {\\n        allowance[_owner][_spender] = _value;\\n\\n        emit Approval(\\n            _owner,\\n            _spender,\\n            _value\\n        );\\n    }\\n\\n    function _transfer(\\n        address _from,\\n        address _to,\\n        uint256 _value\\n    )\\n        private\\n    {\\n        balanceOf[_from] =\\n        balanceOf[_from] - _value;\\n\\n        unchecked {\\n            balanceOf[_to] =\\n            balanceOf[_to] + _value;\\n        }\\n\\n        emit Transfer(\\n            _from,\\n            _to,\\n            _value\\n        );\\n    }\\n\\n    function approve(\\n        address _spender,\\n        uint256 _value\\n    )\\n        external\\n        returns (bool)\\n    {\\n        _approve(\\n            msg.sender,\\n            _spender,\\n            _value\\n        );\\n\\n        return true;\\n    }\\n\\n    function transfer(\\n        address _to,\\n        uint256 _value\\n    )\\n        external\\n        returns (bool)\\n    {\\n        _transfer(\\n            msg.sender,\\n            _to,\\n            _value\\n        );\\n\\n        return true;\\n    }\\n\\n    function transferFrom(\\n        address _from,\\n        address _to,\\n        uint256 _value\\n    )\\n        external\\n        returns (bool)\\n    {\\n        if (allowance[_from][msg.sender] != UINT256_MAX) {\\n            allowance[_from][msg.sender] -= _value;\\n        }\\n\\n        _transfer(\\n            _from,\\n            _to,\\n            _value\\n        );\\n\\n        return true;\\n    }\\n\\n    function permit(\\n        address _owner,\\n        address _spender,\\n        uint256 _value,\\n        uint256 _deadline,\\n        uint8 _v,\\n        bytes32 _r,\\n        bytes32 _s\\n    )\\n        external\\n    {\\n        require(\\n            _deadline >= block.timestamp,\\n            \\\"ERC20: PERMIT_CALL_EXPIRED\\\"\\n        );\\n\\n        bytes32 digest = keccak256(\\n            abi.encodePacked(\\n                \\\"\\\\x19\\\\x01\\\",\\n                DOMAIN_SEPARATOR,\\n                keccak256(\\n                    abi.encode(\\n                        PERMIT_TYPEHASH,\\n                        _owner,\\n                        _spender,\\n                        _value,\\n                        nonces[_owner]++,\\n                        _deadline\\n                    )\\n                )\\n            )\\n        );\\n\\n        if (uint256(_s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            revert(\\\"Token: INVALID_SIGNATURE\\\");\\n        }\\n\\n        address recoveredAddress = ecrecover(\\n            digest,\\n            _v,\\n            _r,\\n            _s\\n        );\\n\\n        require(\\n            recoveredAddress != ZERO_ADDY &&\\n            recoveredAddress == _owner,\\n            \\\"ERC20: INVALID_SIGNATURE\\\"\\n        );\\n\\n        _approve(\\n            _owner,\\n            _spender,\\n            _value\\n        );\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_tokenName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_tokenSymbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_lightDGTokenAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERMIT_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RATIO\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_lightDGAmountToDeposit\",\"type\":\"uint256\"}],\"name\":\"getBAGTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lightDG\",\"outputs\":[{\"internalType\":\"contract ILightDGToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"_r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_lightDGAmountToReceive\",\"type\":\"uint256\"}],\"name\":\"returnBAGTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "BAGCOIN", "CompilerVersion": "v0.8.23+commit.f704f362", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000004b520c812e8430659fc9f12f6d0c39026c83588d0000000000000000000000000000000000000000000000000000000000000003426167000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034241470000000000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}