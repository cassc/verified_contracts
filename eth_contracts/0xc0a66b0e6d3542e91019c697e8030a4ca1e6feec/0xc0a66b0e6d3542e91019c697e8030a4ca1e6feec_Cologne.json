{"SourceCode": "// SPDX-License-Identifier: Unlicensed\r\n\r\n/**\r\nhttps://t.me/ColonCologne_ERC\r\n\r\nhttps://twitter.com/elonmusk/status/1751651587267952884\r\n */\r\n\r\npragma solidity 0.8.19;\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return payable(msg.sender);\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\ninterface IUniswapFactory {\r\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\r\n\r\n    function feeTo() external view returns (address);\r\n    function feeToSetter() external view returns (address);\r\n\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n    function allPairs(uint) external view returns (address pair);\r\n    function allPairsLength() external view returns (uint);\r\n\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n\r\n    function set(address) external;\r\n    function setSetter(address) external;\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n    address private _previousOwner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor () {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }   \r\n    \r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n    \r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\ninterface IUniswapRouter {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    \r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\ncontract Cologne is Context, IERC20, Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    string private _name = \"Colon Cologne\";\r\n    string private _symbol = \"Cologne\";\r\n\r\n    uint8 private _decimals = 9;\r\n    uint256 private _totalSupply = 10**9 * 10**9;\r\n\r\n    uint256 private _finalLiquidityFee = 0;\r\n    uint256 private _finalMarketingFee = 10;\r\n    uint256 private _finalDevelopmentFee = 0;\r\n    uint256 private _finalTotalFee = 10;\r\n\r\n    address payable private _marketingWallet;\r\n    address payable private _teamWallet;\r\n\r\n    IUniswapRouter _routerInstance;\r\n    address _pairAddress;\r\n\r\n    uint256 private _maxTxAmount = 30 * 10**6 * 10**9;\r\n    uint256 private _maxWalletAmount = 30 * 10**6 * 10**9;\r\n    uint256 private _feeThreshold = 10**4 * 10**9;\r\n\r\n    bool _swapping;\r\n    bool _feeSwapEnabled = true;\r\n    bool _hasMaxTxDisabled = false;\r\n    bool _maxWalletDisabled = true;\r\n\r\n    uint256 _purchaseLiquidityFee = 0;\r\n    uint256 _purchaseMarketingFee = 22;\r\n    uint256 _purchaseDevFee = 0;\r\n    uint256 _purchaseFee = 22;\r\n\r\n    uint256 _saleLiquidityFee = 0;\r\n    uint256 _saleMarketingFee = 22;\r\n    uint256 _saleDevFee = 0;\r\n    uint256 _saleFee = 22;\r\n\r\n    mapping(address => uint256) private _balances;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n    mapping(address => bool) _isExcluded;\r\n    mapping(address => bool) _isExcludedFromMaxWallet;\r\n    mapping(address => bool) _isExcludedFromMaxTx;\r\n    mapping(address => bool) _isPairAddress;\r\n\r\n    modifier lockSwap() {\r\n        _swapping = true;\r\n        _;\r\n        _swapping = false;\r\n    }\r\n\r\n    constructor() {\r\n        _balances[_msgSender()] = _totalSupply;\r\n        IUniswapRouter _uniswapV2Router = IUniswapRouter(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n        _pairAddress = IUniswapFactory(_uniswapV2Router.factory()).createPair(address(this), _uniswapV2Router.WETH());\r\n        _routerInstance = _uniswapV2Router;\r\n        _allowances[address(this)][address(_routerInstance)] = _totalSupply;\r\n        _marketingWallet = payable(0xc5802B150eF0F09A5e553281DfB20742374F0114);\r\n        _teamWallet = payable(0xc5802B150eF0F09A5e553281DfB20742374F0114);\r\n        _purchaseFee = _purchaseLiquidityFee.add(_purchaseMarketingFee).add(_purchaseDevFee);\r\n        _saleFee = _saleLiquidityFee.add(_saleMarketingFee).add(_saleDevFee);\r\n        _finalTotalFee = _finalLiquidityFee.add(_finalMarketingFee).add(_finalDevelopmentFee);\r\n\r\n        _isExcluded[owner()] = true;\r\n        _isExcluded[_marketingWallet] = true;\r\n        _isExcludedFromMaxWallet[owner()] = true;\r\n        _isExcludedFromMaxWallet[_pairAddress] = true;\r\n        _isExcludedFromMaxWallet[address(this)] = true;\r\n        _isExcludedFromMaxTx[owner()] = true;\r\n        _isExcludedFromMaxTx[_marketingWallet] = true;\r\n        _isExcludedFromMaxTx[address(this)] = true;\r\n        _isPairAddress[_pairAddress] = true;\r\n        emit Transfer(address(0), _msgSender(), _totalSupply);\r\n    }\r\n\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\r\n        _tokenTransfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFee(address payable recipient, uint256 amount) private {\r\n        recipient.transfer(amount);\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n    \r\n    receive() external payable {}\r\n\r\n    function _approve(address owner, address spender, uint256 amount) private {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function getAmountOut(address sender, address recipient, uint256 amount) internal returns (uint256) {\r\n\r\n        uint256 fee = 0;\r\n        if (_isPairAddress[sender]) {\r\n            fee = amount.mul(_purchaseFee).div(100);\r\n        } else if (_isPairAddress[recipient]) {\r\n            fee = amount.mul(_saleFee).div(100);\r\n        }\r\n        if (fee > 0) {\r\n            _balances[address(this)] = _balances[address(this)].add(fee);\r\n            emit Transfer(sender, address(this), fee);\r\n        }\r\n        return amount.sub(fee);\r\n    }\r\n    \r\n    function swapTokensForETH(uint256 tokenAmount) private {\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = _routerInstance.WETH();\r\n\r\n        _approve(address(this), address(_routerInstance), tokenAmount);\r\n\r\n        _routerInstance.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0, // accept any amount of ETH\r\n            path,\r\n            address(this), // The contract\r\n            block.timestamp\r\n        );\r\n    }\r\n        \r\n    function _tokenTransfer(address sender, address recipient, uint256 amount) private returns (bool) {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n        if (_swapping) {\r\n            return transferBasic_(sender, recipient, amount);\r\n        } else {\r\n            if (!_isExcludedFromMaxTx[sender] && !_isExcludedFromMaxTx[recipient]) {\r\n                require(amount <= _maxTxAmount, \"Transfer amount exceeds the _maxTxAmount.\");\r\n            }            \r\n\r\n            uint256 swapAmount = balanceOf(address(this));\r\n            bool minimumSwap = swapAmount >= _feeThreshold;\r\n            \r\n            if (minimumSwap && !_swapping && _isPairAddress[recipient] && _feeSwapEnabled && !_isExcluded[sender] && amount > _feeThreshold) {\r\n                if (_hasMaxTxDisabled) {\r\n                    swapAmount = _feeThreshold;\r\n                }\r\n                _swapFees(swapAmount);    \r\n            }\r\n\r\n            uint256 finalAmount;                                         \r\n            if (_isExcluded[sender] || _isExcluded[recipient]) {\r\n                finalAmount = amount;\r\n            } else {\r\n                finalAmount = getAmountOut(sender, recipient, amount);\r\n            }\r\n            if (_maxWalletDisabled && !_isExcludedFromMaxWallet[recipient]) {\r\n                require(balanceOf(recipient).add(finalAmount) <= _maxWalletAmount);\r\n            }\r\n\r\n            uint256 amountToReduce = (!_maxWalletDisabled && _isExcluded[sender]) ? amount.sub(finalAmount) : amount;\r\n            _balances[sender] = _balances[sender].sub(amountToReduce, \"Insufficient Balance\");\r\n            _balances[recipient] = _balances[recipient].add(finalAmount);\r\n            emit Transfer(sender, recipient, finalAmount);\r\n            return true;\r\n        }\r\n    }\r\n    \r\n    function removeLimits() external onlyOwner {\r\n        _maxTxAmount = _totalSupply;\r\n        _maxWalletDisabled = false;\r\n        _purchaseMarketingFee = 0;\r\n        _saleMarketingFee = 0;\r\n        _purchaseFee = 0;\r\n        _saleFee = 0;\r\n    }\r\n            \r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n                \r\n    function transferBasic_(address sender, address recipient, uint256 amount) internal returns (bool) {\r\n        _balances[sender] = _balances[sender].sub(amount, \"Insufficient Balance\");\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n        return true;\r\n    }\r\n        \r\n    function allowance(address owner, address spender) public view override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n    \r\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\r\n        _tokenTransfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n    \r\n    function _swapFees(uint256 tokenAmount) private lockSwap {\r\n        uint256 lpFeeTokens = tokenAmount.mul(_finalLiquidityFee).div(_finalTotalFee).div(2);\r\n        uint256 tokensToSwap = tokenAmount.sub(lpFeeTokens);\r\n\r\n        swapTokensForETH(tokensToSwap);\r\n        uint256 ethCA = address(this).balance;\r\n\r\n        uint256 totalETHFee = _finalTotalFee.sub(_finalLiquidityFee.div(2));\r\n        \r\n        uint256 amountETHLiquidity = ethCA.mul(_finalLiquidityFee).div(totalETHFee).div(2);\r\n        uint256 amountETHDevelopment = ethCA.mul(_finalDevelopmentFee).div(totalETHFee);\r\n        uint256 amountETHMarketing = ethCA.sub(amountETHLiquidity).sub(amountETHDevelopment);\r\n\r\n        if (amountETHMarketing > 0) {\r\n            transferFee(_marketingWallet, amountETHMarketing);\r\n        }\r\n\r\n        if (amountETHDevelopment > 0) {\r\n            transferFee(_teamWallet, amountETHDevelopment);\r\n        }\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "Cologne", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://1a59e08ca67e10c59c9aaa20ddbe89ecc752f72a287a3223fcd804ac918784a7"}