{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    function safeTransfer(\\n        IERC20Upgradeable token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20Upgradeable token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary CountersUpgradeable {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/structs/BitMapsUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/structs/BitMaps.sol)\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing uint256 to bool mapping in a compact and efficient way, providing the keys are sequential.\\n * Largelly inspired by Uniswap's https://github.com/Uniswap/merkle-distributor/blob/master/contracts/MerkleDistributor.sol[merkle-distributor].\\n */\\nlibrary BitMapsUpgradeable {\\n    struct BitMap {\\n        mapping(uint256 => uint256) _data;\\n    }\\n\\n    /**\\n     * @dev Returns whether the bit at `index` is set.\\n     */\\n    function get(BitMap storage bitmap, uint256 index) internal view returns (bool) {\\n        uint256 bucket = index >> 8;\\n        uint256 mask = 1 << (index & 0xff);\\n        return bitmap._data[bucket] & mask != 0;\\n    }\\n\\n    /**\\n     * @dev Sets the bit at `index` to the boolean `value`.\\n     */\\n    function setTo(\\n        BitMap storage bitmap,\\n        uint256 index,\\n        bool value\\n    ) internal {\\n        if (value) {\\n            set(bitmap, index);\\n        } else {\\n            unset(bitmap, index);\\n        }\\n    }\\n\\n    /**\\n     * @dev Sets the bit at `index`.\\n     */\\n    function set(BitMap storage bitmap, uint256 index) internal {\\n        uint256 bucket = index >> 8;\\n        uint256 mask = 1 << (index & 0xff);\\n        bitmap._data[bucket] |= mask;\\n    }\\n\\n    /**\\n     * @dev Unsets the bit at `index`.\\n     */\\n    function unset(BitMap storage bitmap, uint256 index) internal {\\n        uint256 bucket = index >> 8;\\n        uint256 mask = 1 << (index & 0xff);\\n        bitmap._data[bucket] &= ~mask;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/aspen/api/config/IGlobalConfig.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8;\\n\\nimport \\\"../config/IPlatformFeeConfig.sol\\\";\\nimport \\\"../config/IOperatorFilterersConfig.sol\\\";\\nimport \\\"../config/ITieredPricing.sol\\\";\\n\\ninterface IGlobalConfigV0 is IOperatorFiltererConfigV0, IPlatformFeeConfigV0 {}\\n\\ninterface IGlobalConfigV1 is IOperatorFiltererConfigV0, ITieredPricingV0 {}\\n\\ninterface IGlobalConfigV2 is ITieredPricingV1 {}\\n\"\r\n    },\r\n    \"contracts/aspen/api/config/IOperatorFilterersConfig.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8;\\n\\nimport \\\"./types/OperatorFiltererDataTypes.sol\\\";\\n\\ninterface IOperatorFiltererConfigV0 {\\n    event OperatorFiltererAdded(\\n        bytes32 operatorFiltererId,\\n        string name,\\n        address defaultSubscription,\\n        address operatorFilterRegistry\\n    );\\n\\n    function getOperatorFiltererOrDie(\\n        bytes32 _operatorFiltererId\\n    ) external view returns (IOperatorFiltererDataTypesV0.OperatorFilterer memory);\\n\\n    function getOperatorFilterer(\\n        bytes32 _operatorFiltererId\\n    ) external view returns (IOperatorFiltererDataTypesV0.OperatorFilterer memory);\\n\\n    function getOperatorFiltererIds() external view returns (bytes32[] memory operatorFiltererIds);\\n\\n    function addOperatorFilterer(IOperatorFiltererDataTypesV0.OperatorFilterer memory _newOperatorFilterer) external;\\n}\\n\"\r\n    },\r\n    \"contracts/aspen/api/config/IPlatformFeeConfig.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8;\\n\\ninterface IPlatformFeeConfigV0 {\\n    event PlatformFeesUpdated(address platformFeeReceiver, uint16 platformFeeBPS);\\n\\n    function getPlatformFees() external view returns (address platformFeeReceiver, uint16 platformFeeBPS);\\n\\n    function setPlatformFees(address _newPlatformFeeReceiver, uint16 _newPlatformFeeBPS) external;\\n}\\n\"\r\n    },\r\n    \"contracts/aspen/api/config/ITieredPricing.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8;\\n\\nimport \\\"./types/TieredPricingDataTypes.sol\\\";\\n\\ninterface ITieredPricingEventsV0 {\\n    event PlatformFeeReceiverUpdated(address newPlatformFeeReceiver);\\n\\n    event TierAdded(\\n        bytes32 indexed namespace,\\n        bytes32 indexed tierId,\\n        string indexed tierName,\\n        uint256 tierPrice,\\n        address tierCurrency,\\n        ITieredPricingDataTypesV0.FeeTypes feeType\\n    );\\n    event TierUpdated(\\n        bytes32 indexed namespace,\\n        bytes32 indexed tierId,\\n        string indexed tierName,\\n        uint256 tierPrice,\\n        address tierCurrency,\\n        ITieredPricingDataTypesV0.FeeTypes feeType\\n    );\\n    event TierRemoved(bytes32 indexed namespace, bytes32 indexed tierId);\\n    event AddressAddedToTier(bytes32 indexed namespace, address indexed account, bytes32 indexed tierId);\\n    event AddressRemovedFromTier(bytes32 indexed namespace, address indexed account, bytes32 indexed tierId);\\n}\\n\\ninterface ITieredPricingGettersV0 {\\n    function getTiersForNamespace(\\n        bytes32 _namespace\\n    ) external view returns (bytes32[] memory tierIds, ITieredPricingDataTypesV0.Tier[] memory tiers);\\n\\n    function getDefaultTierForNamespace(\\n        bytes32 _namespace\\n    ) external view returns (bytes32 tierId, ITieredPricingDataTypesV0.Tier memory tier);\\n\\n    function getDeploymentFee(\\n        address _account\\n    ) external view returns (address feeReceiver, uint256 price, address currency);\\n\\n    function getClaimFee(address _account) external view returns (address feeReceiver, uint256 price);\\n\\n    function getCollectorFee(\\n        address _account\\n    ) external view returns (address feeReceiver, uint256 price, address currency);\\n\\n    function getFee(\\n        bytes32 _namespace,\\n        address _account\\n    )\\n        external\\n        view\\n        returns (address feeReceiver, uint256 price, ITieredPricingDataTypesV0.FeeTypes feeType, address currency);\\n\\n    function getTierDetails(\\n        bytes32 _namespace,\\n        bytes32 _tierId\\n    ) external view returns (ITieredPricingDataTypesV0.Tier memory tier);\\n\\n    function getPlatformFeeReceiver() external view returns (address feeReceiver);\\n}\\n\\ninterface ITieredPricingV0 is ITieredPricingEventsV0, ITieredPricingGettersV0 {\\n    function setPlatformFeeReceiver(address _platformFeeReceiver) external;\\n\\n    function addTier(bytes32 _namespace, ITieredPricingDataTypesV0.Tier calldata _tierDetails) external;\\n\\n    function updateTier(\\n        bytes32 _namespace,\\n        bytes32 _tierId,\\n        ITieredPricingDataTypesV0.Tier calldata _tierDetails\\n    ) external;\\n\\n    function removeTier(bytes32 _namespace, bytes32 _tierId) external;\\n\\n    function addAddressToTier(bytes32 _namespace, address _account, bytes32 _tierId) external;\\n\\n    function removeAddressFromTier(bytes32 _namespace, address _account) external;\\n}\\n\\ninterface ITieredPricingEventsV1 {\\n    event DefaultTierUpdated(bytes32 indexed namespace, bytes32 indexed tierId);\\n}\\n\\ninterface ITieredPricingV1 is ITieredPricingEventsV1 {\\n    function setDefaultTier(bytes32 _namespace, bytes32 _tierId) external;\\n}\\n\"\r\n    },\r\n    \"contracts/aspen/api/config/types/OperatorFiltererDataTypes.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8;\\n\\ninterface IOperatorFiltererDataTypesV0 {\\n    struct OperatorFilterer {\\n        bytes32 operatorFiltererId;\\n        string name;\\n        address defaultSubscription;\\n        address operatorFilterRegistry;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/aspen/api/config/types/TieredPricingDataTypes.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8;\\n\\ninterface ITieredPricingDataTypesV0 {\\n    enum FeeTypes {\\n        FlatFee,\\n        Percentage\\n    }\\n\\n    struct Tier {\\n        string name;\\n        uint256 price;\\n        address currency;\\n        FeeTypes feeType;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/aspen/api/errors/IDropErrors.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8;\\n\\ninterface IDropErrorsV0 {\\n    error InvalidPermission();\\n    error InvalidIndex();\\n    error NothingToReveal();\\n    error NotTrustedForwarder();\\n    error InvalidTimetamp();\\n    error CrossedLimitLazyMintedTokens();\\n    error CrossedLimitMinTokenIdGreaterThanMaxTotalSupply();\\n    error CrossedLimitQuantityPerTransaction();\\n    error CrossedLimitMaxClaimableSupply();\\n    error CrossedLimitMaxTotalSupply();\\n    error CrossedLimitMaxWalletClaimCount();\\n    error InvalidPrice();\\n    error InvalidPaymentAmount();\\n    error InvalidQuantity();\\n    error InvalidTime();\\n    error InvalidGating();\\n    error InvalidMerkleProof();\\n    error InvalidMaxQuantityProof();\\n    error MaxBps();\\n    error ClaimPaused();\\n    error NoActiveMintCondition();\\n    error TermsNotAccepted(address caller, string termsURI, uint8 acceptedVersion);\\n    error BaseURIEmpty();\\n    error FrozenTokenMetadata(uint256 tokenId);\\n    error InvalidTokenId(uint256 tokenId);\\n    error InvalidNoOfTokenIds();\\n    error InvalidPhaseId(bytes32 phaseId);\\n    error SignatureVerificationFailed();\\n}\\n\\ninterface IDropErrorsV1 is IDropErrorsV0 {\\n    error NonTransferrableToken();\\n    error TransferRestrictionNotUpdateable(bool toRestrict);\\n    error ChargebackWithrawalRejected();\\n    error ChargebackProtectedTransferNotAvailable(uint256 transferrableAtTime, uint256 currentTime);\\n    error NewOwnerMustHaveAdminRole();\\n}\\n\\ninterface IDropErrorsV2 is IDropErrorsV1 {\\n    error BatchIssueArrayMismatch();\\n}\\n\\ninterface IDropErrorsV3 {\\n    error InvalidPermission();\\n    error InvalidIndex();\\n    error NothingToReveal();\\n    error NotTrustedForwarder();\\n    error InvalidTimetamp();\\n    error CrossedLimitLazyMintedTokens(uint256 availableQuantity);\\n    error CrossedLimitQuantityPerTransaction(uint256 quantityLimitPerTransaction);\\n    error CrossedLimitQuantityPerTransactionSft(uint256 tokenId, uint256 quantityLimitPerTransaction);\\n    error CrossedLimitMaxClaimableSupply(uint256 availableQuantity);\\n    error CrossedLimitMaxClaimableSupplySft(uint256 tokenId, uint256 availableQuantity);\\n    error CrossedLimitMaxTotalSupply(uint256 maxTotalSupplyLimit);\\n    error CrossedLimitMaxTotalSupplySft(uint256 tokenId, uint256 maxTotalSupplyLimit);\\n    error CrossedLimitMaxWalletClaimCount(uint256 availableQuantity);\\n    error CrossedLimitMaxWalletClaimCountSft(uint256 tokenId, uint256 availableQuantity);\\n    error InvalidMaxTotalSupply();\\n    error InvalidPrice();\\n    error InvalidPaymentAmount();\\n    error InvalidQuantity();\\n    error InvalidTime();\\n    error InvalidGating();\\n    error InvalidMerkleProof();\\n    error InvalidMaxQuantityProof();\\n    error MaxBps();\\n    error ClaimPaused();\\n    error NoActiveMintCondition();\\n    error TermsNotAccepted(address caller, string termsURI, uint8 acceptedVersion);\\n    error BaseURIEmpty();\\n    error FrozenTokenMetadata(uint256 tokenId);\\n    error InvalidTokenId(uint256 tokenId);\\n    error InvalidNoOfTokenIds();\\n    error InvalidPhaseId(bytes32 phaseId);\\n    error SignatureVerificationFailed();\\n    error NonTransferrableToken();\\n    error TransferRestrictionNotUpdateable(bool toRestrict);\\n    error ChargebackWithrawalRejected();\\n    error ChargebackProtectedTransferNotAvailable(uint256 transferrableAtTime, uint256 currentTime);\\n    error NewOwnerMustHaveAdminRole();\\n    error BatchIssueArrayMismatch();\\n}\\n\"\r\n    },\r\n    \"contracts/aspen/api/issuance/IDropClaimCondition.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/structs/BitMapsUpgradeable.sol\\\";\\n\\n/**\\n *  Cedar's 'Drop' contracts are distribution mechanisms for tokens.\\n *\\n *  A contract admin (i.e. a holder of `DEFAULT_ADMIN_ROLE`) can set a series of claim conditions,\\n *  ordered by their respective `startTimestamp`. A claim condition defines criteria under which\\n *  accounts can mint tokens. Claim conditions can be overwritten or added to by the contract admin.\\n *  At any moment, there is only one active claim condition.\\n */\\n\\ninterface IDropClaimConditionV0 {\\n    /**\\n     *  @notice The criteria that make up a claim condition.\\n     *\\n     *  @param startTimestamp                 The unix timestamp after which the claim condition applies.\\n     *                                        The same claim condition applies until the `startTimestamp`\\n     *                                        of the next claim condition.\\n     *\\n     *  @param maxClaimableSupply             The maximum total number of tokens that can be claimed under\\n     *                                        the claim condition.\\n     *\\n     *  @param supplyClaimed                  At any given point, the number of tokens that have been claimed\\n     *                                        under the claim condition.\\n     *\\n     *  @param quantityLimitPerTransaction    The maximum number of tokens that can be claimed in a single\\n     *                                        transaction.\\n     *\\n     *  @param waitTimeInSecondsBetweenClaims The least number of seconds an account must wait after claiming\\n     *                                        tokens, to be able to claim tokens again.\\n     *\\n     *  @param merkleRoot                     The allowlist of addresses that can claim tokens under the claim\\n     *                                        condition.\\n     *\\n     *  @param pricePerToken                  The price required to pay per token claimed.\\n     *\\n     *  @param currency                       The currency in which the `pricePerToken` must be paid.\\n     */\\n    struct ClaimCondition {\\n        uint256 startTimestamp;\\n        uint256 maxClaimableSupply;\\n        uint256 supplyClaimed;\\n        uint256 quantityLimitPerTransaction;\\n        uint256 waitTimeInSecondsBetweenClaims;\\n        bytes32 merkleRoot;\\n        uint256 pricePerToken;\\n        address currency;\\n    }\\n\\n    /**\\n     *  @notice The set of all claim conditions, at any given moment.\\n     *  Claim Phase ID = [currentStartId, currentStartId + length - 1];\\n     *\\n     *  @param currentStartId           The uid for the first claim condition amongst the current set of\\n     *                                  claim conditions. The uid for each next claim condition is one\\n     *                                  more than the previous claim condition's uid.\\n     *\\n     *  @param count                    The total number of phases / claim conditions in the list\\n     *                                  of claim conditions.\\n     *\\n     *  @param phases                   The claim conditions at a given uid. Claim conditions\\n     *                                  are ordered in an ascending order by their `startTimestamp`.\\n     *\\n     *  @param claimDetails             Map from an account and uid for a claim condition, to the claim\\n     *                                  records an account has done.\\n     *\\n     */\\n    struct ClaimConditionList {\\n        uint256 currentStartId;\\n        uint256 count;\\n        mapping(uint256 => ClaimCondition) phases;\\n        mapping(uint256 => mapping(address => ClaimDetails)) userClaims;\\n    }\\n\\n    /**\\n     *  @notice Claim detail for a user claim.\\n     *\\n     *  @param lastClaimTimestamp    The timestamp at which the last token was claimed.\\n     *\\n     *  @param claimedBalance        The number of tokens claimed.\\n     *\\n     */\\n    struct ClaimDetails {\\n        uint256 lastClaimTimestamp;\\n        uint256 claimedBalance;\\n    }\\n}\\n\\ninterface IDropClaimConditionV1 {\\n    /**\\n     *  @notice The criteria that make up a claim condition.\\n     *\\n     *  @param startTimestamp                 The unix timestamp after which the claim condition applies.\\n     *                                        The same claim condition applies until the `startTimestamp`\\n     *                                        of the next claim condition.\\n     *\\n     *  @param maxClaimableSupply             The maximum total number of tokens that can be claimed under\\n     *                                        the claim condition.\\n     *\\n     *  @param supplyClaimed                  At any given point, the number of tokens that have been claimed\\n     *                                        under the claim condition.\\n     *\\n     *  @param quantityLimitPerTransaction    The maximum number of tokens that can be claimed in a single\\n     *                                        transaction.\\n     *\\n     *  @param waitTimeInSecondsBetweenClaims The least number of seconds an account must wait after claiming\\n     *                                        tokens, to be able to claim tokens again.\\n     *\\n     *  @param merkleRoot                     The allowlist of addresses that can claim tokens under the claim\\n     *                                        condition.\\n     *\\n     *  @param pricePerToken                  The price required to pay per token claimed.\\n     *\\n     *  @param currency                       The currency in which the `pricePerToken` must be paid.\\n     */\\n    struct ClaimCondition {\\n        uint256 startTimestamp;\\n        uint256 maxClaimableSupply;\\n        uint256 supplyClaimed;\\n        uint256 quantityLimitPerTransaction;\\n        uint256 waitTimeInSecondsBetweenClaims;\\n        bytes32 merkleRoot;\\n        uint256 pricePerToken;\\n        address currency;\\n        bytes32 phaseId;\\n    }\\n\\n    /**\\n     *  @notice The set of all claim conditions, at any given moment.\\n     *  Claim Phase ID = [currentStartId, currentStartId + length - 1];\\n     *\\n     *  @param currentStartId           The uid for the first claim condition amongst the current set of\\n     *                                  claim conditions. The uid for each next claim condition is one\\n     *                                  more than the previous claim condition's uid.\\n     *\\n     *  @param count                    The total number of phases / claim conditions in the list\\n     *                                  of claim conditions.\\n     *\\n     *  @param phases                   The claim conditions at a given uid. Claim conditions\\n     *                                  are ordered in an ascending order by their `startTimestamp`.\\n     *\\n     *  @param claimDetails             Map from an account and uid for a claim condition, to the claim\\n     *                                  records an account has done.\\n     *\\n     */\\n    struct ClaimConditionList {\\n        uint256 currentStartId;\\n        uint256 count;\\n        mapping(uint256 => ClaimCondition) phases;\\n        mapping(uint256 => mapping(address => ClaimDetails)) userClaims;\\n    }\\n\\n    /**\\n     *  @notice Claim detail for a user claim.\\n     *\\n     *  @param lastClaimTimestamp    The timestamp at which the last token was claimed.\\n     *\\n     *  @param claimedBalance        The number of tokens claimed.\\n     *\\n     */\\n    struct ClaimDetails {\\n        uint256 lastClaimTimestamp;\\n        uint256 claimedBalance;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/aspen/api/royalties/IRoyalty.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8;\\n\\nimport \\\"../standard/IERC2981.sol\\\";\\n\\ninterface IRoyaltyV0 is IERC2981V0 {\\n    struct RoyaltyInfo {\\n        address recipient;\\n        uint256 bps;\\n    }\\n\\n    /// @dev Returns the royalty recipient and fee bps.\\n    function getDefaultRoyaltyInfo() external view returns (address, uint16);\\n\\n    /// @dev Lets a module admin update the royalty bps and recipient.\\n    function setDefaultRoyaltyInfo(address _royaltyRecipient, uint256 _royaltyBps) external;\\n\\n    /// @dev Lets a module admin set the royalty recipient for a particular token Id.\\n    function setRoyaltyInfoForToken(uint256 tokenId, address recipient, uint256 bps) external;\\n\\n    /// @dev Returns the royalty recipient for a particular token Id.\\n    function getRoyaltyInfoForToken(uint256 tokenId) external view returns (address, uint16);\\n\\n    /// @dev Emitted when royalty info is updated.\\n    event DefaultRoyalty(address newRoyaltyRecipient, uint256 newRoyaltyBps);\\n\\n    /// @dev Emitted when royalty recipient for tokenId is set\\n    event RoyaltyForToken(uint256 indexed tokenId, address royaltyRecipient, uint256 royaltyBps);\\n}\\n\\ninterface IPublicRoyaltyV0 is IERC2981V0 {\\n    struct RoyaltyInfo {\\n        address recipient;\\n        uint256 bps;\\n    }\\n\\n    /// @dev Returns the royalty recipient and fee bps.\\n    function getDefaultRoyaltyInfo() external view returns (address, uint16);\\n\\n    /// @dev Returns the royalty recipient for a particular token Id.\\n    function getRoyaltyInfoForToken(uint256 tokenId) external view returns (address, uint16);\\n}\\n\\ninterface IPublicRoyaltyV1 is IERC2981V0 {\\n    struct RoyaltyInfo {\\n        address recipient;\\n        uint256 bps;\\n    }\\n\\n    /// @dev Returns the royalty recipient and fee bps.\\n    function getDefaultRoyaltyInfo() external view returns (address, uint16);\\n}\\n\\ninterface IDelegatedRoyaltyV0 {\\n    /// @dev Returns the royalty recipient and fee bps.\\n    function getRoyaltyInfoForToken(uint256 tokenId) external view returns (address, uint16);\\n}\\n\\ninterface IDelegatedRoyaltyV1 is IDelegatedRoyaltyV0 {\\n    struct RoyaltyInfo {\\n        address recipient;\\n        uint256 bps;\\n    }\\n\\n    /// @dev Returns the royalty recipient and fee bps.\\n    function getDefaultRoyaltyInfo() external view returns (address, uint16);\\n}\\n\\ninterface IRestrictedRoyaltyV0 {\\n    /// @dev Lets a module admin update the royalty bps and recipient.\\n    function setDefaultRoyaltyInfo(address _royaltyRecipient, uint256 _royaltyBps) external;\\n\\n    /// @dev Lets a module admin set the royalty recipient for a particular token Id.\\n    function setRoyaltyInfoForToken(uint256 tokenId, address recipient, uint256 bps) external;\\n}\\n\\ninterface IRestrictedRoyaltyV1 is IRestrictedRoyaltyV0 {\\n    /// @dev Emitted when royalty info is updated.\\n    event DefaultRoyalty(address newRoyaltyRecipient, uint256 newRoyaltyBps);\\n    /// @dev Emitted when royalty recipient for tokenId is set\\n    event RoyaltyForToken(uint256 indexed tokenId, address royaltyRecipient, uint256 royaltyBps);\\n}\\n\\ninterface IRestrictedRoyaltyV2 is IRestrictedRoyaltyV1 {\\n    /// @dev Emitted when the operator filter is updated.\\n    event OperatorFilterStatusUpdated(bool enabled);\\n\\n    /// @dev allows an admin to enable / disable the operator filterer.\\n    function setOperatorFiltererStatus(bool _enabled) external;\\n}\\n\\ninterface IPublicOperatorFilterToggleV0 {\\n    function operatorRestriction() external view returns (bool);\\n}\\n\\ninterface IPublicOperatorFilterToggleV1 {\\n    function getOperatorRestriction() external view returns (bool);\\n}\\n\\ninterface IRestrictedOperatorFilterToggleV0 {\\n    event OperatorRestriction(bool _restriction);\\n\\n    function setOperatorRestriction(bool _restriction) external;\\n}\\n\\ninterface IRestrictedOperatorFiltererV0 {\\n    event OperatorFiltererUpdated(bytes32 _operatorFiltererId);\\n\\n    function setOperatorFilterer(bytes32 _operatorFiltererId) external;\\n}\\n\"\r\n    },\r\n    \"contracts/aspen/api/standard/IERC1155.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\n\\npragma solidity ^0.8;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155Upgradeable.sol\\\";\\n\\ninterface IERC1155V0 is IERC1155Upgradeable {}\\n\\ninterface IERC1155V1 is IERC1155Upgradeable {\\n    function burn(address account, uint256 id, uint256 value) external;\\n\\n    function burnBatch(address account, uint256[] memory ids, uint256[] memory values) external;\\n}\\n\\ninterface IERC1155V2 is IERC1155V1 {\\n    function name() external returns (string memory);\\n\\n    function symbol() external returns (string memory);\\n}\\n\\ninterface IERC1155V3 is IERC1155V1 {\\n    function name() external view returns (string memory);\\n\\n    function symbol() external view returns (string memory);\\n}\\n\\ninterface IERC1155V4 is IERC1155V3 {\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    function balanceOfBatch(address[] memory accounts, uint256[] memory ids) external view returns (uint256[] memory);\\n\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes memory data) external;\\n\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) external;\\n}\\n\\ninterface IERC1155V5 {\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    function balanceOfBatch(address[] memory accounts, uint256[] memory ids) external view returns (uint256[] memory);\\n\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes memory data) external;\\n\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) external;\\n}\\n\\ninterface IERC1155MetadataURIV0 {\\n    /// @dev Returns the URI for a given tokenId.\\n    function uri(uint256 _tokenId) external view returns (string memory);\\n}\\n\\ninterface IERC1155BurnableV0 {\\n    function burn(address account, uint256 id, uint256 value) external;\\n\\n    function burnBatch(address account, uint256[] memory ids, uint256[] memory values) external;\\n}\\n\\ninterface IERC1155NameSymbolV0 {\\n    function name() external view returns (string memory);\\n\\n    function symbol() external view returns (string memory);\\n}\\n\\ninterface IERC1155SupplyV0 is IERC1155V0 {\\n    /**\\n     * @dev Total amount of tokens in with a given id.\\n     */\\n    function totalSupply(uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev Indicates whether any token exist with a given id, or not.\\n     */\\n    function exists(uint256 id) external view returns (bool);\\n}\\n\\ninterface IERC1155SupplyV1 is IERC1155SupplyV0 {\\n    /**\\n     * @dev Amount of unique tokens minted.\\n     */\\n    function getLargestTokenId() external view returns (uint256);\\n}\\n\\ninterface IERC1155SupplyV2 is IERC1155V1 {\\n    /**\\n     * @dev Total amount of tokens in with a given id.\\n     */\\n    function totalSupply(uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev Indicates whether any token exist with a given id, or not.\\n     */\\n    function exists(uint256 id) external view returns (bool);\\n\\n    /**\\n     * @dev Amount of unique tokens minted.\\n     */\\n    function getLargestTokenId() external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/aspen/api/standard/IERC2981.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\n\\npragma solidity ^0.8;\\n\\ninterface IERC2981V0 {\\n    /**\\n     * @dev Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of\\n     * exchange. The royalty amount is denominated and should be payed in that same unit of exchange.\\n     */\\n    function royaltyInfo(\\n        uint256 tokenId,\\n        uint256 salePrice\\n    ) external view returns (address receiver, uint256 royaltyAmount);\\n}\\n\"\r\n    },\r\n    \"contracts/aspen/drop/AspenERC721DropLogic.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8;\\n\\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\\n//                                                                                                                                           //\\n//                      _'                    AAA                                                                                            //\\n//                    !jz_                   A:::A                                                                                           //\\n//                 ;Lzzzz-                  A:::::A                                                                                          //\\n//              '1zzzzxzz'                 A:::::::A                                                                                         //\\n//            !xzzzzzzi~                  A:::::::::A             ssssssssss   ppppp   ppppppppp       eeeeeeeeeeee    nnnn  nnnnnnnn        //\\n//         ;izzzzzzj^`                   A:::::A:::::A          ss::::::::::s  p::::ppp:::::::::p    ee::::::::::::ee  n:::nn::::::::nn      //\\n//              `;^.`````               A:::::A A:::::A       ss:::::::::::::s p:::::::::::::::::p  e::::::eeeee:::::een::::::::::::::nn     //\\n//              -;;;;;;;-              A:::::A   A:::::A      s::::::ssss:::::spp::::::ppppp::::::pe::::::e     e:::::enn:::::::::::::::n    //\\n//           .;;;;;;;_                A:::::A     A:::::A      s:::::s  ssssss  p:::::p     p:::::pe:::::::eeeee::::::e  n:::::nnnn:::::n    //\\n//         ;;;;;;;;`                 A:::::AAAAAAAAA:::::A       s::::::s       p:::::p     p:::::pe:::::::::::::::::e   n::::n    n::::n    //\\n//      _;;;;;;;'                   A:::::::::::::::::::::A         s::::::s    p:::::p     p:::::pe::::::eeeeeeeeeee    n::::n    n::::n    //\\n//            ;{jjjjjjjjj          A:::::AAAAAAAAAAAAA:::::A  ssssss   s:::::s  p:::::p    p::::::pe:::::::e             n::::n    n::::n    //\\n//         `+IIIVVVVVVVVI`        A:::::A             A:::::A s:::::ssss::::::s p:::::ppppp:::::::pe::::::::e            n::::n    n::::n    //\\n//       ^sIVVVVVVVVVVVVI`       A:::::A               A:::::As::::::::::::::s  p::::::::::::::::p  e::::::::eeeeeeee    n::::n    n::::n    //\\n//    ~xIIIVVVVVVVVVVVVVI`      A:::::A                 A:::::As:::::::::::ss   p::::::::::::::pp    ee:::::::::::::e    n::::n    n::::n    //\\n//  -~~~;;;;;;;;;;;;;;;;;      AAAAAAA                   AAAAAAAsssssssssss     p::::::pppppppp        eeeeeeeeeeeeee    nnnnnn    nnnnnn    //\\n//                                                                              p:::::p                                                      //\\n//                                                                              p:::::p                                                      //\\n//                                                                             p:::::::p                                                     //\\n//                                                                             p:::::::p                                                     //\\n//                                                                             p:::::::p                                                     //\\n//                                                                             ppppppppp                                                     //\\n//                                                                                                                                           //\\n//  Website: https://aspenft.io/                                                                                                             //\\n//  Twitter: https://twitter.com/aspenft                                                                                                     //\\n//                                                                                                                                           //\\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol\\\";\\n\\nimport \\\"./lib/CurrencyTransferLib.sol\\\";\\nimport \\\"./lib/MerkleProof.sol\\\";\\nimport \\\"./types/DropERC721DataTypes.sol\\\";\\nimport \\\"./../api/standard/IERC1155.sol\\\";\\nimport \\\"./../api/royalties/IRoyalty.sol\\\";\\nimport \\\"../api/config/IGlobalConfig.sol\\\";\\nimport \\\"../api/errors/IDropErrors.sol\\\";\\n\\nlibrary AspenERC721DropLogic {\\n    using StringsUpgradeable for uint256;\\n    using AspenERC721DropLogic for DropERC721DataTypes.ClaimData;\\n    using CountersUpgradeable for CountersUpgradeable.Counter;\\n\\n    uint256 private constant MAX_UINT256 = 2 ** 256 - 1;\\n    /// @dev Max basis points (bps) in Aspen system.\\n    uint256 public constant MAX_BPS = 10_000;\\n    /// @dev Offset for token IDs.\\n    uint8 public constant TOKEN_INDEX_OFFSET = 1;\\n\\n    struct InternalClaim {\\n        bool validMerkleProof;\\n        uint256 merkleProofIndex;\\n        uint256 activeConditionId;\\n        uint256 tokenIdToClaim;\\n        bytes32 phaseId;\\n        address saleRecipient;\\n        address feeReceiver;\\n        uint256 claimFee;\\n        uint256 claimAmount;\\n        address collectorFeeCurrency;\\n        uint256 collectorFee;\\n    }\\n\\n    struct ClaimExecutionData {\\n        uint256 quantity;\\n        address currency;\\n        uint256 pricePerToken;\\n        bytes32[] proofs;\\n        uint256 proofMaxQuantityPerTransaction;\\n    }\\n\\n    struct ClaimFeesRequestData {\\n        IGlobalConfigV1 aspenConfig;\\n        address msgSender;\\n        address owner;\\n    }\\n\\n    struct ClaimPaymentReponse {\\n        address saleRecipient;\\n        address feeReceiver;\\n        uint256 claimAmount;\\n        uint256 claimFee;\\n        address collectorFeeCurrency;\\n        uint256 collectorFee;\\n    }\\n\\n    struct ClaimFeeDetails {\\n        address claimFeeReceiver;\\n        address claimCurrency;\\n        uint256 claimPrice;\\n        uint256 claimFee;\\n        address collectorFeeReceiver;\\n        address collectorFeeCurrency;\\n        uint256 collectorFee;\\n    }\\n\\n    function setClaimConditions(\\n        DropERC721DataTypes.ClaimData storage claimData,\\n        IDropClaimConditionV1.ClaimCondition[] calldata _phases,\\n        bool _resetClaimEligibility\\n    ) public {\\n        uint256 existingStartIndex = claimData.claimCondition.currentStartId;\\n        uint256 existingPhaseCount = claimData.claimCondition.count;\\n\\n        uint256 newStartIndex = existingStartIndex;\\n        if (_resetClaimEligibility) {\\n            newStartIndex = existingStartIndex + existingPhaseCount;\\n        }\\n\\n        claimData.claimCondition.count = _phases.length;\\n        claimData.claimCondition.currentStartId = newStartIndex;\\n\\n        uint256 lastConditionStartTimestamp;\\n        bytes32[] memory phaseIds = new bytes32[](_phases.length);\\n        for (uint256 i = 0; i < _phases.length; i++) {\\n            if (!(i == 0 || lastConditionStartTimestamp < _phases[i].startTimestamp))\\n                revert IDropErrorsV3.InvalidTimetamp();\\n\\n            for (uint256 j = 0; j < phaseIds.length; j++) {\\n                if (phaseIds[j] == _phases[i].phaseId) revert IDropErrorsV3.InvalidPhaseId(_phases[i].phaseId);\\n                if (i == j) phaseIds[i] = _phases[i].phaseId;\\n            }\\n\\n            uint256 supplyClaimedAlready = claimData.claimCondition.phases[newStartIndex + i].supplyClaimed;\\n\\n            if (_isOutOfLimits(_phases[i].maxClaimableSupply, supplyClaimedAlready))\\n                revert IDropErrorsV3.CrossedLimitMaxClaimableSupply(\\n                    _phases[i].maxClaimableSupply - supplyClaimedAlready\\n                );\\n\\n            claimData.claimCondition.phases[newStartIndex + i] = _phases[i];\\n            claimData.claimCondition.phases[newStartIndex + i].supplyClaimed = supplyClaimedAlready;\\n            if (_phases[i].maxClaimableSupply == 0)\\n                claimData.claimCondition.phases[newStartIndex + i].maxClaimableSupply = MAX_UINT256;\\n\\n            lastConditionStartTimestamp = _phases[i].startTimestamp;\\n        }\\n\\n        /**\\n         *  Gas refunds (as much as possible)\\n         *\\n         *  If `_resetClaimEligibility == true`, we assign completely new UIDs to the claim\\n         *  conditions in `_phases`. So, we delete claim conditions with UID < `newStartIndex`.\\n         *\\n         *  If `_resetClaimEligibility == false`, and there are more existing claim conditions\\n         *  than in `_phases`, we delete the existing claim conditions that don't get replaced\\n         *  by the conditions in `_phases`.\\n         */\\n        if (_resetClaimEligibility) {\\n            for (uint256 i = existingStartIndex; i < newStartIndex; i++) {\\n                delete claimData.claimCondition.phases[i];\\n            }\\n        } else {\\n            if (existingPhaseCount > _phases.length) {\\n                for (uint256 i = _phases.length; i < existingPhaseCount; i++) {\\n                    delete claimData.claimCondition.phases[newStartIndex + i];\\n                }\\n            }\\n        }\\n    }\\n\\n    function executeClaim(\\n        DropERC721DataTypes.ClaimData storage claimData,\\n        ClaimExecutionData calldata claimExecutionData,\\n        ClaimFeesRequestData calldata claimFeesRequestData\\n    ) public returns (uint256[] memory tokens, InternalClaim memory internalData) {\\n        internalData.tokenIdToClaim = claimData.nextTokenIdToClaim;\\n        internalData.phaseId = claimData.claimCondition.phases[internalData.activeConditionId].phaseId;\\n\\n        (\\n            internalData.activeConditionId,\\n            internalData.validMerkleProof,\\n            internalData.merkleProofIndex\\n        ) = fullyVerifyClaim(\\n            claimData,\\n            claimFeesRequestData.msgSender,\\n            claimExecutionData.quantity,\\n            claimExecutionData.currency,\\n            claimExecutionData.pricePerToken,\\n            claimExecutionData.proofs,\\n            claimExecutionData.proofMaxQuantityPerTransaction\\n        );\\n\\n        // If there's a price, collect price.\\n        ClaimPaymentReponse memory claimPaymentResponse = collectClaimPrice(\\n            claimData,\\n            claimFeesRequestData,\\n            claimExecutionData.quantity,\\n            claimExecutionData.currency,\\n            claimExecutionData.pricePerToken\\n        );\\n        internalData.saleRecipient = claimPaymentResponse.saleRecipient;\\n        internalData.claimAmount = claimPaymentResponse.claimAmount;\\n        internalData.feeReceiver = claimPaymentResponse.feeReceiver;\\n        internalData.claimFee = claimPaymentResponse.claimFee;\\n        internalData.collectorFee = claimPaymentResponse.collectorFee;\\n        internalData.collectorFeeCurrency = claimPaymentResponse.collectorFeeCurrency;\\n\\n        // Book-keeping before the calling contract does the actual transfer and mint the relevant NFTs to claimer.\\n        tokens = recordTransferClaimedTokens(\\n            claimData,\\n            internalData.activeConditionId,\\n            claimExecutionData.quantity,\\n            claimFeesRequestData.msgSender\\n        );\\n    }\\n\\n    /// @dev We make allowlist checks (i.e. verifyClaimMerkleProof) before verifying the claim's general\\n    ///     validity (i.e. verifyClaim) because we give precedence to the check of allow list quantity\\n    ///     restriction over the check of the general claim condition's quantityLimitPerTransaction\\n    ///     restriction.\\n    function fullyVerifyClaim(\\n        DropERC721DataTypes.ClaimData storage claimData,\\n        address _claimer,\\n        uint256 _quantity,\\n        address _currency,\\n        uint256 _pricePerToken,\\n        bytes32[] calldata _proofs,\\n        uint256 _proofMaxQuantityPerTransaction\\n    ) public view returns (uint256 activeConditionId, bool validMerkleProof, uint256 merkleProofIndex) {\\n        activeConditionId = getActiveClaimConditionId(claimData);\\n        // Verify inclusion in allowlist.\\n        (validMerkleProof, merkleProofIndex) = verifyClaimMerkleProof(\\n            claimData,\\n            activeConditionId,\\n            _claimer,\\n            _quantity,\\n            _proofs,\\n            _proofMaxQuantityPerTransaction\\n        );\\n\\n        verifyClaim(claimData, activeConditionId, _claimer, _quantity, _currency, _pricePerToken);\\n    }\\n\\n    function verifyClaimMerkleProof(\\n        DropERC721DataTypes.ClaimData storage claimData,\\n        uint256 _conditionId,\\n        address _claimer,\\n        uint256 _quantity,\\n        bytes32[] calldata _proofs,\\n        uint256 _proofMaxQuantityPerTransaction\\n    ) public view returns (bool validMerkleProof, uint256 merkleProofIndex) {\\n        IDropClaimConditionV1.ClaimCondition memory currentClaimPhase = claimData.claimCondition.phases[_conditionId];\\n\\n        if (currentClaimPhase.merkleRoot != bytes32(0)) {\\n            (validMerkleProof, merkleProofIndex) = MerkleProof.verify(\\n                _proofs,\\n                currentClaimPhase.merkleRoot,\\n                keccak256(abi.encodePacked(_claimer, _proofMaxQuantityPerTransaction))\\n            );\\n\\n            if (!validMerkleProof) revert IDropErrorsV3.InvalidMerkleProof();\\n            if (\\n                !(_proofMaxQuantityPerTransaction == 0 ||\\n                    _quantity <=\\n                    _proofMaxQuantityPerTransaction -\\n                        claimData.claimCondition.userClaims[_conditionId][_claimer].claimedBalance)\\n            ) revert IDropErrorsV3.InvalidMaxQuantityProof();\\n        }\\n    }\\n\\n    /// @dev Checks a request to claim NFTs against the active claim condition's criteria.\\n    function verifyClaim(\\n        DropERC721DataTypes.ClaimData storage claimData,\\n        uint256 _conditionId,\\n        address _claimer,\\n        uint256 _quantity,\\n        address _currency,\\n        uint256 _pricePerToken\\n    ) public view {\\n        IDropClaimConditionV1.ClaimCondition memory currentClaimPhase = claimData.claimCondition.phases[_conditionId];\\n\\n        if (!(_currency == currentClaimPhase.currency && _pricePerToken == currentClaimPhase.pricePerToken)) {\\n            revert IDropErrorsV3.InvalidPrice();\\n        }\\n        verifyClaimQuantity(claimData, _conditionId, _claimer, _quantity);\\n        verifyClaimTimestamp(claimData, _conditionId, _claimer);\\n    }\\n\\n    function verifyClaimQuantity(\\n        DropERC721DataTypes.ClaimData storage claimData,\\n        uint256 _conditionId,\\n        address _claimer,\\n        uint256 _quantity\\n    ) public view {\\n        IDropClaimConditionV1.ClaimCondition memory currentClaimPhase = claimData.claimCondition.phases[_conditionId];\\n        if (_quantity == 0) {\\n            revert IDropErrorsV3.InvalidQuantity();\\n        }\\n        // If we're checking for an allowlist quantity restriction, ignore the general quantity restriction.\\n        if (!(_quantity > 0 && _quantity <= currentClaimPhase.quantityLimitPerTransaction)) {\\n            revert IDropErrorsV3.CrossedLimitQuantityPerTransaction(currentClaimPhase.quantityLimitPerTransaction);\\n        }\\n        if (!(currentClaimPhase.supplyClaimed + _quantity <= currentClaimPhase.maxClaimableSupply)) {\\n            revert IDropErrorsV3.CrossedLimitMaxClaimableSupply(\\n                currentClaimPhase.maxClaimableSupply - currentClaimPhase.supplyClaimed\\n            );\\n        }\\n        // nextTokenIdToMint is the supremum of all tokens currently lazy minted so this is just checking we are no\\n        // trying to claim a token that has not yet been lazyminted (therefore has no URI)\\n        if (!(claimData.nextTokenIdToClaim + _quantity <= claimData.nextTokenIdToMint)) {\\n            revert IDropErrorsV3.CrossedLimitLazyMintedTokens(\\n                claimData.nextTokenIdToMint - claimData.nextTokenIdToClaim\\n            );\\n        }\\n        if (_isOutOfLimits(claimData.maxTotalSupply, claimData.nextTokenIdToClaim - TOKEN_INDEX_OFFSET + _quantity)) {\\n            revert IDropErrorsV3.CrossedLimitMaxTotalSupply(\\n                claimData.maxTotalSupply - (claimData.nextTokenIdToClaim - TOKEN_INDEX_OFFSET)\\n            );\\n        }\\n        if (_isOutOfLimits(claimData.maxWalletClaimCount, claimData.walletClaimCount[_claimer] + _quantity)) {\\n            revert IDropErrorsV3.CrossedLimitMaxWalletClaimCount(\\n                claimData.maxWalletClaimCount - claimData.walletClaimCount[_claimer]\\n            );\\n        }\\n    }\\n\\n    function verifyClaimTimestamp(\\n        DropERC721DataTypes.ClaimData storage claimData,\\n        uint256 _conditionId,\\n        address _claimer\\n    ) public view {\\n        (uint256 lastClaimTimestamp, uint256 nextValidClaimTimestamp) = getClaimTimestamp(\\n            claimData,\\n            _conditionId,\\n            _claimer\\n        );\\n        if (!(lastClaimTimestamp == 0 || block.timestamp >= nextValidClaimTimestamp))\\n            revert IDropErrorsV3.InvalidTime();\\n    }\\n\\n    function issueWithinPhase(\\n        DropERC721DataTypes.ClaimData storage claimData,\\n        address _receiver,\\n        uint256 _quantity\\n    ) public returns (uint256[] memory tokenIds) {\\n        uint256 currentClaimId = getActiveClaimConditionId(claimData);\\n        verifyClaimQuantity(claimData, currentClaimId, _receiver, _quantity);\\n        tokenIds = recordTransferClaimedTokens(claimData, currentClaimId, _quantity, _receiver);\\n    }\\n\\n    function transferTokens(\\n        DropERC721DataTypes.ClaimData storage claimData,\\n        uint256 _quantityBeingClaimed\\n    ) public returns (uint256[] memory tokenIds) {\\n        uint256 tokenIdToClaim = claimData.nextTokenIdToClaim;\\n\\n        tokenIds = new uint256[](_quantityBeingClaimed);\\n\\n        for (uint256 i = 0; i < _quantityBeingClaimed; i += 1) {\\n            tokenIds[i] = tokenIdToClaim;\\n            tokenIdToClaim += 1;\\n        }\\n\\n        claimData.nextTokenIdToClaim = tokenIdToClaim;\\n    }\\n\\n    /// @dev Collects and distributes the primary sale value of NFTs being claimed.\\n    function collectClaimPrice(\\n        DropERC721DataTypes.ClaimData storage claimData,\\n        ClaimFeesRequestData calldata claimFeesRequestData,\\n        uint256 _quantityToClaim,\\n        address _currency,\\n        uint256 _pricePerToken\\n    ) internal returns (ClaimPaymentReponse memory paymentResponse) {\\n        ClaimFeeDetails memory claimFees = getAllClaimFees(\\n            claimFeesRequestData.aspenConfig,\\n            claimFeesRequestData.owner,\\n            _currency,\\n            _quantityToClaim,\\n            _pricePerToken\\n        );\\n\\n        if (\\n            // if the claim currency and collector fee currency is in native token, we expect the sum of those to be the msg.value\\n            (claimFees.claimCurrency == CurrencyTransferLib.NATIVE_TOKEN &&\\n                claimFees.collectorFeeCurrency == CurrencyTransferLib.NATIVE_TOKEN &&\\n                msg.value != (claimFees.claimPrice + claimFees.collectorFee)) ||\\n            //  if only the claim currency is in native token, we expect only the claim price to be the msg.value\\n            (claimFees.claimCurrency == CurrencyTransferLib.NATIVE_TOKEN &&\\n                claimFees.collectorFeeCurrency != CurrencyTransferLib.NATIVE_TOKEN &&\\n                msg.value != claimFees.claimPrice) ||\\n            //  if only the collector fee currency is in native token, we expect only the collector fee to be the msg.value\\n            (claimFees.claimCurrency != CurrencyTransferLib.NATIVE_TOKEN &&\\n                claimFees.collectorFeeCurrency == CurrencyTransferLib.NATIVE_TOKEN &&\\n                msg.value != claimFees.collectorFee)\\n        ) revert IDropErrorsV3.InvalidPaymentAmount();\\n\\n        // For claim fees\\n        if (claimFees.claimFee > 0 && claimFees.claimFeeReceiver != address(0)) {\\n            CurrencyTransferLib.transferCurrency(\\n                claimFees.claimCurrency,\\n                claimFeesRequestData.msgSender,\\n                claimFees.claimFeeReceiver,\\n                claimFees.claimFee\\n            );\\n        }\\n\\n        // Actual payment to drop contract sales recipient\\n        if (claimFees.claimPrice - claimFees.claimFee > 0 && claimData.primarySaleRecipient != address(0)) {\\n            CurrencyTransferLib.transferCurrency(\\n                claimFees.claimCurrency,\\n                claimFeesRequestData.msgSender,\\n                claimData.primarySaleRecipient,\\n                claimFees.claimPrice - claimFees.claimFee\\n            );\\n        }\\n        // For collector fees\\n        if (claimFees.collectorFee > 0 && claimFees.collectorFeeReceiver != address(0)) {\\n            CurrencyTransferLib.transferCurrency(\\n                claimFees.collectorFeeCurrency,\\n                claimFeesRequestData.msgSender,\\n                claimFees.collectorFeeReceiver,\\n                claimFees.collectorFee\\n            );\\n        }\\n\\n        return\\n            ClaimPaymentReponse(\\n                claimData.primarySaleRecipient,\\n                claimFees.claimFeeReceiver,\\n                claimFees.claimPrice - claimFees.claimFee,\\n                claimFees.claimFee,\\n                claimFees.collectorFeeCurrency,\\n                claimFees.collectorFee\\n            );\\n    }\\n\\n    function getAllClaimFees(\\n        IGlobalConfigV1 _aspenConfig,\\n        address _owner,\\n        address _claimCurrency,\\n        uint256 _quantityToClaim,\\n        uint256 _pricePerToken\\n    ) internal view returns (ClaimFeeDetails memory claimFeeDetails) {\\n        (address _claimFeeReceiver, uint256 _claimFeeBPS) = _aspenConfig.getClaimFee(_owner);\\n        (address _collectorFeeReceiver, uint256 _collectorFee, address _collectorFeeCurrency) = _aspenConfig\\n            .getCollectorFee(_owner);\\n        uint256 claimPrice = _quantityToClaim * _pricePerToken;\\n        uint256 collectorFee = _quantityToClaim * _collectorFee;\\n\\n        return\\n            ClaimFeeDetails(\\n                _claimFeeReceiver,\\n                _claimCurrency,\\n                claimPrice, // claimPrice = _quantityToClaim * _pricePerToken\\n                (claimPrice * _claimFeeBPS) / MAX_BPS, // claimFee\\n                _collectorFeeReceiver,\\n                _collectorFeeCurrency,\\n                collectorFee\\n            );\\n    }\\n\\n    /// @dev Book-keeping before the calling contract does the actual transfer and mint the relevant NFTs to claimer.\\n    function recordTransferClaimedTokens(\\n        DropERC721DataTypes.ClaimData storage claimData,\\n        uint256 _conditionId,\\n        uint256 _quantityBeingClaimed,\\n        address msgSender\\n    ) public returns (uint256[] memory tokenIds) {\\n        // Update the supply minted under mint condition.\\n        claimData.claimCondition.phases[_conditionId].supplyClaimed += _quantityBeingClaimed;\\n\\n        // if transfer claimed tokens is called when `to != msg.sender`, it'd use msg.sender's limits.\\n        // behavior would be similar to `msg.sender` mint for itself, then transfer to `_to`.\\n        claimData.claimCondition.userClaims[_conditionId][msgSender].lastClaimTimestamp = block.timestamp;\\n        claimData.claimCondition.userClaims[_conditionId][msgSender].claimedBalance += _quantityBeingClaimed;\\n        claimData.walletClaimCount[msgSender] += _quantityBeingClaimed;\\n\\n        tokenIds = transferTokens(claimData, _quantityBeingClaimed);\\n    }\\n\\n    function verifyBatch(DropERC721DataTypes.ClaimData storage claimData, uint256[] memory _quantities) public view {\\n        uint256 totalQuantity = 0;\\n        for (uint256 i = 0; i < _quantities.length; i += 1) {\\n            totalQuantity += _quantities[i];\\n        }\\n        uint256 nextTokenIdToMint = claimData.nextTokenIdToClaim + totalQuantity;\\n        verifyMaxTotalSupply(claimData, nextTokenIdToMint);\\n    }\\n\\n    function verifyBatchForTokenURI(\\n        DropERC721DataTypes.ClaimData storage claimData,\\n        address[] memory _wallets\\n    ) public view {\\n        uint256 totalQuantity = 0;\\n        for (uint256 i = 0; i < _wallets.length; i += 1) {\\n            totalQuantity += 1;\\n        }\\n        uint256 nextTokenIdToMint = claimData.nextTokenIdToClaim + totalQuantity;\\n        verifyMaxTotalSupply(claimData, nextTokenIdToMint);\\n    }\\n\\n    function verifyIssue(\\n        DropERC721DataTypes.ClaimData storage claimData,\\n        uint256 _quantity\\n    ) public returns (uint256[] memory tokenIds) {\\n        if (_quantity == 0) {\\n            revert IDropErrorsV3.InvalidQuantity();\\n        }\\n        uint256 nextTokenIdToMint = claimData.nextTokenIdToClaim + _quantity;\\n        if (nextTokenIdToMint > claimData.nextTokenIdToMint) {\\n            revert IDropErrorsV3.CrossedLimitLazyMintedTokens(\\n                claimData.nextTokenIdToMint - claimData.nextTokenIdToClaim\\n            );\\n        }\\n        verifyMaxTotalSupply(claimData, nextTokenIdToMint);\\n        tokenIds = transferTokens(claimData, _quantity);\\n    }\\n\\n    function verifyMaxTotalSupply(\\n        DropERC721DataTypes.ClaimData storage claimData,\\n        uint256 nextTokenIdToMint\\n    ) public view {\\n        if (claimData.maxTotalSupply != 0 && nextTokenIdToMint - TOKEN_INDEX_OFFSET > claimData.maxTotalSupply) {\\n            revert IDropErrorsV3.CrossedLimitMaxTotalSupply(\\n                claimData.maxTotalSupply - (claimData.nextTokenIdToClaim - TOKEN_INDEX_OFFSET)\\n            );\\n        }\\n    }\\n\\n    function setTokenURI(\\n        DropERC721DataTypes.ClaimData storage claimData,\\n        uint256 _tokenId,\\n        string memory _tokenURI,\\n        bool _isPermanent\\n    ) public {\\n        // Interpret empty string as unsetting tokenURI\\n        if (bytes(_tokenURI).length == 0) {\\n            claimData.tokenURIs[_tokenId].sequenceNumber = 0;\\n            return;\\n        }\\n        // Bump the sequence first\\n        claimData.uriSequenceCounter.increment();\\n        claimData.tokenURIs[_tokenId].uri = _tokenURI;\\n        claimData.tokenURIs[_tokenId].sequenceNumber = claimData.uriSequenceCounter.current();\\n        claimData.tokenURIs[_tokenId].isPermanent = _isPermanent;\\n    }\\n\\n    function tokenURI(\\n        DropERC721DataTypes.ClaimData storage claimData,\\n        uint256 _tokenId\\n    ) public view returns (string memory) {\\n        // Try to fetch possibly overridden tokenURI\\n        DropERC721DataTypes.SequencedURI storage _tokenURI = claimData.tokenURIs[_tokenId];\\n\\n        for (uint256 i = 0; i < claimData.baseURIIndices.length; i += 1) {\\n            if (_tokenId < claimData.baseURIIndices[i] + TOKEN_INDEX_OFFSET) {\\n                DropERC721DataTypes.SequencedURI storage _baseURI = claimData.baseURI[\\n                    claimData.baseURIIndices[i] + TOKEN_INDEX_OFFSET\\n                ];\\n                if (_tokenURI.sequenceNumber > _baseURI.sequenceNumber || _tokenURI.isPermanent) {\\n                    // If the specifically set tokenURI is fresher than the baseURI OR\\n                    // if the tokenURI is permanet then return that (it is in-force)\\n                    return _tokenURI.uri;\\n                }\\n                // Otherwise either there is no override (sequenceNumber == 0) or the baseURI is fresher, so return the\\n                // baseURI-derived tokenURI\\n                return string(abi.encodePacked(_baseURI.uri, _tokenId.toString()));\\n            }\\n        }\\n        return \\\"\\\";\\n    }\\n\\n    function lazyMint(\\n        DropERC721DataTypes.ClaimData storage claimData,\\n        uint256 _amount,\\n        string calldata _baseURIForTokens\\n    ) public returns (uint256 startId, uint256 baseURIIndex) {\\n        if (_amount == 0) revert IDropErrorsV3.InvalidNoOfTokenIds();\\n        claimData.uriSequenceCounter.increment();\\n        startId = claimData.nextTokenIdToMint;\\n        baseURIIndex = startId + _amount;\\n\\n        claimData.nextTokenIdToMint = baseURIIndex;\\n        claimData.baseURI[baseURIIndex].uri = _baseURIForTokens;\\n        claimData.baseURI[baseURIIndex].sequenceNumber = claimData.uriSequenceCounter.current();\\n        claimData.baseURI[baseURIIndex].amountOfTokens = _amount;\\n        claimData.baseURIIndices.push(baseURIIndex - TOKEN_INDEX_OFFSET);\\n    }\\n\\n    /// @dev Returns basic info for claim data\\n    function getClaimData(\\n        DropERC721DataTypes.ClaimData storage claimData\\n    ) public view returns (uint256 nextTokenIdToMint, uint256 maxTotalSupply, uint256 maxWalletClaimCount) {\\n        nextTokenIdToMint = claimData.nextTokenIdToMint;\\n        maxTotalSupply = claimData.maxTotalSupply;\\n        maxWalletClaimCount = claimData.maxWalletClaimCount;\\n    }\\n\\n    /// @dev Returns an array with all the claim conditions.\\n    function getClaimConditions(\\n        DropERC721DataTypes.ClaimData storage claimData\\n    ) public view returns (IDropClaimConditionV1.ClaimCondition[] memory conditions) {\\n        uint256 phaseCount = claimData.claimCondition.count;\\n        IDropClaimConditionV1.ClaimCondition[] memory _conditions = new IDropClaimConditionV1.ClaimCondition[](\\n            phaseCount\\n        );\\n        for (\\n            uint256 i = claimData.claimCondition.currentStartId;\\n            i < claimData.claimCondition.currentStartId + phaseCount;\\n            i++\\n        ) {\\n            _conditions[i - claimData.claimCondition.currentStartId] = claimData.claimCondition.phases[i];\\n        }\\n        conditions = _conditions;\\n    }\\n\\n    /// @dev Returns the claim condition at the given uid.\\n    function getClaimConditionById(\\n        DropERC721DataTypes.ClaimData storage claimData,\\n        uint256 _conditionId\\n    ) external view returns (IDropClaimConditionV1.ClaimCondition memory condition) {\\n        condition = claimData.claimCondition.phases[_conditionId];\\n    }\\n\\n    /// @dev Returns the user specific limits related to the current active claim condition\\n    function getUserClaimConditions(\\n        DropERC721DataTypes.ClaimData storage claimData,\\n        address _claimer\\n    )\\n        public\\n        view\\n        returns (\\n            uint256 conditionId,\\n            uint256 walletClaimedCount,\\n            uint256 walletClaimedCountInPhase,\\n            uint256 lastClaimTimestamp,\\n            uint256 nextValidClaimTimestamp\\n        )\\n    {\\n        conditionId = getActiveClaimConditionId(claimData);\\n        (lastClaimTimestamp, nextValidClaimTimestamp) = getClaimTimestamp(claimData, conditionId, _claimer);\\n        walletClaimedCount = claimData.walletClaimCount[_claimer];\\n        walletClaimedCountInPhase = claimData.claimCondition.userClaims[conditionId][_claimer].claimedBalance;\\n    }\\n\\n    function getActiveClaimConditions(\\n        DropERC721DataTypes.ClaimData storage claimData\\n    )\\n        public\\n        view\\n        returns (\\n            IDropClaimConditionV1.ClaimCondition memory condition,\\n            uint256 conditionId,\\n            uint256 walletMaxClaimCount,\\n            uint256 maxTotalSupply\\n        )\\n    {\\n        conditionId = getActiveClaimConditionId(claimData);\\n        condition = claimData.claimCondition.phases[conditionId];\\n        walletMaxClaimCount = claimData.maxWalletClaimCount;\\n        maxTotalSupply = claimData.maxTotalSupply;\\n    }\\n\\n    /// @dev Returns the current active claim condition ID.\\n    function getActiveClaimConditionId(DropERC721DataTypes.ClaimData storage claimData) public view returns (uint256) {\\n        for (\\n            uint256 i = claimData.claimCondition.currentStartId + claimData.claimCondition.count;\\n            i > claimData.claimCondition.currentStartId;\\n            i--\\n        ) {\\n            if (block.timestamp >= claimData.claimCondition.phases[i - 1].startTimestamp) {\\n                return i - 1;\\n            }\\n        }\\n\\n        revert IDropErrorsV3.NoActiveMintCondition();\\n    }\\n\\n    /// @dev Returns the timestamp for when a claimer is eligible for claiming NFTs again.\\n    function getClaimTimestamp(\\n        DropERC721DataTypes.ClaimData storage claimData,\\n        uint256 _conditionId,\\n        address _claimer\\n    ) public view returns (uint256 lastClaimTimestamp, uint256 nextValidClaimTimestamp) {\\n        lastClaimTimestamp = claimData.claimCondition.userClaims[_conditionId][_claimer].lastClaimTimestamp;\\n\\n        unchecked {\\n            nextValidClaimTimestamp =\\n                lastClaimTimestamp +\\n                claimData.claimCondition.phases[_conditionId].waitTimeInSecondsBetweenClaims;\\n\\n            if (nextValidClaimTimestamp < lastClaimTimestamp) {\\n                nextValidClaimTimestamp = type(uint256).max;\\n            }\\n        }\\n    }\\n\\n    /// @dev Returns the royalty recipient and bps for a particular token Id.\\n    function getRoyaltyInfoForToken(\\n        DropERC721DataTypes.ClaimData storage claimData,\\n        uint256 _tokenId\\n    ) public view returns (address, uint16) {\\n        IRoyaltyV0.RoyaltyInfo memory royaltyForToken = claimData.royaltyInfoForToken[_tokenId];\\n\\n        return\\n            royaltyForToken.recipient == address(0)\\n                ? (claimData.royaltyRecipient, uint16(claimData.royaltyBps))\\n                : (royaltyForToken.recipient, uint16(royaltyForToken.bps));\\n    }\\n\\n    /// @dev See ERC-2891 - Returns the royalty recipient and amount, given a tokenId and sale price.\\n    function royaltyInfo(\\n        DropERC721DataTypes.ClaimData storage claimData,\\n        uint256 tokenId,\\n        uint256 salePrice\\n    ) external view returns (address receiver, uint256 royaltyAmount) {\\n        (address recipient, uint256 bps) = getRoyaltyInfoForToken(claimData, tokenId);\\n        receiver = recipient;\\n        royaltyAmount = (salePrice * bps) / MAX_BPS;\\n    }\\n\\n    function setDefaultRoyaltyInfo(\\n        DropERC721DataTypes.ClaimData storage claimData,\\n        address _royaltyRecipient,\\n        uint256 _royaltyBps\\n    ) external {\\n        if (!(_royaltyBps <= MAX_BPS)) revert IDropErrorsV3.MaxBps();\\n        claimData.royaltyRecipient = _royaltyRecipient;\\n        claimData.royaltyBps = uint16(_royaltyBps);\\n    }\\n\\n    function setRoyaltyInfoForToken(\\n        DropERC721DataTypes.ClaimData storage claimData,\\n        uint256 _tokenId,\\n        address _recipient,\\n        uint256 _bps\\n    ) external {\\n        if (!(_bps <= MAX_BPS)) revert IDropErrorsV3.MaxBps();\\n        claimData.royaltyInfoForToken[_tokenId] = IRoyaltyV0.RoyaltyInfo({recipient: _recipient, bps: _bps});\\n    }\\n\\n    /// @dev Checks if a value is outside of a limit.\\n    /// @param _limit The limit to check against.\\n    /// @param _value The value to check.\\n    /// @return True if the value is there is a limit and it's outside of that limit.\\n    function _isOutOfLimits(uint256 _limit, uint256 _value) internal pure returns (bool) {\\n        return _limit != 0 && !(_value <= _limit);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/aspen/drop/interfaces/IWETH.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8;\\n\\ninterface IWETH {\\n    function deposit() external payable;\\n\\n    function withdraw(uint256 amount) external;\\n\\n    function transfer(address to, uint256 value) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/aspen/drop/lib/CurrencyTransferLib.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8;\\n\\n// Helper interfaces\\nimport {IWETH} from \\\"../interfaces/IWETH.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\n\\nlibrary CurrencyTransferLib {\\n    using SafeERC20Upgradeable for IERC20Upgradeable;\\n\\n    /// @dev The address interpreted as native token of the chain.\\n    address public constant NATIVE_TOKEN = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n\\n    /// @dev Transfers a given amount of currency.\\n    function transferCurrency(address _currency, address _from, address _to, uint256 _amount) internal {\\n        if (_amount == 0) {\\n            return;\\n        }\\n\\n        if (_currency == NATIVE_TOKEN) {\\n            safeTransferNativeToken(_to, _amount);\\n        } else {\\n            safeTransferERC20(_currency, _from, _to, _amount);\\n        }\\n    }\\n\\n    /// @dev Transfers a given amount of currency. (With native token wrapping)\\n    function transferCurrencyWithWrapper(\\n        address _currency,\\n        address _from,\\n        address _to,\\n        uint256 _amount,\\n        address _nativeTokenWrapper\\n    ) internal {\\n        if (_amount == 0) {\\n            return;\\n        }\\n\\n        if (_currency == NATIVE_TOKEN) {\\n            if (_from == address(this)) {\\n                // withdraw from weth then transfer withdrawn native token to recipient\\n                IWETH(_nativeTokenWrapper).withdraw(_amount);\\n                safeTransferNativeTokenWithWrapper(_to, _amount, _nativeTokenWrapper);\\n            } else if (_to == address(this)) {\\n                // store native currency in weth\\n                require(_amount == msg.value, \\\"msg.value != amount\\\");\\n                IWETH(_nativeTokenWrapper).deposit{value: _amount}();\\n            } else {\\n                safeTransferNativeTokenWithWrapper(_to, _amount, _nativeTokenWrapper);\\n            }\\n        } else {\\n            safeTransferERC20(_currency, _from, _to, _amount);\\n        }\\n    }\\n\\n    /// @dev Transfer `amount` of ERC20 token from `from` to `to`.\\n    function safeTransferERC20(address _currency, address _from, address _to, uint256 _amount) internal {\\n        if (_from == _to) {\\n            return;\\n        }\\n\\n        if (_from == address(this)) {\\n            IERC20Upgradeable(_currency).safeTransfer(_to, _amount);\\n        } else {\\n            IERC20Upgradeable(_currency).safeTransferFrom(_from, _to, _amount);\\n        }\\n    }\\n\\n    /// @dev Transfers `amount` of native token to `to`.\\n    function safeTransferNativeToken(address to, uint256 value) internal {\\n        // solhint-disable avoid-low-level-calls\\n        // slither-disable-next-line low-level-calls\\n        (bool success, ) = to.call{value: value}(\\\"\\\");\\n        require(success, \\\"native token transfer failed\\\");\\n    }\\n\\n    /// @dev Transfers `amount` of native token to `to`. (With native token wrapping)\\n    function safeTransferNativeTokenWithWrapper(address to, uint256 value, address _nativeTokenWrapper) internal {\\n        // solhint-disable avoid-low-level-calls\\n        // slither-disable-next-line low-level-calls\\n        (bool success, ) = to.call{value: value}(\\\"\\\");\\n        if (!success) {\\n            IWETH(_nativeTokenWrapper).deposit{value: value}();\\n            IERC20Upgradeable(_nativeTokenWrapper).safeTransfer(to, value);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/aspen/drop/lib/MerkleProof.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// Modified from https://github.com/OpenZeppelin/openzeppelin-contracts/blob/v4.3.0/contracts/utils/cryptography/MerkleProof.sol\\n// Copied from https://github.com/ensdomains/governance/blob/master/contracts/MerkleProof.sol\\n\\npragma solidity ^0.8;\\n\\n/**\\n * @dev These functions deal with verification of Merkle Trees proofs.\\n *\\n * The proofs can be generated using the JavaScript library\\n * https://github.com/miguelmota/merkletreejs[merkletreejs].\\n * Note: the hashing algorithm should be keccak256 and pair sorting should be enabled.\\n *\\n * See `test/utils/cryptography/MerkleProof.test.js` for some examples.\\n *\\n * Source: https://github.com/ensdomains/governance/blob/master/contracts/MerkleProof.sol\\n */\\nlibrary MerkleProof {\\n    /**\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\n     * defined by `root`. For this, a `proof` must be provided, containing\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\n     */\\n    function verify(bytes32[] memory proof, bytes32 root, bytes32 leaf) internal pure returns (bool, uint256) {\\n        bytes32 computedHash = leaf;\\n        uint256 index = 0;\\n\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            index *= 2;\\n            bytes32 proofElement = proof[i];\\n\\n            if (computedHash <= proofElement) {\\n                // Hash(current computed hash + current element of the proof)\\n                computedHash = keccak256(abi.encodePacked(computedHash, proofElement));\\n            } else {\\n                // Hash(current element of the proof + current computed hash)\\n                computedHash = keccak256(abi.encodePacked(proofElement, computedHash));\\n                index += 1;\\n            }\\n        }\\n\\n        // Check if the computed hash (root) is equal to the provided root\\n        return (computedHash == root, index);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/aspen/drop/types/DropERC721DataTypes.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol\\\";\\n\\nimport \\\"../../api/issuance/IDropClaimCondition.sol\\\";\\nimport \\\"../../api/royalties/IRoyalty.sol\\\";\\n\\ninterface DropERC721DataTypes {\\n    struct SequencedURI {\\n        /// @dev The URI with the token metadata.\\n        string uri;\\n        /// @dev The high-watermark sequence number a URI - used to tell if one URI is fresher than a another\\n        /// taken from the current value of uriSequenceCounter after it is incremented.\\n        uint256 sequenceNumber;\\n        /// @dev Indicates if a uri is permanent or not.\\n        bool isPermanent;\\n        /// @dev Indicates the number of tokens in this batch.\\n        uint256 amountOfTokens;\\n    }\\n\\n    struct ClaimData {\\n        /// @dev The set of all claim conditions, at any given moment.\\n        IDropClaimConditionV1.ClaimConditionList claimCondition;\\n        /// @dev The next token ID of the NFT that can be claimed.\\n        uint256 nextTokenIdToClaim;\\n        /// @dev Mapping from address => total number of NFTs a wallet has claimed.\\n        mapping(address => uint256) walletClaimCount;\\n        /// @dev The next token ID of the NFT to \\\"lazy mint\\\".\\n        uint256 nextTokenIdToMint;\\n        /// @dev Global max total supply of NFTs.\\n        uint256 maxTotalSupply;\\n        /// @dev The max number of NFTs a wallet can claim.\\n        uint256 maxWalletClaimCount;\\n        /// @dev The address that receives all primary sales value.\\n        address primarySaleRecipient;\\n        /// @dev The address that receives all platform fees from all sales.\\n        address platformFeeRecipient;\\n        /// @dev The % of primary sales collected as platform fees.\\n        uint16 platformFeeBps;\\n        /// @dev The recipient of who gets the royalty.\\n        address royaltyRecipient;\\n        /// @dev The (default) address that receives all royalty value.\\n        uint16 royaltyBps;\\n        /// @dev Mapping from token ID => royalty recipient and bps for tokens of the token ID.\\n        mapping(uint256 => IRoyaltyV0.RoyaltyInfo) royaltyInfoForToken;\\n        /// @dev Sequence number counter for the synchronisation of per-token URIs and baseURIs relative base on which\\n        /// was set most recently. Incremented on each URI-mutating action.\\n        CountersUpgradeable.Counter uriSequenceCounter;\\n        /// @dev One more than the Largest tokenId of each batch of tokens with the same baseURI\\n        uint256[] baseURIIndices;\\n        /// @dev Mapping from the 'base URI index' defined as the tokenId one more than the largest tokenId a batch of\\n        /// tokens which all same the same baseURI.\\n        /// Suppose we have two batches (and two baseURIs), with 3 and 4 tokens respectively, then in pictures we have:\\n        /// [baseURI1 | baseURI2]\\n        /// [ 0, 1, 2 | 3, 4, 5, 6]\\n        /// The baseURIIndices would be:\\n        /// [ 3, 7]\\n        mapping(uint256 => SequencedURI) baseURI;\\n        // Optional mapping for token URIs\\n        mapping(uint256 => SequencedURI) tokenURIs;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"availableQuantity\",\"type\":\"uint256\"}],\"name\":\"CrossedLimitLazyMintedTokens\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"availableQuantity\",\"type\":\"uint256\"}],\"name\":\"CrossedLimitMaxClaimableSupply\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxTotalSupplyLimit\",\"type\":\"uint256\"}],\"name\":\"CrossedLimitMaxTotalSupply\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"availableQuantity\",\"type\":\"uint256\"}],\"name\":\"CrossedLimitMaxWalletClaimCount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"quantityLimitPerTransaction\",\"type\":\"uint256\"}],\"name\":\"CrossedLimitQuantityPerTransaction\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidMaxQuantityProof\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidMerkleProof\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidNoOfTokenIds\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidPaymentAmount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"phaseId\",\"type\":\"bytes32\"}],\"name\":\"InvalidPhaseId\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidPrice\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidQuantity\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidTime\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidTimetamp\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MaxBps\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoActiveMintCondition\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MAX_BPS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TOKEN_INDEX_OFFSET\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "AspenERC721DropLogic", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "1", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}