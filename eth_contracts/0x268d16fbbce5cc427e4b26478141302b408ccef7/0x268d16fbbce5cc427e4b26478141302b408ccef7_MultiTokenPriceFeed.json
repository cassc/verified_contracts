{"SourceCode": "// File: @chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\ninterface AggregatorV3Interface {\r\n  function decimals() external view returns (uint8);\r\n\r\n  function description() external view returns (string memory);\r\n\r\n  function version() external view returns (uint256);\r\n\r\n  function latestAnswer() external view returns(int256);\r\n\r\n  function getRoundData(uint80 _roundId)\r\n    external\r\n    view\r\n    returns (\r\n      uint80 roundId,\r\n      int256 answer,\r\n      uint256 startedAt,\r\n      uint256 updatedAt,\r\n      uint80 answeredInRound\r\n    );\r\n\r\n  function latestRoundData()\r\n    external\r\n    view\r\n    returns (\r\n      uint80 roundId,\r\n      int256 answer,\r\n      uint256 startedAt,\r\n      uint256 updatedAt,\r\n      uint80 answeredInRound\r\n    );\r\n}\r\n\r\n// File: convertor.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\ninterface IAMPH{\r\n    function mint(address, uint256) external;\r\n    function totalSupply() external view returns(uint256);\r\n}\r\n\r\ninterface IERC20{\r\n    function transferFrom(address, address, uint256) external returns (bool);\r\n    function balanceOf(address) external view returns(uint256);\r\n    function transfer(address, uint256) external returns(bool);\r\n}\r\n\r\ninterface IAmphClaimer{\r\n    function claimable(address _sender, uint96 _vaultID, uint256 _cvxTotalRewards, uint256 _crvTotalRewards) external view returns (uint256, uint256, uint256);\r\n\r\n}\r\n\r\ncontract MultiTokenPriceFeed {\r\n    mapping(address => address) public aggregators;\r\n    address public constant USDA_ADDRESS = 0xD842D9651F69cEBc0b2Cffc291fC3D3Fe7b5D226;\r\n    address public constant CRV_ADDRESS = 0xD533a949740bb3306d119CC777fa900bA034cd52; \r\n    address public constant cvxCRV_ADDRESS = 0x62B9c7356A2Dc64a1969e19C23e4f579F9810Aa7;\r\n    address public constant SNX_ADDRESS = 0xC011a73ee8576Fb46F5E1c5751cA3B9Fe0af2a6F;\r\n    address public constant BAL_ADDRESS = 0xba100000625a3754423978a60c9317c58a424e3D;\r\n    mapping(address=>bool) public isApproved;\r\n    address public AMPH = 0x943c5F4F54509d1e78B1fCD93B92c43ce83d3141;\r\n    address public owner;\r\n    address public governance = 0xA905f9f0b525420d4E5214E73d70dfFe8438D8C8;\r\n    address public amphClaimer = 0x8B66d70953Ad233976812f4B5B92bBAfeBA90A75;\r\n    mapping(address=>uint256) caps;\r\n    mapping(address=>uint256) current;\r\n    uint256 public minted;\r\n    bool public paused;\r\n\r\n    constructor() {\r\n        // Initialize the mapping with Chainlink aggregator contract addresses\r\n        // for each token contract address (replace these addresses with the actual ones)\r\n        aggregators[SNX_ADDRESS] = 0xDC3EA94CD0AC27d9A86C180091e7f78C683d3699; // SNX\r\n        aggregators[cvxCRV_ADDRESS] = 0xCd627aA160A6fA45Eb793D19Ef54f5062F20f33f; // cvxCRV\r\n        aggregators[BAL_ADDRESS] = 0xdF2917806E30300537aEB49A7663062F4d1F2b5F; // BAL\r\n        aggregators[CRV_ADDRESS] = 0xCd627aA160A6fA45Eb793D19Ef54f5062F20f33f; // CRV\r\n        // USDA does not have an oracle, so we set it to address(0)\r\n        aggregators[USDA_ADDRESS] = address(0);\r\n        isApproved[SNX_ADDRESS] = true;\r\n        isApproved[cvxCRV_ADDRESS] = true;\r\n        isApproved[BAL_ADDRESS] = true;\r\n        isApproved[CRV_ADDRESS] = true;\r\n        isApproved[USDA_ADDRESS] = true;\r\n        owner = msg.sender;\r\n        paused = true;\r\n    }\r\n\r\n    function initialize() public {\r\n        require(caps[SNX_ADDRESS] == 0);\r\n        caps[SNX_ADDRESS] = (250_000 * 1e18);\r\n        caps[cvxCRV_ADDRESS] = (1_000_000 * 1e18);\r\n        caps[BAL_ADDRESS] = (25_000 * 1e18);\r\n        caps[CRV_ADDRESS] = (25_000 * 1e18);\r\n        caps[USDA_ADDRESS] = (1_000_000 * 1e18);\r\n    }\r\n    \r\n        function getCRVEquivalent(address tokenAddress, uint256 tokenAmount) public pure returns (uint256) {\r\n                uint256 crvEquivalent = 0;\r\n                if(tokenAddress == SNX_ADDRESS){\r\n                    crvEquivalent = (7000000000000000000 * tokenAmount) / 1e18;\r\n                }\r\n\r\n                if(tokenAddress == cvxCRV_ADDRESS){\r\n                    crvEquivalent = (680000000000000000 * tokenAmount) / 1e18;\r\n                }\r\n\r\n                if(tokenAddress == BAL_ADDRESS){\r\n                    crvEquivalent = (7200000000000000000 * tokenAmount) / 1e18;\r\n                }\r\n\r\n                if(tokenAddress == USDA_ADDRESS){\r\n                    crvEquivalent = (2310000000000000000 * tokenAmount) / 1e18;\r\n                }\r\n\r\n                if(tokenAddress == CRV_ADDRESS){\r\n                    crvEquivalent = (990000000000000000 * tokenAmount) / 1e18;\r\n                }\r\n            return crvEquivalent;\r\n        }\r\n\r\n    function purchaseAMPH(address _token, uint256 _amount) public {\r\n        require(!paused);\r\n        require(isApproved[_token] == true);\r\n        require(IERC20(_token).transferFrom(msg.sender, governance, _amount));\r\n        require(current[_token] + _amount <= caps[_token], \"This mint would exceed the cap for this token type\");\r\n        uint256 crvEq = getCRVEquivalent(_token, _amount);\r\n        (,,uint256 amt) = IAmphClaimer(amphClaimer).claimable(address(0), uint96(0), uint256(0), crvEq);\r\n        amt = (amt * 70) / 100; //purchases take place at 70% the rate of earned.\r\n        require(amt + minted <= (((IAMPH(AMPH).totalSupply() - (3_800_000_000 * 1e18)) * 60) / 100), \"Purchased tokens cannot make up more than 60% of supply\");\r\n        require(amt < (1_000_000 * 1e18), \"No single purchase can exceed 1M AMPH\");\r\n        minted += amt;\r\n        current[_token] += _amount;\r\n        if(IERC20(AMPH).balanceOf(address(this)) >= amt){\r\n           require(IERC20(AMPH).transfer(msg.sender, amt));\r\n        } else {\r\n            IAMPH(AMPH).mint(address(this), amt);\r\n            require(IERC20(AMPH).transfer(msg.sender, amt));\r\n        }\r\n    }\r\n\r\n    function setCap(address _token, uint256 _amount) public {\r\n        require(msg.sender == owner);\r\n        caps[_token] = _amount;\r\n    }\r\n\r\n    function setEnabled(address _token, bool _enabled) public {\r\n        require(msg.sender == owner);\r\n        isApproved[_token] = _enabled;\r\n    }\r\n\r\n    function setAggregators(address _token, address _aggregator) public {\r\n        require(msg.sender == owner);\r\n        aggregators[_token] = _aggregator;\r\n    }\r\n\r\n    function setPaused(bool _bool) public {\r\n        require(msg.sender == owner);\r\n        paused = _bool;\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AMPH\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BAL_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CRV_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SNX_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"USDA_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"aggregators\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amphClaimer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cvxCRV_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"getCRVEquivalent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isApproved\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minted\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"purchaseAMPH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_aggregator\",\"type\":\"address\"}],\"name\":\"setAggregators\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setCap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"setEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_bool\",\"type\":\"bool\"}],\"name\":\"setPaused\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "MultiTokenPriceFeed", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://a398ece7d15bb47f74d71f9ace92f8ef17c03a91f67e1bc4acb6a49c8ef0a081"}