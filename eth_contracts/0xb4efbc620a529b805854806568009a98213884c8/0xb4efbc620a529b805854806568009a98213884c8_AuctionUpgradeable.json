{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@gnus.ai/contracts-upgradeable-diamond/contracts/interfaces/IERC1155Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC1155/IERC1155Upgradeable.sol\\\";\\n\"\r\n    },\r\n    \"@gnus.ai/contracts-upgradeable-diamond/contracts/interfaces/IERC20MetadataUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/extensions/IERC20MetadataUpgradeable.sol\\\";\\n\"\r\n    },\r\n    \"@gnus.ai/contracts-upgradeable-diamond/contracts/interfaces/IERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/IERC20Upgradeable.sol\\\";\\n\"\r\n    },\r\n    \"@gnus.ai/contracts-upgradeable-diamond/contracts/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport { InitializableStorage } from \\\"./InitializableStorage.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !InitializableStorage.layout()._initializing;\\n        require(\\n            (isTopLevelCall && InitializableStorage.layout()._initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && InitializableStorage.layout()._initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        InitializableStorage.layout()._initialized = 1;\\n        if (isTopLevelCall) {\\n            InitializableStorage.layout()._initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            InitializableStorage.layout()._initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!InitializableStorage.layout()._initializing && InitializableStorage.layout()._initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        InitializableStorage.layout()._initialized = version;\\n        InitializableStorage.layout()._initializing = true;\\n        _;\\n        InitializableStorage.layout()._initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(InitializableStorage.layout()._initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!InitializableStorage.layout()._initializing, \\\"Initializable: contract is initializing\\\");\\n        if (InitializableStorage.layout()._initialized < type(uint8).max) {\\n            InitializableStorage.layout()._initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return InitializableStorage.layout()._initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return InitializableStorage.layout()._initializing;\\n    }\\n}\\n\"\r\n    },\r\n    \"@gnus.ai/contracts-upgradeable-diamond/contracts/proxy/utils/InitializableStorage.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n\\nimport { Initializable } from \\\"./Initializable.sol\\\";\\n\\nlibrary InitializableStorage {\\n\\n  struct Layout {\\n    /*\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 _initialized;\\n\\n    /*\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool _initializing;\\n  \\n  }\\n  \\n  bytes32 internal constant STORAGE_SLOT = keccak256('openzeppelin.contracts.storage.Initializable');\\n\\n  function layout() internal pure returns (Layout storage l) {\\n    bytes32 slot = STORAGE_SLOT;\\n    assembly {\\n      l.slot := slot\\n    }\\n  }\\n}\\n    \\n\"\r\n    },\r\n    \"@gnus.ai/contracts-upgradeable-diamond/contracts/security/PausableStorage.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n\\nimport { PausableUpgradeable } from \\\"./PausableUpgradeable.sol\\\";\\n\\nlibrary PausableStorage {\\n\\n  struct Layout {\\n\\n    bool _paused;\\n  \\n  }\\n  \\n  bytes32 internal constant STORAGE_SLOT = keccak256('openzeppelin.contracts.storage.Pausable');\\n\\n  function layout() internal pure returns (Layout storage l) {\\n    bytes32 slot = STORAGE_SLOT;\\n    assembly {\\n      l.slot := slot\\n    }\\n  }\\n}\\n    \\n\"\r\n    },\r\n    \"@gnus.ai/contracts-upgradeable-diamond/contracts/security/PausableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport { PausableStorage } from \\\"./PausableStorage.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    using PausableStorage for PausableStorage.Layout;\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        PausableStorage.layout()._paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return PausableStorage.layout()._paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        PausableStorage.layout()._paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        PausableStorage.layout()._paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\"\r\n    },\r\n    \"@gnus.ai/contracts-upgradeable-diamond/contracts/security/ReentrancyGuardStorage.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n\\nimport { ReentrancyGuardUpgradeable } from \\\"./ReentrancyGuardUpgradeable.sol\\\";\\n\\nlibrary ReentrancyGuardStorage {\\n\\n  struct Layout {\\n\\n    uint256 _status;\\n  \\n  }\\n  \\n  bytes32 internal constant STORAGE_SLOT = keccak256('openzeppelin.contracts.storage.ReentrancyGuard');\\n\\n  function layout() internal pure returns (Layout storage l) {\\n    bytes32 slot = STORAGE_SLOT;\\n    assembly {\\n      l.slot := slot\\n    }\\n  }\\n}\\n    \\n\"\r\n    },\r\n    \"@gnus.ai/contracts-upgradeable-diamond/contracts/security/ReentrancyGuardUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport { ReentrancyGuardStorage } from \\\"./ReentrancyGuardStorage.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    using ReentrancyGuardStorage for ReentrancyGuardStorage.Layout;\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        ReentrancyGuardStorage.layout()._status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(ReentrancyGuardStorage.layout()._status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        ReentrancyGuardStorage.layout()._status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        ReentrancyGuardStorage.layout()._status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@gnus.ai/contracts-upgradeable-diamond/contracts/token/ERC1155/IERC1155Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@gnus.ai/contracts-upgradeable-diamond/contracts/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20PermitUpgradeable {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"@gnus.ai/contracts-upgradeable-diamond/contracts/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"@gnus.ai/contracts-upgradeable-diamond/contracts/token/ERC20/IERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@gnus.ai/contracts-upgradeable-diamond/contracts/token/ERC20/utils/SafeERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../extensions/draft-IERC20PermitUpgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    function safeTransfer(\\n        IERC20Upgradeable token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20Upgradeable token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20PermitUpgradeable token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@gnus.ai/contracts-upgradeable-diamond/contracts/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@gnus.ai/contracts-upgradeable-diamond/contracts/utils/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@gnus.ai/contracts-upgradeable-diamond/contracts/utils/introspection/IERC165Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/core/AuctionStorage.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.17;\\n\\nenum AuctionType {\\n    TimedAuction,\\n    FixedPrice,\\n    TimedAndFixed\\n}\\n\\nenum AuctionStatus {\\n    Open,\\n    Closed\\n}\\n\\nstruct Bid {\\n    uint128 bidAmount;\\n    uint128 bidPrice;\\n    address bidder;\\n    // bid token amount paid out when bidding\\n    uint128 paidAmount;\\n    uint16 bidTokenId;\\n    bool bCleared;\\n}\\n\\nstruct BidTokenGroup {\\n    // tokens in one group should be max 255\\n    address[] bidTokens;\\n    // calculated price by this address\\n    address basePriceToken;\\n    bytes32 name;\\n}\\n\\nstruct AuctionSetting {\\n    // start and expired time\\n    uint48 startTime;\\n    uint48 endTime;\\n    // listed token address\\n    address sellToken;\\n    // tranche id for tranche nft auction\\n    uint256 trancheIndex;\\n    // minimum bid or buy amount\\n    uint128 minBidAmount;\\n    // fixed price used when buying directly, without bidding\\n    uint128 fixedPrice;\\n    // lowest and highest bid price\\n    uint128 priceRangeStart;\\n    uint128 priceRangeEnd;\\n    // total amount of listed token\\n    uint128 sellAmount;\\n    // while auction is open, available token amount\\n    uint128 reserve;\\n    // price used when bidding in increment way\\n    uint128 incrementBidPrice;\\n    // bid token group id\\n    uint16 bidTokenGroupId;\\n    // auction type\\n    AuctionType auctionType;\\n}\\n/// @dev Contains all data for erc20 or tranche auction\\nstruct AuctionData {\\n    // config params set by autioneer\\n    AuctionSetting s;\\n    // current bid id\\n    uint128 curBidId;\\n    // total amount of bids that can win after auction is closed\\n    uint128 totalBidAmount;\\n    // seller address\\n    address seller;\\n    // number of bids that can win after auction is closed. all bids out the range of availableBidDepth are canceled when bidding.\\n    uint8 availableBidDepth;\\n    // auction status\\n    AuctionStatus status;\\n    // fee amount used for refunded fee calculation\\n    uint256 feeAmount;\\n}\\n\\nlibrary AuctionStorage {\\n    struct Layout {\\n        // count of auctions and current auction id\\n        uint256 currentAuctionId;\\n        // all auctions by auction id\\n        mapping(uint256 => AuctionData) auctions;\\n        // all bids by auction id and bid id\\n        mapping(uint256 => mapping(uint256 => Bid)) bids;\\n        // whitelist for sell tokens\\n        mapping(address => bool) supportedSellTokens;\\n        // bid token groups\\n        mapping(uint256 => BidTokenGroup) bidTokenGroups;\\n        // count of bid token groups\\n        uint256 countOfTokenGroups;\\n        // fee amount and fee receiver address        \\n        uint256 feeNumerator;\\n        address feeReceiver;\\n        // deprecated\\n        uint96 maxIncrementRate;\\n        // available auction periods like 1 day, 3 days,\\n        uint48[] periods;\\n    }\\n\\n    bytes32 internal constant STORAGE_SLOT = keccak256(\\\"irrigation.contracts.storage.Auction\\\");\\n\\n    function layout() internal pure returns (Layout storage ls) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            ls.slot := slot\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/core/AuctionUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\nimport \\\"@gnus.ai/contracts-upgradeable-diamond/contracts/interfaces/IERC20MetadataUpgradeable.sol\\\";\\nimport \\\"@gnus.ai/contracts-upgradeable-diamond/contracts/interfaces/IERC20Upgradeable.sol\\\";\\nimport \\\"@gnus.ai/contracts-upgradeable-diamond/contracts/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\nimport \\\"@gnus.ai/contracts-upgradeable-diamond/contracts/interfaces/IERC1155Upgradeable.sol\\\";\\nimport \\\"@gnus.ai/contracts-upgradeable-diamond/contracts/security/ReentrancyGuardUpgradeable.sol\\\";\\nimport \\\"@gnus.ai/contracts-upgradeable-diamond/contracts/security/PausableUpgradeable.sol\\\";\\n\\nimport \\\"./AuctionStorage.sol\\\";\\n\\nimport \\\"../utils/EIP2535Initializable.sol\\\";\\nimport \\\"../libraries/FullMath.sol\\\";\\nimport \\\"../libraries/Constants.sol\\\";\\n\\nimport \\\"../interfaces/IPriceOracleUpgradeable.sol\\\";\\nimport \\\"../interfaces/IWaterTowerUpgradeable.sol\\\";\\n\\n/// @title Auction Market for whitelisted erc20 tokens and erc1155 tranche nft\\n/// @dev  Auction contract allows users sell allowed tokens, buy or bid the tokens with allowed bid tokens\\n///     1. owner allow sell tokens and bid token groups, and set auction fee\\n///     2. seller(auctioner) create auction\\n///     * seller should have enough balance for sell tokens (sell amount + auction fee)\\n///     3. buyer buy listed tokens immediately or bid with any price in a range\\n///     * buyer shuold have enough balance for bid tokens (price * buy amount)\\n///     4. anyone(buyer, seller, or any) close auction after end time\\n\\ncontract AuctionUpgradeable is\\n    EIP2535Initializable,\\n    ReentrancyGuardUpgradeable,\\n    PausableUpgradeable\\n{\\n    using AuctionStorage for AuctionStorage.Layout;\\n    using SafeERC20Upgradeable for IERC20Upgradeable;\\n    /// @dev errors\\n    error InsufficientFee();\\n    error InsufficientReserveAsset();\\n    error NoListTrancheZ();\\n    error NoTransferEther();\\n    error InvalidTrancheAuction();\\n    error InvalidAuctionAmount();\\n    error InvalidStartTime();\\n    error InvalidMinBidAmount();\\n    error InvalidFixedPrice();\\n    error InvalidEndPrice();\\n    error InvalidSellToken();\\n    error NoClosedAuction();\\n    error NoAuction();\\n    error InvalidAuction();\\n    error InactiveAuction();\\n    error NoAuctioneer();\\n    error NoIdleAuction();\\n    error InvalidPurchaseAmount();\\n    error InvalidIncrementBidPrice();\\n    // bid and buy\\n    error LowBid();\\n    error OverPriceBid();\\n    error NoCancelBid();\\n    error ClaimedBid();\\n    error NoBidder();\\n    error SmallBidAmount();\\n    error InvalidBidToken();\\n\\n    event AuctionCreated(\\n        AuctionSetting auctionSetting,\\n        address indexed seller,\\n        uint256 indexed auctionId\\n    );\\n\\n    /// @notice Emitted by auction for buyNow\\n    /// @param buyer The address call buyNow\\n    /// @param amountIn Token amount paid by user to buy auctioning token\\n    /// @param amountOut Auctioning token amount that user received\\n    /// @param auctionId Id of auction list\\n\\n    event AuctionBuy(\\n        address indexed buyer,\\n        uint256 amountIn,\\n        uint256 amountOut,\\n        address purchaseToken,\\n        uint256 indexed auctionId\\n    );\\n\\n    /// @notice Emitted by auction when bidder places a bid\\n    /// @param bid bid token struct\\n    /// @param auctionId The id of auction list\\n    /// @param bidId The id of bid list\\n\\n    event AuctionBid(Bid bid, uint indexed auctionId, uint indexed bidId, uint availableBidDepth);\\n\\n    /// @notice Emitted by auction when bidder or auctioneer closes a auction\\n    /// @param unSoldAmount Amount of unsold auctioning token\\n    /// @param auctionId Auction id\\n    event AuctionClosed(uint256 unSoldAmount, uint256 indexed auctionId, uint256 settledBidCount);\\n\\n    event AuctionUpdate(\\n        uint indexed auctionId,\\n        uint minBidAmount,\\n        uint priceRangeStart,\\n        uint incrementPrice\\n    );\\n\\n    event ClaimBid(uint auctionId, uint bidId, bool isWinner, uint claimAmount);\\n\\n    uint256 internal constant FEE_DENOMINATOR = 1000;\\n    uint256 internal constant BID_GAS_LIMIT = 470000;\\n    uint256 internal constant CLOSE_GAS_LIMIT = 180000;\\n    uint256 internal constant D30 = 1e30;\\n    uint256 internal constant MINBID_FACTOR = 100;\\n    uint256 internal constant INCREMENTBID_FACTOR = 2;\\n\\n    function createAuction(\\n        AuctionSetting memory auctionSetting,\\n        uint8 periodId\\n    ) external payable whenNotPaused {\\n        AuctionStorage.Layout storage auctionStorage = AuctionStorage.layout();\\n        if (!auctionStorage.supportedSellTokens[auctionSetting.sellToken])\\n            revert InvalidSellToken();\\n        if (auctionSetting.bidTokenGroupId >= auctionStorage.countOfTokenGroups)\\n            revert InvalidBidToken();\\n        if (\\n            auctionSetting.minBidAmount < auctionSetting.sellAmount / MINBID_FACTOR ||\\n            auctionSetting.minBidAmount > auctionSetting.sellAmount\\n        ) revert InvalidMinBidAmount();\\n        if (auctionSetting.sellAmount == 0) revert InvalidAuctionAmount();\\n\\n        if (\\n            (auctionSetting.auctionType == AuctionType.FixedPrice ||\\n                auctionSetting.auctionType == AuctionType.TimedAndFixed) &&\\n            auctionSetting.fixedPrice == 0\\n        ) revert InvalidFixedPrice();\\n\\n        if (auctionSetting.auctionType != AuctionType.FixedPrice) {\\n            if (auctionSetting.priceRangeStart > auctionSetting.priceRangeEnd)\\n                revert InvalidEndPrice();\\n            if (\\n                auctionSetting.incrementBidPrice == 0 ||\\n                auctionSetting.incrementBidPrice * INCREMENTBID_FACTOR >\\n                auctionSetting.priceRangeStart\\n            ) revert InvalidIncrementBidPrice();\\n        }\\n\\n        if (auctionSetting.startTime == 0) auctionSetting.startTime = uint48(block.timestamp);\\n        else if (\\n            auctionSetting.startTime < block.timestamp ||\\n            auctionSetting.startTime > block.timestamp + 30 days\\n        ) revert InvalidStartTime();\\n        auctionSetting.endTime = auctionSetting.startTime + auctionStorage.periods[periodId];\\n        uint256 auctionId = auctionStorage.currentAuctionId + 1;\\n        // receive auction asset\\n        if (auctionSetting.trancheIndex == 0) {\\n            IERC20Upgradeable(auctionSetting.sellToken).safeTransferFrom(\\n                msg.sender,\\n                address(this),\\n                (auctionSetting.sellAmount * (FEE_DENOMINATOR + auctionStorage.feeNumerator)) /\\n                    FEE_DENOMINATOR\\n            );\\n        } else {\\n            if (auctionSetting.trancheIndex & 3 == 3) revert NoListTrancheZ();\\n            if (auctionSetting.sellToken != address(this)) revert InvalidTrancheAuction();\\n            IERC1155Upgradeable(address(this)).safeTransferFrom(\\n                msg.sender,\\n                address(this),\\n                auctionSetting.trancheIndex,\\n                auctionSetting.sellAmount,\\n                Constants.EMPTY\\n            );\\n            /// @dev fee is calculated from usd value, and notation amount is BDV\\n            uint256 ethPrice = IPriceOracleUpgradeable(address(this)).getUnderlyingPriceETH();\\n            // tranche nft decimals is 6 and price decimals 18, so calculated factor = 10 ** (18+18-6)\\n            uint256 feeAmount = (((auctionSetting.sellAmount * D30) / ethPrice) *\\n                auctionStorage.feeNumerator) / FEE_DENOMINATOR;\\n            if (msg.value < feeAmount) revert InsufficientFee();\\n            else if (msg.value > feeAmount) {\\n                (bool success, ) = msg.sender.call{value: msg.value - feeAmount}(\\\"\\\");\\n                if (!success) revert NoTransferEther();\\n            }\\n            auctionStorage.auctions[auctionId].feeAmount = feeAmount;\\n        }\\n        auctionStorage.currentAuctionId = auctionId;\\n        auctionSetting.reserve = auctionSetting.sellAmount;\\n        auctionStorage.auctions[auctionId].s = auctionSetting;\\n        auctionStorage.auctions[auctionId].seller = msg.sender;\\n        emit AuctionCreated(auctionSetting, msg.sender, auctionId);\\n    }\\n\\n    /// @notice update important options of auction before any bidding\\n    /// @param auctionId auction id\\n    /// @param minBidAmount min bid amount to update\\n    /// @param priceRangeStart start price\\n    /// @param incrementBidPrice increment bid price\\n    function updateAuction(\\n        uint256 auctionId,\\n        uint128 minBidAmount,\\n        uint128 priceRangeStart,\\n        uint128 incrementBidPrice\\n    ) external whenNotPaused {\\n        AuctionStorage.Layout storage auctionStorage = AuctionStorage.layout();\\n        AuctionData memory auction = auctionStorage.auctions[auctionId];\\n        if (auction.seller != msg.sender) revert NoAuctioneer();\\n        if (\\n            auction.status != AuctionStatus.Open ||\\n            auction.s.endTime < block.timestamp ||\\n            auction.curBidId != 0\\n        ) revert NoIdleAuction();\\n\\n        if (priceRangeStart > auction.s.priceRangeEnd) revert InvalidEndPrice();\\n\\n        if (\\n            auction.s.minBidAmount >= auction.s.sellAmount / MINBID_FACTOR &&\\n            minBidAmount <= auction.s.sellAmount\\n        ) auctionStorage.auctions[auctionId].s.minBidAmount = minBidAmount;\\n\\n        if (priceRangeStart != 0)\\n            auctionStorage.auctions[auctionId].s.priceRangeStart = priceRangeStart;\\n        if (\\n            incrementBidPrice != 0 &&\\n            incrementBidPrice * INCREMENTBID_FACTOR <=\\n            auctionStorage.auctions[auctionId].s.priceRangeStart\\n        ) auctionStorage.auctions[auctionId].s.incrementBidPrice = incrementBidPrice;\\n\\n        emit AuctionUpdate(auctionId, minBidAmount, priceRangeStart, incrementBidPrice);\\n    }\\n\\n    /// @notice buy token immediately with fixed price\\n    /// @param auctionId      auction id\\n    /// @param purchaseAmount amount to purchase\\n    /// @param buyTokenId     token id to buy with\\n    function buyNow(\\n        uint256 auctionId,\\n        uint128 purchaseAmount,\\n        uint16 buyTokenId\\n    ) external nonReentrant whenNotPaused {\\n        AuctionStorage.Layout storage auctionStorage = AuctionStorage.layout();\\n        AuctionData memory auction = auctionStorage.auctions[auctionId];\\n        // Check auction.seller if address(0) auction hasn't been initialized/created and then check the auction type.\\n        if (auction.seller == address(0) || auction.s.auctionType == AuctionType.TimedAuction)\\n            revert InvalidAuction();\\n        address _purchaseToken = AuctionStorage\\n            .layout()\\n            .bidTokenGroups[auction.s.bidTokenGroupId]\\n            .bidTokens[buyTokenId];\\n        checkAuctionInProgress(auction.s.endTime, auction.s.startTime);\\n        uint128 availableAmount = auction.s.reserve;\\n        uint256 trancheIndex = auction.s.trancheIndex;\\n        if (purchaseAmount > availableAmount) revert InsufficientReserveAsset();\\n        if (auction.s.minBidAmount > purchaseAmount) revert SmallBidAmount();\\n\\n        unchecked {\\n            auctionStorage.auctions[auctionId].s.reserve = availableAmount - purchaseAmount;\\n        }\\n        uint8 sellTokenDecimals;\\n        if (trancheIndex == 0) {\\n            sellTokenDecimals = IERC20MetadataUpgradeable(auction.s.sellToken).decimals();\\n            IERC20Upgradeable(auction.s.sellToken).safeTransfer(msg.sender, purchaseAmount);\\n        } else {\\n            sellTokenDecimals = Constants.TRANCHE_DECIMALS;\\n            IERC1155Upgradeable(address(this)).safeTransferFrom(\\n                address(this),\\n                msg.sender,\\n                trancheIndex,\\n                purchaseAmount,\\n                Constants.EMPTY\\n            );\\n        }\\n        uint256 payAmount = getPayAmount(\\n            _purchaseToken,\\n            purchaseAmount,\\n            auction.s.fixedPrice,\\n            sellTokenDecimals\\n        );\\n        IERC20Upgradeable(_purchaseToken).safeTransferFrom(msg.sender, auction.seller, payAmount);\\n\\n        emit AuctionBuy(msg.sender, payAmount, purchaseAmount, _purchaseToken, auctionId);\\n    }\\n\\n    function placeBid(\\n        uint256 auctionId,\\n        uint128 bidAmount,\\n        uint16 bidTokenId,\\n        uint128 bidPrice,\\n        uint128 maxBidPrice\\n    ) external nonReentrant whenNotPaused returns (uint256) {\\n        AuctionStorage.Layout storage auctionStorage = AuctionStorage.layout();\\n        AuctionData memory auction = auctionStorage.auctions[auctionId];\\n        if (auction.seller == address(0) || auction.s.auctionType == AuctionType.FixedPrice)\\n            revert InvalidAuction();\\n        address _purchaseToken = AuctionStorage\\n            .layout()\\n            .bidTokenGroups[auction.s.bidTokenGroupId]\\n            .bidTokens[bidTokenId];\\n        checkAuctionInProgress(auction.s.endTime, auction.s.startTime);\\n        if (auction.s.minBidAmount > bidAmount) revert SmallBidAmount();\\n        if (bidAmount > auction.s.reserve) revert InsufficientReserveAsset();\\n        // bid price starts from priceRangeStart\\n        uint128 availableBidPrice = auction.curBidId == 0\\n            ? auction.s.priceRangeStart\\n            : auctionStorage.bids[auctionId][auction.curBidId].bidPrice +\\n                auction.s.incrementBidPrice;\\n        // if bidPrice is 0, place bid in increment way\\n        // if incrementBidPrice is 0, can place bid with same price as last bid\\n        if (bidPrice == 0) bidPrice = availableBidPrice;\\n        else if (bidPrice < availableBidPrice) revert LowBid();\\n        if (bidPrice > maxBidPrice) revert OverPriceBid();\\n        uint128 _bidPrice = bidPrice;\\n        uint256 payAmount = getPayAmount(\\n            _purchaseToken,\\n            bidAmount,\\n            _bidPrice,\\n            auction.s.trancheIndex > 0\\n                ? 6\\n                : IERC20MetadataUpgradeable(auction.s.sellToken).decimals()\\n        );\\n        IERC20Upgradeable(_purchaseToken).safeTransferFrom(msg.sender, address(this), payAmount);\\n        Bid memory bid = Bid({\\n            bidder: msg.sender,\\n            bidAmount: bidAmount,\\n            bidPrice: _bidPrice,\\n            paidAmount: uint128(payAmount),\\n            bidTokenId: bidTokenId,\\n            bCleared: false\\n        });\\n        uint128 currentBidId = auction.curBidId + 1;\\n        {\\n            uint256 gasRemaining = gasleft();\\n            uint256 _auctionId = auctionId;\\n            uint128 _bidAmount = bidAmount;\\n            auctionStorage.bids[_auctionId][currentBidId] = bid;\\n            uint256 availableBidDepth = uint256(auction.availableBidDepth) + 1;\\n            uint128 totalBidAmount = auction.totalBidAmount + _bidAmount;\\n            address[] memory bidTokens = AuctionStorage\\n                .layout()\\n                .bidTokenGroups[auction.s.bidTokenGroupId]\\n                .bidTokens;\\n            // cancel bids not eligible in a range of gas limit\\n            while (true) {\\n                uint256 _cancelBidId = currentBidId - availableBidDepth + 1;\\n                Bid memory cancelBid = auctionStorage.bids[_auctionId][_cancelBidId];\\n                // even though reserve sell amount is smaller than bidAmount, settle the bid and the bidder receives sell token as possible\\n                if (totalBidAmount < auction.s.reserve + cancelBid.bidAmount) break;\\n                unchecked {\\n                    totalBidAmount -= cancelBid.bidAmount;\\n                    availableBidDepth--;\\n                }\\n                /// cancel not eligible bids\\n                if (cancelBid.bCleared) revert NoCancelBid();\\n                IERC20Upgradeable(bidTokens[cancelBid.bidTokenId]).safeTransfer(\\n                    cancelBid.bidder,\\n                    cancelBid.paidAmount\\n                );\\n                AuctionStorage.layout().bids[_auctionId][_cancelBidId].bCleared = true;\\n                if (gasRemaining - gasleft() > BID_GAS_LIMIT) break;\\n            }\\n            AuctionStorage.layout().auctions[_auctionId].availableBidDepth = uint8(\\n                availableBidDepth\\n            );\\n            AuctionStorage.layout().auctions[_auctionId].totalBidAmount = totalBidAmount;\\n            AuctionStorage.layout().auctions[_auctionId].curBidId = currentBidId;\\n            emit AuctionBid(bid, _auctionId, currentBidId, availableBidDepth);\\n        }\\n        return currentBidId;\\n    }\\n\\n    function closeAuction(uint256 auctionId) external nonReentrant whenNotPaused {\\n        AuctionData memory auction = AuctionStorage.layout().auctions[auctionId];\\n        require(\\n            block.timestamp >= auction.s.endTime && auction.status != AuctionStatus.Closed,\\n            \\\"auction can't be closed\\\"\\n        );\\n        _settleAuction(auctionId, auction);\\n    }\\n\\n    /// @notice function to get status of bid\\n    /// @param auctionId auction id\\n    /// @param bidId  bid id\\n    /// @return isWinner true if the bid is winner\\n    /// @return isClaimed true if the bid was claimed\\n\\n    function isWinnerBid(\\n        uint256 auctionId,\\n        uint256 bidId\\n    ) external view returns (bool isWinner, bool isClaimed, uint256 claimAmount) {\\n        AuctionStorage.Layout storage auctionStorage = AuctionStorage.layout();\\n        AuctionData memory auction = auctionStorage.auctions[auctionId];\\n        Bid memory bid = auctionStorage.bids[auctionId][bidId];\\n        return _isWinnerBid(auctionId, bidId, auction, bid);\\n    }\\n\\n    /// @notice claim bid for winner or canceled bid after auction is closed\\n    /// @dev anyone can claim bid\\n    function claimBid(uint256 auctionId, uint256 bidId) external nonReentrant whenNotPaused {\\n        AuctionStorage.Layout storage auctionStorage = AuctionStorage.layout();\\n        AuctionData memory auction = auctionStorage.auctions[auctionId];\\n        Bid memory bid = auctionStorage.bids[auctionId][bidId];\\n        (bool isWinner, bool isClaimed, uint256 claimAmount) = _isWinnerBid(\\n            auctionId,\\n            bidId,\\n            auction,\\n            bid\\n        );\\n        if (isClaimed) revert ClaimedBid();\\n        auctionStorage.bids[auctionId][bidId].bCleared = true;\\n        if (auction.status != AuctionStatus.Closed) revert NoClosedAuction();\\n        IERC20Upgradeable _purchaseToken = IERC20Upgradeable(\\n            auctionStorage.bidTokenGroups[auction.s.bidTokenGroupId].bidTokens[bid.bidTokenId]\\n        );\\n        if (isWinner) {\\n            auctionStorage.auctions[auctionId].s.reserve = auction.s.reserve - uint128(claimAmount);\\n            _settleBid(\\n                auction.s.sellToken,\\n                auction.s.trancheIndex,\\n                _purchaseToken,\\n                bid,\\n                uint128(claimAmount)\\n            );\\n        } else {\\n            _purchaseToken.safeTransfer(bid.bidder, bid.paidAmount);\\n        }\\n        emit ClaimBid(auctionId, bidId, isWinner, claimAmount);\\n    }\\n\\n    function _settleAuction(uint256 auctionId, AuctionData memory auction) internal {\\n        uint256 gasLimit = gasleft();\\n        // uint256 trancheIndex = auction.s.trancheIndex;\\n        uint128 availableAmount = auction.s.reserve;\\n        uint256 settledBidCount;\\n        uint256 curBidId = auction.curBidId;\\n        AuctionStorage.Layout storage auctionStorage = AuctionStorage.layout();\\n        address[] memory bidTokens = auctionStorage\\n            .bidTokenGroups[auction.s.bidTokenGroupId]\\n            .bidTokens;\\n        uint256[] memory payoutAmounts = new uint256[](bidTokens.length);\\n        bool bOverGasLimit = false;\\n        uint128 reserve = availableAmount;\\n        while (curBidId > 0 && reserve > 0) {\\n            Bid memory bid = auctionStorage.bids[auctionId][curBidId];\\n            if (bid.bCleared) break;\\n            if (!bOverGasLimit && gasLimit <= gasleft() + CLOSE_GAS_LIMIT) {\\n                auctionStorage.bids[auctionId][curBidId].bCleared = true;\\n                (uint128 settledAmount, uint128 payoutAmount) = _settleBid(\\n                    auction.s.sellToken,\\n                    auction.s.trancheIndex,\\n                    IERC20Upgradeable(bidTokens[bid.bidTokenId]),\\n                    bid,\\n                    availableAmount\\n                );\\n                payoutAmounts[bid.bidTokenId] += payoutAmount;\\n                unchecked {\\n                    availableAmount -= settledAmount;\\n                    reserve -= settledAmount;\\n                    ++settledBidCount;\\n                }\\n            } else {\\n                // it allows the calculation for gas limit done only one time\\n                if (!bOverGasLimit) bOverGasLimit = true;\\n                if (bid.bidAmount > reserve) {\\n                    payoutAmounts[bid.bidTokenId] += (bid.paidAmount * reserve) / bid.bidAmount;\\n                    reserve = 0;\\n                } else {\\n                    payoutAmounts[bid.bidTokenId] += bid.paidAmount;\\n                    unchecked {\\n                        reserve -= bid.bidAmount;\\n                    }\\n                }\\n            }\\n            unchecked {\\n                --curBidId;\\n            }\\n        }\\n        /// transfer paid tokens from contract to seller\\n        for (uint256 i; i < bidTokens.length; ) {\\n            uint256 payoutAmount = payoutAmounts[i];\\n            if (payoutAmount > 0) {\\n                IERC20Upgradeable(bidTokens[i]).safeTransfer(auction.seller, payoutAmount);\\n            }\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n        /// transfer auction fee\\n        if (auction.s.sellAmount > reserve) {\\n            uint256 totalSettledAmount;\\n            unchecked {\\n                totalSettledAmount = auction.s.sellAmount - reserve;\\n            }\\n            if (auction.s.trancheIndex == 0) {\\n                IERC20Upgradeable(auction.s.sellToken).safeTransfer(\\n                    auctionStorage.feeReceiver,\\n                    (totalSettledAmount * auctionStorage.feeNumerator) / FEE_DENOMINATOR\\n                );\\n            } else {\\n                IWaterTowerUpgradeable(address(this)).addETHReward{\\n                    value: (auction.feeAmount * totalSettledAmount) / auction.s.sellAmount\\n                }();\\n            }\\n        }\\n        if (reserve > 0) {\\n            unchecked {\\n                availableAmount -= reserve;\\n            }\\n            if (auction.s.trancheIndex == 0) {\\n                IERC20Upgradeable(auction.s.sellToken).safeTransfer(\\n                    auction.seller,\\n                    (reserve * (FEE_DENOMINATOR + auctionStorage.feeNumerator)) / FEE_DENOMINATOR\\n                );\\n            } else {\\n                IERC1155Upgradeable(address(this)).safeTransferFrom(\\n                    address(this),\\n                    auction.seller,\\n                    auction.s.trancheIndex,\\n                    reserve,\\n                    Constants.EMPTY\\n                );\\n                (bool sent, ) = payable(auction.seller).call{\\n                    value: ((reserve * auction.feeAmount) / auction.s.sellAmount) / FEE_DENOMINATOR\\n                }(\\\"\\\");\\n                require(sent, \\\"failed to send ether\\\");\\n            }\\n        }\\n        auctionStorage.auctions[auctionId].s.reserve = availableAmount;\\n        auctionStorage.auctions[auctionId].status = AuctionStatus.Closed;\\n\\n        unchecked {\\n            auctionStorage.auctions[auctionId].totalBidAmount =\\n                auction.totalBidAmount -\\n                availableAmount;\\n            auctionStorage.auctions[auctionId].curBidId =\\n                auction.curBidId -\\n                uint128(settledBidCount);\\n        }\\n        emit AuctionClosed(availableAmount, auctionId, settledBidCount);\\n    }\\n\\n    /// @notice transfer auctioning token to bidder\\n    function _settleBid(\\n        address sellToken,\\n        uint256 trancheIndex,\\n        IERC20Upgradeable _purchaseToken,\\n        Bid memory bid,\\n        uint128 availableAmount\\n    ) internal returns (uint128 settledAmount, uint128 payoutAmount) {\\n        settledAmount = bid.bidAmount;\\n        payoutAmount = bid.paidAmount;\\n        if (availableAmount < settledAmount) {\\n            uint128 repayAmount;\\n            unchecked {\\n                repayAmount = settledAmount - availableAmount;\\n            }\\n            // calculate as payout token\\n            repayAmount = (repayAmount * bid.paidAmount) / bid.bidAmount;\\n            payoutAmount -= repayAmount;\\n            settledAmount = availableAmount;\\n            _purchaseToken.safeTransfer(bid.bidder, repayAmount);\\n        }\\n        if (trancheIndex == 0) {\\n            IERC20Upgradeable(sellToken).safeTransfer(bid.bidder, settledAmount);\\n        } else {\\n            IERC1155Upgradeable(address(this)).safeTransferFrom(\\n                address(this),\\n                bid.bidder,\\n                trancheIndex,\\n                settledAmount,\\n                Constants.EMPTY\\n            );\\n        }\\n    }\\n\\n    function _isWinnerBid(\\n        uint256 auctionId,\\n        uint256 bidId,\\n        AuctionData memory auction,\\n        Bid memory bid\\n    ) internal view returns (bool isWinner, bool isClaimed, uint256 claimAmount) {\\n        AuctionStorage.Layout storage auctionStorage = AuctionStorage.layout();\\n        if (bid.bCleared) isClaimed = true;\\n        if (auction.status != AuctionStatus.Closed) {\\n            return (false, isClaimed, 0);\\n        } else {\\n            uint256 curBidId = auction.curBidId;\\n            uint256 reserve = auction.s.reserve;\\n            unchecked {\\n                while (curBidId > bidId && reserve > 0) {\\n                    Bid memory seniorBid = auctionStorage.bids[auctionId][curBidId];\\n                    if (!seniorBid.bCleared) {\\n                        if (reserve > seniorBid.bidAmount) {\\n                            reserve -= seniorBid.bidAmount;\\n                        } else reserve = 0;\\n                    }\\n                    --curBidId;\\n                }\\n                if (reserve > 0) {\\n                    return (\\n                        true,\\n                        isClaimed,\\n                        reserve >= bid.bidAmount ? bid.bidAmount : bid.bidAmount - reserve\\n                    );\\n                } else return (false, isClaimed, 0);\\n            }\\n        }\\n    }\\n\\n    // admin setters are implemented in IrrigationControl\\n\\n    // getters\\n    function getAuctionFee() external view returns (uint256 numerator, uint256 dominator) {\\n        numerator = AuctionStorage.layout().feeNumerator;\\n        dominator = FEE_DENOMINATOR;\\n    }\\n\\n    function getPayAmount(\\n        address purchaseToken,\\n        uint128 purchaseAmount,\\n        uint128 price,\\n        uint8 sellTokenDecimals\\n    ) public view returns (uint256) {\\n        uint256 denominator = (10 **\\n            (18 - IERC20MetadataUpgradeable(purchaseToken).decimals() + sellTokenDecimals));\\n        return FullMath.mulDivRoundingUp128(purchaseAmount, price, denominator);\\n    }\\n\\n    function getAuction(uint256 auctionId) external view returns (AuctionData memory) {\\n        return AuctionStorage.layout().auctions[auctionId];\\n    }\\n\\n    function getBid(uint256 auctionId, uint256 bidId) external view returns (Bid memory) {\\n        return AuctionStorage.layout().bids[auctionId][bidId];\\n    }\\n\\n    function getAuctionsCount() external view returns (uint256 totalAuctionsCount) {\\n        return AuctionStorage.layout().currentAuctionId;\\n    }\\n\\n    function getBidTokenGroup(\\n        uint256 tokenGroupId\\n    ) external view returns (BidTokenGroup memory tokenGroup) {\\n        return AuctionStorage.layout().bidTokenGroups[tokenGroupId];\\n    }\\n\\n    function getBidTokenGroupCount() external view returns (uint256 countOfTokenGroup) {\\n        return AuctionStorage.layout().countOfTokenGroups;\\n    }\\n\\n    function getAuctionPeriods() external view returns (uint48[] memory) {\\n        return AuctionStorage.layout().periods;\\n    }\\n\\n    /// @dev returns true if auction in progress, false otherwise\\n    function checkAuctionInProgress(uint256 endTime, uint256 startTime) internal view {\\n        if (startTime > block.timestamp || (endTime > 0 && endTime <= block.timestamp))\\n            revert InactiveAuction();\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IDiamondCut.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\\n/******************************************************************************/\\n\\ninterface IDiamondCut {\\n    enum FacetCutAction {Add, Replace, Remove}\\n    // Add=0, Replace=1, Remove=2\\n\\n    struct FacetCut {\\n        address facetAddress;\\n        FacetCutAction action;\\n        bytes4[] functionSelectors;\\n    }\\n\\n    /// @notice Add/replace/remove any number of functions and optionally execute\\n    ///         a function with delegatecall\\n    /// @param _diamondCut Contains the facet addresses and function selectors\\n    /// @param _init The address of the contract or facet to execute _calldata\\n    /// @param _calldata A function call, including function selector and arguments\\n    ///                  _calldata is executed with delegatecall on _init\\n    function diamondCut(\\n        FacetCut[] calldata _diamondCut,\\n        address _init,\\n        bytes calldata _calldata\\n    ) external;\\n\\n    event DiamondCut(FacetCut[] _diamondCut, address _init, bytes _calldata);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IPriceOracleUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\ninterface IPriceOracleUpgradeable {\\n    /**\\n     * @notice Get latest price normalized to 1e18 for asset\\n     */\\n    function getPrice(address asset) external view returns (uint256);\\n\\n    function getUnderlyingPriceETH() external view returns (uint);\\n\\n    function getWaterPrice() external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IWaterTowerUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\n/// @title WaterTower Interface\\n\\ninterface IWaterTowerUpgradeable {\\n    \\n    /// @dev events\\n    event Deposited(address indexed user, uint amount);\\n    event Withdrawn(address indexed user, uint amount);\\n    event Claimed(address indexed user, uint amount);\\n    event Irrigate(\\n        address indexed user,\\n        address middleAsset,\\n        uint irrigateAmount,\\n        uint waterAmount,\\n        uint bonusAmount\\n    );\\n    event SetAutoIrrigate(address indexed user, uint timestamp, bool bAutoIrrigate);\\n    event AutoIrrigate(address indexed user, uint rewardAmount, uint gasFee);\\n    event AddETHReward(uint256 amount);\\n    event UpdateRewardPeriod(uint poolIndex, uint endTime, uint monthlyRewards);\\n\\n    function addETHReward() external payable;\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/Constants.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nlibrary Constants {\\n    /// Addresses\\n    address internal constant CURVE_ROUTER = 0x99a58482BD75cbab83b27EC03CA68fF489b5788f;\\n    address internal constant BEAN = 0xBEA0000029AD1c77D3d5D23Ba2D8893dB9d1Efab;\\n    address internal constant ETHER = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n    address internal constant TRI_CRYPTO_POOL = 0xD51a44d3FaE010294C616388b506AcdA1bfAAE46;\\n    address internal constant USDT = 0xdAC17F958D2ee523a2206206994597C13D831ec7;\\n    address internal constant CURVE_BEAN_METAPOOL = 0xc9C32cd16Bf7eFB85Ff14e0c8603cc90F6F2eE49;\\n    address internal constant BEANSTALK_PRICE = 0xF2C2b7eabcB353bF6f2128a7f8e1e32Eeb112530;\\n    address internal constant USDC = 0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48;\\n    address internal constant DAI = 0x6B175474E89094C44Da98b954EedeAC495271d0F;\\n    address internal constant WETH = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\\n    address internal constant ZERO = 0x0000000000000000000000000000000000000000;\\n    address internal constant BEANSTALK = 0xC1E088fC1323b20BCBee9bd1B9fC9546db5624C5;\\n    address internal constant FERTILIZER = 0x402c84De2Ce49aF88f5e2eF3710ff89bFED36cB6;\\n\\n    /// @notice time out to get price from chainlink\\n    /// @dev should update before deploying on mainnet\\n    uint256 internal constant GRACE_PERIOD_TIME = 72000000;\\n\\n    /// underlying decimals\\n    uint256 internal constant D18 = 1e18;\\n    // tranche nft is fractionalized with decimals 6\\n    uint8 internal constant TRANCHE_DECIMALS = 6;\\n    uint8 internal constant WATER_DECIMALS = 18;    \\n\\n    bytes internal constant EMPTY = \\\"\\\";\\n\\n    /// function selectors\\n    bytes4 internal constant ERC1155_ACCEPTED = 0xf23a6e61; // bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))\\n    bytes4 internal constant ERC1155_BATCH_ACCEPTED = 0xbc197c81; // bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/FullMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\n/// @title Contains math functions\\nlibrary FullMath {\\n    /// @notice Calculates ceil(a\u00d7b\u00f7denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n    /// @param a The multiplicand\\n    /// @param b The multiplier\\n    /// @param denominator The divisor\\n    /// @return result The 256-bit result\\n    function mulDivRoundingUp(\\n        uint256 a,\\n        uint256 b,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        result = (a * b) / denominator;\\n        if (mulmod(a, b, denominator) > 0) {\\n            require(result < type(uint256).max);\\n            result++;\\n        }\\n    }\\n\\n    function mulDivRoundingUp128(\\n        uint128 a,\\n        uint128 b,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        result = (uint256(a) * uint256(b)) / denominator;\\n        if (mulmod(uint256(a), uint256(b), denominator) > 0) {\\n            // require(result < type(uint256).max); // no overflow for uint128\\n            result++;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/LibDiamond.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\\n/******************************************************************************/\\nimport { IDiamondCut } from \\\"../interfaces/IDiamondCut.sol\\\";\\n\\n// Remember to add the loupe functions from DiamondLoupeFacet to the diamond.\\n// The loupe functions are required by the EIP2535 Diamonds standard\\n\\nlibrary LibDiamond {\\n    bytes32 constant DIAMOND_STORAGE_POSITION = keccak256(\\\"diamond.standard.diamond.storage\\\");\\n\\n    struct DiamondStorage {\\n        // maps function selectors to the facets that execute the functions.\\n        // and maps the selectors to their position in the selectorSlots array.\\n        // func selector => address facet, selector position\\n        mapping(bytes4 => bytes32) facets;\\n        // array of slots of function selectors.\\n        // each slot holds 8 function selectors.\\n        mapping(uint256 => bytes32) selectorSlots;\\n        // The number of function selectors in selectorSlots\\n        uint16 selectorCount;\\n        // Used to query if a contract implements an interface.\\n        // Used to implement ERC-165.\\n        mapping(bytes4 => bool) supportedInterfaces;\\n        // owner of the contract\\n        address contractOwner;\\n    }\\n\\n    function diamondStorage() internal pure returns (DiamondStorage storage ds) {\\n        bytes32 position = DIAMOND_STORAGE_POSITION;\\n        assembly {\\n            ds.slot := position\\n        }\\n    }\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    function setContractOwner(address _newOwner) internal {\\n        DiamondStorage storage ds = diamondStorage();\\n        address previousOwner = ds.contractOwner;\\n        ds.contractOwner = _newOwner;\\n        emit OwnershipTransferred(previousOwner, _newOwner);\\n    }\\n\\n    function contractOwner() internal view returns (address contractOwner_) {\\n        contractOwner_ = diamondStorage().contractOwner;\\n    }\\n\\n    function enforceIsContractOwner() internal view {\\n        require(msg.sender == diamondStorage().contractOwner, \\\"LibDiamond: Must be contract owner\\\");\\n    }\\n\\n    event DiamondCut(IDiamondCut.FacetCut[] _diamondCut, address _init, bytes _calldata);\\n\\n    bytes32 constant CLEAR_ADDRESS_MASK = bytes32(uint256(0xffffffffffffffffffffffff));\\n    bytes32 constant CLEAR_SELECTOR_MASK = bytes32(uint256(0xffffffff << 224));\\n\\n    // Internal function version of diamondCut\\n    // This code is almost the same as the external diamondCut,\\n    // except it is using 'Facet[] memory _diamondCut' instead of\\n    // 'Facet[] calldata _diamondCut'.\\n    // The code is duplicated to prevent copying calldata to memory which\\n    // causes an error for a two dimensional array.\\n    function diamondCut(\\n        IDiamondCut.FacetCut[] memory _diamondCut,\\n        address _init,\\n        bytes memory _calldata\\n    ) internal {\\n        DiamondStorage storage ds = diamondStorage();\\n        uint256 originalSelectorCount = ds.selectorCount;\\n        uint256 selectorCount = originalSelectorCount;\\n        bytes32 selectorSlot;\\n        // Check if last selector slot is not full\\n        // \\\"selectorCount & 7\\\" is a gas efficient modulo by eight \\\"selectorCount % 8\\\"\\n        if (selectorCount & 7 > 0) {\\n            // get last selectorSlot\\n            // \\\"selectorSlot >> 3\\\" is a gas efficient division by 8 \\\"selectorSlot / 8\\\"\\n            selectorSlot = ds.selectorSlots[selectorCount >> 3];\\n        }\\n        // loop through diamond cut\\n        for (uint256 facetIndex; facetIndex < _diamondCut.length; facetIndex++) {\\n            (selectorCount, selectorSlot) = addReplaceRemoveFacetSelectors(\\n                selectorCount,\\n                selectorSlot,\\n                _diamondCut[facetIndex].facetAddress,\\n                _diamondCut[facetIndex].action,\\n                _diamondCut[facetIndex].functionSelectors\\n            );\\n        }\\n        if (selectorCount != originalSelectorCount) {\\n            ds.selectorCount = uint16(selectorCount);\\n        }\\n        // If last selector slot is not full\\n        // \\\"selectorCount & 7\\\" is a gas efficient modulo by eight \\\"selectorCount % 8\\\"\\n        if (selectorCount & 7 > 0) {\\n            // \\\"selectorSlot >> 3\\\" is a gas efficient division by 8 \\\"selectorSlot / 8\\\"\\n            ds.selectorSlots[selectorCount >> 3] = selectorSlot;\\n        }\\n        emit DiamondCut(_diamondCut, _init, _calldata);\\n        initializeDiamondCut(_init, _calldata);\\n    }\\n\\n    function addReplaceRemoveFacetSelectors(\\n        uint256 _selectorCount,\\n        bytes32 _selectorSlot,\\n        address _newFacetAddress,\\n        IDiamondCut.FacetCutAction _action,\\n        bytes4[] memory _selectors\\n    ) internal returns (uint256, bytes32) {\\n        DiamondStorage storage ds = diamondStorage();\\n        require(_selectors.length > 0, \\\"LibDiamondCut: No selectors in facet to cut\\\");\\n        if (_action == IDiamondCut.FacetCutAction.Add) {\\n            enforceHasContractCode(_newFacetAddress, \\\"LibDiamondCut: Add facet has no code\\\");\\n            for (uint256 selectorIndex; selectorIndex < _selectors.length; selectorIndex++) {\\n                bytes4 selector = _selectors[selectorIndex];\\n                bytes32 oldFacet = ds.facets[selector];\\n                require(address(bytes20(oldFacet)) == address(0), \\\"LibDiamondCut: Can't add function that already exists\\\");\\n                // add facet for selector\\n                ds.facets[selector] = bytes20(_newFacetAddress) | bytes32(_selectorCount);\\n                // \\\"_selectorCount & 7\\\" is a gas efficient modulo by eight \\\"_selectorCount % 8\\\"\\n                // \\\" << 5 is the same as multiplying by 32 ( * 32)\\n                uint256 selectorInSlotPosition = (_selectorCount & 7) << 5;\\n                // clear selector position in slot and add selector\\n                _selectorSlot = (_selectorSlot & ~(CLEAR_SELECTOR_MASK >> selectorInSlotPosition)) | (bytes32(selector) >> selectorInSlotPosition);\\n                // if slot is full then write it to storage\\n                if (selectorInSlotPosition == 224) {\\n                    // \\\"_selectorSlot >> 3\\\" is a gas efficient division by 8 \\\"_selectorSlot / 8\\\"\\n                    ds.selectorSlots[_selectorCount >> 3] = _selectorSlot;\\n                    _selectorSlot = 0;\\n                }\\n                _selectorCount++;\\n            }\\n        } else if (_action == IDiamondCut.FacetCutAction.Replace) {\\n            enforceHasContractCode(_newFacetAddress, \\\"LibDiamondCut: Replace facet has no code\\\");\\n            for (uint256 selectorIndex; selectorIndex < _selectors.length; selectorIndex++) {\\n                bytes4 selector = _selectors[selectorIndex];\\n                bytes32 oldFacet = ds.facets[selector];\\n                address oldFacetAddress = address(bytes20(oldFacet));\\n                // only useful if immutable functions exist\\n                require(oldFacetAddress != address(this), \\\"LibDiamondCut: Can't replace immutable function\\\");\\n                require(oldFacetAddress != _newFacetAddress, \\\"LibDiamondCut: Can't replace function with same function\\\");\\n                require(oldFacetAddress != address(0), \\\"LibDiamondCut: Can't replace function that doesn't exist\\\");\\n                // replace old facet address\\n                ds.facets[selector] = (oldFacet & CLEAR_ADDRESS_MASK) | bytes20(_newFacetAddress);\\n            }\\n        } else if (_action == IDiamondCut.FacetCutAction.Remove) {\\n            require(_newFacetAddress == address(0), \\\"LibDiamondCut: Remove facet address must be address(0)\\\");\\n            // \\\"_selectorCount >> 3\\\" is a gas efficient division by 8 \\\"_selectorCount / 8\\\"\\n            uint256 selectorSlotCount = _selectorCount >> 3;\\n            // \\\"_selectorCount & 7\\\" is a gas efficient modulo by eight \\\"_selectorCount % 8\\\"\\n            uint256 selectorInSlotIndex = _selectorCount & 7;\\n            for (uint256 selectorIndex; selectorIndex < _selectors.length; selectorIndex++) {\\n                if (_selectorSlot == 0) {\\n                    // get last selectorSlot\\n                    selectorSlotCount--;\\n                    _selectorSlot = ds.selectorSlots[selectorSlotCount];\\n                    selectorInSlotIndex = 7;\\n                } else {\\n                    selectorInSlotIndex--;\\n                }\\n                bytes4 lastSelector;\\n                uint256 oldSelectorsSlotCount;\\n                uint256 oldSelectorInSlotPosition;\\n                // adding a block here prevents stack too deep error\\n                {\\n                    bytes4 selector = _selectors[selectorIndex];\\n                    bytes32 oldFacet = ds.facets[selector];\\n                    require(address(bytes20(oldFacet)) != address(0), \\\"LibDiamondCut: Can't remove function that doesn't exist\\\");\\n                    // only useful if immutable functions exist\\n                    require(address(bytes20(oldFacet)) != address(this), \\\"LibDiamondCut: Can't remove immutable function\\\");\\n                    // replace selector with last selector in ds.facets\\n                    // gets the last selector\\n                    // \\\" << 5 is the same as multiplying by 32 ( * 32)\\n                    lastSelector = bytes4(_selectorSlot << (selectorInSlotIndex << 5));\\n                    if (lastSelector != selector) {\\n                        // update last selector slot position info\\n                        ds.facets[lastSelector] = (oldFacet & CLEAR_ADDRESS_MASK) | bytes20(ds.facets[lastSelector]);\\n                    }\\n                    delete ds.facets[selector];\\n                    uint256 oldSelectorCount = uint16(uint256(oldFacet));\\n                    // \\\"oldSelectorCount >> 3\\\" is a gas efficient division by 8 \\\"oldSelectorCount / 8\\\"\\n                    oldSelectorsSlotCount = oldSelectorCount >> 3;\\n                    // \\\"oldSelectorCount & 7\\\" is a gas efficient modulo by eight \\\"oldSelectorCount % 8\\\"\\n                    // \\\" << 5 is the same as multiplying by 32 ( * 32)\\n                    oldSelectorInSlotPosition = (oldSelectorCount & 7) << 5;\\n                }\\n                if (oldSelectorsSlotCount != selectorSlotCount) {\\n                    bytes32 oldSelectorSlot = ds.selectorSlots[oldSelectorsSlotCount];\\n                    // clears the selector we are deleting and puts the last selector in its place.\\n                    oldSelectorSlot =\\n                        (oldSelectorSlot & ~(CLEAR_SELECTOR_MASK >> oldSelectorInSlotPosition)) |\\n                        (bytes32(lastSelector) >> oldSelectorInSlotPosition);\\n                    // update storage with the modified slot\\n                    ds.selectorSlots[oldSelectorsSlotCount] = oldSelectorSlot;\\n                } else {\\n                    // clears the selector we are deleting and puts the last selector in its place.\\n                    _selectorSlot =\\n                        (_selectorSlot & ~(CLEAR_SELECTOR_MASK >> oldSelectorInSlotPosition)) |\\n                        (bytes32(lastSelector) >> oldSelectorInSlotPosition);\\n                }\\n                if (selectorInSlotIndex == 0) {\\n                    delete ds.selectorSlots[selectorSlotCount];\\n                    _selectorSlot = 0;\\n                }\\n            }\\n            _selectorCount = selectorSlotCount * 8 + selectorInSlotIndex;\\n        } else {\\n            revert(\\\"LibDiamondCut: Incorrect FacetCutAction\\\");\\n        }\\n        return (_selectorCount, _selectorSlot);\\n    }\\n\\n    function initializeDiamondCut(address _init, bytes memory _calldata) internal {\\n        if (_init == address(0)) {\\n            return;\\n        }\\n        enforceHasContractCode(_init, \\\"LibDiamondCut: _init address has no code\\\");\\n        (bool success, bytes memory error) = _init.delegatecall(_calldata);\\n        if (!success) {\\n            if (error.length > 0) {\\n                // bubble up error\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(error)\\n                    revert(add(32, error), returndata_size)\\n                }\\n            } else {\\n                revert(\\\"InitializationFunctionReverted(address, bytes)\\\");\\n            }\\n        }\\n    }\\n\\n    function enforceHasContractCode(address _contract, string memory _errorMessage) internal view {\\n        uint256 contractSize;\\n        assembly {\\n            contractSize := extcodesize(_contract)\\n        }\\n        require(contractSize > 0, _errorMessage);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/utils/EIP2535Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport \\\"@gnus.ai/contracts-upgradeable-diamond/contracts/proxy/utils/Initializable.sol\\\";\\nimport \\\"@gnus.ai/contracts-upgradeable-diamond/contracts/proxy/utils/InitializableStorage.sol\\\";\\nimport \\\"../libraries/LibDiamond.sol\\\";\\n\\nabstract contract EIP2535Initializable is Initializable {\\n\\n    // override Initializable::initializer modifier\\n    modifier EIP2535Initializer() {\\n        require(!InitializableStorage.layout()._initializing && InitializableStorage.layout()._initialized < 1, \\\"Initializable: contract is already initialized\\\");\\n        InitializableStorage.layout()._initialized = 1;\\n        InitializableStorage.layout()._initializing = true;\\n        _;\\n        // multiple facet contracts needed initialization on deployment\\n        InitializableStorage.layout()._initialized = 0;\\n        InitializableStorage.layout()._initializing = false;\\n    }\\n\\n    modifier EIP2535Reinitializer(uint8 version) {\\n        require(!InitializableStorage.layout()._initializing && InitializableStorage.layout()._initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        InitializableStorage.layout()._initialized = version;\\n        InitializableStorage.layout()._initializing = true;\\n        _;\\n        // multiple facet contracts needed re-initialization on ugrades for instance\\n        InitializableStorage.layout()._initialized = 0;\\n        InitializableStorage.layout()._initializing = false;\\n        }\\n\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"none\"\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1000\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"name\":\"ClaimedBid\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InactiveAuction\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientFee\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientReserveAsset\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidAuction\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidAuctionAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidBidToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidEndPrice\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidFixedPrice\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidIncrementBidPrice\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidMinBidAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidPurchaseAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidSellToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidStartTime\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidTrancheAuction\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LowBid\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoAuction\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoAuctioneer\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoBidder\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoCancelBid\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoClosedAuction\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoIdleAuction\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoListTrancheZ\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoTransferEther\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OverPriceBid\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SmallBidAmount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"uint128\",\"name\":\"bidAmount\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"bidPrice\",\"type\":\"uint128\"},{\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"paidAmount\",\"type\":\"uint128\"},{\"internalType\":\"uint16\",\"name\":\"bidTokenId\",\"type\":\"uint16\"},{\"internalType\":\"bool\",\"name\":\"bCleared\",\"type\":\"bool\"}],\"indexed\":false,\"internalType\":\"struct Bid\",\"name\":\"bid\",\"type\":\"tuple\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"bidId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"availableBidDepth\",\"type\":\"uint256\"}],\"name\":\"AuctionBid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"purchaseToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"}],\"name\":\"AuctionBuy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"unSoldAmount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"settledBidCount\",\"type\":\"uint256\"}],\"name\":\"AuctionClosed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"uint48\",\"name\":\"startTime\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"endTime\",\"type\":\"uint48\"},{\"internalType\":\"address\",\"name\":\"sellToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"trancheIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"minBidAmount\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"fixedPrice\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"priceRangeStart\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"priceRangeEnd\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"sellAmount\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"reserve\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"incrementBidPrice\",\"type\":\"uint128\"},{\"internalType\":\"uint16\",\"name\":\"bidTokenGroupId\",\"type\":\"uint16\"},{\"internalType\":\"enum AuctionType\",\"name\":\"auctionType\",\"type\":\"uint8\"}],\"indexed\":false,\"internalType\":\"struct AuctionSetting\",\"name\":\"auctionSetting\",\"type\":\"tuple\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"}],\"name\":\"AuctionCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minBidAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"priceRangeStart\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"incrementPrice\",\"type\":\"uint256\"}],\"name\":\"AuctionUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bidId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isWinner\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"claimAmount\",\"type\":\"uint256\"}],\"name\":\"ClaimBid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"purchaseAmount\",\"type\":\"uint128\"},{\"internalType\":\"uint16\",\"name\":\"buyTokenId\",\"type\":\"uint16\"}],\"name\":\"buyNow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bidId\",\"type\":\"uint256\"}],\"name\":\"claimBid\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"}],\"name\":\"closeAuction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint48\",\"name\":\"startTime\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"endTime\",\"type\":\"uint48\"},{\"internalType\":\"address\",\"name\":\"sellToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"trancheIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"minBidAmount\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"fixedPrice\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"priceRangeStart\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"priceRangeEnd\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"sellAmount\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"reserve\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"incrementBidPrice\",\"type\":\"uint128\"},{\"internalType\":\"uint16\",\"name\":\"bidTokenGroupId\",\"type\":\"uint16\"},{\"internalType\":\"enum AuctionType\",\"name\":\"auctionType\",\"type\":\"uint8\"}],\"internalType\":\"struct AuctionSetting\",\"name\":\"auctionSetting\",\"type\":\"tuple\"},{\"internalType\":\"uint8\",\"name\":\"periodId\",\"type\":\"uint8\"}],\"name\":\"createAuction\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"}],\"name\":\"getAuction\",\"outputs\":[{\"components\":[{\"components\":[{\"internalType\":\"uint48\",\"name\":\"startTime\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"endTime\",\"type\":\"uint48\"},{\"internalType\":\"address\",\"name\":\"sellToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"trancheIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"minBidAmount\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"fixedPrice\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"priceRangeStart\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"priceRangeEnd\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"sellAmount\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"reserve\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"incrementBidPrice\",\"type\":\"uint128\"},{\"internalType\":\"uint16\",\"name\":\"bidTokenGroupId\",\"type\":\"uint16\"},{\"internalType\":\"enum AuctionType\",\"name\":\"auctionType\",\"type\":\"uint8\"}],\"internalType\":\"struct AuctionSetting\",\"name\":\"s\",\"type\":\"tuple\"},{\"internalType\":\"uint128\",\"name\":\"curBidId\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"totalBidAmount\",\"type\":\"uint128\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"availableBidDepth\",\"type\":\"uint8\"},{\"internalType\":\"enum AuctionStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"feeAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct AuctionData\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAuctionFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"numerator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dominator\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAuctionPeriods\",\"outputs\":[{\"internalType\":\"uint48[]\",\"name\":\"\",\"type\":\"uint48[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAuctionsCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalAuctionsCount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bidId\",\"type\":\"uint256\"}],\"name\":\"getBid\",\"outputs\":[{\"components\":[{\"internalType\":\"uint128\",\"name\":\"bidAmount\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"bidPrice\",\"type\":\"uint128\"},{\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"paidAmount\",\"type\":\"uint128\"},{\"internalType\":\"uint16\",\"name\":\"bidTokenId\",\"type\":\"uint16\"},{\"internalType\":\"bool\",\"name\":\"bCleared\",\"type\":\"bool\"}],\"internalType\":\"struct Bid\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenGroupId\",\"type\":\"uint256\"}],\"name\":\"getBidTokenGroup\",\"outputs\":[{\"components\":[{\"internalType\":\"address[]\",\"name\":\"bidTokens\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"basePriceToken\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"name\",\"type\":\"bytes32\"}],\"internalType\":\"struct BidTokenGroup\",\"name\":\"tokenGroup\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBidTokenGroupCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"countOfTokenGroup\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"purchaseToken\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"purchaseAmount\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"price\",\"type\":\"uint128\"},{\"internalType\":\"uint8\",\"name\":\"sellTokenDecimals\",\"type\":\"uint8\"}],\"name\":\"getPayAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bidId\",\"type\":\"uint256\"}],\"name\":\"isWinnerBid\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isWinner\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isClaimed\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"claimAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"bidAmount\",\"type\":\"uint128\"},{\"internalType\":\"uint16\",\"name\":\"bidTokenId\",\"type\":\"uint16\"},{\"internalType\":\"uint128\",\"name\":\"bidPrice\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"maxBidPrice\",\"type\":\"uint128\"}],\"name\":\"placeBid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"minBidAmount\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"priceRangeStart\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"incrementBidPrice\",\"type\":\"uint128\"}],\"name\":\"updateAuction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "AuctionUpgradeable", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "1000", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}