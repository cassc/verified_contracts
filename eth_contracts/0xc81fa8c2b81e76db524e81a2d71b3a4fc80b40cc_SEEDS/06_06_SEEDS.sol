// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.15;

import "../lib/solady/src/utils/ECDSA.sol";
import "../lib/solady/src/utils/LibString.sol";
import "../lib/solmate/src/auth/Owned.sol";
import "../lib/ERC721A/contracts/ERC721A.sol";

/// @title SEEDS
/// @author EtDu
/// @notice They tried to bury us, but they didn't know we were SEEDS

//                                  ╓▄▄
//                        , ▄▄▄▄▄,▄▄███   ,▄▄▄
//                       ▄████████████████▄
//                   ▄█████████▀▀▀▀▀▀▀██████▄█
//                ▄▄█████████           └▀█████
//           ╔▄▄▀██████████▌`,▄▄▄▄         ██████∩
//        █▄█▀▄▄█████████▀  ╓▄▄,██▌        ████████
//         ▄▀██▄██║█████     ═▄██▀  ▄███▄  █████████
//       ▄█╓██▀██▄█████     ,      ,██▌;╙██████║███▌
//    ╓███\█▀▄█████████  ,▀▀└ "▀█▄▌ ¬▀▀███████╖█████
//     ██`█▌███▌╙██████  ▄▌▄▄▄▌▀▀███▄   ╙████ ██████
//     █H▐████└ ███████  └▀,  ▀≡▄ ▀███▄,████▀▐██████▌
//     █║█████ ███████└    ▄╙▀▀▄ ▐▄█████████▄████████∩
//     ▌██████ ██████▀    ╓███▄████████████▄██████████
//      █▐███▌█████████▄;,, ▀▀▀▀█████████▌▐███████████M
//      █████M║███▌██████████▄███████████▌██ ▐████████⌐
//     ╓█████ ████▌║██████████████████████▀ █▀╓███████▄
//    ▄██████▐██▀██▐█████████████▀▄██████  █▀█████████▌
//    ▐█████▌║║▌██▌ █  ███████▀ ╓▀▄████▀▄⌐   ██████▀▌█⌐
//    ║█████▌█╓███▌     ╓▄██▀ ═Γ╓███▀▀▄█▀ ▄╣███████ ▐█H
//     ▀████^███▌██      ╙▐═Φ███████▀██▌ ██████▀█████▀
//    Φ████▄▄▀███▌██     ╓└╓██████▀▄███▀▄█╔█▀▀▓██████▄
//     ██▄██⌐▐███⌐██    ╓¬ Ä█████▀▄███ ▄█H║█▌└ ██║║███▄
//     `███▀╓███,█▀█   ,¬  ▄██▀▐▄▄███▄███ ║█▌ ███"█████▄
//     ╓██▀,███┐╙█∩ ▀ ,┘   ▄▀█▓███▀▄█████ ██▌`██▌ ███████
//    ▄██M,███▐█▄╙█▄  ╛ ¿═└╓████████████¼╝▐█▌*▀█▌ ███████⌐
//    ▐▄█ █║██ ▀▄* ▀ ╛ ▄ ▄██████▀█████████▌██╕▐█M ██▐████H
//    ██▌█████▐W    M▄└╓███████▀║████████▐▀"▀^▀▀  █▌Φ█▌▐█▄
//   ,▄█M└███▌▄▀     █*,███████ ▐█████ █▌▀╓╝     ▐█▌ ╙▀ ██
//  ║████████ █▀ ¿▀ ▄▌█▀██████¬ █████▌ ██▓       ██▌    █
//  `█▐████ ▀  ▄▄p     █╓█████ ▐████▌  ██▌       ▐█╙╓▄ ▐▌
//   █▄▄██      /     █,███▐█⌐ ▐████M ╓█▀█       ,█▌█▌ ▐▌
//     ``       ⌐    █╓███▌▐█   "███ ▐█H ██     ╓████▌ ▐
//                  '^████,█▌    `▀▀██    ▀^  -▄███ ▀
//                     ▐█¬▐█        ▀        ,███▀
//                                          ║█▀
              
contract SEEDS is ERC721A, Owned {
  using ECDSA for bytes32;
  using LibString for uint256;

  /*------------------------------------------------------*/
  /*                VARIABLES / CONSTANTS
  /*------------------------------------------------------*/

  uint256 maxSupply = 4200;
  string private enigma22357;
  string public baseURI;

  /*------------------------------------------------------*/
  /*                     CONSTRUCTOR
  /*------------------------------------------------------*/

  constructor(string memory enigma) ERC721A("They tried to bury us, but they didn't know we were", "SEEDS") Owned(msg.sender){
    enigma22357 = enigma;
  }

  /*------------------------------------------------------*/
  /*                     MAIN FUNCTIONS
  /*------------------------------------------------------*/

  /// @notice Mint X amount of SEEDS to address
  function mint(
    address to,
    uint256 amount
  ) external onlyOwner {
    require(totalSupply() < maxSupply, "Max Supply Reached");
    _mint(to, amount);
  }

  /*------------------------------------------------------*/
  /*                        ADMIN
  /*------------------------------------------------------*/

  function changeBaseURI(string calldata newBaseURI) external onlyOwner {
    baseURI = newBaseURI;
  }

  /*------------------------------------------------------*/
  /*                      READ ONLY
  /*------------------------------------------------------*/

  function _baseURI() internal view override returns (string memory) {
    return baseURI;
  }

  /*------------------------------------------------------*/
  /*                      WITHDRAW
  /*------------------------------------------------------*/

  function withdraw() external onlyOwner {
    assembly {
        let result := call(0, caller(), selfbalance(), 0, 0, 0, 0)
        switch result
        case 0 { revert(0, 0) }
        default { return(0, 0) }
    }
  }
}