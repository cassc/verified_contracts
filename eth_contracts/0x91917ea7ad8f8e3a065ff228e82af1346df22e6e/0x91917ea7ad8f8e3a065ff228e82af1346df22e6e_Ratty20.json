{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/ratty.sol\": {\r\n      \"content\": \"/**\\r\\n *Submitted for verification at Etherscan.io on 2023-07-17\\r\\n*/\\r\\n\\r\\n// SPDX-License-Identifier: MIT\\r\\n\\r\\n// Ratty2.0 | RATTY2.0\\r\\n// https://rattycoin.com/\\r\\n// https://twitter.com/rattycoinercv2\\r\\n// https://t.me/rattycoinv2 \\r\\n\\r\\n\\r\\npragma solidity ^0.8.18;\\r\\n\\r\\nabstract contract Context {\\r\\n    function _msgSender() internal view virtual returns (address) {\\r\\n        return msg.sender;\\r\\n    }\\r\\n}\\r\\n\\r\\ninterface IERC20 {\\r\\n    function totalSupply() external view returns (uint256);\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\r\\n    function allowance(address owner, address spender) external view returns (uint256);\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n}\\r\\n\\r\\ncontract Ownable is Context {\\r\\n    address private _owner;\\r\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\r\\n\\r\\n    constructor () {\\r\\n        address msgSender = _msgSender();\\r\\n        _owner = msgSender;\\r\\n        emit OwnershipTransferred(address(0), msgSender);\\r\\n    }\\r\\n\\r\\n    function owner() public view returns (address) {\\r\\n        return _owner;\\r\\n    }\\r\\n\\r\\n    modifier onlyOwner() {\\r\\n        require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function renounceOwnership() public virtual onlyOwner {\\r\\n        emit OwnershipTransferred(_owner, address(0));\\r\\n        _owner = address(0);\\r\\n    }\\r\\n}\\r\\n\\r\\ninterface IUniswapV2Factory {\\r\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\r\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\\r\\n}\\r\\n\\r\\ninterface IUniswapV2Router02 {\\r\\n    function factory() external pure returns (address);\\r\\n    function WETH() external pure returns (address);\\r\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\r\\n        uint amountIn,\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external;\\r\\n}\\r\\n\\r\\n\\r\\ncontract Ratty20 is Context, IERC20, Ownable {\\r\\n    mapping (address => uint256) private _balances;\\r\\n    mapping (address => mapping (address => uint256)) private _allowances;\\r\\n    mapping (address => bool) private _noFee;\\r\\n    address payable private marketing;\\r\\n\\r\\n    uint256 private buyTax = 1;\\r\\n    uint256 private sellTax = 1;\\r\\n    uint256 private constant launchTax = 20;\\r\\n    uint256 private constant feeDenominator = 100;\\r\\n    uint256 private launchedAt;\\r\\n    address constant private DEAD = address(0x000000000000000000000000000000000000dEaD);\\r\\n\\r\\n    uint8 private constant _decimals = 9;\\r\\n    uint256 private constant _tTotal = 420_690_000_000_000 * 10**_decimals;\\r\\n    string private constant _name   = unicode\\\"Ratty2.0\\\";\\r\\n    string private constant _symbol = unicode\\\"RATTY2.0\\\";\\r\\n    uint256 private swapThreshold = _tTotal * 5 / 1000;\\r\\n    uint256 private maxSwap       = _tTotal * 1 / 100;\\r\\n\\r\\n    IUniswapV2Router02 private uniswapV2Router;\\r\\n    address private uniswapV2Pair;\\r\\n    bool public tradingStart;\\r\\n    bool private inSwap;\\r\\n\\r\\n    event MaxTxAmountUpdated(uint maxTxAmount);\\r\\n    \\r\\n    modifier inSwapFlag { inSwap = true; _; inSwap = false; }\\r\\n\\r\\n    constructor () {\\r\\n        marketing = payable(_msgSender());\\r\\n        _balances[_msgSender()] = _tTotal;\\r\\n        _noFee[owner()] = true;\\r\\n        _noFee[address(this)] = true;\\r\\n        _noFee[DEAD] = true;\\r\\n\\r\\n        emit Transfer(address(0), _msgSender(), _tTotal);\\r\\n\\r\\n        uniswapV2Router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\\r\\n        uniswapV2Pair = IUniswapV2Factory(uniswapV2Router.factory()).createPair(address(this), uniswapV2Router.WETH());\\r\\n        _approve(msg.sender, address(uniswapV2Router), type(uint256).max);\\r\\n        _approve(address(this), address(uniswapV2Router), type(uint256).max);\\r\\n    }\\r\\n\\r\\n    function name() public pure returns (string memory) { return _name; }\\r\\n    function symbol() public pure returns (string memory) { return _symbol; }\\r\\n    function decimals() public pure returns (uint8) { return _decimals; }\\r\\n    function totalSupply() public pure override returns (uint256) { return _tTotal; }\\r\\n    function balanceOf(address account) public view override returns (uint256) { return _balances[account]; }\\r\\n    function allowance(address owner, address spender) public view override returns (uint256) { return _allowances[owner][spender]; }\\r\\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\\r\\n        _transfer(_msgSender(), recipient, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function approve(address spender, uint256 amount) public override returns (bool) {\\r\\n        _approve(_msgSender(), spender, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\\r\\n        _transfer(sender, recipient, amount);\\r\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\r\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\r\\n        unchecked {\\r\\n            _approve(sender, _msgSender(), currentAllowance - amount);\\r\\n        }\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function _approve(address owner, address spender, uint256 amount) private {\\r\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\r\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\r\\n        _allowances[owner][spender] = amount;\\r\\n        emit Approval(owner, spender, amount);\\r\\n    }\\r\\n\\r\\n    function _transfer(address from, address to, uint256 amount) private {\\r\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\r\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\r\\n        require(amount > 0, \\\"Transfer amount must be greater than zero\\\");\\r\\n        \\r\\n        if (!tradingStart) {\\r\\n            require(from == owner() || to == owner(), \\\"Trading is not opened yet!\\\");\\r\\n        }\\r\\n        \\r\\n        uint256 tax;\\r\\n        if (from == uniswapV2Pair && to != address(uniswapV2Router) && !_noFee[to]) {\\r\\n            tax = (block.number <= (launchedAt + 6)) ? launchTax : buyTax;\\r\\n        }\\r\\n\\r\\n        if (to == uniswapV2Pair && from != address(this) && !_noFee[from]) {\\r\\n            tax = (block.number <= (launchedAt + 6)) ? launchTax : sellTax;\\r\\n            \\r\\n            uint256 contractTokenBalance = balanceOf(address(this));\\r\\n            if (!inSwap && (contractTokenBalance > swapThreshold)) {\\r\\n                swapBack(min(contractTokenBalance, maxSwap));\\r\\n            }\\r\\n        }\\r\\n\\r\\n        uint256 taxAmount = amount * tax / 100;\\r\\n        if (taxAmount > 0) {\\r\\n            _balances[address(this)] += taxAmount;\\r\\n        }\\r\\n        _balances[from] -= amount;\\r\\n        _balances[to] += (amount - taxAmount);\\r\\n        emit Transfer(from, to, (amount - taxAmount));\\r\\n    }\\r\\n\\r\\n    function min(uint256 a, uint256 b) private pure returns (uint256){\\r\\n        return (a > b) ? b : a;\\r\\n    }\\r\\n\\r\\n    function swapBack(uint256 amount) internal inSwapFlag {\\r\\n        address[] memory path = new address[](2);\\r\\n        path[0] = address(this);\\r\\n        path[1] = uniswapV2Router.WETH();\\r\\n\\r\\n        if (_allowances[address(this)][address(uniswapV2Router)] != type(uint256).max) {\\r\\n            _allowances[address(this)][address(uniswapV2Router)] = type(uint256).max;\\r\\n        }\\r\\n\\r\\n        try uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\\r\\n            amount,\\r\\n            0,\\r\\n            path,\\r\\n            address(this),\\r\\n            block.timestamp\\r\\n        ) {} catch {\\r\\n            return;\\r\\n        }\\r\\n        bool success;\\r\\n\\r\\n        if (address(this).balance > 0) (success,) = marketing.call{value: address(this).balance}(\\\"\\\");\\r\\n    }\\r\\n\\r\\n    function updateFee(uint256 buy, uint256 sell) external onlyOwner {\\r\\n        buyTax  = buy;\\r\\n        sellTax = sell;\\r\\n        uint256 totalTax = buyTax + sellTax;\\r\\n        require(totalTax/feeDenominator <= 10, \\\"Total tax must be less than or equal to 10%\\\");\\r\\n    }\\r\\n\\r\\n    function startTrading() external onlyOwner() {\\r\\n        require(!tradingStart, \\\"Trading is already open\\\");\\r\\n        tradingStart = true;\\r\\n        launchedAt = block.number;\\r\\n    }\\r\\n\\r\\n    function swap() external {\\r\\n        require(_msgSender() == marketing);\\r\\n        uint256 tokenBalance = balanceOf(address(this));\\r\\n        if (tokenBalance > 0) {\\r\\n            swapBack(tokenBalance);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    receive() external payable {}\\r\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxTxAmount\",\"type\":\"uint256\"}],\"name\":\"MaxTxAmountUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingStart\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"buy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sell\",\"type\":\"uint256\"}],\"name\":\"updateFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "Ratty20", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}