{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ninterface IUniswapV2Pair {\r\n    function getReserves() external view returns (uint reserve0, uint reserve1, uint32 blockTimestampLast);\r\n}\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n}\r\n\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\ncontract PresaleContract is Ownable {\r\n    IERC20 public presaleToken;\r\n    IERC20 public usdtToken;\r\n    IUniswapV2Pair public uniswapPair;\r\n    uint256 public swapRate; // Number of presale tokens per USDT, adjusted for presale token decimals\r\n    uint256 public bonusPercentage = 0; // Bonus percentage\r\n    bool public presaleEnded = false;\r\n    mapping(address => uint256) public tokensOwed; // Track how many tokens each participant can claim\r\n    event DebugInfo(uint256 adjustedReserve0, uint256 reserve1, uint256 newEthRate);\r\n\r\n    constructor(address _presaleToken, address _usdtToken, address _uniswapPair) {\r\n        presaleToken = IERC20(_presaleToken);\r\n        usdtToken = IERC20(_usdtToken);\r\n        uniswapPair = IUniswapV2Pair(_uniswapPair);\r\n        swapRate = 5 * 1e9;\r\n    }\r\n\r\n    function endPresale() external onlyOwner {\r\n        presaleEnded = true;\r\n    }\r\n    function calculateBonus(uint256 tokens) private view returns (uint256) {\r\n        return tokens * (100 + bonusPercentage) / 100;\r\n    }\r\n    function updateBonus(uint256 _bonusPercentage) external onlyOwner {\r\n        bonusPercentage = _bonusPercentage;\r\n    }\r\n    function updateSwapRate(uint256 _swapRate) external onlyOwner {\r\n        swapRate = _swapRate;\r\n    }\r\n    function updateUniswapPair(address _newUniswapPair) external onlyOwner {\r\n        uniswapPair = IUniswapV2Pair(_newUniswapPair);\r\n    }\r\n    function ethRate() public view returns (uint256) {\r\n        (uint reserve0, uint reserve1,) = uniswapPair.getReserves();\r\n        require(reserve1 != 0, \"Cannot divide by zero\");\r\n        uint256 adjustedReserve0 = reserve0 * 1e12; // Scale USDT up to 18 decimals to match ETH\r\n        uint256 rawRate = adjustedReserve0 / reserve1; // This is the rate in wei\r\n        return rawRate / 1e17; // Adjust the rate to a more 'human-readable' format\r\n    }\r\n    function swapWithETH() external payable {\r\n        require(!presaleEnded, \"Presale has ended\");\r\n        require(msg.value > 0, \"No ETH sent\");\r\n        uint256 currentEthRate = ethRate(); // Fetch current ETH rate live\r\n        (bool sent, ) = owner().call{value: msg.value}(\"\");\r\n        require(sent, \"Failed to send ETH\");\r\n        uint256 usdtEquivalent = msg.value * currentEthRate / 1e12; // Calculate USDT equivalent\r\n        uint256 tokensWithoutBonus = usdtEquivalent * swapRate / 1e6; // Adjust for decimal differences\r\n        uint256 tokensToTransfer = calculateBonus(tokensWithoutBonus);\r\n        tokensOwed[msg.sender] += tokensToTransfer;\r\n    }\r\n    function swapWithUSDT(uint256 usdtAmount) external {\r\n        require(!presaleEnded, \"Presale has ended\");\r\n        require(usdtAmount > 0, \"Invalid USDT amount\");\r\n        require(usdtToken.transferFrom(msg.sender, owner(), usdtAmount), \"Failed to transfer USDT\");\r\n        uint256 tokensWithoutBonus = usdtAmount * swapRate / 1e6; \r\n        uint256 tokensToTransfer = calculateBonus(tokensWithoutBonus);\r\n        tokensOwed[msg.sender] += tokensToTransfer;\r\n    }\r\n    function claimTokens() external {\r\n        require(presaleEnded, \"Presale has not ended yet\");\r\n        uint256 amountOwed = tokensOwed[msg.sender];\r\n        require(amountOwed > 0, \"No tokens owed\");   \r\n        tokensOwed[msg.sender] = 0;\r\n        require(presaleToken.transfer(msg.sender, amountOwed), \"Failed to transfer tokens\");\r\n    }\r\n    function withdrawETH(address to, uint256 amount) external onlyOwner {\r\n        payable(to).transfer(amount);\r\n    }\r\n    function withdrawUSDT(address to, uint256 amount) external onlyOwner {\r\n        require(usdtToken.transfer(to, amount), \"Failed to transfer USDT\");\r\n    }\r\n    function withdrawPresaleToken(address _recipient, uint256 _amount) external onlyOwner {\r\n        require(presaleToken.transfer(_recipient, _amount), \"Contract: Failed to transfer Presale Token\");\r\n    }\r\n    receive() external payable {}\r\n    fallback() external payable {}\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_presaleToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_usdtToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_uniswapPair\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"adjustedReserve0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reserve1\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newEthRate\",\"type\":\"uint256\"}],\"name\":\"DebugInfo\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"bonusPercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endPresale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ethRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"presaleEnded\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"presaleToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapWithETH\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"usdtAmount\",\"type\":\"uint256\"}],\"name\":\"swapWithUSDT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokensOwed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapPair\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Pair\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_bonusPercentage\",\"type\":\"uint256\"}],\"name\":\"updateBonus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_swapRate\",\"type\":\"uint256\"}],\"name\":\"updateSwapRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newUniswapPair\",\"type\":\"address\"}],\"name\":\"updateUniswapPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdtToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawPresaleToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawUSDT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "PresaleContract", "CompilerVersion": "v0.8.25+commit.b61c2a91", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000004f162bd678cfb0b5bde28c29d0aa4ee6ec24423d000000000000000000000000dac17f958d2ee523a2206206994597c13d831ec70000000000000000000000000d4a11d5eeaac28ec3f61d100daf4d40471f1852", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://ff25e99635f6bb2b02748a2849a0d4e4fedb3c662837a1f800d1a36a5d33c9d6"}