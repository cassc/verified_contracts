{"SourceCode": "// Sources flattened with hardhat v2.20.1 https://hardhat.org\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\n// File @openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol@v5.0.1\r\n\r\n// Original license: SPDX_License_Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/utils/Initializable.sol)\r\n\r\npragma solidity ^0.8.20;\r\n\r\n/**\r\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\r\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\r\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\r\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\r\n *\r\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\r\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\r\n * case an upgrade adds a module that needs to be initialized.\r\n *\r\n * For example:\r\n *\r\n * [.hljs-theme-light.nopadding]\r\n * ```solidity\r\n * contract MyToken is ERC20Upgradeable {\r\n *     function initialize() initializer public {\r\n *         __ERC20_init(\"MyToken\", \"MTK\");\r\n *     }\r\n * }\r\n *\r\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\r\n *     function initializeV2() reinitializer(2) public {\r\n *         __ERC20Permit_init(\"MyToken\");\r\n *     }\r\n * }\r\n * ```\r\n *\r\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\r\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\r\n *\r\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\r\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\r\n *\r\n * [CAUTION]\r\n * ====\r\n * Avoid leaving a contract uninitialized.\r\n *\r\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\r\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\r\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\r\n *\r\n * [.hljs-theme-light.nopadding]\r\n * ```\r\n * /// @custom:oz-upgrades-unsafe-allow constructor\r\n * constructor() {\r\n *     _disableInitializers();\r\n * }\r\n * ```\r\n * ====\r\n */\r\nabstract contract Initializable {\r\n    /**\r\n     * @dev Storage of the initializable contract.\r\n     *\r\n     * It's implemented on a custom ERC-7201 namespace to reduce the risk of storage collisions\r\n     * when using with upgradeable contracts.\r\n     *\r\n     * @custom:storage-location erc7201:openzeppelin.storage.Initializable\r\n     */\r\n    struct InitializableStorage {\r\n        /**\r\n         * @dev Indicates that the contract has been initialized.\r\n         */\r\n        uint64 _initialized;\r\n        /**\r\n         * @dev Indicates that the contract is in the process of being initialized.\r\n         */\r\n        bool _initializing;\r\n    }\r\n\r\n    // keccak256(abi.encode(uint256(keccak256(\"openzeppelin.storage.Initializable\")) - 1)) & ~bytes32(uint256(0xff))\r\n    bytes32 private constant INITIALIZABLE_STORAGE = 0xf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00;\r\n\r\n    /**\r\n     * @dev The contract is already initialized.\r\n     */\r\n    error InvalidInitialization();\r\n\r\n    /**\r\n     * @dev The contract is not initializing.\r\n     */\r\n    error NotInitializing();\r\n\r\n    /**\r\n     * @dev Triggered when the contract has been initialized or reinitialized.\r\n     */\r\n    event Initialized(uint64 version);\r\n\r\n    /**\r\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\r\n     * `onlyInitializing` functions can be used to initialize parent contracts.\r\n     *\r\n     * Similar to `reinitializer(1)`, except that in the context of a constructor an `initializer` may be invoked any\r\n     * number of times. This behavior in the constructor can be useful during testing and is not expected to be used in\r\n     * production.\r\n     *\r\n     * Emits an {Initialized} event.\r\n     */\r\n    modifier initializer() {\r\n        // solhint-disable-next-line var-name-mixedcase\r\n        InitializableStorage storage $ = _getInitializableStorage();\r\n\r\n        // Cache values to avoid duplicated sloads\r\n        bool isTopLevelCall = !$._initializing;\r\n        uint64 initialized = $._initialized;\r\n\r\n        // Allowed calls:\r\n        // - initialSetup: the contract is not in the initializing state and no previous version was\r\n        //                 initialized\r\n        // - construction: the contract is initialized at version 1 (no reininitialization) and the\r\n        //                 current contract is just being deployed\r\n        bool initialSetup = initialized == 0 && isTopLevelCall;\r\n        bool construction = initialized == 1 && address(this).code.length == 0;\r\n\r\n        if (!initialSetup && !construction) {\r\n            revert InvalidInitialization();\r\n        }\r\n        $._initialized = 1;\r\n        if (isTopLevelCall) {\r\n            $._initializing = true;\r\n        }\r\n        _;\r\n        if (isTopLevelCall) {\r\n            $._initializing = false;\r\n            emit Initialized(1);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\r\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\r\n     * used to initialize parent contracts.\r\n     *\r\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\r\n     * are added through upgrades and that require initialization.\r\n     *\r\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\r\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\r\n     *\r\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\r\n     * a contract, executing them in the right order is up to the developer or operator.\r\n     *\r\n     * WARNING: Setting the version to 2**64 - 1 will prevent any future reinitialization.\r\n     *\r\n     * Emits an {Initialized} event.\r\n     */\r\n    modifier reinitializer(uint64 version) {\r\n        // solhint-disable-next-line var-name-mixedcase\r\n        InitializableStorage storage $ = _getInitializableStorage();\r\n\r\n        if ($._initializing || $._initialized >= version) {\r\n            revert InvalidInitialization();\r\n        }\r\n        $._initialized = version;\r\n        $._initializing = true;\r\n        _;\r\n        $._initializing = false;\r\n        emit Initialized(version);\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\r\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\r\n     */\r\n    modifier onlyInitializing() {\r\n        _checkInitializing();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Reverts if the contract is not in an initializing state. See {onlyInitializing}.\r\n     */\r\n    function _checkInitializing() internal view virtual {\r\n        if (!_isInitializing()) {\r\n            revert NotInitializing();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\r\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\r\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\r\n     * through proxies.\r\n     *\r\n     * Emits an {Initialized} event the first time it is successfully executed.\r\n     */\r\n    function _disableInitializers() internal virtual {\r\n        // solhint-disable-next-line var-name-mixedcase\r\n        InitializableStorage storage $ = _getInitializableStorage();\r\n\r\n        if ($._initializing) {\r\n            revert InvalidInitialization();\r\n        }\r\n        if ($._initialized != type(uint64).max) {\r\n            $._initialized = type(uint64).max;\r\n            emit Initialized(type(uint64).max);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\r\n     */\r\n    function _getInitializedVersion() internal view returns (uint64) {\r\n        return _getInitializableStorage()._initialized;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\r\n     */\r\n    function _isInitializing() internal view returns (bool) {\r\n        return _getInitializableStorage()._initializing;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns a pointer to the storage namespace.\r\n     */\r\n    // solhint-disable-next-line var-name-mixedcase\r\n    function _getInitializableStorage() private pure returns (InitializableStorage storage $) {\r\n        assembly {\r\n            $.slot := INITIALIZABLE_STORAGE\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol@v5.0.1\r\n\r\n// Original license: SPDX_License_Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\r\n\r\npragma solidity ^0.8.20;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract ContextUpgradeable is Initializable {\r\n    function __Context_init() internal onlyInitializing {\r\n    }\r\n\r\n    function __Context_init_unchained() internal onlyInitializing {\r\n    }\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n\r\n    function _contextSuffixLength() internal view virtual returns (uint256) {\r\n        return 0;\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol@v5.0.1\r\n\r\n// Original license: SPDX_License_Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.20;\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * The initial owner is set to the address provided by the deployer. This can\r\n * later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\r\n    /// @custom:storage-location erc7201:openzeppelin.storage.Ownable\r\n    struct OwnableStorage {\r\n        address _owner;\r\n    }\r\n\r\n    // keccak256(abi.encode(uint256(keccak256(\"openzeppelin.storage.Ownable\")) - 1)) & ~bytes32(uint256(0xff))\r\n    bytes32 private constant OwnableStorageLocation = 0x9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300;\r\n\r\n    function _getOwnableStorage() private pure returns (OwnableStorage storage $) {\r\n        assembly {\r\n            $.slot := OwnableStorageLocation\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev The caller account is not authorized to perform an operation.\r\n     */\r\n    error OwnableUnauthorizedAccount(address account);\r\n\r\n    /**\r\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\r\n     */\r\n    error OwnableInvalidOwner(address owner);\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\r\n     */\r\n    function __Ownable_init(address initialOwner) internal onlyInitializing {\r\n        __Ownable_init_unchained(initialOwner);\r\n    }\r\n\r\n    function __Ownable_init_unchained(address initialOwner) internal onlyInitializing {\r\n        if (initialOwner == address(0)) {\r\n            revert OwnableInvalidOwner(address(0));\r\n        }\r\n        _transferOwnership(initialOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        OwnableStorage storage $ = _getOwnableStorage();\r\n        return $._owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the owner.\r\n     */\r\n    function _checkOwner() internal view virtual {\r\n        if (owner() != _msgSender()) {\r\n            revert OwnableUnauthorizedAccount(_msgSender());\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby disabling any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        if (newOwner == address(0)) {\r\n            revert OwnableInvalidOwner(address(0));\r\n        }\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        OwnableStorage storage $ = _getOwnableStorage();\r\n        address oldOwner = $._owner;\r\n        $._owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol@v5.0.1\r\n\r\n// Original license: SPDX_License_Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)\r\n\r\npragma solidity ^0.8.20;\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\nabstract contract ReentrancyGuardUpgradeable is Initializable {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant NOT_ENTERED = 1;\r\n    uint256 private constant ENTERED = 2;\r\n\r\n    /// @custom:storage-location erc7201:openzeppelin.storage.ReentrancyGuard\r\n    struct ReentrancyGuardStorage {\r\n        uint256 _status;\r\n    }\r\n\r\n    // keccak256(abi.encode(uint256(keccak256(\"openzeppelin.storage.ReentrancyGuard\")) - 1)) & ~bytes32(uint256(0xff))\r\n    bytes32 private constant ReentrancyGuardStorageLocation = 0x9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f00;\r\n\r\n    function _getReentrancyGuardStorage() private pure returns (ReentrancyGuardStorage storage $) {\r\n        assembly {\r\n            $.slot := ReentrancyGuardStorageLocation\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Unauthorized reentrant call.\r\n     */\r\n    error ReentrancyGuardReentrantCall();\r\n\r\n    function __ReentrancyGuard_init() internal onlyInitializing {\r\n        __ReentrancyGuard_init_unchained();\r\n    }\r\n\r\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\r\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\r\n        $._status = NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and making it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        _nonReentrantBefore();\r\n        _;\r\n        _nonReentrantAfter();\r\n    }\r\n\r\n    function _nonReentrantBefore() private {\r\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\r\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\r\n        if ($._status == ENTERED) {\r\n            revert ReentrancyGuardReentrantCall();\r\n        }\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        $._status = ENTERED;\r\n    }\r\n\r\n    function _nonReentrantAfter() private {\r\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        $._status = NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\r\n     * `nonReentrant` function in the call stack.\r\n     */\r\n    function _reentrancyGuardEntered() internal view returns (bool) {\r\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\r\n        return $._status == ENTERED;\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/token/ERC20/IERC20.sol@v5.0.1\r\n\r\n// Original license: SPDX_License_Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\r\n\r\npragma solidity ^0.8.20;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Returns the value of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the value of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\r\n     * caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\r\n     * allowance mechanism. `value` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol@v5.0.1\r\n\r\n// Original license: SPDX_License_Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Metadata.sol)\r\n\r\npragma solidity ^0.8.20;\r\n\r\n/**\r\n * @dev Interface for the optional metadata functions from the ERC20 standard.\r\n */\r\ninterface IERC20Metadata is IERC20 {\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the decimals places of the token.\r\n     */\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\n\r\n// File contracts/interfaces/AggregatorInterface.sol\r\n\r\n// Original license: SPDX_License_Identifier: MIT\r\npragma solidity ^0.8.20;\r\n\r\ninterface AggregatorInterface {\r\n    function decimals() external view returns (uint8);\r\n\r\n    function latestAnswer() external view returns (int256);\r\n}\r\n\r\n\r\n// File contracts/Presale.sol\r\n\r\n// Original license: SPDX_License_Identifier: MIT\r\npragma solidity ^0.8.20;\r\n\r\n\r\n\r\n\r\ncontract Presale is OwnableUpgradeable, ReentrancyGuardUpgradeable {\r\n    // PresaleBalance = PresaleBuyAmount + PresaleBonus + ReferralBonus\r\n    struct BalanceInfo {\r\n        // total token were purchased\r\n        uint256 total;\r\n        // presale bonus\r\n        uint256 bonus;\r\n        // presale referral\r\n        uint256 referral;\r\n        // amount of unclaimed token\r\n        uint256 claimable;\r\n        // the last claim timestamp\r\n        uint256 lastClaimTime;\r\n        // mapping to NFTs own by address\r\n        mapping(uint8 => uint256) ownNFTs;\r\n    }\r\n\r\n    // 500 / BASE_UNIT -> 5%\r\n    uint256 private constant BASE_UNIT = 10_000;\r\n\r\n    // $0.125 per token\r\n    uint256 private constant PRESALE_TOKEN_PRICE = 125e15;\r\n\r\n    // all presale amount will be vested\r\n    // once the vesting period will be started, buyers can claim 10% their amount\r\n    // remain 90% can be claimed after 90 days with 10% per 10 days\r\n    uint256 private constant VESTING_CLAIM_PERIOD = 90 days;\r\n    uint256 private constant VESTING_CLAIM_DURATION = 10 days;\r\n\r\n    // referrer bonus\r\n    // C refer B, B refer A, D refer C\r\n    // D is level 1 of A, D earn 1% from A buy amount\r\n    // C is level 2 of A, C earn 3% from A buy amount\r\n    // B is level 3 of A, D earn 5% from A buy amount\r\n    uint256 private constant REFERRER_BONUS_LEVEL_1 = 100; // 1%\r\n    uint256 private constant REFERRER_BONUS_LEVEL_2 = 300; // 3%\r\n    uint256 private constant REFERRER_BONUS_LEVEL_3 = 500; // 5%\r\n\r\n    // => presale bonus base, first come, first serve\r\n    // early earn more\r\n    // the maximum bonus percentage is 15% in first 4 hours\r\n    // this amount will be reduce 0.04% every 4 hours later\r\n    // and in a period of 375 epochs ~ 2 months\r\n    uint256 private constant BONUS_AMOUNT_MAX = 1500; // 15%\r\n    uint256 private constant BONUS_EPOCH_PERIOD = 4 hours;\r\n    uint256 private constant BONUS_EPOCH_REDUCTION = 4; // reduce 0.04 % every epoch\r\n\r\n    // => presale bonus high roller\r\n    // there are some fixed BONUS for high roller NFTs buy\r\n    // buy high roller amount will receive both base and high-roller presale bonus\r\n    uint256 private constant BONUS_HIGH_ROLLER_TARGET_J = 8000e18; // 8k token buy ~ $1000\r\n    uint256 private constant BONUS_HIGH_ROLLER_AMOUNT_J = 1000; // 10% bonus\r\n    uint256 private constant BONUS_HIGH_ROLLER_TARGET_Q = 24000e18; // 24k token buy ~ $3000\r\n    uint256 private constant BONUS_HIGH_ROLLER_AMOUNT_Q = 1200; // 12% bonus\r\n    uint256 private constant BONUS_HIGH_ROLLER_TARGET_K = 40000e18; // 40k token buy ~ $5000\r\n    uint256 private constant BONUS_HIGH_ROLLER_AMOUNT_K = 1500; // 15% bonus\r\n    uint256 private constant BONUS_HIGH_ROLLER_TARGET_JOKER = 80000e18; // 80k token buy ~ $10000\r\n    uint256 private constant BONUS_HIGH_ROLLER_AMOUNT_JOKER = 2000; // 20% bonus\r\n\r\n    // will be the PLAYBIT token\r\n    address public token;\r\n\r\n    // treasury address holds fund\r\n    address public treasury;\r\n\r\n    // total amount were raised in PLAYBIT token\r\n    uint256 public totalRaised;\r\n    // total amount were bonus in PLAYBIT token\r\n    uint256 public totalBonus;\r\n    // total amount were raised in US Dollar\r\n    uint256 public totalRaisedUsd;\r\n\r\n    // if startTime is zero, the presale is pending or ended, and can not buy\r\n    uint256 public startPresaleTime;\r\n\r\n    // time when all vesting are started\r\n    // once this value is set, buyers can start their vesting period\r\n    // admin should set this value 24h after presale end\r\n    uint256 public startVestingTime;\r\n\r\n    // mapping token with a ChainLink price feed\r\n    mapping(address => bool) public stablecoins;\r\n    mapping(address => address) public tokenPriceFeeds;\r\n\r\n    // token balance info of every address\r\n    mapping(address => BalanceInfo) public balances;\r\n\r\n    // referrer map tree\r\n    // A => B, B is the referrer address of A\r\n    // B earn bonus when A buy token\r\n    mapping(address => address) public referrers;\r\n\r\n    // revert when the startPresaleTime was not set\r\n    error InvalidTime();\r\n\r\n    // revert when the pay token was not supported\r\n    // or the token price feed address was not found\r\n    error InvalidPayToken();\r\n\r\n    event PresaleBuy(\r\n        address indexed buyer,\r\n        address indexed buyToken,\r\n        uint256 amountToken,\r\n        uint256 amountBuyToken,\r\n        uint256 amountUsd\r\n    );\r\n    event PresaleBonus(address indexed buyer, uint256 buyAmount, uint256 bonusAmount);\r\n    event ReferralBonus(\r\n        address indexed buyer,\r\n        address indexed referrer,\r\n        uint256 buyAmount,\r\n        uint8 bonusLevel,\r\n        uint256 bonusAmount\r\n    );\r\n    event NftBonus(address indexed buyer, uint8 indexed nft);\r\n\r\n    function initialize(address _treasury) external initializer {\r\n        __Ownable_init(msg.sender);\r\n        __ReentrancyGuard_init();\r\n\r\n        treasury = _treasury;\r\n    }\r\n\r\n    modifier validTime() {\r\n        if (startPresaleTime == 0 || block.timestamp < startPresaleTime) {\r\n            revert InvalidTime();\r\n        }\r\n\r\n        _;\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    // always return value with 1e18 decimals\r\n    function getTokenPrice(address _token) public view returns (uint256) {\r\n        if (stablecoins[_token]) {\r\n            return 1e18;\r\n        }\r\n\r\n        if (tokenPriceFeeds[_token] == address(0)) {\r\n            return 0;\r\n        }\r\n\r\n        uint8 numberOfDecimals = AggregatorInterface(tokenPriceFeeds[_token]).decimals();\r\n        int256 answer = AggregatorInterface(tokenPriceFeeds[_token]).latestAnswer();\r\n\r\n        // convert to 18 decimals\r\n        return (uint256(answer) * 1e18) / (10 ** numberOfDecimals);\r\n    }\r\n\r\n    function getTokenAmountWad(address _token, uint256 _amount) internal view returns (uint256) {\r\n        if (_token == address(0)) {\r\n            return _amount;\r\n        }\r\n\r\n        // convert token amount to 1e18\r\n        uint8 tokenDecimals = IERC20Metadata(_token).decimals();\r\n        return (_amount * 1e18) / (10 ** (tokenDecimals));\r\n    }\r\n\r\n    function getBonusPercentage() public view returns (uint256) {\r\n        uint256 timeElapsed = block.timestamp > startPresaleTime && startPresaleTime > 0\r\n            ? block.timestamp - startPresaleTime\r\n            : 0;\r\n        uint256 numberOfEpochPassed = timeElapsed / BONUS_EPOCH_PERIOD;\r\n        uint256 reductionAmount = BONUS_EPOCH_REDUCTION * numberOfEpochPassed;\r\n        return BONUS_AMOUNT_MAX > reductionAmount ? BONUS_AMOUNT_MAX - reductionAmount : 0;\r\n    }\r\n\r\n    // _buyAmount in PLAYBIT\r\n    function getBonusAmount(uint256 _buyAmount) public view returns (uint256) {\r\n        uint256 bonusPercentage = getBonusPercentage();\r\n        uint256 bonusAmount = (_buyAmount * bonusPercentage) / BASE_UNIT;\r\n\r\n        if (_buyAmount >= BONUS_HIGH_ROLLER_TARGET_JOKER) {\r\n            bonusAmount += (_buyAmount * BONUS_HIGH_ROLLER_AMOUNT_JOKER) / BASE_UNIT;\r\n        } else if (_buyAmount >= BONUS_HIGH_ROLLER_TARGET_K) {\r\n            bonusAmount += (_buyAmount * BONUS_HIGH_ROLLER_AMOUNT_K) / BASE_UNIT;\r\n        } else if (_buyAmount >= BONUS_HIGH_ROLLER_TARGET_Q) {\r\n            bonusAmount += (_buyAmount * BONUS_HIGH_ROLLER_AMOUNT_Q) / BASE_UNIT;\r\n        } else if (_buyAmount >= BONUS_HIGH_ROLLER_TARGET_J) {\r\n            bonusAmount += (_buyAmount * BONUS_HIGH_ROLLER_AMOUNT_J) / BASE_UNIT;\r\n        }\r\n\r\n        return bonusAmount;\r\n    }\r\n\r\n    function getAmountOut(\r\n        address _payToken,\r\n        uint256 _payAmount\r\n    ) public view returns (uint256 _amount, uint256 _bonus) {\r\n        uint256 tokenPrice = getTokenPrice(_payToken);\r\n\r\n        // convert token amount to 1e18\r\n        uint256 amountWad = getTokenAmountWad(_payToken, _payAmount);\r\n\r\n        // 1e18 * 1e18 / 1e18 = 1e18\r\n        _amount = (amountWad * tokenPrice) / PRESALE_TOKEN_PRICE;\r\n\r\n        _bonus = getBonusAmount(_amount);\r\n    }\r\n\r\n    function getBalances(\r\n        address _buyer\r\n    ) public view returns (uint256 _bought, uint256 _bonus, uint256 _referral) {\r\n        _bonus = balances[_buyer].bonus;\r\n        _referral = balances[_buyer].referral;\r\n        _bought = balances[_buyer].total - balances[_buyer].bonus - balances[_buyer].referral;\r\n    }\r\n\r\n    function getNFTs(\r\n        address _buyer\r\n    ) public view returns (uint256 _nftJ, uint256 _nftQ, uint256 _nftK, uint256 _nftJoker) {\r\n        _nftJ = balances[_buyer].ownNFTs[0];\r\n        _nftQ = balances[_buyer].ownNFTs[1];\r\n        _nftK = balances[_buyer].ownNFTs[2];\r\n        _nftJoker = balances[_buyer].ownNFTs[3];\r\n    }\r\n\r\n    function getReferrers(\r\n        address _buyer\r\n    ) public view returns (address _level1, address _level2, address _level3) {\r\n        _level3 = referrers[_buyer];\r\n        _level2 = referrers[_level3];\r\n        _level1 = referrers[_level2];\r\n    }\r\n\r\n    // support purchase token with input ERC20 tokens\r\n    function buy(\r\n        address _token,\r\n        uint256 _amountTokenRaw,\r\n        address _referrer\r\n    ) external payable nonReentrant validTime {\r\n        uint256 tokenPrice = getTokenPrice(_token);\r\n        if (tokenPrice == 0) {\r\n            revert InvalidPayToken();\r\n        }\r\n\r\n        (uint256 amountOut, uint256 amountBonus) = getAmountOut(_token, _amountTokenRaw);\r\n        if (amountOut > 0) {\r\n            uint256 amountUsd = (tokenPrice * getTokenAmountWad(_token, _amountTokenRaw)) / 1e18;\r\n\r\n            // keep track total raised\r\n            totalRaised = totalRaised + amountOut;\r\n            totalBonus = totalBonus + amountBonus;\r\n            totalRaisedUsd = totalRaisedUsd + amountUsd;\r\n\r\n            // update referrer when buyer actually buy token\r\n            if (_referrer != msg.sender) {\r\n                referrers[msg.sender] = _referrer;\r\n            }\r\n\r\n            // => handle buy amount\r\n            if (_token != address(0)) {\r\n                // transfer token into this contract\r\n                IERC20(_token).transferFrom(msg.sender, treasury, _amountTokenRaw);\r\n            } else {\r\n                // transfer function does not work with Gnosis Safe as treasury address\r\n                (bool success, ) = treasury.call{value: _amountTokenRaw}(\"\");\r\n                if (!success) {\r\n                    // if the treasury failed to receive fund\r\n                    // send fund to the dev address\r\n                    payable(owner()).transfer(_amountTokenRaw);\r\n                }\r\n            }\r\n\r\n            balances[msg.sender].total = balances[msg.sender].total + amountOut;\r\n            balances[msg.sender].claimable = balances[msg.sender].claimable + amountOut;\r\n\r\n            emit PresaleBuy(msg.sender, _token, amountOut, _amountTokenRaw, amountUsd);\r\n\r\n            // => handle presale bonus\r\n            balances[msg.sender].total = balances[msg.sender].total + amountBonus;\r\n            balances[msg.sender].claimable = balances[msg.sender].claimable + amountBonus;\r\n            balances[msg.sender].bonus = balances[msg.sender].bonus + amountBonus;\r\n\r\n            emit PresaleBonus(msg.sender, amountOut, amountBonus);\r\n\r\n            // => handle NFT bonus\r\n            if (amountOut >= BONUS_HIGH_ROLLER_TARGET_JOKER) {\r\n                balances[msg.sender].ownNFTs[3] += 1;\r\n                emit NftBonus(msg.sender, 3);\r\n            } else if (amountOut >= BONUS_HIGH_ROLLER_TARGET_K) {\r\n                balances[msg.sender].ownNFTs[2] += 1;\r\n                emit NftBonus(msg.sender, 2);\r\n            } else if (amountOut >= BONUS_HIGH_ROLLER_TARGET_Q) {\r\n                balances[msg.sender].ownNFTs[1] += 1;\r\n                emit NftBonus(msg.sender, 1);\r\n            } else if (amountOut >= BONUS_HIGH_ROLLER_TARGET_J) {\r\n                balances[msg.sender].ownNFTs[0] += 1;\r\n                emit NftBonus(msg.sender, 0);\r\n            }\r\n\r\n            // => handle referrers bonus\r\n            (address _level1, address _level2, address _level3) = getReferrers(msg.sender);\r\n            if (_level1 != address(0)) {\r\n                (uint256 boughtAmount, , ) = getBalances(_level1);\r\n                uint256 amountToGetBonusReferral = boughtAmount > amountOut\r\n                    ? amountOut\r\n                    : boughtAmount;\r\n\r\n                if (amountToGetBonusReferral > 0) {\r\n                    uint256 amountLevel1 = (amountToGetBonusReferral * REFERRER_BONUS_LEVEL_1) /\r\n                        BASE_UNIT;\r\n                    balances[_level1].total = balances[_level1].total + amountLevel1;\r\n                    balances[_level1].referral = balances[_level1].referral + amountLevel1;\r\n                    balances[_level1].claimable = balances[_level1].claimable + amountLevel1;\r\n                    emit ReferralBonus(msg.sender, _level1, amountOut, 1, amountLevel1);\r\n                }\r\n            }\r\n            if (_level2 != address(0)) {\r\n                (uint256 boughtAmount, , ) = getBalances(_level2);\r\n                uint256 amountToGetBonusReferral = boughtAmount > amountOut\r\n                    ? amountOut\r\n                    : boughtAmount;\r\n\r\n                if (amountToGetBonusReferral > 0) {\r\n                    uint256 amountLevel2 = (amountToGetBonusReferral * REFERRER_BONUS_LEVEL_2) /\r\n                        BASE_UNIT;\r\n                    balances[_level2].total = balances[_level2].total + amountLevel2;\r\n                    balances[_level2].referral = balances[_level2].referral + amountLevel2;\r\n                    balances[_level2].claimable = balances[_level2].claimable + amountLevel2;\r\n                    emit ReferralBonus(msg.sender, _level2, amountOut, 2, amountLevel2);\r\n                }\r\n            }\r\n            if (_level3 != address(0)) {\r\n                (uint256 boughtAmount, , ) = getBalances(_level3);\r\n                uint256 amountToGetBonusReferral = boughtAmount > amountOut\r\n                    ? amountOut\r\n                    : boughtAmount;\r\n\r\n                if (amountToGetBonusReferral > 0) {\r\n                    uint256 amountLevel3 = (amountToGetBonusReferral * REFERRER_BONUS_LEVEL_3) /\r\n                        BASE_UNIT;\r\n                    balances[_level3].total = balances[_level3].total + amountLevel3;\r\n                    balances[_level3].referral = balances[_level3].referral + amountLevel3;\r\n                    balances[_level3].claimable = balances[_level3].claimable + amountLevel3;\r\n                    emit ReferralBonus(msg.sender, _level3, amountOut, 3, amountLevel3);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    function setPresaleConfigs(\r\n        address _token,\r\n        uint256 _startPresaleTime,\r\n        uint256 _startVestingTime\r\n    ) external onlyOwner {\r\n        token = _token;\r\n\r\n        startPresaleTime = _startPresaleTime;\r\n        startVestingTime = _startVestingTime;\r\n    }\r\n\r\n    function setTokenPriceFeed(address _token, address _chainlinkFeed) external onlyOwner {\r\n        tokenPriceFeeds[_token] = _chainlinkFeed;\r\n    }\r\n\r\n    function setTokenStablecoin(address _token, bool _isStablecoin) external onlyOwner {\r\n        stablecoins[_token] = _isStablecoin;\r\n    }\r\n\r\n    function setTreasury(address _treasury) external onlyOwner {\r\n        treasury = _treasury;\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"name\":\"InvalidInitialization\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidPayToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidTime\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotInitializing\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"version\",\"type\":\"uint64\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint8\",\"name\":\"nft\",\"type\":\"uint8\"}],\"name\":\"NftBonus\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"buyAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bonusAmount\",\"type\":\"uint256\"}],\"name\":\"PresaleBonus\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountToken\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountBuyToken\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountUsd\",\"type\":\"uint256\"}],\"name\":\"PresaleBuy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"buyAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"bonusLevel\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bonusAmount\",\"type\":\"uint256\"}],\"name\":\"ReferralBonus\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bonus\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"referral\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimable\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastClaimTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amountTokenRaw\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_referrer\",\"type\":\"address\"}],\"name\":\"buy\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_payToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_payAmount\",\"type\":\"uint256\"}],\"name\":\"getAmountOut\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_bonus\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_buyer\",\"type\":\"address\"}],\"name\":\"getBalances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_bought\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_bonus\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_referral\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_buyAmount\",\"type\":\"uint256\"}],\"name\":\"getBonusAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBonusPercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_buyer\",\"type\":\"address\"}],\"name\":\"getNFTs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_nftJ\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_nftQ\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_nftK\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_nftJoker\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_buyer\",\"type\":\"address\"}],\"name\":\"getReferrers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"_level1\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_level2\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_level3\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"getTokenPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"referrers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_startPresaleTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_startVestingTime\",\"type\":\"uint256\"}],\"name\":\"setPresaleConfigs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_chainlinkFeed\",\"type\":\"address\"}],\"name\":\"setTokenPriceFeed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isStablecoin\",\"type\":\"bool\"}],\"name\":\"setTokenStablecoin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"}],\"name\":\"setTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stablecoins\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startPresaleTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startVestingTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenPriceFeeds\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalBonus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalRaised\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalRaisedUsd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "Presale", "CompilerVersion": "v0.8.24+commit.e11b9ed9", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://96c5ca82b60fe0f3182a4eb128f9d3593346ca09931633c80956ef1e58945299"}