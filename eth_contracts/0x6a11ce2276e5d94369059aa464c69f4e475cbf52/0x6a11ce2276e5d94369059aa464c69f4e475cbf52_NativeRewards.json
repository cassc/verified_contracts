{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IStakingPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\ninterface IStakingPool {\\n  function resetWalletStakedTime(address wallet) external;\\n}\\n\"\r\n    },\r\n    \"contracts/NativeRewards.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport '@openzeppelin/contracts/utils/Context.sol';\\nimport './interfaces/IStakingPool.sol';\\n\\ncontract NativeRewards is Context {\\n  uint256 constant PRECISION = 10 ** 18;\\n  address public trackingToken;\\n  uint256 public totalUsers;\\n  uint256 public totalShares;\\n  struct Reward {\\n    uint256 excluded;\\n    uint256 realized;\\n  }\\n  mapping(address => uint256) public shares;\\n  mapping(address => Reward) public rewards;\\n\\n  uint256 _rewardsPerShare;\\n  uint256 public totalDistributed;\\n  uint256 public totalDeposited;\\n\\n  event AddShares(address indexed user, uint256 amount);\\n  event RemoveShares(address indexed user, uint256 amount);\\n  event ClaimReward(address user);\\n  event DistributeReward(address indexed user, uint256 amount);\\n  event DepositRewards(address indexed user, uint256 amountTokens);\\n\\n  modifier onlyTrackingToken() {\\n    require(_msgSender() == trackingToken, 'TOKEN');\\n    _;\\n  }\\n\\n  constructor(address _trackingToken) {\\n    trackingToken = _trackingToken;\\n  }\\n\\n  function updateUserShare(\\n    address _wallet,\\n    uint256 _balUpdate,\\n    bool _removing\\n  ) public onlyTrackingToken {\\n    _updateUserShare(_wallet, _balUpdate, _removing);\\n  }\\n\\n  function _updateUserShare(\\n    address _wallet,\\n    uint256 _balUpdate,\\n    bool _removing\\n  ) internal {\\n    if (_removing) {\\n      _removeShares(_wallet, _balUpdate);\\n      emit RemoveShares(_wallet, _balUpdate);\\n    } else {\\n      _addShares(_wallet, _balUpdate);\\n      emit AddShares(_wallet, _balUpdate);\\n    }\\n  }\\n\\n  function _addShares(address _wallet, uint256 _amount) private {\\n    if (shares[_wallet] > 0) {\\n      _distributeReward(_wallet);\\n    }\\n    uint256 sharesBefore = shares[_wallet];\\n    totalShares += _amount;\\n    shares[_wallet] += _amount;\\n    if (sharesBefore == 0 && shares[_wallet] > 0) {\\n      totalUsers++;\\n    }\\n    rewards[_wallet].excluded = _cumulativeRewards(shares[_wallet]);\\n  }\\n\\n  function _removeShares(address _wallet, uint256 _amount) private {\\n    require(shares[_wallet] > 0 && _amount <= shares[_wallet], 'REMOVE');\\n    uint256 _unpaid = getUnpaid(_wallet);\\n    totalShares -= _amount;\\n    if (_unpaid > 0) {\\n      if (totalShares == 0) {\\n        _distributeReward(_wallet);\\n      } else {\\n        _depositRewards(_unpaid);\\n      }\\n    }\\n    shares[_wallet] -= _amount;\\n    if (shares[_wallet] == 0) {\\n      totalUsers--;\\n    }\\n    rewards[_wallet].excluded = _cumulativeRewards(shares[_wallet]);\\n  }\\n\\n  function depositRewards() external payable {\\n    _depositRewards(msg.value);\\n  }\\n\\n  function _depositRewards(uint256 _amount) internal {\\n    require(_amount > 0 && totalShares > 0, 'DEPOSIT');\\n    totalDeposited += _amount;\\n    _rewardsPerShare += (PRECISION * _amount) / totalShares;\\n    emit DepositRewards(_msgSender(), _amount);\\n  }\\n\\n  function _distributeReward(address _wallet) internal {\\n    if (shares[_wallet] == 0) {\\n      return;\\n    }\\n    uint256 amount = getUnpaid(_wallet);\\n    rewards[_wallet].realized += amount;\\n    rewards[_wallet].excluded = _cumulativeRewards(shares[_wallet]);\\n    if (amount > 0) {\\n      IStakingPool(trackingToken).resetWalletStakedTime(_wallet);\\n      totalDistributed += amount;\\n      uint256 _balBefore = address(this).balance;\\n      (bool success, ) = payable(_wallet).call{ value: amount }('');\\n      require(success, 'DIST0');\\n      require(address(this).balance >= _balBefore - amount, 'DIST1');\\n      emit DistributeReward(_wallet, amount);\\n    }\\n  }\\n\\n  function claimReward() external {\\n    _claimReward(_msgSender());\\n  }\\n\\n  function claimRewardAdmin(address _user) external onlyTrackingToken {\\n    _claimReward(_user);\\n  }\\n\\n  function _claimReward(address _user) internal {\\n    _distributeReward(_user);\\n    emit ClaimReward(_user);\\n  }\\n\\n  function getUnpaid(address _wallet) public view returns (uint256) {\\n    if (shares[_wallet] == 0) {\\n      return 0;\\n    }\\n    uint256 earnedRewards = _cumulativeRewards(shares[_wallet]);\\n    uint256 rewardsExcluded = rewards[_wallet].excluded;\\n    if (earnedRewards <= rewardsExcluded) {\\n      return 0;\\n    }\\n    return earnedRewards - rewardsExcluded;\\n  }\\n\\n  function _cumulativeRewards(uint256 _share) internal view returns (uint256) {\\n    return (_share * _rewardsPerShare) / PRECISION;\\n  }\\n\\n  receive() external payable {\\n    _depositRewards(msg.value);\\n  }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"none\"\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_trackingToken\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"AddShares\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"ClaimReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountTokens\",\"type\":\"uint256\"}],\"name\":\"DepositRewards\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"DistributeReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RemoveShares\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"claimReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"claimRewardAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositRewards\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"getUnpaid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"excluded\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"realized\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"shares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDeposited\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDistributed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalUsers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"trackingToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_balUpdate\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_removing\",\"type\":\"bool\"}],\"name\":\"updateUserShare\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "NativeRewards", "CompilerVersion": "v0.8.21+commit.d9974bed", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000b56135dc41686d8ec8b1bb4a89fead4367925295", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}