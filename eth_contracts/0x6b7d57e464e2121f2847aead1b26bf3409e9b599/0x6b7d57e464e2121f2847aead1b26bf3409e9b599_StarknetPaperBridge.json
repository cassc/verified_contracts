{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"src/StarknetPaperBridge.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface IERC20Like {\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 value\\n    ) external returns (bool success);\\n}\\n\\ninterface IStarknetCore {\\n    /**\\n      Sends a message to an L2 contract.\\n\\n      Returns the hash of the message.\\n    */\\n    function sendMessageToL2(\\n        uint256 toAddress,\\n        uint256 selector,\\n        uint256[] calldata payload\\n    ) external payable returns (bytes32);\\n\\n    /**\\n      Consumes a message that was sent from an L2 contract.\\n\\n      Returns the hash of the message.\\n    */\\n    function consumeMessageFromL2(\\n        uint256 fromAddress,\\n        uint256[] calldata payload\\n    ) external returns (bytes32);\\n}\\n\\ncontract StarknetPaperBridge {\\n    /// @notice The Starknet Core contract address on L1\\n    address public immutable starknet;\\n\\n    /// @notice The $PAPER ERC20 contract address on L1\\n    address public immutable l1Token;\\n\\n    /// @notice The L2 address of the $PAPER bridge, the counterpart to this contract\\n    uint256 public immutable l2Bridge;\\n\\n    event LogDeposit(\\n        address indexed l1Sender,\\n        uint256 amount,\\n        uint256 l2Recipient\\n    );\\n    event LogWithdrawal(address indexed l1Recipient, uint256 amount, uint256 l2TxHash);\\n\\n    // 2 ** 251 + 17 * 2 ** 192 + 1;\\n    uint256 private constant CAIRO_PRIME =\\n        3618502788666131213697322783095070105623107215331596699973092056135872020481;\\n\\n    // from starkware.starknet.compiler.compile import get_selector_from_name\\n    // print(get_selector_from_name('handle_deposit'))\\n    uint256 private constant DEPOSIT_SELECTOR =\\n        1285101517810983806491589552491143496277809242732141897358598292095611420389;\\n\\n    // operation ID sent in the L2 -> L1 message\\n    uint256 private constant PROCESS_WITHDRAWAL = 1;\\n\\n    function splitUint256(\\n        uint256 value\\n    ) internal pure returns (uint256, uint256) {\\n        uint256 low = value & ((1 << 128) - 1);\\n        uint256 high = value >> 128;\\n        return (low, high);\\n    }\\n\\n    constructor(address _starknet, address _l1Token, uint256 _l2Bridge) {\\n        require(_l2Bridge < CAIRO_PRIME, \\\"Invalid L2 bridge address\\\");\\n\\n        starknet = _starknet;\\n        l1Token = _l1Token;\\n        l2Bridge = _l2Bridge;\\n    }\\n\\n    /// @notice Function used to bridge $PAPER from L1 to L2\\n    /// @param amount How many $PAPER to send from msg.sender\\n    /// @param l2Recipient To which L2 address should we deposit the $PAPER to\\n    /// @param fee Compulsory fee paid to the sequencer for passing on the message\\n    function deposit(\\n        uint256 amount,\\n        uint256 l2Recipient,\\n        uint256 fee\\n    ) external payable {\\n        require(amount > 0, \\\"Amount is 0\\\");\\n        require(\\n            l2Recipient != 0 &&\\n                l2Recipient != l2Bridge &&\\n                l2Recipient < CAIRO_PRIME,\\n            \\\"Invalid L2 recipient\\\"\\n        );\\n\\n        uint256[] memory payload = new uint256[](3);\\n        payload[0] = l2Recipient;\\n        (payload[1], payload[2]) = splitUint256(amount);\\n\\n        IERC20Like(l1Token).transferFrom(msg.sender, address(this), amount);\\n        IStarknetCore(starknet).sendMessageToL2{value: fee}(\\n            l2Bridge,\\n            DEPOSIT_SELECTOR,\\n            payload\\n        );\\n\\n        emit LogDeposit(msg.sender, amount, l2Recipient);\\n    }\\n\\n    /// @notice Function to process the L2 withdrawal\\n    /// @param amount How many $PAPER were sent from L2\\n    /// @param l1Recipient Recipient of the (de)bridged $PAPER\\n    /// @param l2TxHash l2 tx_hash for matching txs in ui\\n    function withdraw(uint256 amount, address l1Recipient, uint256 l2TxHash) external {\\n        uint256[] memory payload = new uint256[](4);\\n        payload[0] = PROCESS_WITHDRAWAL;\\n        payload[1] = uint256(uint160(l1Recipient));\\n        (payload[2], payload[3]) = splitUint256(amount);\\n\\n        // The call to consumeMessageFromL2 will succeed only if a\\n        // matching L2->L1 message exists and is ready for consumption.\\n        IStarknetCore(starknet).consumeMessageFromL2(l2Bridge, payload);\\n        IERC20Like(l1Token).transfer(l1Recipient, amount);\\n\\n        emit LogWithdrawal(l1Recipient, amount, l2TxHash);\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [\r\n      \"@forge-std/=lib/forge-std/src/\",\r\n      \"@create3-factory/=lib/create3-factory/src/\",\r\n      \"@openzeppelin/=lib/@openzeppelin/\",\r\n      \"@starknet/=lib/starknet/\",\r\n      \"create3-factory/=lib/create3-factory/\",\r\n      \"ds-test/=lib/forge-std/lib/ds-test/src/\",\r\n      \"forge-std/=lib/forge-std/src/\",\r\n      \"solmate/=lib/create3-factory/lib/solmate/src/\",\r\n      \"starknet/=lib/starknet/\"\r\n    ],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": false,\r\n      \"bytecodeHash\": \"ipfs\"\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_starknet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_l1Token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_l2Bridge\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"l1Sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"l2Recipient\",\"type\":\"uint256\"}],\"name\":\"LogDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"l1Recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"l2TxHash\",\"type\":\"uint256\"}],\"name\":\"LogWithdrawal\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"l2Recipient\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"l1Token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"l2Bridge\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"starknet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"l1Recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"l2TxHash\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "StarknetPaperBridge", "CompilerVersion": "v0.8.13+commit.abaa5c0e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000c662c410c0ecf747543f5ba90660f6abebd9c8c40000000000000000000000007ae1d57b58fa6411f32948314badd83583ee0e8c019bc231d0b20ea77e02cf286c93320df980bab5818bd13386c84998cb3e8c64", "EVMVersion": "london", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}