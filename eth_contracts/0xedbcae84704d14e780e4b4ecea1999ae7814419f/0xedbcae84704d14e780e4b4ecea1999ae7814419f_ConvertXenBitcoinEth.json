{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/BurnXenBitcoinEth.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\n\\r\\ncontract ConvertXenBitcoinEthereumX1 {\\r\\n    address public XBTC;\\r\\n    address public USDC;\\r\\n\\r\\n\\r\\n    mapping(address => uint256) public amountXBTCBurned;\\r\\n    mapping(address => uint256) public amountUSDCDeposited;\\r\\n    address[] public addresses;\\r\\n\\r\\n\\r\\n    mapping(address => uint256) public futureXBTC;\\r\\n\\r\\n\\r\\n    uint256 public totalXBTCBurned;\\r\\n    uint256 public totalUSDCDeposited;\\r\\n\\r\\n\\r\\n    address private constant DEAD_ADDRESS = address(0x000000000000000000000000000000000000dEaD);\\r\\n    address private constant BA_ADDRESS = address(0x99726763dd9C1537EDd27CC384ED3808E475F81C);\\r\\n\\r\\n\\r\\n    event BurnXBTC(address indexed burner, uint indexed _amount, uint indexed currentTime);\\r\\n    event DepositUSDC(address indexed burner, uint indexed _amount, uint indexed currentTime);\\r\\n\\r\\n\\r\\n    constructor(address _XBTC, address _USDC) {\\r\\n        XBTC = _XBTC; // 18 decimals\\r\\n        USDC = _USDC; // 6 decimals\\r\\n\\r\\n    }\\r\\n\\r\\n    function burnXBTC(uint amount) public {\\r\\n        require(amount > 0, \\\"amount can't be zero\\\");\\r\\n        require(IERC20(XBTC).transferFrom(msg.sender, DEAD_ADDRESS, amount), \\\"transferFrom failed.\\\");\\r\\n\\r\\n        if (futureXBTC[msg.sender] == 0) {\\r\\n            addresses.push(msg.sender);\\r\\n        }\\r\\n\\r\\n        amountXBTCBurned[msg.sender] += amount;\\r\\n        futureXBTC[msg.sender] += amount * 10_000;\\r\\n        totalXBTCBurned += amount;\\r\\n\\r\\n        emit BurnXBTC(msg.sender, amount, block.timestamp);\\r\\n    }\\r\\n\\r\\n    function depositUSDC(uint amount) public {\\r\\n        require(amount > 0, \\\"amount can't be zero\\\");\\r\\n        require(amount + totalUSDCDeposited <= 5_000_000 * 1e6);\\r\\n        require(IERC20(USDC).transferFrom(msg.sender, BA_ADDRESS, amount), \\\"transferFrom failed.\\\");\\r\\n\\r\\n        if (futureXBTC[msg.sender] == 0) {\\r\\n            addresses.push(msg.sender);\\r\\n        }\\r\\n\\r\\n        amountUSDCDeposited[msg.sender] += amount;\\r\\n        futureXBTC[msg.sender] += amount * 1e12 * 100_000;  // convert from 6 decimals to 18\\r\\n        totalUSDCDeposited += amount;\\r\\n\\r\\n        emit DepositUSDC(msg.sender, amount, block.timestamp);\\r\\n    }\\r\\n\\r\\n\\r\\n}\\r\\n\\r\\n/*\\r\\nPulseChain\\r\\n0xB971a3429c04d96F8a75EDaC7bc79e7C4672b4E6\\r\\n\\r\\nBinance Smart Chain\\r\\n0xddA8D1Fd0D42F2cb43f625e6D3F13eb2CDEF983f\\r\\n\\r\\nEthereum\\r\\n0x4792d3CA30d52821b0dC2b2436CF8B425C3395F1\\r\\n\\r\\n*/\\r\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_XBTC\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_USDC\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"burner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"currentTime\",\"type\":\"uint256\"}],\"name\":\"BurnXBTC\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"burner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"currentTime\",\"type\":\"uint256\"}],\"name\":\"DepositUSDC\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"USDC\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"XBTC\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"addresses\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"amountUSDCDeposited\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"amountXBTCBurned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burnXBTC\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"depositUSDC\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"futureXBTC\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalUSDCDeposited\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalXBTCBurned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "ConvertXenBitcoinEthereumX1", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "0000000000000000000000004792d3ca30d52821b0dc2b2436cf8b425c3395f1000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb48", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}