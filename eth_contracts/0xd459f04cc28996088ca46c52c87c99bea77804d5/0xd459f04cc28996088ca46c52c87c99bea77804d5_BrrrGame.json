{"SourceCode": "/**\r\n * BRRR.LIVE - Building generational wealth, together!\r\n *\r\n * With $BRRR we band together to build generational wealth for a random holder every day, forever.\r\n * Provably fair & fully on-chain.\r\n *\r\n *\r\n * HOW IT WORKS\r\n * Hold 100K $BRRR (0.1%) to join every daily game forever.\r\n * No betting, no losing $ETH, just hold to enter any game.\r\n * Every day, forever, a random holder automatically gets 50% of the previous day's total revenue.\r\n *  Total revenue include $BRRR volume tax, and literally everything else we make in the future.\r\n *\r\n *\r\n * Website: https://brrr.live\r\n * Twitter: https://twitter.com/brrr_live\r\n * Telegram: https://t.me/brrr_live\r\n * \r\n * \r\n*/\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.18;\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint);\r\n\r\n    function balanceOf(address account) external view returns (uint);\r\n\r\n    function transfer(address recipient, uint amount) external returns (bool);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function approve(address spender, uint amount) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint amount\r\n    ) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n}\r\n\r\ncontract BrrrGame {\r\n\r\n    IERC20 brrrToken;\r\n    address public owner;\r\n    uint public minHold;\r\n    uint public maxTickets;\r\n    uint public current_game;\r\n    bool public game_active;\r\n    uint counter = 1;\r\n    mapping(uint => address[]) public GameToTickets;\r\n\r\n    mapping(uint => mapping(address => uint)) GameToPlayerTickets;\r\n    mapping(uint => uint) public GameToPrize;\r\n\r\n    constructor() {\r\n        owner = msg.sender;\r\n        minHold = 100000 * 10** 9;\r\n        maxTickets = 5;\r\n        game_active = false;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"not authorized\");\r\n        _;\r\n    }\r\n\r\n    receive() external payable {\r\n    }\r\n\r\n    function ticketsInGame(uint game_id) external view returns (address[] memory)\r\n    {\r\n        return GameToTickets[game_id];\r\n    }\r\n\r\n    function playerTicketsInGame(uint game_id, address addy) external view returns (uint)\r\n    {\r\n        return GameToPlayerTickets[game_id][addy];\r\n    }\r\n\r\n    function toggleGame() external onlyOwner() {\r\n        game_active = !game_active;\r\n    }\r\n\r\n    function updateMaxTickets(uint _maxTickets) external onlyOwner() {\r\n        maxTickets = _maxTickets;\r\n    }\r\n\r\n    function updateMinHold(uint _minHold) external onlyOwner() {\r\n        minHold = _minHold * 10** 9;\r\n    }\r\n\r\n    function setTokenAddress(address payable _tokenAddress) external onlyOwner() {\r\n       brrrToken = IERC20(address(_tokenAddress));\r\n    }\r\n\r\n    function joinGame() external \r\n    {\r\n        require(game_active == true,\"The game is currently inactive, try again later\");\r\n        require(brrrToken.balanceOf(msg.sender) >= minHold,\"You don't hold enough $BRRR to join the current game\");\r\n        require(GameToPlayerTickets[current_game][msg.sender] == 0,\"You have already joined the current game\");\r\n        \r\n        uint ticket_amount = brrrToken.balanceOf(msg.sender) / minHold;\r\n\r\n        if(ticket_amount > maxTickets)\r\n        {\r\n            ticket_amount = maxTickets;\r\n        }\r\n\r\n        for(uint i; i < ticket_amount; i++)\r\n        {\r\n            GameToTickets[current_game].push(msg.sender);\r\n        }\r\n        GameToPlayerTickets[current_game][msg.sender] = ticket_amount;\r\n    }\r\n\r\n    function GoBrrr() onlyOwner() external payable\r\n    {\r\n        if(GameToTickets[current_game].length > 0)\r\n        {\r\n            address payable winner;\r\n            if(GameToTickets[current_game].length == 1){\r\n                winner = payable(GameToTickets[current_game][0]);\r\n            }\r\n            else \r\n            {\r\n                winner = payable(GameToTickets[current_game][randomNumber()]);\r\n            }\r\n\r\n            if(brrrToken.balanceOf(winner) >= (GameToPlayerTickets[current_game][winner] * minHold))\r\n            {\r\n                GameToPrize[current_game] = address(this).balance;\r\n                winner.transfer(address(this).balance);\r\n            }\r\n            \r\n        }\r\n        current_game++;\r\n    }\r\n\r\n    function emergencyWithdrawal() external onlyOwner {\r\n        (bool success, ) = msg.sender.call{ value: address(this).balance } (\"\");\r\n        require(success, \"Transfer failed.\");\r\n    }\r\n\r\n    function randomNumber() internal returns (uint) \r\n    {\r\n        counter++;\r\n        uint random = uint(keccak256(abi.encodePacked(block.timestamp,block.difficulty, counter, GameToTickets[current_game].length, gasleft()))) % GameToTickets[current_game].length;\r\n        return random;\r\n    }\r\n\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"GameToPrize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"GameToTickets\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"GoBrrr\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"current_game\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyWithdrawal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"game_active\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"joinGame\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTickets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minHold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"game_id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"addy\",\"type\":\"address\"}],\"name\":\"playerTicketsInGame\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"setTokenAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"game_id\",\"type\":\"uint256\"}],\"name\":\"ticketsInGame\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toggleGame\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxTickets\",\"type\":\"uint256\"}],\"name\":\"updateMaxTickets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minHold\",\"type\":\"uint256\"}],\"name\":\"updateMinHold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "BrrrGame", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://8336a2d9ddcc9833f3f93d7cba4f735cb8e71e22fe0b6ee325863586ef4abd02"}