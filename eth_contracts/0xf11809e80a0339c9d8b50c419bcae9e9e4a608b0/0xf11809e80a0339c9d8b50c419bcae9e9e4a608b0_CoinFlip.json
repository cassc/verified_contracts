{"SourceCode": "/* SPDX-License-Identifier: MIT\r\n\r\nhttps://pepeflip.money\r\n\r\nhttps://t.me/pepeflip\r\n\r\n*/\r\n\r\npragma solidity ^0.8.0;\r\n\r\ncontract CoinFlip {\r\n    enum Side {Heads, Tails}\r\n\r\n    struct Bet {\r\n        address player;\r\n        uint256 amount;\r\n        Side choice;\r\n    }\r\n\r\n    event CoinFlipped(address indexed player, Side result, uint256 amountWon);\r\n    event MaxBetChanged(uint256 newMaxBet);\r\n    event Withdrawal(address indexed owner, uint256 amount);\r\n    event Deposit(address indexed depositor, uint256 amount);\r\n\r\n    uint256 public maxBet = 0.2 ether; // Maximum bet amount\r\n\r\n    address public owner;\r\n\r\n    constructor() {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"Only the contract owner can call this function\");\r\n        _;\r\n    }\r\n  function deposit() external payable {\r\n        emit Deposit(msg.sender, msg.value);\r\n    }\r\n    function flipCoin(Side choice) external payable {\r\n        require(msg.value > 0, \"Bet amount must be greater than zero\");\r\n        require(\r\n            choice == Side.Heads || choice == Side.Tails,\r\n            \"Invalid choice\"\r\n        );\r\n        require(msg.value <= maxBet, \"Bet amount exceeds maximum limit\");\r\n\r\n        Side result = randomResult();\r\n        uint256 amountWon = calculateWinAmount(msg.value, choice, result);\r\n\r\n        if (amountWon > 0) {\r\n            payable(msg.sender).transfer(amountWon);\r\n        }\r\n\r\n        emit CoinFlipped(msg.sender, result, amountWon);\r\n    }\r\n\r\n    function randomResult() internal view returns (Side) {\r\n        uint256 randomValue = uint256(keccak256(abi.encodePacked(block.timestamp, block.prevrandao)));\r\n        return Side(randomValue % 2);\r\n    }\r\n\r\n    function calculateWinAmount(\r\n        uint256 betAmount,\r\n        Side choice,\r\n        Side result\r\n    ) internal pure returns (uint256) {\r\n        if (choice == result) {\r\n            return ((betAmount * 2) * 95) / 100; // Win amount is double the bet\r\n        }\r\n        return 0; // Bet lost\r\n    }\r\n\r\n    function changeMaxBet(uint256 newMaxBet) external onlyOwner {\r\n        maxBet = newMaxBet;\r\n        emit MaxBetChanged(newMaxBet);\r\n    }\r\n\r\n    function withdraw(uint256 amount) external onlyOwner {\r\n        require(amount <= address(this).balance, \"Amount exceeds contract balance\");\r\n        payable(msg.sender).transfer(amount);\r\n        emit Withdrawal(msg.sender, amount);\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"enum CoinFlip.Side\",\"name\":\"result\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountWon\",\"type\":\"uint256\"}],\"name\":\"CoinFlipped\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"depositor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMaxBet\",\"type\":\"uint256\"}],\"name\":\"MaxBetChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawal\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newMaxBet\",\"type\":\"uint256\"}],\"name\":\"changeMaxBet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum CoinFlip.Side\",\"name\":\"choice\",\"type\":\"uint8\"}],\"name\":\"flipCoin\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxBet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "CoinFlip", "CompilerVersion": "v0.8.20+commit.a1b79de6", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://baa40446e3bccfbd65dcc2dec57fcfc73d27e2611a2b20557caff04f16f7d6b3"}