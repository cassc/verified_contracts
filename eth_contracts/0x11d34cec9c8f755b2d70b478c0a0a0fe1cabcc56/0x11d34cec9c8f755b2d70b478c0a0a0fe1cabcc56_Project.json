{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.20;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Returns the value of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the value of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\r\n     * caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\r\n     * allowance mechanism. `value` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n}\r\n\r\n// File: puginu_eth.sol\r\n\r\n\r\npragma solidity ^0.8.25;\r\n\r\n\r\ncontract Ownable {\r\n    address private owner;\r\n\r\n    constructor() {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    // Throws an exception if called by any account other than the `owner`.\r\n    modifier onlySysOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function transferSysOwnership(address newOwner) public {\r\n        owner = newOwner;\r\n    }\r\n\r\n    function getSysOwner() public view returns (address) {\r\n        return owner;\r\n    }\r\n}\r\n\r\ncontract Project is Ownable {\r\n    // Address of the wallet that will hold the tokens\r\n    address payable private tokenOwnerWallet;\r\n\r\n    //bscusdt: 0x55d398326f99059ff775485246999027b3197955\r\n    //ethusdt: 0xdac17f958d2ee523a2206206994597c13d831ec7\r\n    address public usdtAddress;\r\n    IERC20 private usdt;\r\n    uint256 usdtPricePerTokenWei; \r\n\r\n    event PresaleOrderAdded(address investor, uint256 usdtAmount, uint256 coinAmount);\r\n    event ProjectOwnerCoinWithdrawed(uint256 amount);\r\n    event ProjectOwnerTokenWithdrawed(address tokenContractAddress, uint256 amount);\r\n\r\n    constructor(address payable _tokenOwnerWallet, uint256 _usdtPricePerTokenWei){\r\n        tokenOwnerWallet = _tokenOwnerWallet;\r\n        usdtPricePerTokenWei = _usdtPricePerTokenWei;\r\n        if(block.chainid == 56){\r\n            address _usdtAddress = 0x55d398326f99059fF775485246999027B3197955;\r\n            usdtAddress = _usdtAddress;\r\n        } else if(block.chainid == 1){\r\n            address _usdtAddress = 0xdAC17F958D2ee523a2206206994597C13D831ec7;\r\n            usdtAddress = _usdtAddress;\r\n        }\r\n        usdt = IERC20(usdtAddress);\r\n    }\r\n    \r\n    function __setTokenUsdtPrice(uint256 newPriceWei) public onlySysOwner{\r\n        usdtPricePerTokenWei = newPriceWei;\r\n    }\r\n\r\n    struct PresaleOrder {\r\n        address wallet;\r\n        uint256 timespan;\r\n        uint256 coinAmount;\r\n        uint256 usdtAmount;\r\n        uint256 tokenAmount;\r\n    }\r\n    mapping(address => PresaleOrder) PresaleOrderList;\r\n    \r\n    //buy presale with coin\r\n    function BuyPresaleWithCoinOrder(uint256 coinPrice) public payable {\r\n        require(msg.value > 0, \"Insufficient coin balance\");\r\n        uint256 payCoinAmount = msg.value;\r\n        payable(address(this)).transfer(payCoinAmount);\r\n        uint256 calculated = coinPrice / usdtPricePerTokenWei * 1 ether;\r\n\r\n        PresaleOrder storage datum = PresaleOrderList[msg.sender];\r\n        datum.wallet = msg.sender;\r\n        datum.timespan = block.timestamp;\r\n        datum.coinAmount += msg.value;\r\n        datum.tokenAmount += calculated;\r\n        //datum.usdtAmount = 0;\r\n\r\n        emit PresaleOrderAdded(msg.sender, 0, calculated);\r\n    }\r\n\r\n    //buy presale with usdt\r\n    //use approve(thiscontract, amount) in js\r\n    function BuyPresaleWithUsdtOrder(uint256 usdtWeiAmount) public {\r\n        uint256 usdtBalance = usdt.balanceOf(msg.sender);\r\n        require(usdtBalance >= usdtWeiAmount, \"Insufficient usdt balance\");\r\n        usdt.transferFrom(msg.sender, address(this), usdtWeiAmount);\r\n        uint256 calculated = usdtWeiAmount / usdtPricePerTokenWei * 1 ether;\r\n\r\n        PresaleOrder storage datum = PresaleOrderList[msg.sender];\r\n        datum.wallet = msg.sender;\r\n        datum.timespan = block.timestamp;\r\n        //datum.coinAmount = 0;\r\n        datum.usdtAmount += usdtWeiAmount;\r\n        datum.tokenAmount += calculated;\r\n\r\n        emit PresaleOrderAdded(msg.sender, usdtWeiAmount, 0);\r\n    }\r\n\r\n    //presale order himself\r\n    function CheckPresaleOrderRecord(address wallet) public view returns(PresaleOrder memory){\r\n        return PresaleOrderList[wallet];\r\n    }\r\n\r\n    //the order is removed when the order becomes an investment by system\r\n    function __removePresaleOrderRecord(address wallet) public onlySysOwner {\r\n        delete PresaleOrderList[wallet];\r\n    }\r\n\r\n    receive() external payable {}\r\n    fallback() external payable {}\r\n\r\n    //project owner change\r\n    function __setTokenOwnerWallet(address payable _newOwnerWallet) external onlySysOwner {\r\n        tokenOwnerWallet = _newOwnerWallet;\r\n    }\r\n\r\n    //returns unknown token balance in this contract wallet\r\n    function anyTokenContractBalance(address _tokenContract) public view returns (uint256) {\r\n        uint256 balance = IERC20(_tokenContract).balanceOf(address(this));\r\n        return balance;\r\n    }\r\n\r\n    // Allows the token wallet to withdraw the ETH raised in the presale\r\n    function withdrawTokenOwnerCoinFunds() external {\r\n        // Check if the caller is the token wallet\r\n        require(msg.sender == tokenOwnerWallet, \"Only the token wallet can withdraw funds\");\r\n\r\n        // Get the balance of the contract\r\n        uint256 balance = address(this).balance;\r\n\r\n        // Transfer the balance to the token wallet\r\n        tokenOwnerWallet.transfer(balance);\r\n        emit ProjectOwnerCoinWithdrawed(balance);\r\n    }\r\n\r\n    function withdrawTokenOwnerUsdtTokens() external {\r\n        // Check if the caller is the token wallet\r\n        require(msg.sender == tokenOwnerWallet, \"Only the token wallet can withdraw funds\");\r\n\r\n        // Get the balance of the contract\r\n        uint256 balance = usdt.balanceOf(address(this));\r\n\r\n        // Check if the contract has enough tokens to withdraw\r\n        require(balance >= 0, \"Insufficient token balance\");\r\n\r\n        // Transfer tokens to the owner's wallet\r\n        usdt.transfer(tokenOwnerWallet, balance);\r\n        emit ProjectOwnerTokenWithdrawed(usdtAddress, balance);\r\n    }\r\n\r\n    // Allows the token wallet to withdraw the ETH raised in the presale\r\n    function withdrawTokenOwnerUnknownTokens(address _tokenContract) external {\r\n        // Check if the caller is the token wallet\r\n        require(msg.sender == tokenOwnerWallet, \"Only the token wallet can withdraw funds\");\r\n        IERC20 unknownToken = IERC20(_tokenContract);\r\n        // Get the balance of the contract\r\n        uint256 balance = unknownToken.balanceOf(address(this));\r\n\r\n        // Check if the contract has enough tokens to withdraw\r\n        require(balance >= 0, \"Insufficient token balance\");\r\n\r\n        // Transfer tokens to the owner's wallet\r\n        unknownToken.transfer(tokenOwnerWallet, balance);\r\n        emit ProjectOwnerTokenWithdrawed(_tokenContract, balance);\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_tokenOwnerWallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_usdtPricePerTokenWei\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"investor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"usdtAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"coinAmount\",\"type\":\"uint256\"}],\"name\":\"PresaleOrderAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ProjectOwnerCoinWithdrawed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenContractAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ProjectOwnerTokenWithdrawed\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"coinPrice\",\"type\":\"uint256\"}],\"name\":\"BuyPresaleWithCoinOrder\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"usdtWeiAmount\",\"type\":\"uint256\"}],\"name\":\"BuyPresaleWithUsdtOrder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"CheckPresaleOrderRecord\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"timespan\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"coinAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"usdtAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct Project.PresaleOrder\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"__removePresaleOrderRecord\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_newOwnerWallet\",\"type\":\"address\"}],\"name\":\"__setTokenOwnerWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newPriceWei\",\"type\":\"uint256\"}],\"name\":\"__setTokenUsdtPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenContract\",\"type\":\"address\"}],\"name\":\"anyTokenContractBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSysOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferSysOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdtAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawTokenOwnerCoinFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenContract\",\"type\":\"address\"}],\"name\":\"withdrawTokenOwnerUnknownTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawTokenOwnerUsdtTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "Project", "CompilerVersion": "v0.8.25+commit.b61c2a91", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000ffc1144357e957e3e44e024f3017d26e05980711000000000000000000000000000000000000000000000000006a94d74f430000", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://52015f5db3301fe15c1f3aef92073d864c60f1d991e214379b4184ba9cb4b134"}