{"SourceCode": "// SPDX-License-Identifier: UNLICENSED\r\npragma solidity ^0.8.0;\r\n\r\ninterface IUniswapV3Pool {\r\n    function slot0() external view returns (\r\n        uint160 sqrtPriceX96,\r\n        int24 tick,\r\n        uint16 observationIndex,\r\n        uint16 observationCardinality,\r\n        uint16 observationCardinalityNext,\r\n        uint8 feeProtocol,\r\n        bool unlocked\r\n    );\r\n    function liquidity() external view returns (uint128);\r\n    function feeGrowthGlobal0X128() external view returns (uint256);\r\n    function feeGrowthGlobal1X128() external view returns (uint256);\r\n    function protocolFees() external view returns (uint128 token0, uint128 token1);\r\n    function tickSpacing() external view returns (int24);\r\n    function tickBitmap(int16 wordPosition) external view returns (uint256);\r\n    function ticks(int24 tick) external view returns (\r\n        uint128 liquidityGross,\r\n        int128 liquidityNet,\r\n        uint256 feeGrowthOutside0X128,\r\n        uint256 feeGrowthOutside1X128,\r\n        int56 tickCumulativeOutside,\r\n        uint160 secondsPerLiquidityOutsideX128,\r\n        uint32 secondsOutside,\r\n        bool initialized\r\n    );\r\n    function observations(uint256 index) external view returns (\r\n        uint32 blockTimestamp,\r\n        int56 tickCumulative,\r\n        uint160 secondsPerLiquidityCumulativeX128,\r\n        bool initialized\r\n    );\r\n    function fee() external view returns (uint24);\r\n    function token0() external view returns (address);\r\n    function token1() external view returns (address);\r\n}\r\n\r\ninterface ICurvePool {\r\n    function A() external view returns (uint256);\r\n    function fee() external view returns (uint256);\r\n    function admin_fee() external view returns (uint256);\r\n    function balances(uint256 index) external view returns (uint256);\r\n}\r\n\r\ncontract PoolsInfoDataFetcher {\r\n    struct UniswapV3PoolData {\r\n        SlotData slotData;\r\n        OtherPoolData otherPoolData;\r\n        TickData tickData;\r\n        Observation[] observations;\r\n    }\r\n\r\n    struct SlotData {\r\n        uint160 sqrtPriceX96;\r\n        int24 tick;\r\n        uint16 observationIndex;\r\n        uint16 observationCardinality;\r\n        uint16 observationCardinalityNext;\r\n        uint8 feeProtocol;\r\n        bool unlocked;\r\n    }\r\n\r\n    struct OtherPoolData {\r\n        uint128 liquidity;\r\n        uint256 feeGrowthGlobal0X128;\r\n        uint256 feeGrowthGlobal1X128;\r\n        uint128 protocolFeesToken0;\r\n        uint128 protocolFeesToken1;\r\n        int24 tickSpacing;\r\n        uint24 fee;\r\n        address token0;\r\n        address token1;\r\n    }\r\n\r\n    struct TickData {\r\n        TickInfo[] initializedTicks;\r\n        uint256[] tickBitmaps;\r\n    }\r\n\r\n    struct TickInfo {\r\n        int24 tick;\r\n        uint128 liquidityGross;\r\n        int128 liquidityNet;\r\n        uint256 feeGrowthOutside0X128;\r\n        uint256 feeGrowthOutside1X128;\r\n        int56 tickCumulativeOutside;\r\n        uint160 secondsPerLiquidityOutsideX128;\r\n        uint32 secondsOutside;\r\n        bool initialized;\r\n    }\r\n\r\n    struct Observation {\r\n        uint32 blockTimestamp;\r\n        int56 tickCumulative;\r\n        uint160 secondsPerLiquidityCumulativeX128;\r\n        bool initialized;\r\n    }\r\n\r\n    struct CurvePoolData {\r\n        uint256 A;\r\n        uint256 fee;\r\n        uint256 adminFee;\r\n        uint256[] balances;\r\n    }\r\n\r\n    struct CombinedPoolData {\r\n        UniswapV3PoolData uniswapV3PoolData;\r\n        CurvePoolData curvePoolData;\r\n    }\r\n\r\n    function getUniswapV3PoolData(address poolAddress) internal view returns (UniswapV3PoolData memory) {\r\n        SlotData memory slotData = getSlotData(poolAddress);\r\n        OtherPoolData memory otherPoolData = getOtherPoolData(poolAddress);\r\n        TickData memory tickData = getTickData(poolAddress, slotData.tick);\r\n        Observation[] memory observations = getObservations(poolAddress, slotData.observationCardinality);\r\n\r\n        return UniswapV3PoolData({\r\n            slotData: slotData,\r\n            otherPoolData: otherPoolData,\r\n            tickData: tickData,\r\n            observations: observations\r\n        });\r\n    }\r\n\r\n    function getSlotData(address poolAddress) internal view returns (SlotData memory) {\r\n        IUniswapV3Pool pool = IUniswapV3Pool(poolAddress);\r\n        (\r\n            uint160 sqrtPriceX96,\r\n            int24 tick,\r\n            uint16 observationIndex,\r\n            uint16 observationCardinality,\r\n            uint16 observationCardinalityNext,\r\n            uint8 feeProtocol,\r\n            bool unlocked\r\n        ) = pool.slot0();\r\n\r\n        return SlotData({\r\n            sqrtPriceX96: sqrtPriceX96,\r\n            tick: tick,\r\n            observationIndex: observationIndex,\r\n            observationCardinality: observationCardinality,\r\n            observationCardinalityNext: observationCardinalityNext,\r\n            feeProtocol: feeProtocol,\r\n            unlocked: unlocked\r\n        });\r\n    }\r\n\r\n    function getOtherPoolData(address poolAddress) internal view returns (OtherPoolData memory) {\r\n        IUniswapV3Pool pool = IUniswapV3Pool(poolAddress);\r\n        (uint128 protocolFeesToken0, uint128 protocolFeesToken1) = pool.protocolFees();\r\n        return OtherPoolData({\r\n            liquidity: pool.liquidity(),\r\n            feeGrowthGlobal0X128: pool.feeGrowthGlobal0X128(),\r\n            feeGrowthGlobal1X128: pool.feeGrowthGlobal1X128(),\r\n            protocolFeesToken0: protocolFeesToken0,\r\n            protocolFeesToken1: protocolFeesToken1,\r\n            tickSpacing: pool.tickSpacing(),\r\n            fee: pool.fee(),\r\n            token0: pool.token0(),\r\n            token1: pool.token1()\r\n        });\r\n    }\r\n\r\n    function getTickData(address poolAddress, int24 currentTick) internal view returns (TickData memory) {\r\n        IUniswapV3Pool pool = IUniswapV3Pool(poolAddress);\r\n\r\n        int16[] memory wordPositions = getWordPositions(currentTick);\r\n        uint256[] memory tickBitmaps = new uint256[](wordPositions.length);\r\n        uint256 tickCount = 0;\r\n        for (uint256 i = 0; i < wordPositions.length; i++) {\r\n            uint256 bitmap = pool.tickBitmap(wordPositions[i]);\r\n            tickBitmaps[i] = bitmap;\r\n            tickCount += countInitializedTicks(bitmap);\r\n        }\r\n\r\n        TickInfo[] memory ticks = new TickInfo[](tickCount > 0 ? tickCount : 1);\r\n        if (tickCount > 0) {\r\n            uint256 index = 0;\r\n            for (uint256 i = 0; i < wordPositions.length; i++) {\r\n                uint256 bitmap = tickBitmaps[i];\r\n                index = populateTicks(pool, bitmap, wordPositions[i], ticks, index);\r\n            }\r\n        } else {\r\n            // Fallback: populate with a dummy tick if no initialized ticks found\r\n            ticks[0] = TickInfo({\r\n                tick: currentTick,\r\n                liquidityGross: 0,\r\n                liquidityNet: 0,\r\n                feeGrowthOutside0X128: 0,\r\n                feeGrowthOutside1X128: 0,\r\n                tickCumulativeOutside: 0,\r\n                secondsPerLiquidityOutsideX128: 0,\r\n                secondsOutside: 0,\r\n                initialized: false\r\n            });\r\n        }\r\n\r\n        return TickData({\r\n            initializedTicks: ticks,\r\n            tickBitmaps: tickBitmaps\r\n        });\r\n    }\r\n\r\n    function getWordPositions(int24 currentTick) internal pure returns (int16[] memory) {\r\n        int24 wordPosition = currentTick >> 8;\r\n        int16[] memory wordPositions = new int16[](3);\r\n        wordPositions[0] = int16(wordPosition - 1);\r\n        wordPositions[1] = int16(wordPosition);\r\n        wordPositions[2] = int16(wordPosition + 1);\r\n        return wordPositions;\r\n    }\r\n\r\n    function countInitializedTicks(uint256 bitmap) internal pure returns (uint256) {\r\n        uint256 count = 0;\r\n        while (bitmap != 0) {\r\n            bitmap &= (bitmap - 1);\r\n            count++;\r\n        }\r\n        return count;\r\n    }\r\n\r\n    function populateTicks(\r\n        IUniswapV3Pool pool,\r\n        uint256 bitmap,\r\n        int16 wordPosition,\r\n        TickInfo[] memory ticks,\r\n        uint256 index\r\n    ) internal view returns (uint256) {\r\n        for (uint256 i = 0; i < 256; i++) {\r\n            if ((bitmap & (1 << i)) != 0) {\r\n                int24 tickIndex = int24((int256(wordPosition) << 8) + int256(i));\r\n                ticks[index] = getTickInfo(pool, tickIndex);\r\n                index++;\r\n            }\r\n        }\r\n        return index;\r\n    }\r\n\r\n    function getTickInfo(IUniswapV3Pool pool, int24 tickIndex) internal view returns (TickInfo memory) {\r\n        (\r\n            uint128 liquidityGross,\r\n            int128 liquidityNet,\r\n            uint256 feeGrowthOutside0X128,\r\n            uint256 feeGrowthOutside1X128,\r\n            int56 tickCumulativeOutside,\r\n            uint160 secondsPerLiquidityOutsideX128,\r\n            uint32 secondsOutside,\r\n            bool initialized\r\n        ) = pool.ticks(tickIndex);\r\n\r\n        return TickInfo({\r\n            tick: tickIndex,\r\n            liquidityGross: liquidityGross,\r\n            liquidityNet: liquidityNet,\r\n            feeGrowthOutside0X128: feeGrowthOutside0X128,\r\n            feeGrowthOutside1X128: feeGrowthOutside1X128,\r\n            tickCumulativeOutside: tickCumulativeOutside,\r\n            secondsPerLiquidityOutsideX128: secondsPerLiquidityOutsideX128,\r\n            secondsOutside: secondsOutside,\r\n            initialized: initialized\r\n        });\r\n    }\r\n\r\n    function getObservations(address poolAddress, uint16 observationCardinality) internal view returns (Observation[] memory) {\r\n        IUniswapV3Pool pool = IUniswapV3Pool(poolAddress);\r\n        Observation[] memory observations = new Observation[](observationCardinality);\r\n\r\n        for (uint16 i = 0; i < observationCardinality; i++) {\r\n            (\r\n                uint32 blockTimestamp,\r\n                int56 tickCumulative,\r\n                uint160 secondsPerLiquidityCumulativeX128,\r\n                bool initialized\r\n            ) = pool.observations(i);\r\n\r\n            observations[i] = Observation({\r\n                blockTimestamp: blockTimestamp,\r\n                tickCumulative: tickCumulative,\r\n                secondsPerLiquidityCumulativeX128: secondsPerLiquidityCumulativeX128,\r\n                initialized: initialized\r\n            });\r\n        }\r\n\r\n        return observations;\r\n    }\r\n\r\n    function getCurvePoolData(address poolAddress) internal view returns (CurvePoolData memory) {\r\n        ICurvePool pool = ICurvePool(poolAddress);\r\n\r\n        uint256 N_COINS = 3;\r\n        uint256[] memory balancesArray = new uint256[](N_COINS);\r\n        for (uint256 i = 0; i < N_COINS; i++) {\r\n            balancesArray[i] = pool.balances(i);\r\n        }\r\n\r\n        return CurvePoolData({\r\n            A: pool.A(),\r\n            fee: pool.fee(),\r\n            adminFee: pool.admin_fee(),\r\n            balances: balancesArray\r\n        });\r\n    }\r\n\r\n    function getCombinedPoolData(address poolAddress1, address poolAddress2) external view returns (CombinedPoolData memory) {\r\n        bool isPool1Uniswap = isUniswapV3Pool(poolAddress1);\r\n        bool isPool2Uniswap = isUniswapV3Pool(poolAddress2);\r\n\r\n        require(isPool1Uniswap != isPool2Uniswap, \"One pool must be UniswapV3 and the other Curve\");\r\n\r\n        UniswapV3PoolData memory uniswapV3PoolData = isPool1Uniswap ? getUniswapV3PoolData(poolAddress1) : getUniswapV3PoolData(poolAddress2);\r\n        CurvePoolData memory curvePoolData = isPool1Uniswap ? getCurvePoolData(poolAddress2) : getCurvePoolData(poolAddress1);\r\n\r\n        return CombinedPoolData({\r\n            uniswapV3PoolData: uniswapV3PoolData,\r\n            curvePoolData: curvePoolData\r\n        });\r\n    }\r\n\r\n    function isUniswapV3Pool(address poolAddress) internal view returns (bool) {\r\n        try IUniswapV3Pool(poolAddress).slot0() {\r\n            return true;\r\n        } catch {\r\n            return false;\r\n        }\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"poolAddress1\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"poolAddress2\",\"type\":\"address\"}],\"name\":\"getCombinedPoolData\",\"outputs\":[{\"components\":[{\"components\":[{\"components\":[{\"internalType\":\"uint160\",\"name\":\"sqrtPriceX96\",\"type\":\"uint160\"},{\"internalType\":\"int24\",\"name\":\"tick\",\"type\":\"int24\"},{\"internalType\":\"uint16\",\"name\":\"observationIndex\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"observationCardinality\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"observationCardinalityNext\",\"type\":\"uint16\"},{\"internalType\":\"uint8\",\"name\":\"feeProtocol\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"unlocked\",\"type\":\"bool\"}],\"internalType\":\"struct PoolsInfoDataFetcher.SlotData\",\"name\":\"slotData\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint128\",\"name\":\"liquidity\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"feeGrowthGlobal0X128\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feeGrowthGlobal1X128\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"protocolFeesToken0\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"protocolFeesToken1\",\"type\":\"uint128\"},{\"internalType\":\"int24\",\"name\":\"tickSpacing\",\"type\":\"int24\"},{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"},{\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"}],\"internalType\":\"struct PoolsInfoDataFetcher.OtherPoolData\",\"name\":\"otherPoolData\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"int24\",\"name\":\"tick\",\"type\":\"int24\"},{\"internalType\":\"uint128\",\"name\":\"liquidityGross\",\"type\":\"uint128\"},{\"internalType\":\"int128\",\"name\":\"liquidityNet\",\"type\":\"int128\"},{\"internalType\":\"uint256\",\"name\":\"feeGrowthOutside0X128\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feeGrowthOutside1X128\",\"type\":\"uint256\"},{\"internalType\":\"int56\",\"name\":\"tickCumulativeOutside\",\"type\":\"int56\"},{\"internalType\":\"uint160\",\"name\":\"secondsPerLiquidityOutsideX128\",\"type\":\"uint160\"},{\"internalType\":\"uint32\",\"name\":\"secondsOutside\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"initialized\",\"type\":\"bool\"}],\"internalType\":\"struct PoolsInfoDataFetcher.TickInfo[]\",\"name\":\"initializedTicks\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tickBitmaps\",\"type\":\"uint256[]\"}],\"internalType\":\"struct PoolsInfoDataFetcher.TickData\",\"name\":\"tickData\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint32\",\"name\":\"blockTimestamp\",\"type\":\"uint32\"},{\"internalType\":\"int56\",\"name\":\"tickCumulative\",\"type\":\"int56\"},{\"internalType\":\"uint160\",\"name\":\"secondsPerLiquidityCumulativeX128\",\"type\":\"uint160\"},{\"internalType\":\"bool\",\"name\":\"initialized\",\"type\":\"bool\"}],\"internalType\":\"struct PoolsInfoDataFetcher.Observation[]\",\"name\":\"observations\",\"type\":\"tuple[]\"}],\"internalType\":\"struct PoolsInfoDataFetcher.UniswapV3PoolData\",\"name\":\"uniswapV3PoolData\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"A\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"adminFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"balances\",\"type\":\"uint256[]\"}],\"internalType\":\"struct PoolsInfoDataFetcher.CurvePoolData\",\"name\":\"curvePoolData\",\"type\":\"tuple\"}],\"internalType\":\"struct PoolsInfoDataFetcher.CombinedPoolData\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "PoolsInfoDataFetcher", "CompilerVersion": "v0.8.25+commit.b61c2a91", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://47c6929bbd7b9a1ec22cd188c92a3a080d56cdd83bf9676732a3292baf383b64"}