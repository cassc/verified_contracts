{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/WrapperHub/AaveHub.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: -- WISE --\\n\\npragma solidity =0.8.21;\\n\\n/**\\n * @author Christoph Krpoun\\n * @author Ren\u00e9 Hochmuth\\n * @author Vitally Marinchenko\\n */\\n\\nimport \\\"./AaveHelper.sol\\\";\\nimport \\\"../TransferHub/TransferHelper.sol\\\";\\nimport \\\"../TransferHub/ApprovalHelper.sol\\\";\\n\\n/**\\n * @dev Purpose of this contract is to optimize capital efficency by using\\n * aave pools. Not borrowed funds are deposited into correspoding aave pools\\n * to earn supply APY.\\n *\\n * The aToken are holded by the wiseLending contract but the accounting\\n * is managed by the position NFTs. This is possible due to the included\\n * onBehlaf functionallity inside wiseLending.\\n */\\n\\ncontract AaveHub is AaveHelper, TransferHelper, ApprovalHelper {\\n\\n    constructor(\\n        address _master,\\n        address _aaveAddress,\\n        address _lendingAddress\\n    )\\n        Declarations(\\n            _master,\\n            _aaveAddress,\\n            _lendingAddress\\n        )\\n    {}\\n\\n    /**\\n     * @dev Adds new mapping to aaveHub. Needed\\n     * to link underlying assets with corresponding\\n     * aTokens. Can only be called by master.\\n     */\\n    function setAaveTokenAddress(\\n        address _underlyingAsset,\\n        address _aaveToken\\n    )\\n        external\\n        onlyMaster\\n    {\\n        if (aaveTokenAddress[_underlyingAsset] > ZERO_ADDRESS) {\\n            revert AlreadySet();\\n        }\\n\\n        aaveTokenAddress[_underlyingAsset] = _aaveToken;\\n\\n        _safeApprove(\\n            _aaveToken,\\n            address(WISE_LENDING),\\n            MAX_AMOUNT\\n        );\\n\\n        _safeApprove(\\n            _underlyingAsset,\\n            AAVE_ADDRESS,\\n            MAX_AMOUNT\\n        );\\n\\n        emit SetAaveTokenAddress(\\n            _underlyingAsset,\\n            _aaveToken,\\n            block.timestamp\\n        );\\n    }\\n\\n    /**\\n     * @dev Receive functions forwarding\\n     * sent ETH to the master address\\n     */\\n    receive()\\n        external\\n        payable\\n    {\\n        if (msg.sender == WETH_ADDRESS) {\\n            return;\\n        }\\n\\n        payable(master).transfer(\\n            msg.value\\n        );\\n    }\\n\\n    /**\\n     * @dev Allows deposit ERC20 token to\\n     * wiseLending and takes token amount\\n     * as arguement. Also mints position\\n     * NFT to reduce needed transactions.\\n     */\\n    function depositExactAmountMint(\\n        address _underlyingAsset,\\n        uint256 _amount\\n    )\\n        external\\n        returns (uint256)\\n    {\\n        return depositExactAmount(\\n            _reservePosition(),\\n            _underlyingAsset,\\n            _amount\\n        );\\n    }\\n\\n    /**\\n     * @dev Allows deposit ERC20 token to\\n     * wiseLending and takes token amount as\\n     * argument.\\n     */\\n    function depositExactAmount(\\n        uint256 _nftId,\\n        address _underlyingAsset,\\n        uint256 _amount\\n    )\\n        public\\n        syncPool(_underlyingAsset)\\n        returns (uint256)\\n    {\\n        _checkDeposit(\\n            _nftId,\\n            _underlyingAsset,\\n            _amount\\n        );\\n\\n        _safeTransferFrom(\\n            _underlyingAsset,\\n            msg.sender,\\n            address(this),\\n            _amount\\n        );\\n\\n        uint256 lendingShares = _wrapDepositExactAmount(\\n            _nftId,\\n            _underlyingAsset,\\n            _amount\\n        );\\n\\n        emit IsDepositAave(\\n            _nftId,\\n            block.timestamp\\n        );\\n\\n        return lendingShares;\\n    }\\n\\n    /**\\n     * @dev Allows to deposit ETH token directly to\\n     * wiseLending and takes token amount as argument.\\n     * Also mints position NFT to avoid extra transaction.\\n     */\\n    function depositExactAmountETHMint()\\n        external\\n        payable\\n        returns (uint256)\\n    {\\n        return depositExactAmountETH(\\n            _reservePosition()\\n        );\\n    }\\n\\n    /**\\n     * @dev Allows to deposit ETH token directly to\\n     * wiseLending and takes token amount as argument.\\n     */\\n    function depositExactAmountETH(\\n        uint256 _nftId\\n    )\\n        public\\n        payable\\n        syncPool(WETH_ADDRESS)\\n        returns (uint256)\\n    {\\n        _checkDeposit(\\n            _nftId,\\n            WETH_ADDRESS,\\n            msg.value\\n        );\\n\\n        _wrapETH(\\n            msg.value\\n        );\\n\\n        uint256 lendingShares = _wrapDepositExactAmount(\\n            _nftId,\\n            WETH_ADDRESS,\\n            msg.value\\n        );\\n\\n        emit IsDepositAave(\\n            _nftId,\\n            block.timestamp\\n        );\\n\\n        return lendingShares;\\n    }\\n\\n    /**\\n     * @dev Allows to withdraw deposited ERC20 token.\\n     * Takes _withdrawAmount as argument.\\n     */\\n    function withdrawExactAmount(\\n        uint256 _nftId,\\n        address _underlyingAsset,\\n        uint256 _withdrawAmount\\n    )\\n        external\\n        syncPool(_underlyingAsset)\\n        returns (uint256)\\n    {\\n        _checkOwner(\\n            _nftId\\n        );\\n\\n        _checksWithdraw(\\n            _nftId,\\n            _underlyingAsset,\\n            _withdrawAmount\\n        );\\n\\n        uint256 withdrawnShares = _wrapWithdrawExactAmount(\\n            _nftId,\\n            _underlyingAsset,\\n            msg.sender,\\n            _withdrawAmount\\n        );\\n\\n        emit IsWithdrawAave(\\n            _nftId,\\n            block.timestamp\\n        );\\n\\n        return withdrawnShares;\\n    }\\n\\n    /**\\n     * @dev Allows to withdraw deposited ETH token.\\n     * Takes token amount as argument.\\n     */\\n    function withdrawExactAmountETH(\\n        uint256 _nftId,\\n        uint256 _withdrawAmount\\n    )\\n        external\\n        syncPool(WETH_ADDRESS)\\n        returns (uint256)\\n    {\\n        _checkOwner(\\n            _nftId\\n        );\\n\\n        _checksWithdraw(\\n            _nftId,\\n            WETH_ADDRESS,\\n            _withdrawAmount\\n        );\\n\\n        uint256 withdrawnShares = _wrapWithdrawExactAmount(\\n            _nftId,\\n            WETH_ADDRESS,\\n            address(this),\\n            _withdrawAmount\\n        );\\n\\n        _unwrapETH(\\n            _withdrawAmount\\n        );\\n\\n        payable(msg.sender).transfer(\\n            _withdrawAmount\\n        );\\n\\n        emit IsWithdrawAave(\\n            _nftId,\\n            block.timestamp\\n        );\\n\\n        return withdrawnShares;\\n    }\\n\\n    /**\\n     * @dev Allows to withdraw deposited ERC20 token.\\n     * Takes _shareAmount as argument.\\n     */\\n    function withdrawExactShares(\\n        uint256 _nftId,\\n        address _underlyingAsset,\\n        uint256 _shareAmount\\n    )\\n        external\\n        syncPool(_underlyingAsset)\\n        returns (uint256)\\n    {\\n        _checkOwner(\\n            _nftId\\n        );\\n\\n        uint256 withdrawAmount = _wrapWithdrawExactShares(\\n            _nftId,\\n            _underlyingAsset,\\n            msg.sender,\\n            _shareAmount\\n        );\\n\\n        emit IsWithdrawAave(\\n            _nftId,\\n            block.timestamp\\n        );\\n\\n        return withdrawAmount;\\n    }\\n\\n    /**\\n     * @dev Allows to withdraw deposited ETH token.\\n     * Takes _shareAmount as argument.\\n     */\\n    function withdrawExactSharesETH(\\n        uint256 _nftId,\\n        uint256 _shareAmount\\n    )\\n        external\\n        syncPool(WETH_ADDRESS)\\n        returns (uint256)\\n    {\\n        _checkOwner(\\n            _nftId\\n        );\\n\\n        uint256 withdrawAmount = _wrapWithdrawExactShares(\\n            _nftId,\\n            WETH_ADDRESS,\\n            address(this),\\n            _shareAmount\\n        );\\n\\n        _unwrapETH(\\n            withdrawAmount\\n        );\\n\\n        payable(msg.sender).transfer(\\n            withdrawAmount\\n        );\\n\\n        emit IsWithdrawAave(\\n            _nftId,\\n            block.timestamp\\n        );\\n\\n        return withdrawAmount;\\n    }\\n\\n    /**\\n     * @dev Allows to borrow ERC20 token from a\\n     * wiseLending pool. Needs supplied collateral\\n     * inside the same position and to approve\\n     * aaveHub to borrow onBehalf for the caller.\\n     * Takes token amount as argument.\\n     */\\n    function borrowExactAmount(\\n        uint256 _nftId,\\n        address _underlyingAsset,\\n        uint256 _borrowAmount\\n    )\\n        external\\n        syncPool(_underlyingAsset)\\n        returns (uint256)\\n    {\\n        _checkOwner(\\n            _nftId\\n        );\\n\\n        _checksBorrow(\\n            _nftId,\\n            _underlyingAsset,\\n            _borrowAmount\\n        );\\n\\n        uint256 borrowShares = _wrapBorrowExactAmount(\\n            _nftId,\\n            _underlyingAsset,\\n            msg.sender,\\n            _borrowAmount\\n        );\\n\\n        emit IsBorrowAave(\\n            _nftId,\\n            block.timestamp\\n        );\\n\\n        return borrowShares;\\n    }\\n\\n    /**\\n     * @dev Allows to borrow ETH token from\\n     * wiseLending. Needs supplied collateral\\n     * inside the same position and to approve\\n     * aaveHub to borrow onBehalf for the caller.\\n     * Takes token amount as argument.\\n     */\\n    function borrowExactAmountETH(\\n        uint256 _nftId,\\n        uint256 _borrowAmount\\n    )\\n        external\\n        syncPool(WETH_ADDRESS)\\n        returns (uint256)\\n    {\\n        _checkOwner(\\n            _nftId\\n        );\\n\\n        _checksBorrow(\\n            _nftId,\\n            WETH_ADDRESS,\\n            _borrowAmount\\n        );\\n\\n        uint256 borrowShares = _wrapBorrowExactAmount(\\n            _nftId,\\n            WETH_ADDRESS,\\n            address(this),\\n            _borrowAmount\\n        );\\n\\n        _unwrapETH(\\n            _borrowAmount\\n        );\\n\\n        payable(msg.sender).transfer(\\n            _borrowAmount\\n        );\\n\\n        emit IsBorrowAave(\\n            _nftId,\\n            block.timestamp\\n        );\\n\\n        return borrowShares;\\n    }\\n\\n    /**\\n     * @dev Allows to payback ERC20 token for\\n     * any postion. Takes _paybackAmount as argument.\\n     */\\n    function paybackExactAmount(\\n        uint256 _nftId,\\n        address _underlyingAsset,\\n        uint256 _paybackAmount\\n    )\\n        external\\n        syncPool(_underlyingAsset)\\n        returns (uint256)\\n    {\\n        _checkPositionLocked(\\n            _nftId\\n        );\\n\\n        address aaveToken = aaveTokenAddress[\\n            _underlyingAsset\\n        ];\\n\\n        _safeTransferFrom(\\n            _underlyingAsset,\\n            msg.sender,\\n            address(this),\\n            _paybackAmount\\n        );\\n\\n        uint256 actualAmountDeposit = _wrapAaveReturnValueDeposit(\\n            _underlyingAsset,\\n            _paybackAmount,\\n            address(this)\\n        );\\n\\n        uint256 borrowSharesReduction = WISE_LENDING.paybackExactAmount(\\n            _nftId,\\n            aaveToken,\\n            actualAmountDeposit\\n        );\\n\\n        emit IsPaybackAave(\\n            _nftId,\\n            block.timestamp\\n        );\\n\\n        return borrowSharesReduction;\\n    }\\n\\n    /**\\n     * @dev Allows to payback ETH token for\\n     * any postion. Takes token amount as argument.\\n     */\\n    function paybackExactAmountETH(\\n        uint256 _nftId\\n    )\\n        external\\n        payable\\n        syncPool(WETH_ADDRESS)\\n        returns (uint256)\\n    {\\n        _checkPositionLocked(\\n            _nftId\\n        );\\n\\n        address aaveWrappedETH = aaveTokenAddress[\\n            WETH_ADDRESS\\n        ];\\n\\n        uint256 userBorrowShares = WISE_LENDING.getPositionBorrowShares(\\n            _nftId,\\n            aaveWrappedETH\\n        );\\n\\n        uint256 maxPaybackAmount = WISE_LENDING.paybackAmount(\\n            aaveWrappedETH,\\n            userBorrowShares\\n        );\\n\\n        (\\n            uint256 paybackAmount,\\n            uint256 ethRefundAmount\\n\\n        ) = _getInfoPayback(\\n            msg.value,\\n            maxPaybackAmount\\n        );\\n\\n        _wrapETH(\\n            paybackAmount\\n        );\\n\\n        uint256 actualAmountDeposit = _wrapAaveReturnValueDeposit(\\n            WETH_ADDRESS,\\n            paybackAmount,\\n            address(this)\\n        );\\n\\n        uint256 borrowSharesReduction = WISE_LENDING.paybackExactAmount(\\n            _nftId,\\n            aaveWrappedETH,\\n            actualAmountDeposit\\n        );\\n\\n        if (ethRefundAmount > 0) {\\n            payable(msg.sender).transfer(\\n                ethRefundAmount\\n            );\\n        }\\n\\n        emit IsPaybackAave(\\n            _nftId,\\n            block.timestamp\\n        );\\n\\n        return borrowSharesReduction;\\n    }\\n\\n    /**\\n     * @dev Allows to payback ERC20 token for\\n     * any postion. Takes shares as argument.\\n     */\\n    function paybackExactShares(\\n        uint256 _nftId,\\n        address _underlyingAsset,\\n        uint256 _shares\\n    )\\n        external\\n        syncPool(_underlyingAsset)\\n        returns (uint256)\\n    {\\n        _checkPositionLocked(\\n            _nftId\\n        );\\n\\n        address aaveToken = aaveTokenAddress[\\n            _underlyingAsset\\n        ];\\n\\n        uint256 paybackAmount = WISE_LENDING.paybackAmount(\\n            aaveToken,\\n            _shares\\n        );\\n\\n        _safeTransferFrom(\\n            _underlyingAsset,\\n            msg.sender,\\n            address(this),\\n            paybackAmount\\n        );\\n\\n        AAVE.deposit(\\n            _underlyingAsset,\\n            paybackAmount,\\n            address(this),\\n            REF_CODE\\n        );\\n\\n        WISE_LENDING.paybackExactShares(\\n            _nftId,\\n            aaveToken,\\n            _shares\\n        );\\n\\n        emit IsPaybackAave(\\n            _nftId,\\n            block.timestamp\\n        );\\n\\n        return paybackAmount;\\n    }\\n\\n    /**\\n     * @dev Allows to deposit ERC20 token in\\n     * private mode. These funds are saved from\\n     * borrowed out. User can withdraw private funds\\n     * anytime even the pools are empty. Private funds\\n     * do not earn any APY! Also a postion NFT is minted\\n     * to reduce transactions.\\n     */\\n    function solelyDepositMint(\\n        address _underlyingAsset,\\n        uint256 _depositAmount\\n    )\\n        external\\n    {\\n        solelyDeposit(\\n            _reservePosition(),\\n            _underlyingAsset,\\n            _depositAmount\\n        );\\n    }\\n\\n    /**\\n     * @dev Allows to deposit ERC20 token in\\n     * private mode. These funds are saved from\\n     * borrowing by other users. User can withdraw\\n     * private funds anytime even the pools are empty.\\n     * Private funds do not earn any APY!\\n     */\\n    function solelyDeposit(\\n        uint256 _nftId,\\n        address _underlyingAsset,\\n        uint256 _depositAmount\\n    )\\n        public\\n        syncPool(_underlyingAsset)\\n    {\\n        _checkDeposit(\\n            _nftId,\\n            _underlyingAsset,\\n            _depositAmount\\n        );\\n\\n        _safeTransferFrom(\\n            _underlyingAsset,\\n            msg.sender,\\n            address(this),\\n            _depositAmount\\n        );\\n\\n        _wrapSolelyDeposit(\\n            _nftId,\\n            _underlyingAsset,\\n            _depositAmount\\n        );\\n\\n        emit IsSolelyDepositAave(\\n            _nftId,\\n            block.timestamp\\n        );\\n    }\\n\\n    /**\\n     * @dev Allows to withdraw ERC20 token from\\n     * private mode.\\n     */\\n    function solelyWithdraw(\\n        uint256 _nftId,\\n        address _underlyingAsset,\\n        uint256 _withdrawAmount\\n    )\\n        external\\n        syncPool(_underlyingAsset)\\n    {\\n        _checkOwner(\\n            _nftId\\n        );\\n\\n        _checksSolelyWithdraw(\\n            _nftId,\\n            _underlyingAsset,\\n            _withdrawAmount\\n        );\\n\\n        _wrapSolelyWithdraw(\\n            _nftId,\\n            _underlyingAsset,\\n            msg.sender,\\n            _withdrawAmount\\n        );\\n\\n        emit IsSolelyWithdrawAave(\\n            _nftId,\\n            block.timestamp\\n        );\\n    }\\n\\n    /**\\n     * @dev Allows to deposit ETH token in\\n     * private mode. These funds are saved from\\n     * borrowing by other users. User can withdraw\\n     * private funds anytime even the pools are empty.\\n     * Private funds do not earn any APY! Also a position\\n     * NFT is minted to reduce transactions.\\n     */\\n    function solelyDepositETHMint()\\n        external\\n        payable\\n    {\\n        solelyDepositETH(\\n            _reservePosition()\\n        );\\n    }\\n\\n    /**\\n     * @dev Allows to deposit ETH token in\\n     * private mode. These funds are saved from\\n     * borrowing by other users. User can withdraw\\n     * private funds anytime even the pools are empty.\\n     * Private funds do not earn any APY!\\n     */\\n    function solelyDepositETH(\\n        uint256 _nftId\\n    )\\n        public\\n        payable\\n        syncPool(WETH_ADDRESS)\\n    {\\n        _checkDeposit(\\n            _nftId,\\n            WETH_ADDRESS,\\n            msg.value\\n        );\\n\\n        _wrapETH(\\n            msg.value\\n        );\\n\\n        _wrapSolelyDeposit(\\n            _nftId,\\n            WETH_ADDRESS,\\n            msg.value\\n        );\\n\\n        emit IsSolelyDepositAave(\\n            _nftId,\\n            block.timestamp\\n        );\\n    }\\n\\n    /**\\n     * @dev Allows to withdraw ETH token from\\n     * private mode.\\n     */\\n    function solelyWithdrawETH(\\n        uint256 _nftId,\\n        uint256 _withdrawAmount\\n    )\\n        external\\n        syncPool(WETH_ADDRESS)\\n    {\\n        _checkOwner(\\n            _nftId\\n        );\\n\\n        _checksSolelyWithdraw(\\n            _nftId,\\n            WETH_ADDRESS,\\n            _withdrawAmount\\n        );\\n\\n        _wrapSolelyWithdraw(\\n            _nftId,\\n            WETH_ADDRESS,\\n            address(this),\\n            _withdrawAmount\\n        );\\n\\n        _unwrapETH(\\n            _withdrawAmount\\n        );\\n\\n        payable(msg.sender).transfer(\\n            _withdrawAmount\\n        );\\n\\n        emit IsSolelyWithdrawAave(\\n            _nftId,\\n            block.timestamp\\n        );\\n    }\\n\\n    /**\\n     * @dev View functions returning the combined rate\\n     * from aave supply APY and wiseLending borrow APY\\n     * of a pool.\\n     */\\n    function getLendingRate(\\n        address _underlyingAssert\\n    )\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        address aToken = aaveTokenAddress[\\n            _underlyingAssert\\n        ];\\n\\n        uint256 lendingRate = WISE_SECURITY.getLendingRate(\\n            aToken\\n        );\\n\\n        uint256 aaveRate = getAavePoolAPY(\\n            _underlyingAssert\\n        );\\n\\n        uint256 utilization = WISE_LENDING.globalPoolData(\\n            aToken\\n        ).utilization;\\n\\n        return aaveRate\\n            * (PRECISION_FACTOR_E18 - utilization)\\n            / PRECISION_FACTOR_E18\\n            + lendingRate;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/TransferHub/ApprovalHelper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: -- WISE --\\n\\npragma solidity =0.8.21;\\n\\nimport \\\"./CallOptionalReturn.sol\\\";\\n\\ncontract ApprovalHelper is CallOptionalReturn {\\n\\n    bytes4 constant approve = IERC20\\n        .approve\\n        .selector;\\n\\n    /**\\n     * @dev\\n     * Allows to execute safe approve for a token\\n     */\\n    function _safeApprove(\\n        address _token,\\n        address _spender,\\n        uint256 _value\\n    )\\n        internal\\n    {\\n        _callOptionalReturn(\\n            _token,\\n            abi.encodeWithSelector(\\n                approve,\\n                _spender,\\n                _value\\n            )\\n        );\\n    }\\n}\"\r\n    },\r\n    \"contracts/TransferHub/TransferHelper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: -- WISE --\\n\\npragma solidity =0.8.21;\\n\\nimport \\\"./CallOptionalReturn.sol\\\";\\n\\ncontract TransferHelper is CallOptionalReturn {\\n\\n    bytes4 constant transfer = IERC20\\n        .transfer\\n        .selector;\\n\\n    bytes4 constant transferFrom = IERC20\\n        .transferFrom\\n        .selector;\\n\\n    /**\\n     * @dev\\n     * Allows to execute safe transfer for a token\\n     */\\n    function _safeTransfer(\\n        address _token,\\n        address _to,\\n        uint256 _value\\n    )\\n        internal\\n    {\\n        _callOptionalReturn(\\n            _token,\\n            abi.encodeWithSelector(\\n                transfer,\\n                _to,\\n                _value\\n            )\\n        );\\n    }\\n\\n    /**\\n     * @dev\\n     * Allows to execute safe transferFrom for a token\\n     */\\n    function _safeTransferFrom(\\n        address _token,\\n        address _from,\\n        address _to,\\n        uint256 _value\\n    )\\n        internal\\n    {\\n        _callOptionalReturn(\\n            _token,\\n            abi.encodeWithSelector(\\n                transferFrom,\\n                _from,\\n                _to,\\n                _value\\n            )\\n        );\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/WrapperHub/AaveHelper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: -- WISE --\\n\\npragma solidity =0.8.21;\\n\\nimport \\\"./Declarations.sol\\\";\\n\\nabstract contract AaveHelper is Declarations {\\n\\n    modifier syncPool(\\n        address _underlyingToken\\n    ) {\\n        if (WISE_LENDING.veryfiedIsolationPool(msg.sender) == false) {\\n            WISE_LENDING.preparePool(\\n                aaveTokenAddress[\\n                    _underlyingToken\\n                ]\\n            );\\n        }\\n        _;\\n    }\\n\\n    function _prepareAssetsPosition(\\n        uint256 _nftId,\\n        address _underlyingToken\\n    )\\n        private\\n    {\\n        if (WISE_LENDING.veryfiedIsolationPool(msg.sender) == true) {\\n            return;\\n        }\\n\\n        _prepareCollaterals(\\n            _nftId,\\n            aaveTokenAddress[_underlyingToken]\\n        );\\n\\n        _prepareBorrows(\\n            _nftId,\\n            aaveTokenAddress[_underlyingToken]\\n        );\\n    }\\n\\n    function _reservePosition()\\n        internal\\n        returns (uint256)\\n    {\\n        return POSITION_NFT.reservePositionForUser(\\n            msg.sender\\n        );\\n    }\\n\\n    function _wrapDepositExactAmount(\\n        uint256 _nftId,\\n        address _underlyingAsset,\\n        uint256 _depositAmount\\n    )\\n        internal\\n        returns (uint256)\\n    {\\n        _prepareAssetsPosition(\\n            _nftId,\\n            _underlyingAsset\\n        );\\n\\n        AAVE.deposit(\\n            _underlyingAsset,\\n            _depositAmount,\\n            address(this),\\n            REF_CODE\\n        );\\n\\n        uint256 lendingShares = WISE_LENDING.depositExactAmount(\\n            _nftId,\\n            aaveTokenAddress[_underlyingAsset],\\n            _depositAmount\\n        );\\n\\n        return lendingShares;\\n    }\\n\\n    function _wrapWithdrawExactAmount(\\n        uint256 _nftId,\\n        address _underlyingAsset,\\n        address _underlyingAssetRecipient,\\n        uint256 _withdrawAmount\\n    )\\n        internal\\n        returns (uint256)\\n    {\\n        _prepareAssetsPosition(\\n            _nftId,\\n            _underlyingAsset\\n        );\\n\\n        uint256 withdrawnShares = WISE_LENDING.withdrawOnBehalfExactAmount(\\n            _nftId,\\n            aaveTokenAddress[_underlyingAsset],\\n            _withdrawAmount\\n        );\\n\\n        AAVE.withdraw(\\n            _underlyingAsset,\\n            _withdrawAmount,\\n            _underlyingAssetRecipient\\n        );\\n\\n        return withdrawnShares;\\n    }\\n\\n    function _wrapWithdrawExactShares(\\n        uint256 _nftId,\\n        address _underlyingAsset,\\n        address _underlyingAssetRecipient,\\n        uint256 _shareAmount\\n    )\\n        internal\\n        returns (uint256)\\n    {\\n        _prepareAssetsPosition(\\n            _nftId,\\n            _underlyingAsset\\n        );\\n\\n        address aaveToken = aaveTokenAddress[\\n            _underlyingAsset\\n        ];\\n\\n        uint256 withdrawAmount = WISE_LENDING.cashoutAmount(\\n            aaveToken,\\n            _shareAmount\\n        );\\n\\n        WISE_SECURITY.checksWithdraw(\\n            _nftId,\\n            msg.sender,\\n            aaveToken,\\n            withdrawAmount\\n        );\\n\\n        WISE_LENDING.withdrawOnBehalfExactShares(\\n            _nftId,\\n            aaveToken,\\n            _shareAmount\\n        );\\n\\n        AAVE.withdraw(\\n            _underlyingAsset,\\n            withdrawAmount,\\n            _underlyingAssetRecipient\\n        );\\n\\n        return withdrawAmount;\\n    }\\n\\n    function _wrapBorrowExactAmount(\\n        uint256 _nftId,\\n        address _underlyingAsset,\\n        address _underlyingAssetRecipient,\\n        uint256 _borrowAmount\\n    )\\n        internal\\n        returns (uint256)\\n    {\\n        _prepareAssetsPosition(\\n            _nftId,\\n            _underlyingAsset\\n        );\\n\\n        uint256 borrowShares = WISE_LENDING.borrowOnBehalfExactAmount(\\n            _nftId,\\n            aaveTokenAddress[_underlyingAsset],\\n            _borrowAmount\\n        );\\n\\n        AAVE.withdraw(\\n            _underlyingAsset,\\n            _borrowAmount,\\n            _underlyingAssetRecipient\\n        );\\n\\n        return borrowShares;\\n    }\\n\\n    function _wrapAaveReturnValueDeposit(\\n        address _underlyingAsset,\\n        uint256 _depositAmount,\\n        address _targetAddress\\n    )\\n        internal\\n        returns (uint256 res)\\n    {\\n        IERC20 token = IERC20(\\n            aaveTokenAddress[_underlyingAsset]\\n        );\\n\\n        uint256 balanceBefore = token.balanceOf(\\n            address(this)\\n        );\\n\\n        AAVE.deposit(\\n            _underlyingAsset,\\n            _depositAmount,\\n            _targetAddress,\\n            REF_CODE\\n        );\\n\\n        uint256 balanceAfter = token.balanceOf(\\n            address(this)\\n        );\\n\\n        res = balanceAfter\\n            - balanceBefore;\\n    }\\n\\n    function _wrapSolelyDeposit(\\n        uint256 _nftId,\\n        address _underlyingAsset,\\n        uint256 _depositAmount\\n    )\\n        internal\\n    {\\n        AAVE.deposit(\\n            _underlyingAsset,\\n            _depositAmount,\\n            address(this),\\n            REF_CODE\\n        );\\n\\n        WISE_LENDING.solelyDeposit(\\n            _nftId,\\n            aaveTokenAddress[_underlyingAsset],\\n            _depositAmount\\n        );\\n    }\\n\\n    function _wrapSolelyWithdraw(\\n        uint256 _nftId,\\n        address _underlyingAsset,\\n        address _underlyingAssetRecipient,\\n        uint256 _withdrawAmount\\n    )\\n        internal\\n    {\\n        _prepareAssetsPosition(\\n            _nftId,\\n            _underlyingAsset\\n        );\\n\\n        WISE_LENDING.solelyWithdrawOnBehalf(\\n            _nftId,\\n            aaveTokenAddress[_underlyingAsset],\\n            _withdrawAmount\\n        );\\n\\n        AAVE.withdraw(\\n            _underlyingAsset,\\n            _withdrawAmount,\\n            _underlyingAssetRecipient\\n        );\\n    }\\n\\n    function _wrapETH(\\n        uint256 _value\\n    )\\n        internal\\n    {\\n        WETH.deposit{\\n            value: _value\\n        }();\\n    }\\n\\n    function _unwrapETH(\\n        uint256 _value\\n    )\\n        internal\\n    {\\n        WETH.withdraw(\\n            _value\\n        );\\n    }\\n\\n    function _getInfoPayback(\\n        uint256 _ethSent,\\n        uint256 _maxPaybackAmount\\n    )\\n        internal\\n        pure\\n        returns (\\n            uint256,\\n            uint256\\n        )\\n    {\\n        if (_ethSent > _maxPaybackAmount) {\\n            return (\\n                _maxPaybackAmount,\\n                _ethSent - _maxPaybackAmount\\n            );\\n        }\\n\\n        return (\\n            _ethSent,\\n            0\\n        );\\n    }\\n\\n    function _prepareCollaterals(\\n        uint256 _nftId,\\n        address _poolToken\\n    )\\n        private\\n    {\\n        uint256 i;\\n        uint256 l = WISE_LENDING.getPositionLendingTokenLength(\\n            _nftId\\n        );\\n\\n        for (i = 0; i < l; ++i) {\\n\\n            address currentAddress = WISE_LENDING.getPositionLendingTokenByIndex(\\n                _nftId,\\n                i\\n            );\\n\\n            if (currentAddress == _poolToken) {\\n                continue;\\n            }\\n\\n            WISE_LENDING.preparePool(\\n                currentAddress\\n            );\\n\\n            WISE_LENDING.newBorrowRate(\\n                _poolToken\\n            );\\n        }\\n    }\\n\\n    function _prepareBorrows(\\n        uint256 _nftId,\\n        address _poolToken\\n    )\\n        private\\n    {\\n        uint256 i;\\n        uint256 l = WISE_LENDING.getPositionBorrowTokenLength(\\n            _nftId\\n        );\\n\\n        for (i = 0; i < l; ++i) {\\n\\n            address currentAddress = WISE_LENDING.getPositionBorrowTokenByIndex(\\n                _nftId,\\n                i\\n            );\\n\\n            if (currentAddress == _poolToken) {\\n                continue;\\n            }\\n\\n            WISE_LENDING.preparePool(\\n                currentAddress\\n            );\\n\\n            WISE_LENDING.newBorrowRate(\\n                _poolToken\\n            );\\n        }\\n    }\\n\\n    function getAavePoolAPY(\\n        address _underlyingAsset\\n    )\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        return AAVE.getReserveData(_underlyingAsset).currentLiquidityRate\\n            / PRECISION_FACTOR_E9;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/WrapperHub/Declarations.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: -- WISE --\\n\\npragma solidity = 0.8.21;\\n\\nimport \\\"./AaveEvents.sol\\\";\\nimport \\\"./InterfacesWrapperHub.sol\\\";\\n\\nimport \\\"../InterfaceHub/IWETH.sol\\\";\\nimport \\\"../InterfaceHub/IWiseLending.sol\\\";\\nimport \\\"../InterfaceHub/IWiseSecurity.sol\\\";\\nimport \\\"../InterfaceHub/IPositionNFTs.sol\\\";\\n\\nimport \\\"../OwnableMaster.sol\\\";\\n\\nerror AlreadySet();\\n\\ncontract Declarations is OwnableMaster, AaveEvents {\\n\\n    IAave immutable AAVE;\\n    IWETH immutable WETH;\\n\\n    IWiseLending immutable public WISE_LENDING;\\n    IPositionNFTs immutable public POSITION_NFT;\\n\\n    uint16 constant REF_CODE = 0;\\n    IWiseSecurity public WISE_SECURITY;\\n\\n    address immutable public WETH_ADDRESS;\\n    address immutable public AAVE_ADDRESS;\\n\\n    uint256 constant PRECISION_FACTOR_E9 = 1E9;\\n    uint256 constant PRECISION_FACTOR_E18 = 1E18;\\n    uint256 constant MAX_AMOUNT = type(uint256).max;\\n\\n    mapping (address => address) public aaveTokenAddress;\\n\\n    constructor(\\n        address _master,\\n        address _aaveAddress,\\n        address _lendingAddress\\n    )\\n        OwnableMaster(\\n            _master\\n        )\\n    {\\n        AAVE_ADDRESS = _aaveAddress;\\n\\n        WISE_LENDING = IWiseLending(\\n            _lendingAddress\\n        );\\n\\n        WETH_ADDRESS = WISE_LENDING.WETH_ADDRESS();\\n\\n        AAVE = IAave(\\n            AAVE_ADDRESS\\n        );\\n\\n        WETH = IWETH(\\n            WETH_ADDRESS\\n        );\\n\\n        POSITION_NFT = IPositionNFTs(\\n            WISE_LENDING.POSITION_NFT()\\n        );\\n    }\\n\\n    function _checkOwner(\\n        uint256 _nftId\\n    )\\n        internal\\n        view\\n    {\\n        WISE_SECURITY.checkOwnerPosition(\\n            _nftId,\\n            msg.sender\\n        );\\n    }\\n\\n    function _checkPositionLocked(\\n        uint256 _nftId\\n    )\\n        internal\\n        view\\n    {\\n        WISE_LENDING.checkPositionLocked(\\n            _nftId,\\n            msg.sender\\n        );\\n    }\\n\\n    function _checkDeposit(\\n        uint256 _nftId,\\n        address _underlyingToken,\\n        uint256 _depositAmount\\n    )\\n        internal\\n        view\\n    {\\n        WISE_LENDING.checkDeposit(\\n            _nftId,\\n            msg.sender,\\n            aaveTokenAddress[_underlyingToken],\\n            _depositAmount\\n        );\\n    }\\n\\n    function _checksWithdraw(\\n        uint256 _nftId,\\n        address _underlyingToken,\\n        uint256 _withdrawAmount\\n    )\\n        internal\\n        view\\n    {\\n        WISE_SECURITY.checksWithdraw(\\n            _nftId,\\n            msg.sender,\\n            aaveTokenAddress[_underlyingToken],\\n            _withdrawAmount\\n        );\\n    }\\n\\n    function _checksBorrow(\\n        uint256 _nftId,\\n        address _underlyingToken,\\n        uint256 _borrowAmount\\n    )\\n        internal\\n        view\\n    {\\n        WISE_SECURITY.checksBorrow(\\n            _nftId,\\n            msg.sender,\\n            aaveTokenAddress[_underlyingToken],\\n            _borrowAmount\\n        );\\n    }\\n\\n    function _checksSolelyWithdraw(\\n        uint256 _nftId,\\n        address _underlyingToken,\\n        uint256 _withdrawAmount\\n    )\\n        internal\\n        view\\n    {\\n        WISE_SECURITY.checksSolelyWithdraw(\\n            _nftId,\\n            msg.sender,\\n            aaveTokenAddress[_underlyingToken],\\n            _withdrawAmount\\n        );\\n    }\\n\\n    function _syncPool(\\n        address _underlyingToken\\n    )\\n        private\\n    {\\n        WISE_LENDING.preparePool(\\n            aaveTokenAddress[_underlyingToken]\\n        );\\n    }\\n\\n    function setWiseSecurity(\\n        address _securityAddress\\n    )\\n        external\\n        onlyMaster\\n    {\\n        WISE_SECURITY = IWiseSecurity(\\n            _securityAddress\\n        );\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/TransferHub/CallOptionalReturn.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: -- WISE --\\n\\npragma solidity =0.8.21;\\n\\nimport \\\"../InterfaceHub/IERC20.sol\\\";\\n\\nerror CallFailed();\\n\\ncontract CallOptionalReturn {\\n\\n    /**\\n     * @dev\\n     * Helper function to do low-level call\\n     */\\n    function _callOptionalReturn(\\n        address token,\\n        bytes memory data\\n    )\\n        internal\\n        returns (bool call)\\n    {\\n        (\\n            bool success,\\n            bytes memory returndata\\n        ) = token.call(\\n            data\\n        );\\n\\n        bool results = returndata.length == 0 || abi.decode(\\n            returndata,\\n            (bool)\\n        );\\n\\n        call = success\\n            && results\\n            && token.code.length > 0;\\n\\n        if (call == false) {\\n            revert CallFailed();\\n        }\\n    }\\n}\"\r\n    },\r\n    \"contracts/OwnableMaster.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: -- WISE --\\n\\npragma solidity =0.8.21;\\n\\nerror NotMaster();\\nerror NotProposed();\\n\\ncontract OwnableMaster {\\n\\n    address public master;\\n    address public proposedMaster;\\n\\n    address constant ZERO_ADDRESS = address(0x0);\\n\\n    modifier onlyProposed() {\\n        _onlyProposed();\\n        _;\\n    }\\n\\n    function _onlyMaster()\\n        private\\n        view\\n    {\\n        if (msg.sender == master) {\\n            return;\\n        }\\n\\n        revert NotMaster();\\n    }\\n\\n    modifier onlyMaster() {\\n        _onlyMaster();\\n        _;\\n    }\\n\\n    function _onlyProposed()\\n        private\\n        view\\n    {\\n        if (msg.sender == proposedMaster) {\\n            return;\\n        }\\n\\n        revert NotProposed();\\n    }\\n\\n    constructor(\\n        address _master\\n    ) {\\n        master = _master;\\n    }\\n\\n    /**\\n     * @dev Allows to propose next master.\\n     * Must be claimed by proposer.\\n     */\\n    function proposeOwner(\\n        address _proposedOwner\\n    )\\n        external\\n        onlyMaster\\n    {\\n        proposedMaster = _proposedOwner;\\n    }\\n\\n    /**\\n     * @dev Allows to claim master role.\\n     * Must be called by proposer.\\n     */\\n    function claimOwnership()\\n        external\\n        onlyProposed\\n    {\\n        master = proposedMaster;\\n    }\\n\\n    /**\\n     * @dev Removes master role.\\n     * No ability to be in control.\\n     */\\n    function renounceOwnership()\\n        external\\n        onlyMaster\\n    {\\n        master = ZERO_ADDRESS;\\n        proposedMaster = ZERO_ADDRESS;\\n    }\\n}\"\r\n    },\r\n    \"contracts/InterfaceHub/IPositionNFTs.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: -- WISE --\\n\\npragma solidity =0.8.21;\\n\\ninterface IPositionNFTs {\\n\\n    function ownerOf(\\n        uint256 _nftId\\n    )\\n        external\\n        view\\n        returns (address);\\n\\n    function getOwner(\\n        uint256 _nftId\\n    )\\n        external\\n        view\\n        returns (address);\\n\\n\\n    function totalSupply()\\n        external\\n        view\\n        returns (uint256);\\n\\n    function reserved(\\n        address _owner\\n    )\\n        external\\n        view\\n        returns (uint256);\\n\\n    function reservePosition()\\n        external;\\n\\n    function mintPosition()\\n        external;\\n\\n    function tokenOfOwnerByIndex(\\n        address _owner,\\n        uint256 _index\\n    )\\n        external\\n        view\\n        returns (uint256);\\n\\n    function mintPositionForUser(\\n        address _user\\n    )\\n        external\\n        returns (uint256);\\n\\n    function reservePositionForUser(\\n        address _user\\n    )\\n        external\\n        returns (uint256);\\n\\n    function getApproved(\\n        uint256 _nftId\\n    )\\n        external\\n        returns (address);\\n}\"\r\n    },\r\n    \"contracts/InterfaceHub/IWiseSecurity.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: -- WISE --\\n\\npragma solidity =0.8.21;\\n\\nstruct CurveSwapStructToken {\\n    uint256 curvePoolTokenIndexFrom;\\n    uint256 curvePoolTokenIndexTo;\\n    uint256 curveMetaPoolTokenIndexFrom;\\n    uint256 curveMetaPoolTokenIndexTo;\\n}\\n\\nstruct CurveSwapStructData {\\n    address curvePool;\\n    address curveMetaPool;\\n    bytes swapBytesPool;\\n    bytes swapBytesMeta;\\n}\\n\\ninterface IWiseSecurity {\\n\\n    function overallUSDBorrowHeartbeat(\\n        uint256 _nftId\\n    )\\n        external\\n        view\\n        returns (uint256 buffer);\\n\\n    function checkBadDebt(\\n        uint256 _nftId\\n    )\\n        external;\\n\\n    function getFullCollateralUSD(\\n        uint256 _nftId,\\n        address _poolToken\\n    )\\n        external\\n        view\\n        returns (uint256);\\n\\n    function checksLiquidation(\\n        uint256 _nftIdLiquidate,\\n        address _tokenToPayback,\\n        uint256 _shareAmountToPay\\n    )\\n        external\\n        view;\\n\\n    function getPositionBorrowAmount(\\n        uint256 _nftId,\\n        address _poolToken\\n    )\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getPositionLendingAmount(\\n        uint256 _nftId,\\n        address _poolToken\\n    )\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getLiveDebtratioNormalPool(\\n        uint256 _nftId\\n    )\\n        external\\n        view\\n        returns (uint256);\\n\\n    function overallUSDCollateralsBare(\\n        uint256 _nftId\\n    )\\n        external\\n        view\\n        returns (uint256 amount);\\n\\n    function FEE_MANAGER()\\n        external\\n        returns (address);\\n\\n    function AAVE_HUB()\\n        external\\n        returns (address);\\n\\n    function curveSecurityCheck(\\n        address _poolAddress\\n    )\\n        external;\\n\\n    function prepareCurvePools(\\n        address _poolToken,\\n        CurveSwapStructData memory _curveSwapStructData,\\n        CurveSwapStructToken memory _curveSwapStructToken\\n    )\\n        external;\\n\\n    function checksWithdraw(\\n        uint256 _nftId,\\n        address _caller,\\n        address _poolToken,\\n        uint256 _amount\\n    )\\n        external\\n        view;\\n\\n    function checksBorrow(\\n        uint256 _nftId,\\n        address _caller,\\n        address _poolToken,\\n        uint256 _amount\\n    )\\n        external\\n        view;\\n\\n    function checksSolelyWithdraw(\\n        uint256 _nftId,\\n        address _caller,\\n        address _poolToken,\\n        uint256 _amount\\n    )\\n        external\\n        view;\\n\\n    function checkOwnerPosition(\\n        uint256 _nftId,\\n        address _caller\\n    )\\n        external\\n        view;\\n\\n    function checksCollateralizeDeposit(\\n        uint256 _nftIdCaller,\\n        address _caller,\\n        address _poolAddress\\n    )\\n        external\\n        view;\\n\\n    function calculateWishPercentage(\\n        uint256 _nftId,\\n        address _receiveToken,\\n        uint256 _paybackUSD,\\n        uint256 _maxFeeUSD,\\n        uint256 _baseRewardLiquidation\\n    )\\n        external\\n        view\\n        returns (uint256);\\n\\n    function checksDecollateralizeDeposit(\\n        uint256 _nftIdCaller,\\n        address _poolToken\\n    )\\n        external\\n        view;\\n\\n    function checkBorrowLimit(\\n        uint256 _nftId,\\n        address _poolToken,\\n        uint256 _amount\\n    )\\n        external\\n        view;\\n\\n    function checkPositionLocked(\\n        uint256 _nftId,\\n        address _caller\\n    )\\n        external\\n        view;\\n\\n    function checkPaybackLendingShares(\\n        uint256 _nftIdReceiver,\\n        uint256 _nftIdCaller,\\n        address _caller,\\n        address _poolToken,\\n        uint256 _amount\\n    )\\n        external\\n        view;\\n\\n    function maxFeeUSD()\\n        external\\n        view\\n        returns (uint256);\\n\\n    function maxFeeFarmUSD()\\n        external\\n        view\\n        returns (uint256);\\n\\n    function baseRewardLiquidation()\\n        external\\n        view\\n        returns (uint256);\\n\\n    function baseRewardLiquidationFarm()\\n        external\\n        view\\n        returns (uint256);\\n\\n    function checksRegister(\\n        uint256 _nftId,\\n        address _caller\\n    )\\n        external\\n        view;\\n\\n    function getLendingRate(\\n        address _poolToken\\n    )\\n        external\\n        view\\n        returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/InterfaceHub/IWiseLending.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: -- WISE --\\n\\npragma solidity =0.8.21;\\n\\nstruct GlobalPoolEntry {\\n    uint256 totalPool;\\n    uint256 utilization;\\n    uint256 totalBareToken;\\n    uint256 poolFee;\\n}\\n\\nstruct BorrowPoolEntry {\\n    bool allowBorrow;\\n    uint256 pseudoTotalBorrowAmount;\\n    uint256 totalBorrowShares;\\n    uint256 borrowRate;\\n}\\n\\nstruct LendingPoolEntry {\\n    uint256 pseudoTotalPool;\\n    uint256 totalDepositShares;\\n    uint256 collateralFactor;\\n}\\n\\nstruct PoolEntry {\\n    uint256 totalPool;\\n    uint256 utilization;\\n    uint256 totalBareToken;\\n    uint256 poolFee;\\n}\\n\\ninterface IWiseLending {\\n\\n    function newBorrowRate(\\n        address _poolToken\\n    )\\n        external;\\n\\n    function calculateBorrowShares(\\n        address _poolToken,\\n        uint256 _amount\\n    )\\n        external\\n        view\\n        returns (uint256);\\n\\n    function borrowPoolData(\\n        address _poolToken\\n    )\\n        external\\n        view\\n        returns (BorrowPoolEntry memory);\\n\\n    function lendingPoolData(\\n        address _poolToken\\n    )\\n        external\\n        view\\n        returns (LendingPoolEntry memory);\\n\\n    function getPositionBorrowShares(\\n        uint256 _nftId,\\n        address _poolToken\\n    )\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getTimeStamp(\\n        address _poolToken\\n    )\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getPureCollateralAmount(\\n        uint256 _nftId,\\n        address _poolToken\\n    )\\n        external\\n        view\\n        returns (uint256);\\n\\n    function isDecollteralized(\\n        uint256 _nftId,\\n        address _poolToken\\n    )\\n        external\\n        view\\n        returns (bool);\\n\\n    function veryfiedIsolationPool(\\n        address _poolAddress\\n    )\\n        external\\n        view\\n        returns (bool);\\n\\n    function positionLocked(\\n        uint256 _nftId\\n    )\\n        external\\n        view\\n        returns (bool);\\n\\n    function getTotalBareToken(\\n        address _poolToken\\n    )\\n        external\\n        view\\n        returns (uint256);\\n\\n    function maxDepositValueToken(\\n        address _poolToken\\n    )\\n        external\\n        view\\n        returns (uint256);\\n\\n    function master()\\n        external\\n        view\\n        returns (address);\\n\\n    function WETH_ADDRESS()\\n        external\\n        view\\n        returns (address);\\n\\n    function WISE_ORACLE()\\n        external\\n        view\\n        returns (address);\\n\\n    function POSITION_NFT()\\n        external\\n        view\\n        returns (address);\\n\\n    function FEE_MANAGER()\\n        external\\n        view\\n        returns (address);\\n\\n    function WISE_SECURITY()\\n        external\\n        view\\n        returns (address);\\n\\n    function lastUpdated(\\n        address _poolAddress\\n    )\\n        external\\n        view\\n        returns (uint256);\\n\\n    function isolationPoolRegistered(\\n        uint256 _nftId,\\n        address _isolationPool\\n    )\\n        external\\n        view\\n        returns (bool);\\n\\n    function calculateLendingShares(\\n        address _poolToken,\\n        uint256 _amount\\n    )\\n        external\\n        view\\n        returns (uint256);\\n\\n    function positionPureCollateralAmount(\\n        uint256 _nftId,\\n        address _poolToken\\n    )\\n        external\\n        returns (uint256);\\n\\n    function getTotalPool(\\n        address _poolToken\\n    )\\n        external\\n        view\\n        returns (uint256);\\n\\n    function depositExactAmount(\\n        uint256 _nftId,\\n        address _poolToken,\\n        uint256 _amount\\n    )\\n        external\\n        returns (uint256);\\n\\n    function withdrawOnBehalfExactAmount(\\n        uint256 _nftId,\\n        address _poolToken,\\n        uint256 _amount\\n    )\\n        external\\n        returns (uint256);\\n\\n    function syncManually(\\n        address _poolToken\\n    )\\n        external;\\n\\n    function withdrawOnBehalfExactShares(\\n        uint256 _nftId,\\n        address _poolToken,\\n        uint256 _shares\\n    )\\n        external\\n        returns (uint256);\\n\\n    function borrowOnBehalfExactAmount(\\n        uint256 _nftId,\\n        address _poolToken,\\n        uint256 _amount\\n    )\\n        external\\n        returns (uint256);\\n\\n    function solelyDeposit(\\n        uint256 _nftId,\\n        address _poolToken,\\n        uint256 _amount\\n    )\\n        external;\\n\\n    function solelyWithdrawOnBehalf(\\n        uint256 _nftId,\\n        address _poolToken,\\n        uint256 _amount\\n    )\\n        external;\\n\\n    function paybackExactAmount(\\n        uint256 _nftId,\\n        address _poolToken,\\n        uint256 _amount\\n    )\\n        external\\n        returns (uint256);\\n\\n    function paybackExactShares(\\n        uint256 _nftId,\\n        address _poolToken,\\n        uint256 _shares\\n    )\\n        external\\n        returns (uint256);\\n\\n    function setPoolFee(\\n        address _poolToken,\\n        uint256 _newFee\\n    )\\n        external;\\n\\n    function getPositionLendingShares(\\n        uint256 _nftId,\\n        address _poolToken\\n    )\\n        external\\n        view\\n        returns (uint256);\\n\\n    function withdrawExactShares(\\n        uint256 _nftId,\\n        address _poolToken,\\n        uint256 _shares\\n    )\\n        external\\n        returns (uint256);\\n\\n    function poolTokenAddresses()\\n        external\\n        returns (address[] memory);\\n\\n    function corePaybackFeeManager(\\n        address _poolToken,\\n        uint256 _nftId,\\n        uint256 _amount,\\n        uint256 _shares\\n    )\\n        external;\\n\\n    /*\\n    function curveSecurityCheck(\\n        address _poolToken\\n    )\\n        external;\\n    */\\n\\n    function preparePool(\\n        address _poolToken\\n    )\\n        external;\\n\\n    function getPositionBorrowTokenLength(\\n        uint256 _nftId\\n    )\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getPositionBorrowTokenByIndex(\\n        uint256 _nftId,\\n        uint256 _index\\n    )\\n        external\\n        view\\n        returns (address);\\n\\n    function getPositionLendingTokenByIndex(\\n        uint256 _nftId,\\n        uint256 _index\\n    )\\n        external\\n        view\\n        returns (address);\\n\\n    function getPositionLendingTokenLength(\\n        uint256 _nftId\\n    )\\n        external\\n        view\\n        returns (uint256);\\n\\n    function globalPoolData(\\n        address _poolToken\\n    )\\n        external\\n        view\\n        returns (GlobalPoolEntry memory);\\n\\n\\n    function getGlobalBorrowAmount(\\n        address _token\\n    )\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getPseudoTotalBorrowAmount(\\n        address _token\\n    )\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getInitialBorrowAmountUser(\\n        address _user,\\n        address _token\\n    )\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getPseudoTotalPool(\\n        address _token\\n    )\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getInitialDepositAmountUser(\\n        address _user,\\n        address _token\\n    )\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getGlobalDepositAmount(\\n        address _token\\n    )\\n        external\\n        view\\n        returns (uint256);\\n\\n    function paybackAmount(\\n        address _token,\\n        uint256 _shares\\n    )\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getPositionBorrowShares(\\n        address _user,\\n        address _token\\n    )\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getPositionLendingShares(\\n        address _user,\\n        address _token\\n    )\\n        external\\n        view\\n        returns (uint256);\\n\\n    function cashoutAmount(\\n        address _token,\\n        uint256 _shares\\n    )\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getTotalDepositShares(\\n        address _token\\n    )\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getTotalBorrowShares(\\n        address _token\\n    )\\n        external\\n        view\\n        returns (uint256);\\n\\n    function checkPositionLocked(\\n        uint256 _nftId,\\n        address _caller\\n    )\\n        external\\n        view;\\n\\n    function checkDeposit(\\n        uint256 _nftId,\\n        address _caller,\\n        address _poolToken,\\n        uint256 _amount\\n    )\\n        external\\n        view;\\n\\n    function setRegistrationIsolationPool(\\n        uint256 _nftId,\\n        bool _state\\n    )\\n        external;\\n}\\n\"\r\n    },\r\n    \"contracts/InterfaceHub/IWETH.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: -- WISE --\\n\\npragma solidity =0.8.21;\\n\\nimport \\\"./IERC20.sol\\\";\\n\\ninterface IWETH is IERC20 {\\n\\n    function deposit()\\n        external\\n        payable;\\n\\n    function withdraw(\\n        uint256\\n    )\\n        external;\\n}\\n\"\r\n    },\r\n    \"contracts/WrapperHub/InterfacesWrapperHub.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: -- WISE --\\n\\npragma solidity =0.8.21;\\n\\nimport '../InterfaceHub/IERC20.sol';\\n\\ninterface IAave is IERC20 {\\n\\n    struct ReserveData {\\n\\n        // Stores the reserve configuration\\n        ReserveConfigurationMap configuration;\\n\\n        // Liquidity index. Expressed in ray\\n        uint128 liquidityIndex;\\n\\n        // Current supply rate. Expressed in ray\\n        uint128 currentLiquidityRate;\\n\\n        // Variable borrow index. Expressed in ray\\n        uint128 variableBorrowIndex;\\n\\n        // Current variable borrow rate. Expressed in ray\\n        uint128 currentVariableBorrowRate;\\n\\n        // Current stable borrow rate. Expressed in ray\\n        uint128 currentStableBorrowRate;\\n\\n        // Timestamp of last update\\n        uint40 lastUpdateTimestamp;\\n\\n        // Id of the reserve.\\n        uint16 id;\\n\\n        // aToken address\\n        address aTokenAddress;\\n\\n        // stableDebtToken address\\n        address stableDebtTokenAddress;\\n\\n        // VariableDebtToken address\\n        address variableDebtTokenAddress;\\n\\n        // Address of the interest rate strategy\\n        address interestRateStrategyAddress;\\n\\n        // Current treasury balance, scaled\\n        uint128 accruedToTreasury;\\n\\n        // Outstanding unbacked aTokens minted through the bridging feature\\n        uint128 unbacked;\\n\\n        // Outstanding debt borrowed against this asset in isolation mode\\n        uint128 isolationModeTotalDebt;\\n    }\\n\\n    struct ReserveConfigurationMap {\\n        uint256 data;\\n    }\\n\\n    function deposit(\\n        address _token,\\n        uint256 _amount,\\n        address _owner,\\n        uint16 _referralCode\\n    )\\n        external;\\n\\n    function withdraw(\\n        address _token,\\n        uint256 _amount,\\n        address _recipient\\n    )\\n        external\\n        returns (uint256);\\n\\n    function getReserveData(\\n        address asset\\n    )\\n        external\\n        view\\n        returns (ReserveData memory);\\n}\"\r\n    },\r\n    \"contracts/WrapperHub/AaveEvents.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: WISE\\n\\npragma solidity =0.8.21;\\n\\ncontract AaveEvents {\\n\\n    event SetAaveTokenAddress(\\n        address underlyingAsset,\\n        address aaveToken,\\n        uint256 timestamp\\n    );\\n\\n    event IsDepositAave(\\n        uint256 nftId,\\n        uint256 timestamp\\n    );\\n\\n    event IsWithdrawAave(\\n        uint256 nftId,\\n        uint256 timestamp\\n    );\\n\\n    event IsBorrowAave(\\n        uint256 nftId,\\n        uint256 timestamp\\n    );\\n\\n    event IsPaybackAave(\\n        uint256 nftId,\\n        uint256 timestamp\\n    );\\n\\n    event IsSolelyDepositAave(\\n        uint256 nftId,\\n        uint256 timestamp\\n    );\\n\\n    event IsSolelyWithdrawAave(\\n        uint256 nftId,\\n        uint256 timestamp\\n    );\\n}\"\r\n    },\r\n    \"contracts/InterfaceHub/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: -- WISE --\\n\\npragma solidity =0.8.21;\\n\\ninterface IERC20 {\\n\\n    function totalSupply()\\n        external\\n        view\\n        returns (uint256);\\n\\n    function balanceOf(\\n        address _account\\n    )\\n        external\\n        view\\n        returns (uint256);\\n\\n    function transferFrom(\\n        address _sender,\\n        address _recipient,\\n        uint256 _amount\\n    )\\n        external\\n        returns (bool);\\n\\n    function transfer(\\n        address _recipient,\\n        uint256 _amount\\n    )\\n        external\\n        returns (bool);\\n\\n    function allowance(\\n        address owner,\\n        address spender\\n    )\\n        external\\n        view\\n        returns (uint256);\\n\\n    function approve(\\n        address _spender,\\n        uint256 _amount\\n    )\\n        external\\n        returns (bool);\\n\\n    function decimals()\\n        external\\n        view\\n        returns (uint8);\\n\\n    event Transfer(\\n        address indexed from,\\n        address indexed to,\\n        uint256 value\\n    );\\n\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n\\n    event  Deposit(\\n        address indexed dst,\\n        uint wad\\n    );\\n\\n    event  Withdrawal(\\n        address indexed src,\\n        uint wad\\n    );\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_master\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_aaveAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_lendingAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AlreadySet\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CallFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotMaster\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotProposed\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nftId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"IsBorrowAave\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nftId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"IsDepositAave\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nftId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"IsPaybackAave\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nftId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"IsSolelyDepositAave\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nftId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"IsSolelyWithdrawAave\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nftId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"IsWithdrawAave\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"underlyingAsset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"aaveToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"SetAaveTokenAddress\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"AAVE_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"POSITION_NFT\",\"outputs\":[{\"internalType\":\"contract IPositionNFTs\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WETH_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WISE_LENDING\",\"outputs\":[{\"internalType\":\"contract IWiseLending\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WISE_SECURITY\",\"outputs\":[{\"internalType\":\"contract IWiseSecurity\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"aaveTokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_nftId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_underlyingAsset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_borrowAmount\",\"type\":\"uint256\"}],\"name\":\"borrowExactAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_nftId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_borrowAmount\",\"type\":\"uint256\"}],\"name\":\"borrowExactAmountETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_nftId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_underlyingAsset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"depositExactAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_nftId\",\"type\":\"uint256\"}],\"name\":\"depositExactAmountETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositExactAmountETHMint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_underlyingAsset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"depositExactAmountMint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_underlyingAsset\",\"type\":\"address\"}],\"name\":\"getAavePoolAPY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_underlyingAssert\",\"type\":\"address\"}],\"name\":\"getLendingRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"master\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_nftId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_underlyingAsset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_paybackAmount\",\"type\":\"uint256\"}],\"name\":\"paybackExactAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_nftId\",\"type\":\"uint256\"}],\"name\":\"paybackExactAmountETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_nftId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_underlyingAsset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_shares\",\"type\":\"uint256\"}],\"name\":\"paybackExactShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_proposedOwner\",\"type\":\"address\"}],\"name\":\"proposeOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proposedMaster\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_underlyingAsset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_aaveToken\",\"type\":\"address\"}],\"name\":\"setAaveTokenAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_securityAddress\",\"type\":\"address\"}],\"name\":\"setWiseSecurity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_nftId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_underlyingAsset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_depositAmount\",\"type\":\"uint256\"}],\"name\":\"solelyDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_nftId\",\"type\":\"uint256\"}],\"name\":\"solelyDepositETH\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"solelyDepositETHMint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_underlyingAsset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_depositAmount\",\"type\":\"uint256\"}],\"name\":\"solelyDepositMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_nftId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_underlyingAsset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_withdrawAmount\",\"type\":\"uint256\"}],\"name\":\"solelyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_nftId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_withdrawAmount\",\"type\":\"uint256\"}],\"name\":\"solelyWithdrawETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_nftId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_underlyingAsset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_withdrawAmount\",\"type\":\"uint256\"}],\"name\":\"withdrawExactAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_nftId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_withdrawAmount\",\"type\":\"uint256\"}],\"name\":\"withdrawExactAmountETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_nftId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_underlyingAsset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_shareAmount\",\"type\":\"uint256\"}],\"name\":\"withdrawExactShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_nftId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_shareAmount\",\"type\":\"uint256\"}],\"name\":\"withdrawExactSharesETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "AaveHub", "CompilerVersion": "v0.8.21+commit.d9974bed", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000641ad78baca220c5bd28b51ce8e0f495e85fe68900000000000000000000000087870bca3f3fd6335c3f4ce8392d69350b4fa4e200000000000000000000000084524baa1951247b3a2617a843e6ece915bb9674", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}