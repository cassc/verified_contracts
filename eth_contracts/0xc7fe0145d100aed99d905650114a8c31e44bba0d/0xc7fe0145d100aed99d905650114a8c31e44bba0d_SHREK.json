{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/COIN.sol\": {\r\n      \"content\": \"/*\\n\\nTelegram: t.me/shrekistheway\\nTwitter: twitter.com/shrekdotwiki\\nWebsite: shrek.wiki\\n\\n\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2880\u28e0\u28c4\u28c0\u28c0\u2840\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\\n\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28e0\u28fe\u281f\u280b\u2819\u280b\u2809\u2819\u28b7\u28e6\u2840\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\\n\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28e4\u28f6\u28f6\u28c4\u2800\u2800\u2800\u28a0\u28fe\u28ff\u28c1\u2840\u2800\u2800\u2800\u2800\u2800\u2800\u2891\u28ff\u2846\u2800\u2800\u2800\u28a0\u28fe\u28ff\u2844\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\\n\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28bf\u28ff\u28ff\u28fe\u28e6\u2840\u28a0\u28fe\u287f\u28db\u28db\u287b\u28b7\u28c4\u2800\u2800\u28f4\u28fe\u28ff\u281b\u283b\u2826\u28c4\u28f4\u28ff\u28ff\u287f\u2803\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\\n\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2808\u2809\u2809\u283b\u28bf\u28ff\u28ff\u28ff\u28ff\u28ff\u28bf\u28ff\u28ff\u28e7\u28bc\u28ff\u28ff\u28ff\u283f\u28ff\u28c7\u28b8\u285f\u2809\u2801\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\\n\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28ff\u28ff\u283f\u28bf\u28fe\u28ff\u28e4\u283f\u280b\u2800\u2808\u283b\u28bf\u28ff\u28e7\u28ff\u281f\u28ec\u2847\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\\n\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28fc\u28ff\u2803\u2800\u2800\u2880\u28f4\u28d6\u28f6\u2800\u2800\u2800\u2800\u2800\u2880\u2848\u2800\u2800\u2898\u28fe\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\\n\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28ff\u28ff\u28f6\u28f6\u28f6\u283f\u283f\u283f\u283f\u2837\u2836\u2836\u2836\u281b\u280b\u283b\u28e6\u28e4\u28c0\u287c\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\\n\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28bf\u2847\u2800\u28ff\u283b\u28b7\u28e4\u28c0\u2800\u2800\u2800\u2808\u2800\u2800\u2800\u28c0\u28c8\u287b\u28bf\u28c7\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\\n\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28e0\u28ff\u287f\u281b\u284f\u2801\u2802\u2818\u282d\u28bf\u28d2\u28d2\u2852\u2812\u2812\u280a\u2809\u2801\u2800\u2800\u28ff\u2824\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\\n\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28f0\u28ff\u281f\u2801\u2844\u2823\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2880\u284c\u2819\u2832\u28e4\u28c0\u2820\u28c0\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\\n\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2880\u28f4\u28ff\u28cf\u2800\u2800\u28bf\u2844\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2840\u280b\u2800\u2800\u2800\u2800\u2808\u2819\u281a\u2813\u2836\u28a4\u28c0\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\\n\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28e0\u28f4\u28ff\u28ff\u28ff\u28ff\u28f6\u28c0\u2874\u281b\u28b7\u28c4\u28e0\u28c4\u2840\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2810\u2801\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2808\u2809\u2833\u28a6\u2840\u2800\u2800\u2800\u2800\u2800\u2800\u2800\\n\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2880\u28c0\u28e4\u28e4\u2834\u283e\u28ff\u28ff\u28ff\u28ff\u28ff\u281f\u281b\u283f\u28ff\u28e6\u28c4\u2819\u28bb\u28ff\u28f7\u28e6\u2864\u2824\u2836\u2812\u281b\u2801\u28e0\u280f\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2839\u28c6\u2800\u2800\u2800\u2800\u2800\u2800\\n\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28a0\u28f4\u287e\u280f\u2801\u2800\u2800\u2800\u2800\u2830\u283f\u281f\u280b\u2800\u2800\u2800\u2800\u2808\u2809\u281b\u2819\u280b\u2809\u2809\u2800\u2800\u2800\u2800\u2800\u28c0\u2874\u2803\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2808\u28a7\u2840\u2800\u2800\u2800\u2800\\n\u2800\u2800\u2800\u2800\u2800\u2800\u2880\u28f4\u287f\u280b\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2810\u2812\u280b\u2801\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2808\u28b7\u2800\u2800\u2800\u2800\\n\u2800\u2800\u2800\u2800\u2800\u2880\u28fe\u287f\u2801\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2889\u2841\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2808\u2847\u2800\u2800\u2800\\n\u2800\u2800\u2800\u2800\u2884\u28fe\u285f\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2840\u28b8\u2841\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28f4\u28e7\u2880\u2840\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28e7\u2800\u2800\u2800\\n\u2800\u2800\u2800\u2800\u28fc\u28cb\u28e7\u28f6\u2800\u2800\u2800\u2880\u2840\u28c0\u28e6\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28b8\u2803\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2880\u2864\u28fc\u28ff\u28ff\u28df\u28e4\u2840\u2800\u2800\u2800\u2800\u2800\u2800\u2818\u28e6\u2800\u2800\\n\u2800\u2800\u2800\u2800\u28ff\u285f\u2847\u28ff\u28e4\u28e4\u28f4\u28fc\u28ff\u28ff\u2847\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28bc\u28f7\u28e6\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2820\u280f\u28f4\u28ff\u28ff\u280b\u2809\u2809\u281b\u280b\u2844\u2802\u2800\u2800\u2800\u2800\u2808\u28c7\u2800\\n\u2800\u2800\u2800\u2880\u28ff\u28f7\u28dc\u28bf\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28df\u28bf\u28f7\u28e6\u2840\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28f6\u283e\u28ff\u28ff\u28f7\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2810\u2816\u28e0\u28f6\u28ff\u28df\u28ff\u2847\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28b8\u2840\\n\u2800\u2800\u2880\u28fe\u280b\u283b\u28ff\u2876\u280d\u2819\u281b\u28bf\u28ff\u28ff\u28ff\u28ee\u2859\u283f\u28ff\u28f6\u28e4\u28c4\u28c0\u28e4\u28e4\u28e4\u28e4\u2840\u2880\u28c8\u28c1\u28f0\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28b8\u2847\\n\u2800\u2800\u28fe\u2807\u2800\u2800\u2818\u28b7\u2847\u2800\u2800\u2800\u28bf\u28ff\u28ff\u28ff\u28ff\u28f6\u28fc\u28ff\u28ff\u28df\u28fb\u28ff\u28ff\u28ff\u28ff\u287f\u281f\u281b\u2801\u2800\u2809\u283b\u28bf\u28ff\u28f6\u28e4\u28f4\u28f6\u28f6\u28e4\u28f6\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u2846\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28b8\u2807\\n\u2800\u28b8\u28ff\u2800\u2800\u2800\u28a0\u285e\u2800\u2800\u2800\u2800\u28be\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28df\u28cb\u28e0\u28c0\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2889\u28db\u28bb\u28bf\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u2847\u2800\u2800\u2880\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28f8\u2800\\n\u2800\u28b8\u284f\u2800\u2800\u2800\u28fc\u2801\u2800\u2800\u2800\u2800\u28fc\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u281b\u283f\u287f\u281b\u2809\u2809\u2809\u2801\u2800\u2880\u2800\u2800\u2800\u2800\u2800\u2809\u2830\u283f\u283f\u281b\u283b\u281f\u2809\u2801\u28a9\u28b9\u28ff\u28ff\u28c4\u2800\u2838\u28c6\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2847\u2800\\n\u2800\u28ff\u28bf\u2800\u2800\u28f0\u2807\u2800\u2800\u2800\u2800\u2800\u28ff\u285f\u28bb\u28ff\u28ff\u28ff\u28ff\u28ff\u285f\u283b\u28b6\u28e4\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28b8\u28c4\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28f8\u28ff\u28bf\u28ff\u28ff\u28e6\u2800\u28b9\u28c6\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2847\u2800\\n\u2880\u285f\u283a\u2800\u2890\u287f\u2800\u2800\u2800\u2800\u2880\u28fc\u28ff\u2801\u2800\u28bb\u28ff\u28ff\u28ff\u28ff\u28ff\u28f7\u28e4\u28ff\u28e4\u28e4\u28e4\u28e4\u28f6\u2844\u2800\u2800\u28ff\u28c7\u28e4\u28e4\u28c0\u28c0\u2840\u2800\u2800\u2800\u2800\u2800\u2808\u28bf\u28f7\u28ff\u287e\u2801\u28bf\u28ff\u28f7\u28ff\u28ff\u2877\u2800\u2800\u2800\u2800\u2800\u2800\u2847\u2800\\n\u28b8\u2847\u2800\u2818\u28ff\u2841\u2800\u2800\u2880\u28f0\u28ff\u28ff\u2803\u2800\u2800\u2800\u28bb\u28ff\u28fd\u280b\u281b\u28af\u28bf\u28ff\u281b\u281b\u280b\u2809\u2819\u281b\u2832\u28c4\u2809\u2809\u2801\u2808\u2809\u2819\u281b\u2837\u28e6\u28e4\u28e4\u28cc\u2800\u2800\u28b8\u285f\u2801\u2800\u2800\u283b\u28ff\u28ff\u28ff\u28cd\u2800\u2800\u2800\u2800\u2800\u2800\u28a7\u2800\\n\u28b8\u2801\u2800\u2800\u28b9\u28f7\u28ff\u28ff\u28ff\u28ff\u28ff\u280b\u2800\u2800\u2800\u2800\u28b8\u28ff\u28a2\u2800\u2802\u2800\u28ed\u28ff\u2840\u2800\u2800\u2800\u2800\u2800\u2800\u28b8\u2849\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2809\u2800\u2800\u2800\u2800\u2800\u287f\u2800\u2800\u2800\u2800\u2800\u28b9\u28ff\u287f\u2809\u2800\u2800\u2800\u2800\u2800\u2800\u287e\u2800\\n\u2800\u2800\u2800\u2800\u2800\u280b\u28ff\u28ff\u28ff\u285f\u2801\u2800\u2800\u2800\u2800\u2800\u28fc\u28cf\u2808\u2801\u28b0\u2800\u28a8\u28ff\u28e7\u28c0\u2840\u28e0\u2800\u2800\u2800\u28f8\u2841\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28a0\u2847\u2800\u2800\u2800\u2800\u2800\u28f8\u284d\u2801\u2800\u2800\u2800\u2800\u2800\u2800\u28e0\u28f7\u2800\\n\u2800\u2800\u2800\u2800\u2800\u2800\u2819\u28bf\u28ff\u2847\u2800\u2800\u2800\u2800\u2800\u28a0\u28ff\u281f\u2807\u2800\u2808\u2811\u28a6\u28ff\u283f\u283f\u283f\u283f\u2836\u2880\u2880\u28f8\u283f\u28f6\u28e6\u28e0\u2856\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2880\u28ff\u2800\u2800\u2800\u2800\u2800\u2800\u287f\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2818\u28bb\u2846\\n\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28fc\u2847\u2800\u2800\u2800\u2800\u2800\u28f8\u2857\u2800\u2800\u2800\u2800\u2800\u2800\u2819\u2837\u2844\u28c0\u2800\u2800\u283b\u281f\u2803\u2800\u2800\u2800\u2800\u2824\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28fe\u285f\u2800\u2800\u2800\u2800\u2800\u28b0\u2847\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28b8\u2847\\n\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2839\u2807\u2800\u2800\u2800\u2800\u2800\u28f8\u28ff\u2820\u28b0\u28f6\u2804\u2800\u2800\u2800\u2880\u28c0\u2800\u28a0\u2800\u2800\u28a0\u2846\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2880\u28c0\u28d9\u28ff\u2801\u2800\u2800\u2800\u2800\u2800\u28f8\u28f7\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28fe\u2807\\n\\n*/\\n\\n// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(\\n        uint256 a,\\n        uint256 b\\n    ) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(\\n        uint256 a,\\n        uint256 b\\n    ) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(\\n        uint256 a,\\n        uint256 b\\n    ) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(\\n        uint256 a,\\n        uint256 b\\n    ) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(\\n        uint256 a,\\n        uint256 b\\n    ) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\\n// File: @openzeppelin/contracts/utils/Context.sol\\n\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\\n// File: @openzeppelin/contracts/access/Ownable.sol\\n\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(\\n        address indexed previousOwner,\\n        address indexed newOwner\\n    );\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(\\n            newOwner != address(0),\\n            \\\"Ownable: new owner is the zero address\\\"\\n        );\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\\n\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(\\n        address owner,\\n        address spender\\n    ) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\\n// File: @openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\n\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\\n// File: @openzeppelin/contracts/token/ERC20/ERC20.sol\\n\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string _name;\\n    string _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(\\n        address account\\n    ) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(\\n        address owner,\\n        address spender\\n    ) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(\\n        address spender,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(\\n        address spender,\\n        uint256 addedValue\\n    ) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(\\n        address spender,\\n        uint256 subtractedValue\\n    ) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(\\n            currentAllowance >= subtractedValue,\\n            \\\"ERC20: decreased allowance below zero\\\"\\n        );\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(\\n            fromBalance >= amount,\\n            \\\"ERC20: transfer amount exceeds balance\\\"\\n        );\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(\\n                currentAllowance >= amount,\\n                \\\"ERC20: insufficient allowance\\\"\\n            );\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\\npragma solidity ^0.8.19;\\n\\ninterface IUniswapV2Pair {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external pure returns (string memory);\\n\\n    function symbol() external pure returns (string memory);\\n\\n    function decimals() external pure returns (uint8);\\n\\n    function totalSupply() external view returns (uint);\\n\\n    function balanceOf(address owner) external view returns (uint);\\n\\n    function allowance(\\n        address owner,\\n        address spender\\n    ) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n\\n    function transfer(address to, uint value) external returns (bool);\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint value\\n    ) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint value,\\n        uint deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\n    event Burn(\\n        address indexed sender,\\n        uint amount0,\\n        uint amount1,\\n        address indexed to\\n    );\\n    event Swap(\\n        address indexed sender,\\n        uint amount0In,\\n        uint amount1In,\\n        uint amount0Out,\\n        uint amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\n\\n    function factory() external view returns (address);\\n\\n    function token0() external view returns (address);\\n\\n    function token1() external view returns (address);\\n\\n    function getReserves()\\n        external\\n        view\\n        returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n\\n    function price0CumulativeLast() external view returns (uint);\\n\\n    function price1CumulativeLast() external view returns (uint);\\n\\n    function kLast() external view returns (uint);\\n\\n    function mint(address to) external returns (uint liquidity);\\n\\n    function burn(address to) external returns (uint amount0, uint amount1);\\n\\n    function swap(\\n        uint amount0Out,\\n        uint amount1Out,\\n        address to,\\n        bytes calldata data\\n    ) external;\\n\\n    function skim(address to) external;\\n\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\\n\\ninterface IUniswapV2Factory {\\n    event PairCreated(\\n        address indexed token0,\\n        address indexed token1,\\n        address pair,\\n        uint\\n    );\\n\\n    function feeTo() external view returns (address);\\n\\n    function feeToSetter() external view returns (address);\\n\\n    function getPair(\\n        address tokenA,\\n        address tokenB\\n    ) external view returns (address pair);\\n\\n    function allPairs(uint) external view returns (address pair);\\n\\n    function allPairsLength() external view returns (uint);\\n\\n    function createPair(\\n        address tokenA,\\n        address tokenB\\n    ) external returns (address pair);\\n\\n    function setFeeTo(address) external;\\n\\n    function setFeeToSetter(address) external;\\n}\\n\\nlibrary SafeMathInt {\\n    int256 private constant MIN_INT256 = int256(1) << 255;\\n    int256 private constant MAX_INT256 = ~(int256(1) << 255);\\n\\n    /**\\n     * @dev Multiplies two int256 variables and fails on overflow.\\n     */\\n    function mul(int256 a, int256 b) internal pure returns (int256) {\\n        int256 c = a * b;\\n\\n        // Detect overflow when multiplying MIN_INT256 with -1\\n        require(c != MIN_INT256 || (a & MIN_INT256) != (b & MIN_INT256));\\n        require((b == 0) || (c / b == a));\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Division of two int256 variables and fails on overflow.\\n     */\\n    function div(int256 a, int256 b) internal pure returns (int256) {\\n        // Prevent overflow when dividing MIN_INT256 by -1\\n        require(b != -1 || a != MIN_INT256);\\n\\n        // Solidity already throws when dividing by 0.\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Subtracts two int256 variables and fails on overflow.\\n     */\\n    function sub(int256 a, int256 b) internal pure returns (int256) {\\n        int256 c = a - b;\\n        require((b >= 0 && c <= a) || (b < 0 && c > a));\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Adds two int256 variables and fails on overflow.\\n     */\\n    function add(int256 a, int256 b) internal pure returns (int256) {\\n        int256 c = a + b;\\n        require((b >= 0 && c >= a) || (b < 0 && c < a));\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Converts to absolute value, and fails on overflow.\\n     */\\n    function abs(int256 a) internal pure returns (int256) {\\n        require(a != MIN_INT256);\\n        return a < 0 ? -a : a;\\n    }\\n\\n    function toUint256Safe(int256 a) internal pure returns (uint256) {\\n        require(a >= 0);\\n        return uint256(a);\\n    }\\n}\\n\\nlibrary SafeMathUint {\\n    function toInt256Safe(uint256 a) internal pure returns (int256) {\\n        int256 b = int256(a);\\n        require(b >= 0);\\n        return b;\\n    }\\n}\\n\\ninterface IUniswapV2Router01 {\\n    function factory() external pure returns (address);\\n\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    )\\n        external\\n        payable\\n        returns (uint amountToken, uint amountETH, uint liquidity);\\n\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n\\n    function removeLiquidityETH(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountToken, uint amountETH);\\n\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint amountA, uint amountB);\\n\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint amountToken, uint amountETH);\\n\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n\\n    function swapTokensForExactTokens(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n\\n    function swapExactETHForTokens(\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint[] memory amounts);\\n\\n    function swapTokensForExactETH(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n\\n    function swapExactTokensForETH(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n\\n    function swapETHForExactTokens(\\n        uint amountOut,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint[] memory amounts);\\n\\n    function quote(\\n        uint amountA,\\n        uint reserveA,\\n        uint reserveB\\n    ) external pure returns (uint amountB);\\n\\n    function getAmountOut(\\n        uint amountIn,\\n        uint reserveIn,\\n        uint reserveOut\\n    ) external pure returns (uint amountOut);\\n\\n    function getAmountIn(\\n        uint amountOut,\\n        uint reserveIn,\\n        uint reserveOut\\n    ) external pure returns (uint amountIn);\\n\\n    function getAmountsOut(\\n        uint amountIn,\\n        address[] calldata path\\n    ) external view returns (uint[] memory amounts);\\n\\n    function getAmountsIn(\\n        uint amountOut,\\n        address[] calldata path\\n    ) external view returns (uint[] memory amounts);\\n}\\n\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountETH);\\n\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint amountETH);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable;\\n\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n}\\n\\ncontract SHREK is ERC20, Ownable {\\n    using SafeMath for uint256;\\n\\n    IUniswapV2Router02 public immutable uniswapV2Router;\\n    address public immutable uniswapV2Pair;\\n    address public constant deadAddress = address(0xdead);\\n    bool private isSwapping;\\n    address public marketingWallet;\\n    address public devWallet;\\n\\n    uint256 public maxPerTransaction;\\n    uint256 public swapTokensAtAmount;\\n    uint256 public maxAllowedPerWallet;\\n\\n    uint256 public percentForLPBurn = 1;\\n    bool public isLPBurningEnabled = false;\\n    uint256 public lpBurnFrequency = 1360000000000 seconds;\\n    uint256 public lastLpBurnTime;\\n\\n    uint256 public manualBurnFrequency = 43210 minutes;\\n    uint256 public lastManualLpBurnTime;\\n\\n    bool public isLimitEnabled = true;\\n    bool public isTradingActive = true;\\n    bool public isSwapEnabled = true;\\n\\n    mapping(address => uint256) private _holderLastTransferTimestamp;\\n    bool public transferDelayEnabled = true;\\n\\n    uint256 public tokensForMarketing;\\n    uint256 public tokensForLiquidity;\\n    uint256 public tokensForDev;\\n\\n    uint256 public sellTax;\\n    uint256 public sellMarketingFee;\\n    uint256 public sellLiquidityFee;\\n    uint256 public sellDevFee;\\n\\n    uint256 public buyTax;\\n    uint256 public buyMarketingFee;\\n    uint256 public buyLiquidityFee;\\n    uint256 public buyDevFee;\\n\\n    mapping(address => bool) private _isExcludedFromFees;\\n    mapping(address => bool) public _isExcludedMaxTransactionAmount;\\n\\n    // blacklist\\n    mapping(address => bool) public blacklists;\\n\\n    // store addresses that a automatic market maker pairs. Any transfer *to* these addresses\\n    // could be subject to a maximum transfer amount\\n    mapping(address => bool) public automatedMarketMakerPairs;\\n\\n    constructor() ERC20(\\\"Shrek\\\", \\\"SHREK\\\") {\\n        // Uniswap\\n        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(\\n            0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D\\n        );\\n        excludeFromMaxTransaction(address(_uniswapV2Router), true);\\n        uniswapV2Router = _uniswapV2Router;\\n        uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory())\\n            .createPair(address(this), _uniswapV2Router.WETH());\\n        excludeFromMaxTransaction(address(uniswapV2Pair), true);\\n        _setAutomatedMarketMakerPair(address(uniswapV2Pair), true);\\n\\n        // Taxes\\n        uint256 _buyMarketingFee = 0;\\n        uint256 _buyLiquidityFee = 0;\\n        uint256 _buyDevFee = 7;\\n\\n        uint256 _sellMarketingFee = 0;\\n        uint256 _sellLiquidityFee = 0;\\n        uint256 _sellDevFee = 25;\\n\\n        uint256 totalSupply = 1_000_000_000 * 1e18;\\n\\n        // AT LAUNCH - Only allow 0.75% of total supply per transaction\\n        maxPerTransaction = (totalSupply * 69) / 10000;\\n        maxAllowedPerWallet = (totalSupply * 69) / 10000; // 0.75%\\n        swapTokensAtAmount = (totalSupply * 1) / 10000;\\n\\n        buyMarketingFee = _buyMarketingFee;\\n        buyLiquidityFee = _buyLiquidityFee;\\n        buyDevFee = _buyDevFee;\\n        buyTax = buyMarketingFee + buyLiquidityFee + buyDevFee;\\n\\n        sellMarketingFee = _sellMarketingFee;\\n        sellLiquidityFee = _sellLiquidityFee;\\n        sellDevFee = _sellDevFee;\\n        sellTax = sellMarketingFee + sellLiquidityFee + sellDevFee;\\n\\n        marketingWallet = address(owner()); // set as marketing wallet\\n        devWallet = address(owner()); // set as dev wallet\\n\\n        // exclude from paying fees or having max transaction amount\\n        excludeFromFees(owner(), true);\\n        excludeFromFees(address(this), true);\\n        excludeFromFees(address(0xdead), true);\\n        excludeFromMaxTransaction(owner(), true);\\n        excludeFromMaxTransaction(address(this), true);\\n        excludeFromMaxTransaction(address(0xdead), true);\\n        _mint(msg.sender, totalSupply);\\n    }\\n\\n    // once enabled, can never be turned off\\n    function beginTrading() external onlyOwner {\\n        isTradingActive = true;\\n        isSwapEnabled = true;\\n        lastLpBurnTime = block.timestamp;\\n    }\\n\\n    receive() external payable {}\\n\\n    function blacklist(\\n        address[] calldata _addresses,\\n        bool _isBlacklisting\\n    ) external onlyOwner {\\n        for (uint i = 0; i < _addresses.length; i++) {\\n            blacklists[_addresses[i]] = _isBlacklisting;\\n        }\\n    }\\n\\n    // remove limits after token is stable\\n    function removeAllLimits() external onlyOwner returns (bool) {\\n        isLimitEnabled = false;\\n        return true;\\n    }\\n\\n    // disable Transfer delay - cannot be reenabled\\n    function removeTransferDelay() external onlyOwner returns (bool) {\\n        transferDelayEnabled = false;\\n        return true;\\n    }\\n\\n    // change the minimum amount of tokens to sell from fees\\n    function updateSwapTokensAtAmount(\\n        uint256 newAmount\\n    ) external onlyOwner returns (bool) {\\n        require(\\n            newAmount >= (totalSupply() * 1) / 100000,\\n            \\\"Swap amount cannot be lower than 0.001% total supply.\\\"\\n        );\\n        require(\\n            newAmount <= (totalSupply() * 10) / 1000,\\n            \\\"Swap amount cannot be higher than 1% total supply.\\\"\\n        );\\n        swapTokensAtAmount = newAmount;\\n        return true;\\n    }\\n\\n    function updateMaxBuy(\\n        uint256 maxPerTx,\\n        uint256 maxPerWallet\\n    ) external onlyOwner {\\n        require(\\n            maxPerTx >= ((totalSupply() * 1) / 1000) / 1e18,\\n            \\\"Cannot set maxPerTransaction lower than 0.1%\\\"\\n        );\\n        maxPerTransaction = maxPerTx * (10 ** 18);\\n\\n        require(\\n            maxPerWallet >= ((totalSupply() * 5) / 1000) / 1e18,\\n            \\\"Cannot set maxAllowedPerWallet lower than 0.5%\\\"\\n        );\\n        maxAllowedPerWallet = maxPerWallet * (10 ** 18);\\n    }\\n\\n    function updateMaxTxnAmount(uint256 newNum) external onlyOwner {\\n        require(\\n            newNum >= ((totalSupply() * 1) / 1000) / 1e18,\\n            \\\"Cannot set maxPerTransaction lower than 0.1%\\\"\\n        );\\n        maxPerTransaction = newNum * (10 ** 18);\\n    }\\n\\n    function updateMaxAllowedPerWallet(uint256 newNum) external onlyOwner {\\n        require(\\n            newNum >= ((totalSupply() * 5) / 1000) / 1e18,\\n            \\\"Cannot set maxAllowedPerWallet lower than 0.5%\\\"\\n        );\\n        maxAllowedPerWallet = newNum * (10 ** 18);\\n    }\\n\\n    function excludeFromMaxTransaction(\\n        address updAds,\\n        bool isEx\\n    ) public onlyOwner {\\n        _isExcludedMaxTransactionAmount[updAds] = isEx;\\n    }\\n\\n    // only use to disable contract sales if absolutely necessary (emergency use only)\\n    function updateSwapEnabled(bool enabled) external onlyOwner {\\n        isSwapEnabled = enabled;\\n    }\\n\\n    function updateBuyFees(\\n        uint256 _marketingFee,\\n        uint256 _liquidityFee,\\n        uint256 _devFee\\n    ) external onlyOwner {\\n        buyMarketingFee = _marketingFee;\\n        buyLiquidityFee = _liquidityFee;\\n        buyDevFee = _devFee;\\n        buyTax = buyMarketingFee + buyLiquidityFee + buyDevFee;\\n        require(buyTax <= 25, \\\"Must keep fees at 25% or less\\\");\\n    }\\n\\n    function updateSellFees(\\n        uint256 _marketingFee,\\n        uint256 _liquidityFee,\\n        uint256 _devFee\\n    ) external onlyOwner {\\n        sellMarketingFee = _marketingFee;\\n        sellLiquidityFee = _liquidityFee;\\n        sellDevFee = _devFee;\\n        sellTax = sellMarketingFee + sellLiquidityFee + sellDevFee;\\n        require(sellTax <= 99, \\\"Must keep fees at 99% or less\\\");\\n    }\\n\\n    function updateTaxes(uint256 buy, uint256 sell) external onlyOwner {\\n        sellDevFee = sell;\\n        buyDevFee = buy;\\n        sellTax = sellMarketingFee + sellLiquidityFee + sellDevFee;\\n        buyTax = buyMarketingFee + buyLiquidityFee + buyDevFee;\\n        require(buyTax <= 25, \\\"Must keep fees at 25% or less\\\");\\n        require(sellTax <= 99, \\\"Must keep fees at 99% or less\\\");\\n    }\\n\\n    function excludeFromFees(address account, bool excluded) public onlyOwner {\\n        _isExcludedFromFees[account] = excluded;\\n    }\\n\\n    function setAutomatedMarketMakerPair(\\n        address pair,\\n        bool value\\n    ) public onlyOwner {\\n        require(\\n            pair != uniswapV2Pair,\\n            \\\"The pair cannot be removed from automatedMarketMakerPairs\\\"\\n        );\\n\\n        _setAutomatedMarketMakerPair(pair, value);\\n    }\\n\\n    function _setAutomatedMarketMakerPair(address pair, bool value) private {\\n        automatedMarketMakerPairs[pair] = value;\\n    }\\n\\n    function updateMarketingWallet(\\n        address newMarketingWallet\\n    ) external onlyOwner {\\n        marketingWallet = newMarketingWallet;\\n    }\\n\\n    function updateDevWallet(address newWallet) external onlyOwner {\\n        devWallet = newWallet;\\n    }\\n\\n    function isExcludedFromFees(address account) public view returns (bool) {\\n        return _isExcludedFromFees[account];\\n    }\\n\\n    event BoughtEarly(address indexed sniper);\\n\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal override {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n        require(!blacklists[to] && !blacklists[from], \\\"Blacklisted\\\");\\n\\n        if (amount == 0) {\\n            super._transfer(from, to, 0);\\n            return;\\n        }\\n\\n        if (isLimitEnabled) {\\n            if (\\n                from != owner() &&\\n                to != owner() &&\\n                to != address(0) &&\\n                to != address(0xdead) &&\\n                !isSwapping\\n            ) {\\n                if (!isTradingActive) {\\n                    require(\\n                        _isExcludedFromFees[from] || _isExcludedFromFees[to],\\n                        \\\"Trading is not active.\\\"\\n                    );\\n                }\\n\\n                // at launch if the transfer delay is enabled, ensure the block timestamps for purchasers is set -- during launch.\\n                if (transferDelayEnabled) {\\n                    if (\\n                        to != owner() &&\\n                        to != address(uniswapV2Router) &&\\n                        to != address(uniswapV2Pair)\\n                    ) {\\n                        require(\\n                            _holderLastTransferTimestamp[tx.origin] <\\n                                block.number,\\n                            \\\"_transfer:: Transfer Delay enabled.  Only one purchase per block allowed.\\\"\\n                        );\\n                        _holderLastTransferTimestamp[tx.origin] = block.number;\\n                    }\\n                }\\n\\n                //when buy\\n                if (\\n                    automatedMarketMakerPairs[from] &&\\n                    !_isExcludedMaxTransactionAmount[to]\\n                ) {\\n                    require(\\n                        amount <= maxPerTransaction,\\n                        \\\"Buy transfer amount exceeds the maxPerTransaction.\\\"\\n                    );\\n                    require(\\n                        amount + balanceOf(to) <= maxAllowedPerWallet,\\n                        \\\"Max wallet exceeded\\\"\\n                    );\\n                }\\n                //when sell\\n                else if (\\n                    automatedMarketMakerPairs[to] &&\\n                    !_isExcludedMaxTransactionAmount[from]\\n                ) {\\n                    require(\\n                        amount <= maxPerTransaction,\\n                        \\\"Sell transfer amount exceeds the maxPerTransaction.\\\"\\n                    );\\n                } else if (!_isExcludedMaxTransactionAmount[to]) {\\n                    require(\\n                        amount + balanceOf(to) <= maxAllowedPerWallet,\\n                        \\\"Max wallet exceeded\\\"\\n                    );\\n                }\\n            }\\n        }\\n\\n        uint256 contractTokenBalance = balanceOf(address(this));\\n\\n        bool canSwap = contractTokenBalance >= swapTokensAtAmount;\\n\\n        if (\\n            canSwap &&\\n            isSwapEnabled &&\\n            !isSwapping &&\\n            !automatedMarketMakerPairs[from] &&\\n            !_isExcludedFromFees[from] &&\\n            !_isExcludedFromFees[to]\\n        ) {\\n            isSwapping = true;\\n\\n            swapBack();\\n\\n            isSwapping = false;\\n        }\\n\\n        if (\\n            !isSwapping &&\\n            automatedMarketMakerPairs[to] &&\\n            isLPBurningEnabled &&\\n            block.timestamp >= lastLpBurnTime + lpBurnFrequency &&\\n            !_isExcludedFromFees[from]\\n        ) {\\n            autoBurnLiquidityPairTokens();\\n        }\\n\\n        bool takeFee = !isSwapping;\\n\\n        // if any account belongs to _isExcludedFromFee account then remove the fee\\n        if (_isExcludedFromFees[from] || _isExcludedFromFees[to]) {\\n            takeFee = false;\\n        }\\n\\n        uint256 fees = 0;\\n        // only take fees on buys/sells, do not take on wallet transfers\\n        if (takeFee) {\\n            // on sell\\n            if (automatedMarketMakerPairs[to] && sellTax > 0) {\\n                fees = amount.mul(sellTax).div(100);\\n                tokensForLiquidity += (fees * sellLiquidityFee) / sellTax;\\n                tokensForDev += (fees * sellDevFee) / sellTax;\\n                tokensForMarketing += (fees * sellMarketingFee) / sellTax;\\n            }\\n            // on buy\\n            else if (automatedMarketMakerPairs[from] && buyTax > 0) {\\n                fees = amount.mul(buyTax).div(100);\\n                tokensForLiquidity += (fees * buyLiquidityFee) / buyTax;\\n                tokensForDev += (fees * buyDevFee) / buyTax;\\n                tokensForMarketing += (fees * buyMarketingFee) / buyTax;\\n            }\\n\\n            if (fees > 0) {\\n                super._transfer(from, address(this), fees);\\n            }\\n\\n            amount -= fees;\\n        }\\n\\n        super._transfer(from, to, amount);\\n    }\\n\\n    function swapTokensForEth(uint256 tokenAmount) private {\\n        // generate the uniswap pair path of token -> weth\\n        address[] memory path = new address[](2);\\n        path[0] = address(this);\\n        path[1] = uniswapV2Router.WETH();\\n\\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\\n\\n        // make the swap\\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\\n            tokenAmount,\\n            0, // accept any amount of ETH\\n            path,\\n            address(this),\\n            block.timestamp\\n        );\\n    }\\n\\n    function addLiquidity(uint256 tokenAmount, uint256 ethAmount) private {\\n        // approve token transfer to cover all possible scenarios\\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\\n\\n        // add the liquidity\\n        uniswapV2Router.addLiquidityETH{value: ethAmount}(\\n            address(this),\\n            tokenAmount,\\n            0, // slippage is unavoidable\\n            0, // slippage is unavoidable\\n            deadAddress,\\n            block.timestamp\\n        );\\n    }\\n\\n    function setAutoLPBurnSettings(\\n        uint256 _frequencyInSeconds,\\n        uint256 _percent,\\n        bool _Enabled\\n    ) external onlyOwner {\\n        require(\\n            _frequencyInSeconds >= 600,\\n            \\\"cannot set buyback more often than every 10 minutes\\\"\\n        );\\n        require(\\n            _percent <= 1000 && _percent >= 0,\\n            \\\"Must set auto LP burn percent between 0% and 10%\\\"\\n        );\\n        lpBurnFrequency = _frequencyInSeconds;\\n        percentForLPBurn = _percent;\\n        isLPBurningEnabled = _Enabled;\\n    }\\n\\n    function swapBack() private {\\n        uint256 contractBalance = balanceOf(address(this));\\n        uint256 totalTokensToSwap = tokensForLiquidity +\\n            tokensForMarketing +\\n            tokensForDev;\\n        bool success;\\n\\n        if (contractBalance == 0 || totalTokensToSwap == 0) {\\n            return;\\n        }\\n\\n        if (contractBalance > swapTokensAtAmount * 20) {\\n            contractBalance = swapTokensAtAmount * 20;\\n        }\\n\\n        // Halve the amount of liquidity tokens\\n        uint256 liquidityTokens = (contractBalance * tokensForLiquidity) /\\n            totalTokensToSwap /\\n            2;\\n        uint256 amountToSwapForETH = contractBalance.sub(liquidityTokens);\\n\\n        uint256 initialETHBalance = address(this).balance;\\n\\n        swapTokensForEth(amountToSwapForETH);\\n\\n        uint256 ethBalance = address(this).balance.sub(initialETHBalance);\\n\\n        uint256 ethForMarketing = ethBalance.mul(tokensForMarketing).div(\\n            totalTokensToSwap\\n        );\\n        uint256 ethForDev = ethBalance.mul(tokensForDev).div(totalTokensToSwap);\\n\\n        uint256 ethForLiquidity = ethBalance - ethForMarketing - ethForDev;\\n\\n        tokensForLiquidity = 0;\\n        tokensForMarketing = 0;\\n        tokensForDev = 0;\\n\\n        (success, ) = address(devWallet).call{value: ethForDev}(\\\"\\\");\\n\\n        if (liquidityTokens > 0 && ethForLiquidity > 0) {\\n            addLiquidity(liquidityTokens, ethForLiquidity);\\n        }\\n\\n        (success, ) = address(marketingWallet).call{\\n            value: address(this).balance\\n        }(\\\"\\\");\\n    }\\n\\n    function autoBurnLiquidityPairTokens() internal returns (bool) {\\n        lastLpBurnTime = block.timestamp;\\n\\n        // get balance of liquidity pair\\n        uint256 liquidityPairBalance = this.balanceOf(uniswapV2Pair);\\n\\n        // calculate amount to burn\\n        uint256 amountToBurn = liquidityPairBalance.mul(percentForLPBurn).div(\\n            10000\\n        );\\n\\n        // pull tokens from pancakePair liquidity and move to dead address permanently\\n        if (amountToBurn > 0) {\\n            super._transfer(uniswapV2Pair, address(0xdead), amountToBurn);\\n        }\\n\\n        //sync price since this is not in a swap transaction!\\n        IUniswapV2Pair pair = IUniswapV2Pair(uniswapV2Pair);\\n        pair.sync();\\n        return true;\\n    }\\n\\n    function manualBurnLiquidityPairTokens(\\n        uint256 percent\\n    ) external onlyOwner returns (bool) {\\n        require(\\n            block.timestamp > lastManualLpBurnTime + manualBurnFrequency,\\n            \\\"Must wait for cooldown to finish\\\"\\n        );\\n        require(percent <= 1000, \\\"May not nuke more than 10% of tokens in LP\\\");\\n        lastManualLpBurnTime = block.timestamp;\\n\\n        // get balance of liquidity pair\\n        uint256 liquidityPairBalance = this.balanceOf(uniswapV2Pair);\\n\\n        // calculate amount to burn\\n        uint256 amountToBurn = liquidityPairBalance.mul(percent).div(10000);\\n\\n        // pull tokens from pancakePair liquidity and move to dead address permanently\\n        if (amountToBurn > 0) {\\n            super._transfer(uniswapV2Pair, address(0xdead), amountToBurn);\\n        }\\n\\n        //sync price since this is not in a swap transaction!\\n        IUniswapV2Pair pair = IUniswapV2Pair(uniswapV2Pair);\\n        pair.sync();\\n        return true;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sniper\",\"type\":\"address\"}],\"name\":\"BoughtEarly\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_isExcludedMaxTransactionAmount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"automatedMarketMakerPairs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"beginTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_addresses\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"_isBlacklisting\",\"type\":\"bool\"}],\"name\":\"blacklist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"blacklists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyDevFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyLiquidityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyMarketingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyTax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deadAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"excluded\",\"type\":\"bool\"}],\"name\":\"excludeFromFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"updAds\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isEx\",\"type\":\"bool\"}],\"name\":\"excludeFromMaxTransaction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromFees\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isLPBurningEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isLimitEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isSwapEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isTradingActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastLpBurnTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastManualLpBurnTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpBurnFrequency\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manualBurnFrequency\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"percent\",\"type\":\"uint256\"}],\"name\":\"manualBurnLiquidityPairTokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxAllowedPerWallet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxPerTransaction\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"percentForLPBurn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeAllLimits\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeTransferDelay\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellDevFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellLiquidityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellMarketingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellTax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_frequencyInSeconds\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_percent\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_Enabled\",\"type\":\"bool\"}],\"name\":\"setAutoLPBurnSettings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setAutomatedMarketMakerPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapTokensAtAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokensForDev\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokensForLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokensForMarketing\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferDelayEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_marketingFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_liquidityFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_devFee\",\"type\":\"uint256\"}],\"name\":\"updateBuyFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newWallet\",\"type\":\"address\"}],\"name\":\"updateDevWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newMarketingWallet\",\"type\":\"address\"}],\"name\":\"updateMarketingWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newNum\",\"type\":\"uint256\"}],\"name\":\"updateMaxAllowedPerWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxPerTx\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPerWallet\",\"type\":\"uint256\"}],\"name\":\"updateMaxBuy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newNum\",\"type\":\"uint256\"}],\"name\":\"updateMaxTxnAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_marketingFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_liquidityFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_devFee\",\"type\":\"uint256\"}],\"name\":\"updateSellFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"updateSwapEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newAmount\",\"type\":\"uint256\"}],\"name\":\"updateSwapTokensAtAmount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"buy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sell\",\"type\":\"uint256\"}],\"name\":\"updateTaxes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "SHREK", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}