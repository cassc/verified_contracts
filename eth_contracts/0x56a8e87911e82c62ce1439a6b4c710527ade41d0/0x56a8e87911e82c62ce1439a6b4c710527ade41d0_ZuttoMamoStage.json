{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/AccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/IAccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/base/ERC5192PL.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\nimport \\\"./ERC721/extensions/ERC721Enumerable.sol\\\";\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport { IERC5192 } from \\\"../interface/IERC5192.sol\\\";\\nimport { IERC5192PL } from \\\"../interface/IERC5192PL.sol\\\";\\n\\n/**\\n * @title ERC5192PL\\n *\\n * @dev Unlock SBT when called by parent contract based on ERC5192.\\n * Tokens inheriting this are supposed to be linked to the parent and if the parent's token is moved,\\n * the ERC5192PL token is also supposed to be moved.\\n * To achieve the above, _tokenApprovals is always set to true\\n * when called by the parent contract to allow the token to be moved without user approval.\\n */\\ncontract ERC5192PL is ERC721, ERC721Enumerable, Ownable, IERC5192PL {\\n\\t// =============================================================\\n\\t//   STORAGE\\n\\t// =============================================================\\n\\taddress public parentContractAddress;\\n\\n\\tbool private isLocked;\\n\\n\\tmapping(uint256 => bool) public tokenUnLock;\\n\\n\\t// =============================================================\\n\\t//   CONSTRUCTOR\\n\\t// =============================================================\\n\\n\\tconstructor(\\n\\t\\tstring memory _name,\\n\\t\\tstring memory _symbol,\\n\\t\\tbool _isLocked,\\n\\t\\taddress _parentContractAddress\\n\\t) ERC721(_name, _symbol) {\\n\\t\\tisLocked = _isLocked;\\n\\t\\tparentContractAddress = _parentContractAddress;\\n\\t}\\n\\n\\t// =============================================================\\n\\t//   MODIFIER\\n\\t// =============================================================\\n\\n\\tmodifier checkLock() {\\n\\t\\tif (isLocked) revert ErrLocked();\\n\\t\\t_;\\n\\t}\\n\\n\\tmodifier checkTokenUnLock(uint256 _tokenId) {\\n\\t\\tif (isTokenLocked(_tokenId)) revert ErrTokenLocked();\\n\\t\\t_;\\n\\t}\\n\\n\\tmodifier checkParentContractAddress(address from, uint256 tokenId) {\\n\\t\\t_checkParentContractAddress(from, tokenId);\\n\\t\\t_;\\n\\t}\\n\\n\\t// =============================================================\\n\\t//   MODIFIER FUNCTION\\n\\t// =============================================================\\n\\n\\tfunction _checkParentContractAddress(address from, uint256 tokenId) private {\\n\\t\\tif (msg.sender == address(parentContractAddress)) {\\n\\t\\t\\trequire(address(parentContractAddress) != ERC721.ownerOf(tokenId), \\\"ERC721: approval to current owner\\\");\\n\\t\\t\\trequire(from == ERC721.ownerOf(tokenId), \\\"ERC721: approve caller is not token owner\\\");\\n\\t\\t\\t_tokenApprovals[tokenId] = address(parentContractAddress);\\n\\t\\t\\temit Approval(ERC721.ownerOf(tokenId), address(parentContractAddress), tokenId);\\n\\t\\t}\\n\\t}\\n\\n\\tfunction isTokenLocked(uint256 _tokenId) public view virtual returns (bool) {\\n\\t\\tif (!_exists(_tokenId)) revert ErrNotFound();\\n\\n\\t\\tif (tokenUnLock[_tokenId]) {\\n\\t\\t\\treturn false;\\n\\t\\t}\\n\\n\\t\\treturn true;\\n\\t}\\n\\n\\t// =============================================================\\n\\t//   ERC-5192\\n\\t// =============================================================\\n\\n\\tfunction locked(uint256 tokenId) external view returns (bool) {\\n\\t\\tif (!_exists(tokenId)) revert ErrNotFound();\\n\\t\\treturn isLocked;\\n\\t}\\n\\n\\t// =============================================================\\n\\t//   SET FUNCTION\\n\\t// =============================================================\\n\\n\\t/**\\n\\t *  @dev Called only when the parent is transferred and after the parent link sbt is moved.\\n\\t * It is only called from the parent's address.\\n\\t */\\n\\tfunction setParentContractAddress(address _parentContractAddress) external onlyOwner {\\n\\t\\tif (_parentContractAddress == address(0)) revert ErrNullAddress();\\n\\t\\tparentContractAddress = _parentContractAddress;\\n\\t}\\n\\n\\tfunction setIsTokenUnLocked(uint256 _tokenId, bool _value) external {\\n\\t\\tif (msg.sender != address(parentContractAddress)) revert ErrNotAllowtedAddress();\\n\\t\\t_setIsTokenUnLocked(_tokenId, _value);\\n\\t}\\n\\n\\tfunction _setIsTokenUnLocked(uint256 _tokenId, bool _value) private {\\n\\t\\ttokenUnLock[_tokenId] = _value;\\n\\t}\\n\\n\\t// =============================================================\\n\\t//   ERC-721 OVERRIDE\\n\\t// =============================================================\\n\\n\\tfunction supportsInterface(bytes4 interfaceId) public view virtual override(ERC721, ERC721Enumerable) returns (bool) {\\n\\t\\treturn (interfaceId == type(IERC5192).interfaceId ||\\n\\t\\t\\tinterfaceId == type(IERC5192PL).interfaceId ||\\n\\t\\t\\tsuper.supportsInterface(interfaceId));\\n\\t}\\n\\n\\tfunction safeTransferFrom(\\n\\t\\taddress from,\\n\\t\\taddress to,\\n\\t\\tuint256 tokenId,\\n\\t\\tbytes memory data\\n\\t) public override(ERC721, IERC721) checkLock {\\n\\t\\tsuper.safeTransferFrom(from, to, tokenId, data);\\n\\t}\\n\\n\\tfunction safeTransferFrom(address from, address to, uint256 tokenId) public override(ERC721, IERC721) checkLock {\\n\\t\\tsuper.safeTransferFrom(from, to, tokenId);\\n\\t}\\n\\n\\t/**\\n\\t * @dev The default is SBT, so it cannot be forwarded.\\n\\t * If Zuttomamo NFT is moved, isTokenLocked is set to false and it is moved together.\\n\\t * When the transfer is completed, isTokenLocked is set to \\\"true\\\" again and SBT is set.\\n\\t * If the Zuttomamo address is called, permission is given for the transfer without the user's permission.\\n\\t * This is to prevent only the parent link sbt from remaining in the wallet after the Zuttomamo NFT is sold.\\n\\t */\\n\\tfunction transferFrom(\\n\\t\\taddress from,\\n\\t\\taddress to,\\n\\t\\tuint256 tokenId\\n\\t) public override(ERC721, IERC721) checkTokenUnLock(tokenId) checkParentContractAddress(from, tokenId) {\\n\\t\\tsuper.transferFrom(from, to, tokenId);\\n\\t}\\n\\n\\tfunction approve(address approved, uint256 tokenId) public override(ERC721, IERC721) checkLock {\\n\\t\\tsuper.approve(approved, tokenId);\\n\\t}\\n\\n\\tfunction setApprovalForAll(address operator, bool approved) public virtual override(ERC721, IERC721) checkLock {\\n\\t\\tsuper.setApprovalForAll(operator, approved);\\n\\t}\\n\\n\\tfunction _beforeTokenTransfer(\\n\\t\\taddress from,\\n\\t\\taddress to,\\n\\t\\tuint256 firstTokenId,\\n\\t\\tuint256 batchSize\\n\\t) internal virtual override(ERC721, ERC721Enumerable) {\\n\\t\\tsuper._beforeTokenTransfer(from, to, firstTokenId, batchSize);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n\\t * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n\\t * Set token un locked to true when token is moved.\\n\\t */\\n\\tfunction _afterTokenTransfer(\\n\\t\\taddress from,\\n\\t\\taddress to,\\n\\t\\tuint256 firstTokenId,\\n\\t\\tuint256 batchSize\\n\\t) internal virtual override {\\n\\t\\t_setIsTokenUnLocked(firstTokenId, false);\\n\\t\\tsuper._afterTokenTransfer(from, to, firstTokenId, batchSize);\\n\\t}\\n}\\n\"\r\n    },\r\n    \"contracts/base/ERC721/ERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n\\tusing Address for address;\\n\\tusing Strings for uint256;\\n\\n\\t// Token name\\n\\tstring private _name;\\n\\n\\t// Token symbol\\n\\tstring private _symbol;\\n\\n\\t// Mapping from token ID to owner address\\n\\tmapping(uint256 => address) private _owners;\\n\\n\\t// Mapping owner address to token count\\n\\tmapping(address => uint256) private _balances;\\n\\n\\t// Mapping from token ID to approved address\\n\\t// defaukt private\\n\\tmapping(uint256 => address) internal _tokenApprovals;\\n\\n\\t// Mapping from owner to operator approvals\\n\\tmapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n\\t/**\\n\\t * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n\\t */\\n\\tconstructor(string memory name_, string memory symbol_) {\\n\\t\\t_name = name_;\\n\\t\\t_symbol = symbol_;\\n\\t}\\n\\n\\t/**\\n\\t * @dev See {IERC165-supportsInterface}.\\n\\t */\\n\\tfunction supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n\\t\\treturn\\n\\t\\t\\tinterfaceId == type(IERC721).interfaceId ||\\n\\t\\t\\tinterfaceId == type(IERC721Metadata).interfaceId ||\\n\\t\\t\\tsuper.supportsInterface(interfaceId);\\n\\t}\\n\\n\\t/**\\n\\t * @dev See {IERC721-balanceOf}.\\n\\t */\\n\\tfunction balanceOf(address owner) public view virtual override returns (uint256) {\\n\\t\\trequire(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n\\t\\treturn _balances[owner];\\n\\t}\\n\\n\\t/**\\n\\t * @dev See {IERC721-ownerOf}.\\n\\t */\\n\\tfunction ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n\\t\\taddress owner = _ownerOf(tokenId);\\n\\t\\trequire(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n\\t\\treturn owner;\\n\\t}\\n\\n\\t/**\\n\\t * @dev See {IERC721Metadata-name}.\\n\\t */\\n\\tfunction name() public view virtual override returns (string memory) {\\n\\t\\treturn _name;\\n\\t}\\n\\n\\t/**\\n\\t * @dev See {IERC721Metadata-symbol}.\\n\\t */\\n\\tfunction symbol() public view virtual override returns (string memory) {\\n\\t\\treturn _symbol;\\n\\t}\\n\\n\\t/**\\n\\t * @dev See {IERC721Metadata-tokenURI}.\\n\\t */\\n\\tfunction tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n\\t\\t_requireMinted(tokenId);\\n\\n\\t\\tstring memory baseURI = _baseURI();\\n\\t\\treturn bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n\\t}\\n\\n\\t/**\\n\\t * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n\\t * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n\\t * by default, can be overridden in child contracts.\\n\\t */\\n\\tfunction _baseURI() internal view virtual returns (string memory) {\\n\\t\\treturn \\\"\\\";\\n\\t}\\n\\n\\t/**\\n\\t * @dev See {IERC721-approve}.\\n\\t */\\n\\tfunction approve(address to, uint256 tokenId) public virtual override {\\n\\t\\taddress owner = ERC721.ownerOf(tokenId);\\n\\t\\trequire(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n\\t\\trequire(\\n\\t\\t\\t_msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n\\t\\t\\t\\\"ERC721: approve caller is not token owner or approved for all\\\"\\n\\t\\t);\\n\\n\\t\\t_approve(to, tokenId);\\n\\t}\\n\\n\\t/**\\n\\t * @dev See {IERC721-getApproved}.\\n\\t */\\n\\tfunction getApproved(uint256 tokenId) public view virtual override returns (address) {\\n\\t\\t_requireMinted(tokenId);\\n\\n\\t\\treturn _tokenApprovals[tokenId];\\n\\t}\\n\\n\\t/**\\n\\t * @dev See {IERC721-setApprovalForAll}.\\n\\t */\\n\\tfunction setApprovalForAll(address operator, bool approved) public virtual override {\\n\\t\\t_setApprovalForAll(_msgSender(), operator, approved);\\n\\t}\\n\\n\\t/**\\n\\t * @dev See {IERC721-isApprovedForAll}.\\n\\t */\\n\\tfunction isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n\\t\\treturn _operatorApprovals[owner][operator];\\n\\t}\\n\\n\\t/**\\n\\t * @dev See {IERC721-transferFrom}.\\n\\t */\\n\\tfunction transferFrom(address from, address to, uint256 tokenId) public virtual override {\\n\\t\\t//solhint-disable-next-line max-line-length\\n\\t\\trequire(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n\\n\\t\\t_transfer(from, to, tokenId);\\n\\t}\\n\\n\\t/**\\n\\t * @dev See {IERC721-safeTransferFrom}.\\n\\t */\\n\\tfunction safeTransferFrom(address from, address to, uint256 tokenId) public virtual override {\\n\\t\\tsafeTransferFrom(from, to, tokenId, \\\"\\\");\\n\\t}\\n\\n\\t/**\\n\\t * @dev See {IERC721-safeTransferFrom}.\\n\\t */\\n\\tfunction safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public virtual override {\\n\\t\\trequire(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n\\t\\t_safeTransfer(from, to, tokenId, data);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n\\t * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n\\t *\\n\\t * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n\\t *\\n\\t * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n\\t * implement alternative mechanisms to perform token transfer, such as signature-based.\\n\\t *\\n\\t * Requirements:\\n\\t *\\n\\t * - `from` cannot be the zero address.\\n\\t * - `to` cannot be the zero address.\\n\\t * - `tokenId` token must exist and be owned by `from`.\\n\\t * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n\\t *\\n\\t * Emits a {Transfer} event.\\n\\t */\\n\\tfunction _safeTransfer(address from, address to, uint256 tokenId, bytes memory data) internal virtual {\\n\\t\\t_transfer(from, to, tokenId);\\n\\t\\trequire(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n\\t}\\n\\n\\t/**\\n\\t * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n\\t */\\n\\tfunction _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n\\t\\treturn _owners[tokenId];\\n\\t}\\n\\n\\t/**\\n\\t * @dev Returns whether `tokenId` exists.\\n\\t *\\n\\t * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n\\t *\\n\\t * Tokens start existing when they are minted (`_mint`),\\n\\t * and stop existing when they are burned (`_burn`).\\n\\t */\\n\\tfunction _exists(uint256 tokenId) internal view virtual returns (bool) {\\n\\t\\treturn _ownerOf(tokenId) != address(0);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n\\t *\\n\\t * Requirements:\\n\\t *\\n\\t * - `tokenId` must exist.\\n\\t */\\n\\tfunction _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n\\t\\taddress owner = ERC721.ownerOf(tokenId);\\n\\t\\treturn (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Safely mints `tokenId` and transfers it to `to`.\\n\\t *\\n\\t * Requirements:\\n\\t *\\n\\t * - `tokenId` must not exist.\\n\\t * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n\\t *\\n\\t * Emits a {Transfer} event.\\n\\t */\\n\\tfunction _safeMint(address to, uint256 tokenId) internal virtual {\\n\\t\\t_safeMint(to, tokenId, \\\"\\\");\\n\\t}\\n\\n\\t/**\\n\\t * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n\\t * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n\\t */\\n\\tfunction _safeMint(address to, uint256 tokenId, bytes memory data) internal virtual {\\n\\t\\t_mint(to, tokenId);\\n\\t\\trequire(\\n\\t\\t\\t_checkOnERC721Received(address(0), to, tokenId, data),\\n\\t\\t\\t\\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n\\t\\t);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Mints `tokenId` and transfers it to `to`.\\n\\t *\\n\\t * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n\\t *\\n\\t * Requirements:\\n\\t *\\n\\t * - `tokenId` must not exist.\\n\\t * - `to` cannot be the zero address.\\n\\t *\\n\\t * Emits a {Transfer} event.\\n\\t */\\n\\tfunction _mint(address to, uint256 tokenId) internal virtual {\\n\\t\\trequire(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n\\t\\trequire(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n\\t\\t_beforeTokenTransfer(address(0), to, tokenId, 1);\\n\\n\\t\\t// Check that tokenId was not minted by `_beforeTokenTransfer` hook\\n\\t\\trequire(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n\\t\\tunchecked {\\n\\t\\t\\t// Will not overflow unless all 2**256 token ids are minted to the same owner.\\n\\t\\t\\t// Given that tokens are minted one by one, it is impossible in practice that\\n\\t\\t\\t// this ever happens. Might change if we allow batch minting.\\n\\t\\t\\t// The ERC fails to describe this case.\\n\\t\\t\\t_balances[to] += 1;\\n\\t\\t}\\n\\n\\t\\t_owners[tokenId] = to;\\n\\n\\t\\temit Transfer(address(0), to, tokenId);\\n\\n\\t\\t_afterTokenTransfer(address(0), to, tokenId, 1);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Destroys `tokenId`.\\n\\t * The approval is cleared when the token is burned.\\n\\t * This is an internal function that does not check if the sender is authorized to operate on the token.\\n\\t *\\n\\t * Requirements:\\n\\t *\\n\\t * - `tokenId` must exist.\\n\\t *\\n\\t * Emits a {Transfer} event.\\n\\t */\\n\\tfunction _burn(uint256 tokenId) internal virtual {\\n\\t\\taddress owner = ERC721.ownerOf(tokenId);\\n\\n\\t\\t_beforeTokenTransfer(owner, address(0), tokenId, 1);\\n\\n\\t\\t// Update ownership in case tokenId was transferred by `_beforeTokenTransfer` hook\\n\\t\\towner = ERC721.ownerOf(tokenId);\\n\\n\\t\\t// Clear approvals\\n\\t\\tdelete _tokenApprovals[tokenId];\\n\\n\\t\\tunchecked {\\n\\t\\t\\t// Cannot overflow, as that would require more tokens to be burned/transferred\\n\\t\\t\\t// out than the owner initially received through minting and transferring in.\\n\\t\\t\\t_balances[owner] -= 1;\\n\\t\\t}\\n\\t\\tdelete _owners[tokenId];\\n\\n\\t\\temit Transfer(owner, address(0), tokenId);\\n\\n\\t\\t_afterTokenTransfer(owner, address(0), tokenId, 1);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Transfers `tokenId` from `from` to `to`.\\n\\t *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n\\t *\\n\\t * Requirements:\\n\\t *\\n\\t * - `to` cannot be the zero address.\\n\\t * - `tokenId` token must be owned by `from`.\\n\\t *\\n\\t * Emits a {Transfer} event.\\n\\t */\\n\\tfunction _transfer(address from, address to, uint256 tokenId) internal virtual {\\n\\t\\trequire(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n\\t\\trequire(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n\\t\\t_beforeTokenTransfer(from, to, tokenId, 1);\\n\\n\\t\\t// Check that tokenId was not transferred by `_beforeTokenTransfer` hook\\n\\t\\trequire(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n\\n\\t\\t// Clear approvals from the previous owner\\n\\t\\tdelete _tokenApprovals[tokenId];\\n\\n\\t\\tunchecked {\\n\\t\\t\\t// `_balances[from]` cannot overflow for the same reason as described in `_burn`:\\n\\t\\t\\t// `from`'s balance is the number of token held, which is at least one before the current\\n\\t\\t\\t// transfer.\\n\\t\\t\\t// `_balances[to]` could overflow in the conditions described in `_mint`. That would require\\n\\t\\t\\t// all 2**256 token ids to be minted, which in practice is impossible.\\n\\t\\t\\t_balances[from] -= 1;\\n\\t\\t\\t_balances[to] += 1;\\n\\t\\t}\\n\\t\\t_owners[tokenId] = to;\\n\\n\\t\\temit Transfer(from, to, tokenId);\\n\\n\\t\\t_afterTokenTransfer(from, to, tokenId, 1);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Approve `to` to operate on `tokenId`\\n\\t *\\n\\t * Emits an {Approval} event.\\n\\t */\\n\\tfunction _approve(address to, uint256 tokenId) internal virtual {\\n\\t\\t_tokenApprovals[tokenId] = to;\\n\\t\\temit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Approve `operator` to operate on all of `owner` tokens\\n\\t *\\n\\t * Emits an {ApprovalForAll} event.\\n\\t */\\n\\tfunction _setApprovalForAll(address owner, address operator, bool approved) internal virtual {\\n\\t\\trequire(owner != operator, \\\"ERC721: approve to caller\\\");\\n\\t\\t_operatorApprovals[owner][operator] = approved;\\n\\t\\temit ApprovalForAll(owner, operator, approved);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Reverts if the `tokenId` has not been minted yet.\\n\\t */\\n\\tfunction _requireMinted(uint256 tokenId) internal view virtual {\\n\\t\\trequire(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n\\t}\\n\\n\\t/**\\n\\t * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n\\t * The call is not executed if the target address is not a contract.\\n\\t *\\n\\t * @param from address representing the previous owner of the given token ID\\n\\t * @param to target address that will receive the tokens\\n\\t * @param tokenId uint256 ID of the token to be transferred\\n\\t * @param data bytes optional data to send along with the call\\n\\t * @return bool whether the call correctly returned the expected magic value\\n\\t */\\n\\tfunction _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory data) private returns (bool) {\\n\\t\\tif (to.isContract()) {\\n\\t\\t\\ttry IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n\\t\\t\\t\\treturn retval == IERC721Receiver.onERC721Received.selector;\\n\\t\\t\\t} catch (bytes memory reason) {\\n\\t\\t\\t\\tif (reason.length == 0) {\\n\\t\\t\\t\\t\\trevert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\t/// @solidity memory-safe-assembly\\n\\t\\t\\t\\t\\tassembly {\\n\\t\\t\\t\\t\\t\\trevert(add(32, reason), mload(reason))\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t} else {\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n\\t * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n\\t *\\n\\t * Calling conditions:\\n\\t *\\n\\t * - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.\\n\\t * - When `from` is zero, the tokens will be minted for `to`.\\n\\t * - When `to` is zero, ``from``'s tokens will be burned.\\n\\t * - `from` and `to` are never both zero.\\n\\t * - `batchSize` is non-zero.\\n\\t *\\n\\t * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n\\t */\\n\\tfunction _beforeTokenTransfer(\\n\\t\\taddress from,\\n\\t\\taddress to,\\n\\t\\tuint256 /* firstTokenId */,\\n\\t\\tuint256 batchSize\\n\\t) internal virtual {\\n\\t\\tif (batchSize > 1) {\\n\\t\\t\\tif (from != address(0)) {\\n\\t\\t\\t\\t_balances[from] -= batchSize;\\n\\t\\t\\t}\\n\\t\\t\\tif (to != address(0)) {\\n\\t\\t\\t\\t_balances[to] += batchSize;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n\\t * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n\\t *\\n\\t * Calling conditions:\\n\\t *\\n\\t * - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.\\n\\t * - When `from` is zero, the tokens were minted for `to`.\\n\\t * - When `to` is zero, ``from``'s tokens were burned.\\n\\t * - `from` and `to` are never both zero.\\n\\t * - `batchSize` is non-zero.\\n\\t *\\n\\t * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n\\t */\\n\\tfunction _afterTokenTransfer(address from, address to, uint256 firstTokenId, uint256 batchSize) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"contracts/base/ERC721/extensions/ERC721Enumerable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/extensions/ERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\\\";\\n\\n/**\\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\\n * enumerability of all the token ids in the contract as well as all token ids owned by each\\n * account.\\n */\\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\\n\\t// Mapping from owner to list of owned token IDs\\n\\tmapping(address => mapping(uint256 => uint256)) private _ownedTokens;\\n\\n\\t// Mapping from token ID to index of the owner tokens list\\n\\tmapping(uint256 => uint256) private _ownedTokensIndex;\\n\\n\\t// Array with all token ids, used for enumeration\\n\\tuint256[] private _allTokens;\\n\\n\\t// Mapping from token id to position in the allTokens array\\n\\tmapping(uint256 => uint256) private _allTokensIndex;\\n\\n\\t/**\\n\\t * @dev See {IERC165-supportsInterface}.\\n\\t */\\n\\tfunction supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\\n\\t\\treturn interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\\n\\t}\\n\\n\\t/**\\n\\t * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n\\t */\\n\\tfunction tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\\n\\t\\trequire(index < ERC721.balanceOf(owner), \\\"ERC721Enumerable: owner index out of bounds\\\");\\n\\t\\treturn _ownedTokens[owner][index];\\n\\t}\\n\\n\\t/**\\n\\t * @dev See {IERC721Enumerable-totalSupply}.\\n\\t */\\n\\tfunction totalSupply() public view virtual override returns (uint256) {\\n\\t\\treturn _allTokens.length;\\n\\t}\\n\\n\\t/**\\n\\t * @dev See {IERC721Enumerable-tokenByIndex}.\\n\\t */\\n\\tfunction tokenByIndex(uint256 index) public view virtual override returns (uint256) {\\n\\t\\trequire(index < ERC721Enumerable.totalSupply(), \\\"ERC721Enumerable: global index out of bounds\\\");\\n\\t\\treturn _allTokens[index];\\n\\t}\\n\\n\\t/**\\n\\t * @dev See {ERC721-_beforeTokenTransfer}.\\n\\t */\\n\\tfunction _beforeTokenTransfer(\\n\\t\\taddress from,\\n\\t\\taddress to,\\n\\t\\tuint256 firstTokenId,\\n\\t\\tuint256 batchSize\\n\\t) internal virtual override {\\n\\t\\tsuper._beforeTokenTransfer(from, to, firstTokenId, batchSize);\\n\\n\\t\\tif (batchSize > 1) {\\n\\t\\t\\t// Will only trigger during construction. Batch transferring (minting) is not available afterwards.\\n\\t\\t\\trevert(\\\"ERC721Enumerable: consecutive transfers not supported\\\");\\n\\t\\t}\\n\\n\\t\\tuint256 tokenId = firstTokenId;\\n\\n\\t\\tif (from == address(0)) {\\n\\t\\t\\t_addTokenToAllTokensEnumeration(tokenId);\\n\\t\\t} else if (from != to) {\\n\\t\\t\\t_removeTokenFromOwnerEnumeration(from, tokenId);\\n\\t\\t}\\n\\t\\tif (to == address(0)) {\\n\\t\\t\\t_removeTokenFromAllTokensEnumeration(tokenId);\\n\\t\\t} else if (to != from) {\\n\\t\\t\\t_addTokenToOwnerEnumeration(to, tokenId);\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * @dev Private function to add a token to this extension's ownership-tracking data structures.\\n\\t * @param to address representing the new owner of the given token ID\\n\\t * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\\n\\t */\\n\\tfunction _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\\n\\t\\tuint256 length = ERC721.balanceOf(to);\\n\\t\\t_ownedTokens[to][length] = tokenId;\\n\\t\\t_ownedTokensIndex[tokenId] = length;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Private function to add a token to this extension's token tracking data structures.\\n\\t * @param tokenId uint256 ID of the token to be added to the tokens list\\n\\t */\\n\\tfunction _addTokenToAllTokensEnumeration(uint256 tokenId) private {\\n\\t\\t_allTokensIndex[tokenId] = _allTokens.length;\\n\\t\\t_allTokens.push(tokenId);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\\n\\t * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\\n\\t * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\\n\\t * This has O(1) time complexity, but alters the order of the _ownedTokens array.\\n\\t * @param from address representing the previous owner of the given token ID\\n\\t * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\\n\\t */\\n\\tfunction _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\\n\\t\\t// To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\\n\\t\\t// then delete the last slot (swap and pop).\\n\\n\\t\\tuint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\\n\\t\\tuint256 tokenIndex = _ownedTokensIndex[tokenId];\\n\\n\\t\\t// When the token to delete is the last token, the swap operation is unnecessary\\n\\t\\tif (tokenIndex != lastTokenIndex) {\\n\\t\\t\\tuint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\\n\\n\\t\\t\\t_ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n\\t\\t\\t_ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n\\t\\t}\\n\\n\\t\\t// This also deletes the contents at the last position of the array\\n\\t\\tdelete _ownedTokensIndex[tokenId];\\n\\t\\tdelete _ownedTokens[from][lastTokenIndex];\\n\\t}\\n\\n\\t/**\\n\\t * @dev Private function to remove a token from this extension's token tracking data structures.\\n\\t * This has O(1) time complexity, but alters the order of the _allTokens array.\\n\\t * @param tokenId uint256 ID of the token to be removed from the tokens list\\n\\t */\\n\\tfunction _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\\n\\t\\t// To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\\n\\t\\t// then delete the last slot (swap and pop).\\n\\n\\t\\tuint256 lastTokenIndex = _allTokens.length - 1;\\n\\t\\tuint256 tokenIndex = _allTokensIndex[tokenId];\\n\\n\\t\\t// When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\\n\\t\\t// rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\\n\\t\\t// an 'if' statement (like in _removeTokenFromOwnerEnumeration)\\n\\t\\tuint256 lastTokenId = _allTokens[lastTokenIndex];\\n\\n\\t\\t_allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n\\t\\t_allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n\\n\\t\\t// This also deletes the contents at the last position of the array\\n\\t\\tdelete _allTokensIndex[tokenId];\\n\\t\\t_allTokens.pop();\\n\\t}\\n}\\n\"\r\n    },\r\n    \"contracts/base/ERC721AntiScam/lockable/IERC721Lockable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\n/**\\n * @title IERC721Lockable\\n * @dev \u30c8\u30fc\u30af\u30f3\u306etransfer\u6291\u6b62\u6a5f\u80fd\u4ed8\u304d\u30b3\u30f3\u30c8\u30e9\u30af\u30c8\u306e\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\\n * @author Lavulite\\n */\\ninterface IERC721Lockable {\\n\\tenum LockStatus {\\n\\t\\tUnSet,\\n\\t\\tUnLock,\\n\\t\\tLock\\n\\t}\\n\\n\\t/**\\n\\t * @dev \u500b\u5225\u30ed\u30c3\u30af\u304c\u6307\u5b9a\u3055\u308c\u305f\u5834\u5408\u306e\u30a4\u30d9\u30f3\u30c8\\n\\t */\\n\\t// event TokenLock(address indexed holder, address indexed operator, LockStatus lockStatus, uint256 indexed tokenId);\\n\\tevent TokenLock(address indexed holder, uint256 indexed tokenId, LockStatus indexed lockStatus, uint256 timestamp);\\n\\n\\t/**\\n\\t * @dev \u30a6\u30a9\u30ec\u30c3\u30c8\u30ed\u30c3\u30af\u304c\u6307\u5b9a\u3055\u308c\u305f\u5834\u5408\u306e\u30a4\u30d9\u30f3\u30c8\\n\\t */\\n\\tevent WalletLock(address indexed holder, address indexed operator, LockStatus lockStatus);\\n\\n\\t/**\\n\\t * @dev \u8a72\u5f53\u30c8\u30fc\u30af\u30f3ID\u306e\u30ed\u30c3\u30af\u30b9\u30c6\u30fc\u30bf\u30b9\u3092\u5909\u66f4\u3059\u308b\u3002\\n\\t */\\n\\tfunction setTokenLock(uint256[] calldata tokenIds, LockStatus lockStatus) external;\\n\\n\\t/**\\n\\t * @dev \u8a72\u5f53\u30a6\u30a9\u30ec\u30c3\u30c8\u306e\u30ed\u30c3\u30af\u30b9\u30c6\u30fc\u30bf\u30b9\u3092\u5909\u66f4\u3059\u308b\u3002\\n\\t */\\n\\tfunction setWalletLock(address to, LockStatus lockStatus) external;\\n\\n\\t/**\\n\\t * @dev \u30b3\u30f3\u30c8\u30e9\u30af\u30c8\u306e\u30ed\u30c3\u30af\u30b9\u30c6\u30fc\u30bf\u30b9\u3092\u5909\u66f4\u3059\u308b\u3002\\n\\t */\\n\\tfunction setContractLock(LockStatus lockStatus) external;\\n\\n\\t/**\\n\\t * @dev \u8a72\u5f53\u30c8\u30fc\u30af\u30f3ID\u304c\u30ed\u30c3\u30af\u3055\u308c\u3066\u3044\u308b\u304b\u3092\u8fd4\u3059\\n\\t */\\n\\tfunction isLocked(uint256 tokenId) external view returns (bool);\\n\\n\\t/**\\n\\t * @dev \u30a6\u30a9\u30ec\u30c3\u30c8\u30ed\u30c3\u30af\u3092\u884c\u3063\u3066\u3044\u308b\u304b\u3092\u8fd4\u3059\\n\\t */\\n\\tfunction isLocked(address holder) external view returns (bool);\\n\\n\\t/**\\n\\t * @dev \u8ee2\u9001\u304c\u62d2\u5426\u3055\u308c\u3066\u3044\u308b\u30c8\u30fc\u30af\u30f3\u3092\u5168\u3066\u8fd4\u3059\\n\\t */\\n\\tfunction getTokensUnderLock() external view returns (uint256[] memory);\\n\\n\\t/**\\n\\t * @dev \u8ee2\u9001\u304c\u62d2\u5426\u3055\u308c\u3066\u3044\u308bstart\u304b\u3089stop\u307e\u3067\u306e\u30c8\u30fc\u30af\u30f3ID\u3092\u8fd4\u3059\\n\\t */\\n\\tfunction getTokensUnderLock(uint256 start, uint256 end) external view returns (uint256[] memory);\\n}\\n\"\r\n    },\r\n    \"contracts/base/ParentLinkSbt.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.0 <0.9.0;\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"./ERC721/extensions/ERC721Enumerable.sol\\\";\\nimport { ERC5192PL } from \\\"../base/ERC5192PL.sol\\\";\\nimport \\\"../interface/IOnchainTokenUriSupplier.sol\\\";\\nimport \\\"../interface/IERC5192PLConnector.sol\\\";\\nimport { IERC5192PL } from \\\"../interface/IERC5192PL.sol\\\";\\n\\ncontract ParentLinkSbtConfig {\\n\\t// =============================================================\\n\\t//   ENUM\\n\\t// =============================================================\\n\\n\\tenum SalePhase {\\n\\t\\tLocked,\\n\\t\\tSale\\n\\t}\\n\\n\\t// =============================================================\\n\\t//   EXTERNAL CONTRACT\\n\\t// =============================================================\\n\\n\\tIOnchainTokenUriSupplier public onchainTokenUriSupplier;\\n\\n\\tIERC5192PLConnector public connector;\\n\\n\\t// =============================================================\\n\\t//   CONSTANTS\\n\\t// =============================================================\\n\\n\\tbytes32 public constant ADMIN_ROLE = keccak256(\\\"ADMIN\\\");\\n\\n\\t// =============================================================\\n\\t//   STORAGE\\n\\t// =============================================================\\n\\n\\tSalePhase public phase = SalePhase.Locked;\\n\\n\\tstring public baseURI;\\n\\n\\tstring public baseExtension = \\\".json\\\";\\n}\\n\\nabstract contract ParentLinkSbtAdmin is ParentLinkSbtConfig, AccessControl, ERC5192PL {\\n\\t// =============================================================\\n\\t//   SUPPORTS INTERFACE\\n\\t// =============================================================\\n\\n\\tfunction supportsInterface(bytes4 interfaceId) public view virtual override(ERC5192PL, AccessControl) returns (bool) {\\n\\t\\treturn (ERC721.supportsInterface(interfaceId) ||\\n\\t\\t\\tAccessControl.supportsInterface(interfaceId) ||\\n\\t\\t\\tsuper.supportsInterface(interfaceId));\\n\\t}\\n\\n\\t// =============================================================\\n\\t//   ACCESS CONTROL\\n\\t// =============================================================\\n\\n\\tfunction grantRole(bytes32 _role, address _account) public override onlyOwner {\\n\\t\\t_grantRole(_role, _account);\\n\\t}\\n\\n\\tfunction revokeRole(bytes32 _role, address _account) public override onlyOwner {\\n\\t\\t_revokeRole(_role, _account);\\n\\t}\\n\\n\\t// =============================================================\\n\\t//   EXTERNAL CONTRACT\\n\\t// =============================================================\\n\\n\\tfunction setOnchainTokenUriSupplier(IOnchainTokenUriSupplier _onchainTokenUriSupplier) external onlyRole(ADMIN_ROLE) {\\n\\t\\tonchainTokenUriSupplier = _onchainTokenUriSupplier;\\n\\t}\\n\\n\\tfunction setERC5192PLConnector(IERC5192PLConnector _parentLinkSbtMint) external onlyRole(ADMIN_ROLE) {\\n\\t\\tconnector = _parentLinkSbtMint;\\n\\t}\\n\\n\\t// =============================================================\\n\\t//   OTHER FUNCTION\\n\\t// =============================================================\\n\\n\\tfunction setPhase(SalePhase _phase) external onlyRole(ADMIN_ROLE) {\\n\\t\\tphase = _phase;\\n\\t}\\n\\n\\tfunction setBaseURI(string memory _baseURI) external onlyRole(ADMIN_ROLE) {\\n\\t\\tbaseURI = _baseURI;\\n\\t}\\n\\n\\tfunction setBaseExtension(string memory _baseExtension) external onlyRole(ADMIN_ROLE) {\\n\\t\\tbaseExtension = _baseExtension;\\n\\t}\\n}\\n\\ncontract ParentLinkSbt is ParentLinkSbtAdmin {\\n\\t// =============================================================\\n\\t//   CONSTRUCTOR\\n\\t// =============================================================\\n\\n\\tconstructor(\\n\\t\\tstring memory _name,\\n\\t\\tstring memory _symbol,\\n\\t\\tstring memory _baseUri,\\n\\t\\taddress _ownerAddress,\\n\\t\\taddress _parentContractAddress\\n\\t) ERC5192PL(_name, _symbol, true, _parentContractAddress) {\\n\\t\\t_grantRole(DEFAULT_ADMIN_ROLE, _ownerAddress);\\n\\t\\t_grantRole(ADMIN_ROLE, _ownerAddress);\\n\\t\\tbaseURI = _baseUri;\\n\\t}\\n\\n\\t// =============================================================\\n\\t//   ERROR FUNCTION\\n\\t// =============================================================\\n\\n\\tfunction requireIsNotConnectorAddress() private view {\\n\\t\\tif (msg.sender != address(connector)) revert ErrNotAllowtedAddress();\\n\\t}\\n\\n\\tfunction requireIsNotSaleActive() private view {\\n\\t\\tif (phase != SalePhase.Sale) revert ErrNotSaleActive();\\n\\t}\\n\\n\\t// =============================================================\\n\\t//   MINT FUNCTION\\n\\t// =============================================================\\n\\n\\t/**\\n\\t * @dev If the condition is met, SBT is transferred to the address.\\n\\t * It can only be called from a ZUTTO MAMORU address.\\n\\t */\\n\\tfunction mintParentLinkSbt(address _to, uint256[] memory _tokenIds) external payable {\\n\\t\\trequireIsNotConnectorAddress();\\n\\t\\trequireIsNotSaleActive();\\n\\t\\tfor (uint256 i = 0; i < _tokenIds.length; i++) {\\n\\t\\t\\t_mint(_to, _tokenIds[i]);\\n\\t\\t}\\n\\t}\\n\\n\\t// =============================================================\\n\\t//   ERC-721 OVERRIDE\\n\\t// =============================================================\\n\\n\\tfunction tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n\\t\\trequire(_exists(tokenId), \\\"URI query for nonexistent token\\\");\\n\\n\\t\\tif (address(onchainTokenUriSupplier) == address(0)) {\\n\\t\\t\\treturn string(abi.encodePacked(ERC721.tokenURI(tokenId), baseExtension));\\n\\t\\t}\\n\\n\\t\\treturn onchainTokenUriSupplier.tokenURI(tokenId);\\n\\t}\\n\\n\\tfunction exists(uint256 tokenId) public view virtual returns (bool) {\\n\\t\\treturn _exists(tokenId);\\n\\t}\\n\\n\\tfunction _baseURI() internal view virtual override returns (string memory) {\\n\\t\\treturn baseURI;\\n\\t}\\n}\\n\"\r\n    },\r\n    \"contracts/interface/IERC5192.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: CC0-1.0\\npragma solidity >=0.7.0 <0.9.0;\\n\\ninterface IERC5192 {\\n\\t/// @notice Emitted when the locking status is changed to locked.\\n\\t/// @dev If a token is minted and the status is locked, this event should be emitted.\\n\\t/// @param tokenId The identifier for a token.\\n\\tevent Locked(uint256 tokenId);\\n\\n\\t/// @notice Emitted when the locking status is changed to unlocked.\\n\\t/// @dev If a token is minted and the status is unlocked, this event should be emitted.\\n\\t/// @param tokenId The identifier for a token.\\n\\tevent Unlocked(uint256 tokenId);\\n\\n\\t/// @notice Returns the locking status of an Soulbound Token\\n\\t/// @dev SBTs assigned to zero address are considered invalid, and queries\\n\\t/// about them do throw.\\n\\t/// @param tokenId The identifier for an SBT.\\n\\tfunction locked(uint256 tokenId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/interface/IERC5192PL.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: CC0-1.0\\npragma solidity >=0.7.0 <0.9.0;\\n\\nimport { IERC5192 } from \\\"./IERC5192.sol\\\";\\n\\n/**\\n * @title IERC5192PL\\n * @dev Interface of ERC5192PL.\\n */\\n\\ninterface IERC5192PL is IERC5192 {\\n\\t/**\\n\\t * @dev Cannot transfer when locked.\\n\\t */\\n\\terror ErrLocked();\\n\\n\\t/**\\n\\t * @dev Cannot transfer when token locked.\\n\\t */\\n\\terror ErrTokenLocked();\\n\\n\\t/**\\n\\t * @dev The token does not exist.\\n\\t */\\n\\terror ErrNotFound();\\n\\n\\t/**\\n\\t * @dev Cannot query set function for the null address.\\n\\t */\\n\\terror ErrNullAddress();\\n\\n\\t/**\\n\\t * @dev Error if not parent contract address.\\n\\t */\\n\\terror ErrNotAllowtedAddress();\\n\\n\\t/**\\n\\t * @dev Error if sale has not started.\\n\\t */\\n\\terror ErrNotSaleActive();\\n\\n\\t/**\\n\\t * @dev Unlock tokens only when called from the parent contract address.\\n\\t */\\n\\tfunction setIsTokenUnLocked(uint256 _tokenId, bool _value) external;\\n\\n\\t/**\\n\\t * @dev Set parent contract address.\\n\\t */\\n\\tfunction setParentContractAddress(address _parentContractAddress) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interface/IERC5192PLConnector.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: CC0-1.0\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/**\\n * @title IERC5192PLConnector\\n * @dev Interface to tie to parent.\\n */\\ninterface IERC5192PLConnector {\\n\\t/**\\n\\t * @dev Returns true/false values for the existence of NFTs associated with the parent.\\n\\t */\\n\\tfunction isParentLinkSbtExists(\\n\\t\\taddress _parentLinkSbtContract,\\n\\t\\tuint256 _parentLinkSbtTokenId\\n\\t) external view returns (bool);\\n\\n\\t/**\\n\\t * @dev Returns the parent's token ID.\\n\\t */\\n\\tfunction getParentLinkSbtTokenOwnerId(\\n\\t\\taddress _parentLinkSbtContract,\\n\\t\\tuint256 _parentLinkSbtTokenId\\n\\t) external view returns (uint256);\\n\\n\\t/**\\n\\t * @dev Returns the value of index.\\n\\t */\\n\\tfunction getParentLinkSbtTokenIndex(\\n\\t\\tuint256 _parentTokenId,\\n\\t\\taddress _parentLinkSbtContract,\\n\\t\\tuint256 _parentLinkSbtTokenId\\n\\t) external view returns (uint256);\\n\\n\\t/**\\n\\t * @dev Returns the number of contracts associated with the parent token ID.\\n\\t */\\n\\tfunction getTotalParentLinkSbtContracts(uint256 _tokenId) external view returns (uint256);\\n\\n\\t/**\\n\\t * @dev Returns the number of token IDs associated with the parent token ID.\\n\\t */\\n\\tfunction getTotalParentLinkSbtTokens(\\n\\t\\tuint256 _tokenId,\\n\\t\\taddress _parentLinkSbtContract\\n\\t) external view returns (uint256);\\n\\n\\t/**\\n\\t * @dev Returns the contract address associated with the parent.\\n\\t */\\n\\tfunction getParentLinkSbtContractByIndex(\\n\\t\\tuint256 _tokenId,\\n\\t\\tuint256 _index\\n\\t) external view returns (address parentLinkSbtContract);\\n\\n\\t/**\\n\\t * @dev Returns the token ID associated with the parent.\\n\\t */\\n\\tfunction getParentLinkSbtTokenByIndex(\\n\\t\\tuint256 _tokenId,\\n\\t\\taddress _parentLinkSbtContract,\\n\\t\\tuint256 _index\\n\\t) external view returns (uint256 parentLinkSbtTokenId);\\n}\\n\"\r\n    },\r\n    \"contracts/interface/IERC5192PLTop.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: CC0-1.0\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/**\\n * @title IERC5192PLTop\\n * @dev Interface to be implemented in the parent NFT.\\n */\\ninterface IERC5192PLTop {\\n\\t/**\\n\\t * @dev Returns the owner address of the NFT associated with the parent\u3002\\n\\t */\\n\\tfunction ownerOfParentLinkSbt(\\n\\t\\taddress _parentLinkSbtContract,\\n\\t\\tuint256 _parentLinkSbtTokenId\\n\\t) external view returns (address parentTokenOwner);\\n}\\n\"\r\n    },\r\n    \"contracts/interface/IOnchainTokenUriSupplier.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.0 <0.9.0;\\n\\ninterface IOnchainTokenUriSupplier {\\n\\tfunction tokenURI(uint256 _tokenId) external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"contracts/interface/IParentLinkSbtFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: CC0-1.0\\npragma solidity >=0.7.0 <0.9.0;\\nimport { ParentLinkSbt } from \\\"../base/ParentLinkSbt.sol\\\";\\n\\ninterface IParentLinkSbtFactory {\\n\\tfunction getParentLinkSbtAddressList(string memory _symbol) external view returns (ParentLinkSbt);\\n}\\n\"\r\n    },\r\n    \"contracts/interface/IParentLinkSbtMint.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: CC0-1.0\\npragma solidity >=0.7.0 <0.9.0;\\n\\nimport { IERC5192PLConnector } from \\\"./IERC5192PLConnector.sol\\\";\\n\\ninterface IParentLinkSbtMint is IERC5192PLConnector {\\n\\terror ErrNotNextSatge();\\n\\n\\terror ErrNotTokenOwner();\\n\\n\\terror ErrAlreadyMinted();\\n\\n\\terror ErrNotEnoughEth();\\n\\n\\terror ErrNotExistTokenId();\\n\\n\\terror ErrAlreadyAdded();\\n\\n\\terror ErrNotExistContractAddress();\\n\\n\\terror ErrNotOwnParentLinkSbt();\\n}\\n\"\r\n    },\r\n    \"contracts/interface/IZuttoMamo.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.0 <0.9.0;\\n\\nimport { IERC721A } from \\\"erc721a/contracts/interfaces/IERC721A.sol\\\";\\nimport { IERC5192PLTop } from \\\"./IERC5192PLTop.sol\\\";\\nimport { IERC721Lockable } from \\\"../base/ERC721AntiScam/lockable/IERC721Lockable.sol\\\";\\n\\nimport { DataType } from \\\"../lib/type/DataType.sol\\\";\\n\\ninterface IZuttoMamo is IERC721A, IERC721Lockable, IERC5192PLTop {\\n\\tfunction getTokenLocation(uint256 _tokenId) external view returns (DataType.TokenLocation);\\n\\n\\tfunction refreshMetadata(uint256 _tokenId) external;\\n\\n\\tfunction refreshMetadata(uint256 _fromTokenId, uint256 _toTokenId) external;\\n\\n\\tfunction birth(address _to, uint256 _amount) external;\\n\\n\\tfunction birthWithSleeping(address _to, uint256 _amount) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interface/IZuttoMamoStage.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.0 <0.9.0;\\n\\nimport { DataType } from \\\"../lib/type/DataType.sol\\\";\\n\\ninterface IZuttoMamoStage {\\n\\tfunction tokenURI(uint256 tokenId) external view returns (string memory);\\n\\n\\tfunction isHighSchooler(uint256 _tokenId) external view returns (bool);\\n\\n\\tfunction isWorkingAdult(uint256 _tokenId) external view returns (bool);\\n\\n\\tfunction isElapsedTimeWorkingAdult(uint256 _tokenId) external view returns (bool);\\n\\n\\tfunction isMarriage(uint256 _tokenId) external view returns (bool);\\n\\n\\tfunction isElapsedTimeMarriage(uint256 _tokenId) external view returns (bool);\\n\\n\\tfunction isFamily(uint256 _tokenId) external view returns (bool);\\n\\n\\tfunction isOldAge(uint256 _tokenId) external view returns (bool);\\n\\n\\tfunction isTomb(uint256 _tokenId) external view returns (bool);\\n\\n\\tfunction setHighSchoolerLock(uint256 _tokenId) external;\\n\\n\\tfunction setFamilyLock(uint256 _tokenId) external;\\n\\n\\tfunction setOldAgeLock(uint256 _tokenId) external;\\n\\n\\tfunction setTombLock(uint256 _tokenId) external;\\n\\n\\tfunction getTimeGrowingUpToHighSchooler() external view returns (uint256);\\n\\n\\tfunction getTimeGrowingUpToFamily() external view returns (uint256);\\n\\n\\tfunction getTimeGrowingUpToOldAge() external view returns (uint256);\\n\\n\\tfunction getTimeGrowingUpToTomb() external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/lib/type/DataType.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.0 <0.9.0;\\n\\nlibrary DataType {\\n\\tenum TokenLocation {\\n\\t\\tOperator,\\n\\t\\tOther\\n\\t}\\n\\n\\tenum LockStatus {\\n\\t\\tUnLock,\\n\\t\\tLock\\n\\t}\\n\\n\\tstruct AfterParentTokenTransferParams {\\n\\t\\taddress from;\\n\\t\\taddress to;\\n\\t\\tuint256 tokenId;\\n\\t\\tuint256 totalAmountParentLinkSbtContracts;\\n\\t}\\n\\n\\tstruct CreateParentLinkSbtParams {\\n\\t\\tstring name;\\n\\t\\tstring symbol;\\n\\t\\tstring baseUri;\\n\\t\\taddress ownerAddress;\\n\\t\\taddress parentContractAddress;\\n\\t}\\n\\tstruct ConnectParentLinkSbtParams {\\n\\t\\tuint256 tokenId;\\n\\t\\taddress parentLinkSbtContract;\\n\\t\\tuint256 parentLinkSbtTokenId;\\n\\t}\\n\\n\\tstruct AllStageParams {\\n\\t\\tuint256 highSchooler;\\n\\t\\tuint256 workingAdult;\\n\\t\\tuint256 marriage;\\n\\t\\tuint256 family;\\n\\t\\tuint256 oldAge;\\n\\t\\tuint256 tomb;\\n\\t}\\n}\\n\"\r\n    },\r\n    \"contracts/lib/ZuttoMamoStage.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.0 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport { DataType } from \\\"../lib/type/DataType.sol\\\";\\nimport \\\"../interface/IZuttoMamoStage.sol\\\";\\nimport \\\"../interface/IZuttoMamo.sol\\\";\\nimport \\\"../interface/IParentLinkSbtFactory.sol\\\";\\nimport \\\"../interface/IParentLinkSbtMint.sol\\\";\\n\\nabstract contract ZuttoMamoStageConfig {\\n\\tstruct LockStage {\\n\\t\\tDataType.LockStatus highSchooler;\\n\\t\\tDataType.LockStatus family;\\n\\t\\tDataType.LockStatus oldAge;\\n\\t\\tDataType.LockStatus tomb;\\n\\t}\\n\\n\\t// =============================================================\\n\\t//   EXTERNAL CONTRACT\\n\\t// =============================================================\\n\\n\\tIZuttoMamo public zuttoMamo;\\n\\n\\tIParentLinkSbtMint public parentLinkSbtMint;\\n\\n\\tIParentLinkSbtFactory public parentLinkSbtFactory;\\n\\n\\t// =============================================================\\n\\t//   CONSTANTS\\n\\t// =============================================================\\n\\n\\tbytes32 public constant ADMIN_ROLE = keccak256(\\\"ADMIN\\\");\\n\\n\\t// =============================================================\\n\\t//   STORAGE\\n\\t// =============================================================\\n\\n\\t// 2024.02.10 12:00\\n\\tuint256 public growingUpToHighSchooler = 1707534000;\\n\\t// 2025.02.10 12:00\\n\\tuint256 public growingUpToWorkingAdult = 1739156400;\\n\\t// 2026.02.10 12:00\\n\\tuint256 public growingUpToMarriage = 1770692400;\\n\\t// 2027.02.10 12:00\\n\\tuint256 public growingUpToFamily = 1802228400;\\n\\t// 2028.02.10 12:00\\n\\tuint256 public growingUpToOldAge = 1833764400;\\n\\t// 2029.02.10 12:00\\n\\tuint256 public growingUpToTomb = 1865386800;\\n\\n\\tstring public baseURI = \\\"\\\";\\n\\n\\tstring public baseExtension = \\\".json\\\";\\n\\n\\tmapping(uint256 => LockStage) public lockStages;\\n}\\n\\nabstract contract ZuttoMamoStageAdmin is ZuttoMamoStageConfig, AccessControl, Ownable, IZuttoMamoStage {\\n\\t// =============================================================\\n\\t//   ACCESS CONTROL\\n\\t// =============================================================\\n\\n\\tfunction grantRole(bytes32 _role, address _account) public override onlyOwner {\\n\\t\\t_grantRole(_role, _account);\\n\\t}\\n\\n\\tfunction revokeRole(bytes32 _role, address _account) public override onlyOwner {\\n\\t\\t_revokeRole(_role, _account);\\n\\t}\\n\\n\\t// =============================================================\\n\\t//   EXTERNAL CONTRACT\\n\\t// =============================================================\\n\\n\\tfunction setZuttoMamo(address _value) external onlyRole(ADMIN_ROLE) {\\n\\t\\tzuttoMamo = IZuttoMamo(_value);\\n\\t}\\n\\n\\tfunction setParentLinkSbtMint(address _value) external onlyRole(ADMIN_ROLE) {\\n\\t\\tparentLinkSbtMint = IParentLinkSbtMint(_value);\\n\\t}\\n\\n\\tfunction setParentLinkSbtFactory(address _value) external onlyRole(ADMIN_ROLE) {\\n\\t\\tparentLinkSbtFactory = IParentLinkSbtFactory(_value);\\n\\t}\\n\\n\\t// =============================================================\\n\\t//   GROW STAGE\\n\\t// =============================================================\\n\\n\\tfunction setGrowingUpToHighSchooler(uint256 _period) external onlyRole(ADMIN_ROLE) {\\n\\t\\tgrowingUpToHighSchooler = _period;\\n\\t}\\n\\n\\tfunction setGrowingUpToWorkingAdult(uint256 _period) external onlyRole(ADMIN_ROLE) {\\n\\t\\tgrowingUpToWorkingAdult = _period;\\n\\t}\\n\\n\\tfunction setGrowingUpToMarriage(uint256 _period) external onlyRole(ADMIN_ROLE) {\\n\\t\\tgrowingUpToMarriage = _period;\\n\\t}\\n\\n\\tfunction setGrowingUpToFamily(uint256 _period) external onlyRole(ADMIN_ROLE) {\\n\\t\\tgrowingUpToFamily = _period;\\n\\t}\\n\\n\\tfunction setGrowingUpToOldAge(uint256 _period) external onlyRole(ADMIN_ROLE) {\\n\\t\\tgrowingUpToOldAge = _period;\\n\\t}\\n\\n\\tfunction setGrowingUpToTomb(uint256 _period) external onlyRole(ADMIN_ROLE) {\\n\\t\\tgrowingUpToTomb = _period;\\n\\t}\\n\\n\\tfunction setGrowingUpToAllStage(DataType.AllStageParams memory _allStageParams) external onlyRole(ADMIN_ROLE) {\\n\\t\\trequire(_checkStagePeriod(_allStageParams), \\\"error period\\\");\\n\\n\\t\\tif (growingUpToHighSchooler != _allStageParams.highSchooler) {\\n\\t\\t\\tgrowingUpToHighSchooler = _allStageParams.highSchooler;\\n\\t\\t}\\n\\n\\t\\tif (growingUpToWorkingAdult != _allStageParams.workingAdult) {\\n\\t\\t\\tgrowingUpToWorkingAdult = _allStageParams.workingAdult;\\n\\t\\t}\\n\\n\\t\\tif (growingUpToMarriage != _allStageParams.marriage) {\\n\\t\\t\\tgrowingUpToMarriage = _allStageParams.marriage;\\n\\t\\t}\\n\\n\\t\\tif (growingUpToFamily != _allStageParams.family) {\\n\\t\\t\\tgrowingUpToFamily = _allStageParams.family;\\n\\t\\t}\\n\\n\\t\\tif (growingUpToOldAge != _allStageParams.oldAge) {\\n\\t\\t\\tgrowingUpToOldAge = _allStageParams.oldAge;\\n\\t\\t}\\n\\n\\t\\tif (growingUpToTomb != _allStageParams.tomb) {\\n\\t\\t\\tgrowingUpToTomb = _allStageParams.tomb;\\n\\t\\t}\\n\\t}\\n\\n\\tfunction _checkStagePeriod(DataType.AllStageParams memory _allStageParams) private pure returns (bool) {\\n\\t\\tbool isStandardPeriodLessThanMarriage = _allStageParams.highSchooler < _allStageParams.workingAdult &&\\n\\t\\t\\t_allStageParams.workingAdult < _allStageParams.marriage;\\n\\n\\t\\tbool isMarriageDayPeriodLessThanTomb = _allStageParams.family < _allStageParams.oldAge &&\\n\\t\\t\\t_allStageParams.oldAge < _allStageParams.tomb;\\n\\n\\t\\treturn isStandardPeriodLessThanMarriage && isMarriageDayPeriodLessThanTomb;\\n\\t}\\n\\n\\tfunction adminSetUnLockStage(uint256[] memory _tokenIds) external onlyRole(ADMIN_ROLE) {\\n\\t\\tfor (uint256 i = 0; i < _tokenIds.length; i++) {\\n\\t\\t\\tif (lockStages[_tokenIds[i]].highSchooler == DataType.LockStatus.Lock) {\\n\\t\\t\\t\\tlockStages[_tokenIds[i]].highSchooler = DataType.LockStatus.UnLock;\\n\\t\\t\\t}\\n\\n\\t\\t\\tif (lockStages[_tokenIds[i]].family == DataType.LockStatus.Lock) {\\n\\t\\t\\t\\tlockStages[_tokenIds[i]].family = DataType.LockStatus.UnLock;\\n\\t\\t\\t}\\n\\n\\t\\t\\tif (lockStages[_tokenIds[i]].oldAge == DataType.LockStatus.Lock) {\\n\\t\\t\\t\\tlockStages[_tokenIds[i]].oldAge = DataType.LockStatus.UnLock;\\n\\t\\t\\t}\\n\\n\\t\\t\\tif (lockStages[_tokenIds[i]].tomb == DataType.LockStatus.Lock) {\\n\\t\\t\\t\\tlockStages[_tokenIds[i]].tomb = DataType.LockStatus.UnLock;\\n\\t\\t\\t}\\n\\n\\t\\t\\tzuttoMamo.refreshMetadata(_tokenIds[i]);\\n\\t\\t}\\n\\t}\\n\\n\\t// =============================================================\\n\\t//   OTHER FUNCTION\\n\\t// =============================================================\\n\\n\\tfunction setBaseURI(string memory _value) external onlyRole(ADMIN_ROLE) {\\n\\t\\tbaseURI = _value;\\n\\n\\t\\tif (address(zuttoMamo) != address(0) && zuttoMamo.totalSupply() != 0) {\\n\\t\\t\\tzuttoMamo.refreshMetadata(1, zuttoMamo.totalSupply());\\n\\t\\t}\\n\\t}\\n\\n\\tfunction setBaseExtension(string memory _value) external onlyRole(ADMIN_ROLE) {\\n\\t\\tbaseExtension = _value;\\n\\t}\\n}\\n\\ncontract ZuttoMamoStage is ZuttoMamoStageAdmin {\\n\\t// =============================================================\\n\\t//   LIBRARY\\n\\t// =============================================================\\n\\n\\tusing Strings for uint256;\\n\\n\\t// =============================================================\\n\\t//   CONSTRUCTOR\\n\\t// =============================================================\\n\\n\\tconstructor() {\\n\\t\\t_grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n\\t\\t_grantRole(ADMIN_ROLE, msg.sender);\\n\\t}\\n\\n\\t// =============================================================\\n\\t//   TOKEN URI\\n\\t// =============================================================\\n\\n\\tfunction tokenURI(uint256 _tokenId) external view returns (string memory) {\\n\\t\\tstring memory stage = _getCurrentStage(_tokenId);\\n\\n\\t\\tstring memory lock = zuttoMamo.isLocked(_tokenId) ? \\\"_lock\\\" : \\\"\\\";\\n\\n\\t\\treturn string(abi.encodePacked(baseURI, _tokenId.toString(), \\\"/\\\", stage, lock, baseExtension));\\n\\t}\\n\\n\\tfunction _getCurrentStage(uint256 _tokenId) private view returns (string memory) {\\n\\t\\tstring memory stage;\\n\\t\\tbool isStageTomb = isTomb(_tokenId);\\n\\t\\tbool isStageOldAge = isOldAge(_tokenId);\\n\\t\\tbool isStageFamily = isFamily(_tokenId);\\n\\t\\tbool isStageMarriage = isMarriage(_tokenId);\\n\\t\\tbool isStageWorkingAdult = isWorkingAdult(_tokenId);\\n\\t\\tbool isStageHighSchooler = isHighSchooler(_tokenId);\\n\\n\\t\\tif (isStageTomb) {\\n\\t\\t\\tstage = \\\"tomb\\\";\\n\\t\\t} else if (isStageOldAge) {\\n\\t\\t\\tstage = \\\"old-age\\\";\\n\\t\\t} else if (isStageFamily) {\\n\\t\\t\\tstage = \\\"family\\\";\\n\\t\\t} else if (isStageMarriage) {\\n\\t\\t\\tstage = \\\"marriage\\\";\\n\\t\\t} else if (isStageWorkingAdult) {\\n\\t\\t\\tstage = \\\"working-adult\\\";\\n\\t\\t} else if (isStageHighSchooler) {\\n\\t\\t\\tstage = \\\"high-schooler\\\";\\n\\t\\t} else {\\n\\t\\t\\tstage = \\\"elementary-school-student\\\";\\n\\t\\t}\\n\\t\\treturn stage;\\n\\t}\\n\\n\\t// =============================================================\\n\\t//   GROW STAGE\\n\\t// =============================================================\\n\\n\\tfunction isHighSchooler(uint256 _tokenId) public view returns (bool) {\\n\\t\\tif (zuttoMamo.getTokenLocation(_tokenId) == DataType.TokenLocation.Operator) {\\n\\t\\t\\treturn false;\\n\\t\\t}\\n\\n\\t\\treturn\\n\\t\\t\\tgrowingUpToHighSchooler <= block.timestamp && lockStages[_tokenId].highSchooler == DataType.LockStatus.UnLock;\\n\\t}\\n\\n\\tfunction isElapsedTimeWorkingAdult(uint256 _tokenId) public view returns (bool) {\\n\\t\\tif (zuttoMamo.getTokenLocation(_tokenId) == DataType.TokenLocation.Operator) {\\n\\t\\t\\treturn false;\\n\\t\\t}\\n\\n\\t\\treturn growingUpToWorkingAdult <= block.timestamp;\\n\\t}\\n\\n\\tfunction isWorkingAdult(uint256 _tokenId) public view returns (bool) {\\n\\t\\tif (zuttoMamo.getTokenLocation(_tokenId) == DataType.TokenLocation.Operator) {\\n\\t\\t\\treturn false;\\n\\t\\t}\\n\\n\\t\\tif (!isHighSchooler(_tokenId)) {\\n\\t\\t\\treturn false;\\n\\t\\t}\\n\\n\\t\\tParentLinkSbt unofficialOffer = parentLinkSbtFactory.getParentLinkSbtAddressList(\\\"UO\\\");\\n\\n\\t\\tif (address(unofficialOffer) == address(0)) {\\n\\t\\t\\treturn false;\\n\\t\\t}\\n\\n\\t\\tif (!unofficialOffer.exists(_tokenId)) {\\n\\t\\t\\treturn false;\\n\\t\\t}\\n\\n\\t\\tif (zuttoMamo.ownerOf(_tokenId) != zuttoMamo.ownerOfParentLinkSbt(address(unofficialOffer), _tokenId)) {\\n\\t\\t\\treturn false;\\n\\t\\t}\\n\\n\\t\\treturn isElapsedTimeWorkingAdult(_tokenId);\\n\\t}\\n\\n\\tfunction isElapsedTimeMarriage(uint256 _tokenId) public view returns (bool) {\\n\\t\\tif (zuttoMamo.getTokenLocation(_tokenId) == DataType.TokenLocation.Operator) {\\n\\t\\t\\treturn false;\\n\\t\\t}\\n\\n\\t\\treturn growingUpToMarriage <= block.timestamp;\\n\\t}\\n\\n\\tfunction isMarriage(uint256 _tokenId) public view returns (bool) {\\n\\t\\tif (zuttoMamo.getTokenLocation(_tokenId) == DataType.TokenLocation.Operator) {\\n\\t\\t\\treturn false;\\n\\t\\t}\\n\\n\\t\\tif (!isWorkingAdult(_tokenId)) {\\n\\t\\t\\treturn false;\\n\\t\\t}\\n\\n\\t\\tParentLinkSbt weddingRing = parentLinkSbtFactory.getParentLinkSbtAddressList(\\\"WR\\\");\\n\\n\\t\\tif (address(weddingRing) == address(0)) {\\n\\t\\t\\treturn false;\\n\\t\\t}\\n\\n\\t\\tif (!weddingRing.exists(_tokenId)) {\\n\\t\\t\\treturn false;\\n\\t\\t}\\n\\n\\t\\tif (zuttoMamo.ownerOf(_tokenId) != zuttoMamo.ownerOfParentLinkSbt(address(weddingRing), _tokenId)) {\\n\\t\\t\\treturn false;\\n\\t\\t}\\n\\n\\t\\treturn isElapsedTimeMarriage(_tokenId);\\n\\t}\\n\\n\\tfunction isFamily(uint256 _tokenId) public view returns (bool) {\\n\\t\\tif (zuttoMamo.getTokenLocation(_tokenId) == DataType.TokenLocation.Operator) {\\n\\t\\t\\treturn false;\\n\\t\\t}\\n\\n\\t\\tif (!isMarriage(_tokenId)) {\\n\\t\\t\\treturn false;\\n\\t\\t}\\n\\n\\t\\treturn growingUpToFamily <= block.timestamp && lockStages[_tokenId].family == DataType.LockStatus.UnLock;\\n\\t}\\n\\n\\tfunction isOldAge(uint256 _tokenId) public view returns (bool) {\\n\\t\\tif (zuttoMamo.getTokenLocation(_tokenId) == DataType.TokenLocation.Operator) {\\n\\t\\t\\treturn false;\\n\\t\\t}\\n\\n\\t\\tif (!isFamily(_tokenId)) {\\n\\t\\t\\treturn false;\\n\\t\\t}\\n\\n\\t\\treturn growingUpToOldAge <= block.timestamp && lockStages[_tokenId].oldAge == DataType.LockStatus.UnLock;\\n\\t}\\n\\n\\tfunction isTomb(uint256 _tokenId) public view returns (bool) {\\n\\t\\tif (zuttoMamo.getTokenLocation(_tokenId) == DataType.TokenLocation.Operator) {\\n\\t\\t\\treturn false;\\n\\t\\t}\\n\\n\\t\\tif (!isOldAge(_tokenId)) {\\n\\t\\t\\treturn false;\\n\\t\\t}\\n\\n\\t\\treturn growingUpToTomb <= block.timestamp && lockStages[_tokenId].tomb == DataType.LockStatus.UnLock;\\n\\t}\\n\\n\\t// =============================================================\\n\\t//   STAGE Lock\\n\\t// =============================================================\\n\\n\\tfunction setHighSchoolerLock(uint256 _tokenId) external {\\n\\t\\trequire(msg.sender == address(zuttoMamo), \\\"not zuttoMamo address\\\");\\n\\t\\tlockStages[_tokenId].highSchooler = DataType.LockStatus.Lock;\\n\\t}\\n\\n\\tfunction setFamilyLock(uint256 _tokenId) external {\\n\\t\\trequire(msg.sender == address(parentLinkSbtMint), \\\"not parentLinkSbtMint address\\\");\\n\\t\\tlockStages[_tokenId].family = DataType.LockStatus.Lock;\\n\\t}\\n\\n\\tfunction setOldAgeLock(uint256 _tokenId) external {\\n\\t\\trequire(msg.sender == address(parentLinkSbtMint), \\\"not parentLinkSbtMint address\\\");\\n\\t\\tlockStages[_tokenId].oldAge = DataType.LockStatus.Lock;\\n\\t}\\n\\n\\tfunction setTombLock(uint256 _tokenId) external {\\n\\t\\trequire(msg.sender == address(parentLinkSbtMint), \\\"not parentLinkSbtMint address\\\");\\n\\t\\tlockStages[_tokenId].tomb = DataType.LockStatus.Lock;\\n\\t}\\n\\n\\tfunction setUnLockStage(uint256[] memory _tokenIds) external {\\n\\t\\tfor (uint256 i = 0; i < _tokenIds.length; i++) {\\n\\t\\t\\trequire(zuttoMamo.ownerOf(_tokenIds[i]) == msg.sender, \\\"not owner\\\");\\n\\n\\t\\t\\tif (lockStages[_tokenIds[i]].highSchooler == DataType.LockStatus.Lock) {\\n\\t\\t\\t\\tlockStages[_tokenIds[i]].highSchooler = DataType.LockStatus.UnLock;\\n\\t\\t\\t} else if (lockStages[_tokenIds[i]].family == DataType.LockStatus.Lock) {\\n\\t\\t\\t\\tif (growingUpToOldAge <= block.timestamp) {\\n\\t\\t\\t\\t\\tlockStages[_tokenIds[i]].oldAge = DataType.LockStatus.Lock;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tlockStages[_tokenIds[i]].family = DataType.LockStatus.UnLock;\\n\\t\\t\\t} else if (lockStages[_tokenIds[i]].oldAge == DataType.LockStatus.Lock) {\\n\\t\\t\\t\\tif (growingUpToTomb <= block.timestamp) {\\n\\t\\t\\t\\t\\tlockStages[_tokenIds[i]].tomb = DataType.LockStatus.Lock;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tlockStages[_tokenIds[i]].oldAge = DataType.LockStatus.UnLock;\\n\\t\\t\\t} else if (lockStages[_tokenIds[i]].tomb == DataType.LockStatus.Lock) {\\n\\t\\t\\t\\tlockStages[_tokenIds[i]].tomb = DataType.LockStatus.UnLock;\\n\\t\\t\\t} else {\\n\\t\\t\\t\\treturn require(false, \\\"already unlocked\\\");\\n\\t\\t\\t}\\n\\n\\t\\t\\tzuttoMamo.refreshMetadata(_tokenIds[i]);\\n\\t\\t}\\n\\t}\\n\\n\\t// =============================================================\\n\\t//   GET FUNCTION\\n\\t// =============================================================\\n\\n\\tfunction getLockStage(uint256 _tokenId) external view returns (LockStage memory) {\\n\\t\\tLockStage memory lockStage;\\n\\t\\tlockStage.highSchooler = lockStages[_tokenId].highSchooler;\\n\\t\\tlockStage.family = lockStages[_tokenId].family;\\n\\t\\tlockStage.oldAge = lockStages[_tokenId].oldAge;\\n\\t\\tlockStage.tomb = lockStages[_tokenId].tomb;\\n\\t\\treturn lockStage;\\n\\t}\\n\\n\\tfunction getTimeCurrentStage() external view returns (uint256) {\\n\\t\\tuint256 currentStageTime;\\n\\t\\tif (block.timestamp <= growingUpToHighSchooler) {\\n\\t\\t\\tcurrentStageTime = growingUpToHighSchooler;\\n\\t\\t} else if (block.timestamp <= growingUpToWorkingAdult) {\\n\\t\\t\\tcurrentStageTime = growingUpToWorkingAdult;\\n\\t\\t} else if (block.timestamp <= growingUpToMarriage) {\\n\\t\\t\\tcurrentStageTime = growingUpToMarriage;\\n\\t\\t} else if (block.timestamp <= growingUpToFamily) {\\n\\t\\t\\tcurrentStageTime = growingUpToFamily;\\n\\t\\t} else if (block.timestamp <= growingUpToOldAge) {\\n\\t\\t\\tcurrentStageTime = growingUpToOldAge;\\n\\t\\t} else {\\n\\t\\t\\tcurrentStageTime = growingUpToTomb;\\n\\t\\t}\\n\\t\\treturn currentStageTime;\\n\\t}\\n\\n\\tfunction getTimeGrowingUpToHighSchooler() external view returns (uint256) {\\n\\t\\treturn growingUpToHighSchooler;\\n\\t}\\n\\n\\tfunction getTimeGrowingUpToFamily() external view returns (uint256) {\\n\\t\\treturn growingUpToFamily;\\n\\t}\\n\\n\\tfunction getTimeGrowingUpToOldAge() external view returns (uint256) {\\n\\t\\treturn growingUpToOldAge;\\n\\t}\\n\\n\\tfunction getTimeGrowingUpToTomb() external view returns (uint256) {\\n\\t\\treturn growingUpToTomb;\\n\\t}\\n}\\n\"\r\n    },\r\n    \"erc721a/contracts/IERC721A.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// ERC721A Contracts v4.2.3\\n// Creator: Chiru Labs\\n\\npragma solidity ^0.8.4;\\n\\n/**\\n * @dev Interface of ERC721A.\\n */\\ninterface IERC721A {\\n    /**\\n     * The caller must own the token or be an approved operator.\\n     */\\n    error ApprovalCallerNotOwnerNorApproved();\\n\\n    /**\\n     * The token does not exist.\\n     */\\n    error ApprovalQueryForNonexistentToken();\\n\\n    /**\\n     * Cannot query the balance for the zero address.\\n     */\\n    error BalanceQueryForZeroAddress();\\n\\n    /**\\n     * Cannot mint to the zero address.\\n     */\\n    error MintToZeroAddress();\\n\\n    /**\\n     * The quantity of tokens minted must be more than zero.\\n     */\\n    error MintZeroQuantity();\\n\\n    /**\\n     * The token does not exist.\\n     */\\n    error OwnerQueryForNonexistentToken();\\n\\n    /**\\n     * The caller must own the token or be an approved operator.\\n     */\\n    error TransferCallerNotOwnerNorApproved();\\n\\n    /**\\n     * The token must be owned by `from`.\\n     */\\n    error TransferFromIncorrectOwner();\\n\\n    /**\\n     * Cannot safely transfer to a contract that does not implement the\\n     * ERC721Receiver interface.\\n     */\\n    error TransferToNonERC721ReceiverImplementer();\\n\\n    /**\\n     * Cannot transfer to the zero address.\\n     */\\n    error TransferToZeroAddress();\\n\\n    /**\\n     * The token does not exist.\\n     */\\n    error URIQueryForNonexistentToken();\\n\\n    /**\\n     * The `quantity` minted with ERC2309 exceeds the safety limit.\\n     */\\n    error MintERC2309QuantityExceedsLimit();\\n\\n    /**\\n     * The `extraData` cannot be set on an unintialized ownership slot.\\n     */\\n    error OwnershipNotInitializedForExtraData();\\n\\n    // =============================================================\\n    //                            STRUCTS\\n    // =============================================================\\n\\n    struct TokenOwnership {\\n        // The address of the owner.\\n        address addr;\\n        // Stores the start time of ownership with minimal overhead for tokenomics.\\n        uint64 startTimestamp;\\n        // Whether the token has been burned.\\n        bool burned;\\n        // Arbitrary data similar to `startTimestamp` that can be set via {_extraData}.\\n        uint24 extraData;\\n    }\\n\\n    // =============================================================\\n    //                         TOKEN COUNTERS\\n    // =============================================================\\n\\n    /**\\n     * @dev Returns the total number of tokens in existence.\\n     * Burned tokens will reduce the count.\\n     * To get the total number of tokens minted, please see {_totalMinted}.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    // =============================================================\\n    //                            IERC165\\n    // =============================================================\\n\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * [EIP section](https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified)\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n\\n    // =============================================================\\n    //                            IERC721\\n    // =============================================================\\n\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables\\n     * (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in `owner`'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`,\\n     * checking first that contract recipients are aware of the ERC721 protocol\\n     * to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move\\n     * this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement\\n     * {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external payable;\\n\\n    /**\\n     * @dev Equivalent to `safeTransferFrom(from, to, tokenId, '')`.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external payable;\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom}\\n     * whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token\\n     * by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external payable;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the\\n     * zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external payable;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom}\\n     * for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    // =============================================================\\n    //                        IERC721Metadata\\n    // =============================================================\\n\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n\\n    // =============================================================\\n    //                           IERC2309\\n    // =============================================================\\n\\n    /**\\n     * @dev Emitted when tokens in `fromTokenId` to `toTokenId`\\n     * (inclusive) is transferred from `from` to `to`, as defined in the\\n     * [ERC2309](https://eips.ethereum.org/EIPS/eip-2309) standard.\\n     *\\n     * See {_mintERC2309} for more details.\\n     */\\n    event ConsecutiveTransfer(uint256 indexed fromTokenId, uint256 toTokenId, address indexed from, address indexed to);\\n}\\n\"\r\n    },\r\n    \"erc721a/contracts/interfaces/IERC721A.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// ERC721A Contracts v4.2.3\\n// Creator: Chiru Labs\\n\\npragma solidity ^0.8.4;\\n\\nimport '../IERC721A.sol';\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"adminSetUnLockStage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseExtension\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getLockStage\",\"outputs\":[{\"components\":[{\"internalType\":\"enum DataType.LockStatus\",\"name\":\"highSchooler\",\"type\":\"uint8\"},{\"internalType\":\"enum DataType.LockStatus\",\"name\":\"family\",\"type\":\"uint8\"},{\"internalType\":\"enum DataType.LockStatus\",\"name\":\"oldAge\",\"type\":\"uint8\"},{\"internalType\":\"enum DataType.LockStatus\",\"name\":\"tomb\",\"type\":\"uint8\"}],\"internalType\":\"struct ZuttoMamoStageConfig.LockStage\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTimeCurrentStage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTimeGrowingUpToFamily\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTimeGrowingUpToHighSchooler\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTimeGrowingUpToOldAge\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTimeGrowingUpToTomb\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"growingUpToFamily\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"growingUpToHighSchooler\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"growingUpToMarriage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"growingUpToOldAge\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"growingUpToTomb\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"growingUpToWorkingAdult\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"isElapsedTimeMarriage\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"isElapsedTimeWorkingAdult\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"isFamily\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"isHighSchooler\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"isMarriage\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"isOldAge\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"isTomb\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"isWorkingAdult\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lockStages\",\"outputs\":[{\"internalType\":\"enum DataType.LockStatus\",\"name\":\"highSchooler\",\"type\":\"uint8\"},{\"internalType\":\"enum DataType.LockStatus\",\"name\":\"family\",\"type\":\"uint8\"},{\"internalType\":\"enum DataType.LockStatus\",\"name\":\"oldAge\",\"type\":\"uint8\"},{\"internalType\":\"enum DataType.LockStatus\",\"name\":\"tomb\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"parentLinkSbtFactory\",\"outputs\":[{\"internalType\":\"contract IParentLinkSbtFactory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"parentLinkSbtMint\",\"outputs\":[{\"internalType\":\"contract IParentLinkSbtMint\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_value\",\"type\":\"string\"}],\"name\":\"setBaseExtension\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_value\",\"type\":\"string\"}],\"name\":\"setBaseURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"setFamilyLock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"highSchooler\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"workingAdult\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"marriage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"family\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"oldAge\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tomb\",\"type\":\"uint256\"}],\"internalType\":\"struct DataType.AllStageParams\",\"name\":\"_allStageParams\",\"type\":\"tuple\"}],\"name\":\"setGrowingUpToAllStage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_period\",\"type\":\"uint256\"}],\"name\":\"setGrowingUpToFamily\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_period\",\"type\":\"uint256\"}],\"name\":\"setGrowingUpToHighSchooler\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_period\",\"type\":\"uint256\"}],\"name\":\"setGrowingUpToMarriage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_period\",\"type\":\"uint256\"}],\"name\":\"setGrowingUpToOldAge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_period\",\"type\":\"uint256\"}],\"name\":\"setGrowingUpToTomb\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_period\",\"type\":\"uint256\"}],\"name\":\"setGrowingUpToWorkingAdult\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"setHighSchoolerLock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"setOldAgeLock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_value\",\"type\":\"address\"}],\"name\":\"setParentLinkSbtFactory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_value\",\"type\":\"address\"}],\"name\":\"setParentLinkSbtMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"setTombLock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"setUnLockStage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_value\",\"type\":\"address\"}],\"name\":\"setZuttoMamo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"zuttoMamo\",\"outputs\":[{\"internalType\":\"contract IZuttoMamo\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "ZuttoMamoStage", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}