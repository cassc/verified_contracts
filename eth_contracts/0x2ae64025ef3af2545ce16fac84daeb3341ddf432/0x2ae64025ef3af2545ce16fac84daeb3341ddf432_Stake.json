{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.8;\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        returns (bool);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\ncontract Context {\r\n    // an instance of this contract, which should be used via inheritance.\r\n    constructor() {}\r\n\r\n    function _msgSender() internal view returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(\r\n            newOwner != address(0),\r\n            \"Ownable: new owner is the zero address\"\r\n        );\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\n\r\ninterface AggregatorV3Interface {\r\n    function decimals() external view returns (uint8);\r\n\r\n    function description() external view returns (string memory);\r\n\r\n    function version() external view returns (uint256);\r\n\r\n    function getRoundData(uint80 _roundId)\r\n        external\r\n        view\r\n        returns (\r\n            uint80 roundId,\r\n            int256 answer,\r\n            uint256 startedAt,\r\n            uint256 updatedAt,\r\n            uint80 answeredInRound\r\n        );\r\n\r\n    function latestRoundData()\r\n        external\r\n        view\r\n        returns (\r\n            uint80 roundId,\r\n            int256 answer,\r\n            uint256 startedAt,\r\n            uint256 updatedAt,\r\n            uint80 answeredInRound\r\n        );\r\n}\r\n\r\ninterface IPresale {\r\n    // function stake(address) external view returns (uint256);\r\n\r\n    // function getListStaker() external view returns (address[] memory);\r\n\r\n    // function getListBuyer() external view returns (address[] memory);\r\n\r\n    // function getTotalStaked() external view returns (uint256);\r\n\r\n    // function getStaker(address staker) external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function stakeFromStakeContract(address _buyer, uint256 _amount)\r\n        external\r\n        returns (bool);\r\n\r\n    function getAddress() external view returns (address);\r\n}\r\n\r\ncontract Stake is Ownable {\r\n    using SafeMath for uint256;\r\n    address payable public _wallet; \r\n    IERC20 public  token; \r\n    IPresale presale; \r\n    uint256 public currentUpdateNumber;\r\n    uint256 public lastUpdateBlockNumber;\r\n\r\n    mapping(address => uint256) private rewards;\r\n    mapping(address => uint256) private stakers;\r\n    mapping(address => bool) isStaker;\r\n    mapping(address => uint256) private lastestUpdatedNumberStaker;\r\n    mapping(address => uint256) private lastestBlockNumberStaker;\r\n    mapping(address => uint256) private timeStartStake;\r\n    mapping(uint256 => UpdateNumber) private updateNumbers;\r\n    uint256 public totalReward;\r\n    uint256 public totalStaked;\r\n    bool public inWithdrawToken = true;\r\n\r\n    address[] public stakerAddressList;\r\n\r\n    uint256 _rateAPY = 2628000; //60*60*24*365/12\r\n    uint256 timeToHoldTokenStake = 2592000; // seconds\r\n    uint256  public totalTokenRewardPerBlock = 160000000000000000000;\r\n\r\n    struct UpdateNumber {\r\n        uint256 blocknumber;\r\n        uint256 totalStaked;\r\n    }\r\n\r\n    constructor(IERC20 _token, address payable wallet, IPresale _presale) {\r\n        _wallet = wallet;\r\n        token = _token;\r\n        presale = _presale;\r\n    }\r\n\r\n    function setTotalTokenRewardPerBlock(uint256 _totalTokenRewardPerBlock)\r\n        public\r\n        onlyOwner\r\n    {\r\n        totalTokenRewardPerBlock = _totalTokenRewardPerBlock;\r\n    }\r\n\r\n    function setWallet(address payable wallet) public  onlyOwner{\r\n        _wallet = wallet;\r\n    }\r\n\r\n    function getLastestUpdateNumberStaked(address staker)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return lastestUpdatedNumberStaker[staker];\r\n    }\r\n\r\n    function getListStaker() public view returns (address[] memory) {\r\n        return stakerAddressList;\r\n    }\r\n\r\n    function getStaker(address staker) public view returns (uint256) {\r\n        return stakers[staker];\r\n    }\r\n\r\n    function getStakeale(address account) public view returns (uint256) {\r\n        return presale.balanceOf(account);\r\n    }\r\n\r\n    function getReward(address _staker) public view returns (uint256) {\r\n        return rewards[_staker];\r\n    }\r\n\r\n    function getTotalStaked() public view returns (uint256) {\r\n        return totalStaked;\r\n    }\r\n\r\n    function getTotalTokenRewardPerBlock() public view returns (uint256) {\r\n        return totalTokenRewardPerBlock;\r\n    }\r\n\r\n    function getTotalReward() public view returns (uint256) {\r\n        return totalReward;\r\n    }\r\n\r\n    function getWallet() public view returns (address) {\r\n        return _wallet;\r\n    }\r\n\r\n    function getUpdateNumber(uint256 updateNumber)\r\n        public\r\n        view\r\n        returns (UpdateNumber memory)\r\n    {\r\n        return updateNumbers[updateNumber];\r\n    }\r\n\r\n    function getAddress() public view returns (address) {\r\n        return address(this);\r\n    }\r\n\r\n    function getPresaleContract() public view returns (IPresale) {\r\n        return presale;\r\n    }\r\n\r\n    function getPoolPercent(address staker) public view returns (uint256) {\r\n        return (getStaker(staker) * (100)) / getTotalStaked();\r\n    }\r\n\r\n    function getStartTimeStaker(address staker) public view returns (uint256){\r\n        return timeStartStake[staker];\r\n    }\r\n     function canUnStake(address staker) public view returns (bool){\r\n        return block.timestamp - timeStartStake[staker] > timeToHoldTokenStake;\r\n    }\r\n\r\n     function getTimeToHoldTokenStaker() public view returns (uint256){\r\n        return timeToHoldTokenStake;\r\n    }\r\n\r\n    function getAPY() public view returns (uint256) {\r\n        return _rateAPY * totalTokenRewardPerBlock /  totalStaked;\r\n    }\r\n\r\n    function setPresaleAddress(IPresale presaleAdress) public onlyOwner {\r\n        presale = presaleAdress;\r\n    }\r\n\r\n    function setInWithdrawToken(bool _inWithdrawToken) public onlyOwner {\r\n       inWithdrawToken= _inWithdrawToken;\r\n    }\r\n\r\n    function setToken(IERC20 _token) public onlyOwner {\r\n       token= _token;\r\n    }\r\n\r\n    function setTimeToHoldTokenStake(uint256 newTimeToHoldTokenStake) public onlyOwner {\r\n        timeToHoldTokenStake = newTimeToHoldTokenStake;\r\n    }\r\n\r\n    function getRewards(address staker) public view returns (uint256) {\r\n        uint256 blockNumber = block.number;\r\n        uint256 updateNumberOfStaker = lastestUpdatedNumberStaker[staker];\r\n        uint256 stakedOfAddress = stakers[staker];\r\n        if(stakedOfAddress == 0 ){\r\n            return 0;\r\n        }\r\n        uint256 blockNumberStaker = lastestBlockNumberStaker[staker];\r\n        require(\r\n            updateNumberOfStaker <= currentUpdateNumber,\r\n            \"address not stake\"\r\n        );\r\n        uint256 rewardsOfAddress;\r\n\r\n        if (lastestUpdatedNumberStaker[staker] == currentUpdateNumber) {\r\n            rewardsOfAddress =\r\n                (stakedOfAddress *\r\n                    totalTokenRewardPerBlock *\r\n                    (blockNumber - blockNumberStaker)) /\r\n                totalStaked;\r\n        } else {\r\n            // uint256 lastTotalStakedInUpdateNumberSaved;\r\n            UpdateNumber memory nextUpdateNumberOfStaker = updateNumbers[\r\n                updateNumberOfStaker + 1\r\n            ];\r\n            // Step 1: Reward from blockNumberOfStaker to nextUpdateNumber\r\n            rewardsOfAddress +=\r\n                ((nextUpdateNumberOfStaker.blocknumber - blockNumberStaker) *\r\n                    totalTokenRewardPerBlock *\r\n                    stakedOfAddress) /\r\n                updateNumbers[updateNumberOfStaker].totalStaked;\r\n\r\n            //Step 2: Reward from nextUpdateNumber to currentUpdateNumber\r\n            for (\r\n                uint256 i = updateNumberOfStaker + 1;\r\n                i < currentUpdateNumber;\r\n                i++\r\n            ) {\r\n                uint256 totalStakedInUpdateNumber = updateNumbers[i]\r\n                    .totalStaked;\r\n                uint256 blockNumberInUpdateNumber = updateNumbers[i]\r\n                    .blocknumber;\r\n                uint256 blockNumberInNextUpdateNumber = updateNumbers[i + 1]\r\n                    .blocknumber;\r\n                rewardsOfAddress +=\r\n                    ((stakedOfAddress * totalTokenRewardPerBlock) *\r\n                        (blockNumberInNextUpdateNumber -\r\n                            blockNumberInUpdateNumber)) /\r\n                    totalStakedInUpdateNumber;\r\n            }\r\n\r\n            //Step 3: Reward from lastBlockNumber to currentBlockNumber\r\n            rewardsOfAddress +=\r\n                ((block.number -\r\n                    updateNumbers[currentUpdateNumber].blocknumber) *\r\n                    (stakedOfAddress * totalTokenRewardPerBlock)) /\r\n                totalStaked;\r\n        }\r\n\r\n        return rewardsOfAddress;\r\n    }\r\n\r\n    function withdrawReward() public returns (bool) {\r\n        return withdrawReward(msg.sender);\r\n    }\r\n\r\n    function tokenBalanceOfContract() view public returns (uint256){\r\n        return token.balanceOf(address(this));\r\n    }\r\n\r\n    function withdrawReward(address staker) public returns (bool) {\r\n        uint256 reward = getRewards(staker);\r\n        require(\r\n            token.balanceOf(address(this)) > reward,\r\n            \"Sold out reward token\"\r\n        );\r\n        bool success = token.transfer(staker, reward);\r\n\r\n        require(success, \"Reward error\");\r\n        lastestUpdatedNumberStaker[staker] = currentUpdateNumber;\r\n        lastestBlockNumberStaker[staker] = block.number;\r\n         totalReward = totalReward.add(reward);\r\n        return true;\r\n    }\r\n\r\n     function withdrawdAndStakeRewards(address staker) public returns (bool) {\r\n        uint256 reward = getRewards(staker);\r\n        require(stakeSuccess(staker, reward), \"Withdraw and Stake error\");\r\n        return true;\r\n    }\r\n\r\n    function addStakerToList(address _staker) private {\r\n        if (isStaker[_staker] == false) {\r\n            stakerAddressList.push(_staker);\r\n            isStaker[_staker] = true;\r\n        }\r\n    }\r\n\r\n    function stake() public returns (bool) {\r\n        require(msg.sender != address(0), \"address is zero\");\r\n        uint256 amount = presale.balanceOf(msg.sender);\r\n        require(amount > 0, \"Amount must not zero\");\r\n        bool success = presale.stakeFromStakeContract(msg.sender, amount);\r\n        require(success, \"Stake error\");\r\n        if (stakers[msg.sender] > 0) {\r\n            require(withdrawReward(msg.sender), \"Withdraw old tokens error\");\r\n        }\r\n\r\n        require(stakeSuccess(msg.sender, amount), \"Stake error, check again\");\r\n        return true;\r\n    }\r\n\r\n    function stakeFromToken(uint256 _amount) public returns (bool) {\r\n        require(msg.sender != address(0), \"address is zero\");\r\n        require(_amount > 0, \"Amount stake must > 0\");\r\n        uint256 balance = token.balanceOf(msg.sender);\r\n        require(_amount <= balance, \"Not enough tokens to stake\");\r\n        if (stakers[msg.sender] > 0) {\r\n            require(withdrawReward(msg.sender), \"Withdraw old tokens error\");\r\n        }\r\n        require(\r\n            token.transferFrom(msg.sender, _wallet, _amount),\r\n            \"Stake error\"\r\n        );\r\n\r\n        require(stakeSuccess(msg.sender, _amount), \"Stake error, check again\");\r\n        return true;\r\n    }\r\n\r\n    function unStake() public returns (bool){\r\n        return unStake(msg.sender);\r\n    }\r\n\r\n    function unStake(address staker) private returns (bool)  {\r\n        uint256 amountStaking = stakers[staker];\r\n        require(amountStaking > 0, \"Not have token to unstake\");\r\n        require( (block.timestamp - timeStartStake[staker] ) > timeToHoldTokenStake , \"Not time to unstake yet\");\r\n        require(withdrawReward(staker), \"Withdraw rewards before unstake error\"); \r\n        token.transferFrom(_wallet, msg.sender, amountStaking);\r\n        require(unStakeSuccess(staker,amountStaking), \"Unstake fail\");\r\n        return true;\r\n    }\r\n\r\n    function stakeFromPresale(address buyer, uint256 amount)\r\n        public\r\n        returns (bool)\r\n    {\r\n        require(\r\n            msg.sender == presale.getAddress(),\r\n            \"Only call from PresaleContract\"\r\n        );\r\n        require(stakeSuccess(buyer, amount), \"Stake error, check again\");\r\n        return true;\r\n    }\r\n\r\n    function stakeSuccess(address _staker, uint256 amount)\r\n        private\r\n        returns (bool)\r\n    {\r\n        uint256 blockNumber = block.number;\r\n        stakers[_staker] = stakers[_staker].add(amount);\r\n        totalStaked = totalStaked.add(amount);\r\n        if (blockNumber - lastUpdateBlockNumber >= 300 || lastUpdateBlockNumber ==0) {\r\n            lastUpdateBlockNumber = blockNumber;\r\n            UpdateNumber memory updateNumber = UpdateNumber(\r\n                blockNumber,\r\n                totalStaked\r\n            );\r\n            currentUpdateNumber += 1;\r\n            updateNumbers[currentUpdateNumber] = updateNumber;\r\n        }\r\n        lastestUpdatedNumberStaker[_staker] = currentUpdateNumber;\r\n        lastestBlockNumberStaker[_staker] = block.number;\r\n        timeStartStake[_staker] = block.timestamp;\r\n        addStakerToList(_staker);\r\n        return true;\r\n    }\r\n\r\n    function unStakeSuccess(address staker, uint256 amount) private  returns (bool) {\r\n        stakers[staker] = stakers[staker].sub(amount);\r\n        totalStaked = totalStaked.sub(amount);\r\n        return true;\r\n    }\r\n\r\n    function withdraw() public onlyOwner {\r\n        token.transfer(msg.sender, token.balanceOf(address(this)));\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"wallet\",\"type\":\"address\"},{\"internalType\":\"contract IPresale\",\"name\":\"_presale\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_wallet\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"canUnStake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentUpdateNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAPY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"getLastestUpdateNumberStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getListStaker\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"getPoolPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPresaleContract\",\"outputs\":[{\"internalType\":\"contract IPresale\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_staker\",\"type\":\"address\"}],\"name\":\"getReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"getRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getStakeale\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"getStaker\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"getStartTimeStaker\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTimeToHoldTokenStaker\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalTokenRewardPerBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"updateNumber\",\"type\":\"uint256\"}],\"name\":\"getUpdateNumber\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"blocknumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalStaked\",\"type\":\"uint256\"}],\"internalType\":\"struct Stake.UpdateNumber\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"inWithdrawToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastUpdateBlockNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_inWithdrawToken\",\"type\":\"bool\"}],\"name\":\"setInWithdrawToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IPresale\",\"name\":\"presaleAdress\",\"type\":\"address\"}],\"name\":\"setPresaleAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newTimeToHoldTokenStake\",\"type\":\"uint256\"}],\"name\":\"setTimeToHoldTokenStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"setToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_totalTokenRewardPerBlock\",\"type\":\"uint256\"}],\"name\":\"setTotalTokenRewardPerBlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"setWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stakeFromPresale\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"stakeFromToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stakerAddressList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenBalanceOfContract\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalTokenRewardPerBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unStake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"withdrawReward\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawReward\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"withdrawdAndStakeRewards\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Stake", "CompilerVersion": "v0.8.9+commit.e5eed63a", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000005f6a8d2e9da5df2d0211bca4cf1e3b18328cfde5000000000000000000000000ad93fcca379b3a868f5852baa57fe2e70cc584200000000000000000000000005049443427037c3af8b4ead6e4fbf250d372d9fd", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://a517469239f6fd6017f5445b7093b88e5468fb38687ff87a228170b550063380"}