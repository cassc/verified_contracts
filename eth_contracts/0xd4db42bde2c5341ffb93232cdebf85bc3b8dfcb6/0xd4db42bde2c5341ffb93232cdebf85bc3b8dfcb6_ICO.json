{"SourceCode": "//SPDX-License-Identifier: MIT\r\npragma solidity 0.8.19;\r\n\r\ninterface IERC20 {\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n}\r\n\r\nabstract contract ReentrancyGuard {\r\n    bool internal locked;\r\n\r\n    modifier noReentrant() {\r\n        require(!locked, \"No re-entrancy\");\r\n        locked = true;\r\n        _;\r\n        locked = false;\r\n    }\r\n}\r\n\r\ninterface AggregatorV3Interface {\r\n    function latestRoundData()\r\n        external\r\n        view\r\n        returns (\r\n            uint80 roundId,\r\n            int256 answer,\r\n            uint256 startedAt,\r\n            uint256 updatedAt,\r\n            uint80 answeredInRound\r\n        );\r\n\r\n    function latestAnswer() external view returns (int256);\r\n}\r\n\r\ncontract ICO is ReentrancyGuard {\r\n    IERC20 public grl = IERC20(0xA067237f8016d5e3770CF08b20E343Ab9ee813d5);\r\n    IERC20 public dai = IERC20(0x6B175474E89094C44Da98b954EedeAC495271d0F);\r\n    IERC20 public usdt = IERC20(0xdAC17F958D2ee523a2206206994597C13D831ec7);\r\n    IERC20 public usdc = IERC20(0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48);\r\n\r\n    AggregatorV3Interface private ethToUsdPriceFeed = AggregatorV3Interface(\r\n            0x5f4eC3Df9cbd43714FE2740f5E3616155c5b8419\r\n        );\r\n    AggregatorV3Interface private daiToEthPriceFeed = AggregatorV3Interface(\r\n            0x773616E4d11A78F511299002da57A0a94577F1f4\r\n        );\r\n\r\n    uint256 public immutable totalTokens = 1 * 10 ** 8 * 10 ** 9;\r\n    address public immutable admin;\r\n    uint256 public tokensSold;\r\n    bool public isGCOStarted;\r\n    address immutable fundReceiver;\r\n    uint256 public immutable tokensPerPhase = 2 * 10 ** 7 * 10 ** 9;\r\n    uint256[] public pricePerPhase;\r\n    uint256 public vestDuration = 15778458 seconds; // 6 Months\r\n    uint256 public cliffPeriod = 2629743 seconds; // 30 Days\r\n    uint256 public slicePeriod = 2629743 seconds; // 30 Days\r\n    uint256 public immediatePercentageReleased = 25; // 25%\r\n\r\n    uint256 private startTime;\r\n    uint256 public phaseDuration;\r\n\r\n    struct VestingSchedule {\r\n        address beneficiary;\r\n        uint256 cliff;\r\n        uint256 start;\r\n        uint256 duration;\r\n        uint256 slicePeriodSeconds;\r\n        uint256 amountTotal;\r\n        uint256 released;\r\n    }\r\n    mapping(address => mapping(uint256 => VestingSchedule)) public vestedUserDetail;\r\n    mapping(address => uint256) private holdersVestingCount;\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event TokensClaimed(address indexed claimer, uint256 releasableTokens, uint256 purchaseIndex);\r\n    event TokenReleased(uint256 releaseable, uint256 claimed);\r\n\r\n    constructor() {\r\n        pricePerPhase = new uint256[](5);\r\n        pricePerPhase[0] = 11404800000000000; //0.0114048     \r\n        pricePerPhase[1] = 12545280000000000; //0.01254528\r\n        pricePerPhase[2] = 13799808000000000; //0.013799808\r\n        pricePerPhase[3] = 15179789000000000; //0.015179789\r\n        pricePerPhase[4] = 16697768000000000; //0.016697768\r\n        admin = msg.sender;\r\n        phaseDuration = 604800;\r\n        fundReceiver = address(0xe93f05036cCdEb0372Bf24662676263201863B05);\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == admin, \"You're not authorized!\");\r\n        _;\r\n    }\r\n\r\n     function createVestingSchedule(\r\n        address _beneficiary,\r\n        uint256 _start,\r\n        uint256 _cliff,\r\n        uint256 _duration,\r\n        uint256 _slicePeriodSeconds,\r\n        uint256 _amount\r\n    ) internal {\r\n        require(_duration >= _cliff, \"TokenVesting: duration must be >= cliff\");\r\n        uint256 cliff = _start+_cliff;\r\n       \r\n        uint256 currentVestingIndex = holdersVestingCount[_beneficiary]++;\r\n        vestedUserDetail[_beneficiary][currentVestingIndex] = VestingSchedule(\r\n            _beneficiary,\r\n            cliff,\r\n            _start,\r\n            _duration,\r\n            _slicePeriodSeconds,\r\n            _amount,\r\n            0\r\n        );\r\n    }\r\n\r\n    function getVestingUserCount(address _beneficiary) external view returns (uint256) {\r\n        return holdersVestingCount[_beneficiary];\r\n    }\r\n\r\n\r\n    function getReleaseableAmount(address beneficiary) public view returns (uint256 totalReleasable, uint256 totalRemaining) {\r\n        uint256 vestingCount = holdersVestingCount[beneficiary];\r\n        for (uint256 i = 0; i < vestingCount; i++) {\r\n            VestingSchedule storage vestingSchedule = vestedUserDetail[beneficiary][i];\r\n            (uint256 releasable, uint256 remaining) = _computeReleasableAmount(vestingSchedule);\r\n\r\n            totalReleasable += releasable;\r\n            totalRemaining += remaining;\r\n        }\r\n        return (totalReleasable, totalRemaining);\r\n    }\r\n\r\n    function claimReleasableTokens() public {\r\n        uint256 totalReleasable;\r\n        uint256 totalRemaining;\r\n        uint256 vestingCount = holdersVestingCount[msg.sender];\r\n        require(vestingCount > 0, \"No tokens purchased\");\r\n        for (uint256 i = 0; i < vestingCount; i++) {\r\n            VestingSchedule storage vestingSchedule = vestedUserDetail[msg.sender][i];\r\n            (uint256 releasable, uint256 remaining) = _computeReleasableAmount(vestingSchedule);\r\n            totalReleasable += releasable;\r\n            totalRemaining += remaining;\r\n\r\n            vestingSchedule.released += releasable;\r\n        }\r\n        require(totalReleasable>0,\"NO tokens to claim!\");\r\n        grl.transfer(msg.sender,totalReleasable);\r\n    }\r\n\r\n  function _computeReleasableAmount(VestingSchedule memory vestingSchedule) \r\n        internal view returns (uint256 releasable, uint256 remaining) {\r\n\r\n        uint256 currentTime = block.timestamp;\r\n        uint256 totalVested = 0;\r\n        if (currentTime < vestingSchedule.cliff) {\r\n            return (0, vestingSchedule.amountTotal - vestingSchedule.released);\r\n        } else if (currentTime >= vestingSchedule.start + vestingSchedule.duration) {\r\n            releasable = vestingSchedule.amountTotal - vestingSchedule.released;\r\n            return (releasable, 0);\r\n        } else {\r\n            \r\n            uint256 timeFromCliffEnd = currentTime - vestingSchedule.cliff;\r\n            uint256 secondsPerSlice = vestingSchedule.slicePeriodSeconds;\r\n            uint256 vestedSlicePeriods = timeFromCliffEnd / secondsPerSlice;\r\n            uint256 vestedSeconds = vestedSlicePeriods * secondsPerSlice;\r\n\r\n            totalVested = (vestingSchedule.amountTotal * vestedSeconds) / vestingSchedule.duration;\r\n        }\r\n\r\n        releasable = totalVested - vestingSchedule.released;\r\n        remaining = vestingSchedule.amountTotal - totalVested;\r\n        return (releasable, remaining);\r\n    }\r\n\r\n     function buyWithEth() public noReentrant  payable {\r\n        require(isGCOStarted == true, \"GCO not started yet!\");\r\n        require(msg.value > 0, \"Inavlid eth amount\");\r\n        (uint256 grlEthPrice, ) = getGrlPrice();\r\n        require(msg.value >= grlEthPrice, \"Lower value than Price\");\r\n        uint256 tokensToBuy = grlOfEth(msg.value);\r\n        require(\r\n            tokensSold + tokensToBuy <= totalTokens,\r\n            \"Not enough tokens left\"\r\n        );\r\n        require(\r\n            block.timestamp <= startTime + phaseDuration * 5,\r\n            \"No more coin offering!\"\r\n        );\r\n        uint256 immediateTokens = (tokensToBuy*immediatePercentageReleased)/100;\r\n        uint256 tokenToVest = tokensToBuy - immediateTokens;\r\n        createVestingSchedule(msg.sender, block.timestamp, cliffPeriod, vestDuration, slicePeriod, tokenToVest);\r\n        grl.transfer(msg.sender, immediateTokens);\r\n        (bool success, ) = fundReceiver.call{value: msg.value}(\"\");\r\n        require(success);\r\n        tokensSold += tokensToBuy;\r\n        emit Transfer(address(this), msg.sender, tokensToBuy);\r\n    }\r\n\r\n\r\n    function buyWithToken(address tokenAddress, uint256 _amount) noReentrant public {\r\n        require(isGCOStarted == true, \"GCO not started yet!\");\r\n        require(_amount > 0);\r\n        (, uint256 priceOfGrl) = getGrlPrice();\r\n        require(_amount >= priceOfGrl, \"Lower value than Price\");\r\n        uint256 tokensToBuy = grlOfDai(_amount);\r\n        require(tokensSold + tokensToBuy <= totalTokens, \"Not enough tokens left\");\r\n        require(block.timestamp <= startTime + phaseDuration * 5, \"No more coin offering!\");\r\n\r\n        IERC20 token = IERC20(tokenAddress);\r\n        require(token.transferFrom(msg.sender, fundReceiver, _amount), \"You must Deposit some tokens\");\r\n        uint256 immediateTokens = (tokensToBuy*immediatePercentageReleased)/100;\r\n        uint256 tokenToVest = tokensToBuy - immediateTokens;\r\n        createVestingSchedule(msg.sender, block.timestamp, cliffPeriod, vestDuration, slicePeriod, tokenToVest);\r\n        tokensSold += tokensToBuy;\r\n        grl.transfer(msg.sender, immediateTokens);\r\n    }\r\n\r\n    function setVestingDuration(uint256 _newDuration) external onlyOwner {\r\n        require(_newDuration > 0,\"Duration will be > 0!\");\r\n        vestDuration = _newDuration*86400;\r\n    }\r\n\r\n    function setCliffeDuration(uint256 _newCliffeDuration) external onlyOwner {\r\n        require(_newCliffeDuration > 0,\"Invalid cliff period!\");\r\n        cliffPeriod = _newCliffeDuration*86400;\r\n    }\r\n\r\n    function setPrice(uint256 _index,uint256 _price) external onlyOwner{\r\n        require(_price>0,\"Price will be > 0!\");\r\n        pricePerPhase[_index] = _price;\r\n    }\r\n\r\n    function setPhaseDuration(uint256 _durationPerPhase) external onlyOwner{\r\n        require(_durationPerPhase > 0,\"Phase Duration will be > 0!\");\r\n        phaseDuration = _durationPerPhase*86400;\r\n    }\r\n\r\n    function setPercentageReleased(uint256 _newPercentage) external onlyOwner{\r\n        require(_newPercentage > 0,\"Percenatge will be > 0!\");\r\n        immediatePercentageReleased = _newPercentage;\r\n    }\r\n\r\n    function ethPriceInUSD() public view returns (uint256) {\r\n        int256 answer = ethToUsdPriceFeed.latestAnswer();\r\n        return uint256(answer * 10000000000);\r\n    }\r\n\r\n    function daiPriceInEth() public view returns (uint256) {\r\n        (, int256 answer, , , ) = daiToEthPriceFeed.latestRoundData();\r\n        return uint256(answer);\r\n    }\r\n\r\n    function convertDaiToEth(uint256 daiAmount) public view returns (uint256) {\r\n        uint256 daiPrice = daiPriceInEth();\r\n        uint256 daiAmountInEth = (daiPrice * daiAmount) / 1000000000000000000;\r\n        return daiAmountInEth;\r\n    }\r\n\r\n    function convertEthToUsd(uint256 ethAmount) public view returns (uint256) {\r\n        uint256 ethPrice = ethPriceInUSD();\r\n        uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1000000000000000000;\r\n        return ethAmountInUsd;\r\n    }\r\n\r\n    function startGCO() external onlyOwner {\r\n        isGCOStarted = true;\r\n        startTime = block.timestamp;\r\n    }\r\n\r\n    function grlOfDai(uint256 _amountOfDAI) public view returns (uint256) {\r\n        (, uint256 price) = getGrlPrice();\r\n        uint256 tokensCalculated = (_amountOfDAI * 10 ** 9) / price;\r\n        return tokensCalculated;\r\n    }\r\n\r\n    function grlOfEth(uint256 _amountOfEth) public view returns (uint256) {\r\n        (, uint256 price) = getGrlPrice();\r\n        uint256 convertedUsd = convertEthToUsd(_amountOfEth);\r\n        uint256 tokensCalculated = (convertedUsd * 10 ** 9) / price;\r\n        return tokensCalculated;\r\n    }\r\n\r\n    function getGrlPrice() public view returns (uint256, uint256) {\r\n        require(isGCOStarted == true, \"GCO not started yet!\");\r\n        uint256 currentTime = block.timestamp;\r\n        uint256 fixedFrice = pricePerPhase[4];\r\n        uint256 grlEthPrice;\r\n        uint256 grlPrice;\r\n        if (currentTime <= startTime + phaseDuration) {\r\n            grlPrice = pricePerPhase[0];\r\n            grlEthPrice = convertDaiToEth(pricePerPhase[0]);\r\n        } else if (\r\n            tokensSold >= tokensPerPhase ||\r\n            currentTime <= startTime + phaseDuration * 2\r\n        ) {\r\n            grlPrice = pricePerPhase[1];\r\n            grlEthPrice = convertDaiToEth(pricePerPhase[1]);\r\n        } else if (\r\n            tokensSold >= tokensPerPhase * 2 ||\r\n            currentTime <= startTime + phaseDuration * 3\r\n        ) {\r\n            grlPrice = pricePerPhase[2];\r\n            grlEthPrice = convertDaiToEth(pricePerPhase[2]);\r\n        } else if (\r\n            tokensSold >= tokensPerPhase * 3 ||\r\n            currentTime <= startTime + phaseDuration * 4\r\n        ) {\r\n            grlPrice = pricePerPhase[3];\r\n            grlEthPrice = convertDaiToEth(pricePerPhase[3]);\r\n        } else if (\r\n            tokensSold >= tokensPerPhase * 4 ||\r\n            currentTime <= startTime + phaseDuration * 5\r\n        ) {\r\n            grlPrice = fixedFrice;\r\n            grlEthPrice = convertDaiToEth(fixedFrice);\r\n        } else {\r\n            grlPrice = fixedFrice;\r\n            grlEthPrice = convertDaiToEth(fixedFrice);\r\n        }\r\n\r\n        return (grlEthPrice, grlPrice);\r\n    }\r\n\r\n    function withdrawGrl() external onlyOwner {\r\n        uint256 grlBalance = grl.balanceOf(address(this));\r\n        require(grlBalance > 0, \"no grl in contract!\");\r\n        grl.transfer(admin, grlBalance);\r\n    }\r\n\r\n    function withdrawEth()external onlyOwner{\r\n         (bool success, ) = fundReceiver.call{value: address(this).balance}(\"\");\r\n        require(success);\r\n    }\r\n\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"releaseable\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"claimed\",\"type\":\"uint256\"}],\"name\":\"TokenReleased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"claimer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"releasableTokens\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"purchaseIndex\",\"type\":\"uint256\"}],\"name\":\"TokensClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyWithEth\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"buyWithToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimReleasableTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cliffPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"daiAmount\",\"type\":\"uint256\"}],\"name\":\"convertDaiToEth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ethAmount\",\"type\":\"uint256\"}],\"name\":\"convertEthToUsd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dai\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"daiPriceInEth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ethPriceInUSD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getGrlPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"getReleaseableAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalReleasable\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalRemaining\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"getVestingUserCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"grl\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountOfDAI\",\"type\":\"uint256\"}],\"name\":\"grlOfDai\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountOfEth\",\"type\":\"uint256\"}],\"name\":\"grlOfEth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"immediatePercentageReleased\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isGCOStarted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"phaseDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pricePerPhase\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newCliffeDuration\",\"type\":\"uint256\"}],\"name\":\"setCliffeDuration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newPercentage\",\"type\":\"uint256\"}],\"name\":\"setPercentageReleased\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_durationPerPhase\",\"type\":\"uint256\"}],\"name\":\"setPhaseDuration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"setPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newDuration\",\"type\":\"uint256\"}],\"name\":\"setVestingDuration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"slicePeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startGCO\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokensPerPhase\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokensSold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdc\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdt\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vestDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"vestedUserDetail\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"cliff\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"slicePeriodSeconds\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountTotal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"released\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawEth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawGrl\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "ICO", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://ed3fd487a6490568fc3ebb7a6fca87751a16b30a64d1dce6f028993b208edc0e"}