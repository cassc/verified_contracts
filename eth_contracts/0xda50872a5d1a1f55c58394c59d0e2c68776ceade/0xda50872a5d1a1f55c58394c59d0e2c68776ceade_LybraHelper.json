{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"lybra/helpers/LybraHelper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\npragma solidity ^0.8.17;\\r\\n\\r\\nimport \\\"../interfaces/Iconfigurator.sol\\\";\\r\\nimport \\\"../interfaces/IEUSD.sol\\\";\\r\\nimport \\\"../interfaces/ILybra.sol\\\";\\r\\nimport \\\"../interfaces/IMiningIncentives.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\n\\r\\ninterface IStakingRewards {\\r\\n    function rewardRatio() external view returns (uint256);\\r\\n}\\r\\n\\r\\ncontract LybraHelper is Ownable {\\r\\n    Iconfigurator public immutable configurator;\\r\\n    address[] public pools;\\r\\n    AggregatorV3Interface public priceFeed;\\r\\n    IMiningIncentives miningIncentives;\\r\\n    event BatchClaimingRewardsForUsers(address indexed caller, string desc, uint256 total);\\r\\n\\r\\n    //priceFeed = 0x5f4eC3Df9cbd43714FE2740f5E3616155c5b8419\\r\\n    constructor(address _config, address _etherOracle, address _miningIncentives) {\\r\\n        configurator = Iconfigurator(_config);\\r\\n        priceFeed = AggregatorV3Interface(_etherOracle);\\r\\n        miningIncentives = IMiningIncentives(_miningIncentives);\\r\\n    }\\r\\n\\r\\n    function setPools(address[] memory _pools) external onlyOwner {\\r\\n        pools = _pools;\\r\\n    }\\r\\n\\r\\n    function getAssetPrice(address pool) public view returns (uint256) {\\r\\n        (,int price, , , ) = priceFeed.latestRoundData();\\r\\n        return ILybra(pool).getAsset2EtherExchangeRate() * uint(price) / 1e18;\\r\\n    }\\r\\n\\r\\n    function getEtherPrice() public view returns(uint256) {\\r\\n        (,int etherPrice, , , ) = priceFeed.latestRoundData();\\r\\n        return uint256(etherPrice);\\r\\n    }\\r\\n\\r\\n    function getToTalTVL() external view returns(uint256 a) {\\r\\n        for(uint i; i < pools.length; i++) {\\r\\n            a += ILybra(pools[i]).totalDepositedAsset() * getAssetPrice(pools[i]);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function getCollateralRatio(\\r\\n        address user,\\r\\n        address pool\\r\\n    ) public view returns (uint256) {\\r\\n        ILybra lybraPool = ILybra(pool);\\r\\n        if (lybraPool.getBorrowedOf(user) == 0) return 1e22;\\r\\n        return\\r\\n            (lybraPool.depositedAsset(user) * getAssetPrice(pool) * 1e12) /\\r\\n            lybraPool.getBorrowedOf(user);\\r\\n    }\\r\\n\\r\\n    function getExcessIncomeAmount(\\r\\n        address pool\\r\\n    ) external view returns (uint256 assetAmount) {\\r\\n        ILybra lybraPool = ILybra(pool);\\r\\n        if (lybraPool.getVaultType() != 0) return 0;\\r\\n        address asset = lybraPool.getAsset();\\r\\n        assetAmount =  IERC20(asset).balanceOf(address(pool)) -\\r\\n            lybraPool.totalDepositedAsset();\\r\\n    }\\r\\n\\r\\n    function getOverallCollateralRatio(\\r\\n        address pool\\r\\n    ) public view returns (uint256) {\\r\\n        ILybra lybraPool = ILybra(pool);\\r\\n        return\\r\\n            (lybraPool.totalDepositedAsset() * getAssetPrice(pool) * 1e12) /\\r\\n            lybraPool.getPoolTotalCirculation();\\r\\n    }\\r\\n\\r\\n    function getLiquidateableAmount(\\r\\n        address user,\\r\\n        address pool\\r\\n    ) external view returns (uint256 etherAmount, uint256 eusdAmount) {\\r\\n        ILybra lybraPool = ILybra(pool);\\r\\n        if (getCollateralRatio(user, pool) > 150 * 1e18) return (0, 0);\\r\\n        if (\\r\\n            getCollateralRatio(user, pool) >= 125 * 1e18 ||\\r\\n            getOverallCollateralRatio(pool) >= 150 * 1e18 || lybraPool.getVaultType() != 0\\r\\n        ) {\\r\\n            etherAmount = lybraPool.depositedAsset(user) / 2;\\r\\n            eusdAmount = (etherAmount * getAssetPrice(pool)) / 1e8;\\r\\n        } else {\\r\\n            etherAmount = lybraPool.depositedAsset(user);\\r\\n            eusdAmount = (etherAmount * getAssetPrice(pool)) / 1e8;\\r\\n            if (getCollateralRatio(user, pool) >= 1e20) {\\r\\n                eusdAmount =\\r\\n                    (eusdAmount * 1e20) /\\r\\n                    getCollateralRatio(user, pool);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function getRedeemableAmount(address user, address pool) external view returns (uint256) {\\r\\n        if (!configurator.isRedemptionProvider(user)) return 0;\\r\\n        return ILybra(pool).getBorrowedOf(user);\\r\\n    }\\r\\n\\r\\n    function getRedeemableAmounts(address[] calldata users, address pool)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256[] memory amounts)\\r\\n    {\\r\\n        amounts = new uint256[](users.length);\\r\\n        for (uint256 i = 0; i < users.length; i++) {\\r\\n            if (!configurator.isRedemptionProvider(users[i])) {\\r\\n                amounts[i] = 0;\\r\\n            } else {\\r\\n                amounts[i] = ILybra(pool).getBorrowedOf(users[i]);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function getLiquidateFund(\\r\\n        address user,\\r\\n        address pool\\r\\n    ) external view returns (uint256 eusdAmount) {\\r\\n        IEUSD token = ILybra(pool).getVaultType() == 0 ? IEUSD(configurator.getEUSDAddress()) : IEUSD(configurator.peUSD());\\r\\n        uint256 appro = token.allowance(\\r\\n            user,\\r\\n            address(pool)\\r\\n        );\\r\\n        if (appro == 0) return 0;\\r\\n        uint256 bal = token.balanceOf(user);\\r\\n        eusdAmount = appro > bal ? bal : appro;\\r\\n    }\\r\\n\\r\\n    function getBuyAbleEarnings(address[] memory users) external view returns(uint256[] memory amounts) {\\r\\n        amounts = new uint256[](users.length);\\r\\n        for(uint256 i; i < users.length; i++) {\\r\\n            if(miningIncentives.isOtherEarningsClaimable(users[i])) {\\r\\n                amounts[i] = miningIncentives.earned(users[i]);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function getWithdrawableAmount(\\r\\n        address user,\\r\\n        address pool\\r\\n    ) external view returns (uint256) {\\r\\n        ILybra lybraPool = ILybra(pool);\\r\\n        if (lybraPool.getBorrowedOf(user) == 0)\\r\\n            return lybraPool.depositedAsset(user);\\r\\n        uint256 safeCollateralRatio = configurator.getSafeCollateralRatio(pool);\\r\\n        if (getCollateralRatio(user, pool) <= safeCollateralRatio) return 0;\\r\\n        return\\r\\n            (lybraPool.depositedAsset(user) *\\r\\n                (getCollateralRatio(user, pool) - safeCollateralRatio)) /\\r\\n            getCollateralRatio(user, pool);\\r\\n    }\\r\\n\\r\\n    function getEusdMintableAmount(\\r\\n        address user,\\r\\n        address pool\\r\\n    ) external view returns (uint256 eusdAmount) {\\r\\n        ILybra lybraPool = ILybra(pool);\\r\\n        uint256 safeCollateralRatio = configurator.getSafeCollateralRatio(pool);\\r\\n        if (getCollateralRatio(user, pool) <= safeCollateralRatio) return 0;\\r\\n        return\\r\\n            (lybraPool.depositedAsset(user) * getAssetPrice(pool)) /\\r\\n            1e24 /\\r\\n            safeCollateralRatio -\\r\\n            lybraPool.getBorrowedOf(user);\\r\\n    }\\r\\n\\r\\n    function getStakingPoolAPR(\\r\\n        address poolAddress,\\r\\n        address lbr,\\r\\n        address lpToken\\r\\n    ) external view returns (uint256 apr) {\\r\\n        uint256 pool_lp_stake = IERC20(poolAddress).totalSupply();\\r\\n        uint256 rewardRatio = IStakingRewards(poolAddress).rewardRatio();\\r\\n        uint256 lp_lbr_amount = IERC20(lbr).balanceOf(lpToken);\\r\\n        uint256 lp_total_supply = IERC20(lpToken).totalSupply();\\r\\n        apr =\\r\\n            (lp_total_supply * rewardRatio * 86_400 * 365 * 1e6) /\\r\\n            (pool_lp_stake * lp_lbr_amount * 2);\\r\\n    }\\r\\n\\r\\n    function getTokenPrice(\\r\\n        address token,\\r\\n        address UniPool,\\r\\n        address wethAddress\\r\\n    ) external view returns (uint256 price) {\\r\\n        uint256 token_in_pool = IERC20(token).balanceOf(UniPool);\\r\\n        uint256 weth_in_pool = IERC20(wethAddress).balanceOf(UniPool);\\r\\n        price =\\r\\n            (weth_in_pool * getEtherPrice() * 1e10) /\\r\\n            token_in_pool;\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"lybra/interfaces/IMiningIncentives.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\r\\npragma solidity ^0.8.17;\\r\\n\\r\\ninterface IMiningIncentives {\\r\\n    function totalStaked() external view returns (uint256);\\r\\n    function stakedOf(address user) external view returns (uint256);\\r\\n    function earned(address user) external view returns (uint256);\\r\\n    function isOtherEarningsClaimable(address user) external view returns (bool);\\r\\n    function esLBR() external view returns (address);\\r\\n    function LBR() external view returns (address);\\r\\n    function refreshReward(address _account) external;\\r\\n}\\r\\n\"\r\n    },\r\n    \"lybra/interfaces/ILybra.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\r\\npragma solidity ^0.8.17;\\r\\n\\r\\ninterface ILybra {\\r\\n    function totalDepositedAsset() external view returns (uint256);\\r\\n    function safeCollateralRatio() external view returns (uint256);\\r\\n    function depositedAsset(address user) external view returns (uint256);\\r\\n    function getBorrowedOf(address user) external view returns (uint256);\\r\\n    function getVaultType() external view returns (uint8);\\r\\n    function totaldepositedAsset() external view returns (uint256);\\r\\n    function getPoolTotalCirculation() external view returns (uint256);\\r\\n    function getAssetPrice() external view returns (uint256);\\r\\n    function getAsset() external view returns (address);\\r\\n    function getAsset2EtherExchangeRate() external view returns (uint256);\\r\\n    function burn(address onBehalfOf, uint256 amount) external;\\r\\n}\\r\\n\"\r\n    },\r\n    \"lybra/interfaces/IEUSD.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\r\\npragma solidity ^0.8.17;\\r\\n\\r\\ninterface IEUSD {\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    function getTotalShares() external view returns (uint256);\\r\\n\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    function sharesOf(address _account) external view returns (uint256);\\r\\n\\r\\n    function allowance(\\r\\n        address owner,\\r\\n        address spender\\r\\n    ) external view returns (uint256);\\r\\n\\r\\n    function approve(address _spender, uint256 _amount) external returns (bool);\\r\\n\\r\\n    function transferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) external returns (bool);\\r\\n\\r\\n    function transferShares(\\r\\n        address _recipient,\\r\\n        uint256 _sharesAmount\\r\\n    ) external returns (uint256);\\r\\n\\r\\n    function getSharesByMintedEUSD(\\r\\n        uint256 _EUSDAmount\\r\\n    ) external view returns (uint256);\\r\\n\\r\\n    function getMintedEUSDByShares(\\r\\n        uint256 _sharesAmount\\r\\n    ) external view returns (uint256);\\r\\n\\r\\n    function mint(\\r\\n        address _recipient,\\r\\n        uint256 _mintAmount\\r\\n    ) external returns (uint256 newTotalShares);\\r\\n\\r\\n    function burnShares(\\r\\n        address _account,\\r\\n        uint256 burnAmount\\r\\n    ) external returns (uint256 newTotalShares);\\r\\n\\r\\n    function burn(\\r\\n        address _account,\\r\\n        uint256 burnAmount\\r\\n    ) external returns (uint256 newTotalShares);\\r\\n\\r\\n    function transfer(address to, uint256 amount) external returns (bool);\\r\\n}\\r\\n\"\r\n    },\r\n    \"lybra/interfaces/Iconfigurator.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\r\\n\\r\\npragma solidity ^0.8.17;\\r\\n\\r\\ninterface Iconfigurator {\\r\\n    function mintVault(address pool) external view returns(bool);\\r\\n    function mintVaultMaxSupply(address pool) external view returns(uint256);\\r\\n    function vaultMintPaused(address pool) external view returns(bool);\\r\\n    function vaultBurnPaused(address pool) external view returns(bool);\\r\\n    function tokenMiner(address pool) external view returns(bool);\\r\\n    function getSafeCollateralRatio(address pool) external view returns(uint256);\\r\\n    function getBadCollateralRatio(address pool) external view returns(uint256);\\r\\n    function getVaultWeight(address pool) external view returns (uint256);\\r\\n    function vaultMintFeeApy(address pool) external view returns(uint256);\\r\\n    function vaultKeeperRatio(address pool) external view returns(uint256);\\r\\n    function redemptionFee() external view returns(uint256);\\r\\n    function getEUSDAddress() external view returns(address);\\r\\n    function peUSD() external view returns(address);\\r\\n    function eUSDMiningIncentives() external view returns(address);\\r\\n    function getProtocolRewardsPool() external view returns(address);\\r\\n    function flashloanFee() external view returns(uint256);\\r\\n    function getEUSDMaxLocked() external view returns (uint256);\\r\\n    function stableToken() external view returns (address);\\r\\n    function isRedemptionProvider(address user) external view returns (bool);\\r\\n    function becomeRedemptionProvider(bool _bool) external;\\r\\n    function refreshMintReward(address user) external;\\r\\n    function distributeRewards() external;\\r\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\r\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_config\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_etherOracle\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_miningIncentives\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"desc\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"}],\"name\":\"BatchClaimingRewardsForUsers\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"configurator\",\"outputs\":[{\"internalType\":\"contract Iconfigurator\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"getAssetPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"users\",\"type\":\"address[]\"}],\"name\":\"getBuyAbleEarnings\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"getCollateralRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEtherPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"getEusdMintableAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"eusdAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"getExcessIncomeAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"assetAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"getLiquidateFund\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"eusdAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"getLiquidateableAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"etherAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"eusdAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"getOverallCollateralRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"getRedeemableAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"users\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"getRedeemableAmounts\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"poolAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"lbr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"lpToken\",\"type\":\"address\"}],\"name\":\"getStakingPoolAPR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"apr\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getToTalTVL\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"a\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"UniPool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"wethAddress\",\"type\":\"address\"}],\"name\":\"getTokenPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"getWithdrawableAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pools\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceFeed\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_pools\",\"type\":\"address[]\"}],\"name\":\"setPools\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "LybraHelper", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000c8353594eeedc5ce5a4544d3d9907b694c4690ff0000000000000000000000005f4ec3df9cbd43714fe2740f5e3616155c5b84190000000000000000000000000b2659734121feb636534213a159ac91691edbde", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}