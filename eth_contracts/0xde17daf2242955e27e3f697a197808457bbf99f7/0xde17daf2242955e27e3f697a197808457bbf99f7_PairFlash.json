{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\\n    function __AccessControl_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControl_init_unchained() internal onlyInitializing {\\n    }\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        StringsUpgradeable.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        StringsUpgradeable.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20Upgradeable.sol\\\";\\nimport \\\"./extensions/IERC20MetadataUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable, IERC20MetadataUpgradeable {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    function __ERC20_init(string memory name_, string memory symbol_) internal onlyInitializing {\\n        __ERC20_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address from, address to, uint256 amount) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[45] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20PermitUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20PermitUpgradeable {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../extensions/IERC20PermitUpgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20Upgradeable token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20Upgradeable token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20PermitUpgradeable token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20Upgradeable token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && AddressUpgradeable.isContract(address(token));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUpgradeable {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/math/SignedMathUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMathUpgradeable {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/MathUpgradeable.sol\\\";\\nimport \\\"./math/SignedMathUpgradeable.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = MathUpgradeable.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMathUpgradeable.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, MathUpgradeable.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\"\r\n    },\r\n    \"@uniswap/v2-core/contracts/interfaces/IUniswapV2Callee.sol\": {\r\n      \"content\": \"pragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Callee {\\n    function uniswapV2Call(address sender, uint amount0, uint amount1, bytes calldata data) external;\\n}\\n\"\r\n    },\r\n    \"@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol\": {\r\n      \"content\": \"pragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Factory {\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\\n\\n    function feeTo() external view returns (address);\\n    function feeToSetter() external view returns (address);\\n\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\n    function allPairs(uint) external view returns (address pair);\\n    function allPairsLength() external view returns (uint);\\n\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\n\\n    function setFeeTo(address) external;\\n    function setFeeToSetter(address) external;\\n}\\n\"\r\n    },\r\n    \"@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\": {\r\n      \"content\": \"pragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Pair {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external pure returns (string memory);\\n    function symbol() external pure returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint amount0In,\\n        uint amount1In,\\n        uint amount0Out,\\n        uint amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\n    function factory() external view returns (address);\\n    function token0() external view returns (address);\\n    function token1() external view returns (address);\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n    function price0CumulativeLast() external view returns (uint);\\n    function price1CumulativeLast() external view returns (uint);\\n    function kLast() external view returns (uint);\\n\\n    function mint(address to) external returns (uint liquidity);\\n    function burn(address to) external returns (uint amount0, uint amount1);\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n    function skim(address to) external;\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IPrimaryLendingPlatform.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.19;\\n\\ninterface IPrimaryLendingPlatform {\\n    struct Ratio {\\n        uint8 numerator;\\n        uint8 denominator;\\n    }\\n\\n    struct ProjectTokenInfo {\\n        bool isListed;\\n        bool isDepositPaused; // true - paused, false - not paused\\n        bool isWithdrawPaused; // true - paused, false - not paused\\n        Ratio loanToValueRatio;\\n    }\\n\\n    struct LendingTokenInfo {\\n        bool isListed;\\n        bool isPaused;\\n        address bLendingToken;\\n    }\\n\\n    struct DepositPosition {\\n        uint256 depositedProjectTokenAmount;\\n    }\\n\\n    struct BorrowPosition {\\n        uint256 loanBody; // [loanBody] = lendingToken\\n        uint256 accrual; // [accrual] = lendingToken\\n    }\\n\\n    //************* ADMIN CONTRACT FUNCTIONS ********************************\\n\\n    /**\\n     * @dev Grants the role to a new account.\\n     * @param role The role to grant.\\n     * @param newModerator The address of the account receiving the role.\\n     */\\n    function grantRole(bytes32 role, address newModerator) external;\\n\\n    /**\\n     * @dev Revokes the moderator role from an account.\\n     * @param role The role to revoke.\\n     * @param moderator The address of the account losing the role.\\n     */\\n    function revokeRole(bytes32 role, address moderator) external;\\n\\n    /**\\n     * @dev Sets the address of the new moderator contract by the admin.\\n     * @param newModeratorContract The address of the new moderator contract.\\n     */\\n    function setPrimaryLendingPlatformModeratorModerator(address newModeratorContract) external;\\n\\n    //************* MODERATOR CONTRACT FUNCTIONS ********************************\\n\\n    /**\\n     * @dev Sets the address of the new price oracle by the moderator contract.\\n     * @param newPriceOracle The address of the new price oracle contract.\\n     */\\n    function setPriceOracle(address newPriceOracle) external;\\n\\n    /**\\n     * @dev Sets the address of the new primary index token leverage contract by the moderator contract.\\n     * @param newPrimaryLendingPlatformLeverage The address of the new primary index token leverage contract.\\n     */\\n    function setPrimaryLendingPlatformLeverage(address newPrimaryLendingPlatformLeverage) external;\\n\\n    /**\\n     * @dev Sets whether an address is a related contract or not by the moderator contract.\\n     * @param relatedContract The address of the contract to be set as related.\\n     * @param isRelated Boolean to indicate whether the contract is related or not.\\n     */\\n    function setRelatedContract(address relatedContract, bool isRelated) external;\\n\\n    /**\\n     * @dev Removes a project token from the list by the moderator contract.\\n     * @param projectTokenId The ID of the project token to be removed.\\n     * @param projectToken The address of the project token to be removed.\\n     */\\n    function removeProjectToken(uint256 projectTokenId, address projectToken) external;\\n\\n    /**\\n     * @dev Removes a lending token from the list by the moderator contract.\\n     * @param lendingTokenId The ID of the lending token to be removed.\\n     * @param lendingToken The address of the lending token to be removed.\\n     */\\n    function removeLendingToken(uint256 lendingTokenId, address lendingToken) external;\\n\\n    /**\\n     * @dev Sets the borrow limit per collateral by the moderator contract.\\n     * @param projectToken The address of the project token.\\n     * @param newBorrowLimit The new borrow limit.\\n     */\\n    function setBorrowLimitPerCollateralAsset(address projectToken, uint256 newBorrowLimit) external;\\n\\n    /**\\n     * @dev Sets the borrow limit per lending asset by the moderator contract.\\n     * @param lendingToken The address of the lending token.\\n     * @param newBorrowLimit The new borrow limit.\\n     */\\n    function setBorrowLimitPerLendingAsset(address lendingToken, uint256 newBorrowLimit) external;\\n\\n    /**\\n     * @dev Sets the parameters for a project token\\n     * @param projectToken The address of the project token\\n     * @param isDepositPaused The new pause status for deposit\\n     * @param isWithdrawPaused The new pause status for withdrawal\\n     * @param loanToValueRatioNumerator The numerator of the loan-to-value ratio for the project token\\n     * @param loanToValueRatioDenominator The denominator of the loan-to-value ratio for the project token\\n     */\\n    function setProjectTokenInfo(\\n        address projectToken,\\n        bool isDepositPaused,\\n        bool isWithdrawPaused,\\n        uint8 loanToValueRatioNumerator,\\n        uint8 loanToValueRatioDenominator\\n    ) external;\\n\\n    /**\\n     * @dev Pauses or unpauses deposits and withdrawals of a project token.\\n     * @param projectToken The address of the project token.\\n     * @param isDepositPaused Boolean indicating whether deposits are paused or unpaused.\\n     * @param isWithdrawPaused Boolean indicating whether withdrawals are paused or unpaused.\\n     */\\n    function setPausedProjectToken(address projectToken, bool isDepositPaused, bool isWithdrawPaused) external;\\n\\n    /**\\n     * @dev Sets the bLendingToken and paused status of a lending token.\\n     * @param lendingToken The address of the lending token.\\n     * @param bLendingToken The address of the bLendingToken.\\n     * @param isPaused Boolean indicating whether the lending token is paused or unpaused.\\n     * @param loanToValueRatioNumerator The numerator of the loan-to-value ratio for the lending token.\\n     * @param loanToValueRatioDenominator The denominator of the loan-to-value ratio for the lending token.\\n     */\\n    function setLendingTokenInfo(\\n        address lendingToken,\\n        address bLendingToken,\\n        bool isPaused,\\n        uint8 loanToValueRatioNumerator,\\n        uint8 loanToValueRatioDenominator\\n    ) external;\\n\\n    /**\\n     * @dev Pauses or unpauses a lending token.\\n     * @param lendingToken The address of the lending token.\\n     * @param isPaused Boolean indicating whether the lending token is paused or unpaused.\\n     */\\n    function setPausedLendingToken(address lendingToken, bool isPaused) external;\\n\\n    //************* PUBLIC FUNCTIONS ********************************\\n    //************* Deposit FUNCTION ********************************\\n\\n    /**\\n     * @dev Deposits project tokens and calculates the deposit position.\\n     * @param projectToken The address of the project token to be deposited.\\n     * @param projectTokenAmount The amount of project tokens to be deposited.\\n     */\\n    function deposit(address projectToken, uint256 projectTokenAmount) external;\\n\\n    /**\\n     * @dev Deposits project tokens on behalf of a user from a related contract and calculates the deposit position.\\n     * @param projectToken The address of the project token to be deposited.\\n     * @param projectTokenAmount The amount of project tokens to be deposited.\\n     * @param user The address of the user who representative deposit.\\n     * @param beneficiary The address of the beneficiary whose deposit position will be updated.\\n     */\\n    function depositFromRelatedContracts(address projectToken, uint256 projectTokenAmount, address user, address beneficiary) external;\\n\\n    /**\\n     * @dev Decreases the deposited project token amount of the user's deposit position by the given amount,\\n     * transfers the given amount of project tokens to the receiver, and returns the amount transferred.\\n     * @param projectToken The address of the project token being withdrawn\\n     * @param projectTokenAmount The amount of project tokens being withdrawn\\n     * @param user The address of the user whose deposit position is being updated\\n     * @param receiver The address of the user receiving the withdrawn project tokens\\n     * @return The amount of project tokens transferred to the receiver\\n     */\\n    function calcAndTransferDepositPosition(\\n        address projectToken,\\n        uint256 projectTokenAmount,\\n        address user,\\n        address receiver\\n    ) external returns (uint256);\\n\\n    /**\\n     * @dev Calculates the deposit position for a user's deposit of a given amount of a project token.\\n     * @param projectToken The address of the project token being deposited\\n     * @param projectTokenAmount The amount of project tokens being deposited\\n     * @param user The address of the user making the deposit\\n     */\\n    function calcDepositPosition(address projectToken, uint256 projectTokenAmount, address user) external;\\n\\n    //************* Withdraw FUNCTION ********************************\\n\\n    /**\\n     * @dev Allows a user to withdraw a given amount of a project token from their deposit position.\\n     * @param projectToken The address of the project token being withdrawn\\n     * @param projectTokenAmount The amount of project tokens being withdrawn\\n     */\\n    function withdraw(address projectToken, uint256 projectTokenAmount) external;\\n\\n    /**\\n     * @dev Allows a related contract to initiate a withdrawal of a given amount of a project token from a user's deposit position.\\n     * @param projectToken The address of the project token being withdrawn\\n     * @param projectTokenAmount The amount of project tokens being withdrawn\\n     * @param user The address of the user whose deposit position is being withdrawn from\\n     * @param beneficiary The address of the user receiving the withdrawn project tokens\\n     * @return amount of project tokens withdrawn and transferred to the beneficiary\\n     */\\n    function withdrawFromRelatedContracts(\\n        address projectToken,\\n        uint256 projectTokenAmount,\\n        address user,\\n        address beneficiary\\n    ) external returns (uint256);\\n\\n    /**\\n     * @dev Allows a user to withdraw a given amount of a project token from their deposit position.\\n     * @param projectToken The address of the project token being withdrawn\\n     * @param projectTokenAmount The amount of project tokens being withdrawn\\n     * @param priceIds The priceIds need to update.\\n     * @param updateData The updateData provided by PythNetwork.\\n     */\\n    function withdraw(address projectToken, uint256 projectTokenAmount, bytes32[] memory priceIds, bytes[] calldata updateData) external payable;\\n\\n    /**\\n     * @dev Allows a related contract to initiate a withdrawal of a given amount of a project token from a user's deposit position.\\n     * @param projectToken The address of the project token being withdrawn\\n     * @param projectTokenAmount The amount of project tokens being withdrawn\\n     * @param user The address of the user whose deposit position is being withdrawn from\\n     * @param beneficiary The address of the user receiving the withdrawn project tokens\\n     * @param priceIds The priceIds need to update.\\n     * @param updateData The updateData provided by PythNetwork.\\n     * @return amount of project tokens withdrawn and transferred to the beneficiary\\n     */\\n    function withdrawFromRelatedContracts(\\n        address projectToken,\\n        uint256 projectTokenAmount,\\n        address user,\\n        address beneficiary,\\n        bytes32[] memory priceIds,\\n        bytes[] calldata updateData\\n    ) external payable returns (uint256);\\n\\n    //************* borrow FUNCTION ********************************\\n\\n    /**\\n     * @dev Allows a user to borrow lending tokens by providing project tokens as collateral.\\n     * @param projectToken The address of the project token being used as collateral.\\n     * @param lendingToken The address of the lending token being borrowed.\\n     * @param lendingTokenAmount The amount of lending tokens to be borrowed.\\n     */\\n    function borrow(\\n        address projectToken,\\n        address lendingToken,\\n        uint256 lendingTokenAmount,\\n        bytes32[] memory priceIds,\\n        bytes[] calldata updateData\\n    ) external payable;\\n\\n    /**\\n     * @dev Allows a related contract to borrow lending tokens on behalf of a user by providing project tokens as collateral.\\n     * @param projectToken The address of the project token being used as collateral.\\n     * @param lendingToken The address of the lending token being borrowed.\\n     * @param lendingTokenAmount The amount of lending tokens to be borrowed.\\n     * @param user The address of the user on whose behalf the lending tokens are being borrowed.\\n     * @return amount of lending tokens borrowed\\n     */\\n    function borrowFromRelatedContract(\\n        address projectToken,\\n        address lendingToken,\\n        uint256 lendingTokenAmount,\\n        address user,\\n        bytes32[] memory priceIds,\\n        bytes[] calldata updateData\\n    ) external payable returns (uint256 amount);\\n\\n    /**\\n     * @dev Allows a user to borrow lending tokens by providing project tokens as collateral.\\n     * @param projectToken The address of the project token being used as collateral.\\n     * @param lendingToken The address of the lending token being borrowed.\\n     * @param lendingTokenAmount The amount of lending tokens to be borrowed.\\n     */\\n    function borrow(address projectToken, address lendingToken, uint256 lendingTokenAmount) external;\\n\\n    /**\\n     * @dev Allows a related contract to borrow lending tokens on behalf of a user by providing project tokens as collateral.\\n     * @param projectToken The address of the project token being used as collateral.\\n     * @param lendingToken The address of the lending token being borrowed.\\n     * @param lendingTokenAmount The amount of lending tokens to be borrowed.\\n     * @param user The address of the user on whose behalf the lending tokens are being borrowed.\\n     * @return amount of lending tokens borrowed\\n     */\\n    function borrowFromRelatedContract(address projectToken, address lendingToken, uint256 lendingTokenAmount, address user) external returns (uint256 amount);\\n\\n    //************* supply FUNCTION ********************************\\n\\n    /**\\n     * @dev Supplies a certain amount of lending tokens to the platform.\\n     * @param lendingToken Address of the lending token.\\n     * @param lendingTokenAmount Amount of lending tokens to be supplied.\\n     */\\n    function supply(address lendingToken, uint256 lendingTokenAmount) external;\\n\\n    /**\\n     * @dev Supplies a certain amount of lending tokens to the platform from a specific user.\\n     * @param lendingToken Address of the lending token.\\n     * @param lendingTokenAmount Amount of lending tokens to be supplied.\\n     * @param user Address of the user.\\n     */\\n    function supplyFromRelatedContract(address lendingToken, uint256 lendingTokenAmount, address user) external;\\n\\n    /**\\n     * @dev Calculates the collateral available for withdrawal based on the loan-to-value ratio of a specific project token.\\n     * @param account Address of the user.\\n     * @param projectToken Address of the project token.\\n     * @param lendingToken Address of the lending token.\\n     * @return collateralProjectToWithdraw The amount of collateral available for withdrawal in the project token.\\n     */\\n    function getCollateralAvailableToWithdraw(\\n        address account,\\n        address projectToken,\\n        address lendingToken\\n    ) external returns (uint256 collateralProjectToWithdraw);\\n\\n    //************* redeem FUNCTION ********************************\\n\\n    /**\\n     * @dev Function that performs the redemption of bLendingToken and returns the corresponding lending token to the msg.sender.\\n     * @param lendingToken Address of the lending token.\\n     * @param bLendingTokenAmount Amount of bLending tokens to be redeemed.\\n     */\\n    function redeem(address lendingToken, uint256 bLendingTokenAmount) external;\\n\\n    /**\\n     * @dev Function that performs the redemption of bLendingToken on behalf of a user and returns the corresponding lending token to the user by related contract.\\n     * @param lendingToken Address of the lending token.\\n     * @param bLendingTokenAmount Amount of bLending tokens to be redeemed.\\n     * @param user Address of the user.\\n     */\\n    function redeemFromRelatedContract(address lendingToken, uint256 bLendingTokenAmount, address user) external;\\n\\n    //************* redeemUnderlying FUNCTION ********************************\\n\\n    /**\\n     * @dev Function that performs the redemption of lending token and returns the corresponding underlying token to the msg.sender.\\n     * @param lendingToken Address of the lending token.\\n     * @param lendingTokenAmount Amount of lending tokens to be redeemed.\\n     */\\n    function redeemUnderlying(address lendingToken, uint256 lendingTokenAmount) external;\\n\\n    /**\\n     * @dev Function that performs the redemption of lending token on behalf of a user and returns the corresponding underlying token to the user by related contract.\\n     * @param lendingToken Address of the lending token.\\n     * @param lendingTokenAmount Amount of lending tokens to be redeemed.\\n     * @param user Address of the user.\\n     */\\n    function redeemUnderlyingFromRelatedContract(address lendingToken, uint256 lendingTokenAmount, address user) external;\\n\\n    //************* borrow FUNCTION ********************************\\n\\n    /**\\n     * @dev Allows a related contract to calculate the new borrow position of a user.\\n     * @param borrower The address of the user for whom the borrow position is being calculated.\\n     * @param projectToken The address of the project token being used as collateral.\\n     * @param lendingToken The address of the lending token being borrowed.\\n     * @param lendingTokenAmount The amount of lending tokens being borrowed.\\n     * @param currentLendingToken The address of the current lending token being used as collateral.\\n     */\\n    function calcBorrowPosition(\\n        address borrower,\\n        address projectToken,\\n        address lendingToken,\\n        uint256 lendingTokenAmount,\\n        address currentLendingToken\\n    ) external;\\n\\n    /**\\n     * @dev Calculates the lending token available amount for borrowing.\\n     * @param account Address of the user.\\n     * @param projectToken Address of the project token.\\n     * @param lendingToken Address of the lending token.\\n     * @return availableToBorrow The amount of lending token available amount for borrowing.\\n     */\\n    function getLendingAvailableToBorrow(address account, address projectToken, address lendingToken) external returns (uint256 availableToBorrow);\\n\\n    //************* repay FUNCTION ********************************\\n\\n    /**\\n     * @dev Allows a borrower to repay their outstanding loan for a given project token and lending token.\\n     * @param projectToken The project token's address\\n     * @param lendingToken The lending token's address\\n     * @param lendingTokenAmount The amount of lending tokens to repay\\n     * @return amount of lending tokens actually repaid\\n     */\\n    function repay(address projectToken, address lendingToken, uint256 lendingTokenAmount) external returns (uint256);\\n\\n    /**\\n     * @dev Allows a related contract to repay the outstanding loan for a given borrower's project token and lending token.\\n     * @param projectToken The project token's address\\n     * @param lendingToken The lending token's address\\n     * @param lendingTokenAmount The amount of lending tokens to repay\\n     * @param repairer The address that initiated the repair transaction\\n     * @param borrower The borrower's address\\n     * @return amount of lending tokens actually repaid\\n     */\\n    function repayFromRelatedContract(\\n        address projectToken,\\n        address lendingToken,\\n        uint256 lendingTokenAmount,\\n        address repairer,\\n        address borrower\\n    ) external returns (uint256);\\n\\n    /**\\n     * @dev This function is called to update the interest in a borrower's borrow position.\\n     * @param account Address of the borrower.\\n     * @param lendingToken Address of the lending token.\\n     */\\n    function updateInterestInBorrowPositions(address account, address lendingToken) external;\\n\\n    //************* VIEW FUNCTIONS ********************************\\n\\n    /**\\n     * @dev return address of price oracle with interface of PriceProviderAggregator\\n     */\\n    function priceOracle() external view returns (address);\\n\\n    /**\\n     * @dev return address project token in array `projectTokens`\\n     * @param projectTokenId - index of project token in array `projectTokens`. Numerates from 0 to array length - 1\\n     */\\n    function projectTokens(uint256 projectTokenId) external view returns (address);\\n\\n    /**\\n     * @dev return address lending token in array `lendingTokens`\\n     * @param lendingTokenId - index of lending token in array `lendingTokens`. Numerates from 0 to array length - 1\\n     */\\n    function lendingTokens(uint256 lendingTokenId) external view returns (address);\\n\\n    /**\\n     * @dev Returns the info of the project token.\\n     * @return The address of the project token\\n     */\\n    function projectTokenInfo(address projectToken) external view returns (ProjectTokenInfo memory);\\n\\n    /**\\n     * @dev Returns the address of the lending token.\\n     * @return The address of the lending token.\\n     */\\n    function lendingTokenInfo(address lendingToken) external view returns (LendingTokenInfo memory);\\n\\n    /**\\n     * @dev Returns whether an address is a related contract or not.\\n     * @param relatedContract The address of the contract to check.\\n     * @return isRelated Boolean indicating whether the contract is related or not.\\n     */\\n    function getRelatedContract(address relatedContract) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the borrow limit per lending token.\\n     * @return The address of the lending token.\\n     */\\n    function borrowLimitPerLendingToken(address lendingToken) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the borrow limit per collateral token.\\n     * @return The address of the project token.\\n     */\\n    function borrowLimitPerCollateral(address projectToken) external view returns (uint256);\\n\\n    /**\\n     * @dev return total amount of deposited project token\\n     * @param projectToken - address of project token in array `projectTokens`. Numerates from 0 to array length - 1\\n     */\\n    function totalDepositedProjectToken(address projectToken) external view returns (uint256);\\n\\n    /**\\n     * @dev return total borrow amount of `lendingToken` by `projectToken`\\n     * @param projectToken - address of project token\\n     * @param lendingToken - address of lending token\\n     */\\n    function totalBorrow(address projectToken, address lendingToken) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the PIT (primary index token) value for a given account and position after a position is opened\\n     * @param account Address of the account.\\n     * @param projectToken Address of the project token.\\n     * @param lendingToken Address of the lending token.\\n     * @return The PIT value.\\n     * Formula: pit = $ * LVR\\n     */\\n    function pit(address account, address projectToken, address lendingToken) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the PIT (primary index token) value for a given account and collateral before a position is opened\\n     * @param account Address of the account.\\n     * @param projectToken Address of the project token.\\n     * @return The PIT value.\\n     * Formula: pit = $ * LVR\\n     */\\n    function pitCollateral(address account, address projectToken) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the actual lending token of a user's borrow position for a specific project token\\n     * @param user The address of the user's borrow position\\n     * @param projectToken The address of the project token\\n     * @return actualLendingToken The address of the actual lending token\\n     */\\n    function getLendingToken(address user, address projectToken) external view returns (address actualLendingToken);\\n\\n    /**\\n     * @dev Returns the remaining PIT (primary index token) of a user's borrow position\\n     * @param account The address of the user's borrow position\\n     * @param projectToken The address of the project token\\n     * @param lendingToken The address of the lending token\\n     * @return remaining The remaining PIT of the user's borrow position\\n     */\\n    function pitRemaining(address account, address projectToken, address lendingToken) external view returns (uint256 remaining);\\n\\n    /**\\n     * @dev Returns the total outstanding amount of a user's borrow position for a specific project token and lending token\\n     * @param account The address of the user's borrow position\\n     * @param projectToken The address of the project token\\n     * @param lendingToken The address of the lending token\\n     * @return total outstanding amount of the user's borrow position\\n     */\\n    function totalOutstanding(address account, address projectToken, address lendingToken) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the health factor of a user's borrow position for a specific project token and lending token\\n     * @param account The address of the user's borrow position\\n     * @param projectToken The address of the project token\\n     * @param lendingToken The address of the lending token\\n     * @return numerator The numerator of the health factor\\n     * @return denominator The denominator of the health factor\\n     */\\n    function healthFactor(address account, address projectToken, address lendingToken) external view returns (uint256 numerator, uint256 denominator);\\n\\n    /**\\n     * @dev Returns the evaluation of a specific token amount in USD\\n     * @param token The address of the token to evaluate\\n     * @param tokenAmount The amount of the token to evaluate\\n     * @return The evaluated token amount in USD\\n     */\\n    function getTokenEvaluation(address token, uint256 tokenAmount) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the length of the lending tokens array\\n     * @return The length of the lending tokens array\\n     */\\n    function lendingTokensLength() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the length of the project tokens array\\n     * @return The length of the project tokens array\\n     */\\n    function projectTokensLength() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the details of a user's borrow position for a specific project token and lending token\\n     * @param account The address of the user's borrow position\\n     * @param projectToken The address of the project token\\n     * @param lendingToken The address of the lending token\\n     * @return depositedProjectTokenAmount The amount of project tokens deposited by the user\\n     * @return loanBody The amount of the lending token borrowed by the user\\n     * @return accrual The accrued interest of the borrow position\\n     * @return healthFactorNumerator The numerator of the health factor\\n     * @return healthFactorDenominator The denominator of the health factor\\n     */\\n    function getPosition(\\n        address account,\\n        address projectToken,\\n        address lendingToken\\n    )\\n        external\\n        view\\n        returns (\\n            uint256 depositedProjectTokenAmount,\\n            uint256 loanBody,\\n            uint256 accrual,\\n            uint256 healthFactorNumerator,\\n            uint256 healthFactorDenominator\\n        );\\n\\n    /**\\n     * @dev Returns the amount of project tokens deposited by a user for a specific project token and collateral token\\n     * @param projectToken The address of the project token\\n     * @param user The address of the user\\n     * @return amount of project tokens deposited by the user\\n     */\\n    function getDepositedAmount(address projectToken, address user) external view returns (uint);\\n\\n    /**\\n     * @dev Get total borrow amount in USD per collateral for a specific project token\\n     * @param projectToken The address of the project token\\n     * @return The total borrow amount in USD\\n     */\\n    function getTotalBorrowPerCollateral(address projectToken) external view returns (uint);\\n\\n    /**\\n     * @dev Get total borrow amount in USD for a specific lending token\\n     * @param lendingToken The address of the lending token\\n     * @return The total borrow amount in USD\\n     */\\n    function getTotalBorrowPerLendingToken(address lendingToken) external view returns (uint);\\n\\n    /**\\n     * @dev Convert the total outstanding amount of a user's borrow position to USD\\n     * @param account The address of the user account\\n     * @param projectToken The address of the project token\\n     * @param lendingToken The address of the lending token\\n     * @return The total outstanding amount in USD\\n     */\\n    function totalOutstandingInUSD(address account, address projectToken, address lendingToken) external view returns (uint256);\\n\\n    /**\\n     * @dev Get the loan to value ratio of a position taken by a project token and a lending token\\n     * @param projectToken The address of the project token\\n     * @param lendingToken The address of the lending token\\n     * @return lvrNumerator The numerator of the loan to value ratio\\n     * @return lvrDenominator The denominator of the loan to value ratio\\n     */\\n    function getLoanToValueRatio(address projectToken, address lendingToken) external view returns (uint256 lvrNumerator, uint256 lvrDenominator);\\n\\n    /**\\n     * @dev Returns the PIT (primary index token) value for a given account and collateral before a position is opened after update price.\\n     * @param account Address of the account.\\n     * @param projectToken Address of the project token.\\n     * @param priceIds The priceIds need to update.\\n     * @param updateData The updateData provided by PythNetwork.\\n     * @return The PIT value.\\n     * Formula: pit = $ * LVR\\n     */\\n    function pitCollateralWithUpdatePrices(\\n        address account,\\n        address projectToken,\\n        bytes32[] memory priceIds,\\n        bytes[] calldata updateData\\n    ) external payable returns (uint256);\\n\\n    /**\\n     * @dev Returns the remaining PIT (primary index token) of a user's borrow position after update price.\\n     * @param account The address of the user's borrow position\\n     * @param projectToken The address of the project token\\n     * @param lendingToken The address of the lending token\\n     * @param priceIds The priceIds need to update.\\n     * @param updateData The updateData provided by PythNetwork.\\n     * @return remaining The remaining PIT of the user's borrow position\\n     */\\n    function pitRemainingWithUpdatePrices(\\n        address account,\\n        address projectToken,\\n        address lendingToken,\\n        bytes32[] memory priceIds,\\n        bytes[] calldata updateData\\n    ) external payable returns (uint256);\\n\\n    /**\\n     * @dev Returns the estimated remaining PIT (primary index token) of a user's borrow position\\n     * @param account The address of the user's borrow position\\n     * @param projectToken The address of the project token\\n     * @param lendingToken The address of the lending token\\n     * @param priceIds The priceIds need to update.\\n     * @param updateData The updateData provided by PythNetwork.\\n     * @return remaining The estimated remaining PIT of the user's borrow position\\n     */\\n    function estimatedPitRemainingWithUpdatePrices(\\n        address account,\\n        address projectToken,\\n        address lendingToken,\\n        bytes32[] memory priceIds,\\n        bytes[] calldata updateData\\n    ) external payable returns (uint256);\\n\\n    /**\\n     * @dev Returns the evaluation of a specific token amount in USD after update price.\\n     * @param token The address of the token to evaluate\\n     * @param tokenAmount The amount of the token to evaluate\\n     * @param priceIds The priceIds need to update.\\n     * @param updateData The updateData provided by PythNetwork.\\n     * @return The evaluated token amount in USD\\n     */\\n    function getTokenEvaluationWithUpdatePrices(\\n        address token,\\n        uint256 tokenAmount,\\n        bytes32[] memory priceIds,\\n        bytes[] calldata updateData\\n    ) external payable returns (uint256);\\n\\n    /**\\n     * @dev Returns the details of a user's borrow position for a specific project token and lending token after update price\\n     * @param account The address of the user's borrow position\\n     * @param projectToken The address of the project token\\n     * @param lendingToken The address of the lending token\\n     * @param priceIds The priceIds need to update.\\n     * @param updateData The updateData provided by PythNetwork.\\n     * @return depositedProjectTokenAmount The amount of project tokens deposited by the user\\n     * @return loanBody The amount of the lending token borrowed by the user\\n     * @return accrual The accrued interest of the borrow position\\n     * @return healthFactorNumerator The numerator of the health factor\\n     * @return healthFactorDenominator The denominator of the health factor\\n     */\\n    function getPositionWithUpdatePrices(\\n        address account,\\n        address projectToken,\\n        address lendingToken,\\n        bytes32[] memory priceIds,\\n        bytes[] calldata updateData\\n    )\\n        external\\n        payable\\n        returns (\\n            uint256 depositedProjectTokenAmount,\\n            uint256 loanBody,\\n            uint256 accrual,\\n            uint256 healthFactorNumerator,\\n            uint256 healthFactorDenominator\\n        );\\n\\n    /**\\n     * @dev Get total borrow amount in USD for a specific lending token after update price\\n     * @param lendingToken The address of the lending token\\n     * @param priceIds The priceIds need to update.\\n     * @param updateData The updateData provided by PythNetwork.\\n     * @return The total borrow amount in USD\\n     */\\n    function getTotalBorrowPerLendingTokenWithUpdatePrices(\\n        address lendingToken,\\n        bytes32[] memory priceIds,\\n        bytes[] calldata updateData\\n    ) external payable returns (uint);\\n\\n    /**\\n     * @dev Returns the total estimated outstanding amount of a user's borrow position to USD after update price.\\n     * @param account The address of the user account\\n     * @param projectToken The address of the project token\\n     * @param lendingToken The address of the lending token\\n     * @param priceIds The priceIds need to update.\\n     * @param updateData The updateData provided by PythNetwork.\\n     * @return The total estimated outstanding amount in USD\\n     */\\n    function totalEstimatedOutstandingInUSDWithUpdatePrices(\\n        address account,\\n        address projectToken,\\n        address lendingToken,\\n        bytes32[] memory priceIds,\\n        bytes[] calldata updateData\\n    ) external payable returns (uint256);\\n\\n    /**\\n     * @dev Convert the remaining pit amount to the corresponding lending token amount after update price.\\n     * @param account The address of the user account\\n     * @param projectToken The address of the project token\\n     * @param lendingToken The address of the lending token\\n     * @param priceIds The priceIds need to update.\\n     * @param updateData The updateData provided by PythNetwork.\\n     * @return The converted lending token amount\\n     */\\n    function convertPitRemainingWithUpdatePrices(\\n        address account,\\n        address projectToken,\\n        address lendingToken,\\n        bytes32[] memory priceIds,\\n        bytes[] calldata updateData\\n    ) external payable returns (uint256);\\n\\n    /**\\n     * @dev Convert the estimated remaining pit amount to the corresponding lending token amount after update price.\\n     * @param account The address of the user account\\n     * @param projectToken The address of the project token\\n     * @param lendingToken The address of the lending token\\n     * @param priceIds The priceIds need to update.\\n     * @param updateData The updateData provided by PythNetwork.\\n     * @return The estimated lending token amount\\n     */\\n    function convertEstimatedPitRemainingWithUpdatePrices(\\n        address account,\\n        address projectToken,\\n        address lendingToken,\\n        bytes32[] memory priceIds,\\n        bytes[] calldata updateData\\n    ) external payable returns (uint256);\\n\\n    /**\\n     * @dev Calculates the collateral available for withdrawal based on the loan-to-value ratio of a specific project token after update price.\\n     * @param account Address of the user.\\n     * @param projectToken Address of the project token.\\n     * @param lendingToken Address of the lending token.\\n     * @param priceIds The priceIds need to update.\\n     * @param updateData The updateData provided by PythNetwork.\\n     * @return collateralProjectToWithdraw The amount of collateral available for withdrawal in the project token.\\n     */\\n    function getCollateralAvailableToWithdrawWithUpdatePrices(\\n        address account,\\n        address projectToken,\\n        address lendingToken,\\n        bytes32[] memory priceIds,\\n        bytes[] calldata updateData\\n    ) external payable returns (uint256 collateralProjectToWithdraw);\\n\\n    /**\\n     * @dev Calculates the lending token available amount for borrowing after update price.\\n     * @param account Address of the user.\\n     * @param projectToken Address of the project token.\\n     * @param lendingToken Address of the lending token.\\n     * @param priceIds The priceIds need to update.\\n     * @param updateData The updateData provided by PythNetwork.\\n     * @return availableToBorrow The amount of lending token available amount for borrowing.\\n     */\\n    function getLendingAvailableToBorrow(\\n        address account,\\n        address projectToken,\\n        address lendingToken,\\n        bytes32[] memory priceIds,\\n        bytes[] calldata updateData\\n    ) external payable returns (uint256 availableToBorrow);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IPrimaryLendingPlatformLiquidation.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.19;\\n\\ninterface IPrimaryLendingPlatformLiquidation {\\n    /**\\n     * @notice Liquidates a portion of the borrower's debt using the lending token, called by a related contract.\\n     * @param _account The address of the borrower\\n     * @param _projectToken The address of the project token\\n     * @param _lendingToken The address of the lending token\\n     * @param _lendingTokenAmount The amount of lending tokens to be used for liquidation\\n     * @param liquidator The address of the liquidator\\n     * @return projectTokenLiquidatorReceived The amount of project tokens received by the liquidator\\n     */\\n    function liquidateFromModerator(\\n        address _account,\\n        address _projectToken,\\n        address _lendingToken,\\n        uint256 _lendingTokenAmount,\\n        address liquidator\\n    ) external returns (uint256 projectTokenLiquidatorReceived);\\n\\n    /**\\n     * @notice Liquidates a portion of the borrower's debt using the lending token, called by a related contract.\\n     * @param _account The address of the borrower\\n     * @param _projectToken The address of the project token\\n     * @param _lendingToken The address of the lending token\\n     * @param _lendingTokenAmount The amount of lending tokens to be used for liquidation\\n     * @param liquidator The address of the liquidator\\n     * @param priceIds The priceIds need to update.\\n     * @param updateData The updateData provided by PythNetwork.\\n     * @return projectTokenLiquidatorReceived The amount of project tokens received by the liquidator\\n     */\\n    function liquidateFromModerator(\\n        address _account,\\n        address _projectToken,\\n        address _lendingToken,\\n        uint256 _lendingTokenAmount,\\n        address liquidator,\\n        bytes32[] memory priceIds,\\n        bytes[] calldata updateData\\n    ) external payable returns (uint256);\\n\\n    /**\\n     * @dev The function to be called when a user wants to liquidate their position.\\n     * @param _account The address of the borrower\\n     * @param _projectToken The address of the project token\\n     * @param _lendingToken The address of the lending token\\n     * @param _lendingTokenAmount The amount of lending tokens to be used for liquidation\\n     * @param priceIds An array of bytes32 price identifiers to update.\\n     * @param updateData An array of bytes update data for the corresponding price identifiers.\\n     */\\n    function liquidate(\\n        address _account,\\n        address _projectToken,\\n        address _lendingToken,\\n        uint256 _lendingTokenAmount,\\n        bytes32[] memory priceIds,\\n        bytes[] calldata updateData\\n    ) external payable;\\n\\n    /**\\n     * @dev Returns the minimum and maximum liquidation amount for a given account, project token, and lending token after updating related token's prices.\\n     * @param _account The account for which to calculate the liquidation amount.\\n     * @param _projectToken The project token address.\\n     * @param _lendingToken The lending token address.\\n     * @param priceIds An array of bytes32 price identifiers to update.\\n     * @param updateData An array of bytes update data for the corresponding price identifiers.\\n     * @return maxLA The maximum liquidation amount.\\n     * @return minLA The minimum liquidation amount.\\n     */\\n    function getLiquidationAmountWithUpdatePrices(\\n        address _account,\\n        address _projectToken,\\n        address _lendingToken,\\n        bytes32[] memory priceIds,\\n        bytes[] calldata updateData\\n    ) external payable returns (uint256 maxLA, uint256 minLA);\\n}\\n\"\r\n    },\r\n    \"contracts/liquidation-bot/PairFlash.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.19;\\npragma abicoder v2;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\\\";\\nimport \\\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Callee.sol\\\";\\nimport \\\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol\\\";\\nimport \\\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\nimport \\\"../interfaces/IPrimaryLendingPlatform.sol\\\";\\nimport \\\"../interfaces/IPrimaryLendingPlatformLiquidation.sol\\\";\\n\\n/**\\n * @title PairFlash\\n * @dev This contract enables liquidators to liquidate a borrower's loan position that falls below\\n * the minimum collateralization level on the Fringe Finance V2 over-collateralized DeFi lending platform.\\n * The contract interacts with Uniswap V2 and supports flash loans for liquidation.\\n */\\ncontract PairFlash is IUniswapV2Callee, Initializable, AccessControlUpgradeable {\\n    using SafeERC20Upgradeable for ERC20Upgradeable;\\n\\n    IUniswapV2Factory public uniswapFactory;\\n    IPrimaryLendingPlatform public plp;\\n    IPrimaryLendingPlatformLiquidation public plpLiquidation;\\n\\n    struct LiquidateParams {\\n        address borrower;\\n        address collateralToken;\\n        address lendingToken;\\n        bytes32[] priceIds;\\n        bytes[] updateData;\\n        uint256 updateFee;\\n    }\\n\\n    struct FlashParams {\\n        address token0;\\n        address token1;\\n        uint256 amount0;\\n        uint256 amount1;\\n        LiquidateParams liquidateParam;\\n    }\\n\\n    struct FlashCallbackData {\\n        address payer;\\n        LiquidateParams liquidateParam;\\n    }\\n\\n    /**\\n     * @dev Emitted when the Uniswap Factory address is updated.\\n     */\\n    event OnSetUniswapFactory(address indexed oldFactory, address indexed newFactory);\\n\\n    /**\\n     * @dev Emitted when the Primary Lending Platform (PLP) contract address is updated.\\n     */\\n    event OnSetPlp(address indexed oldPLP, address indexed newPLP);\\n\\n    /**\\n     * @dev Emitted when the Primary Lending Platform Liquidation (PLP Liquidation) contract address is updated.\\n     */\\n    event OnSetPlpLiquidation(address indexed oldPLPLiquidation, address indexed newPLPLiquidation);\\n\\n    /**\\n     * @dev Emitted when a flash loan liquidation is performed.\\n     */\\n    event OnFlash(address indexed liquidator, FlashParams params, uint256 profitAmount);\\n\\n    /**\\n     * @dev Initializes the contract and sets the initial Uniswap Factory, PLP, PLP Liquidation and owner addresses.\\n     */\\n    function initialize(address _uniswapFactory, address _plp, address _plpLiquidation) public initializer {\\n        __AccessControl_init();\\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n\\n        uniswapFactory = IUniswapV2Factory(_uniswapFactory);\\n        plp = IPrimaryLendingPlatform(_plp);\\n        plpLiquidation = IPrimaryLendingPlatformLiquidation(_plpLiquidation);\\n    }\\n\\n    /**\\n     * @dev Modifier to restrict function access to only the admin.\\n     */\\n    modifier onlyAdmin() {\\n        require(hasRole(DEFAULT_ADMIN_ROLE, msg.sender), \\\"BOT: Only Admin\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Fallback function to receive Ether.\\n     */\\n    receive() external payable {}\\n\\n    /**\\n     * @dev Updates the Uniswap Factory address.\\n     * @param newFactory The new Uniswap Factory address.\\n     */\\n    function setUniswapFactory(address newFactory) external onlyAdmin {\\n        require(newFactory != address(0), \\\"BOT: Invalid address\\\");\\n        emit OnSetUniswapFactory(address(uniswapFactory), newFactory);\\n        uniswapFactory = IUniswapV2Factory(newFactory);\\n    }\\n\\n    /**\\n     * @dev Updates the Primary Lending Platform (PLP) contract address.\\n     * @param newPlp The new PLP contract address.\\n     */\\n    function setPlp(address newPlp) external onlyAdmin {\\n        require(newPlp != address(0), \\\"BOT: Invalid address\\\");\\n        emit OnSetPlp(address(plp), newPlp);\\n        plp = IPrimaryLendingPlatform(newPlp);\\n    }\\n\\n    /**\\n     * @dev Updates the Primary Lending Platform Liquidation (PLP Liquidation) contract address.\\n     * @param newLiquidation The new PLP Liquidation contract address.\\n     */\\n    function setPlpLiquidation(address newLiquidation) external onlyAdmin {\\n        require(newLiquidation != address(0), \\\"BOT: Invalid address\\\");\\n        emit OnSetPlpLiquidation(address(plpLiquidation), newLiquidation);\\n        plpLiquidation = IPrimaryLendingPlatformLiquidation(newLiquidation);\\n    }\\n\\n    /**\\n     * @dev Initiates a flash loan liquidation process.\\n     * @param params The parameters for the flash loan liquidation.\\n     * @return amountProfit The profit amount earned by the liquidator.\\n     */\\n    function initFlash(FlashParams memory params) external payable returns (uint256 amountProfit) {\\n        require(params.amount0 == 0 || params.amount1 == 0, \\\"Invalid input amount\\\");\\n        address pair = uniswapFactory.getPair(params.token0, params.token1);\\n        require(pair != address(0), \\\"Pair does not exist\\\");\\n\\n        address token0 = IUniswapV2Pair(pair).token0();\\n        address token1 = IUniswapV2Pair(pair).token1();\\n\\n        if (params.amount1 > 0) {\\n            params.amount1 = _getAmountLiquidate(\\n                params.liquidateParam.borrower,\\n                params.liquidateParam.collateralToken,\\n                params.liquidateParam.lendingToken,\\n                params.liquidateParam.priceIds,\\n                params.liquidateParam.updateData,\\n                params.liquidateParam.updateFee,\\n                params.amount1\\n            );\\n        } else {\\n            params.amount0 = _getAmountLiquidate(\\n                params.liquidateParam.borrower,\\n                params.liquidateParam.collateralToken,\\n                params.liquidateParam.lendingToken,\\n                params.liquidateParam.priceIds,\\n                params.liquidateParam.updateData,\\n                params.liquidateParam.updateFee,\\n                params.amount0\\n            );\\n        }\\n\\n        uint256 amountToken0 = token0 == params.token0 && token1 == params.token1 ? params.amount0 : params.amount1;\\n        uint256 amountToken1 = token0 == params.token0 && token1 == params.token1 ? params.amount1 : params.amount0;\\n\\n        uint256 amountCollateralBeforeSwap = ERC20Upgradeable(params.liquidateParam.collateralToken).balanceOf(address(this));\\n\\n        IUniswapV2Pair(pair).swap(\\n            amountToken0,\\n            amountToken1,\\n            address(this),\\n            abi.encode(FlashCallbackData({payer: msg.sender, liquidateParam: params.liquidateParam}))\\n        );\\n        uint256 amountCollateralAfterSwap = ERC20Upgradeable(params.liquidateParam.collateralToken).balanceOf(address(this));\\n\\n        amountProfit = amountCollateralAfterSwap - amountCollateralBeforeSwap;\\n\\n        emit OnFlash(msg.sender, params, amountProfit);\\n    }\\n\\n    /**\\n     * @dev Callback function for the flash loan, which liquidates the loan position and repays the flash loan.\\n     * @param sender The address of the sender.\\n     * @param amount0 The amount of token0 borrowed.\\n     * @param amount1 The amount of token1 borrowed.\\n     * @param data The callback data.\\n     */\\n    function uniswapV2Call(address sender, uint amount0, uint amount1, bytes calldata data) external override {\\n        require(amount0 == 0 || amount1 == 0, \\\"BOT: Invalid input amount\\\");\\n        require(sender == address(this), \\\"BOT: Not sender\\\");\\n        address token0 = IUniswapV2Pair(msg.sender).token0();\\n        address token1 = IUniswapV2Pair(msg.sender).token1();\\n        require(msg.sender == uniswapFactory.getPair(token0, token1), \\\"BOT: Caller is not pair contract\\\");\\n\\n        FlashCallbackData memory decoded = abi.decode(data, (FlashCallbackData));\\n        address collateralToken = decoded.liquidateParam.collateralToken;\\n        address lendingToken = decoded.liquidateParam.lendingToken;\\n\\n        uint256 amount = token0 == lendingToken ? amount0 : amount1;\\n\\n        // liquidate\\n        IPrimaryLendingPlatform.LendingTokenInfo memory lendingInfo = plp.lendingTokenInfo(lendingToken);\\n\\n        ERC20Upgradeable(lendingToken).safeApprove(lendingInfo.bLendingToken, amount);\\n\\n        uint256 amountCollateralBeforeLiquidate = ERC20Upgradeable(collateralToken).balanceOf(address(this));\\n\\n        plpLiquidation.liquidate(\\n            decoded.liquidateParam.borrower,\\n            collateralToken,\\n            lendingToken,\\n            amount,\\n            decoded.liquidateParam.priceIds,\\n            decoded.liquidateParam.updateData\\n        );\\n\\n        uint256 amountCollateralAfterLiquidate = ERC20Upgradeable(collateralToken).balanceOf(address(this));\\n\\n        uint256 amountCollateralReceived = amountCollateralAfterLiquidate - amountCollateralBeforeLiquidate;\\n\\n        // calculate amountRequired to repay\\n        (uint256 reserve0, uint256 reserve1, ) = IUniswapV2Pair(msg.sender).getReserves();\\n\\n        (uint256 reserveIn, uint256 reserveOut) = token0 == lendingToken ? (reserve1, reserve0) : (reserve0, reserve1);\\n\\n        uint256 amountRequired = getAmountIn(amount, reserveIn, reserveOut);\\n\\n        require(amountCollateralReceived >= amountRequired, \\\"BOT: Not enough Token back to repay flash loan\\\");\\n\\n        //repay flash loan\\n        ERC20Upgradeable(collateralToken).safeTransfer(msg.sender, amountRequired);\\n\\n        //transfer profit to bot address\\n        ERC20Upgradeable(collateralToken).safeTransfer(decoded.payer, amountCollateralReceived - amountRequired);\\n    }\\n\\n    /**\\n     * @notice Calculate the amount of input tokens required to achieve the desired output amount.\\n     * @dev This function uses the Uniswap formula to calculate the amount of input tokens\\n     * required to achieve the desired output amount.\\n     * @param amountOut The desired output amount in tokens.\\n     * @param reserveIn The current amount of input tokens in the liquidity pool.\\n     * @param reserveOut The current amount of output tokens in the liquidity pool.\\n     * @return amountIn The amount of input tokens required.\\n     */\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) public pure returns (uint amountIn) {\\n        require(amountOut > 0, \\\"BOT: INSUFFICIENT_OUTPUT_AMOUNT\\\");\\n        require(reserveIn > 0 && reserveOut > 0, \\\"BOT: INSUFFICIENT_LIQUIDITY\\\");\\n        uint numerator = reserveIn * amountOut * 1000;\\n        uint denominator = (reserveOut - amountOut) * 997;\\n        amountIn = (numerator / denominator) + 1;\\n    }\\n\\n    /**\\n     * @notice Calculate the amount of input tokens required to achieve the desired output\\n     * amount in a UniswapV2 trading pair.\\n     * @dev This function retrieves the reserves and the token addresses of the trading pair,\\n     * then calls the getAmountIn function to calculate the input amount required.\\n     * @param collateral The address of the collateral token.\\n     * @param lending The address of the lending token.\\n     * @param amount The desired output amount in lending tokens.\\n     * @return amountRequired The amount of collateral tokens required.\\n     */\\n    function getAmountRequired(address collateral, address lending, uint256 amount) external view returns (uint256) {\\n        address pair = uniswapFactory.getPair(collateral, lending);\\n        address token0 = IUniswapV2Pair(pair).token0();\\n        (uint256 reserve0, uint256 reserve1, ) = IUniswapV2Pair(pair).getReserves();\\n\\n        (uint256 reserveIn, uint256 reserveOut) = token0 == lending ? (reserve1, reserve0) : (reserve0, reserve1);\\n\\n        uint256 amountRequired = getAmountIn(amount, reserveIn, reserveOut);\\n        return amountRequired;\\n    }\\n\\n    /**\\n     * @notice Calculates the liquidation amount based on specified parameters and updates prices.\\n     * @dev This function interacts with a plpLiquidation contract to determine the liquidation amount.\\n     * @param borrower The address of the borrower whose position is being liquidated.\\n     * @param projectToken The address of project token.\\n     * @param lendingToken The address of lending token.\\n     * @param priceIds An array of bytes32 price identifiers to update.\\n     * @param updateData An array of bytes update data for the corresponding price identifiers.\\n     * @param updateFee The fee paid for updating prices.\\n     * @param amount The requested liquidation amount.\\n     * @return The calculated liquidation amount within the specified bounds.\\n     */\\n    function _getAmountLiquidate(\\n        address borrower,\\n        address projectToken,\\n        address lendingToken,\\n        bytes32[] memory priceIds,\\n        bytes[] memory updateData,\\n        uint256 updateFee,\\n        uint256 amount\\n    ) internal returns (uint256) {\\n        (uint256 maxLA, uint256 minLA) = plpLiquidation.getLiquidationAmountWithUpdatePrices{value: updateFee}(\\n            borrower,\\n            projectToken,\\n            lendingToken,\\n            priceIds,\\n            updateData\\n        );\\n\\n        if (maxLA == minLA) {\\n            return maxLA;\\n        } else {\\n            amount = amount < minLA ? minLA : amount;\\n            amount = amount > maxLA ? maxLA : amount;\\n            return amount;\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"liquidator\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collateralToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"lendingToken\",\"type\":\"address\"},{\"internalType\":\"bytes32[]\",\"name\":\"priceIds\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes[]\",\"name\":\"updateData\",\"type\":\"bytes[]\"},{\"internalType\":\"uint256\",\"name\":\"updateFee\",\"type\":\"uint256\"}],\"internalType\":\"struct PairFlash.LiquidateParams\",\"name\":\"liquidateParam\",\"type\":\"tuple\"}],\"indexed\":false,\"internalType\":\"struct PairFlash.FlashParams\",\"name\":\"params\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"profitAmount\",\"type\":\"uint256\"}],\"name\":\"OnFlash\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldPLP\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newPLP\",\"type\":\"address\"}],\"name\":\"OnSetPlp\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldPLPLiquidation\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newPLPLiquidation\",\"type\":\"address\"}],\"name\":\"OnSetPlpLiquidation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldFactory\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newFactory\",\"type\":\"address\"}],\"name\":\"OnSetUniswapFactory\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveOut\",\"type\":\"uint256\"}],\"name\":\"getAmountIn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collateral\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"lending\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getAmountRequired\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collateralToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"lendingToken\",\"type\":\"address\"},{\"internalType\":\"bytes32[]\",\"name\":\"priceIds\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes[]\",\"name\":\"updateData\",\"type\":\"bytes[]\"},{\"internalType\":\"uint256\",\"name\":\"updateFee\",\"type\":\"uint256\"}],\"internalType\":\"struct PairFlash.LiquidateParams\",\"name\":\"liquidateParam\",\"type\":\"tuple\"}],\"internalType\":\"struct PairFlash.FlashParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"initFlash\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountProfit\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_uniswapFactory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_plp\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_plpLiquidation\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"plp\",\"outputs\":[{\"internalType\":\"contract IPrimaryLendingPlatform\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"plpLiquidation\",\"outputs\":[{\"internalType\":\"contract IPrimaryLendingPlatformLiquidation\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newPlp\",\"type\":\"address\"}],\"name\":\"setPlp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newLiquidation\",\"type\":\"address\"}],\"name\":\"setPlpLiquidation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newFactory\",\"type\":\"address\"}],\"name\":\"setUniswapFactory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapFactory\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Factory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"uniswapV2Call\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "PairFlash", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}