{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/interfaces/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/DividendDistributor.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: None\\npragma solidity ^0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./libraries/TokenUtils.sol\\\";\\nimport \\\"./interfaces/IDividendDistributor.sol\\\";\\nimport \\\"./interfaces/IUniswapV2Router02.sol\\\";\\nimport \\\"./interfaces/IUniswapV2Factory.sol\\\";\\nimport \\\"./interfaces/IWETH.sol\\\";\\n\\ncontract DividendDistributor is IDividendDistributor {\\n    address _token;\\n\\n    struct Share {\\n        uint256 amount;\\n        uint256 totalExcluded;\\n    }\\n\\n    IUniswapV2Router02 router;\\n    IERC20 public RewardToken;\\n\\n    address[] shareholders;\\n    mapping(address => uint256) public shareholderIndexes;\\n    mapping(address => uint256) public shareholderClaims;\\n    mapping(address => Share) public shares;\\n\\n    uint256 public totalShares;\\n    uint256 public totalDividends;\\n    uint256 public totalDistributed;\\n    uint256 public dividendsPerShare;\\n    uint256 public dividendsPerShareAccuracyFactor = 10 ** 36;\\n\\n    uint256 public minPeriod = 30 minutes;\\n    uint256 public minDistribution = 1 * (10 ** 18);\\n\\n    uint256 currentIndex;\\n    bool initialized;\\n\\n    modifier onlyToken() {\\n        require(msg.sender == _token);\\n        _;\\n    }\\n\\n    constructor(address _router, address _reflectionToken, address token) {\\n        router = IUniswapV2Router02(_router);\\n        RewardToken = IERC20(_reflectionToken);\\n        _token = token;\\n        uint8 rewardTokenDecimals = TokenUtils.expectDecimals(token);\\n        uint256 fixedPoint = 10 ** rewardTokenDecimals;\\n        minDistribution = 1 * fixedPoint;\\n    }\\n\\n    function setDistributionCriteria(\\n        uint256 _minPeriod,\\n        uint256 _minDistribution\\n    ) external override onlyToken {\\n        minPeriod = _minPeriod;\\n        minDistribution = _minDistribution;\\n    }\\n\\n    function getShareHolders() external view returns (address[] memory) {\\n        return shareholders;\\n    }\\n\\n    function setMinPeriod(uint256 _minPeriod) external override onlyToken {\\n        minPeriod = _minPeriod;\\n    }\\n\\n    function setMinDistribution(\\n        uint256 _minDistribution\\n    ) external override onlyToken {\\n        minDistribution = _minDistribution;\\n    }\\n\\n    function setShare(\\n        address _shareholder,\\n        uint256 amount\\n    ) external override onlyToken {\\n        Share storage shareholder = shares[_shareholder];\\n        uint256 shareholderAmount = shareholder.amount;\\n        if (shareholderAmount > 0) {\\n            distributeDividend(_shareholder);\\n        }\\n\\n        if (amount > 0 && shareholderAmount == 0) {\\n            addShareholder(_shareholder);\\n        } else if (amount == 0 && shareholderAmount > 0) {\\n            removeShareholder(_shareholder);\\n        }\\n\\n        totalShares = totalShares - shareholderAmount + amount;\\n        shareholder.amount = amount;\\n        shareholder.totalExcluded = getCumulativeDividends(amount);\\n    }\\n\\n    function deposit() external payable override onlyToken {\\n        uint256 balanceBefore = RewardToken.balanceOf(address(this));\\n\\n        address[] memory path = new address[](2);\\n        path[0] = router.WETH();\\n        path[1] = address(RewardToken);\\n\\n        if (path[0] == path[1]) { //reward token is weth\\n            IWETH(path[0]).deposit{value: msg.value}();\\n        } else {\\n            router.swapExactETHForTokensSupportingFeeOnTransferTokens{\\n                value: msg.value\\n            }(0, path, address(this), block.timestamp);\\n        }\\n        uint256 amount = RewardToken.balanceOf(address(this)) - balanceBefore;\\n        totalDividends = totalDividends + amount;\\n        if (totalShares > 0) {\\n            dividendsPerShare =\\n                dividendsPerShare +\\n                (dividendsPerShareAccuracyFactor * amount) /\\n                totalShares;\\n        }\\n    }\\n\\n    function process(uint256 gas) external override onlyToken {\\n        uint256 shareholderCount = shareholders.length;\\n\\n        if (shareholderCount == 0) {\\n            return;\\n        }\\n\\n        uint256 iterations = 0;\\n        uint256 gasUsed = 0;\\n        uint256 gasLeft = gasleft();\\n\\n        while (gasUsed < gas && iterations < shareholderCount) {\\n            if (currentIndex >= shareholderCount) {\\n                currentIndex = 0;\\n            }\\n\\n            if (shouldDistribute(shareholders[currentIndex])) {\\n                distributeDividend(shareholders[currentIndex]);\\n            }\\n\\n            gasUsed = gasUsed + gasLeft - gasleft();\\n            gasLeft = gasleft();\\n            currentIndex++;\\n            iterations++;\\n        }\\n    }\\n\\n    function shouldDistribute(\\n        address shareholder\\n    ) internal view returns (bool) {\\n        return\\n            shareholderClaims[shareholder] + minPeriod <= block.timestamp &&\\n            getUnpaidEarnings(shareholder) >= minDistribution;\\n    }\\n\\n    function distributeDividend(address _shareholder) internal {\\n        Share storage shareholder = shares[_shareholder];\\n        if (shareholder.amount == 0) {\\n            return;\\n        }\\n\\n        uint256 amount = getUnpaidEarnings(_shareholder);\\n        if (amount > 0) {\\n            totalDistributed = totalDistributed + amount;\\n            shareholderClaims[_shareholder] = block.timestamp;\\n            shareholder.totalExcluded = getCumulativeDividends(shareholder.amount);\\n            RewardToken.transfer(_shareholder, amount);\\n        }\\n    }\\n\\n    function rewardTokenAddress() external view returns(address) {\\n        return address(RewardToken);\\n    }\\n\\n    function claimDividend() external {\\n        require(shouldDistribute(msg.sender), \\\"Too soon. Need to wait!\\\");\\n        distributeDividend(msg.sender);\\n    }\\n\\n    function getUnpaidEarnings(\\n        address _shareholder\\n    ) public view returns (uint256) {\\n        Share storage shareholder = shares[_shareholder];\\n        if (shareholder.amount == 0) {\\n            return 0;\\n        }\\n\\n        uint256 shareholderTotalDividends = getCumulativeDividends(shareholder.amount);\\n        uint256 shareholderTotalExcluded = shareholder.totalExcluded;\\n        if (shareholderTotalDividends <= shareholderTotalExcluded) {\\n            return 0;\\n        }\\n\\n        return shareholderTotalDividends - shareholderTotalExcluded;\\n    }\\n\\n    function getCumulativeDividends(\\n        uint256 share\\n    ) internal view returns (uint256) {\\n        return (share * dividendsPerShare) / dividendsPerShareAccuracyFactor;\\n    }\\n\\n    function addShareholder(address shareholder) internal {\\n        shareholderIndexes[shareholder] = shareholders.length;\\n        shareholders.push(shareholder);\\n    }\\n\\n    function removeShareholder(address shareholder) internal {\\n        shareholders[shareholderIndexes[shareholder]] = shareholders[\\n            shareholders.length - 1\\n        ];\\n        shareholderIndexes[\\n            shareholders[shareholders.length - 1]\\n        ] = shareholderIndexes[shareholder];\\n        shareholders.pop();\\n    }\\n}\"\r\n    },\r\n    \"contracts/interfaces/IDividendDistributor.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: None\\npragma solidity ^0.8.17;\\n\\ninterface IDividendDistributor {\\n    function setDistributionCriteria(\\n        uint256 _minPeriod,\\n        uint256 _minDistribution\\n    ) external;\\n\\n    function setShare(address shareholder, uint256 amount) external;\\n\\n    function deposit() external payable;\\n\\n    function process(uint256 gas) external;\\n\\n    function setMinPeriod(uint256 _minPeriod) external;\\n\\n    function setMinDistribution(uint256 _minDistribution) external;\\n\\n    function rewardTokenAddress() external view returns(address);\\n}\"\r\n    },\r\n    \"contracts/interfaces/IFACTORY.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: None\\npragma solidity ^0.8.17;\\n\\ninterface IFACTORY {\\n    function proofRevenueAddress() external view returns (address);\\n\\n    function proofRewardPoolAddress() external view returns (address);\\n\\n    function isWhitelisted(address user) external view returns(bool);\\n}\"\r\n    },\r\n    \"contracts/interfaces/IProofFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: None\\npragma solidity ^0.8.17;\\n\\ninterface IProofFactory {\\n    struct ProofToken {\\n        bool status;\\n        address pair;\\n        address owner;\\n        uint256 unlockTime;\\n        uint256 lockId;\\n    }\\n\\n    struct TokenParam {\\n        string tokenName;\\n        string tokenSymbol;\\n        uint256 initialSupply;\\n        uint256 percentToLP;\\n        address reflectionToken;\\n        address devWallet;\\n        uint256 initialReflectionFee;\\n        uint256 initialReflectionFeeOnSell;\\n        uint256 initialLpFee;\\n        uint256 initialLpFeeOnSell;\\n        uint256 initialDevFee;\\n        uint256 initialDevFeeOnSell;\\n        uint256 unlockTime;\\n        uint256 antiSnipeDuration;\\n    }\\n\\n    function createToken(TokenParam memory _tokenParam) external payable;\\n    function finalizeToken(address tokenAddress) external payable;\\n\\n    event TokenCreated(address _address);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IProofFactoryGate.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: None\\npragma solidity ^0.8.17;\\n\\nimport \\\"./IProofFactory.sol\\\";\\n\\ninterface IProofFactoryGate {\\n    function updateProofFactory(address _newFactory) external;\\n\\n    function createToken(\\n        IProofFactory.TokenParam memory _tokenParam,\\n        address _routerAddress,\\n        address _proofAdmin,\\n        address _owner\\n    ) external returns (address);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IProofFactoryTokenCutter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: None\\npragma solidity ^0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"../libraries/ProofFactoryFees.sol\\\";\\n\\ninterface IProofFactoryTokenCutter is IERC20, IERC20Metadata {\\n    struct BaseData {\\n        string tokenName;\\n        string tokenSymbol;\\n        uint256 initialSupply;\\n        uint256 percentToLP;\\n        address owner;\\n        address devWallet;\\n        address reflectionToken;\\n        address routerAddress;\\n        address initialProofAdmin;\\n        uint256 antiSnipeDuration;\\n    }\\n\\n    function setBasicData(\\n        BaseData memory _baseData,\\n        ProofFactoryFees.allFees memory fees\\n    ) external;\\n\\n    function pair() external view returns (address);\\n\\n    function swapTradingStatus() external;\\n\\n    function updateProofFactory(address _newFactory) external;\\n\\n    function changeIsTxLimitExempt(\\n        address holder,\\n        bool exempt\\n    ) external;\\n\\n    function changeFees(\\n        uint256 initialMainFee,\\n        uint256 initialMainFeeOnSell,\\n        uint256 initialLpFee,\\n        uint256 initialLpFeeOnSell,\\n        uint256 initialDevFee,\\n        uint256 initialDevFeeOnSell\\n    ) external;\\n\\n    event DistributorFail(string message);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IUniswapV2Factory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: None\\npragma solidity ^0.8.17;\\n\\ninterface IUniswapV2Factory {\\n    function createPair(address tokenA, address tokenB)\\n        external\\n        returns (address pair);\\n}\"\r\n    },\r\n    \"contracts/interfaces/IUniswapV2Router02.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: None\\npragma solidity ^0.8.17;\\n\\ninterface IUniswapV2Router02 {\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external;\\n\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable;\\n\\n    function factory() external pure returns (address);\\n\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidityETH(\\n        address token,\\n        uint256 amountTokenDesired,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline\\n    )\\n        external\\n        payable\\n        returns (\\n            uint256 amountToken,\\n            uint256 amountETH,\\n            uint256 liquidity\\n        );\\n\\n    function removeLiquidityETH(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountToken, uint256 amountETH);\\n}\"\r\n    },\r\n    \"contracts/interfaces/IWETH.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: None\\npragma solidity ^0.8.17;\\n\\ninterface IWETH {\\n    function deposit() external payable;\\n    function transfer(address to, uint value) external returns (bool);\\n    function withdraw(uint) external;\\n}\"\r\n    },\r\n    \"contracts/libraries/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: None\\npragma solidity ^0.8.17;\\n\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\"\r\n    },\r\n    \"contracts/libraries/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: None\\npragma solidity ^0.8.17;\\n\\nimport \\\"./Context.sol\\\";\\n\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(\\n        address indexed previousOwner,\\n        address indexed newOwner\\n    );\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(\\n            newOwner != address(0),\\n            \\\"Ownable: new owner is the zero address\\\"\\n        );\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\"\r\n    },\r\n    \"contracts/libraries/ProofFactoryFees.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: None\\npragma solidity ^0.8.17;\\n\\nlibrary ProofFactoryFees {\\n    struct allFees {\\n        uint256 reflectionFee;\\n        uint256 reflectionFeeOnSell;\\n        uint256 lpFee;\\n        uint256 lpFeeOnSell;\\n        uint256 devFee;\\n        uint256 devFeeOnSell;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/TokenUtils.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/interfaces/IERC20Metadata.sol\\\";\\n\\n/// @title  TokenUtils\\n/// @author Savvy DeFi\\nlibrary TokenUtils  {\\n    /// @dev A safe function to get the decimals of an ERC20 token.\\n    ///\\n    /// @dev Reverts with a {CallFailed} error if execution of the query fails or returns an unexpected value.\\n    ///\\n    /// @param token The target token.\\n    ///\\n    /// @return The amount of decimals of the token.\\n    function expectDecimals(address token) internal view returns (uint8) {\\n        (bool success, bytes memory data) = token.staticcall(\\n            abi.encodeWithSelector(IERC20Metadata.decimals.selector)\\n        );\\n\\n        require (success, \\\"invalid decimals\\\");\\n\\n        return abi.decode(data, (uint8));\\n    }   \\n}\"\r\n    },\r\n    \"contracts/ProofFactoryGate.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: None\\npragma solidity ^0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"./libraries/Ownable.sol\\\";\\nimport \\\"./libraries/ProofFactoryFees.sol\\\";\\n\\nimport \\\"./interfaces/IUniswapV2Router02.sol\\\";\\nimport \\\"./interfaces/IProofFactoryTokenCutter.sol\\\";\\nimport \\\"./interfaces/IProofFactoryGate.sol\\\";\\nimport \\\"./interfaces/IFACTORY.sol\\\";\\nimport \\\"./tokenCutters/ProofFactoryTokenCutter.sol\\\";\\n\\ncontract ProofFactoryGate is Ownable, IProofFactoryGate {\\n    using SafeERC20 for IERC20;\\n\\n    address public proofFactory;\\n    modifier onlyFactory() {\\n        require(msg.sender == proofFactory, \\\"only factory\\\");\\n        _;\\n    }\\n\\n    constructor() {}\\n\\n    function updateProofFactory(\\n        address _proofFactory\\n    ) external override onlyOwner {\\n        require(_proofFactory != address(0), \\\"zero ProofFactory address\\\");\\n        proofFactory = _proofFactory;\\n    }\\n\\n    function createToken(\\n        IProofFactory.TokenParam memory tokenParam_,\\n        address _routerAddress,\\n        address _proofAdmin,\\n        address _owner\\n    ) external override onlyFactory returns (address) {\\n        //create token\\n        ProofFactoryFees.allFees memory fees = ProofFactoryFees.allFees(\\n            tokenParam_.initialReflectionFee,\\n            tokenParam_.initialReflectionFeeOnSell,\\n            tokenParam_.initialLpFee,\\n            tokenParam_.initialLpFeeOnSell,\\n            tokenParam_.initialDevFee,\\n            tokenParam_.initialDevFeeOnSell\\n        );\\n        ProofFactoryTokenCutter newToken = new ProofFactoryTokenCutter();\\n        Ownable(address(newToken)).transferOwnership(_owner);\\n        address newTokenAddress = address(newToken);\\n\\n        IProofFactoryTokenCutter(newTokenAddress).setBasicData(\\n            IProofFactoryTokenCutter.BaseData(\\n                tokenParam_.tokenName,\\n                tokenParam_.tokenSymbol,\\n                tokenParam_.initialSupply,\\n                tokenParam_.percentToLP,\\n                _owner,\\n                tokenParam_.devWallet,\\n                tokenParam_.reflectionToken,\\n                _routerAddress,\\n                _proofAdmin,\\n                tokenParam_.antiSnipeDuration\\n            ),\\n            fees\\n        );\\n\\n        IProofFactoryTokenCutter(newTokenAddress).updateProofFactory(\\n            proofFactory\\n        );\\n\\n        uint256 balance = IERC20(newTokenAddress).balanceOf(address(this));\\n        IERC20(newTokenAddress).safeTransfer(proofFactory, balance);\\n\\n        return newTokenAddress;\\n    }\\n\\n    receive() external payable {}\\n\\n    function isWhitelisted(address user) external view returns(bool) {\\n        return IFACTORY(proofFactory).isWhitelisted(user);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/tokenCutters/ProofFactoryTokenCutter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: None\\npragma solidity ^0.8.17;\\n\\nimport \\\"../libraries/Ownable.sol\\\";\\nimport \\\"../libraries/ProofFactoryFees.sol\\\";\\nimport \\\"../interfaces/IFACTORY.sol\\\";\\nimport \\\"../interfaces/IDividendDistributor.sol\\\";\\nimport \\\"../interfaces/IUniswapV2Router02.sol\\\";\\nimport \\\"../DividendDistributor.sol\\\";\\nimport \\\"../interfaces/IProofFactoryTokenCutter.sol\\\";\\n\\ncontract ProofFactoryTokenCutter is Ownable, IProofFactoryTokenCutter {\\n\\n    //This token was created with PROOF, and audited by Solidity Finance \u2014 https://proofplatform.io/projects\\n    IDividendDistributor public dividendDistributor;\\n    uint256 distributorGas = 50000;\\n\\n    mapping(address => uint256) private _balances;\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    address constant DEAD = 0x000000000000000000000000000000000000dEaD;\\n    address constant ZERO = 0x0000000000000000000000000000000000000000;\\n    address public proofAdmin;\\n\\n    bool public restrictWhales = true;\\n\\n    mapping(address => bool) public isFeeExempt;\\n    mapping(address => bool) public isTxLimitExempt;\\n    mapping(address => bool) public isDividendExempt;\\n\\n    uint256 public launchedAt;\\n    uint256 public revenueFee = 2;\\n    uint256 public revenueFeeOnSell = 2;\\n\\n    uint256 public reflectionFee;\\n    uint256 public lpFee;\\n    uint256 public devFee;\\n\\n    uint256 public reflectionFeeOnSell;\\n    uint256 public lpFeeOnSell;\\n    uint256 public devFeeOnSell;\\n\\n    uint256 public totalFee;\\n    uint256 public totalFeeIfSelling;\\n\\n    uint256 accLpFees;\\n    uint256 accDevFees;\\n    uint256 accRevenueFees;\\n    uint256 accReflectionFees;\\n\\n    bool public proofFeeRemoved = false;\\n    bool public proofFeeReduced = false;\\n\\n    IUniswapV2Router02 public router;\\n    address public pair;\\n    address public factory;\\n    address payable public devWallet;\\n\\n    bool inSwapAndLiquify;\\n    bool public swapAndLiquifyEnabled = true;\\n    bool public tradingStatus = true;\\n\\n    mapping(address => bool) private bots;\\n\\n    uint256 public antiSnipeDuration;\\n    uint256 public antiSnipeEndTime;\\n\\n    uint256 public _maxTxAmount;\\n    uint256 public _walletMax;\\n    uint256 public swapThreshold;\\n\\n\\n    constructor() {\\n        factory = msg.sender;\\n    }\\n\\n    modifier lockTheSwap() {\\n        inSwapAndLiquify = true;\\n        _;\\n        inSwapAndLiquify = false;\\n    }\\n\\n    modifier onlyProofAdmin() {\\n        require(proofAdmin == _msgSender(), \\\"Caller is not the proofAdmin\\\");\\n        _;\\n    }\\n\\n    modifier onlyFactory() {\\n        require(factory == _msgSender(), \\\"Caller is not the factory\\\");\\n        _;\\n    }\\n\\n    function setBasicData(\\n        BaseData memory _baseData,\\n        ProofFactoryFees.allFees memory fees\\n    ) external onlyFactory {\\n        _name = _baseData.tokenName;\\n        _symbol = _baseData.tokenSymbol;\\n        _totalSupply += _baseData.initialSupply;\\n\\n        //Initial supply\\n        require(_baseData.percentToLP >= 70, \\\"Too low\\\");\\n        uint256 forLP = (_baseData.initialSupply * _baseData.percentToLP) / 100; //95%\\n        uint256 forOwner = _baseData.initialSupply - forLP; //5%\\n\\n        _balances[msg.sender] += forLP;\\n        _balances[_baseData.owner] += forOwner;\\n\\n        emit Transfer(address(0), msg.sender, forLP);\\n        emit Transfer(address(0), _baseData.owner, forOwner);\\n\\n        _maxTxAmount = (_baseData.initialSupply * 5) / 1000;\\n        _walletMax = (_baseData.initialSupply * 1) / 100;\\n        swapThreshold = (_baseData.initialSupply * 5) / 4000;\\n\\n        router = IUniswapV2Router02(_baseData.routerAddress);\\n        pair = IUniswapV2Factory(router.factory()).createPair(\\n            router.WETH(),\\n            address(this)\\n        );\\n\\n        _allowances[address(this)][address(router)] = type(uint256).max;\\n\\n        dividendDistributor = new DividendDistributor(\\n            _baseData.routerAddress,\\n            _baseData.reflectionToken,\\n            address(this)\\n        );\\n\\n        isFeeExempt[address(this)] = true;\\n        isFeeExempt[factory] = true;\\n\\n        isTxLimitExempt[address(this)] = true;\\n        isTxLimitExempt[_baseData.owner] = true;\\n        isTxLimitExempt[pair] = true;\\n        isTxLimitExempt[factory] = true;\\n        isTxLimitExempt[DEAD] = true;\\n        isTxLimitExempt[ZERO] = true;\\n\\n        isDividendExempt[pair] = true;\\n        isDividendExempt[address(this)] = true;\\n        isDividendExempt[DEAD] = true;\\n        isDividendExempt[ZERO] = true;\\n\\n        reflectionFee = fees.reflectionFee;\\n        lpFee = fees.lpFee;\\n        devFee = fees.devFee;\\n\\n        reflectionFeeOnSell = fees.reflectionFeeOnSell;\\n        lpFeeOnSell = fees.lpFeeOnSell;\\n        devFeeOnSell = fees.devFeeOnSell;\\n\\n        _calcTotalFee();\\n\\n        devWallet = payable(_baseData.devWallet);\\n        proofAdmin = _baseData.initialProofAdmin;\\n        antiSnipeDuration = _baseData.antiSnipeDuration;\\n    }\\n\\n    //proofAdmin functions\\n    function updateProofAdmin(\\n        address newAdmin\\n    ) external virtual onlyProofAdmin {\\n        proofAdmin = newAdmin;\\n    }\\n\\n    //Factory functions\\n    function updateProofFactory(address newFactory) external onlyFactory {\\n        isTxLimitExempt[newFactory] = true;\\n        isFeeExempt[newFactory] = true;\\n        factory = newFactory;\\n    }\\n\\n    function swapTradingStatus() external onlyFactory {\\n        tradingStatus = !tradingStatus;\\n    }\\n\\n    function setLaunchedAt() external onlyFactory {\\n        require(launchedAt == 0, \\\"already launched\\\");\\n        launchedAt = block.timestamp;\\n        antiSnipeEndTime = block.timestamp + antiSnipeDuration;\\n    }\\n\\n    function cancelToken() external onlyFactory {\\n        isFeeExempt[address(router)] = true;\\n        isTxLimitExempt[address(router)] = true;\\n        isTxLimitExempt[owner()] = true;\\n        tradingStatus = true;\\n        restrictWhales = false;\\n        swapAndLiquifyEnabled = false;\\n    }\\n\\n    //Owner functions\\n    function changeRestrictWhales(bool _enable) external onlyOwner {\\n        restrictWhales = _enable;\\n    }\\n\\n    function changeFees(\\n        uint256 initialReflectionFee,\\n        uint256 initialReflectionFeeOnSell,\\n        uint256 initialLpFee,\\n        uint256 initialLpFeeOnSell,\\n        uint256 initialDevFee,\\n        uint256 initialDevFeeOnSell\\n    ) external onlyOwner {\\n        reflectionFee = initialReflectionFee;\\n        lpFee = initialLpFee;\\n        devFee = initialDevFee;\\n\\n        reflectionFeeOnSell = initialReflectionFeeOnSell;\\n        lpFeeOnSell = initialLpFeeOnSell;\\n        devFeeOnSell = initialDevFeeOnSell;\\n\\n        _calcTotalFee();\\n    }\\n\\n    function changeTxLimit(uint256 newLimit) external onlyOwner {\\n        _checkLimit(newLimit);\\n        _maxTxAmount = newLimit;\\n    }\\n\\n    function rewardTokenAddress() external view returns(address) {\\n        return dividendDistributor.rewardTokenAddress();\\n    }\\n\\n    function changeWalletLimit(uint256 newLimit) external onlyOwner {\\n        _checkLimit(newLimit);\\n        _walletMax = newLimit;\\n    }\\n\\n    function changeIsFeeExempt(address holder, bool exempt) external onlyOwner {\\n        isFeeExempt[holder] = exempt;\\n    }\\n\\n    function changeIsTxLimitExempt(\\n        address holder,\\n        bool exempt\\n    ) external onlyOwner {\\n        isTxLimitExempt[holder] = exempt;\\n    }\\n\\n    function changeDistributorGas(uint256 _distributorGas) external onlyOwner {\\n        distributorGas = _distributorGas;\\n    }\\n\\n    function changeMinDistSettings(\\n        uint256 _minPeriod,\\n        uint256 _minDistLimit\\n    ) external onlyOwner {\\n        dividendDistributor.setMinPeriod(_minPeriod);\\n        dividendDistributor.setMinDistribution(_minDistLimit);\\n    }\\n\\n    function setDevWallet(address payable newDevWallet) external onlyOwner {\\n        devWallet = payable(newDevWallet);\\n    }\\n\\n    function changeSwapBackSettings(\\n        bool enableSwapBack,\\n        uint256 newSwapBackLimit\\n    ) external onlyOwner {\\n        swapAndLiquifyEnabled = enableSwapBack;\\n        swapThreshold = newSwapBackLimit;\\n    }\\n\\n    function setDistributionCriteria(\\n        uint256 newMinPeriod_,\\n        uint256 newMinDistribution_\\n    ) external onlyOwner {\\n        dividendDistributor.setDistributionCriteria(\\n            newMinPeriod_,\\n            newMinDistribution_\\n        );\\n    }\\n\\n    function delBot(address notbot) external {\\n        address sender = _msgSender();\\n        require(\\n            sender == proofAdmin || sender == owner(),\\n            \\\"Caller doesn't have permission\\\"\\n        );\\n        bots[notbot] = false;\\n    }\\n\\n    function getCirculatingSupply() external view returns (uint256) {\\n        return _totalSupply - balanceOf(DEAD) - balanceOf(ZERO);\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() external view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() external view virtual override returns (uint8) {\\n        return 9;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() external view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(\\n        address account\\n    ) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(\\n        address to,\\n        uint256 amount\\n    ) external virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(\\n        address owner,\\n        address spender\\n    ) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(\\n        address spender,\\n        uint256 amount\\n    ) external virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     *\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(\\n        address spender,\\n        uint256 addedValue\\n    ) external virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, _allowances[owner][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(\\n        address spender,\\n        uint256 subtractedValue\\n    ) external virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = _allowances[owner][spender];\\n        require(\\n            currentAllowance >= subtractedValue,\\n            \\\"Decreased allowance below zero\\\"\\n        );\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal returns (bool) {\\n        require(tradingStatus, \\\"!trading\\\");\\n        require(!bots[sender] && !bots[recipient]);\\n        if (antiSnipeEndTime != 0 && block.timestamp < antiSnipeEndTime) {\\n            bots[tx.origin] = true;\\n            if (recipient != tx.origin) {\\n                revert('antisnipe');\\n            }\\n        }\\n\\n        if (!proofFeeRemoved && launchedAt != 0) { //first 31 days only\\n            if (!proofFeeReduced) { //case where proofFee is still 2, check if we can reduce\\n                if (block.timestamp > launchedAt + 86400) {\\n                    _calcTotalFee();\\n                }\\n            } else { //case where proofFee gas been reduced already, check if we can remove\\n                if (block.timestamp > launchedAt + 31 days) {\\n                    _calcTotalFee();\\n                }\\n            }\\n        }\\n\\n        if (inSwapAndLiquify) {\\n            return _basicTransfer(sender, recipient, amount);\\n        }\\n\\n        if (recipient == pair && restrictWhales) {\\n            require(\\n                amount <= _maxTxAmount ||\\n                    (isTxLimitExempt[sender] && isTxLimitExempt[recipient]),\\n                \\\"Max TX Amount\\\"\\n            );\\n        }\\n\\n        if (!isTxLimitExempt[recipient] && restrictWhales) {\\n            require(_balances[recipient] + amount <= _walletMax, \\\"wallet\\\");\\n        }\\n\\n        if (\\n            sender != pair &&\\n            !inSwapAndLiquify &&\\n            swapAndLiquifyEnabled &&\\n            (accDevFees + accLpFees + accReflectionFees + accRevenueFees) >= swapThreshold\\n        ) {\\n            swapBack();\\n        }\\n\\n        _balances[sender] = _balances[sender] - amount;\\n        uint256 finalAmount = amount;\\n\\n       if (sender == pair || recipient == pair) {\\n            finalAmount = !isFeeExempt[sender] && !isFeeExempt[recipient]\\n                ? takeFee(sender, recipient, amount)\\n                : amount;\\n        }\\n\\n        _balances[recipient] = _balances[recipient] + finalAmount;\\n\\n        // Dividend tracker\\n        if (!isDividendExempt[sender]) {\\n            try dividendDistributor.setShare(sender, _balances[sender]) {} catch {\\n                emit DistributorFail(\\\"Please check if distributor is at max wallet or transfer amount.\\\");\\n            }\\n        }\\n\\n        if (!isDividendExempt[recipient]) {\\n            try dividendDistributor.setShare(recipient, _balances[recipient]) {} catch {\\n                    emit DistributorFail(\\\"Please check if distributor is at max wallet or transfer amount.\\\");\\n                }\\n        }\\n\\n        try dividendDistributor.process(distributorGas) {} catch {\\n            emit DistributorFail(\\\"Please check if distributor is at max wallet or transfer amount.\\\");\\n        }\\n\\n        emit Transfer(sender, recipient, finalAmount);\\n        return true;\\n    }\\n\\n    function _basicTransfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal returns (bool) {\\n        _balances[sender] = _balances[sender] - amount;\\n        _balances[recipient] = _balances[recipient] + amount;\\n        emit Transfer(sender, recipient, amount);\\n        return true;\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Spend `amount` form the allowance of `owner` toward `spender`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(\\n                currentAllowance >= amount,\\n                \\\"ERC20: insufficient allowance\\\"\\n            );\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    function takeFee(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal returns (uint256) {\\n        uint256 feeApplicable;\\n        uint256 _lpApplicable;\\n        uint256 _devApplicable;\\n        uint256 _proofApplicable;\\n        uint256 _reflectionApplicable;\\n        if (pair == recipient) {\\n            feeApplicable = totalFeeIfSelling;\\n            _lpApplicable = lpFeeOnSell;\\n            _devApplicable = devFeeOnSell;\\n            _proofApplicable = revenueFeeOnSell;\\n            _reflectionApplicable = reflectionFeeOnSell;\\n        } else {\\n            feeApplicable = totalFee;\\n            _lpApplicable = lpFee;\\n            _devApplicable = devFee;\\n            _proofApplicable = revenueFee;\\n            _reflectionApplicable = reflectionFee;\\n        }\\n        if (feeApplicable == 0) return(amount);\\n        uint256 feeAmount = (amount * feeApplicable) / 100;\\n\\n        accLpFees += feeAmount * _lpApplicable / feeApplicable;\\n        accDevFees += feeAmount * _devApplicable / feeApplicable;\\n        accRevenueFees += feeAmount * _proofApplicable / feeApplicable;\\n        accReflectionFees += feeAmount * _reflectionApplicable / feeApplicable;\\n\\n        _balances[address(this)] = _balances[address(this)] + feeAmount;\\n        \\n        emit Transfer(sender, address(this), feeAmount);\\n\\n        return amount - feeAmount;\\n    }\\n\\n    function swapBack() internal lockTheSwap {\\n        uint256 tokensToLiquify = swapThreshold;\\n\\n        uint256 lpProportion = accLpFees;\\n        uint256 devProportion = accDevFees;\\n        uint256 proofProportion = accRevenueFees;\\n        uint256 reflectionProportion = accReflectionFees;\\n        uint256 totalProportion = lpProportion + devProportion + proofProportion + reflectionProportion;\\n\\n        uint256 lpAmt = tokensToLiquify * lpProportion / totalProportion;\\n\\n        uint256 amountToLiquify = lpAmt / 2;\\n\\n        if (tokensToLiquify - amountToLiquify == 0) return;\\n\\n        address[] memory path = new address[](2);\\n        path[0] = address(this);\\n        path[1] = router.WETH();\\n        router.swapExactTokensForETHSupportingFeeOnTransferTokens(\\n            (tokensToLiquify - amountToLiquify),\\n            0,\\n            path,\\n            address(this),\\n            block.timestamp\\n        );\\n\\n        uint256 amountA;\\n        if (amountToLiquify > 0) {\\n            (amountA,,) = router.addLiquidityETH{value: ((address(this).balance * amountToLiquify) / (totalProportion - amountToLiquify))}(\\n                address(this),\\n                amountToLiquify,\\n                0,\\n                0,\\n                0x000000000000000000000000000000000000dEaD,\\n                block.timestamp\\n            );\\n        }\\n        accLpFees = lpProportion < (lpAmt - (amountToLiquify - amountA)) ? 0 : \\n            (lpProportion - (lpAmt - (amountToLiquify - amountA)));\\n\\n        if (totalProportion - lpProportion == 0) return;\\n        uint256 amountETHafterLP = address(this).balance;\\n        uint256 devBalance = amountETHafterLP * devProportion / (devProportion + proofProportion + reflectionProportion);\\n        uint256 revenueBalance = (amountETHafterLP * proofProportion) / (devProportion + proofProportion + reflectionProportion);\\n        uint256 amountEthReflection = amountETHafterLP -\\n            devBalance -\\n            revenueBalance;\\n\\n        accDevFees = devProportion < (tokensToLiquify * devProportion / totalProportion) ? 0 : \\n            (devProportion - (tokensToLiquify * devProportion / totalProportion));\\n        accRevenueFees = proofProportion < (tokensToLiquify * proofProportion / totalProportion) ? 0 : \\n            (proofProportion - (tokensToLiquify * proofProportion / totalProportion));\\n        accReflectionFees = reflectionProportion < (tokensToLiquify * reflectionProportion / totalProportion) ? 0 : \\n            (reflectionProportion - (tokensToLiquify * reflectionProportion / totalProportion));\\n\\n        if (amountETHafterLP > 0) {\\n            if (revenueBalance > 0) {\\n                uint256 revenueSplit = revenueBalance / 2;\\n                (bool sent, ) = payable(IFACTORY(factory).proofRevenueAddress()).call{value: revenueSplit}(\\\"\\\");\\n                require(sent);\\n                (bool sent1, ) = payable(IFACTORY(factory).proofRewardPoolAddress()).call{value: revenueSplit}(\\\"\\\");\\n                require(sent1);\\n            }\\n            if (devBalance > 0) {\\n                (bool sent, ) = devWallet.call{value: devBalance}(\\\"\\\");\\n                require(sent);\\n            }\\n        }\\n\\n        try dividendDistributor.deposit{value: amountEthReflection}() {} catch {\\n            emit DistributorFail(\\\"Please check if reward token is compatible.\\\");\\n        }\\n    }\\n\\n    function _checkLimit(uint256 _newLimit) internal view {\\n        require(launchedAt != 0, \\\"!launched\\\");\\n        require(_newLimit >= (_totalSupply * 5) / 1000, \\\"Min 0.5%\\\");\\n        require(_newLimit <= (_totalSupply * 3) / 100, \\\"Max 3%\\\");\\n    }\\n\\n    function _calcTotalFee() internal {\\n        uint256 _devFee = devFee;\\n        uint256 _lpFee = lpFee;\\n        uint256 _reflectionFee = reflectionFee;\\n        uint256 _devFeeOnSell = devFeeOnSell;\\n        uint256 _lpFeeOnSell = lpFeeOnSell;\\n        uint256 _reflectionFeeOnSell = reflectionFeeOnSell;\\n\\n        if (!proofFeeRemoved && launchedAt != 0) { //first 31 days only\\n            if (!proofFeeReduced) { //case where proofFee is still 2, check if we can reduce\\n                if (block.timestamp > launchedAt + 86400) {\\n                    revenueFee = 1;\\n                    revenueFeeOnSell = 1;\\n                    proofFeeReduced = true;\\n                } else {\\n                    revenueFee = 2;\\n                    revenueFeeOnSell = 2;\\n                }\\n            } else { //case where it is 1, check if we can remove\\n                if (block.timestamp > launchedAt + 31 days) {\\n                    revenueFee = 0;\\n                    revenueFeeOnSell = 0;\\n                    proofFeeRemoved = true;\\n                } else {\\n                    revenueFee = 1;\\n                    revenueFeeOnSell = 1;\\n                }\\n            }\\n        }\\n\\n        if (_devFee + _lpFee + _reflectionFee == 0) {\\n            revenueFee = 0;\\n        } \\n        totalFee = _devFee + _lpFee + _reflectionFee + revenueFee;\\n\\n        if (_devFeeOnSell + _lpFeeOnSell + _reflectionFeeOnSell == 0) {\\n            revenueFeeOnSell = 0;\\n        }\\n        totalFeeIfSelling = _devFeeOnSell + _lpFeeOnSell + _reflectionFeeOnSell + revenueFeeOnSell;\\n        \\n        if (IFACTORY(factory).isWhitelisted(owner())) {\\n            require(totalFee <= 12, \\\"high KYC fee\\\");\\n            require(totalFeeIfSelling <= 17, \\\"high KYC fee\\\");\\n        } else {\\n            require(totalFee <= 7, \\\"high fee\\\");\\n            require(totalFeeIfSelling <= 7, \\\"high fee\\\");\\n        }\\n    }\\n\\n    function withdrawAndSync() external onlyOwner {\\n        _transfer(address(this), msg.sender, balanceOf(address(this)) - (accDevFees + accLpFees + accReflectionFees + accRevenueFees));\\n    }\\n\\n    receive() external payable {}\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200,\r\n      \"details\": {\r\n        \"yul\": true\r\n      }\r\n    },\r\n    \"viaIR\": true,\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"tokenName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"tokenSymbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"initialSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"percentToLP\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"reflectionToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"devWallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"initialReflectionFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initialReflectionFeeOnSell\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initialLpFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initialLpFeeOnSell\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initialDevFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initialDevFeeOnSell\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unlockTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"antiSnipeDuration\",\"type\":\"uint256\"}],\"internalType\":\"struct IProofFactory.TokenParam\",\"name\":\"tokenParam_\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"_routerAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_proofAdmin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"createToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"isWhitelisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proofFactory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_proofFactory\",\"type\":\"address\"}],\"name\":\"updateProofFactory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "ProofFactoryGate", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}