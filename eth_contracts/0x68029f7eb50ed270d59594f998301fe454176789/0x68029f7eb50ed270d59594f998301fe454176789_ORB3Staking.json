{"SourceCode": "// SPDX-License-Identifier: UNLICENSED\r\npragma solidity ^0.8.19;\r\n\r\n\r\ninterface IERC20 {\r\n    function transfer(\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n}\r\n\r\ncontract ORB3Staking {\r\n    IERC20 public stakingToken;\r\n    address public owner;\r\n    // uint256 public rewardRatePerTokenPerSecond = 1; // Example rate\r\n    uint256 public dailyROI;\r\n\r\n    struct StakerInfo {\r\n        uint256 stakedAmount;\r\n        uint256 stakingStartTime;\r\n        uint256 lastClaimTime;\r\n        uint256 rewards;\r\n        uint256 vestingPeriod; // User-selected vesting period in seconds\r\n    }\r\n\r\n    mapping(address => StakerInfo) public stakers;\r\n\r\n    event Staked(\r\n        address indexed user,\r\n        uint256 amount,\r\n        uint256 timestamp,\r\n        uint256 vestingPeriod\r\n    );\r\n    event Unstaked(address indexed user, uint256 amount, uint256 timestamp);\r\n    event RewardPaid(address indexed user, uint256 reward);\r\n    event RewardRateUpdated(uint256 newRate);\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"Caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    constructor(address _stakingToken) {\r\n        stakingToken = IERC20(_stakingToken);\r\n        owner = msg.sender; // Set the deployer as the owner\r\n    }\r\n\r\n    function stake(uint256 _amount, uint256 _vestingPeriod) external {\r\n        require(_amount > 0, \"Cannot stake 0 tokens\");\r\n        require(\r\n            _vestingPeriod == 30 days ||\r\n                _vestingPeriod == 60 days ||\r\n                _vestingPeriod == 90 days ||\r\n                _vestingPeriod == 120 days,\r\n            \"Invalid vesting period\"\r\n        );\r\n        require(stakingToken.transferFrom(msg.sender,address(this), _amount),'stake failed');\r\n        StakerInfo storage staker = stakers[msg.sender];\r\n        updateReward(msg.sender); // Update rewards before changing staked amount\r\n\r\n        staker.stakedAmount += _amount;\r\n        staker.stakingStartTime = block.timestamp;\r\n        staker.lastClaimTime = block.timestamp; // Reset last claim time on new stake\r\n        staker.vestingPeriod = _vestingPeriod; // Set the user-selected vesting period\r\n\r\n        emit Staked(msg.sender, _amount, block.timestamp, _vestingPeriod);\r\n    }\r\n\r\n    function setDailyROI(uint256 _dailyROI) external onlyOwner {\r\n    require(_dailyROI <= 10000, \"ROI too high\"); // Ensuring the ROI doesn't exceed 100%\r\n    dailyROI = _dailyROI;\r\n    }\r\n\r\n    function unstake(uint256 _amount) external {\r\n        StakerInfo storage staker = stakers[msg.sender];\r\n        require(\r\n            block.timestamp >= staker.stakingStartTime + staker.vestingPeriod,\r\n            \"Tokens are still in vesting period\"\r\n        );\r\n        require(\r\n            staker.stakedAmount >= _amount,\r\n            \"Not enough balance to unstake\"\r\n        );\r\n\r\n        updateReward(msg.sender); // Update rewards before unstaking\r\n\r\n        staker.stakedAmount -= _amount;\r\n\r\n        require(stakingToken.transfer(msg.sender, _amount), \"Unstake failed\");\r\n\r\n        emit Unstaked(msg.sender, _amount, block.timestamp);\r\n    }\r\n\r\n    function claimReward() external {\r\n        updateReward(msg.sender);\r\n\r\n        uint256 reward = stakers[msg.sender].rewards;\r\n        require(reward > 0, \"No reward available\");\r\n\r\n        stakers[msg.sender].rewards = 0;\r\n        require(\r\n            stakingToken.transfer(msg.sender, reward),\r\n            \"Reward transfer failed\"\r\n        );\r\n\r\n        emit RewardPaid(msg.sender, reward);\r\n    }\r\n\r\n    function updateReward(address account) internal {\r\n        StakerInfo storage staker = stakers[account];\r\n        if (staker.stakedAmount > 0) {\r\n            uint256 timeSinceLastClaim = block.timestamp - staker.lastClaimTime;\r\n            uint256 reward = (timeSinceLastClaim * staker.stakedAmount * dailyROI) / (10000 * 86400); \r\n            staker.rewards += reward;\r\n            staker.lastClaimTime = block.timestamp;\r\n        }\r\n    }\r\n\r\n    function earned(address account) public view returns (uint256) {\r\n    StakerInfo storage staker = stakers[account];\r\n    uint256 timeSinceLastClaim = block.timestamp - staker.lastClaimTime;\r\n    uint256 currentReward = (timeSinceLastClaim * staker.stakedAmount * dailyROI) / (10000 * 86400); // Convert daily ROI to per second ROI\r\n    return staker.rewards + currentReward;\r\n    }\r\n\r\n    \r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stakingToken\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"RewardPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newRate\",\"type\":\"uint256\"}],\"name\":\"RewardRateUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"vestingPeriod\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"Unstaked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"claimReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dailyROI\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"earned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_dailyROI\",\"type\":\"uint256\"}],\"name\":\"setDailyROI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_vestingPeriod\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stakers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"stakedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakingStartTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastClaimTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewards\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vestingPeriod\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "ORB3Staking", "CompilerVersion": "v0.8.24+commit.e11b9ed9", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000ad9334e92053de2f3b6be95aec017e984ad3676a", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://81739e10550d397e28d95014b623c5ab5032195685e28adbfde7b8db8828bec9"}