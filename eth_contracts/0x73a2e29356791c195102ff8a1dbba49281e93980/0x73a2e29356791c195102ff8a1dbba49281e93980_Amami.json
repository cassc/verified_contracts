{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.20;\r\n \r\nabstract contract Ownable {\r\n    address internal owner;\r\n \r\n    constructor(address _owner) {\r\n        owner = _owner;\r\n    }\r\n \r\n    modifier onlyOwner() {\r\n        require(isOwner(msg.sender), \"Only owner can execute the following\");\r\n        _;\r\n    }\r\n \r\n    function isOwner(address account) public view returns (bool) {\r\n        return account == owner;\r\n    }\r\n \r\n    function renounceOwnership() public onlyOwner {\r\n        owner = address(0);\r\n        emit OwnershipTransferred(address(0));\r\n    }\r\n \r\n    event OwnershipTransferred(address owner);\r\n}\r\n \r\ninterface IERC20 { \r\n    function totalSupply() external view returns (uint256); \r\n    function balanceOf(address account) external view returns (uint256); \r\n    function transfer(address recipient, uint256 amount) external returns (bool); \r\n    function allowance(address owner, address spender) external view returns (uint256); \r\n    function approve(address spender, uint256 amount) external returns (bool); \r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool); \r\n    event Transfer(address indexed from, address indexed to, uint256 value); \r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n} \r\n \r\nlibrary SafeMath { \r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n \r\n        return c;\r\n    }\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        uint256 c = a - b;\r\n \r\n        return c;\r\n    } \r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) { \r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n \r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n \r\n        return c;\r\n    }\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0, \"SafeMath: modulo by zero\");\r\n        return a % b;\r\n    }\r\n}\r\n \r\n \r\ncontract ERC20 is IERC20 {\r\n    using SafeMath for uint256;\r\n \r\n    mapping (address => uint256) private _balances;\r\n \r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n \r\n    uint256 private _totalSupply;\r\n \r\n    function totalSupply() public view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n \r\n    function balanceOf(address account) public view returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n \r\n    function transfer(address recipient, uint256 amount) public virtual returns (bool) {\r\n        _transfer(msg.sender, recipient, amount);\r\n        return true;\r\n    }\r\n \r\n    function allowance(address owner, address spender) public view returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n \r\n    function approve(address spender, uint256 value) public returns (bool) {\r\n        _approve(msg.sender, spender, value);\r\n        return true;\r\n    }\r\n \r\n    function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, msg.sender, _allowances[sender][msg.sender].sub(amount));\r\n        return true;\r\n    }\r\n \r\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\r\n        _approve(msg.sender, spender, _allowances[msg.sender][spender].add(addedValue));\r\n        return true;\r\n    }\r\n \r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\r\n        _approve(msg.sender, spender, _allowances[msg.sender][spender].sub(subtractedValue));\r\n        return true;\r\n    }\r\n \r\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n \r\n        _balances[sender] = _balances[sender].sub(amount);\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n \r\n    function _mint(address account, uint256 amount) internal {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n \r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n \r\n    function _approve(address owner, address spender, uint256 value) internal {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n \r\n        _allowances[owner][spender] = value;\r\n        emit Approval(owner, spender, value);\r\n    }\r\n}\r\n \r\ninterface IUniswapV2Router02 {\r\n    function WETH() external pure returns (address);\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n}\r\n \r\n \r\ninterface IUniswapV2Factory {\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n}\r\n \r\ncontract Amami is ERC20, Ownable {\r\n    using SafeMath for uint256;\r\n    IUniswapV2Router02 public immutable uniswapV2Router02 = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n    IUniswapV2Factory public immutable uniswapV2Factory = IUniswapV2Factory(0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f);\r\n    address AMAMI_COLLECTOR;\r\n    address DEV_ADDRESS;\r\n    address AmamiLiquidityLock;\r\n \r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n    uint256 public buyFees = 4;\r\n    uint256 public sellFees = 4;\r\n \r\n    bool private liquifying;\r\n    uint256 liquifyModifier = 5;\r\n \r\n    uint256 maxWalletSize = 0;\r\n    uint256 maxTransactionAmount = 0;\r\n \r\n    mapping(address => bool) private _isExemptFromFees;\r\n    mapping(address => bool) public _isExmptFromMaxTransactionAmount;\r\n \r\n    bool private liquifyingEnabled = true;\r\n    bool private limitsInEffect = true;\r\n \r\n    constructor(string memory __name, string memory __symbol, uint8 __decimals, uint256 __totalSupply, address _collector, address _devAddress) Ownable(msg.sender) payable {\r\n        _name = __name;\r\n        _symbol = __symbol;\r\n        _decimals = __decimals;\r\n \r\n        _isExemptFromFees[owner] = true;\r\n        _isExemptFromFees[address(this)] = true;\r\n        _isExemptFromFees[address(0xdead)] = true;\r\n \r\n        _isExmptFromMaxTransactionAmount[owner]= true;\r\n        _isExmptFromMaxTransactionAmount[address(this)] =  true;\r\n        _isExmptFromMaxTransactionAmount[address(0xdead)] = true;\r\n \r\n        uint256 totalSupply = __totalSupply * (10 ** __decimals);\r\n        uint256 walletSize = 2;\r\n        maxWalletSize = walletSize.mul(totalSupply).div(100);\r\n        maxTransactionAmount = walletSize.mul(totalSupply).div(100);\r\n \r\n        _mint(owner, totalSupply);\r\n \r\n        AMAMI_COLLECTOR = _collector;\r\n        DEV_ADDRESS = _devAddress;\r\n    } \r\n \r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n \r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n \r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n \r\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(msg.sender, recipient, amount);\r\n        return true;\r\n    }\r\n \r\n    function getMarketMakerPair() public view returns (address){\r\n        return uniswapV2Factory.getPair(uniswapV2Router02.WETH(), address(this));\r\n    }\r\n \r\n    function setLiquifyModifier(uint256 _newLiquifyModifier) public onlyOwner {\r\n        liquifyModifier = _newLiquifyModifier;\r\n    }\r\n \r\n    function modifyFeeConfig(uint256 _newBuyFeesModifier, uint256 _newSellFeesModifier) public onlyOwner {\r\n        require(_newBuyFeesModifier <= 5, \"Buy fees cannot exceed 5%\");\r\n        require(_newSellFeesModifier <= 5, \"Sell fees cannot exceed 5%\");\r\n        buyFees = _newBuyFeesModifier;\r\n        sellFees = _newSellFeesModifier;\r\n    }\r\n \r\n    function updateFlags(bool _limitsInEffect, bool _liquifyingEnabled) public onlyOwner {\r\n        limitsInEffect = _limitsInEffect;\r\n        liquifyingEnabled = _liquifyingEnabled;\r\n    }\r\n \r\n    function setLockerAllowance(address _liquidityLockAddress) public onlyOwner {\r\n        AmamiLiquidityLock = _liquidityLockAddress;\r\n        _isExmptFromMaxTransactionAmount[_liquidityLockAddress] = true;\r\n        _isExemptFromFees[_liquidityLockAddress] = true;\r\n    }\r\n \r\n    function setWalletConfig(uint256 _newWalletSize, uint256 _newMaxTxAmount) public onlyOwner {\r\n        uint256 minPercentage = 1;\r\n        uint256 finalWalletSize = _newWalletSize.mul(10 ** decimals());\r\n        uint256 finalMaxTxAmount = _newMaxTxAmount.mul(10 ** decimals());\r\n \r\n        require(finalWalletSize >= minPercentage.mul(totalSupply()).div(100), \"Wallet size cannot be lower than 1%\");\r\n        require(finalMaxTxAmount >= minPercentage.mul(totalSupply()).div(100), \"Max tx amount cannot be lower than 1%\");\r\n \r\n        if (_newWalletSize >= totalSupply()) {\r\n            maxWalletSize = type(uint256).max;\r\n        } else {\r\n            maxWalletSize = finalWalletSize;\r\n        }\r\n \r\n         if (_newMaxTxAmount >= totalSupply()) {\r\n            maxTransactionAmount = type(uint256).max;\r\n        } else {\r\n            maxTransactionAmount = finalMaxTxAmount;\r\n        }\r\n    }\r\n \r\n    function getBuyFees() public view returns (uint256) {\r\n      return buyFees;  \r\n    }\r\n \r\n    function getSellFees() public view returns (uint256) {\r\n      return sellFees;  \r\n    } \r\n \r\n    function getLiquifyModifier() public view returns (uint256) {\r\n      return liquifyModifier;  \r\n    }\r\n \r\n    function getMaxWalletSize() public view returns (uint256) {\r\n      return maxWalletSize;  \r\n    }\r\n \r\n    function getMaxTransactionAmount() public view returns (uint256) {\r\n      return maxTransactionAmount;  \r\n    }\r\n \r\n    function isLimitsInEffect() public view returns (bool) {\r\n      return limitsInEffect;  \r\n    }\r\n \r\n    function isLiquifingEnabled() public view returns (bool) {\r\n      return liquifyingEnabled;  \r\n    }\r\n \r\n    function swapTokensForEth(uint256 tokenAmount) internal {\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = uniswapV2Router02.WETH();\r\n \r\n        _approve(address(this), address(uniswapV2Router02), tokenAmount);\r\n \r\n        uniswapV2Router02.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0,\r\n            path,\r\n            DEV_ADDRESS,\r\n            block.timestamp\r\n        );\r\n    }\r\n \r\n    function canSelfSwap() public view returns (bool) {\r\n        uint256 balance = balanceOf(address(this));\r\n        if (balance.mul(1000).div(totalSupply()) >= liquifyModifier) {\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n \r\n    function liquify() internal {\r\n        uint256 available = totalSupply().mul(liquifyModifier).div(1000);\r\n        uint256 tokens = available.div(2);\r\n        swapTokensForEth(tokens);\r\n        uint256 remaining = available - tokens;\r\n        super._transfer(address(this), AMAMI_COLLECTOR, remaining);\r\n \r\n    }\r\n \r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal override {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n        require(amount != 0, \"ERC20: amount equals zero\");\r\n \r\n        if (limitsInEffect) {\r\n            if (from != owner && to != owner && to != address(0) && to != address(0xdead) && !liquifying) {\r\n                if (getMarketMakerPair() == from && !_isExmptFromMaxTransactionAmount[to]) {\r\n                    require(amount <= maxTransactionAmount, \"Buy transfer amount exceeds max transaction amount.\");\r\n                    require(amount + balanceOf(to) <= maxWalletSize, \"Max wallet exceeded\" );\r\n                } else if (getMarketMakerPair() == to && !_isExmptFromMaxTransactionAmount[from]) {\r\n                    require(amount <= maxTransactionAmount,\"Sell transfer amount exceeds the max transaction amount.\");\r\n                } else if (!_isExmptFromMaxTransactionAmount[to]) {\r\n                    require(amount + balanceOf(to) <= maxWalletSize, \"Max wallet has exceeded\");\r\n                }\r\n            }\r\n        }\r\n \r\n        if (canSelfSwap() && liquifyingEnabled && !liquifying && getMarketMakerPair() != from && !_isExemptFromFees[from] && !_isExemptFromFees[to]) {\r\n            liquifying = true;\r\n            liquify();\r\n            liquifying = false;\r\n        }\r\n \r\n        bool takeFee = !liquifying;\r\n \r\n        if (_isExemptFromFees[from] || _isExemptFromFees[to]) {\r\n            takeFee = false;\r\n        }\r\n \r\n        uint256 fees = 0;\r\n        if (takeFee) {\r\n            if (getMarketMakerPair() == to && sellFees > 0) {\r\n                fees = amount.mul(sellFees).div(100);\r\n            } else if (getMarketMakerPair() == from && buyFees > 0) {\r\n                fees = amount.mul(buyFees).div(100);\r\n            }\r\n \r\n            if (fees > 0) {\r\n                super._transfer(from, address(this), fees);\r\n            }\r\n            amount -= fees;\r\n        }\r\n \r\n        super._transfer(from, to, amount);\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"__name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"__symbol\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"__decimals\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"__totalSupply\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_collector\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_devAddress\",\"type\":\"address\"}],\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_isExmptFromMaxTransactionAmount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"canSelfSwap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBuyFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLiquifyModifier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMarketMakerPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMaxTransactionAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMaxWalletSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSellFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isLimitsInEffect\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isLiquifingEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newBuyFeesModifier\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_newSellFeesModifier\",\"type\":\"uint256\"}],\"name\":\"modifyFeeConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newLiquifyModifier\",\"type\":\"uint256\"}],\"name\":\"setLiquifyModifier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_liquidityLockAddress\",\"type\":\"address\"}],\"name\":\"setLockerAllowance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newWalletSize\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_newMaxTxAmount\",\"type\":\"uint256\"}],\"name\":\"setWalletConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Factory\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Factory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router02\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_limitsInEffect\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_liquifyingEnabled\",\"type\":\"bool\"}],\"name\":\"updateFlags\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Amami", "CompilerVersion": "v0.8.25+commit.b61c2a91", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "00000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000012000000000000000000000000000000000000000000000000000000003b9aca000000000000000000000000004ed92ed09e8615ccaa0d83f740c5778c9dc0794d000000000000000000000000c2f13453f293cb44ecd7b41023814890432c20bb0000000000000000000000000000000000000000000000000000000000000005416d616d690000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005416d616d69000000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://b0ddb387bef590c17822362bcea82bcac7292c577ff545addefdb2a6a314e0b2"}