{"SourceCode": "// SPDX-License-Identifier: BUSL-1.1\r\npragma solidity 0.8.10;\r\n\r\n/**\r\n * @title VersionedInitializable\r\n * @author Aave, inspired by the OpenZeppelin Initializable contract\r\n * @notice Helper contract to implement initializer functions. To use it, replace\r\n * the constructor with a function that has the `initializer` modifier.\r\n * @dev WARNING: Unlike constructors, initializer functions must be manually\r\n * invoked. This applies both to deploying an Initializable contract, as well\r\n * as extending an Initializable contract via inheritance.\r\n * WARNING: When used with inheritance, manual care must be taken to not invoke\r\n * a parent initializer twice, or ensure that all initializers are idempotent,\r\n * because this is not dealt with automatically as with constructors.\r\n */\r\nabstract contract VersionedInitializable {\r\n  /**\r\n   * @dev Indicates that the contract has been initialized.\r\n   */\r\n  uint256 private lastInitializedRevision = 0;\r\n\r\n  /**\r\n   * @dev Indicates that the contract is in the process of being initialized.\r\n   */\r\n  bool private initializing;\r\n\r\n  /**\r\n   * @dev Modifier to use in the initializer function of a contract.\r\n   */\r\n  modifier initializer() {\r\n    uint256 revision = getRevision();\r\n    require(\r\n      initializing || isConstructor() || revision > lastInitializedRevision,\r\n      'Contract instance has already been initialized'\r\n    );\r\n\r\n    bool isTopLevelCall = !initializing;\r\n    if (isTopLevelCall) {\r\n      initializing = true;\r\n      lastInitializedRevision = revision;\r\n    }\r\n\r\n    _;\r\n\r\n    if (isTopLevelCall) {\r\n      initializing = false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @notice Returns the revision number of the contract\r\n   * @dev Needs to be defined in the inherited class as a constant.\r\n   * @return The revision number\r\n   */\r\n  function getRevision() internal pure virtual returns (uint256);\r\n\r\n  /**\r\n   * @notice Returns true if and only if the function is running in the constructor\r\n   * @return True if the function is running in the constructor\r\n   */\r\n  function isConstructor() private view returns (bool) {\r\n    // extcodesize checks the size of the code stored in an address, and\r\n    // address returns the current address. Since the code is still not\r\n    // deployed when running a constructor, any checks on its code size will\r\n    // yield zero, making it an effective way to detect if a contract is\r\n    // under construction or not.\r\n    uint256 cs;\r\n    //solium-disable-next-line\r\n    assembly {\r\n      cs := extcodesize(address())\r\n    }\r\n    return cs == 0;\r\n  }\r\n\r\n  // Reserved storage space to allow for layout changes in the future.\r\n  uint256[50] private ______gap;\r\n}\r\n\r\n/**\r\n * @title Errors library\r\n * @author Aave\r\n * @notice Defines the error messages emitted by the different contracts of the Aave protocol\r\n */\r\nlibrary Errors {\r\n  string public constant CALLER_NOT_POOL_ADMIN = '1'; // 'The caller of the function is not a pool admin'\r\n  string public constant CALLER_NOT_EMERGENCY_ADMIN = '2'; // 'The caller of the function is not an emergency admin'\r\n  string public constant CALLER_NOT_POOL_OR_EMERGENCY_ADMIN = '3'; // 'The caller of the function is not a pool or emergency admin'\r\n  string public constant CALLER_NOT_RISK_OR_POOL_ADMIN = '4'; // 'The caller of the function is not a risk or pool admin'\r\n  string public constant CALLER_NOT_ASSET_LISTING_OR_POOL_ADMIN = '5'; // 'The caller of the function is not an asset listing or pool admin'\r\n  string public constant CALLER_NOT_BRIDGE = '6'; // 'The caller of the function is not a bridge'\r\n  string public constant ADDRESSES_PROVIDER_NOT_REGISTERED = '7'; // 'Pool addresses provider is not registered'\r\n  string public constant INVALID_ADDRESSES_PROVIDER_ID = '8'; // 'Invalid id for the pool addresses provider'\r\n  string public constant NOT_CONTRACT = '9'; // 'Address is not a contract'\r\n  string public constant CALLER_NOT_POOL_CONFIGURATOR = '10'; // 'The caller of the function is not the pool configurator'\r\n  string public constant CALLER_NOT_ATOKEN = '11'; // 'The caller of the function is not an AToken'\r\n  string public constant INVALID_ADDRESSES_PROVIDER = '12'; // 'The address of the pool addresses provider is invalid'\r\n  string public constant INVALID_FLASHLOAN_EXECUTOR_RETURN = '13'; // 'Invalid return value of the flashloan executor function'\r\n  string public constant RESERVE_ALREADY_ADDED = '14'; // 'Reserve has already been added to reserve list'\r\n  string public constant NO_MORE_RESERVES_ALLOWED = '15'; // 'Maximum amount of reserves in the pool reached'\r\n  string public constant EMODE_CATEGORY_RESERVED = '16'; // 'Zero eMode category is reserved for volatile heterogeneous assets'\r\n  string public constant INVALID_EMODE_CATEGORY_ASSIGNMENT = '17'; // 'Invalid eMode category assignment to asset'\r\n  string public constant RESERVE_LIQUIDITY_NOT_ZERO = '18'; // 'The liquidity of the reserve needs to be 0'\r\n  string public constant FLASHLOAN_PREMIUM_INVALID = '19'; // 'Invalid flashloan premium'\r\n  string public constant INVALID_RESERVE_PARAMS = '20'; // 'Invalid risk parameters for the reserve'\r\n  string public constant INVALID_EMODE_CATEGORY_PARAMS = '21'; // 'Invalid risk parameters for the eMode category'\r\n  string public constant BRIDGE_PROTOCOL_FEE_INVALID = '22'; // 'Invalid bridge protocol fee'\r\n  string public constant CALLER_MUST_BE_POOL = '23'; // 'The caller of this function must be a pool'\r\n  string public constant INVALID_MINT_AMOUNT = '24'; // 'Invalid amount to mint'\r\n  string public constant INVALID_BURN_AMOUNT = '25'; // 'Invalid amount to burn'\r\n  string public constant INVALID_AMOUNT = '26'; // 'Amount must be greater than 0'\r\n  string public constant RESERVE_INACTIVE = '27'; // 'Action requires an active reserve'\r\n  string public constant RESERVE_FROZEN = '28'; // 'Action cannot be performed because the reserve is frozen'\r\n  string public constant RESERVE_PAUSED = '29'; // 'Action cannot be performed because the reserve is paused'\r\n  string public constant BORROWING_NOT_ENABLED = '30'; // 'Borrowing is not enabled'\r\n  string public constant STABLE_BORROWING_NOT_ENABLED = '31'; // 'Stable borrowing is not enabled'\r\n  string public constant NOT_ENOUGH_AVAILABLE_USER_BALANCE = '32'; // 'User cannot withdraw more than the available balance'\r\n  string public constant INVALID_INTEREST_RATE_MODE_SELECTED = '33'; // 'Invalid interest rate mode selected'\r\n  string public constant COLLATERAL_BALANCE_IS_ZERO = '34'; // 'The collateral balance is 0'\r\n  string public constant HEALTH_FACTOR_LOWER_THAN_LIQUIDATION_THRESHOLD = '35'; // 'Health factor is lesser than the liquidation threshold'\r\n  string public constant COLLATERAL_CANNOT_COVER_NEW_BORROW = '36'; // 'There is not enough collateral to cover a new borrow'\r\n  string public constant COLLATERAL_SAME_AS_BORROWING_CURRENCY = '37'; // 'Collateral is (mostly) the same currency that is being borrowed'\r\n  string public constant AMOUNT_BIGGER_THAN_MAX_LOAN_SIZE_STABLE = '38'; // 'The requested amount is greater than the max loan size in stable rate mode'\r\n  string public constant NO_DEBT_OF_SELECTED_TYPE = '39'; // 'For repayment of a specific type of debt, the user needs to have debt that type'\r\n  string public constant NO_EXPLICIT_AMOUNT_TO_REPAY_ON_BEHALF = '40'; // 'To repay on behalf of a user an explicit amount to repay is needed'\r\n  string public constant NO_OUTSTANDING_STABLE_DEBT = '41'; // 'User does not have outstanding stable rate debt on this reserve'\r\n  string public constant NO_OUTSTANDING_VARIABLE_DEBT = '42'; // 'User does not have outstanding variable rate debt on this reserve'\r\n  string public constant UNDERLYING_BALANCE_ZERO = '43'; // 'The underlying balance needs to be greater than 0'\r\n  string public constant INTEREST_RATE_REBALANCE_CONDITIONS_NOT_MET = '44'; // 'Interest rate rebalance conditions were not met'\r\n  string public constant HEALTH_FACTOR_NOT_BELOW_THRESHOLD = '45'; // 'Health factor is not below the threshold'\r\n  string public constant COLLATERAL_CANNOT_BE_LIQUIDATED = '46'; // 'The collateral chosen cannot be liquidated'\r\n  string public constant SPECIFIED_CURRENCY_NOT_BORROWED_BY_USER = '47'; // 'User did not borrow the specified currency'\r\n  string public constant INCONSISTENT_FLASHLOAN_PARAMS = '49'; // 'Inconsistent flashloan parameters'\r\n  string public constant BORROW_CAP_EXCEEDED = '50'; // 'Borrow cap is exceeded'\r\n  string public constant SUPPLY_CAP_EXCEEDED = '51'; // 'Supply cap is exceeded'\r\n  string public constant UNBACKED_MINT_CAP_EXCEEDED = '52'; // 'Unbacked mint cap is exceeded'\r\n  string public constant DEBT_CEILING_EXCEEDED = '53'; // 'Debt ceiling is exceeded'\r\n  string public constant UNDERLYING_CLAIMABLE_RIGHTS_NOT_ZERO = '54'; // 'Claimable rights over underlying not zero (aToken supply or accruedToTreasury)'\r\n  string public constant STABLE_DEBT_NOT_ZERO = '55'; // 'Stable debt supply is not zero'\r\n  string public constant VARIABLE_DEBT_SUPPLY_NOT_ZERO = '56'; // 'Variable debt supply is not zero'\r\n  string public constant LTV_VALIDATION_FAILED = '57'; // 'Ltv validation failed'\r\n  string public constant INCONSISTENT_EMODE_CATEGORY = '58'; // 'Inconsistent eMode category'\r\n  string public constant PRICE_ORACLE_SENTINEL_CHECK_FAILED = '59'; // 'Price oracle sentinel validation failed'\r\n  string public constant ASSET_NOT_BORROWABLE_IN_ISOLATION = '60'; // 'Asset is not borrowable in isolation mode'\r\n  string public constant RESERVE_ALREADY_INITIALIZED = '61'; // 'Reserve has already been initialized'\r\n  string public constant USER_IN_ISOLATION_MODE_OR_LTV_ZERO_OR_BORROWED_BLACKLISTED_ASSET = '62'; // 'User is in isolation mode or ltv is zero'\r\n  string public constant INVALID_LTV = '63'; // 'Invalid ltv parameter for the reserve'\r\n  string public constant INVALID_LIQ_THRESHOLD = '64'; // 'Invalid liquidity threshold parameter for the reserve'\r\n  string public constant INVALID_LIQ_BONUS = '65'; // 'Invalid liquidity bonus parameter for the reserve'\r\n  string public constant INVALID_DECIMALS = '66'; // 'Invalid decimals parameter of the underlying asset of the reserve'\r\n  string public constant INVALID_RESERVE_FACTOR = '67'; // 'Invalid reserve factor parameter for the reserve'\r\n  string public constant INVALID_BORROW_CAP = '68'; // 'Invalid borrow cap for the reserve'\r\n  string public constant INVALID_SUPPLY_CAP = '69'; // 'Invalid supply cap for the reserve'\r\n  string public constant INVALID_LIQUIDATION_PROTOCOL_FEE = '70'; // 'Invalid liquidation protocol fee for the reserve'\r\n  string public constant INVALID_EMODE_CATEGORY = '71'; // 'Invalid eMode category for the reserve'\r\n  string public constant INVALID_UNBACKED_MINT_CAP = '72'; // 'Invalid unbacked mint cap for the reserve'\r\n  string public constant INVALID_DEBT_CEILING = '73'; // 'Invalid debt ceiling for the reserve\r\n  string public constant INVALID_RESERVE_INDEX = '74'; // 'Invalid reserve index'\r\n  string public constant ACL_ADMIN_CANNOT_BE_ZERO = '75'; // 'ACL admin cannot be set to the zero address'\r\n  string public constant INCONSISTENT_PARAMS_LENGTH = '76'; // 'Array parameters that should be equal length are not'\r\n  string public constant ZERO_ADDRESS_NOT_VALID = '77'; // 'Zero address not valid'\r\n  string public constant INVALID_EXPIRATION = '78'; // 'Invalid expiration'\r\n  string public constant INVALID_SIGNATURE = '79'; // 'Invalid signature'\r\n  string public constant OPERATION_NOT_SUPPORTED = '80'; // 'Operation not supported'\r\n  string public constant DEBT_CEILING_NOT_ZERO = '81'; // 'Debt ceiling is not zero'\r\n  string public constant ASSET_NOT_LISTED = '82'; // 'Asset is not listed'\r\n  string public constant INVALID_OPTIMAL_USAGE_RATIO = '83'; // 'Invalid optimal usage ratio'\r\n  string public constant INVALID_OPTIMAL_STABLE_TO_TOTAL_DEBT_RATIO = '84'; // 'Invalid optimal stable to total debt ratio'\r\n  string public constant UNDERLYING_CANNOT_BE_RESCUED = '85'; // 'The underlying asset cannot be rescued'\r\n  string public constant ADDRESSES_PROVIDER_ALREADY_ADDED = '86'; // 'Reserve has already been added to reserve list'\r\n  string public constant POOL_ADDRESSES_DO_NOT_MATCH = '87'; // 'The token implementation pool address and the pool address provided by the initializing pool do not match'\r\n  string public constant STABLE_BORROWING_ENABLED = '88'; // 'Stable borrowing is enabled'\r\n  string public constant SILOED_BORROWING_VIOLATION = '89'; // 'User is trying to borrow multiple assets including a siloed one'\r\n  string public constant RESERVE_DEBT_NOT_ZERO = '90'; // the total debt of the reserve needs to be 0\r\n  string public constant FLASHLOAN_DISABLED = '91'; // FlashLoaning for this asset is disabled\r\n  string public constant COLLATERAL_BLACKLIST_VIOLATION = '92'; // user is trying to borrow an asset that is blacklisted given one of his collaterals\r\n  string public constant INVALID_RESERVE_BITMAP = '93';\r\n}\r\n\r\nlibrary DataTypes {\r\n  struct ReserveData {\r\n    //stores the reserve configuration\r\n    ReserveConfigurationMap configuration;\r\n    //the liquidity index. Expressed in ray\r\n    uint128 liquidityIndex;\r\n    //the current supply rate. Expressed in ray\r\n    uint128 currentLiquidityRate;\r\n    //variable borrow index. Expressed in ray\r\n    uint128 variableBorrowIndex;\r\n    //the current variable borrow rate. Expressed in ray\r\n    uint128 currentVariableBorrowRate;\r\n    //the current stable borrow rate. Expressed in ray\r\n    uint128 currentStableBorrowRate;\r\n    //timestamp of last update\r\n    uint40 lastUpdateTimestamp;\r\n    //the id of the reserve. Represents the position in the list of the active reserves\r\n    uint16 id;\r\n    //aToken address\r\n    address aTokenAddress;\r\n    //stableDebtToken address\r\n    address stableDebtTokenAddress;\r\n    //variableDebtToken address\r\n    address variableDebtTokenAddress;\r\n    //address of the interest rate strategy\r\n    address interestRateStrategyAddress;\r\n    //the current treasury balance, scaled\r\n    uint128 accruedToTreasury;\r\n    //the outstanding unbacked aTokens minted through the bridging feature\r\n    uint128 unbacked;\r\n    //the outstanding debt borrowed against this asset in isolation mode\r\n    uint128 isolationModeTotalDebt;\r\n    // the blacklist bitmap\r\n    uint128 blacklistBitmap;\r\n  }\r\n\r\n  struct ReserveConfigurationMap {\r\n    //bit 0-15: LTV\r\n    //bit 16-31: Liq. threshold\r\n    //bit 32-47: Liq. bonus\r\n    //bit 48-55: Decimals\r\n    //bit 56: reserve is active\r\n    //bit 57: reserve is frozen\r\n    //bit 58: borrowing is enabled\r\n    //bit 59: stable rate borrowing enabled\r\n    //bit 60: asset is paused\r\n    //bit 61: borrowing in isolation mode is enabled\r\n    //bit 62-63: reserved\r\n    //bit 64-79: reserve factor\r\n    //bit 80-115 borrow cap in whole tokens, borrowCap == 0 => no cap\r\n    //bit 116-151 supply cap in whole tokens, supplyCap == 0 => no cap\r\n    //bit 152-167 liquidation protocol fee\r\n    //bit 168-175 eMode category\r\n    //bit 176-211 unbacked mint cap in whole tokens, unbackedMintCap == 0 => minting disabled\r\n    //bit 212-251 debt ceiling for isolation mode with (ReserveConfiguration::DEBT_CEILING_DECIMALS) decimals\r\n    //bit 252-255 unused\r\n\r\n    uint256 data;\r\n  }\r\n\r\n  struct UserConfigurationMap {\r\n    /**\r\n     * @dev Bitmap of the users collaterals and borrows. It is divided in pairs of bits, one pair per asset.\r\n     * The first bit indicates if an asset is used as collateral by the user, the second whether an\r\n     * asset is borrowed by the user.\r\n     */\r\n    uint256 data;\r\n  }\r\n\r\n  struct EModeCategory {\r\n    // each eMode category has a custom ltv and liquidation threshold\r\n    uint16 ltv;\r\n    uint16 liquidationThreshold;\r\n    uint16 liquidationBonus;\r\n    // each eMode category may or may not have a custom oracle to override the individual assets price oracles\r\n    address priceSource;\r\n    string label;\r\n  }\r\n\r\n  enum InterestRateMode {NONE, STABLE, VARIABLE}\r\n\r\n  struct ReserveCache {\r\n    uint256 currScaledVariableDebt;\r\n    uint256 nextScaledVariableDebt;\r\n    uint256 currPrincipalStableDebt;\r\n    uint256 currAvgStableBorrowRate;\r\n    uint256 currTotalStableDebt;\r\n    uint256 nextAvgStableBorrowRate;\r\n    uint256 nextTotalStableDebt;\r\n    uint256 currLiquidityIndex;\r\n    uint256 nextLiquidityIndex;\r\n    uint256 currVariableBorrowIndex;\r\n    uint256 nextVariableBorrowIndex;\r\n    uint256 currLiquidityRate;\r\n    uint256 currVariableBorrowRate;\r\n    uint256 reserveFactor;\r\n    ReserveConfigurationMap reserveConfiguration;\r\n    address aTokenAddress;\r\n    address stableDebtTokenAddress;\r\n    address variableDebtTokenAddress;\r\n    uint40 reserveLastUpdateTimestamp;\r\n    uint40 stableDebtLastUpdateTimestamp;\r\n  }\r\n\r\n  struct ExecuteLiquidationCallParams {\r\n    uint256 reservesCount;\r\n    uint256 debtToCover;\r\n    address collateralAsset;\r\n    address debtAsset;\r\n    address user;\r\n    bool receiveAToken;\r\n    address priceOracle;\r\n    uint8 userEModeCategory;\r\n    address priceOracleSentinel;\r\n  }\r\n\r\n  struct ExecuteSupplyParams {\r\n    address asset;\r\n    uint256 amount;\r\n    address onBehalfOf;\r\n    uint16 referralCode;\r\n  }\r\n\r\n  struct ExecuteBorrowParams {\r\n    address asset;\r\n    address user;\r\n    address onBehalfOf;\r\n    uint256 amount;\r\n    InterestRateMode interestRateMode;\r\n    uint16 referralCode;\r\n    bool releaseUnderlying;\r\n    uint256 maxStableRateBorrowSizePercent;\r\n    uint256 reservesCount;\r\n    address oracle;\r\n    uint8 userEModeCategory;\r\n    address priceOracleSentinel;\r\n  }\r\n\r\n  struct ExecuteRepayParams {\r\n    address asset;\r\n    uint256 amount;\r\n    InterestRateMode interestRateMode;\r\n    address onBehalfOf;\r\n    bool useATokens;\r\n  }\r\n\r\n  struct ExecuteWithdrawParams {\r\n    address asset;\r\n    uint256 amount;\r\n    address to;\r\n    uint256 reservesCount;\r\n    address oracle;\r\n    uint8 userEModeCategory;\r\n  }\r\n\r\n  struct ExecuteSetUserEModeParams {\r\n    uint256 reservesCount;\r\n    address oracle;\r\n    uint8 categoryId;\r\n  }\r\n\r\n  struct FinalizeTransferParams {\r\n    address asset;\r\n    address from;\r\n    address to;\r\n    uint256 amount;\r\n    uint256 balanceFromBefore;\r\n    uint256 balanceToBefore;\r\n    uint256 reservesCount;\r\n    address oracle;\r\n    uint8 fromEModeCategory;\r\n  }\r\n\r\n  struct FlashloanParams {\r\n    address receiverAddress;\r\n    address[] assets;\r\n    uint256[] amounts;\r\n    uint256[] interestRateModes;\r\n    address onBehalfOf;\r\n    bytes params;\r\n    uint16 referralCode;\r\n    uint256 flashLoanPremiumToProtocol;\r\n    uint256 flashLoanPremiumTotal;\r\n    uint256 maxStableRateBorrowSizePercent;\r\n    uint256 reservesCount;\r\n    address addressesProvider;\r\n    uint8 userEModeCategory;\r\n    bool isAuthorizedFlashBorrower;\r\n  }\r\n\r\n  struct FlashloanSimpleParams {\r\n    address receiverAddress;\r\n    address asset;\r\n    uint256 amount;\r\n    bytes params;\r\n    uint16 referralCode;\r\n    uint256 flashLoanPremiumToProtocol;\r\n    uint256 flashLoanPremiumTotal;\r\n  }\r\n\r\n  struct FlashLoanRepaymentParams {\r\n    uint256 amount;\r\n    uint256 totalPremium;\r\n    uint256 flashLoanPremiumToProtocol;\r\n    address asset;\r\n    address receiverAddress;\r\n    uint16 referralCode;\r\n  }\r\n\r\n  struct CalculateUserAccountDataParams {\r\n    UserConfigurationMap userConfig;\r\n    uint256 reservesCount;\r\n    address user;\r\n    address oracle;\r\n    uint8 userEModeCategory;\r\n  }\r\n\r\n  struct ValidateBorrowParams {\r\n    ReserveCache reserveCache;\r\n    UserConfigurationMap userConfig;\r\n    address asset;\r\n    address userAddress;\r\n    uint256 amount;\r\n    InterestRateMode interestRateMode;\r\n    uint256 maxStableLoanPercent;\r\n    uint256 reservesCount;\r\n    address oracle;\r\n    uint8 userEModeCategory;\r\n    address priceOracleSentinel;\r\n    bool isolationModeActive;\r\n    address isolationModeCollateralAddress;\r\n    uint256 isolationModeDebtCeiling;\r\n  }\r\n\r\n  struct ValidateLiquidationCallParams {\r\n    ReserveCache debtReserveCache;\r\n    uint256 totalDebt;\r\n    uint256 healthFactor;\r\n    address priceOracleSentinel;\r\n  }\r\n\r\n  struct CalculateInterestRatesParams {\r\n    uint256 unbacked;\r\n    uint256 liquidityAdded;\r\n    uint256 liquidityTaken;\r\n    uint256 totalStableDebt;\r\n    uint256 totalVariableDebt;\r\n    uint256 averageStableBorrowRate;\r\n    uint256 reserveFactor;\r\n    address reserve;\r\n    address aToken;\r\n  }\r\n\r\n  struct InitReserveParams {\r\n    address asset;\r\n    address aTokenAddress;\r\n    address stableDebtAddress;\r\n    address variableDebtAddress;\r\n    address interestRateStrategyAddress;\r\n    uint16 reservesCount;\r\n    uint16 maxNumberReserves;\r\n  }\r\n}\r\n\r\n/**\r\n * @title ReserveConfiguration library\r\n * @author Aave\r\n * @notice Implements the bitmap logic to handle the reserve configuration\r\n */\r\nlibrary ReserveConfiguration {\r\n  uint256 internal constant LTV_MASK =                       0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0000; // prettier-ignore\r\n  uint256 internal constant LIQUIDATION_THRESHOLD_MASK =     0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0000FFFF; // prettier-ignore\r\n  uint256 internal constant LIQUIDATION_BONUS_MASK =         0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0000FFFFFFFF; // prettier-ignore\r\n  uint256 internal constant DECIMALS_MASK =                  0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00FFFFFFFFFFFF; // prettier-ignore\r\n  uint256 internal constant ACTIVE_MASK =                    0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFFFFFFFFFF; // prettier-ignore\r\n  uint256 internal constant FROZEN_MASK =                    0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFDFFFFFFFFFFFFFF; // prettier-ignore\r\n  uint256 internal constant BORROWING_MASK =                 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBFFFFFFFFFFFFFF; // prettier-ignore\r\n  uint256 internal constant STABLE_BORROWING_MASK =          0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF7FFFFFFFFFFFFFF; // prettier-ignore\r\n  uint256 internal constant PAUSED_MASK =                    0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFFFFFFFFFFF; // prettier-ignore\r\n  uint256 internal constant BORROWABLE_IN_ISOLATION_MASK =   0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFDFFFFFFFFFFFFFFF; // prettier-ignore\r\n  uint256 internal constant SILOED_BORROWING_MASK =          0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBFFFFFFFFFFFFFFF; // prettier-ignore\r\n  uint256 internal constant FLASHLOAN_ENABLED_MASK =         0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF7FFFFFFFFFFFFFFF; // prettier-ignore\r\n  uint256 internal constant RESERVE_FACTOR_MASK =            0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0000FFFFFFFFFFFFFFFF; // prettier-ignore\r\n  uint256 internal constant BORROW_CAP_MASK =                0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000FFFFFFFFFFFFFFFFFFFF; // prettier-ignore\r\n  uint256 internal constant SUPPLY_CAP_MASK =                0xFFFFFFFFFFFFFFFFFFFFFFFFFF000000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFF; // prettier-ignore\r\n  uint256 internal constant LIQUIDATION_PROTOCOL_FEE_MASK =  0xFFFFFFFFFFFFFFFFFFFFFF0000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF; // prettier-ignore\r\n  uint256 internal constant EMODE_CATEGORY_MASK =            0xFFFFFFFFFFFFFFFFFFFF00FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF; // prettier-ignore\r\n  uint256 internal constant UNBACKED_MINT_CAP_MASK =         0xFFFFFFFFFFF000000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF; // prettier-ignore\r\n  uint256 internal constant DEBT_CEILING_MASK =              0xF0000000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF; // prettier-ignore\r\n\r\n  /// @dev For the LTV, the start bit is 0 (up to 15), hence no bitshifting is needed\r\n  uint256 internal constant LIQUIDATION_THRESHOLD_START_BIT_POSITION = 16;\r\n  uint256 internal constant LIQUIDATION_BONUS_START_BIT_POSITION = 32;\r\n  uint256 internal constant RESERVE_DECIMALS_START_BIT_POSITION = 48;\r\n  uint256 internal constant IS_ACTIVE_START_BIT_POSITION = 56;\r\n  uint256 internal constant IS_FROZEN_START_BIT_POSITION = 57;\r\n  uint256 internal constant BORROWING_ENABLED_START_BIT_POSITION = 58;\r\n  uint256 internal constant STABLE_BORROWING_ENABLED_START_BIT_POSITION = 59;\r\n  uint256 internal constant IS_PAUSED_START_BIT_POSITION = 60;\r\n  uint256 internal constant BORROWABLE_IN_ISOLATION_START_BIT_POSITION = 61;\r\n  uint256 internal constant SILOED_BORROWING_START_BIT_POSITION = 62;\r\n  uint256 internal constant FLASHLOAN_ENABLED_START_BIT_POSITION = 63;\r\n  uint256 internal constant RESERVE_FACTOR_START_BIT_POSITION = 64;\r\n  uint256 internal constant BORROW_CAP_START_BIT_POSITION = 80;\r\n  uint256 internal constant SUPPLY_CAP_START_BIT_POSITION = 116;\r\n  uint256 internal constant LIQUIDATION_PROTOCOL_FEE_START_BIT_POSITION = 152;\r\n  uint256 internal constant EMODE_CATEGORY_START_BIT_POSITION = 168;\r\n  uint256 internal constant UNBACKED_MINT_CAP_START_BIT_POSITION = 176;\r\n  uint256 internal constant DEBT_CEILING_START_BIT_POSITION = 212;\r\n\r\n  uint256 internal constant MAX_VALID_LTV = 65535;\r\n  uint256 internal constant MAX_VALID_LIQUIDATION_THRESHOLD = 65535;\r\n  uint256 internal constant MAX_VALID_LIQUIDATION_BONUS = 65535;\r\n  uint256 internal constant MAX_VALID_DECIMALS = 255;\r\n  uint256 internal constant MAX_VALID_RESERVE_FACTOR = 65535;\r\n  uint256 internal constant MAX_VALID_BORROW_CAP = 68719476735;\r\n  uint256 internal constant MAX_VALID_SUPPLY_CAP = 68719476735;\r\n  uint256 internal constant MAX_VALID_LIQUIDATION_PROTOCOL_FEE = 65535;\r\n  uint256 internal constant MAX_VALID_EMODE_CATEGORY = 255;\r\n  uint256 internal constant MAX_VALID_UNBACKED_MINT_CAP = 68719476735;\r\n  uint256 internal constant MAX_VALID_DEBT_CEILING = 1099511627775;\r\n\r\n  uint256 public constant DEBT_CEILING_DECIMALS = 2;\r\n  uint16 public constant MAX_RESERVES_COUNT = 128;\r\n\r\n  /**\r\n   * @notice Sets the Loan to Value of the reserve\r\n   * @param self The reserve configuration\r\n   * @param ltv The new ltv\r\n   */\r\n  function setLtv(DataTypes.ReserveConfigurationMap memory self, uint256 ltv) internal pure {\r\n    require(ltv <= MAX_VALID_LTV, Errors.INVALID_LTV);\r\n\r\n    self.data = (self.data & LTV_MASK) | ltv;\r\n  }\r\n\r\n  /**\r\n   * @notice Gets the Loan to Value of the reserve\r\n   * @param self The reserve configuration\r\n   * @return The loan to value\r\n   */\r\n  function getLtv(DataTypes.ReserveConfigurationMap memory self) internal pure returns (uint256) {\r\n    return self.data & ~LTV_MASK;\r\n  }\r\n\r\n  /**\r\n   * @notice Sets the liquidation threshold of the reserve\r\n   * @param self The reserve configuration\r\n   * @param threshold The new liquidation threshold\r\n   */\r\n  function setLiquidationThreshold(\r\n    DataTypes.ReserveConfigurationMap memory self,\r\n    uint256 threshold\r\n  ) internal pure {\r\n    require(threshold <= MAX_VALID_LIQUIDATION_THRESHOLD, Errors.INVALID_LIQ_THRESHOLD);\r\n\r\n    self.data =\r\n      (self.data & LIQUIDATION_THRESHOLD_MASK) |\r\n      (threshold << LIQUIDATION_THRESHOLD_START_BIT_POSITION);\r\n  }\r\n\r\n  /**\r\n   * @notice Gets the liquidation threshold of the reserve\r\n   * @param self The reserve configuration\r\n   * @return The liquidation threshold\r\n   */\r\n  function getLiquidationThreshold(\r\n    DataTypes.ReserveConfigurationMap memory self\r\n  ) internal pure returns (uint256) {\r\n    return (self.data & ~LIQUIDATION_THRESHOLD_MASK) >> LIQUIDATION_THRESHOLD_START_BIT_POSITION;\r\n  }\r\n\r\n  /**\r\n   * @notice Sets the liquidation bonus of the reserve\r\n   * @param self The reserve configuration\r\n   * @param bonus The new liquidation bonus\r\n   */\r\n  function setLiquidationBonus(\r\n    DataTypes.ReserveConfigurationMap memory self,\r\n    uint256 bonus\r\n  ) internal pure {\r\n    require(bonus <= MAX_VALID_LIQUIDATION_BONUS, Errors.INVALID_LIQ_BONUS);\r\n\r\n    self.data =\r\n      (self.data & LIQUIDATION_BONUS_MASK) |\r\n      (bonus << LIQUIDATION_BONUS_START_BIT_POSITION);\r\n  }\r\n\r\n  /**\r\n   * @notice Gets the liquidation bonus of the reserve\r\n   * @param self The reserve configuration\r\n   * @return The liquidation bonus\r\n   */\r\n  function getLiquidationBonus(\r\n    DataTypes.ReserveConfigurationMap memory self\r\n  ) internal pure returns (uint256) {\r\n    return (self.data & ~LIQUIDATION_BONUS_MASK) >> LIQUIDATION_BONUS_START_BIT_POSITION;\r\n  }\r\n\r\n  /**\r\n   * @notice Sets the decimals of the underlying asset of the reserve\r\n   * @param self The reserve configuration\r\n   * @param decimals The decimals\r\n   */\r\n  function setDecimals(\r\n    DataTypes.ReserveConfigurationMap memory self,\r\n    uint256 decimals\r\n  ) internal pure {\r\n    require(decimals <= MAX_VALID_DECIMALS, Errors.INVALID_DECIMALS);\r\n\r\n    self.data = (self.data & DECIMALS_MASK) | (decimals << RESERVE_DECIMALS_START_BIT_POSITION);\r\n  }\r\n\r\n  /**\r\n   * @notice Gets the decimals of the underlying asset of the reserve\r\n   * @param self The reserve configuration\r\n   * @return The decimals of the asset\r\n   */\r\n  function getDecimals(\r\n    DataTypes.ReserveConfigurationMap memory self\r\n  ) internal pure returns (uint256) {\r\n    return (self.data & ~DECIMALS_MASK) >> RESERVE_DECIMALS_START_BIT_POSITION;\r\n  }\r\n\r\n  /**\r\n   * @notice Sets the active state of the reserve\r\n   * @param self The reserve configuration\r\n   * @param active The active state\r\n   */\r\n  function setActive(DataTypes.ReserveConfigurationMap memory self, bool active) internal pure {\r\n    self.data =\r\n      (self.data & ACTIVE_MASK) |\r\n      (uint256(active ? 1 : 0) << IS_ACTIVE_START_BIT_POSITION);\r\n  }\r\n\r\n  /**\r\n   * @notice Gets the active state of the reserve\r\n   * @param self The reserve configuration\r\n   * @return The active state\r\n   */\r\n  function getActive(DataTypes.ReserveConfigurationMap memory self) internal pure returns (bool) {\r\n    return (self.data & ~ACTIVE_MASK) != 0;\r\n  }\r\n\r\n  /**\r\n   * @notice Sets the frozen state of the reserve\r\n   * @param self The reserve configuration\r\n   * @param frozen The frozen state\r\n   */\r\n  function setFrozen(DataTypes.ReserveConfigurationMap memory self, bool frozen) internal pure {\r\n    self.data =\r\n      (self.data & FROZEN_MASK) |\r\n      (uint256(frozen ? 1 : 0) << IS_FROZEN_START_BIT_POSITION);\r\n  }\r\n\r\n  /**\r\n   * @notice Gets the frozen state of the reserve\r\n   * @param self The reserve configuration\r\n   * @return The frozen state\r\n   */\r\n  function getFrozen(DataTypes.ReserveConfigurationMap memory self) internal pure returns (bool) {\r\n    return (self.data & ~FROZEN_MASK) != 0;\r\n  }\r\n\r\n  /**\r\n   * @notice Sets the paused state of the reserve\r\n   * @param self The reserve configuration\r\n   * @param paused The paused state\r\n   */\r\n  function setPaused(DataTypes.ReserveConfigurationMap memory self, bool paused) internal pure {\r\n    self.data =\r\n      (self.data & PAUSED_MASK) |\r\n      (uint256(paused ? 1 : 0) << IS_PAUSED_START_BIT_POSITION);\r\n  }\r\n\r\n  /**\r\n   * @notice Gets the paused state of the reserve\r\n   * @param self The reserve configuration\r\n   * @return The paused state\r\n   */\r\n  function getPaused(DataTypes.ReserveConfigurationMap memory self) internal pure returns (bool) {\r\n    return (self.data & ~PAUSED_MASK) != 0;\r\n  }\r\n\r\n  /**\r\n   * @notice Sets the borrowable in isolation flag for the reserve.\r\n   * @dev When this flag is set to true, the asset will be borrowable against isolated collaterals and the borrowed\r\n   * amount will be accumulated in the isolated collateral's total debt exposure.\r\n   * @dev Only assets of the same family (eg USD stablecoins) should be borrowable in isolation mode to keep\r\n   * consistency in the debt ceiling calculations.\r\n   * @param self The reserve configuration\r\n   * @param borrowable True if the asset is borrowable\r\n   */\r\n  function setBorrowableInIsolation(\r\n    DataTypes.ReserveConfigurationMap memory self,\r\n    bool borrowable\r\n  ) internal pure {\r\n    self.data =\r\n      (self.data & BORROWABLE_IN_ISOLATION_MASK) |\r\n      (uint256(borrowable ? 1 : 0) << BORROWABLE_IN_ISOLATION_START_BIT_POSITION);\r\n  }\r\n\r\n  /**\r\n   * @notice Gets the borrowable in isolation flag for the reserve.\r\n   * @dev If the returned flag is true, the asset is borrowable against isolated collateral. Assets borrowed with\r\n   * isolated collateral is accounted for in the isolated collateral's total debt exposure.\r\n   * @dev Only assets of the same family (eg USD stablecoins) should be borrowable in isolation mode to keep\r\n   * consistency in the debt ceiling calculations.\r\n   * @param self The reserve configuration\r\n   * @return The borrowable in isolation flag\r\n   */\r\n  function getBorrowableInIsolation(\r\n    DataTypes.ReserveConfigurationMap memory self\r\n  ) internal pure returns (bool) {\r\n    return (self.data & ~BORROWABLE_IN_ISOLATION_MASK) != 0;\r\n  }\r\n\r\n  /**\r\n   * @notice Sets the siloed borrowing flag for the reserve.\r\n   * @dev When this flag is set to true, users borrowing this asset will not be allowed to borrow any other asset.\r\n   * @param self The reserve configuration\r\n   * @param siloed True if the asset is siloed\r\n   */\r\n  function setSiloedBorrowing(\r\n    DataTypes.ReserveConfigurationMap memory self,\r\n    bool siloed\r\n  ) internal pure {\r\n    self.data =\r\n      (self.data & SILOED_BORROWING_MASK) |\r\n      (uint256(siloed ? 1 : 0) << SILOED_BORROWING_START_BIT_POSITION);\r\n  }\r\n\r\n  /**\r\n   * @notice Gets the siloed borrowing flag for the reserve.\r\n   * @dev When this flag is set to true, users borrowing this asset will not be allowed to borrow any other asset.\r\n   * @param self The reserve configuration\r\n   * @return The siloed borrowing flag\r\n   */\r\n  function getSiloedBorrowing(\r\n    DataTypes.ReserveConfigurationMap memory self\r\n  ) internal pure returns (bool) {\r\n    return (self.data & ~SILOED_BORROWING_MASK) != 0;\r\n  }\r\n\r\n  /**\r\n   * @notice Enables or disables borrowing on the reserve\r\n   * @param self The reserve configuration\r\n   * @param enabled True if the borrowing needs to be enabled, false otherwise\r\n   */\r\n  function setBorrowingEnabled(\r\n    DataTypes.ReserveConfigurationMap memory self,\r\n    bool enabled\r\n  ) internal pure {\r\n    self.data =\r\n      (self.data & BORROWING_MASK) |\r\n      (uint256(enabled ? 1 : 0) << BORROWING_ENABLED_START_BIT_POSITION);\r\n  }\r\n\r\n  /**\r\n   * @notice Gets the borrowing state of the reserve\r\n   * @param self The reserve configuration\r\n   * @return The borrowing state\r\n   */\r\n  function getBorrowingEnabled(\r\n    DataTypes.ReserveConfigurationMap memory self\r\n  ) internal pure returns (bool) {\r\n    return (self.data & ~BORROWING_MASK) != 0;\r\n  }\r\n\r\n  /**\r\n   * @notice Enables or disables stable rate borrowing on the reserve\r\n   * @param self The reserve configuration\r\n   * @param enabled True if the stable rate borrowing needs to be enabled, false otherwise\r\n   */\r\n  function setStableRateBorrowingEnabled(\r\n    DataTypes.ReserveConfigurationMap memory self,\r\n    bool enabled\r\n  ) internal pure {\r\n    self.data =\r\n      (self.data & STABLE_BORROWING_MASK) |\r\n      (uint256(enabled ? 1 : 0) << STABLE_BORROWING_ENABLED_START_BIT_POSITION);\r\n  }\r\n\r\n  /**\r\n   * @notice Gets the stable rate borrowing state of the reserve\r\n   * @param self The reserve configuration\r\n   * @return The stable rate borrowing state\r\n   */\r\n  function getStableRateBorrowingEnabled(\r\n    DataTypes.ReserveConfigurationMap memory self\r\n  ) internal pure returns (bool) {\r\n    return (self.data & ~STABLE_BORROWING_MASK) != 0;\r\n  }\r\n\r\n  /**\r\n   * @notice Sets the reserve factor of the reserve\r\n   * @param self The reserve configuration\r\n   * @param reserveFactor The reserve factor\r\n   */\r\n  function setReserveFactor(\r\n    DataTypes.ReserveConfigurationMap memory self,\r\n    uint256 reserveFactor\r\n  ) internal pure {\r\n    require(reserveFactor <= MAX_VALID_RESERVE_FACTOR, Errors.INVALID_RESERVE_FACTOR);\r\n\r\n    self.data =\r\n      (self.data & RESERVE_FACTOR_MASK) |\r\n      (reserveFactor << RESERVE_FACTOR_START_BIT_POSITION);\r\n  }\r\n\r\n  /**\r\n   * @notice Gets the reserve factor of the reserve\r\n   * @param self The reserve configuration\r\n   * @return The reserve factor\r\n   */\r\n  function getReserveFactor(\r\n    DataTypes.ReserveConfigurationMap memory self\r\n  ) internal pure returns (uint256) {\r\n    return (self.data & ~RESERVE_FACTOR_MASK) >> RESERVE_FACTOR_START_BIT_POSITION;\r\n  }\r\n\r\n  /**\r\n   * @notice Sets the borrow cap of the reserve\r\n   * @param self The reserve configuration\r\n   * @param borrowCap The borrow cap\r\n   */\r\n  function setBorrowCap(\r\n    DataTypes.ReserveConfigurationMap memory self,\r\n    uint256 borrowCap\r\n  ) internal pure {\r\n    require(borrowCap <= MAX_VALID_BORROW_CAP, Errors.INVALID_BORROW_CAP);\r\n\r\n    self.data = (self.data & BORROW_CAP_MASK) | (borrowCap << BORROW_CAP_START_BIT_POSITION);\r\n  }\r\n\r\n  /**\r\n   * @notice Gets the borrow cap of the reserve\r\n   * @param self The reserve configuration\r\n   * @return The borrow cap\r\n   */\r\n  function getBorrowCap(\r\n    DataTypes.ReserveConfigurationMap memory self\r\n  ) internal pure returns (uint256) {\r\n    return (self.data & ~BORROW_CAP_MASK) >> BORROW_CAP_START_BIT_POSITION;\r\n  }\r\n\r\n  /**\r\n   * @notice Sets the supply cap of the reserve\r\n   * @param self The reserve configuration\r\n   * @param supplyCap The supply cap\r\n   */\r\n  function setSupplyCap(\r\n    DataTypes.ReserveConfigurationMap memory self,\r\n    uint256 supplyCap\r\n  ) internal pure {\r\n    require(supplyCap <= MAX_VALID_SUPPLY_CAP, Errors.INVALID_SUPPLY_CAP);\r\n\r\n    self.data = (self.data & SUPPLY_CAP_MASK) | (supplyCap << SUPPLY_CAP_START_BIT_POSITION);\r\n  }\r\n\r\n  /**\r\n   * @notice Gets the supply cap of the reserve\r\n   * @param self The reserve configuration\r\n   * @return The supply cap\r\n   */\r\n  function getSupplyCap(\r\n    DataTypes.ReserveConfigurationMap memory self\r\n  ) internal pure returns (uint256) {\r\n    return (self.data & ~SUPPLY_CAP_MASK) >> SUPPLY_CAP_START_BIT_POSITION;\r\n  }\r\n\r\n  /**\r\n   * @notice Sets the debt ceiling in isolation mode for the asset\r\n   * @param self The reserve configuration\r\n   * @param ceiling The maximum debt ceiling for the asset\r\n   */\r\n  function setDebtCeiling(\r\n    DataTypes.ReserveConfigurationMap memory self,\r\n    uint256 ceiling\r\n  ) internal pure {\r\n    require(ceiling <= MAX_VALID_DEBT_CEILING, Errors.INVALID_DEBT_CEILING);\r\n\r\n    self.data = (self.data & DEBT_CEILING_MASK) | (ceiling << DEBT_CEILING_START_BIT_POSITION);\r\n  }\r\n\r\n  /**\r\n   * @notice Gets the debt ceiling for the asset if the asset is in isolation mode\r\n   * @param self The reserve configuration\r\n   * @return The debt ceiling (0 = isolation mode disabled)\r\n   */\r\n  function getDebtCeiling(\r\n    DataTypes.ReserveConfigurationMap memory self\r\n  ) internal pure returns (uint256) {\r\n    return (self.data & ~DEBT_CEILING_MASK) >> DEBT_CEILING_START_BIT_POSITION;\r\n  }\r\n\r\n  /**\r\n   * @notice Sets the liquidation protocol fee of the reserve\r\n   * @param self The reserve configuration\r\n   * @param liquidationProtocolFee The liquidation protocol fee\r\n   */\r\n  function setLiquidationProtocolFee(\r\n    DataTypes.ReserveConfigurationMap memory self,\r\n    uint256 liquidationProtocolFee\r\n  ) internal pure {\r\n    require(\r\n      liquidationProtocolFee <= MAX_VALID_LIQUIDATION_PROTOCOL_FEE,\r\n      Errors.INVALID_LIQUIDATION_PROTOCOL_FEE\r\n    );\r\n\r\n    self.data =\r\n      (self.data & LIQUIDATION_PROTOCOL_FEE_MASK) |\r\n      (liquidationProtocolFee << LIQUIDATION_PROTOCOL_FEE_START_BIT_POSITION);\r\n  }\r\n\r\n  /**\r\n   * @dev Gets the liquidation protocol fee\r\n   * @param self The reserve configuration\r\n   * @return The liquidation protocol fee\r\n   */\r\n  function getLiquidationProtocolFee(\r\n    DataTypes.ReserveConfigurationMap memory self\r\n  ) internal pure returns (uint256) {\r\n    return\r\n      (self.data & ~LIQUIDATION_PROTOCOL_FEE_MASK) >> LIQUIDATION_PROTOCOL_FEE_START_BIT_POSITION;\r\n  }\r\n\r\n  /**\r\n   * @notice Sets the unbacked mint cap of the reserve\r\n   * @param self The reserve configuration\r\n   * @param unbackedMintCap The unbacked mint cap\r\n   */\r\n  function setUnbackedMintCap(\r\n    DataTypes.ReserveConfigurationMap memory self,\r\n    uint256 unbackedMintCap\r\n  ) internal pure {\r\n    require(unbackedMintCap <= MAX_VALID_UNBACKED_MINT_CAP, Errors.INVALID_UNBACKED_MINT_CAP);\r\n\r\n    self.data =\r\n      (self.data & UNBACKED_MINT_CAP_MASK) |\r\n      (unbackedMintCap << UNBACKED_MINT_CAP_START_BIT_POSITION);\r\n  }\r\n\r\n  /**\r\n   * @dev Gets the unbacked mint cap of the reserve\r\n   * @param self The reserve configuration\r\n   * @return The unbacked mint cap\r\n   */\r\n  function getUnbackedMintCap(\r\n    DataTypes.ReserveConfigurationMap memory self\r\n  ) internal pure returns (uint256) {\r\n    return (self.data & ~UNBACKED_MINT_CAP_MASK) >> UNBACKED_MINT_CAP_START_BIT_POSITION;\r\n  }\r\n\r\n  /**\r\n   * @notice Sets the eMode asset category\r\n   * @param self The reserve configuration\r\n   * @param category The asset category when the user selects the eMode\r\n   */\r\n  function setEModeCategory(\r\n    DataTypes.ReserveConfigurationMap memory self,\r\n    uint256 category\r\n  ) internal pure {\r\n    require(category <= MAX_VALID_EMODE_CATEGORY, Errors.INVALID_EMODE_CATEGORY);\r\n\r\n    self.data = (self.data & EMODE_CATEGORY_MASK) | (category << EMODE_CATEGORY_START_BIT_POSITION);\r\n  }\r\n\r\n  /**\r\n   * @dev Gets the eMode asset category\r\n   * @param self The reserve configuration\r\n   * @return The eMode category for the asset\r\n   */\r\n  function getEModeCategory(\r\n    DataTypes.ReserveConfigurationMap memory self\r\n  ) internal pure returns (uint256) {\r\n    return (self.data & ~EMODE_CATEGORY_MASK) >> EMODE_CATEGORY_START_BIT_POSITION;\r\n  }\r\n\r\n  /**\r\n   * @notice Sets the flashloanable flag for the reserve\r\n   * @param self The reserve configuration\r\n   * @param flashLoanEnabled True if the asset is flashloanable, false otherwise\r\n   */\r\n  function setFlashLoanEnabled(\r\n    DataTypes.ReserveConfigurationMap memory self,\r\n    bool flashLoanEnabled\r\n  ) internal pure {\r\n    self.data =\r\n      (self.data & FLASHLOAN_ENABLED_MASK) |\r\n      (uint256(flashLoanEnabled ? 1 : 0) << FLASHLOAN_ENABLED_START_BIT_POSITION);\r\n  }\r\n\r\n  /**\r\n   * @notice Gets the flashloanable flag for the reserve\r\n   * @param self The reserve configuration\r\n   * @return The flashloanable flag\r\n   */\r\n  function getFlashLoanEnabled(\r\n    DataTypes.ReserveConfigurationMap memory self\r\n  ) internal pure returns (bool) {\r\n    return (self.data & ~FLASHLOAN_ENABLED_MASK) != 0;\r\n  }\r\n\r\n  /**\r\n   * @notice Gets the configuration flags of the reserve\r\n   * @param self The reserve configuration\r\n   * @return The state flag representing active\r\n   * @return The state flag representing frozen\r\n   * @return The state flag representing borrowing enabled\r\n   * @return The state flag representing stableRateBorrowing enabled\r\n   * @return The state flag representing paused\r\n   */\r\n  function getFlags(\r\n    DataTypes.ReserveConfigurationMap memory self\r\n  ) internal pure returns (bool, bool, bool, bool, bool) {\r\n    uint256 dataLocal = self.data;\r\n\r\n    return (\r\n      (dataLocal & ~ACTIVE_MASK) != 0,\r\n      (dataLocal & ~FROZEN_MASK) != 0,\r\n      (dataLocal & ~BORROWING_MASK) != 0,\r\n      (dataLocal & ~STABLE_BORROWING_MASK) != 0,\r\n      (dataLocal & ~PAUSED_MASK) != 0\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @notice Gets the configuration parameters of the reserve from storage\r\n   * @param self The reserve configuration\r\n   * @return The state param representing ltv\r\n   * @return The state param representing liquidation threshold\r\n   * @return The state param representing liquidation bonus\r\n   * @return The state param representing reserve decimals\r\n   * @return The state param representing reserve factor\r\n   * @return The state param representing eMode category\r\n   */\r\n  function getParams(\r\n    DataTypes.ReserveConfigurationMap memory self\r\n  ) internal pure returns (uint256, uint256, uint256, uint256, uint256, uint256) {\r\n    uint256 dataLocal = self.data;\r\n\r\n    return (\r\n      dataLocal & ~LTV_MASK,\r\n      (dataLocal & ~LIQUIDATION_THRESHOLD_MASK) >> LIQUIDATION_THRESHOLD_START_BIT_POSITION,\r\n      (dataLocal & ~LIQUIDATION_BONUS_MASK) >> LIQUIDATION_BONUS_START_BIT_POSITION,\r\n      (dataLocal & ~DECIMALS_MASK) >> RESERVE_DECIMALS_START_BIT_POSITION,\r\n      (dataLocal & ~RESERVE_FACTOR_MASK) >> RESERVE_FACTOR_START_BIT_POSITION,\r\n      (dataLocal & ~EMODE_CATEGORY_MASK) >> EMODE_CATEGORY_START_BIT_POSITION\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @notice Gets the caps parameters of the reserve from storage\r\n   * @param self The reserve configuration\r\n   * @return The state param representing borrow cap\r\n   * @return The state param representing supply cap.\r\n   */\r\n  function getCaps(\r\n    DataTypes.ReserveConfigurationMap memory self\r\n  ) internal pure returns (uint256, uint256) {\r\n    uint256 dataLocal = self.data;\r\n\r\n    return (\r\n      (dataLocal & ~BORROW_CAP_MASK) >> BORROW_CAP_START_BIT_POSITION,\r\n      (dataLocal & ~SUPPLY_CAP_MASK) >> SUPPLY_CAP_START_BIT_POSITION\r\n    );\r\n  }\r\n}\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n  /**\r\n   * @dev Returns the amount of tokens in existence.\r\n   */\r\n  function totalSupply() external view returns (uint256);\r\n\r\n  /**\r\n   * @dev Returns the amount of tokens owned by `account`.\r\n   */\r\n  function balanceOf(address account) external view returns (uint256);\r\n\r\n  /**\r\n   * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n   *\r\n   * Returns a boolean value indicating whether the operation succeeded.\r\n   *\r\n   * Emits a {Transfer} event.\r\n   */\r\n  function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n  /**\r\n   * @dev Returns the remaining number of tokens that `spender` will be\r\n   * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n   * zero by default.\r\n   *\r\n   * This value changes when {approve} or {transferFrom} are called.\r\n   */\r\n  function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n  /**\r\n   * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n   *\r\n   * Returns a boolean value indicating whether the operation succeeded.\r\n   *\r\n   * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n   * that someone may use both the old and the new allowance by unfortunate\r\n   * transaction ordering. One possible solution to mitigate this race\r\n   * condition is to first reduce the spender's allowance to 0 and set the\r\n   * desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   *\r\n   * Emits an {Approval} event.\r\n   */\r\n  function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n  /**\r\n   * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n   * allowance mechanism. `amount` is then deducted from the caller's\r\n   * allowance.\r\n   *\r\n   * Returns a boolean value indicating whether the operation succeeded.\r\n   *\r\n   * Emits a {Transfer} event.\r\n   */\r\n  function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n  /**\r\n   * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n   * another (`to`).\r\n   *\r\n   * Note that `value` may be zero.\r\n   */\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n  /**\r\n   * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n   * a call to {approve}. `value` is the new allowance.\r\n   */\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/// @title Gnosis Protocol v2 Safe ERC20 Transfer Library\r\n/// @author Gnosis Developers\r\n/// @dev Gas-efficient version of Openzeppelin's SafeERC20 contract.\r\nlibrary GPv2SafeERC20 {\r\n  /// @dev Wrapper around a call to the ERC20 function `transfer` that reverts\r\n  /// also when the token returns `false`.\r\n  function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n    bytes4 selector_ = token.transfer.selector;\r\n\r\n    // solhint-disable-next-line no-inline-assembly\r\n    assembly {\r\n      let freeMemoryPointer := mload(0x40)\r\n      mstore(freeMemoryPointer, selector_)\r\n      mstore(add(freeMemoryPointer, 4), and(to, 0xffffffffffffffffffffffffffffffffffffffff))\r\n      mstore(add(freeMemoryPointer, 36), value)\r\n\r\n      if iszero(call(gas(), token, 0, freeMemoryPointer, 68, 0, 0)) {\r\n        returndatacopy(0, 0, returndatasize())\r\n        revert(0, returndatasize())\r\n      }\r\n    }\r\n\r\n    require(getLastTransferResult(token), 'GPv2: failed transfer');\r\n  }\r\n\r\n  /// @dev Wrapper around a call to the ERC20 function `transferFrom` that\r\n  /// reverts also when the token returns `false`.\r\n  function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n    bytes4 selector_ = token.transferFrom.selector;\r\n\r\n    // solhint-disable-next-line no-inline-assembly\r\n    assembly {\r\n      let freeMemoryPointer := mload(0x40)\r\n      mstore(freeMemoryPointer, selector_)\r\n      mstore(add(freeMemoryPointer, 4), and(from, 0xffffffffffffffffffffffffffffffffffffffff))\r\n      mstore(add(freeMemoryPointer, 36), and(to, 0xffffffffffffffffffffffffffffffffffffffff))\r\n      mstore(add(freeMemoryPointer, 68), value)\r\n\r\n      if iszero(call(gas(), token, 0, freeMemoryPointer, 100, 0, 0)) {\r\n        returndatacopy(0, 0, returndatasize())\r\n        revert(0, returndatasize())\r\n      }\r\n    }\r\n\r\n    require(getLastTransferResult(token), 'GPv2: failed transferFrom');\r\n  }\r\n\r\n  /// @dev Verifies that the last return was a successful `transfer*` call.\r\n  /// This is done by checking that the return data is either empty, or\r\n  /// is a valid ABI encoded boolean.\r\n  function getLastTransferResult(IERC20 token) private view returns (bool success) {\r\n    // NOTE: Inspecting previous return data requires assembly. Note that\r\n    // we write the return data to memory 0 in the case where the return\r\n    // data size is 32, this is OK since the first 64 bytes of memory are\r\n    // reserved by Solidy as a scratch space that can be used within\r\n    // assembly blocks.\r\n    // <https://docs.soliditylang.org/en/v0.7.6/internals/layout_in_memory.html>\r\n    // solhint-disable-next-line no-inline-assembly\r\n    assembly {\r\n      /// @dev Revert with an ABI encoded Solidity error with a message\r\n      /// that fits into 32-bytes.\r\n      ///\r\n      /// An ABI encoded Solidity error has the following memory layout:\r\n      ///\r\n      /// ------------+----------------------------------\r\n      ///  byte range | value\r\n      /// ------------+----------------------------------\r\n      ///  0x00..0x04 |        selector(\"Error(string)\")\r\n      ///  0x04..0x24 |      string offset (always 0x20)\r\n      ///  0x24..0x44 |                    string length\r\n      ///  0x44..0x64 | string value, padded to 32-bytes\r\n      function revertWithMessage(length, message) {\r\n        mstore(0x00, '\\x08\\xc3\\x79\\xa0')\r\n        mstore(0x04, 0x20)\r\n        mstore(0x24, length)\r\n        mstore(0x44, message)\r\n        revert(0x00, 0x64)\r\n      }\r\n\r\n      switch returndatasize()\r\n      // Non-standard ERC20 transfer without return.\r\n      case 0 {\r\n        // NOTE: When the return data size is 0, verify that there\r\n        // is code at the address. This is done in order to maintain\r\n        // compatibility with Solidity calling conventions.\r\n        // <https://docs.soliditylang.org/en/v0.7.6/control-structures.html#external-function-calls>\r\n        if iszero(extcodesize(token)) {\r\n          revertWithMessage(20, 'GPv2: not a contract')\r\n        }\r\n\r\n        success := 1\r\n      }\r\n      // Standard ERC20 transfer returning boolean success value.\r\n      case 32 {\r\n        returndatacopy(0, 0, returndatasize())\r\n\r\n        // NOTE: For ABI encoding v1, any non-zero value is accepted\r\n        // as `true` for a boolean. In order to stay compatible with\r\n        // OpenZeppelin's `SafeERC20` library which is known to work\r\n        // with the existing ERC20 implementation we care about,\r\n        // make sure we return success for any non-zero return value\r\n        // from the `transfer*` call.\r\n        success := iszero(iszero(mload(0)))\r\n      }\r\n      default {\r\n        revertWithMessage(31, 'GPv2: malformed transfer result')\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n  /**\r\n   * @dev Returns true if `account` is a contract.\r\n   *\r\n   * [IMPORTANT]\r\n   * ====\r\n   * It is unsafe to assume that an address for which this function returns\r\n   * false is an externally-owned account (EOA) and not a contract.\r\n   *\r\n   * Among others, `isContract` will return false for the following\r\n   * types of addresses:\r\n   *\r\n   *  - an externally-owned account\r\n   *  - a contract in construction\r\n   *  - an address where a contract will be created\r\n   *  - an address where a contract lived, but was destroyed\r\n   * ====\r\n   */\r\n  function isContract(address account) internal view returns (bool) {\r\n    // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n    // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n    // for accounts without code, i.e. `keccak256('')`\r\n    bytes32 codehash;\r\n    bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n    // solhint-disable-next-line no-inline-assembly\r\n    assembly {\r\n      codehash := extcodehash(account)\r\n    }\r\n    return (codehash != accountHash && codehash != 0x0);\r\n  }\r\n\r\n  /**\r\n   * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n   * `recipient`, forwarding all available gas and reverting on errors.\r\n   *\r\n   * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n   * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n   * imposed by `transfer`, making them unable to receive funds via\r\n   * `transfer`. {sendValue} removes this limitation.\r\n   *\r\n   * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n   *\r\n   * IMPORTANT: because control is transferred to `recipient`, care must be\r\n   * taken to not create reentrancy vulnerabilities. Consider using\r\n   * {ReentrancyGuard} or the\r\n   * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n   */\r\n  function sendValue(address payable recipient, uint256 amount) internal {\r\n    require(address(this).balance >= amount, 'Address: insufficient balance');\r\n\r\n    // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n    (bool success, ) = recipient.call{value: amount}('');\r\n    require(success, 'Address: unable to send value, recipient may have reverted');\r\n  }\r\n}\r\n\r\n/**\r\n * @title IScaledBalanceToken\r\n * @author Aave\r\n * @notice Defines the basic interface for a scaled-balance token.\r\n */\r\ninterface IScaledBalanceToken {\r\n  /**\r\n   * @dev Emitted after the mint action\r\n   * @param caller The address performing the mint\r\n   * @param onBehalfOf The address of the user that will receive the minted tokens\r\n   * @param value The scaled-up amount being minted (based on user entered amount and balance increase from interest)\r\n   * @param balanceIncrease The increase in scaled-up balance since the last action of 'onBehalfOf'\r\n   * @param index The next liquidity index of the reserve\r\n   */\r\n  event Mint(\r\n    address indexed caller,\r\n    address indexed onBehalfOf,\r\n    uint256 value,\r\n    uint256 balanceIncrease,\r\n    uint256 index\r\n  );\r\n\r\n  /**\r\n   * @dev Emitted after the burn action\r\n   * @dev If the burn function does not involve a transfer of the underlying asset, the target defaults to zero address\r\n   * @param from The address from which the tokens will be burned\r\n   * @param target The address that will receive the underlying, if any\r\n   * @param value The scaled-up amount being burned (user entered amount - balance increase from interest)\r\n   * @param balanceIncrease The increase in scaled-up balance since the last action of 'from'\r\n   * @param index The next liquidity index of the reserve\r\n   */\r\n  event Burn(\r\n    address indexed from,\r\n    address indexed target,\r\n    uint256 value,\r\n    uint256 balanceIncrease,\r\n    uint256 index\r\n  );\r\n\r\n  /**\r\n   * @notice Returns the scaled balance of the user.\r\n   * @dev The scaled balance is the sum of all the updated stored balance divided by the reserve's liquidity index\r\n   * at the moment of the update\r\n   * @param user The user whose balance is calculated\r\n   * @return The scaled balance of the user\r\n   */\r\n  function scaledBalanceOf(address user) external view returns (uint256);\r\n\r\n  /**\r\n   * @notice Returns the scaled balance of the user and the scaled total supply.\r\n   * @param user The address of the user\r\n   * @return The scaled balance of the user\r\n   * @return The scaled total supply\r\n   */\r\n  function getScaledUserBalanceAndSupply(address user) external view returns (uint256, uint256);\r\n\r\n  /**\r\n   * @notice Returns the scaled total supply of the scaled balance token. Represents sum(debt/index)\r\n   * @return The scaled total supply\r\n   */\r\n  function scaledTotalSupply() external view returns (uint256);\r\n\r\n  /**\r\n   * @notice Returns last index interest was accrued to the user's balance\r\n   * @param user The address of the user\r\n   * @return The last index interest was accrued to the user's balance, expressed in ray\r\n   */\r\n  function getPreviousIndex(address user) external view returns (uint256);\r\n}\r\n\r\n/**\r\n * @title IAaveIncentivesController\r\n * @author Aave\r\n * @notice Defines the basic interface for an Aave Incentives Controller.\r\n * @dev It only contains one single function, needed as a hook on aToken and debtToken transfers.\r\n */\r\ninterface IAaveIncentivesController {\r\n  /**\r\n   * @dev Called by the corresponding asset on transfer hook in order to update the rewards distribution.\r\n   * @dev The units of `totalSupply` and `userBalance` should be the same.\r\n   * @param user The address of the user whose asset balance has changed\r\n   * @param totalSupply The total supply of the asset prior to user balance change\r\n   * @param userBalance The previous user balance prior to balance change\r\n   */\r\n  function handleAction(address user, uint256 totalSupply, uint256 userBalance) external;\r\n}\r\n\r\n/**\r\n * @title IPoolAddressesProvider\r\n * @author Aave\r\n * @notice Defines the basic interface for a Pool Addresses Provider.\r\n */\r\ninterface IPoolAddressesProvider {\r\n  /**\r\n   * @dev Emitted when the market identifier is updated.\r\n   * @param oldMarketId The old id of the market\r\n   * @param newMarketId The new id of the market\r\n   */\r\n  event MarketIdSet(string indexed oldMarketId, string indexed newMarketId);\r\n\r\n  /**\r\n   * @dev Emitted when the pool is updated.\r\n   * @param oldAddress The old address of the Pool\r\n   * @param newAddress The new address of the Pool\r\n   */\r\n  event PoolUpdated(address indexed oldAddress, address indexed newAddress);\r\n\r\n  /**\r\n   * @dev Emitted when the pool configurator is updated.\r\n   * @param oldAddress The old address of the PoolConfigurator\r\n   * @param newAddress The new address of the PoolConfigurator\r\n   */\r\n  event PoolConfiguratorUpdated(address indexed oldAddress, address indexed newAddress);\r\n\r\n  /**\r\n   * @dev Emitted when the price oracle is updated.\r\n   * @param oldAddress The old address of the PriceOracle\r\n   * @param newAddress The new address of the PriceOracle\r\n   */\r\n  event PriceOracleUpdated(address indexed oldAddress, address indexed newAddress);\r\n\r\n  /**\r\n   * @dev Emitted when the ACL manager is updated.\r\n   * @param oldAddress The old address of the ACLManager\r\n   * @param newAddress The new address of the ACLManager\r\n   */\r\n  event ACLManagerUpdated(address indexed oldAddress, address indexed newAddress);\r\n\r\n  /**\r\n   * @dev Emitted when the ACL admin is updated.\r\n   * @param oldAddress The old address of the ACLAdmin\r\n   * @param newAddress The new address of the ACLAdmin\r\n   */\r\n  event ACLAdminUpdated(address indexed oldAddress, address indexed newAddress);\r\n\r\n  /**\r\n   * @dev Emitted when the price oracle sentinel is updated.\r\n   * @param oldAddress The old address of the PriceOracleSentinel\r\n   * @param newAddress The new address of the PriceOracleSentinel\r\n   */\r\n  event PriceOracleSentinelUpdated(address indexed oldAddress, address indexed newAddress);\r\n\r\n  /**\r\n   * @dev Emitted when the pool data provider is updated.\r\n   * @param oldAddress The old address of the PoolDataProvider\r\n   * @param newAddress The new address of the PoolDataProvider\r\n   */\r\n  event PoolDataProviderUpdated(address indexed oldAddress, address indexed newAddress);\r\n\r\n  /**\r\n   * @dev Emitted when a new proxy is created.\r\n   * @param id The identifier of the proxy\r\n   * @param proxyAddress The address of the created proxy contract\r\n   * @param implementationAddress The address of the implementation contract\r\n   */\r\n  event ProxyCreated(\r\n    bytes32 indexed id,\r\n    address indexed proxyAddress,\r\n    address indexed implementationAddress\r\n  );\r\n\r\n  /**\r\n   * @dev Emitted when a new non-proxied contract address is registered.\r\n   * @param id The identifier of the contract\r\n   * @param oldAddress The address of the old contract\r\n   * @param newAddress The address of the new contract\r\n   */\r\n  event AddressSet(bytes32 indexed id, address indexed oldAddress, address indexed newAddress);\r\n\r\n  /**\r\n   * @dev Emitted when the implementation of the proxy registered with id is updated\r\n   * @param id The identifier of the contract\r\n   * @param proxyAddress The address of the proxy contract\r\n   * @param oldImplementationAddress The address of the old implementation contract\r\n   * @param newImplementationAddress The address of the new implementation contract\r\n   */\r\n  event AddressSetAsProxy(\r\n    bytes32 indexed id,\r\n    address indexed proxyAddress,\r\n    address oldImplementationAddress,\r\n    address indexed newImplementationAddress\r\n  );\r\n\r\n  /**\r\n   * @notice Returns the id of the Aave market to which this contract points to.\r\n   * @return The market id\r\n   */\r\n  function getMarketId() external view returns (string memory);\r\n\r\n  /**\r\n   * @notice Associates an id with a specific PoolAddressesProvider.\r\n   * @dev This can be used to create an onchain registry of PoolAddressesProviders to\r\n   * identify and validate multiple Aave markets.\r\n   * @param newMarketId The market id\r\n   */\r\n  function setMarketId(string calldata newMarketId) external;\r\n\r\n  /**\r\n   * @notice Returns an address by its identifier.\r\n   * @dev The returned address might be an EOA or a contract, potentially proxied\r\n   * @dev It returns ZERO if there is no registered address with the given id\r\n   * @param id The id\r\n   * @return The address of the registered for the specified id\r\n   */\r\n  function getAddress(bytes32 id) external view returns (address);\r\n\r\n  /**\r\n   * @notice General function to update the implementation of a proxy registered with\r\n   * certain `id`. If there is no proxy registered, it will instantiate one and\r\n   * set as implementation the `newImplementationAddress`.\r\n   * @dev IMPORTANT Use this function carefully, only for ids that don't have an explicit\r\n   * setter function, in order to avoid unexpected consequences\r\n   * @param id The id\r\n   * @param newImplementationAddress The address of the new implementation\r\n   */\r\n  function setAddressAsProxy(bytes32 id, address newImplementationAddress) external;\r\n\r\n  /**\r\n   * @notice Sets an address for an id replacing the address saved in the addresses map.\r\n   * @dev IMPORTANT Use this function carefully, as it will do a hard replacement\r\n   * @param id The id\r\n   * @param newAddress The address to set\r\n   */\r\n  function setAddress(bytes32 id, address newAddress) external;\r\n\r\n  /**\r\n   * @notice Returns the address of the Pool proxy.\r\n   * @return The Pool proxy address\r\n   */\r\n  function getPool() external view returns (address);\r\n\r\n  /**\r\n   * @notice Updates the implementation of the Pool, or creates a proxy\r\n   * setting the new `pool` implementation when the function is called for the first time.\r\n   * @param newPoolImpl The new Pool implementation\r\n   */\r\n  function setPoolImpl(address newPoolImpl) external;\r\n\r\n  /**\r\n   * @notice Returns the address of the PoolConfigurator proxy.\r\n   * @return The PoolConfigurator proxy address\r\n   */\r\n  function getPoolConfigurator() external view returns (address);\r\n\r\n  /**\r\n   * @notice Updates the implementation of the PoolConfigurator, or creates a proxy\r\n   * setting the new `PoolConfigurator` implementation when the function is called for the first time.\r\n   * @param newPoolConfiguratorImpl The new PoolConfigurator implementation\r\n   */\r\n  function setPoolConfiguratorImpl(address newPoolConfiguratorImpl) external;\r\n\r\n  /**\r\n   * @notice Returns the address of the price oracle.\r\n   * @return The address of the PriceOracle\r\n   */\r\n  function getPriceOracle() external view returns (address);\r\n\r\n  /**\r\n   * @notice Updates the address of the price oracle.\r\n   * @param newPriceOracle The address of the new PriceOracle\r\n   */\r\n  function setPriceOracle(address newPriceOracle) external;\r\n\r\n  /**\r\n   * @notice Returns the address of the ACL manager.\r\n   * @return The address of the ACLManager\r\n   */\r\n  function getACLManager() external view returns (address);\r\n\r\n  /**\r\n   * @notice Updates the address of the ACL manager.\r\n   * @param newAclManager The address of the new ACLManager\r\n   */\r\n  function setACLManager(address newAclManager) external;\r\n\r\n  /**\r\n   * @notice Returns the address of the ACL admin.\r\n   * @return The address of the ACL admin\r\n   */\r\n  function getACLAdmin() external view returns (address);\r\n\r\n  /**\r\n   * @notice Updates the address of the ACL admin.\r\n   * @param newAclAdmin The address of the new ACL admin\r\n   */\r\n  function setACLAdmin(address newAclAdmin) external;\r\n\r\n  /**\r\n   * @notice Returns the address of the price oracle sentinel.\r\n   * @return The address of the PriceOracleSentinel\r\n   */\r\n  function getPriceOracleSentinel() external view returns (address);\r\n\r\n  /**\r\n   * @notice Updates the address of the price oracle sentinel.\r\n   * @param newPriceOracleSentinel The address of the new PriceOracleSentinel\r\n   */\r\n  function setPriceOracleSentinel(address newPriceOracleSentinel) external;\r\n\r\n  /**\r\n   * @notice Returns the address of the data provider.\r\n   * @return The address of the DataProvider\r\n   */\r\n  function getPoolDataProvider() external view returns (address);\r\n\r\n  /**\r\n   * @notice Updates the address of the data provider.\r\n   * @param newDataProvider The address of the new DataProvider\r\n   */\r\n  function setPoolDataProvider(address newDataProvider) external;\r\n}\r\n\r\n/**\r\n * @title IPool\r\n * @author Aave\r\n * @notice Defines the basic interface for an Aave Pool.\r\n */\r\ninterface IPool {\r\n  /**\r\n   * @dev Emitted on mintUnbacked()\r\n   * @param reserve The address of the underlying asset of the reserve\r\n   * @param user The address initiating the supply\r\n   * @param onBehalfOf The beneficiary of the supplied assets, receiving the aTokens\r\n   * @param amount The amount of supplied assets\r\n   * @param referralCode The referral code used\r\n   */\r\n  event MintUnbacked(\r\n    address indexed reserve,\r\n    address user,\r\n    address indexed onBehalfOf,\r\n    uint256 amount,\r\n    uint16 indexed referralCode\r\n  );\r\n\r\n  /**\r\n   * @dev Emitted on backUnbacked()\r\n   * @param reserve The address of the underlying asset of the reserve\r\n   * @param backer The address paying for the backing\r\n   * @param amount The amount added as backing\r\n   * @param fee The amount paid in fees\r\n   */\r\n  event BackUnbacked(address indexed reserve, address indexed backer, uint256 amount, uint256 fee);\r\n\r\n  /**\r\n   * @dev Emitted on supply()\r\n   * @param reserve The address of the underlying asset of the reserve\r\n   * @param user The address initiating the supply\r\n   * @param onBehalfOf The beneficiary of the supply, receiving the aTokens\r\n   * @param amount The amount supplied\r\n   * @param referralCode The referral code used\r\n   */\r\n  event Supply(\r\n    address indexed reserve,\r\n    address user,\r\n    address indexed onBehalfOf,\r\n    uint256 amount,\r\n    uint16 indexed referralCode\r\n  );\r\n\r\n  /**\r\n   * @dev Emitted on withdraw()\r\n   * @param reserve The address of the underlying asset being withdrawn\r\n   * @param user The address initiating the withdrawal, owner of aTokens\r\n   * @param to The address that will receive the underlying\r\n   * @param amount The amount to be withdrawn\r\n   */\r\n  event Withdraw(address indexed reserve, address indexed user, address indexed to, uint256 amount);\r\n\r\n  /**\r\n   * @dev Emitted on borrow() and flashLoan() when debt needs to be opened\r\n   * @param reserve The address of the underlying asset being borrowed\r\n   * @param user The address of the user initiating the borrow(), receiving the funds on borrow() or just\r\n   * initiator of the transaction on flashLoan()\r\n   * @param onBehalfOf The address that will be getting the debt\r\n   * @param amount The amount borrowed out\r\n   * @param interestRateMode The rate mode: 1 for Stable, 2 for Variable\r\n   * @param borrowRate The numeric rate at which the user has borrowed, expressed in ray\r\n   * @param referralCode The referral code used\r\n   */\r\n  event Borrow(\r\n    address indexed reserve,\r\n    address user,\r\n    address indexed onBehalfOf,\r\n    uint256 amount,\r\n    DataTypes.InterestRateMode interestRateMode,\r\n    uint256 borrowRate,\r\n    uint16 indexed referralCode\r\n  );\r\n\r\n  /**\r\n   * @dev Emitted on repay()\r\n   * @param reserve The address of the underlying asset of the reserve\r\n   * @param user The beneficiary of the repayment, getting his debt reduced\r\n   * @param repayer The address of the user initiating the repay(), providing the funds\r\n   * @param amount The amount repaid\r\n   * @param useATokens True if the repayment is done using aTokens, `false` if done with underlying asset directly\r\n   */\r\n  event Repay(\r\n    address indexed reserve,\r\n    address indexed user,\r\n    address indexed repayer,\r\n    uint256 amount,\r\n    bool useATokens\r\n  );\r\n\r\n  /**\r\n   * @dev Emitted on swapBorrowRateMode()\r\n   * @param reserve The address of the underlying asset of the reserve\r\n   * @param user The address of the user swapping his rate mode\r\n   * @param interestRateMode The current interest rate mode of the position being swapped: 1 for Stable, 2 for Variable\r\n   */\r\n  event SwapBorrowRateMode(\r\n    address indexed reserve,\r\n    address indexed user,\r\n    DataTypes.InterestRateMode interestRateMode\r\n  );\r\n\r\n  /**\r\n   * @dev Emitted on borrow(), repay() and liquidationCall() when using isolated assets\r\n   * @param asset The address of the underlying asset of the reserve\r\n   * @param totalDebt The total isolation mode debt for the reserve\r\n   */\r\n  event IsolationModeTotalDebtUpdated(address indexed asset, uint256 totalDebt);\r\n\r\n  /**\r\n   * @dev Emitted when the user selects a certain asset category for eMode\r\n   * @param user The address of the user\r\n   * @param categoryId The category id\r\n   */\r\n  event UserEModeSet(address indexed user, uint8 categoryId);\r\n\r\n  /**\r\n   * @dev Emitted on setUserUseReserveAsCollateral()\r\n   * @param reserve The address of the underlying asset of the reserve\r\n   * @param user The address of the user enabling the usage as collateral\r\n   */\r\n  event ReserveUsedAsCollateralEnabled(address indexed reserve, address indexed user);\r\n\r\n  /**\r\n   * @dev Emitted on setUserUseReserveAsCollateral()\r\n   * @param reserve The address of the underlying asset of the reserve\r\n   * @param user The address of the user enabling the usage as collateral\r\n   */\r\n  event ReserveUsedAsCollateralDisabled(address indexed reserve, address indexed user);\r\n\r\n  /**\r\n   * @dev Emitted on rebalanceStableBorrowRate()\r\n   * @param reserve The address of the underlying asset of the reserve\r\n   * @param user The address of the user for which the rebalance has been executed\r\n   */\r\n  event RebalanceStableBorrowRate(address indexed reserve, address indexed user);\r\n\r\n  /**\r\n   * @dev Emitted on flashLoan()\r\n   * @param target The address of the flash loan receiver contract\r\n   * @param initiator The address initiating the flash loan\r\n   * @param asset The address of the asset being flash borrowed\r\n   * @param amount The amount flash borrowed\r\n   * @param interestRateMode The flashloan mode: 0 for regular flashloan, 1 for Stable debt, 2 for Variable debt\r\n   * @param premium The fee flash borrowed\r\n   * @param referralCode The referral code used\r\n   */\r\n  event FlashLoan(\r\n    address indexed target,\r\n    address initiator,\r\n    address indexed asset,\r\n    uint256 amount,\r\n    DataTypes.InterestRateMode interestRateMode,\r\n    uint256 premium,\r\n    uint16 indexed referralCode\r\n  );\r\n\r\n  /**\r\n   * @dev Emitted when a borrower is liquidated.\r\n   * @param collateralAsset The address of the underlying asset used as collateral, to receive as result of the liquidation\r\n   * @param debtAsset The address of the underlying borrowed asset to be repaid with the liquidation\r\n   * @param user The address of the borrower getting liquidated\r\n   * @param debtToCover The debt amount of borrowed `asset` the liquidator wants to cover\r\n   * @param liquidatedCollateralAmount The amount of collateral received by the liquidator\r\n   * @param liquidator The address of the liquidator\r\n   * @param receiveAToken True if the liquidators wants to receive the collateral aTokens, `false` if he wants\r\n   * to receive the underlying collateral asset directly\r\n   */\r\n  event LiquidationCall(\r\n    address indexed collateralAsset,\r\n    address indexed debtAsset,\r\n    address indexed user,\r\n    uint256 debtToCover,\r\n    uint256 liquidatedCollateralAmount,\r\n    address liquidator,\r\n    bool receiveAToken\r\n  );\r\n\r\n  /**\r\n   * @dev Emitted when the state of a reserve is updated.\r\n   * @param reserve The address of the underlying asset of the reserve\r\n   * @param liquidityRate The next liquidity rate\r\n   * @param stableBorrowRate The next stable borrow rate\r\n   * @param variableBorrowRate The next variable borrow rate\r\n   * @param liquidityIndex The next liquidity index\r\n   * @param variableBorrowIndex The next variable borrow index\r\n   */\r\n  event ReserveDataUpdated(\r\n    address indexed reserve,\r\n    uint256 liquidityRate,\r\n    uint256 stableBorrowRate,\r\n    uint256 variableBorrowRate,\r\n    uint256 liquidityIndex,\r\n    uint256 variableBorrowIndex\r\n  );\r\n\r\n  /**\r\n   * @dev Emitted when the protocol treasury receives minted aTokens from the accrued interest.\r\n   * @param reserve The address of the reserve\r\n   * @param amountMinted The amount minted to the treasury\r\n   */\r\n  event MintedToTreasury(address indexed reserve, uint256 amountMinted);\r\n\r\n  /**\r\n   * @notice Mints an `amount` of aTokens to the `onBehalfOf`\r\n   * @param asset The address of the underlying asset to mint\r\n   * @param amount The amount to mint\r\n   * @param onBehalfOf The address that will receive the aTokens\r\n   * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\r\n   *   0 if the action is executed directly by the user, without any middle-man\r\n   */\r\n  function mintUnbacked(\r\n    address asset,\r\n    uint256 amount,\r\n    address onBehalfOf,\r\n    uint16 referralCode\r\n  ) external;\r\n\r\n  /**\r\n   * @notice Back the current unbacked underlying with `amount` and pay `fee`.\r\n   * @param asset The address of the underlying asset to back\r\n   * @param amount The amount to back\r\n   * @param fee The amount paid in fees\r\n   * @return The backed amount\r\n   */\r\n  function backUnbacked(address asset, uint256 amount, uint256 fee) external returns (uint256);\r\n\r\n  /**\r\n   * @notice Supplies an `amount` of underlying asset into the reserve, receiving in return overlying aTokens.\r\n   * - E.g. User supplies 100 USDC and gets in return 100 aUSDC\r\n   * @param asset The address of the underlying asset to supply\r\n   * @param amount The amount to be supplied\r\n   * @param onBehalfOf The address that will receive the aTokens, same as msg.sender if the user\r\n   *   wants to receive them on his own wallet, or a different address if the beneficiary of aTokens\r\n   *   is a different wallet\r\n   * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\r\n   *   0 if the action is executed directly by the user, without any middle-man\r\n   */\r\n  function supply(address asset, uint256 amount, address onBehalfOf, uint16 referralCode) external;\r\n\r\n  /**\r\n   * @notice Supply with transfer approval of asset to be supplied done via permit function\r\n   * see: https://eips.ethereum.org/EIPS/eip-2612 and https://eips.ethereum.org/EIPS/eip-713\r\n   * @param asset The address of the underlying asset to supply\r\n   * @param amount The amount to be supplied\r\n   * @param onBehalfOf The address that will receive the aTokens, same as msg.sender if the user\r\n   *   wants to receive them on his own wallet, or a different address if the beneficiary of aTokens\r\n   *   is a different wallet\r\n   * @param deadline The deadline timestamp that the permit is valid\r\n   * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\r\n   *   0 if the action is executed directly by the user, without any middle-man\r\n   * @param permitV The V parameter of ERC712 permit sig\r\n   * @param permitR The R parameter of ERC712 permit sig\r\n   * @param permitS The S parameter of ERC712 permit sig\r\n   */\r\n  function supplyWithPermit(\r\n    address asset,\r\n    uint256 amount,\r\n    address onBehalfOf,\r\n    uint16 referralCode,\r\n    uint256 deadline,\r\n    uint8 permitV,\r\n    bytes32 permitR,\r\n    bytes32 permitS\r\n  ) external;\r\n\r\n  /**\r\n   * @notice Withdraws an `amount` of underlying asset from the reserve, burning the equivalent aTokens owned\r\n   * E.g. User has 100 aUSDC, calls withdraw() and receives 100 USDC, burning the 100 aUSDC\r\n   * @param asset The address of the underlying asset to withdraw\r\n   * @param amount The underlying amount to be withdrawn\r\n   *   - Send the value type(uint256).max in order to withdraw the whole aToken balance\r\n   * @param to The address that will receive the underlying, same as msg.sender if the user\r\n   *   wants to receive it on his own wallet, or a different address if the beneficiary is a\r\n   *   different wallet\r\n   * @return The final amount withdrawn\r\n   */\r\n  function withdraw(address asset, uint256 amount, address to) external returns (uint256);\r\n\r\n  /**\r\n   * @notice Allows users to borrow a specific `amount` of the reserve underlying asset, provided that the borrower\r\n   * already supplied enough collateral, or he was given enough allowance by a credit delegator on the\r\n   * corresponding debt token (StableDebtToken or VariableDebtToken)\r\n   * - E.g. User borrows 100 USDC passing as `onBehalfOf` his own address, receiving the 100 USDC in his wallet\r\n   *   and 100 stable/variable debt tokens, depending on the `interestRateMode`\r\n   * @param asset The address of the underlying asset to borrow\r\n   * @param amount The amount to be borrowed\r\n   * @param interestRateMode The interest rate mode at which the user wants to borrow: 1 for Stable, 2 for Variable\r\n   * @param referralCode The code used to register the integrator originating the operation, for potential rewards.\r\n   *   0 if the action is executed directly by the user, without any middle-man\r\n   * @param onBehalfOf The address of the user who will receive the debt. Should be the address of the borrower itself\r\n   * calling the function if he wants to borrow against his own collateral, or the address of the credit delegator\r\n   * if he has been given credit delegation allowance\r\n   */\r\n  function borrow(\r\n    address asset,\r\n    uint256 amount,\r\n    uint256 interestRateMode,\r\n    uint16 referralCode,\r\n    address onBehalfOf\r\n  ) external;\r\n\r\n  /**\r\n   * @notice Repays a borrowed `amount` on a specific reserve, burning the equivalent debt tokens owned\r\n   * - E.g. User repays 100 USDC, burning 100 variable/stable debt tokens of the `onBehalfOf` address\r\n   * @param asset The address of the borrowed underlying asset previously borrowed\r\n   * @param amount The amount to repay\r\n   * - Send the value type(uint256).max in order to repay the whole debt for `asset` on the specific `debtMode`\r\n   * @param interestRateMode The interest rate mode at of the debt the user wants to repay: 1 for Stable, 2 for Variable\r\n   * @param onBehalfOf The address of the user who will get his debt reduced/removed. Should be the address of the\r\n   * user calling the function if he wants to reduce/remove his own debt, or the address of any other\r\n   * other borrower whose debt should be removed\r\n   * @return The final amount repaid\r\n   */\r\n  function repay(\r\n    address asset,\r\n    uint256 amount,\r\n    uint256 interestRateMode,\r\n    address onBehalfOf\r\n  ) external returns (uint256);\r\n\r\n  /**\r\n   * @notice Repay with transfer approval of asset to be repaid done via permit function\r\n   * see: https://eips.ethereum.org/EIPS/eip-2612 and https://eips.ethereum.org/EIPS/eip-713\r\n   * @param asset The address of the borrowed underlying asset previously borrowed\r\n   * @param amount The amount to repay\r\n   * - Send the value type(uint256).max in order to repay the whole debt for `asset` on the specific `debtMode`\r\n   * @param interestRateMode The interest rate mode at of the debt the user wants to repay: 1 for Stable, 2 for Variable\r\n   * @param onBehalfOf Address of the user who will get his debt reduced/removed. Should be the address of the\r\n   * user calling the function if he wants to reduce/remove his own debt, or the address of any other\r\n   * other borrower whose debt should be removed\r\n   * @param deadline The deadline timestamp that the permit is valid\r\n   * @param permitV The V parameter of ERC712 permit sig\r\n   * @param permitR The R parameter of ERC712 permit sig\r\n   * @param permitS The S parameter of ERC712 permit sig\r\n   * @return The final amount repaid\r\n   */\r\n  function repayWithPermit(\r\n    address asset,\r\n    uint256 amount,\r\n    uint256 interestRateMode,\r\n    address onBehalfOf,\r\n    uint256 deadline,\r\n    uint8 permitV,\r\n    bytes32 permitR,\r\n    bytes32 permitS\r\n  ) external returns (uint256);\r\n\r\n  /**\r\n   * @notice Repays a borrowed `amount` on a specific reserve using the reserve aTokens, burning the\r\n   * equivalent debt tokens\r\n   * - E.g. User repays 100 USDC using 100 aUSDC, burning 100 variable/stable debt tokens\r\n   * @dev  Passing uint256.max as amount will clean up any residual aToken dust balance, if the user aToken\r\n   * balance is not enough to cover the whole debt\r\n   * @param asset The address of the borrowed underlying asset previously borrowed\r\n   * @param amount The amount to repay\r\n   * - Send the value type(uint256).max in order to repay the whole debt for `asset` on the specific `debtMode`\r\n   * @param interestRateMode The interest rate mode at of the debt the user wants to repay: 1 for Stable, 2 for Variable\r\n   * @return The final amount repaid\r\n   */\r\n  function repayWithATokens(\r\n    address asset,\r\n    uint256 amount,\r\n    uint256 interestRateMode\r\n  ) external returns (uint256);\r\n\r\n  /**\r\n   * @notice Allows a borrower to swap his debt between stable and variable mode, or vice versa\r\n   * @param asset The address of the underlying asset borrowed\r\n   * @param interestRateMode The current interest rate mode of the position being swapped: 1 for Stable, 2 for Variable\r\n   */\r\n  function swapBorrowRateMode(address asset, uint256 interestRateMode) external;\r\n\r\n  /**\r\n   * @notice Rebalances the stable interest rate of a user to the current stable rate defined on the reserve.\r\n   * - Users can be rebalanced if the following conditions are satisfied:\r\n   *     1. Usage ratio is above 95%\r\n   *     2. the current supply APY is below REBALANCE_UP_THRESHOLD * maxVariableBorrowRate, which means that too\r\n   *        much has been borrowed at a stable rate and suppliers are not earning enough\r\n   * @param asset The address of the underlying asset borrowed\r\n   * @param user The address of the user to be rebalanced\r\n   */\r\n  function rebalanceStableBorrowRate(address asset, address user) external;\r\n\r\n  /**\r\n   * @notice Allows suppliers to enable/disable a specific supplied asset as collateral\r\n   * @param asset The address of the underlying asset supplied\r\n   * @param useAsCollateral True if the user wants to use the supply as collateral, false otherwise\r\n   */\r\n  function setUserUseReserveAsCollateral(address asset, bool useAsCollateral) external;\r\n\r\n  /**\r\n   * @notice Function to liquidate a non-healthy position collateral-wise, with Health Factor below 1\r\n   * - The caller (liquidator) covers `debtToCover` amount of debt of the user getting liquidated, and receives\r\n   *   a proportionally amount of the `collateralAsset` plus a bonus to cover market risk\r\n   * @param collateralAsset The address of the underlying asset used as collateral, to receive as result of the liquidation\r\n   * @param debtAsset The address of the underlying borrowed asset to be repaid with the liquidation\r\n   * @param user The address of the borrower getting liquidated\r\n   * @param debtToCover The debt amount of borrowed `asset` the liquidator wants to cover\r\n   * @param receiveAToken True if the liquidators wants to receive the collateral aTokens, `false` if he wants\r\n   * to receive the underlying collateral asset directly\r\n   */\r\n  function liquidationCall(\r\n    address collateralAsset,\r\n    address debtAsset,\r\n    address user,\r\n    uint256 debtToCover,\r\n    bool receiveAToken\r\n  ) external;\r\n\r\n  /**\r\n   * @notice Allows smartcontracts to access the liquidity of the pool within one transaction,\r\n   * as long as the amount taken plus a fee is returned.\r\n   * @dev IMPORTANT There are security concerns for developers of flashloan receiver contracts that must be kept\r\n   * into consideration. For further details please visit https://docs.aave.com/developers/\r\n   * @param receiverAddress The address of the contract receiving the funds, implementing IFlashLoanReceiver interface\r\n   * @param assets The addresses of the assets being flash-borrowed\r\n   * @param amounts The amounts of the assets being flash-borrowed\r\n   * @param interestRateModes Types of the debt to open if the flash loan is not returned:\r\n   *   0 -> Don't open any debt, just revert if funds can't be transferred from the receiver\r\n   *   1 -> Open debt at stable rate for the value of the amount flash-borrowed to the `onBehalfOf` address\r\n   *   2 -> Open debt at variable rate for the value of the amount flash-borrowed to the `onBehalfOf` address\r\n   * @param onBehalfOf The address  that will receive the debt in the case of using on `modes` 1 or 2\r\n   * @param params Variadic packed params to pass to the receiver as extra information\r\n   * @param referralCode The code used to register the integrator originating the operation, for potential rewards.\r\n   *   0 if the action is executed directly by the user, without any middle-man\r\n   */\r\n  function flashLoan(\r\n    address receiverAddress,\r\n    address[] calldata assets,\r\n    uint256[] calldata amounts,\r\n    uint256[] calldata interestRateModes,\r\n    address onBehalfOf,\r\n    bytes calldata params,\r\n    uint16 referralCode\r\n  ) external;\r\n\r\n  /**\r\n   * @notice Allows smartcontracts to access the liquidity of the pool within one transaction,\r\n   * as long as the amount taken plus a fee is returned.\r\n   * @dev IMPORTANT There are security concerns for developers of flashloan receiver contracts that must be kept\r\n   * into consideration. For further details please visit https://docs.aave.com/developers/\r\n   * @param receiverAddress The address of the contract receiving the funds, implementing IFlashLoanSimpleReceiver interface\r\n   * @param asset The address of the asset being flash-borrowed\r\n   * @param amount The amount of the asset being flash-borrowed\r\n   * @param params Variadic packed params to pass to the receiver as extra information\r\n   * @param referralCode The code used to register the integrator originating the operation, for potential rewards.\r\n   *   0 if the action is executed directly by the user, without any middle-man\r\n   */\r\n  function flashLoanSimple(\r\n    address receiverAddress,\r\n    address asset,\r\n    uint256 amount,\r\n    bytes calldata params,\r\n    uint16 referralCode\r\n  ) external;\r\n\r\n  /**\r\n   * @notice Returns the user account data across all the reserves\r\n   * @param user The address of the user\r\n   * @return totalCollateralBase The total collateral of the user in the base currency used by the price feed\r\n   * @return totalDebtBase The total debt of the user in the base currency used by the price feed\r\n   * @return availableBorrowsBase The borrowing power left of the user in the base currency used by the price feed\r\n   * @return currentLiquidationThreshold The liquidation threshold of the user\r\n   * @return ltv The loan to value of The user\r\n   * @return healthFactor The current health factor of the user\r\n   */\r\n  function getUserAccountData(\r\n    address user\r\n  )\r\n    external\r\n    view\r\n    returns (\r\n      uint256 totalCollateralBase,\r\n      uint256 totalDebtBase,\r\n      uint256 availableBorrowsBase,\r\n      uint256 currentLiquidationThreshold,\r\n      uint256 ltv,\r\n      uint256 healthFactor\r\n    );\r\n\r\n  /**\r\n   * @notice Initializes a reserve, activating it, assigning an aToken and debt tokens and an\r\n   * interest rate strategy\r\n   * @dev Only callable by the PoolConfigurator contract\r\n   * @param asset The address of the underlying asset of the reserve\r\n   * @param aTokenAddress The address of the aToken that will be assigned to the reserve\r\n   * @param stableDebtAddress The address of the StableDebtToken that will be assigned to the reserve\r\n   * @param variableDebtAddress The address of the VariableDebtToken that will be assigned to the reserve\r\n   * @param interestRateStrategyAddress The address of the interest rate strategy contract\r\n   */\r\n  function initReserve(\r\n    address asset,\r\n    address aTokenAddress,\r\n    address stableDebtAddress,\r\n    address variableDebtAddress,\r\n    address interestRateStrategyAddress\r\n  ) external;\r\n\r\n  /**\r\n   * @notice Drop a reserve\r\n   * @dev Only callable by the PoolConfigurator contract\r\n   * @param asset The address of the underlying asset of the reserve\r\n   */\r\n  function dropReserve(address asset) external;\r\n\r\n  /**\r\n   * @notice Updates the address of the interest rate strategy contract\r\n   * @dev Only callable by the PoolConfigurator contract\r\n   * @param asset The address of the underlying asset of the reserve\r\n   * @param rateStrategyAddress The address of the interest rate strategy contract\r\n   */\r\n  function setReserveInterestRateStrategyAddress(\r\n    address asset,\r\n    address rateStrategyAddress\r\n  ) external;\r\n\r\n  /**\r\n   * @notice Sets the configuration bitmap of the reserve as a whole\r\n   * @dev Only callable by the PoolConfigurator contract\r\n   * @param asset The address of the underlying asset of the reserve\r\n   * @param configuration The new configuration bitmap\r\n   */\r\n  function setConfiguration(\r\n    address asset,\r\n    DataTypes.ReserveConfigurationMap calldata configuration\r\n  ) external;\r\n\r\n  /**\r\n   * @notice Returns the configuration of the reserve\r\n   * @param asset The address of the underlying asset of the reserve\r\n   * @return The configuration of the reserve\r\n   */\r\n  function getConfiguration(\r\n    address asset\r\n  ) external view returns (DataTypes.ReserveConfigurationMap memory);\r\n\r\n  /**\r\n   * @notice Returns the configuration of the user across all the reserves\r\n   * @param user The user address\r\n   * @return The configuration of the user\r\n   */\r\n  function getUserConfiguration(\r\n    address user\r\n  ) external view returns (DataTypes.UserConfigurationMap memory);\r\n\r\n  /**\r\n   * @notice Returns the normalized income of the reserve\r\n   * @param asset The address of the underlying asset of the reserve\r\n   * @return The reserve's normalized income\r\n   */\r\n  function getReserveNormalizedIncome(address asset) external view returns (uint256);\r\n\r\n  /**\r\n   * @notice Returns the normalized variable debt per unit of asset\r\n   * @dev WARNING: This function is intended to be used primarily by the protocol itself to get a\r\n   * \"dynamic\" variable index based on time, current stored index and virtual rate at the current\r\n   * moment (approx. a borrower would get if opening a position). This means that is always used in\r\n   * combination with variable debt supply/balances.\r\n   * If using this function externally, consider that is possible to have an increasing normalized\r\n   * variable debt that is not equivalent to how the variable debt index would be updated in storage\r\n   * (e.g. only updates with non-zero variable debt supply)\r\n   * @param asset The address of the underlying asset of the reserve\r\n   * @return The reserve normalized variable debt\r\n   */\r\n  function getReserveNormalizedVariableDebt(address asset) external view returns (uint256);\r\n\r\n  /**\r\n   * @notice Returns the state and configuration of the reserve\r\n   * @param asset The address of the underlying asset of the reserve\r\n   * @return The state and configuration data of the reserve\r\n   */\r\n  function getReserveData(address asset) external view returns (DataTypes.ReserveData memory);\r\n\r\n  /**\r\n   * @notice Validates and finalizes an aToken transfer\r\n   * @dev Only callable by the overlying aToken of the `asset`\r\n   * @param asset The address of the underlying asset of the aToken\r\n   * @param from The user from which the aTokens are transferred\r\n   * @param to The user receiving the aTokens\r\n   * @param amount The amount being transferred/withdrawn\r\n   * @param balanceFromBefore The aToken balance of the `from` user before the transfer\r\n   * @param balanceToBefore The aToken balance of the `to` user before the transfer\r\n   */\r\n  function finalizeTransfer(\r\n    address asset,\r\n    address from,\r\n    address to,\r\n    uint256 amount,\r\n    uint256 balanceFromBefore,\r\n    uint256 balanceToBefore\r\n  ) external;\r\n\r\n  /**\r\n   * @notice Returns the list of the underlying assets of all the initialized reserves\r\n   * @dev It does not include dropped reserves\r\n   * @return The addresses of the underlying assets of the initialized reserves\r\n   */\r\n  function getReservesList() external view returns (address[] memory);\r\n\r\n  /**\r\n   * @notice Returns the address of the underlying asset of a reserve by the reserve id as stored in the DataTypes.ReserveData struct\r\n   * @param id The id of the reserve as stored in the DataTypes.ReserveData struct\r\n   * @return The address of the reserve associated with id\r\n   */\r\n  function getReserveAddressById(uint16 id) external view returns (address);\r\n\r\n  /**\r\n   * @notice Returns the PoolAddressesProvider connected to this contract\r\n   * @return The address of the PoolAddressesProvider\r\n   */\r\n  function ADDRESSES_PROVIDER() external view returns (IPoolAddressesProvider);\r\n\r\n  /**\r\n   * @notice Updates the protocol fee on the bridging\r\n   * @param bridgeProtocolFee The part of the premium sent to the protocol treasury\r\n   */\r\n  function updateBridgeProtocolFee(uint256 bridgeProtocolFee) external;\r\n\r\n  /**\r\n   * @notice Updates flash loan premiums. Flash loan premium consists of two parts:\r\n   * - A part is sent to aToken holders as extra, one time accumulated interest\r\n   * - A part is collected by the protocol treasury\r\n   * @dev The total premium is calculated on the total borrowed amount\r\n   * @dev The premium to protocol is calculated on the total premium, being a percentage of `flashLoanPremiumTotal`\r\n   * @dev Only callable by the PoolConfigurator contract\r\n   * @param flashLoanPremiumTotal The total premium, expressed in bps\r\n   * @param flashLoanPremiumToProtocol The part of the premium sent to the protocol treasury, expressed in bps\r\n   */\r\n  function updateFlashloanPremiums(\r\n    uint128 flashLoanPremiumTotal,\r\n    uint128 flashLoanPremiumToProtocol\r\n  ) external;\r\n\r\n  /**\r\n   * @notice Configures a new category for the eMode.\r\n   * @dev In eMode, the protocol allows very high borrowing power to borrow assets of the same category.\r\n   * The category 0 is reserved as it's the default for volatile assets\r\n   * @param id The id of the category\r\n   * @param config The configuration of the category\r\n   */\r\n  function configureEModeCategory(uint8 id, DataTypes.EModeCategory memory config) external;\r\n\r\n  /**\r\n   * @notice Returns the data of an eMode category\r\n   * @param id The id of the category\r\n   * @return The configuration data of the category\r\n   */\r\n  function getEModeCategoryData(uint8 id) external view returns (DataTypes.EModeCategory memory);\r\n\r\n  /**\r\n   * @notice Allows a user to use the protocol in eMode\r\n   * @param categoryId The id of the category\r\n   */\r\n  function setUserEMode(uint8 categoryId) external;\r\n\r\n  /**\r\n   * @notice Returns the eMode the user is using\r\n   * @param user The address of the user\r\n   * @return The eMode id\r\n   */\r\n  function getUserEMode(address user) external view returns (uint256);\r\n\r\n  /**\r\n   * @notice Resets the isolation mode total debt of the given asset to zero\r\n   * @dev It requires the given asset has zero debt ceiling\r\n   * @param asset The address of the underlying asset to reset the isolationModeTotalDebt\r\n   */\r\n  function resetIsolationModeTotalDebt(address asset) external;\r\n\r\n  /**\r\n   * @notice Returns the percentage of available liquidity that can be borrowed at once at stable rate\r\n   * @return The percentage of available liquidity to borrow, expressed in bps\r\n   */\r\n  function MAX_STABLE_RATE_BORROW_SIZE_PERCENT() external view returns (uint256);\r\n\r\n  /**\r\n   * @notice Returns the total fee on flash loans\r\n   * @return The total fee on flashloans\r\n   */\r\n  function FLASHLOAN_PREMIUM_TOTAL() external view returns (uint128);\r\n\r\n  /**\r\n   * @notice Returns the part of the bridge fees sent to protocol\r\n   * @return The bridge fee sent to the protocol treasury\r\n   */\r\n  function BRIDGE_PROTOCOL_FEE() external view returns (uint256);\r\n\r\n  /**\r\n   * @notice Returns the part of the flashloan fees sent to protocol\r\n   * @return The flashloan fee sent to the protocol treasury\r\n   */\r\n  function FLASHLOAN_PREMIUM_TO_PROTOCOL() external view returns (uint128);\r\n\r\n  /**\r\n   * @notice Returns the maximum number of reserves supported to be listed in this Pool\r\n   * @return The maximum number of reserves supported\r\n   */\r\n  function MAX_NUMBER_RESERVES() external view returns (uint16);\r\n\r\n  /**\r\n   * @notice Mints the assets accrued through the reserve factor to the treasury in the form of aTokens\r\n   * @param assets The list of reserves for which the minting needs to be executed\r\n   */\r\n  function mintToTreasury(address[] calldata assets) external;\r\n\r\n  /**\r\n   * @notice Rescue and transfer tokens locked in this contract\r\n   * @param token The address of the token\r\n   * @param to The address of the recipient\r\n   * @param amount The amount of token to transfer\r\n   */\r\n  function rescueTokens(address token, address to, uint256 amount) external;\r\n\r\n  /**\r\n   * @notice Supplies an `amount` of underlying asset into the reserve, receiving in return overlying aTokens.\r\n   * - E.g. User supplies 100 USDC and gets in return 100 aUSDC\r\n   * @dev Deprecated: Use the `supply` function instead\r\n   * @param asset The address of the underlying asset to supply\r\n   * @param amount The amount to be supplied\r\n   * @param onBehalfOf The address that will receive the aTokens, same as msg.sender if the user\r\n   *   wants to receive them on his own wallet, or a different address if the beneficiary of aTokens\r\n   *   is a different wallet\r\n   * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\r\n   *   0 if the action is executed directly by the user, without any middle-man\r\n   */\r\n  function deposit(address asset, uint256 amount, address onBehalfOf, uint16 referralCode) external;\r\n\r\n  function configureReserveBlacklistBitmap(address asset, uint128 reserveBlacklistBitmap) external;\r\n\r\n  function getReserveBorrowable(\r\n    address asset,\r\n    address assetToBorrow\r\n  ) external view returns(bool);\r\n\r\n  function getReserveBitmap(\r\n    address asset\r\n  ) external view returns(uint128);\r\n}\r\n\r\n/**\r\n * @title IInitializableAToken\r\n * @author Aave\r\n * @notice Interface for the initialize function on AToken\r\n */\r\ninterface IInitializableAToken {\r\n  /**\r\n   * @dev Emitted when an aToken is initialized\r\n   * @param underlyingAsset The address of the underlying asset\r\n   * @param pool The address of the associated pool\r\n   * @param treasury The address of the treasury\r\n   * @param incentivesController The address of the incentives controller for this aToken\r\n   * @param aTokenDecimals The decimals of the underlying\r\n   * @param aTokenName The name of the aToken\r\n   * @param aTokenSymbol The symbol of the aToken\r\n   * @param params A set of encoded parameters for additional initialization\r\n   */\r\n  event Initialized(\r\n    address indexed underlyingAsset,\r\n    address indexed pool,\r\n    address treasury,\r\n    address incentivesController,\r\n    uint8 aTokenDecimals,\r\n    string aTokenName,\r\n    string aTokenSymbol,\r\n    bytes params\r\n  );\r\n\r\n  /**\r\n   * @notice Initializes the aToken\r\n   * @param pool The pool contract that is initializing this contract\r\n   * @param treasury The address of the Aave treasury, receiving the fees on this aToken\r\n   * @param underlyingAsset The address of the underlying asset of this aToken (E.g. WETH for aWETH)\r\n   * @param incentivesController The smart contract managing potential incentives distribution\r\n   * @param aTokenDecimals The decimals of the aToken, same as the underlying asset's\r\n   * @param aTokenName The name of the aToken\r\n   * @param aTokenSymbol The symbol of the aToken\r\n   * @param params A set of encoded parameters for additional initialization\r\n   */\r\n  function initialize(\r\n    IPool pool,\r\n    address treasury,\r\n    address underlyingAsset,\r\n    IAaveIncentivesController incentivesController,\r\n    uint8 aTokenDecimals,\r\n    string calldata aTokenName,\r\n    string calldata aTokenSymbol,\r\n    bytes calldata params\r\n  ) external;\r\n}\r\n\r\n/**\r\n * @title IAToken\r\n * @author Aave\r\n * @notice Defines the basic interface for an AToken.\r\n */\r\ninterface IAToken is IERC20, IScaledBalanceToken, IInitializableAToken {\r\n  /**\r\n   * @dev Emitted during the transfer action\r\n   * @param from The user whose tokens are being transferred\r\n   * @param to The recipient\r\n   * @param value The scaled amount being transferred\r\n   * @param index The next liquidity index of the reserve\r\n   */\r\n  event BalanceTransfer(address indexed from, address indexed to, uint256 value, uint256 index);\r\n\r\n  /**\r\n   * @notice Mints `amount` aTokens to `user`\r\n   * @param caller The address performing the mint\r\n   * @param onBehalfOf The address of the user that will receive the minted aTokens\r\n   * @param amount The amount of tokens getting minted\r\n   * @param index The next liquidity index of the reserve\r\n   * @return `true` if the the previous balance of the user was 0\r\n   */\r\n  function mint(\r\n    address caller,\r\n    address onBehalfOf,\r\n    uint256 amount,\r\n    uint256 index\r\n  ) external returns (bool);\r\n\r\n  /**\r\n   * @notice Burns aTokens from `user` and sends the equivalent amount of underlying to `receiverOfUnderlying`\r\n   * @dev In some instances, the mint event could be emitted from a burn transaction\r\n   * if the amount to burn is less than the interest that the user accrued\r\n   * @param from The address from which the aTokens will be burned\r\n   * @param receiverOfUnderlying The address that will receive the underlying\r\n   * @param amount The amount being burned\r\n   * @param index The next liquidity index of the reserve\r\n   */\r\n  function burn(address from, address receiverOfUnderlying, uint256 amount, uint256 index) external;\r\n\r\n  /**\r\n   * @notice Mints aTokens to the reserve treasury\r\n   * @param amount The amount of tokens getting minted\r\n   * @param index The next liquidity index of the reserve\r\n   */\r\n  function mintToTreasury(uint256 amount, uint256 index) external;\r\n\r\n  /**\r\n   * @notice Transfers aTokens in the event of a borrow being liquidated, in case the liquidators reclaims the aToken\r\n   * @param from The address getting liquidated, current owner of the aTokens\r\n   * @param to The recipient\r\n   * @param value The amount of tokens getting transferred\r\n   */\r\n  function transferOnLiquidation(address from, address to, uint256 value) external;\r\n\r\n  /**\r\n   * @notice Transfers the underlying asset to `target`.\r\n   * @dev Used by the Pool to transfer assets in borrow(), withdraw() and flashLoan()\r\n   * @param target The recipient of the underlying\r\n   * @param amount The amount getting transferred\r\n   */\r\n  function transferUnderlyingTo(address target, uint256 amount) external;\r\n\r\n  /**\r\n   * @notice Handles the underlying received by the aToken after the transfer has been completed.\r\n   * @dev The default implementation is empty as with standard ERC20 tokens, nothing needs to be done after the\r\n   * transfer is concluded. However in the future there may be aTokens that allow for example to stake the underlying\r\n   * to receive LM rewards. In that case, `handleRepayment()` would perform the staking of the underlying asset.\r\n   * @param user The user executing the repayment\r\n   * @param onBehalfOf The address of the user who will get his debt reduced/removed\r\n   * @param amount The amount getting repaid\r\n   */\r\n  function handleRepayment(address user, address onBehalfOf, uint256 amount) external;\r\n\r\n  /**\r\n   * @notice Allow passing a signed message to approve spending\r\n   * @dev implements the permit function as for\r\n   * https://github.com/ethereum/EIPs/blob/8a34d644aacf0f9f8f00815307fd7dd5da07655f/EIPS/eip-2612.md\r\n   * @param owner The owner of the funds\r\n   * @param spender The spender\r\n   * @param value The amount\r\n   * @param deadline The deadline timestamp, type(uint256).max for max deadline\r\n   * @param v Signature param\r\n   * @param s Signature param\r\n   * @param r Signature param\r\n   */\r\n  function permit(\r\n    address owner,\r\n    address spender,\r\n    uint256 value,\r\n    uint256 deadline,\r\n    uint8 v,\r\n    bytes32 r,\r\n    bytes32 s\r\n  ) external;\r\n\r\n  /**\r\n   * @notice Returns the address of the underlying asset of this aToken (E.g. WETH for aWETH)\r\n   * @return The address of the underlying asset\r\n   */\r\n  function UNDERLYING_ASSET_ADDRESS() external view returns (address);\r\n\r\n  /**\r\n   * @notice Returns the address of the Aave treasury, receiving the fees on this aToken.\r\n   * @return Address of the Aave treasury\r\n   */\r\n  function RESERVE_TREASURY_ADDRESS() external view returns (address);\r\n\r\n  /**\r\n   * @notice Get the domain separator for the token\r\n   * @dev Return cached value if chainId matches cache, otherwise recomputes separator\r\n   * @return The domain separator of the token at current chain\r\n   */\r\n  function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n\r\n  /**\r\n   * @notice Returns the nonce for owner.\r\n   * @param owner The address of the owner\r\n   * @return The nonce of the owner\r\n   */\r\n  function nonces(address owner) external view returns (uint256);\r\n\r\n  /**\r\n   * @notice Rescue and transfer tokens locked in this contract\r\n   * @param token The address of the token\r\n   * @param to The address of the recipient\r\n   * @param amount The amount of token to transfer\r\n   */\r\n  function rescueTokens(address token, address to, uint256 amount) external;\r\n}\r\n\r\n/**\r\n * @title WadRayMath library\r\n * @author Aave\r\n * @notice Provides functions to perform calculations with Wad and Ray units\r\n * @dev Provides mul and div function for wads (decimal numbers with 18 digits of precision) and rays (decimal numbers\r\n * with 27 digits of precision)\r\n * @dev Operations are rounded. If a value is >=.5, will be rounded up, otherwise rounded down.\r\n */\r\nlibrary WadRayMath {\r\n  // HALF_WAD and HALF_RAY expressed with extended notation as constant with operations are not supported in Yul assembly\r\n  uint256 internal constant WAD = 1e18;\r\n  uint256 internal constant HALF_WAD = 0.5e18;\r\n\r\n  uint256 internal constant RAY = 1e27;\r\n  uint256 internal constant HALF_RAY = 0.5e27;\r\n\r\n  uint256 internal constant WAD_RAY_RATIO = 1e9;\r\n\r\n  /**\r\n   * @dev Multiplies two wad, rounding half up to the nearest wad\r\n   * @dev assembly optimized for improved gas savings, see https://twitter.com/transmissions11/status/1451131036377571328\r\n   * @param a Wad\r\n   * @param b Wad\r\n   * @return c = a*b, in wad\r\n   */\r\n  function wadMul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    // to avoid overflow, a <= (type(uint256).max - HALF_WAD) / b\r\n    assembly {\r\n      if iszero(or(iszero(b), iszero(gt(a, div(sub(not(0), HALF_WAD), b))))) {\r\n        revert(0, 0)\r\n      }\r\n\r\n      c := div(add(mul(a, b), HALF_WAD), WAD)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Divides two wad, rounding half up to the nearest wad\r\n   * @dev assembly optimized for improved gas savings, see https://twitter.com/transmissions11/status/1451131036377571328\r\n   * @param a Wad\r\n   * @param b Wad\r\n   * @return c = a/b, in wad\r\n   */\r\n  function wadDiv(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    // to avoid overflow, a <= (type(uint256).max - halfB) / WAD\r\n    assembly {\r\n      if or(iszero(b), iszero(iszero(gt(a, div(sub(not(0), div(b, 2)), WAD))))) {\r\n        revert(0, 0)\r\n      }\r\n\r\n      c := div(add(mul(a, WAD), div(b, 2)), b)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @notice Multiplies two ray, rounding half up to the nearest ray\r\n   * @dev assembly optimized for improved gas savings, see https://twitter.com/transmissions11/status/1451131036377571328\r\n   * @param a Ray\r\n   * @param b Ray\r\n   * @return c = a raymul b\r\n   */\r\n  function rayMul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    // to avoid overflow, a <= (type(uint256).max - HALF_RAY) / b\r\n    assembly {\r\n      if iszero(or(iszero(b), iszero(gt(a, div(sub(not(0), HALF_RAY), b))))) {\r\n        revert(0, 0)\r\n      }\r\n\r\n      c := div(add(mul(a, b), HALF_RAY), RAY)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @notice Divides two ray, rounding half up to the nearest ray\r\n   * @dev assembly optimized for improved gas savings, see https://twitter.com/transmissions11/status/1451131036377571328\r\n   * @param a Ray\r\n   * @param b Ray\r\n   * @return c = a raydiv b\r\n   */\r\n  function rayDiv(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    // to avoid overflow, a <= (type(uint256).max - halfB) / RAY\r\n    assembly {\r\n      if or(iszero(b), iszero(iszero(gt(a, div(sub(not(0), div(b, 2)), RAY))))) {\r\n        revert(0, 0)\r\n      }\r\n\r\n      c := div(add(mul(a, RAY), div(b, 2)), b)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Casts ray down to wad\r\n   * @dev assembly optimized for improved gas savings, see https://twitter.com/transmissions11/status/1451131036377571328\r\n   * @param a Ray\r\n   * @return b = a converted to wad, rounded half up to the nearest wad\r\n   */\r\n  function rayToWad(uint256 a) internal pure returns (uint256 b) {\r\n    assembly {\r\n      b := div(a, WAD_RAY_RATIO)\r\n      let remainder := mod(a, WAD_RAY_RATIO)\r\n      if iszero(lt(remainder, div(WAD_RAY_RATIO, 2))) {\r\n        b := add(b, 1)\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Converts wad up to ray\r\n   * @dev assembly optimized for improved gas savings, see https://twitter.com/transmissions11/status/1451131036377571328\r\n   * @param a Wad\r\n   * @return b = a converted in ray\r\n   */\r\n  function wadToRay(uint256 a) internal pure returns (uint256 b) {\r\n    // to avoid overflow, b/WAD_RAY_RATIO == a\r\n    assembly {\r\n      b := mul(a, WAD_RAY_RATIO)\r\n\r\n      if iszero(eq(div(b, WAD_RAY_RATIO), a)) {\r\n        revert(0, 0)\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * @title IInitializableDebtToken\r\n * @author Aave\r\n * @notice Interface for the initialize function common between debt tokens\r\n */\r\ninterface IInitializableDebtToken {\r\n  /**\r\n   * @dev Emitted when a debt token is initialized\r\n   * @param underlyingAsset The address of the underlying asset\r\n   * @param pool The address of the associated pool\r\n   * @param incentivesController The address of the incentives controller for this aToken\r\n   * @param debtTokenDecimals The decimals of the debt token\r\n   * @param debtTokenName The name of the debt token\r\n   * @param debtTokenSymbol The symbol of the debt token\r\n   * @param params A set of encoded parameters for additional initialization\r\n   */\r\n  event Initialized(\r\n    address indexed underlyingAsset,\r\n    address indexed pool,\r\n    address incentivesController,\r\n    uint8 debtTokenDecimals,\r\n    string debtTokenName,\r\n    string debtTokenSymbol,\r\n    bytes params\r\n  );\r\n\r\n  /**\r\n   * @notice Initializes the debt token.\r\n   * @param pool The pool contract that is initializing this contract\r\n   * @param underlyingAsset The address of the underlying asset of this aToken (E.g. WETH for aWETH)\r\n   * @param incentivesController The smart contract managing potential incentives distribution\r\n   * @param debtTokenDecimals The decimals of the debtToken, same as the underlying asset's\r\n   * @param debtTokenName The name of the token\r\n   * @param debtTokenSymbol The symbol of the token\r\n   * @param params A set of encoded parameters for additional initialization\r\n   */\r\n  function initialize(\r\n    IPool pool,\r\n    address underlyingAsset,\r\n    IAaveIncentivesController incentivesController,\r\n    uint8 debtTokenDecimals,\r\n    string memory debtTokenName,\r\n    string memory debtTokenSymbol,\r\n    bytes calldata params\r\n  ) external;\r\n}\r\n\r\n/**\r\n * @title IStableDebtToken\r\n * @author Aave\r\n * @notice Defines the interface for the stable debt token\r\n * @dev It does not inherit from IERC20 to save in code size\r\n */\r\ninterface IStableDebtToken is IInitializableDebtToken {\r\n  /**\r\n   * @dev Emitted when new stable debt is minted\r\n   * @param user The address of the user who triggered the minting\r\n   * @param onBehalfOf The recipient of stable debt tokens\r\n   * @param amount The amount minted (user entered amount + balance increase from interest)\r\n   * @param currentBalance The balance of the user based on the previous balance and balance increase from interest\r\n   * @param balanceIncrease The increase in balance since the last action of the user 'onBehalfOf'\r\n   * @param newRate The rate of the debt after the minting\r\n   * @param avgStableRate The next average stable rate after the minting\r\n   * @param newTotalSupply The next total supply of the stable debt token after the action\r\n   */\r\n  event Mint(\r\n    address indexed user,\r\n    address indexed onBehalfOf,\r\n    uint256 amount,\r\n    uint256 currentBalance,\r\n    uint256 balanceIncrease,\r\n    uint256 newRate,\r\n    uint256 avgStableRate,\r\n    uint256 newTotalSupply\r\n  );\r\n\r\n  /**\r\n   * @dev Emitted when new stable debt is burned\r\n   * @param from The address from which the debt will be burned\r\n   * @param amount The amount being burned (user entered amount - balance increase from interest)\r\n   * @param currentBalance The balance of the user based on the previous balance and balance increase from interest\r\n   * @param balanceIncrease The increase in balance since the last action of 'from'\r\n   * @param avgStableRate The next average stable rate after the burning\r\n   * @param newTotalSupply The next total supply of the stable debt token after the action\r\n   */\r\n  event Burn(\r\n    address indexed from,\r\n    uint256 amount,\r\n    uint256 currentBalance,\r\n    uint256 balanceIncrease,\r\n    uint256 avgStableRate,\r\n    uint256 newTotalSupply\r\n  );\r\n\r\n  /**\r\n   * @notice Mints debt token to the `onBehalfOf` address.\r\n   * @dev The resulting rate is the weighted average between the rate of the new debt\r\n   * and the rate of the previous debt\r\n   * @param user The address receiving the borrowed underlying, being the delegatee in case\r\n   * of credit delegate, or same as `onBehalfOf` otherwise\r\n   * @param onBehalfOf The address receiving the debt tokens\r\n   * @param amount The amount of debt tokens to mint\r\n   * @param rate The rate of the debt being minted\r\n   * @return True if it is the first borrow, false otherwise\r\n   * @return The total stable debt\r\n   * @return The average stable borrow rate\r\n   */\r\n  function mint(\r\n    address user,\r\n    address onBehalfOf,\r\n    uint256 amount,\r\n    uint256 rate\r\n  ) external returns (bool, uint256, uint256);\r\n\r\n  /**\r\n   * @notice Burns debt of `user`\r\n   * @dev The resulting rate is the weighted average between the rate of the new debt\r\n   * and the rate of the previous debt\r\n   * @dev In some instances, a burn transaction will emit a mint event\r\n   * if the amount to burn is less than the interest the user earned\r\n   * @param from The address from which the debt will be burned\r\n   * @param amount The amount of debt tokens getting burned\r\n   * @return The total stable debt\r\n   * @return The average stable borrow rate\r\n   */\r\n  function burn(address from, uint256 amount) external returns (uint256, uint256);\r\n\r\n  /**\r\n   * @notice Returns the average rate of all the stable rate loans.\r\n   * @return The average stable rate\r\n   */\r\n  function getAverageStableRate() external view returns (uint256);\r\n\r\n  /**\r\n   * @notice Returns the stable rate of the user debt\r\n   * @param user The address of the user\r\n   * @return The stable rate of the user\r\n   */\r\n  function getUserStableRate(address user) external view returns (uint256);\r\n\r\n  /**\r\n   * @notice Returns the timestamp of the last update of the user\r\n   * @param user The address of the user\r\n   * @return The timestamp\r\n   */\r\n  function getUserLastUpdated(address user) external view returns (uint40);\r\n\r\n  /**\r\n   * @notice Returns the principal, the total supply, the average stable rate and the timestamp for the last update\r\n   * @return The principal\r\n   * @return The total supply\r\n   * @return The average stable rate\r\n   * @return The timestamp of the last update\r\n   */\r\n  function getSupplyData() external view returns (uint256, uint256, uint256, uint40);\r\n\r\n  /**\r\n   * @notice Returns the timestamp of the last update of the total supply\r\n   * @return The timestamp\r\n   */\r\n  function getTotalSupplyLastUpdated() external view returns (uint40);\r\n\r\n  /**\r\n   * @notice Returns the total supply and the average stable rate\r\n   * @return The total supply\r\n   * @return The average rate\r\n   */\r\n  function getTotalSupplyAndAvgRate() external view returns (uint256, uint256);\r\n\r\n  /**\r\n   * @notice Returns the principal debt balance of the user\r\n   * @return The debt balance of the user since the last burn/mint action\r\n   */\r\n  function principalBalanceOf(address user) external view returns (uint256);\r\n\r\n  /**\r\n   * @notice Returns the address of the underlying asset of this stableDebtToken (E.g. WETH for stableDebtWETH)\r\n   * @return The address of the underlying asset\r\n   */\r\n  function UNDERLYING_ASSET_ADDRESS() external view returns (address);\r\n}\r\n\r\n/**\r\n * @title IVariableDebtToken\r\n * @author Aave\r\n * @notice Defines the basic interface for a variable debt token.\r\n */\r\ninterface IVariableDebtToken is IScaledBalanceToken, IInitializableDebtToken {\r\n  /**\r\n   * @notice Mints debt token to the `onBehalfOf` address\r\n   * @param user The address receiving the borrowed underlying, being the delegatee in case\r\n   * of credit delegate, or same as `onBehalfOf` otherwise\r\n   * @param onBehalfOf The address receiving the debt tokens\r\n   * @param amount The amount of debt being minted\r\n   * @param index The variable debt index of the reserve\r\n   * @return True if the previous balance of the user is 0, false otherwise\r\n   * @return The scaled total debt of the reserve\r\n   */\r\n  function mint(\r\n    address user,\r\n    address onBehalfOf,\r\n    uint256 amount,\r\n    uint256 index\r\n  ) external returns (bool, uint256);\r\n\r\n  /**\r\n   * @notice Burns user variable debt\r\n   * @dev In some instances, a burn transaction will emit a mint event\r\n   * if the amount to burn is less than the interest that the user accrued\r\n   * @param from The address from which the debt will be burned\r\n   * @param amount The amount getting burned\r\n   * @param index The variable debt index of the reserve\r\n   * @return The scaled total debt of the reserve\r\n   */\r\n  function burn(address from, uint256 amount, uint256 index) external returns (uint256);\r\n\r\n  /**\r\n   * @notice Returns the address of the underlying asset of this debtToken (E.g. WETH for variableDebtWETH)\r\n   * @return The address of the underlying asset\r\n   */\r\n  function UNDERLYING_ASSET_ADDRESS() external view returns (address);\r\n}\r\n\r\n/**\r\n * @title IReserveInterestRateStrategy\r\n * @author Aave\r\n * @notice Interface for the calculation of the interest rates\r\n */\r\ninterface IReserveInterestRateStrategy {\r\n  /**\r\n   * @notice Calculates the interest rates depending on the reserve's state and configurations\r\n   * @param params The parameters needed to calculate interest rates\r\n   * @return liquidityRate The liquidity rate expressed in rays\r\n   * @return stableBorrowRate The stable borrow rate expressed in rays\r\n   * @return variableBorrowRate The variable borrow rate expressed in rays\r\n   */\r\n  function calculateInterestRates(\r\n    DataTypes.CalculateInterestRatesParams memory params\r\n  ) external view returns (uint256, uint256, uint256);\r\n}\r\n\r\n/**\r\n * @title MathUtils library\r\n * @author Aave\r\n * @notice Provides functions to perform linear and compounded interest calculations\r\n */\r\nlibrary MathUtils {\r\n  using WadRayMath for uint256;\r\n\r\n  /// @dev Ignoring leap years\r\n  uint256 internal constant SECONDS_PER_YEAR = 365 days;\r\n\r\n  /**\r\n   * @dev Function to calculate the interest accumulated using a linear interest rate formula\r\n   * @param rate The interest rate, in ray\r\n   * @param lastUpdateTimestamp The timestamp of the last update of the interest\r\n   * @return The interest rate linearly accumulated during the timeDelta, in ray\r\n   */\r\n  function calculateLinearInterest(\r\n    uint256 rate,\r\n    uint40 lastUpdateTimestamp\r\n  ) internal view returns (uint256) {\r\n    //solium-disable-next-line\r\n    uint256 result = rate * (block.timestamp - uint256(lastUpdateTimestamp));\r\n    unchecked {\r\n      result = result / SECONDS_PER_YEAR;\r\n    }\r\n\r\n    return WadRayMath.RAY + result;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to calculate the interest using a compounded interest rate formula\r\n   * To avoid expensive exponentiation, the calculation is performed using a binomial approximation:\r\n   *\r\n   *  (1+x)^n = 1+n*x+[n/2*(n-1)]*x^2+[n/6*(n-1)*(n-2)*x^3...\r\n   *\r\n   * The approximation slightly underpays liquidity providers and undercharges borrowers, with the advantage of great\r\n   * gas cost reductions. The whitepaper contains reference to the approximation and a table showing the margin of\r\n   * error per different time periods\r\n   *\r\n   * @param rate The interest rate, in ray\r\n   * @param lastUpdateTimestamp The timestamp of the last update of the interest\r\n   * @return The interest rate compounded during the timeDelta, in ray\r\n   */\r\n  function calculateCompoundedInterest(\r\n    uint256 rate,\r\n    uint40 lastUpdateTimestamp,\r\n    uint256 currentTimestamp\r\n  ) internal pure returns (uint256) {\r\n    //solium-disable-next-line\r\n    uint256 exp = currentTimestamp - uint256(lastUpdateTimestamp);\r\n\r\n    if (exp == 0) {\r\n      return WadRayMath.RAY;\r\n    }\r\n\r\n    uint256 expMinusOne;\r\n    uint256 expMinusTwo;\r\n    uint256 basePowerTwo;\r\n    uint256 basePowerThree;\r\n    unchecked {\r\n      expMinusOne = exp - 1;\r\n\r\n      expMinusTwo = exp > 2 ? exp - 2 : 0;\r\n\r\n      basePowerTwo = rate.rayMul(rate) / (SECONDS_PER_YEAR * SECONDS_PER_YEAR);\r\n      basePowerThree = basePowerTwo.rayMul(rate) / SECONDS_PER_YEAR;\r\n    }\r\n\r\n    uint256 secondTerm = exp * expMinusOne * basePowerTwo;\r\n    unchecked {\r\n      secondTerm /= 2;\r\n    }\r\n    uint256 thirdTerm = exp * expMinusOne * expMinusTwo * basePowerThree;\r\n    unchecked {\r\n      thirdTerm /= 6;\r\n    }\r\n\r\n    return WadRayMath.RAY + (rate * exp) / SECONDS_PER_YEAR + secondTerm + thirdTerm;\r\n  }\r\n\r\n  /**\r\n   * @dev Calculates the compounded interest between the timestamp of the last update and the current block timestamp\r\n   * @param rate The interest rate (in ray)\r\n   * @param lastUpdateTimestamp The timestamp from which the interest accumulation needs to be calculated\r\n   * @return The interest rate compounded between lastUpdateTimestamp and current block timestamp, in ray\r\n   */\r\n  function calculateCompoundedInterest(\r\n    uint256 rate,\r\n    uint40 lastUpdateTimestamp\r\n  ) internal view returns (uint256) {\r\n    return calculateCompoundedInterest(rate, lastUpdateTimestamp, block.timestamp);\r\n  }\r\n}\r\n\r\n/**\r\n * @title PercentageMath library\r\n * @author Aave\r\n * @notice Provides functions to perform percentage calculations\r\n * @dev Percentages are defined by default with 2 decimals of precision (100.00). The precision is indicated by PERCENTAGE_FACTOR\r\n * @dev Operations are rounded. If a value is >=.5, will be rounded up, otherwise rounded down.\r\n */\r\nlibrary PercentageMath {\r\n  // Maximum percentage factor (100.00%)\r\n  uint256 internal constant PERCENTAGE_FACTOR = 1e4;\r\n\r\n  // Half percentage factor (50.00%)\r\n  uint256 internal constant HALF_PERCENTAGE_FACTOR = 0.5e4;\r\n\r\n  /**\r\n   * @notice Executes a percentage multiplication\r\n   * @dev assembly optimized for improved gas savings, see https://twitter.com/transmissions11/status/1451131036377571328\r\n   * @param value The value of which the percentage needs to be calculated\r\n   * @param percentage The percentage of the value to be calculated\r\n   * @return result value percentmul percentage\r\n   */\r\n  function percentMul(uint256 value, uint256 percentage) internal pure returns (uint256 result) {\r\n    // to avoid overflow, value <= (type(uint256).max - HALF_PERCENTAGE_FACTOR) / percentage\r\n    assembly {\r\n      if iszero(\r\n        or(\r\n          iszero(percentage),\r\n          iszero(gt(value, div(sub(not(0), HALF_PERCENTAGE_FACTOR), percentage)))\r\n        )\r\n      ) {\r\n        revert(0, 0)\r\n      }\r\n\r\n      result := div(add(mul(value, percentage), HALF_PERCENTAGE_FACTOR), PERCENTAGE_FACTOR)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @notice Executes a percentage division\r\n   * @dev assembly optimized for improved gas savings, see https://twitter.com/transmissions11/status/1451131036377571328\r\n   * @param value The value of which the percentage needs to be calculated\r\n   * @param percentage The percentage of the value to be calculated\r\n   * @return result value percentdiv percentage\r\n   */\r\n  function percentDiv(uint256 value, uint256 percentage) internal pure returns (uint256 result) {\r\n    // to avoid overflow, value <= (type(uint256).max - halfPercentage) / PERCENTAGE_FACTOR\r\n    assembly {\r\n      if or(\r\n        iszero(percentage),\r\n        iszero(iszero(gt(value, div(sub(not(0), div(percentage, 2)), PERCENTAGE_FACTOR))))\r\n      ) {\r\n        revert(0, 0)\r\n      }\r\n\r\n      result := div(add(mul(value, PERCENTAGE_FACTOR), div(percentage, 2)), percentage)\r\n    }\r\n  }\r\n}\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeCast.sol)\r\n\r\n/**\r\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\r\n * checks.\r\n *\r\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\r\n * easily result in undesired exploitation or bugs, since developers usually\r\n * assume that overflows raise errors. `SafeCast` restores this intuition by\r\n * reverting the transaction when such an operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n *\r\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\r\n * all math on `uint256` and `int256` and then downcasting.\r\n */\r\nlibrary SafeCast {\r\n  /**\r\n   * @dev Returns the downcasted uint224 from uint256, reverting on\r\n   * overflow (when the input is greater than largest uint224).\r\n   *\r\n   * Counterpart to Solidity's `uint224` operator.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - input must fit into 224 bits\r\n   */\r\n  function toUint224(uint256 value) internal pure returns (uint224) {\r\n    require(value <= type(uint224).max, \"SafeCast: value doesn't fit in 224 bits\");\r\n    return uint224(value);\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the downcasted uint128 from uint256, reverting on\r\n   * overflow (when the input is greater than largest uint128).\r\n   *\r\n   * Counterpart to Solidity's `uint128` operator.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - input must fit into 128 bits\r\n   */\r\n  function toUint128(uint256 value) internal pure returns (uint128) {\r\n    require(value <= type(uint128).max, \"SafeCast: value doesn't fit in 128 bits\");\r\n    return uint128(value);\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the downcasted uint96 from uint256, reverting on\r\n   * overflow (when the input is greater than largest uint96).\r\n   *\r\n   * Counterpart to Solidity's `uint96` operator.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - input must fit into 96 bits\r\n   */\r\n  function toUint96(uint256 value) internal pure returns (uint96) {\r\n    require(value <= type(uint96).max, \"SafeCast: value doesn't fit in 96 bits\");\r\n    return uint96(value);\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the downcasted uint64 from uint256, reverting on\r\n   * overflow (when the input is greater than largest uint64).\r\n   *\r\n   * Counterpart to Solidity's `uint64` operator.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - input must fit into 64 bits\r\n   */\r\n  function toUint64(uint256 value) internal pure returns (uint64) {\r\n    require(value <= type(uint64).max, \"SafeCast: value doesn't fit in 64 bits\");\r\n    return uint64(value);\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the downcasted uint32 from uint256, reverting on\r\n   * overflow (when the input is greater than largest uint32).\r\n   *\r\n   * Counterpart to Solidity's `uint32` operator.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - input must fit into 32 bits\r\n   */\r\n  function toUint32(uint256 value) internal pure returns (uint32) {\r\n    require(value <= type(uint32).max, \"SafeCast: value doesn't fit in 32 bits\");\r\n    return uint32(value);\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the downcasted uint16 from uint256, reverting on\r\n   * overflow (when the input is greater than largest uint16).\r\n   *\r\n   * Counterpart to Solidity's `uint16` operator.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - input must fit into 16 bits\r\n   */\r\n  function toUint16(uint256 value) internal pure returns (uint16) {\r\n    require(value <= type(uint16).max, \"SafeCast: value doesn't fit in 16 bits\");\r\n    return uint16(value);\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the downcasted uint8 from uint256, reverting on\r\n   * overflow (when the input is greater than largest uint8).\r\n   *\r\n   * Counterpart to Solidity's `uint8` operator.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - input must fit into 8 bits.\r\n   */\r\n  function toUint8(uint256 value) internal pure returns (uint8) {\r\n    require(value <= type(uint8).max, \"SafeCast: value doesn't fit in 8 bits\");\r\n    return uint8(value);\r\n  }\r\n\r\n  /**\r\n   * @dev Converts a signed int256 into an unsigned uint256.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - input must be greater than or equal to 0.\r\n   */\r\n  function toUint256(int256 value) internal pure returns (uint256) {\r\n    require(value >= 0, 'SafeCast: value must be positive');\r\n    return uint256(value);\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the downcasted int128 from int256, reverting on\r\n   * overflow (when the input is less than smallest int128 or\r\n   * greater than largest int128).\r\n   *\r\n   * Counterpart to Solidity's `int128` operator.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - input must fit into 128 bits\r\n   *\r\n   * _Available since v3.1._\r\n   */\r\n  function toInt128(int256 value) internal pure returns (int128) {\r\n    require(\r\n      value >= type(int128).min && value <= type(int128).max,\r\n      \"SafeCast: value doesn't fit in 128 bits\"\r\n    );\r\n    return int128(value);\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the downcasted int64 from int256, reverting on\r\n   * overflow (when the input is less than smallest int64 or\r\n   * greater than largest int64).\r\n   *\r\n   * Counterpart to Solidity's `int64` operator.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - input must fit into 64 bits\r\n   *\r\n   * _Available since v3.1._\r\n   */\r\n  function toInt64(int256 value) internal pure returns (int64) {\r\n    require(\r\n      value >= type(int64).min && value <= type(int64).max,\r\n      \"SafeCast: value doesn't fit in 64 bits\"\r\n    );\r\n    return int64(value);\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the downcasted int32 from int256, reverting on\r\n   * overflow (when the input is less than smallest int32 or\r\n   * greater than largest int32).\r\n   *\r\n   * Counterpart to Solidity's `int32` operator.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - input must fit into 32 bits\r\n   *\r\n   * _Available since v3.1._\r\n   */\r\n  function toInt32(int256 value) internal pure returns (int32) {\r\n    require(\r\n      value >= type(int32).min && value <= type(int32).max,\r\n      \"SafeCast: value doesn't fit in 32 bits\"\r\n    );\r\n    return int32(value);\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the downcasted int16 from int256, reverting on\r\n   * overflow (when the input is less than smallest int16 or\r\n   * greater than largest int16).\r\n   *\r\n   * Counterpart to Solidity's `int16` operator.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - input must fit into 16 bits\r\n   *\r\n   * _Available since v3.1._\r\n   */\r\n  function toInt16(int256 value) internal pure returns (int16) {\r\n    require(\r\n      value >= type(int16).min && value <= type(int16).max,\r\n      \"SafeCast: value doesn't fit in 16 bits\"\r\n    );\r\n    return int16(value);\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the downcasted int8 from int256, reverting on\r\n   * overflow (when the input is less than smallest int8 or\r\n   * greater than largest int8).\r\n   *\r\n   * Counterpart to Solidity's `int8` operator.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - input must fit into 8 bits.\r\n   *\r\n   * _Available since v3.1._\r\n   */\r\n  function toInt8(int256 value) internal pure returns (int8) {\r\n    require(\r\n      value >= type(int8).min && value <= type(int8).max,\r\n      \"SafeCast: value doesn't fit in 8 bits\"\r\n    );\r\n    return int8(value);\r\n  }\r\n\r\n  /**\r\n   * @dev Converts an unsigned uint256 into a signed int256.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - input must be less than or equal to maxInt256.\r\n   */\r\n  function toInt256(uint256 value) internal pure returns (int256) {\r\n    // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\r\n    require(value <= uint256(type(int256).max), \"SafeCast: value doesn't fit in an int256\");\r\n    return int256(value);\r\n  }\r\n}\r\n\r\n/**\r\n * @title ReserveLogic library\r\n * @author Aave\r\n * @notice Implements the logic to update the reserves state\r\n */\r\nlibrary ReserveLogic {\r\n  using WadRayMath for uint256;\r\n  using PercentageMath for uint256;\r\n  using SafeCast for uint256;\r\n  using GPv2SafeERC20 for IERC20;\r\n  using ReserveLogic for DataTypes.ReserveData;\r\n  using ReserveConfiguration for DataTypes.ReserveConfigurationMap;\r\n\r\n  // See `IPool` for descriptions\r\n  event ReserveDataUpdated(\r\n    address indexed reserve,\r\n    uint256 liquidityRate,\r\n    uint256 stableBorrowRate,\r\n    uint256 variableBorrowRate,\r\n    uint256 liquidityIndex,\r\n    uint256 variableBorrowIndex\r\n  );\r\n\r\n  /**\r\n   * @notice Returns the ongoing normalized income for the reserve.\r\n   * @dev A value of 1e27 means there is no income. As time passes, the income is accrued\r\n   * @dev A value of 2*1e27 means for each unit of asset one unit of income has been accrued\r\n   * @param reserve The reserve object\r\n   * @return The normalized income, expressed in ray\r\n   */\r\n  function getNormalizedIncome(\r\n    DataTypes.ReserveData storage reserve\r\n  ) internal view returns (uint256) {\r\n    uint40 timestamp = reserve.lastUpdateTimestamp;\r\n\r\n    //solium-disable-next-line\r\n    if (timestamp == block.timestamp) {\r\n      //if the index was updated in the same block, no need to perform any calculation\r\n      return reserve.liquidityIndex;\r\n    } else {\r\n      return\r\n        MathUtils.calculateLinearInterest(reserve.currentLiquidityRate, timestamp).rayMul(\r\n          reserve.liquidityIndex\r\n        );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @notice Returns the ongoing normalized variable debt for the reserve.\r\n   * @dev A value of 1e27 means there is no debt. As time passes, the debt is accrued\r\n   * @dev A value of 2*1e27 means that for each unit of debt, one unit worth of interest has been accumulated\r\n   * @param reserve The reserve object\r\n   * @return The normalized variable debt, expressed in ray\r\n   */\r\n  function getNormalizedDebt(\r\n    DataTypes.ReserveData storage reserve\r\n  ) internal view returns (uint256) {\r\n    uint40 timestamp = reserve.lastUpdateTimestamp;\r\n\r\n    //solium-disable-next-line\r\n    if (timestamp == block.timestamp) {\r\n      //if the index was updated in the same block, no need to perform any calculation\r\n      return reserve.variableBorrowIndex;\r\n    } else {\r\n      return\r\n        MathUtils.calculateCompoundedInterest(reserve.currentVariableBorrowRate, timestamp).rayMul(\r\n          reserve.variableBorrowIndex\r\n        );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @notice Updates the liquidity cumulative index and the variable borrow index.\r\n   * @param reserve The reserve object\r\n   * @param reserveCache The caching layer for the reserve data\r\n   */\r\n  function updateState(\r\n    DataTypes.ReserveData storage reserve,\r\n    DataTypes.ReserveCache memory reserveCache\r\n  ) internal {\r\n    // If time didn't pass since last stored timestamp, skip state update\r\n    //solium-disable-next-line\r\n    if (reserve.lastUpdateTimestamp == uint40(block.timestamp)) {\r\n      return;\r\n    }\r\n\r\n    _updateIndexes(reserve, reserveCache);\r\n    _accrueToTreasury(reserve, reserveCache);\r\n\r\n    //solium-disable-next-line\r\n    reserve.lastUpdateTimestamp = uint40(block.timestamp);\r\n  }\r\n\r\n  /**\r\n   * @notice Accumulates a predefined amount of asset to the reserve as a fixed, instantaneous income. Used for example\r\n   * to accumulate the flashloan fee to the reserve, and spread it between all the suppliers.\r\n   * @param reserve The reserve object\r\n   * @param totalLiquidity The total liquidity available in the reserve\r\n   * @param amount The amount to accumulate\r\n   * @return The next liquidity index of the reserve\r\n   */\r\n  function cumulateToLiquidityIndex(\r\n    DataTypes.ReserveData storage reserve,\r\n    uint256 totalLiquidity,\r\n    uint256 amount\r\n  ) internal returns (uint256) {\r\n    //next liquidity index is calculated this way: `((amount / totalLiquidity) + 1) * liquidityIndex`\r\n    //division `amount / totalLiquidity` done in ray for precision\r\n    uint256 result = (amount.wadToRay().rayDiv(totalLiquidity.wadToRay()) + WadRayMath.RAY).rayMul(\r\n      reserve.liquidityIndex\r\n    );\r\n    reserve.liquidityIndex = result.toUint128();\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * @notice Initializes a reserve.\r\n   * @param reserve The reserve object\r\n   * @param aTokenAddress The address of the overlying atoken contract\r\n   * @param stableDebtTokenAddress The address of the overlying stable debt token contract\r\n   * @param variableDebtTokenAddress The address of the overlying variable debt token contract\r\n   * @param interestRateStrategyAddress The address of the interest rate strategy contract\r\n   */\r\n  function init(\r\n    DataTypes.ReserveData storage reserve,\r\n    address aTokenAddress,\r\n    address stableDebtTokenAddress,\r\n    address variableDebtTokenAddress,\r\n    address interestRateStrategyAddress\r\n  ) internal {\r\n    require(reserve.aTokenAddress == address(0), Errors.RESERVE_ALREADY_INITIALIZED);\r\n\r\n    reserve.liquidityIndex = uint128(WadRayMath.RAY);\r\n    reserve.variableBorrowIndex = uint128(WadRayMath.RAY);\r\n    reserve.aTokenAddress = aTokenAddress;\r\n    reserve.stableDebtTokenAddress = stableDebtTokenAddress;\r\n    reserve.variableDebtTokenAddress = variableDebtTokenAddress;\r\n    reserve.interestRateStrategyAddress = interestRateStrategyAddress;\r\n  }\r\n\r\n  struct UpdateInterestRatesLocalVars {\r\n    uint256 nextLiquidityRate;\r\n    uint256 nextStableRate;\r\n    uint256 nextVariableRate;\r\n    uint256 totalVariableDebt;\r\n  }\r\n\r\n  /**\r\n   * @notice Updates the reserve current stable borrow rate, the current variable borrow rate and the current liquidity rate.\r\n   * @param reserve The reserve reserve to be updated\r\n   * @param reserveCache The caching layer for the reserve data\r\n   * @param reserveAddress The address of the reserve to be updated\r\n   * @param liquidityAdded The amount of liquidity added to the protocol (supply or repay) in the previous action\r\n   * @param liquidityTaken The amount of liquidity taken from the protocol (redeem or borrow)\r\n   */\r\n  function updateInterestRates(\r\n    DataTypes.ReserveData storage reserve,\r\n    DataTypes.ReserveCache memory reserveCache,\r\n    address reserveAddress,\r\n    uint256 liquidityAdded,\r\n    uint256 liquidityTaken\r\n  ) internal {\r\n    UpdateInterestRatesLocalVars memory vars;\r\n\r\n    vars.totalVariableDebt = reserveCache.nextScaledVariableDebt.rayMul(\r\n      reserveCache.nextVariableBorrowIndex\r\n    );\r\n\r\n    (\r\n      vars.nextLiquidityRate,\r\n      vars.nextStableRate,\r\n      vars.nextVariableRate\r\n    ) = IReserveInterestRateStrategy(reserve.interestRateStrategyAddress).calculateInterestRates(\r\n      DataTypes.CalculateInterestRatesParams({\r\n        unbacked: reserve.unbacked,\r\n        liquidityAdded: liquidityAdded,\r\n        liquidityTaken: liquidityTaken,\r\n        totalStableDebt: reserveCache.nextTotalStableDebt,\r\n        totalVariableDebt: vars.totalVariableDebt,\r\n        averageStableBorrowRate: reserveCache.nextAvgStableBorrowRate,\r\n        reserveFactor: reserveCache.reserveFactor,\r\n        reserve: reserveAddress,\r\n        aToken: reserveCache.aTokenAddress\r\n      })\r\n    );\r\n\r\n    reserve.currentLiquidityRate = vars.nextLiquidityRate.toUint128();\r\n    reserve.currentStableBorrowRate = vars.nextStableRate.toUint128();\r\n    reserve.currentVariableBorrowRate = vars.nextVariableRate.toUint128();\r\n\r\n    emit ReserveDataUpdated(\r\n      reserveAddress,\r\n      vars.nextLiquidityRate,\r\n      vars.nextStableRate,\r\n      vars.nextVariableRate,\r\n      reserveCache.nextLiquidityIndex,\r\n      reserveCache.nextVariableBorrowIndex\r\n    );\r\n  }\r\n\r\n  struct AccrueToTreasuryLocalVars {\r\n    uint256 prevTotalStableDebt;\r\n    uint256 prevTotalVariableDebt;\r\n    uint256 currTotalVariableDebt;\r\n    uint256 cumulatedStableInterest;\r\n    uint256 totalDebtAccrued;\r\n    uint256 amountToMint;\r\n  }\r\n\r\n  /**\r\n   * @notice Mints part of the repaid interest to the reserve treasury as a function of the reserve factor for the\r\n   * specific asset.\r\n   * @param reserve The reserve to be updated\r\n   * @param reserveCache The caching layer for the reserve data\r\n   */\r\n  function _accrueToTreasury(\r\n    DataTypes.ReserveData storage reserve,\r\n    DataTypes.ReserveCache memory reserveCache\r\n  ) internal {\r\n    AccrueToTreasuryLocalVars memory vars;\r\n\r\n    if (reserveCache.reserveFactor == 0) {\r\n      return;\r\n    }\r\n\r\n    //calculate the total variable debt at moment of the last interaction\r\n    vars.prevTotalVariableDebt = reserveCache.currScaledVariableDebt.rayMul(\r\n      reserveCache.currVariableBorrowIndex\r\n    );\r\n\r\n    //calculate the new total variable debt after accumulation of the interest on the index\r\n    vars.currTotalVariableDebt = reserveCache.currScaledVariableDebt.rayMul(\r\n      reserveCache.nextVariableBorrowIndex\r\n    );\r\n\r\n    //calculate the stable debt until the last timestamp update\r\n    vars.cumulatedStableInterest = MathUtils.calculateCompoundedInterest(\r\n      reserveCache.currAvgStableBorrowRate,\r\n      reserveCache.stableDebtLastUpdateTimestamp,\r\n      reserveCache.reserveLastUpdateTimestamp\r\n    );\r\n\r\n    vars.prevTotalStableDebt = reserveCache.currPrincipalStableDebt.rayMul(\r\n      vars.cumulatedStableInterest\r\n    );\r\n\r\n    //debt accrued is the sum of the current debt minus the sum of the debt at the last update\r\n    vars.totalDebtAccrued =\r\n      vars.currTotalVariableDebt +\r\n      reserveCache.currTotalStableDebt -\r\n      vars.prevTotalVariableDebt -\r\n      vars.prevTotalStableDebt;\r\n\r\n    vars.amountToMint = vars.totalDebtAccrued.percentMul(reserveCache.reserveFactor);\r\n\r\n    if (vars.amountToMint != 0) {\r\n      reserve.accruedToTreasury += vars\r\n        .amountToMint\r\n        .rayDiv(reserveCache.nextLiquidityIndex)\r\n        .toUint128();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @notice Updates the reserve indexes and the timestamp of the update.\r\n   * @param reserve The reserve reserve to be updated\r\n   * @param reserveCache The cache layer holding the cached protocol data\r\n   */\r\n  function _updateIndexes(\r\n    DataTypes.ReserveData storage reserve,\r\n    DataTypes.ReserveCache memory reserveCache\r\n  ) internal {\r\n    // Only cumulating on the supply side if there is any income being produced\r\n    // The case of Reserve Factor 100% is not a problem (currentLiquidityRate == 0),\r\n    // as liquidity index should not be updated\r\n    if (reserveCache.currLiquidityRate != 0) {\r\n      uint256 cumulatedLiquidityInterest = MathUtils.calculateLinearInterest(\r\n        reserveCache.currLiquidityRate,\r\n        reserveCache.reserveLastUpdateTimestamp\r\n      );\r\n      reserveCache.nextLiquidityIndex = cumulatedLiquidityInterest.rayMul(\r\n        reserveCache.currLiquidityIndex\r\n      );\r\n      reserve.liquidityIndex = reserveCache.nextLiquidityIndex.toUint128();\r\n    }\r\n\r\n    // Variable borrow index only gets updated if there is any variable debt.\r\n    // reserveCache.currVariableBorrowRate != 0 is not a correct validation,\r\n    // because a positive base variable rate can be stored on\r\n    // reserveCache.currVariableBorrowRate, but the index should not increase\r\n    if (reserveCache.currScaledVariableDebt != 0) {\r\n      uint256 cumulatedVariableBorrowInterest = MathUtils.calculateCompoundedInterest(\r\n        reserveCache.currVariableBorrowRate,\r\n        reserveCache.reserveLastUpdateTimestamp\r\n      );\r\n      reserveCache.nextVariableBorrowIndex = cumulatedVariableBorrowInterest.rayMul(\r\n        reserveCache.currVariableBorrowIndex\r\n      );\r\n      reserve.variableBorrowIndex = reserveCache.nextVariableBorrowIndex.toUint128();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @notice Creates a cache object to avoid repeated storage reads and external contract calls when updating state and\r\n   * interest rates.\r\n   * @param reserve The reserve object for which the cache will be filled\r\n   * @return The cache object\r\n   */\r\n  function cache(\r\n    DataTypes.ReserveData storage reserve\r\n  ) internal view returns (DataTypes.ReserveCache memory) {\r\n    DataTypes.ReserveCache memory reserveCache;\r\n\r\n    reserveCache.reserveConfiguration = reserve.configuration;\r\n    reserveCache.reserveFactor = reserveCache.reserveConfiguration.getReserveFactor();\r\n    reserveCache.currLiquidityIndex = reserveCache.nextLiquidityIndex = reserve.liquidityIndex;\r\n    reserveCache.currVariableBorrowIndex = reserveCache.nextVariableBorrowIndex = reserve\r\n      .variableBorrowIndex;\r\n    reserveCache.currLiquidityRate = reserve.currentLiquidityRate;\r\n    reserveCache.currVariableBorrowRate = reserve.currentVariableBorrowRate;\r\n\r\n    reserveCache.aTokenAddress = reserve.aTokenAddress;\r\n    reserveCache.stableDebtTokenAddress = reserve.stableDebtTokenAddress;\r\n    reserveCache.variableDebtTokenAddress = reserve.variableDebtTokenAddress;\r\n\r\n    reserveCache.reserveLastUpdateTimestamp = reserve.lastUpdateTimestamp;\r\n\r\n    reserveCache.currScaledVariableDebt = reserveCache.nextScaledVariableDebt = IVariableDebtToken(\r\n      reserveCache.variableDebtTokenAddress\r\n    ).scaledTotalSupply();\r\n\r\n    (\r\n      reserveCache.currPrincipalStableDebt,\r\n      reserveCache.currTotalStableDebt,\r\n      reserveCache.currAvgStableBorrowRate,\r\n      reserveCache.stableDebtLastUpdateTimestamp\r\n    ) = IStableDebtToken(reserveCache.stableDebtTokenAddress).getSupplyData();\r\n\r\n    // by default the actions are considered as not affecting the debt balances.\r\n    // if the action involves mint/burn of debt, the cache needs to be updated\r\n    reserveCache.nextTotalStableDebt = reserveCache.currTotalStableDebt;\r\n    reserveCache.nextAvgStableBorrowRate = reserveCache.currAvgStableBorrowRate;\r\n\r\n    return reserveCache;\r\n  }\r\n}\r\n\r\n/**\r\n * @title IPriceOracleGetter\r\n * @author Aave\r\n * @notice Interface for the Aave price oracle.\r\n */\r\ninterface IPriceOracleGetter {\r\n  /**\r\n   * @notice Returns the base currency address\r\n   * @dev Address 0x0 is reserved for USD as base currency.\r\n   * @return Returns the base currency address.\r\n   */\r\n  function BASE_CURRENCY() external view returns (address);\r\n\r\n  /**\r\n   * @notice Returns the base currency unit\r\n   * @dev 1 ether for ETH, 1e8 for USD.\r\n   * @return Returns the base currency unit.\r\n   */\r\n  function BASE_CURRENCY_UNIT() external view returns (uint256);\r\n\r\n  /**\r\n   * @notice Returns the asset price in the base currency\r\n   * @param asset The address of the asset\r\n   * @return The price of the asset\r\n   */\r\n  function getAssetPrice(address asset) external view returns (uint256);\r\n}\r\n\r\n/**\r\n * @title IPriceOracleSentinel\r\n * @author Aave\r\n * @notice Defines the basic interface for the PriceOracleSentinel\r\n */\r\ninterface IPriceOracleSentinel {\r\n  /**\r\n   * @dev Emitted after the sequencer oracle is updated\r\n   * @param newSequencerOracle The new sequencer oracle\r\n   */\r\n  event SequencerOracleUpdated(address newSequencerOracle);\r\n\r\n  /**\r\n   * @dev Emitted after the grace period is updated\r\n   * @param newGracePeriod The new grace period value\r\n   */\r\n  event GracePeriodUpdated(uint256 newGracePeriod);\r\n\r\n  /**\r\n   * @notice Returns the PoolAddressesProvider\r\n   * @return The address of the PoolAddressesProvider contract\r\n   */\r\n  function ADDRESSES_PROVIDER() external view returns (IPoolAddressesProvider);\r\n\r\n  /**\r\n   * @notice Returns true if the `borrow` operation is allowed.\r\n   * @dev Operation not allowed when PriceOracle is down or grace period not passed.\r\n   * @return True if the `borrow` operation is allowed, false otherwise.\r\n   */\r\n  function isBorrowAllowed() external view returns (bool);\r\n\r\n  /**\r\n   * @notice Returns true if the `liquidation` operation is allowed.\r\n   * @dev Operation not allowed when PriceOracle is down or grace period not passed.\r\n   * @return True if the `liquidation` operation is allowed, false otherwise.\r\n   */\r\n  function isLiquidationAllowed() external view returns (bool);\r\n\r\n  /**\r\n   * @notice Updates the address of the sequencer oracle\r\n   * @param newSequencerOracle The address of the new Sequencer Oracle to use\r\n   */\r\n  function setSequencerOracle(address newSequencerOracle) external;\r\n\r\n  /**\r\n   * @notice Updates the duration of the grace period\r\n   * @param newGracePeriod The value of the new grace period duration\r\n   */\r\n  function setGracePeriod(uint256 newGracePeriod) external;\r\n\r\n  /**\r\n   * @notice Returns the SequencerOracle\r\n   * @return The address of the sequencer oracle contract\r\n   */\r\n  function getSequencerOracle() external view returns (address);\r\n\r\n  /**\r\n   * @notice Returns the grace period\r\n   * @return The duration of the grace period\r\n   */\r\n  function getGracePeriod() external view returns (uint256);\r\n}\r\n\r\n/**\r\n * @dev External interface of AccessControl declared to support ERC165 detection.\r\n */\r\ninterface IAccessControl {\r\n  /**\r\n   * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\r\n   *\r\n   * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\r\n   * {RoleAdminChanged} not being emitted signaling this.\r\n   *\r\n   * _Available since v3.1._\r\n   */\r\n  event RoleAdminChanged(\r\n    bytes32 indexed role,\r\n    bytes32 indexed previousAdminRole,\r\n    bytes32 indexed newAdminRole\r\n  );\r\n\r\n  /**\r\n   * @dev Emitted when `account` is granted `role`.\r\n   *\r\n   * `sender` is the account that originated the contract call, an admin role\r\n   * bearer except when using {AccessControl-_setupRole}.\r\n   */\r\n  event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\r\n\r\n  /**\r\n   * @dev Emitted when `account` is revoked `role`.\r\n   *\r\n   * `sender` is the account that originated the contract call:\r\n   *   - if using `revokeRole`, it is the admin role bearer\r\n   *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\r\n   */\r\n  event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\r\n\r\n  /**\r\n   * @dev Returns `true` if `account` has been granted `role`.\r\n   */\r\n  function hasRole(bytes32 role, address account) external view returns (bool);\r\n\r\n  /**\r\n   * @dev Returns the admin role that controls `role`. See {grantRole} and\r\n   * {revokeRole}.\r\n   *\r\n   * To change a role's admin, use {AccessControl-_setRoleAdmin}.\r\n   */\r\n  function getRoleAdmin(bytes32 role) external view returns (bytes32);\r\n\r\n  /**\r\n   * @dev Grants `role` to `account`.\r\n   *\r\n   * If `account` had not been already granted `role`, emits a {RoleGranted}\r\n   * event.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - the caller must have ``role``'s admin role.\r\n   */\r\n  function grantRole(bytes32 role, address account) external;\r\n\r\n  /**\r\n   * @dev Revokes `role` from `account`.\r\n   *\r\n   * If `account` had been granted `role`, emits a {RoleRevoked} event.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - the caller must have ``role``'s admin role.\r\n   */\r\n  function revokeRole(bytes32 role, address account) external;\r\n\r\n  /**\r\n   * @dev Revokes `role` from the calling account.\r\n   *\r\n   * Roles are often managed via {grantRole} and {revokeRole}: this function's\r\n   * purpose is to provide a mechanism for accounts to lose their privileges\r\n   * if they are compromised (such as when a trusted device is misplaced).\r\n   *\r\n   * If the calling account had been granted `role`, emits a {RoleRevoked}\r\n   * event.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - the caller must be `account`.\r\n   */\r\n  function renounceRole(bytes32 role, address account) external;\r\n}\r\n\r\n/**\r\n * @title UserConfiguration library\r\n * @author Aave\r\n * @notice Implements the bitmap logic to handle the user configuration\r\n */\r\nlibrary UserConfiguration {\r\n  using ReserveConfiguration for DataTypes.ReserveConfigurationMap;\r\n\r\n  uint256 internal constant BORROWING_MASK =\r\n    0x5555555555555555555555555555555555555555555555555555555555555555;\r\n  uint256 internal constant COLLATERAL_MASK =\r\n    0xAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;\r\n\r\n  /**\r\n   * @notice Sets if the user is borrowing the reserve identified by reserveIndex\r\n   * @param self The configuration object\r\n   * @param reserveIndex The index of the reserve in the bitmap\r\n   * @param borrowing True if the user is borrowing the reserve, false otherwise\r\n   */\r\n  function setBorrowing(\r\n    DataTypes.UserConfigurationMap storage self,\r\n    uint256 reserveIndex,\r\n    bool borrowing\r\n  ) internal {\r\n    unchecked {\r\n      require(reserveIndex < ReserveConfiguration.MAX_RESERVES_COUNT, Errors.INVALID_RESERVE_INDEX);\r\n      uint256 bit = 1 << (reserveIndex << 1);\r\n      if (borrowing) {\r\n        self.data |= bit;\r\n      } else {\r\n        self.data &= ~bit;\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @notice Sets if the user is using as collateral the reserve identified by reserveIndex\r\n   * @param self The configuration object\r\n   * @param reserveIndex The index of the reserve in the bitmap\r\n   * @param usingAsCollateral True if the user is using the reserve as collateral, false otherwise\r\n   */\r\n  function setUsingAsCollateral(\r\n    DataTypes.UserConfigurationMap storage self,\r\n    uint256 reserveIndex,\r\n    bool usingAsCollateral\r\n  ) internal {\r\n    unchecked {\r\n      require(reserveIndex < ReserveConfiguration.MAX_RESERVES_COUNT, Errors.INVALID_RESERVE_INDEX);\r\n      uint256 bit = 1 << ((reserveIndex << 1) + 1);\r\n      if (usingAsCollateral) {\r\n        self.data |= bit;\r\n      } else {\r\n        self.data &= ~bit;\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @notice Returns if a user has been using the reserve for borrowing or as collateral\r\n   * @param self The configuration object\r\n   * @param reserveIndex The index of the reserve in the bitmap\r\n   * @return True if the user has been using a reserve for borrowing or as collateral, false otherwise\r\n   */\r\n  function isUsingAsCollateralOrBorrowing(\r\n    DataTypes.UserConfigurationMap memory self,\r\n    uint256 reserveIndex\r\n  ) internal pure returns (bool) {\r\n    unchecked {\r\n      require(reserveIndex < ReserveConfiguration.MAX_RESERVES_COUNT, Errors.INVALID_RESERVE_INDEX);\r\n      return (self.data >> (reserveIndex << 1)) & 3 != 0;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @notice Validate a user has been using the reserve for borrowing\r\n   * @param self The configuration object\r\n   * @param reserveIndex The index of the reserve in the bitmap\r\n   * @return True if the user has been using a reserve for borrowing, false otherwise\r\n   */\r\n  function isBorrowing(\r\n    DataTypes.UserConfigurationMap memory self,\r\n    uint256 reserveIndex\r\n  ) internal pure returns (bool) {\r\n    unchecked {\r\n      require(reserveIndex < ReserveConfiguration.MAX_RESERVES_COUNT, Errors.INVALID_RESERVE_INDEX);\r\n      return (self.data >> (reserveIndex << 1)) & 1 != 0;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @notice Validate a user has been using the reserve as collateral\r\n   * @param self The configuration object\r\n   * @param reserveIndex The index of the reserve in the bitmap\r\n   * @return True if the user has been using a reserve as collateral, false otherwise\r\n   */\r\n  function isUsingAsCollateral(\r\n    DataTypes.UserConfigurationMap memory self,\r\n    uint256 reserveIndex\r\n  ) internal pure returns (bool) {\r\n    unchecked {\r\n      require(reserveIndex < ReserveConfiguration.MAX_RESERVES_COUNT, Errors.INVALID_RESERVE_INDEX);\r\n      return (self.data >> ((reserveIndex << 1) + 1)) & 1 != 0;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @notice Checks if a user has been supplying only one reserve as collateral\r\n   * @dev this uses a simple trick - if a number is a power of two (only one bit set) then n & (n - 1) == 0\r\n   * @param self The configuration object\r\n   * @return True if the user has been supplying as collateral one reserve, false otherwise\r\n   */\r\n  function isUsingAsCollateralOne(\r\n    DataTypes.UserConfigurationMap memory self\r\n  ) internal pure returns (bool) {\r\n    uint256 collateralData = self.data & COLLATERAL_MASK;\r\n    return collateralData != 0 && (collateralData & (collateralData - 1) == 0);\r\n  }\r\n\r\n  /**\r\n   * @notice Checks if a user has been supplying any reserve as collateral\r\n   * @param self The configuration object\r\n   * @return True if the user has been supplying as collateral any reserve, false otherwise\r\n   */\r\n  function isUsingAsCollateralAny(\r\n    DataTypes.UserConfigurationMap memory self\r\n  ) internal pure returns (bool) {\r\n    return self.data & COLLATERAL_MASK != 0;\r\n  }\r\n\r\n  /**\r\n   * @notice Checks if a user has been borrowing only one asset\r\n   * @dev this uses a simple trick - if a number is a power of two (only one bit set) then n & (n - 1) == 0\r\n   * @param self The configuration object\r\n   * @return True if the user has been supplying as collateral one reserve, false otherwise\r\n   */\r\n  function isBorrowingOne(DataTypes.UserConfigurationMap memory self) internal pure returns (bool) {\r\n    uint256 borrowingData = self.data & BORROWING_MASK;\r\n    return borrowingData != 0 && (borrowingData & (borrowingData - 1) == 0);\r\n  }\r\n\r\n  /**\r\n   * @notice Checks if a user has been borrowing from any reserve\r\n   * @param self The configuration object\r\n   * @return True if the user has been borrowing any reserve, false otherwise\r\n   */\r\n  function isBorrowingAny(DataTypes.UserConfigurationMap memory self) internal pure returns (bool) {\r\n    return self.data & BORROWING_MASK != 0;\r\n  }\r\n\r\n  /**\r\n   * @notice Checks if a user has not been using any reserve for borrowing or supply\r\n   * @param self The configuration object\r\n   * @return True if the user has not been borrowing or supplying any reserve, false otherwise\r\n   */\r\n  function isEmpty(DataTypes.UserConfigurationMap memory self) internal pure returns (bool) {\r\n    return self.data == 0;\r\n  }\r\n\r\n  /**\r\n   * @notice Returns the Isolation Mode state of the user\r\n   * @param self The configuration object\r\n   * @param reservesData The state of all the reserves\r\n   * @param reservesList The addresses of all the active reserves\r\n   * @return True if the user is in isolation mode, false otherwise\r\n   * @return The address of the only asset used as collateral\r\n   * @return The debt ceiling of the reserve\r\n   */\r\n  function getIsolationModeState(\r\n    DataTypes.UserConfigurationMap memory self,\r\n    mapping(address => DataTypes.ReserveData) storage reservesData,\r\n    mapping(uint256 => address) storage reservesList\r\n  ) internal view returns (bool, address, uint256) {\r\n    if (isUsingAsCollateralOne(self)) {\r\n      uint256 assetId = _getFirstAssetIdByMask(self, COLLATERAL_MASK);\r\n\r\n      address assetAddress = reservesList[assetId];\r\n      uint256 ceiling = reservesData[assetAddress].configuration.getDebtCeiling();\r\n      if (ceiling != 0) {\r\n        return (true, assetAddress, ceiling);\r\n      }\r\n    }\r\n    return (false, address(0), 0);\r\n  }\r\n\r\n  /**\r\n   * @notice Returns the siloed borrowing state for the user\r\n   * @param self The configuration object\r\n   * @param reservesData The data of all the reserves\r\n   * @param reservesList The reserve list\r\n   * @return True if the user has borrowed a siloed asset, false otherwise\r\n   * @return The address of the only borrowed asset\r\n   */\r\n  function getSiloedBorrowingState(\r\n    DataTypes.UserConfigurationMap memory self,\r\n    mapping(address => DataTypes.ReserveData) storage reservesData,\r\n    mapping(uint256 => address) storage reservesList\r\n  ) internal view returns (bool, address) {\r\n    if (isBorrowingOne(self)) {\r\n      uint256 assetId = _getFirstAssetIdByMask(self, BORROWING_MASK);\r\n      address assetAddress = reservesList[assetId];\r\n      if (reservesData[assetAddress].configuration.getSiloedBorrowing()) {\r\n        return (true, assetAddress);\r\n      }\r\n    }\r\n\r\n    return (false, address(0));\r\n  }\r\n\r\n  /**\r\n   * @notice Returns the address of the first asset flagged in the bitmap given the corresponding bitmask\r\n   * @param self The configuration object\r\n   * @return The index of the first asset flagged in the bitmap once the corresponding mask is applied\r\n   */\r\n  function _getFirstAssetIdByMask(\r\n    DataTypes.UserConfigurationMap memory self,\r\n    uint256 mask\r\n  ) internal pure returns (uint256) {\r\n    unchecked {\r\n      uint256 bitmapData = self.data & mask;\r\n      uint256 firstAssetPosition = bitmapData & ~(bitmapData - 1);\r\n      uint256 id;\r\n\r\n      while ((firstAssetPosition >>= 2) != 0) {\r\n        id += 1;\r\n      }\r\n      return id;\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * @title Helpers library\r\n * @author Aave\r\n */\r\nlibrary Helpers {\r\n  /**\r\n   * @notice Fetches the user current stable and variable debt balances\r\n   * @param user The user address\r\n   * @param reserveCache The reserve cache data object\r\n   * @return The stable debt balance\r\n   * @return The variable debt balance\r\n   */\r\n  function getUserCurrentDebt(\r\n    address user,\r\n    DataTypes.ReserveCache memory reserveCache\r\n  ) internal view returns (uint256, uint256) {\r\n    return (\r\n      IERC20(reserveCache.stableDebtTokenAddress).balanceOf(user),\r\n      IERC20(reserveCache.variableDebtTokenAddress).balanceOf(user)\r\n    );\r\n  }\r\n}\r\n\r\n/// @title BitMath\r\n/// @dev This library provides functionality for computing bit properties of an unsigned integer\r\n/// from Uniswap https://github.com/Uniswap/v3-core/blob/main/contracts/libraries/BitMath.sol\r\nlibrary BitMath {\r\n    /// @notice Returns the index of the most significant bit of the number,\r\n    ///     where the least significant bit is at index 0 and the most significant bit is at index 255\r\n    /// @dev The function satisfies the property:\r\n    ///     x >= 2**mostSignificantBit(x) and x < 2**(mostSignificantBit(x)+1)\r\n    /// @param x the value for which to compute the most significant bit, must be greater than 0\r\n    /// @return r the index of the most significant bit\r\n    function mostSignificantBit(uint256 x) internal pure returns (uint8 r) {\r\n        require(x > 0);\r\n\r\n        if (x >= 0x100000000000000000000000000000000) {\r\n            x >>= 128;\r\n            r += 128;\r\n        }\r\n        if (x >= 0x10000000000000000) {\r\n            x >>= 64;\r\n            r += 64;\r\n        }\r\n        if (x >= 0x100000000) {\r\n            x >>= 32;\r\n            r += 32;\r\n        }\r\n        if (x >= 0x10000) {\r\n            x >>= 16;\r\n            r += 16;\r\n        }\r\n        if (x >= 0x100) {\r\n            x >>= 8;\r\n            r += 8;\r\n        }\r\n        if (x >= 0x10) {\r\n            x >>= 4;\r\n            r += 4;\r\n        }\r\n        if (x >= 0x4) {\r\n            x >>= 2;\r\n            r += 2;\r\n        }\r\n        if (x >= 0x2) r += 1;\r\n    }\r\n\r\n}\r\nlibrary BitmapLogic {\r\n  using ReserveConfiguration for DataTypes.ReserveConfigurationMap;\r\n  using UserConfiguration for DataTypes.UserConfigurationMap;\r\n    /**\r\n    * @notice Check if an asset can be borrowable by a user\r\n    * @param reservesData The reservesData \r\n    * @param reservesList The reservesList\r\n    * @param assetToBorrowReserveIndex reserveIndex of the asset to borrow\r\n    * @param userConfig the userConfig to loop for the enabled collateral\r\n    * @param reservesCount the number of reserves (including dropped reserve)\r\n    * @return True if the the borrow works, False if any collateral is not allowed for such borrow\r\n    */\r\n    function isAssetBorrowable(\r\n        mapping(address => DataTypes.ReserveData) storage reservesData,\r\n        mapping(uint256 => address) storage reservesList,\r\n        uint16 assetToBorrowReserveIndex,\r\n        DataTypes.UserConfigurationMap memory userConfig,\r\n        uint256 reservesCount\r\n    ) internal view returns (bool) {\r\n        // if user has no collateral\r\n        if (userConfig.isEmpty()) {\r\n        return false;\r\n        }\r\n        uint16 i;\r\n        // the bit to check\r\n        uint256 mask = 1 << assetToBorrowReserveIndex;\r\n        // check if the bitmap for the to-borrow asset is 0 or not \r\n        // for each enabled collateral\r\n        while (i < reservesCount) {\r\n            if (!userConfig.isUsingAsCollateral(i)) {\r\n            unchecked {\r\n                ++i;\r\n            }\r\n            continue;\r\n            }\r\n            // dropped reserve would have address 0\r\n            address currentReserveAddress = reservesList[i];\r\n            if (currentReserveAddress == address(0)) {\r\n            unchecked {\r\n                ++i;\r\n            }\r\n            continue;\r\n            }\r\n            uint128 bitmap = reservesData[currentReserveAddress].blacklistBitmap;\r\n            // if the bit is set, it means the reserve is not allowed to borrow this asset\r\n            if (bitmap & mask > 0) {\r\n                return false;\r\n            }\r\n            unchecked {\r\n            ++i;\r\n            }\r\n        }\r\n    return true;\r\n    }\r\n\r\n    function isAssetCollateralizable(\r\n        mapping(address => DataTypes.ReserveData) storage reservesData,\r\n        mapping(uint256 => address) storage reservesList,\r\n        DataTypes.UserConfigurationMap memory userConfig,\r\n        address asset\r\n    ) internal view returns(bool) {\r\n        // if user has no borrowing\r\n        if (!userConfig.isBorrowingAny()) {\r\n            return true;\r\n        }\r\n        uint128 blacklistBitmap = reservesData[asset].blacklistBitmap;\r\n        if (blacklistBitmap == 0) {\r\n            return true;\r\n        }\r\n        // we loop through the bitmap, but only from the most signaficant bit\r\n        uint16 mostSignaficantBit = uint16(BitMath.mostSignificantBit(blacklistBitmap));\r\n        uint16 i;\r\n        // check if the bitmap for the to-borrow asset is 0 or not \r\n        // for each enabled collateral\r\n        while (i <= mostSignaficantBit) {\r\n            if (!userConfig.isBorrowing(i)) {\r\n            unchecked {\r\n                ++i;\r\n            }\r\n            continue;\r\n            }\r\n            // if the bit on the bitmap of this borrowing is set, it means the reserve is not allowed to be used as collateral\r\n            if (blacklistBitmap & (1 << i) > 0) {\r\n                return false;\r\n            }\r\n            unchecked {\r\n            ++i;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n}\r\n\r\n/**\r\n * @title EModeLogic library\r\n * @author Aave\r\n * @notice Implements the base logic for all the actions related to the eMode\r\n */\r\nlibrary EModeLogic {\r\n  using ReserveLogic for DataTypes.ReserveCache;\r\n  using ReserveLogic for DataTypes.ReserveData;\r\n  using GPv2SafeERC20 for IERC20;\r\n  using UserConfiguration for DataTypes.UserConfigurationMap;\r\n  using WadRayMath for uint256;\r\n  using PercentageMath for uint256;\r\n\r\n  // See `IPool` for descriptions\r\n  event UserEModeSet(address indexed user, uint8 categoryId);\r\n\r\n  /**\r\n   * @notice Updates the user efficiency mode category\r\n   * @dev Will revert if user is borrowing non-compatible asset or change will drop HF < HEALTH_FACTOR_LIQUIDATION_THRESHOLD\r\n   * @dev Emits the `UserEModeSet` event\r\n   * @param reservesData The state of all the reserves\r\n   * @param reservesList The addresses of all the active reserves\r\n   * @param eModeCategories The configuration of all the efficiency mode categories\r\n   * @param usersEModeCategory The state of all users efficiency mode category\r\n   * @param userConfig The user configuration mapping that tracks the supplied/borrowed assets\r\n   * @param params The additional parameters needed to execute the setUserEMode function\r\n   */\r\n  function executeSetUserEMode(\r\n    mapping(address => DataTypes.ReserveData) storage reservesData,\r\n    mapping(uint256 => address) storage reservesList,\r\n    mapping(uint8 => DataTypes.EModeCategory) storage eModeCategories,\r\n    mapping(address => uint8) storage usersEModeCategory,\r\n    DataTypes.UserConfigurationMap storage userConfig,\r\n    DataTypes.ExecuteSetUserEModeParams memory params\r\n  ) external {\r\n    ValidationLogic.validateSetUserEMode(\r\n      reservesData,\r\n      reservesList,\r\n      eModeCategories,\r\n      userConfig,\r\n      params.reservesCount,\r\n      params.categoryId\r\n    );\r\n\r\n    uint8 prevCategoryId = usersEModeCategory[msg.sender];\r\n    usersEModeCategory[msg.sender] = params.categoryId;\r\n\r\n    if (prevCategoryId != 0) {\r\n      ValidationLogic.validateHealthFactor(\r\n        reservesData,\r\n        reservesList,\r\n        eModeCategories,\r\n        userConfig,\r\n        msg.sender,\r\n        params.categoryId,\r\n        params.reservesCount,\r\n        params.oracle\r\n      );\r\n    }\r\n    emit UserEModeSet(msg.sender, params.categoryId);\r\n  }\r\n\r\n  /**\r\n   * @notice Gets the eMode configuration and calculates the eMode asset price if a custom oracle is configured\r\n   * @dev The eMode asset price returned is 0 if no oracle is specified\r\n   * @param category The user eMode category\r\n   * @param oracle The price oracle\r\n   * @return The eMode ltv\r\n   * @return The eMode liquidation threshold\r\n   * @return The eMode asset price\r\n   */\r\n  function getEModeConfiguration(\r\n    DataTypes.EModeCategory storage category,\r\n    IPriceOracleGetter oracle\r\n  ) internal view returns (uint256, uint256, uint256) {\r\n    uint256 eModeAssetPrice = 0;\r\n    address eModePriceSource = category.priceSource;\r\n\r\n    if (eModePriceSource != address(0)) {\r\n      eModeAssetPrice = oracle.getAssetPrice(eModePriceSource);\r\n    }\r\n\r\n    return (category.ltv, category.liquidationThreshold, eModeAssetPrice);\r\n  }\r\n\r\n  /**\r\n   * @notice Checks if eMode is active for a user and if yes, if the asset belongs to the eMode category chosen\r\n   * @param eModeUserCategory The user eMode category\r\n   * @param eModeAssetCategory The asset eMode category\r\n   * @return True if eMode is active and the asset belongs to the eMode category chosen by the user, false otherwise\r\n   */\r\n  function isInEModeCategory(\r\n    uint256 eModeUserCategory,\r\n    uint256 eModeAssetCategory\r\n  ) internal pure returns (bool) {\r\n    return (eModeUserCategory != 0 && eModeAssetCategory == eModeUserCategory);\r\n  }\r\n}\r\n\r\n/**\r\n * @title GenericLogic library\r\n * @author Aave\r\n * @notice Implements protocol-level logic to calculate and validate the state of a user\r\n */\r\nlibrary GenericLogic {\r\n  using ReserveLogic for DataTypes.ReserveData;\r\n  using WadRayMath for uint256;\r\n  using PercentageMath for uint256;\r\n  using ReserveConfiguration for DataTypes.ReserveConfigurationMap;\r\n  using UserConfiguration for DataTypes.UserConfigurationMap;\r\n\r\n  struct CalculateUserAccountDataVars {\r\n    uint256 assetPrice;\r\n    uint256 assetUnit;\r\n    uint256 userBalanceInBaseCurrency;\r\n    uint256 decimals;\r\n    uint256 ltv;\r\n    uint256 liquidationThreshold;\r\n    uint256 i;\r\n    uint256 healthFactor;\r\n    uint256 totalCollateralInBaseCurrency;\r\n    uint256 totalDebtInBaseCurrency;\r\n    uint256 avgLtv;\r\n    uint256 avgLiquidationThreshold;\r\n    uint256 eModeAssetPrice;\r\n    uint256 eModeLtv;\r\n    uint256 eModeLiqThreshold;\r\n    uint256 eModeAssetCategory;\r\n    address currentReserveAddress;\r\n    bool hasZeroLtvCollateral;\r\n    bool isInEModeCategory;\r\n  }\r\n\r\n  /**\r\n   * @notice Calculates the user data across the reserves.\r\n   * @dev It includes the total liquidity/collateral/borrow balances in the base currency used by the price feed,\r\n   * the average Loan To Value, the average Liquidation Ratio, and the Health factor.\r\n   * @param reservesData The state of all the reserves\r\n   * @param reservesList The addresses of all the active reserves\r\n   * @param eModeCategories The configuration of all the efficiency mode categories\r\n   * @param params Additional parameters needed for the calculation\r\n   * @return The total collateral of the user in the base currency used by the price feed\r\n   * @return The total debt of the user in the base currency used by the price feed\r\n   * @return The average ltv of the user\r\n   * @return The average liquidation threshold of the user\r\n   * @return The health factor of the user\r\n   * @return True if the ltv is zero, false otherwise\r\n   */\r\n  function calculateUserAccountData(\r\n    mapping(address => DataTypes.ReserveData) storage reservesData,\r\n    mapping(uint256 => address) storage reservesList,\r\n    mapping(uint8 => DataTypes.EModeCategory) storage eModeCategories,\r\n    DataTypes.CalculateUserAccountDataParams memory params\r\n  ) internal view returns (uint256, uint256, uint256, uint256, uint256, bool) {\r\n    if (params.userConfig.isEmpty()) {\r\n      return (0, 0, 0, 0, type(uint256).max, false);\r\n    }\r\n\r\n    CalculateUserAccountDataVars memory vars;\r\n\r\n    if (params.userEModeCategory != 0) {\r\n      (vars.eModeLtv, vars.eModeLiqThreshold, vars.eModeAssetPrice) = EModeLogic\r\n        .getEModeConfiguration(\r\n          eModeCategories[params.userEModeCategory],\r\n          IPriceOracleGetter(params.oracle)\r\n        );\r\n    }\r\n\r\n    while (vars.i < params.reservesCount) {\r\n      if (!params.userConfig.isUsingAsCollateralOrBorrowing(vars.i)) {\r\n        unchecked {\r\n          ++vars.i;\r\n        }\r\n        continue;\r\n      }\r\n\r\n      vars.currentReserveAddress = reservesList[vars.i];\r\n\r\n      if (vars.currentReserveAddress == address(0)) {\r\n        unchecked {\r\n          ++vars.i;\r\n        }\r\n        continue;\r\n      }\r\n\r\n      DataTypes.ReserveData storage currentReserve = reservesData[vars.currentReserveAddress];\r\n\r\n      (\r\n        vars.ltv,\r\n        vars.liquidationThreshold,\r\n        ,\r\n        vars.decimals,\r\n        ,\r\n        vars.eModeAssetCategory\r\n      ) = currentReserve.configuration.getParams();\r\n\r\n      unchecked {\r\n        vars.assetUnit = 10 ** vars.decimals;\r\n      }\r\n\r\n      vars.assetPrice = vars.eModeAssetPrice != 0 &&\r\n        params.userEModeCategory == vars.eModeAssetCategory\r\n        ? vars.eModeAssetPrice\r\n        : IPriceOracleGetter(params.oracle).getAssetPrice(vars.currentReserveAddress);\r\n\r\n      if (vars.liquidationThreshold != 0 && params.userConfig.isUsingAsCollateral(vars.i)) {\r\n        vars.userBalanceInBaseCurrency = _getUserBalanceInBaseCurrency(\r\n          params.user,\r\n          currentReserve,\r\n          vars.assetPrice,\r\n          vars.assetUnit\r\n        );\r\n\r\n        vars.totalCollateralInBaseCurrency += vars.userBalanceInBaseCurrency;\r\n\r\n        vars.isInEModeCategory = EModeLogic.isInEModeCategory(\r\n          params.userEModeCategory,\r\n          vars.eModeAssetCategory\r\n        );\r\n\r\n        if (vars.ltv != 0) {\r\n          vars.avgLtv +=\r\n            vars.userBalanceInBaseCurrency *\r\n            (vars.isInEModeCategory ? vars.eModeLtv : vars.ltv);\r\n        } else {\r\n          vars.hasZeroLtvCollateral = true;\r\n        }\r\n\r\n        vars.avgLiquidationThreshold +=\r\n          vars.userBalanceInBaseCurrency *\r\n          (vars.isInEModeCategory ? vars.eModeLiqThreshold : vars.liquidationThreshold);\r\n      }\r\n\r\n      if (params.userConfig.isBorrowing(vars.i)) {\r\n        vars.totalDebtInBaseCurrency += _getUserDebtInBaseCurrency(\r\n          params.user,\r\n          currentReserve,\r\n          vars.assetPrice,\r\n          vars.assetUnit\r\n        );\r\n      }\r\n\r\n      unchecked {\r\n        ++vars.i;\r\n      }\r\n    }\r\n\r\n    unchecked {\r\n      vars.avgLtv = vars.totalCollateralInBaseCurrency != 0\r\n        ? vars.avgLtv / vars.totalCollateralInBaseCurrency\r\n        : 0;\r\n      vars.avgLiquidationThreshold = vars.totalCollateralInBaseCurrency != 0\r\n        ? vars.avgLiquidationThreshold / vars.totalCollateralInBaseCurrency\r\n        : 0;\r\n    }\r\n\r\n    vars.healthFactor = (vars.totalDebtInBaseCurrency == 0)\r\n      ? type(uint256).max\r\n      : (vars.totalCollateralInBaseCurrency.percentMul(vars.avgLiquidationThreshold)).wadDiv(\r\n        vars.totalDebtInBaseCurrency\r\n      );\r\n    return (\r\n      vars.totalCollateralInBaseCurrency,\r\n      vars.totalDebtInBaseCurrency,\r\n      vars.avgLtv,\r\n      vars.avgLiquidationThreshold,\r\n      vars.healthFactor,\r\n      vars.hasZeroLtvCollateral\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @notice Calculates the maximum amount that can be borrowed depending on the available collateral, the total debt\r\n   * and the average Loan To Value\r\n   * @param totalCollateralInBaseCurrency The total collateral in the base currency used by the price feed\r\n   * @param totalDebtInBaseCurrency The total borrow balance in the base currency used by the price feed\r\n   * @param ltv The average loan to value\r\n   * @return The amount available to borrow in the base currency of the used by the price feed\r\n   */\r\n  function calculateAvailableBorrows(\r\n    uint256 totalCollateralInBaseCurrency,\r\n    uint256 totalDebtInBaseCurrency,\r\n    uint256 ltv\r\n  ) internal pure returns (uint256) {\r\n    uint256 availableBorrowsInBaseCurrency = totalCollateralInBaseCurrency.percentMul(ltv);\r\n\r\n    if (availableBorrowsInBaseCurrency < totalDebtInBaseCurrency) {\r\n      return 0;\r\n    }\r\n\r\n    availableBorrowsInBaseCurrency = availableBorrowsInBaseCurrency - totalDebtInBaseCurrency;\r\n    return availableBorrowsInBaseCurrency;\r\n  }\r\n\r\n  /**\r\n   * @notice Calculates total debt of the user in the based currency used to normalize the values of the assets\r\n   * @dev This fetches the `balanceOf` of the stable and variable debt tokens for the user. For gas reasons, the\r\n   * variable debt balance is calculated by fetching `scaledBalancesOf` normalized debt, which is cheaper than\r\n   * fetching `balanceOf`\r\n   * @param user The address of the user\r\n   * @param reserve The data of the reserve for which the total debt of the user is being calculated\r\n   * @param assetPrice The price of the asset for which the total debt of the user is being calculated\r\n   * @param assetUnit The value representing one full unit of the asset (10^decimals)\r\n   * @return The total debt of the user normalized to the base currency\r\n   */\r\n  function _getUserDebtInBaseCurrency(\r\n    address user,\r\n    DataTypes.ReserveData storage reserve,\r\n    uint256 assetPrice,\r\n    uint256 assetUnit\r\n  ) private view returns (uint256) {\r\n    // fetching variable debt\r\n    uint256 userTotalDebt = IScaledBalanceToken(reserve.variableDebtTokenAddress).scaledBalanceOf(\r\n      user\r\n    );\r\n    if (userTotalDebt != 0) {\r\n      userTotalDebt = userTotalDebt.rayMul(reserve.getNormalizedDebt());\r\n    }\r\n\r\n    userTotalDebt = userTotalDebt + IERC20(reserve.stableDebtTokenAddress).balanceOf(user);\r\n\r\n    userTotalDebt = assetPrice * userTotalDebt;\r\n\r\n    unchecked {\r\n      return userTotalDebt / assetUnit;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @notice Calculates total aToken balance of the user in the based currency used by the price oracle\r\n   * @dev For gas reasons, the aToken balance is calculated by fetching `scaledBalancesOf` normalized debt, which\r\n   * is cheaper than fetching `balanceOf`\r\n   * @param user The address of the user\r\n   * @param reserve The data of the reserve for which the total aToken balance of the user is being calculated\r\n   * @param assetPrice The price of the asset for which the total aToken balance of the user is being calculated\r\n   * @param assetUnit The value representing one full unit of the asset (10^decimals)\r\n   * @return The total aToken balance of the user normalized to the base currency of the price oracle\r\n   */\r\n  function _getUserBalanceInBaseCurrency(\r\n    address user,\r\n    DataTypes.ReserveData storage reserve,\r\n    uint256 assetPrice,\r\n    uint256 assetUnit\r\n  ) private view returns (uint256) {\r\n    uint256 normalizedIncome = reserve.getNormalizedIncome();\r\n    uint256 balance = (\r\n      IScaledBalanceToken(reserve.aTokenAddress).scaledBalanceOf(user).rayMul(normalizedIncome)\r\n    ) * assetPrice;\r\n\r\n    unchecked {\r\n      return balance / assetUnit;\r\n    }\r\n  }\r\n}\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n  function _msgSender() internal view virtual returns (address payable) {\r\n    return payable(msg.sender);\r\n  }\r\n\r\n  function _msgData() internal view virtual returns (bytes memory) {\r\n    this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n    return msg.data;\r\n  }\r\n}\r\n\r\ninterface IERC20Detailed is IERC20 {\r\n  function name() external view returns (string memory);\r\n\r\n  function symbol() external view returns (string memory);\r\n\r\n  function decimals() external view returns (uint8);\r\n}\r\n\r\n/**\r\n * @title IACLManager\r\n * @author Aave\r\n * @notice Defines the basic interface for the ACL Manager\r\n */\r\ninterface IACLManager {\r\n  /**\r\n   * @notice Returns the contract address of the PoolAddressesProvider\r\n   * @return The address of the PoolAddressesProvider\r\n   */\r\n  function ADDRESSES_PROVIDER() external view returns (IPoolAddressesProvider);\r\n\r\n  /**\r\n   * @notice Returns the identifier of the PoolAdmin role\r\n   * @return The id of the PoolAdmin role\r\n   */\r\n  function POOL_ADMIN_ROLE() external view returns (bytes32);\r\n\r\n  /**\r\n   * @notice Returns the identifier of the EmergencyAdmin role\r\n   * @return The id of the EmergencyAdmin role\r\n   */\r\n  function EMERGENCY_ADMIN_ROLE() external view returns (bytes32);\r\n\r\n  /**\r\n   * @notice Returns the identifier of the RiskAdmin role\r\n   * @return The id of the RiskAdmin role\r\n   */\r\n  function RISK_ADMIN_ROLE() external view returns (bytes32);\r\n\r\n  /**\r\n   * @notice Returns the identifier of the FlashBorrower role\r\n   * @return The id of the FlashBorrower role\r\n   */\r\n  function FLASH_BORROWER_ROLE() external view returns (bytes32);\r\n\r\n  /**\r\n   * @notice Returns the identifier of the Bridge role\r\n   * @return The id of the Bridge role\r\n   */\r\n  function BRIDGE_ROLE() external view returns (bytes32);\r\n\r\n  /**\r\n   * @notice Returns the identifier of the AssetListingAdmin role\r\n   * @return The id of the AssetListingAdmin role\r\n   */\r\n  function ASSET_LISTING_ADMIN_ROLE() external view returns (bytes32);\r\n\r\n  /**\r\n   * @notice Set the role as admin of a specific role.\r\n   * @dev By default the admin role for all roles is `DEFAULT_ADMIN_ROLE`.\r\n   * @param role The role to be managed by the admin role\r\n   * @param adminRole The admin role\r\n   */\r\n  function setRoleAdmin(bytes32 role, bytes32 adminRole) external;\r\n\r\n  /**\r\n   * @notice Adds a new admin as PoolAdmin\r\n   * @param admin The address of the new admin\r\n   */\r\n  function addPoolAdmin(address admin) external;\r\n\r\n  /**\r\n   * @notice Removes an admin as PoolAdmin\r\n   * @param admin The address of the admin to remove\r\n   */\r\n  function removePoolAdmin(address admin) external;\r\n\r\n  /**\r\n   * @notice Returns true if the address is PoolAdmin, false otherwise\r\n   * @param admin The address to check\r\n   * @return True if the given address is PoolAdmin, false otherwise\r\n   */\r\n  function isPoolAdmin(address admin) external view returns (bool);\r\n\r\n  /**\r\n   * @notice Adds a new admin as EmergencyAdmin\r\n   * @param admin The address of the new admin\r\n   */\r\n  function addEmergencyAdmin(address admin) external;\r\n\r\n  /**\r\n   * @notice Removes an admin as EmergencyAdmin\r\n   * @param admin The address of the admin to remove\r\n   */\r\n  function removeEmergencyAdmin(address admin) external;\r\n\r\n  /**\r\n   * @notice Returns true if the address is EmergencyAdmin, false otherwise\r\n   * @param admin The address to check\r\n   * @return True if the given address is EmergencyAdmin, false otherwise\r\n   */\r\n  function isEmergencyAdmin(address admin) external view returns (bool);\r\n\r\n  /**\r\n   * @notice Adds a new admin as RiskAdmin\r\n   * @param admin The address of the new admin\r\n   */\r\n  function addRiskAdmin(address admin) external;\r\n\r\n  /**\r\n   * @notice Removes an admin as RiskAdmin\r\n   * @param admin The address of the admin to remove\r\n   */\r\n  function removeRiskAdmin(address admin) external;\r\n\r\n  /**\r\n   * @notice Returns true if the address is RiskAdmin, false otherwise\r\n   * @param admin The address to check\r\n   * @return True if the given address is RiskAdmin, false otherwise\r\n   */\r\n  function isRiskAdmin(address admin) external view returns (bool);\r\n\r\n  /**\r\n   * @notice Adds a new address as FlashBorrower\r\n   * @param borrower The address of the new FlashBorrower\r\n   */\r\n  function addFlashBorrower(address borrower) external;\r\n\r\n  /**\r\n   * @notice Removes an address as FlashBorrower\r\n   * @param borrower The address of the FlashBorrower to remove\r\n   */\r\n  function removeFlashBorrower(address borrower) external;\r\n\r\n  /**\r\n   * @notice Returns true if the address is FlashBorrower, false otherwise\r\n   * @param borrower The address to check\r\n   * @return True if the given address is FlashBorrower, false otherwise\r\n   */\r\n  function isFlashBorrower(address borrower) external view returns (bool);\r\n\r\n  /**\r\n   * @notice Adds a new address as Bridge\r\n   * @param bridge The address of the new Bridge\r\n   */\r\n  function addBridge(address bridge) external;\r\n\r\n  /**\r\n   * @notice Removes an address as Bridge\r\n   * @param bridge The address of the bridge to remove\r\n   */\r\n  function removeBridge(address bridge) external;\r\n\r\n  /**\r\n   * @notice Returns true if the address is Bridge, false otherwise\r\n   * @param bridge The address to check\r\n   * @return True if the given address is Bridge, false otherwise\r\n   */\r\n  function isBridge(address bridge) external view returns (bool);\r\n\r\n  /**\r\n   * @notice Adds a new admin as AssetListingAdmin\r\n   * @param admin The address of the new admin\r\n   */\r\n  function addAssetListingAdmin(address admin) external;\r\n\r\n  /**\r\n   * @notice Removes an admin as AssetListingAdmin\r\n   * @param admin The address of the admin to remove\r\n   */\r\n  function removeAssetListingAdmin(address admin) external;\r\n\r\n  /**\r\n   * @notice Returns true if the address is AssetListingAdmin, false otherwise\r\n   * @param admin The address to check\r\n   * @return True if the given address is AssetListingAdmin, false otherwise\r\n   */\r\n  function isAssetListingAdmin(address admin) external view returns (bool);\r\n}\r\n\r\n/**\r\n * @title IncentivizedERC20\r\n * @author Aave, inspired by the Openzeppelin ERC20 implementation\r\n * @notice Basic ERC20 implementation\r\n */\r\nabstract contract IncentivizedERC20 is Context, IERC20Detailed {\r\n  using WadRayMath for uint256;\r\n  using SafeCast for uint256;\r\n\r\n  /**\r\n   * @dev Only pool admin can call functions marked by this modifier.\r\n   */\r\n  modifier onlyPoolAdmin() {\r\n    IACLManager aclManager = IACLManager(_addressesProvider.getACLManager());\r\n    require(aclManager.isPoolAdmin(msg.sender), Errors.CALLER_NOT_POOL_ADMIN);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Only pool can call functions marked by this modifier.\r\n   */\r\n  modifier onlyPool() {\r\n    require(_msgSender() == address(POOL), Errors.CALLER_MUST_BE_POOL);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev UserState - additionalData is a flexible field.\r\n   * ATokens and VariableDebtTokens use this field store the index of the\r\n   * user's last supply/withdrawal/borrow/repayment. StableDebtTokens use\r\n   * this field to store the user's stable rate.\r\n   */\r\n  struct UserState {\r\n    uint128 balance;\r\n    uint128 additionalData;\r\n  }\r\n  // Map of users address and their state data (userAddress => userStateData)\r\n  mapping(address => UserState) internal _userState;\r\n\r\n  // Map of allowances (delegator => delegatee => allowanceAmount)\r\n  mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n  uint256 internal _totalSupply;\r\n  string private _name;\r\n  string private _symbol;\r\n  uint8 private _decimals;\r\n  IAaveIncentivesController internal _incentivesController;\r\n  IPoolAddressesProvider internal immutable _addressesProvider;\r\n  IPool public immutable POOL;\r\n\r\n  /**\r\n   * @dev Constructor.\r\n   * @param pool The reference to the main Pool contract\r\n   * @param name The name of the token\r\n   * @param symbol The symbol of the token\r\n   * @param decimals The number of decimals of the token\r\n   */\r\n  constructor(IPool pool, string memory name, string memory symbol, uint8 decimals) {\r\n    _addressesProvider = pool.ADDRESSES_PROVIDER();\r\n    _name = name;\r\n    _symbol = symbol;\r\n    _decimals = decimals;\r\n    POOL = pool;\r\n  }\r\n\r\n  /// @inheritdoc IERC20Detailed\r\n  function name() public view override returns (string memory) {\r\n    return _name;\r\n  }\r\n\r\n  /// @inheritdoc IERC20Detailed\r\n  function symbol() external view override returns (string memory) {\r\n    return _symbol;\r\n  }\r\n\r\n  /// @inheritdoc IERC20Detailed\r\n  function decimals() external view override returns (uint8) {\r\n    return _decimals;\r\n  }\r\n\r\n  /// @inheritdoc IERC20\r\n  function totalSupply() public view virtual override returns (uint256) {\r\n    return _totalSupply;\r\n  }\r\n\r\n  /// @inheritdoc IERC20\r\n  function balanceOf(address account) public view virtual override returns (uint256) {\r\n    return _userState[account].balance;\r\n  }\r\n\r\n  /**\r\n   * @notice Returns the address of the Incentives Controller contract\r\n   * @return The address of the Incentives Controller\r\n   */\r\n  function getIncentivesController() external view virtual returns (IAaveIncentivesController) {\r\n    return _incentivesController;\r\n  }\r\n\r\n  /**\r\n   * @notice Sets a new Incentives Controller\r\n   * @param controller the new Incentives controller\r\n   */\r\n  function setIncentivesController(IAaveIncentivesController controller) external onlyPoolAdmin {\r\n    _incentivesController = controller;\r\n  }\r\n\r\n  /// @inheritdoc IERC20\r\n  function transfer(address recipient, uint256 amount) external virtual override returns (bool) {\r\n    uint128 castAmount = amount.toUint128();\r\n    _transfer(_msgSender(), recipient, castAmount);\r\n    return true;\r\n  }\r\n\r\n  /// @inheritdoc IERC20\r\n  function allowance(\r\n    address owner,\r\n    address spender\r\n  ) external view virtual override returns (uint256) {\r\n    return _allowances[owner][spender];\r\n  }\r\n\r\n  /// @inheritdoc IERC20\r\n  function approve(address spender, uint256 amount) external virtual override returns (bool) {\r\n    _approve(_msgSender(), spender, amount);\r\n    return true;\r\n  }\r\n\r\n  /// @inheritdoc IERC20\r\n  function transferFrom(\r\n    address sender,\r\n    address recipient,\r\n    uint256 amount\r\n  ) external virtual override returns (bool) {\r\n    uint128 castAmount = amount.toUint128();\r\n    _approve(sender, _msgSender(), _allowances[sender][_msgSender()] - castAmount);\r\n    _transfer(sender, recipient, castAmount);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @notice Increases the allowance of spender to spend _msgSender() tokens\r\n   * @param spender The user allowed to spend on behalf of _msgSender()\r\n   * @param addedValue The amount being added to the allowance\r\n   * @return `true`\r\n   */\r\n  function increaseAllowance(address spender, uint256 addedValue) external virtual returns (bool) {\r\n    _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @notice Decreases the allowance of spender to spend _msgSender() tokens\r\n   * @param spender The user allowed to spend on behalf of _msgSender()\r\n   * @param subtractedValue The amount being subtracted to the allowance\r\n   * @return `true`\r\n   */\r\n  function decreaseAllowance(\r\n    address spender,\r\n    uint256 subtractedValue\r\n  ) external virtual returns (bool) {\r\n    _approve(_msgSender(), spender, _allowances[_msgSender()][spender] - subtractedValue);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @notice Transfers tokens between two users and apply incentives if defined.\r\n   * @param sender The source address\r\n   * @param recipient The destination address\r\n   * @param amount The amount getting transferred\r\n   */\r\n  function _transfer(address sender, address recipient, uint128 amount) internal virtual {\r\n    uint128 oldSenderBalance = _userState[sender].balance;\r\n    _userState[sender].balance = oldSenderBalance - amount;\r\n    uint128 oldRecipientBalance = _userState[recipient].balance;\r\n    _userState[recipient].balance = oldRecipientBalance + amount;\r\n\r\n    IAaveIncentivesController incentivesControllerLocal = _incentivesController;\r\n    if (address(incentivesControllerLocal) != address(0)) {\r\n      uint256 currentTotalSupply = _totalSupply;\r\n      incentivesControllerLocal.handleAction(sender, currentTotalSupply, oldSenderBalance);\r\n      if (sender != recipient) {\r\n        incentivesControllerLocal.handleAction(recipient, currentTotalSupply, oldRecipientBalance);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @notice Approve `spender` to use `amount` of `owner`s balance\r\n   * @param owner The address owning the tokens\r\n   * @param spender The address approved for spending\r\n   * @param amount The amount of tokens to approve spending of\r\n   */\r\n  function _approve(address owner, address spender, uint256 amount) internal virtual {\r\n    _allowances[owner][spender] = amount;\r\n    emit Approval(owner, spender, amount);\r\n  }\r\n\r\n  /**\r\n   * @notice Update the name of the token\r\n   * @param newName The new name for the token\r\n   */\r\n  function _setName(string memory newName) internal {\r\n    _name = newName;\r\n  }\r\n\r\n  /**\r\n   * @notice Update the symbol for the token\r\n   * @param newSymbol The new symbol for the token\r\n   */\r\n  function _setSymbol(string memory newSymbol) internal {\r\n    _symbol = newSymbol;\r\n  }\r\n\r\n  /**\r\n   * @notice Update the number of decimals for the token\r\n   * @param newDecimals The new number of decimals for the token\r\n   */\r\n  function _setDecimals(uint8 newDecimals) internal {\r\n    _decimals = newDecimals;\r\n  }\r\n}\r\n\r\n/**\r\n * @title ReserveLogic library\r\n * @author Aave\r\n * @notice Implements functions to validate the different actions of the protocol\r\n */\r\nlibrary ValidationLogic {\r\n  using ReserveLogic for DataTypes.ReserveData;\r\n  using WadRayMath for uint256;\r\n  using PercentageMath for uint256;\r\n  using SafeCast for uint256;\r\n  using GPv2SafeERC20 for IERC20;\r\n  using ReserveConfiguration for DataTypes.ReserveConfigurationMap;\r\n  using UserConfiguration for DataTypes.UserConfigurationMap;\r\n  using Address for address;\r\n\r\n  // Factor to apply to \"only-variable-debt\" liquidity rate to get threshold for rebalancing, expressed in bps\r\n  // A value of 0.9e4 results in 90%\r\n  uint256 public constant REBALANCE_UP_LIQUIDITY_RATE_THRESHOLD = 0.9e4;\r\n\r\n  // Minimum health factor allowed under any circumstance\r\n  // A value of 0.95e18 results in 0.95\r\n  uint256 public constant MINIMUM_HEALTH_FACTOR_LIQUIDATION_THRESHOLD = 0.95e18;\r\n\r\n  /**\r\n   * @dev Minimum health factor to consider a user position healthy\r\n   * A value of 1e18 results in 1\r\n   */\r\n  uint256 public constant HEALTH_FACTOR_LIQUIDATION_THRESHOLD = 1e18;\r\n\r\n  /**\r\n   * @dev Role identifier for the role allowed to supply isolated reserves as collateral\r\n   */\r\n  bytes32 public constant ISOLATED_COLLATERAL_SUPPLIER_ROLE =\r\n    keccak256('ISOLATED_COLLATERAL_SUPPLIER');\r\n\r\n  /**\r\n   * @notice Validates a supply action.\r\n   * @param reserveCache The cached data of the reserve\r\n   * @param amount The amount to be supplied\r\n   */\r\n  function validateSupply(\r\n    DataTypes.ReserveCache memory reserveCache,\r\n    DataTypes.ReserveData storage reserve,\r\n    uint256 amount\r\n  ) internal view {\r\n    require(amount != 0, Errors.INVALID_AMOUNT);\r\n\r\n    (bool isActive, bool isFrozen, , , bool isPaused) = reserveCache\r\n      .reserveConfiguration\r\n      .getFlags();\r\n    require(isActive, Errors.RESERVE_INACTIVE);\r\n    require(!isPaused, Errors.RESERVE_PAUSED);\r\n    require(!isFrozen, Errors.RESERVE_FROZEN);\r\n\r\n    uint256 supplyCap = reserveCache.reserveConfiguration.getSupplyCap();\r\n    require(\r\n      supplyCap == 0 ||\r\n        ((IAToken(reserveCache.aTokenAddress).scaledTotalSupply() +\r\n          uint256(reserve.accruedToTreasury)).rayMul(reserveCache.nextLiquidityIndex) + amount) <=\r\n        supplyCap * (10 ** reserveCache.reserveConfiguration.getDecimals()),\r\n      Errors.SUPPLY_CAP_EXCEEDED\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @notice Validates a withdraw action.\r\n   * @param reserveCache The cached data of the reserve\r\n   * @param amount The amount to be withdrawn\r\n   * @param userBalance The balance of the user\r\n   */\r\n  function validateWithdraw(\r\n    DataTypes.ReserveCache memory reserveCache,\r\n    uint256 amount,\r\n    uint256 userBalance\r\n  ) internal pure {\r\n    require(amount != 0, Errors.INVALID_AMOUNT);\r\n    require(amount <= userBalance, Errors.NOT_ENOUGH_AVAILABLE_USER_BALANCE);\r\n\r\n    (bool isActive, , , , bool isPaused) = reserveCache.reserveConfiguration.getFlags();\r\n    require(isActive, Errors.RESERVE_INACTIVE);\r\n    require(!isPaused, Errors.RESERVE_PAUSED);\r\n  }\r\n\r\n  struct ValidateBorrowLocalVars {\r\n    uint256 currentLtv;\r\n    uint256 collateralNeededInBaseCurrency;\r\n    uint256 userCollateralInBaseCurrency;\r\n    uint256 userDebtInBaseCurrency;\r\n    uint256 availableLiquidity;\r\n    uint256 healthFactor;\r\n    uint256 totalDebt;\r\n    uint256 totalSupplyVariableDebt;\r\n    uint256 reserveDecimals;\r\n    uint256 borrowCap;\r\n    uint256 amountInBaseCurrency;\r\n    uint256 assetUnit;\r\n    address eModePriceSource;\r\n    address siloedBorrowingAddress;\r\n    bool isActive;\r\n    bool isFrozen;\r\n    bool isPaused;\r\n    bool borrowingEnabled;\r\n    bool stableRateBorrowingEnabled;\r\n    bool siloedBorrowingEnabled;\r\n  }\r\n\r\n  /**\r\n   * @notice Validates a borrow action.\r\n   * @param reservesData The state of all the reserves\r\n   * @param reservesList The addresses of all the active reserves\r\n   * @param eModeCategories The configuration of all the efficiency mode categories\r\n   * @param params Additional params needed for the validation\r\n   */\r\n  function validateBorrow(\r\n    mapping(address => DataTypes.ReserveData) storage reservesData,\r\n    mapping(uint256 => address) storage reservesList,\r\n    mapping(uint8 => DataTypes.EModeCategory) storage eModeCategories,\r\n    DataTypes.ValidateBorrowParams memory params\r\n  ) internal view {\r\n    // reserveIndex for the asset to borrow\r\n    uint16 id = reservesData[params.asset].id;\r\n    bool canBorrow = BitmapLogic.isAssetBorrowable(\r\n      reservesData,\r\n      reservesList,\r\n      id,\r\n      params.userConfig,\r\n      params.reservesCount\r\n    );\r\n    // reevrt if a user has provided any collateral that is blacklisted against the to-be bororwed asset\r\n    require(canBorrow, Errors.COLLATERAL_BLACKLIST_VIOLATION);\r\n    require(params.amount != 0, Errors.INVALID_AMOUNT);\r\n\r\n    ValidateBorrowLocalVars memory vars;\r\n\r\n    (\r\n      vars.isActive,\r\n      vars.isFrozen,\r\n      vars.borrowingEnabled,\r\n      vars.stableRateBorrowingEnabled,\r\n      vars.isPaused\r\n    ) = params.reserveCache.reserveConfiguration.getFlags();\r\n\r\n    require(vars.isActive, Errors.RESERVE_INACTIVE);\r\n    require(!vars.isPaused, Errors.RESERVE_PAUSED);\r\n    require(!vars.isFrozen, Errors.RESERVE_FROZEN);\r\n    require(vars.borrowingEnabled, Errors.BORROWING_NOT_ENABLED);\r\n\r\n    require(\r\n      params.priceOracleSentinel == address(0) ||\r\n        IPriceOracleSentinel(params.priceOracleSentinel).isBorrowAllowed(),\r\n      Errors.PRICE_ORACLE_SENTINEL_CHECK_FAILED\r\n    );\r\n\r\n    //validate interest rate mode\r\n    require(\r\n      params.interestRateMode == DataTypes.InterestRateMode.VARIABLE ||\r\n        params.interestRateMode == DataTypes.InterestRateMode.STABLE,\r\n      Errors.INVALID_INTEREST_RATE_MODE_SELECTED\r\n    );\r\n\r\n    vars.reserveDecimals = params.reserveCache.reserveConfiguration.getDecimals();\r\n    vars.borrowCap = params.reserveCache.reserveConfiguration.getBorrowCap();\r\n    unchecked {\r\n      vars.assetUnit = 10 ** vars.reserveDecimals;\r\n    }\r\n\r\n    if (vars.borrowCap != 0) {\r\n      vars.totalSupplyVariableDebt = params.reserveCache.currScaledVariableDebt.rayMul(\r\n        params.reserveCache.nextVariableBorrowIndex\r\n      );\r\n\r\n      vars.totalDebt =\r\n        params.reserveCache.currTotalStableDebt +\r\n        vars.totalSupplyVariableDebt +\r\n        params.amount;\r\n\r\n      unchecked {\r\n        require(vars.totalDebt <= vars.borrowCap * vars.assetUnit, Errors.BORROW_CAP_EXCEEDED);\r\n      }\r\n    }\r\n\r\n    if (params.isolationModeActive) {\r\n      // check that the asset being borrowed is borrowable in isolation mode AND\r\n      // the total exposure is no bigger than the collateral debt ceiling\r\n      require(\r\n        params.reserveCache.reserveConfiguration.getBorrowableInIsolation(),\r\n        Errors.ASSET_NOT_BORROWABLE_IN_ISOLATION\r\n      );\r\n\r\n      require(\r\n        reservesData[params.isolationModeCollateralAddress].isolationModeTotalDebt +\r\n          (params.amount /\r\n            10 ** (vars.reserveDecimals - ReserveConfiguration.DEBT_CEILING_DECIMALS))\r\n            .toUint128() <=\r\n          params.isolationModeDebtCeiling,\r\n        Errors.DEBT_CEILING_EXCEEDED\r\n      );\r\n    }\r\n\r\n    if (params.userEModeCategory != 0) {\r\n      require(\r\n        params.reserveCache.reserveConfiguration.getEModeCategory() == params.userEModeCategory,\r\n        Errors.INCONSISTENT_EMODE_CATEGORY\r\n      );\r\n      vars.eModePriceSource = eModeCategories[params.userEModeCategory].priceSource;\r\n    }\r\n\r\n    (\r\n      vars.userCollateralInBaseCurrency,\r\n      vars.userDebtInBaseCurrency,\r\n      vars.currentLtv,\r\n      ,\r\n      vars.healthFactor,\r\n\r\n    ) = GenericLogic.calculateUserAccountData(\r\n      reservesData,\r\n      reservesList,\r\n      eModeCategories,\r\n      DataTypes.CalculateUserAccountDataParams({\r\n        userConfig: params.userConfig,\r\n        reservesCount: params.reservesCount,\r\n        user: params.userAddress,\r\n        oracle: params.oracle,\r\n        userEModeCategory: params.userEModeCategory\r\n      })\r\n    );\r\n\r\n    require(vars.userCollateralInBaseCurrency != 0, Errors.COLLATERAL_BALANCE_IS_ZERO);\r\n    require(vars.currentLtv != 0, Errors.LTV_VALIDATION_FAILED);\r\n\r\n    require(\r\n      vars.healthFactor > HEALTH_FACTOR_LIQUIDATION_THRESHOLD,\r\n      Errors.HEALTH_FACTOR_LOWER_THAN_LIQUIDATION_THRESHOLD\r\n    );\r\n\r\n    vars.amountInBaseCurrency =\r\n      IPriceOracleGetter(params.oracle).getAssetPrice(\r\n        vars.eModePriceSource != address(0) ? vars.eModePriceSource : params.asset\r\n      ) *\r\n      params.amount;\r\n    unchecked {\r\n      vars.amountInBaseCurrency /= vars.assetUnit;\r\n    }\r\n\r\n    //add the current already borrowed amount to the amount requested to calculate the total collateral needed.\r\n    vars.collateralNeededInBaseCurrency = (vars.userDebtInBaseCurrency + vars.amountInBaseCurrency)\r\n      .percentDiv(vars.currentLtv); //LTV is calculated in percentage\r\n\r\n    require(\r\n      vars.collateralNeededInBaseCurrency <= vars.userCollateralInBaseCurrency,\r\n      Errors.COLLATERAL_CANNOT_COVER_NEW_BORROW\r\n    );\r\n\r\n    /**\r\n     * Following conditions need to be met if the user is borrowing at a stable rate:\r\n     * 1. Reserve must be enabled for stable rate borrowing\r\n     * 2. Users cannot borrow from the reserve if their collateral is (mostly) the same currency\r\n     *    they are borrowing, to prevent abuses.\r\n     * 3. Users will be able to borrow only a portion of the total available liquidity\r\n     */\r\n\r\n    if (params.interestRateMode == DataTypes.InterestRateMode.STABLE) {\r\n      //check if the borrow mode is stable and if stable rate borrowing is enabled on this reserve\r\n\r\n      require(vars.stableRateBorrowingEnabled, Errors.STABLE_BORROWING_NOT_ENABLED);\r\n\r\n      require(\r\n        !params.userConfig.isUsingAsCollateral(reservesData[params.asset].id) ||\r\n          params.reserveCache.reserveConfiguration.getLtv() == 0 ||\r\n          params.amount > IERC20(params.reserveCache.aTokenAddress).balanceOf(params.userAddress),\r\n        Errors.COLLATERAL_SAME_AS_BORROWING_CURRENCY\r\n      );\r\n\r\n      vars.availableLiquidity = IERC20(params.asset).balanceOf(params.reserveCache.aTokenAddress);\r\n\r\n      //calculate the max available loan size in stable rate mode as a percentage of the\r\n      //available liquidity\r\n      uint256 maxLoanSizeStable = vars.availableLiquidity.percentMul(params.maxStableLoanPercent);\r\n\r\n      require(params.amount <= maxLoanSizeStable, Errors.AMOUNT_BIGGER_THAN_MAX_LOAN_SIZE_STABLE);\r\n    }\r\n\r\n    if (params.userConfig.isBorrowingAny()) {\r\n      (vars.siloedBorrowingEnabled, vars.siloedBorrowingAddress) = params\r\n        .userConfig\r\n        .getSiloedBorrowingState(reservesData, reservesList);\r\n\r\n      if (vars.siloedBorrowingEnabled) {\r\n        require(vars.siloedBorrowingAddress == params.asset, Errors.SILOED_BORROWING_VIOLATION);\r\n      } else {\r\n        require(\r\n          !params.reserveCache.reserveConfiguration.getSiloedBorrowing(),\r\n          Errors.SILOED_BORROWING_VIOLATION\r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @notice Validates a repay action.\r\n   * @param reserveCache The cached data of the reserve\r\n   * @param amountSent The amount sent for the repayment. Can be an actual value or uint(-1)\r\n   * @param interestRateMode The interest rate mode of the debt being repaid\r\n   * @param onBehalfOf The address of the user msg.sender is repaying for\r\n   * @param stableDebt The borrow balance of the user\r\n   * @param variableDebt The borrow balance of the user\r\n   */\r\n  function validateRepay(\r\n    DataTypes.ReserveCache memory reserveCache,\r\n    uint256 amountSent,\r\n    DataTypes.InterestRateMode interestRateMode,\r\n    address onBehalfOf,\r\n    uint256 stableDebt,\r\n    uint256 variableDebt\r\n  ) internal view {\r\n    require(amountSent != 0, Errors.INVALID_AMOUNT);\r\n    require(\r\n      amountSent != type(uint256).max || msg.sender == onBehalfOf,\r\n      Errors.NO_EXPLICIT_AMOUNT_TO_REPAY_ON_BEHALF\r\n    );\r\n\r\n    (bool isActive, , , , bool isPaused) = reserveCache.reserveConfiguration.getFlags();\r\n    require(isActive, Errors.RESERVE_INACTIVE);\r\n    require(!isPaused, Errors.RESERVE_PAUSED);\r\n\r\n    require(\r\n      (stableDebt != 0 && interestRateMode == DataTypes.InterestRateMode.STABLE) ||\r\n        (variableDebt != 0 && interestRateMode == DataTypes.InterestRateMode.VARIABLE),\r\n      Errors.NO_DEBT_OF_SELECTED_TYPE\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @notice Validates a swap of borrow rate mode.\r\n   * @param reserve The reserve state on which the user is swapping the rate\r\n   * @param reserveCache The cached data of the reserve\r\n   * @param userConfig The user reserves configuration\r\n   * @param stableDebt The stable debt of the user\r\n   * @param variableDebt The variable debt of the user\r\n   * @param currentRateMode The rate mode of the debt being swapped\r\n   */\r\n  function validateSwapRateMode(\r\n    DataTypes.ReserveData storage reserve,\r\n    DataTypes.ReserveCache memory reserveCache,\r\n    DataTypes.UserConfigurationMap storage userConfig,\r\n    uint256 stableDebt,\r\n    uint256 variableDebt,\r\n    DataTypes.InterestRateMode currentRateMode\r\n  ) internal view {\r\n    (bool isActive, bool isFrozen, , bool stableRateEnabled, bool isPaused) = reserveCache\r\n      .reserveConfiguration\r\n      .getFlags();\r\n    require(isActive, Errors.RESERVE_INACTIVE);\r\n    require(!isPaused, Errors.RESERVE_PAUSED);\r\n    require(!isFrozen, Errors.RESERVE_FROZEN);\r\n\r\n    if (currentRateMode == DataTypes.InterestRateMode.STABLE) {\r\n      require(stableDebt != 0, Errors.NO_OUTSTANDING_STABLE_DEBT);\r\n    } else if (currentRateMode == DataTypes.InterestRateMode.VARIABLE) {\r\n      require(variableDebt != 0, Errors.NO_OUTSTANDING_VARIABLE_DEBT);\r\n      /**\r\n       * user wants to swap to stable, before swapping we need to ensure that\r\n       * 1. stable borrow rate is enabled on the reserve\r\n       * 2. user is not trying to abuse the reserve by supplying\r\n       * more collateral than he is borrowing, artificially lowering\r\n       * the interest rate, borrowing at variable, and switching to stable\r\n       */\r\n      require(stableRateEnabled, Errors.STABLE_BORROWING_NOT_ENABLED);\r\n\r\n      require(\r\n        !userConfig.isUsingAsCollateral(reserve.id) ||\r\n          reserveCache.reserveConfiguration.getLtv() == 0 ||\r\n          stableDebt + variableDebt > IERC20(reserveCache.aTokenAddress).balanceOf(msg.sender),\r\n        Errors.COLLATERAL_SAME_AS_BORROWING_CURRENCY\r\n      );\r\n    } else {\r\n      revert(Errors.INVALID_INTEREST_RATE_MODE_SELECTED);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @notice Validates a stable borrow rate rebalance action.\r\n   * @dev Rebalancing is accepted when depositors are earning <= 90% of their earnings in pure supply/demand market (variable rate only)\r\n   * For this to be the case, there has to be quite large stable debt with an interest rate below the current variable rate.\r\n   * @param reserve The reserve state on which the user is getting rebalanced\r\n   * @param reserveCache The cached state of the reserve\r\n   * @param reserveAddress The address of the reserve\r\n   */\r\n  function validateRebalanceStableBorrowRate(\r\n    DataTypes.ReserveData storage reserve,\r\n    DataTypes.ReserveCache memory reserveCache,\r\n    address reserveAddress\r\n  ) internal view {\r\n    (bool isActive, , , , bool isPaused) = reserveCache.reserveConfiguration.getFlags();\r\n    require(isActive, Errors.RESERVE_INACTIVE);\r\n    require(!isPaused, Errors.RESERVE_PAUSED);\r\n\r\n    uint256 totalDebt = IERC20(reserveCache.stableDebtTokenAddress).totalSupply() +\r\n      IERC20(reserveCache.variableDebtTokenAddress).totalSupply();\r\n\r\n    (uint256 liquidityRateVariableDebtOnly, , ) = IReserveInterestRateStrategy(\r\n      reserve.interestRateStrategyAddress\r\n    ).calculateInterestRates(\r\n        DataTypes.CalculateInterestRatesParams({\r\n          unbacked: reserve.unbacked,\r\n          liquidityAdded: 0,\r\n          liquidityTaken: 0,\r\n          totalStableDebt: 0,\r\n          totalVariableDebt: totalDebt,\r\n          averageStableBorrowRate: 0,\r\n          reserveFactor: reserveCache.reserveFactor,\r\n          reserve: reserveAddress,\r\n          aToken: reserveCache.aTokenAddress\r\n        })\r\n      );\r\n\r\n    require(\r\n      reserveCache.currLiquidityRate <=\r\n        liquidityRateVariableDebtOnly.percentMul(REBALANCE_UP_LIQUIDITY_RATE_THRESHOLD),\r\n      Errors.INTEREST_RATE_REBALANCE_CONDITIONS_NOT_MET\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @notice Validates the action of setting an asset as collateral.\r\n   * @param reserveCache The cached data of the reserve\r\n   * @param userBalance The balance of the user\r\n   */\r\n  function validateSetUseReserveAsCollateral(\r\n    DataTypes.ReserveCache memory reserveCache,\r\n    uint256 userBalance\r\n  ) internal pure {\r\n    require(userBalance != 0, Errors.UNDERLYING_BALANCE_ZERO);\r\n\r\n    (bool isActive, , , , bool isPaused) = reserveCache.reserveConfiguration.getFlags();\r\n    require(isActive, Errors.RESERVE_INACTIVE);\r\n    require(!isPaused, Errors.RESERVE_PAUSED);\r\n  }\r\n\r\n  /**\r\n   * @notice Validates a flashloan action.\r\n   * @param reservesData The state of all the reserves\r\n   * @param assets The assets being flash-borrowed\r\n   * @param amounts The amounts for each asset being borrowed\r\n   */\r\n  function validateFlashloan(\r\n    mapping(address => DataTypes.ReserveData) storage reservesData,\r\n    address[] memory assets,\r\n    uint256[] memory amounts\r\n  ) internal view {\r\n    require(assets.length == amounts.length, Errors.INCONSISTENT_FLASHLOAN_PARAMS);\r\n    for (uint256 i = 0; i < assets.length; i++) {\r\n      validateFlashloanSimple(reservesData[assets[i]]);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @notice Validates a flashloan action.\r\n   * @param reserve The state of the reserve\r\n   */\r\n  function validateFlashloanSimple(DataTypes.ReserveData storage reserve) internal view {\r\n    DataTypes.ReserveConfigurationMap memory configuration = reserve.configuration;\r\n    require(!configuration.getPaused(), Errors.RESERVE_PAUSED);\r\n    require(configuration.getActive(), Errors.RESERVE_INACTIVE);\r\n    require(configuration.getFlashLoanEnabled(), Errors.FLASHLOAN_DISABLED);\r\n  }\r\n\r\n  struct ValidateLiquidationCallLocalVars {\r\n    bool collateralReserveActive;\r\n    bool collateralReservePaused;\r\n    bool principalReserveActive;\r\n    bool principalReservePaused;\r\n    bool isCollateralEnabled;\r\n  }\r\n\r\n  /**\r\n   * @notice Validates the liquidation action.\r\n   * @param userConfig The user configuration mapping\r\n   * @param collateralReserve The reserve data of the collateral\r\n   * @param params Additional parameters needed for the validation\r\n   */\r\n  function validateLiquidationCall(\r\n    DataTypes.UserConfigurationMap storage userConfig,\r\n    DataTypes.ReserveData storage collateralReserve,\r\n    DataTypes.ValidateLiquidationCallParams memory params\r\n  ) internal view {\r\n    ValidateLiquidationCallLocalVars memory vars;\r\n\r\n    (vars.collateralReserveActive, , , , vars.collateralReservePaused) = collateralReserve\r\n      .configuration\r\n      .getFlags();\r\n\r\n    (vars.principalReserveActive, , , , vars.principalReservePaused) = params\r\n      .debtReserveCache\r\n      .reserveConfiguration\r\n      .getFlags();\r\n\r\n    require(vars.collateralReserveActive && vars.principalReserveActive, Errors.RESERVE_INACTIVE);\r\n    require(!vars.collateralReservePaused && !vars.principalReservePaused, Errors.RESERVE_PAUSED);\r\n\r\n    require(\r\n      params.priceOracleSentinel == address(0) ||\r\n        params.healthFactor < MINIMUM_HEALTH_FACTOR_LIQUIDATION_THRESHOLD ||\r\n        IPriceOracleSentinel(params.priceOracleSentinel).isLiquidationAllowed(),\r\n      Errors.PRICE_ORACLE_SENTINEL_CHECK_FAILED\r\n    );\r\n\r\n    require(\r\n      params.healthFactor < HEALTH_FACTOR_LIQUIDATION_THRESHOLD,\r\n      Errors.HEALTH_FACTOR_NOT_BELOW_THRESHOLD\r\n    );\r\n\r\n    vars.isCollateralEnabled =\r\n      collateralReserve.configuration.getLiquidationThreshold() != 0 &&\r\n      userConfig.isUsingAsCollateral(collateralReserve.id);\r\n\r\n    //if collateral isn't enabled as collateral by user, it cannot be liquidated\r\n    require(vars.isCollateralEnabled, Errors.COLLATERAL_CANNOT_BE_LIQUIDATED);\r\n    require(params.totalDebt != 0, Errors.SPECIFIED_CURRENCY_NOT_BORROWED_BY_USER);\r\n  }\r\n\r\n  /**\r\n   * @notice Validates the health factor of a user.\r\n   * @param reservesData The state of all the reserves\r\n   * @param reservesList The addresses of all the active reserves\r\n   * @param eModeCategories The configuration of all the efficiency mode categories\r\n   * @param userConfig The state of the user for the specific reserve\r\n   * @param user The user to validate health factor of\r\n   * @param userEModeCategory The users active efficiency mode category\r\n   * @param reservesCount The number of available reserves\r\n   * @param oracle The price oracle\r\n   */\r\n  function validateHealthFactor(\r\n    mapping(address => DataTypes.ReserveData) storage reservesData,\r\n    mapping(uint256 => address) storage reservesList,\r\n    mapping(uint8 => DataTypes.EModeCategory) storage eModeCategories,\r\n    DataTypes.UserConfigurationMap memory userConfig,\r\n    address user,\r\n    uint8 userEModeCategory,\r\n    uint256 reservesCount,\r\n    address oracle\r\n  ) internal view returns (uint256, bool) {\r\n    (, , , , uint256 healthFactor, bool hasZeroLtvCollateral) = GenericLogic\r\n      .calculateUserAccountData(\r\n        reservesData,\r\n        reservesList,\r\n        eModeCategories,\r\n        DataTypes.CalculateUserAccountDataParams({\r\n          userConfig: userConfig,\r\n          reservesCount: reservesCount,\r\n          user: user,\r\n          oracle: oracle,\r\n          userEModeCategory: userEModeCategory\r\n        })\r\n      );\r\n\r\n    require(\r\n      healthFactor >= HEALTH_FACTOR_LIQUIDATION_THRESHOLD,\r\n      Errors.HEALTH_FACTOR_LOWER_THAN_LIQUIDATION_THRESHOLD\r\n    );\r\n\r\n    return (healthFactor, hasZeroLtvCollateral);\r\n  }\r\n\r\n  /**\r\n   * @notice Validates the health factor of a user and the ltv of the asset being withdrawn.\r\n   * @param reservesData The state of all the reserves\r\n   * @param reservesList The addresses of all the active reserves\r\n   * @param eModeCategories The configuration of all the efficiency mode categories\r\n   * @param userConfig The state of the user for the specific reserve\r\n   * @param asset The asset for which the ltv will be validated\r\n   * @param from The user from which the aTokens are being transferred\r\n   * @param reservesCount The number of available reserves\r\n   * @param oracle The price oracle\r\n   * @param userEModeCategory The users active efficiency mode category\r\n   */\r\n  function validateHFAndLtv(\r\n    mapping(address => DataTypes.ReserveData) storage reservesData,\r\n    mapping(uint256 => address) storage reservesList,\r\n    mapping(uint8 => DataTypes.EModeCategory) storage eModeCategories,\r\n    DataTypes.UserConfigurationMap memory userConfig,\r\n    address asset,\r\n    address from,\r\n    uint256 reservesCount,\r\n    address oracle,\r\n    uint8 userEModeCategory\r\n  ) internal view {\r\n    DataTypes.ReserveData memory reserve = reservesData[asset];\r\n\r\n    (, bool hasZeroLtvCollateral) = validateHealthFactor(\r\n      reservesData,\r\n      reservesList,\r\n      eModeCategories,\r\n      userConfig,\r\n      from,\r\n      userEModeCategory,\r\n      reservesCount,\r\n      oracle\r\n    );\r\n\r\n    require(\r\n      !hasZeroLtvCollateral || reserve.configuration.getLtv() == 0,\r\n      Errors.LTV_VALIDATION_FAILED\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @notice Validates a transfer action.\r\n   * @param reserve The reserve object\r\n   */\r\n  function validateTransfer(DataTypes.ReserveData storage reserve) internal view {\r\n    require(!reserve.configuration.getPaused(), Errors.RESERVE_PAUSED);\r\n  }\r\n\r\n  /**\r\n   * @notice Validates a drop reserve action.\r\n   * @param reservesList The addresses of all the active reserves\r\n   * @param reserve The reserve object\r\n   * @param asset The address of the reserve's underlying asset\r\n   */\r\n  function validateDropReserve(\r\n    mapping(uint256 => address) storage reservesList,\r\n    DataTypes.ReserveData storage reserve,\r\n    address asset\r\n  ) internal view {\r\n    require(asset != address(0), Errors.ZERO_ADDRESS_NOT_VALID);\r\n    require(reserve.id != 0 || reservesList[0] == asset, Errors.ASSET_NOT_LISTED);\r\n    require(IERC20(reserve.stableDebtTokenAddress).totalSupply() == 0, Errors.STABLE_DEBT_NOT_ZERO);\r\n    require(\r\n      IERC20(reserve.variableDebtTokenAddress).totalSupply() == 0,\r\n      Errors.VARIABLE_DEBT_SUPPLY_NOT_ZERO\r\n    );\r\n    require(\r\n      IERC20(reserve.aTokenAddress).totalSupply() == 0 && reserve.accruedToTreasury == 0,\r\n      Errors.UNDERLYING_CLAIMABLE_RIGHTS_NOT_ZERO\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @notice Validates the action of setting efficiency mode.\r\n   * @param reservesData The state of all the reserves\r\n   * @param reservesList The addresses of all the active reserves\r\n   * @param eModeCategories a mapping storing configurations for all efficiency mode categories\r\n   * @param userConfig the user configuration\r\n   * @param reservesCount The total number of valid reserves\r\n   * @param categoryId The id of the category\r\n   */\r\n  function validateSetUserEMode(\r\n    mapping(address => DataTypes.ReserveData) storage reservesData,\r\n    mapping(uint256 => address) storage reservesList,\r\n    mapping(uint8 => DataTypes.EModeCategory) storage eModeCategories,\r\n    DataTypes.UserConfigurationMap memory userConfig,\r\n    uint256 reservesCount,\r\n    uint8 categoryId\r\n  ) internal view {\r\n    // category is invalid if the liq threshold is not set\r\n    require(\r\n      categoryId == 0 || eModeCategories[categoryId].liquidationThreshold != 0,\r\n      Errors.INCONSISTENT_EMODE_CATEGORY\r\n    );\r\n\r\n    // eMode can always be enabled if the user hasn't supplied anything\r\n    if (userConfig.isEmpty()) {\r\n      return;\r\n    }\r\n\r\n    // if user is trying to set another category than default we require that\r\n    // either the user is not borrowing, or it's borrowing assets of categoryId\r\n    if (categoryId != 0) {\r\n      unchecked {\r\n        for (uint256 i = 0; i < reservesCount; i++) {\r\n          if (userConfig.isBorrowing(i)) {\r\n            DataTypes.ReserveConfigurationMap memory configuration = reservesData[reservesList[i]]\r\n              .configuration;\r\n            require(\r\n              configuration.getEModeCategory() == categoryId,\r\n              Errors.INCONSISTENT_EMODE_CATEGORY\r\n            );\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @notice Validates the action of activating the asset as collateral.\r\n   * @dev Only possible if the asset has non-zero LTV and the user is not in isolation mode\r\n   * @param reservesData The state of all the reserves\r\n   * @param reservesList The addresses of all the active reserves\r\n   * @param userConfig the user configuration\r\n   * @param reserveConfig The reserve configuration\r\n   * @return True if the asset can be activated as collateral, false otherwise\r\n   */\r\n  function validateUseAsCollateral(\r\n    mapping(address => DataTypes.ReserveData) storage reservesData,\r\n    mapping(uint256 => address) storage reservesList,\r\n    DataTypes.UserConfigurationMap storage userConfig,\r\n    DataTypes.ReserveConfigurationMap memory reserveConfig,\r\n    address asset\r\n  ) internal view returns (bool) {\r\n    if (reserveConfig.getLtv() == 0) {\r\n      return false;\r\n    }\r\n    if (!userConfig.isUsingAsCollateralAny()) {\r\n      return true;\r\n    }\r\n\r\n    // if asset cannot be used as collateral due to the blacklist return false\r\n    // if it passes then continue to the isolationMode check\r\n    if (!BitmapLogic.isAssetCollateralizable(\r\n      reservesData,\r\n      reservesList,\r\n      userConfig,\r\n      asset\r\n    )) {\r\n      return false;\r\n    }\r\n\r\n    (bool isolationModeActive, , ) = userConfig.getIsolationModeState(reservesData, reservesList);\r\n\r\n    return (!isolationModeActive && reserveConfig.getDebtCeiling() == 0);\r\n  }\r\n\r\n  /**\r\n   * @notice Validates if an asset should be automatically activated as collateral in the following actions: supply,\r\n   * transfer, mint unbacked, and liquidate\r\n   * @dev This is used to ensure that isolated assets are not enabled as collateral automatically\r\n   * @param reservesData The state of all the reserves\r\n   * @param reservesList The addresses of all the active reserves\r\n   * @param userConfig the user configuration\r\n   * @param reserveConfig The reserve configuration\r\n   * @return True if the asset can be activated as collateral, false otherwise\r\n   */\r\n  function validateAutomaticUseAsCollateral(\r\n    mapping(address => DataTypes.ReserveData) storage reservesData,\r\n    mapping(uint256 => address) storage reservesList,\r\n    DataTypes.UserConfigurationMap storage userConfig,\r\n    DataTypes.ReserveConfigurationMap memory reserveConfig,\r\n    address aTokenAddress\r\n  ) internal view returns (bool) {\r\n    address asset = IAToken(aTokenAddress).UNDERLYING_ASSET_ADDRESS();\r\n    if (reserveConfig.getDebtCeiling() != 0) {\r\n      // ensures only the ISOLATED_COLLATERAL_SUPPLIER_ROLE can enable collateral as side-effect of an action\r\n      IPoolAddressesProvider addressesProvider = IncentivizedERC20(aTokenAddress)\r\n        .POOL()\r\n        .ADDRESSES_PROVIDER();\r\n      if (\r\n        !IAccessControl(addressesProvider.getACLManager()).hasRole(\r\n          ISOLATED_COLLATERAL_SUPPLIER_ROLE,\r\n          msg.sender\r\n        )\r\n      ) return false;\r\n    }\r\n    return validateUseAsCollateral(reservesData, reservesList, userConfig, reserveConfig, asset);\r\n  }\r\n}\r\n\r\n/**\r\n * @title PoolLogic library\r\n * @author Aave\r\n * @notice Implements the logic for Pool specific functions\r\n */\r\nlibrary PoolLogic {\r\n  using GPv2SafeERC20 for IERC20;\r\n  using WadRayMath for uint256;\r\n  using ReserveLogic for DataTypes.ReserveData;\r\n  using ReserveConfiguration for DataTypes.ReserveConfigurationMap;\r\n\r\n  // See `IPool` for descriptions\r\n  event MintedToTreasury(address indexed reserve, uint256 amountMinted);\r\n  event IsolationModeTotalDebtUpdated(address indexed asset, uint256 totalDebt);\r\n\r\n  /**\r\n   * @notice Initialize an asset reserve and add the reserve to the list of reserves\r\n   * @param reservesData The state of all the reserves\r\n   * @param reservesList The addresses of all the active reserves\r\n   * @param params Additional parameters needed for initiation\r\n   * @return true if appended, false if inserted at existing empty spot\r\n   */\r\n  function executeInitReserve(\r\n    mapping(address => DataTypes.ReserveData) storage reservesData,\r\n    mapping(uint256 => address) storage reservesList,\r\n    DataTypes.InitReserveParams memory params\r\n  ) external returns (bool) {\r\n    require(Address.isContract(params.asset), Errors.NOT_CONTRACT);\r\n    reservesData[params.asset].init(\r\n      params.aTokenAddress,\r\n      params.stableDebtAddress,\r\n      params.variableDebtAddress,\r\n      params.interestRateStrategyAddress\r\n    );\r\n\r\n    bool reserveAlreadyAdded = reservesData[params.asset].id != 0 ||\r\n      reservesList[0] == params.asset;\r\n    require(!reserveAlreadyAdded, Errors.RESERVE_ALREADY_ADDED);\r\n\r\n    for (uint16 i = 0; i < params.reservesCount; i++) {\r\n      if (reservesList[i] == address(0)) {\r\n        reservesData[params.asset].id = i;\r\n        reservesList[i] = params.asset;\r\n        return false;\r\n      }\r\n    }\r\n\r\n    require(params.reservesCount < params.maxNumberReserves, Errors.NO_MORE_RESERVES_ALLOWED);\r\n    reservesData[params.asset].id = params.reservesCount;\r\n    reservesList[params.reservesCount] = params.asset;\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @notice Rescue and transfer tokens locked in this contract\r\n   * @param token The address of the token\r\n   * @param to The address of the recipient\r\n   * @param amount The amount of token to transfer\r\n   */\r\n  function executeRescueTokens(address token, address to, uint256 amount) external {\r\n    IERC20(token).safeTransfer(to, amount);\r\n  }\r\n\r\n  /**\r\n   * @notice Mints the assets accrued through the reserve factor to the treasury in the form of aTokens\r\n   * @param reservesData The state of all the reserves\r\n   * @param assets The list of reserves for which the minting needs to be executed\r\n   */\r\n  function executeMintToTreasury(\r\n    mapping(address => DataTypes.ReserveData) storage reservesData,\r\n    address[] calldata assets\r\n  ) external {\r\n    for (uint256 i = 0; i < assets.length; i++) {\r\n      address assetAddress = assets[i];\r\n\r\n      DataTypes.ReserveData storage reserve = reservesData[assetAddress];\r\n\r\n      // this cover both inactive reserves and invalid reserves since the flag will be 0 for both\r\n      if (!reserve.configuration.getActive()) {\r\n        continue;\r\n      }\r\n\r\n      uint256 accruedToTreasury = reserve.accruedToTreasury;\r\n\r\n      if (accruedToTreasury != 0) {\r\n        reserve.accruedToTreasury = 0;\r\n        uint256 normalizedIncome = reserve.getNormalizedIncome();\r\n        uint256 amountToMint = accruedToTreasury.rayMul(normalizedIncome);\r\n        IAToken(reserve.aTokenAddress).mintToTreasury(amountToMint, normalizedIncome);\r\n\r\n        emit MintedToTreasury(assetAddress, amountToMint);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @notice Resets the isolation mode total debt of the given asset to zero\r\n   * @dev It requires the given asset has zero debt ceiling\r\n   * @param reservesData The state of all the reserves\r\n   * @param asset The address of the underlying asset to reset the isolationModeTotalDebt\r\n   */\r\n  function executeResetIsolationModeTotalDebt(\r\n    mapping(address => DataTypes.ReserveData) storage reservesData,\r\n    address asset\r\n  ) external {\r\n    require(reservesData[asset].configuration.getDebtCeiling() == 0, Errors.DEBT_CEILING_NOT_ZERO);\r\n    reservesData[asset].isolationModeTotalDebt = 0;\r\n    emit IsolationModeTotalDebtUpdated(asset, 0);\r\n  }\r\n\r\n  /**\r\n   * @notice Drop a reserve\r\n   * @param reservesData The state of all the reserves\r\n   * @param reservesList The addresses of all the active reserves\r\n   * @param asset The address of the underlying asset of the reserve\r\n   */\r\n  function executeDropReserve(\r\n    mapping(address => DataTypes.ReserveData) storage reservesData,\r\n    mapping(uint256 => address) storage reservesList,\r\n    address asset\r\n  ) external {\r\n    DataTypes.ReserveData storage reserve = reservesData[asset];\r\n    ValidationLogic.validateDropReserve(reservesList, reserve, asset);\r\n    reservesList[reservesData[asset].id] = address(0);\r\n    delete reservesData[asset];\r\n  }\r\n\r\n  /**\r\n   * @notice Returns the user account data across all the reserves\r\n   * @param reservesData The state of all the reserves\r\n   * @param reservesList The addresses of all the active reserves\r\n   * @param eModeCategories The configuration of all the efficiency mode categories\r\n   * @param params Additional params needed for the calculation\r\n   * @return totalCollateralBase The total collateral of the user in the base currency used by the price feed\r\n   * @return totalDebtBase The total debt of the user in the base currency used by the price feed\r\n   * @return availableBorrowsBase The borrowing power left of the user in the base currency used by the price feed\r\n   * @return currentLiquidationThreshold The liquidation threshold of the user\r\n   * @return ltv The loan to value of The user\r\n   * @return healthFactor The current health factor of the user\r\n   */\r\n  function executeGetUserAccountData(\r\n    mapping(address => DataTypes.ReserveData) storage reservesData,\r\n    mapping(uint256 => address) storage reservesList,\r\n    mapping(uint8 => DataTypes.EModeCategory) storage eModeCategories,\r\n    DataTypes.CalculateUserAccountDataParams memory params\r\n  )\r\n    external\r\n    view\r\n    returns (\r\n      uint256 totalCollateralBase,\r\n      uint256 totalDebtBase,\r\n      uint256 availableBorrowsBase,\r\n      uint256 currentLiquidationThreshold,\r\n      uint256 ltv,\r\n      uint256 healthFactor\r\n    )\r\n  {\r\n    (\r\n      totalCollateralBase,\r\n      totalDebtBase,\r\n      ltv,\r\n      currentLiquidationThreshold,\r\n      healthFactor,\r\n\r\n    ) = GenericLogic.calculateUserAccountData(reservesData, reservesList, eModeCategories, params);\r\n\r\n    availableBorrowsBase = GenericLogic.calculateAvailableBorrows(\r\n      totalCollateralBase,\r\n      totalDebtBase,\r\n      ltv\r\n    );\r\n  }\r\n}\r\n\r\n/**\r\n * @title SupplyLogic library\r\n * @author Aave\r\n * @notice Implements the base logic for supply/withdraw\r\n */\r\nlibrary SupplyLogic {\r\n  using ReserveLogic for DataTypes.ReserveCache;\r\n  using ReserveLogic for DataTypes.ReserveData;\r\n  using GPv2SafeERC20 for IERC20;\r\n  using UserConfiguration for DataTypes.UserConfigurationMap;\r\n  using ReserveConfiguration for DataTypes.ReserveConfigurationMap;\r\n  using WadRayMath for uint256;\r\n  using PercentageMath for uint256;\r\n\r\n  // See `IPool` for descriptions\r\n  event ReserveUsedAsCollateralEnabled(address indexed reserve, address indexed user);\r\n  event ReserveUsedAsCollateralDisabled(address indexed reserve, address indexed user);\r\n  event Withdraw(address indexed reserve, address indexed user, address indexed to, uint256 amount);\r\n  event Supply(\r\n    address indexed reserve,\r\n    address user,\r\n    address indexed onBehalfOf,\r\n    uint256 amount,\r\n    uint16 indexed referralCode\r\n  );\r\n\r\n  /**\r\n   * @notice Implements the supply feature. Through `supply()`, users supply assets to the Aave protocol.\r\n   * @dev Emits the `Supply()` event.\r\n   * @dev In the first supply action, `ReserveUsedAsCollateralEnabled()` is emitted, if the asset can be enabled as\r\n   * collateral.\r\n   * @param reservesData The state of all the reserves\r\n   * @param reservesList The addresses of all the active reserves\r\n   * @param userConfig The user configuration mapping that tracks the supplied/borrowed assets\r\n   * @param params The additional parameters needed to execute the supply function\r\n   */\r\n  function executeSupply(\r\n    mapping(address => DataTypes.ReserveData) storage reservesData,\r\n    mapping(uint256 => address) storage reservesList,\r\n    DataTypes.UserConfigurationMap storage userConfig,\r\n    DataTypes.ExecuteSupplyParams memory params\r\n  ) external {\r\n    DataTypes.ReserveData storage reserve = reservesData[params.asset];\r\n    DataTypes.ReserveCache memory reserveCache = reserve.cache();\r\n\r\n    reserve.updateState(reserveCache);\r\n\r\n    ValidationLogic.validateSupply(reserveCache, reserve, params.amount);\r\n\r\n    reserve.updateInterestRates(reserveCache, params.asset, params.amount, 0);\r\n\r\n    IERC20(params.asset).safeTransferFrom(msg.sender, reserveCache.aTokenAddress, params.amount);\r\n\r\n    bool isFirstSupply = IAToken(reserveCache.aTokenAddress).mint(\r\n      msg.sender,\r\n      params.onBehalfOf,\r\n      params.amount,\r\n      reserveCache.nextLiquidityIndex\r\n    );\r\n\r\n    if (isFirstSupply) {\r\n      if (\r\n        ValidationLogic.validateAutomaticUseAsCollateral(\r\n          reservesData,\r\n          reservesList,\r\n          userConfig,\r\n          reserveCache.reserveConfiguration,\r\n          reserveCache.aTokenAddress\r\n        )\r\n      ) {\r\n        userConfig.setUsingAsCollateral(reserve.id, true);\r\n        emit ReserveUsedAsCollateralEnabled(params.asset, params.onBehalfOf);\r\n      }\r\n    }\r\n\r\n    emit Supply(params.asset, msg.sender, params.onBehalfOf, params.amount, params.referralCode);\r\n  }\r\n\r\n  /**\r\n   * @notice Implements the withdraw feature. Through `withdraw()`, users redeem their aTokens for the underlying asset\r\n   * previously supplied in the Aave protocol.\r\n   * @dev Emits the `Withdraw()` event.\r\n   * @dev If the user withdraws everything, `ReserveUsedAsCollateralDisabled()` is emitted.\r\n   * @param reservesData The state of all the reserves\r\n   * @param reservesList The addresses of all the active reserves\r\n   * @param eModeCategories The configuration of all the efficiency mode categories\r\n   * @param userConfig The user configuration mapping that tracks the supplied/borrowed assets\r\n   * @param params The additional parameters needed to execute the withdraw function\r\n   * @return The actual amount withdrawn\r\n   */\r\n  function executeWithdraw(\r\n    mapping(address => DataTypes.ReserveData) storage reservesData,\r\n    mapping(uint256 => address) storage reservesList,\r\n    mapping(uint8 => DataTypes.EModeCategory) storage eModeCategories,\r\n    DataTypes.UserConfigurationMap storage userConfig,\r\n    DataTypes.ExecuteWithdrawParams memory params\r\n  ) external returns (uint256) {\r\n    DataTypes.ReserveData storage reserve = reservesData[params.asset];\r\n    DataTypes.ReserveCache memory reserveCache = reserve.cache();\r\n\r\n    reserve.updateState(reserveCache);\r\n\r\n    uint256 userBalance = IAToken(reserveCache.aTokenAddress).scaledBalanceOf(msg.sender).rayMul(\r\n      reserveCache.nextLiquidityIndex\r\n    );\r\n\r\n    uint256 amountToWithdraw = params.amount;\r\n\r\n    if (params.amount == type(uint256).max) {\r\n      amountToWithdraw = userBalance;\r\n    }\r\n\r\n    ValidationLogic.validateWithdraw(reserveCache, amountToWithdraw, userBalance);\r\n\r\n    reserve.updateInterestRates(reserveCache, params.asset, 0, amountToWithdraw);\r\n\r\n    bool isCollateral = userConfig.isUsingAsCollateral(reserve.id);\r\n\r\n    if (isCollateral && amountToWithdraw == userBalance) {\r\n      userConfig.setUsingAsCollateral(reserve.id, false);\r\n      emit ReserveUsedAsCollateralDisabled(params.asset, msg.sender);\r\n    }\r\n\r\n    IAToken(reserveCache.aTokenAddress).burn(\r\n      msg.sender,\r\n      params.to,\r\n      amountToWithdraw,\r\n      reserveCache.nextLiquidityIndex\r\n    );\r\n\r\n    if (isCollateral && userConfig.isBorrowingAny()) {\r\n      ValidationLogic.validateHFAndLtv(\r\n        reservesData,\r\n        reservesList,\r\n        eModeCategories,\r\n        userConfig,\r\n        params.asset,\r\n        msg.sender,\r\n        params.reservesCount,\r\n        params.oracle,\r\n        params.userEModeCategory\r\n      );\r\n    }\r\n\r\n    emit Withdraw(params.asset, msg.sender, params.to, amountToWithdraw);\r\n\r\n    return amountToWithdraw;\r\n  }\r\n\r\n  /**\r\n   * @notice Validates a transfer of aTokens. The sender is subjected to health factor validation to avoid\r\n   * collateralization constraints violation.\r\n   * @dev Emits the `ReserveUsedAsCollateralEnabled()` event for the `to` account, if the asset is being activated as\r\n   * collateral.\r\n   * @dev In case the `from` user transfers everything, `ReserveUsedAsCollateralDisabled()` is emitted for `from`.\r\n   * @param reservesData The state of all the reserves\r\n   * @param reservesList The addresses of all the active reserves\r\n   * @param eModeCategories The configuration of all the efficiency mode categories\r\n   * @param usersConfig The users configuration mapping that track the supplied/borrowed assets\r\n   * @param params The additional parameters needed to execute the finalizeTransfer function\r\n   */\r\n  function executeFinalizeTransfer(\r\n    mapping(address => DataTypes.ReserveData) storage reservesData,\r\n    mapping(uint256 => address) storage reservesList,\r\n    mapping(uint8 => DataTypes.EModeCategory) storage eModeCategories,\r\n    mapping(address => DataTypes.UserConfigurationMap) storage usersConfig,\r\n    DataTypes.FinalizeTransferParams memory params\r\n  ) external {\r\n    DataTypes.ReserveData storage reserve = reservesData[params.asset];\r\n\r\n    ValidationLogic.validateTransfer(reserve);\r\n\r\n    uint256 reserveId = reserve.id;\r\n\r\n    if (params.from != params.to && params.amount != 0) {\r\n      DataTypes.UserConfigurationMap storage fromConfig = usersConfig[params.from];\r\n\r\n      if (fromConfig.isUsingAsCollateral(reserveId)) {\r\n        if (fromConfig.isBorrowingAny()) {\r\n          ValidationLogic.validateHFAndLtv(\r\n            reservesData,\r\n            reservesList,\r\n            eModeCategories,\r\n            usersConfig[params.from],\r\n            params.asset,\r\n            params.from,\r\n            params.reservesCount,\r\n            params.oracle,\r\n            params.fromEModeCategory\r\n          );\r\n        }\r\n        if (params.balanceFromBefore == params.amount) {\r\n          fromConfig.setUsingAsCollateral(reserveId, false);\r\n          emit ReserveUsedAsCollateralDisabled(params.asset, params.from);\r\n        }\r\n      }\r\n\r\n      if (params.balanceToBefore == 0) {\r\n        DataTypes.UserConfigurationMap storage toConfig = usersConfig[params.to];\r\n        if (\r\n          ValidationLogic.validateAutomaticUseAsCollateral(\r\n            reservesData,\r\n            reservesList,\r\n            toConfig,\r\n            reserve.configuration,\r\n            reserve.aTokenAddress\r\n          )\r\n        ) {\r\n          toConfig.setUsingAsCollateral(reserveId, true);\r\n          emit ReserveUsedAsCollateralEnabled(params.asset, params.to);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @notice Executes the 'set as collateral' feature. A user can choose to activate or deactivate an asset as\r\n   * collateral at any point in time. Deactivating an asset as collateral is subjected to the usual health factor\r\n   * checks to ensure collateralization.\r\n   * @dev Emits the `ReserveUsedAsCollateralEnabled()` event if the asset can be activated as collateral.\r\n   * @dev In case the asset is being deactivated as collateral, `ReserveUsedAsCollateralDisabled()` is emitted.\r\n   * @param reservesData The state of all the reserves\r\n   * @param reservesList The addresses of all the active reserves\r\n   * @param eModeCategories The configuration of all the efficiency mode categories\r\n   * @param userConfig The users configuration mapping that track the supplied/borrowed assets\r\n   * @param asset The address of the asset being configured as collateral\r\n   * @param useAsCollateral True if the user wants to set the asset as collateral, false otherwise\r\n   * @param reservesCount The number of initialized reserves\r\n   * @param priceOracle The address of the price oracle\r\n   * @param userEModeCategory The eMode category chosen by the user\r\n   */\r\n  function executeUseReserveAsCollateral(\r\n    mapping(address => DataTypes.ReserveData) storage reservesData,\r\n    mapping(uint256 => address) storage reservesList,\r\n    mapping(uint8 => DataTypes.EModeCategory) storage eModeCategories,\r\n    DataTypes.UserConfigurationMap storage userConfig,\r\n    address asset,\r\n    bool useAsCollateral,\r\n    uint256 reservesCount,\r\n    address priceOracle,\r\n    uint8 userEModeCategory\r\n  ) external {\r\n    DataTypes.ReserveData storage reserve = reservesData[asset];\r\n    DataTypes.ReserveCache memory reserveCache = reserve.cache();\r\n\r\n    uint256 userBalance = IERC20(reserveCache.aTokenAddress).balanceOf(msg.sender);\r\n\r\n    ValidationLogic.validateSetUseReserveAsCollateral(reserveCache, userBalance);\r\n\r\n    if (useAsCollateral == userConfig.isUsingAsCollateral(reserve.id)) return;\r\n\r\n    if (useAsCollateral) {\r\n      require(\r\n        ValidationLogic.validateUseAsCollateral(\r\n          reservesData,\r\n          reservesList,\r\n          userConfig,\r\n          reserveCache.reserveConfiguration,\r\n          asset\r\n        ),\r\n        Errors.USER_IN_ISOLATION_MODE_OR_LTV_ZERO_OR_BORROWED_BLACKLISTED_ASSET\r\n      );\r\n\r\n      userConfig.setUsingAsCollateral(reserve.id, true);\r\n      emit ReserveUsedAsCollateralEnabled(asset, msg.sender);\r\n    } else {\r\n      userConfig.setUsingAsCollateral(reserve.id, false);\r\n      ValidationLogic.validateHFAndLtv(\r\n        reservesData,\r\n        reservesList,\r\n        eModeCategories,\r\n        userConfig,\r\n        asset,\r\n        msg.sender,\r\n        reservesCount,\r\n        priceOracle,\r\n        userEModeCategory\r\n      );\r\n\r\n      emit ReserveUsedAsCollateralDisabled(asset, msg.sender);\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * @title IFlashLoanReceiver\r\n * @author Aave\r\n * @notice Defines the basic interface of a flashloan-receiver contract.\r\n * @dev Implement this interface to develop a flashloan-compatible flashLoanReceiver contract\r\n */\r\ninterface IFlashLoanReceiver {\r\n  /**\r\n   * @notice Executes an operation after receiving the flash-borrowed assets\r\n   * @dev Ensure that the contract can return the debt + premium, e.g., has\r\n   *      enough funds to repay and has approved the Pool to pull the total amount\r\n   * @param assets The addresses of the flash-borrowed assets\r\n   * @param amounts The amounts of the flash-borrowed assets\r\n   * @param premiums The fee of each flash-borrowed asset\r\n   * @param initiator The address of the flashloan initiator\r\n   * @param params The byte-encoded params passed when initiating the flashloan\r\n   * @return True if the execution of the operation succeeds, false otherwise\r\n   */\r\n  function executeOperation(\r\n    address[] calldata assets,\r\n    uint256[] calldata amounts,\r\n    uint256[] calldata premiums,\r\n    address initiator,\r\n    bytes calldata params\r\n  ) external returns (bool);\r\n\r\n  function ADDRESSES_PROVIDER() external view returns (IPoolAddressesProvider);\r\n\r\n  function POOL() external view returns (IPool);\r\n}\r\n\r\n/**\r\n * @title IFlashLoanSimpleReceiver\r\n * @author Aave\r\n * @notice Defines the basic interface of a flashloan-receiver contract.\r\n * @dev Implement this interface to develop a flashloan-compatible flashLoanReceiver contract\r\n */\r\ninterface IFlashLoanSimpleReceiver {\r\n  /**\r\n   * @notice Executes an operation after receiving the flash-borrowed asset\r\n   * @dev Ensure that the contract can return the debt + premium, e.g., has\r\n   *      enough funds to repay and has approved the Pool to pull the total amount\r\n   * @param asset The address of the flash-borrowed asset\r\n   * @param amount The amount of the flash-borrowed asset\r\n   * @param premium The fee of the flash-borrowed asset\r\n   * @param initiator The address of the flashloan initiator\r\n   * @param params The byte-encoded params passed when initiating the flashloan\r\n   * @return True if the execution of the operation succeeds, false otherwise\r\n   */\r\n  function executeOperation(\r\n    address asset,\r\n    uint256 amount,\r\n    uint256 premium,\r\n    address initiator,\r\n    bytes calldata params\r\n  ) external returns (bool);\r\n\r\n  function ADDRESSES_PROVIDER() external view returns (IPoolAddressesProvider);\r\n\r\n  function POOL() external view returns (IPool);\r\n}\r\n\r\n/**\r\n * @title IsolationModeLogic library\r\n * @author Aave\r\n * @notice Implements the base logic for handling repayments for assets borrowed in isolation mode\r\n */\r\nlibrary IsolationModeLogic {\r\n  using ReserveConfiguration for DataTypes.ReserveConfigurationMap;\r\n  using UserConfiguration for DataTypes.UserConfigurationMap;\r\n  using SafeCast for uint256;\r\n\r\n  // See `IPool` for descriptions\r\n  event IsolationModeTotalDebtUpdated(address indexed asset, uint256 totalDebt);\r\n\r\n  /**\r\n   * @notice updated the isolated debt whenever a position collateralized by an isolated asset is repaid or liquidated\r\n   * @param reservesData The state of all the reserves\r\n   * @param reservesList The addresses of all the active reserves\r\n   * @param userConfig The user configuration mapping\r\n   * @param reserveCache The cached data of the reserve\r\n   * @param repayAmount The amount being repaid\r\n   */\r\n  function updateIsolatedDebtIfIsolated(\r\n    mapping(address => DataTypes.ReserveData) storage reservesData,\r\n    mapping(uint256 => address) storage reservesList,\r\n    DataTypes.UserConfigurationMap storage userConfig,\r\n    DataTypes.ReserveCache memory reserveCache,\r\n    uint256 repayAmount\r\n  ) internal {\r\n    (bool isolationModeActive, address isolationModeCollateralAddress, ) = userConfig\r\n      .getIsolationModeState(reservesData, reservesList);\r\n\r\n    if (isolationModeActive) {\r\n      uint128 isolationModeTotalDebt = reservesData[isolationModeCollateralAddress]\r\n        .isolationModeTotalDebt;\r\n\r\n      uint128 isolatedDebtRepaid = (repayAmount /\r\n        10 **\r\n          (reserveCache.reserveConfiguration.getDecimals() -\r\n            ReserveConfiguration.DEBT_CEILING_DECIMALS)).toUint128();\r\n\r\n      // since the debt ceiling does not take into account the interest accrued, it might happen that amount\r\n      // repaid > debt in isolation mode\r\n      if (isolationModeTotalDebt <= isolatedDebtRepaid) {\r\n        reservesData[isolationModeCollateralAddress].isolationModeTotalDebt = 0;\r\n        emit IsolationModeTotalDebtUpdated(isolationModeCollateralAddress, 0);\r\n      } else {\r\n        uint256 nextIsolationModeTotalDebt = reservesData[isolationModeCollateralAddress]\r\n          .isolationModeTotalDebt = isolationModeTotalDebt - isolatedDebtRepaid;\r\n        emit IsolationModeTotalDebtUpdated(\r\n          isolationModeCollateralAddress,\r\n          nextIsolationModeTotalDebt\r\n        );\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * @title BorrowLogic library\r\n * @author Aave\r\n * @notice Implements the base logic for all the actions related to borrowing\r\n */\r\nlibrary BorrowLogic {\r\n  using ReserveLogic for DataTypes.ReserveCache;\r\n  using ReserveLogic for DataTypes.ReserveData;\r\n  using GPv2SafeERC20 for IERC20;\r\n  using UserConfiguration for DataTypes.UserConfigurationMap;\r\n  using ReserveConfiguration for DataTypes.ReserveConfigurationMap;\r\n  using SafeCast for uint256;\r\n\r\n  // See `IPool` for descriptions\r\n  event Borrow(\r\n    address indexed reserve,\r\n    address user,\r\n    address indexed onBehalfOf,\r\n    uint256 amount,\r\n    DataTypes.InterestRateMode interestRateMode,\r\n    uint256 borrowRate,\r\n    uint16 indexed referralCode\r\n  );\r\n  event Repay(\r\n    address indexed reserve,\r\n    address indexed user,\r\n    address indexed repayer,\r\n    uint256 amount,\r\n    bool useATokens\r\n  );\r\n  event RebalanceStableBorrowRate(address indexed reserve, address indexed user);\r\n  event SwapBorrowRateMode(\r\n    address indexed reserve,\r\n    address indexed user,\r\n    DataTypes.InterestRateMode interestRateMode\r\n  );\r\n  event IsolationModeTotalDebtUpdated(address indexed asset, uint256 totalDebt);\r\n\r\n  /**\r\n   * @notice Implements the borrow feature. Borrowing allows users that provided collateral to draw liquidity from the\r\n   * Aave protocol proportionally to their collateralization power. For isolated positions, it also increases the\r\n   * isolated debt.\r\n   * @dev  Emits the `Borrow()` event\r\n   * @param reservesData The state of all the reserves\r\n   * @param reservesList The addresses of all the active reserves\r\n   * @param eModeCategories The configuration of all the efficiency mode categories\r\n   * @param userConfig The user configuration mapping that tracks the supplied/borrowed assets\r\n   * @param params The additional parameters needed to execute the borrow function\r\n   */\r\n  function executeBorrow(\r\n    mapping(address => DataTypes.ReserveData) storage reservesData,\r\n    mapping(uint256 => address) storage reservesList,\r\n    mapping(uint8 => DataTypes.EModeCategory) storage eModeCategories,\r\n    DataTypes.UserConfigurationMap storage userConfig,\r\n    DataTypes.ExecuteBorrowParams memory params\r\n  ) public {\r\n    DataTypes.ReserveData storage reserve = reservesData[params.asset];\r\n    DataTypes.ReserveCache memory reserveCache = reserve.cache();\r\n\r\n    reserve.updateState(reserveCache);\r\n\r\n    (\r\n      bool isolationModeActive,\r\n      address isolationModeCollateralAddress,\r\n      uint256 isolationModeDebtCeiling\r\n    ) = userConfig.getIsolationModeState(reservesData, reservesList);\r\n\r\n    ValidationLogic.validateBorrow(\r\n      reservesData,\r\n      reservesList,\r\n      eModeCategories,\r\n      DataTypes.ValidateBorrowParams({\r\n        reserveCache: reserveCache,\r\n        userConfig: userConfig,\r\n        asset: params.asset,\r\n        userAddress: params.onBehalfOf,\r\n        amount: params.amount,\r\n        interestRateMode: params.interestRateMode,\r\n        maxStableLoanPercent: params.maxStableRateBorrowSizePercent,\r\n        reservesCount: params.reservesCount,\r\n        oracle: params.oracle,\r\n        userEModeCategory: params.userEModeCategory,\r\n        priceOracleSentinel: params.priceOracleSentinel,\r\n        isolationModeActive: isolationModeActive,\r\n        isolationModeCollateralAddress: isolationModeCollateralAddress,\r\n        isolationModeDebtCeiling: isolationModeDebtCeiling\r\n      })\r\n    );\r\n\r\n    uint256 currentStableRate = 0;\r\n    bool isFirstBorrowing = false;\r\n\r\n    if (params.interestRateMode == DataTypes.InterestRateMode.STABLE) {\r\n      currentStableRate = reserve.currentStableBorrowRate;\r\n\r\n      (\r\n        isFirstBorrowing,\r\n        reserveCache.nextTotalStableDebt,\r\n        reserveCache.nextAvgStableBorrowRate\r\n      ) = IStableDebtToken(reserveCache.stableDebtTokenAddress).mint(\r\n        params.user,\r\n        params.onBehalfOf,\r\n        params.amount,\r\n        currentStableRate\r\n      );\r\n    } else {\r\n      (isFirstBorrowing, reserveCache.nextScaledVariableDebt) = IVariableDebtToken(\r\n        reserveCache.variableDebtTokenAddress\r\n      ).mint(params.user, params.onBehalfOf, params.amount, reserveCache.nextVariableBorrowIndex);\r\n    }\r\n\r\n    if (isFirstBorrowing) {\r\n      userConfig.setBorrowing(reserve.id, true);\r\n    }\r\n\r\n    if (isolationModeActive) {\r\n      uint256 nextIsolationModeTotalDebt = reservesData[isolationModeCollateralAddress]\r\n        .isolationModeTotalDebt += (params.amount /\r\n        10 **\r\n          (reserveCache.reserveConfiguration.getDecimals() -\r\n            ReserveConfiguration.DEBT_CEILING_DECIMALS)).toUint128();\r\n      emit IsolationModeTotalDebtUpdated(\r\n        isolationModeCollateralAddress,\r\n        nextIsolationModeTotalDebt\r\n      );\r\n    }\r\n\r\n    reserve.updateInterestRates(\r\n      reserveCache,\r\n      params.asset,\r\n      0,\r\n      params.releaseUnderlying ? params.amount : 0\r\n    );\r\n\r\n    if (params.releaseUnderlying) {\r\n      IAToken(reserveCache.aTokenAddress).transferUnderlyingTo(params.user, params.amount);\r\n    }\r\n\r\n    emit Borrow(\r\n      params.asset,\r\n      params.user,\r\n      params.onBehalfOf,\r\n      params.amount,\r\n      params.interestRateMode,\r\n      params.interestRateMode == DataTypes.InterestRateMode.STABLE\r\n        ? currentStableRate\r\n        : reserve.currentVariableBorrowRate,\r\n      params.referralCode\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @notice Implements the repay feature. Repaying transfers the underlying back to the aToken and clears the\r\n   * equivalent amount of debt for the user by burning the corresponding debt token. For isolated positions, it also\r\n   * reduces the isolated debt.\r\n   * @dev  Emits the `Repay()` event\r\n   * @param reservesData The state of all the reserves\r\n   * @param reservesList The addresses of all the active reserves\r\n   * @param userConfig The user configuration mapping that tracks the supplied/borrowed assets\r\n   * @param params The additional parameters needed to execute the repay function\r\n   * @return The actual amount being repaid\r\n   */\r\n  function executeRepay(\r\n    mapping(address => DataTypes.ReserveData) storage reservesData,\r\n    mapping(uint256 => address) storage reservesList,\r\n    DataTypes.UserConfigurationMap storage userConfig,\r\n    DataTypes.ExecuteRepayParams memory params\r\n  ) external returns (uint256) {\r\n    DataTypes.ReserveData storage reserve = reservesData[params.asset];\r\n    DataTypes.ReserveCache memory reserveCache = reserve.cache();\r\n    reserve.updateState(reserveCache);\r\n\r\n    (uint256 stableDebt, uint256 variableDebt) = Helpers.getUserCurrentDebt(\r\n      params.onBehalfOf,\r\n      reserveCache\r\n    );\r\n\r\n    ValidationLogic.validateRepay(\r\n      reserveCache,\r\n      params.amount,\r\n      params.interestRateMode,\r\n      params.onBehalfOf,\r\n      stableDebt,\r\n      variableDebt\r\n    );\r\n\r\n    uint256 paybackAmount = params.interestRateMode == DataTypes.InterestRateMode.STABLE\r\n      ? stableDebt\r\n      : variableDebt;\r\n\r\n    // Allows a user to repay with aTokens without leaving dust from interest.\r\n    if (params.useATokens && params.amount == type(uint256).max) {\r\n      params.amount = IAToken(reserveCache.aTokenAddress).balanceOf(msg.sender);\r\n    }\r\n\r\n    if (params.amount < paybackAmount) {\r\n      paybackAmount = params.amount;\r\n    }\r\n\r\n    if (params.interestRateMode == DataTypes.InterestRateMode.STABLE) {\r\n      (reserveCache.nextTotalStableDebt, reserveCache.nextAvgStableBorrowRate) = IStableDebtToken(\r\n        reserveCache.stableDebtTokenAddress\r\n      ).burn(params.onBehalfOf, paybackAmount);\r\n    } else {\r\n      reserveCache.nextScaledVariableDebt = IVariableDebtToken(\r\n        reserveCache.variableDebtTokenAddress\r\n      ).burn(params.onBehalfOf, paybackAmount, reserveCache.nextVariableBorrowIndex);\r\n    }\r\n\r\n    reserve.updateInterestRates(\r\n      reserveCache,\r\n      params.asset,\r\n      params.useATokens ? 0 : paybackAmount,\r\n      0\r\n    );\r\n\r\n    if (stableDebt + variableDebt - paybackAmount == 0) {\r\n      userConfig.setBorrowing(reserve.id, false);\r\n    }\r\n\r\n    IsolationModeLogic.updateIsolatedDebtIfIsolated(\r\n      reservesData,\r\n      reservesList,\r\n      userConfig,\r\n      reserveCache,\r\n      paybackAmount\r\n    );\r\n\r\n    if (params.useATokens) {\r\n      IAToken(reserveCache.aTokenAddress).burn(\r\n        msg.sender,\r\n        reserveCache.aTokenAddress,\r\n        paybackAmount,\r\n        reserveCache.nextLiquidityIndex\r\n      );\r\n    } else {\r\n      IERC20(params.asset).safeTransferFrom(msg.sender, reserveCache.aTokenAddress, paybackAmount);\r\n      IAToken(reserveCache.aTokenAddress).handleRepayment(\r\n        msg.sender,\r\n        params.onBehalfOf,\r\n        paybackAmount\r\n      );\r\n    }\r\n\r\n    emit Repay(params.asset, params.onBehalfOf, msg.sender, paybackAmount, params.useATokens);\r\n\r\n    return paybackAmount;\r\n  }\r\n\r\n  /**\r\n   * @notice Implements the rebalance stable borrow rate feature. In case of liquidity crunches on the protocol, stable\r\n   * rate borrows might need to be rebalanced to bring back equilibrium between the borrow and supply APYs.\r\n   * @dev The rules that define if a position can be rebalanced are implemented in `ValidationLogic.validateRebalanceStableBorrowRate()`\r\n   * @dev Emits the `RebalanceStableBorrowRate()` event\r\n   * @param reserve The state of the reserve of the asset being repaid\r\n   * @param asset The asset of the position being rebalanced\r\n   * @param user The user being rebalanced\r\n   */\r\n  function executeRebalanceStableBorrowRate(\r\n    DataTypes.ReserveData storage reserve,\r\n    address asset,\r\n    address user\r\n  ) external {\r\n    DataTypes.ReserveCache memory reserveCache = reserve.cache();\r\n    reserve.updateState(reserveCache);\r\n\r\n    ValidationLogic.validateRebalanceStableBorrowRate(reserve, reserveCache, asset);\r\n\r\n    IStableDebtToken stableDebtToken = IStableDebtToken(reserveCache.stableDebtTokenAddress);\r\n    uint256 stableDebt = IERC20(address(stableDebtToken)).balanceOf(user);\r\n\r\n    stableDebtToken.burn(user, stableDebt);\r\n\r\n    (, reserveCache.nextTotalStableDebt, reserveCache.nextAvgStableBorrowRate) = stableDebtToken\r\n      .mint(user, user, stableDebt, reserve.currentStableBorrowRate);\r\n\r\n    reserve.updateInterestRates(reserveCache, asset, 0, 0);\r\n\r\n    emit RebalanceStableBorrowRate(asset, user);\r\n  }\r\n\r\n  /**\r\n   * @notice Implements the swap borrow rate feature. Borrowers can swap from variable to stable positions at any time.\r\n   * @dev Emits the `Swap()` event\r\n   * @param reserve The of the reserve of the asset being repaid\r\n   * @param userConfig The user configuration mapping that tracks the supplied/borrowed assets\r\n   * @param asset The asset of the position being swapped\r\n   * @param interestRateMode The current interest rate mode of the position being swapped\r\n   */\r\n  function executeSwapBorrowRateMode(\r\n    DataTypes.ReserveData storage reserve,\r\n    DataTypes.UserConfigurationMap storage userConfig,\r\n    address asset,\r\n    DataTypes.InterestRateMode interestRateMode\r\n  ) external {\r\n    DataTypes.ReserveCache memory reserveCache = reserve.cache();\r\n\r\n    reserve.updateState(reserveCache);\r\n\r\n    (uint256 stableDebt, uint256 variableDebt) = Helpers.getUserCurrentDebt(\r\n      msg.sender,\r\n      reserveCache\r\n    );\r\n\r\n    ValidationLogic.validateSwapRateMode(\r\n      reserve,\r\n      reserveCache,\r\n      userConfig,\r\n      stableDebt,\r\n      variableDebt,\r\n      interestRateMode\r\n    );\r\n\r\n    if (interestRateMode == DataTypes.InterestRateMode.STABLE) {\r\n      (reserveCache.nextTotalStableDebt, reserveCache.nextAvgStableBorrowRate) = IStableDebtToken(\r\n        reserveCache.stableDebtTokenAddress\r\n      ).burn(msg.sender, stableDebt);\r\n\r\n      (, reserveCache.nextScaledVariableDebt) = IVariableDebtToken(\r\n        reserveCache.variableDebtTokenAddress\r\n      ).mint(msg.sender, msg.sender, stableDebt, reserveCache.nextVariableBorrowIndex);\r\n    } else {\r\n      reserveCache.nextScaledVariableDebt = IVariableDebtToken(\r\n        reserveCache.variableDebtTokenAddress\r\n      ).burn(msg.sender, variableDebt, reserveCache.nextVariableBorrowIndex);\r\n\r\n      (, reserveCache.nextTotalStableDebt, reserveCache.nextAvgStableBorrowRate) = IStableDebtToken(\r\n        reserveCache.stableDebtTokenAddress\r\n      ).mint(msg.sender, msg.sender, variableDebt, reserve.currentStableBorrowRate);\r\n    }\r\n\r\n    reserve.updateInterestRates(reserveCache, asset, 0, 0);\r\n\r\n    emit SwapBorrowRateMode(asset, msg.sender, interestRateMode);\r\n  }\r\n}\r\n\r\n/**\r\n * @title FlashLoanLogic library\r\n * @author Aave\r\n * @notice Implements the logic for the flash loans\r\n */\r\nlibrary FlashLoanLogic {\r\n  using ReserveLogic for DataTypes.ReserveCache;\r\n  using ReserveLogic for DataTypes.ReserveData;\r\n  using GPv2SafeERC20 for IERC20;\r\n  using ReserveConfiguration for DataTypes.ReserveConfigurationMap;\r\n  using WadRayMath for uint256;\r\n  using PercentageMath for uint256;\r\n  using SafeCast for uint256;\r\n\r\n  // See `IPool` for descriptions\r\n  event FlashLoan(\r\n    address indexed target,\r\n    address initiator,\r\n    address indexed asset,\r\n    uint256 amount,\r\n    DataTypes.InterestRateMode interestRateMode,\r\n    uint256 premium,\r\n    uint16 indexed referralCode\r\n  );\r\n\r\n  // Helper struct for internal variables used in the `executeFlashLoan` function\r\n  struct FlashLoanLocalVars {\r\n    IFlashLoanReceiver receiver;\r\n    uint256 i;\r\n    address currentAsset;\r\n    uint256 currentAmount;\r\n    uint256[] totalPremiums;\r\n    uint256 flashloanPremiumTotal;\r\n    uint256 flashloanPremiumToProtocol;\r\n  }\r\n\r\n  /**\r\n   * @notice Implements the flashloan feature that allow users to access liquidity of the pool for one transaction\r\n   * as long as the amount taken plus fee is returned or debt is opened.\r\n   * @dev For authorized flashborrowers the fee is waived\r\n   * @dev At the end of the transaction the pool will pull amount borrowed + fee from the receiver,\r\n   * if the receiver have not approved the pool the transaction will revert.\r\n   * @dev Emits the `FlashLoan()` event\r\n   * @param reservesData The state of all the reserves\r\n   * @param reservesList The addresses of all the active reserves\r\n   * @param eModeCategories The configuration of all the efficiency mode categories\r\n   * @param userConfig The user configuration mapping that tracks the supplied/borrowed assets\r\n   * @param params The additional parameters needed to execute the flashloan function\r\n   */\r\n  function executeFlashLoan(\r\n    mapping(address => DataTypes.ReserveData) storage reservesData,\r\n    mapping(uint256 => address) storage reservesList,\r\n    mapping(uint8 => DataTypes.EModeCategory) storage eModeCategories,\r\n    DataTypes.UserConfigurationMap storage userConfig,\r\n    DataTypes.FlashloanParams memory params\r\n  ) external {\r\n    // The usual action flow (cache -> updateState -> validation -> changeState -> updateRates)\r\n    // is altered to (validation -> user payload -> cache -> updateState -> changeState -> updateRates) for flashloans.\r\n    // This is done to protect against reentrance and rate manipulation within the user specified payload.\r\n\r\n    ValidationLogic.validateFlashloan(reservesData, params.assets, params.amounts);\r\n\r\n    FlashLoanLocalVars memory vars;\r\n\r\n    vars.totalPremiums = new uint256[](params.assets.length);\r\n\r\n    vars.receiver = IFlashLoanReceiver(params.receiverAddress);\r\n    (vars.flashloanPremiumTotal, vars.flashloanPremiumToProtocol) = params.isAuthorizedFlashBorrower\r\n      ? (0, 0)\r\n      : (params.flashLoanPremiumTotal, params.flashLoanPremiumToProtocol);\r\n\r\n    for (vars.i = 0; vars.i < params.assets.length; vars.i++) {\r\n      vars.currentAmount = params.amounts[vars.i];\r\n      vars.totalPremiums[vars.i] = DataTypes.InterestRateMode(params.interestRateModes[vars.i]) ==\r\n        DataTypes.InterestRateMode.NONE\r\n        ? vars.currentAmount.percentMul(vars.flashloanPremiumTotal)\r\n        : 0;\r\n      IAToken(reservesData[params.assets[vars.i]].aTokenAddress).transferUnderlyingTo(\r\n        params.receiverAddress,\r\n        vars.currentAmount\r\n      );\r\n    }\r\n\r\n    require(\r\n      vars.receiver.executeOperation(\r\n        params.assets,\r\n        params.amounts,\r\n        vars.totalPremiums,\r\n        msg.sender,\r\n        params.params\r\n      ),\r\n      Errors.INVALID_FLASHLOAN_EXECUTOR_RETURN\r\n    );\r\n\r\n    for (vars.i = 0; vars.i < params.assets.length; vars.i++) {\r\n      vars.currentAsset = params.assets[vars.i];\r\n      vars.currentAmount = params.amounts[vars.i];\r\n\r\n      if (\r\n        DataTypes.InterestRateMode(params.interestRateModes[vars.i]) ==\r\n        DataTypes.InterestRateMode.NONE\r\n      ) {\r\n        _handleFlashLoanRepayment(\r\n          reservesData[vars.currentAsset],\r\n          DataTypes.FlashLoanRepaymentParams({\r\n            asset: vars.currentAsset,\r\n            receiverAddress: params.receiverAddress,\r\n            amount: vars.currentAmount,\r\n            totalPremium: vars.totalPremiums[vars.i],\r\n            flashLoanPremiumToProtocol: vars.flashloanPremiumToProtocol,\r\n            referralCode: params.referralCode\r\n          })\r\n        );\r\n      } else {\r\n        // If the user chose to not return the funds, the system checks if there is enough collateral and\r\n        // eventually opens a debt position\r\n        BorrowLogic.executeBorrow(\r\n          reservesData,\r\n          reservesList,\r\n          eModeCategories,\r\n          userConfig,\r\n          DataTypes.ExecuteBorrowParams({\r\n            asset: vars.currentAsset,\r\n            user: msg.sender,\r\n            onBehalfOf: params.onBehalfOf,\r\n            amount: vars.currentAmount,\r\n            interestRateMode: DataTypes.InterestRateMode(params.interestRateModes[vars.i]),\r\n            referralCode: params.referralCode,\r\n            releaseUnderlying: false,\r\n            maxStableRateBorrowSizePercent: params.maxStableRateBorrowSizePercent,\r\n            reservesCount: params.reservesCount,\r\n            oracle: IPoolAddressesProvider(params.addressesProvider).getPriceOracle(),\r\n            userEModeCategory: params.userEModeCategory,\r\n            priceOracleSentinel: IPoolAddressesProvider(params.addressesProvider)\r\n              .getPriceOracleSentinel()\r\n          })\r\n        );\r\n        // no premium is paid when taking on the flashloan as debt\r\n        emit FlashLoan(\r\n          params.receiverAddress,\r\n          msg.sender,\r\n          vars.currentAsset,\r\n          vars.currentAmount,\r\n          DataTypes.InterestRateMode(params.interestRateModes[vars.i]),\r\n          0,\r\n          params.referralCode\r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @notice Implements the simple flashloan feature that allow users to access liquidity of ONE reserve for one\r\n   * transaction as long as the amount taken plus fee is returned.\r\n   * @dev Does not waive fee for approved flashborrowers nor allow taking on debt instead of repaying to save gas\r\n   * @dev At the end of the transaction the pool will pull amount borrowed + fee from the receiver,\r\n   * if the receiver have not approved the pool the transaction will revert.\r\n   * @dev Emits the `FlashLoan()` event\r\n   * @param reserve The state of the flashloaned reserve\r\n   * @param params The additional parameters needed to execute the simple flashloan function\r\n   */\r\n  function executeFlashLoanSimple(\r\n    DataTypes.ReserveData storage reserve,\r\n    DataTypes.FlashloanSimpleParams memory params\r\n  ) external {\r\n    // The usual action flow (cache -> updateState -> validation -> changeState -> updateRates)\r\n    // is altered to (validation -> user payload -> cache -> updateState -> changeState -> updateRates) for flashloans.\r\n    // This is done to protect against reentrance and rate manipulation within the user specified payload.\r\n\r\n    ValidationLogic.validateFlashloanSimple(reserve);\r\n\r\n    IFlashLoanSimpleReceiver receiver = IFlashLoanSimpleReceiver(params.receiverAddress);\r\n    uint256 totalPremium = params.amount.percentMul(params.flashLoanPremiumTotal);\r\n    IAToken(reserve.aTokenAddress).transferUnderlyingTo(params.receiverAddress, params.amount);\r\n\r\n    require(\r\n      receiver.executeOperation(\r\n        params.asset,\r\n        params.amount,\r\n        totalPremium,\r\n        msg.sender,\r\n        params.params\r\n      ),\r\n      Errors.INVALID_FLASHLOAN_EXECUTOR_RETURN\r\n    );\r\n\r\n    _handleFlashLoanRepayment(\r\n      reserve,\r\n      DataTypes.FlashLoanRepaymentParams({\r\n        asset: params.asset,\r\n        receiverAddress: params.receiverAddress,\r\n        amount: params.amount,\r\n        totalPremium: totalPremium,\r\n        flashLoanPremiumToProtocol: params.flashLoanPremiumToProtocol,\r\n        referralCode: params.referralCode\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @notice Handles repayment of flashloaned assets + premium\r\n   * @dev Will pull the amount + premium from the receiver, so must have approved pool\r\n   * @param reserve The state of the flashloaned reserve\r\n   * @param params The additional parameters needed to execute the repayment function\r\n   */\r\n  function _handleFlashLoanRepayment(\r\n    DataTypes.ReserveData storage reserve,\r\n    DataTypes.FlashLoanRepaymentParams memory params\r\n  ) internal {\r\n    uint256 premiumToProtocol = params.totalPremium.percentMul(params.flashLoanPremiumToProtocol);\r\n    uint256 premiumToLP = params.totalPremium - premiumToProtocol;\r\n    uint256 amountPlusPremium = params.amount + params.totalPremium;\r\n\r\n    DataTypes.ReserveCache memory reserveCache = reserve.cache();\r\n    reserve.updateState(reserveCache);\r\n    reserveCache.nextLiquidityIndex = reserve.cumulateToLiquidityIndex(\r\n      IERC20(reserveCache.aTokenAddress).totalSupply() +\r\n        uint256(reserve.accruedToTreasury).rayMul(reserveCache.nextLiquidityIndex),\r\n      premiumToLP\r\n    );\r\n\r\n    reserve.accruedToTreasury += premiumToProtocol\r\n      .rayDiv(reserveCache.nextLiquidityIndex)\r\n      .toUint128();\r\n\r\n    reserve.updateInterestRates(reserveCache, params.asset, amountPlusPremium, 0);\r\n\r\n    IERC20(params.asset).safeTransferFrom(\r\n      params.receiverAddress,\r\n      reserveCache.aTokenAddress,\r\n      amountPlusPremium\r\n    );\r\n\r\n    IAToken(reserveCache.aTokenAddress).handleRepayment(\r\n      params.receiverAddress,\r\n      params.receiverAddress,\r\n      amountPlusPremium\r\n    );\r\n\r\n    emit FlashLoan(\r\n      params.receiverAddress,\r\n      msg.sender,\r\n      params.asset,\r\n      params.amount,\r\n      DataTypes.InterestRateMode(0),\r\n      params.totalPremium,\r\n      params.referralCode\r\n    );\r\n  }\r\n}\r\n\r\n/**\r\n * @title LiquidationLogic library\r\n * @author Aave\r\n * @notice Implements actions involving management of collateral in the protocol, the main one being the liquidations\r\n */\r\nlibrary LiquidationLogic {\r\n  using WadRayMath for uint256;\r\n  using PercentageMath for uint256;\r\n  using ReserveLogic for DataTypes.ReserveCache;\r\n  using ReserveLogic for DataTypes.ReserveData;\r\n  using UserConfiguration for DataTypes.UserConfigurationMap;\r\n  using ReserveConfiguration for DataTypes.ReserveConfigurationMap;\r\n  using GPv2SafeERC20 for IERC20;\r\n\r\n  // See `IPool` for descriptions\r\n  event ReserveUsedAsCollateralEnabled(address indexed reserve, address indexed user);\r\n  event ReserveUsedAsCollateralDisabled(address indexed reserve, address indexed user);\r\n  event LiquidationCall(\r\n    address indexed collateralAsset,\r\n    address indexed debtAsset,\r\n    address indexed user,\r\n    uint256 debtToCover,\r\n    uint256 liquidatedCollateralAmount,\r\n    address liquidator,\r\n    bool receiveAToken\r\n  );\r\n\r\n  /**\r\n   * @dev Default percentage of borrower's debt to be repaid in a liquidation.\r\n   * @dev Percentage applied when the users health factor is above `CLOSE_FACTOR_HF_THRESHOLD`\r\n   * Expressed in bps, a value of 0.5e4 results in 50.00%\r\n   */\r\n  uint256 internal constant DEFAULT_LIQUIDATION_CLOSE_FACTOR = 0.5e4;\r\n\r\n  /**\r\n   * @dev Maximum percentage of borrower's debt to be repaid in a liquidation\r\n   * @dev Percentage applied when the users health factor is below `CLOSE_FACTOR_HF_THRESHOLD`\r\n   * Expressed in bps, a value of 1e4 results in 100.00%\r\n   */\r\n  uint256 public constant MAX_LIQUIDATION_CLOSE_FACTOR = 1e4;\r\n\r\n  /**\r\n   * @dev This constant represents below which health factor value it is possible to liquidate\r\n   * an amount of debt corresponding to `MAX_LIQUIDATION_CLOSE_FACTOR`.\r\n   * A value of 0.95e18 results in 0.95\r\n   */\r\n  uint256 public constant CLOSE_FACTOR_HF_THRESHOLD = 0.95e18;\r\n\r\n  struct LiquidationCallLocalVars {\r\n    uint256 userCollateralBalance;\r\n    uint256 userVariableDebt;\r\n    uint256 userTotalDebt;\r\n    uint256 actualDebtToLiquidate;\r\n    uint256 actualCollateralToLiquidate;\r\n    uint256 liquidationBonus;\r\n    uint256 healthFactor;\r\n    uint256 liquidationProtocolFeeAmount;\r\n    address collateralPriceSource;\r\n    address debtPriceSource;\r\n    IAToken collateralAToken;\r\n    DataTypes.ReserveCache debtReserveCache;\r\n  }\r\n\r\n  /**\r\n   * @notice Function to liquidate a position if its Health Factor drops below 1. The caller (liquidator)\r\n   * covers `debtToCover` amount of debt of the user getting liquidated, and receives\r\n   * a proportional amount of the `collateralAsset` plus a bonus to cover market risk\r\n   * @dev Emits the `LiquidationCall()` event\r\n   * @param reservesData The state of all the reserves\r\n   * @param reservesList The addresses of all the active reserves\r\n   * @param usersConfig The users configuration mapping that track the supplied/borrowed assets\r\n   * @param eModeCategories The configuration of all the efficiency mode categories\r\n   * @param params The additional parameters needed to execute the liquidation function\r\n   */\r\n  function executeLiquidationCall(\r\n    mapping(address => DataTypes.ReserveData) storage reservesData,\r\n    mapping(uint256 => address) storage reservesList,\r\n    mapping(address => DataTypes.UserConfigurationMap) storage usersConfig,\r\n    mapping(uint8 => DataTypes.EModeCategory) storage eModeCategories,\r\n    DataTypes.ExecuteLiquidationCallParams memory params\r\n  ) external {\r\n    LiquidationCallLocalVars memory vars;\r\n\r\n    DataTypes.ReserveData storage collateralReserve = reservesData[params.collateralAsset];\r\n    DataTypes.ReserveData storage debtReserve = reservesData[params.debtAsset];\r\n    DataTypes.UserConfigurationMap storage userConfig = usersConfig[params.user];\r\n    vars.debtReserveCache = debtReserve.cache();\r\n    debtReserve.updateState(vars.debtReserveCache);\r\n\r\n    (, , , , vars.healthFactor, ) = GenericLogic.calculateUserAccountData(\r\n      reservesData,\r\n      reservesList,\r\n      eModeCategories,\r\n      DataTypes.CalculateUserAccountDataParams({\r\n        userConfig: userConfig,\r\n        reservesCount: params.reservesCount,\r\n        user: params.user,\r\n        oracle: params.priceOracle,\r\n        userEModeCategory: params.userEModeCategory\r\n      })\r\n    );\r\n\r\n    (vars.userVariableDebt, vars.userTotalDebt, vars.actualDebtToLiquidate) = _calculateDebt(\r\n      vars.debtReserveCache,\r\n      params,\r\n      vars.healthFactor\r\n    );\r\n\r\n    ValidationLogic.validateLiquidationCall(\r\n      userConfig,\r\n      collateralReserve,\r\n      DataTypes.ValidateLiquidationCallParams({\r\n        debtReserveCache: vars.debtReserveCache,\r\n        totalDebt: vars.userTotalDebt,\r\n        healthFactor: vars.healthFactor,\r\n        priceOracleSentinel: params.priceOracleSentinel\r\n      })\r\n    );\r\n\r\n    (\r\n      vars.collateralAToken,\r\n      vars.collateralPriceSource,\r\n      vars.debtPriceSource,\r\n      vars.liquidationBonus\r\n    ) = _getConfigurationData(eModeCategories, collateralReserve, params);\r\n\r\n    vars.userCollateralBalance = vars.collateralAToken.balanceOf(params.user);\r\n\r\n    (\r\n      vars.actualCollateralToLiquidate,\r\n      vars.actualDebtToLiquidate,\r\n      vars.liquidationProtocolFeeAmount\r\n    ) = _calculateAvailableCollateralToLiquidate(\r\n      collateralReserve,\r\n      vars.debtReserveCache,\r\n      vars.collateralPriceSource,\r\n      vars.debtPriceSource,\r\n      vars.actualDebtToLiquidate,\r\n      vars.userCollateralBalance,\r\n      vars.liquidationBonus,\r\n      IPriceOracleGetter(params.priceOracle)\r\n    );\r\n\r\n    if (vars.userTotalDebt == vars.actualDebtToLiquidate) {\r\n      userConfig.setBorrowing(debtReserve.id, false);\r\n    }\r\n\r\n    // If the collateral being liquidated is equal to the user balance,\r\n    // we set the currency as not being used as collateral anymore\r\n    if (\r\n      vars.actualCollateralToLiquidate + vars.liquidationProtocolFeeAmount ==\r\n      vars.userCollateralBalance\r\n    ) {\r\n      userConfig.setUsingAsCollateral(collateralReserve.id, false);\r\n      emit ReserveUsedAsCollateralDisabled(params.collateralAsset, params.user);\r\n    }\r\n\r\n    _burnDebtTokens(params, vars);\r\n\r\n    debtReserve.updateInterestRates(\r\n      vars.debtReserveCache,\r\n      params.debtAsset,\r\n      vars.actualDebtToLiquidate,\r\n      0\r\n    );\r\n\r\n    IsolationModeLogic.updateIsolatedDebtIfIsolated(\r\n      reservesData,\r\n      reservesList,\r\n      userConfig,\r\n      vars.debtReserveCache,\r\n      vars.actualDebtToLiquidate\r\n    );\r\n\r\n    if (params.receiveAToken) {\r\n      _liquidateATokens(reservesData, reservesList, usersConfig, collateralReserve, params, vars);\r\n    } else {\r\n      _burnCollateralATokens(collateralReserve, params, vars);\r\n    }\r\n\r\n    // Transfer fee to treasury if it is non-zero\r\n    if (vars.liquidationProtocolFeeAmount != 0) {\r\n      uint256 liquidityIndex = collateralReserve.getNormalizedIncome();\r\n      uint256 scaledDownLiquidationProtocolFee = vars.liquidationProtocolFeeAmount.rayDiv(\r\n        liquidityIndex\r\n      );\r\n      uint256 scaledDownUserBalance = vars.collateralAToken.scaledBalanceOf(params.user);\r\n      // To avoid trying to send more aTokens than available on balance, due to 1 wei imprecision\r\n      if (scaledDownLiquidationProtocolFee > scaledDownUserBalance) {\r\n        vars.liquidationProtocolFeeAmount = scaledDownUserBalance.rayMul(liquidityIndex);\r\n      }\r\n      vars.collateralAToken.transferOnLiquidation(\r\n        params.user,\r\n        vars.collateralAToken.RESERVE_TREASURY_ADDRESS(),\r\n        vars.liquidationProtocolFeeAmount\r\n      );\r\n    }\r\n\r\n    // Transfers the debt asset being repaid to the aToken, where the liquidity is kept\r\n    IERC20(params.debtAsset).safeTransferFrom(\r\n      msg.sender,\r\n      vars.debtReserveCache.aTokenAddress,\r\n      vars.actualDebtToLiquidate\r\n    );\r\n\r\n    IAToken(vars.debtReserveCache.aTokenAddress).handleRepayment(\r\n      msg.sender,\r\n      params.user,\r\n      vars.actualDebtToLiquidate\r\n    );\r\n\r\n    emit LiquidationCall(\r\n      params.collateralAsset,\r\n      params.debtAsset,\r\n      params.user,\r\n      vars.actualDebtToLiquidate,\r\n      vars.actualCollateralToLiquidate,\r\n      msg.sender,\r\n      params.receiveAToken\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @notice Burns the collateral aTokens and transfers the underlying to the liquidator.\r\n   * @dev   The function also updates the state and the interest rate of the collateral reserve.\r\n   * @param collateralReserve The data of the collateral reserve\r\n   * @param params The additional parameters needed to execute the liquidation function\r\n   * @param vars The executeLiquidationCall() function local vars\r\n   */\r\n  function _burnCollateralATokens(\r\n    DataTypes.ReserveData storage collateralReserve,\r\n    DataTypes.ExecuteLiquidationCallParams memory params,\r\n    LiquidationCallLocalVars memory vars\r\n  ) internal {\r\n    DataTypes.ReserveCache memory collateralReserveCache = collateralReserve.cache();\r\n    collateralReserve.updateState(collateralReserveCache);\r\n    collateralReserve.updateInterestRates(\r\n      collateralReserveCache,\r\n      params.collateralAsset,\r\n      0,\r\n      vars.actualCollateralToLiquidate\r\n    );\r\n\r\n    // Burn the equivalent amount of aToken, sending the underlying to the liquidator\r\n    vars.collateralAToken.burn(\r\n      params.user,\r\n      msg.sender,\r\n      vars.actualCollateralToLiquidate,\r\n      collateralReserveCache.nextLiquidityIndex\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @notice Liquidates the user aTokens by transferring them to the liquidator.\r\n   * @dev   The function also checks the state of the liquidator and activates the aToken as collateral\r\n   *        as in standard transfers if the isolation mode constraints are respected.\r\n   * @param reservesData The state of all the reserves\r\n   * @param reservesList The addresses of all the active reserves\r\n   * @param usersConfig The users configuration mapping that track the supplied/borrowed assets\r\n   * @param collateralReserve The data of the collateral reserve\r\n   * @param params The additional parameters needed to execute the liquidation function\r\n   * @param vars The executeLiquidationCall() function local vars\r\n   */\r\n  function _liquidateATokens(\r\n    mapping(address => DataTypes.ReserveData) storage reservesData,\r\n    mapping(uint256 => address) storage reservesList,\r\n    mapping(address => DataTypes.UserConfigurationMap) storage usersConfig,\r\n    DataTypes.ReserveData storage collateralReserve,\r\n    DataTypes.ExecuteLiquidationCallParams memory params,\r\n    LiquidationCallLocalVars memory vars\r\n  ) internal {\r\n    uint256 liquidatorPreviousATokenBalance = IERC20(vars.collateralAToken).balanceOf(msg.sender);\r\n    vars.collateralAToken.transferOnLiquidation(\r\n      params.user,\r\n      msg.sender,\r\n      vars.actualCollateralToLiquidate\r\n    );\r\n\r\n    if (liquidatorPreviousATokenBalance == 0) {\r\n      DataTypes.UserConfigurationMap storage liquidatorConfig = usersConfig[msg.sender];\r\n      if (\r\n        ValidationLogic.validateAutomaticUseAsCollateral(\r\n          reservesData,\r\n          reservesList,\r\n          liquidatorConfig,\r\n          collateralReserve.configuration,\r\n          collateralReserve.aTokenAddress\r\n        )\r\n      ) {\r\n        liquidatorConfig.setUsingAsCollateral(collateralReserve.id, true);\r\n        emit ReserveUsedAsCollateralEnabled(params.collateralAsset, msg.sender);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @notice Burns the debt tokens of the user up to the amount being repaid by the liquidator.\r\n   * @dev The function alters the `debtReserveCache` state in `vars` to update the debt related data.\r\n   * @param params The additional parameters needed to execute the liquidation function\r\n   * @param vars the executeLiquidationCall() function local vars\r\n   */\r\n  function _burnDebtTokens(\r\n    DataTypes.ExecuteLiquidationCallParams memory params,\r\n    LiquidationCallLocalVars memory vars\r\n  ) internal {\r\n    if (vars.userVariableDebt >= vars.actualDebtToLiquidate) {\r\n      vars.debtReserveCache.nextScaledVariableDebt = IVariableDebtToken(\r\n        vars.debtReserveCache.variableDebtTokenAddress\r\n      ).burn(\r\n          params.user,\r\n          vars.actualDebtToLiquidate,\r\n          vars.debtReserveCache.nextVariableBorrowIndex\r\n        );\r\n    } else {\r\n      // If the user doesn't have variable debt, no need to try to burn variable debt tokens\r\n      if (vars.userVariableDebt != 0) {\r\n        vars.debtReserveCache.nextScaledVariableDebt = IVariableDebtToken(\r\n          vars.debtReserveCache.variableDebtTokenAddress\r\n        ).burn(params.user, vars.userVariableDebt, vars.debtReserveCache.nextVariableBorrowIndex);\r\n      }\r\n      (\r\n        vars.debtReserveCache.nextTotalStableDebt,\r\n        vars.debtReserveCache.nextAvgStableBorrowRate\r\n      ) = IStableDebtToken(vars.debtReserveCache.stableDebtTokenAddress).burn(\r\n        params.user,\r\n        vars.actualDebtToLiquidate - vars.userVariableDebt\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @notice Calculates the total debt of the user and the actual amount to liquidate depending on the health factor\r\n   * and corresponding close factor.\r\n   * @dev If the Health Factor is below CLOSE_FACTOR_HF_THRESHOLD, the close factor is increased to MAX_LIQUIDATION_CLOSE_FACTOR\r\n   * @param debtReserveCache The reserve cache data object of the debt reserve\r\n   * @param params The additional parameters needed to execute the liquidation function\r\n   * @param healthFactor The health factor of the position\r\n   * @return The variable debt of the user\r\n   * @return The total debt of the user\r\n   * @return The actual debt to liquidate as a function of the closeFactor\r\n   */\r\n  function _calculateDebt(\r\n    DataTypes.ReserveCache memory debtReserveCache,\r\n    DataTypes.ExecuteLiquidationCallParams memory params,\r\n    uint256 healthFactor\r\n  ) internal view returns (uint256, uint256, uint256) {\r\n    (uint256 userStableDebt, uint256 userVariableDebt) = Helpers.getUserCurrentDebt(\r\n      params.user,\r\n      debtReserveCache\r\n    );\r\n\r\n    uint256 userTotalDebt = userStableDebt + userVariableDebt;\r\n\r\n    uint256 closeFactor = healthFactor > CLOSE_FACTOR_HF_THRESHOLD\r\n      ? DEFAULT_LIQUIDATION_CLOSE_FACTOR\r\n      : MAX_LIQUIDATION_CLOSE_FACTOR;\r\n\r\n    uint256 maxLiquidatableDebt = userTotalDebt.percentMul(closeFactor);\r\n\r\n    uint256 actualDebtToLiquidate = params.debtToCover > maxLiquidatableDebt\r\n      ? maxLiquidatableDebt\r\n      : params.debtToCover;\r\n\r\n    return (userVariableDebt, userTotalDebt, actualDebtToLiquidate);\r\n  }\r\n\r\n  /**\r\n   * @notice Returns the configuration data for the debt and the collateral reserves.\r\n   * @param eModeCategories The configuration of all the efficiency mode categories\r\n   * @param collateralReserve The data of the collateral reserve\r\n   * @param params The additional parameters needed to execute the liquidation function\r\n   * @return The collateral aToken\r\n   * @return The address to use as price source for the collateral\r\n   * @return The address to use as price source for the debt\r\n   * @return The liquidation bonus to apply to the collateral\r\n   */\r\n  function _getConfigurationData(\r\n    mapping(uint8 => DataTypes.EModeCategory) storage eModeCategories,\r\n    DataTypes.ReserveData storage collateralReserve,\r\n    DataTypes.ExecuteLiquidationCallParams memory params\r\n  ) internal view returns (IAToken, address, address, uint256) {\r\n    IAToken collateralAToken = IAToken(collateralReserve.aTokenAddress);\r\n    uint256 liquidationBonus = collateralReserve.configuration.getLiquidationBonus();\r\n\r\n    address collateralPriceSource = params.collateralAsset;\r\n    address debtPriceSource = params.debtAsset;\r\n\r\n    if (params.userEModeCategory != 0) {\r\n      address eModePriceSource = eModeCategories[params.userEModeCategory].priceSource;\r\n\r\n      if (\r\n        EModeLogic.isInEModeCategory(\r\n          params.userEModeCategory,\r\n          collateralReserve.configuration.getEModeCategory()\r\n        )\r\n      ) {\r\n        liquidationBonus = eModeCategories[params.userEModeCategory].liquidationBonus;\r\n\r\n        if (eModePriceSource != address(0)) {\r\n          collateralPriceSource = eModePriceSource;\r\n        }\r\n      }\r\n\r\n      // when in eMode, debt will always be in the same eMode category, can skip matching category check\r\n      if (eModePriceSource != address(0)) {\r\n        debtPriceSource = eModePriceSource;\r\n      }\r\n    }\r\n\r\n    return (collateralAToken, collateralPriceSource, debtPriceSource, liquidationBonus);\r\n  }\r\n\r\n  struct AvailableCollateralToLiquidateLocalVars {\r\n    uint256 collateralPrice;\r\n    uint256 debtAssetPrice;\r\n    uint256 maxCollateralToLiquidate;\r\n    uint256 baseCollateral;\r\n    uint256 bonusCollateral;\r\n    uint256 debtAssetDecimals;\r\n    uint256 collateralDecimals;\r\n    uint256 collateralAssetUnit;\r\n    uint256 debtAssetUnit;\r\n    uint256 collateralAmount;\r\n    uint256 debtAmountNeeded;\r\n    uint256 liquidationProtocolFeePercentage;\r\n    uint256 liquidationProtocolFee;\r\n  }\r\n\r\n  /**\r\n   * @notice Calculates how much of a specific collateral can be liquidated, given\r\n   * a certain amount of debt asset.\r\n   * @dev This function needs to be called after all the checks to validate the liquidation have been performed,\r\n   *   otherwise it might fail.\r\n   * @param collateralReserve The data of the collateral reserve\r\n   * @param debtReserveCache The cached data of the debt reserve\r\n   * @param collateralAsset The address of the underlying asset used as collateral, to receive as result of the liquidation\r\n   * @param debtAsset The address of the underlying borrowed asset to be repaid with the liquidation\r\n   * @param debtToCover The debt amount of borrowed `asset` the liquidator wants to cover\r\n   * @param userCollateralBalance The collateral balance for the specific `collateralAsset` of the user being liquidated\r\n   * @param liquidationBonus The collateral bonus percentage to receive as result of the liquidation\r\n   * @return The maximum amount that is possible to liquidate given all the liquidation constraints (user balance, close factor)\r\n   * @return The amount to repay with the liquidation\r\n   * @return The fee taken from the liquidation bonus amount to be paid to the protocol\r\n   */\r\n  function _calculateAvailableCollateralToLiquidate(\r\n    DataTypes.ReserveData storage collateralReserve,\r\n    DataTypes.ReserveCache memory debtReserveCache,\r\n    address collateralAsset,\r\n    address debtAsset,\r\n    uint256 debtToCover,\r\n    uint256 userCollateralBalance,\r\n    uint256 liquidationBonus,\r\n    IPriceOracleGetter oracle\r\n  ) internal view returns (uint256, uint256, uint256) {\r\n    AvailableCollateralToLiquidateLocalVars memory vars;\r\n\r\n    vars.collateralPrice = oracle.getAssetPrice(collateralAsset);\r\n    vars.debtAssetPrice = oracle.getAssetPrice(debtAsset);\r\n\r\n    vars.collateralDecimals = collateralReserve.configuration.getDecimals();\r\n    vars.debtAssetDecimals = debtReserveCache.reserveConfiguration.getDecimals();\r\n\r\n    unchecked {\r\n      vars.collateralAssetUnit = 10 ** vars.collateralDecimals;\r\n      vars.debtAssetUnit = 10 ** vars.debtAssetDecimals;\r\n    }\r\n\r\n    vars.liquidationProtocolFeePercentage = collateralReserve\r\n      .configuration\r\n      .getLiquidationProtocolFee();\r\n\r\n    // This is the base collateral to liquidate based on the given debt to cover\r\n    vars.baseCollateral =\r\n      ((vars.debtAssetPrice * debtToCover * vars.collateralAssetUnit)) /\r\n      (vars.collateralPrice * vars.debtAssetUnit);\r\n\r\n    vars.maxCollateralToLiquidate = vars.baseCollateral.percentMul(liquidationBonus);\r\n\r\n    if (vars.maxCollateralToLiquidate > userCollateralBalance) {\r\n      vars.collateralAmount = userCollateralBalance;\r\n      vars.debtAmountNeeded = ((vars.collateralPrice * vars.collateralAmount * vars.debtAssetUnit) /\r\n        (vars.debtAssetPrice * vars.collateralAssetUnit)).percentDiv(liquidationBonus);\r\n    } else {\r\n      vars.collateralAmount = vars.maxCollateralToLiquidate;\r\n      vars.debtAmountNeeded = debtToCover;\r\n    }\r\n\r\n    if (vars.liquidationProtocolFeePercentage != 0) {\r\n      vars.bonusCollateral =\r\n        vars.collateralAmount -\r\n        vars.collateralAmount.percentDiv(liquidationBonus);\r\n\r\n      vars.liquidationProtocolFee = vars.bonusCollateral.percentMul(\r\n        vars.liquidationProtocolFeePercentage\r\n      );\r\n\r\n      return (\r\n        vars.collateralAmount - vars.liquidationProtocolFee,\r\n        vars.debtAmountNeeded,\r\n        vars.liquidationProtocolFee\r\n      );\r\n    } else {\r\n      return (vars.collateralAmount, vars.debtAmountNeeded, 0);\r\n    }\r\n  }\r\n}\r\n\r\nlibrary BridgeLogic {\r\n  using ReserveLogic for DataTypes.ReserveCache;\r\n  using ReserveLogic for DataTypes.ReserveData;\r\n  using UserConfiguration for DataTypes.UserConfigurationMap;\r\n  using ReserveConfiguration for DataTypes.ReserveConfigurationMap;\r\n  using WadRayMath for uint256;\r\n  using PercentageMath for uint256;\r\n  using SafeCast for uint256;\r\n  using GPv2SafeERC20 for IERC20;\r\n\r\n  // See `IPool` for descriptions\r\n  event ReserveUsedAsCollateralEnabled(address indexed reserve, address indexed user);\r\n  event MintUnbacked(\r\n    address indexed reserve,\r\n    address user,\r\n    address indexed onBehalfOf,\r\n    uint256 amount,\r\n    uint16 indexed referralCode\r\n  );\r\n  event BackUnbacked(address indexed reserve, address indexed backer, uint256 amount, uint256 fee);\r\n\r\n  /**\r\n   * @notice Mint unbacked aTokens to a user and updates the unbacked for the reserve.\r\n   * @dev Essentially a supply without transferring the underlying.\r\n   * @dev Emits the `MintUnbacked` event\r\n   * @dev Emits the `ReserveUsedAsCollateralEnabled` if asset is set as collateral\r\n   * @param reservesData The state of all the reserves\r\n   * @param reservesList The addresses of all the active reserves\r\n   * @param userConfig The user configuration mapping that tracks the supplied/borrowed assets\r\n   * @param asset The address of the underlying asset to mint aTokens of\r\n   * @param amount The amount to mint\r\n   * @param onBehalfOf The address that will receive the aTokens\r\n   * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\r\n   *   0 if the action is executed directly by the user, without any middle-man\r\n   */\r\n  function executeMintUnbacked(\r\n    mapping(address => DataTypes.ReserveData) storage reservesData,\r\n    mapping(uint256 => address) storage reservesList,\r\n    DataTypes.UserConfigurationMap storage userConfig,\r\n    address asset,\r\n    uint256 amount,\r\n    address onBehalfOf,\r\n    uint16 referralCode\r\n  ) external {\r\n    DataTypes.ReserveData storage reserve = reservesData[asset];\r\n    DataTypes.ReserveCache memory reserveCache = reserve.cache();\r\n\r\n    reserve.updateState(reserveCache);\r\n\r\n    ValidationLogic.validateSupply(reserveCache, reserve, amount);\r\n\r\n    uint256 unbackedMintCap = reserveCache.reserveConfiguration.getUnbackedMintCap();\r\n    uint256 reserveDecimals = reserveCache.reserveConfiguration.getDecimals();\r\n\r\n    uint256 unbacked = reserve.unbacked += amount.toUint128();\r\n\r\n    require(\r\n      unbacked <= unbackedMintCap * (10 ** reserveDecimals),\r\n      Errors.UNBACKED_MINT_CAP_EXCEEDED\r\n    );\r\n\r\n    reserve.updateInterestRates(reserveCache, asset, 0, 0);\r\n\r\n    bool isFirstSupply = IAToken(reserveCache.aTokenAddress).mint(\r\n      msg.sender,\r\n      onBehalfOf,\r\n      amount,\r\n      reserveCache.nextLiquidityIndex\r\n    );\r\n\r\n    if (isFirstSupply) {\r\n      if (\r\n        ValidationLogic.validateAutomaticUseAsCollateral(\r\n          reservesData,\r\n          reservesList,\r\n          userConfig,\r\n          reserveCache.reserveConfiguration,\r\n          reserveCache.aTokenAddress\r\n        )\r\n      ) {\r\n        userConfig.setUsingAsCollateral(reserve.id, true);\r\n        emit ReserveUsedAsCollateralEnabled(asset, onBehalfOf);\r\n      }\r\n    }\r\n\r\n    emit MintUnbacked(asset, msg.sender, onBehalfOf, amount, referralCode);\r\n  }\r\n\r\n  /**\r\n   * @notice Back the current unbacked with `amount` and pay `fee`.\r\n   * @dev It is not possible to back more than the existing unbacked amount of the reserve\r\n   * @dev Emits the `BackUnbacked` event\r\n   * @param reserve The reserve to back unbacked for\r\n   * @param asset The address of the underlying asset to repay\r\n   * @param amount The amount to back\r\n   * @param fee The amount paid in fees\r\n   * @param protocolFeeBps The fraction of fees in basis points paid to the protocol\r\n   * @return The backed amount\r\n   */\r\n  function executeBackUnbacked(\r\n    DataTypes.ReserveData storage reserve,\r\n    address asset,\r\n    uint256 amount,\r\n    uint256 fee,\r\n    uint256 protocolFeeBps\r\n  ) external returns (uint256) {\r\n    DataTypes.ReserveCache memory reserveCache = reserve.cache();\r\n\r\n    reserve.updateState(reserveCache);\r\n\r\n    uint256 backingAmount = (amount < reserve.unbacked) ? amount : reserve.unbacked;\r\n\r\n    uint256 feeToProtocol = fee.percentMul(protocolFeeBps);\r\n    uint256 feeToLP = fee - feeToProtocol;\r\n    uint256 added = backingAmount + fee;\r\n\r\n    reserveCache.nextLiquidityIndex = reserve.cumulateToLiquidityIndex(\r\n      IERC20(reserveCache.aTokenAddress).totalSupply() +\r\n        uint256(reserve.accruedToTreasury).rayMul(reserveCache.nextLiquidityIndex),\r\n      feeToLP\r\n    );\r\n\r\n    reserve.accruedToTreasury += feeToProtocol.rayDiv(reserveCache.nextLiquidityIndex).toUint128();\r\n\r\n    reserve.unbacked -= backingAmount.toUint128();\r\n    reserve.updateInterestRates(reserveCache, asset, added, 0);\r\n\r\n    IERC20(asset).safeTransferFrom(msg.sender, reserveCache.aTokenAddress, added);\r\n\r\n    emit BackUnbacked(asset, msg.sender, backingAmount, fee);\r\n\r\n    return backingAmount;\r\n  }\r\n}\r\n\r\n/**\r\n * @title IERC20WithPermit\r\n * @author Aave\r\n * @notice Interface for the permit function (EIP-2612)\r\n */\r\ninterface IERC20WithPermit is IERC20 {\r\n  /**\r\n   * @notice Allow passing a signed message to approve spending\r\n   * @dev implements the permit function as for\r\n   * https://github.com/ethereum/EIPs/blob/8a34d644aacf0f9f8f00815307fd7dd5da07655f/EIPS/eip-2612.md\r\n   * @param owner The owner of the funds\r\n   * @param spender The spender\r\n   * @param value The amount\r\n   * @param deadline The deadline timestamp, type(uint256).max for max deadline\r\n   * @param v Signature param\r\n   * @param s Signature param\r\n   * @param r Signature param\r\n   */\r\n  function permit(\r\n    address owner,\r\n    address spender,\r\n    uint256 value,\r\n    uint256 deadline,\r\n    uint8 v,\r\n    bytes32 r,\r\n    bytes32 s\r\n  ) external;\r\n}\r\n\r\n/**\r\n * @title PoolStorage\r\n * @author Aave\r\n * @notice Contract used as storage of the Pool contract.\r\n * @dev It defines the storage layout of the Pool contract.\r\n */\r\ncontract PoolStorage {\r\n  using ReserveLogic for DataTypes.ReserveData;\r\n  using ReserveConfiguration for DataTypes.ReserveConfigurationMap;\r\n  using UserConfiguration for DataTypes.UserConfigurationMap;\r\n\r\n  // Map of reserves and their data (underlyingAssetOfReserve => reserveData)\r\n  mapping(address => DataTypes.ReserveData) internal _reserves;\r\n\r\n  // Map of users address and their configuration data (userAddress => userConfiguration)\r\n  mapping(address => DataTypes.UserConfigurationMap) internal _usersConfig;\r\n\r\n  // List of reserves as a map (reserveId => reserve).\r\n  // It is structured as a mapping for gas savings reasons, using the reserve id as index\r\n  mapping(uint256 => address) internal _reservesList;\r\n\r\n  // List of eMode categories as a map (eModeCategoryId => eModeCategory).\r\n  // It is structured as a mapping for gas savings reasons, using the eModeCategoryId as index\r\n  mapping(uint8 => DataTypes.EModeCategory) internal _eModeCategories;\r\n\r\n  // Map of users address and their eMode category (userAddress => eModeCategoryId)\r\n  mapping(address => uint8) internal _usersEModeCategory;\r\n\r\n  // Fee of the protocol bridge, expressed in bps\r\n  uint256 internal _bridgeProtocolFee;\r\n\r\n  // Total FlashLoan Premium, expressed in bps\r\n  uint128 internal _flashLoanPremiumTotal;\r\n\r\n  // FlashLoan premium paid to protocol treasury, expressed in bps\r\n  uint128 internal _flashLoanPremiumToProtocol;\r\n\r\n  // Available liquidity that can be borrowed at once at stable rate, expressed in bps\r\n  uint64 internal _maxStableRateBorrowSizePercent;\r\n\r\n  // Maximum number of active reserves there have been in the protocol. It is the upper bound of the reserves list\r\n  uint16 internal _reservesCount;\r\n\r\n}\r\n\r\n/**\r\n * @title Pool contract\r\n * @author Aave\r\n * @notice Main point of interaction with an Aave protocol's market\r\n * - Users can:\r\n *   # Supply\r\n *   # Withdraw\r\n *   # Borrow\r\n *   # Repay\r\n *   # Swap their loans between variable and stable rate\r\n *   # Enable/disable their supplied assets as collateral rebalance stable rate borrow positions\r\n *   # Liquidate positions\r\n *   # Execute Flash Loans\r\n * @dev To be covered by a proxy contract, owned by the PoolAddressesProvider of the specific market\r\n * @dev All admin functions are callable by the PoolConfigurator contract defined also in the\r\n *   PoolAddressesProvider\r\n */\r\ncontract Pool is VersionedInitializable, PoolStorage, IPool {\r\n  using ReserveLogic for DataTypes.ReserveData;\r\n\r\n  uint256 public constant POOL_REVISION = 0x2;\r\n  IPoolAddressesProvider public immutable ADDRESSES_PROVIDER;\r\n\r\n  /**\r\n   * @dev Only pool configurator can call functions marked by this modifier.\r\n   */\r\n  modifier onlyPoolConfigurator() {\r\n    _onlyPoolConfigurator();\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Only pool admin can call functions marked by this modifier.\r\n   */\r\n  modifier onlyPoolAdmin() {\r\n    _onlyPoolAdmin();\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Only bridge can call functions marked by this modifier.\r\n   */\r\n  modifier onlyBridge() {\r\n    _onlyBridge();\r\n    _;\r\n  }\r\n\r\n  function _onlyPoolConfigurator() internal view virtual {\r\n    require(\r\n      ADDRESSES_PROVIDER.getPoolConfigurator() == msg.sender,\r\n      Errors.CALLER_NOT_POOL_CONFIGURATOR\r\n    );\r\n  }\r\n\r\n  function _onlyPoolAdmin() internal view virtual {\r\n    require(\r\n      IACLManager(ADDRESSES_PROVIDER.getACLManager()).isPoolAdmin(msg.sender),\r\n      Errors.CALLER_NOT_POOL_ADMIN\r\n    );\r\n  }\r\n\r\n  function _onlyBridge() internal view virtual {\r\n    require(\r\n      IACLManager(ADDRESSES_PROVIDER.getACLManager()).isBridge(msg.sender),\r\n      Errors.CALLER_NOT_BRIDGE\r\n    );\r\n  }\r\n\r\n  function getRevision() internal pure virtual override returns (uint256) {\r\n    return POOL_REVISION;\r\n  }\r\n\r\n  /**\r\n   * @dev Constructor.\r\n   * @param provider The address of the PoolAddressesProvider contract\r\n   */\r\n  constructor(IPoolAddressesProvider provider) {\r\n    ADDRESSES_PROVIDER = provider;\r\n  }\r\n\r\n  /**\r\n   * @notice Initializes the Pool.\r\n   * @dev Function is invoked by the proxy contract when the Pool contract is added to the\r\n   * PoolAddressesProvider of the market.\r\n   * @dev Caching the address of the PoolAddressesProvider in order to reduce gas consumption on subsequent operations\r\n   * @param provider The address of the PoolAddressesProvider\r\n   */\r\n  function initialize(IPoolAddressesProvider provider) external virtual initializer {\r\n    require(provider == ADDRESSES_PROVIDER, Errors.INVALID_ADDRESSES_PROVIDER);\r\n    _maxStableRateBorrowSizePercent = 0.25e4;\r\n    _flashLoanPremiumTotal = 0.0009e4;\r\n    _flashLoanPremiumToProtocol = 0;\r\n  }\r\n\r\n  /// @inheritdoc IPool\r\n  function mintUnbacked(\r\n    address asset,\r\n    uint256 amount,\r\n    address onBehalfOf,\r\n    uint16 referralCode\r\n  ) external virtual override onlyBridge {\r\n    BridgeLogic.executeMintUnbacked(\r\n      _reserves,\r\n      _reservesList,\r\n      _usersConfig[onBehalfOf],\r\n      asset,\r\n      amount,\r\n      onBehalfOf,\r\n      referralCode\r\n    );\r\n  }\r\n\r\n  /// @inheritdoc IPool\r\n  function backUnbacked(\r\n    address asset,\r\n    uint256 amount,\r\n    uint256 fee\r\n  ) external virtual override onlyBridge returns (uint256) {\r\n    return\r\n      BridgeLogic.executeBackUnbacked(_reserves[asset], asset, amount, fee, _bridgeProtocolFee);\r\n  }\r\n\r\n  /// @inheritdoc IPool\r\n  function supply(\r\n    address asset,\r\n    uint256 amount,\r\n    address onBehalfOf,\r\n    uint16 referralCode\r\n  ) public virtual override {\r\n    SupplyLogic.executeSupply(\r\n      _reserves,\r\n      _reservesList,\r\n      _usersConfig[onBehalfOf],\r\n      DataTypes.ExecuteSupplyParams({\r\n        asset: asset,\r\n        amount: amount,\r\n        onBehalfOf: onBehalfOf,\r\n        referralCode: referralCode\r\n      })\r\n    );\r\n  }\r\n\r\n  /// @inheritdoc IPool\r\n  function supplyWithPermit(\r\n    address asset,\r\n    uint256 amount,\r\n    address onBehalfOf,\r\n    uint16 referralCode,\r\n    uint256 deadline,\r\n    uint8 permitV,\r\n    bytes32 permitR,\r\n    bytes32 permitS\r\n  ) public virtual override {\r\n    IERC20WithPermit(asset).permit(\r\n      msg.sender,\r\n      address(this),\r\n      amount,\r\n      deadline,\r\n      permitV,\r\n      permitR,\r\n      permitS\r\n    );\r\n    SupplyLogic.executeSupply(\r\n      _reserves,\r\n      _reservesList,\r\n      _usersConfig[onBehalfOf],\r\n      DataTypes.ExecuteSupplyParams({\r\n        asset: asset,\r\n        amount: amount,\r\n        onBehalfOf: onBehalfOf,\r\n        referralCode: referralCode\r\n      })\r\n    );\r\n  }\r\n\r\n  /// @inheritdoc IPool\r\n  function withdraw(\r\n    address asset,\r\n    uint256 amount,\r\n    address to\r\n  ) public virtual override returns (uint256) {\r\n    return\r\n      SupplyLogic.executeWithdraw(\r\n        _reserves,\r\n        _reservesList,\r\n        _eModeCategories,\r\n        _usersConfig[msg.sender],\r\n        DataTypes.ExecuteWithdrawParams({\r\n          asset: asset,\r\n          amount: amount,\r\n          to: to,\r\n          reservesCount: _reservesCount,\r\n          oracle: ADDRESSES_PROVIDER.getPriceOracle(),\r\n          userEModeCategory: _usersEModeCategory[msg.sender]\r\n        })\r\n      );\r\n  }\r\n\r\n  /// @inheritdoc IPool\r\n  function borrow(\r\n    address asset,\r\n    uint256 amount,\r\n    uint256 interestRateMode,\r\n    uint16 referralCode,\r\n    address onBehalfOf\r\n  ) public virtual override {\r\n    BorrowLogic.executeBorrow(\r\n      _reserves,\r\n      _reservesList,\r\n      _eModeCategories,\r\n      _usersConfig[onBehalfOf],\r\n      DataTypes.ExecuteBorrowParams({\r\n        asset: asset,\r\n        user: msg.sender,\r\n        onBehalfOf: onBehalfOf,\r\n        amount: amount,\r\n        interestRateMode: DataTypes.InterestRateMode(interestRateMode),\r\n        referralCode: referralCode,\r\n        releaseUnderlying: true,\r\n        maxStableRateBorrowSizePercent: _maxStableRateBorrowSizePercent,\r\n        reservesCount: _reservesCount,\r\n        oracle: ADDRESSES_PROVIDER.getPriceOracle(),\r\n        userEModeCategory: _usersEModeCategory[onBehalfOf],\r\n        priceOracleSentinel: ADDRESSES_PROVIDER.getPriceOracleSentinel()\r\n      })\r\n    );\r\n  }\r\n\r\n  /// @inheritdoc IPool\r\n  function repay(\r\n    address asset,\r\n    uint256 amount,\r\n    uint256 interestRateMode,\r\n    address onBehalfOf\r\n  ) public virtual override returns (uint256) {\r\n    return\r\n      BorrowLogic.executeRepay(\r\n        _reserves,\r\n        _reservesList,\r\n        _usersConfig[onBehalfOf],\r\n        DataTypes.ExecuteRepayParams({\r\n          asset: asset,\r\n          amount: amount,\r\n          interestRateMode: DataTypes.InterestRateMode(interestRateMode),\r\n          onBehalfOf: onBehalfOf,\r\n          useATokens: false\r\n        })\r\n      );\r\n  }\r\n\r\n  /// @inheritdoc IPool\r\n  function repayWithPermit(\r\n    address asset,\r\n    uint256 amount,\r\n    uint256 interestRateMode,\r\n    address onBehalfOf,\r\n    uint256 deadline,\r\n    uint8 permitV,\r\n    bytes32 permitR,\r\n    bytes32 permitS\r\n  ) public virtual override returns (uint256) {\r\n    {\r\n      IERC20WithPermit(asset).permit(\r\n        msg.sender,\r\n        address(this),\r\n        amount,\r\n        deadline,\r\n        permitV,\r\n        permitR,\r\n        permitS\r\n      );\r\n    }\r\n    {\r\n      DataTypes.ExecuteRepayParams memory params = DataTypes.ExecuteRepayParams({\r\n        asset: asset,\r\n        amount: amount,\r\n        interestRateMode: DataTypes.InterestRateMode(interestRateMode),\r\n        onBehalfOf: onBehalfOf,\r\n        useATokens: false\r\n      });\r\n      return BorrowLogic.executeRepay(_reserves, _reservesList, _usersConfig[onBehalfOf], params);\r\n    }\r\n  }\r\n\r\n  /// @inheritdoc IPool\r\n  function repayWithATokens(\r\n    address asset,\r\n    uint256 amount,\r\n    uint256 interestRateMode\r\n  ) public virtual override returns (uint256) {\r\n    return\r\n      BorrowLogic.executeRepay(\r\n        _reserves,\r\n        _reservesList,\r\n        _usersConfig[msg.sender],\r\n        DataTypes.ExecuteRepayParams({\r\n          asset: asset,\r\n          amount: amount,\r\n          interestRateMode: DataTypes.InterestRateMode(interestRateMode),\r\n          onBehalfOf: msg.sender,\r\n          useATokens: true\r\n        })\r\n      );\r\n  }\r\n\r\n  /// @inheritdoc IPool\r\n  function swapBorrowRateMode(address asset, uint256 interestRateMode) public virtual override {\r\n    BorrowLogic.executeSwapBorrowRateMode(\r\n      _reserves[asset],\r\n      _usersConfig[msg.sender],\r\n      asset,\r\n      DataTypes.InterestRateMode(interestRateMode)\r\n    );\r\n  }\r\n\r\n  /// @inheritdoc IPool\r\n  function rebalanceStableBorrowRate(address asset, address user) public virtual override {\r\n    BorrowLogic.executeRebalanceStableBorrowRate(_reserves[asset], asset, user);\r\n  }\r\n\r\n  /// @inheritdoc IPool\r\n  function setUserUseReserveAsCollateral(\r\n    address asset,\r\n    bool useAsCollateral\r\n  ) public virtual override {\r\n    SupplyLogic.executeUseReserveAsCollateral(\r\n      _reserves,\r\n      _reservesList,\r\n      _eModeCategories,\r\n      _usersConfig[msg.sender],\r\n      asset,\r\n      useAsCollateral,\r\n      _reservesCount,\r\n      ADDRESSES_PROVIDER.getPriceOracle(),\r\n      _usersEModeCategory[msg.sender]\r\n    );\r\n  }\r\n\r\n  /// @inheritdoc IPool\r\n  function liquidationCall(\r\n    address collateralAsset,\r\n    address debtAsset,\r\n    address user,\r\n    uint256 debtToCover,\r\n    bool receiveAToken\r\n  ) public virtual override {\r\n    LiquidationLogic.executeLiquidationCall(\r\n      _reserves,\r\n      _reservesList,\r\n      _usersConfig,\r\n      _eModeCategories,\r\n      DataTypes.ExecuteLiquidationCallParams({\r\n        reservesCount: _reservesCount,\r\n        debtToCover: debtToCover,\r\n        collateralAsset: collateralAsset,\r\n        debtAsset: debtAsset,\r\n        user: user,\r\n        receiveAToken: receiveAToken,\r\n        priceOracle: ADDRESSES_PROVIDER.getPriceOracle(),\r\n        userEModeCategory: _usersEModeCategory[user],\r\n        priceOracleSentinel: ADDRESSES_PROVIDER.getPriceOracleSentinel()\r\n      })\r\n    );\r\n  }\r\n\r\n  /// @inheritdoc IPool\r\n  function flashLoan(\r\n    address receiverAddress,\r\n    address[] calldata assets,\r\n    uint256[] calldata amounts,\r\n    uint256[] calldata interestRateModes,\r\n    address onBehalfOf,\r\n    bytes calldata params,\r\n    uint16 referralCode\r\n  ) public virtual override {\r\n    DataTypes.FlashloanParams memory flashParams = DataTypes.FlashloanParams({\r\n      receiverAddress: receiverAddress,\r\n      assets: assets,\r\n      amounts: amounts,\r\n      interestRateModes: interestRateModes,\r\n      onBehalfOf: onBehalfOf,\r\n      params: params,\r\n      referralCode: referralCode,\r\n      flashLoanPremiumToProtocol: _flashLoanPremiumToProtocol,\r\n      flashLoanPremiumTotal: _flashLoanPremiumTotal,\r\n      maxStableRateBorrowSizePercent: _maxStableRateBorrowSizePercent,\r\n      reservesCount: _reservesCount,\r\n      addressesProvider: address(ADDRESSES_PROVIDER),\r\n      userEModeCategory: _usersEModeCategory[onBehalfOf],\r\n      isAuthorizedFlashBorrower: IACLManager(ADDRESSES_PROVIDER.getACLManager()).isFlashBorrower(\r\n        msg.sender\r\n      )\r\n    });\r\n\r\n    FlashLoanLogic.executeFlashLoan(\r\n      _reserves,\r\n      _reservesList,\r\n      _eModeCategories,\r\n      _usersConfig[onBehalfOf],\r\n      flashParams\r\n    );\r\n  }\r\n\r\n  /// @inheritdoc IPool\r\n  function flashLoanSimple(\r\n    address receiverAddress,\r\n    address asset,\r\n    uint256 amount,\r\n    bytes calldata params,\r\n    uint16 referralCode\r\n  ) public virtual override {\r\n    DataTypes.FlashloanSimpleParams memory flashParams = DataTypes.FlashloanSimpleParams({\r\n      receiverAddress: receiverAddress,\r\n      asset: asset,\r\n      amount: amount,\r\n      params: params,\r\n      referralCode: referralCode,\r\n      flashLoanPremiumToProtocol: _flashLoanPremiumToProtocol,\r\n      flashLoanPremiumTotal: _flashLoanPremiumTotal\r\n    });\r\n    FlashLoanLogic.executeFlashLoanSimple(_reserves[asset], flashParams);\r\n  }\r\n\r\n  /// @inheritdoc IPool\r\n  function mintToTreasury(address[] calldata assets) external virtual override {\r\n    PoolLogic.executeMintToTreasury(_reserves, assets);\r\n  }\r\n\r\n  /// @inheritdoc IPool\r\n  function getReserveData(\r\n    address asset\r\n  ) external view virtual override returns (DataTypes.ReserveData memory) {\r\n    return _reserves[asset];\r\n  }\r\n\r\n  /// @inheritdoc IPool\r\n  function getUserAccountData(\r\n    address user\r\n  )\r\n    external\r\n    view\r\n    virtual\r\n    override\r\n    returns (\r\n      uint256 totalCollateralBase,\r\n      uint256 totalDebtBase,\r\n      uint256 availableBorrowsBase,\r\n      uint256 currentLiquidationThreshold,\r\n      uint256 ltv,\r\n      uint256 healthFactor\r\n    )\r\n  {\r\n    return\r\n      PoolLogic.executeGetUserAccountData(\r\n        _reserves,\r\n        _reservesList,\r\n        _eModeCategories,\r\n        DataTypes.CalculateUserAccountDataParams({\r\n          userConfig: _usersConfig[user],\r\n          reservesCount: _reservesCount,\r\n          user: user,\r\n          oracle: ADDRESSES_PROVIDER.getPriceOracle(),\r\n          userEModeCategory: _usersEModeCategory[user]\r\n        })\r\n      );\r\n  }\r\n\r\n  /// @inheritdoc IPool\r\n  function getConfiguration(\r\n    address asset\r\n  ) external view virtual override returns (DataTypes.ReserveConfigurationMap memory) {\r\n    return _reserves[asset].configuration;\r\n  }\r\n\r\n  /// @inheritdoc IPool\r\n  function getUserConfiguration(\r\n    address user\r\n  ) external view virtual override returns (DataTypes.UserConfigurationMap memory) {\r\n    return _usersConfig[user];\r\n  }\r\n\r\n  /// @inheritdoc IPool\r\n  function getReserveNormalizedIncome(\r\n    address asset\r\n  ) external view virtual override returns (uint256) {\r\n    return _reserves[asset].getNormalizedIncome();\r\n  }\r\n\r\n  /// @inheritdoc IPool\r\n  function getReserveNormalizedVariableDebt(\r\n    address asset\r\n  ) external view virtual override returns (uint256) {\r\n    return _reserves[asset].getNormalizedDebt();\r\n  }\r\n\r\n  /// @inheritdoc IPool\r\n  function getReservesList() external view virtual override returns (address[] memory) {\r\n    uint256 reservesListCount = _reservesCount;\r\n    uint256 droppedReservesCount = 0;\r\n    address[] memory reservesList = new address[](reservesListCount);\r\n\r\n    for (uint256 i = 0; i < reservesListCount; i++) {\r\n      if (_reservesList[i] != address(0)) {\r\n        reservesList[i - droppedReservesCount] = _reservesList[i];\r\n      } else {\r\n        droppedReservesCount++;\r\n      }\r\n    }\r\n\r\n    // Reduces the length of the reserves array by `droppedReservesCount`\r\n    assembly {\r\n      mstore(reservesList, sub(reservesListCount, droppedReservesCount))\r\n    }\r\n    return reservesList;\r\n  }\r\n\r\n  /// @inheritdoc IPool\r\n  function getReserveAddressById(uint16 id) external view returns (address) {\r\n    return _reservesList[id];\r\n  }\r\n\r\n  /// @inheritdoc IPool\r\n  function MAX_STABLE_RATE_BORROW_SIZE_PERCENT() public view virtual override returns (uint256) {\r\n    return _maxStableRateBorrowSizePercent;\r\n  }\r\n\r\n  /// @inheritdoc IPool\r\n  function BRIDGE_PROTOCOL_FEE() public view virtual override returns (uint256) {\r\n    return _bridgeProtocolFee;\r\n  }\r\n\r\n  /// @inheritdoc IPool\r\n  function FLASHLOAN_PREMIUM_TOTAL() public view virtual override returns (uint128) {\r\n    return _flashLoanPremiumTotal;\r\n  }\r\n\r\n  /// @inheritdoc IPool\r\n  function FLASHLOAN_PREMIUM_TO_PROTOCOL() public view virtual override returns (uint128) {\r\n    return _flashLoanPremiumToProtocol;\r\n  }\r\n\r\n  /// @inheritdoc IPool\r\n  function MAX_NUMBER_RESERVES() public view virtual override returns (uint16) {\r\n    return ReserveConfiguration.MAX_RESERVES_COUNT;\r\n  }\r\n\r\n  /// @inheritdoc IPool\r\n  function finalizeTransfer(\r\n    address asset,\r\n    address from,\r\n    address to,\r\n    uint256 amount,\r\n    uint256 balanceFromBefore,\r\n    uint256 balanceToBefore\r\n  ) external virtual override {\r\n    require(msg.sender == _reserves[asset].aTokenAddress, Errors.CALLER_NOT_ATOKEN);\r\n    SupplyLogic.executeFinalizeTransfer(\r\n      _reserves,\r\n      _reservesList,\r\n      _eModeCategories,\r\n      _usersConfig,\r\n      DataTypes.FinalizeTransferParams({\r\n        asset: asset,\r\n        from: from,\r\n        to: to,\r\n        amount: amount,\r\n        balanceFromBefore: balanceFromBefore,\r\n        balanceToBefore: balanceToBefore,\r\n        reservesCount: _reservesCount,\r\n        oracle: ADDRESSES_PROVIDER.getPriceOracle(),\r\n        fromEModeCategory: _usersEModeCategory[from]\r\n      })\r\n    );\r\n  }\r\n\r\n  /// @inheritdoc IPool\r\n  function initReserve(\r\n    address asset,\r\n    address aTokenAddress,\r\n    address stableDebtAddress,\r\n    address variableDebtAddress,\r\n    address interestRateStrategyAddress\r\n  ) external virtual override onlyPoolConfigurator {\r\n    if (\r\n      PoolLogic.executeInitReserve(\r\n        _reserves,\r\n        _reservesList,\r\n        DataTypes.InitReserveParams({\r\n          asset: asset,\r\n          aTokenAddress: aTokenAddress,\r\n          stableDebtAddress: stableDebtAddress,\r\n          variableDebtAddress: variableDebtAddress,\r\n          interestRateStrategyAddress: interestRateStrategyAddress,\r\n          reservesCount: _reservesCount,\r\n          maxNumberReserves: MAX_NUMBER_RESERVES()\r\n        })\r\n      )\r\n    ) {\r\n      _reservesCount++;\r\n    }\r\n  }\r\n\r\n  /// @inheritdoc IPool\r\n  function dropReserve(address asset) external virtual override onlyPoolConfigurator {\r\n    PoolLogic.executeDropReserve(_reserves, _reservesList, asset);\r\n  }\r\n\r\n  /// @inheritdoc IPool\r\n  function setReserveInterestRateStrategyAddress(\r\n    address asset,\r\n    address rateStrategyAddress\r\n  ) external virtual override onlyPoolConfigurator {\r\n    require(asset != address(0), Errors.ZERO_ADDRESS_NOT_VALID);\r\n    require(_reserves[asset].id != 0 || _reservesList[0] == asset, Errors.ASSET_NOT_LISTED);\r\n    _reserves[asset].interestRateStrategyAddress = rateStrategyAddress;\r\n  }\r\n\r\n  /// @inheritdoc IPool\r\n  function setConfiguration(\r\n    address asset,\r\n    DataTypes.ReserveConfigurationMap calldata configuration\r\n  ) external virtual override onlyPoolConfigurator {\r\n    require(asset != address(0), Errors.ZERO_ADDRESS_NOT_VALID);\r\n    require(_reserves[asset].id != 0 || _reservesList[0] == asset, Errors.ASSET_NOT_LISTED);\r\n    _reserves[asset].configuration = configuration;\r\n  }\r\n\r\n  /// @inheritdoc IPool\r\n  function updateBridgeProtocolFee(\r\n    uint256 protocolFee\r\n  ) external virtual override onlyPoolConfigurator {\r\n    _bridgeProtocolFee = protocolFee;\r\n  }\r\n\r\n  /// @inheritdoc IPool\r\n  function updateFlashloanPremiums(\r\n    uint128 flashLoanPremiumTotal,\r\n    uint128 flashLoanPremiumToProtocol\r\n  ) external virtual override onlyPoolConfigurator {\r\n    _flashLoanPremiumTotal = flashLoanPremiumTotal;\r\n    _flashLoanPremiumToProtocol = flashLoanPremiumToProtocol;\r\n  }\r\n\r\n  /// @inheritdoc IPool\r\n  function configureEModeCategory(\r\n    uint8 id,\r\n    DataTypes.EModeCategory memory category\r\n  ) external virtual override onlyPoolConfigurator {\r\n    // category 0 is reserved for volatile heterogeneous assets and it's always disabled\r\n    require(id != 0, Errors.EMODE_CATEGORY_RESERVED);\r\n    _eModeCategories[id] = category;\r\n  }\r\n\r\n  function configureReserveBlacklistBitmap(\r\n    address asset,\r\n    uint128 blacklistBitmap\r\n  ) external virtual override onlyPoolConfigurator {\r\n    _reserves[asset].blacklistBitmap = blacklistBitmap;\r\n  }\r\n\r\n  function getReserveBorrowable(\r\n    address asset,\r\n    address assetToBorrow\r\n  ) external view virtual override returns(bool) {\r\n    uint16 assetToBorrowIndex = _reserves[assetToBorrow].id;\r\n    return  _reserves[asset].blacklistBitmap & (1 << assetToBorrowIndex) == 0;\r\n  }\r\n\r\n  function getReserveBitmap(\r\n    address asset\r\n  ) external view virtual override returns(uint128) {\r\n    return  _reserves[asset].blacklistBitmap;\r\n  }\r\n\r\n  /// @inheritdoc IPool\r\n  function getEModeCategoryData(\r\n    uint8 id\r\n  ) external view virtual override returns (DataTypes.EModeCategory memory) {\r\n    return _eModeCategories[id];\r\n  }\r\n\r\n  /// @inheritdoc IPool\r\n  function setUserEMode(uint8 categoryId) external virtual override {\r\n    EModeLogic.executeSetUserEMode(\r\n      _reserves,\r\n      _reservesList,\r\n      _eModeCategories,\r\n      _usersEModeCategory,\r\n      _usersConfig[msg.sender],\r\n      DataTypes.ExecuteSetUserEModeParams({\r\n        reservesCount: _reservesCount,\r\n        oracle: ADDRESSES_PROVIDER.getPriceOracle(),\r\n        categoryId: categoryId\r\n      })\r\n    );\r\n  }\r\n\r\n  /// @inheritdoc IPool\r\n  function getUserEMode(address user) external view virtual override returns (uint256) {\r\n    return _usersEModeCategory[user];\r\n  }\r\n\r\n  /// @inheritdoc IPool\r\n  function resetIsolationModeTotalDebt(\r\n    address asset\r\n  ) external virtual override onlyPoolConfigurator {\r\n    PoolLogic.executeResetIsolationModeTotalDebt(_reserves, asset);\r\n  }\r\n\r\n  /// @inheritdoc IPool\r\n  function rescueTokens(\r\n    address token,\r\n    address to,\r\n    uint256 amount\r\n  ) external virtual override onlyPoolAdmin {\r\n    PoolLogic.executeRescueTokens(token, to, amount);\r\n  }\r\n\r\n  /// @inheritdoc IPool\r\n  /// @dev Deprecated: maintained for compatibility purposes\r\n  function deposit(\r\n    address asset,\r\n    uint256 amount,\r\n    address onBehalfOf,\r\n    uint16 referralCode\r\n  ) external virtual override {\r\n    SupplyLogic.executeSupply(\r\n      _reserves,\r\n      _reservesList,\r\n      _usersConfig[onBehalfOf],\r\n      DataTypes.ExecuteSupplyParams({\r\n        asset: asset,\r\n        amount: amount,\r\n        onBehalfOf: onBehalfOf,\r\n        referralCode: referralCode\r\n      })\r\n    );\r\n  }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract IPoolAddressesProvider\",\"name\":\"provider\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"reserve\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"backer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"BackUnbacked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"reserve\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"onBehalfOf\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum DataTypes.InterestRateMode\",\"name\":\"interestRateMode\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"borrowRate\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint16\",\"name\":\"referralCode\",\"type\":\"uint16\"}],\"name\":\"Borrow\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"initiator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum DataTypes.InterestRateMode\",\"name\":\"interestRateMode\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"premium\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint16\",\"name\":\"referralCode\",\"type\":\"uint16\"}],\"name\":\"FlashLoan\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalDebt\",\"type\":\"uint256\"}],\"name\":\"IsolationModeTotalDebtUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"collateralAsset\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"debtAsset\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"debtToCover\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"liquidatedCollateralAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"liquidator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"receiveAToken\",\"type\":\"bool\"}],\"name\":\"LiquidationCall\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"reserve\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"onBehalfOf\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint16\",\"name\":\"referralCode\",\"type\":\"uint16\"}],\"name\":\"MintUnbacked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"reserve\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountMinted\",\"type\":\"uint256\"}],\"name\":\"MintedToTreasury\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"reserve\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"RebalanceStableBorrowRate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"reserve\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"repayer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"useATokens\",\"type\":\"bool\"}],\"name\":\"Repay\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"reserve\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"liquidityRate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stableBorrowRate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"variableBorrowRate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"liquidityIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"variableBorrowIndex\",\"type\":\"uint256\"}],\"name\":\"ReserveDataUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"reserve\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"ReserveUsedAsCollateralDisabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"reserve\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"ReserveUsedAsCollateralEnabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"reserve\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"onBehalfOf\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint16\",\"name\":\"referralCode\",\"type\":\"uint16\"}],\"name\":\"Supply\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"reserve\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"enum DataTypes.InterestRateMode\",\"name\":\"interestRateMode\",\"type\":\"uint8\"}],\"name\":\"SwapBorrowRateMode\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"categoryId\",\"type\":\"uint8\"}],\"name\":\"UserEModeSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"reserve\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ADDRESSES_PROVIDER\",\"outputs\":[{\"internalType\":\"contract IPoolAddressesProvider\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BRIDGE_PROTOCOL_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FLASHLOAN_PREMIUM_TOTAL\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FLASHLOAN_PREMIUM_TO_PROTOCOL\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_NUMBER_RESERVES\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_STABLE_RATE_BORROW_SIZE_PERCENT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"POOL_REVISION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"backUnbacked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"interestRateMode\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"referralCode\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"onBehalfOf\",\"type\":\"address\"}],\"name\":\"borrow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"id\",\"type\":\"uint8\"},{\"components\":[{\"internalType\":\"uint16\",\"name\":\"ltv\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"liquidationThreshold\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"liquidationBonus\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"priceSource\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"label\",\"type\":\"string\"}],\"internalType\":\"struct DataTypes.EModeCategory\",\"name\":\"category\",\"type\":\"tuple\"}],\"name\":\"configureEModeCategory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"blacklistBitmap\",\"type\":\"uint128\"}],\"name\":\"configureReserveBlacklistBitmap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"onBehalfOf\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"referralCode\",\"type\":\"uint16\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"dropReserve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balanceFromBefore\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balanceToBefore\",\"type\":\"uint256\"}],\"name\":\"finalizeTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverAddress\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"assets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"interestRateModes\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"onBehalfOf\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"params\",\"type\":\"bytes\"},{\"internalType\":\"uint16\",\"name\":\"referralCode\",\"type\":\"uint16\"}],\"name\":\"flashLoan\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"params\",\"type\":\"bytes\"},{\"internalType\":\"uint16\",\"name\":\"referralCode\",\"type\":\"uint16\"}],\"name\":\"flashLoanSimple\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"getConfiguration\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"data\",\"type\":\"uint256\"}],\"internalType\":\"struct DataTypes.ReserveConfigurationMap\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"id\",\"type\":\"uint8\"}],\"name\":\"getEModeCategoryData\",\"outputs\":[{\"components\":[{\"internalType\":\"uint16\",\"name\":\"ltv\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"liquidationThreshold\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"liquidationBonus\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"priceSource\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"label\",\"type\":\"string\"}],\"internalType\":\"struct DataTypes.EModeCategory\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"id\",\"type\":\"uint16\"}],\"name\":\"getReserveAddressById\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"getReserveBitmap\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"assetToBorrow\",\"type\":\"address\"}],\"name\":\"getReserveBorrowable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"getReserveData\",\"outputs\":[{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"data\",\"type\":\"uint256\"}],\"internalType\":\"struct DataTypes.ReserveConfigurationMap\",\"name\":\"configuration\",\"type\":\"tuple\"},{\"internalType\":\"uint128\",\"name\":\"liquidityIndex\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"currentLiquidityRate\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"variableBorrowIndex\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"currentVariableBorrowRate\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"currentStableBorrowRate\",\"type\":\"uint128\"},{\"internalType\":\"uint40\",\"name\":\"lastUpdateTimestamp\",\"type\":\"uint40\"},{\"internalType\":\"uint16\",\"name\":\"id\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"aTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"stableDebtTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"variableDebtTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"interestRateStrategyAddress\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"accruedToTreasury\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"unbacked\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"isolationModeTotalDebt\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"blacklistBitmap\",\"type\":\"uint128\"}],\"internalType\":\"struct DataTypes.ReserveData\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"getReserveNormalizedIncome\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"getReserveNormalizedVariableDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getReservesList\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserAccountData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalCollateralBase\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalDebtBase\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"availableBorrowsBase\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentLiquidationThreshold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ltv\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"healthFactor\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserConfiguration\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"data\",\"type\":\"uint256\"}],\"internalType\":\"struct DataTypes.UserConfigurationMap\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserEMode\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"aTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"stableDebtAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"variableDebtAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"interestRateStrategyAddress\",\"type\":\"address\"}],\"name\":\"initReserve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IPoolAddressesProvider\",\"name\":\"provider\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collateralAsset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"debtAsset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"debtToCover\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"receiveAToken\",\"type\":\"bool\"}],\"name\":\"liquidationCall\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"assets\",\"type\":\"address[]\"}],\"name\":\"mintToTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"onBehalfOf\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"referralCode\",\"type\":\"uint16\"}],\"name\":\"mintUnbacked\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"rebalanceStableBorrowRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"interestRateMode\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"onBehalfOf\",\"type\":\"address\"}],\"name\":\"repay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"interestRateMode\",\"type\":\"uint256\"}],\"name\":\"repayWithATokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"interestRateMode\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"onBehalfOf\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"permitV\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"permitR\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"permitS\",\"type\":\"bytes32\"}],\"name\":\"repayWithPermit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"rescueTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"resetIsolationModeTotalDebt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"data\",\"type\":\"uint256\"}],\"internalType\":\"struct DataTypes.ReserveConfigurationMap\",\"name\":\"configuration\",\"type\":\"tuple\"}],\"name\":\"setConfiguration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"rateStrategyAddress\",\"type\":\"address\"}],\"name\":\"setReserveInterestRateStrategyAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"categoryId\",\"type\":\"uint8\"}],\"name\":\"setUserEMode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"useAsCollateral\",\"type\":\"bool\"}],\"name\":\"setUserUseReserveAsCollateral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"onBehalfOf\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"referralCode\",\"type\":\"uint16\"}],\"name\":\"supply\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"onBehalfOf\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"referralCode\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"permitV\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"permitR\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"permitS\",\"type\":\"bytes32\"}],\"name\":\"supplyWithPermit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"interestRateMode\",\"type\":\"uint256\"}],\"name\":\"swapBorrowRateMode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"protocolFee\",\"type\":\"uint256\"}],\"name\":\"updateBridgeProtocolFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"flashLoanPremiumTotal\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"flashLoanPremiumToProtocol\",\"type\":\"uint128\"}],\"name\":\"updateFlashloanPremiums\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Pool", "CompilerVersion": "v0.8.10+commit.fc410830", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000000218890dd636c3a1cf0f98557ee2d3612c6bd953", "EVMVersion": "Default", "Library": "SupplyLogic:c981354bdca1829ac6d40ade968898703b2e0cb1;BorrowLogic:b2a2c005b57ba13d2f6730abc05fb1086de75c94;LiquidationLogic:e6f87565576785693ab8ed298dfabb99efbca163;EModeLogic:4e68bcd17c6e47cd7c80d66770f80161296c4273;BridgeLogic:d0209f725637631153f1fcb3a2d869aca9afdf88;FlashLoanLogic:9f3de000b98a7227348869d40e6cf739989b8b4d;PoolLogic:5d9991711ebc3e8f69b1e2cf99b8cade98792c2b", "LicenseType": "GNU GPLv3", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://870125ecf5b9455952af9fded9819a7ab7ff9abc6f75986f03c3a9be6e302db0"}