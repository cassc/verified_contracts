{"SourceCode": "/**\r\n * BRRR.LIVE - Building generational wealth, together!\r\n *\r\n * With $BRRR we band together to build generational wealth for a random holder every day, forever.\r\n * Provably fair & fully on-chain.\r\n *\r\n *\r\n * DOUBLE YOUR BRRR BY PLAYING AGAINST OTHER PLAYERS\r\n *\r\n *\r\n * Website: https://brrr.live\r\n * Twitter: https://twitter.com/brrr_live\r\n * Telegram: https://t.me/brrrdotlive \r\n * \r\n * \r\n*/\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.18;\r\n\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n\r\n}\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint);\r\n\r\n    function balanceOf(address account) external view returns (uint);\r\n\r\n    function transfer(address recipient, uint amount) external returns (bool);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function approve(address spender, uint amount) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint amount\r\n    ) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n}\r\n\r\n\r\n\r\ncontract BrrrPvp {\r\n    using SafeMath for uint256;\r\n\r\n    IERC20 brrrToken;\r\n    address public owner;\r\n    address payable public mainPoolAddress;\r\n    uint public minBet;\r\n    uint public maxPlayers;\r\n    uint public current_game;\r\n    bool public game_active;\r\n    uint counter = 1;\r\n    uint _finalSellTax = 5;\r\n    mapping(uint => address[]) public GameToPlayers;\r\n\r\n    mapping(uint => mapping(address => uint)) GameToPlayerBets;\r\n\r\n    mapping(uint => uint) public GameToPool;\r\n\r\n    mapping(uint => address) public GameToWinner;\r\n\r\n\r\n    constructor() {\r\n        owner = msg.sender;\r\n        game_active = false;\r\n        maxPlayers = 3;\r\n        minBet = 100000 * 10** 9;\r\n        brrrToken = IERC20(address(0x4140d800e6c98281884b86e967719b62203d4403));\r\n        mainPoolAddress = payable(address(0x4140d800e6c98281884b86e967719b62203d4403));\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"not authorized\");\r\n        _;\r\n    }\r\n\r\n    receive() external payable {\r\n    }\r\n\r\n    function playerAllowance(address addy) external view returns (uint)\r\n    {\r\n        return brrrToken.allowance(addy, address(this));\r\n    }\r\n    function playerIndex(address addy) external view returns (uint)\r\n    {\r\n        for(uint i = 0; i < GameToPlayers[current_game].length; i++){\r\n            if(GameToPlayers[current_game][i] == addy)\r\n            {\r\n                return i;\r\n            } \r\n        }\r\n        return 100;\r\n    }\r\n\r\n    function TotalplayersInGame(uint game_id) external view returns (uint)\r\n    {\r\n        return GameToPlayers[game_id].length;\r\n    }\r\n\r\n    function playersInGame(uint game_id) external view returns (address[] memory)\r\n    {\r\n        return GameToPlayers[game_id];\r\n    }\r\n\r\n    function poolInGame(uint game_id) external view returns (uint)\r\n    {\r\n        return GameToPool[game_id];\r\n    }\r\n\r\n    function winnerOfGame(uint game_id) external view returns (address)\r\n    {\r\n        return GameToWinner[game_id];\r\n    }\r\n\r\n    function playerBetsInGame(uint game_id, address addy) external view returns (uint)\r\n    {\r\n        return GameToPlayerBets[game_id][addy];\r\n    }\r\n\r\n    function toggleGame() external onlyOwner() {\r\n        game_active = !game_active;\r\n    }\r\n\r\n    function setTokenAddress(address payable _tokenAddress) external onlyOwner() {\r\n       brrrToken = IERC20(address(_tokenAddress));\r\n    }\r\n\r\n    function updateMaxPlayers(uint maxp) external onlyOwner() {\r\n       maxPlayers = maxp;\r\n    }\r\n\r\n    function updateMinBet(uint minb) external onlyOwner() {\r\n       minBet = minb;\r\n    }\r\n\r\n\r\n    function setMainPoolAddress(address payable _tokenAddress) external onlyOwner() {\r\n       mainPoolAddress = payable(address(_tokenAddress));\r\n    }\r\n\r\n    function leaveGame(uint index) external\r\n    {\r\n        require(game_active == true,\"The game is currently inactive, try again later\");\r\n        require(index <= GameToPlayers[current_game].length,\"Wrong Index 1\");\r\n        require(GameToPlayers[current_game][index] == msg.sender,\"Wrong index 2\");\r\n        require(GameToPlayerBets[current_game][msg.sender] > 0,\"You have not joined the current game\");\r\n\r\n        if(GameToPlayers[current_game].length == 1) \r\n        {\r\n            delete GameToPlayers[current_game];\r\n        }\r\n        else \r\n        {\r\n            GameToPlayers[current_game][index] = GameToPlayers[current_game][GameToPlayers[current_game].length - 1];\r\n            GameToPlayers[current_game].pop();\r\n        }\r\n\r\n        uint amount = GameToPlayerBets[current_game][msg.sender];\r\n\r\n        GameToPlayerBets[current_game][msg.sender] = 0;\r\n        GameToPool[current_game] -= amount;\r\n        brrrToken.transfer(msg.sender, amount);\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    function joinGame() external\r\n    {\r\n        require(game_active == true,\"The game is currently inactive, try again later\");\r\n        require(GameToPlayers[current_game].length <= maxPlayers,\"Max players reached\");\r\n        require(GameToPlayerBets[current_game][msg.sender] == 0,\"You have already joined the current game\");\r\n        require(brrrToken.balanceOf(msg.sender) >= minBet,\"You don't hold enough $BRRR to join the current game\");\r\n        \r\n        bool success = brrrToken.transferFrom(msg.sender, address(this), minBet);\r\n        require(success, \"Could not transfer token. Missing approval\");\r\n\r\n        GameToPlayers[current_game].push(msg.sender);\r\n        uint taxAmount = minBet.mul(_finalSellTax).div(100);\r\n        uint finalbet = (minBet - taxAmount);\r\n        GameToPlayerBets[current_game][msg.sender] = finalbet;\r\n        GameToPool[current_game] += finalbet;\r\n\r\n        if(GameToPlayers[current_game].length == maxPlayers)\r\n        {\r\n            address payable winner = payable(GameToPlayers[current_game][randomNumber()]);\r\n            uint reward = finalbet * (maxPlayers - 1);\r\n\r\n            GameToWinner[current_game] = winner;\r\n            brrrToken.transfer(winner, reward);\r\n            \r\n            uint brrrBalance = brrrToken.balanceOf(address(this));\r\n            if(brrrBalance > 0)\r\n            {\r\n                brrrToken.transfer(address(0x0000dead), brrrBalance);\r\n            }\r\n            current_game++;  \r\n        }\r\n\r\n    }\r\n\r\n    function emergencyTokenWithdrawal() external onlyOwner {\r\n        uint brrrBalance = brrrToken.balanceOf(address(this));\r\n        brrrToken.transfer(msg.sender, brrrBalance);\r\n    }\r\n\r\n    function emergencyWithdrawal() external onlyOwner {\r\n        (bool success, ) = msg.sender.call{ value: address(this).balance } (\"\");\r\n        require(success, \"Transfer failed.\");\r\n    }\r\n\r\n    function randomNumber() internal returns (uint) \r\n    {\r\n        counter++;\r\n        uint random = uint(keccak256(abi.encodePacked(block.timestamp,block.difficulty, counter, GameToPlayers[current_game].length, gasleft()))) % GameToPlayers[current_game].length;\r\n        return random;\r\n    }\r\n\r\n  \r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"GameToPlayers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"GameToPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"GameToWinner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"game_id\",\"type\":\"uint256\"}],\"name\":\"TotalplayersInGame\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"current_game\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyTokenWithdrawal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyWithdrawal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"game_active\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"joinGame\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"leaveGame\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mainPoolAddress\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxPlayers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minBet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addy\",\"type\":\"address\"}],\"name\":\"playerAllowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"game_id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"addy\",\"type\":\"address\"}],\"name\":\"playerBetsInGame\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addy\",\"type\":\"address\"}],\"name\":\"playerIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"game_id\",\"type\":\"uint256\"}],\"name\":\"playersInGame\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"game_id\",\"type\":\"uint256\"}],\"name\":\"poolInGame\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"setMainPoolAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"setTokenAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toggleGame\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxp\",\"type\":\"uint256\"}],\"name\":\"updateMaxPlayers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minb\",\"type\":\"uint256\"}],\"name\":\"updateMinBet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"game_id\",\"type\":\"uint256\"}],\"name\":\"winnerOfGame\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "BrrrPvp", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://715625a8de2032b188994b1e1e33731c236628b5186d410d740d7f9b290e081c"}