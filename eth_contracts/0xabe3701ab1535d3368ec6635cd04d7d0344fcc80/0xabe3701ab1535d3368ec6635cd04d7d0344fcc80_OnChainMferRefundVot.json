{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/Voting.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.18;\\n\\nerror OnlyTheOwnerCanDoThisHomieAndYouAintTheOne();\\nerror SorryYouCantVoteFriend();\\nerror YayYouAlreadyVotedAndWeHopeYouDecidedToPayTheTeamCauseWeSeeYou();\\nerror WhoopsInvalidVote();\\nerror WeAreNotReadyToVoteYetHoldYourHorses();\\n\\ncontract OnChainMferRefundVoting\\n{\\n    // if vote == 1, full refund for each layer token (.24 eth), team keeps none\\n    // if vote == 2, half refund for each layer token (.12 eth), team keeps half\\n    // if vote == 3, no refund for each layer token, team keeps all\\n\\n    // mapping to hold voter data\\n    /*\\n        bit layout\\n            [0-251]     : unused\\n            [252]       : allowed to vote (1 << 3)\\n            [253]       : has voted (1 << 2)\\n            [254-255]   : vote value (last 2 bits to the right)\\n                possible votes:\\n                    1 - full refund\\n                    2 - 50% refund\\n                    3 - no refund\\n    */\\n    mapping(address => uint256) public VoterData;\\n\\n    // is voting open\\n    bool public VotingOpen;\\n\\n    // open/close voting\\n    function toggleVotingOpen() external onlyOwner\\n    {\\n        VotingOpen = !VotingOpen;\\n    }\\n\\n    // function to set valid voter\\n    function updateVoterEligibility(address _address, bool _eligible) external onlyOwner\\n    {\\n        if(_eligible)\\n        {\\n            // enable voting\\n            uint256 mask = 1 << 3;\\n            uint256 currentData = VoterData[_address];\\n            VoterData[_address] = currentData | mask;\\n        } else\\n        {\\n            // remove eligibility\\n            uint256 mask = 1 << 3;\\n            mask = ~mask;\\n            uint256 currentData = VoterData[_address];\\n            VoterData[_address] = currentData & mask;\\n        }\\n    }\\n\\n    // function to check if address is eligible to vote\\n    function isVoterEligible(address _voter) public view returns(bool)\\n    {\\n        uint256 mask = 1 << 3;\\n        return (VoterData[_voter] & mask) != 0;\\n    }\\n\\n    // function to check if user has voted\\n    function hasVoterVoted(address _voter) public view returns(bool)\\n    {\\n        uint256 mask = 1 << 2;\\n        return (VoterData[_voter] & mask) != 0;\\n    }\\n\\n    // get address vote history\\n    function getVotersVote(address _voter) public view returns(uint256)\\n    {\\n        uint256 mask = 3;\\n        return uint256(VoterData[_voter] & mask);\\n    }\\n\\n    // cast your vote!\\n    function castVote(uint256 _daVote) public\\n    {\\n        // check if voting open\\n        if(!VotingOpen) revert WeAreNotReadyToVoteYetHoldYourHorses();\\n        // check if eligible\\n        if(!isVoterEligible(msg.sender)) revert SorryYouCantVoteFriend();\\n        // check if voted\\n        if(hasVoterVoted(msg.sender)) revert YayYouAlreadyVotedAndWeHopeYouDecidedToPayTheTeamCauseWeSeeYou();\\n        // check for valid vote\\n        if(_daVote == 0 || _daVote > 3) revert WhoopsInvalidVote();\\n        \\n        // vote already! \ud83d\udc47\\n\\n        // update vote\\n        uint256 voteMask = _daVote;\\n        uint256 updatedData = (VoterData[msg.sender] & ~voteMask) | _daVote;\\n        // mark 'has voted'\\n        uint256 hasVotedMask = 1 << 2;\\n        updatedData = (updatedData | hasVotedMask);\\n        // update mapping\\n        VoterData[msg.sender] = updatedData;\\n    }\\n\\n    // constructor stuff\\n    constructor()\\n    {\\n        Owner = msg.sender;\\n    }\\n\\n    // owner stuff\\n    address private Owner;\\n    // modifier\\n    modifier onlyOwner()\\n    {\\n        _checkOwner();\\n        _;\\n    }\\n    // check owner\\n    function _checkOwner() internal view virtual\\n    {\\n        if(msg.sender != Owner) revert OnlyTheOwnerCanDoThisHomieAndYouAintTheOne();\\n    }\\n}\\n\\n\\n\\n/////////////////////////////////////////////////////////////////\\n//                 spread smiles like confetti                 //\\n/////////////////////////////////////////////////////////////////\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"OnlyTheOwnerCanDoThisHomieAndYouAintTheOne\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SorryYouCantVoteFriend\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WeAreNotReadyToVoteYetHoldYourHorses\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WhoopsInvalidVote\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"YayYouAlreadyVotedAndWeHopeYouDecidedToPayTheTeamCauseWeSeeYou\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"VoterData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VotingOpen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_daVote\",\"type\":\"uint256\"}],\"name\":\"castVote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_voter\",\"type\":\"address\"}],\"name\":\"getVotersVote\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_voter\",\"type\":\"address\"}],\"name\":\"hasVoterVoted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_voter\",\"type\":\"address\"}],\"name\":\"isVoterEligible\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toggleVotingOpen\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_eligible\",\"type\":\"bool\"}],\"name\":\"updateVoterEligibility\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "OnChainMferRefundVoting", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}