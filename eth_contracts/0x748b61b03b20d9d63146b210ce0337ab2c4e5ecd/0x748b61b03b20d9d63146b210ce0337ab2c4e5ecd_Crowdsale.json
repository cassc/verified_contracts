{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity =0.8.0;\r\n\r\ninterface IERC20 {\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address who) external view returns (uint256);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// Add the tokens, that's when the crowdsale starts\r\n// Pull the tokens out, that's when it ends\r\n// Users send ether and receive tokens here\r\ncontract Crowdsale {\r\n    mapping(address => bool) internal buyStarted;\r\n    uint256 public ratio;\r\n    IERC20 public mevdao;\r\n    address public owner;\r\n\r\n    event Purchase(address indexed buyer, uint256 indexed amountEth, uint256 indexed tokenAmount, uint256 timestamp);\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner, \"owner\");\r\n        _;\r\n    }\r\n\r\n    constructor(uint256 _ratio, address _mevdao) {\r\n        ratio = _ratio;\r\n        mevdao = IERC20(_mevdao);\r\n        owner = msg.sender;\r\n    }\r\n\r\n    receive() external payable {\r\n        participate();\r\n    }\r\n\r\n    function participate() public payable {\r\n        require(!buyStarted[msg.sender], \"Can't re-enter\");\r\n        buyStarted[msg.sender] = true;\r\n        uint256 balance = mevdao.balanceOf(address(this));\r\n        uint256 tokensToReceive = msg.value * ratio; // msg.value * ratio = tokensToReceive\r\n\r\n        if (tokensToReceive > balance) {\r\n            // Refund remaining eth\r\n            uint256 remaining = tokensToReceive - balance;\r\n            tokensToReceive = tokensToReceive - remaining;\r\n            uint256 refundAmount = remaining / ratio;\r\n            payable(msg.sender).transfer(refundAmount);\r\n        }\r\n\r\n        mevdao.transfer(msg.sender, tokensToReceive);\r\n\r\n        emit Purchase(msg.sender, msg.value, tokensToReceive, block.timestamp);\r\n        buyStarted[msg.sender] = false;\r\n    }\r\n\r\n    function updateRatio(uint256 _ratio) external onlyOwner {\r\n        ratio = _ratio;\r\n    }\r\n\r\n    function recoverETH() external onlyOwner {\r\n        payable(owner).transfer(address(this).balance);\r\n    }\r\n\r\n    function recoverStuckTokens(address _token) external onlyOwner {\r\n        uint256 balance = IERC20(_token).balanceOf(address(this));\r\n        IERC20(_token).transfer(owner, balance);\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_ratio\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_mevdao\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amountEth\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"Purchase\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"mevdao\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"participate\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ratio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"recoverETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"recoverStuckTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_ratio\",\"type\":\"uint256\"}],\"name\":\"updateRatio\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "Crowdsale", "CompilerVersion": "v0.8.0+commit.c7dfd78e", "OptimizationUsed": "1", "Runs": "999999", "ConstructorArguments": "0000000000000000000000000000000000000000000000000000000000000bb80000000000000000000000003b9c5bf4866eee8abeaec504d91d7d76440007c2", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://fb5825875a51d3028ed645acd5b443aaa5b87594ecd31df823968d26dfd7935b"}