{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(\\n        address[] calldata accounts,\\n        uint256[] calldata ids\\n    ) external view returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes calldata data) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Compatible with tokens that require the approval to be set to\\n     * 0 before setting it to a non-zero value.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/AirdropClaim.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.9;\\n\\nimport {\\n    Initializable\\n} from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport { IERC721 } from \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport { IERC1155 } from \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {\\n    SafeERC20\\n} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"../utils/DataTypes.sol\\\";\\nimport { IWhitelist } from \\\"./Interfaces/IWhitelist.sol\\\";\\nimport { IAirdropClaim } from \\\"./Interfaces/IAirdropClaim.sol\\\";\\nimport { IStorageRegistry } from \\\"./Interfaces/IStorageRegistry.sol\\\";\\n\\ncontract AirdropClaim is IAirdropClaim, Initializable {\\n    /// -----------------------------------------------------------------------\\n    /// Library usage\\n    /// -----------------------------------------------------------------------\\n\\n    using SafeERC20 for IERC20;\\n\\n    /// -----------------------------------------------------------------------\\n    /// Storage variables\\n    /// -----------------------------------------------------------------------\\n\\n    /// Note: regular state variables, need to be initialized in intialized() method\\n    /// @notice Address of the owner of this clone\\n    address public owner;\\n\\n    /// @notice Time stamp of the reservation duration\\n    uint256 public timeLock;\\n\\n    /// @notice Flag to represent if reservation is complete before time lock ends\\n    bool public reservationComplete;\\n\\n    /// @notice address of storage registry contracts\\n    address public storageRegistryAddress;\\n\\n    /// @notice signatures of restricted ERC20 functions\\n    bytes4 public ERC20_approve;\\n    bytes4 public ERC20_transfer;\\n\\n    /// @notice signatures of restricted ERC721 functions\\n    bytes4 public ERC721_transferFrom;\\n    bytes4 public ERC721_safeTransferFrom;\\n    bytes4 public ERC721_safeTransferFrom_data;\\n    bytes4 public ERC721_approve;\\n    bytes4 public ERC721_setApprovalForAll;\\n\\n    /// @notice signatures of restricted ERC1155 functions\\n    bytes4 public ERC1155_safeTransferFrom;\\n    bytes4 public ERC1155_safeBatchTransferFrom;\\n    bytes4 public ERC1155_setApprovalForAll;\\n\\n    /* ===== INIT ===== */\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    /// @dev Initialize function\\n    /// @param _owner Owner of the current clone\\n    /// @param _timeLock Timestamp for reservation to end\\n    function initialize(\\n        address _owner,\\n        address _storageRegistryAddress,\\n        uint256 _timeLock\\n    ) external override initializer {\\n        if (_owner == address(0) || _storageRegistryAddress == address(0)) {\\n            revert AirdropClaimError(AirdropClaimErrorCodes.INVALID_ADDRESS);\\n        }\\n        storageRegistryAddress = _storageRegistryAddress;\\n        owner = _owner;\\n        timeLock = _timeLock;\\n\\n        ERC20_approve = bytes4(abi.encodePacked(IERC20.approve.selector));\\n        ERC20_transfer = bytes4(abi.encodePacked(IERC20.transfer.selector));\\n\\n        ERC721_approve = bytes4(abi.encodePacked(IERC721.approve.selector));\\n        ERC721_setApprovalForAll = bytes4(\\n            abi.encodePacked(IERC721.setApprovalForAll.selector)\\n        );\\n        ERC721_transferFrom = bytes4(\\n            abi.encodePacked(IERC721.transferFrom.selector)\\n        );\\n        ERC721_safeTransferFrom = bytes4(\\n            keccak256(\\\"safeTransferFrom(address,address,uint256)\\\")\\n        );\\n        ERC721_safeTransferFrom_data = bytes4(\\n            keccak256(\\\"safeTransferFrom(address,address,uint256,bytes)\\\")\\n        );\\n\\n        ERC1155_safeTransferFrom = bytes4(\\n            abi.encodePacked(IERC1155.safeTransferFrom.selector)\\n        );\\n        ERC1155_safeBatchTransferFrom = bytes4(\\n            abi.encodePacked(IERC1155.safeBatchTransferFrom.selector)\\n        );\\n        ERC1155_setApprovalForAll = bytes4(\\n            abi.encodePacked(IERC1155.setApprovalForAll.selector)\\n        );\\n    }\\n\\n    /// -----------------------------------------------------------------------\\n    /// Modifiers\\n    /// -----------------------------------------------------------------------\\n\\n    modifier onlyReserve() {\\n        _onlyReserve();\\n        _;\\n    }\\n\\n    modifier onlyOwner() {\\n        _onlyOwner();\\n        _;\\n    }\\n\\n    /// -----------------------------------------------------------------------\\n    /// Claim Actions\\n    /// -----------------------------------------------------------------------\\n\\n    /// @dev Inherit from IAirdropClaim\\n    function claimAirdrop(\\n        Assets calldata _assets,\\n        address _contract,\\n        bytes calldata _data\\n    ) external override onlyReserve {\\n        bytes4 _sig = bytes4(_data);\\n        _checkRestrictedFunctions(_sig);\\n\\n        // call air drop contract and claim eligible tokens\\n        (bool success, bytes memory _response) = _contract.call(_data);\\n        if (!success) {\\n            revert(string(_response));\\n        }\\n\\n        // cache storage registry address\\n        address _storageRegistryAddress = storageRegistryAddress;\\n\\n        address vaultAddress = _vaultAddress(_storageRegistryAddress);\\n        address whitelistContract = _whitelistAddress(_storageRegistryAddress);\\n\\n        // approve assets for returning to vault\\n        (AssetType[] memory nftTypes, ) = IWhitelist(whitelistContract)\\n            .getAssetsTypes(_assets);\\n        uint256 len = _assets.tokens.length;\\n\\n        for (uint256 i; i < len; i++) {\\n            if (nftTypes[i] == AssetType.ERC_721) {\\n                approveERC721(_assets.tokens[i], vaultAddress);\\n            } else if (nftTypes[i] == AssetType.ERC_1155) {\\n                approveERC1155(_assets.tokens[i], vaultAddress);\\n            } else if (nftTypes[i] == AssetType.KITTIES) {\\n                approveKitty(\\n                    _assets.tokens[i],\\n                    _assets.tokenIds[i],\\n                    vaultAddress\\n                );\\n            } else if (nftTypes[i] == AssetType.PUNK) {\\n                approvePunk(\\n                    _assets.tokens[i],\\n                    _assets.tokenIds[i],\\n                    vaultAddress\\n                );\\n            } else {\\n                revert AirdropClaimError(\\n                    AirdropClaimErrorCodes.INVALID_ASSET_TYPE\\n                );\\n            }\\n        }\\n    }\\n\\n    /// @dev Inherit from IAirdropClaim\\n    function transferOwnershipAndCompleteReservation(\\n        address _newOwner\\n    ) external override onlyReserve {\\n        if (_newOwner == address(0)) {\\n            revert AirdropClaimError(AirdropClaimErrorCodes.INVALID_ADDRESS);\\n        }\\n\\n        // set reservation as complete and update the owner of contract\\n        reservationComplete = true;\\n        owner = _newOwner;\\n    }\\n\\n    /// -----------------------------------------------------------------------\\n    /// Owner actions\\n    /// -----------------------------------------------------------------------\\n\\n    /// @dev Inherit from IAirdropClaim\\n    function withdrawAssets(\\n        address[] calldata _tokens,\\n        uint256[] calldata _tokenIds,\\n        uint256[] calldata _amounts,\\n        AssetType[] calldata _types\\n    ) external override onlyOwner {\\n        // check if the reservation is complete or time lock has expired\\n        if (!reservationComplete) {\\n            _checkTimelock();\\n        }\\n\\n        // transfer the tokens as passed in the function params\\n        uint256 len = _tokens.length;\\n        for (uint256 i; i < len; i++) {\\n            if (_types[i] == AssetType.ERC_721) {\\n                IERC721(_tokens[i]).safeTransferFrom(\\n                    address(this),\\n                    msg.sender,\\n                    _tokenIds[i]\\n                );\\n            } else if (_types[i] == AssetType.ERC_1155) {\\n                IERC1155(_tokens[i]).safeTransferFrom(\\n                    address(this),\\n                    msg.sender,\\n                    _tokenIds[i],\\n                    _amounts[i],\\n                    \\\"\\\"\\n                );\\n            } else if (_types[i] == AssetType.KITTIES) {\\n                _sendKitty(_tokens[i], _tokenIds[i], msg.sender);\\n            } else if (_types[i] == AssetType.PUNK) {\\n                _sendPunk(_tokens[i], _tokenIds[i], msg.sender);\\n            } else if (_types[i] == AssetType.ERC_20) {\\n                IERC20(_tokens[i]).safeTransfer(msg.sender, _amounts[i]);\\n            } else {\\n                revert AirdropClaimError(\\n                    AirdropClaimErrorCodes.INVALID_ASSET_TYPE\\n                );\\n            }\\n        }\\n    }\\n\\n    /// @dev See {IERC721Receiver - onERC721Received}\\n    function onERC721Received(\\n        address,\\n        address,\\n        uint256,\\n        bytes calldata\\n    ) external pure returns (bytes4) {\\n        return\\n            bytes4(\\n                keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\")\\n            );\\n    }\\n\\n    /// @dev See {IERC1155Receiver - onERC1155Received}\\n    function onERC1155Received(\\n        address,\\n        address,\\n        uint256,\\n        uint256,\\n        bytes calldata\\n    ) external pure returns (bytes4) {\\n        return\\n            bytes4(\\n                keccak256(\\n                    \\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"\\n                )\\n            );\\n    }\\n\\n    /// -----------------------------------------------------------------------\\n    /// Interal functions\\n    /// -----------------------------------------------------------------------\\n\\n    /// @dev Restrict token transfer and approval functions to prevent\\n    ///      premature withdrawing of assets\\n    /// @param _sig Funtion signature in the _data param\\n    /// NOTE restricting the following functions\\n    ///      ERC_20\\n    ///      1. approve\\n    ///      2. transfer\\n    ///\\n    ///      ERC_721\\n    ///      1. transferFrom\\n    ///      2. safeTransferFrom\\n    ///      3. safeTransferFrom\\n    ///      4. approve\\n    ///      5. setApprovalForAll\\n    ///\\n    ///      ERC_1155\\n    ///      1. safeTransferFrom\\n    ///      2. safeBatchTransferFrom\\n    ///      3. setApprovalForAll\\n    function _checkRestrictedFunctions(bytes4 _sig) internal view {\\n        if (_sig == ERC20_approve || _sig == ERC20_transfer) {\\n            revert AirdropClaimError(\\n                AirdropClaimErrorCodes.RESTRICTED_ERC_20_FUNCTION\\n            );\\n        }\\n\\n        if (\\n            _sig == ERC721_approve ||\\n            _sig == ERC721_safeTransferFrom ||\\n            _sig == ERC721_safeTransferFrom_data ||\\n            _sig == ERC721_setApprovalForAll ||\\n            _sig == ERC721_transferFrom\\n        ) {\\n            revert AirdropClaimError(\\n                AirdropClaimErrorCodes.RESTRICTED_ERC_721_FUNCTION\\n            );\\n        }\\n\\n        if (\\n            _sig == ERC1155_safeBatchTransferFrom ||\\n            _sig == ERC1155_safeTransferFrom ||\\n            _sig == ERC1155_setApprovalForAll\\n        ) {\\n            revert AirdropClaimError(\\n                AirdropClaimErrorCodes.RESTRICTED_ERC_1155_FUNCTION\\n            );\\n        }\\n    }\\n\\n    /// @dev internal function to get vault address from storage registry contract\\n    /// @param _storageRegistryAddress  memoized storage registry address\\n    function _vaultAddress(\\n        address _storageRegistryAddress\\n    ) internal view returns (address) {\\n        return IStorageRegistry(_storageRegistryAddress).vaultAddress();\\n    }\\n\\n    /// @dev internal function to get whitelist address from storage registry contract\\n    /// @param _storageRegistryAddress  memoized storage registry address\\n    function _whitelistAddress(\\n        address _storageRegistryAddress\\n    ) internal view returns (address) {\\n        return IStorageRegistry(_storageRegistryAddress).whitelistAddress();\\n    }\\n\\n    /// @dev internal function to get reserve address from storage registry contract\\n    /// @param _storageRegistryAddress  memoized storage registry address\\n    function _reserveAddress(\\n        address _storageRegistryAddress\\n    ) internal view returns (address) {\\n        return IStorageRegistry(_storageRegistryAddress).reserveAddress();\\n    }\\n\\n    /// @dev Approve ERC721 token to the vault\\n    /// @param _contract : address of the NFT contract\\n    /// @param vaultContract : address of the vault contract\\n    function approveERC721(address _contract, address vaultContract) internal {\\n        if (\\n            !IERC721(_contract).isApprovedForAll(address(this), vaultContract)\\n        ) {\\n            IERC721(_contract).setApprovalForAll(vaultContract, true);\\n        }\\n    }\\n\\n    /// @dev Approve ERC1155 token to the vault\\n    /// @param _contract : address of the NFT contract\\n    /// @param vaultContract : address of the vault contract\\n    function approveERC1155(address _contract, address vaultContract) internal {\\n        if (\\n            !IERC1155(_contract).isApprovedForAll(address(this), vaultContract)\\n        ) {\\n            IERC1155(_contract).setApprovalForAll(vaultContract, true);\\n        }\\n    }\\n\\n    /// @dev Approve crypto kitty token to the vault\\n    /// @param _contract : address of the NFT contract\\n    /// @param vaultContract : address of the vault contract\\n    function approveKitty(\\n        address _contract,\\n        uint256 _tokenId,\\n        address vaultContract\\n    ) internal {\\n        bytes memory data = abi.encodeWithSignature(\\n            \\\"approve(address,uint256)\\\",\\n            vaultContract,\\n            _tokenId\\n        );\\n        (bool success, bytes memory _response) = _contract.call(data);\\n        if (!success) {\\n            revert(string(_response));\\n        }\\n    }\\n\\n    /// @dev Approve PUNK token to the vault\\n    /// NOTE : There is no approve function in cryptopunk contract, hence behaviour of\\n    ///        approve is immitated using the offerPunkForSaleToAddress function similar to\\n    ///        cryptpunk wrappers.\\n    /// @param _contract : address of the NFT contract\\n    /// @param vaultContract : address of the vault contract\\n    function approvePunk(\\n        address _contract,\\n        uint256 _punkIndex,\\n        address vaultContract\\n    ) internal {\\n        bytes memory data = abi.encodeWithSignature(\\n            \\\"offerPunkForSaleToAddress(uint256,uint256,address)\\\",\\n            _punkIndex,\\n            0,\\n            vaultContract\\n        );\\n        (bool success, bytes memory _response) = _contract.call(data);\\n        if (!success) {\\n            revert(string(_response));\\n        }\\n    }\\n\\n    /// @dev Send CryptKitty NFT to _to address\\n    /// @param _token cryptoKitty contract address\\n    /// @param _tokenId cryptoKitty tokenId\\n    /// @param _to address to send to\\n    function _sendKitty(\\n        address _token,\\n        uint256 _tokenId,\\n        address _to\\n    ) internal {\\n        bytes memory data = abi.encodeWithSignature(\\n            \\\"transfer(address,uint256)\\\",\\n            _to,\\n            _tokenId\\n        );\\n        (bool success, ) = _token.call(data);\\n        if (!success) {\\n            revert AirdropClaimError(\\n                AirdropClaimErrorCodes.COULD_NOT_SEND_KITTY\\n            );\\n        }\\n    }\\n\\n    /// @dev Send crypto punk NFT\\n    /// @param _punkAddress Address of crypto punk contract\\n    /// @param _punkIndex tokenId of PUNK\\n    /// @param _to address to send to\\n    function _sendPunk(\\n        address _punkAddress,\\n        uint256 _punkIndex,\\n        address _to\\n    ) internal {\\n        bytes memory data = abi.encodeWithSignature(\\n            \\\"transferPunk(address,uint256)\\\",\\n            _to,\\n            _punkIndex\\n        );\\n        (bool success, ) = _punkAddress.call(data);\\n        if (!success) {\\n            revert AirdropClaimError(\\n                AirdropClaimErrorCodes.COULD_NOT_SEND_PUNK\\n            );\\n        }\\n    }\\n\\n    /// @dev Internal helper function to check owner of the contract\\n    function _onlyOwner() internal view {\\n        if (msg.sender != owner) {\\n            revert AirdropClaimError(AirdropClaimErrorCodes.ONLY_OWNER);\\n        }\\n    }\\n\\n    /// @dev Internal helper function to check reserve contract address\\n    function _onlyReserve() internal view {\\n        if (msg.sender != _reserveAddress(storageRegistryAddress)) {\\n            revert AirdropClaimError(\\n                AirdropClaimErrorCodes.ONLY_RESERVE_CONTRACT\\n            );\\n        }\\n    }\\n\\n    /// @dev Internal helper function to check timelock for this contract\\n    function _checkTimelock() internal view {\\n        if (block.timestamp < timeLock) {\\n            revert AirdropClaimError(AirdropClaimErrorCodes.TIME_NOT_ELAPSED);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Interfaces/IAirdropClaim.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.9;\\n\\nimport \\\"../../utils/DataTypes.sol\\\";\\n\\ninterface IAirdropClaim {\\n    /// -----------------------------------------------------------------------\\n    /// Errors\\n    /// -----------------------------------------------------------------------\\n    enum AirdropClaimErrorCodes {\\n        ONLY_OWNER,\\n        ONLY_RESERVE_CONTRACT,\\n        INVALID_ASSET_TYPE,\\n        TIME_NOT_ELAPSED,\\n        COULD_NOT_SEND_KITTY,\\n        COULD_NOT_SEND_PUNK,\\n        RESTRICTED_ERC_20_FUNCTION,\\n        RESTRICTED_ERC_721_FUNCTION,\\n        RESTRICTED_ERC_1155_FUNCTION,\\n        INVALID_ADDRESS\\n    }\\n\\n    error AirdropClaimError(AirdropClaimErrorCodes code);\\n\\n    /// -----------------------------------------------------------------------\\n    /// Claim Actions\\n    /// -----------------------------------------------------------------------\\n\\n    /// @dev Initialize function\\n    /// @param owner Owner of the current clone\\n    /// @param _storageRegistryAddress Storage Registry\\n    /// @param timeLock Timestamp for reservation to end\\n    function initialize(\\n        address owner,\\n        address _storageRegistryAddress,\\n        uint256 timeLock\\n    ) external;\\n\\n    /// @dev Core function to claim air drops\\n    /// @notice This function should be called by the reserve contract after sending\\n    ///         _assets to this contract\\n    /// @param assets Assets sent to this contract as part of the function call\\n    /// @param _contract Address of the airdrop contract to call\\n    /// @param data Data to pass in the call, ie. Abi encoded function signature with parameters.\\n    function claimAirdrop(\\n        Assets calldata assets,\\n        address _contract,\\n        bytes calldata data\\n    ) external;\\n\\n    /// @dev Core function to update completeness of reservation and update\\n    ///      owner of this contract. Must be called by reserve contract only\\n    /// @param _newOwner New owner of the contract\\n    function transferOwnershipAndCompleteReservation(\\n        address _newOwner\\n    ) external;\\n\\n    /// -----------------------------------------------------------------------\\n    /// Owner actions\\n    /// -----------------------------------------------------------------------\\n\\n    /// @dev Core function to withdraw air dropped assets. Must be called by the\\n    ///      owner only and either timelock must have expired or reservation has completed\\n    /// @param tokens : Token addresses begin withdrawn from the contract\\n    /// @param tokenIds : Token ids of the tokens been airdropped. NOTE : This will be 0 case of ERC20\\n    /// @param amounts : Amount of tokens being withdrawn. NOTE : This must be 1 in case of ERC721\\n    /// @param types : Type of the asset\\n    function withdrawAssets(\\n        address[] calldata tokens,\\n        uint256[] calldata tokenIds,\\n        uint256[] calldata amounts,\\n        AssetType[] calldata types\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/Interfaces/IStorageRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.9;\\n\\n/// @title NF3 Storage Registry Interface\\n/// @author NF3 Exchange\\n/// @dev This interface defines all the functions related to storage for the protocol.\\n\\ninterface IStorageRegistry {\\n    /// -----------------------------------------------------------------------\\n    /// Errors\\n    /// -----------------------------------------------------------------------\\n    enum StorageRegistryErrorCodes {\\n        INVALID_NONCE,\\n        CALLER_NOT_APPROVED,\\n        INVALID_ADDRESS\\n    }\\n\\n    error StorageRegistryError(StorageRegistryErrorCodes code);\\n\\n    /// -----------------------------------------------------------------------\\n    /// Events\\n    /// -----------------------------------------------------------------------\\n\\n    /// @dev Emits when status has changed.\\n    /// @param owner user whose nonce is updated\\n    /// @param nonce value of updated nonce\\n    event NonceSet(address owner, uint256 nonce);\\n\\n    /// @dev Emits when new market address has set.\\n    /// @param oldMarketAddress Previous market contract address\\n    /// @param newMarketAddress New market contract address\\n    event MarketSet(address oldMarketAddress, address newMarketAddress);\\n\\n    /// @dev Emits when new reserve address has set.\\n    /// @param oldVaultAddress Previous vault contract address\\n    /// @param newVaultAddress New vault contract address\\n    event VaultSet(address oldVaultAddress, address newVaultAddress);\\n\\n    /// @dev Emits when new reserve address has set.\\n    /// @param oldReserveAddress Previous reserve contract address\\n    /// @param newReserveAddress New reserve contract address\\n    event ReserveSet(address oldReserveAddress, address newReserveAddress);\\n\\n    /// @dev Emits when new whitelist contract address has set\\n    /// @param oldWhitelistAddress Previous whitelist contract address\\n    /// @param newWhitelistAddress New whitelist contract address\\n    event WhitelistSet(\\n        address oldWhitelistAddress,\\n        address newWhitelistAddress\\n    );\\n\\n    /// @dev Emits when new swap address has set.\\n    /// @param oldSwapAddress Previous swap contract address\\n    /// @param newSwapAddress New swap contract address\\n    event SwapSet(address oldSwapAddress, address newSwapAddress);\\n\\n    /// @dev Emits when new loan contract address has set\\n    /// @param oldLoanAddress Previous loan contract address\\n    /// @param newLoanAddress New whitelist contract address\\n    event LoanSet(address oldLoanAddress, address newLoanAddress);\\n\\n    /// @dev Emits when airdrop claim implementation address is set\\n    /// @param oldAirdropClaimImplementation Previous air drop claim implementation address\\n    /// @param newAirdropClaimImplementation New air drop claim implementation address\\n    event AirdropClaimImplementationSet(\\n        address oldAirdropClaimImplementation,\\n        address newAirdropClaimImplementation\\n    );\\n\\n    /// @dev Emits when signing utils library address is set\\n    /// @param oldSigningUtilsAddress Previous air drop claim implementation address\\n    /// @param newSigningUtilsAddress New air drop claim implementation address\\n    event SigningUtilSet(\\n        address oldSigningUtilsAddress,\\n        address newSigningUtilsAddress\\n    );\\n\\n    /// @dev Emits when new position token address has set.\\n    /// @param oldPositionTokenAddress Previous position token contract address\\n    /// @param newPositionTokenAddress New position token contract address\\n    event PositionTokenSet(\\n        address oldPositionTokenAddress,\\n        address newPositionTokenAddress\\n    );\\n\\n    /// -----------------------------------------------------------------------\\n    /// Nonce actions\\n    /// -----------------------------------------------------------------------\\n\\n    /// @dev Get the value of nonce without reverting.\\n    /// @param owner Owner address\\n    /// @param _nonce Nonce value\\n    function getNonce(\\n        address owner,\\n        uint256 _nonce\\n    ) external view returns (bool);\\n\\n    /// @dev Check if the nonce is in correct status.\\n    /// @param owner Owner address\\n    /// @param _nonce Nonce value\\n    function checkNonce(address owner, uint256 _nonce) external view;\\n\\n    /// @dev Set the nonce value of a user. Can only be called by reserve contract.\\n    /// @param owner Address of the user\\n    /// @param _nonce Nonce value of the user\\n    function setNonce(address owner, uint256 _nonce) external;\\n\\n    /// -----------------------------------------------------------------------\\n    /// Owner actions\\n    /// -----------------------------------------------------------------------\\n\\n    /// @dev Set Market contract address.\\n    /// @param _marketAddress Market contract address\\n    function setMarket(address _marketAddress) external;\\n\\n    /// @dev Set Vault contract address.\\n    /// @param _vaultAddress Vault contract address\\n    function setVault(address _vaultAddress) external;\\n\\n    /// @dev Set Reserve contract address.\\n    /// @param _reserveAddress Reserve contract address\\n    function setReserve(address _reserveAddress) external;\\n\\n    /// @dev Set Whitelist contract address.\\n    /// @param _whitelistAddress contract address\\n    function setWhitelist(address _whitelistAddress) external;\\n\\n    /// @dev Set Swap contract address.\\n    /// @param _swapAddress Swap contract address\\n    function setSwap(address _swapAddress) external;\\n\\n    /// @dev Set Loan contract address\\n    /// @param _loanAddress Whitelist contract address\\n    function setLoan(address _loanAddress) external;\\n\\n    /// @dev Set Signing Utils library address\\n    /// @param _signingUtilsAddress signing utils contract address\\n    function setSigningUtil(address _signingUtilsAddress) external;\\n\\n    /// @dev Set air drop claim contract implementation address\\n    /// @param _airdropClaimImplementation Airdrop claim contract address\\n    function setAirdropClaimImplementation(\\n        address _airdropClaimImplementation\\n    ) external;\\n\\n    /// @dev Set position token contract address\\n    /// @param _positionTokenAddress position token contract address\\n    function setPositionToken(address _positionTokenAddress) external;\\n\\n    /// @dev Whitelist airdrop contract that can be called for the user\\n    /// @param _contract address of the airdrop contract\\n    /// @param _allow bool value for the whitelist\\n    function setAirdropWhitelist(address _contract, bool _allow) external;\\n\\n    /// @notice Set claim contract address for position token\\n    /// @param _tokenId Token id for which the claim contract is deployed\\n    /// @param _claimContract address of the claim contract\\n    function setClaimContractAddresses(\\n        uint256 _tokenId,\\n        address _claimContract\\n    ) external;\\n\\n    /// -----------------------------------------------------------------------\\n    /// Public Getter Functions\\n    /// -----------------------------------------------------------------------\\n\\n    /// @dev Get whitelist contract address\\n    function whitelistAddress() external view returns (address);\\n\\n    /// @dev Get vault contract address\\n    function vaultAddress() external view returns (address);\\n\\n    /// @dev Get swap contract address\\n    function swapAddress() external view returns (address);\\n\\n    /// @dev Get reserve contract address\\n    function reserveAddress() external view returns (address);\\n\\n    /// @dev Get market contract address\\n    function marketAddress() external view returns (address);\\n\\n    /// @dev Get loan contract address\\n    function loanAddress() external view returns (address);\\n\\n    /// @dev Get airdropClaim contract address\\n    function airdropClaimImplementation() external view returns (address);\\n\\n    /// @dev Get signing utils contract address\\n    function signingUtilsAddress() external view returns (address);\\n\\n    /// @dev Get position token contract address\\n    function positionTokenAddress() external view returns (address);\\n\\n    /// @dev Get claim contract address\\n    function claimContractAddresses(\\n        uint256 _tokenId\\n    ) external view returns (address);\\n\\n    /// @dev Get whitelist of an airdrop contract\\n    function airdropWhitelist(address _contract) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/Interfaces/IWhitelist.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.9;\\n\\nimport \\\"../../utils/DataTypes.sol\\\";\\n\\n/// @title NF3 Swap Interface\\n/// @author NF3 Exchange\\n/// @dev This interface defines all the functions related to whitelisting of tokens\\n\\ninterface IWhitelist {\\n    /// -----------------------------------------------------------------------\\n    /// Errors\\n    /// -----------------------------------------------------------------------\\n\\n    enum WhitelistErrorCodes {\\n        INVALID_ITEM\\n    }\\n\\n    error WhitelistError(WhitelistErrorCodes code);\\n\\n    /// -----------------------------------------------------------------------\\n    /// Events\\n    /// -----------------------------------------------------------------------\\n\\n    /// @dev Emits when new tokens are whitelisted and their types are set\\n    /// @param tokens addresses of tokens that are whitelisted\\n    /// @param types type of token set to\\n    event TokensTypeSet(address[] tokens, AssetType[] types);\\n\\n    /// -----------------------------------------------------------------------\\n    /// User Actions\\n    /// -----------------------------------------------------------------------\\n\\n    /// @dev Check if all the passed assets are whitelisted\\n    /// @param assets Assets to check on\\n    function checkAssetsWhitelist(Assets calldata assets) external view;\\n\\n    /// @dev Check and return types of assets\\n    /// @param assets Assets to check on\\n    /// @return nftType types of nfts sent\\n    /// @return ftType types of fts sent\\n    function getAssetsTypes(\\n        Assets calldata assets\\n    ) external view returns (AssetType[] memory, AssetType[] memory);\\n\\n    /// -----------------------------------------------------------------------\\n    /// Owner actions\\n    /// -----------------------------------------------------------------------\\n\\n    /// @dev Set types of the tokens passed\\n    /// @param tokens Tokens to set\\n    /// @param types Types of tokens\\n    function setTokenTypes(\\n        address[] calldata tokens,\\n        AssetType[] calldata types\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"utils/DataTypes.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.9;\\n\\n/// @dev Royalties for collection creators and platform fee for platform manager.\\n///      to[0] is platform owner address.\\n/// @param to Creators and platform manager address array\\n/// @param percentage Royalty percentage based on the listed FT\\nstruct Royalty {\\n    address[] to;\\n    uint256[] percentage;\\n}\\n\\n/// @dev Common Assets type, packing bundle of NFTs and FTs.\\n/// @param tokens NFT asset address\\n/// @param tokenIds NFT token id\\n/// @param paymentTokens FT asset address\\n/// @param amounts FT token amount\\nstruct Assets {\\n    address[] tokens;\\n    uint256[] tokenIds;\\n    address[] paymentTokens;\\n    uint256[] amounts;\\n}\\n\\n/// @dev Common SwapAssets type, packing Bundle of NFTs and FTs. Notice tokenIds are represented by merkle roots\\n///      Each collection address ie. tokens[i] will have a merkle root corrosponding it's valid tokenIds.\\n///      This is used to select particular tokenId in corrospoding collection. If roots[i]\\n///      has the value of bytes32(0), this means the entire collection is considered valid.\\n/// @param tokens NFT asset address\\n/// @param roots Merkle roots of the criterias. NOTE: bytes32(0) represents the entire collection\\n/// @param paymentTokens FT asset address\\n/// @param amounts FT token amount\\nstruct SwapAssets {\\n    address[] tokens;\\n    bytes32[] roots;\\n    address[] paymentTokens;\\n    uint256[] amounts;\\n}\\n\\n/// @dev Common Reserve type, packing data related to reserve listing and reserve offer.\\n/// @param deposit Assets considered as initial deposit\\n/// @param remaining Assets considered as due amount\\n/// @param duration Duration of reserve now swap later\\nstruct ReserveInfo {\\n    Assets deposit;\\n    Assets remaining;\\n    uint256 duration;\\n}\\n\\n/// @dev All the reservation details that are stored in the position token\\n/// @param reservedAssets Assets that were reserved as a part of the reservation\\n/// @param reservedAssestsRoyalty Royalty offered by the assets owner\\n/// @param reserveInfo Deposit, remainig and time duriation details of the reservation\\n/// @param assetOwner Original owner of the reserved assets\\nstruct Reservation {\\n    Assets reservedAssets;\\n    Royalty reservedAssetsRoyalty;\\n    ReserveInfo reserveInfo;\\n    address assetOwner;\\n}\\n\\n/// @dev Listing type, packing the assets being listed, listing parameters, listing owner\\n///      and users's nonce.\\n/// @param listingAssets All the assets listed\\n/// @param directSwaps List of options for direct swap\\n/// @param reserves List of options for reserve now swap later\\n/// @param royalty Listing royalty and platform fee info\\n/// @param timePeriod Time period of listing\\n/// @param owner Owner's address\\n/// @param nonce User's nonce\\nstruct Listing {\\n    Assets listingAssets;\\n    SwapAssets[] directSwaps;\\n    ReserveInfo[] reserves;\\n    Royalty royalty;\\n    address tradeIntendedFor;\\n    uint256 timePeriod;\\n    address owner;\\n    uint256 nonce;\\n}\\n\\n/// @dev Listing type of special NF3 banner listing\\n/// @param token address of collection\\n/// @param tokenId token id being listed\\n/// @param editions number of tokenIds being distributed\\n/// @param gateCollectionsRoot merkle root for eligible collections\\n/// @param timePeriod timePeriod of listing\\n/// @param owner owner of listing\\nstruct NF3GatedListing {\\n    address token;\\n    uint256 tokenId;\\n    uint256 editions;\\n    bytes32 gatedCollectionsRoot;\\n    uint256 timePeriod;\\n    address owner;\\n}\\n\\n/// @dev Swap Offer type info.\\n/// @param offeringItems Assets being offered\\n/// @param royalty Swap offer royalty info\\n/// @param considerationRoot Assets to which this offer is made\\n/// @param timePeriod Time period of offer\\n/// @param owner Offer owner\\n/// @param nonce Offer nonce\\nstruct SwapOffer {\\n    Assets offeringItems;\\n    Royalty royalty;\\n    bytes32 considerationRoot;\\n    uint256 timePeriod;\\n    address owner;\\n    uint256 nonce;\\n}\\n\\n/// @dev Reserve now swap later type offer info.\\n/// @param reserveDetails Reservation scheme begin offered\\n/// @param considerationRoot Assets to which this offer is made\\n/// @param royalty Reserve offer royalty info\\n/// @param timePeriod Time period of offer\\n/// @param owner Offer owner\\n/// @param nonce Offer nonce\\nstruct ReserveOffer {\\n    ReserveInfo reserveDetails;\\n    bytes32 considerationRoot;\\n    Royalty royalty;\\n    uint256 timePeriod;\\n    address owner;\\n    uint256 nonce;\\n}\\n\\n/// @dev Collection offer type info.\\n/// @param offeringItems Assets being offered\\n/// @param considerationItems Assets to which this offer is made\\n/// @param royalty Collection offer royalty info\\n/// @param timePeriod Time period of offer\\n/// @param owner Offer owner\\n/// @param nonce Offer nonce\\nstruct CollectionSwapOffer {\\n    Assets offeringItems;\\n    SwapAssets considerationItems;\\n    Royalty royalty;\\n    uint256 timePeriod;\\n    address owner;\\n    uint256 nonce;\\n}\\n\\n/// @dev Collection Reserve type offer info.\\n/// @param reserveDetails Reservation scheme begin offered\\n/// @param considerationItems Assets to which this offer is made\\n/// @param royalty Reserve offer royalty info\\n/// @param timePeriod Time period of offer\\n/// @param owner Offer owner\\n/// @param nonce Offer nonce\\nstruct CollectionReserveOffer {\\n    ReserveInfo reserveDetails;\\n    SwapAssets considerationItems;\\n    Royalty royalty;\\n    uint256 timePeriod;\\n    address owner;\\n    uint256 nonce;\\n}\\n\\n/// @dev Swap Params type to be used as one of the input params\\n/// @param tokens Tokens provided in the parameters\\n/// @param tokenIds Token Ids provided in the parameters\\n/// @param proofs Merkle proofs provided in the parameters\\nstruct SwapParams {\\n    address[] tokens;\\n    uint256[] tokenIds;\\n    bytes32[][] proofs;\\n}\\n\\n/// @dev Fees struct to be used to signify fees to be paid by a party\\n/// @param token Address of erc20 tokens to be used for payment\\n/// @param amount amount of tokens to be paid respectively\\n/// @param to address to which the fee is paid\\nstruct Fees {\\n    address token;\\n    uint256 amount;\\n    address to;\\n}\\n\\nenum Status {\\n    AVAILABLE,\\n    EXHAUSTED\\n}\\n\\nenum AssetType {\\n    INVALID,\\n    ETH,\\n    ERC_20,\\n    ERC_721,\\n    ERC_1155,\\n    KITTIES,\\n    PUNK\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 20000\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"enum IAirdropClaim.AirdropClaimErrorCodes\",\"name\":\"code\",\"type\":\"uint8\"}],\"name\":\"AirdropClaimError\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ERC1155_safeBatchTransferFrom\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ERC1155_safeTransferFrom\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ERC1155_setApprovalForAll\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ERC20_approve\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ERC20_transfer\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ERC721_approve\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ERC721_safeTransferFrom\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ERC721_safeTransferFrom_data\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ERC721_setApprovalForAll\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ERC721_transferFrom\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"paymentTokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"internalType\":\"struct Assets\",\"name\":\"_assets\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"_contract\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"claimAirdrop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_storageRegistryAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_timeLock\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reservationComplete\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"storageRegistryAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"timeLock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnershipAndCompleteReservation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"enum AssetType[]\",\"name\":\"_types\",\"type\":\"uint8[]\"}],\"name\":\"withdrawAssets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "AirdropClaim", "CompilerVersion": "v0.8.9+commit.e5eed63a", "OptimizationUsed": "1", "Runs": "20000", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}