{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.22;\r\n\r\ncontract CRRevenueSharing {\r\n    address public marketingFund;\r\n    address public developmentFund;\r\n    address public owner;\r\n\r\n    struct Holder {\r\n        address holderAddress;\r\n        uint256 amount;\r\n    }\r\n\r\n    event OwnershipRenounced(address indexed previousOwner);\r\n\r\n    event AddedToCR(address indexed payer, uint256 amount, address token);\r\n\r\n    event RevenueDistributed(uint256 totalPayment, uint256 successfulPayments);\r\n    event PaymentSuccess(address holderAddress, uint256 amount);\r\n    event PaymentFailed(address holderAddress, uint256 amount);\r\n\r\n    constructor() {\r\n        marketingFund = 0x8dF75F0936f8BFbc7117726097530677A9F7d604;\r\n        developmentFund = 0x0E6337d6a0Cf896E56147B3Cd3A0589613991EF1;\r\n        owner = msg.sender;\r\n    }\r\n\r\n    function addToCR(address tokenAddress) external payable {\r\n        require(msg.value > 0, 'Payment should be greater than 0');\r\n\r\n        uint256 marketingFundPayment = (msg.value * 40) / 100;\r\n        uint256 developmentFundPayment = (msg.value * 10) / 100;\r\n\r\n        payable(marketingFund).transfer(marketingFundPayment);\r\n        payable(developmentFund).transfer(developmentFundPayment);\r\n\r\n        emit AddedToCR(msg.sender, msg.value, tokenAddress);\r\n    }\r\n\r\n\r\n    function distributeRevenue(\r\n        Holder[] memory holders\r\n    ) external onlyDevelopmentFund {\r\n        uint256 totalPayment = 0;\r\n        uint256 successfulPayments = 0;\r\n\r\n        for (uint256 i = 0; i < holders.length; i++) {\r\n            Holder memory holder = holders[i];\r\n            address payable holderAddress = payable(holder.holderAddress);\r\n\r\n            if (\r\n                holderAddress != address(0) &&\r\n                holder.amount > 0 &&\r\n                holder.amount <= address(this).balance\r\n            ) {\r\n                bool success = holderAddress.send(holder.amount);\r\n\r\n                if (success) {\r\n                    emit PaymentSuccess(holder.holderAddress, holder.amount);\r\n                    totalPayment += holder.amount;\r\n                    successfulPayments++;\r\n                } else {\r\n                    emit PaymentFailed(holder.holderAddress, holder.amount);\r\n                }\r\n            } else {\r\n                emit PaymentFailed(holder.holderAddress, holder.amount);\r\n            }\r\n        }\r\n\r\n        emit RevenueDistributed(totalPayment, successfulPayments);\r\n    }\r\n\r\n    modifier onlyDevelopmentFund() {\r\n        require(msg.sender == developmentFund, 'Only the Development Fund can call this function.');\r\n        _;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, 'Caller is not the owner');\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public {\r\n        require(owner == msg.sender, 'Not the contract owner');\r\n        emit OwnershipRenounced(owner);\r\n        owner = address(0);\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"payer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"AddedToCR\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"holderAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PaymentFailed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"holderAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PaymentSuccess\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalPayment\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"successfulPayments\",\"type\":\"uint256\"}],\"name\":\"RevenueDistributed\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"addToCR\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"developmentFund\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"holderAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct CRRevenueSharing.Holder[]\",\"name\":\"holders\",\"type\":\"tuple[]\"}],\"name\":\"distributeRevenue\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingFund\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "CRRevenueSharing", "CompilerVersion": "v0.8.22+commit.4fc1097e", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://d619270127f6cc2f47b12943cdba7edf0e0b5b7164dfd0e99f4d81db26fe3979"}