{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interface/IGenesisNft.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.22;\\n\\ninterface IGenesisNft {\\n    function reward(uint256 _tokenId, uint256 _amount) external;\\n\\n    function getShares(uint256 _tokenId, uint256 _month) external view returns (uint256);\\n\\n    function getStaked(\\n        uint256 _tokenId,\\n        uint256 _month\\n    ) external view returns (uint256 stakedAmount, uint256 stakedAmountMinimum);\\n\\n    function getTotals(\\n        uint256 _month\\n    ) external view returns (uint256 _totalShares, uint256 _totalBalance, uint256 _minimumBalance);\\n\\n    function getAirdropStartTime() external view returns (uint256);\\n\\n    function startTime() external view returns (uint128);\\n\\n    function ownerOf(uint256 tokenId) external view returns (address);\\n\\n    function getCurrentMonth() external view returns (uint256);\\n\\n    function monthlyTotal(\\n        uint256 _month\\n    ) external view returns (uint32 totalShares, uint128 totalStaked, uint128 minimumStaked);\\n}\\n\"\r\n    },\r\n    \"contracts/interface/IRewarder.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.22;\\n\\ninterface IRewarder {\\n    function claim(uint256 _nftId) external;\\n}\\n\"\r\n    },\r\n    \"contracts/reward/RewardWrapper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.22;\\n\\nimport \\\"./../interface/IGenesisNft.sol\\\";\\nimport \\\"./../interface/IRewarder.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nerror NftNotOwned();\\n\\ncontract RewardWrapper is Ownable {\\n    IGenesisNft immutable nft;\\n    IRewarder[] public rewarder;\\n\\n    event RewardersSet(address[] rewarders);\\n    /**\\n     * @notice Initializes the contract with given addresses.\\n     * @param _genesisNftAddress Address of the Genesis NFT contract.\\n     * @param _rewardAddresses Addresses of the reward contracts.\\n     */\\n    constructor(address _genesisNftAddress, address[] memory _rewardAddresses) {\\n        nft = IGenesisNft(_genesisNftAddress);\\n        for (uint256 i = 0; i < _rewardAddresses.length; ++i) {\\n            rewarder.push(IRewarder(_rewardAddresses[i]));\\n        }\\n    }\\n\\n    /**\\n     * @notice Claims rewards on all reward contracts for a give nftId.\\n     * @param _nftId Id of the nft to claim rewards for.\\n     */\\n    function claim(uint256 _nftId) external {\\n        if (msg.sender != nft.ownerOf(_nftId)) {\\n            revert NftNotOwned();\\n        }\\n\\n        for (uint256 i = 0; i < rewarder.length; ++i) {\\n            rewarder[i].claim(_nftId);\\n        }\\n    }\\n\\n    /**\\n     * @notice Set the array of reward contracts.\\n     * @param _rewardAddresses Addresses of the reward contracts.\\n     */\\n    function setRewarders(address[] memory _rewardAddresses) external onlyOwner {\\n        delete rewarder;\\n        for (uint256 i = 0; i < _rewardAddresses.length; ++i) {\\n            rewarder.push(IRewarder(_rewardAddresses[i]));\\n        }\\n        emit RewardersSet(_rewardAddresses);\\n    }\\n\\n    /**\\n     * Get the array of reward contract addresses.\\n     * @return rewarder array of reward contract addresses.\\n     */\\n    function getRewarders() external view returns (IRewarder[] memory) {\\n        return rewarder;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"none\"\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 800\r\n    },\r\n    \"evmVersion\": \"paris\",\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_genesisNftAddress\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_rewardAddresses\",\"type\":\"address[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"NftNotOwned\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"rewarders\",\"type\":\"address[]\"}],\"name\":\"RewardersSet\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_nftId\",\"type\":\"uint256\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRewarders\",\"outputs\":[{\"internalType\":\"contract IRewarder[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rewarder\",\"outputs\":[{\"internalType\":\"contract IRewarder\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_rewardAddresses\",\"type\":\"address[]\"}],\"name\":\"setRewarders\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "RewardWrapper", "CompilerVersion": "v0.8.22+commit.4fc1097e", "OptimizationUsed": "1", "Runs": "800", "ConstructorArguments": "000000000000000000000000df284759f3689ee82a42c9565003ed0c444444440000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000200000000000000000000000005182335d2fb7c2f54743f2e3f3e2224243124100000000000000000000000003a6f4deb40741d50c5fa4324f0413b0d42d86751", "EVMVersion": "paris", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}