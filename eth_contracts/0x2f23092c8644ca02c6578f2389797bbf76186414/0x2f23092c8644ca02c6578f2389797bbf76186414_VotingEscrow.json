{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"settings\": {\r\n    \"evmVersion\": \"paris\",\r\n    \"libraries\": {},\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 2000\r\n    },\r\n    \"remappings\": [],\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  },\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    constructor() {\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if (_status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/VotingEscrow.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.23;\\n\\n/***\\n *@title VotingEscrow\\n *@notice Votes have a weight depending on time, so that users are\\n *        committed to the future of (whatever they are voting for)\\n *@dev Vote weight decays linearly over time. Lock time cannot be\\n *     more than `MAXTIME` (4 years).\\n */\\n\\n// Voting escrow to have time-weighted votes\\n// Votes have a weight depending on time, so that users are committed\\n// to the future of (whatever they are voting for).\\n// The weight in this implementation is linear, and lock cannot be more than maxtime\\n// w ^\\n// 1 +        /\\n//   |      /\\n//   |    /\\n//   |  /\\n//   |/\\n// 0 +--------+------> time\\n//       maxtime (4 years?)\\n\\n// Interface for checking whether address belongs to a whitelisted\\n// type of a smart wallet.\\n// When new types are added - the whole contract is changed\\n// The check() method is modifying to be able to use caching\\n// for individual wallet addresses\\nimport \\\"./interfaces/dao/ISmartWalletChecker.sol\\\";\\n\\nimport \\\"./interfaces/pool/IOwnership.sol\\\";\\n\\n//libraries\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\n\\ncontract VotingEscrow is ReentrancyGuard {\\n    struct Point {\\n        int256 bias;\\n        int256 slope; // - dweight / dt\\n        uint256 ts; //timestamp\\n        uint256 blk; // block\\n    }\\n    // We cannot really do block numbers per se b/c slope is per time, not per block\\n    // and per block could be fairly bad b/c Ethereum changes blocktimes.\\n    // What we can do is to extrapolate ***At functions\\n\\n    struct LockedBalance {\\n        int256 amount;\\n        uint256 end;\\n    }\\n\\n    int256 constant DEPOSIT_FOR_TYPE = 0;\\n    int256 constant CREATE_LOCK_TYPE = 1;\\n    int256 constant INCREASE_LOCK_AMOUNT = 2;\\n    int256 constant INCREASE_UNLOCK_TIME = 3;\\n\\n    event Deposit(\\n        address indexed provider,\\n        uint256 value,\\n        uint256 indexed locktime,\\n        int256 _type,\\n        uint256 ts\\n    );\\n    event Withdraw(address indexed provider, uint256 value, uint256 ts);\\n    event ForceUnlock(address target, uint256 value, uint256 ts);\\n\\n    event Supply(uint256 prevSupply, uint256 supply);\\n\\n    event commitWallet(address newSmartWalletChecker);\\n    event applyWallet(address newSmartWalletChecker);\\n\\n    event LogMigrate(address indexed migrator, address indexed user);\\n\\n    uint256 constant WEEK = 7 * 86400; // all future times are rounded by week\\n    uint256 constant MAXTIME = 4 * 365 * 86400; // 4 years\\n    uint256 constant MULTIPLIER = 10**18;\\n    uint256 public constant MIGRATE_TIME = 7 * 86400;\\n\\n    address public token;\\n    address public migrater;\\n    uint256 public supply;\\n\\n    mapping(address => LockedBalance) public locked;\\n\\n    //everytime user deposit/withdraw/change_locktime, these values will be updated;\\n    uint256 public epoch;\\n    Point[100000000000000000000000000000] public point_history; // epoch -> unsigned point.\\n    mapping(address => Point[1000000000]) public user_point_history; // user -> Point[user_epoch]\\n    mapping(address => uint256) public user_point_epoch;\\n    mapping(uint256 => int256) public slope_changes; // time -> signed slope change\\n\\n    // Aragon's view methods for compatibility\\n    address public controller;\\n    bool public transfersEnabled;\\n\\n    string public name;\\n    string public symbol;\\n    string public version;\\n    uint256 public constant decimals = 18;\\n\\n    // Checker for whitelisted (smart contract) wallets which are allowed to deposit\\n    // The goal is to prevent tokenizing the escrow\\n    address public future_smart_wallet_checker;\\n    address public smart_wallet_checker;\\n\\n    IOwnership public immutable ownership;\\n\\n    modifier onlyOwner() {\\n        require(\\n            ownership.owner() == msg.sender,\\n            \\\"Caller is not allowed to operate\\\"\\n        );\\n        _;\\n    }\\n\\n    /***\\n     *@notice Contract constructor\\n     *@param token_addr `UNO` token address\\n     *@param _name Token name\\n     *@param _symbol Token symbol\\n     *@param _version Contract version - required for Aragon compatibility\\n     */\\n    constructor(\\n        address _token_addr,\\n        string memory _name,\\n        string memory _symbol,\\n        string memory _version,\\n        address _ownership,\\n        address _migrater\\n    ) {\\n        ownership = IOwnership(_ownership);\\n        token = _token_addr;\\n        point_history[0].blk = block.number;\\n        point_history[0].ts = block.timestamp;\\n        controller = msg.sender;\\n        transfersEnabled = true;\\n\\n        name = _name;\\n        symbol = _symbol;\\n        version = _version;\\n        migrater = _migrater;\\n    }\\n\\n    /***\\n     *@notice Check if the call is from a whitelisted smart contract, revert if not\\n     *@param _addr Address to be checked\\n     */\\n    function assert_not_contract(address _addr) internal {\\n        if (_addr != tx.origin) {\\n            address checker = smart_wallet_checker; //not going to be deployed at the moment of launch.\\n            if (checker != address(0)) {\\n                if (ISmartWalletChecker(checker).check(_addr)) {\\n                    return;\\n                }\\n            }\\n            revert(\\\"contract depositors not allowed\\\");\\n        }\\n    }\\n\\n    /***\\n     *@notice Get the most recently recorded rate of voting power decrease for `_addr`\\n     *@param _addr Address of the user wallet\\n     *@return Value of the slope\\n     */\\n    function get_last_user_slope(\\n        address _addr\\n    ) external view returns (uint256) {\\n        uint256 uepoch = user_point_epoch[_addr];\\n        return uint256(user_point_history[_addr][uepoch].slope);\\n    }\\n\\n    /***\\n     *@notice Get the timestamp for checkpoint `_idx` for `_addr`\\n     *@param _addr User wallet address\\n     *@param _idx User epoch number\\n     *@return Epoch time of the checkpoint\\n     */\\n    function user_point_history__ts(\\n        address _addr,\\n        uint256 _idx\\n    ) external view returns (uint256) {\\n        return user_point_history[_addr][_idx].ts;\\n    }\\n\\n    /***\\n     *@notice Get timestamp when `_addr`'s lock finishes\\n     *@param _addr User wallet\\n     *@return Epoch time of the lock end\\n     */\\n    function locked__end(address _addr) external view returns (uint256) {\\n        return locked[_addr].end;\\n    }\\n\\n    /***\\n     *@notice Record global and per-user data to checkpoint\\n     *@param _addr User's wallet address. No user checkpoint if 0x0\\n     *@param _old_locked Pevious locked amount / end lock time for the user\\n     *@param _new_locked New locked amount / end lock time for the user\\n     */\\n    function _checkpoint(\\n        address _addr,\\n        LockedBalance memory _old_locked,\\n        LockedBalance memory _new_locked\\n    ) internal {\\n        Point memory _u_old;\\n        Point memory _u_new;\\n        int256 _old_dslope = 0;\\n        int256 _new_dslope = 0;\\n        uint256 _epoch = epoch;\\n\\n        if (_addr != address(0)) {\\n            // Calculate slopes and biases\\n            // Kept at zero when they have to\\n            if (_old_locked.end > block.timestamp && _old_locked.amount > 0) {\\n                unchecked {\\n                    _u_old.slope = _old_locked.amount / int256(MAXTIME);\\n                }\\n                _u_old.bias =\\n                    _u_old.slope *\\n                    int256(_old_locked.end - block.timestamp);\\n            }\\n            if (_new_locked.end > block.timestamp && _new_locked.amount > 0) {\\n                unchecked {\\n                    _u_new.slope = _new_locked.amount / int256(MAXTIME);\\n                }\\n                _u_new.bias =\\n                    _u_new.slope *\\n                    int256(_new_locked.end - block.timestamp);\\n            }\\n\\n            // Read values of scheduled changes in the slope\\n            // _old_locked.end can be in the past and in the future\\n            // _new_locked.end can ONLY by in the FUTURE unless everything expired than zeros\\n            _old_dslope = slope_changes[_old_locked.end];\\n            if (_new_locked.end != 0) {\\n                if (_new_locked.end == _old_locked.end) {\\n                    _new_dslope = _old_dslope;\\n                } else {\\n                    _new_dslope = slope_changes[_new_locked.end];\\n                }\\n            }\\n        }\\n        Point memory _last_point = Point({\\n            bias: 0,\\n            slope: 0,\\n            ts: block.timestamp,\\n            blk: block.number\\n        });\\n        if (_epoch > 0) {\\n            _last_point = point_history[_epoch];\\n        }\\n        uint256 _last_checkpoint = _last_point.ts;\\n        // _initial_last_point is used for extrapolation to calculate block number\\n        // (approximately, for *At methods) and save them\\n        // as we cannot figure that out exactly from inside the contract\\n        Point memory _initial_last_point = _last_point;\\n        uint256 _block_slope = 0; // dblock/dt\\n        if (block.timestamp > _last_point.ts) {\\n            _block_slope =\\n                (MULTIPLIER * (block.number - _last_point.blk)) /\\n                (block.timestamp - _last_point.ts);\\n        }\\n        // If last point is already recorded in this block, slope=0\\n        // But that's ok b/c we know the block in such case\\n\\n        // Go over weeks to fill history and calculate what the current point is\\n        uint256 _t_i;\\n        unchecked {\\n            _t_i = (_last_checkpoint / WEEK) * WEEK;\\n        }\\n        for (uint256 i; i < 255; ) {\\n            // Hopefully it won't happen that this won't get used in 5 years!\\n            // If it does, users will be able to withdraw but vote weight will be broken\\n            _t_i += WEEK;\\n            int256 d_slope = 0;\\n            if (_t_i > block.timestamp) {\\n                _t_i = block.timestamp;\\n            } else {\\n                d_slope = slope_changes[_t_i];\\n            }\\n            _last_point.bias =\\n                _last_point.bias -\\n                _last_point.slope *\\n                int256(_t_i - _last_checkpoint);\\n            _last_point.slope += d_slope;\\n            if (_last_point.bias < 0) {\\n                // This can happen\\n                _last_point.bias = 0;\\n            }\\n            if (_last_point.slope < 0) {\\n                // This cannot happen - just in case\\n                _last_point.slope = 0;\\n            }\\n            _last_checkpoint = _t_i;\\n            _last_point.ts = _t_i;\\n            _last_point.blk =\\n                _initial_last_point.blk +\\n                ((_block_slope * (_t_i - _initial_last_point.ts)) / MULTIPLIER);\\n            _epoch += 1;\\n            if (_t_i == block.timestamp) {\\n                _last_point.blk = block.number;\\n                break;\\n            } else {\\n                point_history[_epoch] = _last_point;\\n            }\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n        epoch = _epoch;\\n        // Now point_history is filled until t=now\\n\\n        if (_addr != address(0)) {\\n            // If last point was in this block, the slope change has been applied already\\n            // But in such case we have 0 slope(s)\\n            _last_point.slope += _u_new.slope - _u_old.slope;\\n            _last_point.bias += _u_new.bias - _u_old.bias;\\n            if (_last_point.slope < 0) {\\n                _last_point.slope = 0;\\n            }\\n            if (_last_point.bias < 0) {\\n                _last_point.bias = 0;\\n            }\\n        }\\n        // Record the changed point into history\\n        point_history[_epoch] = _last_point;\\n\\n        address _addr2 = _addr; //To avoid being \\\"Stack Too Deep\\\"\\n\\n        if (_addr2 != address(0)) {\\n            // Schedule the slope changes (slope is going down)\\n            // We subtract new_user_slope from [_new_locked.end]\\n            // and add old_user_slope to [_old_locked.end]\\n            if (_old_locked.end > block.timestamp) {\\n                // _old_dslope was <something> - _u_old.slope, so we cancel that\\n                _old_dslope += _u_old.slope;\\n                if (_new_locked.end == _old_locked.end) {\\n                    _old_dslope -= _u_new.slope; // It was a new deposit, not extension\\n                }\\n                slope_changes[_old_locked.end] = _old_dslope;\\n            }\\n            if (_new_locked.end > block.timestamp) {\\n                if (_new_locked.end > _old_locked.end) {\\n                    _new_dslope -= _u_new.slope; // old slope disappeared at this point\\n                    slope_changes[_new_locked.end] = _new_dslope;\\n                }\\n                // else we recorded it already in _old_dslope\\n            }\\n\\n            // Now handle user history\\n            uint256 _user_epoch;\\n            unchecked {\\n                _user_epoch = user_point_epoch[_addr2] + 1;\\n            }\\n\\n            user_point_epoch[_addr2] = _user_epoch;\\n            _u_new.ts = block.timestamp;\\n            _u_new.blk = block.number;\\n            user_point_history[_addr2][_user_epoch] = _u_new;\\n        }\\n    }\\n\\n    /***\\n     *@notice Deposit and lock tokens for a user\\n     *@param _depositor Spender's wallet address\\n     *@param _beneficiary Beneficiary's wallet address\\n     *@param _value Amount to deposit\\n     *@param _unlock_time New time when to unlock the tokens, or 0 if unchanged\\n     *@param _locked_balance Previous locked amount / timestamp\\n     */\\n    function _deposit_for(\\n        address _depositor,\\n        address _beneficiary,\\n        uint256 _value,\\n        uint256 _unlock_time,\\n        LockedBalance memory _locked_balance,\\n        int256 _type\\n    ) internal {\\n        LockedBalance memory _locked = LockedBalance(\\n            _locked_balance.amount,\\n            _locked_balance.end\\n        );\\n        LockedBalance memory _old_locked = LockedBalance(\\n            _locked_balance.amount,\\n            _locked_balance.end\\n        );\\n\\n        uint256 _supply_before = supply;\\n        supply = _supply_before + _value;\\n        //Adding to existing lock, or if a lock is expired - creating a new one\\n        _locked.amount = _locked.amount + int256(_value);\\n        if (_unlock_time != 0) {\\n            _locked.end = _unlock_time;\\n        }\\n        locked[_beneficiary] = _locked;\\n\\n        // Possibilities\\n        // Both _old_locked.end could be current or expired (>/< block.timestamp)\\n        // value == 0 (extend lock) or value > 0 (add to lock or extend lock)\\n        // _locked.end > block.timestamp (always)\\n\\n        _checkpoint(_beneficiary, _old_locked, _locked);\\n\\n        if (_value != 0) {\\n            require(\\n                IERC20(token).transferFrom(_depositor, address(this), _value)\\n            );\\n        }\\n\\n        emit Deposit(_beneficiary, _value, _locked.end, _type, block.timestamp);\\n        emit Supply(_supply_before, _supply_before + _value);\\n    }\\n\\n    function checkpoint() public {\\n        /***\\n         *@notice Record global data to checkpoint\\n         */\\n        LockedBalance memory _a;\\n        LockedBalance memory _b;\\n        _checkpoint(address(0), _a, _b);\\n    }\\n\\n    /***\\n     *@notice Deposit `_value` tokens for `_addr` and add to the lock\\n     *@dev Anyone (even a smart contract) can deposit for someone else, but\\n     *    cannot extend their locktime and deposit for a brand new user\\n     *@param _addr User's wallet address\\n     *@param _value Amount to add to user's lock\\n     */\\n    function deposit_for(address _addr, uint256 _value) external nonReentrant {\\n        require(_value > 0, \\\"dev: need non-zero value\\\");\\n        LockedBalance memory _locked = locked[_addr];\\n\\n        require(_locked.amount > 0, \\\"No existing lock found\\\");\\n        require(_locked.end > block.timestamp, \\\"Cannot add to expired lock.\\\");\\n\\n        _deposit_for(msg.sender, _addr, _value, 0, _locked, DEPOSIT_FOR_TYPE);\\n    }\\n\\n    /***\\n     *@notice Deposit `_value` tokens for `msg.sender` and lock until `_unlock_time`\\n     *@param _value Amount to deposit\\n     *@param _unlock_time Epoch time period when tokens unlock, rounded down to whole weeks\\n     */\\n    function create_lock(\\n        uint256 _value,\\n        uint256 _unlock_time\\n    ) external nonReentrant {\\n        assert_not_contract(msg.sender);\\n        require(\\n            _unlock_time > 0 && _unlock_time <= MAXTIME,\\n            \\\"Can lock until time in future or Voting lock can be 4 years max\\\"\\n        );\\n        _unlock_time = block.timestamp + (_unlock_time / WEEK) * WEEK; // Locktime is rounded down to weeks\\n        LockedBalance memory _locked = locked[msg.sender];\\n\\n        require(_value > 0, \\\"dev: need non-zero value\\\");\\n        require(_locked.amount == 0, \\\"Withdraw old tokens first\\\");\\n\\n        _deposit_for(\\n            msg.sender,\\n            msg.sender,\\n            _value,\\n            _unlock_time,\\n            _locked,\\n            CREATE_LOCK_TYPE\\n        );\\n    }\\n\\n    /***\\n     *@notice Deposit `_value` additional tokens for `msg.sender`\\n     *        without modifying the unlock time\\n     *@param _value Amount of tokens to deposit and add to the lock\\n     */\\n    function increase_amount(uint256 _value) external nonReentrant {\\n        assert_not_contract(msg.sender);\\n        LockedBalance memory _locked = locked[msg.sender];\\n\\n        require(_value > 0, \\\"dev: need non-zero value\\\");\\n        require(_locked.amount > 0, \\\"No existing lock found\\\");\\n        require(_locked.end > block.timestamp, \\\"Cannot add to expired lock.\\\");\\n\\n        _deposit_for(\\n            msg.sender,\\n            msg.sender,\\n            _value,\\n            0,\\n            _locked,\\n            INCREASE_LOCK_AMOUNT\\n        );\\n    }\\n\\n    /***\\n     *@notice Extend the unlock time for `msg.sender` to `_unlock_time`\\n     *@param _unlock_time New epoch time for unlocking\\n     */\\n    function increase_unlock_time(uint256 _unlock_time) external nonReentrant {\\n        assert_not_contract(msg.sender); //@shun: need to convert to solidity\\n        LockedBalance memory _locked = locked[msg.sender];\\n\\n        require(_locked.end > block.timestamp, \\\"Lock expired\\\");\\n        require(_locked.amount > 0, \\\"Nothing is locked\\\");\\n\\n        require(\\n            _unlock_time > 0 && _unlock_time <= MAXTIME,\\n            \\\"Can only increase lock duration or Voting lock can be 4 years max\\\"\\n        );\\n\\n        require(_unlock_time + block.timestamp > _locked.end, \\\"Can only increase lock duration\\\");\\n        unchecked {\\n            _unlock_time = block.timestamp + (_unlock_time / WEEK) * WEEK; // Locktime is rounded down to weeks\\n        }\\n        require(\\n            _unlock_time > _locked.end,\\n            \\\"Unlock time must be greater than the current end time\\\"\\n        );\\n\\n        _deposit_for(\\n            msg.sender,\\n            msg.sender,\\n            0,\\n            _unlock_time,\\n            _locked,\\n            INCREASE_UNLOCK_TIME\\n        );\\n    }\\n\\n    /***\\n     *@notice Withdraw all tokens for `msg.sender`\\n     *@dev Only possible if the lock has expired\\n     */\\n    function withdraw() external nonReentrant {\\n        LockedBalance memory _locked = LockedBalance(\\n            locked[msg.sender].amount,\\n            locked[msg.sender].end\\n        );\\n\\n        require(block.timestamp >= _locked.end, \\\"The lock didn't expire\\\");\\n        uint256 _value = uint256(_locked.amount);\\n\\n        LockedBalance memory _old_locked = LockedBalance(\\n            locked[msg.sender].amount,\\n            locked[msg.sender].end\\n        );\\n\\n        _locked.end = 0;\\n        _locked.amount = 0;\\n        locked[msg.sender] = _locked;\\n        uint256 _supply_before = supply;\\n        supply = _supply_before - _value;\\n\\n        // _old_locked can have either expired <= timestamp or zero end\\n        // _locked has only 0 end\\n        // Both can have >= 0 amount\\n        _checkpoint(msg.sender, _old_locked, _locked);\\n\\n        require(IERC20(token).transfer(msg.sender, _value));\\n\\n        emit Withdraw(msg.sender, _value, block.timestamp);\\n        emit Supply(_supply_before, _supply_before - _value);\\n    }\\n\\n    // The following ERC20/minime-compatible methods are not real balanceOf and supply!\\n    // They measure the weights for the purpose of voting, so they don't represent\\n    // real coins.\\n\\n    /***\\n     *@notice Binary search to estimate timestamp for block number\\n     *@param _block Block to find\\n     *@param _max_epoch Don't go beyond this epoch\\n     *@return Approximate timestamp for block\\n     */\\n    function find_block_epoch(\\n        uint256 _block,\\n        uint256 _max_epoch\\n    ) internal view returns (uint256) {\\n        // Binary search\\n        uint256 _min = 0;\\n        uint256 _max = _max_epoch;\\n        unchecked {\\n            for (uint256 i; i <= 128; i++) {\\n                // Will be always enough for 128-bit numbers\\n                if (_min >= _max) {\\n                    break;\\n                }\\n                uint256 _mid = (_min + _max + 1) / 2;\\n                if (point_history[_mid].blk <= _block) {\\n                    _min = _mid;\\n                } else {\\n                    _max = _mid - 1;\\n                }\\n            }\\n        }\\n        return _min;\\n    }\\n\\n    /***\\n     *@notice Get the current voting power for `msg.sender`\\n     *@dev Adheres to the ERC20 `balanceOf` interface for Metamask & Snapshot compatibility\\n     *@param _addr User wallet address\\n     *@return User's present voting power\\n     */\\n    function balanceOf(address _addr) external view returns (uint256) {\\n        uint256 _t = block.timestamp;\\n\\n        uint256 _epoch = user_point_epoch[_addr];\\n        if (_epoch == 0) {\\n            return 0;\\n        } else {\\n            Point memory _last_point = user_point_history[_addr][_epoch];\\n            _last_point.bias -= _last_point.slope * int256(_t - _last_point.ts);\\n            if (_last_point.bias < 0) {\\n                _last_point.bias = 0;\\n            }\\n            return uint256(_last_point.bias);\\n        }\\n    }\\n\\n    /***\\n     *@notice Get the current voting power for `msg.sender`\\n     *@dev Adheres to the ERC20 `balanceOf` interface for Aragon compatibility\\n     *@param _addr User wallet address\\n     *@param _t Epoch time to return voting power at\\n     *@return User voting power\\n     *@dev return the present voting power if _t is 0\\n     */\\n    function balanceOf(\\n        address _addr,\\n        uint256 _t\\n    ) external view returns (uint256) {\\n        if (_t == 0) {\\n            _t = block.timestamp;\\n        }\\n\\n        uint256 _epoch = user_point_epoch[_addr];\\n        if (_epoch == 0) {\\n            return 0;\\n        } else {\\n            Point memory _last_point = user_point_history[_addr][_epoch];\\n            _last_point.bias -= _last_point.slope * int256(_t - _last_point.ts);\\n            if (_last_point.bias < 0) {\\n                _last_point.bias = 0;\\n            }\\n            return uint256(_last_point.bias);\\n        }\\n    }\\n\\n    //Struct to avoid \\\"Stack Too Deep\\\"\\n    struct Parameters {\\n        uint256 min;\\n        uint256 max;\\n        uint256 max_epoch;\\n        uint256 d_block;\\n        uint256 d_t;\\n    }\\n\\n    /***\\n     *@notice Measure voting power of `_addr` at block height `_block`\\n     *@dev Adheres to MiniMe `balanceOfAt` interface https//github.com/Giveth/minime\\n     *@param _addr User's wallet address\\n     *@param _block Block to calculate the voting power at\\n     *@return Voting power\\n     */\\n    function balanceOfAt(\\n        address _addr,\\n        uint256 _block\\n    ) external view returns (uint256) {\\n        // Copying and pasting totalSupply code because Vyper cannot pass by\\n        // reference yet\\n        require(_block <= block.number);\\n\\n        Parameters memory _st;\\n\\n        // Binary search\\n        _st.min = 0;\\n        _st.max = user_point_epoch[_addr];\\n        unchecked {\\n            for (uint256 i; i <= 128; i++) {\\n                // Will be always enough for 128-bit numbers\\n                if (_st.min >= _st.max) {\\n                    break;\\n                }\\n                uint256 _mid = (_st.min + _st.max + 1) / 2;\\n                if (user_point_history[_addr][_mid].blk <= _block) {\\n                    _st.min = _mid;\\n                } else {\\n                    _st.max = _mid - 1;\\n                }\\n            }\\n        }\\n\\n        Point memory _upoint = user_point_history[_addr][_st.min];\\n\\n        _st.max_epoch = epoch;\\n        uint256 _epoch = find_block_epoch(_block, _st.max_epoch);\\n        Point memory _point_0 = point_history[_epoch];\\n        _st.d_block = 0;\\n        _st.d_t = 0;\\n        if (_epoch < _st.max_epoch) {\\n            Point memory _point_1 = point_history[_epoch + 1];\\n            _st.d_block = _point_1.blk - _point_0.blk;\\n            _st.d_t = _point_1.ts - _point_0.ts;\\n        } else {\\n            _st.d_block = block.number - _point_0.blk;\\n            _st.d_t = block.timestamp - _point_0.ts;\\n        }\\n        uint256 block_time = _point_0.ts;\\n        if (_st.d_block != 0) {\\n            block_time += (_st.d_t * (_block - _point_0.blk)) / _st.d_block;\\n        }\\n\\n        _upoint.bias -= _upoint.slope * int256(block_time - _upoint.ts);\\n        if (_upoint.bias >= 0) {\\n            return uint256(_upoint.bias);\\n        }\\n    }\\n\\n    /***\\n     *@notice Calculate total voting power at some point in the past\\n     *@param point The point (bias/slope) to start search from\\n     *@param t Time to calculate the total voting power at\\n     *@return Total voting power at that time\\n     */\\n    function supply_at(\\n        Point memory point,\\n        uint256 t\\n    ) internal view returns (uint256) {\\n        Point memory _last_point = point;\\n        uint256 _t_i;\\n        unchecked {\\n            _t_i = (_last_point.ts / WEEK) * WEEK;\\n        }\\n        for (uint256 i; i < 255; ) {\\n            _t_i += WEEK;\\n            int256 d_slope = 0;\\n\\n            if (_t_i > t) {\\n                _t_i = t;\\n            } else {\\n                d_slope = slope_changes[_t_i];\\n            }\\n            _last_point.bias -=\\n                _last_point.slope *\\n                int256(_t_i - _last_point.ts);\\n\\n            if (_t_i == t) {\\n                break;\\n            }\\n            _last_point.slope += d_slope;\\n            _last_point.ts = _t_i;\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        if (_last_point.bias < 0) {\\n            _last_point.bias = 0;\\n        }\\n        return uint256(_last_point.bias);\\n    }\\n\\n    /***\\n     *@notice Calculate total voting power\\n     *@dev Adheres to the ERC20 `totalSupply` interface for Aragon compatibility\\n     *@return Total voting power\\n     */\\n\\n    function totalSupply() external view returns (uint256) {\\n        uint256 _epoch = epoch;\\n        Point memory _last_point = point_history[_epoch];\\n\\n        return supply_at(_last_point, block.timestamp);\\n    }\\n\\n    /***\\n     *@notice Calculate total voting power\\n     *@dev Adheres to the ERC20 `totalSupply` interface for Aragon compatibility\\n     *@return Total voting power\\n     */\\n    function totalSupply(uint256 _t) external view returns (uint256) {\\n        if (_t == 0) {\\n            _t = block.timestamp;\\n        }\\n\\n        uint256 _epoch = epoch;\\n        Point memory _last_point = point_history[_epoch];\\n\\n        return supply_at(_last_point, _t);\\n    }\\n\\n    /***\\n     *@notice Calculate total voting power at some point in the past\\n     *@param _block Block to calculate the total voting power at\\n     *@return Total voting power at `_block`\\n     */\\n    function totalSupplyAt(uint256 _block) external view returns (uint256) {\\n        require(_block <= block.number);\\n        uint256 _epoch = epoch;\\n        uint256 _target_epoch = find_block_epoch(_block, _epoch);\\n\\n        Point memory _point = point_history[_target_epoch];\\n        uint256 dt = 0;\\n        if (_target_epoch < _epoch) {\\n            Point memory _point_next = point_history[_target_epoch + 1];\\n            if (_point.blk != _point_next.blk) {\\n                dt =\\n                    ((_block - _point.blk) * (_point_next.ts - _point.ts)) /\\n                    (_point_next.blk - _point.blk);\\n            }\\n        } else {\\n            if (_point.blk != block.number) {\\n                dt =\\n                    ((_block - _point.blk) * (block.timestamp - _point.ts)) /\\n                    (block.number - _point.blk);\\n            }\\n        }\\n        // Now dt contains info on how far are we beyond point\\n\\n        return supply_at(_point, _point.ts + dt);\\n    }\\n\\n    /***\\n     *@dev Dummy method required for Aragon compatibility\\n     */\\n    function changeController(address _newController) external {\\n        require(msg.sender == controller);\\n        controller = _newController;\\n    }\\n\\n    function get_user_point_epoch(\\n        address _user\\n    ) external view returns (uint256) {\\n        return user_point_epoch[_user];\\n    }\\n\\n    //---------------------- Admin Only ----------------------//\\n    /***\\n     *@notice Set an external contract to check for approved smart contract wallets\\n     *@param _addr Address of Smart contract checker\\n     */\\n    function commit_smart_wallet_checker(address _addr) external onlyOwner {\\n        future_smart_wallet_checker = _addr;\\n\\n        emit commitWallet(_addr);\\n    }\\n\\n    /***\\n     *@notice Apply setting external contract to check approved smart contract wallets\\n     */\\n    function apply_smart_wallet_checker() external onlyOwner {\\n        address _future_smart_wallet_checker = future_smart_wallet_checker;\\n        smart_wallet_checker = _future_smart_wallet_checker;\\n\\n        emit commitWallet(_future_smart_wallet_checker);\\n    }\\n\\n    function setUserDetails(address _to, uint256 _epoch, int256 _slope, int256 _bias, uint256 _ts, uint256 _blk, uint256 _end, int256 _amount) external {\\n        require(msg.sender == migrater, \\\"Can only be called by migrater\\\");\\n        require(block.timestamp < MIGRATE_TIME, \\\"Migrate time passed\\\");\\n        user_point_epoch[_to] = _epoch;\\n        user_point_history[_to][_epoch].slope = _slope;\\n        user_point_history[_to][_epoch].bias = _bias;\\n        user_point_history[_to][_epoch].ts = _ts;\\n        user_point_history[_to][_epoch].blk = _blk;\\n        locked[_to].end = _end;\\n        locked[_to].amount = _amount;\\n\\n        emit LogMigrate(msg.sender, _to);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/dao/ISmartWalletChecker.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity =0.8.23;\\n\\ninterface ISmartWalletChecker {\\n    function check(address _addr) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/pool/IOwnership.sol\": {\r\n      \"content\": \"pragma solidity =0.8.23;\\n\\n//SPDX-License-Identifier: MIT\\n\\ninterface IOwnership {\\n    function owner() external view returns (address);\\n\\n    function futureOwner() external view returns (address);\\n\\n    function commitTransferOwnership(address newOwner) external;\\n\\n    function acceptTransferOwnership() external;\\n}\\n\"\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token_addr\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_version\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_ownership\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_migrater\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"locktime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"_type\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ts\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ts\",\"type\":\"uint256\"}],\"name\":\"ForceUnlock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"migrator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"LogMigrate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"prevSupply\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"supply\",\"type\":\"uint256\"}],\"name\":\"Supply\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ts\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newSmartWalletChecker\",\"type\":\"address\"}],\"name\":\"applyWallet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newSmartWalletChecker\",\"type\":\"address\"}],\"name\":\"commitWallet\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MIGRATE_TIME\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"apply_smart_wallet_checker\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_t\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_block\",\"type\":\"uint256\"}],\"name\":\"balanceOfAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newController\",\"type\":\"address\"}],\"name\":\"changeController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkpoint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"commit_smart_wallet_checker\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"controller\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_unlock_time\",\"type\":\"uint256\"}],\"name\":\"create_lock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"deposit_for\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"epoch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"future_smart_wallet_checker\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"get_last_user_slope\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"get_user_point_epoch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"increase_amount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_unlock_time\",\"type\":\"uint256\"}],\"name\":\"increase_unlock_time\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"locked\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"amount\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"locked__end\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"migrater\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ownership\",\"outputs\":[{\"internalType\":\"contract IOwnership\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"point_history\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"bias\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"slope\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"ts\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"blk\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_epoch\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"_slope\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"_bias\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"_ts\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_blk\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_end\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"_amount\",\"type\":\"int256\"}],\"name\":\"setUserDetails\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"slope_changes\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"smart_wallet_checker\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"supply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_t\",\"type\":\"uint256\"}],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_block\",\"type\":\"uint256\"}],\"name\":\"totalSupplyAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transfersEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"user_point_epoch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"user_point_history\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"bias\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"slope\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"ts\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"blk\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_idx\",\"type\":\"uint256\"}],\"name\":\"user_point_history__ts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "VotingEscrow", "CompilerVersion": "v0.8.23+commit.f704f362", "OptimizationUsed": "1", "Runs": "2000", "ConstructorArguments": "000000000000000000000000474021845c4643113458ea4414bdb7fb74a01a7700000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000140000000000000000000000000defb0c2b974f9f162901eb0b1d39a2eb9998145800000000000000000000000091d6e9cdad0a61edab4139f2e3171029f2e3607b0000000000000000000000000000000000000000000000000000000000000011566f74652d457363726f77656420554e4f00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000057665554e4f00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000013100000000000000000000000000000000000000000000000000000000000000", "EVMVersion": "paris", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}