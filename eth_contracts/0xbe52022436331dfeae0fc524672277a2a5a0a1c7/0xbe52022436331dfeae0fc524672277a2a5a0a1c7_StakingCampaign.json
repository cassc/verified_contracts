{"SourceCode": "{\"IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\\r\\n * the optional functions; to access them see `ERC20Detailed`.\\r\\n */\\r\\ninterface IERC20 {\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens in existence.\\r\\n     */\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens owned by `account`.\\r\\n     */\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from the caller\\u0027s account to `recipient`.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a `Transfer` event.\\r\\n     */\\r\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remaining number of tokens that `spender` will be\\r\\n     * allowed to spend on behalf of `owner` through `transferFrom`. This is\\r\\n     * zero by default.\\r\\n     *\\r\\n     * This value changes when `approve` or `transferFrom` are called.\\r\\n     */\\r\\n    function allowance(address owner, address spender) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `amount` as the allowance of `spender` over the caller\\u0027s tokens.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * \\u003e Beware that changing an allowance with this method brings the risk\\r\\n     * that someone may use both the old and the new allowance by unfortunate\\r\\n     * transaction ordering. One possible solution to mitigate this race\\r\\n     * condition is to first reduce the spender\\u0027s allowance to 0 and set the\\r\\n     * desired value afterwards:\\r\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\r\\n     *\\r\\n     * Emits an `Approval` event.\\r\\n     */\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\r\\n     * allowance mechanism. `amount` is then deducted from the caller\\u0027s\\r\\n     * allowance.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a `Transfer` event.\\r\\n     */\\r\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\r\\n     * another (`to`).\\r\\n     *\\r\\n     * Note that `value` may be zero.\\r\\n     */\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\r\\n     * a call to `approve`. `value` is the new allowance.\\r\\n     */\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n}\\r\\n\"},\"StakingCampaign.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./IERC20.sol\\\";\\r\\n\\r\\ncontract StakingCampaign {\\r\\n   \\r\\n    struct StackingInfo {\\r\\n        uint seq;\\r\\n        uint amount;\\r\\n        uint reward;\\r\\n        bool isPayout;\\r\\n        uint unlockTime;\\r\\n    }\\r\\n\\r\\n    event Deposited (\\r\\n        address indexed sender,\\r\\n        uint seq,\\r\\n        uint amount,\\r\\n        uint256 timestamp\\r\\n    );\\r\\n\\r\\n    event Claimed (\\r\\n        address indexed sender,\\r\\n        uint seq,\\r\\n        uint amount,\\r\\n        uint reward,\\r\\n        uint256 timestamp\\r\\n    );\\r\\n\\r\\n    address public owner;\\r\\n    modifier onlyAdmin {\\r\\n        require(msg.sender == owner, \\u0027Caller is not owner\\u0027);\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    // ERC20 token for staking campaign\\r\\n    IERC20 public token;\\r\\n    // campaign name\\r\\n    string public name;\\r\\n    // total day for staking (in second)\\r\\n    uint public duration;\\r\\n    // annual percentage rate\\r\\n    uint public apr;\\r\\n    // total cap for campaign, stop campaign if cap is reached\\r\\n    uint public maxCap;\\r\\n    // expired time of campaign, no more staking is accepted (in second)\\r\\n    uint public expiredTime; \\r\\n    // min amount for one staking deposit\\r\\n    uint public minTransactionAmount;\\r\\n    // max amount for one staking deposit\\r\\n    uint public maxTransactionAmount;\\r\\n    // total amount already payout for staker (payout = staking amount + reward)\\r\\n    uint public totalPayoutAmount;\\r\\n    // total reward need for campaign\\r\\n    uint public totalCampaignReward;\\r\\n    // total staked amount\\r\\n    uint public totalStakedAmount;\\r\\n    //\\r\\n    bool public isMaxCapReached = false;\\r\\n\\r\\n    mapping(address =\\u003e StackingInfo[]) internal stakingList;\\r\\n\\r\\n    /**\\r\\n     * \\r\\n     */\\r\\n    constructor (IERC20 _token, string memory _campaignName, uint _expiredTime, \\r\\n                uint _maxCap, uint _maxTransactionAmount, uint _minTransactionAmount,\\r\\n                uint _duration, uint _apr) {\\r\\n        owner = msg.sender;\\r\\n        token = _token;\\r\\n        name = _campaignName;\\r\\n        expiredTime = block.timestamp + _expiredTime;\\r\\n        maxCap = _maxCap;\\r\\n        maxTransactionAmount = _maxTransactionAmount;\\r\\n        minTransactionAmount = _minTransactionAmount;\\r\\n        duration = _duration;\\r\\n        apr = _apr;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Deposit amount of token to stack\\r\\n     */\\r\\n    function deposit(uint _amount, address _userAddr) external {\\r\\n        require(totalStakedAmount + _amount \\u003c= maxCap, \\\"Total cap is reached\\\");\\r\\n        require(_amount \\u003e= minTransactionAmount, \\\"Staking amount is too small\\\");\\r\\n        require(_amount \\u003c= maxTransactionAmount, \\\"Staking amount is too big\\\");\\r\\n        require(block.timestamp \\u003c expiredTime, \\\"Campaign is over\\\");\\r\\n\\r\\n        token.transferFrom(_userAddr, address(this), _amount);\\r\\n        uint unlockTime = block.timestamp + duration;\\r\\n        uint seq = stakingList[_userAddr].length + 1;\\r\\n        uint reward = _amount*apr*duration/(365*24*60*60*100);\\r\\n\\r\\n        StackingInfo memory staking = StackingInfo(seq, _amount, reward, false, unlockTime);\\r\\n        stakingList[_userAddr].push(staking);\\r\\n       \\r\\n        totalStakedAmount += _amount;\\r\\n        totalCampaignReward += reward;\\r\\n\\r\\n        isMaxCapReached = (totalStakedAmount == maxCap || totalStakedAmount + minTransactionAmount \\u003e maxCap);\\r\\n\\r\\n        emit Deposited(_userAddr, seq, _amount, block.timestamp);\\r\\n    }\\r\\n\\r\\n    function claim(uint _seq, address _userAddr) public {\\r\\n        StackingInfo[] memory userStakings = stakingList[_userAddr];\\r\\n        require(_seq \\u003e 0 \\u0026\\u0026 userStakings.length \\u003e= _seq, \\\"Invalid index\\\");\\r\\n\\r\\n        uint idx = _seq - 1;\\r\\n        \\r\\n        StackingInfo memory staking = userStakings[idx];\\r\\n\\r\\n        require(!staking.isPayout, \\\"Stake is already payout\\\");\\r\\n        require(staking.unlockTime \\u003c block.timestamp, \\\"Staking is in lock period\\\");\\r\\n        \\r\\n        uint payout = staking.amount + staking.reward;\\r\\n\\r\\n        token.transfer(_userAddr, payout);\\r\\n        totalPayoutAmount += payout;\\r\\n        \\r\\n        stakingList[_userAddr][idx].isPayout = true;\\r\\n        \\r\\n        emit Claimed(_userAddr, _seq, staking.amount, staking.reward, block.timestamp);\\r\\n    }\\r\\n    \\r\\n    function claimRemainingReward(address _userAddr) public onlyAdmin {\\r\\n        require(block.timestamp \\u003e expiredTime, \\\"Campaign is not over yet\\\");\\r\\n\\r\\n        uint remainingPayoutAmount = totalStakedAmount + totalCampaignReward - totalPayoutAmount;\\r\\n        uint balance = token.balanceOf(address(this));\\r\\n\\r\\n        token.transfer(_userAddr, balance - remainingPayoutAmount);\\r\\n    }\\r\\n\\r\\n    function getClaimableRemainningReward() public view returns (uint) {\\r\\n        if(block.timestamp \\u003c expiredTime) return 0;\\r\\n        else {\\r\\n            uint remainingPayoutAmount = totalStakedAmount + totalCampaignReward - totalPayoutAmount;\\r\\n            uint balance = token.balanceOf(address(this));\\r\\n            return balance - remainingPayoutAmount;\\r\\n        }\\r\\n    }\\r\\n    \\r\\n    function getStakings(address _staker) public view returns (uint[] memory _seqs, uint[] memory _amounts, uint[] memory _rewards, bool[] memory _isPayouts, uint[] memory _timestamps) {\\r\\n        StackingInfo[] memory userStakings = stakingList[_staker];\\r\\n        \\r\\n        uint length = userStakings.length;\\r\\n        \\r\\n        uint256[] memory seqList = new uint256[](length);\\r\\n        uint256[] memory amountList = new uint256[](length);\\r\\n        uint256[] memory rewardList = new uint256[](length);\\r\\n        bool[] memory isPayoutList = new bool[](length);\\r\\n        uint256[] memory timeList = new uint256[](length);\\r\\n        \\r\\n        for(uint idx = 0; idx \\u003c length; idx++) {\\r\\n            StackingInfo memory stackingInfo = userStakings[idx];\\r\\n            \\r\\n            seqList[idx] = stackingInfo.seq;\\r\\n            amountList[idx] = stackingInfo.amount;\\r\\n            rewardList[idx] = stackingInfo.reward;\\r\\n            isPayoutList[idx] = stackingInfo.isPayout;\\r\\n            timeList[idx] = stackingInfo.unlockTime;\\r\\n        }\\r\\n        \\r\\n        return (seqList, amountList, rewardList, isPayoutList, timeList);\\r\\n    }\\r\\n    \\r\\n    function getCampaignInfo() public view returns (\\r\\n            IERC20 _token, string memory _campaignName, uint _expiredTime, \\r\\n            uint _maxCap, uint _maxTransactionAmount, uint _minTransactionAmount,\\r\\n            uint _duration, uint _apr, uint _stakedAmount,uint _totalPayoutAmount) {\\r\\n\\r\\n        return (token, name, expiredTime, maxCap, maxTransactionAmount, minTransactionAmount, duration, apr, totalStakedAmount, totalPayoutAmount);\\r\\n    }\\r\\n\\r\\n    function transferOwnership(address _newOwner) public onlyAdmin {\\r\\n        owner = _newOwner;\\r\\n    }\\r\\n}\\r\\n\"}}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_campaignName\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_expiredTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxCap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxTransactionAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minTransactionAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_apr\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"seq\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"Claimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"seq\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"Deposited\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"apr\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_seq\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_userAddr\",\"type\":\"address\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddr\",\"type\":\"address\"}],\"name\":\"claimRemainingReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_userAddr\",\"type\":\"address\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"duration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"expiredTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCampaignInfo\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_campaignName\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_expiredTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxCap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxTransactionAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minTransactionAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_apr\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_stakedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalPayoutAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getClaimableRemainningReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_staker\",\"type\":\"address\"}],\"name\":\"getStakings\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_seqs\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_rewards\",\"type\":\"uint256[]\"},{\"internalType\":\"bool[]\",\"name\":\"_isPayouts\",\"type\":\"bool[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_timestamps\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isMaxCapReached\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxCap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTransactionAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minTransactionAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalCampaignReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalPayoutAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStakedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "StakingCampaign", "CompilerVersion": "v0.8.0+commit.c7dfd78e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000c9eb61ffb66d5815d643bbb8195e17c49687ae1e000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000009e340000000000000000000000000000000000000000000021165458500521280000000000000000000000000000000000000000000000000069e10de76676d080000000000000000000000000000000000000000000000000021e19e0c9bab240000000000000000000000000000000000000000000000000000000000000009e3400000000000000000000000000000000000000000000000000000000000000000f00000000000000000000000000000000000000000000000000000000000000184d494e442045636f73797374656d205374616b696e6720410000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://970b5a677a89014fcaee68e9635d0876156c5436ce5765cee50e880c1bf4a45b"}