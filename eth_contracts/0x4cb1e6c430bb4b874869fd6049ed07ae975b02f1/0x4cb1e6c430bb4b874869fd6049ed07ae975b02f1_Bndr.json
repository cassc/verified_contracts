{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\n\r\npragma solidity >=0.6.0 <0.9.0;\r\n\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function decimals() external view returns (uint8);\r\n    function symbol() external view returns (string memory);\r\n    function name() external view returns (string memory);\r\n    function getOwner() external view returns (address);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address _owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\ninterface IFactoryV2 {\r\n    event PairCreated(address indexed token0, address indexed token1, address lpPair, uint);\r\n    function getPair(address tokenA, address tokenB) external view returns (address lpPair);\r\n    function createPair(address tokenA, address tokenB) external returns (address lpPair);\r\n}\r\n\r\n\r\ninterface IV2Pair {\r\n    function factory() external view returns (address);\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n    function sync() external;\r\n}\r\n\r\n\r\ninterface IRouter01 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n    function swapExactETHForTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to, uint deadline\r\n    ) external payable returns (uint[] memory amounts);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n\r\n\r\ninterface IRouter02 is IRouter01 {\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n}\r\n\r\n\r\ninterface IInitializer {\r\n    function setLaunch(address _initialLpPair, uint32 _liqAddBlock, uint64 _liqAddStamp, uint8 dec) external;\r\n    function getConfig() external returns (address, address);\r\n    function getInits(uint256 amount) external returns (uint256, uint256);\r\n    function setLpPair(address pair, bool enabled) external;\r\n}\r\n\r\n\r\ninterface IStaking {\r\n    function addRewards(uint256 rewardAmount) external;\r\n}\r\n\r\n\r\ncontract Bndr is IERC20 {\r\n    struct Fees {\r\n        uint16 buyFee;\r\n        uint16 sellFee;\r\n        uint16 transferFee;\r\n    }\r\n\r\n\r\n    struct Ratios {\r\n        uint16 marketing;\r\n        uint16 development;\r\n        uint16 staking;\r\n        uint16 team;\r\n        uint16 totalSwap;\r\n    }\r\n\r\n\r\n    struct TaxWallets {\r\n        address payable marketing;\r\n        address payable development;\r\n        address payable team;\r\n        address payable staking;\r\n    }\r\n\r\n\r\n    struct TokenDistributionWallets {\r\n        address team_advisors;\r\n        address marketing;\r\n        address dev_wallet;\r\n        address private_sell;\r\n        address liquidity_operations;\r\n    }\r\n\r\n\r\n    TaxWallets public _taxWallets = TaxWallets({\r\n        marketing: payable(0xB6BE6742242E401035be7032CF6C705415e08760),\r\n        development: payable(0xBCF40d3b26c932aDE09A2c53D3ACcc3172A68666),\r\n        team: payable(0xd0405F6d830feFc8E0223337c701418d91d41cDA),\r\n        staking: payable(0xcf27f53f2279a2F92660F6729943FD04122aa003)\r\n    });\r\n\r\n\r\n    TokenDistributionWallets public tokenDistributionWallets = TokenDistributionWallets({\r\n        team_advisors: 0x3838e628448f2Ab5ff424e8867B856455A092399,\r\n        marketing: 0xE9A624575D3379fD841A17E1e7Aae6c8423FCcDa,\r\n        dev_wallet: 0xB8749d4a399C875f2F17eB34053521137AfEBf84,\r\n        private_sell: 0xE2ec39d3911740d8BbF540f04b8A34124342A4fA,\r\n        liquidity_operations: 0xCdd889740122dDd4C319A5B97F642de0b8afF9A0\r\n    });\r\n\r\n\r\n    uint8 constant private _decimals = 9;\r\n    string constant private _symbol = \"$SWIPES\";\r\n    string constant private _name = \"BNDR\";\r\n    uint256 constant private startingSupply = 1_000_000_000;\r\n    uint256 constant private _tTotal = startingSupply * 10**_decimals;\r\n\r\n\r\n    mapping (address => uint256) private _tOwned;\r\n\r\n\r\n    mapping (address => bool) lpPairs;\r\n    uint256 private timeSinceLastPair = 0;\r\n\r\n\r\n    uint256 constant public maxSellTaxes = 1000;\r\n    uint256 constant public maxTransferTaxes = 1000;\r\n    uint256 constant masterTaxDivisor = 1000;\r\n    uint256 constant public maxBuyTaxes = 1000;\r\n\r\n\r\n    mapping (address => bool) private _liquidityHolders;\r\n    mapping (address => bool) private _isExcludedFromProtection;\r\n    mapping (address => bool) private _isExcludedFromFees;\r\n    mapping (address => bool) private _isExcludedFromWallet;\r\n    mapping(address => uint256) private _lastSwapTime;\r\n\r\n    uint256 public max_wallet = _tTotal * 30 /1000;\r\n    uint256 public max_transaction = _tTotal * 30 /1000;\r\n\r\n\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n\r\n    bool public piContractSwapsEnabled;\r\n    uint256 public piSwapPercent = 10;\r\n\r\n\r\n    IRouter02 public dexRouter;\r\n    address public lpPair;\r\n    address constant public DEAD = 0x000000000000000000000000000000000000dEaD;\r\n\r\n\r\n    bool inSwap;\r\n    bool public contractSwapEnabled = false;\r\n    uint256 public swapThreshold;\r\n    uint256 public swapAmount;\r\n    uint256 public sellCooldownTime = 299;\r\n\r\n\r\n    bool public taxesAreLocked;\r\n    bool public addRewardsEnabled;\r\n\r\n\r\n    address private _owner;\r\n    uint256 public launchStamp;\r\n    IInitializer initializer;\r\n\r\n\r\n    bool public _hasLiqBeenAdded = false;\r\n    bool public tradingEnabled = false;\r\n\r\n\r\n    bool public initialized;\r\n\r\n\r\n    Fees public _taxRates = Fees({\r\n        buyFee: 1000,\r\n        sellFee: 1000,\r\n        transferFee: 0\r\n    });\r\n\r\n\r\n    Ratios public _ratios = Ratios({\r\n        marketing: 1,\r\n        development: 1,\r\n        staking: 1,\r\n        team: 1,\r\n        totalSwap: 4\r\n    });\r\n\r\n\r\n    event ContractSwapEnabledUpdated(bool enabled);\r\n    event AutoLiquify(uint256 amountCurrency, uint256 amountTokens);\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n    modifier inSwapFlag {\r\n        inSwap = true;\r\n        _;\r\n        inSwap = false;\r\n    }\r\n\r\n\r\n    modifier onlyOwner() { require(_owner == msg.sender, \"Caller =/= owner.\"); _; }\r\n\r\n\r\n    constructor () {\r\n        _owner = msg.sender;\r\n    }\r\n\r\n\r\n    function initialize(address[] memory _whlist) external onlyOwner {\r\n        require(!initialized, \"already initialized\");\r\n        initialized = true;\r\n        _isExcludedFromFees[0x663A5C229c09b049E36dCc11a9B0d4a8Eb9db214] = true; // Unicrypt (ETH)\r\n        _isExcludedFromFees[0xDba68f07d1b7Ca219f78ae8582C213d975c25cAf] = true; // Unicrypt (ETH)\r\n        _isExcludedFromFees[0x407993575c91ce7643a4d4cCACc9A98c36eE1BBE] = true; // PinkLock\r\n\r\n\r\n        _isExcludedFromWallet[tokenDistributionWallets.marketing] = true;\r\n        _isExcludedFromWallet[tokenDistributionWallets.liquidity_operations] = true;\r\n        _isExcludedFromWallet[tokenDistributionWallets.team_advisors] = true;\r\n        _isExcludedFromWallet[tokenDistributionWallets.private_sell] = true;\r\n        _isExcludedFromWallet[tokenDistributionWallets.dev_wallet] = true;\r\n       \r\n        _tOwned[tokenDistributionWallets.marketing] = _tTotal * 100 / 1000;\r\n        _tOwned[tokenDistributionWallets.liquidity_operations] = _tTotal * 650 / 1000;\r\n        _tOwned[tokenDistributionWallets.team_advisors] = _tTotal * 100 / 1000;\r\n        _tOwned[tokenDistributionWallets.private_sell] = _tTotal * 50 / 1000;\r\n        _tOwned[tokenDistributionWallets.dev_wallet] = _tTotal * 100 / 1000;\r\n\r\n\r\n        _liquidityHolders[_owner] = true;\r\n        _isExcludedFromFees[DEAD] = true;\r\n        _isExcludedFromFees[_owner] = true;\r\n        _isExcludedFromFees[address(this)] = true;\r\n        _isExcludedFromWallet[address(this)] = true;\r\n\r\n        _isExcludedFromFees[tokenDistributionWallets.marketing] = true;\r\n        _isExcludedFromFees[tokenDistributionWallets.liquidity_operations] = true;\r\n        _isExcludedFromFees[tokenDistributionWallets.team_advisors] = true;\r\n        _isExcludedFromFees[tokenDistributionWallets.private_sell] = true;\r\n        _isExcludedFromFees[tokenDistributionWallets.dev_wallet] = true;\r\n       \r\n        for (uint i = 0; i < _whlist.length; i++) {\r\n            _isExcludedFromFees[_whlist[i]] = true;\r\n            _isExcludedFromWallet[_whlist[i]] = true;\r\n        }\r\n\r\n\r\n        emit Transfer(address(0), tokenDistributionWallets.liquidity_operations,  _tTotal * 650 / 1000);\r\n        emit Transfer(address(0), tokenDistributionWallets.team_advisors, _tTotal * 100 / 1000);\r\n        emit Transfer(address(0), tokenDistributionWallets.marketing,  _tTotal * 100 / 1000);\r\n        emit Transfer(address(0), tokenDistributionWallets.private_sell,  _tTotal * 50 / 1000);\r\n        emit Transfer(address(0), tokenDistributionWallets.dev_wallet,  _tTotal * 100 / 1000);\r\n    }\r\n\r\n\r\n    function applyTaxes(address from, uint256 amount, bool buy, bool sell) internal returns (uint256) {\r\n        uint256 currentFee;\r\n        if (buy) {\r\n            currentFee = _taxRates.buyFee;\r\n        } else if (sell) {\r\n            currentFee = _taxRates.sellFee;\r\n        } else {\r\n            currentFee = _taxRates.transferFee;\r\n        }\r\n        if (currentFee == 0) { return amount; }\r\n        uint256 feeAmount = amount * currentFee / masterTaxDivisor;\r\n        if (feeAmount > 0) {\r\n            _tOwned[address(this)] += feeAmount;\r\n            emit Transfer(from, address(this), feeAmount);\r\n        }\r\n        return amount - feeAmount;\r\n    }\r\n\r\n\r\n    function settleUpdate(address from, address to, uint256 amount, bool buy, bool sell, bool other) internal returns (bool) {\r\n        bool takeFee = true;\r\n        if (_isExcludedFromFees[from] || _isExcludedFromFees[to]){\r\n            takeFee = false;\r\n        }\r\n\r\n\r\n        _tOwned[from] -= amount;\r\n        uint256 amountReceived = (takeFee) ? applyTaxes(from, amount, buy, sell) : amount;\r\n        _tOwned[to] += amountReceived;\r\n        emit Transfer(from, to, amountReceived);\r\n        if (!_hasLiqBeenAdded) {\r\n            _checkLiquidityAdd(from, to);\r\n            if (!_hasLiqBeenAdded && _hasLimits(from, to) && !_isExcludedFromProtection[from] && !_isExcludedFromProtection[to] && !other) {\r\n                revert(\"Pre-liquidity transfer protection.\");\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n\r\n    function _checkLiquidityAdd(address from, address to) internal {\r\n        require(!_hasLiqBeenAdded, \"Liquidity already added and marked.\");\r\n        if (!_hasLimits(from, to) && to == lpPair) {\r\n            _isExcludedFromFees[from] = true;\r\n            _hasLiqBeenAdded = true;\r\n            _liquidityHolders[from] = true;\r\n            if (address(initializer) == address(0)){\r\n                initializer = IInitializer(address(this));\r\n            }\r\n            emit ContractSwapEnabledUpdated(true);\r\n            contractSwapEnabled = true;\r\n        }\r\n    }\r\n\r\n\r\n    function contractSwap(uint256 contractTokenBalance) internal inSwapFlag {\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = dexRouter.WETH();\r\n\r\n\r\n        Ratios memory ratios = _ratios;\r\n        if (ratios.totalSwap == 0) {\r\n            return;\r\n        }\r\n\r\n\r\n        if (_allowances[address(this)][address(dexRouter)] != type(uint256).max) {\r\n            _allowances[address(this)][address(dexRouter)] = type(uint256).max;\r\n        }\r\n\r\n\r\n        try dexRouter.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            contractTokenBalance,\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        ) {} catch {\r\n            return;\r\n        }\r\n\r\n\r\n        uint256 amtBalance = address(this).balance;\r\n        bool success;\r\n        uint256 developmentBalance = (amtBalance * ratios.development) / ratios.totalSwap;\r\n        uint256 teamBalance = (amtBalance * ratios.team) / ratios.totalSwap;\r\n        uint256 stakingBalance = (amtBalance * ratios.staking) / ratios.totalSwap;\r\n        uint256 marketingBalance = amtBalance - (stakingBalance + developmentBalance + teamBalance);\r\n        if (ratios.development > 0) {\r\n            (success,) = _taxWallets.development.call{value: developmentBalance, gas: 55000}(\"\");\r\n        }\r\n        if (ratios.team > 0) {\r\n            (success,) = _taxWallets.team.call{value: teamBalance, gas: 55000}(\"\");\r\n        }\r\n        if (ratios.marketing > 0) {\r\n            (success,) = _taxWallets.marketing.call{value: marketingBalance, gas: 55000}(\"\");\r\n        }\r\n        if (ratios.staking > 0) {\r\n            (success,) = _taxWallets.staking.call{value: stakingBalance, gas: 55000}(\"\");\r\n            if (addRewardsEnabled) {\r\n                try IStaking(_taxWallets.staking).addRewards(stakingBalance) {} catch {}\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    function _transfer(address from, address to, uint256 amount) internal returns (bool) {\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n        require(amount > 0, \"Transfer amount must be greater than zero\");\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n\r\n\r\n        bool sell = false;\r\n        bool other = false;\r\n        bool buy = false;\r\n        if (lpPairs[from]) {\r\n            buy = true;\r\n        } else if (lpPairs[to]) {\r\n            sell = true;\r\n            if(!_isExcludedFromWallet[from]){\r\n                if (amount>max_transaction){\r\n                    revert(\"Transaction Exceeds Max Transaction\");}\r\n                    }\r\n        } else {\r\n            other = true;\r\n        }\r\n\r\n        if (!_isExcludedFromWallet[to]){\r\n            if (_tOwned[to]+amount>max_wallet){\r\n                revert(\"Transaction Exceeds Max Wallet\");\r\n            }\r\n        }\r\n\r\n\r\n        if (_hasLimits(from, to)) {\r\n            if(!tradingEnabled) {\r\n                if (!other) {\r\n                    revert(\"Trading not yet enabled!\");\r\n                } else if (!_isExcludedFromProtection[from] && !_isExcludedFromProtection[to]) {\r\n                    revert(\"Tokens cannot be moved until trading is live.\");\r\n                }\r\n            }\r\n        }\r\n\r\n\r\n        if (sell) {\r\n            if (!_isExcludedFromFees[from]){\r\n                require(_lastSwapTime[from]+sellCooldownTime < block.timestamp, \"You need to wait before selling again\");\r\n                _lastSwapTime[from]=block.timestamp;\r\n            }\r\n            if (!inSwap) {\r\n                if (contractSwapEnabled) {\r\n                    uint256 contractTokenBalance = balanceOf(address(this));\r\n                    if (contractTokenBalance >= swapThreshold) {\r\n                        uint256 swapAmt = swapAmount;\r\n                        if (piContractSwapsEnabled) { swapAmt = (balanceOf(lpPair) * piSwapPercent) / masterTaxDivisor; }\r\n                        if (contractTokenBalance >= swapAmt) { contractTokenBalance = swapAmt; }\r\n                        contractSwap(contractTokenBalance);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return settleUpdate(from, to, amount, buy, sell, other);\r\n    }\r\n\r\n\r\n    function _hasLimits(address from, address to) internal view returns (bool) {\r\n        return from != _owner\r\n            && tx.origin != _owner\r\n            && !_liquidityHolders[to]\r\n            && !_liquidityHolders[from]\r\n            && to != DEAD\r\n            && to != address(0)\r\n            && from != address(this)\r\n            && from != address(initializer)\r\n            && to != address(initializer)\r\n            && to != _owner;\r\n    }\r\n\r\n\r\n    function getTokenAmountAtPriceImpact(uint256 priceImpactInHundreds) external view returns (uint256) {\r\n        return((balanceOf(lpPair) * priceImpactInHundreds) / masterTaxDivisor);\r\n    }\r\n\r\n    \r\n    function getCirculatingSupply() public view returns (uint256) {\r\n        return (_tTotal - (balanceOf(DEAD) + balanceOf(address(0))));\r\n    }\r\n\r\n\r\n    function isExcludedFromProtection(address account) external view returns (bool) {\r\n        return _isExcludedFromProtection[account];\r\n    }\r\n\r\n\r\n    function isExcludedFromFees(address account) external view returns(bool) {\r\n        return _isExcludedFromFees[account];\r\n    }\r\n   \r\n    function isExcludedFromWallet(address account) external view returns(bool) {\r\n        return _isExcludedFromWallet[account];\r\n    }\r\n    function CoolDownTime() external view returns(uint256)  {\r\n        return sellCooldownTime;\r\n    }\r\n    function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool) {\r\n        if (_allowances[sender][msg.sender] != type(uint256).max) {\r\n            _allowances[sender][msg.sender] -= amount;\r\n        }\r\n\r\n\r\n        return _transfer(sender, recipient, amount);\r\n    }\r\n    function MaxWalletTokens() external view returns(uint256)  {\r\n        return max_wallet;\r\n    }\r\n    function MaxTransactionTokens() external view returns(uint256)  {\r\n        return max_transaction;\r\n    }\r\n    function _approve(address sender, address spender, uint256 amount) internal {\r\n        require(spender != address(0), \"ERC20: Zero Address\");\r\n        require(sender != address(0), \"ERC20: Zero Address\");\r\n\r\n\r\n        emit Approval(sender, spender, amount);\r\n        _allowances[sender][spender] = amount;\r\n    }\r\n\r\n\r\n    function approve(address spender, uint256 amount) external override returns (bool) {\r\n        _approve(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n\r\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(msg.sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n\r\n    /** OWNER FUNCTIONS */\r\n\r\n\r\n    function startStaking(bool _enable) external onlyOwner {\r\n        addRewardsEnabled = _enable;\r\n    }\r\n\r\n    function resetWallets(address[] memory _whlist) external onlyOwner {\r\n        for (uint i = 0; i < _whlist.length; i++) {\r\n            _isExcludedFromFees[_whlist[i]] = false;\r\n            _isExcludedFromWallet[_whlist[i]] = false;\r\n        }\r\n    }\r\n    \r\n    function distributeCoins(address[] memory accounts, uint256[] memory amounts) external onlyOwner {\r\n        for (uint16 i = 0; i < accounts.length; i++) {\r\n            require(balanceOf(msg.sender) >= amounts[i]*10**_decimals, \"Not enough tokens.\");\r\n            settleUpdate(msg.sender, accounts[i], amounts[i]*10**_decimals, false, false, true);\r\n        }\r\n        require(accounts.length == amounts.length, \"Lengths do not match.\");\r\n    }\r\n\r\n\r\n    function sweepExternalTokens(address token) external onlyOwner {\r\n        IERC20 TOKEN = IERC20(token);\r\n        TOKEN.transfer(_owner, TOKEN.balanceOf(address(this)));\r\n    }\r\n\r\n\r\n    function sweepContingency() external onlyOwner {\r\n        payable(_owner).transfer(address(this).balance);\r\n        require(!_hasLiqBeenAdded, \"Cannot call after liquidity.\");\r\n    }\r\n\r\n\r\n    function enableTrading() public onlyOwner {\r\n        if (address(initializer) == address(0)){\r\n            initializer = IInitializer(address(this));\r\n        }\r\n        require(_hasLiqBeenAdded, \"Liquidity must be added.\");\r\n        require(!tradingEnabled, \"Trading already enabled!\");\r\n        try initializer.setLaunch(lpPair, uint32(block.number), uint64(block.timestamp), _decimals) {} catch {}\r\n        try initializer.getInits(balanceOf(lpPair)) returns (uint256 initThreshold, uint256 initSwapAmount) {\r\n            swapAmount = initSwapAmount;\r\n            swapThreshold = initThreshold;\r\n        } catch {}\r\n        launchStamp = block.timestamp;\r\n        tradingEnabled = true;\r\n    }\r\n\r\n\r\n    function setContractSwapEnabled(bool swapEnabled, bool priceImpactSwapEnabled) external onlyOwner {\r\n        emit ContractSwapEnabledUpdated(swapEnabled);\r\n        piContractSwapsEnabled = priceImpactSwapEnabled;\r\n        contractSwapEnabled = swapEnabled;\r\n    }\r\n\r\n\r\n    function setPriceImpactSwapAmount(uint256 priceImpactSwapPercent) external onlyOwner {\r\n        piSwapPercent = priceImpactSwapPercent;\r\n        require(priceImpactSwapPercent <= 150, \"Cannot set above 1.5%.\");\r\n    }\r\n\r\n\r\n    function setSwapSettings(uint256 thresholdPercent, uint256 thresholdDivisor, uint256 amountPercent, uint256 amountDivisor) external onlyOwner {\r\n        swapAmount = (_tTotal * amountPercent) / amountDivisor;\r\n        swapThreshold = (_tTotal * thresholdPercent) / thresholdDivisor;\r\n        require(swapAmount <= (balanceOf(lpPair) * 150) / masterTaxDivisor, \"Cannot be above 1.5% of current PI.\");\r\n        require(swapAmount >= _tTotal / 1_000_000, \"Cannot be lower than 0.00001% of total supply.\");\r\n        require(swapThreshold >= _tTotal / 1_000_000, \"Cannot be lower than 0.00001% of total supply.\");\r\n        require(swapThreshold <= swapAmount, \"Threshold cannot be above amount.\");\r\n    }\r\n\r\n\r\n    function setRecipients(address payable marketing, address payable staking, address payable development, address payable team) external onlyOwner {\r\n        _taxWallets.development = payable(development);\r\n        _taxWallets.staking = payable(staking);\r\n        _taxWallets.team = payable(team);\r\n        _taxWallets.marketing = payable(marketing);\r\n        require(marketing != address(0) && staking != address(0) && development != address(0) && team != address(0), \"Cannot be zero address.\");\r\n    }\r\n\r\n\r\n    function setAllocations(uint16 marketing, uint16 development, uint16 team, uint16 staking) external onlyOwner {\r\n        uint256 total = _taxRates.buyFee + _taxRates.sellFee;\r\n\r\n\r\n        _ratios.development = development;\r\n        _ratios.team = team;\r\n        _ratios.staking = staking;\r\n        _ratios.marketing = marketing;\r\n        _ratios.totalSwap = marketing + staking + development + team;\r\n\r\n\r\n        require(_ratios.totalSwap <= total, \"Cannot exceed sum of buy and sell fees.\");\r\n    }\r\n   \r\n    function setMaxWallet(uint256 maxWallet, uint256 maxTransaction) external onlyOwner {\r\n        max_wallet = _tTotal * maxWallet / 1000;\r\n        max_transaction = _tTotal * maxTransaction / 1000;\r\n        require(max_wallet <= _tTotal, \"Cannot exceed Total supply.\");\r\n        require(max_transaction <= _tTotal, \"Cannot exceed Total supply.\");\r\n    }\r\n\r\n\r\n    function setTaxes(uint16 buyFee, uint16 sellFee, uint16 transferFee) external onlyOwner {\r\n        require(!taxesAreLocked, \"Taxes are locked.\");\r\n        require(_taxRates.sellFee>sellFee,\"Protects community against increasing taxes\");\r\n        require(_taxRates.buyFee>buyFee, \"Protects community against increasing taxes\");\r\n\r\n\r\n        _taxRates.sellFee = sellFee;\r\n        _taxRates.transferFee = transferFee;\r\n        _taxRates.buyFee = buyFee;\r\n\r\n\r\n        if (block.timestamp >= launchStamp + 3 days && launchStamp != 0) {\r\n            require(buyFee <= maxBuyTaxes\r\n                    && sellFee <= maxSellTaxes\r\n                    && transferFee <= maxTransferTaxes,\r\n                    \"Cannot exceed maximums.\");\r\n        }\r\n\r\n\r\n    }\r\n\r\n\r\n    function freezeTaxes() external onlyOwner {\r\n        // This will lock taxes at their current value forever, do not call this unless you're sure.\r\n        taxesAreLocked = true;\r\n    }\r\n\r\n\r\n    function setExcludedFromProtection(address account, bool enabled) external onlyOwner {\r\n        _isExcludedFromProtection[account] = enabled;\r\n    }\r\n\r\n\r\n    function setExcludedFromFees(address account, bool enabled) public onlyOwner {\r\n        _isExcludedFromFees[account] = enabled;\r\n    }\r\n   \r\n    function setSellCooldownTime(uint256 selltime) public onlyOwner {\r\n        sellCooldownTime = selltime;\r\n    }\r\n\r\n\r\n    function setExcludedFromWallet(address account, bool enabled) public onlyOwner {\r\n        _isExcludedFromWallet[account] = enabled;\r\n    }\r\n\r\n\r\n    function setInitializer(address init) public onlyOwner {\r\n        require(init != address(this), \"Can't be self.\");\r\n        require(!tradingEnabled);\r\n        initializer = IInitializer(init);\r\n        try initializer.getConfig() returns (address router, address constructorLP) {\r\n            dexRouter = IRouter02(router); lpPair = constructorLP; lpPairs[lpPair] = true;\r\n            _approve(address(this), address(dexRouter), type(uint256).max);\r\n            _approve(_owner, address(dexRouter), type(uint256).max);\r\n        } catch { revert(); }\r\n    }\r\n\r\n\r\n    function setLpPair(address pair, bool enabled) external onlyOwner {\r\n        if (!enabled) {\r\n            lpPairs[pair] = false;\r\n            initializer.setLpPair(pair, false);\r\n        } else {\r\n            require(!lpPairs[pair], \"Pair already added to list.\");\r\n            if (timeSinceLastPair != 0) {\r\n                require(block.timestamp - timeSinceLastPair > 3 days, \"3 Day cooldown.\");\r\n            }\r\n            timeSinceLastPair = block.timestamp;\r\n            lpPairs[pair] = true;\r\n            initializer.setLpPair(pair, true);\r\n        }\r\n    }\r\n\r\n\r\n    function setNewRouter(address newRouter) external onlyOwner {\r\n        IRouter02 _newRouter = IRouter02(newRouter);\r\n        require(!_hasLiqBeenAdded, \"Cannot change after liquidity.\");\r\n\r\n\r\n        address get_pair = IFactoryV2(_newRouter.factory()).getPair(address(this), _newRouter.WETH());\r\n        lpPairs[lpPair] = false;\r\n        if (get_pair == address(0)) {\r\n            lpPair = IFactoryV2(_newRouter.factory()).createPair(address(this), _newRouter.WETH());\r\n        }\r\n        else {\r\n            lpPair = get_pair;\r\n        }\r\n\r\n\r\n        _isExcludedFromWallet[lpPair]=true;\r\n        _isExcludedFromWallet[newRouter]=true;\r\n\r\n\r\n        lpPairs[lpPair] = true;\r\n        dexRouter = _newRouter;\r\n        _approve(address(this), address(dexRouter), type(uint256).max);\r\n    }\r\n\r\n\r\n    function approveContractContingency() external onlyOwner returns (bool) {\r\n        _approve(address(this), address(dexRouter), type(uint256).max);\r\n        return true;\r\n    }\r\n\r\n\r\n    function revokeAccess() external onlyOwner {\r\n        setExcludedFromFees(_owner, false);\r\n        address oldOwner = _owner;\r\n        _owner = address(0);\r\n\r\n\r\n        emit OwnershipTransferred(oldOwner, address(0));\r\n        require(tradingEnabled, \"Cannot renounce until trading has been enabled.\");\r\n    }\r\n\r\n\r\n    function changeAdmin(address newOwner) external onlyOwner {\r\n        require(newOwner != DEAD, \"Call revokeAccess to transfer owner to the zero address.\");\r\n        require(newOwner != address(0), \"Call revokeAccess to transfer owner to the zero address.\");\r\n        setExcludedFromFees(newOwner, true);\r\n        setExcludedFromFees(_owner, false);\r\n       \r\n        if (balanceOf(_owner) > 0) {\r\n            settleUpdate(_owner, newOwner, balanceOf(_owner), false, false, true);\r\n        }\r\n       \r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n       \r\n    }\r\n\r\n\r\n    receive() external payable {}\r\n    function totalSupply() external pure override returns (uint256) { return _tTotal; }\r\n    function decimals() external pure override returns (uint8) { return _decimals; }\r\n    function symbol() external pure override returns (string memory) { return _symbol; }\r\n    function name() external pure override returns (string memory) { return _name; }\r\n    function getOwner() external view override returns (address) { return _owner; }\r\n    function allowance(address holder, address spender) external view override returns (uint256) { return _allowances[holder][spender]; }\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _tOwned[account];\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountCurrency\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountTokens\",\"type\":\"uint256\"}],\"name\":\"AutoLiquify\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"ContractSwapEnabledUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CoolDownTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEAD\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MaxTransactionTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MaxWalletTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_hasLiqBeenAdded\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_ratios\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"marketing\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"development\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"staking\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"team\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"totalSwap\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_taxRates\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"buyFee\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"sellFee\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"transferFee\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_taxWallets\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"marketing\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"development\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"team\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"staking\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"addRewardsEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"approveContractContingency\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"changeAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractSwapEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dexRouter\",\"outputs\":[{\"internalType\":\"contract IRouter02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"distributeCoins\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"freezeTaxes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCirculatingSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"priceImpactInHundreds\",\"type\":\"uint256\"}],\"name\":\"getTokenAmountAtPriceImpact\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_whlist\",\"type\":\"address[]\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromFees\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromProtection\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromWallet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchStamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxBuyTaxes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSellTaxes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTransferTaxes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"max_transaction\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"max_wallet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"piContractSwapsEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"piSwapPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_whlist\",\"type\":\"address[]\"}],\"name\":\"resetWallets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"revokeAccess\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellCooldownTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"marketing\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"development\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"team\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"staking\",\"type\":\"uint16\"}],\"name\":\"setAllocations\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"swapEnabled\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"priceImpactSwapEnabled\",\"type\":\"bool\"}],\"name\":\"setContractSwapEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"setExcludedFromFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"setExcludedFromProtection\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"setExcludedFromWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"init\",\"type\":\"address\"}],\"name\":\"setInitializer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"setLpPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxWallet\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxTransaction\",\"type\":\"uint256\"}],\"name\":\"setMaxWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newRouter\",\"type\":\"address\"}],\"name\":\"setNewRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"priceImpactSwapPercent\",\"type\":\"uint256\"}],\"name\":\"setPriceImpactSwapAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"marketing\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"staking\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"development\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"team\",\"type\":\"address\"}],\"name\":\"setRecipients\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"selltime\",\"type\":\"uint256\"}],\"name\":\"setSellCooldownTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"thresholdPercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"thresholdDivisor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountPercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountDivisor\",\"type\":\"uint256\"}],\"name\":\"setSwapSettings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"buyFee\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"sellFee\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"transferFee\",\"type\":\"uint16\"}],\"name\":\"setTaxes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enable\",\"type\":\"bool\"}],\"name\":\"startStaking\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sweepContingency\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"sweepExternalTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"taxesAreLocked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenDistributionWallets\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"team_advisors\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"marketing\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dev_wallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"private_sell\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"liquidity_operations\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "Bndr", "CompilerVersion": "v0.8.25+commit.b61c2a91", "OptimizationUsed": "1", "Runs": "50", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://4043f4038b83b0ea1aa2f34b45f4e5a68db83b545d75895fdc443694b7a262a5"}