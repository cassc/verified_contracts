{"SourceCode": "// SPDX-License-Identifier: EPL\r\npragma solidity ^0.8.19;\r\n\r\nstruct Request {\r\n    string transaction_id;\r\n    uint8 request_id;\r\n    uint256 value;\r\n    address owner_token_address; //Owner address in ADD_OWNER and REMOVE_OWNER, Token address in EXECUTE_TRANSACTION\r\n    address callee;\r\n    bytes data;\r\n}\r\n\r\nstruct TaggedRequest {\r\n    string transaction_id;\r\n    uint8 request_id;\r\n    uint256 value;\r\n    address owner_token_address;\r\n    address callee;\r\n    bytes data;\r\n    address originator;\r\n}\r\n\r\nstruct OwnersRules {\r\n    uint8 OWNERS_NEEDED_FOR_CLAIM;\r\n    uint8 OWNERS_NEEDED_FOR_ADD_OWNER;\r\n    uint8 OWNERS_NEEDED_FOR_REMOVE_OWNER;\r\n    uint8 OWNERS_NEEDED_FOR_REMOVE_TRANSACTION;\r\n    uint8 OWNER_EXIST;\r\n    uint8 MIN_OWNERS;\r\n}\r\n\r\nenum REQUEST_IDS {\r\n    EXECUTE_TRANSACTION,\r\n    ADD_OWNER,\r\n    REMOVE_OWNER,\r\n    REMOVE_REQUEST,\r\n    EXECUTE_TRANSACTION_WITH_APPROVAL\r\n}\r\n\r\nerror NotEnoughApprovals();\r\nerror RequestNotSupported();\r\nerror NotAnOwner();\r\nerror NotEnoughOwners();\r\nerror TransactionExist();\r\nerror ApprovalNotNeeded();\r\nerror OwnerExist();\r\nerror OwnerNotExist();\r\nerror ApprovalAlreadyExist();\r\nerror FailedClaim();\r\nerror FailedMint();\r\nerror FailedWithdrow();\r\nerror MinimumAmountOfOwners();\r\nerror OwnerRemovalViolation();\r\nerror TransactionError(bytes result);\r\nerror BalanceError(uint256 value, uint256 balance);\r\nerror TokenBalanceError(uint256 value, uint256 balance);\r\nerror MyCustomError(address caller, uint256 details);   \r\n\r\ninterface IERC20 {\r\n    function transfer(address _to, uint256 _value) external returns (bool);\r\n    function approve(address _spender, uint256 _amount) external returns (bool);\r\n    function increaseAllowance(address _spender, uint256 _addedValue) external returns (bool);\r\n    function balanceOf(address account) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n}\r\n\r\ncontract TweedClaimer {\r\n    uint8 public _number_of_owners;\r\n    string public _version;\r\n    mapping(address => uint8) private _owners;\r\n    mapping(string => address[]) internal _approvals;\r\n    mapping(string => TaggedRequest) public _requests;\r\n\r\n    OwnersRules _rules =\r\n        OwnersRules(\r\n            0, // OWNERS_NEEDED_FOR_CLAIM\r\n            3, // OWNERS_NEEDED_FOR_ADD_OWNER\r\n            3, // OWNERS_NEEDED_FOR_REMOVE_OWNER\r\n            0, // OWNERS_NEEDED_FOR_REMOVE_TRANSACTION\r\n            1, // OWNER_EXIST\r\n            3 // MIN_OWNERS\r\n        );\r\n\r\n    constructor(address[] memory owners, string memory version) {\r\n        if (owners.length < _rules.MIN_OWNERS) {\r\n            revert NotEnoughOwners();\r\n        }\r\n\r\n        for (uint8 i = 0; i < owners.length; ++i) {\r\n            addOwner(\"0xconstructor\", owners[i]);\r\n        }\r\n\r\n        _version = version;\r\n    }\r\n\r\n    //----- Events -----//\r\n\r\n    event TransactionExecuted(\r\n        address indexed callee,\r\n        uint256 value,\r\n        string transactionId\r\n    );\r\n    event TransactionNotExecuted(\r\n        address indexed callee,\r\n        uint256 value,\r\n        string transactionId,\r\n        bytes result\r\n    );\r\n    event OwnerAdded(string);\r\n    event OwnerDeleted(string);\r\n    event TransactionRemoved(string);\r\n    event FallbackCalled();\r\n    event ApprovalAdded(string, address[]);\r\n    event RequestAdded(string, uint8, address);\r\n    event TokenTransferred(address, uint256);\r\n    event TokenIncreaseAllowance(address indexed target, uint256 value);\r\n    event test(address token_address, uint256 value);\r\n\r\n\r\n\r\n    //----- Modifiers -----//\r\n\r\n    modifier onlyOwner() {\r\n        require(_owners[msg.sender] == _rules.OWNER_EXIST);\r\n            _;\r\n    }\r\n\r\n    //----- Internal -----//\r\n\r\n    function checkApprovals(string memory transaction_id) internal {\r\n        TaggedRequest memory req = _requests[transaction_id];\r\n        address[] memory approvals = _approvals[transaction_id];\r\n\r\n        if (uint8(REQUEST_IDS.EXECUTE_TRANSACTION) == req.request_id) {\r\n            if (_rules.OWNERS_NEEDED_FOR_CLAIM <= approvals.length) {\r\n                removeTransaction(transaction_id);\r\n                executeExternalTx(\r\n                    req.callee,\r\n                    req.value,\r\n                    req.data,\r\n                    req.owner_token_address,\r\n                    req.transaction_id\r\n                );\r\n            }\r\n        } else if (uint8(REQUEST_IDS.EXECUTE_TRANSACTION_WITH_APPROVAL) == req.request_id) {\r\n            if (_rules.OWNERS_NEEDED_FOR_CLAIM <= approvals.length) {\r\n                removeTransaction(transaction_id);\r\n                executeExternalTxApprove(\r\n                    req.callee,\r\n                    req.value,\r\n                    req.data,\r\n                    req.owner_token_address,\r\n                    req.transaction_id\r\n                );\r\n            }\r\n        } else if (uint8(REQUEST_IDS.ADD_OWNER) == req.request_id) {\r\n            if (_rules.OWNERS_NEEDED_FOR_ADD_OWNER <= approvals.length) {\r\n                removeTransaction(transaction_id);\r\n                addOwner(req.transaction_id, req.owner_token_address);\r\n            }\r\n        } else if (uint8(REQUEST_IDS.REMOVE_OWNER) == req.request_id) {\r\n            if (_rules.OWNERS_NEEDED_FOR_REMOVE_OWNER <= approvals.length) {\r\n                removeTransaction(transaction_id);\r\n                removeOwner(req.transaction_id, req.owner_token_address);\r\n            }\r\n        } else if (uint8(REQUEST_IDS.REMOVE_REQUEST) == req.request_id) {\r\n            if (\r\n                _rules.OWNERS_NEEDED_FOR_REMOVE_TRANSACTION <= approvals.length\r\n            ) {\r\n                removeTransaction(transaction_id);\r\n            }\r\n        } else {\r\n            revert RequestNotSupported();\r\n        }\r\n    }\r\n\r\n    function removeTransaction(string memory transaction_id) internal {\r\n        delete _approvals[transaction_id];\r\n        delete _requests[transaction_id];\r\n        emit TransactionRemoved(transaction_id);\r\n    }\r\n\r\n    function addApproval(string memory transaction_id) internal {\r\n        for (uint8 i = 0; i < _approvals[transaction_id].length; ++i) {\r\n            if (_approvals[transaction_id][i] == msg.sender) {\r\n                revert ApprovalAlreadyExist();\r\n            }\r\n        }\r\n\r\n        _approvals[transaction_id].push(msg.sender);\r\n        emit ApprovalAdded(transaction_id, _approvals[transaction_id]);\r\n    }\r\n\r\n    function send_erc20_tokens(address token_address, uint256 value, address target) internal {\r\n        IERC20 token = IERC20(address(token_address));\r\n        if(token.transfer(target, value)) {\r\n            emit TokenTransferred(target, value);\r\n        }\r\n    }\r\n\r\n    function approveOrIncreaseAllowance(address tokenAddress, uint256 value, address target) internal {\r\n        IERC20 token = IERC20(tokenAddress);\r\n        \r\n        (bool successIncrease) = token.increaseAllowance(target, value);\r\n        if (successIncrease) {\r\n            emit TokenIncreaseAllowance(target, value);\r\n            return;\r\n        }\r\n\r\n        uint256 currentAllowance = token.allowance(address(this), target);\r\n        uint256 newAllowance = currentAllowance + value;\r\n        \r\n        require(token.approve(target, newAllowance), \"Allowance setting failed\");\r\n        emit TokenIncreaseAllowance(target, value);\r\n    }\r\n\r\n    function get_erc20_token_balance(address token_address) internal view returns(uint256)  {\r\n        return IERC20(address(token_address)).balanceOf(address(this));\r\n    }\r\n\r\nfunction executeExternalTxApprove(\r\n        address callee,\r\n        uint256 value,\r\n        bytes memory data,\r\n        address token_address,\r\n        string memory transactionId\r\n    ) internal returns (bytes memory) {\r\n        emit test(token_address,value);\r\n\r\n        if(token_address != address(0)) {\r\n            approveOrIncreaseAllowance(token_address, value, callee);\r\n            (bool success, bytes memory result) = callee.call(data);\r\n            if(success) {\r\n                emit TransactionExecuted(callee, value, transactionId);\r\n            }else {\r\n                emit TransactionNotExecuted(callee, value, transactionId, result);\r\n                revert TransactionError(result);\r\n            }\r\n             return result;\r\n\r\n        }\r\n        else if(value > address(this).balance) {\r\n            revert BalanceError(value, address(this).balance);\r\n        }\r\n\r\n            (bool success, bytes memory result) = callee.call{value: value}(data);\r\n            if(success) {\r\n                emit TransactionExecuted(callee, value, transactionId);\r\n            } else {\r\n                emit TransactionNotExecuted(callee, value, transactionId, result);\r\n                revert TransactionError(result);\r\n            }\r\n            return result;\r\n\r\n    }\r\n\r\n    function executeExternalTx(\r\n        address callee,\r\n        uint256 value,\r\n        bytes memory data,\r\n        address token_address,\r\n        string memory transactionId\r\n    ) internal returns (bytes memory) {\r\n\r\n        if(token_address != address(0)) {\r\n           if(value < get_erc20_token_balance(token_address)) {\r\n            send_erc20_tokens(token_address, value, callee);\r\n               value = 0;\r\n            }\r\n            else {\r\n                revert TokenBalanceError(value, get_erc20_token_balance(token_address));\r\n            }\r\n        }\r\n        else if(value > address(this).balance) {\r\n            revert BalanceError(value, address(this).balance);\r\n        }\r\n\r\n        (bool success, bytes memory result) = callee.call{value: value}(data);\r\n        if(success) {\r\n            emit TransactionExecuted(callee, value, transactionId);\r\n        }\r\n        else {\r\n            emit TransactionNotExecuted(callee, value, transactionId, result);\r\n            revert TransactionError(result);\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    function addOwner(string memory tid, address ownerAddress) internal {\r\n        if (_owners[ownerAddress] == _rules.OWNER_EXIST) {\r\n            revert OwnerExist();\r\n        }\r\n\r\n        _owners[ownerAddress] = _rules.OWNER_EXIST;\r\n        _number_of_owners++;\r\n        emit OwnerAdded(tid);\r\n    }\r\n\r\n    function removeOwner(string memory tid, address wallet_to_remove) internal {\r\n        if (_number_of_owners <= _rules.MIN_OWNERS) {\r\n            revert MinimumAmountOfOwners();\r\n        }\r\n\r\n        if (_owners[wallet_to_remove] != _rules.OWNER_EXIST) {\r\n            revert OwnerNotExist();\r\n        }\r\n\r\n        delete _owners[wallet_to_remove];\r\n        _number_of_owners--;\r\n        emit OwnerDeleted(tid);\r\n    }\r\n\r\n    function isOwner(address checkAddress) internal view returns (bool) {\r\n        if (_owners[checkAddress] == _rules.OWNER_EXIST) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    //---- interface ----//\r\n    function request(Request memory req) public onlyOwner {\r\n\r\n        TaggedRequest memory tagged_request = TaggedRequest(    req.transaction_id, \r\n                                                                req.request_id, \r\n                                                                req.value, \r\n                                                                req.owner_token_address,\r\n                                                                req.callee, \r\n                                                                req.data,\r\n                                                                msg.sender);\r\n\r\n        //Check if the transaction is already exist\r\n        if (tagged_request.request_id != uint8(REQUEST_IDS.REMOVE_REQUEST)) {\r\n            if (\r\n                bytes(_requests[tagged_request.transaction_id].transaction_id).length != 0\r\n            ) {\r\n                revert TransactionExist();\r\n            }\r\n        }\r\n\r\n        //Prevent an admin to deny his own removal by others. \r\n        //Only the originator of the removal request can cancel the removal it.\r\n        if (tagged_request.request_id == uint8(REQUEST_IDS.REMOVE_REQUEST)) {\r\n            if (tagged_request.originator != _requests[tagged_request.transaction_id].originator) {\r\n                revert OwnerRemovalViolation();\r\n            }\r\n        }\r\n\r\n        _requests[tagged_request.transaction_id] = tagged_request;\r\n        emit RequestAdded(\r\n            tagged_request.transaction_id,\r\n            uint8(tagged_request.request_id),\r\n            tagged_request.owner_token_address\r\n        );\r\n\r\n        checkApprovals(tagged_request.transaction_id);\r\n    }\r\n\r\n    function batchRequest(Request[] memory requests) public onlyOwner {\r\n        for (uint i = 0; i < requests.length; i++) {\r\n            request(requests[i]);\r\n        }\r\n    }\r\n\r\n    function approve(string memory transaction_id) public onlyOwner {\r\n        if (bytes(_requests[transaction_id].transaction_id).length > 0) {\r\n            addApproval(transaction_id);\r\n            checkApprovals(transaction_id);\r\n        } else {\r\n            revert ApprovalNotNeeded();\r\n        }\r\n    }\r\n\r\n    receive() external payable {\r\n\r\n    }\r\n\r\n    function withdraw(uint amount) external onlyOwner() {\r\n        (bool success, ) = msg.sender.call{value: amount}(\"\");\r\n        require(success, \"Transfer failed.\");\r\n    }\r\n\r\n    function withdrawERC20(uint amount, address token_address) external onlyOwner() {\r\n        send_erc20_tokens(token_address, amount, msg.sender);  \r\n    }\r\n\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"owners\",\"type\":\"address[]\"},{\"internalType\":\"string\",\"name\":\"version\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ApprovalAlreadyExist\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ApprovalNotNeeded\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"BalanceError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MinimumAmountOfOwners\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotEnoughOwners\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OwnerExist\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OwnerNotExist\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OwnerRemovalViolation\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RequestNotSupported\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"TokenBalanceError\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"result\",\"type\":\"bytes\"}],\"name\":\"TransactionError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransactionExist\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"name\":\"ApprovalAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"FallbackCalled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"OwnerAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"OwnerDeleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"RequestAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TokenIncreaseAllowance\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"TokenTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"callee\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"transactionId\",\"type\":\"string\"}],\"name\":\"TransactionExecuted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"callee\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"transactionId\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"result\",\"type\":\"bytes\"}],\"name\":\"TransactionNotExecuted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"TransactionRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token_address\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"test\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_number_of_owners\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"_requests\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"transaction_id\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"request_id\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner_token_address\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"callee\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"originator\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_version\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"transaction_id\",\"type\":\"string\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"transaction_id\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"request_id\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner_token_address\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"callee\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct Request[]\",\"name\":\"requests\",\"type\":\"tuple[]\"}],\"name\":\"batchRequest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"transaction_id\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"request_id\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner_token_address\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"callee\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct Request\",\"name\":\"req\",\"type\":\"tuple\"}],\"name\":\"request\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token_address\",\"type\":\"address\"}],\"name\":\"withdrawERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "TweedClaimer", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000004000000000000000000000000b842cfcc3a9f993dec2be874818c9032d14ee58700000000000000000000000082105920eae96819ec354d3f2d270b49b22c1d0a000000000000000000000000c889e4dbc33766033fef179d071259c43e3194010000000000000000000000000b0691967454dfe32662100614585aab7d17ac3200000000000000000000000000000000000000000000000000000000000000013300000000000000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://2a1873be57781c11b1a8796aa0e811e3de7fcff9fdd70867cc987a40156dd103"}