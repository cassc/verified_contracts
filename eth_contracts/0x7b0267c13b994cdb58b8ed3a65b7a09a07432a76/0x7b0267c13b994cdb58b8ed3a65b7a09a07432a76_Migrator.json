{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"modules/migrator/contracts/Migrator.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-or-later\\npragma solidity 0.8.7;\\n\\nimport { ERC20Helper } from \\\"../modules/erc20-helper/src/ERC20Helper.sol\\\";\\n\\nimport { IERC20Like } from \\\"./interfaces/Interfaces.sol\\\";\\n\\ncontract Migrator {\\n\\n    address public immutable newToken;\\n    address public immutable oldToken;\\n\\n    constructor(address oldToken_, address newToken_) {\\n        require(IERC20Like(newToken_).decimals() == IERC20Like(oldToken_).decimals(), \\\"M:C:DECIMAL_MISMATCH\\\");\\n\\n        oldToken = oldToken_;\\n        newToken = newToken_;\\n    }\\n\\n    function migrate(uint256 amount_) external {\\n        migrate(msg.sender, amount_);\\n    }\\n\\n    function migrate(address owner_, uint256 amount_) public {\\n        require(amount_ != uint256(0),                                              \\\"M:M:ZERO_AMOUNT\\\");\\n        require(ERC20Helper.transferFrom(oldToken, owner_, address(this), amount_), \\\"M:M:TRANSFER_FROM_FAILED\\\");\\n        require(ERC20Helper.transfer(newToken, owner_, amount_),                    \\\"M:M:TRANSFER_FAILED\\\");\\n    }\\n\\n}\\n\"\r\n    },\r\n    \"modules/migrator/modules/erc20-helper/src/ERC20Helper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.8.7;\\n\\nimport { IERC20Like } from \\\"./interfaces/IERC20Like.sol\\\";\\n\\n/**\\n * @title Small Library to standardize erc20 token interactions.\\n */\\nlibrary ERC20Helper {\\n\\n    /**************************/\\n    /*** Internal Functions ***/\\n    /**************************/\\n\\n    function transfer(address token_, address to_, uint256 amount_) internal returns (bool success_) {\\n        return _call(token_, abi.encodeWithSelector(IERC20Like.transfer.selector, to_, amount_));\\n    }\\n\\n    function transferFrom(address token_, address from_, address to_, uint256 amount_) internal returns (bool success_) {\\n        return _call(token_, abi.encodeWithSelector(IERC20Like.transferFrom.selector, from_, to_, amount_));\\n    }\\n\\n    function approve(address token_, address spender_, uint256 amount_) internal returns (bool success_) {\\n        // If setting approval to zero fails, return false.\\n        if (!_call(token_, abi.encodeWithSelector(IERC20Like.approve.selector, spender_, uint256(0)))) return false;\\n\\n        // If `amount_` is zero, return true as the previous step already did this.\\n        if (amount_ == uint256(0)) return true;\\n\\n        // Return the result of setting the approval to `amount_`.\\n        return _call(token_, abi.encodeWithSelector(IERC20Like.approve.selector, spender_, amount_));\\n    }\\n\\n    function _call(address token_, bytes memory data_) private returns (bool success_) {\\n        if (token_.code.length == uint256(0)) return false;\\n\\n        bytes memory returnData;\\n        ( success_, returnData ) = token_.call(data_);\\n\\n        return success_ && (returnData.length == uint256(0) || abi.decode(returnData, (bool)));\\n    }\\n\\n}\\n\"\r\n    },\r\n    \"modules/migrator/contracts/interfaces/Interfaces.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-or-later\\npragma solidity 0.8.7;\\n\\ninterface IERC20Like {\\n\\n    function decimals() external view returns (uint8 decimals_);\\n\\n}\\n\"\r\n    },\r\n    \"modules/migrator/modules/erc20-helper/src/interfaces/IERC20Like.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.8.7;\\n\\n/// @title Interface of the ERC20 standard as needed by ERC20Helper.\\ninterface IERC20Like {\\n\\n    function approve(address spender_, uint256 amount_) external returns (bool success_);\\n\\n    function transfer(address recipient_, uint256 amount_) external returns (bool success_);\\n\\n    function transferFrom(address owner_, address recipient_, uint256 amount_) external returns (bool success_);\\n\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [\r\n      \"address-registry/=modules/address-registry/contracts/\",\r\n      \"contract-test-utils/=modules/globals/modules/contract-test-utils/contracts/\",\r\n      \"ds-test/=modules/forge-std/lib/ds-test/src/\",\r\n      \"erc20/=modules/erc20/\",\r\n      \"forge-std/=modules/forge-std/src/\",\r\n      \"globals/=modules/globals/\",\r\n      \"migrator/=modules/migrator/modules/erc20-helper/src/\",\r\n      \"non-transparent-proxy/=modules/globals/modules/non-transparent-proxy/\",\r\n      \"ntp/=modules/ntp/\"\r\n    ],\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": false,\r\n      \"bytecodeHash\": \"ipfs\"\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"oldToken_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newToken_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"migrate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"migrate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"newToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oldToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "Migrator", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "00000000000000000000000033349b282065b0284d756f0577fb39c158f935e60000000000000000000000001915a8de08a92b846df7c845e140e4b0714820bd", "EVMVersion": "london", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}