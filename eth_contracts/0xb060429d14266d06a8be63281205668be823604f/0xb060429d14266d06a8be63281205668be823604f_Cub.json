{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"lib/utils.sol/src/Cub.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n// SPDX-FileCopyrightText: 2023 Kiln <contact@kiln.fi>\\n//\\n// \u2588\u2588\u2557  \u2588\u2588\u2557\u2588\u2588\u2557\u2588\u2588\u2557     \u2588\u2588\u2588\u2557   \u2588\u2588\u2557\\n// \u2588\u2588\u2551 \u2588\u2588\u2554\u255d\u2588\u2588\u2551\u2588\u2588\u2551     \u2588\u2588\u2588\u2588\u2557  \u2588\u2588\u2551\\n// \u2588\u2588\u2588\u2588\u2588\u2554\u255d \u2588\u2588\u2551\u2588\u2588\u2551     \u2588\u2588\u2554\u2588\u2588\u2557 \u2588\u2588\u2551\\n// \u2588\u2588\u2554\u2550\u2588\u2588\u2557 \u2588\u2588\u2551\u2588\u2588\u2551     \u2588\u2588\u2551\u255a\u2588\u2588\u2557\u2588\u2588\u2551\\n// \u2588\u2588\u2551  \u2588\u2588\u2557\u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2551 \u255a\u2588\u2588\u2588\u2588\u2551\\n// \u255a\u2550\u255d  \u255a\u2550\u255d\u255a\u2550\u255d\u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d\u255a\u2550\u255d  \u255a\u2550\u2550\u2550\u255d\\n//\\npragma solidity >=0.8.17;\\n\\nimport \\\"openzeppelin-contracts/proxy/beacon/BeaconProxy.sol\\\";\\nimport \\\"./interfaces/IFixer.sol\\\";\\nimport \\\"./interfaces/IHatcher.sol\\\";\\nimport \\\"./interfaces/ICub.sol\\\";\\n\\n/// @title Cub\\n/// @author mortimr @ Kiln\\n/// @dev Unstructured Storage Friendly\\n/// @notice The cub is controlled by a Hatcher in charge of providing its status details and implementation address.\\ncontract Cub is Proxy, ERC1967Upgrade, ICub {\\n    /// @notice Initializer to not rely on the constructor.\\n    /// @param beacon The address of the beacon to pull its info from\\n    /// @param data The calldata to add to the initial call, if any\\n    // slither-disable-next-line naming-convention\\n    function ___initializeCub(address beacon, bytes memory data) external {\\n        if (_getBeacon() != address(0)) {\\n            revert CubAlreadyInitialized();\\n        }\\n        _upgradeBeaconToAndCall(beacon, data, false);\\n    }\\n\\n    /// @dev Internal utility to retrieve the implementation from the beacon.\\n    /// @return The implementation address\\n    // slither-disable-next-line dead-code\\n    function _implementation() internal view virtual override returns (address) {\\n        return IBeacon(_getBeacon()).implementation();\\n    }\\n\\n    /// @dev Prevents unauthorized calls.\\n    /// @dev This will make the method transparent, forcing unauthorized callers into the fallback.\\n    modifier onlyBeacon() {\\n        if (msg.sender != _getBeacon()) {\\n            _fallback();\\n        } else {\\n            _;\\n        }\\n    }\\n\\n    /// @dev Prevents unauthorized calls.\\n    /// @dev This will make the method transparent, forcing unauthorized callers into the fallback.\\n    modifier onlyMe() {\\n        if (msg.sender != address(this)) {\\n            _fallback();\\n        } else {\\n            _;\\n        }\\n    }\\n\\n    /// @inheritdoc ICub\\n    // slither-disable-next-line reentrancy-events\\n    function appliedFixes(address[] memory fixers) public onlyMe {\\n        emit AppliedFixes(fixers);\\n    }\\n\\n    /// @inheritdoc ICub\\n    function applyFix(address fixer) external onlyBeacon {\\n        _applyFix(fixer);\\n    }\\n\\n    /// @dev Retrieve the list of fixes for this cub from the hatcher.\\n    /// @param beacon Address of the hatcher acting as a beacon\\n    /// @return List of fixes to apply\\n    function _fixes(address beacon) internal view returns (address[] memory) {\\n        return IHatcher(beacon).fixes(address(this));\\n    }\\n\\n    /// @dev Retrieve the status for this cub from the hatcher.\\n    /// @param beacon Address of the hatcher acting as a beacon\\n    /// @return First value is true if fixes are pending, second value is true if cub is paused\\n    function _status(address beacon) internal view returns (address, bool, bool) {\\n        return IHatcher(beacon).status(address(this));\\n    }\\n\\n    /// @dev Commits fixes to the hatcher.\\n    /// @param beacon Address of the hatcher acting as a beacon\\n    function _commit(address beacon) internal {\\n        IHatcher(beacon).commitFixes();\\n    }\\n\\n    /// @dev Fetches the current cub status and acts accordingly.\\n    /// @param beacon Address of the hatcher acting as a beacon\\n    function _fix(address beacon) internal returns (address) {\\n        (address implementation, bool hasFixes, bool isPaused) = _status(beacon);\\n        if (isPaused && msg.sender != address(0)) {\\n            revert CalledWhenPaused(msg.sender);\\n        }\\n        if (hasFixes) {\\n            bool isStaticCall = false;\\n            address[] memory fixes = _fixes(beacon);\\n            // This is a trick to check if the current execution context\\n            // allows state modifications\\n            try this.appliedFixes(fixes) {}\\n            catch {\\n                isStaticCall = true;\\n            }\\n            // if we properly emitted AppliedFixes, we are not in a view or pure call\\n            // we can then apply fixes\\n            if (!isStaticCall) {\\n                for (uint256 idx = 0; idx < fixes.length;) {\\n                    if (fixes[idx] != address(0)) {\\n                        _applyFix(fixes[idx]);\\n                    }\\n\\n                    unchecked {\\n                        ++idx;\\n                    }\\n                }\\n                _commit(beacon);\\n            }\\n        }\\n        return implementation;\\n    }\\n\\n    /// @dev Applies the given fix, and reverts in case of error.\\n    /// @param fixer Address that implements the fix\\n    // slither-disable-next-line controlled-delegatecall,delegatecall-loop,low-level-calls\\n    function _applyFix(address fixer) internal {\\n        (bool success, bytes memory rdata) = fixer.delegatecall(abi.encodeCall(IFixer.fix, ()));\\n        if (!success) {\\n            revert FixDelegateCallError(fixer, rdata);\\n        }\\n        (success) = abi.decode(rdata, (bool));\\n        if (!success) {\\n            revert FixCallError(fixer);\\n        }\\n    }\\n\\n    /// @dev Fallback method that ends up forwarding calls as delegatecalls to the implementation.\\n    function _fallback() internal override(Proxy) {\\n        _beforeFallback();\\n        address beacon = _getBeacon();\\n        address implementation = _fix(beacon);\\n        _delegate(implementation);\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/proxy/beacon/BeaconProxy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/beacon/BeaconProxy.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IBeacon.sol\\\";\\nimport \\\"../Proxy.sol\\\";\\nimport \\\"../ERC1967/ERC1967Upgrade.sol\\\";\\n\\n/**\\n * @dev This contract implements a proxy that gets the implementation address for each call from an {UpgradeableBeacon}.\\n *\\n * The beacon address is stored in storage slot `uint256(keccak256('eip1967.proxy.beacon')) - 1`, so that it doesn't\\n * conflict with the storage layout of the implementation behind the proxy.\\n *\\n * _Available since v3.4._\\n */\\ncontract BeaconProxy is Proxy, ERC1967Upgrade {\\n    /**\\n     * @dev Initializes the proxy with `beacon`.\\n     *\\n     * If `data` is nonempty, it's used as data in a delegate call to the implementation returned by the beacon. This\\n     * will typically be an encoded function call, and allows initializing the storage of the proxy like a Solidity\\n     * constructor.\\n     *\\n     * Requirements:\\n     *\\n     * - `beacon` must be a contract with the interface {IBeacon}.\\n     */\\n    constructor(address beacon, bytes memory data) payable {\\n        _upgradeBeaconToAndCall(beacon, data, false);\\n    }\\n\\n    /**\\n     * @dev Returns the current beacon address.\\n     */\\n    function _beacon() internal view virtual returns (address) {\\n        return _getBeacon();\\n    }\\n\\n    /**\\n     * @dev Returns the current implementation address of the associated beacon.\\n     */\\n    function _implementation() internal view virtual override returns (address) {\\n        return IBeacon(_getBeacon()).implementation();\\n    }\\n\\n    /**\\n     * @dev Changes the proxy to use a new beacon. Deprecated: see {_upgradeBeaconToAndCall}.\\n     *\\n     * If `data` is nonempty, it's used as data in a delegate call to the implementation returned by the beacon.\\n     *\\n     * Requirements:\\n     *\\n     * - `beacon` must be a contract.\\n     * - The implementation returned by `beacon` must be a contract.\\n     */\\n    function _setBeacon(address beacon, bytes memory data) internal virtual {\\n        _upgradeBeaconToAndCall(beacon, data, false);\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/utils.sol/src/interfaces/IFixer.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// SPDX-FileCopyrightText: 2023 Kiln <contact@kiln.fi>\\n//\\n// \u2588\u2588\u2557  \u2588\u2588\u2557\u2588\u2588\u2557\u2588\u2588\u2557     \u2588\u2588\u2588\u2557   \u2588\u2588\u2557\\n// \u2588\u2588\u2551 \u2588\u2588\u2554\u255d\u2588\u2588\u2551\u2588\u2588\u2551     \u2588\u2588\u2588\u2588\u2557  \u2588\u2588\u2551\\n// \u2588\u2588\u2588\u2588\u2588\u2554\u255d \u2588\u2588\u2551\u2588\u2588\u2551     \u2588\u2588\u2554\u2588\u2588\u2557 \u2588\u2588\u2551\\n// \u2588\u2588\u2554\u2550\u2588\u2588\u2557 \u2588\u2588\u2551\u2588\u2588\u2551     \u2588\u2588\u2551\u255a\u2588\u2588\u2557\u2588\u2588\u2551\\n// \u2588\u2588\u2551  \u2588\u2588\u2557\u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2551 \u255a\u2588\u2588\u2588\u2588\u2551\\n// \u255a\u2550\u255d  \u255a\u2550\u255d\u255a\u2550\u255d\u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d\u255a\u2550\u255d  \u255a\u2550\u2550\u2550\u255d\\n//\\npragma solidity >=0.8.17;\\n\\n/// @title Fixer\\n/// @author mortimr @ Kiln\\n/// @dev Unstructured Storage Friendly\\n/// @notice The Hatcher can deploy, upgrade, fix and pause a set of instances called cubs.\\n///         All cubs point to the same common implementation.\\ninterface IFixer {\\n    /// @notice Interface to implement on a Fixer contract.\\n    /// @return isFixed True if fix was properly applied\\n    function fix() external returns (bool isFixed);\\n}\\n\"\r\n    },\r\n    \"lib/utils.sol/src/interfaces/IHatcher.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// SPDX-FileCopyrightText: 2023 Kiln <contact@kiln.fi>\\n//\\n// \u2588\u2588\u2557  \u2588\u2588\u2557\u2588\u2588\u2557\u2588\u2588\u2557     \u2588\u2588\u2588\u2557   \u2588\u2588\u2557\\n// \u2588\u2588\u2551 \u2588\u2588\u2554\u255d\u2588\u2588\u2551\u2588\u2588\u2551     \u2588\u2588\u2588\u2588\u2557  \u2588\u2588\u2551\\n// \u2588\u2588\u2588\u2588\u2588\u2554\u255d \u2588\u2588\u2551\u2588\u2588\u2551     \u2588\u2588\u2554\u2588\u2588\u2557 \u2588\u2588\u2551\\n// \u2588\u2588\u2554\u2550\u2588\u2588\u2557 \u2588\u2588\u2551\u2588\u2588\u2551     \u2588\u2588\u2551\u255a\u2588\u2588\u2557\u2588\u2588\u2551\\n// \u2588\u2588\u2551  \u2588\u2588\u2557\u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2551 \u255a\u2588\u2588\u2588\u2588\u2551\\n// \u255a\u2550\u255d  \u255a\u2550\u255d\u255a\u2550\u255d\u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d\u255a\u2550\u255d  \u255a\u2550\u2550\u2550\u255d\\n//\\npragma solidity >=0.8.17;\\n\\nimport \\\"openzeppelin-contracts/proxy/beacon/IBeacon.sol\\\";\\n\\n/// @title Hatcher Interface\\n/// @author mortimr @ Kiln\\n/// @dev Unstructured Storage Friendly\\n/// @notice The Hatcher can deploy, upgrade, fix and pause a set of instances called cubs.\\n///         All cubs point to the same coomon implementation.\\ninterface IHatcher is IBeacon {\\n    /// @notice Emitted when the system is globally paused.\\n    event GlobalPause();\\n\\n    /// @notice Emitted when the system is globally unpaused.\\n    event GlobalUnpause();\\n\\n    /// @notice Emitted when a specific cub is paused.\\n    /// @param cub Address of the cub being paused\\n    event Pause(address cub);\\n\\n    /// @notice Emitted when a specific cub is unpaused.\\n    /// @param cub Address of the cub being unpaused\\n    event Unpause(address cub);\\n\\n    /// @notice Emitted when a global fix is removed.\\n    /// @param index Index of the global fix being removed\\n    event DeletedGlobalFix(uint256 index);\\n\\n    /// @notice Emitted when a cub has properly applied a fix.\\n    /// @param cub Address of the cub that applied the fix\\n    /// @param fix Address of the fix was applied\\n    event AppliedFix(address cub, address fix);\\n\\n    /// @notice Emitted the common implementation is updated.\\n    /// @param implementation New common implementation address\\n    event Upgraded(address indexed implementation);\\n\\n    /// @notice Emitted a new cub is hatched.\\n    /// @param cub Address of the new instance\\n    /// @param cdata Calldata used to perform the atomic first call\\n    event Hatched(address indexed cub, bytes cdata);\\n\\n    /// @notice Emitted a the initial progress has been changed.\\n    /// @param initialProgress New initial progress value\\n    event SetInitialProgress(uint256 initialProgress);\\n\\n    /// @notice Emitted a new pauser is set.\\n    /// @param pauser Address of the new pauser\\n    event SetPauser(address pauser);\\n\\n    /// @notice Emitted a cub committed some global fixes.\\n    /// @param cub Address of the cub that applied the global fixes\\n    /// @param progress New cub progress\\n    event CommittedFixes(address cub, uint256 progress);\\n\\n    /// @notice Emitted a global fix is registered.\\n    /// @param fix Address of the new global fix\\n    /// @param index Index of the new global fix in the global fix array\\n    event RegisteredGlobalFix(address fix, uint256 index);\\n\\n    /// @notice The provided implementation is not a smart contract.\\n    /// @param implementation The provided implementation\\n    error ImplementationNotAContract(address implementation);\\n\\n    /// @notice Retrieve the common implementation.\\n    /// @return implementationAddress Address of the common implementation\\n    function implementation() external view returns (address implementationAddress);\\n\\n    /// @notice Retrieve cub status details.\\n    /// @param cub The address of the cub to fetch the status of\\n    /// @return implementationAddress The current implementation address to use\\n    /// @return hasFixes True if there are fixes to apply\\n    /// @return isPaused True if the system is paused globally or the calling cub is paused\\n    function status(address cub) external view returns (address implementationAddress, bool hasFixes, bool isPaused);\\n\\n    /// @notice Retrieve the initial progress.\\n    /// @dev This value is the starting progress value for all new cubs\\n    /// @return currentInitialProgress The initial progress\\n    function initialProgress() external view returns (uint256 currentInitialProgress);\\n\\n    /// @notice Retrieve the current progress of a specific cub.\\n    /// @param cub Address of the cub\\n    /// @return currentProgress The current progress of the cub\\n    function progress(address cub) external view returns (uint256 currentProgress);\\n\\n    /// @notice Retrieve the global pause status.\\n    /// @return isGlobalPaused True if globally paused\\n    function globalPaused() external view returns (bool isGlobalPaused);\\n\\n    /// @notice Retrieve a cub pause status.\\n    /// @param cub Address of the cub\\n    /// @return isPaused True if paused\\n    function paused(address cub) external view returns (bool isPaused);\\n\\n    /// @notice Retrieve the address of the pauser.\\n    function pauser() external view returns (address);\\n\\n    /// @notice Retrieve a cub's global fixes that need to be applied, taking its progress into account.\\n    /// @param cub Address of the cub\\n    /// @return fixesAddresses An array of addresses that implement fixes\\n    function fixes(address cub) external view returns (address[] memory fixesAddresses);\\n\\n    /// @notice Retrieve the raw list of global fixes.\\n    /// @return globalFixesAddresses An array of addresses that implement the global fixes\\n    function globalFixes() external view returns (address[] memory globalFixesAddresses);\\n\\n    /// @notice Retrieve the address of the next hatched cub.\\n    /// @return nextHatchedCub The address of the next cub\\n    function nextHatch() external view returns (address nextHatchedCub);\\n\\n    /// @notice Retrieve the freeze status.\\n    /// @return True if frozen\\n    function frozen() external view returns (bool);\\n\\n    /// @notice Retrieve the timestamp when the freeze happens.\\n    /// @return The freeze timestamp\\n    function freezeTime() external view returns (uint256);\\n\\n    /// @notice Creates a new cub.\\n    /// @param cdata The calldata to use for the initial atomic call\\n    /// @return cubAddress The address of the new cub\\n    function hatch(bytes calldata cdata) external returns (address cubAddress);\\n\\n    /// @notice Creates a new cub, without calldata.\\n    /// @return cubAddress The address of the new cub\\n    function hatch() external returns (address cubAddress);\\n\\n    /// @notice Sets the progress of the caller to the current global fixes array length.\\n    function commitFixes() external;\\n\\n    /// @notice Sets the address of the pauser.\\n    /// @param newPauser Address of the new pauser\\n    function setPauser(address newPauser) external;\\n\\n    /// @notice Apply a fix to several cubs.\\n    /// @param fixer Fixer contract implementing the fix\\n    /// @param cubs List of cubs to apply the fix on\\n    function applyFixToCubs(address fixer, address[] calldata cubs) external;\\n\\n    /// @notice Apply several fixes to one cub.\\n    /// @param cub The cub to apply the fixes on\\n    /// @param fixers List of fixer contracts implementing the fixes\\n    function applyFixesToCub(address cub, address[] calldata fixers) external;\\n\\n    /// @notice Register a new global fix for cubs to call asynchronously.\\n    /// @param fixer Address of the fixer implementing the fix\\n    function registerGlobalFix(address fixer) external;\\n\\n    /// @notice Deletes a global fix from the array.\\n    /// @param index Index of the global fix to remove\\n    function deleteGlobalFix(uint256 index) external;\\n\\n    /// @notice Upgrades the common implementation address.\\n    /// @param newImplementation Address of the new common implementation\\n    function upgradeTo(address newImplementation) external;\\n\\n    /// @notice Upgrades the common implementation address and the initial progress value.\\n    /// @param newImplementation Address of the new common implementation\\n    /// @param initialProgress_ The new initial progress value\\n    function upgradeToAndChangeInitialProgress(address newImplementation, uint256 initialProgress_) external;\\n\\n    /// @notice Sets the initial progress value.\\n    /// @param initialProgress_ The new initial progress value\\n    function setInitialProgress(uint256 initialProgress_) external;\\n\\n    /// @notice Sets the progress of a cub.\\n    /// @param cub Address of the cub\\n    /// @param newProgress New progress value\\n    function setCubProgress(address cub, uint256 newProgress) external;\\n\\n    /// @notice Pauses a set of cubs.\\n    /// @param cubs List of cubs to pause\\n    function pauseCubs(address[] calldata cubs) external;\\n\\n    /// @notice Unpauses a set of cubs.\\n    /// @param cubs List of cubs to unpause\\n    function unpauseCubs(address[] calldata cubs) external;\\n\\n    /// @notice Pauses all the cubs of the system.\\n    function globalPause() external;\\n\\n    /// @notice Unpauses all the cubs of the system.\\n    /// @dev If a cub was specifically paused, this method won't unpause it\\n    function globalUnpause() external;\\n\\n    /// @notice Sets the freeze timestamp.\\n    /// @param freezeTimeout The timeout to add to current timestamp before freeze happens\\n    function freeze(uint256 freezeTimeout) external;\\n\\n    /// @notice Cancels the freezing procedure.\\n    function cancelFreeze() external;\\n}\\n\"\r\n    },\r\n    \"lib/utils.sol/src/interfaces/ICub.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// SPDX-FileCopyrightText: 2023 Kiln <contact@kiln.fi>\\n//\\n// \u2588\u2588\u2557  \u2588\u2588\u2557\u2588\u2588\u2557\u2588\u2588\u2557     \u2588\u2588\u2588\u2557   \u2588\u2588\u2557\\n// \u2588\u2588\u2551 \u2588\u2588\u2554\u255d\u2588\u2588\u2551\u2588\u2588\u2551     \u2588\u2588\u2588\u2588\u2557  \u2588\u2588\u2551\\n// \u2588\u2588\u2588\u2588\u2588\u2554\u255d \u2588\u2588\u2551\u2588\u2588\u2551     \u2588\u2588\u2554\u2588\u2588\u2557 \u2588\u2588\u2551\\n// \u2588\u2588\u2554\u2550\u2588\u2588\u2557 \u2588\u2588\u2551\u2588\u2588\u2551     \u2588\u2588\u2551\u255a\u2588\u2588\u2557\u2588\u2588\u2551\\n// \u2588\u2588\u2551  \u2588\u2588\u2557\u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2551 \u255a\u2588\u2588\u2588\u2588\u2551\\n// \u255a\u2550\u255d  \u255a\u2550\u255d\u255a\u2550\u255d\u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d\u255a\u2550\u255d  \u255a\u2550\u2550\u2550\u255d\\n//\\npragma solidity >=0.8.17;\\n\\n/// @title Cub\\n/// @author mortimr @ Kiln\\n/// @dev Unstructured Storage Friendly\\n/// @notice The cub is controlled by a Hatcher in charge of providing its status details and implementation address.\\ninterface ICub {\\n    /// @notice An error occured when performing the delegatecall to the fix.\\n    /// @param fixer Address implementing the fix\\n    /// @param err The return data from the call error\\n    error FixDelegateCallError(address fixer, bytes err);\\n\\n    /// @notice The fix method failed by returning false.\\n    /// @param fixer Added implementing the fix\\n    error FixCallError(address fixer);\\n\\n    /// @notice A call was made while the cub was paused.\\n    /// @param caller The address that performed the call\\n    error CalledWhenPaused(address caller);\\n\\n    error CubAlreadyInitialized();\\n\\n    /// @notice Emitted when several fixes have been applied.\\n    /// @param fixes List of fixes to apply\\n    event AppliedFixes(address[] fixes);\\n\\n    /// @notice Public method that emits the AppliedFixes event.\\n    /// @dev Transparent to all callers except the cub itself\\n    /// @dev Only callable by the cub itself as a regular call\\n    /// @dev This method is used to detect the execution context (view/non-view)\\n    /// @param _fixers List of applied fixes\\n    function appliedFixes(address[] memory _fixers) external;\\n\\n    /// @notice Applies the provided fix.\\n    /// @dev Transparent to all callers except the hatcher\\n    /// @param _fixer The address of the contract implementing the fix to apply\\n    function applyFix(address _fixer) external;\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/proxy/beacon/IBeacon.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/proxy/Proxy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/Proxy.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\\n * be specified by overriding the virtual {_implementation} function.\\n *\\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\\n * different contract through the {_delegate} function.\\n *\\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\\n */\\nabstract contract Proxy {\\n    /**\\n     * @dev Delegates the current call to `implementation`.\\n     *\\n     * This function does not return to its internal call site, it will return directly to the external caller.\\n     */\\n    function _delegate(address implementation) internal virtual {\\n        assembly {\\n            // Copy msg.data. We take full control of memory in this inline assembly\\n            // block because it will not return to Solidity code. We overwrite the\\n            // Solidity scratch pad at memory position 0.\\n            calldatacopy(0, 0, calldatasize())\\n\\n            // Call the implementation.\\n            // out and outsize are 0 because we don't know the size yet.\\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\\n\\n            // Copy the returned data.\\n            returndatacopy(0, 0, returndatasize())\\n\\n            switch result\\n            // delegatecall returns 0 on error.\\n            case 0 {\\n                revert(0, returndatasize())\\n            }\\n            default {\\n                return(0, returndatasize())\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev This is a virtual function that should be overridden so it returns the address to which the fallback function\\n     * and {_fallback} should delegate.\\n     */\\n    function _implementation() internal view virtual returns (address);\\n\\n    /**\\n     * @dev Delegates the current call to the address returned by `_implementation()`.\\n     *\\n     * This function does not return to its internal call site, it will return directly to the external caller.\\n     */\\n    function _fallback() internal virtual {\\n        _beforeFallback();\\n        _delegate(_implementation());\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\\n     * function in the contract matches the call data.\\n     */\\n    fallback() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\\n     * is empty.\\n     */\\n    receive() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\\n     * call, or as part of the Solidity `fallback` or `receive` functions.\\n     *\\n     * If overridden should call `super._beforeFallback()`.\\n     */\\n    function _beforeFallback() internal virtual {}\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/proxy/ERC1967/ERC1967Upgrade.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeacon.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/StorageSlot.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract ERC1967Upgrade {\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(address newImplementation, bytes memory data, bool forceCall) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(address newImplementation, bytes memory data, bool forceCall) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlot.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822Proxiable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Emitted when the beacon is upgraded.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(Address.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            Address.isContract(IBeacon(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlot.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(address newBeacon, bytes memory data, bool forceCall) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/interfaces/draft-IERC1822.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822Proxiable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/StorageSlot.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [\r\n      \"deploy.sol/=lib/deploy.sol/src/\",\r\n      \"ds-test/=lib/forge-std/lib/ds-test/src/\",\r\n      \"forge-gas-snapshot/=lib/forge-gas-snapshot/src/\",\r\n      \"forge-std/=lib/forge-std/src/\",\r\n      \"openzeppelin-contracts/=lib/openzeppelin-contracts/contracts/\",\r\n      \"prb-math/=lib/utils.sol/lib/prb-math/contracts/\",\r\n      \"solmate/=lib/deploy.sol/lib/solmate/src/\",\r\n      \"utils.sol.test/=lib/utils.sol/test/\",\r\n      \"utils.sol/=lib/utils.sol/src/\",\r\n      \"erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/\",\r\n      \"vulcan/=lib/vulcan/src/\"\r\n    ],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": false,\r\n      \"bytecodeHash\": \"ipfs\"\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"london\",\r\n    \"viaIR\": false,\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"CalledWhenPaused\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CubAlreadyInitialized\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fixer\",\"type\":\"address\"}],\"name\":\"FixCallError\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fixer\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"err\",\"type\":\"bytes\"}],\"name\":\"FixDelegateCallError\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"fixes\",\"type\":\"address[]\"}],\"name\":\"AppliedFixes\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"___initializeCub\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"fixers\",\"type\":\"address[]\"}],\"name\":\"appliedFixes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fixer\",\"type\":\"address\"}],\"name\":\"applyFix\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "Cub", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "london", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}