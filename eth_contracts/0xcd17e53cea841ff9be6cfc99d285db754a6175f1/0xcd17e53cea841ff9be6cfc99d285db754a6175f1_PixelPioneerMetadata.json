{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@nftculture/nftc-contracts-private/contracts/access/v2/OwnableDeferral.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.11;\\n\\n/**\\n * @title OwnableDeferral\\n * @author @NiftyMike | @NFTCulture\\n * @dev Implements checks for contract admin operations. Will be Backed by\\n * OZ Ownable.\\n *\\n * This contract is helpful when a contract tree gets complicated,\\n * and multiple contracts need to leverage Ownable.\\n *\\n * Sample Implementation:\\n *\\n * modifier isOwner() override(...) {\\n *     _isOwner();\\n *     _;\\n * }\\n *\\n * function _isOwner() internal view override(...) {\\n *     _checkOwner();\\n * }\\n */\\nabstract contract OwnableDeferral {\\n    modifier isOwner() virtual;\\n\\n    function _isOwner() internal view virtual;\\n}\\n\"\r\n    },\r\n    \"@nftculture/nftc-contracts-private/contracts/access/v2/OwnableDeferralResolution.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.11;\\n\\n// OZ Libraries\\nimport '@openzeppelin/contracts/access/Ownable.sol';\\n\\n// Local References\\nimport './OwnableDeferral.sol';\\n\\n// Error Codes\\nerror CallerIsNotOwner();\\n\\n/**\\n * @title OwnableDeferralResolution\\n * @author @NiftyMike | @NFTCulture\\n * @dev Implements checks for contract admin (Owner) operations. Backed by OZ Ownable.\\n *\\n * Ownership is assigned to contract deployer wallet by default.\\n *\\n * NOTE: IMPORTANT - This resolution will work great in a simple inheritance situation,\\n * however, if multiple inheritance is involved, it might not adequately satisfy\\n * override (...) conditions. In those scenarios, this code should be used as a\\n * starting point and then adjusted appropriately.\\n */\\ncontract OwnableDeferralResolution is Ownable, OwnableDeferral {\\n    modifier isOwner() override {\\n        _isOwner();\\n        _;\\n    }\\n\\n    function _isOwner() internal view override {\\n        // Same as _checkOwner() but using error code instead of a require statement.\\n        if (owner() != _msgSender()) revert CallerIsNotOwner();\\n    }\\n}\\n\"\r\n    },\r\n    \"@nftculture/nftc-contracts-private/contracts/metadata/v1/CollectionMetadataManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.11;\\n\\n// OZ Libraries\\nimport '@openzeppelin/contracts/utils/Strings.sol';\\nimport '@openzeppelin/contracts/utils/Base64.sol';\\n\\n// Local References\\nimport '../../access/v2/OwnableDeferral.sol';\\nimport './TokenMetadataManager.sol';\\n\\n/**\\n * @title CollectionMetadataManager\\n * @author @NiftyMike | @NFTCulture\\n * @dev This contract builds on TokenMetadataManager to provide functionality that enables on-chain\\n * storage of NFT metadata for an entire NFT collection.\\n */\\nabstract contract CollectionMetadataManager is TokenMetadataManager, OwnableDeferral {\\n    using Strings for uint256;\\n\\n    string private _description;\\n    string private _external_url;\\n\\n    constructor(string memory __description, string memory __external_url) {\\n        _description = __description;\\n        _external_url = __external_url;\\n    }\\n\\n    function _getImageFieldValue(uint256 tokenType) internal view virtual returns (string memory);\\n\\n    function _getAnimationFieldValue(uint256 tokenType) internal view virtual returns (string memory);\\n\\n    function _convertJsonToEncodedString(string memory metadata) internal pure returns (string memory) {\\n        return string.concat('data:application/json;base64,', Base64.encode(bytes(metadata)));\\n    }\\n\\n    function _getMetadataJson(uint256 tokenId, uint256 tokenType) internal view returns (string memory) {\\n        return _constructMetadataAsJson(tokenId, tokenType);\\n    }\\n\\n    function _constructMetadataAsJson(uint256 tokenId, uint256 tokenType) internal view returns (string memory) {\\n        DynamicAttributesV1 memory tokenAttributes = _getTokenAttributesDefinition(tokenType);\\n\\n        // Token types are 1-index based.\\n        require(tokenAttributes.tokenType > 0, 'Invalid token type');\\n\\n        string memory imageFieldValue = _getImageFieldValue(tokenType);\\n        string memory animationFieldValue = _getAnimationFieldValue(tokenType);\\n\\n        return\\n            string.concat(\\n                '{\\\"name\\\":\\\"',\\n                tokenAttributes.title,\\n                tokenAttributes.isSerialized ? tokenId.toString() : '',\\n                '\\\",\\\"description\\\":\\\"',\\n                tokenAttributes.hasTokenDescription ? tokenAttributes.tokenDescription : _description,\\n                '\\\",\\\"image\\\":\\\"',\\n                imageFieldValue,\\n                tokenAttributes.isAnimated ? '\\\",\\\"animation_url\\\":\\\"' : '',\\n                tokenAttributes.isAnimated ? animationFieldValue : '',\\n                '\\\",\\\"attributes\\\":',\\n                _getNftAttributeArray(tokenAttributes),\\n                ',\\\"external_url\\\":\\\"',\\n                _external_url,\\n                '\\\"}'\\n            );\\n    }\\n\\n    function _getNftAttributeArray(DynamicAttributesV1 memory tokenAttributes) internal pure returns (string memory) {\\n        string memory attributeArrayAsString = '[';\\n\\n        uint256 tokenAttrIdx;\\n        for (tokenAttrIdx; tokenAttrIdx < tokenAttributes.attributeNames.length; tokenAttrIdx++) {\\n            attributeArrayAsString = string.concat(\\n                attributeArrayAsString,\\n                tokenAttrIdx == 0 ? '' : ',',\\n                '{\\\"trait_type\\\":\\\"',\\n                tokenAttributes.attributeNames[tokenAttrIdx],\\n                '\\\",\\\"value\\\":\\\"',\\n                tokenAttributes.attributeValues[tokenAttrIdx],\\n                '\\\"}'\\n            );\\n        }\\n\\n        return string.concat(attributeArrayAsString, ']');\\n    }\\n\\n    function modifyCollectionMetadata(string calldata __description, string calldata __external_url) external isOwner {\\n        if (bytes(__description).length > 0) {\\n            _description = __description;\\n        }\\n\\n        if (bytes(__external_url).length > 0) {\\n            _external_url = __external_url;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@nftculture/nftc-contracts-private/contracts/metadata/v1/interfaces/IChainNativeArtProducer.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.11;\\n\\n/**\\n * @title IChainNativeArtProducer\\n * @author @NiftyMike | @NFTCulture\\n * @dev Super thin interface definition for a contract that\\n * produces art in a chain native way.\\n */\\ninterface IChainNativeArtProducer {\\n    /**\\n     * Given a token type, return a string that can be directly inserted into an\\n     * NFT metadata attribute such as image.\\n     *\\n     * @param tokenType type of the art piece\\n     */\\n    function getArtAsString(uint256 tokenType) external view returns (string memory);\\n\\n    /**\\n     * Given a token type, return a string that can be directly inserted into an\\n     * NFT metadata attribute such as animation_url.\\n     *\\n     * @param tokenType type of the art piece\\n     */\\n    function getAnimationAsString(uint256 tokenType) external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"@nftculture/nftc-contracts-private/contracts/metadata/v1/interfaces/IChainNativeMetadataProducer.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.11;\\n\\n/**\\n * @title IChainNativeMetadataProducer\\n * @author @NiftyMike | @NFTCulture\\n * @dev Super thin interface definition for a contract that\\n * produces metadata in a chain native way.\\n */\\ninterface IChainNativeMetadataProducer {\\n    function getTokenTypeForToken(uint256 tokenId) external view returns (uint256);\\n\\n    function getJsonAsString(uint256 tokenId, uint256 tokenType) external view returns (string memory);\\n\\n    function getJsonAsEncodedString(uint256 tokenId, uint256 tokenType) external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"@nftculture/nftc-contracts-private/contracts/metadata/v1/interfaces/IDynamicAttributes.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.11;\\n\\n/**\\n * @title IDynamicAttributesV1\\n * @author @NFTMike | @NFTCulture\\n * @dev Interface for defining the structure of DynamicAttributes objects.\\n *\\n * This interface should capture all of the data relevant to a group of tokens being\\n * stored entirely on-chain.\\n *\\n * The interface is designed to allow the metadata to be modified and updated as needed.\\n *\\n * Besides the 'isAnimated' attribute, the interface is designed to be decoupled from\\n * the artwork scheme implemented for the related tokens. 'isAnimated' is just used\\n * as a cleaner and more deliberate approach than checking string length of an animation.\\n */\\ninterface IDynamicAttributesV1 {\\n    struct DynamicAttributesV1 {\\n        uint256 tokenType;\\n        bool isSerialized;\\n        bool isAnimated;\\n        bool hasTokenDescription;\\n        string title;\\n        string tokenDescription;\\n        string[] attributeNames;\\n        string[] attributeValues;\\n    }\\n}\\n\"\r\n    },\r\n    \"@nftculture/nftc-contracts-private/contracts/metadata/v1/SimpleChainNativeArtConsumer.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.11;\\n\\n// Local References\\nimport '../../access/v2/OwnableDeferral.sol';\\nimport './interfaces/IChainNativeArtProducer.sol';\\n\\n/**\\n * @title SimpleChainNativeArtConsumer\\n * @author @NiftyMike | @NFTCulture\\n * @dev Basic implementation to manage connections to an external source for NFT art.\\n */\\nabstract contract SimpleChainNativeArtConsumer is OwnableDeferral {\\n    // External contract that manages the collection's art in a chain-native way.\\n    IChainNativeArtProducer private _artProducer;\\n\\n    constructor(address __artProducer) {\\n        _setProducer(__artProducer);\\n    }\\n\\n    /**\\n     * @notice Set the on-chain art producer contract.\\n     * Can only be called if caller is owner.\\n     *\\n     * @param __artProducer address of the producer contract.\\n     */\\n    function setProducer(address __artProducer) external isOwner {\\n        _setProducer(__artProducer);\\n    }\\n\\n    function _setProducer(address __artProducer) internal {\\n        if (__artProducer != address(0)) {\\n            _artProducer = IChainNativeArtProducer(__artProducer);\\n        }\\n    }\\n\\n    function _getProducer() internal view virtual returns (IChainNativeArtProducer) {\\n        return _artProducer;\\n    }\\n}\\n\"\r\n    },\r\n    \"@nftculture/nftc-contracts-private/contracts/metadata/v1/TokenMetadataManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.11;\\n\\n// Local References\\nimport './interfaces/IDynamicAttributes.sol';\\n\\n// Error Codes\\nerror NullTokenType();\\nerror TokenAttributesDefinitionDoesNotExist();\\nerror TokenTypeAlreadyCreated();\\nerror TokenTypeCountExceeded();\\n\\n/**\\n * @title TokenMetadataManager\\n * @author @NiftyMike | @NFTCulture\\n * @dev This contract manages Non-Fungible Token Metadata fully on-chain and\\n * in a generic fashion.\\n *\\n * All metadata is contained within a map called _tokenAttributesDefinitions.\\n *\\n * In its basic implementation, the TokenMetadataManager does not allow for\\n * expansion of the token types. However, this could be added on by a subclass\\n * of this contract.\\n */\\nabstract contract TokenMetadataManager is IDynamicAttributesV1 {\\n    // Storage for Token Attribute Definitions\\n    mapping(uint256 => DynamicAttributesV1) private _tokenAttributesDefinitions;\\n    uint64[] private _tokenTypeIds;\\n\\n    uint256 private immutable _maxNumberOfTypes;\\n\\n    constructor(uint256 __maxNumberOfTypes) {\\n        _maxNumberOfTypes = __maxNumberOfTypes;\\n\\n        _injectDefinitions(_getInitialDefinitions());\\n    }\\n\\n    function _injectDefinitions(DynamicAttributesV1[] memory __tokenAttributesDefinition) internal virtual {\\n        uint256 idx;\\n        for (idx; idx < __tokenAttributesDefinition.length; ) {\\n            DynamicAttributesV1 memory current = __tokenAttributesDefinition[idx];\\n            _createTokenType(current);\\n\\n            unchecked {\\n                ++idx;\\n            }\\n        }\\n    }\\n\\n    function _getInitialDefinitions() internal virtual returns (DynamicAttributesV1[] memory);\\n\\n    function getTokenAttributesDefinition(uint256 tokenType) external view returns (DynamicAttributesV1 memory) {\\n        return _getTokenAttributesDefinition(tokenType);\\n    }\\n\\n    function _getTokenAttributesDefinition(uint256 tokenType) internal view returns (DynamicAttributesV1 memory) {\\n        return _tokenAttributesDefinitions[tokenType];\\n    }\\n\\n    function getTokenTypeIds() external view returns (uint64[] memory) {\\n        return _getTokenTypeIds();\\n    }\\n\\n    function _getTokenTypeIds() internal view returns (uint64[] memory) {\\n        return _tokenTypeIds;\\n    }\\n\\n    function _createTokenType(DynamicAttributesV1 memory tokenAttributes) internal {\\n        uint256 tokenType = tokenAttributes.tokenType;\\n\\n        if (tokenType == 0) revert NullTokenType();\\n        if (_tokenAttributesDefinitions[tokenType].tokenType > 0) revert TokenTypeAlreadyCreated();\\n        if (_maxNumberOfTypes > 0 && _tokenTypeIds.length + 1 > _maxNumberOfTypes) revert TokenTypeCountExceeded();\\n\\n        _tokenAttributesDefinitions[tokenType] = tokenAttributes;\\n        _tokenTypeIds.push(uint64(tokenType));\\n    }\\n\\n    function _updateTokenType(DynamicAttributesV1 memory tokenAttributes) internal {\\n        if (_tokenAttributesDefinitions[tokenAttributes.tokenType].tokenType == 0)\\n            revert TokenAttributesDefinitionDoesNotExist();\\n\\n        _tokenAttributesDefinitions[tokenAttributes.tokenType] = tokenAttributes;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Base64.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Base64.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides a set of functions to operate with Base64 strings.\\n *\\n * _Available since v4.5._\\n */\\nlibrary Base64 {\\n    /**\\n     * @dev Base64 Encoding/Decoding Table\\n     */\\n    string internal constant _TABLE = \\\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\\\";\\n\\n    /**\\n     * @dev Converts a `bytes` to its Bytes64 `string` representation.\\n     */\\n    function encode(bytes memory data) internal pure returns (string memory) {\\n        /**\\n         * Inspired by Brecht Devos (Brechtpd) implementation - MIT licence\\n         * https://github.com/Brechtpd/base64/blob/e78d9fd951e7b0977ddca77d92dc85183770daf4/base64.sol\\n         */\\n        if (data.length == 0) return \\\"\\\";\\n\\n        // Loads the table into memory\\n        string memory table = _TABLE;\\n\\n        // Encoding takes 3 bytes chunks of binary data from `bytes` data parameter\\n        // and split into 4 numbers of 6 bits.\\n        // The final Base64 length should be `bytes` data length multiplied by 4/3 rounded up\\n        // - `data.length + 2`  -> Round up\\n        // - `/ 3`              -> Number of 3-bytes chunks\\n        // - `4 *`              -> 4 characters for each chunk\\n        string memory result = new string(4 * ((data.length + 2) / 3));\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Prepare the lookup table (skip the first \\\"length\\\" byte)\\n            let tablePtr := add(table, 1)\\n\\n            // Prepare result pointer, jump over length\\n            let resultPtr := add(result, 32)\\n\\n            // Run over the input, 3 bytes at a time\\n            for {\\n                let dataPtr := data\\n                let endPtr := add(data, mload(data))\\n            } lt(dataPtr, endPtr) {\\n\\n            } {\\n                // Advance 3 bytes\\n                dataPtr := add(dataPtr, 3)\\n                let input := mload(dataPtr)\\n\\n                // To write each character, shift the 3 bytes (18 bits) chunk\\n                // 4 times in blocks of 6 bits for each character (18, 12, 6, 0)\\n                // and apply logical AND with 0x3F which is the number of\\n                // the previous character in the ASCII table prior to the Base64 Table\\n                // The result is then added to the table to get the character to write,\\n                // and finally write it in the result pointer but with a left shift\\n                // of 256 (1 byte) - 8 (1 ASCII char) = 248 bits\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(18, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(12, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(6, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(input, 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n            }\\n\\n            // When data `bytes` is not exactly 3 bytes long\\n            // it is padded with `=` characters at the end\\n            switch mod(mload(data), 3)\\n            case 1 {\\n                mstore8(sub(resultPtr, 1), 0x3d)\\n                mstore8(sub(resultPtr, 2), 0x3d)\\n            }\\n            case 2 {\\n                mstore8(sub(resultPtr, 1), 0x3d)\\n            }\\n        }\\n\\n        return result;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/SignedMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/KH87M/PixelPioneerMetadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.19;\\n\\n// Local References\\nimport './PixelPioneerMetadataBase.sol';\\n\\n/**\\n * @title PixelPioneerMetadata.\\n *                            .+.\\n *             -:       .:    :+.\\n *    --      :=.       :+    -=                                         .     ..                     .:-:\\n *    .+.    --         :+    =-   .:.                                 :++-.  .++=: ..              :==:-++==:\\n *     =-  .=:          :=    +.  -=::.:.               -.        .==..+=-+=  =+:+-.=====:         -+:  =+:.-+.\\n *     =-:=-       :.   ==----+  :+   =+:.-+-   ..                 ++..++++:  =++=-+:   -+:      .++=--=++=-++.\\n *     -=--==-.    :.   +-::.=-  +- .=-+:=::+. -+=     .:-.        =+.  .+=   :+=.=+:   -+:       +=:::=+..-+:\\n *     --    .--       .+.  .+:  ==-=: -+:  ===:.======-::+-       =+.  :+:   =+:-+-   :+=       .+=  .+--+-.\\n *     .-              .+.  :+.   :.                      :+.      .-    .    .-=-.    =+.        :==-=+=:.\\n *                      +:  .+                            :-                           ..            ..\\n *\\n *                                                On-Chain Metadata\\n */\\ncontract PixelPioneerMetadata is PixelPioneerMetadataBase {\\n    address private constant COMPANION_ART_CONTRACT = 0x8abC21a84992b8C50c086D5133D6B428b8FC7439; // PixelPioneerArtwork V1\\n    string private constant GENERIC_TOKEN_DESCRIPTION = 'Pixel Pioneer [Keith Haring Foundation](https://www.haring.com/) | [NFT Usage License](https://www.haring.com/!/nft-ownership-license)';\\n    string private constant TOKEN_EXTERNAL_URL = 'https://www.haring.com/';\\n    uint256 private constant NUMBER_OF_TOKEN_TYPES_ALLOWED = 5; // Max of 5 tokens.\\n\\n    constructor()\\n        SimpleChainNativeArtConsumer(COMPANION_ART_CONTRACT)\\n        TokenMetadataManager(NUMBER_OF_TOKEN_TYPES_ALLOWED)\\n        CollectionMetadataManager(GENERIC_TOKEN_DESCRIPTION, TOKEN_EXTERNAL_URL)\\n    {\\n        // Implementation version: v1.0.0\\n    }\\n\\n    /**\\n     *  struct DynamicAttributes {\\n     *     uint256 tokenType;\\n     *     bool isSerialized;\\n     *     bool isAnimated;\\n     *     bool hasTokenDescription;\\n     *     string title;\\n     *     string tokenDescription;\\n     *     string[] attributeNames;\\n     *     string[] attributeValues;\\n     *  }\\n     */\\n    function _getInitialDefinitions() internal pure override returns (DynamicAttributesV1[] memory) {\\n        string[] memory attributeFieldNames = new string[](4);\\n        attributeFieldNames[0] = 'ARTIST';\\n        attributeFieldNames[1] = 'LOCATION';\\n        attributeFieldNames[2] = 'YEAR';\\n        attributeFieldNames[3] = 'FILE FORMATS';\\n\\n        string[] memory tokenOneValues = new string[](4);\\n        tokenOneValues[0] = 'Keith Haring';\\n        tokenOneValues[1] = 'New York City, New York';\\n        tokenOneValues[2] = '1987';\\n        tokenOneValues[3] = 'PICT, PNG, SVG';\\n\\n        string[] memory tokenTwoValues = new string[](4);\\n        tokenOneValues[0] = 'Keith Haring';\\n        tokenOneValues[1] = 'New York City, New York';\\n        tokenOneValues[2] = '1987';\\n        tokenOneValues[3] = 'PICT, PNG, SVG';\\n\\n        string[] memory tokenThreeValues = new string[](4);\\n        tokenOneValues[0] = 'Keith Haring';\\n        tokenOneValues[1] = 'New York City, New York';\\n        tokenOneValues[2] = '1987';\\n        tokenOneValues[3] = 'PICT, PNG, SVG';\\n\\n        string[] memory tokenFourValues = new string[](4);\\n        tokenOneValues[0] = 'Keith Haring';\\n        tokenOneValues[1] = 'New York City, New York';\\n        tokenOneValues[2] = '1987';\\n        tokenOneValues[3] = 'PICT, PNG, SVG';\\n\\n        string[] memory tokenFiveValues = new string[](4);\\n        tokenOneValues[0] = 'Keith Haring';\\n        tokenOneValues[1] = 'New York City, New York';\\n        tokenOneValues[2] = '1987';\\n        tokenOneValues[3] = 'PICT, PNG, SVG';\\n\\n        DynamicAttributesV1[] memory initialAttributesDefinitions = new DynamicAttributesV1[](5);\\n\\n        initialAttributesDefinitions[0] = DynamicAttributesV1(\\n            1,\\n            false,\\n            false,\\n            false,\\n            'Untitled (April 14, 1987)',\\n            '',\\n            attributeFieldNames,\\n            tokenOneValues\\n        );\\n        initialAttributesDefinitions[1] = DynamicAttributesV1(\\n            2,\\n            false,\\n            false,\\n            false,\\n            'Untitled #1 (April 16, 1987)',\\n            '',\\n            attributeFieldNames,\\n            tokenTwoValues\\n        );\\n        initialAttributesDefinitions[2] = DynamicAttributesV1(\\n            3,\\n            false,\\n            false,\\n            false,\\n            'Untitled #2 (April 16, 1987)',\\n            '',\\n            attributeFieldNames,\\n            tokenThreeValues\\n        );\\n        initialAttributesDefinitions[3] = DynamicAttributesV1(\\n            4,\\n            false,\\n            false,\\n            false,\\n            'Untitled (Feb 2, 1987)',\\n            '',\\n            attributeFieldNames,\\n            tokenFourValues\\n        );\\n        initialAttributesDefinitions[4] = DynamicAttributesV1(\\n            5,\\n            false,\\n            false,\\n            false,\\n            'Untitled (Feb 3, 1987)',\\n            '',\\n            attributeFieldNames,\\n            tokenFiveValues\\n        );\\n\\n        return initialAttributesDefinitions;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/KH87M/PixelPioneerMetadataBase.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.11;\\n\\n// NFTC Prerelease Contracts\\nimport '@nftculture/nftc-contracts-private/contracts/access/v2/OwnableDeferralResolution.sol';\\nimport '@nftculture/nftc-contracts-private/contracts/metadata/v1/interfaces/IChainNativeMetadataProducer.sol';\\nimport '@nftculture/nftc-contracts-private/contracts/metadata/v1/SimpleChainNativeArtConsumer.sol';\\nimport '@nftculture/nftc-contracts-private/contracts/metadata/v1/CollectionMetadataManager.sol';\\n\\n/**\\n * @title PixelPioneerMetadataBase\\n * @author @NiftyMike | @NFTCulture\\n * @dev Basic On-Chain Metadata Implementation.\\n */\\nabstract contract PixelPioneerMetadataBase is\\n    CollectionMetadataManager,\\n    SimpleChainNativeArtConsumer,\\n    IChainNativeMetadataProducer,\\n    OwnableDeferralResolution\\n{\\n    function getTokenTypeForToken(uint256 tokenId) external pure override returns (uint256) {\\n        return tokenId + 1; // Token types are 1-index based.\\n    }\\n\\n    function getJsonAsString(uint256 tokenId, uint256 tokenType) external view override returns (string memory) {\\n        return _getMetadataJson(tokenId, tokenType);\\n    }\\n\\n    function getJsonAsEncodedString(uint256 tokenId, uint256 tokenType) external view override returns (string memory) {\\n        return _convertJsonToEncodedString(_getMetadataJson(tokenId, tokenType));\\n    }\\n\\n    function _getImageFieldValue(uint256 tokenType) internal view override returns (string memory) {\\n        return _getProducer().getArtAsString(tokenType);\\n    }\\n\\n    function _getAnimationFieldValue(uint256 tokenType) internal view override returns (string memory) {\\n        return _getProducer().getAnimationAsString(tokenType);\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1000\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"CallerIsNotOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NullTokenType\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TokenTypeAlreadyCreated\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TokenTypeCountExceeded\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenType\",\"type\":\"uint256\"}],\"name\":\"getJsonAsEncodedString\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenType\",\"type\":\"uint256\"}],\"name\":\"getJsonAsString\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenType\",\"type\":\"uint256\"}],\"name\":\"getTokenAttributesDefinition\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenType\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isSerialized\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isAnimated\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"hasTokenDescription\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"tokenDescription\",\"type\":\"string\"},{\"internalType\":\"string[]\",\"name\":\"attributeNames\",\"type\":\"string[]\"},{\"internalType\":\"string[]\",\"name\":\"attributeValues\",\"type\":\"string[]\"}],\"internalType\":\"struct IDynamicAttributesV1.DynamicAttributesV1\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getTokenTypeForToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokenTypeIds\",\"outputs\":[{\"internalType\":\"uint64[]\",\"name\":\"\",\"type\":\"uint64[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"__description\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"__external_url\",\"type\":\"string\"}],\"name\":\"modifyCollectionMetadata\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"__artProducer\",\"type\":\"address\"}],\"name\":\"setProducer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "PixelPioneerMetadata", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "1000", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}