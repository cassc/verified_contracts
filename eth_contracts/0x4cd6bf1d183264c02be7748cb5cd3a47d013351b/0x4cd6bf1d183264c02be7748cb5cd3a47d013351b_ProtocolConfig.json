{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"lib/euler-vault-kit/src/ProtocolConfig/ProtocolConfig.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IProtocolConfig.sol\\\";\\n\\ncontract ProtocolConfig is IProtocolConfig {\\n    error E_OnlyAdmin();\\n    error E_InvalidVault();\\n    error E_InvalidReceiver();\\n    error E_InvalidConfigValue();\\n    error E_InvalidAdmin();\\n\\n    struct InterestFeeRange {\\n        bool exists;\\n        uint16 minInterestFee;\\n        uint16 maxInterestFee;\\n    }\\n\\n    struct ProtocolFeeConfig {\\n        bool exists;\\n        address feeReceiver;\\n        uint16 protocolFeeShare;\\n    }\\n\\n    // max valid value of the EVault's ConfigAmount custom type, signifying 100%\\n    uint16 internal constant CONFIG_SCALE = 1e4;\\n\\n    /// @dev admin address\\n    address public admin;\\n    /// @dev protocol fee receiver, unless a vault has it configured otherwise\\n    address public feeReceiver;\\n    /// @dev protocol fee share, except for vaults configured otherwise\\n    uint16 internal protocolFeeShare;\\n\\n    /// @dev min interest fee, except for vaults configured otherwise\\n    uint16 internal minInterestFee;\\n    /// @dev max interest fee, except for vaults configured otherwise\\n    uint16 internal maxInterestFee;\\n\\n    /// @dev per-vault configuration of min/max interest fee range, takes priority over defaults\\n    mapping(address vault => InterestFeeRange) internal _interestFeeRanges;\\n    /// @dev per-vault configuration of protocol fee config, takes priority over defaults\\n    mapping(address vault => ProtocolFeeConfig) internal _protocolFeeConfig;\\n\\n    /// @notice Set global default allowed interest fee limits\\n    /// @param newMinInterestFee lower limit of allowed interest fee\\n    /// @param newMaxInterestFee upper limit of allowed interest fee\\n    event SetInterestFeeRange(uint16 newMinInterestFee, uint16 newMaxInterestFee);\\n\\n    /// @notice Set new fee receiver address\\n    /// @param newFeeReceiver new fee receiver address\\n    event SetFeeReceiver(address indexed newFeeReceiver);\\n\\n    /// @notice Set allowed interest fee limits override for a vault\\n    /// @param vault address of the vault\\n    /// @param exists if true a new setting was recorded, if false the override was disabled for the vault\\n    /// @param minInterestFee lower limit of allowed interest fee\\n    /// @param maxInterestFee upper limit of allowed interest fee\\n    event SetVaultInterestFeeRange(address indexed vault, bool exists, uint16 minInterestFee, uint16 maxInterestFee);\\n\\n    /// @notice Set interest fee configuration override for a vault\\n    /// @param vault address of the vault\\n    /// @param exists if true a new setting was recorded, if false the override was disabled for the vault\\n    /// @param feeReceiver address to receive protocol fees\\n    /// @param protocolFeeShare new protocol fee share\\n    event SetFeeConfigSetting(address indexed vault, bool exists, address indexed feeReceiver, uint16 protocolFeeShare);\\n\\n    /// @notice Set a new global default protocol fee share\\n    /// @param protocolFeeShare previous default protocol fee share\\n    /// @param newProtocolFeeShare new default protocol fee share\\n    event SetProtocolFeeShare(uint16 protocolFeeShare, uint16 newProtocolFeeShare);\\n\\n    /// @notice Transfer admin rights to a new address\\n    /// @param newAdmin address of the new admin\\n    event SetAdmin(address indexed newAdmin);\\n\\n    /// @dev constructor\\n    /// @param admin_ admin's address\\n    /// @param feeReceiver_ the address of the protocol fee receiver\\n    constructor(address admin_, address feeReceiver_) {\\n        if (admin_ == address(0)) revert E_InvalidAdmin();\\n        if (feeReceiver_ == address(0)) revert E_InvalidReceiver();\\n\\n        admin = admin_;\\n        feeReceiver = feeReceiver_;\\n\\n        minInterestFee = 0.1e4;\\n        maxInterestFee = 1e4;\\n        protocolFeeShare = 0.5e4;\\n    }\\n\\n    /// @inheritdoc IProtocolConfig\\n    function isValidInterestFee(address vault, uint16 interestFee) external view returns (bool) {\\n        InterestFeeRange memory range = _interestFeeRanges[vault];\\n\\n        if (range.exists) {\\n            return interestFee >= range.minInterestFee && interestFee <= range.maxInterestFee;\\n        }\\n\\n        return interestFee >= minInterestFee && interestFee <= maxInterestFee;\\n    }\\n\\n    /// @inheritdoc IProtocolConfig\\n    function protocolFeeConfig(address vault) external view returns (address, uint16) {\\n        ProtocolFeeConfig memory config = _protocolFeeConfig[vault];\\n\\n        if (config.exists) {\\n            return (config.feeReceiver, config.protocolFeeShare);\\n        }\\n\\n        return (feeReceiver, protocolFeeShare);\\n    }\\n\\n    /// @inheritdoc IProtocolConfig\\n    function interestFeeRange(address vault) external view returns (uint16, uint16) {\\n        InterestFeeRange memory ranges = _interestFeeRanges[vault];\\n\\n        if (ranges.exists) {\\n            return (ranges.minInterestFee, ranges.maxInterestFee);\\n        }\\n\\n        return (minInterestFee, maxInterestFee);\\n    }\\n\\n    // Admin functions\\n\\n    /// @dev modifier to check if sender is admin address\\n    modifier onlyAdmin() {\\n        if (msg.sender != admin) revert E_OnlyAdmin();\\n\\n        _;\\n    }\\n\\n    /// @notice set admin address\\n    /// @param newAdmin admin's address\\n    function setAdmin(address newAdmin) external onlyAdmin {\\n        if (newAdmin == address(0)) revert E_InvalidAdmin();\\n\\n        admin = newAdmin;\\n\\n        emit SetAdmin(newAdmin);\\n    }\\n\\n    /// @notice set protocol fee receiver\\n    /// @dev can only be called by admin\\n    /// @param newReceiver new receiver address\\n    function setFeeReceiver(address newReceiver) external onlyAdmin {\\n        if (newReceiver == address(0)) revert E_InvalidReceiver();\\n\\n        feeReceiver = newReceiver;\\n\\n        emit SetFeeReceiver(newReceiver);\\n    }\\n\\n    /// @notice set protocol fee share\\n    /// @dev can only be called by admin\\n    /// @param newProtocolFeeShare new protocol fee share\\n    function setProtocolFeeShare(uint16 newProtocolFeeShare) external onlyAdmin {\\n        if (newProtocolFeeShare > CONFIG_SCALE) revert E_InvalidConfigValue();\\n\\n        emit SetProtocolFeeShare(protocolFeeShare, newProtocolFeeShare);\\n\\n        protocolFeeShare = newProtocolFeeShare;\\n    }\\n\\n    /// @notice set generic min interest fee\\n    /// @dev can only be called by admin\\n    /// @param minInterestFee_ new min interest fee\\n    /// @param maxInterestFee_ new max interest fee\\n    function setInterestFeeRange(uint16 minInterestFee_, uint16 maxInterestFee_) external onlyAdmin {\\n        if (maxInterestFee_ > CONFIG_SCALE || minInterestFee_ > maxInterestFee_) revert E_InvalidConfigValue();\\n\\n        minInterestFee = minInterestFee_;\\n        maxInterestFee = maxInterestFee_;\\n\\n        emit SetInterestFeeRange(minInterestFee_, maxInterestFee_);\\n    }\\n\\n    /// @notice set interest fee range for specific vault\\n    /// @dev can only be called by admin\\n    /// @param vault vault's address\\n    /// @param exists_ a boolean to set or unset the ranges. When false, the generic ranges will be used for the vault\\n    /// @param minInterestFee_ min interest fee\\n    /// @param maxInterestFee_ max interest fee\\n    function setVaultInterestFeeRange(address vault, bool exists_, uint16 minInterestFee_, uint16 maxInterestFee_)\\n        external\\n        onlyAdmin\\n    {\\n        if (vault == address(0)) revert E_InvalidVault();\\n        if (maxInterestFee_ > CONFIG_SCALE || minInterestFee_ > maxInterestFee_) revert E_InvalidConfigValue();\\n\\n        _interestFeeRanges[vault] =\\n            InterestFeeRange({exists: exists_, minInterestFee: minInterestFee_, maxInterestFee: maxInterestFee_});\\n\\n        emit SetVaultInterestFeeRange(vault, exists_, minInterestFee_, maxInterestFee_);\\n    }\\n\\n    /// @notice set protocol fee config for specific vault\\n    /// @dev can only be called by admin\\n    /// @param vault vault's address\\n    /// @param exists_ a boolean to set or unset the config. When false, the generic config will be used for the vault\\n    /// @param feeReceiver_ fee receiver address\\n    /// @param protocolFeeShare_ fee share\\n    function setVaultFeeConfig(address vault, bool exists_, address feeReceiver_, uint16 protocolFeeShare_)\\n        external\\n        onlyAdmin\\n    {\\n        if (vault == address(0)) revert E_InvalidVault();\\n        if (exists_ && feeReceiver_ == address(0)) revert E_InvalidReceiver();\\n        if (protocolFeeShare_ > CONFIG_SCALE) revert E_InvalidConfigValue();\\n\\n        _protocolFeeConfig[vault] =\\n            ProtocolFeeConfig({exists: exists_, feeReceiver: feeReceiver_, protocolFeeShare: protocolFeeShare_});\\n\\n        emit SetFeeConfigSetting(vault, exists_, feeReceiver_, protocolFeeShare_);\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/euler-vault-kit/src/ProtocolConfig/IProtocolConfig.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity >=0.8.0;\\n\\n/// @title IProtocolConfig\\n/// @custom:security-contact security@euler.xyz\\n/// @author Euler Labs (https://www.eulerlabs.com/)\\n/// @notice Interface of the contract centralizing the protocol's (DAO's) configuration for all the EVault deployments\\ninterface IProtocolConfig {\\n    /// @notice check if a vault's interest fee is valid\\n    /// @param vault address of the vault\\n    /// @param interestFee an interest fee value to check\\n    /// @dev an interest fee is considered valid only when it is greater than or equal the min interest fee and less\\n    /// than or equal the max interest fee\\n    /// @dev if a vault has a specific interest fee ranges set by admin, it will be used, otherwise the generic ones\\n    /// will be checked against\\n    /// @return bool true for valid, else false\\n    function isValidInterestFee(address vault, uint16 interestFee) external view returns (bool);\\n\\n    /// @notice get protocol fee config for a certain vault\\n    /// @param vault address of the vault\\n    /// @dev if vault == address(0), the generic config will be returned\\n    /// @return address protocol fee receiver\\n    /// @return uint16 protocol fee share\\n    function protocolFeeConfig(address vault) external view returns (address, uint16);\\n\\n    /// @notice get interest fee ranges for a certain vault\\n    /// @param vault address of the vault\\n    /// @dev if vault == address(0), the generic ranges will be returned\\n    /// @return uint16 min interest fee\\n    /// @return uint16 max interest fee\\n    function interestFeeRange(address vault) external view returns (uint16, uint16);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [\r\n      \"openzeppelin-contracts/=lib/openzeppelin-contracts/contracts/\",\r\n      \"ethereum-vault-connector/=lib/ethereum-vault-connector/src/\",\r\n      \"evc/=lib/ethereum-vault-connector/src/\",\r\n      \"evk/=lib/euler-vault-kit/src/\",\r\n      \"evk-test/=lib/euler-vault-kit/test/\",\r\n      \"euler-price-oracle/=lib/euler-price-oracle/src/\",\r\n      \"euler-price-oracle-test/=lib/euler-price-oracle/test/\",\r\n      \"fee-flow/=lib/fee-flow/src/\",\r\n      \"reward-streams/=lib/reward-streams/src/\",\r\n      \"@openzeppelin/contracts/utils/math/=lib/euler-price-oracle/lib/openzeppelin-contracts/contracts/utils/math/\",\r\n      \"@pyth/=lib/euler-price-oracle/lib/pyth-sdk-solidity/\",\r\n      \"@redstone/evm-connector/=lib/euler-price-oracle/lib/redstone-oracles-monorepo/packages/evm-connector/contracts/\",\r\n      \"@solady/=lib/euler-price-oracle/lib/solady/src/\",\r\n      \"@uniswap/v3-core/=lib/euler-price-oracle/lib/v3-core/\",\r\n      \"@uniswap/v3-periphery/=lib/euler-price-oracle/lib/v3-periphery/\",\r\n      \"ds-test/=lib/fee-flow/lib/forge-std/lib/ds-test/src/\",\r\n      \"erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/\",\r\n      \"euler-vault-kit/=lib/euler-vault-kit/src/\",\r\n      \"forge-gas-snapshot/=lib/euler-vault-kit/lib/permit2/lib/forge-gas-snapshot/src/\",\r\n      \"forge-std/=lib/forge-std/src/\",\r\n      \"halmos-cheatcodes/=lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/\",\r\n      \"openzeppelin/=lib/ethereum-vault-connector/lib/openzeppelin-contracts/contracts/\",\r\n      \"permit2/=lib/euler-vault-kit/lib/permit2/\",\r\n      \"pyth-sdk-solidity/=lib/euler-price-oracle/lib/pyth-sdk-solidity/\",\r\n      \"redstone-oracles-monorepo/=lib/euler-price-oracle/lib/\",\r\n      \"solady/=lib/euler-price-oracle/lib/solady/src/\",\r\n      \"solmate/=lib/fee-flow/lib/solmate/src/\",\r\n      \"v3-core/=lib/euler-price-oracle/lib/v3-core/contracts/\",\r\n      \"v3-periphery/=lib/euler-price-oracle/lib/v3-periphery/contracts/\"\r\n    ],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 20000\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": false,\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"appendCBOR\": true\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"cancun\",\r\n    \"viaIR\": false,\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"admin_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"feeReceiver_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"E_InvalidAdmin\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"E_InvalidConfigValue\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"E_InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"E_InvalidVault\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"E_OnlyAdmin\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"SetAdmin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"exists\",\"type\":\"bool\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"feeReceiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"protocolFeeShare\",\"type\":\"uint16\"}],\"name\":\"SetFeeConfigSetting\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newFeeReceiver\",\"type\":\"address\"}],\"name\":\"SetFeeReceiver\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"newMinInterestFee\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"newMaxInterestFee\",\"type\":\"uint16\"}],\"name\":\"SetInterestFeeRange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"protocolFeeShare\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"newProtocolFeeShare\",\"type\":\"uint16\"}],\"name\":\"SetProtocolFeeShare\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"exists\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"minInterestFee\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"maxInterestFee\",\"type\":\"uint16\"}],\"name\":\"SetVaultInterestFeeRange\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"}],\"name\":\"interestFeeRange\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"interestFee\",\"type\":\"uint16\"}],\"name\":\"isValidInterestFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"}],\"name\":\"protocolFeeConfig\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"setAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newReceiver\",\"type\":\"address\"}],\"name\":\"setFeeReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"minInterestFee_\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"maxInterestFee_\",\"type\":\"uint16\"}],\"name\":\"setInterestFeeRange\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"newProtocolFeeShare\",\"type\":\"uint16\"}],\"name\":\"setProtocolFeeShare\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"exists_\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"feeReceiver_\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"protocolFeeShare_\",\"type\":\"uint16\"}],\"name\":\"setVaultFeeConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"exists_\",\"type\":\"bool\"},{\"internalType\":\"uint16\",\"name\":\"minInterestFee_\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"maxInterestFee_\",\"type\":\"uint16\"}],\"name\":\"setVaultInterestFeeRange\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "ProtocolConfig", "CompilerVersion": "v0.8.24+commit.e11b9ed9", "OptimizationUsed": "1", "Runs": "20000", "ConstructorArguments": "000000000000000000000000ee009faf00cf54c1b4387829af7a8dc5f0c8c8c5000000000000000000000000ee009faf00cf54c1b4387829af7a8dc5f0c8c8c5", "EVMVersion": "cancun", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}